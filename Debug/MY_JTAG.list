
MY_JTAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d530  200001c8  200001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  2000d6f8  2000d6f8  0000e6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000d758  2000d758  0000ea30  2**0
                  CONTENTS
  4 .ARM          00000008  2000d758  2000d758  0000e758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000d760  2000da30  0000ea30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000d760  2000d760  0000e760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  2000d764  2000d764  0000e764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  2000d768  2000d768  0000e768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000d8f0  2000d8f0  0000e8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000d990  2000d990  0000e990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001ee0  2000da30  2000da30  0000ea30  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000f910  2000f910  0000ea30  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000ea30  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ea09  00000000  00000000  0000ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ae3  00000000  00000000  0002d469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001888  00000000  00000000  00031f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012a8  00000000  00000000  000337d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa5c  00000000  00000000  00034a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020578  00000000  00000000  0005f4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f58ca  00000000  00000000  0007fa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017531e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000068dc  00000000  00000000  00175364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  0017bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c8 <__do_global_dtors_aux>:
200001c8:	b510      	push	{r4, lr}
200001ca:	4c05      	ldr	r4, [pc, #20]	@ (200001e0 <__do_global_dtors_aux+0x18>)
200001cc:	7823      	ldrb	r3, [r4, #0]
200001ce:	b933      	cbnz	r3, 200001de <__do_global_dtors_aux+0x16>
200001d0:	4b04      	ldr	r3, [pc, #16]	@ (200001e4 <__do_global_dtors_aux+0x1c>)
200001d2:	b113      	cbz	r3, 200001da <__do_global_dtors_aux+0x12>
200001d4:	4804      	ldr	r0, [pc, #16]	@ (200001e8 <__do_global_dtors_aux+0x20>)
200001d6:	f3af 8000 	nop.w
200001da:	2301      	movs	r3, #1
200001dc:	7023      	strb	r3, [r4, #0]
200001de:	bd10      	pop	{r4, pc}
200001e0:	2000da30 	.word	0x2000da30
200001e4:	00000000 	.word	0x00000000
200001e8:	2000d6e0 	.word	0x2000d6e0

200001ec <frame_dummy>:
200001ec:	b508      	push	{r3, lr}
200001ee:	4b03      	ldr	r3, [pc, #12]	@ (200001fc <frame_dummy+0x10>)
200001f0:	b11b      	cbz	r3, 200001fa <frame_dummy+0xe>
200001f2:	4903      	ldr	r1, [pc, #12]	@ (20000200 <frame_dummy+0x14>)
200001f4:	4803      	ldr	r0, [pc, #12]	@ (20000204 <frame_dummy+0x18>)
200001f6:	f3af 8000 	nop.w
200001fa:	bd08      	pop	{r3, pc}
200001fc:	00000000 	.word	0x00000000
20000200:	2000da34 	.word	0x2000da34
20000204:	2000d6e0 	.word	0x2000d6e0

20000208 <__aeabi_uldivmod>:
20000208:	b953      	cbnz	r3, 20000220 <__aeabi_uldivmod+0x18>
2000020a:	b94a      	cbnz	r2, 20000220 <__aeabi_uldivmod+0x18>
2000020c:	2900      	cmp	r1, #0
2000020e:	bf08      	it	eq
20000210:	2800      	cmpeq	r0, #0
20000212:	bf1c      	itt	ne
20000214:	f04f 31ff 	movne.w	r1, #4294967295
20000218:	f04f 30ff 	movne.w	r0, #4294967295
2000021c:	f000 b96a 	b.w	200004f4 <__aeabi_idiv0>
20000220:	f1ad 0c08 	sub.w	ip, sp, #8
20000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000228:	f000 f806 	bl	20000238 <__udivmoddi4>
2000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
20000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000234:	b004      	add	sp, #16
20000236:	4770      	bx	lr

20000238 <__udivmoddi4>:
20000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000023c:	9d08      	ldr	r5, [sp, #32]
2000023e:	460c      	mov	r4, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14e      	bne.n	200002e2 <__udivmoddi4+0xaa>
20000244:	4694      	mov	ip, r2
20000246:	458c      	cmp	ip, r1
20000248:	4686      	mov	lr, r0
2000024a:	fab2 f282 	clz	r2, r2
2000024e:	d962      	bls.n	20000316 <__udivmoddi4+0xde>
20000250:	b14a      	cbz	r2, 20000266 <__udivmoddi4+0x2e>
20000252:	f1c2 0320 	rsb	r3, r2, #32
20000256:	4091      	lsls	r1, r2
20000258:	fa20 f303 	lsr.w	r3, r0, r3
2000025c:	fa0c fc02 	lsl.w	ip, ip, r2
20000260:	4319      	orrs	r1, r3
20000262:	fa00 fe02 	lsl.w	lr, r0, r2
20000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000026a:	fa1f f68c 	uxth.w	r6, ip
2000026e:	fbb1 f4f7 	udiv	r4, r1, r7
20000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000276:	fb07 1114 	mls	r1, r7, r4, r1
2000027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000027e:	fb04 f106 	mul.w	r1, r4, r6
20000282:	4299      	cmp	r1, r3
20000284:	d90a      	bls.n	2000029c <__udivmoddi4+0x64>
20000286:	eb1c 0303 	adds.w	r3, ip, r3
2000028a:	f104 30ff 	add.w	r0, r4, #4294967295
2000028e:	f080 8112 	bcs.w	200004b6 <__udivmoddi4+0x27e>
20000292:	4299      	cmp	r1, r3
20000294:	f240 810f 	bls.w	200004b6 <__udivmoddi4+0x27e>
20000298:	3c02      	subs	r4, #2
2000029a:	4463      	add	r3, ip
2000029c:	1a59      	subs	r1, r3, r1
2000029e:	fa1f f38e 	uxth.w	r3, lr
200002a2:	fbb1 f0f7 	udiv	r0, r1, r7
200002a6:	fb07 1110 	mls	r1, r7, r0, r1
200002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200002ae:	fb00 f606 	mul.w	r6, r0, r6
200002b2:	429e      	cmp	r6, r3
200002b4:	d90a      	bls.n	200002cc <__udivmoddi4+0x94>
200002b6:	eb1c 0303 	adds.w	r3, ip, r3
200002ba:	f100 31ff 	add.w	r1, r0, #4294967295
200002be:	f080 80fc 	bcs.w	200004ba <__udivmoddi4+0x282>
200002c2:	429e      	cmp	r6, r3
200002c4:	f240 80f9 	bls.w	200004ba <__udivmoddi4+0x282>
200002c8:	4463      	add	r3, ip
200002ca:	3802      	subs	r0, #2
200002cc:	1b9b      	subs	r3, r3, r6
200002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200002d2:	2100      	movs	r1, #0
200002d4:	b11d      	cbz	r5, 200002de <__udivmoddi4+0xa6>
200002d6:	40d3      	lsrs	r3, r2
200002d8:	2200      	movs	r2, #0
200002da:	e9c5 3200 	strd	r3, r2, [r5]
200002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002e2:	428b      	cmp	r3, r1
200002e4:	d905      	bls.n	200002f2 <__udivmoddi4+0xba>
200002e6:	b10d      	cbz	r5, 200002ec <__udivmoddi4+0xb4>
200002e8:	e9c5 0100 	strd	r0, r1, [r5]
200002ec:	2100      	movs	r1, #0
200002ee:	4608      	mov	r0, r1
200002f0:	e7f5      	b.n	200002de <__udivmoddi4+0xa6>
200002f2:	fab3 f183 	clz	r1, r3
200002f6:	2900      	cmp	r1, #0
200002f8:	d146      	bne.n	20000388 <__udivmoddi4+0x150>
200002fa:	42a3      	cmp	r3, r4
200002fc:	d302      	bcc.n	20000304 <__udivmoddi4+0xcc>
200002fe:	4290      	cmp	r0, r2
20000300:	f0c0 80f0 	bcc.w	200004e4 <__udivmoddi4+0x2ac>
20000304:	1a86      	subs	r6, r0, r2
20000306:	eb64 0303 	sbc.w	r3, r4, r3
2000030a:	2001      	movs	r0, #1
2000030c:	2d00      	cmp	r5, #0
2000030e:	d0e6      	beq.n	200002de <__udivmoddi4+0xa6>
20000310:	e9c5 6300 	strd	r6, r3, [r5]
20000314:	e7e3      	b.n	200002de <__udivmoddi4+0xa6>
20000316:	2a00      	cmp	r2, #0
20000318:	f040 8090 	bne.w	2000043c <__udivmoddi4+0x204>
2000031c:	eba1 040c 	sub.w	r4, r1, ip
20000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000324:	fa1f f78c 	uxth.w	r7, ip
20000328:	2101      	movs	r1, #1
2000032a:	fbb4 f6f8 	udiv	r6, r4, r8
2000032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000332:	fb08 4416 	mls	r4, r8, r6, r4
20000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000033a:	fb07 f006 	mul.w	r0, r7, r6
2000033e:	4298      	cmp	r0, r3
20000340:	d908      	bls.n	20000354 <__udivmoddi4+0x11c>
20000342:	eb1c 0303 	adds.w	r3, ip, r3
20000346:	f106 34ff 	add.w	r4, r6, #4294967295
2000034a:	d202      	bcs.n	20000352 <__udivmoddi4+0x11a>
2000034c:	4298      	cmp	r0, r3
2000034e:	f200 80cd 	bhi.w	200004ec <__udivmoddi4+0x2b4>
20000352:	4626      	mov	r6, r4
20000354:	1a1c      	subs	r4, r3, r0
20000356:	fa1f f38e 	uxth.w	r3, lr
2000035a:	fbb4 f0f8 	udiv	r0, r4, r8
2000035e:	fb08 4410 	mls	r4, r8, r0, r4
20000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000366:	fb00 f707 	mul.w	r7, r0, r7
2000036a:	429f      	cmp	r7, r3
2000036c:	d908      	bls.n	20000380 <__udivmoddi4+0x148>
2000036e:	eb1c 0303 	adds.w	r3, ip, r3
20000372:	f100 34ff 	add.w	r4, r0, #4294967295
20000376:	d202      	bcs.n	2000037e <__udivmoddi4+0x146>
20000378:	429f      	cmp	r7, r3
2000037a:	f200 80b0 	bhi.w	200004de <__udivmoddi4+0x2a6>
2000037e:	4620      	mov	r0, r4
20000380:	1bdb      	subs	r3, r3, r7
20000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000386:	e7a5      	b.n	200002d4 <__udivmoddi4+0x9c>
20000388:	f1c1 0620 	rsb	r6, r1, #32
2000038c:	408b      	lsls	r3, r1
2000038e:	fa22 f706 	lsr.w	r7, r2, r6
20000392:	431f      	orrs	r7, r3
20000394:	fa20 fc06 	lsr.w	ip, r0, r6
20000398:	fa04 f301 	lsl.w	r3, r4, r1
2000039c:	ea43 030c 	orr.w	r3, r3, ip
200003a0:	40f4      	lsrs	r4, r6
200003a2:	fa00 f801 	lsl.w	r8, r0, r1
200003a6:	0c38      	lsrs	r0, r7, #16
200003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
200003ac:	fbb4 fef0 	udiv	lr, r4, r0
200003b0:	fa1f fc87 	uxth.w	ip, r7
200003b4:	fb00 441e 	mls	r4, r0, lr, r4
200003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003bc:	fb0e f90c 	mul.w	r9, lr, ip
200003c0:	45a1      	cmp	r9, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	d90a      	bls.n	200003de <__udivmoddi4+0x1a6>
200003c8:	193c      	adds	r4, r7, r4
200003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
200003ce:	f080 8084 	bcs.w	200004da <__udivmoddi4+0x2a2>
200003d2:	45a1      	cmp	r9, r4
200003d4:	f240 8081 	bls.w	200004da <__udivmoddi4+0x2a2>
200003d8:	f1ae 0e02 	sub.w	lr, lr, #2
200003dc:	443c      	add	r4, r7
200003de:	eba4 0409 	sub.w	r4, r4, r9
200003e2:	fa1f f983 	uxth.w	r9, r3
200003e6:	fbb4 f3f0 	udiv	r3, r4, r0
200003ea:	fb00 4413 	mls	r4, r0, r3, r4
200003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003f2:	fb03 fc0c 	mul.w	ip, r3, ip
200003f6:	45a4      	cmp	ip, r4
200003f8:	d907      	bls.n	2000040a <__udivmoddi4+0x1d2>
200003fa:	193c      	adds	r4, r7, r4
200003fc:	f103 30ff 	add.w	r0, r3, #4294967295
20000400:	d267      	bcs.n	200004d2 <__udivmoddi4+0x29a>
20000402:	45a4      	cmp	ip, r4
20000404:	d965      	bls.n	200004d2 <__udivmoddi4+0x29a>
20000406:	3b02      	subs	r3, #2
20000408:	443c      	add	r4, r7
2000040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
2000040e:	fba0 9302 	umull	r9, r3, r0, r2
20000412:	eba4 040c 	sub.w	r4, r4, ip
20000416:	429c      	cmp	r4, r3
20000418:	46ce      	mov	lr, r9
2000041a:	469c      	mov	ip, r3
2000041c:	d351      	bcc.n	200004c2 <__udivmoddi4+0x28a>
2000041e:	d04e      	beq.n	200004be <__udivmoddi4+0x286>
20000420:	b155      	cbz	r5, 20000438 <__udivmoddi4+0x200>
20000422:	ebb8 030e 	subs.w	r3, r8, lr
20000426:	eb64 040c 	sbc.w	r4, r4, ip
2000042a:	fa04 f606 	lsl.w	r6, r4, r6
2000042e:	40cb      	lsrs	r3, r1
20000430:	431e      	orrs	r6, r3
20000432:	40cc      	lsrs	r4, r1
20000434:	e9c5 6400 	strd	r6, r4, [r5]
20000438:	2100      	movs	r1, #0
2000043a:	e750      	b.n	200002de <__udivmoddi4+0xa6>
2000043c:	f1c2 0320 	rsb	r3, r2, #32
20000440:	fa20 f103 	lsr.w	r1, r0, r3
20000444:	fa0c fc02 	lsl.w	ip, ip, r2
20000448:	fa24 f303 	lsr.w	r3, r4, r3
2000044c:	4094      	lsls	r4, r2
2000044e:	430c      	orrs	r4, r1
20000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000454:	fa00 fe02 	lsl.w	lr, r0, r2
20000458:	fa1f f78c 	uxth.w	r7, ip
2000045c:	fbb3 f0f8 	udiv	r0, r3, r8
20000460:	fb08 3110 	mls	r1, r8, r0, r3
20000464:	0c23      	lsrs	r3, r4, #16
20000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000046a:	fb00 f107 	mul.w	r1, r0, r7
2000046e:	4299      	cmp	r1, r3
20000470:	d908      	bls.n	20000484 <__udivmoddi4+0x24c>
20000472:	eb1c 0303 	adds.w	r3, ip, r3
20000476:	f100 36ff 	add.w	r6, r0, #4294967295
2000047a:	d22c      	bcs.n	200004d6 <__udivmoddi4+0x29e>
2000047c:	4299      	cmp	r1, r3
2000047e:	d92a      	bls.n	200004d6 <__udivmoddi4+0x29e>
20000480:	3802      	subs	r0, #2
20000482:	4463      	add	r3, ip
20000484:	1a5b      	subs	r3, r3, r1
20000486:	b2a4      	uxth	r4, r4
20000488:	fbb3 f1f8 	udiv	r1, r3, r8
2000048c:	fb08 3311 	mls	r3, r8, r1, r3
20000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000494:	fb01 f307 	mul.w	r3, r1, r7
20000498:	42a3      	cmp	r3, r4
2000049a:	d908      	bls.n	200004ae <__udivmoddi4+0x276>
2000049c:	eb1c 0404 	adds.w	r4, ip, r4
200004a0:	f101 36ff 	add.w	r6, r1, #4294967295
200004a4:	d213      	bcs.n	200004ce <__udivmoddi4+0x296>
200004a6:	42a3      	cmp	r3, r4
200004a8:	d911      	bls.n	200004ce <__udivmoddi4+0x296>
200004aa:	3902      	subs	r1, #2
200004ac:	4464      	add	r4, ip
200004ae:	1ae4      	subs	r4, r4, r3
200004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
200004b4:	e739      	b.n	2000032a <__udivmoddi4+0xf2>
200004b6:	4604      	mov	r4, r0
200004b8:	e6f0      	b.n	2000029c <__udivmoddi4+0x64>
200004ba:	4608      	mov	r0, r1
200004bc:	e706      	b.n	200002cc <__udivmoddi4+0x94>
200004be:	45c8      	cmp	r8, r9
200004c0:	d2ae      	bcs.n	20000420 <__udivmoddi4+0x1e8>
200004c2:	ebb9 0e02 	subs.w	lr, r9, r2
200004c6:	eb63 0c07 	sbc.w	ip, r3, r7
200004ca:	3801      	subs	r0, #1
200004cc:	e7a8      	b.n	20000420 <__udivmoddi4+0x1e8>
200004ce:	4631      	mov	r1, r6
200004d0:	e7ed      	b.n	200004ae <__udivmoddi4+0x276>
200004d2:	4603      	mov	r3, r0
200004d4:	e799      	b.n	2000040a <__udivmoddi4+0x1d2>
200004d6:	4630      	mov	r0, r6
200004d8:	e7d4      	b.n	20000484 <__udivmoddi4+0x24c>
200004da:	46d6      	mov	lr, sl
200004dc:	e77f      	b.n	200003de <__udivmoddi4+0x1a6>
200004de:	4463      	add	r3, ip
200004e0:	3802      	subs	r0, #2
200004e2:	e74d      	b.n	20000380 <__udivmoddi4+0x148>
200004e4:	4606      	mov	r6, r0
200004e6:	4623      	mov	r3, r4
200004e8:	4608      	mov	r0, r1
200004ea:	e70f      	b.n	2000030c <__udivmoddi4+0xd4>
200004ec:	3e02      	subs	r6, #2
200004ee:	4463      	add	r3, ip
200004f0:	e730      	b.n	20000354 <__udivmoddi4+0x11c>
200004f2:	bf00      	nop

200004f4 <__aeabi_idiv0>:
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <DAP_GetVendorString>:

/** Get Vendor Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetVendorString (char *str) {
200004f8:	b480      	push	{r7}
200004fa:	b083      	sub	sp, #12
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000500:	2300      	movs	r3, #0
}
20000502:	4618      	mov	r0, r3
20000504:	370c      	adds	r7, #12
20000506:	46bd      	mov	sp, r7
20000508:	f85d 7b04 	ldr.w	r7, [sp], #4
2000050c:	4770      	bx	lr

2000050e <DAP_GetProductString>:

/** Get Product Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductString (char *str) {
2000050e:	b480      	push	{r7}
20000510:	b083      	sub	sp, #12
20000512:	af00      	add	r7, sp, #0
20000514:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000516:	2300      	movs	r3, #0
}
20000518:	4618      	mov	r0, r3
2000051a:	370c      	adds	r7, #12
2000051c:	46bd      	mov	sp, r7
2000051e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000522:	4770      	bx	lr

20000524 <DAP_GetSerNumString>:

/** Get Serial Number string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetSerNumString (char *str) {
20000524:	b480      	push	{r7}
20000526:	b083      	sub	sp, #12
20000528:	af00      	add	r7, sp, #0
2000052a:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000052c:	2300      	movs	r3, #0
}
2000052e:	4618      	mov	r0, r3
20000530:	370c      	adds	r7, #12
20000532:	46bd      	mov	sp, r7
20000534:	f85d 7b04 	ldr.w	r7, [sp], #4
20000538:	4770      	bx	lr

2000053a <DAP_GetTargetDeviceVendorString>:

/** Get Target Device Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceVendorString (char *str) {
2000053a:	b480      	push	{r7}
2000053c:	b083      	sub	sp, #12
2000053e:	af00      	add	r7, sp, #0
20000540:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceVendor);
  len = (uint8_t)(strlen(TargetDeviceVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000542:	2300      	movs	r3, #0
#endif
}
20000544:	4618      	mov	r0, r3
20000546:	370c      	adds	r7, #12
20000548:	46bd      	mov	sp, r7
2000054a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000054e:	4770      	bx	lr

20000550 <DAP_GetTargetDeviceNameString>:

/** Get Target Device Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceNameString (char *str) {
20000550:	b480      	push	{r7}
20000552:	b083      	sub	sp, #12
20000554:	af00      	add	r7, sp, #0
20000556:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceName);
  len = (uint8_t)(strlen(TargetDeviceName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000558:	2300      	movs	r3, #0
#endif
}
2000055a:	4618      	mov	r0, r3
2000055c:	370c      	adds	r7, #12
2000055e:	46bd      	mov	sp, r7
20000560:	f85d 7b04 	ldr.w	r7, [sp], #4
20000564:	4770      	bx	lr

20000566 <DAP_GetTargetBoardVendorString>:

/** Get Target Board Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardVendorString (char *str) {
20000566:	b480      	push	{r7}
20000568:	b083      	sub	sp, #12
2000056a:	af00      	add	r7, sp, #0
2000056c:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardVendor);
  len = (uint8_t)(strlen(TargetBoardVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
2000056e:	2300      	movs	r3, #0
#endif
}
20000570:	4618      	mov	r0, r3
20000572:	370c      	adds	r7, #12
20000574:	46bd      	mov	sp, r7
20000576:	f85d 7b04 	ldr.w	r7, [sp], #4
2000057a:	4770      	bx	lr

2000057c <DAP_GetTargetBoardNameString>:

/** Get Target Board Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardNameString (char *str) {
2000057c:	b480      	push	{r7}
2000057e:	b083      	sub	sp, #12
20000580:	af00      	add	r7, sp, #0
20000582:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardName);
  len = (uint8_t)(strlen(TargetBoardName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000584:	2300      	movs	r3, #0
#endif
}
20000586:	4618      	mov	r0, r3
20000588:	370c      	adds	r7, #12
2000058a:	46bd      	mov	sp, r7
2000058c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000590:	4770      	bx	lr

20000592 <DAP_GetProductFirmwareVersionString>:

/** Get Product Firmware Version string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductFirmwareVersionString (char *str) {
20000592:	b480      	push	{r7}
20000594:	b083      	sub	sp, #12
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000059a:	2300      	movs	r3, #0
}
2000059c:	4618      	mov	r0, r3
2000059e:	370c      	adds	r7, #12
200005a0:	46bd      	mov	sp, r7
200005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200005a6:	4770      	bx	lr

200005a8 <PORT_OFF>:

/** Disable JTAG/SWD I/O Pins.
Disables the DAP Hardware I/O pins which configures:
 - TCK/SWCLK, TMS/SWDIO, TDI, TDO, nTRST, nRESET to High-Z mode.
*/
__STATIC_INLINE void PORT_OFF (void) {
200005a8:	b480      	push	{r7}
200005aa:	af00      	add	r7, sp, #0
  ;
}
200005ac:	bf00      	nop
200005ae:	46bd      	mov	sp, r7
200005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005b4:	4770      	bx	lr

200005b6 <PIN_SWCLK_TCK_IN>:
// SWCLK/TCK I/O pin -------------------------------------

/** SWCLK/TCK I/O pin: Get Input.
\return Current status of the SWCLK/TCK DAP hardware I/O pin.
*/
static uint32_t PIN_SWCLK_TCK_IN  (void) {
200005b6:	b480      	push	{r7}
200005b8:	af00      	add	r7, sp, #0
  return (0U);
200005ba:	2300      	movs	r3, #0
}
200005bc:	4618      	mov	r0, r3
200005be:	46bd      	mov	sp, r7
200005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005c4:	4770      	bx	lr

200005c6 <PIN_SWCLK_TCK_SET>:

/** SWCLK/TCK I/O pin: Set Output to High.
Set the SWCLK/TCK DAP hardware I/O pin to high level.
*/
static void     PIN_SWCLK_TCK_SET (void) {
200005c6:	b480      	push	{r7}
200005c8:	af00      	add	r7, sp, #0
  ;
}
200005ca:	bf00      	nop
200005cc:	46bd      	mov	sp, r7
200005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200005d2:	4770      	bx	lr

200005d4 <PIN_SWCLK_TCK_CLR>:

/** SWCLK/TCK I/O pin: Set Output to Low.
Set the SWCLK/TCK DAP hardware I/O pin to low level.
*/
static void     PIN_SWCLK_TCK_CLR (void) {
200005d4:	b480      	push	{r7}
200005d6:	af00      	add	r7, sp, #0
  ;
}
200005d8:	bf00      	nop
200005da:	46bd      	mov	sp, r7
200005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200005e0:	4770      	bx	lr

200005e2 <PIN_SWDIO_TMS_IN>:
// SWDIO/TMS Pin I/O --------------------------------------

/** SWDIO/TMS I/O pin: Get Input.
\return Current status of the SWDIO/TMS DAP hardware I/O pin.
*/
static uint32_t PIN_SWDIO_TMS_IN  (void) {
200005e2:	b480      	push	{r7}
200005e4:	af00      	add	r7, sp, #0
  return (0U);
200005e6:	2300      	movs	r3, #0
}
200005e8:	4618      	mov	r0, r3
200005ea:	46bd      	mov	sp, r7
200005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200005f0:	4770      	bx	lr

200005f2 <PIN_SWDIO_TMS_SET>:

/** SWDIO/TMS I/O pin: Set Output to High.
Set the SWDIO/TMS DAP hardware I/O pin to high level.
*/
static void     PIN_SWDIO_TMS_SET (void) {
200005f2:	b480      	push	{r7}
200005f4:	af00      	add	r7, sp, #0

}
200005f6:	bf00      	nop
200005f8:	46bd      	mov	sp, r7
200005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200005fe:	4770      	bx	lr

20000600 <PIN_SWDIO_TMS_CLR>:

/** SWDIO/TMS I/O pin: Set Output to Low.
Set the SWDIO/TMS DAP hardware I/O pin to low level.
*/
static void     PIN_SWDIO_TMS_CLR (void) {
20000600:	b480      	push	{r7}
20000602:	af00      	add	r7, sp, #0

}
20000604:	bf00      	nop
20000606:	46bd      	mov	sp, r7
20000608:	f85d 7b04 	ldr.w	r7, [sp], #4
2000060c:	4770      	bx	lr

2000060e <PIN_SWDIO_OUT_ENABLE>:

/** SWDIO I/O pin: Switch to Output mode (used in SWD mode only).
Configure the SWDIO DAP hardware I/O pin to output mode. This function is
called prior \ref PIN_SWDIO_OUT function calls.
*/
static void     PIN_SWDIO_OUT_ENABLE  (void) {
2000060e:	b480      	push	{r7}
20000610:	af00      	add	r7, sp, #0
  ;
}
20000612:	bf00      	nop
20000614:	46bd      	mov	sp, r7
20000616:	f85d 7b04 	ldr.w	r7, [sp], #4
2000061a:	4770      	bx	lr

2000061c <PIN_SWDIO_OUT_DISABLE>:

/** SWDIO I/O pin: Switch to Input mode (used in SWD mode only).
Configure the SWDIO DAP hardware I/O pin to input mode. This function is
called prior \ref PIN_SWDIO_IN function calls.
*/
static void     PIN_SWDIO_OUT_DISABLE (void) {
2000061c:	b480      	push	{r7}
2000061e:	af00      	add	r7, sp, #0
  ;
}
20000620:	bf00      	nop
20000622:	46bd      	mov	sp, r7
20000624:	f85d 7b04 	ldr.w	r7, [sp], #4
20000628:	4770      	bx	lr

2000062a <PIN_TDI_IN>:
// TDI Pin I/O ---------------------------------------------

/** TDI I/O pin: Get Input.
\return Current status of the TDI DAP hardware I/O pin.
*/
static uint32_t PIN_TDI_IN  (void) {
2000062a:	b480      	push	{r7}
2000062c:	af00      	add	r7, sp, #0
  return (0U);
2000062e:	2300      	movs	r3, #0
}
20000630:	4618      	mov	r0, r3
20000632:	46bd      	mov	sp, r7
20000634:	f85d 7b04 	ldr.w	r7, [sp], #4
20000638:	4770      	bx	lr

2000063a <PIN_TDI_OUT>:

/** TDI I/O pin: Set Output.
\param bit Output value for the TDI DAP hardware I/O pin.
*/
static void     PIN_TDI_OUT (uint32_t bit) {
2000063a:	b480      	push	{r7}
2000063c:	b083      	sub	sp, #12
2000063e:	af00      	add	r7, sp, #0
20000640:	6078      	str	r0, [r7, #4]
  ;
}
20000642:	bf00      	nop
20000644:	370c      	adds	r7, #12
20000646:	46bd      	mov	sp, r7
20000648:	f85d 7b04 	ldr.w	r7, [sp], #4
2000064c:	4770      	bx	lr

2000064e <PIN_TDO_IN>:
// TDO Pin I/O ---------------------------------------------

/** TDO I/O pin: Get Input.
\return Current status of the TDO DAP hardware I/O pin.
*/
static uint32_t PIN_TDO_IN  (void) {
2000064e:	b480      	push	{r7}
20000650:	af00      	add	r7, sp, #0
  return (0U);
20000652:	2300      	movs	r3, #0
}
20000654:	4618      	mov	r0, r3
20000656:	46bd      	mov	sp, r7
20000658:	f85d 7b04 	ldr.w	r7, [sp], #4
2000065c:	4770      	bx	lr

2000065e <PIN_nTRST_IN>:
// nTRST Pin I/O -------------------------------------------

/** nTRST I/O pin: Get Input.
\return Current status of the nTRST DAP hardware I/O pin.
*/
static uint32_t PIN_nTRST_IN   (void) {
2000065e:	b480      	push	{r7}
20000660:	af00      	add	r7, sp, #0
  return (0U);
20000662:	2300      	movs	r3, #0
}
20000664:	4618      	mov	r0, r3
20000666:	46bd      	mov	sp, r7
20000668:	f85d 7b04 	ldr.w	r7, [sp], #4
2000066c:	4770      	bx	lr

2000066e <PIN_nTRST_OUT>:
/** nTRST I/O pin: Set Output.
\param bit JTAG TRST Test Reset pin status:
           - 0: issue a JTAG TRST Test Reset.
           - 1: release JTAG TRST Test Reset.
*/
static void     PIN_nTRST_OUT  (uint32_t bit) {
2000066e:	b480      	push	{r7}
20000670:	b083      	sub	sp, #12
20000672:	af00      	add	r7, sp, #0
20000674:	6078      	str	r0, [r7, #4]
  ;
}
20000676:	bf00      	nop
20000678:	370c      	adds	r7, #12
2000067a:	46bd      	mov	sp, r7
2000067c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000680:	4770      	bx	lr
	...

20000684 <PIN_nRESET_IN>:
\return Current status of the nRESET DAP hardware I/O pin.
*/
#define JTAG_SRST_PORT	 GPIOD
#define JTAG_SRST_PIN    GPIO_PIN_2 // Optional

static uint32_t PIN_nRESET_IN  (void) {
20000684:	b580      	push	{r7, lr}
20000686:	af00      	add	r7, sp, #0
  return (uint32_t)HAL_GPIO_ReadPin(JTAG_SRST_PORT, JTAG_SRST_PIN);
20000688:	2104      	movs	r1, #4
2000068a:	4803      	ldr	r0, [pc, #12]	@ (20000698 <PIN_nRESET_IN+0x14>)
2000068c:	f005 fe5c 	bl	20006348 <HAL_GPIO_ReadPin>
20000690:	4603      	mov	r3, r0
}
20000692:	4618      	mov	r0, r3
20000694:	bd80      	pop	{r7, pc}
20000696:	bf00      	nop
20000698:	40020c00 	.word	0x40020c00

2000069c <PIN_nRESET_OUT>:
/** nRESET I/O pin: Set Output.
\param bit target device hardware reset pin status:
           - 0: issue a device hardware reset.
           - 1: release device hardware reset.
*/
static void     PIN_nRESET_OUT (uint32_t bit) {
2000069c:	b580      	push	{r7, lr}
2000069e:	b082      	sub	sp, #8
200006a0:	af00      	add	r7, sp, #0
200006a2:	6078      	str	r0, [r7, #4]
	if(bit)
200006a4:	687b      	ldr	r3, [r7, #4]
200006a6:	2b00      	cmp	r3, #0
200006a8:	d005      	beq.n	200006b6 <PIN_nRESET_OUT+0x1a>
	{
		HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_RESET);
200006aa:	2200      	movs	r2, #0
200006ac:	2104      	movs	r1, #4
200006ae:	4806      	ldr	r0, [pc, #24]	@ (200006c8 <PIN_nRESET_OUT+0x2c>)
200006b0:	f005 fe62 	bl	20006378 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_SET);
	}

}
200006b4:	e004      	b.n	200006c0 <PIN_nRESET_OUT+0x24>
		HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_SET);
200006b6:	2201      	movs	r2, #1
200006b8:	2104      	movs	r1, #4
200006ba:	4803      	ldr	r0, [pc, #12]	@ (200006c8 <PIN_nRESET_OUT+0x2c>)
200006bc:	f005 fe5c 	bl	20006378 <HAL_GPIO_WritePin>
}
200006c0:	bf00      	nop
200006c2:	3708      	adds	r7, #8
200006c4:	46bd      	mov	sp, r7
200006c6:	bd80      	pop	{r7, pc}
200006c8:	40020c00 	.word	0x40020c00

200006cc <LED_CONNECTED_OUT>:
\param bit status of the Connect LED.
           - 1: Connect LED ON: debugger is connected to CMSIS-DAP Debug Unit.
           - 0: Connect LED OFF: debugger is not connected to CMSIS-DAP Debug Unit.
*/
__STATIC_INLINE void LED_CONNECTED_OUT (uint32_t bit)
{
200006cc:	b580      	push	{r7, lr}
200006ce:	b082      	sub	sp, #8
200006d0:	af00      	add	r7, sp, #0
200006d2:	6078      	str	r0, [r7, #4]
	if(bit)
200006d4:	687b      	ldr	r3, [r7, #4]
200006d6:	2b00      	cmp	r3, #0
200006d8:	d006      	beq.n	200006e8 <LED_CONNECTED_OUT+0x1c>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
200006da:	2201      	movs	r2, #1
200006dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
200006e0:	4806      	ldr	r0, [pc, #24]	@ (200006fc <LED_CONNECTED_OUT+0x30>)
200006e2:	f005 fe49 	bl	20006378 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
	}

}
200006e6:	e005      	b.n	200006f4 <LED_CONNECTED_OUT+0x28>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
200006e8:	2200      	movs	r2, #0
200006ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
200006ee:	4803      	ldr	r0, [pc, #12]	@ (200006fc <LED_CONNECTED_OUT+0x30>)
200006f0:	f005 fe42 	bl	20006378 <HAL_GPIO_WritePin>
}
200006f4:	bf00      	nop
200006f6:	3708      	adds	r7, #8
200006f8:	46bd      	mov	sp, r7
200006fa:	bd80      	pop	{r7, pc}
200006fc:	40020400 	.word	0x40020400

20000700 <LED_RUNNING_OUT>:
\param bit status of the Target Running LED.
           - 1: Target Running LED ON: program execution in target started.
           - 0: Target Running LED OFF: program execution in target stopped.
*/
__STATIC_INLINE void LED_RUNNING_OUT (uint32_t bit)
{
20000700:	b580      	push	{r7, lr}
20000702:	b082      	sub	sp, #8
20000704:	af00      	add	r7, sp, #0
20000706:	6078      	str	r0, [r7, #4]
	if(bit)
20000708:	687b      	ldr	r3, [r7, #4]
2000070a:	2b00      	cmp	r3, #0
2000070c:	d005      	beq.n	2000071a <LED_RUNNING_OUT+0x1a>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
2000070e:	2201      	movs	r2, #1
20000710:	2101      	movs	r1, #1
20000712:	4806      	ldr	r0, [pc, #24]	@ (2000072c <LED_RUNNING_OUT+0x2c>)
20000714:	f005 fe30 	bl	20006378 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
	}

}
20000718:	e004      	b.n	20000724 <LED_RUNNING_OUT+0x24>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
2000071a:	2200      	movs	r2, #0
2000071c:	2101      	movs	r1, #1
2000071e:	4803      	ldr	r0, [pc, #12]	@ (2000072c <LED_RUNNING_OUT+0x2c>)
20000720:	f005 fe2a 	bl	20006378 <HAL_GPIO_WritePin>
}
20000724:	bf00      	nop
20000726:	3708      	adds	r7, #8
20000728:	46bd      	mov	sp, r7
2000072a:	bd80      	pop	{r7, pc}
2000072c:	40020400 	.word	0x40020400

20000730 <TIMESTAMP_GET>:
*/

/** Get timestamp of Test Domain Timer.
\return Current timestamp value.
*/
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
20000730:	b480      	push	{r7}
20000732:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20000734:	4b03      	ldr	r3, [pc, #12]	@ (20000744 <TIMESTAMP_GET+0x14>)
20000736:	685b      	ldr	r3, [r3, #4]
}
20000738:	4618      	mov	r0, r3
2000073a:	46bd      	mov	sp, r7
2000073c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000740:	4770      	bx	lr
20000742:	bf00      	nop
20000744:	e0001000 	.word	0xe0001000

20000748 <RESET_TARGET>:
It is called when the command \ref DAP_ResetTarget and is for example required
when a device needs a time-critical unlock sequence that enables the debug port.
\return 0 = no device specific reset sequence is implemented.\n
        1 = a device specific reset sequence is implemented.
*/
__STATIC_INLINE uint8_t RESET_TARGET (void) {
20000748:	b480      	push	{r7}
2000074a:	af00      	add	r7, sp, #0
  return (1U);             // change to '1' when a device reset sequence is implemented
2000074c:	2301      	movs	r3, #1
}
2000074e:	4618      	mov	r0, r3
20000750:	46bd      	mov	sp, r7
20000752:	f85d 7b04 	ldr.w	r7, [sp], #4
20000756:	4770      	bx	lr

20000758 <Set_Clock_Delay>:
static const char DAP_FW_Ver [] = DAP_FW_VER;


// Common clock delay calculation routine
//   clock:    requested SWJ frequency in Hertz
static void Set_Clock_Delay(uint32_t clock) {
20000758:	b480      	push	{r7}
2000075a:	b085      	sub	sp, #20
2000075c:	af00      	add	r7, sp, #0
2000075e:	6078      	str	r0, [r7, #4]
  uint32_t delay;

  if (clock >= MAX_SWJ_CLOCK(DELAY_FAST_CYCLES)) {
20000760:	687b      	ldr	r3, [r7, #4]
20000762:	4a16      	ldr	r2, [pc, #88]	@ (200007bc <Set_Clock_Delay+0x64>)
20000764:	4293      	cmp	r3, r2
20000766:	d306      	bcc.n	20000776 <Set_Clock_Delay+0x1e>
    DAP_Data.fast_clock  = 1U;
20000768:	4b15      	ldr	r3, [pc, #84]	@ (200007c0 <Set_Clock_Delay+0x68>)
2000076a:	2201      	movs	r2, #1
2000076c:	705a      	strb	r2, [r3, #1]
    DAP_Data.clock_delay = 1U;
2000076e:	4b14      	ldr	r3, [pc, #80]	@ (200007c0 <Set_Clock_Delay+0x68>)
20000770:	2201      	movs	r2, #1
20000772:	605a      	str	r2, [r3, #4]
      delay  = 1U;
    }

    DAP_Data.clock_delay = delay;
  }
}
20000774:	e01c      	b.n	200007b0 <Set_Clock_Delay+0x58>
    DAP_Data.fast_clock  = 0U;
20000776:	4b12      	ldr	r3, [pc, #72]	@ (200007c0 <Set_Clock_Delay+0x68>)
20000778:	2200      	movs	r2, #0
2000077a:	705a      	strb	r2, [r3, #1]
    delay = ((CPU_CLOCK/2U) + (clock - 1U)) / clock;
2000077c:	687a      	ldr	r2, [r7, #4]
2000077e:	4b11      	ldr	r3, [pc, #68]	@ (200007c4 <Set_Clock_Delay+0x6c>)
20000780:	4413      	add	r3, r2
20000782:	687a      	ldr	r2, [r7, #4]
20000784:	fbb3 f3f2 	udiv	r3, r3, r2
20000788:	60fb      	str	r3, [r7, #12]
    if (delay > IO_PORT_WRITE_CYCLES) {
2000078a:	68fb      	ldr	r3, [r7, #12]
2000078c:	2b02      	cmp	r3, #2
2000078e:	d90a      	bls.n	200007a6 <Set_Clock_Delay+0x4e>
      delay -= IO_PORT_WRITE_CYCLES;
20000790:	68fb      	ldr	r3, [r7, #12]
20000792:	3b02      	subs	r3, #2
20000794:	60fb      	str	r3, [r7, #12]
      delay  = (delay + (DELAY_SLOW_CYCLES - 1U)) / DELAY_SLOW_CYCLES;
20000796:	68fb      	ldr	r3, [r7, #12]
20000798:	3302      	adds	r3, #2
2000079a:	4a0b      	ldr	r2, [pc, #44]	@ (200007c8 <Set_Clock_Delay+0x70>)
2000079c:	fba2 2303 	umull	r2, r3, r2, r3
200007a0:	085b      	lsrs	r3, r3, #1
200007a2:	60fb      	str	r3, [r7, #12]
200007a4:	e001      	b.n	200007aa <Set_Clock_Delay+0x52>
      delay  = 1U;
200007a6:	2301      	movs	r3, #1
200007a8:	60fb      	str	r3, [r7, #12]
    DAP_Data.clock_delay = delay;
200007aa:	4a05      	ldr	r2, [pc, #20]	@ (200007c0 <Set_Clock_Delay+0x68>)
200007ac:	68fb      	ldr	r3, [r7, #12]
200007ae:	6053      	str	r3, [r2, #4]
}
200007b0:	bf00      	nop
200007b2:	3714      	adds	r7, #20
200007b4:	46bd      	mov	sp, r7
200007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200007ba:	4770      	bx	lr
200007bc:	0337f980 	.word	0x0337f980
200007c0:	2000da4c 	.word	0x2000da4c
200007c4:	066ff2ff 	.word	0x066ff2ff
200007c8:	aaaaaaab 	.word	0xaaaaaaab

200007cc <DAP_Info>:

// Get DAP Information
//   id:      info identifier
//   info:    pointer to info data
//   return:  number of bytes in info data
static uint8_t DAP_Info(uint8_t id, uint8_t *info) {
200007cc:	b580      	push	{r7, lr}
200007ce:	b084      	sub	sp, #16
200007d0:	af00      	add	r7, sp, #0
200007d2:	4603      	mov	r3, r0
200007d4:	6039      	str	r1, [r7, #0]
200007d6:	71fb      	strb	r3, [r7, #7]
  uint8_t length = 0U;
200007d8:	2300      	movs	r3, #0
200007da:	73fb      	strb	r3, [r7, #15]

  switch (id) {
200007dc:	79fb      	ldrb	r3, [r7, #7]
200007de:	2b09      	cmp	r3, #9
200007e0:	dc42      	bgt.n	20000868 <DAP_Info+0x9c>
200007e2:	2b00      	cmp	r3, #0
200007e4:	dc28      	bgt.n	20000838 <DAP_Info+0x6c>
    case DAP_ID_PACKET_COUNT:
      info[0] = DAP_PACKET_COUNT;
      length = 1U;
      break;
    default:
      break;
200007e6:	e0a9      	b.n	2000093c <DAP_Info+0x170>
  switch (id) {
200007e8:	3bf0      	subs	r3, #240	@ 0xf0
200007ea:	2b0f      	cmp	r3, #15
200007ec:	f200 80a6 	bhi.w	2000093c <DAP_Info+0x170>
200007f0:	a201      	add	r2, pc, #4	@ (adr r2, 200007f8 <DAP_Info+0x2c>)
200007f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200007f6:	bf00      	nop
200007f8:	200008e5 	.word	0x200008e5
200007fc:	200008f9 	.word	0x200008f9
20000800:	2000093d 	.word	0x2000093d
20000804:	2000093d 	.word	0x2000093d
20000808:	2000093d 	.word	0x2000093d
2000080c:	2000093d 	.word	0x2000093d
20000810:	2000093d 	.word	0x2000093d
20000814:	2000093d 	.word	0x2000093d
20000818:	2000093d 	.word	0x2000093d
2000081c:	2000093d 	.word	0x2000093d
20000820:	2000093d 	.word	0x2000093d
20000824:	2000093d 	.word	0x2000093d
20000828:	2000093d 	.word	0x2000093d
2000082c:	2000093d 	.word	0x2000093d
20000830:	20000931 	.word	0x20000931
20000834:	2000091d 	.word	0x2000091d
20000838:	3b01      	subs	r3, #1
2000083a:	2b08      	cmp	r3, #8
2000083c:	d87e      	bhi.n	2000093c <DAP_Info+0x170>
2000083e:	a201      	add	r2, pc, #4	@ (adr r2, 20000844 <DAP_Info+0x78>)
20000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000844:	20000873 	.word	0x20000873
20000848:	2000087f 	.word	0x2000087f
2000084c:	2000088b 	.word	0x2000088b
20000850:	20000897 	.word	0x20000897
20000854:	200008a9 	.word	0x200008a9
20000858:	200008b5 	.word	0x200008b5
2000085c:	200008c1 	.word	0x200008c1
20000860:	200008cd 	.word	0x200008cd
20000864:	200008d9 	.word	0x200008d9
20000868:	2bff      	cmp	r3, #255	@ 0xff
2000086a:	dc67      	bgt.n	2000093c <DAP_Info+0x170>
2000086c:	2bf0      	cmp	r3, #240	@ 0xf0
2000086e:	dabb      	bge.n	200007e8 <DAP_Info+0x1c>
      break;
20000870:	e064      	b.n	2000093c <DAP_Info+0x170>
      length = DAP_GetVendorString((char *)info);
20000872:	6838      	ldr	r0, [r7, #0]
20000874:	f7ff fe40 	bl	200004f8 <DAP_GetVendorString>
20000878:	4603      	mov	r3, r0
2000087a:	73fb      	strb	r3, [r7, #15]
      break;
2000087c:	e05f      	b.n	2000093e <DAP_Info+0x172>
      length = DAP_GetProductString((char *)info);
2000087e:	6838      	ldr	r0, [r7, #0]
20000880:	f7ff fe45 	bl	2000050e <DAP_GetProductString>
20000884:	4603      	mov	r3, r0
20000886:	73fb      	strb	r3, [r7, #15]
      break;
20000888:	e059      	b.n	2000093e <DAP_Info+0x172>
      length = DAP_GetSerNumString((char *)info);
2000088a:	6838      	ldr	r0, [r7, #0]
2000088c:	f7ff fe4a 	bl	20000524 <DAP_GetSerNumString>
20000890:	4603      	mov	r3, r0
20000892:	73fb      	strb	r3, [r7, #15]
      break;
20000894:	e053      	b.n	2000093e <DAP_Info+0x172>
      length = (uint8_t)sizeof(DAP_FW_Ver);
20000896:	2306      	movs	r3, #6
20000898:	73fb      	strb	r3, [r7, #15]
      memcpy(info, DAP_FW_Ver, length);
2000089a:	7bfb      	ldrb	r3, [r7, #15]
2000089c:	461a      	mov	r2, r3
2000089e:	492a      	ldr	r1, [pc, #168]	@ (20000948 <DAP_Info+0x17c>)
200008a0:	6838      	ldr	r0, [r7, #0]
200008a2:	f00c fec5 	bl	2000d630 <memcpy>
      break;
200008a6:	e04a      	b.n	2000093e <DAP_Info+0x172>
      length = DAP_GetTargetDeviceVendorString((char *)info);
200008a8:	6838      	ldr	r0, [r7, #0]
200008aa:	f7ff fe46 	bl	2000053a <DAP_GetTargetDeviceVendorString>
200008ae:	4603      	mov	r3, r0
200008b0:	73fb      	strb	r3, [r7, #15]
      break;
200008b2:	e044      	b.n	2000093e <DAP_Info+0x172>
      length = DAP_GetTargetDeviceNameString((char *)info);
200008b4:	6838      	ldr	r0, [r7, #0]
200008b6:	f7ff fe4b 	bl	20000550 <DAP_GetTargetDeviceNameString>
200008ba:	4603      	mov	r3, r0
200008bc:	73fb      	strb	r3, [r7, #15]
      break;
200008be:	e03e      	b.n	2000093e <DAP_Info+0x172>
      length = DAP_GetTargetBoardVendorString((char *)info);
200008c0:	6838      	ldr	r0, [r7, #0]
200008c2:	f7ff fe50 	bl	20000566 <DAP_GetTargetBoardVendorString>
200008c6:	4603      	mov	r3, r0
200008c8:	73fb      	strb	r3, [r7, #15]
      break;
200008ca:	e038      	b.n	2000093e <DAP_Info+0x172>
      length = DAP_GetTargetBoardNameString((char *)info);
200008cc:	6838      	ldr	r0, [r7, #0]
200008ce:	f7ff fe55 	bl	2000057c <DAP_GetTargetBoardNameString>
200008d2:	4603      	mov	r3, r0
200008d4:	73fb      	strb	r3, [r7, #15]
      break;
200008d6:	e032      	b.n	2000093e <DAP_Info+0x172>
      length = DAP_GetProductFirmwareVersionString((char *)info);
200008d8:	6838      	ldr	r0, [r7, #0]
200008da:	f7ff fe5a 	bl	20000592 <DAP_GetProductFirmwareVersionString>
200008de:	4603      	mov	r3, r0
200008e0:	73fb      	strb	r3, [r7, #15]
      break;
200008e2:	e02c      	b.n	2000093e <DAP_Info+0x172>
      info[0] = ((DAP_SWD  != 0)         ? (1U << 0) : 0U) |
200008e4:	683b      	ldr	r3, [r7, #0]
200008e6:	2233      	movs	r2, #51	@ 0x33
200008e8:	701a      	strb	r2, [r3, #0]
      info[1] = ((DAP_UART_USB_COM_PORT != 0) ? (1U << 0) : 0U);
200008ea:	683b      	ldr	r3, [r7, #0]
200008ec:	3301      	adds	r3, #1
200008ee:	2201      	movs	r2, #1
200008f0:	701a      	strb	r2, [r3, #0]
      length = 2U;
200008f2:	2302      	movs	r3, #2
200008f4:	73fb      	strb	r3, [r7, #15]
      break;
200008f6:	e022      	b.n	2000093e <DAP_Info+0x172>
      info[0] = (uint8_t)(TIMESTAMP_CLOCK >>  0);
200008f8:	683b      	ldr	r3, [r7, #0]
200008fa:	2200      	movs	r2, #0
200008fc:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(TIMESTAMP_CLOCK >>  8);
200008fe:	683b      	ldr	r3, [r7, #0]
20000900:	3301      	adds	r3, #1
20000902:	22e1      	movs	r2, #225	@ 0xe1
20000904:	701a      	strb	r2, [r3, #0]
      info[2] = (uint8_t)(TIMESTAMP_CLOCK >> 16);
20000906:	683b      	ldr	r3, [r7, #0]
20000908:	3302      	adds	r3, #2
2000090a:	22f5      	movs	r2, #245	@ 0xf5
2000090c:	701a      	strb	r2, [r3, #0]
      info[3] = (uint8_t)(TIMESTAMP_CLOCK >> 24);
2000090e:	683b      	ldr	r3, [r7, #0]
20000910:	3303      	adds	r3, #3
20000912:	2205      	movs	r2, #5
20000914:	701a      	strb	r2, [r3, #0]
      length = 4U;
20000916:	2304      	movs	r3, #4
20000918:	73fb      	strb	r3, [r7, #15]
      break;
2000091a:	e010      	b.n	2000093e <DAP_Info+0x172>
      info[0] = (uint8_t)(DAP_PACKET_SIZE >> 0);
2000091c:	683b      	ldr	r3, [r7, #0]
2000091e:	2240      	movs	r2, #64	@ 0x40
20000920:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(DAP_PACKET_SIZE >> 8);
20000922:	683b      	ldr	r3, [r7, #0]
20000924:	3301      	adds	r3, #1
20000926:	2200      	movs	r2, #0
20000928:	701a      	strb	r2, [r3, #0]
      length = 2U;
2000092a:	2302      	movs	r3, #2
2000092c:	73fb      	strb	r3, [r7, #15]
      break;
2000092e:	e006      	b.n	2000093e <DAP_Info+0x172>
      info[0] = DAP_PACKET_COUNT;
20000930:	683b      	ldr	r3, [r7, #0]
20000932:	2201      	movs	r2, #1
20000934:	701a      	strb	r2, [r3, #0]
      length = 1U;
20000936:	2301      	movs	r3, #1
20000938:	73fb      	strb	r3, [r7, #15]
      break;
2000093a:	e000      	b.n	2000093e <DAP_Info+0x172>
      break;
2000093c:	bf00      	nop
  }

  return (length);
2000093e:	7bfb      	ldrb	r3, [r7, #15]
}
20000940:	4618      	mov	r0, r3
20000942:	3710      	adds	r7, #16
20000944:	46bd      	mov	sp, r7
20000946:	bd80      	pop	{r7, pc}
20000948:	2000d738 	.word	0x2000d738

2000094c <Delayms>:


// Delay for specified time
//    delay:  delay time in ms
void Delayms(uint32_t delay) {
2000094c:	b480      	push	{r7}
2000094e:	b085      	sub	sp, #20
20000950:	af00      	add	r7, sp, #0
20000952:	6078      	str	r0, [r7, #4]
  delay *= ((CPU_CLOCK/1000U) + (DELAY_SLOW_CYCLES-1U)) / DELAY_SLOW_CYCLES;
20000954:	687b      	ldr	r3, [r7, #4]
20000956:	4a08      	ldr	r2, [pc, #32]	@ (20000978 <Delayms+0x2c>)
20000958:	fb02 f303 	mul.w	r3, r2, r3
2000095c:	607b      	str	r3, [r7, #4]
2000095e:	687b      	ldr	r3, [r7, #4]
20000960:	60fb      	str	r3, [r7, #12]
  uint32_t count = delay;
  while (--count);
}
#else
__STATIC_FORCEINLINE void PIN_DELAY_SLOW (uint32_t delay) {
  __ASM volatile (
20000962:	68fb      	ldr	r3, [r7, #12]
20000964:	3b01      	subs	r3, #1
20000966:	d1fd      	bne.n	20000964 <Delayms+0x18>
20000968:	60fb      	str	r3, [r7, #12]
  "0:\n\t"
    "subs %0,%0,#1\n\t"
    "bne  0b\n"
  : "+l" (delay) : : "cc"
  );
}
2000096a:	bf00      	nop
  PIN_DELAY_SLOW(delay);
}
2000096c:	bf00      	nop
2000096e:	3714      	adds	r7, #20
20000970:	46bd      	mov	sp, r7
20000972:	f85d 7b04 	ldr.w	r7, [sp], #4
20000976:	4770      	bx	lr
20000978:	00011940 	.word	0x00011940

2000097c <DAP_Delay>:
// Process Delay command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Delay(const uint8_t *request, uint8_t *response) {
2000097c:	b480      	push	{r7}
2000097e:	b085      	sub	sp, #20
20000980:	af00      	add	r7, sp, #0
20000982:	6078      	str	r0, [r7, #4]
20000984:	6039      	str	r1, [r7, #0]
  uint32_t delay;

  delay  = (uint32_t)(*(request+0)) |
20000986:	687b      	ldr	r3, [r7, #4]
20000988:	781b      	ldrb	r3, [r3, #0]
2000098a:	461a      	mov	r2, r3
           (uint32_t)(*(request+1) << 8);
2000098c:	687b      	ldr	r3, [r7, #4]
2000098e:	3301      	adds	r3, #1
20000990:	781b      	ldrb	r3, [r3, #0]
20000992:	021b      	lsls	r3, r3, #8
  delay  = (uint32_t)(*(request+0)) |
20000994:	4313      	orrs	r3, r2
20000996:	60fb      	str	r3, [r7, #12]
  delay *= ((CPU_CLOCK/1000000U) + (DELAY_SLOW_CYCLES-1U)) / DELAY_SLOW_CYCLES;
20000998:	68fa      	ldr	r2, [r7, #12]
2000099a:	4613      	mov	r3, r2
2000099c:	00db      	lsls	r3, r3, #3
2000099e:	4413      	add	r3, r2
200009a0:	00db      	lsls	r3, r3, #3
200009a2:	60fb      	str	r3, [r7, #12]
200009a4:	68fb      	ldr	r3, [r7, #12]
200009a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
200009a8:	68bb      	ldr	r3, [r7, #8]
200009aa:	3b01      	subs	r3, #1
200009ac:	d1fd      	bne.n	200009aa <DAP_Delay+0x2e>
200009ae:	60bb      	str	r3, [r7, #8]
}
200009b0:	bf00      	nop

  PIN_DELAY_SLOW(delay);

  *response = DAP_OK;
200009b2:	683b      	ldr	r3, [r7, #0]
200009b4:	2200      	movs	r2, #0
200009b6:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
200009b8:	4b03      	ldr	r3, [pc, #12]	@ (200009c8 <DAP_Delay+0x4c>)
}
200009ba:	4618      	mov	r0, r3
200009bc:	3714      	adds	r7, #20
200009be:	46bd      	mov	sp, r7
200009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200009c4:	4770      	bx	lr
200009c6:	bf00      	nop
200009c8:	00020001 	.word	0x00020001

200009cc <DAP_HostStatus>:
// Process Host Status command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_HostStatus(const uint8_t *request, uint8_t *response) {
200009cc:	b580      	push	{r7, lr}
200009ce:	b082      	sub	sp, #8
200009d0:	af00      	add	r7, sp, #0
200009d2:	6078      	str	r0, [r7, #4]
200009d4:	6039      	str	r1, [r7, #0]

  switch (*request) {
200009d6:	687b      	ldr	r3, [r7, #4]
200009d8:	781b      	ldrb	r3, [r3, #0]
200009da:	2b00      	cmp	r3, #0
200009dc:	d002      	beq.n	200009e4 <DAP_HostStatus+0x18>
200009de:	2b01      	cmp	r3, #1
200009e0:	d009      	beq.n	200009f6 <DAP_HostStatus+0x2a>
200009e2:	e011      	b.n	20000a08 <DAP_HostStatus+0x3c>
    case DAP_DEBUGGER_CONNECTED:
      LED_CONNECTED_OUT((*(request+1) & 1U));
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	3301      	adds	r3, #1
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	f003 0301 	and.w	r3, r3, #1
200009ee:	4618      	mov	r0, r3
200009f0:	f7ff fe6c 	bl	200006cc <LED_CONNECTED_OUT>
      break;
200009f4:	e00d      	b.n	20000a12 <DAP_HostStatus+0x46>
    case DAP_TARGET_RUNNING:
      LED_RUNNING_OUT((*(request+1) & 1U));
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	3301      	adds	r3, #1
200009fa:	781b      	ldrb	r3, [r3, #0]
200009fc:	f003 0301 	and.w	r3, r3, #1
20000a00:	4618      	mov	r0, r3
20000a02:	f7ff fe7d 	bl	20000700 <LED_RUNNING_OUT>
      break;
20000a06:	e004      	b.n	20000a12 <DAP_HostStatus+0x46>
    default:
      *response = DAP_ERROR;
20000a08:	683b      	ldr	r3, [r7, #0]
20000a0a:	22ff      	movs	r2, #255	@ 0xff
20000a0c:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) | 1U);
20000a0e:	4b05      	ldr	r3, [pc, #20]	@ (20000a24 <DAP_HostStatus+0x58>)
20000a10:	e003      	b.n	20000a1a <DAP_HostStatus+0x4e>
  }

  *response = DAP_OK;
20000a12:	683b      	ldr	r3, [r7, #0]
20000a14:	2200      	movs	r2, #0
20000a16:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
20000a18:	4b02      	ldr	r3, [pc, #8]	@ (20000a24 <DAP_HostStatus+0x58>)
}
20000a1a:	4618      	mov	r0, r3
20000a1c:	3708      	adds	r7, #8
20000a1e:	46bd      	mov	sp, r7
20000a20:	bd80      	pop	{r7, pc}
20000a22:	bf00      	nop
20000a24:	00020001 	.word	0x00020001

20000a28 <DAP_Connect>:
// Process Connect command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Connect(const uint8_t *request, uint8_t *response) {
20000a28:	b580      	push	{r7, lr}
20000a2a:	b088      	sub	sp, #32
20000a2c:	af00      	add	r7, sp, #0
20000a2e:	6078      	str	r0, [r7, #4]
20000a30:	6039      	str	r1, [r7, #0]
  uint32_t port;
  uint8_t tms_buff[12] = {0};
20000a32:	2300      	movs	r3, #0
20000a34:	60fb      	str	r3, [r7, #12]
20000a36:	f107 0310 	add.w	r3, r7, #16
20000a3a:	2200      	movs	r2, #0
20000a3c:	601a      	str	r2, [r3, #0]
20000a3e:	605a      	str	r2, [r3, #4]
  int i;
  for(i =0; i < 8; i++)
20000a40:	2300      	movs	r3, #0
20000a42:	61bb      	str	r3, [r7, #24]
20000a44:	e008      	b.n	20000a58 <DAP_Connect+0x30>
  {
	  tms_buff[i] = 0xff;
20000a46:	f107 020c 	add.w	r2, r7, #12
20000a4a:	69bb      	ldr	r3, [r7, #24]
20000a4c:	4413      	add	r3, r2
20000a4e:	22ff      	movs	r2, #255	@ 0xff
20000a50:	701a      	strb	r2, [r3, #0]
  for(i =0; i < 8; i++)
20000a52:	69bb      	ldr	r3, [r7, #24]
20000a54:	3301      	adds	r3, #1
20000a56:	61bb      	str	r3, [r7, #24]
20000a58:	69bb      	ldr	r3, [r7, #24]
20000a5a:	2b07      	cmp	r3, #7
20000a5c:	ddf3      	ble.n	20000a46 <DAP_Connect+0x1e>
  }

  tms_buff[i++] = 0x3C;
20000a5e:	69bb      	ldr	r3, [r7, #24]
20000a60:	1c5a      	adds	r2, r3, #1
20000a62:	61ba      	str	r2, [r7, #24]
20000a64:	3320      	adds	r3, #32
20000a66:	443b      	add	r3, r7
20000a68:	223c      	movs	r2, #60	@ 0x3c
20000a6a:	f803 2c14 	strb.w	r2, [r3, #-20]
  tms_buff[i++] = 0xE7;
20000a6e:	69bb      	ldr	r3, [r7, #24]
20000a70:	1c5a      	adds	r2, r3, #1
20000a72:	61ba      	str	r2, [r7, #24]
20000a74:	3320      	adds	r3, #32
20000a76:	443b      	add	r3, r7
20000a78:	22e7      	movs	r2, #231	@ 0xe7
20000a7a:	f803 2c14 	strb.w	r2, [r3, #-20]
  tms_buff[i++] = 0xff;
20000a7e:	69bb      	ldr	r3, [r7, #24]
20000a80:	1c5a      	adds	r2, r3, #1
20000a82:	61ba      	str	r2, [r7, #24]
20000a84:	3320      	adds	r3, #32
20000a86:	443b      	add	r3, r7
20000a88:	22ff      	movs	r2, #255	@ 0xff
20000a8a:	f803 2c14 	strb.w	r2, [r3, #-20]
  tms_buff[i++] = 0xff;
20000a8e:	69bb      	ldr	r3, [r7, #24]
20000a90:	1c5a      	adds	r2, r3, #1
20000a92:	61ba      	str	r2, [r7, #24]
20000a94:	3320      	adds	r3, #32
20000a96:	443b      	add	r3, r7
20000a98:	22ff      	movs	r2, #255	@ 0xff
20000a9a:	f803 2c14 	strb.w	r2, [r3, #-20]

  JTAG_Reset();
20000a9e:	f003 fee5 	bl	2000486c <JTAG_Reset>

  RCC->APB1ENR &= ~(1 << 15);
20000aa2:	4b31      	ldr	r3, [pc, #196]	@ (20000b68 <DAP_Connect+0x140>)
20000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000aa6:	4a30      	ldr	r2, [pc, #192]	@ (20000b68 <DAP_Connect+0x140>)
20000aa8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
20000aac:	6413      	str	r3, [r2, #64]	@ 0x40

  RCC->APB2ENR &= ~(1 << 13);
20000aae:	4b2e      	ldr	r3, [pc, #184]	@ (20000b68 <DAP_Connect+0x140>)
20000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20000ab2:	4a2d      	ldr	r2, [pc, #180]	@ (20000b68 <DAP_Connect+0x140>)
20000ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
20000ab8:	6453      	str	r3, [r2, #68]	@ 0x44


  RCC->APB1ENR |= (1 << 15);
20000aba:	4b2b      	ldr	r3, [pc, #172]	@ (20000b68 <DAP_Connect+0x140>)
20000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000abe:	4a2a      	ldr	r2, [pc, #168]	@ (20000b68 <DAP_Connect+0x140>)
20000ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20000ac4:	6413      	str	r3, [r2, #64]	@ 0x40

  RCC->APB2ENR |= (1 << 13);
20000ac6:	4b28      	ldr	r3, [pc, #160]	@ (20000b68 <DAP_Connect+0x140>)
20000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20000aca:	4a27      	ldr	r2, [pc, #156]	@ (20000b68 <DAP_Connect+0x140>)
20000acc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
20000ad0:	6453      	str	r3, [r2, #68]	@ 0x44

  SPI4->CR1 |= (1 << 6);
20000ad2:	4b26      	ldr	r3, [pc, #152]	@ (20000b6c <DAP_Connect+0x144>)
20000ad4:	681b      	ldr	r3, [r3, #0]
20000ad6:	4a25      	ldr	r2, [pc, #148]	@ (20000b6c <DAP_Connect+0x144>)
20000ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20000adc:	6013      	str	r3, [r2, #0]

   SPI3->CR1 &= ~0x38;
20000ade:	4b24      	ldr	r3, [pc, #144]	@ (20000b70 <DAP_Connect+0x148>)
20000ae0:	681b      	ldr	r3, [r3, #0]
20000ae2:	4a23      	ldr	r2, [pc, #140]	@ (20000b70 <DAP_Connect+0x148>)
20000ae4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
20000ae8:	6013      	str	r3, [r2, #0]

   SPI3->CR1 |= (0x7 << 3);
20000aea:	4b21      	ldr	r3, [pc, #132]	@ (20000b70 <DAP_Connect+0x148>)
20000aec:	681b      	ldr	r3, [r3, #0]
20000aee:	4a20      	ldr	r2, [pc, #128]	@ (20000b70 <DAP_Connect+0x148>)
20000af0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
20000af4:	6013      	str	r3, [r2, #0]

   SPI4->CR1 |= (1 << 15);
20000af6:	4b1d      	ldr	r3, [pc, #116]	@ (20000b6c <DAP_Connect+0x144>)
20000af8:	681b      	ldr	r3, [r3, #0]
20000afa:	4a1c      	ldr	r2, [pc, #112]	@ (20000b6c <DAP_Connect+0x144>)
20000afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20000b00:	6013      	str	r3, [r2, #0]
   SPI4->CR1 |= (1 << 14);
20000b02:	4b1a      	ldr	r3, [pc, #104]	@ (20000b6c <DAP_Connect+0x144>)
20000b04:	681b      	ldr	r3, [r3, #0]
20000b06:	4a19      	ldr	r2, [pc, #100]	@ (20000b6c <DAP_Connect+0x144>)
20000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20000b0c:	6013      	str	r3, [r2, #0]

  if (*request == DAP_PORT_AUTODETECT) {
20000b0e:	687b      	ldr	r3, [r7, #4]
20000b10:	781b      	ldrb	r3, [r3, #0]
20000b12:	2b00      	cmp	r3, #0
20000b14:	d102      	bne.n	20000b1c <DAP_Connect+0xf4>
    port = DAP_DEFAULT_PORT;
20000b16:	2301      	movs	r3, #1
20000b18:	61fb      	str	r3, [r7, #28]
20000b1a:	e002      	b.n	20000b22 <DAP_Connect+0xfa>
  } else {
    port = *request;
20000b1c:	687b      	ldr	r3, [r7, #4]
20000b1e:	781b      	ldrb	r3, [r3, #0]
20000b20:	61fb      	str	r3, [r7, #28]
  }

  switch (port) {
20000b22:	69fb      	ldr	r3, [r7, #28]
20000b24:	2b01      	cmp	r3, #1
20000b26:	d003      	beq.n	20000b30 <DAP_Connect+0x108>
20000b28:	69fb      	ldr	r3, [r7, #28]
20000b2a:	2b02      	cmp	r3, #2
20000b2c:	d004      	beq.n	20000b38 <DAP_Connect+0x110>
20000b2e:	e00d      	b.n	20000b4c <DAP_Connect+0x124>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      DAP_Data.debug_port = DAP_PORT_SWD;
20000b30:	4b10      	ldr	r3, [pc, #64]	@ (20000b74 <DAP_Connect+0x14c>)
20000b32:	2201      	movs	r2, #1
20000b34:	701a      	strb	r2, [r3, #0]
      //PORT_SWD_SETUP();

      break;
20000b36:	e00c      	b.n	20000b52 <DAP_Connect+0x12a>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      DAP_Data.debug_port = DAP_PORT_JTAG;
20000b38:	4b0e      	ldr	r3, [pc, #56]	@ (20000b74 <DAP_Connect+0x14c>)
20000b3a:	2202      	movs	r2, #2
20000b3c:	701a      	strb	r2, [r3, #0]
      //PORT_JTAG_SETUP();
      SWJ_Sequence (96, tms_buff);
20000b3e:	f107 030c 	add.w	r3, r7, #12
20000b42:	4619      	mov	r1, r3
20000b44:	2060      	movs	r0, #96	@ 0x60
20000b46:	f003 fa97 	bl	20004078 <SWJ_Sequence>
      break;
20000b4a:	e002      	b.n	20000b52 <DAP_Connect+0x12a>
#endif
    default:
      port = DAP_PORT_DISABLED;
20000b4c:	2300      	movs	r3, #0
20000b4e:	61fb      	str	r3, [r7, #28]
      break;
20000b50:	bf00      	nop
  }

  *response = (uint8_t)port;
20000b52:	69fb      	ldr	r3, [r7, #28]
20000b54:	b2da      	uxtb	r2, r3
20000b56:	683b      	ldr	r3, [r7, #0]
20000b58:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
20000b5a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001

  SPI3->DR = 0x0;
  SPI3->DR = 0x0;


}
20000b5e:	4618      	mov	r0, r3
20000b60:	3720      	adds	r7, #32
20000b62:	46bd      	mov	sp, r7
20000b64:	bd80      	pop	{r7, pc}
20000b66:	bf00      	nop
20000b68:	40023800 	.word	0x40023800
20000b6c:	40013400 	.word	0x40013400
20000b70:	40003c00 	.word	0x40003c00
20000b74:	2000da4c 	.word	0x2000da4c

20000b78 <DAP_Disconnect>:


// Process Disconnect command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_Disconnect(uint8_t *response) {
20000b78:	b580      	push	{r7, lr}
20000b7a:	b082      	sub	sp, #8
20000b7c:	af00      	add	r7, sp, #0
20000b7e:	6078      	str	r0, [r7, #4]

  DAP_Data.debug_port = DAP_PORT_DISABLED;
20000b80:	4b06      	ldr	r3, [pc, #24]	@ (20000b9c <DAP_Disconnect+0x24>)
20000b82:	2200      	movs	r2, #0
20000b84:	701a      	strb	r2, [r3, #0]
  PORT_OFF();
20000b86:	f7ff fd0f 	bl	200005a8 <PORT_OFF>

  *response = DAP_OK;
20000b8a:	687b      	ldr	r3, [r7, #4]
20000b8c:	2200      	movs	r2, #0
20000b8e:	701a      	strb	r2, [r3, #0]
  return (1U);
20000b90:	2301      	movs	r3, #1
}
20000b92:	4618      	mov	r0, r3
20000b94:	3708      	adds	r7, #8
20000b96:	46bd      	mov	sp, r7
20000b98:	bd80      	pop	{r7, pc}
20000b9a:	bf00      	nop
20000b9c:	2000da4c 	.word	0x2000da4c

20000ba0 <DAP_ResetTarget>:


// Process Reset Target command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_ResetTarget(uint8_t *response) {
20000ba0:	b590      	push	{r4, r7, lr}
20000ba2:	b083      	sub	sp, #12
20000ba4:	af00      	add	r7, sp, #0
20000ba6:	6078      	str	r0, [r7, #4]

  *(response+1) = RESET_TARGET();
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	1c5c      	adds	r4, r3, #1
20000bac:	f7ff fdcc 	bl	20000748 <RESET_TARGET>
20000bb0:	4603      	mov	r3, r0
20000bb2:	7023      	strb	r3, [r4, #0]
  *(response+0) = DAP_OK;
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	2200      	movs	r2, #0
20000bb8:	701a      	strb	r2, [r3, #0]
  return (2U);
20000bba:	2302      	movs	r3, #2
}
20000bbc:	4618      	mov	r0, r3
20000bbe:	370c      	adds	r7, #12
20000bc0:	46bd      	mov	sp, r7
20000bc2:	bd90      	pop	{r4, r7, pc}

20000bc4 <DAP_SWJ_Pins>:
// Process SWJ Pins command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Pins(const uint8_t *request, uint8_t *response) {
20000bc4:	b590      	push	{r4, r7, lr}
20000bc6:	b087      	sub	sp, #28
20000bc8:	af00      	add	r7, sp, #0
20000bca:	6078      	str	r0, [r7, #4]
20000bcc:	6039      	str	r1, [r7, #0]
  uint32_t value;
  uint32_t select;
  uint32_t wait;
  uint32_t timestamp;

  value  = (uint32_t) *(request+0);
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	781b      	ldrb	r3, [r3, #0]
20000bd2:	613b      	str	r3, [r7, #16]
  select = (uint32_t) *(request+1);
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	3301      	adds	r3, #1
20000bd8:	781b      	ldrb	r3, [r3, #0]
20000bda:	60fb      	str	r3, [r7, #12]
  wait   = (uint32_t)(*(request+2) <<  0) |
20000bdc:	687b      	ldr	r3, [r7, #4]
20000bde:	3302      	adds	r3, #2
20000be0:	781b      	ldrb	r3, [r3, #0]
20000be2:	461a      	mov	r2, r3
           (uint32_t)(*(request+3) <<  8) |
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	3303      	adds	r3, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	021b      	lsls	r3, r3, #8
  wait   = (uint32_t)(*(request+2) <<  0) |
20000bec:	431a      	orrs	r2, r3
           (uint32_t)(*(request+4) << 16) |
20000bee:	687b      	ldr	r3, [r7, #4]
20000bf0:	3304      	adds	r3, #4
20000bf2:	781b      	ldrb	r3, [r3, #0]
20000bf4:	041b      	lsls	r3, r3, #16
           (uint32_t)(*(request+3) <<  8) |
20000bf6:	431a      	orrs	r2, r3
           (uint32_t)(*(request+5) << 24);
20000bf8:	687b      	ldr	r3, [r7, #4]
20000bfa:	3305      	adds	r3, #5
20000bfc:	781b      	ldrb	r3, [r3, #0]
20000bfe:	061b      	lsls	r3, r3, #24
  wait   = (uint32_t)(*(request+2) <<  0) |
20000c00:	4313      	orrs	r3, r2
20000c02:	617b      	str	r3, [r7, #20]

  if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000c04:	68fb      	ldr	r3, [r7, #12]
20000c06:	f003 0301 	and.w	r3, r3, #1
20000c0a:	2b00      	cmp	r3, #0
20000c0c:	d009      	beq.n	20000c22 <DAP_SWJ_Pins+0x5e>
    if ((value & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000c0e:	693b      	ldr	r3, [r7, #16]
20000c10:	f003 0301 	and.w	r3, r3, #1
20000c14:	2b00      	cmp	r3, #0
20000c16:	d002      	beq.n	20000c1e <DAP_SWJ_Pins+0x5a>
      PIN_SWCLK_TCK_SET();
20000c18:	f7ff fcd5 	bl	200005c6 <PIN_SWCLK_TCK_SET>
20000c1c:	e001      	b.n	20000c22 <DAP_SWJ_Pins+0x5e>
    } else {
      PIN_SWCLK_TCK_CLR();
20000c1e:	f7ff fcd9 	bl	200005d4 <PIN_SWCLK_TCK_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000c22:	68fb      	ldr	r3, [r7, #12]
20000c24:	f003 0302 	and.w	r3, r3, #2
20000c28:	2b00      	cmp	r3, #0
20000c2a:	d009      	beq.n	20000c40 <DAP_SWJ_Pins+0x7c>
    if ((value & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000c2c:	693b      	ldr	r3, [r7, #16]
20000c2e:	f003 0302 	and.w	r3, r3, #2
20000c32:	2b00      	cmp	r3, #0
20000c34:	d002      	beq.n	20000c3c <DAP_SWJ_Pins+0x78>
      PIN_SWDIO_TMS_SET();
20000c36:	f7ff fcdc 	bl	200005f2 <PIN_SWDIO_TMS_SET>
20000c3a:	e001      	b.n	20000c40 <DAP_SWJ_Pins+0x7c>
    } else {
      PIN_SWDIO_TMS_CLR();
20000c3c:	f7ff fce0 	bl	20000600 <PIN_SWDIO_TMS_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000c40:	68fb      	ldr	r3, [r7, #12]
20000c42:	f003 0304 	and.w	r3, r3, #4
20000c46:	2b00      	cmp	r3, #0
20000c48:	d004      	beq.n	20000c54 <DAP_SWJ_Pins+0x90>
    PIN_TDI_OUT(value >> DAP_SWJ_TDI);
20000c4a:	693b      	ldr	r3, [r7, #16]
20000c4c:	089b      	lsrs	r3, r3, #2
20000c4e:	4618      	mov	r0, r3
20000c50:	f7ff fcf3 	bl	2000063a <PIN_TDI_OUT>
  }
  if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000c54:	68fb      	ldr	r3, [r7, #12]
20000c56:	f003 0320 	and.w	r3, r3, #32
20000c5a:	2b00      	cmp	r3, #0
20000c5c:	d004      	beq.n	20000c68 <DAP_SWJ_Pins+0xa4>
    PIN_nTRST_OUT(value >> DAP_SWJ_nTRST);
20000c5e:	693b      	ldr	r3, [r7, #16]
20000c60:	095b      	lsrs	r3, r3, #5
20000c62:	4618      	mov	r0, r3
20000c64:	f7ff fd03 	bl	2000066e <PIN_nTRST_OUT>
  }
  if ((select & (1U << DAP_SWJ_nRESET)) != 0U){
20000c68:	68fb      	ldr	r3, [r7, #12]
20000c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000c6e:	2b00      	cmp	r3, #0
20000c70:	d004      	beq.n	20000c7c <DAP_SWJ_Pins+0xb8>
    PIN_nRESET_OUT(value >> DAP_SWJ_nRESET);
20000c72:	693b      	ldr	r3, [r7, #16]
20000c74:	09db      	lsrs	r3, r3, #7
20000c76:	4618      	mov	r0, r3
20000c78:	f7ff fd10 	bl	2000069c <PIN_nRESET_OUT>
  }

  if (wait != 0U) {
20000c7c:	697b      	ldr	r3, [r7, #20]
20000c7e:	2b00      	cmp	r3, #0
20000c80:	d05a      	beq.n	20000d38 <DAP_SWJ_Pins+0x174>
#if (TIMESTAMP_CLOCK != 0U)
    if (wait > 3000000U) {
20000c82:	697b      	ldr	r3, [r7, #20]
20000c84:	4a3f      	ldr	r2, [pc, #252]	@ (20000d84 <DAP_SWJ_Pins+0x1c0>)
20000c86:	4293      	cmp	r3, r2
20000c88:	d901      	bls.n	20000c8e <DAP_SWJ_Pins+0xca>
      wait = 3000000U;
20000c8a:	4b3e      	ldr	r3, [pc, #248]	@ (20000d84 <DAP_SWJ_Pins+0x1c0>)
20000c8c:	617b      	str	r3, [r7, #20]
    }
#if (TIMESTAMP_CLOCK >= 1000000U)
    wait *= TIMESTAMP_CLOCK / 1000000U;
20000c8e:	697b      	ldr	r3, [r7, #20]
20000c90:	2264      	movs	r2, #100	@ 0x64
20000c92:	fb02 f303 	mul.w	r3, r2, r3
20000c96:	617b      	str	r3, [r7, #20]
    wait /= 1000000U / TIMESTAMP_CLOCK;
#endif
#else
    wait  = 1U;
#endif
    timestamp = TIMESTAMP_GET();
20000c98:	f7ff fd4a 	bl	20000730 <TIMESTAMP_GET>
20000c9c:	60b8      	str	r0, [r7, #8]
    do {
      if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000c9e:	68fb      	ldr	r3, [r7, #12]
20000ca0:	f003 0301 	and.w	r3, r3, #1
20000ca4:	2b00      	cmp	r3, #0
20000ca6:	d005      	beq.n	20000cb4 <DAP_SWJ_Pins+0xf0>
        if ((value >> DAP_SWJ_SWCLK_TCK) ^ PIN_SWCLK_TCK_IN()) {
20000ca8:	f7ff fc85 	bl	200005b6 <PIN_SWCLK_TCK_IN>
20000cac:	4602      	mov	r2, r0
20000cae:	693b      	ldr	r3, [r7, #16]
20000cb0:	4293      	cmp	r3, r2
20000cb2:	d130      	bne.n	20000d16 <DAP_SWJ_Pins+0x152>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000cb4:	68fb      	ldr	r3, [r7, #12]
20000cb6:	f003 0302 	and.w	r3, r3, #2
20000cba:	2b00      	cmp	r3, #0
20000cbc:	d006      	beq.n	20000ccc <DAP_SWJ_Pins+0x108>
        if ((value >> DAP_SWJ_SWDIO_TMS) ^ PIN_SWDIO_TMS_IN()) {
20000cbe:	693b      	ldr	r3, [r7, #16]
20000cc0:	085c      	lsrs	r4, r3, #1
20000cc2:	f7ff fc8e 	bl	200005e2 <PIN_SWDIO_TMS_IN>
20000cc6:	4603      	mov	r3, r0
20000cc8:	429c      	cmp	r4, r3
20000cca:	d126      	bne.n	20000d1a <DAP_SWJ_Pins+0x156>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000ccc:	68fb      	ldr	r3, [r7, #12]
20000cce:	f003 0304 	and.w	r3, r3, #4
20000cd2:	2b00      	cmp	r3, #0
20000cd4:	d006      	beq.n	20000ce4 <DAP_SWJ_Pins+0x120>
        if ((value >> DAP_SWJ_TDI) ^ PIN_TDI_IN()) {
20000cd6:	693b      	ldr	r3, [r7, #16]
20000cd8:	089c      	lsrs	r4, r3, #2
20000cda:	f7ff fca6 	bl	2000062a <PIN_TDI_IN>
20000cde:	4603      	mov	r3, r0
20000ce0:	429c      	cmp	r4, r3
20000ce2:	d11c      	bne.n	20000d1e <DAP_SWJ_Pins+0x15a>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000ce4:	68fb      	ldr	r3, [r7, #12]
20000ce6:	f003 0320 	and.w	r3, r3, #32
20000cea:	2b00      	cmp	r3, #0
20000cec:	d006      	beq.n	20000cfc <DAP_SWJ_Pins+0x138>
        if ((value >> DAP_SWJ_nTRST) ^ PIN_nTRST_IN()) {
20000cee:	693b      	ldr	r3, [r7, #16]
20000cf0:	095c      	lsrs	r4, r3, #5
20000cf2:	f7ff fcb4 	bl	2000065e <PIN_nTRST_IN>
20000cf6:	4603      	mov	r3, r0
20000cf8:	429c      	cmp	r4, r3
20000cfa:	d112      	bne.n	20000d22 <DAP_SWJ_Pins+0x15e>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nRESET)) != 0U) {
20000cfc:	68fb      	ldr	r3, [r7, #12]
20000cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000d02:	2b00      	cmp	r3, #0
20000d04:	d017      	beq.n	20000d36 <DAP_SWJ_Pins+0x172>
        if ((value >> DAP_SWJ_nRESET) ^ PIN_nRESET_IN()) {
20000d06:	693b      	ldr	r3, [r7, #16]
20000d08:	09dc      	lsrs	r4, r3, #7
20000d0a:	f7ff fcbb 	bl	20000684 <PIN_nRESET_IN>
20000d0e:	4603      	mov	r3, r0
20000d10:	429c      	cmp	r4, r3
20000d12:	d010      	beq.n	20000d36 <DAP_SWJ_Pins+0x172>
          continue;
20000d14:	e006      	b.n	20000d24 <DAP_SWJ_Pins+0x160>
          continue;
20000d16:	bf00      	nop
20000d18:	e004      	b.n	20000d24 <DAP_SWJ_Pins+0x160>
          continue;
20000d1a:	bf00      	nop
20000d1c:	e002      	b.n	20000d24 <DAP_SWJ_Pins+0x160>
          continue;
20000d1e:	bf00      	nop
20000d20:	e000      	b.n	20000d24 <DAP_SWJ_Pins+0x160>
          continue;
20000d22:	bf00      	nop
        }
      }
      break;
    } while ((TIMESTAMP_GET() - timestamp) < wait);
20000d24:	f7ff fd04 	bl	20000730 <TIMESTAMP_GET>
20000d28:	4602      	mov	r2, r0
20000d2a:	68bb      	ldr	r3, [r7, #8]
20000d2c:	1ad3      	subs	r3, r2, r3
20000d2e:	697a      	ldr	r2, [r7, #20]
20000d30:	429a      	cmp	r2, r3
20000d32:	d8b4      	bhi.n	20000c9e <DAP_SWJ_Pins+0xda>
20000d34:	e000      	b.n	20000d38 <DAP_SWJ_Pins+0x174>
      break;
20000d36:	bf00      	nop
  }

  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000d38:	f7ff fc3d 	bl	200005b6 <PIN_SWCLK_TCK_IN>
20000d3c:	4604      	mov	r4, r0
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000d3e:	f7ff fc50 	bl	200005e2 <PIN_SWDIO_TMS_IN>
20000d42:	4603      	mov	r3, r0
20000d44:	005b      	lsls	r3, r3, #1
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000d46:	431c      	orrs	r4, r3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000d48:	f7ff fc6f 	bl	2000062a <PIN_TDI_IN>
20000d4c:	4603      	mov	r3, r0
20000d4e:	009b      	lsls	r3, r3, #2
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000d50:	431c      	orrs	r4, r3
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000d52:	f7ff fc7c 	bl	2000064e <PIN_TDO_IN>
20000d56:	4603      	mov	r3, r0
20000d58:	00db      	lsls	r3, r3, #3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000d5a:	431c      	orrs	r4, r3
          (PIN_nTRST_IN()     << DAP_SWJ_nTRST)     |
20000d5c:	f7ff fc7f 	bl	2000065e <PIN_nTRST_IN>
20000d60:	4603      	mov	r3, r0
20000d62:	015b      	lsls	r3, r3, #5
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000d64:	431c      	orrs	r4, r3
          (PIN_nRESET_IN()    << DAP_SWJ_nRESET);
20000d66:	f7ff fc8d 	bl	20000684 <PIN_nRESET_IN>
20000d6a:	4603      	mov	r3, r0
20000d6c:	01db      	lsls	r3, r3, #7
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000d6e:	4323      	orrs	r3, r4
20000d70:	613b      	str	r3, [r7, #16]

  *response = (uint8_t)value;
20000d72:	693b      	ldr	r3, [r7, #16]
20000d74:	b2da      	uxtb	r2, r3
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	701a      	strb	r2, [r3, #0]
#else
  *response = 0U;
#endif

  return ((6U << 16) | 1U);
20000d7a:	4b03      	ldr	r3, [pc, #12]	@ (20000d88 <DAP_SWJ_Pins+0x1c4>)
}
20000d7c:	4618      	mov	r0, r3
20000d7e:	371c      	adds	r7, #28
20000d80:	46bd      	mov	sp, r7
20000d82:	bd90      	pop	{r4, r7, pc}
20000d84:	002dc6c0 	.word	0x002dc6c0
20000d88:	00060001 	.word	0x00060001

20000d8c <DAP_SWJ_Clock>:
// Process SWJ Clock command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Clock(const uint8_t *request, uint8_t *response) {
20000d8c:	b580      	push	{r7, lr}
20000d8e:	b084      	sub	sp, #16
20000d90:	af00      	add	r7, sp, #0
20000d92:	6078      	str	r0, [r7, #4]
20000d94:	6039      	str	r1, [r7, #0]
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  uint32_t clock;
  uint32_t delay;

  clock = (uint32_t)(*(request+0) <<  0) |
20000d96:	687b      	ldr	r3, [r7, #4]
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	461a      	mov	r2, r3
          (uint32_t)(*(request+1) <<  8) |
20000d9c:	687b      	ldr	r3, [r7, #4]
20000d9e:	3301      	adds	r3, #1
20000da0:	781b      	ldrb	r3, [r3, #0]
20000da2:	021b      	lsls	r3, r3, #8
  clock = (uint32_t)(*(request+0) <<  0) |
20000da4:	431a      	orrs	r2, r3
          (uint32_t)(*(request+2) << 16) |
20000da6:	687b      	ldr	r3, [r7, #4]
20000da8:	3302      	adds	r3, #2
20000daa:	781b      	ldrb	r3, [r3, #0]
20000dac:	041b      	lsls	r3, r3, #16
          (uint32_t)(*(request+1) <<  8) |
20000dae:	431a      	orrs	r2, r3
          (uint32_t)(*(request+3) << 24);
20000db0:	687b      	ldr	r3, [r7, #4]
20000db2:	3303      	adds	r3, #3
20000db4:	781b      	ldrb	r3, [r3, #0]
20000db6:	061b      	lsls	r3, r3, #24
  clock = (uint32_t)(*(request+0) <<  0) |
20000db8:	4313      	orrs	r3, r2
20000dba:	60fb      	str	r3, [r7, #12]

  if (clock == 0U) {
20000dbc:	68fb      	ldr	r3, [r7, #12]
20000dbe:	2b00      	cmp	r3, #0
20000dc0:	d104      	bne.n	20000dcc <DAP_SWJ_Clock+0x40>
    *response = DAP_ERROR;
20000dc2:	683b      	ldr	r3, [r7, #0]
20000dc4:	22ff      	movs	r2, #255	@ 0xff
20000dc6:	701a      	strb	r2, [r3, #0]
    return ((4U << 16) | 1U);
20000dc8:	4b06      	ldr	r3, [pc, #24]	@ (20000de4 <DAP_SWJ_Clock+0x58>)
20000dca:	e006      	b.n	20000dda <DAP_SWJ_Clock+0x4e>
  }

  Set_Clock_Delay(clock);
20000dcc:	68f8      	ldr	r0, [r7, #12]
20000dce:	f7ff fcc3 	bl	20000758 <Set_Clock_Delay>

  *response = DAP_OK;
20000dd2:	683b      	ldr	r3, [r7, #0]
20000dd4:	2200      	movs	r2, #0
20000dd6:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  return ((4U << 16) | 1U);
20000dd8:	4b02      	ldr	r3, [pc, #8]	@ (20000de4 <DAP_SWJ_Clock+0x58>)
}
20000dda:	4618      	mov	r0, r3
20000ddc:	3710      	adds	r7, #16
20000dde:	46bd      	mov	sp, r7
20000de0:	bd80      	pop	{r7, pc}
20000de2:	bf00      	nop
20000de4:	00040001 	.word	0x00040001

20000de8 <DAP_SWJ_Sequence>:
// Process SWJ Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Sequence(const uint8_t *request, uint8_t *response) {
20000de8:	b580      	push	{r7, lr}
20000dea:	b084      	sub	sp, #16
20000dec:	af00      	add	r7, sp, #0
20000dee:	6078      	str	r0, [r7, #4]
20000df0:	6039      	str	r1, [r7, #0]
  uint32_t count;

  count = *request++;
20000df2:	687b      	ldr	r3, [r7, #4]
20000df4:	1c5a      	adds	r2, r3, #1
20000df6:	607a      	str	r2, [r7, #4]
20000df8:	781b      	ldrb	r3, [r3, #0]
20000dfa:	60fb      	str	r3, [r7, #12]
  if (count == 0U) {
20000dfc:	68fb      	ldr	r3, [r7, #12]
20000dfe:	2b00      	cmp	r3, #0
20000e00:	d102      	bne.n	20000e08 <DAP_SWJ_Sequence+0x20>
    count = 256U;
20000e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
20000e06:	60fb      	str	r3, [r7, #12]
  }

#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  SWJ_Sequence(count, request);
20000e08:	6879      	ldr	r1, [r7, #4]
20000e0a:	68f8      	ldr	r0, [r7, #12]
20000e0c:	f003 f934 	bl	20004078 <SWJ_Sequence>
  *response = DAP_OK;
20000e10:	683b      	ldr	r3, [r7, #0]
20000e12:	2200      	movs	r2, #0
20000e14:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  count = (count + 7U) >> 3;
20000e16:	68fb      	ldr	r3, [r7, #12]
20000e18:	3307      	adds	r3, #7
20000e1a:	08db      	lsrs	r3, r3, #3
20000e1c:	60fb      	str	r3, [r7, #12]

  return (((count + 1U) << 16) | 1U);
20000e1e:	68fb      	ldr	r3, [r7, #12]
20000e20:	3301      	adds	r3, #1
20000e22:	041b      	lsls	r3, r3, #16
20000e24:	f043 0301 	orr.w	r3, r3, #1
}
20000e28:	4618      	mov	r0, r3
20000e2a:	3710      	adds	r7, #16
20000e2c:	46bd      	mov	sp, r7
20000e2e:	bd80      	pop	{r7, pc}

20000e30 <DAP_SWD_Configure>:
// Process SWD Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Configure(const uint8_t *request, uint8_t *response) {
20000e30:	b480      	push	{r7}
20000e32:	b085      	sub	sp, #20
20000e34:	af00      	add	r7, sp, #0
20000e36:	6078      	str	r0, [r7, #4]
20000e38:	6039      	str	r1, [r7, #0]
#if (DAP_SWD != 0)
  uint8_t value;

  value = *request;
20000e3a:	687b      	ldr	r3, [r7, #4]
20000e3c:	781b      	ldrb	r3, [r3, #0]
20000e3e:	73fb      	strb	r3, [r7, #15]
  DAP_Data.swd_conf.turnaround = (value & 0x03U) + 1U;
20000e40:	7bfb      	ldrb	r3, [r7, #15]
20000e42:	f003 0303 	and.w	r3, r3, #3
20000e46:	b2db      	uxtb	r3, r3
20000e48:	3301      	adds	r3, #1
20000e4a:	b2da      	uxtb	r2, r3
20000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (20000e78 <DAP_SWD_Configure+0x48>)
20000e4e:	761a      	strb	r2, [r3, #24]
  DAP_Data.swd_conf.data_phase = (value & 0x04U) ? 1U : 0U;
20000e50:	7bfb      	ldrb	r3, [r7, #15]
20000e52:	089b      	lsrs	r3, r3, #2
20000e54:	b2db      	uxtb	r3, r3
20000e56:	f003 0301 	and.w	r3, r3, #1
20000e5a:	b2da      	uxtb	r2, r3
20000e5c:	4b06      	ldr	r3, [pc, #24]	@ (20000e78 <DAP_SWD_Configure+0x48>)
20000e5e:	765a      	strb	r2, [r3, #25]

  *response = DAP_OK;
20000e60:	683b      	ldr	r3, [r7, #0]
20000e62:	2200      	movs	r2, #0
20000e64:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  return ((1U << 16) | 1U);
20000e66:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000e6a:	4618      	mov	r0, r3
20000e6c:	3714      	adds	r7, #20
20000e6e:	46bd      	mov	sp, r7
20000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e74:	4770      	bx	lr
20000e76:	bf00      	nop
20000e78:	2000da4c 	.word	0x2000da4c

20000e7c <DAP_SWD_Sequence>:
// Process SWD Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Sequence(const uint8_t *request, uint8_t *response) {
20000e7c:	b580      	push	{r7, lr}
20000e7e:	b088      	sub	sp, #32
20000e80:	af00      	add	r7, sp, #0
20000e82:	6078      	str	r0, [r7, #4]
20000e84:	6039      	str	r1, [r7, #0]
  uint32_t request_count;
  uint32_t response_count;
  uint32_t count;

#if (DAP_SWD != 0)
  *response++ = DAP_OK;
20000e86:	683b      	ldr	r3, [r7, #0]
20000e88:	1c5a      	adds	r2, r3, #1
20000e8a:	603a      	str	r2, [r7, #0]
20000e8c:	2200      	movs	r2, #0
20000e8e:	701a      	strb	r2, [r3, #0]
#else
  *response++ = DAP_ERROR;
#endif
  request_count  = 1U;
20000e90:	2301      	movs	r3, #1
20000e92:	61bb      	str	r3, [r7, #24]
  response_count = 1U;
20000e94:	2301      	movs	r3, #1
20000e96:	617b      	str	r3, [r7, #20]

  sequence_count = *request++;
20000e98:	687b      	ldr	r3, [r7, #4]
20000e9a:	1c5a      	adds	r2, r3, #1
20000e9c:	607a      	str	r2, [r7, #4]
20000e9e:	781b      	ldrb	r3, [r3, #0]
20000ea0:	61fb      	str	r3, [r7, #28]
  while (sequence_count--) {
20000ea2:	e03f      	b.n	20000f24 <DAP_SWD_Sequence+0xa8>
    sequence_info = *request++;
20000ea4:	687b      	ldr	r3, [r7, #4]
20000ea6:	1c5a      	adds	r2, r3, #1
20000ea8:	607a      	str	r2, [r7, #4]
20000eaa:	781b      	ldrb	r3, [r3, #0]
20000eac:	60fb      	str	r3, [r7, #12]
    count = sequence_info & SWD_SEQUENCE_CLK;
20000eae:	68fb      	ldr	r3, [r7, #12]
20000eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20000eb4:	613b      	str	r3, [r7, #16]
    if (count == 0U) {
20000eb6:	693b      	ldr	r3, [r7, #16]
20000eb8:	2b00      	cmp	r3, #0
20000eba:	d101      	bne.n	20000ec0 <DAP_SWD_Sequence+0x44>
      count = 64U;
20000ebc:	2340      	movs	r3, #64	@ 0x40
20000ebe:	613b      	str	r3, [r7, #16]
    }
    count = (count + 7U) / 8U;
20000ec0:	693b      	ldr	r3, [r7, #16]
20000ec2:	3307      	adds	r3, #7
20000ec4:	08db      	lsrs	r3, r3, #3
20000ec6:	613b      	str	r3, [r7, #16]
#if (DAP_SWD != 0)
    if ((sequence_info & SWD_SEQUENCE_DIN) != 0U) {
20000ec8:	68fb      	ldr	r3, [r7, #12]
20000eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000ece:	2b00      	cmp	r3, #0
20000ed0:	d002      	beq.n	20000ed8 <DAP_SWD_Sequence+0x5c>
      PIN_SWDIO_OUT_DISABLE();
20000ed2:	f7ff fba3 	bl	2000061c <PIN_SWDIO_OUT_DISABLE>
20000ed6:	e001      	b.n	20000edc <DAP_SWD_Sequence+0x60>
    } else {
      PIN_SWDIO_OUT_ENABLE();
20000ed8:	f7ff fb99 	bl	2000060e <PIN_SWDIO_OUT_ENABLE>
    }
    SWD_Sequence(sequence_info, request, response);
20000edc:	683a      	ldr	r2, [r7, #0]
20000ede:	6879      	ldr	r1, [r7, #4]
20000ee0:	68f8      	ldr	r0, [r7, #12]
20000ee2:	f003 f9bf 	bl	20004264 <SWD_Sequence>
    if (sequence_count == 0U) {
20000ee6:	69fb      	ldr	r3, [r7, #28]
20000ee8:	2b00      	cmp	r3, #0
20000eea:	d101      	bne.n	20000ef0 <DAP_SWD_Sequence+0x74>
      PIN_SWDIO_OUT_ENABLE();
20000eec:	f7ff fb8f 	bl	2000060e <PIN_SWDIO_OUT_ENABLE>
    }
#endif
    if ((sequence_info & SWD_SEQUENCE_DIN) != 0U) {
20000ef0:	68fb      	ldr	r3, [r7, #12]
20000ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000ef6:	2b00      	cmp	r3, #0
20000ef8:	d00b      	beq.n	20000f12 <DAP_SWD_Sequence+0x96>
      request_count++;
20000efa:	69bb      	ldr	r3, [r7, #24]
20000efc:	3301      	adds	r3, #1
20000efe:	61bb      	str	r3, [r7, #24]
#if (DAP_SWD != 0)
      response += count;
20000f00:	683a      	ldr	r2, [r7, #0]
20000f02:	693b      	ldr	r3, [r7, #16]
20000f04:	4413      	add	r3, r2
20000f06:	603b      	str	r3, [r7, #0]
      response_count += count;
20000f08:	697a      	ldr	r2, [r7, #20]
20000f0a:	693b      	ldr	r3, [r7, #16]
20000f0c:	4413      	add	r3, r2
20000f0e:	617b      	str	r3, [r7, #20]
20000f10:	e008      	b.n	20000f24 <DAP_SWD_Sequence+0xa8>
#endif
    } else {
      request += count;
20000f12:	687a      	ldr	r2, [r7, #4]
20000f14:	693b      	ldr	r3, [r7, #16]
20000f16:	4413      	add	r3, r2
20000f18:	607b      	str	r3, [r7, #4]
      request_count += count + 1U;
20000f1a:	693a      	ldr	r2, [r7, #16]
20000f1c:	69bb      	ldr	r3, [r7, #24]
20000f1e:	4413      	add	r3, r2
20000f20:	3301      	adds	r3, #1
20000f22:	61bb      	str	r3, [r7, #24]
  while (sequence_count--) {
20000f24:	69fb      	ldr	r3, [r7, #28]
20000f26:	1e5a      	subs	r2, r3, #1
20000f28:	61fa      	str	r2, [r7, #28]
20000f2a:	2b00      	cmp	r3, #0
20000f2c:	d1ba      	bne.n	20000ea4 <DAP_SWD_Sequence+0x28>
    }
  }

  return ((request_count << 16) | response_count);
20000f2e:	69bb      	ldr	r3, [r7, #24]
20000f30:	041a      	lsls	r2, r3, #16
20000f32:	697b      	ldr	r3, [r7, #20]
20000f34:	4313      	orrs	r3, r2
}
20000f36:	4618      	mov	r0, r3
20000f38:	3720      	adds	r7, #32
20000f3a:	46bd      	mov	sp, r7
20000f3c:	bd80      	pop	{r7, pc}

20000f3e <DAP_JTAG_Sequence>:
// Process JTAG Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Sequence(const uint8_t *request, uint8_t *response) {
20000f3e:	b580      	push	{r7, lr}
20000f40:	b086      	sub	sp, #24
20000f42:	af00      	add	r7, sp, #0
20000f44:	6078      	str	r0, [r7, #4]
20000f46:	6039      	str	r1, [r7, #0]
  uint32_t request_count;
  uint32_t response_count;
  uint32_t count;

#if (DAP_JTAG != 0)
  *response++ = DAP_OK;
20000f48:	683b      	ldr	r3, [r7, #0]
20000f4a:	1c5a      	adds	r2, r3, #1
20000f4c:	603a      	str	r2, [r7, #0]
20000f4e:	2200      	movs	r2, #0
20000f50:	701a      	strb	r2, [r3, #0]
#else
  *response++ = DAP_ERROR;
#endif
  request_count  = 1U;
20000f52:	2301      	movs	r3, #1
20000f54:	617b      	str	r3, [r7, #20]
  response_count = 1U;
20000f56:	2301      	movs	r3, #1
20000f58:	613b      	str	r3, [r7, #16]

  sequence_count = *request++;
20000f5a:	687b      	ldr	r3, [r7, #4]
20000f5c:	1c5a      	adds	r2, r3, #1
20000f5e:	607a      	str	r2, [r7, #4]
20000f60:	781b      	ldrb	r3, [r3, #0]
20000f62:	60fb      	str	r3, [r7, #12]

  response_count = JTAG_Sequence(sequence_count, request, response);
20000f64:	683a      	ldr	r2, [r7, #0]
20000f66:	6879      	ldr	r1, [r7, #4]
20000f68:	68f8      	ldr	r0, [r7, #12]
20000f6a:	f001 feaf 	bl	20002ccc <JTAG_Sequence>
20000f6e:	6138      	str	r0, [r7, #16]


  return ((request_count << 16) | response_count) +1;
20000f70:	697b      	ldr	r3, [r7, #20]
20000f72:	041a      	lsls	r2, r3, #16
20000f74:	693b      	ldr	r3, [r7, #16]
20000f76:	4313      	orrs	r3, r2
20000f78:	3301      	adds	r3, #1
}
20000f7a:	4618      	mov	r0, r3
20000f7c:	3718      	adds	r7, #24
20000f7e:	46bd      	mov	sp, r7
20000f80:	bd80      	pop	{r7, pc}
	...

20000f84 <DAP_JTAG_Configure>:
// Process JTAG Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Configure(const uint8_t *request, uint8_t *response) {
20000f84:	b480      	push	{r7}
20000f86:	b087      	sub	sp, #28
20000f88:	af00      	add	r7, sp, #0
20000f8a:	6078      	str	r0, [r7, #4]
20000f8c:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t length;
  uint32_t bits;
  uint32_t n;

  count = *request++;
20000f8e:	687b      	ldr	r3, [r7, #4]
20000f90:	1c5a      	adds	r2, r3, #1
20000f92:	607a      	str	r2, [r7, #4]
20000f94:	781b      	ldrb	r3, [r3, #0]
20000f96:	60fb      	str	r3, [r7, #12]
  DAP_Data.jtag_dev.count = (uint8_t)count;
20000f98:	68fb      	ldr	r3, [r7, #12]
20000f9a:	b2da      	uxtb	r2, r3
20000f9c:	4b28      	ldr	r3, [pc, #160]	@ (20001040 <DAP_JTAG_Configure+0xbc>)
20000f9e:	769a      	strb	r2, [r3, #26]

  bits = 0U;
20000fa0:	2300      	movs	r3, #0
20000fa2:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000fa4:	2300      	movs	r3, #0
20000fa6:	613b      	str	r3, [r7, #16]
20000fa8:	e01c      	b.n	20000fe4 <DAP_JTAG_Configure+0x60>
    length = *request++;
20000faa:	687b      	ldr	r3, [r7, #4]
20000fac:	1c5a      	adds	r2, r3, #1
20000fae:	607a      	str	r2, [r7, #4]
20000fb0:	781b      	ldrb	r3, [r3, #0]
20000fb2:	60bb      	str	r3, [r7, #8]
    DAP_Data.jtag_dev.ir_length[n] =  (uint8_t)length;
20000fb4:	68bb      	ldr	r3, [r7, #8]
20000fb6:	b2d9      	uxtb	r1, r3
20000fb8:	4a21      	ldr	r2, [pc, #132]	@ (20001040 <DAP_JTAG_Configure+0xbc>)
20000fba:	693b      	ldr	r3, [r7, #16]
20000fbc:	4413      	add	r3, r2
20000fbe:	331c      	adds	r3, #28
20000fc0:	460a      	mov	r2, r1
20000fc2:	701a      	strb	r2, [r3, #0]
    DAP_Data.jtag_dev.ir_before[n] = (uint16_t)bits;
20000fc4:	697b      	ldr	r3, [r7, #20]
20000fc6:	b299      	uxth	r1, r3
20000fc8:	4a1d      	ldr	r2, [pc, #116]	@ (20001040 <DAP_JTAG_Configure+0xbc>)
20000fca:	693b      	ldr	r3, [r7, #16]
20000fcc:	3310      	adds	r3, #16
20000fce:	005b      	lsls	r3, r3, #1
20000fd0:	4413      	add	r3, r2
20000fd2:	460a      	mov	r2, r1
20000fd4:	809a      	strh	r2, [r3, #4]
    bits += length;
20000fd6:	697a      	ldr	r2, [r7, #20]
20000fd8:	68bb      	ldr	r3, [r7, #8]
20000fda:	4413      	add	r3, r2
20000fdc:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000fde:	693b      	ldr	r3, [r7, #16]
20000fe0:	3301      	adds	r3, #1
20000fe2:	613b      	str	r3, [r7, #16]
20000fe4:	693a      	ldr	r2, [r7, #16]
20000fe6:	68fb      	ldr	r3, [r7, #12]
20000fe8:	429a      	cmp	r2, r3
20000fea:	d3de      	bcc.n	20000faa <DAP_JTAG_Configure+0x26>
  }
  for (n = 0U; n < count; n++) {
20000fec:	2300      	movs	r3, #0
20000fee:	613b      	str	r3, [r7, #16]
20000ff0:	e014      	b.n	2000101c <DAP_JTAG_Configure+0x98>
    bits -= DAP_Data.jtag_dev.ir_length[n];
20000ff2:	4a13      	ldr	r2, [pc, #76]	@ (20001040 <DAP_JTAG_Configure+0xbc>)
20000ff4:	693b      	ldr	r3, [r7, #16]
20000ff6:	4413      	add	r3, r2
20000ff8:	331c      	adds	r3, #28
20000ffa:	781b      	ldrb	r3, [r3, #0]
20000ffc:	461a      	mov	r2, r3
20000ffe:	697b      	ldr	r3, [r7, #20]
20001000:	1a9b      	subs	r3, r3, r2
20001002:	617b      	str	r3, [r7, #20]
    DAP_Data.jtag_dev.ir_after[n] = (uint16_t)bits;
20001004:	697b      	ldr	r3, [r7, #20]
20001006:	b299      	uxth	r1, r3
20001008:	4a0d      	ldr	r2, [pc, #52]	@ (20001040 <DAP_JTAG_Configure+0xbc>)
2000100a:	693b      	ldr	r3, [r7, #16]
2000100c:	3318      	adds	r3, #24
2000100e:	005b      	lsls	r3, r3, #1
20001010:	4413      	add	r3, r2
20001012:	460a      	mov	r2, r1
20001014:	809a      	strh	r2, [r3, #4]
  for (n = 0U; n < count; n++) {
20001016:	693b      	ldr	r3, [r7, #16]
20001018:	3301      	adds	r3, #1
2000101a:	613b      	str	r3, [r7, #16]
2000101c:	693a      	ldr	r2, [r7, #16]
2000101e:	68fb      	ldr	r3, [r7, #12]
20001020:	429a      	cmp	r2, r3
20001022:	d3e6      	bcc.n	20000ff2 <DAP_JTAG_Configure+0x6e>
  }

  *response = DAP_OK;
20001024:	683b      	ldr	r3, [r7, #0]
20001026:	2200      	movs	r2, #0
20001028:	701a      	strb	r2, [r3, #0]
#else
  count = *request;
  *response = DAP_ERROR;
#endif

  return (((count + 1U) << 16) | 1U);
2000102a:	68fb      	ldr	r3, [r7, #12]
2000102c:	3301      	adds	r3, #1
2000102e:	041b      	lsls	r3, r3, #16
20001030:	f043 0301 	orr.w	r3, r3, #1
}
20001034:	4618      	mov	r0, r3
20001036:	371c      	adds	r7, #28
20001038:	46bd      	mov	sp, r7
2000103a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000103e:	4770      	bx	lr
20001040:	2000da4c 	.word	0x2000da4c

20001044 <DAP_JTAG_IDCode>:
// Process JTAG IDCODE command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_IDCode(const uint8_t *request, uint8_t *response) {
20001044:	b580      	push	{r7, lr}
20001046:	b084      	sub	sp, #16
20001048:	af00      	add	r7, sp, #0
2000104a:	6078      	str	r0, [r7, #4]
2000104c:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t data;

  if (DAP_Data.debug_port != DAP_PORT_JTAG) {
2000104e:	4b1e      	ldr	r3, [pc, #120]	@ (200010c8 <DAP_JTAG_IDCode+0x84>)
20001050:	781b      	ldrb	r3, [r3, #0]
20001052:	2b02      	cmp	r3, #2
20001054:	d12b      	bne.n	200010ae <DAP_JTAG_IDCode+0x6a>
    goto id_error;
  }

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
20001056:	687b      	ldr	r3, [r7, #4]
20001058:	781a      	ldrb	r2, [r3, #0]
2000105a:	4b1b      	ldr	r3, [pc, #108]	@ (200010c8 <DAP_JTAG_IDCode+0x84>)
2000105c:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
2000105e:	4b1a      	ldr	r3, [pc, #104]	@ (200010c8 <DAP_JTAG_IDCode+0x84>)
20001060:	7eda      	ldrb	r2, [r3, #27]
20001062:	4b19      	ldr	r3, [pc, #100]	@ (200010c8 <DAP_JTAG_IDCode+0x84>)
20001064:	7e9b      	ldrb	r3, [r3, #26]
20001066:	429a      	cmp	r2, r3
20001068:	d223      	bcs.n	200010b2 <DAP_JTAG_IDCode+0x6e>
    goto id_error;
  }

  // Select JTAG chain
  JTAG_IR(JTAG_IDCODE);
2000106a:	200e      	movs	r0, #14
2000106c:	f002 ffa8 	bl	20003fc0 <JTAG_IR>

  // Read IDCODE register
  data = JTAG_ReadIDCode();
20001070:	f002 fd64 	bl	20003b3c <JTAG_ReadIDCode>
20001074:	60f8      	str	r0, [r7, #12]

  // Store Data
  *(response+0) =  DAP_OK;
20001076:	683b      	ldr	r3, [r7, #0]
20001078:	2200      	movs	r2, #0
2000107a:	701a      	strb	r2, [r3, #0]
  *(response+1) = (uint8_t)(data >>  0);
2000107c:	683b      	ldr	r3, [r7, #0]
2000107e:	3301      	adds	r3, #1
20001080:	68fa      	ldr	r2, [r7, #12]
20001082:	b2d2      	uxtb	r2, r2
20001084:	701a      	strb	r2, [r3, #0]
  *(response+2) = (uint8_t)(data >>  8);
20001086:	68fb      	ldr	r3, [r7, #12]
20001088:	0a1a      	lsrs	r2, r3, #8
2000108a:	683b      	ldr	r3, [r7, #0]
2000108c:	3302      	adds	r3, #2
2000108e:	b2d2      	uxtb	r2, r2
20001090:	701a      	strb	r2, [r3, #0]
  *(response+3) = (uint8_t)(data >> 16);
20001092:	68fb      	ldr	r3, [r7, #12]
20001094:	0c1a      	lsrs	r2, r3, #16
20001096:	683b      	ldr	r3, [r7, #0]
20001098:	3303      	adds	r3, #3
2000109a:	b2d2      	uxtb	r2, r2
2000109c:	701a      	strb	r2, [r3, #0]
  *(response+4) = (uint8_t)(data >> 24);
2000109e:	68fb      	ldr	r3, [r7, #12]
200010a0:	0e1a      	lsrs	r2, r3, #24
200010a2:	683b      	ldr	r3, [r7, #0]
200010a4:	3304      	adds	r3, #4
200010a6:	b2d2      	uxtb	r2, r2
200010a8:	701a      	strb	r2, [r3, #0]

  return ((1U << 16) | 5U);
200010aa:	4b08      	ldr	r3, [pc, #32]	@ (200010cc <DAP_JTAG_IDCode+0x88>)
200010ac:	e007      	b.n	200010be <DAP_JTAG_IDCode+0x7a>
    goto id_error;
200010ae:	bf00      	nop
200010b0:	e000      	b.n	200010b4 <DAP_JTAG_IDCode+0x70>
    goto id_error;
200010b2:	bf00      	nop

id_error:
#endif
  *response = DAP_ERROR;
200010b4:	683b      	ldr	r3, [r7, #0]
200010b6:	22ff      	movs	r2, #255	@ 0xff
200010b8:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
200010ba:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
200010be:	4618      	mov	r0, r3
200010c0:	3710      	adds	r7, #16
200010c2:	46bd      	mov	sp, r7
200010c4:	bd80      	pop	{r7, pc}
200010c6:	bf00      	nop
200010c8:	2000da4c 	.word	0x2000da4c
200010cc:	00010005 	.word	0x00010005

200010d0 <DAP_TransferConfigure>:
// Process Transfer Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferConfigure(const uint8_t *request, uint8_t *response) {
200010d0:	b480      	push	{r7}
200010d2:	b083      	sub	sp, #12
200010d4:	af00      	add	r7, sp, #0
200010d6:	6078      	str	r0, [r7, #4]
200010d8:	6039      	str	r1, [r7, #0]

  DAP_Data.transfer.idle_cycles =            *(request+0);
200010da:	687b      	ldr	r3, [r7, #4]
200010dc:	781a      	ldrb	r2, [r3, #0]
200010de:	4b13      	ldr	r3, [pc, #76]	@ (2000112c <DAP_TransferConfigure+0x5c>)
200010e0:	731a      	strb	r2, [r3, #12]
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
200010e2:	687b      	ldr	r3, [r7, #4]
200010e4:	3301      	adds	r3, #1
200010e6:	781b      	ldrb	r3, [r3, #0]
200010e8:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+2) << 8);
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	3302      	adds	r3, #2
200010ee:	781b      	ldrb	r3, [r3, #0]
200010f0:	021b      	lsls	r3, r3, #8
200010f2:	b29b      	uxth	r3, r3
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
200010f4:	4313      	orrs	r3, r2
200010f6:	b29a      	uxth	r2, r3
200010f8:	4b0c      	ldr	r3, [pc, #48]	@ (2000112c <DAP_TransferConfigure+0x5c>)
200010fa:	821a      	strh	r2, [r3, #16]
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
200010fc:	687b      	ldr	r3, [r7, #4]
200010fe:	3303      	adds	r3, #3
20001100:	781b      	ldrb	r3, [r3, #0]
20001102:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+4) << 8);
20001104:	687b      	ldr	r3, [r7, #4]
20001106:	3304      	adds	r3, #4
20001108:	781b      	ldrb	r3, [r3, #0]
2000110a:	021b      	lsls	r3, r3, #8
2000110c:	b29b      	uxth	r3, r3
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
2000110e:	4313      	orrs	r3, r2
20001110:	b29a      	uxth	r2, r3
20001112:	4b06      	ldr	r3, [pc, #24]	@ (2000112c <DAP_TransferConfigure+0x5c>)
20001114:	825a      	strh	r2, [r3, #18]

  *response = DAP_OK;
20001116:	683b      	ldr	r3, [r7, #0]
20001118:	2200      	movs	r2, #0
2000111a:	701a      	strb	r2, [r3, #0]
  return ((5U << 16) | 1U);
2000111c:	4b04      	ldr	r3, [pc, #16]	@ (20001130 <DAP_TransferConfigure+0x60>)
}
2000111e:	4618      	mov	r0, r3
20001120:	370c      	adds	r7, #12
20001122:	46bd      	mov	sp, r7
20001124:	f85d 7b04 	ldr.w	r7, [sp], #4
20001128:	4770      	bx	lr
2000112a:	bf00      	nop
2000112c:	2000da4c 	.word	0x2000da4c
20001130:	00050001 	.word	0x00050001

20001134 <DAP_SWD_Transfer>:
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
#if (DAP_SWD != 0)
static uint32_t DAP_SWD_Transfer(const uint8_t *request, uint8_t *response) {
20001134:	b580      	push	{r7, lr}
20001136:	b090      	sub	sp, #64	@ 0x40
20001138:	af00      	add	r7, sp, #0
2000113a:	6078      	str	r0, [r7, #4]
2000113c:	6039      	str	r1, [r7, #0]
  uint32_t  data;
#if (TIMESTAMP_CLOCK != 0U)
  uint32_t  timestamp;
#endif

  request_head   = request;
2000113e:	687b      	ldr	r3, [r7, #4]
20001140:	623b      	str	r3, [r7, #32]

  response_count = 0U;
20001142:	2300      	movs	r3, #0
20001144:	63bb      	str	r3, [r7, #56]	@ 0x38
  response_value = 0U;
20001146:	2300      	movs	r3, #0
20001148:	637b      	str	r3, [r7, #52]	@ 0x34
  response_head  = response;
2000114a:	683b      	ldr	r3, [r7, #0]
2000114c:	61fb      	str	r3, [r7, #28]
  response      += 2;
2000114e:	683b      	ldr	r3, [r7, #0]
20001150:	3302      	adds	r3, #2
20001152:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001154:	4b8a      	ldr	r3, [pc, #552]	@ (20001380 <DAP_SWD_Transfer+0x24c>)
20001156:	2200      	movs	r2, #0
20001158:	701a      	strb	r2, [r3, #0]

  post_read   = 0U;
2000115a:	2300      	movs	r3, #0
2000115c:	633b      	str	r3, [r7, #48]	@ 0x30
  check_write = 0U;
2000115e:	2300      	movs	r3, #0
20001160:	62fb      	str	r3, [r7, #44]	@ 0x2c

  request++;            // Ignore DAP index
20001162:	687b      	ldr	r3, [r7, #4]
20001164:	3301      	adds	r3, #1
20001166:	607b      	str	r3, [r7, #4]

  request_count = *request++;
20001168:	687b      	ldr	r3, [r7, #4]
2000116a:	1c5a      	adds	r2, r3, #1
2000116c:	607a      	str	r2, [r7, #4]
2000116e:	781b      	ldrb	r3, [r3, #0]
20001170:	63fb      	str	r3, [r7, #60]	@ 0x3c

  while (request_count != 0) {
20001172:	e255      	b.n	20001620 <DAP_SWD_Transfer+0x4ec>
    request_count--;
20001174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001176:	3b01      	subs	r3, #1
20001178:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
2000117a:	687b      	ldr	r3, [r7, #4]
2000117c:	1c5a      	adds	r2, r3, #1
2000117e:	607a      	str	r2, [r7, #4]
20001180:	781b      	ldrb	r3, [r3, #0]
20001182:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001184:	69bb      	ldr	r3, [r7, #24]
20001186:	f003 0302 	and.w	r3, r3, #2
2000118a:	2b00      	cmp	r3, #0
2000118c:	f000 819f 	beq.w	200014ce <DAP_SWD_Transfer+0x39a>
      // Read register
      if (post_read) {
20001190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001192:	2b00      	cmp	r3, #0
20001194:	d079      	beq.n	2000128a <DAP_SWD_Transfer+0x156>
        // Read was posted before
        retry = DAP_Data.transfer.retry_count;
20001196:	4b7b      	ldr	r3, [pc, #492]	@ (20001384 <DAP_SWD_Transfer+0x250>)
20001198:	8a1b      	ldrh	r3, [r3, #16]
2000119a:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((request_value & (DAP_TRANSFER_APnDP | DAP_TRANSFER_MATCH_VALUE)) == DAP_TRANSFER_APnDP) {
2000119c:	69bb      	ldr	r3, [r7, #24]
2000119e:	f003 0311 	and.w	r3, r3, #17
200011a2:	2b01      	cmp	r3, #1
200011a4:	d115      	bne.n	200011d2 <DAP_SWD_Transfer+0x9e>
          // Read previous AP data and post next AP read
          do {
            response_value = SWD_Transfer(request_value, &data);
200011a6:	f107 030c 	add.w	r3, r7, #12
200011aa:	4619      	mov	r1, r3
200011ac:	69b8      	ldr	r0, [r7, #24]
200011ae:	f003 fb25 	bl	200047fc <SWD_Transfer>
200011b2:	4603      	mov	r3, r0
200011b4:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200011b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011b8:	2b02      	cmp	r3, #2
200011ba:	d121      	bne.n	20001200 <DAP_SWD_Transfer+0xcc>
200011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200011be:	1e5a      	subs	r2, r3, #1
200011c0:	627a      	str	r2, [r7, #36]	@ 0x24
200011c2:	2b00      	cmp	r3, #0
200011c4:	d01c      	beq.n	20001200 <DAP_SWD_Transfer+0xcc>
200011c6:	4b6e      	ldr	r3, [pc, #440]	@ (20001380 <DAP_SWD_Transfer+0x24c>)
200011c8:	781b      	ldrb	r3, [r3, #0]
200011ca:	b2db      	uxtb	r3, r3
200011cc:	2b00      	cmp	r3, #0
200011ce:	d0ea      	beq.n	200011a6 <DAP_SWD_Transfer+0x72>
200011d0:	e016      	b.n	20001200 <DAP_SWD_Transfer+0xcc>
        } else {
          // Read previous AP data
          do {
            response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200011d2:	f107 030c 	add.w	r3, r7, #12
200011d6:	4619      	mov	r1, r3
200011d8:	200e      	movs	r0, #14
200011da:	f003 fb0f 	bl	200047fc <SWD_Transfer>
200011de:	4603      	mov	r3, r0
200011e0:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200011e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011e4:	2b02      	cmp	r3, #2
200011e6:	d109      	bne.n	200011fc <DAP_SWD_Transfer+0xc8>
200011e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200011ea:	1e5a      	subs	r2, r3, #1
200011ec:	627a      	str	r2, [r7, #36]	@ 0x24
200011ee:	2b00      	cmp	r3, #0
200011f0:	d004      	beq.n	200011fc <DAP_SWD_Transfer+0xc8>
200011f2:	4b63      	ldr	r3, [pc, #396]	@ (20001380 <DAP_SWD_Transfer+0x24c>)
200011f4:	781b      	ldrb	r3, [r3, #0]
200011f6:	b2db      	uxtb	r3, r3
200011f8:	2b00      	cmp	r3, #0
200011fa:	d0ea      	beq.n	200011d2 <DAP_SWD_Transfer+0x9e>
          post_read = 0U;
200011fc:	2300      	movs	r3, #0
200011fe:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        if (response_value != DAP_TRANSFER_OK) {
20001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001202:	2b01      	cmp	r3, #1
20001204:	f040 8211 	bne.w	2000162a <DAP_SWD_Transfer+0x4f6>
          break;
        }
        // Store previous AP data
        *response++ = (uint8_t) data;
20001208:	68f9      	ldr	r1, [r7, #12]
2000120a:	683b      	ldr	r3, [r7, #0]
2000120c:	1c5a      	adds	r2, r3, #1
2000120e:	603a      	str	r2, [r7, #0]
20001210:	b2ca      	uxtb	r2, r1
20001212:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001214:	68fb      	ldr	r3, [r7, #12]
20001216:	0a19      	lsrs	r1, r3, #8
20001218:	683b      	ldr	r3, [r7, #0]
2000121a:	1c5a      	adds	r2, r3, #1
2000121c:	603a      	str	r2, [r7, #0]
2000121e:	b2ca      	uxtb	r2, r1
20001220:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001222:	68fb      	ldr	r3, [r7, #12]
20001224:	0c19      	lsrs	r1, r3, #16
20001226:	683b      	ldr	r3, [r7, #0]
20001228:	1c5a      	adds	r2, r3, #1
2000122a:	603a      	str	r2, [r7, #0]
2000122c:	b2ca      	uxtb	r2, r1
2000122e:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001230:	68fb      	ldr	r3, [r7, #12]
20001232:	0e19      	lsrs	r1, r3, #24
20001234:	683b      	ldr	r3, [r7, #0]
20001236:	1c5a      	adds	r2, r3, #1
20001238:	603a      	str	r2, [r7, #0]
2000123a:	b2ca      	uxtb	r2, r1
2000123c:	701a      	strb	r2, [r3, #0]
#if (TIMESTAMP_CLOCK != 0U)
        if (post_read) {
2000123e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001240:	2b00      	cmp	r3, #0
20001242:	d022      	beq.n	2000128a <DAP_SWD_Transfer+0x156>
          // Store Timestamp of next AP read
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001244:	69bb      	ldr	r3, [r7, #24]
20001246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000124a:	2b00      	cmp	r3, #0
2000124c:	d01d      	beq.n	2000128a <DAP_SWD_Transfer+0x156>
            timestamp = DAP_Data.timestamp;
2000124e:	4b4d      	ldr	r3, [pc, #308]	@ (20001384 <DAP_SWD_Transfer+0x250>)
20001250:	689b      	ldr	r3, [r3, #8]
20001252:	617b      	str	r3, [r7, #20]
            *response++ = (uint8_t) timestamp;
20001254:	683b      	ldr	r3, [r7, #0]
20001256:	1c5a      	adds	r2, r3, #1
20001258:	603a      	str	r2, [r7, #0]
2000125a:	697a      	ldr	r2, [r7, #20]
2000125c:	b2d2      	uxtb	r2, r2
2000125e:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
20001260:	697b      	ldr	r3, [r7, #20]
20001262:	0a19      	lsrs	r1, r3, #8
20001264:	683b      	ldr	r3, [r7, #0]
20001266:	1c5a      	adds	r2, r3, #1
20001268:	603a      	str	r2, [r7, #0]
2000126a:	b2ca      	uxtb	r2, r1
2000126c:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
2000126e:	697b      	ldr	r3, [r7, #20]
20001270:	0c19      	lsrs	r1, r3, #16
20001272:	683b      	ldr	r3, [r7, #0]
20001274:	1c5a      	adds	r2, r3, #1
20001276:	603a      	str	r2, [r7, #0]
20001278:	b2ca      	uxtb	r2, r1
2000127a:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
2000127c:	697b      	ldr	r3, [r7, #20]
2000127e:	0e19      	lsrs	r1, r3, #24
20001280:	683b      	ldr	r3, [r7, #0]
20001282:	1c5a      	adds	r2, r3, #1
20001284:	603a      	str	r2, [r7, #0]
20001286:	b2ca      	uxtb	r2, r1
20001288:	701a      	strb	r2, [r3, #0]
          }
        }
#endif
      }
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
2000128a:	69bb      	ldr	r3, [r7, #24]
2000128c:	f003 0310 	and.w	r3, r3, #16
20001290:	2b00      	cmp	r3, #0
20001292:	d079      	beq.n	20001388 <DAP_SWD_Transfer+0x254>
        // Read with value match
        match_value = (uint32_t)(*(request+0) <<  0) |
20001294:	687b      	ldr	r3, [r7, #4]
20001296:	781b      	ldrb	r3, [r3, #0]
20001298:	461a      	mov	r2, r3
                      (uint32_t)(*(request+1) <<  8) |
2000129a:	687b      	ldr	r3, [r7, #4]
2000129c:	3301      	adds	r3, #1
2000129e:	781b      	ldrb	r3, [r3, #0]
200012a0:	021b      	lsls	r3, r3, #8
        match_value = (uint32_t)(*(request+0) <<  0) |
200012a2:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+2) << 16) |
200012a4:	687b      	ldr	r3, [r7, #4]
200012a6:	3302      	adds	r3, #2
200012a8:	781b      	ldrb	r3, [r3, #0]
200012aa:	041b      	lsls	r3, r3, #16
                      (uint32_t)(*(request+1) <<  8) |
200012ac:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+3) << 24);
200012ae:	687b      	ldr	r3, [r7, #4]
200012b0:	3303      	adds	r3, #3
200012b2:	781b      	ldrb	r3, [r3, #0]
200012b4:	061b      	lsls	r3, r3, #24
        match_value = (uint32_t)(*(request+0) <<  0) |
200012b6:	4313      	orrs	r3, r2
200012b8:	613b      	str	r3, [r7, #16]
        request += 4;
200012ba:	687b      	ldr	r3, [r7, #4]
200012bc:	3304      	adds	r3, #4
200012be:	607b      	str	r3, [r7, #4]
        match_retry = DAP_Data.transfer.match_retry;
200012c0:	4b30      	ldr	r3, [pc, #192]	@ (20001384 <DAP_SWD_Transfer+0x250>)
200012c2:	8a5b      	ldrh	r3, [r3, #18]
200012c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((request_value & DAP_TRANSFER_APnDP) != 0U) {
200012c6:	69bb      	ldr	r3, [r7, #24]
200012c8:	f003 0301 	and.w	r3, r3, #1
200012cc:	2b00      	cmp	r3, #0
200012ce:	d019      	beq.n	20001304 <DAP_SWD_Transfer+0x1d0>
          // Post AP read
          retry = DAP_Data.transfer.retry_count;
200012d0:	4b2c      	ldr	r3, [pc, #176]	@ (20001384 <DAP_SWD_Transfer+0x250>)
200012d2:	8a1b      	ldrh	r3, [r3, #16]
200012d4:	627b      	str	r3, [r7, #36]	@ 0x24
          do {
            response_value = SWD_Transfer(request_value, NULL);
200012d6:	2100      	movs	r1, #0
200012d8:	69b8      	ldr	r0, [r7, #24]
200012da:	f003 fa8f 	bl	200047fc <SWD_Transfer>
200012de:	4603      	mov	r3, r0
200012e0:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200012e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200012e4:	2b02      	cmp	r3, #2
200012e6:	d109      	bne.n	200012fc <DAP_SWD_Transfer+0x1c8>
200012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200012ea:	1e5a      	subs	r2, r3, #1
200012ec:	627a      	str	r2, [r7, #36]	@ 0x24
200012ee:	2b00      	cmp	r3, #0
200012f0:	d004      	beq.n	200012fc <DAP_SWD_Transfer+0x1c8>
200012f2:	4b23      	ldr	r3, [pc, #140]	@ (20001380 <DAP_SWD_Transfer+0x24c>)
200012f4:	781b      	ldrb	r3, [r3, #0]
200012f6:	b2db      	uxtb	r3, r3
200012f8:	2b00      	cmp	r3, #0
200012fa:	d0ec      	beq.n	200012d6 <DAP_SWD_Transfer+0x1a2>
          if (response_value != DAP_TRANSFER_OK) {
200012fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200012fe:	2b01      	cmp	r3, #1
20001300:	f040 8195 	bne.w	2000162e <DAP_SWD_Transfer+0x4fa>
            break;
          }
        }
        do {
          // Read register until its value matches or retry counter expires
          retry = DAP_Data.transfer.retry_count;
20001304:	4b1f      	ldr	r3, [pc, #124]	@ (20001384 <DAP_SWD_Transfer+0x250>)
20001306:	8a1b      	ldrh	r3, [r3, #16]
20001308:	627b      	str	r3, [r7, #36]	@ 0x24
          do {
            response_value = SWD_Transfer(request_value, &data);
2000130a:	f107 030c 	add.w	r3, r7, #12
2000130e:	4619      	mov	r1, r3
20001310:	69b8      	ldr	r0, [r7, #24]
20001312:	f003 fa73 	bl	200047fc <SWD_Transfer>
20001316:	4603      	mov	r3, r0
20001318:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000131a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000131c:	2b02      	cmp	r3, #2
2000131e:	d109      	bne.n	20001334 <DAP_SWD_Transfer+0x200>
20001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001322:	1e5a      	subs	r2, r3, #1
20001324:	627a      	str	r2, [r7, #36]	@ 0x24
20001326:	2b00      	cmp	r3, #0
20001328:	d004      	beq.n	20001334 <DAP_SWD_Transfer+0x200>
2000132a:	4b15      	ldr	r3, [pc, #84]	@ (20001380 <DAP_SWD_Transfer+0x24c>)
2000132c:	781b      	ldrb	r3, [r3, #0]
2000132e:	b2db      	uxtb	r3, r3
20001330:	2b00      	cmp	r3, #0
20001332:	d0ea      	beq.n	2000130a <DAP_SWD_Transfer+0x1d6>
          if (response_value != DAP_TRANSFER_OK) {
20001334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001336:	2b01      	cmp	r3, #1
20001338:	d111      	bne.n	2000135e <DAP_SWD_Transfer+0x22a>
            break;
          }
        } while (((data & DAP_Data.transfer.match_mask) != match_value) && match_retry-- && !DAP_TransferAbort);
2000133a:	4b12      	ldr	r3, [pc, #72]	@ (20001384 <DAP_SWD_Transfer+0x250>)
2000133c:	695a      	ldr	r2, [r3, #20]
2000133e:	68fb      	ldr	r3, [r7, #12]
20001340:	4013      	ands	r3, r2
20001342:	693a      	ldr	r2, [r7, #16]
20001344:	429a      	cmp	r2, r3
20001346:	d00b      	beq.n	20001360 <DAP_SWD_Transfer+0x22c>
20001348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000134a:	1e5a      	subs	r2, r3, #1
2000134c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000134e:	2b00      	cmp	r3, #0
20001350:	d006      	beq.n	20001360 <DAP_SWD_Transfer+0x22c>
20001352:	4b0b      	ldr	r3, [pc, #44]	@ (20001380 <DAP_SWD_Transfer+0x24c>)
20001354:	781b      	ldrb	r3, [r3, #0]
20001356:	b2db      	uxtb	r3, r3
20001358:	2b00      	cmp	r3, #0
2000135a:	d0d3      	beq.n	20001304 <DAP_SWD_Transfer+0x1d0>
2000135c:	e000      	b.n	20001360 <DAP_SWD_Transfer+0x22c>
            break;
2000135e:	bf00      	nop
        if ((data & DAP_Data.transfer.match_mask) != match_value) {
20001360:	4b08      	ldr	r3, [pc, #32]	@ (20001384 <DAP_SWD_Transfer+0x250>)
20001362:	695a      	ldr	r2, [r3, #20]
20001364:	68fb      	ldr	r3, [r7, #12]
20001366:	4013      	ands	r3, r2
20001368:	693a      	ldr	r2, [r7, #16]
2000136a:	429a      	cmp	r2, r3
2000136c:	d003      	beq.n	20001376 <DAP_SWD_Transfer+0x242>
          response_value |= DAP_TRANSFER_MISMATCH;
2000136e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001370:	f043 0310 	orr.w	r3, r3, #16
20001374:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (response_value != DAP_TRANSFER_OK) {
20001376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001378:	2b01      	cmp	r3, #1
2000137a:	f000 80a5 	beq.w	200014c8 <DAP_SWD_Transfer+0x394>
          break;
2000137e:	e161      	b.n	20001644 <DAP_SWD_Transfer+0x510>
20001380:	2000da90 	.word	0x2000da90
20001384:	2000da4c 	.word	0x2000da4c
        }
      } else {
        // Normal read
        retry = DAP_Data.transfer.retry_count;
20001388:	4b7f      	ldr	r3, [pc, #508]	@ (20001588 <DAP_SWD_Transfer+0x454>)
2000138a:	8a1b      	ldrh	r3, [r3, #16]
2000138c:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((request_value & DAP_TRANSFER_APnDP) != 0U) {
2000138e:	69bb      	ldr	r3, [r7, #24]
20001390:	f003 0301 	and.w	r3, r3, #1
20001394:	2b00      	cmp	r3, #0
20001396:	d040      	beq.n	2000141a <DAP_SWD_Transfer+0x2e6>
          // Read AP register
          if (post_read == 0U) {
20001398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000139a:	2b00      	cmp	r3, #0
2000139c:	f040 8094 	bne.w	200014c8 <DAP_SWD_Transfer+0x394>
            // Post AP read
            do {
              response_value = SWD_Transfer(request_value, NULL);
200013a0:	2100      	movs	r1, #0
200013a2:	69b8      	ldr	r0, [r7, #24]
200013a4:	f003 fa2a 	bl	200047fc <SWD_Transfer>
200013a8:	4603      	mov	r3, r0
200013aa:	637b      	str	r3, [r7, #52]	@ 0x34
            } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200013ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200013ae:	2b02      	cmp	r3, #2
200013b0:	d109      	bne.n	200013c6 <DAP_SWD_Transfer+0x292>
200013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200013b4:	1e5a      	subs	r2, r3, #1
200013b6:	627a      	str	r2, [r7, #36]	@ 0x24
200013b8:	2b00      	cmp	r3, #0
200013ba:	d004      	beq.n	200013c6 <DAP_SWD_Transfer+0x292>
200013bc:	4b73      	ldr	r3, [pc, #460]	@ (2000158c <DAP_SWD_Transfer+0x458>)
200013be:	781b      	ldrb	r3, [r3, #0]
200013c0:	b2db      	uxtb	r3, r3
200013c2:	2b00      	cmp	r3, #0
200013c4:	d0ec      	beq.n	200013a0 <DAP_SWD_Transfer+0x26c>
            if (response_value != DAP_TRANSFER_OK) {
200013c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200013c8:	2b01      	cmp	r3, #1
200013ca:	f040 8132 	bne.w	20001632 <DAP_SWD_Transfer+0x4fe>
              break;
            }
#if (TIMESTAMP_CLOCK != 0U)
            // Store Timestamp
            if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200013ce:	69bb      	ldr	r3, [r7, #24]
200013d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200013d4:	2b00      	cmp	r3, #0
200013d6:	d01d      	beq.n	20001414 <DAP_SWD_Transfer+0x2e0>
              timestamp = DAP_Data.timestamp;
200013d8:	4b6b      	ldr	r3, [pc, #428]	@ (20001588 <DAP_SWD_Transfer+0x454>)
200013da:	689b      	ldr	r3, [r3, #8]
200013dc:	617b      	str	r3, [r7, #20]
              *response++ = (uint8_t) timestamp;
200013de:	683b      	ldr	r3, [r7, #0]
200013e0:	1c5a      	adds	r2, r3, #1
200013e2:	603a      	str	r2, [r7, #0]
200013e4:	697a      	ldr	r2, [r7, #20]
200013e6:	b2d2      	uxtb	r2, r2
200013e8:	701a      	strb	r2, [r3, #0]
              *response++ = (uint8_t)(timestamp >>  8);
200013ea:	697b      	ldr	r3, [r7, #20]
200013ec:	0a19      	lsrs	r1, r3, #8
200013ee:	683b      	ldr	r3, [r7, #0]
200013f0:	1c5a      	adds	r2, r3, #1
200013f2:	603a      	str	r2, [r7, #0]
200013f4:	b2ca      	uxtb	r2, r1
200013f6:	701a      	strb	r2, [r3, #0]
              *response++ = (uint8_t)(timestamp >> 16);
200013f8:	697b      	ldr	r3, [r7, #20]
200013fa:	0c19      	lsrs	r1, r3, #16
200013fc:	683b      	ldr	r3, [r7, #0]
200013fe:	1c5a      	adds	r2, r3, #1
20001400:	603a      	str	r2, [r7, #0]
20001402:	b2ca      	uxtb	r2, r1
20001404:	701a      	strb	r2, [r3, #0]
              *response++ = (uint8_t)(timestamp >> 24);
20001406:	697b      	ldr	r3, [r7, #20]
20001408:	0e19      	lsrs	r1, r3, #24
2000140a:	683b      	ldr	r3, [r7, #0]
2000140c:	1c5a      	adds	r2, r3, #1
2000140e:	603a      	str	r2, [r7, #0]
20001410:	b2ca      	uxtb	r2, r1
20001412:	701a      	strb	r2, [r3, #0]
            }
#endif
            post_read = 1U;
20001414:	2301      	movs	r3, #1
20001416:	633b      	str	r3, [r7, #48]	@ 0x30
20001418:	e056      	b.n	200014c8 <DAP_SWD_Transfer+0x394>
          }
        } else {
          // Read DP register
          do {
            response_value = SWD_Transfer(request_value, &data);
2000141a:	f107 030c 	add.w	r3, r7, #12
2000141e:	4619      	mov	r1, r3
20001420:	69b8      	ldr	r0, [r7, #24]
20001422:	f003 f9eb 	bl	200047fc <SWD_Transfer>
20001426:	4603      	mov	r3, r0
20001428:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000142a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000142c:	2b02      	cmp	r3, #2
2000142e:	d109      	bne.n	20001444 <DAP_SWD_Transfer+0x310>
20001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001432:	1e5a      	subs	r2, r3, #1
20001434:	627a      	str	r2, [r7, #36]	@ 0x24
20001436:	2b00      	cmp	r3, #0
20001438:	d004      	beq.n	20001444 <DAP_SWD_Transfer+0x310>
2000143a:	4b54      	ldr	r3, [pc, #336]	@ (2000158c <DAP_SWD_Transfer+0x458>)
2000143c:	781b      	ldrb	r3, [r3, #0]
2000143e:	b2db      	uxtb	r3, r3
20001440:	2b00      	cmp	r3, #0
20001442:	d0ea      	beq.n	2000141a <DAP_SWD_Transfer+0x2e6>
          if (response_value != DAP_TRANSFER_OK) {
20001444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001446:	2b01      	cmp	r3, #1
20001448:	f040 80f5 	bne.w	20001636 <DAP_SWD_Transfer+0x502>
            break;
          }
#if (TIMESTAMP_CLOCK != 0U)
          // Store Timestamp
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
2000144c:	69bb      	ldr	r3, [r7, #24]
2000144e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001452:	2b00      	cmp	r3, #0
20001454:	d01d      	beq.n	20001492 <DAP_SWD_Transfer+0x35e>
            timestamp = DAP_Data.timestamp;
20001456:	4b4c      	ldr	r3, [pc, #304]	@ (20001588 <DAP_SWD_Transfer+0x454>)
20001458:	689b      	ldr	r3, [r3, #8]
2000145a:	617b      	str	r3, [r7, #20]
            *response++ = (uint8_t) timestamp;
2000145c:	683b      	ldr	r3, [r7, #0]
2000145e:	1c5a      	adds	r2, r3, #1
20001460:	603a      	str	r2, [r7, #0]
20001462:	697a      	ldr	r2, [r7, #20]
20001464:	b2d2      	uxtb	r2, r2
20001466:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
20001468:	697b      	ldr	r3, [r7, #20]
2000146a:	0a19      	lsrs	r1, r3, #8
2000146c:	683b      	ldr	r3, [r7, #0]
2000146e:	1c5a      	adds	r2, r3, #1
20001470:	603a      	str	r2, [r7, #0]
20001472:	b2ca      	uxtb	r2, r1
20001474:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
20001476:	697b      	ldr	r3, [r7, #20]
20001478:	0c19      	lsrs	r1, r3, #16
2000147a:	683b      	ldr	r3, [r7, #0]
2000147c:	1c5a      	adds	r2, r3, #1
2000147e:	603a      	str	r2, [r7, #0]
20001480:	b2ca      	uxtb	r2, r1
20001482:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
20001484:	697b      	ldr	r3, [r7, #20]
20001486:	0e19      	lsrs	r1, r3, #24
20001488:	683b      	ldr	r3, [r7, #0]
2000148a:	1c5a      	adds	r2, r3, #1
2000148c:	603a      	str	r2, [r7, #0]
2000148e:	b2ca      	uxtb	r2, r1
20001490:	701a      	strb	r2, [r3, #0]
          }
#endif
          // Store data
          *response++ = (uint8_t) data;
20001492:	68f9      	ldr	r1, [r7, #12]
20001494:	683b      	ldr	r3, [r7, #0]
20001496:	1c5a      	adds	r2, r3, #1
20001498:	603a      	str	r2, [r7, #0]
2000149a:	b2ca      	uxtb	r2, r1
2000149c:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(data >>  8);
2000149e:	68fb      	ldr	r3, [r7, #12]
200014a0:	0a19      	lsrs	r1, r3, #8
200014a2:	683b      	ldr	r3, [r7, #0]
200014a4:	1c5a      	adds	r2, r3, #1
200014a6:	603a      	str	r2, [r7, #0]
200014a8:	b2ca      	uxtb	r2, r1
200014aa:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(data >> 16);
200014ac:	68fb      	ldr	r3, [r7, #12]
200014ae:	0c19      	lsrs	r1, r3, #16
200014b0:	683b      	ldr	r3, [r7, #0]
200014b2:	1c5a      	adds	r2, r3, #1
200014b4:	603a      	str	r2, [r7, #0]
200014b6:	b2ca      	uxtb	r2, r1
200014b8:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(data >> 24);
200014ba:	68fb      	ldr	r3, [r7, #12]
200014bc:	0e19      	lsrs	r1, r3, #24
200014be:	683b      	ldr	r3, [r7, #0]
200014c0:	1c5a      	adds	r2, r3, #1
200014c2:	603a      	str	r2, [r7, #0]
200014c4:	b2ca      	uxtb	r2, r1
200014c6:	701a      	strb	r2, [r3, #0]
        }
      }
      check_write = 0U;
200014c8:	2300      	movs	r3, #0
200014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
200014cc:	e0a0      	b.n	20001610 <DAP_SWD_Transfer+0x4dc>
    } else {
      // Write register
      if (post_read) {
200014ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200014d0:	2b00      	cmp	r3, #0
200014d2:	d038      	beq.n	20001546 <DAP_SWD_Transfer+0x412>
        // Read previous data
        retry = DAP_Data.transfer.retry_count;
200014d4:	4b2c      	ldr	r3, [pc, #176]	@ (20001588 <DAP_SWD_Transfer+0x454>)
200014d6:	8a1b      	ldrh	r3, [r3, #16]
200014d8:	627b      	str	r3, [r7, #36]	@ 0x24
        do {
          response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200014da:	f107 030c 	add.w	r3, r7, #12
200014de:	4619      	mov	r1, r3
200014e0:	200e      	movs	r0, #14
200014e2:	f003 f98b 	bl	200047fc <SWD_Transfer>
200014e6:	4603      	mov	r3, r0
200014e8:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200014ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014ec:	2b02      	cmp	r3, #2
200014ee:	d109      	bne.n	20001504 <DAP_SWD_Transfer+0x3d0>
200014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200014f2:	1e5a      	subs	r2, r3, #1
200014f4:	627a      	str	r2, [r7, #36]	@ 0x24
200014f6:	2b00      	cmp	r3, #0
200014f8:	d004      	beq.n	20001504 <DAP_SWD_Transfer+0x3d0>
200014fa:	4b24      	ldr	r3, [pc, #144]	@ (2000158c <DAP_SWD_Transfer+0x458>)
200014fc:	781b      	ldrb	r3, [r3, #0]
200014fe:	b2db      	uxtb	r3, r3
20001500:	2b00      	cmp	r3, #0
20001502:	d0ea      	beq.n	200014da <DAP_SWD_Transfer+0x3a6>
        if (response_value != DAP_TRANSFER_OK) {
20001504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001506:	2b01      	cmp	r3, #1
20001508:	f040 8097 	bne.w	2000163a <DAP_SWD_Transfer+0x506>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
2000150c:	68f9      	ldr	r1, [r7, #12]
2000150e:	683b      	ldr	r3, [r7, #0]
20001510:	1c5a      	adds	r2, r3, #1
20001512:	603a      	str	r2, [r7, #0]
20001514:	b2ca      	uxtb	r2, r1
20001516:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001518:	68fb      	ldr	r3, [r7, #12]
2000151a:	0a19      	lsrs	r1, r3, #8
2000151c:	683b      	ldr	r3, [r7, #0]
2000151e:	1c5a      	adds	r2, r3, #1
20001520:	603a      	str	r2, [r7, #0]
20001522:	b2ca      	uxtb	r2, r1
20001524:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001526:	68fb      	ldr	r3, [r7, #12]
20001528:	0c19      	lsrs	r1, r3, #16
2000152a:	683b      	ldr	r3, [r7, #0]
2000152c:	1c5a      	adds	r2, r3, #1
2000152e:	603a      	str	r2, [r7, #0]
20001530:	b2ca      	uxtb	r2, r1
20001532:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001534:	68fb      	ldr	r3, [r7, #12]
20001536:	0e19      	lsrs	r1, r3, #24
20001538:	683b      	ldr	r3, [r7, #0]
2000153a:	1c5a      	adds	r2, r3, #1
2000153c:	603a      	str	r2, [r7, #0]
2000153e:	b2ca      	uxtb	r2, r1
20001540:	701a      	strb	r2, [r3, #0]
        post_read = 0U;
20001542:	2300      	movs	r3, #0
20001544:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001546:	687b      	ldr	r3, [r7, #4]
20001548:	781b      	ldrb	r3, [r3, #0]
2000154a:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000154c:	687b      	ldr	r3, [r7, #4]
2000154e:	3301      	adds	r3, #1
20001550:	781b      	ldrb	r3, [r3, #0]
20001552:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001554:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001556:	687b      	ldr	r3, [r7, #4]
20001558:	3302      	adds	r3, #2
2000155a:	781b      	ldrb	r3, [r3, #0]
2000155c:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
2000155e:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
20001560:	687b      	ldr	r3, [r7, #4]
20001562:	3303      	adds	r3, #3
20001564:	781b      	ldrb	r3, [r3, #0]
20001566:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001568:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
2000156a:	60fb      	str	r3, [r7, #12]
      request += 4;
2000156c:	687b      	ldr	r3, [r7, #4]
2000156e:	3304      	adds	r3, #4
20001570:	607b      	str	r3, [r7, #4]
      if ((request_value & DAP_TRANSFER_MATCH_MASK) != 0U) {
20001572:	69bb      	ldr	r3, [r7, #24]
20001574:	f003 0320 	and.w	r3, r3, #32
20001578:	2b00      	cmp	r3, #0
2000157a:	d009      	beq.n	20001590 <DAP_SWD_Transfer+0x45c>
        // Write match mask
        DAP_Data.transfer.match_mask = data;
2000157c:	68fb      	ldr	r3, [r7, #12]
2000157e:	4a02      	ldr	r2, [pc, #8]	@ (20001588 <DAP_SWD_Transfer+0x454>)
20001580:	6153      	str	r3, [r2, #20]
        response_value = DAP_TRANSFER_OK;
20001582:	2301      	movs	r3, #1
20001584:	637b      	str	r3, [r7, #52]	@ 0x34
20001586:	e043      	b.n	20001610 <DAP_SWD_Transfer+0x4dc>
20001588:	2000da4c 	.word	0x2000da4c
2000158c:	2000da90 	.word	0x2000da90
      } else {
        // Write DP/AP register
        retry = DAP_Data.transfer.retry_count;
20001590:	4b72      	ldr	r3, [pc, #456]	@ (2000175c <DAP_SWD_Transfer+0x628>)
20001592:	8a1b      	ldrh	r3, [r3, #16]
20001594:	627b      	str	r3, [r7, #36]	@ 0x24
        do {
          response_value = SWD_Transfer(request_value, &data);
20001596:	f107 030c 	add.w	r3, r7, #12
2000159a:	4619      	mov	r1, r3
2000159c:	69b8      	ldr	r0, [r7, #24]
2000159e:	f003 f92d 	bl	200047fc <SWD_Transfer>
200015a2:	4603      	mov	r3, r0
200015a4:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200015a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200015a8:	2b02      	cmp	r3, #2
200015aa:	d109      	bne.n	200015c0 <DAP_SWD_Transfer+0x48c>
200015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200015ae:	1e5a      	subs	r2, r3, #1
200015b0:	627a      	str	r2, [r7, #36]	@ 0x24
200015b2:	2b00      	cmp	r3, #0
200015b4:	d004      	beq.n	200015c0 <DAP_SWD_Transfer+0x48c>
200015b6:	4b6a      	ldr	r3, [pc, #424]	@ (20001760 <DAP_SWD_Transfer+0x62c>)
200015b8:	781b      	ldrb	r3, [r3, #0]
200015ba:	b2db      	uxtb	r3, r3
200015bc:	2b00      	cmp	r3, #0
200015be:	d0ea      	beq.n	20001596 <DAP_SWD_Transfer+0x462>
        if (response_value != DAP_TRANSFER_OK) {
200015c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200015c2:	2b01      	cmp	r3, #1
200015c4:	d13b      	bne.n	2000163e <DAP_SWD_Transfer+0x50a>
          break;
        }
#if (TIMESTAMP_CLOCK != 0U)
        // Store Timestamp
        if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200015c6:	69bb      	ldr	r3, [r7, #24]
200015c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200015cc:	2b00      	cmp	r3, #0
200015ce:	d01d      	beq.n	2000160c <DAP_SWD_Transfer+0x4d8>
          timestamp = DAP_Data.timestamp;
200015d0:	4b62      	ldr	r3, [pc, #392]	@ (2000175c <DAP_SWD_Transfer+0x628>)
200015d2:	689b      	ldr	r3, [r3, #8]
200015d4:	617b      	str	r3, [r7, #20]
          *response++ = (uint8_t) timestamp;
200015d6:	683b      	ldr	r3, [r7, #0]
200015d8:	1c5a      	adds	r2, r3, #1
200015da:	603a      	str	r2, [r7, #0]
200015dc:	697a      	ldr	r2, [r7, #20]
200015de:	b2d2      	uxtb	r2, r2
200015e0:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >>  8);
200015e2:	697b      	ldr	r3, [r7, #20]
200015e4:	0a19      	lsrs	r1, r3, #8
200015e6:	683b      	ldr	r3, [r7, #0]
200015e8:	1c5a      	adds	r2, r3, #1
200015ea:	603a      	str	r2, [r7, #0]
200015ec:	b2ca      	uxtb	r2, r1
200015ee:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 16);
200015f0:	697b      	ldr	r3, [r7, #20]
200015f2:	0c19      	lsrs	r1, r3, #16
200015f4:	683b      	ldr	r3, [r7, #0]
200015f6:	1c5a      	adds	r2, r3, #1
200015f8:	603a      	str	r2, [r7, #0]
200015fa:	b2ca      	uxtb	r2, r1
200015fc:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 24);
200015fe:	697b      	ldr	r3, [r7, #20]
20001600:	0e19      	lsrs	r1, r3, #24
20001602:	683b      	ldr	r3, [r7, #0]
20001604:	1c5a      	adds	r2, r3, #1
20001606:	603a      	str	r2, [r7, #0]
20001608:	b2ca      	uxtb	r2, r1
2000160a:	701a      	strb	r2, [r3, #0]
        }
#endif
        check_write = 1U;
2000160c:	2301      	movs	r3, #1
2000160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
    }
    response_count++;
20001610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001612:	3301      	adds	r3, #1
20001614:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (DAP_TransferAbort) {
20001616:	4b52      	ldr	r3, [pc, #328]	@ (20001760 <DAP_SWD_Transfer+0x62c>)
20001618:	781b      	ldrb	r3, [r3, #0]
2000161a:	b2db      	uxtb	r3, r3
2000161c:	2b00      	cmp	r3, #0
2000161e:	d110      	bne.n	20001642 <DAP_SWD_Transfer+0x50e>
  while (request_count != 0) {
20001620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001622:	2b00      	cmp	r3, #0
20001624:	f47f ada6 	bne.w	20001174 <DAP_SWD_Transfer+0x40>
20001628:	e026      	b.n	20001678 <DAP_SWD_Transfer+0x544>
          break;
2000162a:	bf00      	nop
2000162c:	e024      	b.n	20001678 <DAP_SWD_Transfer+0x544>
            break;
2000162e:	bf00      	nop
20001630:	e022      	b.n	20001678 <DAP_SWD_Transfer+0x544>
              break;
20001632:	bf00      	nop
20001634:	e020      	b.n	20001678 <DAP_SWD_Transfer+0x544>
            break;
20001636:	bf00      	nop
20001638:	e01e      	b.n	20001678 <DAP_SWD_Transfer+0x544>
          break;
2000163a:	bf00      	nop
2000163c:	e01c      	b.n	20001678 <DAP_SWD_Transfer+0x544>
          break;
2000163e:	bf00      	nop
20001640:	e01a      	b.n	20001678 <DAP_SWD_Transfer+0x544>
      break;
20001642:	bf00      	nop
    }
  }

  while (request_count != 0) {
20001644:	e018      	b.n	20001678 <DAP_SWD_Transfer+0x544>
    // Process canceled requests
    request_count--;
20001646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001648:	3b01      	subs	r3, #1
2000164a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
2000164c:	687b      	ldr	r3, [r7, #4]
2000164e:	1c5a      	adds	r2, r3, #1
20001650:	607a      	str	r2, [r7, #4]
20001652:	781b      	ldrb	r3, [r3, #0]
20001654:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001656:	69bb      	ldr	r3, [r7, #24]
20001658:	f003 0302 	and.w	r3, r3, #2
2000165c:	2b00      	cmp	r3, #0
2000165e:	d008      	beq.n	20001672 <DAP_SWD_Transfer+0x53e>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
20001660:	69bb      	ldr	r3, [r7, #24]
20001662:	f003 0310 	and.w	r3, r3, #16
20001666:	2b00      	cmp	r3, #0
20001668:	d006      	beq.n	20001678 <DAP_SWD_Transfer+0x544>
        // Read with value match
        request += 4;
2000166a:	687b      	ldr	r3, [r7, #4]
2000166c:	3304      	adds	r3, #4
2000166e:	607b      	str	r3, [r7, #4]
20001670:	e002      	b.n	20001678 <DAP_SWD_Transfer+0x544>
      }
    } else {
      // Write register
      request += 4;
20001672:	687b      	ldr	r3, [r7, #4]
20001674:	3304      	adds	r3, #4
20001676:	607b      	str	r3, [r7, #4]
  while (request_count != 0) {
20001678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000167a:	2b00      	cmp	r3, #0
2000167c:	d1e3      	bne.n	20001646 <DAP_SWD_Transfer+0x512>
    }
  }

  if (response_value == DAP_TRANSFER_OK) {
2000167e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001680:	2b01      	cmp	r3, #1
20001682:	d152      	bne.n	2000172a <DAP_SWD_Transfer+0x5f6>
    if (post_read) {
20001684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001686:	2b00      	cmp	r3, #0
20001688:	d036      	beq.n	200016f8 <DAP_SWD_Transfer+0x5c4>
      // Read previous data
      retry = DAP_Data.transfer.retry_count;
2000168a:	4b34      	ldr	r3, [pc, #208]	@ (2000175c <DAP_SWD_Transfer+0x628>)
2000168c:	8a1b      	ldrh	r3, [r3, #16]
2000168e:	627b      	str	r3, [r7, #36]	@ 0x24
      do {
        response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
20001690:	f107 030c 	add.w	r3, r7, #12
20001694:	4619      	mov	r1, r3
20001696:	200e      	movs	r0, #14
20001698:	f003 f8b0 	bl	200047fc <SWD_Transfer>
2000169c:	4603      	mov	r3, r0
2000169e:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200016a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200016a2:	2b02      	cmp	r3, #2
200016a4:	d109      	bne.n	200016ba <DAP_SWD_Transfer+0x586>
200016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200016a8:	1e5a      	subs	r2, r3, #1
200016aa:	627a      	str	r2, [r7, #36]	@ 0x24
200016ac:	2b00      	cmp	r3, #0
200016ae:	d004      	beq.n	200016ba <DAP_SWD_Transfer+0x586>
200016b0:	4b2b      	ldr	r3, [pc, #172]	@ (20001760 <DAP_SWD_Transfer+0x62c>)
200016b2:	781b      	ldrb	r3, [r3, #0]
200016b4:	b2db      	uxtb	r3, r3
200016b6:	2b00      	cmp	r3, #0
200016b8:	d0ea      	beq.n	20001690 <DAP_SWD_Transfer+0x55c>
      if (response_value != DAP_TRANSFER_OK) {
200016ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200016bc:	2b01      	cmp	r3, #1
200016be:	d136      	bne.n	2000172e <DAP_SWD_Transfer+0x5fa>
        goto end;
      }
      // Store previous data
      *response++ = (uint8_t) data;
200016c0:	68f9      	ldr	r1, [r7, #12]
200016c2:	683b      	ldr	r3, [r7, #0]
200016c4:	1c5a      	adds	r2, r3, #1
200016c6:	603a      	str	r2, [r7, #0]
200016c8:	b2ca      	uxtb	r2, r1
200016ca:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
200016cc:	68fb      	ldr	r3, [r7, #12]
200016ce:	0a19      	lsrs	r1, r3, #8
200016d0:	683b      	ldr	r3, [r7, #0]
200016d2:	1c5a      	adds	r2, r3, #1
200016d4:	603a      	str	r2, [r7, #0]
200016d6:	b2ca      	uxtb	r2, r1
200016d8:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
200016da:	68fb      	ldr	r3, [r7, #12]
200016dc:	0c19      	lsrs	r1, r3, #16
200016de:	683b      	ldr	r3, [r7, #0]
200016e0:	1c5a      	adds	r2, r3, #1
200016e2:	603a      	str	r2, [r7, #0]
200016e4:	b2ca      	uxtb	r2, r1
200016e6:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
200016e8:	68fb      	ldr	r3, [r7, #12]
200016ea:	0e19      	lsrs	r1, r3, #24
200016ec:	683b      	ldr	r3, [r7, #0]
200016ee:	1c5a      	adds	r2, r3, #1
200016f0:	603a      	str	r2, [r7, #0]
200016f2:	b2ca      	uxtb	r2, r1
200016f4:	701a      	strb	r2, [r3, #0]
200016f6:	e01b      	b.n	20001730 <DAP_SWD_Transfer+0x5fc>
    } else if (check_write) {
200016f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200016fa:	2b00      	cmp	r3, #0
200016fc:	d015      	beq.n	2000172a <DAP_SWD_Transfer+0x5f6>
      // Check last write
      retry = DAP_Data.transfer.retry_count;
200016fe:	4b17      	ldr	r3, [pc, #92]	@ (2000175c <DAP_SWD_Transfer+0x628>)
20001700:	8a1b      	ldrh	r3, [r3, #16]
20001702:	627b      	str	r3, [r7, #36]	@ 0x24
      do {
        response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
20001704:	2100      	movs	r1, #0
20001706:	200e      	movs	r0, #14
20001708:	f003 f878 	bl	200047fc <SWD_Transfer>
2000170c:	4603      	mov	r3, r0
2000170e:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001712:	2b02      	cmp	r3, #2
20001714:	d109      	bne.n	2000172a <DAP_SWD_Transfer+0x5f6>
20001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001718:	1e5a      	subs	r2, r3, #1
2000171a:	627a      	str	r2, [r7, #36]	@ 0x24
2000171c:	2b00      	cmp	r3, #0
2000171e:	d004      	beq.n	2000172a <DAP_SWD_Transfer+0x5f6>
20001720:	4b0f      	ldr	r3, [pc, #60]	@ (20001760 <DAP_SWD_Transfer+0x62c>)
20001722:	781b      	ldrb	r3, [r3, #0]
20001724:	b2db      	uxtb	r3, r3
20001726:	2b00      	cmp	r3, #0
20001728:	d0ec      	beq.n	20001704 <DAP_SWD_Transfer+0x5d0>
    }
  }

end:
2000172a:	bf00      	nop
2000172c:	e000      	b.n	20001730 <DAP_SWD_Transfer+0x5fc>
        goto end;
2000172e:	bf00      	nop
  *(response_head+0) = (uint8_t)response_count;
20001730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001732:	b2da      	uxtb	r2, r3
20001734:	69fb      	ldr	r3, [r7, #28]
20001736:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)response_value;
20001738:	69fb      	ldr	r3, [r7, #28]
2000173a:	3301      	adds	r3, #1
2000173c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
2000173e:	b2d2      	uxtb	r2, r2
20001740:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | (uint32_t)(response - response_head));
20001742:	687a      	ldr	r2, [r7, #4]
20001744:	6a3b      	ldr	r3, [r7, #32]
20001746:	1ad3      	subs	r3, r2, r3
20001748:	041b      	lsls	r3, r3, #16
2000174a:	6839      	ldr	r1, [r7, #0]
2000174c:	69fa      	ldr	r2, [r7, #28]
2000174e:	1a8a      	subs	r2, r1, r2
20001750:	4313      	orrs	r3, r2
}
20001752:	4618      	mov	r0, r3
20001754:	3740      	adds	r7, #64	@ 0x40
20001756:	46bd      	mov	sp, r7
20001758:	bd80      	pop	{r7, pc}
2000175a:	bf00      	nop
2000175c:	2000da4c 	.word	0x2000da4c
20001760:	2000da90 	.word	0x2000da90

20001764 <DAP_JTAG_Transfer>:
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_Transfer(const uint8_t *request, uint8_t *response) {
20001764:	b580      	push	{r7, lr}
20001766:	b090      	sub	sp, #64	@ 0x40
20001768:	af00      	add	r7, sp, #0
2000176a:	6078      	str	r0, [r7, #4]
2000176c:	6039      	str	r1, [r7, #0]
  uint32_t  ir;
#if (TIMESTAMP_CLOCK != 0U)
  uint32_t  timestamp;
#endif

  request_head   = request;
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	623b      	str	r3, [r7, #32]

  response_count = 0U;
20001772:	2300      	movs	r3, #0
20001774:	63bb      	str	r3, [r7, #56]	@ 0x38
  response_value = 0U;
20001776:	2300      	movs	r3, #0
20001778:	637b      	str	r3, [r7, #52]	@ 0x34
  response_head  = response;
2000177a:	683b      	ldr	r3, [r7, #0]
2000177c:	61fb      	str	r3, [r7, #28]
  response      += 2;
2000177e:	683b      	ldr	r3, [r7, #0]
20001780:	3302      	adds	r3, #2
20001782:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001784:	4b95      	ldr	r3, [pc, #596]	@ (200019dc <DAP_JTAG_Transfer+0x278>)
20001786:	2200      	movs	r2, #0
20001788:	701a      	strb	r2, [r3, #0]

  ir        = 0U;
2000178a:	2300      	movs	r3, #0
2000178c:	627b      	str	r3, [r7, #36]	@ 0x24
  post_read = 0U;
2000178e:	2300      	movs	r3, #0
20001790:	633b      	str	r3, [r7, #48]	@ 0x30

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20001792:	687b      	ldr	r3, [r7, #4]
20001794:	1c5a      	adds	r2, r3, #1
20001796:	607a      	str	r2, [r7, #4]
20001798:	781a      	ldrb	r2, [r3, #0]
2000179a:	4b91      	ldr	r3, [pc, #580]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
2000179c:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
2000179e:	4b90      	ldr	r3, [pc, #576]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
200017a0:	7eda      	ldrb	r2, [r3, #27]
200017a2:	4b8f      	ldr	r3, [pc, #572]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
200017a4:	7e9b      	ldrb	r3, [r3, #26]
200017a6:	429a      	cmp	r2, r3
200017a8:	f080 82bc 	bcs.w	20001d24 <DAP_JTAG_Transfer+0x5c0>
    goto end;
  }

  request_count = *request++;
200017ac:	687b      	ldr	r3, [r7, #4]
200017ae:	1c5a      	adds	r2, r3, #1
200017b0:	607a      	str	r2, [r7, #4]
200017b2:	781b      	ldrb	r3, [r3, #0]
200017b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  while (request_count != 0) {
200017b6:	e227      	b.n	20001c08 <DAP_JTAG_Transfer+0x4a4>
    request_count--;
200017b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200017ba:	3b01      	subs	r3, #1
200017bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
200017be:	687b      	ldr	r3, [r7, #4]
200017c0:	1c5a      	adds	r2, r3, #1
200017c2:	607a      	str	r2, [r7, #4]
200017c4:	781b      	ldrb	r3, [r3, #0]
200017c6:	61bb      	str	r3, [r7, #24]
    request_ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
200017c8:	69bb      	ldr	r3, [r7, #24]
200017ca:	f003 0301 	and.w	r3, r3, #1
200017ce:	2b00      	cmp	r3, #0
200017d0:	d001      	beq.n	200017d6 <DAP_JTAG_Transfer+0x72>
200017d2:	230b      	movs	r3, #11
200017d4:	e000      	b.n	200017d8 <DAP_JTAG_Transfer+0x74>
200017d6:	230a      	movs	r3, #10
200017d8:	617b      	str	r3, [r7, #20]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
200017da:	69bb      	ldr	r3, [r7, #24]
200017dc:	f003 0302 	and.w	r3, r3, #2
200017e0:	2b00      	cmp	r3, #0
200017e2:	f000 815d 	beq.w	20001aa0 <DAP_JTAG_Transfer+0x33c>
      // Read register
      if (post_read) {
200017e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200017e8:	2b00      	cmp	r3, #0
200017ea:	f000 8088 	beq.w	200018fe <DAP_JTAG_Transfer+0x19a>
        // Read was posted before
        retry = DAP_Data.transfer.retry_count;
200017ee:	4b7c      	ldr	r3, [pc, #496]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
200017f0:	8a1b      	ldrh	r3, [r3, #16]
200017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
200017f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200017f6:	697b      	ldr	r3, [r7, #20]
200017f8:	429a      	cmp	r2, r3
200017fa:	d11a      	bne.n	20001832 <DAP_JTAG_Transfer+0xce>
200017fc:	69bb      	ldr	r3, [r7, #24]
200017fe:	f003 0310 	and.w	r3, r3, #16
20001802:	2b00      	cmp	r3, #0
20001804:	d115      	bne.n	20001832 <DAP_JTAG_Transfer+0xce>
          // Read previous data and post next read
          do {
            response_value = JTAG_Transfer(request_value, &data);
20001806:	f107 0308 	add.w	r3, r7, #8
2000180a:	4619      	mov	r1, r3
2000180c:	69b8      	ldr	r0, [r7, #24]
2000180e:	f002 fbed 	bl	20003fec <JTAG_Transfer>
20001812:	4603      	mov	r3, r0
20001814:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001818:	2b02      	cmp	r3, #2
2000181a:	d12a      	bne.n	20001872 <DAP_JTAG_Transfer+0x10e>
2000181c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000181e:	1e5a      	subs	r2, r3, #1
20001820:	62ba      	str	r2, [r7, #40]	@ 0x28
20001822:	2b00      	cmp	r3, #0
20001824:	d025      	beq.n	20001872 <DAP_JTAG_Transfer+0x10e>
20001826:	4b6d      	ldr	r3, [pc, #436]	@ (200019dc <DAP_JTAG_Transfer+0x278>)
20001828:	781b      	ldrb	r3, [r3, #0]
2000182a:	b2db      	uxtb	r3, r3
2000182c:	2b00      	cmp	r3, #0
2000182e:	d0ea      	beq.n	20001806 <DAP_JTAG_Transfer+0xa2>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
20001830:	e01f      	b.n	20001872 <DAP_JTAG_Transfer+0x10e>
        } else {
          // Select JTAG chain
          if (ir != JTAG_DPACC) {
20001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001834:	2b0a      	cmp	r3, #10
20001836:	d004      	beq.n	20001842 <DAP_JTAG_Transfer+0xde>
            ir = JTAG_DPACC;
20001838:	230a      	movs	r3, #10
2000183a:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
2000183c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000183e:	f002 fbbf 	bl	20003fc0 <JTAG_IR>
          }
          // Read previous data
          do {
            response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
20001842:	f107 0308 	add.w	r3, r7, #8
20001846:	4619      	mov	r1, r3
20001848:	200e      	movs	r0, #14
2000184a:	f002 fbcf 	bl	20003fec <JTAG_Transfer>
2000184e:	4603      	mov	r3, r0
20001850:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001854:	2b02      	cmp	r3, #2
20001856:	d109      	bne.n	2000186c <DAP_JTAG_Transfer+0x108>
20001858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000185a:	1e5a      	subs	r2, r3, #1
2000185c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000185e:	2b00      	cmp	r3, #0
20001860:	d004      	beq.n	2000186c <DAP_JTAG_Transfer+0x108>
20001862:	4b5e      	ldr	r3, [pc, #376]	@ (200019dc <DAP_JTAG_Transfer+0x278>)
20001864:	781b      	ldrb	r3, [r3, #0]
20001866:	b2db      	uxtb	r3, r3
20001868:	2b00      	cmp	r3, #0
2000186a:	d0ea      	beq.n	20001842 <DAP_JTAG_Transfer+0xde>
          post_read = 0U;
2000186c:	2300      	movs	r3, #0
2000186e:	633b      	str	r3, [r7, #48]	@ 0x30
20001870:	e000      	b.n	20001874 <DAP_JTAG_Transfer+0x110>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
20001872:	bf00      	nop
        }
        if (response_value != DAP_TRANSFER_OK) {
20001874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001876:	2b01      	cmp	r3, #1
20001878:	f040 81cb 	bne.w	20001c12 <DAP_JTAG_Transfer+0x4ae>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
2000187c:	68b9      	ldr	r1, [r7, #8]
2000187e:	683b      	ldr	r3, [r7, #0]
20001880:	1c5a      	adds	r2, r3, #1
20001882:	603a      	str	r2, [r7, #0]
20001884:	b2ca      	uxtb	r2, r1
20001886:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001888:	68bb      	ldr	r3, [r7, #8]
2000188a:	0a19      	lsrs	r1, r3, #8
2000188c:	683b      	ldr	r3, [r7, #0]
2000188e:	1c5a      	adds	r2, r3, #1
20001890:	603a      	str	r2, [r7, #0]
20001892:	b2ca      	uxtb	r2, r1
20001894:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001896:	68bb      	ldr	r3, [r7, #8]
20001898:	0c19      	lsrs	r1, r3, #16
2000189a:	683b      	ldr	r3, [r7, #0]
2000189c:	1c5a      	adds	r2, r3, #1
2000189e:	603a      	str	r2, [r7, #0]
200018a0:	b2ca      	uxtb	r2, r1
200018a2:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
200018a4:	68bb      	ldr	r3, [r7, #8]
200018a6:	0e19      	lsrs	r1, r3, #24
200018a8:	683b      	ldr	r3, [r7, #0]
200018aa:	1c5a      	adds	r2, r3, #1
200018ac:	603a      	str	r2, [r7, #0]
200018ae:	b2ca      	uxtb	r2, r1
200018b0:	701a      	strb	r2, [r3, #0]
#if (TIMESTAMP_CLOCK != 0U)
        if (post_read) {
200018b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200018b4:	2b00      	cmp	r3, #0
200018b6:	d022      	beq.n	200018fe <DAP_JTAG_Transfer+0x19a>
          // Store Timestamp of next AP read
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200018b8:	69bb      	ldr	r3, [r7, #24]
200018ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200018be:	2b00      	cmp	r3, #0
200018c0:	d01d      	beq.n	200018fe <DAP_JTAG_Transfer+0x19a>
            timestamp = DAP_Data.timestamp;
200018c2:	4b47      	ldr	r3, [pc, #284]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
200018c4:	689b      	ldr	r3, [r3, #8]
200018c6:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
200018c8:	683b      	ldr	r3, [r7, #0]
200018ca:	1c5a      	adds	r2, r3, #1
200018cc:	603a      	str	r2, [r7, #0]
200018ce:	693a      	ldr	r2, [r7, #16]
200018d0:	b2d2      	uxtb	r2, r2
200018d2:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
200018d4:	693b      	ldr	r3, [r7, #16]
200018d6:	0a19      	lsrs	r1, r3, #8
200018d8:	683b      	ldr	r3, [r7, #0]
200018da:	1c5a      	adds	r2, r3, #1
200018dc:	603a      	str	r2, [r7, #0]
200018de:	b2ca      	uxtb	r2, r1
200018e0:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
200018e2:	693b      	ldr	r3, [r7, #16]
200018e4:	0c19      	lsrs	r1, r3, #16
200018e6:	683b      	ldr	r3, [r7, #0]
200018e8:	1c5a      	adds	r2, r3, #1
200018ea:	603a      	str	r2, [r7, #0]
200018ec:	b2ca      	uxtb	r2, r1
200018ee:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
200018f0:	693b      	ldr	r3, [r7, #16]
200018f2:	0e19      	lsrs	r1, r3, #24
200018f4:	683b      	ldr	r3, [r7, #0]
200018f6:	1c5a      	adds	r2, r3, #1
200018f8:	603a      	str	r2, [r7, #0]
200018fa:	b2ca      	uxtb	r2, r1
200018fc:	701a      	strb	r2, [r3, #0]
          }
        }
#endif
      }
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
200018fe:	69bb      	ldr	r3, [r7, #24]
20001900:	f003 0310 	and.w	r3, r3, #16
20001904:	2b00      	cmp	r3, #0
20001906:	d07e      	beq.n	20001a06 <DAP_JTAG_Transfer+0x2a2>
        // Read with value match
        match_value = (uint32_t)(*(request+0) <<  0) |
20001908:	687b      	ldr	r3, [r7, #4]
2000190a:	781b      	ldrb	r3, [r3, #0]
2000190c:	461a      	mov	r2, r3
                      (uint32_t)(*(request+1) <<  8) |
2000190e:	687b      	ldr	r3, [r7, #4]
20001910:	3301      	adds	r3, #1
20001912:	781b      	ldrb	r3, [r3, #0]
20001914:	021b      	lsls	r3, r3, #8
        match_value = (uint32_t)(*(request+0) <<  0) |
20001916:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+2) << 16) |
20001918:	687b      	ldr	r3, [r7, #4]
2000191a:	3302      	adds	r3, #2
2000191c:	781b      	ldrb	r3, [r3, #0]
2000191e:	041b      	lsls	r3, r3, #16
                      (uint32_t)(*(request+1) <<  8) |
20001920:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+3) << 24);
20001922:	687b      	ldr	r3, [r7, #4]
20001924:	3303      	adds	r3, #3
20001926:	781b      	ldrb	r3, [r3, #0]
20001928:	061b      	lsls	r3, r3, #24
        match_value = (uint32_t)(*(request+0) <<  0) |
2000192a:	4313      	orrs	r3, r2
2000192c:	60fb      	str	r3, [r7, #12]
        request += 4;
2000192e:	687b      	ldr	r3, [r7, #4]
20001930:	3304      	adds	r3, #4
20001932:	607b      	str	r3, [r7, #4]
        match_retry  = DAP_Data.transfer.match_retry;
20001934:	4b2a      	ldr	r3, [pc, #168]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
20001936:	8a5b      	ldrh	r3, [r3, #18]
20001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // Select JTAG chain
        if (ir != request_ir) {
2000193a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000193c:	697b      	ldr	r3, [r7, #20]
2000193e:	429a      	cmp	r2, r3
20001940:	d004      	beq.n	2000194c <DAP_JTAG_Transfer+0x1e8>
          ir = request_ir;
20001942:	697b      	ldr	r3, [r7, #20]
20001944:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001946:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001948:	f002 fb3a 	bl	20003fc0 <JTAG_IR>
        }
        // Post DP/AP read
        retry = DAP_Data.transfer.retry_count;
2000194c:	4b24      	ldr	r3, [pc, #144]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
2000194e:	8a1b      	ldrh	r3, [r3, #16]
20001950:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, NULL);
20001952:	2100      	movs	r1, #0
20001954:	69b8      	ldr	r0, [r7, #24]
20001956:	f002 fb49 	bl	20003fec <JTAG_Transfer>
2000195a:	4603      	mov	r3, r0
2000195c:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000195e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001960:	2b02      	cmp	r3, #2
20001962:	d109      	bne.n	20001978 <DAP_JTAG_Transfer+0x214>
20001964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001966:	1e5a      	subs	r2, r3, #1
20001968:	62ba      	str	r2, [r7, #40]	@ 0x28
2000196a:	2b00      	cmp	r3, #0
2000196c:	d004      	beq.n	20001978 <DAP_JTAG_Transfer+0x214>
2000196e:	4b1b      	ldr	r3, [pc, #108]	@ (200019dc <DAP_JTAG_Transfer+0x278>)
20001970:	781b      	ldrb	r3, [r3, #0]
20001972:	b2db      	uxtb	r3, r3
20001974:	2b00      	cmp	r3, #0
20001976:	d0ec      	beq.n	20001952 <DAP_JTAG_Transfer+0x1ee>
        if (response_value != DAP_TRANSFER_OK) {
20001978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000197a:	2b01      	cmp	r3, #1
2000197c:	f040 814b 	bne.w	20001c16 <DAP_JTAG_Transfer+0x4b2>
          break;
        }
        do {
          // Read register until its value matches or retry counter expires
          retry = DAP_Data.transfer.retry_count;
20001980:	4b17      	ldr	r3, [pc, #92]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
20001982:	8a1b      	ldrh	r3, [r3, #16]
20001984:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, &data);
20001986:	f107 0308 	add.w	r3, r7, #8
2000198a:	4619      	mov	r1, r3
2000198c:	69b8      	ldr	r0, [r7, #24]
2000198e:	f002 fb2d 	bl	20003fec <JTAG_Transfer>
20001992:	4603      	mov	r3, r0
20001994:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001998:	2b02      	cmp	r3, #2
2000199a:	d109      	bne.n	200019b0 <DAP_JTAG_Transfer+0x24c>
2000199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000199e:	1e5a      	subs	r2, r3, #1
200019a0:	62ba      	str	r2, [r7, #40]	@ 0x28
200019a2:	2b00      	cmp	r3, #0
200019a4:	d004      	beq.n	200019b0 <DAP_JTAG_Transfer+0x24c>
200019a6:	4b0d      	ldr	r3, [pc, #52]	@ (200019dc <DAP_JTAG_Transfer+0x278>)
200019a8:	781b      	ldrb	r3, [r3, #0]
200019aa:	b2db      	uxtb	r3, r3
200019ac:	2b00      	cmp	r3, #0
200019ae:	d0ea      	beq.n	20001986 <DAP_JTAG_Transfer+0x222>
          if (response_value != DAP_TRANSFER_OK) {
200019b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200019b2:	2b01      	cmp	r3, #1
200019b4:	d116      	bne.n	200019e4 <DAP_JTAG_Transfer+0x280>
            break;
          }
        } while (((data & DAP_Data.transfer.match_mask) != match_value) && match_retry-- && !DAP_TransferAbort);
200019b6:	4b0a      	ldr	r3, [pc, #40]	@ (200019e0 <DAP_JTAG_Transfer+0x27c>)
200019b8:	695a      	ldr	r2, [r3, #20]
200019ba:	68bb      	ldr	r3, [r7, #8]
200019bc:	4013      	ands	r3, r2
200019be:	68fa      	ldr	r2, [r7, #12]
200019c0:	429a      	cmp	r2, r3
200019c2:	d010      	beq.n	200019e6 <DAP_JTAG_Transfer+0x282>
200019c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200019c6:	1e5a      	subs	r2, r3, #1
200019c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
200019ca:	2b00      	cmp	r3, #0
200019cc:	d00b      	beq.n	200019e6 <DAP_JTAG_Transfer+0x282>
200019ce:	4b03      	ldr	r3, [pc, #12]	@ (200019dc <DAP_JTAG_Transfer+0x278>)
200019d0:	781b      	ldrb	r3, [r3, #0]
200019d2:	b2db      	uxtb	r3, r3
200019d4:	2b00      	cmp	r3, #0
200019d6:	d0d3      	beq.n	20001980 <DAP_JTAG_Transfer+0x21c>
200019d8:	e005      	b.n	200019e6 <DAP_JTAG_Transfer+0x282>
200019da:	bf00      	nop
200019dc:	2000da90 	.word	0x2000da90
200019e0:	2000da4c 	.word	0x2000da4c
            break;
200019e4:	bf00      	nop
        if ((data & DAP_Data.transfer.match_mask) != match_value) {
200019e6:	4b91      	ldr	r3, [pc, #580]	@ (20001c2c <DAP_JTAG_Transfer+0x4c8>)
200019e8:	695a      	ldr	r2, [r3, #20]
200019ea:	68bb      	ldr	r3, [r7, #8]
200019ec:	4013      	ands	r3, r2
200019ee:	68fa      	ldr	r2, [r7, #12]
200019f0:	429a      	cmp	r2, r3
200019f2:	d003      	beq.n	200019fc <DAP_JTAG_Transfer+0x298>
          response_value |= DAP_TRANSFER_MISMATCH;
200019f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200019f6:	f043 0310 	orr.w	r3, r3, #16
200019fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (response_value != DAP_TRANSFER_OK) {
200019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200019fe:	2b01      	cmp	r3, #1
20001a00:	f000 80fa 	beq.w	20001bf8 <DAP_JTAG_Transfer+0x494>
          break;
20001a04:	e110      	b.n	20001c28 <DAP_JTAG_Transfer+0x4c4>
        }
      } else {
        // Normal read
        if (post_read == 0U) {
20001a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001a08:	2b00      	cmp	r3, #0
20001a0a:	f040 80f5 	bne.w	20001bf8 <DAP_JTAG_Transfer+0x494>
          // Select JTAG chain
          if (ir != request_ir) {
20001a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001a10:	697b      	ldr	r3, [r7, #20]
20001a12:	429a      	cmp	r2, r3
20001a14:	d004      	beq.n	20001a20 <DAP_JTAG_Transfer+0x2bc>
            ir = request_ir;
20001a16:	697b      	ldr	r3, [r7, #20]
20001a18:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
20001a1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001a1c:	f002 fad0 	bl	20003fc0 <JTAG_IR>
          }
          // Post DP/AP read
          retry = DAP_Data.transfer.retry_count;
20001a20:	4b82      	ldr	r3, [pc, #520]	@ (20001c2c <DAP_JTAG_Transfer+0x4c8>)
20001a22:	8a1b      	ldrh	r3, [r3, #16]
20001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, NULL);
20001a26:	2100      	movs	r1, #0
20001a28:	69b8      	ldr	r0, [r7, #24]
20001a2a:	f002 fadf 	bl	20003fec <JTAG_Transfer>
20001a2e:	4603      	mov	r3, r0
20001a30:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001a34:	2b02      	cmp	r3, #2
20001a36:	d109      	bne.n	20001a4c <DAP_JTAG_Transfer+0x2e8>
20001a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001a3a:	1e5a      	subs	r2, r3, #1
20001a3c:	62ba      	str	r2, [r7, #40]	@ 0x28
20001a3e:	2b00      	cmp	r3, #0
20001a40:	d004      	beq.n	20001a4c <DAP_JTAG_Transfer+0x2e8>
20001a42:	4b7b      	ldr	r3, [pc, #492]	@ (20001c30 <DAP_JTAG_Transfer+0x4cc>)
20001a44:	781b      	ldrb	r3, [r3, #0]
20001a46:	b2db      	uxtb	r3, r3
20001a48:	2b00      	cmp	r3, #0
20001a4a:	d0ec      	beq.n	20001a26 <DAP_JTAG_Transfer+0x2c2>
          if (response_value != DAP_TRANSFER_OK) {
20001a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001a4e:	2b01      	cmp	r3, #1
20001a50:	f040 80e3 	bne.w	20001c1a <DAP_JTAG_Transfer+0x4b6>
            break;
          }
#if (TIMESTAMP_CLOCK != 0U)
          // Store Timestamp
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001a54:	69bb      	ldr	r3, [r7, #24]
20001a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001a5a:	2b00      	cmp	r3, #0
20001a5c:	d01d      	beq.n	20001a9a <DAP_JTAG_Transfer+0x336>
            timestamp = DAP_Data.timestamp;
20001a5e:	4b73      	ldr	r3, [pc, #460]	@ (20001c2c <DAP_JTAG_Transfer+0x4c8>)
20001a60:	689b      	ldr	r3, [r3, #8]
20001a62:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
20001a64:	683b      	ldr	r3, [r7, #0]
20001a66:	1c5a      	adds	r2, r3, #1
20001a68:	603a      	str	r2, [r7, #0]
20001a6a:	693a      	ldr	r2, [r7, #16]
20001a6c:	b2d2      	uxtb	r2, r2
20001a6e:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
20001a70:	693b      	ldr	r3, [r7, #16]
20001a72:	0a19      	lsrs	r1, r3, #8
20001a74:	683b      	ldr	r3, [r7, #0]
20001a76:	1c5a      	adds	r2, r3, #1
20001a78:	603a      	str	r2, [r7, #0]
20001a7a:	b2ca      	uxtb	r2, r1
20001a7c:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
20001a7e:	693b      	ldr	r3, [r7, #16]
20001a80:	0c19      	lsrs	r1, r3, #16
20001a82:	683b      	ldr	r3, [r7, #0]
20001a84:	1c5a      	adds	r2, r3, #1
20001a86:	603a      	str	r2, [r7, #0]
20001a88:	b2ca      	uxtb	r2, r1
20001a8a:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
20001a8c:	693b      	ldr	r3, [r7, #16]
20001a8e:	0e19      	lsrs	r1, r3, #24
20001a90:	683b      	ldr	r3, [r7, #0]
20001a92:	1c5a      	adds	r2, r3, #1
20001a94:	603a      	str	r2, [r7, #0]
20001a96:	b2ca      	uxtb	r2, r1
20001a98:	701a      	strb	r2, [r3, #0]
          }
#endif
          post_read = 1U;
20001a9a:	2301      	movs	r3, #1
20001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
20001a9e:	e0ab      	b.n	20001bf8 <DAP_JTAG_Transfer+0x494>
        }
      }
    } else {
      // Write register
      if (post_read) {
20001aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001aa2:	2b00      	cmp	r3, #0
20001aa4:	d040      	beq.n	20001b28 <DAP_JTAG_Transfer+0x3c4>
        // Select JTAG chain
        if (ir != JTAG_DPACC) {
20001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001aa8:	2b0a      	cmp	r3, #10
20001aaa:	d004      	beq.n	20001ab6 <DAP_JTAG_Transfer+0x352>
          ir = JTAG_DPACC;
20001aac:	230a      	movs	r3, #10
20001aae:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001ab0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001ab2:	f002 fa85 	bl	20003fc0 <JTAG_IR>
        }
        // Read previous data
        retry = DAP_Data.transfer.retry_count;
20001ab6:	4b5d      	ldr	r3, [pc, #372]	@ (20001c2c <DAP_JTAG_Transfer+0x4c8>)
20001ab8:	8a1b      	ldrh	r3, [r3, #16]
20001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
20001abc:	f107 0308 	add.w	r3, r7, #8
20001ac0:	4619      	mov	r1, r3
20001ac2:	200e      	movs	r0, #14
20001ac4:	f002 fa92 	bl	20003fec <JTAG_Transfer>
20001ac8:	4603      	mov	r3, r0
20001aca:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001ace:	2b02      	cmp	r3, #2
20001ad0:	d109      	bne.n	20001ae6 <DAP_JTAG_Transfer+0x382>
20001ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001ad4:	1e5a      	subs	r2, r3, #1
20001ad6:	62ba      	str	r2, [r7, #40]	@ 0x28
20001ad8:	2b00      	cmp	r3, #0
20001ada:	d004      	beq.n	20001ae6 <DAP_JTAG_Transfer+0x382>
20001adc:	4b54      	ldr	r3, [pc, #336]	@ (20001c30 <DAP_JTAG_Transfer+0x4cc>)
20001ade:	781b      	ldrb	r3, [r3, #0]
20001ae0:	b2db      	uxtb	r3, r3
20001ae2:	2b00      	cmp	r3, #0
20001ae4:	d0ea      	beq.n	20001abc <DAP_JTAG_Transfer+0x358>
        if (response_value != DAP_TRANSFER_OK) {
20001ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001ae8:	2b01      	cmp	r3, #1
20001aea:	f040 8098 	bne.w	20001c1e <DAP_JTAG_Transfer+0x4ba>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
20001aee:	68b9      	ldr	r1, [r7, #8]
20001af0:	683b      	ldr	r3, [r7, #0]
20001af2:	1c5a      	adds	r2, r3, #1
20001af4:	603a      	str	r2, [r7, #0]
20001af6:	b2ca      	uxtb	r2, r1
20001af8:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001afa:	68bb      	ldr	r3, [r7, #8]
20001afc:	0a19      	lsrs	r1, r3, #8
20001afe:	683b      	ldr	r3, [r7, #0]
20001b00:	1c5a      	adds	r2, r3, #1
20001b02:	603a      	str	r2, [r7, #0]
20001b04:	b2ca      	uxtb	r2, r1
20001b06:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001b08:	68bb      	ldr	r3, [r7, #8]
20001b0a:	0c19      	lsrs	r1, r3, #16
20001b0c:	683b      	ldr	r3, [r7, #0]
20001b0e:	1c5a      	adds	r2, r3, #1
20001b10:	603a      	str	r2, [r7, #0]
20001b12:	b2ca      	uxtb	r2, r1
20001b14:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001b16:	68bb      	ldr	r3, [r7, #8]
20001b18:	0e19      	lsrs	r1, r3, #24
20001b1a:	683b      	ldr	r3, [r7, #0]
20001b1c:	1c5a      	adds	r2, r3, #1
20001b1e:	603a      	str	r2, [r7, #0]
20001b20:	b2ca      	uxtb	r2, r1
20001b22:	701a      	strb	r2, [r3, #0]
        post_read = 0U;
20001b24:	2300      	movs	r3, #0
20001b26:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001b28:	687b      	ldr	r3, [r7, #4]
20001b2a:	781b      	ldrb	r3, [r3, #0]
20001b2c:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
20001b2e:	687b      	ldr	r3, [r7, #4]
20001b30:	3301      	adds	r3, #1
20001b32:	781b      	ldrb	r3, [r3, #0]
20001b34:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001b36:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001b38:	687b      	ldr	r3, [r7, #4]
20001b3a:	3302      	adds	r3, #2
20001b3c:	781b      	ldrb	r3, [r3, #0]
20001b3e:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
20001b40:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
20001b42:	687b      	ldr	r3, [r7, #4]
20001b44:	3303      	adds	r3, #3
20001b46:	781b      	ldrb	r3, [r3, #0]
20001b48:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001b4a:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
20001b4c:	60bb      	str	r3, [r7, #8]
      request += 4;
20001b4e:	687b      	ldr	r3, [r7, #4]
20001b50:	3304      	adds	r3, #4
20001b52:	607b      	str	r3, [r7, #4]
      if ((request_value & DAP_TRANSFER_MATCH_MASK) != 0U) {
20001b54:	69bb      	ldr	r3, [r7, #24]
20001b56:	f003 0320 	and.w	r3, r3, #32
20001b5a:	2b00      	cmp	r3, #0
20001b5c:	d005      	beq.n	20001b6a <DAP_JTAG_Transfer+0x406>
        // Write match mask
        DAP_Data.transfer.match_mask = data;
20001b5e:	68bb      	ldr	r3, [r7, #8]
20001b60:	4a32      	ldr	r2, [pc, #200]	@ (20001c2c <DAP_JTAG_Transfer+0x4c8>)
20001b62:	6153      	str	r3, [r2, #20]
        response_value = DAP_TRANSFER_OK;
20001b64:	2301      	movs	r3, #1
20001b66:	637b      	str	r3, [r7, #52]	@ 0x34
20001b68:	e046      	b.n	20001bf8 <DAP_JTAG_Transfer+0x494>
      } else {
        // Select JTAG chain
        if (ir != request_ir) {
20001b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001b6c:	697b      	ldr	r3, [r7, #20]
20001b6e:	429a      	cmp	r2, r3
20001b70:	d004      	beq.n	20001b7c <DAP_JTAG_Transfer+0x418>
          ir = request_ir;
20001b72:	697b      	ldr	r3, [r7, #20]
20001b74:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001b76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001b78:	f002 fa22 	bl	20003fc0 <JTAG_IR>
        }
        // Write DP/AP register
        retry = DAP_Data.transfer.retry_count;
20001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (20001c2c <DAP_JTAG_Transfer+0x4c8>)
20001b7e:	8a1b      	ldrh	r3, [r3, #16]
20001b80:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, &data);
20001b82:	f107 0308 	add.w	r3, r7, #8
20001b86:	4619      	mov	r1, r3
20001b88:	69b8      	ldr	r0, [r7, #24]
20001b8a:	f002 fa2f 	bl	20003fec <JTAG_Transfer>
20001b8e:	4603      	mov	r3, r0
20001b90:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001b94:	2b02      	cmp	r3, #2
20001b96:	d109      	bne.n	20001bac <DAP_JTAG_Transfer+0x448>
20001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001b9a:	1e5a      	subs	r2, r3, #1
20001b9c:	62ba      	str	r2, [r7, #40]	@ 0x28
20001b9e:	2b00      	cmp	r3, #0
20001ba0:	d004      	beq.n	20001bac <DAP_JTAG_Transfer+0x448>
20001ba2:	4b23      	ldr	r3, [pc, #140]	@ (20001c30 <DAP_JTAG_Transfer+0x4cc>)
20001ba4:	781b      	ldrb	r3, [r3, #0]
20001ba6:	b2db      	uxtb	r3, r3
20001ba8:	2b00      	cmp	r3, #0
20001baa:	d0ea      	beq.n	20001b82 <DAP_JTAG_Transfer+0x41e>
        if (response_value != DAP_TRANSFER_OK) {
20001bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001bae:	2b01      	cmp	r3, #1
20001bb0:	d137      	bne.n	20001c22 <DAP_JTAG_Transfer+0x4be>
          break;
        }
#if (TIMESTAMP_CLOCK != 0U)
        // Store Timestamp
        if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001bb2:	69bb      	ldr	r3, [r7, #24]
20001bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001bb8:	2b00      	cmp	r3, #0
20001bba:	d01d      	beq.n	20001bf8 <DAP_JTAG_Transfer+0x494>
          timestamp = DAP_Data.timestamp;
20001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (20001c2c <DAP_JTAG_Transfer+0x4c8>)
20001bbe:	689b      	ldr	r3, [r3, #8]
20001bc0:	613b      	str	r3, [r7, #16]
          *response++ = (uint8_t) timestamp;
20001bc2:	683b      	ldr	r3, [r7, #0]
20001bc4:	1c5a      	adds	r2, r3, #1
20001bc6:	603a      	str	r2, [r7, #0]
20001bc8:	693a      	ldr	r2, [r7, #16]
20001bca:	b2d2      	uxtb	r2, r2
20001bcc:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >>  8);
20001bce:	693b      	ldr	r3, [r7, #16]
20001bd0:	0a19      	lsrs	r1, r3, #8
20001bd2:	683b      	ldr	r3, [r7, #0]
20001bd4:	1c5a      	adds	r2, r3, #1
20001bd6:	603a      	str	r2, [r7, #0]
20001bd8:	b2ca      	uxtb	r2, r1
20001bda:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 16);
20001bdc:	693b      	ldr	r3, [r7, #16]
20001bde:	0c19      	lsrs	r1, r3, #16
20001be0:	683b      	ldr	r3, [r7, #0]
20001be2:	1c5a      	adds	r2, r3, #1
20001be4:	603a      	str	r2, [r7, #0]
20001be6:	b2ca      	uxtb	r2, r1
20001be8:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 24);
20001bea:	693b      	ldr	r3, [r7, #16]
20001bec:	0e19      	lsrs	r1, r3, #24
20001bee:	683b      	ldr	r3, [r7, #0]
20001bf0:	1c5a      	adds	r2, r3, #1
20001bf2:	603a      	str	r2, [r7, #0]
20001bf4:	b2ca      	uxtb	r2, r1
20001bf6:	701a      	strb	r2, [r3, #0]
        }
#endif
      }
    }
    response_count++;
20001bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001bfa:	3301      	adds	r3, #1
20001bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (DAP_TransferAbort) {
20001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (20001c30 <DAP_JTAG_Transfer+0x4cc>)
20001c00:	781b      	ldrb	r3, [r3, #0]
20001c02:	b2db      	uxtb	r3, r3
20001c04:	2b00      	cmp	r3, #0
20001c06:	d10e      	bne.n	20001c26 <DAP_JTAG_Transfer+0x4c2>
  while (request_count != 0) {
20001c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001c0a:	2b00      	cmp	r3, #0
20001c0c:	f47f add4 	bne.w	200017b8 <DAP_JTAG_Transfer+0x54>
20001c10:	e029      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
          break;
20001c12:	bf00      	nop
20001c14:	e027      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
          break;
20001c16:	bf00      	nop
20001c18:	e025      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
            break;
20001c1a:	bf00      	nop
20001c1c:	e023      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
          break;
20001c1e:	bf00      	nop
20001c20:	e021      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
          break;
20001c22:	bf00      	nop
20001c24:	e01f      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
      break;
20001c26:	bf00      	nop
    }
  }

  while (request_count != 0) {
20001c28:	e01d      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
20001c2a:	bf00      	nop
20001c2c:	2000da4c 	.word	0x2000da4c
20001c30:	2000da90 	.word	0x2000da90
    // Process canceled requests
    request_count--;
20001c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001c36:	3b01      	subs	r3, #1
20001c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
20001c3a:	687b      	ldr	r3, [r7, #4]
20001c3c:	1c5a      	adds	r2, r3, #1
20001c3e:	607a      	str	r2, [r7, #4]
20001c40:	781b      	ldrb	r3, [r3, #0]
20001c42:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001c44:	69bb      	ldr	r3, [r7, #24]
20001c46:	f003 0302 	and.w	r3, r3, #2
20001c4a:	2b00      	cmp	r3, #0
20001c4c:	d008      	beq.n	20001c60 <DAP_JTAG_Transfer+0x4fc>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
20001c4e:	69bb      	ldr	r3, [r7, #24]
20001c50:	f003 0310 	and.w	r3, r3, #16
20001c54:	2b00      	cmp	r3, #0
20001c56:	d006      	beq.n	20001c66 <DAP_JTAG_Transfer+0x502>
        // Read with value match
        request += 4;
20001c58:	687b      	ldr	r3, [r7, #4]
20001c5a:	3304      	adds	r3, #4
20001c5c:	607b      	str	r3, [r7, #4]
20001c5e:	e002      	b.n	20001c66 <DAP_JTAG_Transfer+0x502>
      }
    } else {
      // Write register
      request += 4;
20001c60:	687b      	ldr	r3, [r7, #4]
20001c62:	3304      	adds	r3, #4
20001c64:	607b      	str	r3, [r7, #4]
  while (request_count != 0) {
20001c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001c68:	2b00      	cmp	r3, #0
20001c6a:	d1e3      	bne.n	20001c34 <DAP_JTAG_Transfer+0x4d0>
    }
  }

  if (response_value == DAP_TRANSFER_OK) {
20001c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001c6e:	2b01      	cmp	r3, #1
20001c70:	d15a      	bne.n	20001d28 <DAP_JTAG_Transfer+0x5c4>
    // Select JTAG chain
    if (ir != JTAG_DPACC) {
20001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001c74:	2b0a      	cmp	r3, #10
20001c76:	d004      	beq.n	20001c82 <DAP_JTAG_Transfer+0x51e>
      ir = JTAG_DPACC;
20001c78:	230a      	movs	r3, #10
20001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
      JTAG_IR(ir);
20001c7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001c7e:	f002 f99f 	bl	20003fc0 <JTAG_IR>
    }
    if (post_read) {
20001c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001c84:	2b00      	cmp	r3, #0
20001c86:	d036      	beq.n	20001cf6 <DAP_JTAG_Transfer+0x592>
      // Read previous data
      retry = DAP_Data.transfer.retry_count;
20001c88:	4b33      	ldr	r3, [pc, #204]	@ (20001d58 <DAP_JTAG_Transfer+0x5f4>)
20001c8a:	8a1b      	ldrh	r3, [r3, #16]
20001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
20001c8e:	f107 0308 	add.w	r3, r7, #8
20001c92:	4619      	mov	r1, r3
20001c94:	200e      	movs	r0, #14
20001c96:	f002 f9a9 	bl	20003fec <JTAG_Transfer>
20001c9a:	4603      	mov	r3, r0
20001c9c:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001ca0:	2b02      	cmp	r3, #2
20001ca2:	d109      	bne.n	20001cb8 <DAP_JTAG_Transfer+0x554>
20001ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001ca6:	1e5a      	subs	r2, r3, #1
20001ca8:	62ba      	str	r2, [r7, #40]	@ 0x28
20001caa:	2b00      	cmp	r3, #0
20001cac:	d004      	beq.n	20001cb8 <DAP_JTAG_Transfer+0x554>
20001cae:	4b2b      	ldr	r3, [pc, #172]	@ (20001d5c <DAP_JTAG_Transfer+0x5f8>)
20001cb0:	781b      	ldrb	r3, [r3, #0]
20001cb2:	b2db      	uxtb	r3, r3
20001cb4:	2b00      	cmp	r3, #0
20001cb6:	d0ea      	beq.n	20001c8e <DAP_JTAG_Transfer+0x52a>
      if (response_value != DAP_TRANSFER_OK) {
20001cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001cba:	2b01      	cmp	r3, #1
20001cbc:	d136      	bne.n	20001d2c <DAP_JTAG_Transfer+0x5c8>
        goto end;
      }
      // Store previous data
      *response++ = (uint8_t) data;
20001cbe:	68b9      	ldr	r1, [r7, #8]
20001cc0:	683b      	ldr	r3, [r7, #0]
20001cc2:	1c5a      	adds	r2, r3, #1
20001cc4:	603a      	str	r2, [r7, #0]
20001cc6:	b2ca      	uxtb	r2, r1
20001cc8:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
20001cca:	68bb      	ldr	r3, [r7, #8]
20001ccc:	0a19      	lsrs	r1, r3, #8
20001cce:	683b      	ldr	r3, [r7, #0]
20001cd0:	1c5a      	adds	r2, r3, #1
20001cd2:	603a      	str	r2, [r7, #0]
20001cd4:	b2ca      	uxtb	r2, r1
20001cd6:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
20001cd8:	68bb      	ldr	r3, [r7, #8]
20001cda:	0c19      	lsrs	r1, r3, #16
20001cdc:	683b      	ldr	r3, [r7, #0]
20001cde:	1c5a      	adds	r2, r3, #1
20001ce0:	603a      	str	r2, [r7, #0]
20001ce2:	b2ca      	uxtb	r2, r1
20001ce4:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20001ce6:	68bb      	ldr	r3, [r7, #8]
20001ce8:	0e19      	lsrs	r1, r3, #24
20001cea:	683b      	ldr	r3, [r7, #0]
20001cec:	1c5a      	adds	r2, r3, #1
20001cee:	603a      	str	r2, [r7, #0]
20001cf0:	b2ca      	uxtb	r2, r1
20001cf2:	701a      	strb	r2, [r3, #0]
20001cf4:	e01b      	b.n	20001d2e <DAP_JTAG_Transfer+0x5ca>
    } else {
      // Check last write
      retry = DAP_Data.transfer.retry_count;
20001cf6:	4b18      	ldr	r3, [pc, #96]	@ (20001d58 <DAP_JTAG_Transfer+0x5f4>)
20001cf8:	8a1b      	ldrh	r3, [r3, #16]
20001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
20001cfc:	2100      	movs	r1, #0
20001cfe:	200e      	movs	r0, #14
20001d00:	f002 f974 	bl	20003fec <JTAG_Transfer>
20001d04:	4603      	mov	r3, r0
20001d06:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001d0a:	2b02      	cmp	r3, #2
20001d0c:	d10c      	bne.n	20001d28 <DAP_JTAG_Transfer+0x5c4>
20001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001d10:	1e5a      	subs	r2, r3, #1
20001d12:	62ba      	str	r2, [r7, #40]	@ 0x28
20001d14:	2b00      	cmp	r3, #0
20001d16:	d007      	beq.n	20001d28 <DAP_JTAG_Transfer+0x5c4>
20001d18:	4b10      	ldr	r3, [pc, #64]	@ (20001d5c <DAP_JTAG_Transfer+0x5f8>)
20001d1a:	781b      	ldrb	r3, [r3, #0]
20001d1c:	b2db      	uxtb	r3, r3
20001d1e:	2b00      	cmp	r3, #0
20001d20:	d0ec      	beq.n	20001cfc <DAP_JTAG_Transfer+0x598>
    }
  }

end:
20001d22:	e001      	b.n	20001d28 <DAP_JTAG_Transfer+0x5c4>
    goto end;
20001d24:	bf00      	nop
20001d26:	e002      	b.n	20001d2e <DAP_JTAG_Transfer+0x5ca>
end:
20001d28:	bf00      	nop
20001d2a:	e000      	b.n	20001d2e <DAP_JTAG_Transfer+0x5ca>
        goto end;
20001d2c:	bf00      	nop
  *(response_head+0) = (uint8_t)response_count;
20001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001d30:	b2da      	uxtb	r2, r3
20001d32:	69fb      	ldr	r3, [r7, #28]
20001d34:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)response_value;
20001d36:	69fb      	ldr	r3, [r7, #28]
20001d38:	3301      	adds	r3, #1
20001d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20001d3c:	b2d2      	uxtb	r2, r2
20001d3e:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | (uint32_t)(response - response_head));
20001d40:	687a      	ldr	r2, [r7, #4]
20001d42:	6a3b      	ldr	r3, [r7, #32]
20001d44:	1ad3      	subs	r3, r2, r3
20001d46:	041b      	lsls	r3, r3, #16
20001d48:	6839      	ldr	r1, [r7, #0]
20001d4a:	69fa      	ldr	r2, [r7, #28]
20001d4c:	1a8a      	subs	r2, r1, r2
20001d4e:	4313      	orrs	r3, r2
}
20001d50:	4618      	mov	r0, r3
20001d52:	3740      	adds	r7, #64	@ 0x40
20001d54:	46bd      	mov	sp, r7
20001d56:	bd80      	pop	{r7, pc}
20001d58:	2000da4c 	.word	0x2000da4c
20001d5c:	2000da90 	.word	0x2000da90

20001d60 <DAP_Dummy_Transfer>:
// Process Dummy Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Dummy_Transfer(const uint8_t *request, uint8_t *response) {
20001d60:	b480      	push	{r7}
20001d62:	b087      	sub	sp, #28
20001d64:	af00      	add	r7, sp, #0
20001d66:	6078      	str	r0, [r7, #4]
20001d68:	6039      	str	r1, [r7, #0]
  const
  uint8_t  *request_head;
  uint32_t  request_count;
  uint32_t  request_value;

  request_head  =  request;
20001d6a:	687b      	ldr	r3, [r7, #4]
20001d6c:	613b      	str	r3, [r7, #16]

  request++;            // Ignore DAP index
20001d6e:	687b      	ldr	r3, [r7, #4]
20001d70:	3301      	adds	r3, #1
20001d72:	607b      	str	r3, [r7, #4]

  request_count = *request++;
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	1c5a      	adds	r2, r3, #1
20001d78:	607a      	str	r2, [r7, #4]
20001d7a:	781b      	ldrb	r3, [r3, #0]
20001d7c:	617b      	str	r3, [r7, #20]

  for (; request_count != 0U; request_count--) {
20001d7e:	e018      	b.n	20001db2 <DAP_Dummy_Transfer+0x52>
    // Process dummy requests
    request_value = *request++;
20001d80:	687b      	ldr	r3, [r7, #4]
20001d82:	1c5a      	adds	r2, r3, #1
20001d84:	607a      	str	r2, [r7, #4]
20001d86:	781b      	ldrb	r3, [r3, #0]
20001d88:	60fb      	str	r3, [r7, #12]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001d8a:	68fb      	ldr	r3, [r7, #12]
20001d8c:	f003 0302 	and.w	r3, r3, #2
20001d90:	2b00      	cmp	r3, #0
20001d92:	d008      	beq.n	20001da6 <DAP_Dummy_Transfer+0x46>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
20001d94:	68fb      	ldr	r3, [r7, #12]
20001d96:	f003 0310 	and.w	r3, r3, #16
20001d9a:	2b00      	cmp	r3, #0
20001d9c:	d006      	beq.n	20001dac <DAP_Dummy_Transfer+0x4c>
        // Read with value match
        request += 4;
20001d9e:	687b      	ldr	r3, [r7, #4]
20001da0:	3304      	adds	r3, #4
20001da2:	607b      	str	r3, [r7, #4]
20001da4:	e002      	b.n	20001dac <DAP_Dummy_Transfer+0x4c>
      }
    } else {
      // Write register
      request += 4;
20001da6:	687b      	ldr	r3, [r7, #4]
20001da8:	3304      	adds	r3, #4
20001daa:	607b      	str	r3, [r7, #4]
  for (; request_count != 0U; request_count--) {
20001dac:	697b      	ldr	r3, [r7, #20]
20001dae:	3b01      	subs	r3, #1
20001db0:	617b      	str	r3, [r7, #20]
20001db2:	697b      	ldr	r3, [r7, #20]
20001db4:	2b00      	cmp	r3, #0
20001db6:	d1e3      	bne.n	20001d80 <DAP_Dummy_Transfer+0x20>
    }
  }

  *(response+0) = 0U;   // Response count
20001db8:	683b      	ldr	r3, [r7, #0]
20001dba:	2200      	movs	r2, #0
20001dbc:	701a      	strb	r2, [r3, #0]
  *(response+1) = 0U;   // Response value
20001dbe:	683b      	ldr	r3, [r7, #0]
20001dc0:	3301      	adds	r3, #1
20001dc2:	2200      	movs	r2, #0
20001dc4:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | 2U);
20001dc6:	687a      	ldr	r2, [r7, #4]
20001dc8:	693b      	ldr	r3, [r7, #16]
20001dca:	1ad3      	subs	r3, r2, r3
20001dcc:	041b      	lsls	r3, r3, #16
20001dce:	f043 0302 	orr.w	r3, r3, #2
}
20001dd2:	4618      	mov	r0, r3
20001dd4:	371c      	adds	r7, #28
20001dd6:	46bd      	mov	sp, r7
20001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ddc:	4770      	bx	lr
	...

20001de0 <DAP_Transfer>:
// Process Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Transfer(const uint8_t *request, uint8_t *response) {
20001de0:	b580      	push	{r7, lr}
20001de2:	b084      	sub	sp, #16
20001de4:	af00      	add	r7, sp, #0
20001de6:	6078      	str	r0, [r7, #4]
20001de8:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
20001dea:	4b0f      	ldr	r3, [pc, #60]	@ (20001e28 <DAP_Transfer+0x48>)
20001dec:	781b      	ldrb	r3, [r3, #0]
20001dee:	2b01      	cmp	r3, #1
20001df0:	d002      	beq.n	20001df8 <DAP_Transfer+0x18>
20001df2:	2b02      	cmp	r3, #2
20001df4:	d006      	beq.n	20001e04 <DAP_Transfer+0x24>
20001df6:	e00b      	b.n	20001e10 <DAP_Transfer+0x30>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      num = DAP_SWD_Transfer(request, response);
20001df8:	6839      	ldr	r1, [r7, #0]
20001dfa:	6878      	ldr	r0, [r7, #4]
20001dfc:	f7ff f99a 	bl	20001134 <DAP_SWD_Transfer>
20001e00:	60f8      	str	r0, [r7, #12]
      break;
20001e02:	e00b      	b.n	20001e1c <DAP_Transfer+0x3c>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_Transfer(request, response);
20001e04:	6839      	ldr	r1, [r7, #0]
20001e06:	6878      	ldr	r0, [r7, #4]
20001e08:	f7ff fcac 	bl	20001764 <DAP_JTAG_Transfer>
20001e0c:	60f8      	str	r0, [r7, #12]
      break;
20001e0e:	e005      	b.n	20001e1c <DAP_Transfer+0x3c>
#endif
    default:
      num = DAP_Dummy_Transfer(request, response);
20001e10:	6839      	ldr	r1, [r7, #0]
20001e12:	6878      	ldr	r0, [r7, #4]
20001e14:	f7ff ffa4 	bl	20001d60 <DAP_Dummy_Transfer>
20001e18:	60f8      	str	r0, [r7, #12]
      break;
20001e1a:	bf00      	nop
  }

  return (num);
20001e1c:	68fb      	ldr	r3, [r7, #12]
}
20001e1e:	4618      	mov	r0, r3
20001e20:	3710      	adds	r7, #16
20001e22:	46bd      	mov	sp, r7
20001e24:	bd80      	pop	{r7, pc}
20001e26:	bf00      	nop
20001e28:	2000da4c 	.word	0x2000da4c

20001e2c <DAP_SWD_TransferBlock>:
// Process SWD Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_SWD != 0)
static uint32_t DAP_SWD_TransferBlock(const uint8_t *request, uint8_t *response) {
20001e2c:	b580      	push	{r7, lr}
20001e2e:	b08a      	sub	sp, #40	@ 0x28
20001e30:	af00      	add	r7, sp, #0
20001e32:	6078      	str	r0, [r7, #4]
20001e34:	6039      	str	r1, [r7, #0]
  uint32_t  response_value;
  uint8_t  *response_head;
  uint32_t  retry;
  uint32_t  data;

  response_count = 0U;
20001e36:	2300      	movs	r3, #0
20001e38:	61fb      	str	r3, [r7, #28]
  response_value = 0U;
20001e3a:	2300      	movs	r3, #0
20001e3c:	61bb      	str	r3, [r7, #24]
  response_head  = response;
20001e3e:	683b      	ldr	r3, [r7, #0]
20001e40:	613b      	str	r3, [r7, #16]
  response      += 3;
20001e42:	683b      	ldr	r3, [r7, #0]
20001e44:	3303      	adds	r3, #3
20001e46:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001e48:	4b7c      	ldr	r3, [pc, #496]	@ (2000203c <DAP_SWD_TransferBlock+0x210>)
20001e4a:	2200      	movs	r2, #0
20001e4c:	701a      	strb	r2, [r3, #0]

  request++;            // Ignore DAP index
20001e4e:	687b      	ldr	r3, [r7, #4]
20001e50:	3301      	adds	r3, #1
20001e52:	607b      	str	r3, [r7, #4]

  request_count = (uint32_t)(*(request+0) << 0) |
20001e54:	687b      	ldr	r3, [r7, #4]
20001e56:	781b      	ldrb	r3, [r3, #0]
20001e58:	461a      	mov	r2, r3
                  (uint32_t)(*(request+1) << 8);
20001e5a:	687b      	ldr	r3, [r7, #4]
20001e5c:	3301      	adds	r3, #1
20001e5e:	781b      	ldrb	r3, [r3, #0]
20001e60:	021b      	lsls	r3, r3, #8
  request_count = (uint32_t)(*(request+0) << 0) |
20001e62:	4313      	orrs	r3, r2
20001e64:	627b      	str	r3, [r7, #36]	@ 0x24
  request += 2;
20001e66:	687b      	ldr	r3, [r7, #4]
20001e68:	3302      	adds	r3, #2
20001e6a:	607b      	str	r3, [r7, #4]
  if (request_count == 0U) {
20001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001e6e:	2b00      	cmp	r3, #0
20001e70:	f000 80c4 	beq.w	20001ffc <DAP_SWD_TransferBlock+0x1d0>
    goto end;
  }

  request_value = *request++;
20001e74:	687b      	ldr	r3, [r7, #4]
20001e76:	1c5a      	adds	r2, r3, #1
20001e78:	607a      	str	r2, [r7, #4]
20001e7a:	781b      	ldrb	r3, [r3, #0]
20001e7c:	623b      	str	r3, [r7, #32]
  if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001e7e:	6a3b      	ldr	r3, [r7, #32]
20001e80:	f003 0302 	and.w	r3, r3, #2
20001e84:	2b00      	cmp	r3, #0
20001e86:	f000 809d 	beq.w	20001fc4 <DAP_SWD_TransferBlock+0x198>
    // Read register block
    if ((request_value & DAP_TRANSFER_APnDP) != 0U) {
20001e8a:	6a3b      	ldr	r3, [r7, #32]
20001e8c:	f003 0301 	and.w	r3, r3, #1
20001e90:	2b00      	cmp	r3, #0
20001e92:	d05d      	beq.n	20001f50 <DAP_SWD_TransferBlock+0x124>
      // Post AP read
      retry = DAP_Data.transfer.retry_count;
20001e94:	4b6a      	ldr	r3, [pc, #424]	@ (20002040 <DAP_SWD_TransferBlock+0x214>)
20001e96:	8a1b      	ldrh	r3, [r3, #16]
20001e98:	617b      	str	r3, [r7, #20]
      do {
        response_value = SWD_Transfer(request_value, NULL);
20001e9a:	2100      	movs	r1, #0
20001e9c:	6a38      	ldr	r0, [r7, #32]
20001e9e:	f002 fcad 	bl	200047fc <SWD_Transfer>
20001ea2:	4603      	mov	r3, r0
20001ea4:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001ea6:	69bb      	ldr	r3, [r7, #24]
20001ea8:	2b02      	cmp	r3, #2
20001eaa:	d109      	bne.n	20001ec0 <DAP_SWD_TransferBlock+0x94>
20001eac:	697b      	ldr	r3, [r7, #20]
20001eae:	1e5a      	subs	r2, r3, #1
20001eb0:	617a      	str	r2, [r7, #20]
20001eb2:	2b00      	cmp	r3, #0
20001eb4:	d004      	beq.n	20001ec0 <DAP_SWD_TransferBlock+0x94>
20001eb6:	4b61      	ldr	r3, [pc, #388]	@ (2000203c <DAP_SWD_TransferBlock+0x210>)
20001eb8:	781b      	ldrb	r3, [r3, #0]
20001eba:	b2db      	uxtb	r3, r3
20001ebc:	2b00      	cmp	r3, #0
20001ebe:	d0ec      	beq.n	20001e9a <DAP_SWD_TransferBlock+0x6e>
      if (response_value != DAP_TRANSFER_OK) {
20001ec0:	69bb      	ldr	r3, [r7, #24]
20001ec2:	2b01      	cmp	r3, #1
20001ec4:	f040 809c 	bne.w	20002000 <DAP_SWD_TransferBlock+0x1d4>
        goto end;
      }
    }
    while (request_count--) {
20001ec8:	e042      	b.n	20001f50 <DAP_SWD_TransferBlock+0x124>
      // Read DP/AP register
      if ((request_count == 0U) && ((request_value & DAP_TRANSFER_APnDP) != 0U)) {
20001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001ecc:	2b00      	cmp	r3, #0
20001ece:	d106      	bne.n	20001ede <DAP_SWD_TransferBlock+0xb2>
20001ed0:	6a3b      	ldr	r3, [r7, #32]
20001ed2:	f003 0301 	and.w	r3, r3, #1
20001ed6:	2b00      	cmp	r3, #0
20001ed8:	d001      	beq.n	20001ede <DAP_SWD_TransferBlock+0xb2>
        // Last AP read
        request_value = DP_RDBUFF | DAP_TRANSFER_RnW;
20001eda:	230e      	movs	r3, #14
20001edc:	623b      	str	r3, [r7, #32]
      }
      retry = DAP_Data.transfer.retry_count;
20001ede:	4b58      	ldr	r3, [pc, #352]	@ (20002040 <DAP_SWD_TransferBlock+0x214>)
20001ee0:	8a1b      	ldrh	r3, [r3, #16]
20001ee2:	617b      	str	r3, [r7, #20]
      do {
        response_value = SWD_Transfer(request_value, &data);
20001ee4:	f107 030c 	add.w	r3, r7, #12
20001ee8:	4619      	mov	r1, r3
20001eea:	6a38      	ldr	r0, [r7, #32]
20001eec:	f002 fc86 	bl	200047fc <SWD_Transfer>
20001ef0:	4603      	mov	r3, r0
20001ef2:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001ef4:	69bb      	ldr	r3, [r7, #24]
20001ef6:	2b02      	cmp	r3, #2
20001ef8:	d109      	bne.n	20001f0e <DAP_SWD_TransferBlock+0xe2>
20001efa:	697b      	ldr	r3, [r7, #20]
20001efc:	1e5a      	subs	r2, r3, #1
20001efe:	617a      	str	r2, [r7, #20]
20001f00:	2b00      	cmp	r3, #0
20001f02:	d004      	beq.n	20001f0e <DAP_SWD_TransferBlock+0xe2>
20001f04:	4b4d      	ldr	r3, [pc, #308]	@ (2000203c <DAP_SWD_TransferBlock+0x210>)
20001f06:	781b      	ldrb	r3, [r3, #0]
20001f08:	b2db      	uxtb	r3, r3
20001f0a:	2b00      	cmp	r3, #0
20001f0c:	d0ea      	beq.n	20001ee4 <DAP_SWD_TransferBlock+0xb8>
      if (response_value != DAP_TRANSFER_OK) {
20001f0e:	69bb      	ldr	r3, [r7, #24]
20001f10:	2b01      	cmp	r3, #1
20001f12:	d177      	bne.n	20002004 <DAP_SWD_TransferBlock+0x1d8>
        goto end;
      }
      // Store data
      *response++ = (uint8_t) data;
20001f14:	68f9      	ldr	r1, [r7, #12]
20001f16:	683b      	ldr	r3, [r7, #0]
20001f18:	1c5a      	adds	r2, r3, #1
20001f1a:	603a      	str	r2, [r7, #0]
20001f1c:	b2ca      	uxtb	r2, r1
20001f1e:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
20001f20:	68fb      	ldr	r3, [r7, #12]
20001f22:	0a19      	lsrs	r1, r3, #8
20001f24:	683b      	ldr	r3, [r7, #0]
20001f26:	1c5a      	adds	r2, r3, #1
20001f28:	603a      	str	r2, [r7, #0]
20001f2a:	b2ca      	uxtb	r2, r1
20001f2c:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
20001f2e:	68fb      	ldr	r3, [r7, #12]
20001f30:	0c19      	lsrs	r1, r3, #16
20001f32:	683b      	ldr	r3, [r7, #0]
20001f34:	1c5a      	adds	r2, r3, #1
20001f36:	603a      	str	r2, [r7, #0]
20001f38:	b2ca      	uxtb	r2, r1
20001f3a:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20001f3c:	68fb      	ldr	r3, [r7, #12]
20001f3e:	0e19      	lsrs	r1, r3, #24
20001f40:	683b      	ldr	r3, [r7, #0]
20001f42:	1c5a      	adds	r2, r3, #1
20001f44:	603a      	str	r2, [r7, #0]
20001f46:	b2ca      	uxtb	r2, r1
20001f48:	701a      	strb	r2, [r3, #0]
      response_count++;
20001f4a:	69fb      	ldr	r3, [r7, #28]
20001f4c:	3301      	adds	r3, #1
20001f4e:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
20001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001f52:	1e5a      	subs	r2, r3, #1
20001f54:	627a      	str	r2, [r7, #36]	@ 0x24
20001f56:	2b00      	cmp	r3, #0
20001f58:	d1b7      	bne.n	20001eca <DAP_SWD_TransferBlock+0x9e>
20001f5a:	e058      	b.n	2000200e <DAP_SWD_TransferBlock+0x1e2>
    }
  } else {
    // Write register block
    while (request_count--) {
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001f5c:	687b      	ldr	r3, [r7, #4]
20001f5e:	781b      	ldrb	r3, [r3, #0]
20001f60:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
20001f62:	687b      	ldr	r3, [r7, #4]
20001f64:	3301      	adds	r3, #1
20001f66:	781b      	ldrb	r3, [r3, #0]
20001f68:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001f6a:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001f6c:	687b      	ldr	r3, [r7, #4]
20001f6e:	3302      	adds	r3, #2
20001f70:	781b      	ldrb	r3, [r3, #0]
20001f72:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
20001f74:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
20001f76:	687b      	ldr	r3, [r7, #4]
20001f78:	3303      	adds	r3, #3
20001f7a:	781b      	ldrb	r3, [r3, #0]
20001f7c:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001f7e:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
20001f80:	60fb      	str	r3, [r7, #12]
      request += 4;
20001f82:	687b      	ldr	r3, [r7, #4]
20001f84:	3304      	adds	r3, #4
20001f86:	607b      	str	r3, [r7, #4]
      // Write DP/AP register
      retry = DAP_Data.transfer.retry_count;
20001f88:	4b2d      	ldr	r3, [pc, #180]	@ (20002040 <DAP_SWD_TransferBlock+0x214>)
20001f8a:	8a1b      	ldrh	r3, [r3, #16]
20001f8c:	617b      	str	r3, [r7, #20]
      do {
        response_value = SWD_Transfer(request_value, &data);
20001f8e:	f107 030c 	add.w	r3, r7, #12
20001f92:	4619      	mov	r1, r3
20001f94:	6a38      	ldr	r0, [r7, #32]
20001f96:	f002 fc31 	bl	200047fc <SWD_Transfer>
20001f9a:	4603      	mov	r3, r0
20001f9c:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001f9e:	69bb      	ldr	r3, [r7, #24]
20001fa0:	2b02      	cmp	r3, #2
20001fa2:	d109      	bne.n	20001fb8 <DAP_SWD_TransferBlock+0x18c>
20001fa4:	697b      	ldr	r3, [r7, #20]
20001fa6:	1e5a      	subs	r2, r3, #1
20001fa8:	617a      	str	r2, [r7, #20]
20001faa:	2b00      	cmp	r3, #0
20001fac:	d004      	beq.n	20001fb8 <DAP_SWD_TransferBlock+0x18c>
20001fae:	4b23      	ldr	r3, [pc, #140]	@ (2000203c <DAP_SWD_TransferBlock+0x210>)
20001fb0:	781b      	ldrb	r3, [r3, #0]
20001fb2:	b2db      	uxtb	r3, r3
20001fb4:	2b00      	cmp	r3, #0
20001fb6:	d0ea      	beq.n	20001f8e <DAP_SWD_TransferBlock+0x162>
      if (response_value != DAP_TRANSFER_OK) {
20001fb8:	69bb      	ldr	r3, [r7, #24]
20001fba:	2b01      	cmp	r3, #1
20001fbc:	d124      	bne.n	20002008 <DAP_SWD_TransferBlock+0x1dc>
        goto end;
      }
      response_count++;
20001fbe:	69fb      	ldr	r3, [r7, #28]
20001fc0:	3301      	adds	r3, #1
20001fc2:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
20001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001fc6:	1e5a      	subs	r2, r3, #1
20001fc8:	627a      	str	r2, [r7, #36]	@ 0x24
20001fca:	2b00      	cmp	r3, #0
20001fcc:	d1c6      	bne.n	20001f5c <DAP_SWD_TransferBlock+0x130>
    }
    // Check last write
    retry = DAP_Data.transfer.retry_count;
20001fce:	4b1c      	ldr	r3, [pc, #112]	@ (20002040 <DAP_SWD_TransferBlock+0x214>)
20001fd0:	8a1b      	ldrh	r3, [r3, #16]
20001fd2:	617b      	str	r3, [r7, #20]
    do {
      response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
20001fd4:	2100      	movs	r1, #0
20001fd6:	200e      	movs	r0, #14
20001fd8:	f002 fc10 	bl	200047fc <SWD_Transfer>
20001fdc:	4603      	mov	r3, r0
20001fde:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001fe0:	69bb      	ldr	r3, [r7, #24]
20001fe2:	2b02      	cmp	r3, #2
20001fe4:	d112      	bne.n	2000200c <DAP_SWD_TransferBlock+0x1e0>
20001fe6:	697b      	ldr	r3, [r7, #20]
20001fe8:	1e5a      	subs	r2, r3, #1
20001fea:	617a      	str	r2, [r7, #20]
20001fec:	2b00      	cmp	r3, #0
20001fee:	d00d      	beq.n	2000200c <DAP_SWD_TransferBlock+0x1e0>
20001ff0:	4b12      	ldr	r3, [pc, #72]	@ (2000203c <DAP_SWD_TransferBlock+0x210>)
20001ff2:	781b      	ldrb	r3, [r3, #0]
20001ff4:	b2db      	uxtb	r3, r3
20001ff6:	2b00      	cmp	r3, #0
20001ff8:	d0ec      	beq.n	20001fd4 <DAP_SWD_TransferBlock+0x1a8>
  }

end:
20001ffa:	e007      	b.n	2000200c <DAP_SWD_TransferBlock+0x1e0>
    goto end;
20001ffc:	bf00      	nop
20001ffe:	e006      	b.n	2000200e <DAP_SWD_TransferBlock+0x1e2>
        goto end;
20002000:	bf00      	nop
20002002:	e004      	b.n	2000200e <DAP_SWD_TransferBlock+0x1e2>
        goto end;
20002004:	bf00      	nop
20002006:	e002      	b.n	2000200e <DAP_SWD_TransferBlock+0x1e2>
        goto end;
20002008:	bf00      	nop
2000200a:	e000      	b.n	2000200e <DAP_SWD_TransferBlock+0x1e2>
end:
2000200c:	bf00      	nop
  *(response_head+0) = (uint8_t)(response_count >> 0);
2000200e:	69fb      	ldr	r3, [r7, #28]
20002010:	b2da      	uxtb	r2, r3
20002012:	693b      	ldr	r3, [r7, #16]
20002014:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)(response_count >> 8);
20002016:	69fb      	ldr	r3, [r7, #28]
20002018:	0a1a      	lsrs	r2, r3, #8
2000201a:	693b      	ldr	r3, [r7, #16]
2000201c:	3301      	adds	r3, #1
2000201e:	b2d2      	uxtb	r2, r2
20002020:	701a      	strb	r2, [r3, #0]
  *(response_head+2) = (uint8_t) response_value;
20002022:	693b      	ldr	r3, [r7, #16]
20002024:	3302      	adds	r3, #2
20002026:	69ba      	ldr	r2, [r7, #24]
20002028:	b2d2      	uxtb	r2, r2
2000202a:	701a      	strb	r2, [r3, #0]

  return ((uint32_t)(response - response_head));
2000202c:	683a      	ldr	r2, [r7, #0]
2000202e:	693b      	ldr	r3, [r7, #16]
20002030:	1ad3      	subs	r3, r2, r3
}
20002032:	4618      	mov	r0, r3
20002034:	3728      	adds	r7, #40	@ 0x28
20002036:	46bd      	mov	sp, r7
20002038:	bd80      	pop	{r7, pc}
2000203a:	bf00      	nop
2000203c:	2000da90 	.word	0x2000da90
20002040:	2000da4c 	.word	0x2000da4c

20002044 <DAP_JTAG_TransferBlock>:
// Process JTAG Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_TransferBlock(const uint8_t *request, uint8_t *response) {
20002044:	b580      	push	{r7, lr}
20002046:	b08a      	sub	sp, #40	@ 0x28
20002048:	af00      	add	r7, sp, #0
2000204a:	6078      	str	r0, [r7, #4]
2000204c:	6039      	str	r1, [r7, #0]
  uint8_t  *response_head;
  uint32_t  retry;
  uint32_t  data;
  uint32_t  ir;

  response_count = 0U;
2000204e:	2300      	movs	r3, #0
20002050:	61fb      	str	r3, [r7, #28]
  response_value = 0U;
20002052:	2300      	movs	r3, #0
20002054:	61bb      	str	r3, [r7, #24]
  response_head  = response;
20002056:	683b      	ldr	r3, [r7, #0]
20002058:	613b      	str	r3, [r7, #16]
  response      += 3;
2000205a:	683b      	ldr	r3, [r7, #0]
2000205c:	3303      	adds	r3, #3
2000205e:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20002060:	4b89      	ldr	r3, [pc, #548]	@ (20002288 <DAP_JTAG_TransferBlock+0x244>)
20002062:	2200      	movs	r2, #0
20002064:	701a      	strb	r2, [r3, #0]

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20002066:	687b      	ldr	r3, [r7, #4]
20002068:	1c5a      	adds	r2, r3, #1
2000206a:	607a      	str	r2, [r7, #4]
2000206c:	781a      	ldrb	r2, [r3, #0]
2000206e:	4b87      	ldr	r3, [pc, #540]	@ (2000228c <DAP_JTAG_TransferBlock+0x248>)
20002070:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20002072:	4b86      	ldr	r3, [pc, #536]	@ (2000228c <DAP_JTAG_TransferBlock+0x248>)
20002074:	7eda      	ldrb	r2, [r3, #27]
20002076:	4b85      	ldr	r3, [pc, #532]	@ (2000228c <DAP_JTAG_TransferBlock+0x248>)
20002078:	7e9b      	ldrb	r3, [r3, #26]
2000207a:	429a      	cmp	r2, r3
2000207c:	f080 80e2 	bcs.w	20002244 <DAP_JTAG_TransferBlock+0x200>
    goto end;
  }

  request_count = (uint32_t)(*(request+0) << 0) |
20002080:	687b      	ldr	r3, [r7, #4]
20002082:	781b      	ldrb	r3, [r3, #0]
20002084:	461a      	mov	r2, r3
                  (uint32_t)(*(request+1) << 8);
20002086:	687b      	ldr	r3, [r7, #4]
20002088:	3301      	adds	r3, #1
2000208a:	781b      	ldrb	r3, [r3, #0]
2000208c:	021b      	lsls	r3, r3, #8
  request_count = (uint32_t)(*(request+0) << 0) |
2000208e:	4313      	orrs	r3, r2
20002090:	627b      	str	r3, [r7, #36]	@ 0x24
  request += 2;
20002092:	687b      	ldr	r3, [r7, #4]
20002094:	3302      	adds	r3, #2
20002096:	607b      	str	r3, [r7, #4]
  if (request_count == 0U) {
20002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000209a:	2b00      	cmp	r3, #0
2000209c:	f000 80d4 	beq.w	20002248 <DAP_JTAG_TransferBlock+0x204>
    goto end;
  }

  request_value = *request++;
200020a0:	687b      	ldr	r3, [r7, #4]
200020a2:	1c5a      	adds	r2, r3, #1
200020a4:	607a      	str	r2, [r7, #4]
200020a6:	781b      	ldrb	r3, [r3, #0]
200020a8:	623b      	str	r3, [r7, #32]

  // Select JTAG chain
  ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
200020aa:	6a3b      	ldr	r3, [r7, #32]
200020ac:	f003 0301 	and.w	r3, r3, #1
200020b0:	2b00      	cmp	r3, #0
200020b2:	d001      	beq.n	200020b8 <DAP_JTAG_TransferBlock+0x74>
200020b4:	230b      	movs	r3, #11
200020b6:	e000      	b.n	200020ba <DAP_JTAG_TransferBlock+0x76>
200020b8:	230a      	movs	r3, #10
200020ba:	60fb      	str	r3, [r7, #12]
  JTAG_IR(ir);
200020bc:	68f8      	ldr	r0, [r7, #12]
200020be:	f001 ff7f 	bl	20003fc0 <JTAG_IR>

  if ((request_value & DAP_TRANSFER_RnW) != 0U) {
200020c2:	6a3b      	ldr	r3, [r7, #32]
200020c4:	f003 0302 	and.w	r3, r3, #2
200020c8:	2b00      	cmp	r3, #0
200020ca:	f000 8099 	beq.w	20002200 <DAP_JTAG_TransferBlock+0x1bc>
    // Post read
    retry = DAP_Data.transfer.retry_count;
200020ce:	4b6f      	ldr	r3, [pc, #444]	@ (2000228c <DAP_JTAG_TransferBlock+0x248>)
200020d0:	8a1b      	ldrh	r3, [r3, #16]
200020d2:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(request_value, NULL);
200020d4:	2100      	movs	r1, #0
200020d6:	6a38      	ldr	r0, [r7, #32]
200020d8:	f001 ff88 	bl	20003fec <JTAG_Transfer>
200020dc:	4603      	mov	r3, r0
200020de:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200020e0:	69bb      	ldr	r3, [r7, #24]
200020e2:	2b02      	cmp	r3, #2
200020e4:	d109      	bne.n	200020fa <DAP_JTAG_TransferBlock+0xb6>
200020e6:	697b      	ldr	r3, [r7, #20]
200020e8:	1e5a      	subs	r2, r3, #1
200020ea:	617a      	str	r2, [r7, #20]
200020ec:	2b00      	cmp	r3, #0
200020ee:	d004      	beq.n	200020fa <DAP_JTAG_TransferBlock+0xb6>
200020f0:	4b65      	ldr	r3, [pc, #404]	@ (20002288 <DAP_JTAG_TransferBlock+0x244>)
200020f2:	781b      	ldrb	r3, [r3, #0]
200020f4:	b2db      	uxtb	r3, r3
200020f6:	2b00      	cmp	r3, #0
200020f8:	d0ec      	beq.n	200020d4 <DAP_JTAG_TransferBlock+0x90>
    if (response_value != DAP_TRANSFER_OK) {
200020fa:	69bb      	ldr	r3, [r7, #24]
200020fc:	2b01      	cmp	r3, #1
200020fe:	f040 80a5 	bne.w	2000224c <DAP_JTAG_TransferBlock+0x208>
      goto end;
    }
    // Read register block
    while (request_count--) {
20002102:	e043      	b.n	2000218c <DAP_JTAG_TransferBlock+0x148>
      // Read DP/AP register
      if (request_count == 0U) {
20002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002106:	2b00      	cmp	r3, #0
20002108:	d107      	bne.n	2000211a <DAP_JTAG_TransferBlock+0xd6>
        // Last read
        if (ir != JTAG_DPACC) {
2000210a:	68fb      	ldr	r3, [r7, #12]
2000210c:	2b0a      	cmp	r3, #10
2000210e:	d002      	beq.n	20002116 <DAP_JTAG_TransferBlock+0xd2>
          JTAG_IR(JTAG_DPACC);
20002110:	200a      	movs	r0, #10
20002112:	f001 ff55 	bl	20003fc0 <JTAG_IR>
        }
        request_value = DP_RDBUFF | DAP_TRANSFER_RnW;
20002116:	230e      	movs	r3, #14
20002118:	623b      	str	r3, [r7, #32]
      }
      retry = DAP_Data.transfer.retry_count;
2000211a:	4b5c      	ldr	r3, [pc, #368]	@ (2000228c <DAP_JTAG_TransferBlock+0x248>)
2000211c:	8a1b      	ldrh	r3, [r3, #16]
2000211e:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
20002120:	f107 0308 	add.w	r3, r7, #8
20002124:	4619      	mov	r1, r3
20002126:	6a38      	ldr	r0, [r7, #32]
20002128:	f001 ff60 	bl	20003fec <JTAG_Transfer>
2000212c:	4603      	mov	r3, r0
2000212e:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20002130:	69bb      	ldr	r3, [r7, #24]
20002132:	2b02      	cmp	r3, #2
20002134:	d109      	bne.n	2000214a <DAP_JTAG_TransferBlock+0x106>
20002136:	697b      	ldr	r3, [r7, #20]
20002138:	1e5a      	subs	r2, r3, #1
2000213a:	617a      	str	r2, [r7, #20]
2000213c:	2b00      	cmp	r3, #0
2000213e:	d004      	beq.n	2000214a <DAP_JTAG_TransferBlock+0x106>
20002140:	4b51      	ldr	r3, [pc, #324]	@ (20002288 <DAP_JTAG_TransferBlock+0x244>)
20002142:	781b      	ldrb	r3, [r3, #0]
20002144:	b2db      	uxtb	r3, r3
20002146:	2b00      	cmp	r3, #0
20002148:	d0ea      	beq.n	20002120 <DAP_JTAG_TransferBlock+0xdc>
      if (response_value != DAP_TRANSFER_OK) {
2000214a:	69bb      	ldr	r3, [r7, #24]
2000214c:	2b01      	cmp	r3, #1
2000214e:	d17f      	bne.n	20002250 <DAP_JTAG_TransferBlock+0x20c>
        goto end;
      }
      // Store data
      *response++ = (uint8_t) data;
20002150:	68b9      	ldr	r1, [r7, #8]
20002152:	683b      	ldr	r3, [r7, #0]
20002154:	1c5a      	adds	r2, r3, #1
20002156:	603a      	str	r2, [r7, #0]
20002158:	b2ca      	uxtb	r2, r1
2000215a:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
2000215c:	68bb      	ldr	r3, [r7, #8]
2000215e:	0a19      	lsrs	r1, r3, #8
20002160:	683b      	ldr	r3, [r7, #0]
20002162:	1c5a      	adds	r2, r3, #1
20002164:	603a      	str	r2, [r7, #0]
20002166:	b2ca      	uxtb	r2, r1
20002168:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
2000216a:	68bb      	ldr	r3, [r7, #8]
2000216c:	0c19      	lsrs	r1, r3, #16
2000216e:	683b      	ldr	r3, [r7, #0]
20002170:	1c5a      	adds	r2, r3, #1
20002172:	603a      	str	r2, [r7, #0]
20002174:	b2ca      	uxtb	r2, r1
20002176:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20002178:	68bb      	ldr	r3, [r7, #8]
2000217a:	0e19      	lsrs	r1, r3, #24
2000217c:	683b      	ldr	r3, [r7, #0]
2000217e:	1c5a      	adds	r2, r3, #1
20002180:	603a      	str	r2, [r7, #0]
20002182:	b2ca      	uxtb	r2, r1
20002184:	701a      	strb	r2, [r3, #0]
      response_count++;
20002186:	69fb      	ldr	r3, [r7, #28]
20002188:	3301      	adds	r3, #1
2000218a:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
2000218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000218e:	1e5a      	subs	r2, r3, #1
20002190:	627a      	str	r2, [r7, #36]	@ 0x24
20002192:	2b00      	cmp	r3, #0
20002194:	d1b6      	bne.n	20002104 <DAP_JTAG_TransferBlock+0xc0>
20002196:	e060      	b.n	2000225a <DAP_JTAG_TransferBlock+0x216>
    }
  } else {
    // Write register block
    while (request_count--) {
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20002198:	687b      	ldr	r3, [r7, #4]
2000219a:	781b      	ldrb	r3, [r3, #0]
2000219c:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000219e:	687b      	ldr	r3, [r7, #4]
200021a0:	3301      	adds	r3, #1
200021a2:	781b      	ldrb	r3, [r3, #0]
200021a4:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
200021a6:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
200021a8:	687b      	ldr	r3, [r7, #4]
200021aa:	3302      	adds	r3, #2
200021ac:	781b      	ldrb	r3, [r3, #0]
200021ae:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
200021b0:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
200021b2:	687b      	ldr	r3, [r7, #4]
200021b4:	3303      	adds	r3, #3
200021b6:	781b      	ldrb	r3, [r3, #0]
200021b8:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
200021ba:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
200021bc:	60bb      	str	r3, [r7, #8]
      request += 4;
200021be:	687b      	ldr	r3, [r7, #4]
200021c0:	3304      	adds	r3, #4
200021c2:	607b      	str	r3, [r7, #4]
      // Write DP/AP register
      retry = DAP_Data.transfer.retry_count;
200021c4:	4b31      	ldr	r3, [pc, #196]	@ (2000228c <DAP_JTAG_TransferBlock+0x248>)
200021c6:	8a1b      	ldrh	r3, [r3, #16]
200021c8:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
200021ca:	f107 0308 	add.w	r3, r7, #8
200021ce:	4619      	mov	r1, r3
200021d0:	6a38      	ldr	r0, [r7, #32]
200021d2:	f001 ff0b 	bl	20003fec <JTAG_Transfer>
200021d6:	4603      	mov	r3, r0
200021d8:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200021da:	69bb      	ldr	r3, [r7, #24]
200021dc:	2b02      	cmp	r3, #2
200021de:	d109      	bne.n	200021f4 <DAP_JTAG_TransferBlock+0x1b0>
200021e0:	697b      	ldr	r3, [r7, #20]
200021e2:	1e5a      	subs	r2, r3, #1
200021e4:	617a      	str	r2, [r7, #20]
200021e6:	2b00      	cmp	r3, #0
200021e8:	d004      	beq.n	200021f4 <DAP_JTAG_TransferBlock+0x1b0>
200021ea:	4b27      	ldr	r3, [pc, #156]	@ (20002288 <DAP_JTAG_TransferBlock+0x244>)
200021ec:	781b      	ldrb	r3, [r3, #0]
200021ee:	b2db      	uxtb	r3, r3
200021f0:	2b00      	cmp	r3, #0
200021f2:	d0ea      	beq.n	200021ca <DAP_JTAG_TransferBlock+0x186>
      if (response_value != DAP_TRANSFER_OK) {
200021f4:	69bb      	ldr	r3, [r7, #24]
200021f6:	2b01      	cmp	r3, #1
200021f8:	d12c      	bne.n	20002254 <DAP_JTAG_TransferBlock+0x210>
        goto end;
      }
      response_count++;
200021fa:	69fb      	ldr	r3, [r7, #28]
200021fc:	3301      	adds	r3, #1
200021fe:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
20002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002202:	1e5a      	subs	r2, r3, #1
20002204:	627a      	str	r2, [r7, #36]	@ 0x24
20002206:	2b00      	cmp	r3, #0
20002208:	d1c6      	bne.n	20002198 <DAP_JTAG_TransferBlock+0x154>
    }
    // Check last write
    if (ir != JTAG_DPACC) {
2000220a:	68fb      	ldr	r3, [r7, #12]
2000220c:	2b0a      	cmp	r3, #10
2000220e:	d002      	beq.n	20002216 <DAP_JTAG_TransferBlock+0x1d2>
      JTAG_IR(JTAG_DPACC);
20002210:	200a      	movs	r0, #10
20002212:	f001 fed5 	bl	20003fc0 <JTAG_IR>
    }
    retry = DAP_Data.transfer.retry_count;
20002216:	4b1d      	ldr	r3, [pc, #116]	@ (2000228c <DAP_JTAG_TransferBlock+0x248>)
20002218:	8a1b      	ldrh	r3, [r3, #16]
2000221a:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
2000221c:	2100      	movs	r1, #0
2000221e:	200e      	movs	r0, #14
20002220:	f001 fee4 	bl	20003fec <JTAG_Transfer>
20002224:	4603      	mov	r3, r0
20002226:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20002228:	69bb      	ldr	r3, [r7, #24]
2000222a:	2b02      	cmp	r3, #2
2000222c:	d114      	bne.n	20002258 <DAP_JTAG_TransferBlock+0x214>
2000222e:	697b      	ldr	r3, [r7, #20]
20002230:	1e5a      	subs	r2, r3, #1
20002232:	617a      	str	r2, [r7, #20]
20002234:	2b00      	cmp	r3, #0
20002236:	d00f      	beq.n	20002258 <DAP_JTAG_TransferBlock+0x214>
20002238:	4b13      	ldr	r3, [pc, #76]	@ (20002288 <DAP_JTAG_TransferBlock+0x244>)
2000223a:	781b      	ldrb	r3, [r3, #0]
2000223c:	b2db      	uxtb	r3, r3
2000223e:	2b00      	cmp	r3, #0
20002240:	d0ec      	beq.n	2000221c <DAP_JTAG_TransferBlock+0x1d8>
  }

end:
20002242:	e009      	b.n	20002258 <DAP_JTAG_TransferBlock+0x214>
    goto end;
20002244:	bf00      	nop
20002246:	e008      	b.n	2000225a <DAP_JTAG_TransferBlock+0x216>
    goto end;
20002248:	bf00      	nop
2000224a:	e006      	b.n	2000225a <DAP_JTAG_TransferBlock+0x216>
      goto end;
2000224c:	bf00      	nop
2000224e:	e004      	b.n	2000225a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20002250:	bf00      	nop
20002252:	e002      	b.n	2000225a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20002254:	bf00      	nop
20002256:	e000      	b.n	2000225a <DAP_JTAG_TransferBlock+0x216>
end:
20002258:	bf00      	nop
  *(response_head+0) = (uint8_t)(response_count >> 0);
2000225a:	69fb      	ldr	r3, [r7, #28]
2000225c:	b2da      	uxtb	r2, r3
2000225e:	693b      	ldr	r3, [r7, #16]
20002260:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)(response_count >> 8);
20002262:	69fb      	ldr	r3, [r7, #28]
20002264:	0a1a      	lsrs	r2, r3, #8
20002266:	693b      	ldr	r3, [r7, #16]
20002268:	3301      	adds	r3, #1
2000226a:	b2d2      	uxtb	r2, r2
2000226c:	701a      	strb	r2, [r3, #0]
  *(response_head+2) = (uint8_t) response_value;
2000226e:	693b      	ldr	r3, [r7, #16]
20002270:	3302      	adds	r3, #2
20002272:	69ba      	ldr	r2, [r7, #24]
20002274:	b2d2      	uxtb	r2, r2
20002276:	701a      	strb	r2, [r3, #0]

  return ((uint32_t)(response - response_head));
20002278:	683a      	ldr	r2, [r7, #0]
2000227a:	693b      	ldr	r3, [r7, #16]
2000227c:	1ad3      	subs	r3, r2, r3
}
2000227e:	4618      	mov	r0, r3
20002280:	3728      	adds	r7, #40	@ 0x28
20002282:	46bd      	mov	sp, r7
20002284:	bd80      	pop	{r7, pc}
20002286:	bf00      	nop
20002288:	2000da90 	.word	0x2000da90
2000228c:	2000da4c 	.word	0x2000da4c

20002290 <DAP_TransferBlock>:
// Process Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferBlock(const uint8_t *request, uint8_t *response) {
20002290:	b580      	push	{r7, lr}
20002292:	b084      	sub	sp, #16
20002294:	af00      	add	r7, sp, #0
20002296:	6078      	str	r0, [r7, #4]
20002298:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
2000229a:	4b20      	ldr	r3, [pc, #128]	@ (2000231c <DAP_TransferBlock+0x8c>)
2000229c:	781b      	ldrb	r3, [r3, #0]
2000229e:	2b01      	cmp	r3, #1
200022a0:	d002      	beq.n	200022a8 <DAP_TransferBlock+0x18>
200022a2:	2b02      	cmp	r3, #2
200022a4:	d006      	beq.n	200022b4 <DAP_TransferBlock+0x24>
200022a6:	e00b      	b.n	200022c0 <DAP_TransferBlock+0x30>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      num = DAP_SWD_TransferBlock (request, response);
200022a8:	6839      	ldr	r1, [r7, #0]
200022aa:	6878      	ldr	r0, [r7, #4]
200022ac:	f7ff fdbe 	bl	20001e2c <DAP_SWD_TransferBlock>
200022b0:	60f8      	str	r0, [r7, #12]
      break;
200022b2:	e013      	b.n	200022dc <DAP_TransferBlock+0x4c>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_TransferBlock(request, response);
200022b4:	6839      	ldr	r1, [r7, #0]
200022b6:	6878      	ldr	r0, [r7, #4]
200022b8:	f7ff fec4 	bl	20002044 <DAP_JTAG_TransferBlock>
200022bc:	60f8      	str	r0, [r7, #12]
      break;
200022be:	e00d      	b.n	200022dc <DAP_TransferBlock+0x4c>
#endif
    default:
      *(response+0) = 0U;       // Response count [7:0]
200022c0:	683b      	ldr	r3, [r7, #0]
200022c2:	2200      	movs	r2, #0
200022c4:	701a      	strb	r2, [r3, #0]
      *(response+1) = 0U;       // Response count[15:8]
200022c6:	683b      	ldr	r3, [r7, #0]
200022c8:	3301      	adds	r3, #1
200022ca:	2200      	movs	r2, #0
200022cc:	701a      	strb	r2, [r3, #0]
      *(response+2) = 0U;       // Response value
200022ce:	683b      	ldr	r3, [r7, #0]
200022d0:	3302      	adds	r3, #2
200022d2:	2200      	movs	r2, #0
200022d4:	701a      	strb	r2, [r3, #0]
      num = 3U;
200022d6:	2303      	movs	r3, #3
200022d8:	60fb      	str	r3, [r7, #12]
      break;
200022da:	bf00      	nop
  }

  if ((*(request+3) & DAP_TRANSFER_RnW) != 0U) {
200022dc:	687b      	ldr	r3, [r7, #4]
200022de:	3303      	adds	r3, #3
200022e0:	781b      	ldrb	r3, [r3, #0]
200022e2:	f003 0302 	and.w	r3, r3, #2
200022e6:	2b00      	cmp	r3, #0
200022e8:	d004      	beq.n	200022f4 <DAP_TransferBlock+0x64>
    // Read register block
    num |=  4U << 16;
200022ea:	68fb      	ldr	r3, [r7, #12]
200022ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200022f0:	60fb      	str	r3, [r7, #12]
200022f2:	e00e      	b.n	20002312 <DAP_TransferBlock+0x82>
  } else {
    // Write register block
    num |= (4U + (((uint32_t)(*(request+1)) | (uint32_t)(*(request+2) << 8)) * 4)) << 16;
200022f4:	687b      	ldr	r3, [r7, #4]
200022f6:	3301      	adds	r3, #1
200022f8:	781b      	ldrb	r3, [r3, #0]
200022fa:	461a      	mov	r2, r3
200022fc:	687b      	ldr	r3, [r7, #4]
200022fe:	3302      	adds	r3, #2
20002300:	781b      	ldrb	r3, [r3, #0]
20002302:	021b      	lsls	r3, r3, #8
20002304:	4313      	orrs	r3, r2
20002306:	3301      	adds	r3, #1
20002308:	009b      	lsls	r3, r3, #2
2000230a:	041b      	lsls	r3, r3, #16
2000230c:	68fa      	ldr	r2, [r7, #12]
2000230e:	4313      	orrs	r3, r2
20002310:	60fb      	str	r3, [r7, #12]
  }

  return (num);
20002312:	68fb      	ldr	r3, [r7, #12]
}
20002314:	4618      	mov	r0, r3
20002316:	3710      	adds	r7, #16
20002318:	46bd      	mov	sp, r7
2000231a:	bd80      	pop	{r7, pc}
2000231c:	2000da4c 	.word	0x2000da4c

20002320 <DAP_SWD_WriteAbort>:
// Process SWD Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_SWD != 0)
static uint32_t DAP_SWD_WriteAbort(const uint8_t *request, uint8_t *response) {
20002320:	b580      	push	{r7, lr}
20002322:	b084      	sub	sp, #16
20002324:	af00      	add	r7, sp, #0
20002326:	6078      	str	r0, [r7, #4]
20002328:	6039      	str	r1, [r7, #0]
  uint32_t data;

  // Load data (Ignore DAP index)
  data = (uint32_t)(*(request+1) <<  0) |
2000232a:	687b      	ldr	r3, [r7, #4]
2000232c:	3301      	adds	r3, #1
2000232e:	781b      	ldrb	r3, [r3, #0]
20002330:	461a      	mov	r2, r3
         (uint32_t)(*(request+2) <<  8) |
20002332:	687b      	ldr	r3, [r7, #4]
20002334:	3302      	adds	r3, #2
20002336:	781b      	ldrb	r3, [r3, #0]
20002338:	021b      	lsls	r3, r3, #8
  data = (uint32_t)(*(request+1) <<  0) |
2000233a:	431a      	orrs	r2, r3
         (uint32_t)(*(request+3) << 16) |
2000233c:	687b      	ldr	r3, [r7, #4]
2000233e:	3303      	adds	r3, #3
20002340:	781b      	ldrb	r3, [r3, #0]
20002342:	041b      	lsls	r3, r3, #16
         (uint32_t)(*(request+2) <<  8) |
20002344:	431a      	orrs	r2, r3
         (uint32_t)(*(request+4) << 24);
20002346:	687b      	ldr	r3, [r7, #4]
20002348:	3304      	adds	r3, #4
2000234a:	781b      	ldrb	r3, [r3, #0]
2000234c:	061b      	lsls	r3, r3, #24
         (uint32_t)(*(request+3) << 16) |
2000234e:	4313      	orrs	r3, r2
  data = (uint32_t)(*(request+1) <<  0) |
20002350:	60fb      	str	r3, [r7, #12]

  // Write Abort register
  SWD_Transfer(DP_ABORT, &data);
20002352:	f107 030c 	add.w	r3, r7, #12
20002356:	4619      	mov	r1, r3
20002358:	2000      	movs	r0, #0
2000235a:	f002 fa4f 	bl	200047fc <SWD_Transfer>

  *response = DAP_OK;
2000235e:	683b      	ldr	r3, [r7, #0]
20002360:	2200      	movs	r2, #0
20002362:	701a      	strb	r2, [r3, #0]
  return (1U);
20002364:	2301      	movs	r3, #1
}
20002366:	4618      	mov	r0, r3
20002368:	3710      	adds	r7, #16
2000236a:	46bd      	mov	sp, r7
2000236c:	bd80      	pop	{r7, pc}
	...

20002370 <DAP_JTAG_WriteAbort>:
// Process JTAG Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_WriteAbort(const uint8_t *request, uint8_t *response) {
20002370:	b580      	push	{r7, lr}
20002372:	b084      	sub	sp, #16
20002374:	af00      	add	r7, sp, #0
20002376:	6078      	str	r0, [r7, #4]
20002378:	6039      	str	r1, [r7, #0]
  uint32_t data;

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
2000237a:	687b      	ldr	r3, [r7, #4]
2000237c:	781a      	ldrb	r2, [r3, #0]
2000237e:	4b17      	ldr	r3, [pc, #92]	@ (200023dc <DAP_JTAG_WriteAbort+0x6c>)
20002380:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20002382:	4b16      	ldr	r3, [pc, #88]	@ (200023dc <DAP_JTAG_WriteAbort+0x6c>)
20002384:	7eda      	ldrb	r2, [r3, #27]
20002386:	4b15      	ldr	r3, [pc, #84]	@ (200023dc <DAP_JTAG_WriteAbort+0x6c>)
20002388:	7e9b      	ldrb	r3, [r3, #26]
2000238a:	429a      	cmp	r2, r3
2000238c:	d304      	bcc.n	20002398 <DAP_JTAG_WriteAbort+0x28>
    *response = DAP_ERROR;
2000238e:	683b      	ldr	r3, [r7, #0]
20002390:	22ff      	movs	r2, #255	@ 0xff
20002392:	701a      	strb	r2, [r3, #0]
    return (1U);
20002394:	2301      	movs	r3, #1
20002396:	e01d      	b.n	200023d4 <DAP_JTAG_WriteAbort+0x64>
  }

  // Select JTAG chain
  JTAG_IR(JTAG_ABORT);
20002398:	2008      	movs	r0, #8
2000239a:	f001 fe11 	bl	20003fc0 <JTAG_IR>

  // Load data
  data = (uint32_t)(*(request+1) <<  0) |
2000239e:	687b      	ldr	r3, [r7, #4]
200023a0:	3301      	adds	r3, #1
200023a2:	781b      	ldrb	r3, [r3, #0]
200023a4:	461a      	mov	r2, r3
         (uint32_t)(*(request+2) <<  8) |
200023a6:	687b      	ldr	r3, [r7, #4]
200023a8:	3302      	adds	r3, #2
200023aa:	781b      	ldrb	r3, [r3, #0]
200023ac:	021b      	lsls	r3, r3, #8
  data = (uint32_t)(*(request+1) <<  0) |
200023ae:	431a      	orrs	r2, r3
         (uint32_t)(*(request+3) << 16) |
200023b0:	687b      	ldr	r3, [r7, #4]
200023b2:	3303      	adds	r3, #3
200023b4:	781b      	ldrb	r3, [r3, #0]
200023b6:	041b      	lsls	r3, r3, #16
         (uint32_t)(*(request+2) <<  8) |
200023b8:	431a      	orrs	r2, r3
         (uint32_t)(*(request+4) << 24);
200023ba:	687b      	ldr	r3, [r7, #4]
200023bc:	3304      	adds	r3, #4
200023be:	781b      	ldrb	r3, [r3, #0]
200023c0:	061b      	lsls	r3, r3, #24
  data = (uint32_t)(*(request+1) <<  0) |
200023c2:	4313      	orrs	r3, r2
200023c4:	60fb      	str	r3, [r7, #12]

  // Write Abort register
  JTAG_WriteAbort(data);
200023c6:	68f8      	ldr	r0, [r7, #12]
200023c8:	f001 fc92 	bl	20003cf0 <JTAG_WriteAbort>

  *response = DAP_OK;
200023cc:	683b      	ldr	r3, [r7, #0]
200023ce:	2200      	movs	r2, #0
200023d0:	701a      	strb	r2, [r3, #0]
  return (1U);
200023d2:	2301      	movs	r3, #1
}
200023d4:	4618      	mov	r0, r3
200023d6:	3710      	adds	r7, #16
200023d8:	46bd      	mov	sp, r7
200023da:	bd80      	pop	{r7, pc}
200023dc:	2000da4c 	.word	0x2000da4c

200023e0 <DAP_WriteAbort>:
// Process Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_WriteAbort(const uint8_t *request, uint8_t *response) {
200023e0:	b580      	push	{r7, lr}
200023e2:	b084      	sub	sp, #16
200023e4:	af00      	add	r7, sp, #0
200023e6:	6078      	str	r0, [r7, #4]
200023e8:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
200023ea:	4b10      	ldr	r3, [pc, #64]	@ (2000242c <DAP_WriteAbort+0x4c>)
200023ec:	781b      	ldrb	r3, [r3, #0]
200023ee:	2b01      	cmp	r3, #1
200023f0:	d002      	beq.n	200023f8 <DAP_WriteAbort+0x18>
200023f2:	2b02      	cmp	r3, #2
200023f4:	d006      	beq.n	20002404 <DAP_WriteAbort+0x24>
200023f6:	e00b      	b.n	20002410 <DAP_WriteAbort+0x30>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      num = DAP_SWD_WriteAbort (request, response);
200023f8:	6839      	ldr	r1, [r7, #0]
200023fa:	6878      	ldr	r0, [r7, #4]
200023fc:	f7ff ff90 	bl	20002320 <DAP_SWD_WriteAbort>
20002400:	60f8      	str	r0, [r7, #12]
      break;
20002402:	e00b      	b.n	2000241c <DAP_WriteAbort+0x3c>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_WriteAbort(request, response);
20002404:	6839      	ldr	r1, [r7, #0]
20002406:	6878      	ldr	r0, [r7, #4]
20002408:	f7ff ffb2 	bl	20002370 <DAP_JTAG_WriteAbort>
2000240c:	60f8      	str	r0, [r7, #12]
      break;
2000240e:	e005      	b.n	2000241c <DAP_WriteAbort+0x3c>
#endif
    default:
      *response = DAP_ERROR;
20002410:	683b      	ldr	r3, [r7, #0]
20002412:	22ff      	movs	r2, #255	@ 0xff
20002414:	701a      	strb	r2, [r3, #0]
      num = 1U;
20002416:	2301      	movs	r3, #1
20002418:	60fb      	str	r3, [r7, #12]
      break;
2000241a:	bf00      	nop
  }
  return ((5U << 16) | num);
2000241c:	68fb      	ldr	r3, [r7, #12]
2000241e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
}
20002422:	4618      	mov	r0, r3
20002424:	3710      	adds	r7, #16
20002426:	46bd      	mov	sp, r7
20002428:	bd80      	pop	{r7, pc}
2000242a:	bf00      	nop
2000242c:	2000da4c 	.word	0x2000da4c

20002430 <DAP_ProcessCommand>:
// Process DAP command request and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
uint32_t DAP_ProcessCommand(const uint8_t *request, uint8_t *response) {
20002430:	b580      	push	{r7, lr}
20002432:	b084      	sub	sp, #16
20002434:	af00      	add	r7, sp, #0
20002436:	6078      	str	r0, [r7, #4]
20002438:	6039      	str	r1, [r7, #0]
  uint32_t num;

  if ((*request >= ID_DAP_Vendor0) && (*request <= ID_DAP_Vendor31)) {
2000243a:	687b      	ldr	r3, [r7, #4]
2000243c:	781b      	ldrb	r3, [r3, #0]
2000243e:	b25b      	sxtb	r3, r3
20002440:	2b00      	cmp	r3, #0
20002442:	da09      	bge.n	20002458 <DAP_ProcessCommand+0x28>
20002444:	687b      	ldr	r3, [r7, #4]
20002446:	781b      	ldrb	r3, [r3, #0]
20002448:	2b9f      	cmp	r3, #159	@ 0x9f
2000244a:	d805      	bhi.n	20002458 <DAP_ProcessCommand+0x28>
    return DAP_ProcessVendorCommand(request, response);
2000244c:	6839      	ldr	r1, [r7, #0]
2000244e:	6878      	ldr	r0, [r7, #4]
20002450:	f000 f8d2 	bl	200025f8 <DAP_ProcessVendorCommand>
20002454:	4603      	mov	r3, r0
20002456:	e0cb      	b.n	200025f0 <DAP_ProcessCommand+0x1c0>
  }

  *response++ = *request;
20002458:	683b      	ldr	r3, [r7, #0]
2000245a:	1c5a      	adds	r2, r3, #1
2000245c:	603a      	str	r2, [r7, #0]
2000245e:	687a      	ldr	r2, [r7, #4]
20002460:	7812      	ldrb	r2, [r2, #0]
20002462:	701a      	strb	r2, [r3, #0]

  switch (*request++) {
20002464:	687b      	ldr	r3, [r7, #4]
20002466:	1c5a      	adds	r2, r3, #1
20002468:	607a      	str	r2, [r7, #4]
2000246a:	781b      	ldrb	r3, [r3, #0]
2000246c:	2b1d      	cmp	r3, #29
2000246e:	f200 80b5 	bhi.w	200025dc <DAP_ProcessCommand+0x1ac>
20002472:	a201      	add	r2, pc, #4	@ (adr r2, 20002478 <DAP_ProcessCommand+0x48>)
20002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002478:	200024f1 	.word	0x200024f1
2000247c:	20002515 	.word	0x20002515
20002480:	20002521 	.word	0x20002521
20002484:	2000252d 	.word	0x2000252d
20002488:	200025ad 	.word	0x200025ad
2000248c:	200025b9 	.word	0x200025b9
20002490:	200025c5 	.word	0x200025c5
20002494:	200025dd 	.word	0x200025dd
20002498:	200025d1 	.word	0x200025d1
2000249c:	20002537 	.word	0x20002537
200024a0:	20002543 	.word	0x20002543
200024a4:	200025dd 	.word	0x200025dd
200024a8:	200025dd 	.word	0x200025dd
200024ac:	200025dd 	.word	0x200025dd
200024b0:	200025dd 	.word	0x200025dd
200024b4:	200025dd 	.word	0x200025dd
200024b8:	2000254d 	.word	0x2000254d
200024bc:	20002559 	.word	0x20002559
200024c0:	20002565 	.word	0x20002565
200024c4:	20002571 	.word	0x20002571
200024c8:	20002589 	.word	0x20002589
200024cc:	20002595 	.word	0x20002595
200024d0:	200025a1 	.word	0x200025a1
200024d4:	200025dd 	.word	0x200025dd
200024d8:	200025dd 	.word	0x200025dd
200024dc:	200025dd 	.word	0x200025dd
200024e0:	200025dd 	.word	0x200025dd
200024e4:	200025dd 	.word	0x200025dd
200024e8:	200025dd 	.word	0x200025dd
200024ec:	2000257d 	.word	0x2000257d
    case ID_DAP_Info:
      num = DAP_Info(*request, response+1);
200024f0:	687b      	ldr	r3, [r7, #4]
200024f2:	781a      	ldrb	r2, [r3, #0]
200024f4:	683b      	ldr	r3, [r7, #0]
200024f6:	3301      	adds	r3, #1
200024f8:	4619      	mov	r1, r3
200024fa:	4610      	mov	r0, r2
200024fc:	f7fe f966 	bl	200007cc <DAP_Info>
20002500:	4603      	mov	r3, r0
20002502:	60fb      	str	r3, [r7, #12]
      *response = (uint8_t)num;
20002504:	68fb      	ldr	r3, [r7, #12]
20002506:	b2da      	uxtb	r2, r3
20002508:	683b      	ldr	r3, [r7, #0]
2000250a:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) + 2U + num);
2000250c:	68fb      	ldr	r3, [r7, #12]
2000250e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
20002512:	e06d      	b.n	200025f0 <DAP_ProcessCommand+0x1c0>

    case ID_DAP_HostStatus:
      num = DAP_HostStatus(request, response);
20002514:	6839      	ldr	r1, [r7, #0]
20002516:	6878      	ldr	r0, [r7, #4]
20002518:	f7fe fa58 	bl	200009cc <DAP_HostStatus>
2000251c:	60f8      	str	r0, [r7, #12]
      break;
2000251e:	e064      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Connect:
      num = DAP_Connect(request, response);
20002520:	6839      	ldr	r1, [r7, #0]
20002522:	6878      	ldr	r0, [r7, #4]
20002524:	f7fe fa80 	bl	20000a28 <DAP_Connect>
20002528:	60f8      	str	r0, [r7, #12]
      break;
2000252a:	e05e      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Disconnect:
      num = DAP_Disconnect(response);
2000252c:	6838      	ldr	r0, [r7, #0]
2000252e:	f7fe fb23 	bl	20000b78 <DAP_Disconnect>
20002532:	60f8      	str	r0, [r7, #12]
      break;
20002534:	e059      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Delay:
      num = DAP_Delay(request, response);
20002536:	6839      	ldr	r1, [r7, #0]
20002538:	6878      	ldr	r0, [r7, #4]
2000253a:	f7fe fa1f 	bl	2000097c <DAP_Delay>
2000253e:	60f8      	str	r0, [r7, #12]
      break;
20002540:	e053      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_ResetTarget:
      num = DAP_ResetTarget(response);
20002542:	6838      	ldr	r0, [r7, #0]
20002544:	f7fe fb2c 	bl	20000ba0 <DAP_ResetTarget>
20002548:	60f8      	str	r0, [r7, #12]
      break;
2000254a:	e04e      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWJ_Pins:
      num = DAP_SWJ_Pins(request, response);
2000254c:	6839      	ldr	r1, [r7, #0]
2000254e:	6878      	ldr	r0, [r7, #4]
20002550:	f7fe fb38 	bl	20000bc4 <DAP_SWJ_Pins>
20002554:	60f8      	str	r0, [r7, #12]
      break;
20002556:	e048      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Clock:
      num = DAP_SWJ_Clock(request, response);
20002558:	6839      	ldr	r1, [r7, #0]
2000255a:	6878      	ldr	r0, [r7, #4]
2000255c:	f7fe fc16 	bl	20000d8c <DAP_SWJ_Clock>
20002560:	60f8      	str	r0, [r7, #12]
      break;
20002562:	e042      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Sequence:
      num = DAP_SWJ_Sequence(request, response);
20002564:	6839      	ldr	r1, [r7, #0]
20002566:	6878      	ldr	r0, [r7, #4]
20002568:	f7fe fc3e 	bl	20000de8 <DAP_SWJ_Sequence>
2000256c:	60f8      	str	r0, [r7, #12]
      break;
2000256e:	e03c      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWD_Configure:
      num = DAP_SWD_Configure(request, response);
20002570:	6839      	ldr	r1, [r7, #0]
20002572:	6878      	ldr	r0, [r7, #4]
20002574:	f7fe fc5c 	bl	20000e30 <DAP_SWD_Configure>
20002578:	60f8      	str	r0, [r7, #12]
      break;
2000257a:	e036      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWD_Sequence:
      num = DAP_SWD_Sequence(request, response);
2000257c:	6839      	ldr	r1, [r7, #0]
2000257e:	6878      	ldr	r0, [r7, #4]
20002580:	f7fe fc7c 	bl	20000e7c <DAP_SWD_Sequence>
20002584:	60f8      	str	r0, [r7, #12]
      break;
20002586:	e030      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_JTAG_Sequence:
      num = DAP_JTAG_Sequence(request, response);
20002588:	6839      	ldr	r1, [r7, #0]
2000258a:	6878      	ldr	r0, [r7, #4]
2000258c:	f7fe fcd7 	bl	20000f3e <DAP_JTAG_Sequence>
20002590:	60f8      	str	r0, [r7, #12]
      break;
20002592:	e02a      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_Configure:
      num = DAP_JTAG_Configure(request, response);
20002594:	6839      	ldr	r1, [r7, #0]
20002596:	6878      	ldr	r0, [r7, #4]
20002598:	f7fe fcf4 	bl	20000f84 <DAP_JTAG_Configure>
2000259c:	60f8      	str	r0, [r7, #12]
      break;
2000259e:	e024      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_IDCODE:
      num = DAP_JTAG_IDCode(request, response);
200025a0:	6839      	ldr	r1, [r7, #0]
200025a2:	6878      	ldr	r0, [r7, #4]
200025a4:	f7fe fd4e 	bl	20001044 <DAP_JTAG_IDCode>
200025a8:	60f8      	str	r0, [r7, #12]
      break;
200025aa:	e01e      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_TransferConfigure:
      num = DAP_TransferConfigure(request, response);
200025ac:	6839      	ldr	r1, [r7, #0]
200025ae:	6878      	ldr	r0, [r7, #4]
200025b0:	f7fe fd8e 	bl	200010d0 <DAP_TransferConfigure>
200025b4:	60f8      	str	r0, [r7, #12]
      break;
200025b6:	e018      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Transfer:
      num = DAP_Transfer(request, response);
200025b8:	6839      	ldr	r1, [r7, #0]
200025ba:	6878      	ldr	r0, [r7, #4]
200025bc:	f7ff fc10 	bl	20001de0 <DAP_Transfer>
200025c0:	60f8      	str	r0, [r7, #12]
      break;
200025c2:	e012      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_TransferBlock:
      num = DAP_TransferBlock(request, response);
200025c4:	6839      	ldr	r1, [r7, #0]
200025c6:	6878      	ldr	r0, [r7, #4]
200025c8:	f7ff fe62 	bl	20002290 <DAP_TransferBlock>
200025cc:	60f8      	str	r0, [r7, #12]
      break;
200025ce:	e00c      	b.n	200025ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_WriteABORT:
      num = DAP_WriteAbort(request, response);
200025d0:	6839      	ldr	r1, [r7, #0]
200025d2:	6878      	ldr	r0, [r7, #4]
200025d4:	f7ff ff04 	bl	200023e0 <DAP_WriteAbort>
200025d8:	60f8      	str	r0, [r7, #12]
      break;
200025da:	e006      	b.n	200025ea <DAP_ProcessCommand+0x1ba>
      num = UART_Transfer(request, response);
      break;
#endif

    default:
      *(response-1) = ID_DAP_Invalid;
200025dc:	683b      	ldr	r3, [r7, #0]
200025de:	3b01      	subs	r3, #1
200025e0:	22ff      	movs	r2, #255	@ 0xff
200025e2:	701a      	strb	r2, [r3, #0]
      return ((1U << 16) | 1U);
200025e4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
200025e8:	e002      	b.n	200025f0 <DAP_ProcessCommand+0x1c0>
  }

  return ((1U << 16) + 1U + num);
200025ea:	68fb      	ldr	r3, [r7, #12]
200025ec:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
}
200025f0:	4618      	mov	r0, r3
200025f2:	3710      	adds	r7, #16
200025f4:	46bd      	mov	sp, r7
200025f6:	bd80      	pop	{r7, pc}

200025f8 <DAP_ProcessVendorCommand>:
\param request   pointer to request data
\param response  pointer to response data
\return          number of bytes in response (lower 16 bits)
                 number of bytes in request (upper 16 bits)
*/
uint32_t DAP_ProcessVendorCommand(const uint8_t *request, uint8_t *response) {
200025f8:	b480      	push	{r7}
200025fa:	b085      	sub	sp, #20
200025fc:	af00      	add	r7, sp, #0
200025fe:	6078      	str	r0, [r7, #4]
20002600:	6039      	str	r1, [r7, #0]
  uint32_t num = (1U << 16) | 1U;
20002602:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
20002606:	60fb      	str	r3, [r7, #12]

  *response++ = *request;        // copy Command ID
20002608:	683b      	ldr	r3, [r7, #0]
2000260a:	1c5a      	adds	r2, r3, #1
2000260c:	603a      	str	r2, [r7, #0]
2000260e:	687a      	ldr	r2, [r7, #4]
20002610:	7812      	ldrb	r2, [r2, #0]
20002612:	701a      	strb	r2, [r3, #0]

  switch (*request++) {          // first byte in request is Command ID
20002614:	687b      	ldr	r3, [r7, #4]
20002616:	1c5a      	adds	r2, r3, #1
20002618:	607a      	str	r2, [r7, #4]
2000261a:	781b      	ldrb	r3, [r3, #0]
2000261c:	3b80      	subs	r3, #128	@ 0x80
2000261e:	2b1f      	cmp	r3, #31
20002620:	d842      	bhi.n	200026a8 <DAP_ProcessVendorCommand+0xb0>
20002622:	a201      	add	r2, pc, #4	@ (adr r2, 20002628 <DAP_ProcessVendorCommand+0x30>)
20002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002628:	200026a9 	.word	0x200026a9
2000262c:	200026a9 	.word	0x200026a9
20002630:	200026a9 	.word	0x200026a9
20002634:	200026a9 	.word	0x200026a9
20002638:	200026a9 	.word	0x200026a9
2000263c:	200026a9 	.word	0x200026a9
20002640:	200026a9 	.word	0x200026a9
20002644:	200026a9 	.word	0x200026a9
20002648:	200026a9 	.word	0x200026a9
2000264c:	200026a9 	.word	0x200026a9
20002650:	200026a9 	.word	0x200026a9
20002654:	200026a9 	.word	0x200026a9
20002658:	200026a9 	.word	0x200026a9
2000265c:	200026a9 	.word	0x200026a9
20002660:	200026a9 	.word	0x200026a9
20002664:	200026a9 	.word	0x200026a9
20002668:	200026a9 	.word	0x200026a9
2000266c:	200026a9 	.word	0x200026a9
20002670:	200026a9 	.word	0x200026a9
20002674:	200026a9 	.word	0x200026a9
20002678:	200026a9 	.word	0x200026a9
2000267c:	200026a9 	.word	0x200026a9
20002680:	200026a9 	.word	0x200026a9
20002684:	200026a9 	.word	0x200026a9
20002688:	200026a9 	.word	0x200026a9
2000268c:	200026a9 	.word	0x200026a9
20002690:	200026a9 	.word	0x200026a9
20002694:	200026a9 	.word	0x200026a9
20002698:	200026a9 	.word	0x200026a9
2000269c:	200026a9 	.word	0x200026a9
200026a0:	200026a9 	.word	0x200026a9
200026a4:	200026a9 	.word	0x200026a9
    case ID_DAP_Vendor29: break;
    case ID_DAP_Vendor30: break;
    case ID_DAP_Vendor31: break;
  }

  return (num);
200026a8:	68fb      	ldr	r3, [r7, #12]
}
200026aa:	4618      	mov	r0, r3
200026ac:	3714      	adds	r7, #20
200026ae:	46bd      	mov	sp, r7
200026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200026b4:	4770      	bx	lr
200026b6:	bf00      	nop

200026b8 <PIN_SWCLK_TCK_SET>:
static void     PIN_SWCLK_TCK_SET (void) {
200026b8:	b480      	push	{r7}
200026ba:	af00      	add	r7, sp, #0
}
200026bc:	bf00      	nop
200026be:	46bd      	mov	sp, r7
200026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200026c4:	4770      	bx	lr

200026c6 <PIN_SWCLK_TCK_CLR>:
static void     PIN_SWCLK_TCK_CLR (void) {
200026c6:	b480      	push	{r7}
200026c8:	af00      	add	r7, sp, #0
}
200026ca:	bf00      	nop
200026cc:	46bd      	mov	sp, r7
200026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200026d2:	4770      	bx	lr

200026d4 <PIN_SWDIO_TMS_SET>:
static void     PIN_SWDIO_TMS_SET (void) {
200026d4:	b480      	push	{r7}
200026d6:	af00      	add	r7, sp, #0
}
200026d8:	bf00      	nop
200026da:	46bd      	mov	sp, r7
200026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200026e0:	4770      	bx	lr

200026e2 <PIN_SWDIO_TMS_CLR>:
static void     PIN_SWDIO_TMS_CLR (void) {
200026e2:	b480      	push	{r7}
200026e4:	af00      	add	r7, sp, #0
}
200026e6:	bf00      	nop
200026e8:	46bd      	mov	sp, r7
200026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200026ee:	4770      	bx	lr

200026f0 <PIN_TDI_OUT>:
static void     PIN_TDI_OUT (uint32_t bit) {
200026f0:	b480      	push	{r7}
200026f2:	b083      	sub	sp, #12
200026f4:	af00      	add	r7, sp, #0
200026f6:	6078      	str	r0, [r7, #4]
}
200026f8:	bf00      	nop
200026fa:	370c      	adds	r7, #12
200026fc:	46bd      	mov	sp, r7
200026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20002702:	4770      	bx	lr

20002704 <PIN_TDO_IN>:
static uint32_t PIN_TDO_IN  (void) {
20002704:	b480      	push	{r7}
20002706:	af00      	add	r7, sp, #0
  return (0U);
20002708:	2300      	movs	r3, #0
}
2000270a:	4618      	mov	r0, r3
2000270c:	46bd      	mov	sp, r7
2000270e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002712:	4770      	bx	lr

20002714 <TIMESTAMP_GET>:
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
20002714:	b480      	push	{r7}
20002716:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20002718:	4b03      	ldr	r3, [pc, #12]	@ (20002728 <TIMESTAMP_GET+0x14>)
2000271a:	685b      	ldr	r3, [r3, #4]
}
2000271c:	4618      	mov	r0, r3
2000271e:	46bd      	mov	sp, r7
20002720:	f85d 7b04 	ldr.w	r7, [sp], #4
20002724:	4770      	bx	lr
20002726:	bf00      	nop
20002728:	e0001000 	.word	0xe0001000

2000272c <copy_bits_lsb>:
void SPI_TMS_Transfer(uint64_t data, uint8_t bits);

void copy_bits_lsb(const uint8_t *src, uint32_t srcBitIndex,
                   uint32_t bitLen,
                   uint8_t *dst, uint32_t dstBitIndex)
{
2000272c:	b480      	push	{r7}
2000272e:	b08b      	sub	sp, #44	@ 0x2c
20002730:	af00      	add	r7, sp, #0
20002732:	60f8      	str	r0, [r7, #12]
20002734:	60b9      	str	r1, [r7, #8]
20002736:	607a      	str	r2, [r7, #4]
20002738:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < bitLen; i++)
2000273a:	2300      	movs	r3, #0
2000273c:	627b      	str	r3, [r7, #36]	@ 0x24
2000273e:	e046      	b.n	200027ce <copy_bits_lsb+0xa2>
    {
        // Locate the bit in the source
        uint32_t sByte = (srcBitIndex + i) / 8;
20002740:	68ba      	ldr	r2, [r7, #8]
20002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002744:	4413      	add	r3, r2
20002746:	08db      	lsrs	r3, r3, #3
20002748:	623b      	str	r3, [r7, #32]
        uint32_t sBit  = (srcBitIndex + i) % 8; // LSB-first
2000274a:	68ba      	ldr	r2, [r7, #8]
2000274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000274e:	4413      	add	r3, r2
20002750:	f003 0307 	and.w	r3, r3, #7
20002754:	61fb      	str	r3, [r7, #28]
        uint8_t  bit   = (src[sByte] >> sBit) & 1;
20002756:	68fa      	ldr	r2, [r7, #12]
20002758:	6a3b      	ldr	r3, [r7, #32]
2000275a:	4413      	add	r3, r2
2000275c:	781b      	ldrb	r3, [r3, #0]
2000275e:	461a      	mov	r2, r3
20002760:	69fb      	ldr	r3, [r7, #28]
20002762:	fa42 f303 	asr.w	r3, r2, r3
20002766:	b2db      	uxtb	r3, r3
20002768:	f003 0301 	and.w	r3, r3, #1
2000276c:	76fb      	strb	r3, [r7, #27]

        // Locate where to put it in the destination
        uint32_t dByte = (dstBitIndex + i) / 8;
2000276e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002772:	4413      	add	r3, r2
20002774:	08db      	lsrs	r3, r3, #3
20002776:	617b      	str	r3, [r7, #20]
        uint32_t dBit  = (dstBitIndex + i) % 8; // LSB-first
20002778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
2000277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000277c:	4413      	add	r3, r2
2000277e:	f003 0307 	and.w	r3, r3, #7
20002782:	613b      	str	r3, [r7, #16]

        // Clear and set the destination bit
        dst[dByte] &= ~(1U << dBit);
20002784:	683a      	ldr	r2, [r7, #0]
20002786:	697b      	ldr	r3, [r7, #20]
20002788:	4413      	add	r3, r2
2000278a:	7819      	ldrb	r1, [r3, #0]
2000278c:	2201      	movs	r2, #1
2000278e:	693b      	ldr	r3, [r7, #16]
20002790:	fa02 f303 	lsl.w	r3, r2, r3
20002794:	b2db      	uxtb	r3, r3
20002796:	43db      	mvns	r3, r3
20002798:	b2da      	uxtb	r2, r3
2000279a:	6838      	ldr	r0, [r7, #0]
2000279c:	697b      	ldr	r3, [r7, #20]
2000279e:	4403      	add	r3, r0
200027a0:	400a      	ands	r2, r1
200027a2:	b2d2      	uxtb	r2, r2
200027a4:	701a      	strb	r2, [r3, #0]
        dst[dByte] |=  (bit << dBit);
200027a6:	683a      	ldr	r2, [r7, #0]
200027a8:	697b      	ldr	r3, [r7, #20]
200027aa:	4413      	add	r3, r2
200027ac:	781b      	ldrb	r3, [r3, #0]
200027ae:	b25a      	sxtb	r2, r3
200027b0:	7ef9      	ldrb	r1, [r7, #27]
200027b2:	693b      	ldr	r3, [r7, #16]
200027b4:	fa01 f303 	lsl.w	r3, r1, r3
200027b8:	b25b      	sxtb	r3, r3
200027ba:	4313      	orrs	r3, r2
200027bc:	b259      	sxtb	r1, r3
200027be:	683a      	ldr	r2, [r7, #0]
200027c0:	697b      	ldr	r3, [r7, #20]
200027c2:	4413      	add	r3, r2
200027c4:	b2ca      	uxtb	r2, r1
200027c6:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < bitLen; i++)
200027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200027ca:	3301      	adds	r3, #1
200027cc:	627b      	str	r3, [r7, #36]	@ 0x24
200027ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200027d0:	687b      	ldr	r3, [r7, #4]
200027d2:	429a      	cmp	r2, r3
200027d4:	d3b4      	bcc.n	20002740 <copy_bits_lsb+0x14>
    }
}
200027d6:	bf00      	nop
200027d8:	bf00      	nop
200027da:	372c      	adds	r7, #44	@ 0x2c
200027dc:	46bd      	mov	sp, r7
200027de:	f85d 7b04 	ldr.w	r7, [sp], #4
200027e2:	4770      	bx	lr

200027e4 <extract_nbits_lsb>:


// Extracts 8 bits from a uint8_t array (LSB-first), starting at `bit_index`
// Returns the extracted bits right-aligned
// Extract up to 16 bits from a bitstream (LSB-first)
uint16_t extract_nbits_lsb(const uint8_t *buf, size_t bit_offset, size_t n) {
200027e4:	b480      	push	{r7}
200027e6:	b089      	sub	sp, #36	@ 0x24
200027e8:	af00      	add	r7, sp, #0
200027ea:	60f8      	str	r0, [r7, #12]
200027ec:	60b9      	str	r1, [r7, #8]
200027ee:	607a      	str	r2, [r7, #4]
    if (n == 0 || n > 16) return 0;
200027f0:	687b      	ldr	r3, [r7, #4]
200027f2:	2b00      	cmp	r3, #0
200027f4:	d002      	beq.n	200027fc <extract_nbits_lsb+0x18>
200027f6:	687b      	ldr	r3, [r7, #4]
200027f8:	2b10      	cmp	r3, #16
200027fa:	d901      	bls.n	20002800 <extract_nbits_lsb+0x1c>
200027fc:	2300      	movs	r3, #0
200027fe:	e029      	b.n	20002854 <extract_nbits_lsb+0x70>

    size_t byte_offset = bit_offset / 8;
20002800:	68bb      	ldr	r3, [r7, #8]
20002802:	08db      	lsrs	r3, r3, #3
20002804:	61fb      	str	r3, [r7, #28]
    size_t bit_in_byte = bit_offset % 8;
20002806:	68bb      	ldr	r3, [r7, #8]
20002808:	f003 0307 	and.w	r3, r3, #7
2000280c:	61bb      	str	r3, [r7, #24]

    // Read 3 bytes to cover the worst case (bits span across 3 bytes)
    uint32_t temp = buf[byte_offset] |
2000280e:	68fa      	ldr	r2, [r7, #12]
20002810:	69fb      	ldr	r3, [r7, #28]
20002812:	4413      	add	r3, r2
20002814:	781b      	ldrb	r3, [r3, #0]
20002816:	4619      	mov	r1, r3
                   ((uint32_t)buf[byte_offset + 1] << 8) |
20002818:	69fb      	ldr	r3, [r7, #28]
2000281a:	3301      	adds	r3, #1
2000281c:	68fa      	ldr	r2, [r7, #12]
2000281e:	4413      	add	r3, r2
20002820:	781b      	ldrb	r3, [r3, #0]
20002822:	021b      	lsls	r3, r3, #8
    uint32_t temp = buf[byte_offset] |
20002824:	ea41 0203 	orr.w	r2, r1, r3
                   ((uint32_t)buf[byte_offset + 2] << 16);
20002828:	69fb      	ldr	r3, [r7, #28]
2000282a:	3302      	adds	r3, #2
2000282c:	68f9      	ldr	r1, [r7, #12]
2000282e:	440b      	add	r3, r1
20002830:	781b      	ldrb	r3, [r3, #0]
20002832:	041b      	lsls	r3, r3, #16
    uint32_t temp = buf[byte_offset] |
20002834:	4313      	orrs	r3, r2
20002836:	617b      	str	r3, [r7, #20]

    // Right shift to the relevant bit, then mask
    return (temp >> bit_in_byte) & ((1U << n) - 1);
20002838:	697a      	ldr	r2, [r7, #20]
2000283a:	69bb      	ldr	r3, [r7, #24]
2000283c:	fa22 f303 	lsr.w	r3, r2, r3
20002840:	b29a      	uxth	r2, r3
20002842:	2101      	movs	r1, #1
20002844:	687b      	ldr	r3, [r7, #4]
20002846:	fa01 f303 	lsl.w	r3, r1, r3
2000284a:	b29b      	uxth	r3, r3
2000284c:	3b01      	subs	r3, #1
2000284e:	b29b      	uxth	r3, r3
20002850:	4013      	ands	r3, r2
20002852:	b29b      	uxth	r3, r3
}
20002854:	4618      	mov	r0, r3
20002856:	3724      	adds	r7, #36	@ 0x24
20002858:	46bd      	mov	sp, r7
2000285a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000285e:	4770      	bx	lr

20002860 <write_nbits_lsb>:
    // Store back
    dst[byte_index] = window & 0xFF;
    dst[byte_index + 1] = (window >> 8) & 0xFF;
}
#endif
void write_nbits_lsb(uint8_t *buf, size_t bit_offset, size_t n, uint16_t value) {
20002860:	b480      	push	{r7}
20002862:	b089      	sub	sp, #36	@ 0x24
20002864:	af00      	add	r7, sp, #0
20002866:	60f8      	str	r0, [r7, #12]
20002868:	60b9      	str	r1, [r7, #8]
2000286a:	607a      	str	r2, [r7, #4]
2000286c:	807b      	strh	r3, [r7, #2]
    if (n == 0 || n > 16) return;
2000286e:	687b      	ldr	r3, [r7, #4]
20002870:	2b00      	cmp	r3, #0
20002872:	d04f      	beq.n	20002914 <write_nbits_lsb+0xb4>
20002874:	687b      	ldr	r3, [r7, #4]
20002876:	2b10      	cmp	r3, #16
20002878:	d84c      	bhi.n	20002914 <write_nbits_lsb+0xb4>

    size_t byte_offset = bit_offset / 8;
2000287a:	68bb      	ldr	r3, [r7, #8]
2000287c:	08db      	lsrs	r3, r3, #3
2000287e:	61fb      	str	r3, [r7, #28]
    size_t bit_in_byte = bit_offset % 8;
20002880:	68bb      	ldr	r3, [r7, #8]
20002882:	f003 0307 	and.w	r3, r3, #7
20002886:	61bb      	str	r3, [r7, #24]

    // Read 3 bytes to cover the worst case (spanning across 3 bytes)
    uint32_t temp = buf[byte_offset] |
20002888:	68fa      	ldr	r2, [r7, #12]
2000288a:	69fb      	ldr	r3, [r7, #28]
2000288c:	4413      	add	r3, r2
2000288e:	781b      	ldrb	r3, [r3, #0]
20002890:	4619      	mov	r1, r3
                   ((uint32_t)buf[byte_offset + 1] << 8) |
20002892:	69fb      	ldr	r3, [r7, #28]
20002894:	3301      	adds	r3, #1
20002896:	68fa      	ldr	r2, [r7, #12]
20002898:	4413      	add	r3, r2
2000289a:	781b      	ldrb	r3, [r3, #0]
2000289c:	021b      	lsls	r3, r3, #8
    uint32_t temp = buf[byte_offset] |
2000289e:	ea41 0203 	orr.w	r2, r1, r3
                   ((uint32_t)buf[byte_offset + 2] << 16);
200028a2:	69fb      	ldr	r3, [r7, #28]
200028a4:	3302      	adds	r3, #2
200028a6:	68f9      	ldr	r1, [r7, #12]
200028a8:	440b      	add	r3, r1
200028aa:	781b      	ldrb	r3, [r3, #0]
200028ac:	041b      	lsls	r3, r3, #16
    uint32_t temp = buf[byte_offset] |
200028ae:	4313      	orrs	r3, r2
200028b0:	617b      	str	r3, [r7, #20]

    // Mask and insert new value
    uint32_t mask = ((1U << n) - 1U) << bit_in_byte;
200028b2:	2201      	movs	r2, #1
200028b4:	687b      	ldr	r3, [r7, #4]
200028b6:	fa02 f303 	lsl.w	r3, r2, r3
200028ba:	1e5a      	subs	r2, r3, #1
200028bc:	69bb      	ldr	r3, [r7, #24]
200028be:	fa02 f303 	lsl.w	r3, r2, r3
200028c2:	613b      	str	r3, [r7, #16]
    temp = (temp & ~mask) | (((uint32_t)(value & ((1U << n) - 1))) << bit_in_byte);
200028c4:	693b      	ldr	r3, [r7, #16]
200028c6:	43da      	mvns	r2, r3
200028c8:	697b      	ldr	r3, [r7, #20]
200028ca:	401a      	ands	r2, r3
200028cc:	8879      	ldrh	r1, [r7, #2]
200028ce:	f04f 30ff 	mov.w	r0, #4294967295
200028d2:	687b      	ldr	r3, [r7, #4]
200028d4:	fa00 f303 	lsl.w	r3, r0, r3
200028d8:	43db      	mvns	r3, r3
200028da:	4019      	ands	r1, r3
200028dc:	69bb      	ldr	r3, [r7, #24]
200028de:	fa01 f303 	lsl.w	r3, r1, r3
200028e2:	4313      	orrs	r3, r2
200028e4:	617b      	str	r3, [r7, #20]

    // Write the result back
    buf[byte_offset]     = temp & 0xFF;
200028e6:	68fa      	ldr	r2, [r7, #12]
200028e8:	69fb      	ldr	r3, [r7, #28]
200028ea:	4413      	add	r3, r2
200028ec:	697a      	ldr	r2, [r7, #20]
200028ee:	b2d2      	uxtb	r2, r2
200028f0:	701a      	strb	r2, [r3, #0]
    buf[byte_offset + 1] = (temp >> 8) & 0xFF;
200028f2:	697b      	ldr	r3, [r7, #20]
200028f4:	0a19      	lsrs	r1, r3, #8
200028f6:	69fb      	ldr	r3, [r7, #28]
200028f8:	3301      	adds	r3, #1
200028fa:	68fa      	ldr	r2, [r7, #12]
200028fc:	4413      	add	r3, r2
200028fe:	b2ca      	uxtb	r2, r1
20002900:	701a      	strb	r2, [r3, #0]
    buf[byte_offset + 2] = (temp >> 16) & 0xFF;
20002902:	697b      	ldr	r3, [r7, #20]
20002904:	0c19      	lsrs	r1, r3, #16
20002906:	69fb      	ldr	r3, [r7, #28]
20002908:	3302      	adds	r3, #2
2000290a:	68fa      	ldr	r2, [r7, #12]
2000290c:	4413      	add	r3, r2
2000290e:	b2ca      	uxtb	r2, r1
20002910:	701a      	strb	r2, [r3, #0]
20002912:	e000      	b.n	20002916 <write_nbits_lsb+0xb6>
    if (n == 0 || n > 16) return;
20002914:	bf00      	nop
}
20002916:	3724      	adds	r7, #36	@ 0x24
20002918:	46bd      	mov	sp, r7
2000291a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000291e:	4770      	bx	lr

20002920 <fill_tms_buffer>:

void fill_tms_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t tms_val)
{
20002920:	b580      	push	{r7, lr}
20002922:	b084      	sub	sp, #16
20002924:	af00      	add	r7, sp, #0
20002926:	60f8      	str	r0, [r7, #12]
20002928:	60b9      	str	r1, [r7, #8]
2000292a:	4613      	mov	r3, r2
2000292c:	71fb      	strb	r3, [r7, #7]
	//TODO: optimize here!!
	while(n)
2000292e:	e01d      	b.n	2000296c <fill_tms_buffer+0x4c>
	{
		if(n > 8)
20002930:	68bb      	ldr	r3, [r7, #8]
20002932:	2b08      	cmp	r3, #8
20002934:	d912      	bls.n	2000295c <fill_tms_buffer+0x3c>
		{
			if(tms_val)
20002936:	79fb      	ldrb	r3, [r7, #7]
20002938:	2b00      	cmp	r3, #0
2000293a:	d00b      	beq.n	20002954 <fill_tms_buffer+0x34>
			{
				tms_val = 0xFF;
2000293c:	23ff      	movs	r3, #255	@ 0xff
2000293e:	71fb      	strb	r3, [r7, #7]
				write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, 8, tms_val);
20002940:	79fb      	ldrb	r3, [r7, #7]
20002942:	b29b      	uxth	r3, r3
20002944:	2208      	movs	r2, #8
20002946:	68f9      	ldr	r1, [r7, #12]
20002948:	480c      	ldr	r0, [pc, #48]	@ (2000297c <fill_tms_buffer+0x5c>)
2000294a:	f7ff ff89 	bl	20002860 <write_nbits_lsb>
				total_write_bit_cnt += 8;
2000294e:	68fb      	ldr	r3, [r7, #12]
20002950:	3308      	adds	r3, #8
20002952:	60fb      	str	r3, [r7, #12]
			}

			n -= 8;
20002954:	68bb      	ldr	r3, [r7, #8]
20002956:	3b08      	subs	r3, #8
20002958:	60bb      	str	r3, [r7, #8]
2000295a:	e007      	b.n	2000296c <fill_tms_buffer+0x4c>
		}
		else
		{
			write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, n, tms_val);
2000295c:	79fb      	ldrb	r3, [r7, #7]
2000295e:	b29b      	uxth	r3, r3
20002960:	68ba      	ldr	r2, [r7, #8]
20002962:	68f9      	ldr	r1, [r7, #12]
20002964:	4805      	ldr	r0, [pc, #20]	@ (2000297c <fill_tms_buffer+0x5c>)
20002966:	f7ff ff7b 	bl	20002860 <write_nbits_lsb>
			break;
2000296a:	e003      	b.n	20002974 <fill_tms_buffer+0x54>
	while(n)
2000296c:	68bb      	ldr	r3, [r7, #8]
2000296e:	2b00      	cmp	r3, #0
20002970:	d1de      	bne.n	20002930 <fill_tms_buffer+0x10>
		}

	}
}
20002972:	bf00      	nop
20002974:	bf00      	nop
20002976:	3710      	adds	r7, #16
20002978:	46bd      	mov	sp, r7
2000297a:	bd80      	pop	{r7, pc}
2000297c:	2000da94 	.word	0x2000da94

20002980 <fill_tdi_buffer>:

void fill_tdi_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t *tdi_val_ptr)
{
20002980:	b580      	push	{r7, lr}
20002982:	b084      	sub	sp, #16
20002984:	af00      	add	r7, sp, #0
20002986:	60f8      	str	r0, [r7, #12]
20002988:	60b9      	str	r1, [r7, #8]
2000298a:	607a      	str	r2, [r7, #4]
	//TODO: optimize here!!
	while(n)
2000298c:	e01b      	b.n	200029c6 <fill_tdi_buffer+0x46>
	{
		if(n > 8)
2000298e:	68bb      	ldr	r3, [r7, #8]
20002990:	2b08      	cmp	r3, #8
20002992:	d910      	bls.n	200029b6 <fill_tdi_buffer+0x36>
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, 8, *tdi_val_ptr);
20002994:	687b      	ldr	r3, [r7, #4]
20002996:	781b      	ldrb	r3, [r3, #0]
20002998:	2208      	movs	r2, #8
2000299a:	68f9      	ldr	r1, [r7, #12]
2000299c:	480e      	ldr	r0, [pc, #56]	@ (200029d8 <fill_tdi_buffer+0x58>)
2000299e:	f7ff ff5f 	bl	20002860 <write_nbits_lsb>
			n -= 8;
200029a2:	68bb      	ldr	r3, [r7, #8]
200029a4:	3b08      	subs	r3, #8
200029a6:	60bb      	str	r3, [r7, #8]
			tdi_val_ptr++;
200029a8:	687b      	ldr	r3, [r7, #4]
200029aa:	3301      	adds	r3, #1
200029ac:	607b      	str	r3, [r7, #4]
			total_write_bit_cnt += 8;
200029ae:	68fb      	ldr	r3, [r7, #12]
200029b0:	3308      	adds	r3, #8
200029b2:	60fb      	str	r3, [r7, #12]
200029b4:	e007      	b.n	200029c6 <fill_tdi_buffer+0x46>
		}
		else
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, n, *tdi_val_ptr);
200029b6:	687b      	ldr	r3, [r7, #4]
200029b8:	781b      	ldrb	r3, [r3, #0]
200029ba:	68ba      	ldr	r2, [r7, #8]
200029bc:	68f9      	ldr	r1, [r7, #12]
200029be:	4806      	ldr	r0, [pc, #24]	@ (200029d8 <fill_tdi_buffer+0x58>)
200029c0:	f7ff ff4e 	bl	20002860 <write_nbits_lsb>
			break;
200029c4:	e003      	b.n	200029ce <fill_tdi_buffer+0x4e>
	while(n)
200029c6:	68bb      	ldr	r3, [r7, #8]
200029c8:	2b00      	cmp	r3, #0
200029ca:	d1e0      	bne.n	2000298e <fill_tdi_buffer+0xe>
		}

	}
}
200029cc:	bf00      	nop
200029ce:	bf00      	nop
200029d0:	3710      	adds	r7, #16
200029d2:	46bd      	mov	sp, r7
200029d4:	bd80      	pop	{r7, pc}
200029d6:	bf00      	nop
200029d8:	2000de94 	.word	0x2000de94

200029dc <calculate_xfer_sizes>:

#define IDX_8_BIT 0
#define IDX_RM1_BIT 1
#define IDX_RM2_BIT 2
void calculate_xfer_sizes(uint16_t input_len, uint8_t *buff)
{
200029dc:	b480      	push	{r7}
200029de:	b085      	sub	sp, #20
200029e0:	af00      	add	r7, sp, #0
200029e2:	4603      	mov	r3, r0
200029e4:	6039      	str	r1, [r7, #0]
200029e6:	80fb      	strh	r3, [r7, #6]
	int isunAligned = input_len % 8 < 4 && input_len % 8 != 0;
200029e8:	88fb      	ldrh	r3, [r7, #6]
200029ea:	f003 0304 	and.w	r3, r3, #4
200029ee:	b29b      	uxth	r3, r3
200029f0:	2b00      	cmp	r3, #0
200029f2:	d107      	bne.n	20002a04 <calculate_xfer_sizes+0x28>
200029f4:	88fb      	ldrh	r3, [r7, #6]
200029f6:	f003 0307 	and.w	r3, r3, #7
200029fa:	b29b      	uxth	r3, r3
200029fc:	2b00      	cmp	r3, #0
200029fe:	d001      	beq.n	20002a04 <calculate_xfer_sizes+0x28>
20002a00:	2301      	movs	r3, #1
20002a02:	e000      	b.n	20002a06 <calculate_xfer_sizes+0x2a>
20002a04:	2300      	movs	r3, #0
20002a06:	60fb      	str	r3, [r7, #12]
	int isGreaterThan8 = input_len > 8;
20002a08:	88fb      	ldrh	r3, [r7, #6]
20002a0a:	2b08      	cmp	r3, #8
20002a0c:	bf8c      	ite	hi
20002a0e:	2301      	movhi	r3, #1
20002a10:	2300      	movls	r3, #0
20002a12:	b2db      	uxtb	r3, r3
20002a14:	60bb      	str	r3, [r7, #8]

	if(isunAligned && isGreaterThan8)
20002a16:	68fb      	ldr	r3, [r7, #12]
20002a18:	2b00      	cmp	r3, #0
20002a1a:	d01f      	beq.n	20002a5c <calculate_xfer_sizes+0x80>
20002a1c:	68bb      	ldr	r3, [r7, #8]
20002a1e:	2b00      	cmp	r3, #0
20002a20:	d01c      	beq.n	20002a5c <calculate_xfer_sizes+0x80>
	{
		buff[IDX_8_BIT] = input_len / 8 -2;
20002a22:	88fb      	ldrh	r3, [r7, #6]
20002a24:	08db      	lsrs	r3, r3, #3
20002a26:	b29b      	uxth	r3, r3
20002a28:	b2db      	uxtb	r3, r3
20002a2a:	3b02      	subs	r3, #2
20002a2c:	b2da      	uxtb	r2, r3
20002a2e:	683b      	ldr	r3, [r7, #0]
20002a30:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = 4;
20002a32:	683b      	ldr	r3, [r7, #0]
20002a34:	3301      	adds	r3, #1
20002a36:	2204      	movs	r2, #4
20002a38:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = input_len - buff[IDX_8_BIT]*8 - buff[IDX_RM1_BIT];
20002a3a:	88fb      	ldrh	r3, [r7, #6]
20002a3c:	b2da      	uxtb	r2, r3
20002a3e:	683b      	ldr	r3, [r7, #0]
20002a40:	781b      	ldrb	r3, [r3, #0]
20002a42:	00db      	lsls	r3, r3, #3
20002a44:	b2db      	uxtb	r3, r3
20002a46:	1ad3      	subs	r3, r2, r3
20002a48:	b2d9      	uxtb	r1, r3
20002a4a:	683b      	ldr	r3, [r7, #0]
20002a4c:	3301      	adds	r3, #1
20002a4e:	781a      	ldrb	r2, [r3, #0]
20002a50:	683b      	ldr	r3, [r7, #0]
20002a52:	3302      	adds	r3, #2
20002a54:	1a8a      	subs	r2, r1, r2
20002a56:	b2d2      	uxtb	r2, r2
20002a58:	701a      	strb	r2, [r3, #0]
		buff[IDX_8_BIT] = input_len /8;
		buff[IDX_RM1_BIT] = input_len % 8;
		buff[IDX_RM2_BIT] = 0;
	}

}
20002a5a:	e024      	b.n	20002aa6 <calculate_xfer_sizes+0xca>
	else if (input_len < 8)
20002a5c:	88fb      	ldrh	r3, [r7, #6]
20002a5e:	2b07      	cmp	r3, #7
20002a60:	d80f      	bhi.n	20002a82 <calculate_xfer_sizes+0xa6>
		buff[IDX_8_BIT] = 0;
20002a62:	683b      	ldr	r3, [r7, #0]
20002a64:	2200      	movs	r2, #0
20002a66:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = input_len % 8;
20002a68:	88fb      	ldrh	r3, [r7, #6]
20002a6a:	b2da      	uxtb	r2, r3
20002a6c:	683b      	ldr	r3, [r7, #0]
20002a6e:	3301      	adds	r3, #1
20002a70:	f002 0207 	and.w	r2, r2, #7
20002a74:	b2d2      	uxtb	r2, r2
20002a76:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = 0;
20002a78:	683b      	ldr	r3, [r7, #0]
20002a7a:	3302      	adds	r3, #2
20002a7c:	2200      	movs	r2, #0
20002a7e:	701a      	strb	r2, [r3, #0]
}
20002a80:	e011      	b.n	20002aa6 <calculate_xfer_sizes+0xca>
		buff[IDX_8_BIT] = input_len /8;
20002a82:	88fb      	ldrh	r3, [r7, #6]
20002a84:	08db      	lsrs	r3, r3, #3
20002a86:	b29b      	uxth	r3, r3
20002a88:	b2da      	uxtb	r2, r3
20002a8a:	683b      	ldr	r3, [r7, #0]
20002a8c:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = input_len % 8;
20002a8e:	88fb      	ldrh	r3, [r7, #6]
20002a90:	b2da      	uxtb	r2, r3
20002a92:	683b      	ldr	r3, [r7, #0]
20002a94:	3301      	adds	r3, #1
20002a96:	f002 0207 	and.w	r2, r2, #7
20002a9a:	b2d2      	uxtb	r2, r2
20002a9c:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = 0;
20002a9e:	683b      	ldr	r3, [r7, #0]
20002aa0:	3302      	adds	r3, #2
20002aa2:	2200      	movs	r2, #0
20002aa4:	701a      	strb	r2, [r3, #0]
}
20002aa6:	bf00      	nop
20002aa8:	3714      	adds	r7, #20
20002aaa:	46bd      	mov	sp, r7
20002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ab0:	4770      	bx	lr
	...

20002ab4 <apply_jtag_xfer>:

void apply_jtag_xfer(const uint8_t *tdi, const uint8_t *tms, uint8_t *tdo, uint32_t cnt)
{
20002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20002ab8:	b09c      	sub	sp, #112	@ 0x70
20002aba:	af02      	add	r7, sp, #8
20002abc:	6278      	str	r0, [r7, #36]	@ 0x24
20002abe:	6239      	str	r1, [r7, #32]
20002ac0:	61fa      	str	r2, [r7, #28]
20002ac2:	61bb      	str	r3, [r7, #24]
	uint8_t xFerSizes[3];

	uint8_t dummyVal = 0;
20002ac4:	2300      	movs	r3, #0
20002ac6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	calculate_xfer_sizes(cnt, xFerSizes);
20002aca:	69bb      	ldr	r3, [r7, #24]
20002acc:	b29a      	uxth	r2, r3
20002ace:	f107 0340 	add.w	r3, r7, #64	@ 0x40
20002ad2:	4619      	mov	r1, r3
20002ad4:	4610      	mov	r0, r2
20002ad6:	f7ff ff81 	bl	200029dc <calculate_xfer_sizes>

	uint32_t currentBit = 0;
20002ada:	2300      	movs	r3, #0
20002adc:	667b      	str	r3, [r7, #100]	@ 0x64

	uint8_t *tms_seq_arr = tms;
20002ade:	6a3b      	ldr	r3, [r7, #32]
20002ae0:	657b      	str	r3, [r7, #84]	@ 0x54

	uint8_t *tdi_seq_arr = tdi;
20002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002ae4:	653b      	str	r3, [r7, #80]	@ 0x50


	while(xFerSizes[IDX_8_BIT])
20002ae6:	e040      	b.n	20002b6a <apply_jtag_xfer+0xb6>
	{
		uint8_t tms_val = *tms;
20002ae8:	6a3b      	ldr	r3, [r7, #32]
20002aea:	781b      	ldrb	r3, [r3, #0]
20002aec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		uint8_t tdi_val = *tdi;
20002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002af2:	781b      	ldrb	r3, [r3, #0]
20002af4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		uint64_t tdo_val;
		if(tms_val != 0 && currentBit != 0)
20002af8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
20002afc:	2b00      	cmp	r3, #0
20002afe:	d005      	beq.n	20002b0c <apply_jtag_xfer+0x58>
20002b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002b02:	2b00      	cmp	r3, #0
20002b04:	d002      	beq.n	20002b0c <apply_jtag_xfer+0x58>
		{
			dummyVal = 1;
20002b06:	2301      	movs	r3, #1
20002b08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		}

		SPI_TMS_Transfer(tms_val, 8);
20002b0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
20002b10:	2200      	movs	r2, #0
20002b12:	461c      	mov	r4, r3
20002b14:	4615      	mov	r5, r2
20002b16:	2208      	movs	r2, #8
20002b18:	4620      	mov	r0, r4
20002b1a:	4629      	mov	r1, r5
20002b1c:	f002 fa2c 	bl	20004f78 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , 8);
20002b20:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
20002b24:	2200      	movs	r2, #0
20002b26:	4698      	mov	r8, r3
20002b28:	4691      	mov	r9, r2
20002b2a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
20002b2e:	2308      	movs	r3, #8
20002b30:	9300      	str	r3, [sp, #0]
20002b32:	4642      	mov	r2, r8
20002b34:	464b      	mov	r3, r9
20002b36:	4608      	mov	r0, r1
20002b38:	f002 fac6 	bl	200050c8 <SPI_Transfer>

		*tdo = (uint8_t)tdo_val;
20002b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20002b40:	b2d3      	uxtb	r3, r2
20002b42:	69fa      	ldr	r2, [r7, #28]
20002b44:	7013      	strb	r3, [r2, #0]

		tms++;
20002b46:	6a3b      	ldr	r3, [r7, #32]
20002b48:	3301      	adds	r3, #1
20002b4a:	623b      	str	r3, [r7, #32]
		tdi++;
20002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002b4e:	3301      	adds	r3, #1
20002b50:	627b      	str	r3, [r7, #36]	@ 0x24
		tdo++;
20002b52:	69fb      	ldr	r3, [r7, #28]
20002b54:	3301      	adds	r3, #1
20002b56:	61fb      	str	r3, [r7, #28]

		xFerSizes[IDX_8_BIT]--;
20002b58:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
20002b5c:	3b01      	subs	r3, #1
20002b5e:	b2db      	uxtb	r3, r3
20002b60:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

		currentBit+= 8;
20002b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002b66:	3308      	adds	r3, #8
20002b68:	667b      	str	r3, [r7, #100]	@ 0x64
	while(xFerSizes[IDX_8_BIT])
20002b6a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
20002b6e:	2b00      	cmp	r3, #0
20002b70:	d1ba      	bne.n	20002ae8 <apply_jtag_xfer+0x34>
	}

	while(xFerSizes[IDX_RM1_BIT])
20002b72:	e04c      	b.n	20002c0e <apply_jtag_xfer+0x15a>
	{
		uint32_t delay_cnt = 2500;
20002b74:	f640 13c4 	movw	r3, #2500	@ 0x9c4
20002b78:	663b      	str	r3, [r7, #96]	@ 0x60

		while(delay_cnt--)
20002b7a:	e000      	b.n	20002b7e <apply_jtag_xfer+0xca>
	    {
		  __asm("nop");
20002b7c:	bf00      	nop
		while(delay_cnt--)
20002b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20002b80:	1e5a      	subs	r2, r3, #1
20002b82:	663a      	str	r2, [r7, #96]	@ 0x60
20002b84:	2b00      	cmp	r3, #0
20002b86:	d1f9      	bne.n	20002b7c <apply_jtag_xfer+0xc8>
	    }

		uint16_t tms_val = extract_nbits_lsb(tms_seq_arr, currentBit, xFerSizes[IDX_RM1_BIT]);
20002b88:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002b8c:	461a      	mov	r2, r3
20002b8e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002b90:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20002b92:	f7ff fe27 	bl	200027e4 <extract_nbits_lsb>
20002b96:	4603      	mov	r3, r0
20002b98:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		uint16_t tdi_val = extract_nbits_lsb(tdi_seq_arr, currentBit, xFerSizes[IDX_RM1_BIT]);;
20002b9c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002ba0:	461a      	mov	r2, r3
20002ba2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002ba4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
20002ba6:	f7ff fe1d 	bl	200027e4 <extract_nbits_lsb>
20002baa:	4603      	mov	r3, r0
20002bac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		uint64_t tdo_val;

		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM1_BIT]);
20002bb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
20002bb4:	2200      	movs	r2, #0
20002bb6:	613b      	str	r3, [r7, #16]
20002bb8:	617a      	str	r2, [r7, #20]
20002bba:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002bbe:	461a      	mov	r2, r3
20002bc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20002bc4:	f002 f9d8 	bl	20004f78 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , xFerSizes[IDX_RM1_BIT]);
20002bc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
20002bcc:	2200      	movs	r2, #0
20002bce:	60bb      	str	r3, [r7, #8]
20002bd0:	60fa      	str	r2, [r7, #12]
20002bd2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002bd6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
20002bda:	9300      	str	r3, [sp, #0]
20002bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20002be0:	4608      	mov	r0, r1
20002be2:	f002 fa71 	bl	200050c8 <SPI_Transfer>

		write_nbits_lsb(TDO_SEQ_ARR, currentBit, xFerSizes[IDX_RM1_BIT], tdo_val);
20002be6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002bea:	4619      	mov	r1, r3
20002bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
20002bf0:	b293      	uxth	r3, r2
20002bf2:	460a      	mov	r2, r1
20002bf4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002bf6:	4834      	ldr	r0, [pc, #208]	@ (20002cc8 <apply_jtag_xfer+0x214>)
20002bf8:	f7ff fe32 	bl	20002860 <write_nbits_lsb>

		currentBit+= xFerSizes[IDX_RM1_BIT];
20002bfc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002c00:	461a      	mov	r2, r3
20002c02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002c04:	4413      	add	r3, r2
20002c06:	667b      	str	r3, [r7, #100]	@ 0x64

		xFerSizes[IDX_RM1_BIT] = 0;
20002c08:	2300      	movs	r3, #0
20002c0a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	while(xFerSizes[IDX_RM1_BIT])
20002c0e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002c12:	2b00      	cmp	r3, #0
20002c14:	d1ae      	bne.n	20002b74 <apply_jtag_xfer+0xc0>

	}

	while(xFerSizes[IDX_RM2_BIT])
20002c16:	e04c      	b.n	20002cb2 <apply_jtag_xfer+0x1fe>
	{
		//TODO: extract bits!!
		uint32_t delay_cnt = 2000;
20002c18:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
20002c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c

		while(delay_cnt--)
20002c1e:	e000      	b.n	20002c22 <apply_jtag_xfer+0x16e>
		{
		  __asm("nop");
20002c20:	bf00      	nop
		while(delay_cnt--)
20002c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20002c24:	1e5a      	subs	r2, r3, #1
20002c26:	65fa      	str	r2, [r7, #92]	@ 0x5c
20002c28:	2b00      	cmp	r3, #0
20002c2a:	d1f9      	bne.n	20002c20 <apply_jtag_xfer+0x16c>
		}

		uint16_t tms_val = extract_nbits_lsb(tms_seq_arr, currentBit, xFerSizes[IDX_RM2_BIT]);
20002c2c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002c30:	461a      	mov	r2, r3
20002c32:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002c34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20002c36:	f7ff fdd5 	bl	200027e4 <extract_nbits_lsb>
20002c3a:	4603      	mov	r3, r0
20002c3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		uint16_t tdi_val = extract_nbits_lsb(tdi_seq_arr, currentBit, xFerSizes[IDX_RM2_BIT]);;
20002c40:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002c44:	461a      	mov	r2, r3
20002c46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002c48:	6d38      	ldr	r0, [r7, #80]	@ 0x50
20002c4a:	f7ff fdcb 	bl	200027e4 <extract_nbits_lsb>
20002c4e:	4603      	mov	r3, r0
20002c50:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		uint64_t tdo_val;

		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM2_BIT]);
20002c54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
20002c58:	2200      	movs	r2, #0
20002c5a:	469a      	mov	sl, r3
20002c5c:	4693      	mov	fp, r2
20002c5e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002c62:	461a      	mov	r2, r3
20002c64:	4650      	mov	r0, sl
20002c66:	4659      	mov	r1, fp
20002c68:	f002 f986 	bl	20004f78 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , xFerSizes[IDX_RM2_BIT]);
20002c6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
20002c70:	2200      	movs	r2, #0
20002c72:	603b      	str	r3, [r7, #0]
20002c74:	607a      	str	r2, [r7, #4]
20002c76:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002c7a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
20002c7e:	9300      	str	r3, [sp, #0]
20002c80:	e9d7 2300 	ldrd	r2, r3, [r7]
20002c84:	4608      	mov	r0, r1
20002c86:	f002 fa1f 	bl	200050c8 <SPI_Transfer>

		write_nbits_lsb(TDO_SEQ_ARR, currentBit, xFerSizes[IDX_RM2_BIT], tdo_val);
20002c8a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002c8e:	4619      	mov	r1, r3
20002c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
20002c94:	b293      	uxth	r3, r2
20002c96:	460a      	mov	r2, r1
20002c98:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002c9a:	480b      	ldr	r0, [pc, #44]	@ (20002cc8 <apply_jtag_xfer+0x214>)
20002c9c:	f7ff fde0 	bl	20002860 <write_nbits_lsb>

		currentBit+= xFerSizes[IDX_RM2_BIT];
20002ca0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002ca4:	461a      	mov	r2, r3
20002ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002ca8:	4413      	add	r3, r2
20002caa:	667b      	str	r3, [r7, #100]	@ 0x64

		xFerSizes[IDX_RM2_BIT] = 0;
20002cac:	2300      	movs	r3, #0
20002cae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	while(xFerSizes[IDX_RM2_BIT])
20002cb2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002cb6:	2b00      	cmp	r3, #0
20002cb8:	d1ae      	bne.n	20002c18 <apply_jtag_xfer+0x164>

	}


}
20002cba:	bf00      	nop
20002cbc:	bf00      	nop
20002cbe:	3768      	adds	r7, #104	@ 0x68
20002cc0:	46bd      	mov	sp, r7
20002cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20002cc6:	bf00      	nop
20002cc8:	2000e294 	.word	0x2000e294

20002ccc <JTAG_Sequence>:
//   info:   sequence information
//   tdi:    pointer to TDI generated data
//   tdo:    pointer to TDO captured data
//   return: none
uint32_t JTAG_Sequence (uint32_t count, const uint8_t *request, uint8_t *response)
{
20002ccc:	b580      	push	{r7, lr}
20002cce:	b094      	sub	sp, #80	@ 0x50
20002cd0:	af02      	add	r7, sp, #8
20002cd2:	60f8      	str	r0, [r7, #12]
20002cd4:	60b9      	str	r1, [r7, #8]
20002cd6:	607a      	str	r2, [r7, #4]
	static volatile uint32_t elapsed_time;

	static volatile uint32_t memcpy_elapsed_time;
	static volatile uint32_t memcpy_first;

	firstTime = DWT->CYCCNT;
20002cd8:	4b7a      	ldr	r3, [pc, #488]	@ (20002ec4 <JTAG_Sequence+0x1f8>)
20002cda:	685b      	ldr	r3, [r3, #4]
20002cdc:	4a7a      	ldr	r2, [pc, #488]	@ (20002ec8 <JTAG_Sequence+0x1fc>)
20002cde:	6013      	str	r3, [r2, #0]


	static int cnt = 0;
	int dummyVal = 31;
20002ce0:	231f      	movs	r3, #31
20002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t total_write_bit_cnt = 0;
20002ce4:	2300      	movs	r3, #0
20002ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t total_read_bit_cnt = 0;
20002ce8:	2300      	movs	r3, #0
20002cea:	643b      	str	r3, [r7, #64]	@ 0x40

  uint32_t total_write_word_cnt = 0;
20002cec:	2300      	movs	r3, #0
20002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t total_read_word_cnt = 0;
20002cf0:	2300      	movs	r3, #0
20002cf2:	623b      	str	r3, [r7, #32]

  uint32_t tdo_capture_index = 0;
20002cf4:	2300      	movs	r3, #0
20002cf6:	61fb      	str	r3, [r7, #28]

  uint32_t tms_seq_val = 0;
20002cf8:	2300      	movs	r3, #0
20002cfa:	61bb      	str	r3, [r7, #24]

  uint32_t i;

  uint8_t *req_base = request;
20002cfc:	68bb      	ldr	r3, [r7, #8]
20002cfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  memset(TMS_SEQ_ARR, 0, 256);
20002d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002d04:	2100      	movs	r1, #0
20002d06:	4871      	ldr	r0, [pc, #452]	@ (20002ecc <JTAG_Sequence+0x200>)
20002d08:	f00a fc4e 	bl	2000d5a8 <memset>

  memset(TDI_SEQ_ARR, 0, 256);
20002d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002d10:	2100      	movs	r1, #0
20002d12:	486f      	ldr	r0, [pc, #444]	@ (20002ed0 <JTAG_Sequence+0x204>)
20002d14:	f00a fc48 	bl	2000d5a8 <memset>

  memset(TDO_SEQ_ARR, 0, 256);
20002d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002d1c:	2100      	movs	r1, #0
20002d1e:	486d      	ldr	r0, [pc, #436]	@ (20002ed4 <JTAG_Sequence+0x208>)
20002d20:	f00a fc42 	bl	2000d5a8 <memset>

  memset(TDO_PROCESSED_SEQ_ARR, 0, 256);
20002d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002d28:	2100      	movs	r1, #0
20002d2a:	486b      	ldr	r0, [pc, #428]	@ (20002ed8 <JTAG_Sequence+0x20c>)
20002d2c:	f00a fc3c 	bl	2000d5a8 <memset>


  cnt++;
20002d30:	4b6a      	ldr	r3, [pc, #424]	@ (20002edc <JTAG_Sequence+0x210>)
20002d32:	681b      	ldr	r3, [r3, #0]
20002d34:	3301      	adds	r3, #1
20002d36:	4a69      	ldr	r2, [pc, #420]	@ (20002edc <JTAG_Sequence+0x210>)
20002d38:	6013      	str	r3, [r2, #0]

  SPI4->CR1 &= ~(1 << 6);
20002d3a:	4b69      	ldr	r3, [pc, #420]	@ (20002ee0 <JTAG_Sequence+0x214>)
20002d3c:	681b      	ldr	r3, [r3, #0]
20002d3e:	4a68      	ldr	r2, [pc, #416]	@ (20002ee0 <JTAG_Sequence+0x214>)
20002d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
20002d44:	6013      	str	r3, [r2, #0]

  SPI4->CR1 |= (1 << 6);
20002d46:	4b66      	ldr	r3, [pc, #408]	@ (20002ee0 <JTAG_Sequence+0x214>)
20002d48:	681b      	ldr	r3, [r3, #0]
20002d4a:	4a65      	ldr	r2, [pc, #404]	@ (20002ee0 <JTAG_Sequence+0x214>)
20002d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20002d50:	6013      	str	r3, [r2, #0]

  SPI4->CR1 &= ~(1);
20002d52:	4b63      	ldr	r3, [pc, #396]	@ (20002ee0 <JTAG_Sequence+0x214>)
20002d54:	681b      	ldr	r3, [r3, #0]
20002d56:	4a62      	ldr	r2, [pc, #392]	@ (20002ee0 <JTAG_Sequence+0x214>)
20002d58:	f023 0301 	bic.w	r3, r3, #1
20002d5c:	6013      	str	r3, [r2, #0]

  SPI3->CR1 &= ~(1);
20002d5e:	4b61      	ldr	r3, [pc, #388]	@ (20002ee4 <JTAG_Sequence+0x218>)
20002d60:	681b      	ldr	r3, [r3, #0]
20002d62:	4a60      	ldr	r2, [pc, #384]	@ (20002ee4 <JTAG_Sequence+0x218>)
20002d64:	f023 0301 	bic.w	r3, r3, #1
20002d68:	6013      	str	r3, [r2, #0]

  uint32_t delay_cnt = 2500;
20002d6a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
20002d6e:	637b      	str	r3, [r7, #52]	@ 0x34

  		while(delay_cnt--)
20002d70:	e000      	b.n	20002d74 <JTAG_Sequence+0xa8>
  	    {
  		  __asm("nop");
20002d72:	bf00      	nop
  		while(delay_cnt--)
20002d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002d76:	1e5a      	subs	r2, r3, #1
20002d78:	637a      	str	r2, [r7, #52]	@ 0x34
20002d7a:	2b00      	cmp	r3, #0
20002d7c:	d1f9      	bne.n	20002d72 <JTAG_Sequence+0xa6>
  	    }


  for(i = 0; i < count; i++)
20002d7e:	2300      	movs	r3, #0
20002d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
20002d82:	e038      	b.n	20002df6 <JTAG_Sequence+0x12a>
  {
	  uint32_t n;

	  uint8_t tms_val = (*request & JTAG_SEQUENCE_TMS) >> 6;
20002d84:	68bb      	ldr	r3, [r7, #8]
20002d86:	781b      	ldrb	r3, [r3, #0]
20002d88:	099b      	lsrs	r3, r3, #6
20002d8a:	b2db      	uxtb	r3, r3
20002d8c:	f003 0301 	and.w	r3, r3, #1
20002d90:	75fb      	strb	r3, [r7, #23]

	  uint8_t tdi_val = *(request +1);
20002d92:	68bb      	ldr	r3, [r7, #8]
20002d94:	3301      	adds	r3, #1
20002d96:	781b      	ldrb	r3, [r3, #0]
20002d98:	75bb      	strb	r3, [r7, #22]

	  n = *request & JTAG_SEQUENCE_TCK;
20002d9a:	68bb      	ldr	r3, [r7, #8]
20002d9c:	781b      	ldrb	r3, [r3, #0]
20002d9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20002da2:	633b      	str	r3, [r7, #48]	@ 0x30

	  if (n == 0U)
20002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002da6:	2b00      	cmp	r3, #0
20002da8:	d101      	bne.n	20002dae <JTAG_Sequence+0xe2>
	  {
		  n = 64U;
20002daa:	2340      	movs	r3, #64	@ 0x40
20002dac:	633b      	str	r3, [r7, #48]	@ 0x30
	  }

	  fill_tms_buffer(total_write_bit_cnt, n, tms_val);
20002dae:	7dfb      	ldrb	r3, [r7, #23]
20002db0:	461a      	mov	r2, r3
20002db2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20002db4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
20002db6:	f7ff fdb3 	bl	20002920 <fill_tms_buffer>
	  fill_tdi_buffer(total_write_bit_cnt, n, (request +1));
20002dba:	68bb      	ldr	r3, [r7, #8]
20002dbc:	3301      	adds	r3, #1
20002dbe:	461a      	mov	r2, r3
20002dc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20002dc2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
20002dc4:	f7ff fddc 	bl	20002980 <fill_tdi_buffer>


	  total_write_bit_cnt += n;
20002dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
20002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002dcc:	4413      	add	r3, r2
20002dce:	647b      	str	r3, [r7, #68]	@ 0x44

	  if(*request & JTAG_SEQUENCE_TDO)
20002dd0:	68bb      	ldr	r3, [r7, #8]
20002dd2:	781b      	ldrb	r3, [r3, #0]
20002dd4:	b25b      	sxtb	r3, r3
20002dd6:	2b00      	cmp	r3, #0
20002dd8:	da03      	bge.n	20002de2 <JTAG_Sequence+0x116>
	  {
		  total_read_bit_cnt += n;
20002dda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
20002ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002dde:	4413      	add	r3, r2
20002de0:	643b      	str	r3, [r7, #64]	@ 0x40
	  }


	  request += ( (n + 7U) /8U ) + 1;
20002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002de4:	3307      	adds	r3, #7
20002de6:	08db      	lsrs	r3, r3, #3
20002de8:	3301      	adds	r3, #1
20002dea:	68ba      	ldr	r2, [r7, #8]
20002dec:	4413      	add	r3, r2
20002dee:	60bb      	str	r3, [r7, #8]
  for(i = 0; i < count; i++)
20002df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002df2:	3301      	adds	r3, #1
20002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
20002df6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
20002df8:	68fb      	ldr	r3, [r7, #12]
20002dfa:	429a      	cmp	r2, r3
20002dfc:	d3c2      	bcc.n	20002d84 <JTAG_Sequence+0xb8>

  }

  apply_jtag_xfer(TDI_SEQ_ARR, TMS_SEQ_ARR, TDO_SEQ_ARR, total_write_bit_cnt);
20002dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20002e00:	4a34      	ldr	r2, [pc, #208]	@ (20002ed4 <JTAG_Sequence+0x208>)
20002e02:	4932      	ldr	r1, [pc, #200]	@ (20002ecc <JTAG_Sequence+0x200>)
20002e04:	4832      	ldr	r0, [pc, #200]	@ (20002ed0 <JTAG_Sequence+0x204>)
20002e06:	f7ff fe55 	bl	20002ab4 <apply_jtag_xfer>

  total_write_bit_cnt = 0;
20002e0a:	2300      	movs	r3, #0
20002e0c:	647b      	str	r3, [r7, #68]	@ 0x44

  total_read_bit_cnt = 0;
20002e0e:	2300      	movs	r3, #0
20002e10:	643b      	str	r3, [r7, #64]	@ 0x40

  for(i = 0; i < count; i++)
20002e12:	2300      	movs	r3, #0
20002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
20002e16:	e032      	b.n	20002e7e <JTAG_Sequence+0x1b2>
  {
	  uint32_t n;



	  n = *req_base & JTAG_SEQUENCE_TCK;
20002e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002e1a:	781b      	ldrb	r3, [r3, #0]
20002e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  if (n == 0U)
20002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002e24:	2b00      	cmp	r3, #0
20002e26:	d101      	bne.n	20002e2c <JTAG_Sequence+0x160>
  	  {
  		  n = 64U;
20002e28:	2340      	movs	r3, #64	@ 0x40
20002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	  }



	  if(*req_base & JTAG_SEQUENCE_TDO)
20002e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002e2e:	781b      	ldrb	r3, [r3, #0]
20002e30:	b25b      	sxtb	r3, r3
20002e32:	2b00      	cmp	r3, #0
20002e34:	da15      	bge.n	20002e62 <JTAG_Sequence+0x196>
	  {

		  copy_bits_lsb(TDO_SEQ_ARR, total_write_bit_cnt, n, TDO_PROCESSED_SEQ_ARR, total_read_bit_cnt);
20002e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002e38:	9300      	str	r3, [sp, #0]
20002e3a:	4b27      	ldr	r3, [pc, #156]	@ (20002ed8 <JTAG_Sequence+0x20c>)
20002e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20002e3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
20002e40:	4824      	ldr	r0, [pc, #144]	@ (20002ed4 <JTAG_Sequence+0x208>)
20002e42:	f7ff fc73 	bl	2000272c <copy_bits_lsb>
		  total_read_bit_cnt += n;
20002e46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
20002e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002e4a:	4413      	add	r3, r2
20002e4c:	643b      	str	r3, [r7, #64]	@ 0x40

		  if(total_read_bit_cnt % 8 )
20002e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002e50:	f003 0307 	and.w	r3, r3, #7
20002e54:	2b00      	cmp	r3, #0
20002e56:	d004      	beq.n	20002e62 <JTAG_Sequence+0x196>
		  {
			  total_read_bit_cnt = ( (total_read_bit_cnt / 8) +1) *8;
20002e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002e5a:	08db      	lsrs	r3, r3, #3
20002e5c:	3301      	adds	r3, #1
20002e5e:	00db      	lsls	r3, r3, #3
20002e60:	643b      	str	r3, [r7, #64]	@ 0x40
		  }


	  }

	  total_write_bit_cnt += n;
20002e62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
20002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002e66:	4413      	add	r3, r2
20002e68:	647b      	str	r3, [r7, #68]	@ 0x44


	  req_base += ( (n + 7U) /8U ) + 1;
20002e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002e6c:	3307      	adds	r3, #7
20002e6e:	08db      	lsrs	r3, r3, #3
20002e70:	3301      	adds	r3, #1
20002e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
20002e74:	4413      	add	r3, r2
20002e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  for(i = 0; i < count; i++)
20002e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002e7a:	3301      	adds	r3, #1
20002e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
20002e7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
20002e80:	68fb      	ldr	r3, [r7, #12]
20002e82:	429a      	cmp	r2, r3
20002e84:	d3c8      	bcc.n	20002e18 <JTAG_Sequence+0x14c>
    }


  //shift_right_bitstream_lsb(TDO_SEQ_ARR, total_write_bit_cnt, total_write_bit_cnt - total_read_bit_cnt);

  memcpy_first = DWT->CYCCNT;
20002e86:	4b0f      	ldr	r3, [pc, #60]	@ (20002ec4 <JTAG_Sequence+0x1f8>)
20002e88:	685b      	ldr	r3, [r3, #4]
20002e8a:	4a17      	ldr	r2, [pc, #92]	@ (20002ee8 <JTAG_Sequence+0x21c>)
20002e8c:	6013      	str	r3, [r2, #0]

  memcpy(response, TDO_PROCESSED_SEQ_ARR, total_read_bit_cnt /8);
20002e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002e90:	08db      	lsrs	r3, r3, #3
20002e92:	461a      	mov	r2, r3
20002e94:	4910      	ldr	r1, [pc, #64]	@ (20002ed8 <JTAG_Sequence+0x20c>)
20002e96:	6878      	ldr	r0, [r7, #4]
20002e98:	f00a fbca 	bl	2000d630 <memcpy>

  memcpy_elapsed_time = DWT ->CYCCNT - memcpy_first;
20002e9c:	4b09      	ldr	r3, [pc, #36]	@ (20002ec4 <JTAG_Sequence+0x1f8>)
20002e9e:	685a      	ldr	r2, [r3, #4]
20002ea0:	4b11      	ldr	r3, [pc, #68]	@ (20002ee8 <JTAG_Sequence+0x21c>)
20002ea2:	681b      	ldr	r3, [r3, #0]
20002ea4:	1ad3      	subs	r3, r2, r3
20002ea6:	4a11      	ldr	r2, [pc, #68]	@ (20002eec <JTAG_Sequence+0x220>)
20002ea8:	6013      	str	r3, [r2, #0]

  elapsed_time = DWT->CYCCNT - firstTime;
20002eaa:	4b06      	ldr	r3, [pc, #24]	@ (20002ec4 <JTAG_Sequence+0x1f8>)
20002eac:	685a      	ldr	r2, [r3, #4]
20002eae:	4b06      	ldr	r3, [pc, #24]	@ (20002ec8 <JTAG_Sequence+0x1fc>)
20002eb0:	681b      	ldr	r3, [r3, #0]
20002eb2:	1ad3      	subs	r3, r2, r3
20002eb4:	4a0e      	ldr	r2, [pc, #56]	@ (20002ef0 <JTAG_Sequence+0x224>)
20002eb6:	6013      	str	r3, [r2, #0]

  return total_read_bit_cnt / 8;
20002eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002eba:	08db      	lsrs	r3, r3, #3

}
20002ebc:	4618      	mov	r0, r3
20002ebe:	3748      	adds	r7, #72	@ 0x48
20002ec0:	46bd      	mov	sp, r7
20002ec2:	bd80      	pop	{r7, pc}
20002ec4:	e0001000 	.word	0xe0001000
20002ec8:	2000ea94 	.word	0x2000ea94
20002ecc:	2000da94 	.word	0x2000da94
20002ed0:	2000de94 	.word	0x2000de94
20002ed4:	2000e294 	.word	0x2000e294
20002ed8:	2000e694 	.word	0x2000e694
20002edc:	2000ea98 	.word	0x2000ea98
20002ee0:	40013400 	.word	0x40013400
20002ee4:	40003c00 	.word	0x40003c00
20002ee8:	2000ea9c 	.word	0x2000ea9c
20002eec:	2000eaa0 	.word	0x2000eaa0
20002ef0:	2000eaa4 	.word	0x2000eaa4

20002ef4 <JTAG_IR_Fast>:
}


#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_FAST()
JTAG_IR_Function(Fast)
20002ef4:	b580      	push	{r7, lr}
20002ef6:	b084      	sub	sp, #16
20002ef8:	af00      	add	r7, sp, #0
20002efa:	6078      	str	r0, [r7, #4]
20002efc:	f7ff fbea 	bl	200026d4 <PIN_SWDIO_TMS_SET>
20002f00:	f7ff fbe1 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
  __NOP();
#endif
#if (DELAY_FAST_CYCLES >= 3U)
  __NOP();
#endif
}
20002f04:	bf00      	nop
20002f06:	f7ff fbd7 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002f0a:	bf00      	nop
20002f0c:	f7ff fbdb 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002f10:	bf00      	nop
20002f12:	f7ff fbd1 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002f16:	bf00      	nop
20002f18:	f7ff fbe3 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
20002f1c:	f7ff fbd3 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002f20:	bf00      	nop
20002f22:	f7ff fbc9 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002f26:	bf00      	nop
20002f28:	f7ff fbcd 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002f2c:	bf00      	nop
20002f2e:	f7ff fbc3 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002f32:	bf00      	nop
20002f34:	2001      	movs	r0, #1
20002f36:	f7ff fbdb 	bl	200026f0 <PIN_TDI_OUT>
20002f3a:	4b3f      	ldr	r3, [pc, #252]	@ (20003038 <JTAG_IR_Fast+0x144>)
20002f3c:	7edb      	ldrb	r3, [r3, #27]
20002f3e:	4a3e      	ldr	r2, [pc, #248]	@ (20003038 <JTAG_IR_Fast+0x144>)
20002f40:	3310      	adds	r3, #16
20002f42:	005b      	lsls	r3, r3, #1
20002f44:	4413      	add	r3, r2
20002f46:	889b      	ldrh	r3, [r3, #4]
20002f48:	60fb      	str	r3, [r7, #12]
20002f4a:	e008      	b.n	20002f5e <JTAG_IR_Fast+0x6a>
20002f4c:	f7ff fbbb 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002f50:	bf00      	nop
20002f52:	f7ff fbb1 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002f56:	bf00      	nop
20002f58:	68fb      	ldr	r3, [r7, #12]
20002f5a:	3b01      	subs	r3, #1
20002f5c:	60fb      	str	r3, [r7, #12]
20002f5e:	68fb      	ldr	r3, [r7, #12]
20002f60:	2b00      	cmp	r3, #0
20002f62:	d1f3      	bne.n	20002f4c <JTAG_IR_Fast+0x58>
20002f64:	4b34      	ldr	r3, [pc, #208]	@ (20003038 <JTAG_IR_Fast+0x144>)
20002f66:	7edb      	ldrb	r3, [r3, #27]
20002f68:	461a      	mov	r2, r3
20002f6a:	4b33      	ldr	r3, [pc, #204]	@ (20003038 <JTAG_IR_Fast+0x144>)
20002f6c:	4413      	add	r3, r2
20002f6e:	7f1b      	ldrb	r3, [r3, #28]
20002f70:	3b01      	subs	r3, #1
20002f72:	60fb      	str	r3, [r7, #12]
20002f74:	e00e      	b.n	20002f94 <JTAG_IR_Fast+0xa0>
20002f76:	6878      	ldr	r0, [r7, #4]
20002f78:	f7ff fbba 	bl	200026f0 <PIN_TDI_OUT>
20002f7c:	f7ff fba3 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002f80:	bf00      	nop
20002f82:	f7ff fb99 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002f86:	bf00      	nop
20002f88:	687b      	ldr	r3, [r7, #4]
20002f8a:	085b      	lsrs	r3, r3, #1
20002f8c:	607b      	str	r3, [r7, #4]
20002f8e:	68fb      	ldr	r3, [r7, #12]
20002f90:	3b01      	subs	r3, #1
20002f92:	60fb      	str	r3, [r7, #12]
20002f94:	68fb      	ldr	r3, [r7, #12]
20002f96:	2b00      	cmp	r3, #0
20002f98:	d1ed      	bne.n	20002f76 <JTAG_IR_Fast+0x82>
20002f9a:	4b27      	ldr	r3, [pc, #156]	@ (20003038 <JTAG_IR_Fast+0x144>)
20002f9c:	7edb      	ldrb	r3, [r3, #27]
20002f9e:	4a26      	ldr	r2, [pc, #152]	@ (20003038 <JTAG_IR_Fast+0x144>)
20002fa0:	3318      	adds	r3, #24
20002fa2:	005b      	lsls	r3, r3, #1
20002fa4:	4413      	add	r3, r2
20002fa6:	889b      	ldrh	r3, [r3, #4]
20002fa8:	60fb      	str	r3, [r7, #12]
20002faa:	68fb      	ldr	r3, [r7, #12]
20002fac:	2b00      	cmp	r3, #0
20002fae:	d023      	beq.n	20002ff8 <JTAG_IR_Fast+0x104>
20002fb0:	6878      	ldr	r0, [r7, #4]
20002fb2:	f7ff fb9d 	bl	200026f0 <PIN_TDI_OUT>
20002fb6:	f7ff fb86 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002fba:	bf00      	nop
20002fbc:	f7ff fb7c 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002fc0:	bf00      	nop
20002fc2:	2001      	movs	r0, #1
20002fc4:	f7ff fb94 	bl	200026f0 <PIN_TDI_OUT>
20002fc8:	68fb      	ldr	r3, [r7, #12]
20002fca:	3b01      	subs	r3, #1
20002fcc:	60fb      	str	r3, [r7, #12]
20002fce:	e008      	b.n	20002fe2 <JTAG_IR_Fast+0xee>
20002fd0:	f7ff fb79 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002fd4:	bf00      	nop
20002fd6:	f7ff fb6f 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002fda:	bf00      	nop
20002fdc:	68fb      	ldr	r3, [r7, #12]
20002fde:	3b01      	subs	r3, #1
20002fe0:	60fb      	str	r3, [r7, #12]
20002fe2:	68fb      	ldr	r3, [r7, #12]
20002fe4:	2b00      	cmp	r3, #0
20002fe6:	d1f3      	bne.n	20002fd0 <JTAG_IR_Fast+0xdc>
20002fe8:	f7ff fb74 	bl	200026d4 <PIN_SWDIO_TMS_SET>
20002fec:	f7ff fb6b 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20002ff0:	bf00      	nop
20002ff2:	f7ff fb61 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20002ff6:	e00a      	b.n	2000300e <JTAG_IR_Fast+0x11a>
20002ff8:	f7ff fb6c 	bl	200026d4 <PIN_SWDIO_TMS_SET>
20002ffc:	6878      	ldr	r0, [r7, #4]
20002ffe:	f7ff fb77 	bl	200026f0 <PIN_TDI_OUT>
20003002:	f7ff fb60 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003006:	bf00      	nop
20003008:	f7ff fb56 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000300c:	bf00      	nop
2000300e:	f7ff fb5a 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003012:	bf00      	nop
20003014:	f7ff fb50 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003018:	bf00      	nop
2000301a:	f7ff fb62 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
2000301e:	f7ff fb52 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003022:	bf00      	nop
20003024:	f7ff fb48 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003028:	bf00      	nop
2000302a:	2001      	movs	r0, #1
2000302c:	f7ff fb60 	bl	200026f0 <PIN_TDI_OUT>
20003030:	3710      	adds	r7, #16
20003032:	46bd      	mov	sp, r7
20003034:	bd80      	pop	{r7, pc}
20003036:	bf00      	nop
20003038:	2000da4c 	.word	0x2000da4c

2000303c <JTAG_TransferFast>:
JTAG_TransferFunction(Fast)
2000303c:	b580      	push	{r7, lr}
2000303e:	b086      	sub	sp, #24
20003040:	af00      	add	r7, sp, #0
20003042:	6078      	str	r0, [r7, #4]
20003044:	6039      	str	r1, [r7, #0]
20003046:	f7ff fb45 	bl	200026d4 <PIN_SWDIO_TMS_SET>
2000304a:	f7ff fb3c 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000304e:	bf00      	nop
20003050:	f7ff fb32 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003054:	bf00      	nop
20003056:	f7ff fb44 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
2000305a:	f7ff fb34 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000305e:	bf00      	nop
20003060:	f7ff fb2a 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003064:	bf00      	nop
20003066:	f7ff fb2e 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000306a:	bf00      	nop
2000306c:	f7ff fb24 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003070:	bf00      	nop
20003072:	4b9a      	ldr	r3, [pc, #616]	@ (200032dc <JTAG_TransferFast+0x2a0>)
20003074:	7edb      	ldrb	r3, [r3, #27]
20003076:	60fb      	str	r3, [r7, #12]
20003078:	e008      	b.n	2000308c <JTAG_TransferFast+0x50>
2000307a:	f7ff fb24 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000307e:	bf00      	nop
20003080:	f7ff fb1a 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003084:	bf00      	nop
20003086:	68fb      	ldr	r3, [r7, #12]
20003088:	3b01      	subs	r3, #1
2000308a:	60fb      	str	r3, [r7, #12]
2000308c:	68fb      	ldr	r3, [r7, #12]
2000308e:	2b00      	cmp	r3, #0
20003090:	d1f3      	bne.n	2000307a <JTAG_TransferFast+0x3e>
20003092:	687b      	ldr	r3, [r7, #4]
20003094:	085b      	lsrs	r3, r3, #1
20003096:	4618      	mov	r0, r3
20003098:	f7ff fb2a 	bl	200026f0 <PIN_TDI_OUT>
2000309c:	f7ff fb13 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200030a0:	bf00      	nop
200030a2:	f7ff fb2f 	bl	20002704 <PIN_TDO_IN>
200030a6:	6178      	str	r0, [r7, #20]
200030a8:	f7ff fb06 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200030ac:	bf00      	nop
200030ae:	697b      	ldr	r3, [r7, #20]
200030b0:	005b      	lsls	r3, r3, #1
200030b2:	60bb      	str	r3, [r7, #8]
200030b4:	687b      	ldr	r3, [r7, #4]
200030b6:	089b      	lsrs	r3, r3, #2
200030b8:	4618      	mov	r0, r3
200030ba:	f7ff fb19 	bl	200026f0 <PIN_TDI_OUT>
200030be:	f7ff fb02 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200030c2:	bf00      	nop
200030c4:	f7ff fb1e 	bl	20002704 <PIN_TDO_IN>
200030c8:	6178      	str	r0, [r7, #20]
200030ca:	f7ff faf5 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200030ce:	bf00      	nop
200030d0:	68ba      	ldr	r2, [r7, #8]
200030d2:	697b      	ldr	r3, [r7, #20]
200030d4:	4313      	orrs	r3, r2
200030d6:	60bb      	str	r3, [r7, #8]
200030d8:	687b      	ldr	r3, [r7, #4]
200030da:	08db      	lsrs	r3, r3, #3
200030dc:	4618      	mov	r0, r3
200030de:	f7ff fb07 	bl	200026f0 <PIN_TDI_OUT>
200030e2:	f7ff faf0 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200030e6:	bf00      	nop
200030e8:	f7ff fb0c 	bl	20002704 <PIN_TDO_IN>
200030ec:	6178      	str	r0, [r7, #20]
200030ee:	f7ff fae3 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200030f2:	bf00      	nop
200030f4:	697b      	ldr	r3, [r7, #20]
200030f6:	009b      	lsls	r3, r3, #2
200030f8:	68ba      	ldr	r2, [r7, #8]
200030fa:	4313      	orrs	r3, r2
200030fc:	60bb      	str	r3, [r7, #8]
200030fe:	68bb      	ldr	r3, [r7, #8]
20003100:	2b01      	cmp	r3, #1
20003102:	d008      	beq.n	20003116 <JTAG_TransferFast+0xda>
20003104:	f7ff fae6 	bl	200026d4 <PIN_SWDIO_TMS_SET>
20003108:	f7ff fadd 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000310c:	bf00      	nop
2000310e:	f7ff fad3 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003112:	bf00      	nop
20003114:	e0b2      	b.n	2000327c <JTAG_TransferFast+0x240>
20003116:	687b      	ldr	r3, [r7, #4]
20003118:	f003 0302 	and.w	r3, r3, #2
2000311c:	2b00      	cmp	r3, #0
2000311e:	d05e      	beq.n	200031de <JTAG_TransferFast+0x1a2>
20003120:	2300      	movs	r3, #0
20003122:	613b      	str	r3, [r7, #16]
20003124:	231f      	movs	r3, #31
20003126:	60fb      	str	r3, [r7, #12]
20003128:	e013      	b.n	20003152 <JTAG_TransferFast+0x116>
2000312a:	f7ff facc 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000312e:	bf00      	nop
20003130:	f7ff fae8 	bl	20002704 <PIN_TDO_IN>
20003134:	6178      	str	r0, [r7, #20]
20003136:	f7ff fabf 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000313a:	bf00      	nop
2000313c:	697b      	ldr	r3, [r7, #20]
2000313e:	07db      	lsls	r3, r3, #31
20003140:	693a      	ldr	r2, [r7, #16]
20003142:	4313      	orrs	r3, r2
20003144:	613b      	str	r3, [r7, #16]
20003146:	693b      	ldr	r3, [r7, #16]
20003148:	085b      	lsrs	r3, r3, #1
2000314a:	613b      	str	r3, [r7, #16]
2000314c:	68fb      	ldr	r3, [r7, #12]
2000314e:	3b01      	subs	r3, #1
20003150:	60fb      	str	r3, [r7, #12]
20003152:	68fb      	ldr	r3, [r7, #12]
20003154:	2b00      	cmp	r3, #0
20003156:	d1e8      	bne.n	2000312a <JTAG_TransferFast+0xee>
20003158:	4b60      	ldr	r3, [pc, #384]	@ (200032dc <JTAG_TransferFast+0x2a0>)
2000315a:	7e9b      	ldrb	r3, [r3, #26]
2000315c:	461a      	mov	r2, r3
2000315e:	4b5f      	ldr	r3, [pc, #380]	@ (200032dc <JTAG_TransferFast+0x2a0>)
20003160:	7edb      	ldrb	r3, [r3, #27]
20003162:	1ad3      	subs	r3, r2, r3
20003164:	3b01      	subs	r3, #1
20003166:	60fb      	str	r3, [r7, #12]
20003168:	68fb      	ldr	r3, [r7, #12]
2000316a:	2b00      	cmp	r3, #0
2000316c:	d020      	beq.n	200031b0 <JTAG_TransferFast+0x174>
2000316e:	f7ff faaa 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003172:	bf00      	nop
20003174:	f7ff fac6 	bl	20002704 <PIN_TDO_IN>
20003178:	6178      	str	r0, [r7, #20]
2000317a:	f7ff fa9d 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000317e:	bf00      	nop
20003180:	68fb      	ldr	r3, [r7, #12]
20003182:	3b01      	subs	r3, #1
20003184:	60fb      	str	r3, [r7, #12]
20003186:	e008      	b.n	2000319a <JTAG_TransferFast+0x15e>
20003188:	f7ff fa9d 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000318c:	bf00      	nop
2000318e:	f7ff fa93 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003192:	bf00      	nop
20003194:	68fb      	ldr	r3, [r7, #12]
20003196:	3b01      	subs	r3, #1
20003198:	60fb      	str	r3, [r7, #12]
2000319a:	68fb      	ldr	r3, [r7, #12]
2000319c:	2b00      	cmp	r3, #0
2000319e:	d1f3      	bne.n	20003188 <JTAG_TransferFast+0x14c>
200031a0:	f7ff fa98 	bl	200026d4 <PIN_SWDIO_TMS_SET>
200031a4:	f7ff fa8f 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200031a8:	bf00      	nop
200031aa:	f7ff fa85 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200031ae:	e00a      	b.n	200031c6 <JTAG_TransferFast+0x18a>
200031b0:	f7ff fa90 	bl	200026d4 <PIN_SWDIO_TMS_SET>
200031b4:	f7ff fa87 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200031b8:	bf00      	nop
200031ba:	f7ff faa3 	bl	20002704 <PIN_TDO_IN>
200031be:	6178      	str	r0, [r7, #20]
200031c0:	f7ff fa7a 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200031c4:	bf00      	nop
200031c6:	697b      	ldr	r3, [r7, #20]
200031c8:	07db      	lsls	r3, r3, #31
200031ca:	693a      	ldr	r2, [r7, #16]
200031cc:	4313      	orrs	r3, r2
200031ce:	613b      	str	r3, [r7, #16]
200031d0:	683b      	ldr	r3, [r7, #0]
200031d2:	2b00      	cmp	r3, #0
200031d4:	d052      	beq.n	2000327c <JTAG_TransferFast+0x240>
200031d6:	683b      	ldr	r3, [r7, #0]
200031d8:	693a      	ldr	r2, [r7, #16]
200031da:	601a      	str	r2, [r3, #0]
200031dc:	e04e      	b.n	2000327c <JTAG_TransferFast+0x240>
200031de:	683b      	ldr	r3, [r7, #0]
200031e0:	681b      	ldr	r3, [r3, #0]
200031e2:	613b      	str	r3, [r7, #16]
200031e4:	231f      	movs	r3, #31
200031e6:	60fb      	str	r3, [r7, #12]
200031e8:	e00e      	b.n	20003208 <JTAG_TransferFast+0x1cc>
200031ea:	6938      	ldr	r0, [r7, #16]
200031ec:	f7ff fa80 	bl	200026f0 <PIN_TDI_OUT>
200031f0:	f7ff fa69 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200031f4:	bf00      	nop
200031f6:	f7ff fa5f 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200031fa:	bf00      	nop
200031fc:	693b      	ldr	r3, [r7, #16]
200031fe:	085b      	lsrs	r3, r3, #1
20003200:	613b      	str	r3, [r7, #16]
20003202:	68fb      	ldr	r3, [r7, #12]
20003204:	3b01      	subs	r3, #1
20003206:	60fb      	str	r3, [r7, #12]
20003208:	68fb      	ldr	r3, [r7, #12]
2000320a:	2b00      	cmp	r3, #0
2000320c:	d1ed      	bne.n	200031ea <JTAG_TransferFast+0x1ae>
2000320e:	4b33      	ldr	r3, [pc, #204]	@ (200032dc <JTAG_TransferFast+0x2a0>)
20003210:	7e9b      	ldrb	r3, [r3, #26]
20003212:	461a      	mov	r2, r3
20003214:	4b31      	ldr	r3, [pc, #196]	@ (200032dc <JTAG_TransferFast+0x2a0>)
20003216:	7edb      	ldrb	r3, [r3, #27]
20003218:	1ad3      	subs	r3, r2, r3
2000321a:	3b01      	subs	r3, #1
2000321c:	60fb      	str	r3, [r7, #12]
2000321e:	68fb      	ldr	r3, [r7, #12]
20003220:	2b00      	cmp	r3, #0
20003222:	d020      	beq.n	20003266 <JTAG_TransferFast+0x22a>
20003224:	6938      	ldr	r0, [r7, #16]
20003226:	f7ff fa63 	bl	200026f0 <PIN_TDI_OUT>
2000322a:	f7ff fa4c 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000322e:	bf00      	nop
20003230:	f7ff fa42 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003234:	bf00      	nop
20003236:	68fb      	ldr	r3, [r7, #12]
20003238:	3b01      	subs	r3, #1
2000323a:	60fb      	str	r3, [r7, #12]
2000323c:	e008      	b.n	20003250 <JTAG_TransferFast+0x214>
2000323e:	f7ff fa42 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003242:	bf00      	nop
20003244:	f7ff fa38 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003248:	bf00      	nop
2000324a:	68fb      	ldr	r3, [r7, #12]
2000324c:	3b01      	subs	r3, #1
2000324e:	60fb      	str	r3, [r7, #12]
20003250:	68fb      	ldr	r3, [r7, #12]
20003252:	2b00      	cmp	r3, #0
20003254:	d1f3      	bne.n	2000323e <JTAG_TransferFast+0x202>
20003256:	f7ff fa3d 	bl	200026d4 <PIN_SWDIO_TMS_SET>
2000325a:	f7ff fa34 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000325e:	bf00      	nop
20003260:	f7ff fa2a 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003264:	e00a      	b.n	2000327c <JTAG_TransferFast+0x240>
20003266:	f7ff fa35 	bl	200026d4 <PIN_SWDIO_TMS_SET>
2000326a:	6938      	ldr	r0, [r7, #16]
2000326c:	f7ff fa40 	bl	200026f0 <PIN_TDI_OUT>
20003270:	f7ff fa29 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003274:	bf00      	nop
20003276:	f7ff fa1f 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000327a:	bf00      	nop
2000327c:	f7ff fa23 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003280:	bf00      	nop
20003282:	f7ff fa19 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003286:	bf00      	nop
20003288:	f7ff fa2b 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
2000328c:	f7ff fa1b 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003290:	bf00      	nop
20003292:	f7ff fa11 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003296:	bf00      	nop
20003298:	2001      	movs	r0, #1
2000329a:	f7ff fa29 	bl	200026f0 <PIN_TDI_OUT>
2000329e:	687b      	ldr	r3, [r7, #4]
200032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200032a4:	2b00      	cmp	r3, #0
200032a6:	d004      	beq.n	200032b2 <JTAG_TransferFast+0x276>
200032a8:	f7ff fa34 	bl	20002714 <TIMESTAMP_GET>
200032ac:	4603      	mov	r3, r0
200032ae:	4a0b      	ldr	r2, [pc, #44]	@ (200032dc <JTAG_TransferFast+0x2a0>)
200032b0:	6093      	str	r3, [r2, #8]
200032b2:	4b0a      	ldr	r3, [pc, #40]	@ (200032dc <JTAG_TransferFast+0x2a0>)
200032b4:	7b1b      	ldrb	r3, [r3, #12]
200032b6:	60fb      	str	r3, [r7, #12]
200032b8:	e005      	b.n	200032c6 <JTAG_TransferFast+0x28a>
200032ba:	f7ff fa04 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200032be:	bf00      	nop
200032c0:	f7ff f9fa 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200032c4:	bf00      	nop
200032c6:	68fb      	ldr	r3, [r7, #12]
200032c8:	1e5a      	subs	r2, r3, #1
200032ca:	60fa      	str	r2, [r7, #12]
200032cc:	2b00      	cmp	r3, #0
200032ce:	d1f4      	bne.n	200032ba <JTAG_TransferFast+0x27e>
200032d0:	68bb      	ldr	r3, [r7, #8]
200032d2:	b2db      	uxtb	r3, r3
200032d4:	4618      	mov	r0, r3
200032d6:	3718      	adds	r7, #24
200032d8:	46bd      	mov	sp, r7
200032da:	bd80      	pop	{r7, pc}
200032dc:	2000da4c 	.word	0x2000da4c

200032e0 <JTAG_IR_Slow>:

#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_SLOW(DAP_Data.clock_delay)
JTAG_IR_Function(Slow)
200032e0:	b580      	push	{r7, lr}
200032e2:	b09c      	sub	sp, #112	@ 0x70
200032e4:	af00      	add	r7, sp, #0
200032e6:	6078      	str	r0, [r7, #4]
200032e8:	f7ff f9f4 	bl	200026d4 <PIN_SWDIO_TMS_SET>
200032ec:	f7ff f9eb 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200032f0:	4b63      	ldr	r3, [pc, #396]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
200032f2:	685b      	ldr	r3, [r3, #4]
200032f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
200032f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200032f8:	3b01      	subs	r3, #1
200032fa:	d1fd      	bne.n	200032f8 <JTAG_IR_Slow+0x18>
200032fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
200032fe:	bf00      	nop
20003300:	f7ff f9da 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003304:	4b5e      	ldr	r3, [pc, #376]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003306:	685b      	ldr	r3, [r3, #4]
20003308:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
2000330a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000330c:	3b01      	subs	r3, #1
2000330e:	d1fd      	bne.n	2000330c <JTAG_IR_Slow+0x2c>
20003310:	653b      	str	r3, [r7, #80]	@ 0x50
}
20003312:	bf00      	nop
20003314:	f7ff f9d7 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003318:	4b59      	ldr	r3, [pc, #356]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
2000331a:	685b      	ldr	r3, [r3, #4]
2000331c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
2000331e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20003320:	3b01      	subs	r3, #1
20003322:	d1fd      	bne.n	20003320 <JTAG_IR_Slow+0x40>
20003324:	657b      	str	r3, [r7, #84]	@ 0x54
}
20003326:	bf00      	nop
20003328:	f7ff f9c6 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000332c:	4b54      	ldr	r3, [pc, #336]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
2000332e:	685b      	ldr	r3, [r3, #4]
20003330:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20003332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20003334:	3b01      	subs	r3, #1
20003336:	d1fd      	bne.n	20003334 <JTAG_IR_Slow+0x54>
20003338:	65bb      	str	r3, [r7, #88]	@ 0x58
}
2000333a:	bf00      	nop
2000333c:	f7ff f9d1 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
20003340:	f7ff f9c1 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003344:	4b4e      	ldr	r3, [pc, #312]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003346:	685b      	ldr	r3, [r3, #4]
20003348:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
2000334a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
2000334c:	3b01      	subs	r3, #1
2000334e:	d1fd      	bne.n	2000334c <JTAG_IR_Slow+0x6c>
20003350:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20003352:	bf00      	nop
20003354:	f7ff f9b0 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003358:	4b49      	ldr	r3, [pc, #292]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
2000335a:	685b      	ldr	r3, [r3, #4]
2000335c:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
2000335e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20003360:	3b01      	subs	r3, #1
20003362:	d1fd      	bne.n	20003360 <JTAG_IR_Slow+0x80>
20003364:	663b      	str	r3, [r7, #96]	@ 0x60
}
20003366:	bf00      	nop
20003368:	f7ff f9ad 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000336c:	4b44      	ldr	r3, [pc, #272]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
2000336e:	685b      	ldr	r3, [r3, #4]
20003370:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20003372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20003374:	3b01      	subs	r3, #1
20003376:	d1fd      	bne.n	20003374 <JTAG_IR_Slow+0x94>
20003378:	667b      	str	r3, [r7, #100]	@ 0x64
}
2000337a:	bf00      	nop
2000337c:	f7ff f99c 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003380:	4b3f      	ldr	r3, [pc, #252]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003382:	685b      	ldr	r3, [r3, #4]
20003384:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
20003386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20003388:	3b01      	subs	r3, #1
2000338a:	d1fd      	bne.n	20003388 <JTAG_IR_Slow+0xa8>
2000338c:	66bb      	str	r3, [r7, #104]	@ 0x68
}
2000338e:	bf00      	nop
20003390:	2001      	movs	r0, #1
20003392:	f7ff f9ad 	bl	200026f0 <PIN_TDI_OUT>
20003396:	4b3a      	ldr	r3, [pc, #232]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003398:	7edb      	ldrb	r3, [r3, #27]
2000339a:	4a39      	ldr	r2, [pc, #228]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
2000339c:	3310      	adds	r3, #16
2000339e:	005b      	lsls	r3, r3, #1
200033a0:	4413      	add	r3, r2
200033a2:	889b      	ldrh	r3, [r3, #4]
200033a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
200033a6:	e016      	b.n	200033d6 <JTAG_IR_Slow+0xf6>
200033a8:	f7ff f98d 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200033ac:	4b34      	ldr	r3, [pc, #208]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
200033ae:	685b      	ldr	r3, [r3, #4]
200033b0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
200033b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200033b4:	3b01      	subs	r3, #1
200033b6:	d1fd      	bne.n	200033b4 <JTAG_IR_Slow+0xd4>
200033b8:	647b      	str	r3, [r7, #68]	@ 0x44
}
200033ba:	bf00      	nop
200033bc:	f7ff f97c 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200033c0:	4b2f      	ldr	r3, [pc, #188]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
200033c2:	685b      	ldr	r3, [r3, #4]
200033c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
200033c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
200033c8:	3b01      	subs	r3, #1
200033ca:	d1fd      	bne.n	200033c8 <JTAG_IR_Slow+0xe8>
200033cc:	64bb      	str	r3, [r7, #72]	@ 0x48
}
200033ce:	bf00      	nop
200033d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200033d2:	3b01      	subs	r3, #1
200033d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
200033d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200033d8:	2b00      	cmp	r3, #0
200033da:	d1e5      	bne.n	200033a8 <JTAG_IR_Slow+0xc8>
200033dc:	4b28      	ldr	r3, [pc, #160]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
200033de:	7edb      	ldrb	r3, [r3, #27]
200033e0:	461a      	mov	r2, r3
200033e2:	4b27      	ldr	r3, [pc, #156]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
200033e4:	4413      	add	r3, r2
200033e6:	7f1b      	ldrb	r3, [r3, #28]
200033e8:	3b01      	subs	r3, #1
200033ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
200033ec:	e01c      	b.n	20003428 <JTAG_IR_Slow+0x148>
200033ee:	6878      	ldr	r0, [r7, #4]
200033f0:	f7ff f97e 	bl	200026f0 <PIN_TDI_OUT>
200033f4:	f7ff f967 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200033f8:	4b21      	ldr	r3, [pc, #132]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
200033fa:	685b      	ldr	r3, [r3, #4]
200033fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
200033fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20003400:	3b01      	subs	r3, #1
20003402:	d1fd      	bne.n	20003400 <JTAG_IR_Slow+0x120>
20003404:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003406:	bf00      	nop
20003408:	f7ff f956 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000340c:	4b1c      	ldr	r3, [pc, #112]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
2000340e:	685b      	ldr	r3, [r3, #4]
20003410:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20003412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20003414:	3b01      	subs	r3, #1
20003416:	d1fd      	bne.n	20003414 <JTAG_IR_Slow+0x134>
20003418:	643b      	str	r3, [r7, #64]	@ 0x40
}
2000341a:	bf00      	nop
2000341c:	687b      	ldr	r3, [r7, #4]
2000341e:	085b      	lsrs	r3, r3, #1
20003420:	607b      	str	r3, [r7, #4]
20003422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003424:	3b01      	subs	r3, #1
20003426:	66fb      	str	r3, [r7, #108]	@ 0x6c
20003428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000342a:	2b00      	cmp	r3, #0
2000342c:	d1df      	bne.n	200033ee <JTAG_IR_Slow+0x10e>
2000342e:	4b14      	ldr	r3, [pc, #80]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003430:	7edb      	ldrb	r3, [r3, #27]
20003432:	4a13      	ldr	r2, [pc, #76]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003434:	3318      	adds	r3, #24
20003436:	005b      	lsls	r3, r3, #1
20003438:	4413      	add	r3, r2
2000343a:	889b      	ldrh	r3, [r3, #4]
2000343c:	66fb      	str	r3, [r7, #108]	@ 0x6c
2000343e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003440:	2b00      	cmp	r3, #0
20003442:	d04f      	beq.n	200034e4 <JTAG_IR_Slow+0x204>
20003444:	6878      	ldr	r0, [r7, #4]
20003446:	f7ff f953 	bl	200026f0 <PIN_TDI_OUT>
2000344a:	f7ff f93c 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000344e:	4b0c      	ldr	r3, [pc, #48]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003450:	685b      	ldr	r3, [r3, #4]
20003452:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003456:	3b01      	subs	r3, #1
20003458:	d1fd      	bne.n	20003456 <JTAG_IR_Slow+0x176>
2000345a:	637b      	str	r3, [r7, #52]	@ 0x34
}
2000345c:	bf00      	nop
2000345e:	f7ff f92b 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003462:	4b07      	ldr	r3, [pc, #28]	@ (20003480 <JTAG_IR_Slow+0x1a0>)
20003464:	685b      	ldr	r3, [r3, #4]
20003466:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000346a:	3b01      	subs	r3, #1
2000346c:	d1fd      	bne.n	2000346a <JTAG_IR_Slow+0x18a>
2000346e:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20003470:	bf00      	nop
20003472:	2001      	movs	r0, #1
20003474:	f7ff f93c 	bl	200026f0 <PIN_TDI_OUT>
20003478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000347a:	3b01      	subs	r3, #1
2000347c:	66fb      	str	r3, [r7, #108]	@ 0x6c
2000347e:	e018      	b.n	200034b2 <JTAG_IR_Slow+0x1d2>
20003480:	2000da4c 	.word	0x2000da4c
20003484:	f7ff f91f 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003488:	4b3b      	ldr	r3, [pc, #236]	@ (20003578 <JTAG_IR_Slow+0x298>)
2000348a:	685b      	ldr	r3, [r3, #4]
2000348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
2000348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003490:	3b01      	subs	r3, #1
20003492:	d1fd      	bne.n	20003490 <JTAG_IR_Slow+0x1b0>
20003494:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20003496:	bf00      	nop
20003498:	f7ff f90e 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000349c:	4b36      	ldr	r3, [pc, #216]	@ (20003578 <JTAG_IR_Slow+0x298>)
2000349e:	685b      	ldr	r3, [r3, #4]
200034a0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
200034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200034a4:	3b01      	subs	r3, #1
200034a6:	d1fd      	bne.n	200034a4 <JTAG_IR_Slow+0x1c4>
200034a8:	633b      	str	r3, [r7, #48]	@ 0x30
}
200034aa:	bf00      	nop
200034ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200034ae:	3b01      	subs	r3, #1
200034b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
200034b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200034b4:	2b00      	cmp	r3, #0
200034b6:	d1e5      	bne.n	20003484 <JTAG_IR_Slow+0x1a4>
200034b8:	f7ff f90c 	bl	200026d4 <PIN_SWDIO_TMS_SET>
200034bc:	f7ff f903 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200034c0:	4b2d      	ldr	r3, [pc, #180]	@ (20003578 <JTAG_IR_Slow+0x298>)
200034c2:	685b      	ldr	r3, [r3, #4]
200034c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
200034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200034c8:	3b01      	subs	r3, #1
200034ca:	d1fd      	bne.n	200034c8 <JTAG_IR_Slow+0x1e8>
200034cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
200034ce:	bf00      	nop
200034d0:	f7ff f8f2 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200034d4:	4b28      	ldr	r3, [pc, #160]	@ (20003578 <JTAG_IR_Slow+0x298>)
200034d6:	685b      	ldr	r3, [r3, #4]
200034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
200034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200034dc:	3b01      	subs	r3, #1
200034de:	d1fd      	bne.n	200034dc <JTAG_IR_Slow+0x1fc>
200034e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
200034e2:	e018      	b.n	20003516 <JTAG_IR_Slow+0x236>
200034e4:	f7ff f8f6 	bl	200026d4 <PIN_SWDIO_TMS_SET>
200034e8:	6878      	ldr	r0, [r7, #4]
200034ea:	f7ff f901 	bl	200026f0 <PIN_TDI_OUT>
200034ee:	f7ff f8ea 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200034f2:	4b21      	ldr	r3, [pc, #132]	@ (20003578 <JTAG_IR_Slow+0x298>)
200034f4:	685b      	ldr	r3, [r3, #4]
200034f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
200034f8:	69fb      	ldr	r3, [r7, #28]
200034fa:	3b01      	subs	r3, #1
200034fc:	d1fd      	bne.n	200034fa <JTAG_IR_Slow+0x21a>
200034fe:	61fb      	str	r3, [r7, #28]
}
20003500:	bf00      	nop
20003502:	f7ff f8d9 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003506:	4b1c      	ldr	r3, [pc, #112]	@ (20003578 <JTAG_IR_Slow+0x298>)
20003508:	685b      	ldr	r3, [r3, #4]
2000350a:	623b      	str	r3, [r7, #32]
  __ASM volatile (
2000350c:	6a3b      	ldr	r3, [r7, #32]
2000350e:	3b01      	subs	r3, #1
20003510:	d1fd      	bne.n	2000350e <JTAG_IR_Slow+0x22e>
20003512:	623b      	str	r3, [r7, #32]
}
20003514:	bf00      	nop
20003516:	f7ff f8d6 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000351a:	4b17      	ldr	r3, [pc, #92]	@ (20003578 <JTAG_IR_Slow+0x298>)
2000351c:	685b      	ldr	r3, [r3, #4]
2000351e:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003520:	68fb      	ldr	r3, [r7, #12]
20003522:	3b01      	subs	r3, #1
20003524:	d1fd      	bne.n	20003522 <JTAG_IR_Slow+0x242>
20003526:	60fb      	str	r3, [r7, #12]
}
20003528:	bf00      	nop
2000352a:	f7ff f8c5 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000352e:	4b12      	ldr	r3, [pc, #72]	@ (20003578 <JTAG_IR_Slow+0x298>)
20003530:	685b      	ldr	r3, [r3, #4]
20003532:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003534:	693b      	ldr	r3, [r7, #16]
20003536:	3b01      	subs	r3, #1
20003538:	d1fd      	bne.n	20003536 <JTAG_IR_Slow+0x256>
2000353a:	613b      	str	r3, [r7, #16]
}
2000353c:	bf00      	nop
2000353e:	f7ff f8d0 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
20003542:	f7ff f8c0 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003546:	4b0c      	ldr	r3, [pc, #48]	@ (20003578 <JTAG_IR_Slow+0x298>)
20003548:	685b      	ldr	r3, [r3, #4]
2000354a:	617b      	str	r3, [r7, #20]
  __ASM volatile (
2000354c:	697b      	ldr	r3, [r7, #20]
2000354e:	3b01      	subs	r3, #1
20003550:	d1fd      	bne.n	2000354e <JTAG_IR_Slow+0x26e>
20003552:	617b      	str	r3, [r7, #20]
}
20003554:	bf00      	nop
20003556:	f7ff f8af 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000355a:	4b07      	ldr	r3, [pc, #28]	@ (20003578 <JTAG_IR_Slow+0x298>)
2000355c:	685b      	ldr	r3, [r3, #4]
2000355e:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003560:	69bb      	ldr	r3, [r7, #24]
20003562:	3b01      	subs	r3, #1
20003564:	d1fd      	bne.n	20003562 <JTAG_IR_Slow+0x282>
20003566:	61bb      	str	r3, [r7, #24]
}
20003568:	bf00      	nop
2000356a:	2001      	movs	r0, #1
2000356c:	f7ff f8c0 	bl	200026f0 <PIN_TDI_OUT>
20003570:	3770      	adds	r7, #112	@ 0x70
20003572:	46bd      	mov	sp, r7
20003574:	bd80      	pop	{r7, pc}
20003576:	bf00      	nop
20003578:	2000da4c 	.word	0x2000da4c

2000357c <JTAG_TransferSlow>:
JTAG_TransferFunction(Slow)
2000357c:	b580      	push	{r7, lr}
2000357e:	b0b0      	sub	sp, #192	@ 0xc0
20003580:	af00      	add	r7, sp, #0
20003582:	6078      	str	r0, [r7, #4]
20003584:	6039      	str	r1, [r7, #0]
20003586:	f7ff f8a5 	bl	200026d4 <PIN_SWDIO_TMS_SET>
2000358a:	f7ff f89c 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
2000358e:	4b8a      	ldr	r3, [pc, #552]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
20003590:	685b      	ldr	r3, [r3, #4]
20003592:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  __ASM volatile (
20003596:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
2000359a:	3b01      	subs	r3, #1
2000359c:	d1fd      	bne.n	2000359a <JTAG_TransferSlow+0x1e>
2000359e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
200035a2:	bf00      	nop
200035a4:	f7ff f888 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200035a8:	4b83      	ldr	r3, [pc, #524]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
200035aa:	685b      	ldr	r3, [r3, #4]
200035ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  __ASM volatile (
200035b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
200035b4:	3b01      	subs	r3, #1
200035b6:	d1fd      	bne.n	200035b4 <JTAG_TransferSlow+0x38>
200035b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
200035bc:	bf00      	nop
200035be:	f7ff f890 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
200035c2:	f7ff f880 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200035c6:	4b7c      	ldr	r3, [pc, #496]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
200035c8:	685b      	ldr	r3, [r3, #4]
200035ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  __ASM volatile (
200035ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
200035d2:	3b01      	subs	r3, #1
200035d4:	d1fd      	bne.n	200035d2 <JTAG_TransferSlow+0x56>
200035d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
200035da:	bf00      	nop
200035dc:	f7ff f86c 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200035e0:	4b75      	ldr	r3, [pc, #468]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
200035e2:	685b      	ldr	r3, [r3, #4]
200035e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  __ASM volatile (
200035e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
200035ec:	3b01      	subs	r3, #1
200035ee:	d1fd      	bne.n	200035ec <JTAG_TransferSlow+0x70>
200035f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
}
200035f4:	bf00      	nop
200035f6:	f7ff f866 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200035fa:	4b6f      	ldr	r3, [pc, #444]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
200035fc:	685b      	ldr	r3, [r3, #4]
200035fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  __ASM volatile (
20003602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
20003606:	3b01      	subs	r3, #1
20003608:	d1fd      	bne.n	20003606 <JTAG_TransferSlow+0x8a>
2000360a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
}
2000360e:	bf00      	nop
20003610:	f7ff f852 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003614:	4b68      	ldr	r3, [pc, #416]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
20003616:	685b      	ldr	r3, [r3, #4]
20003618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  __ASM volatile (
2000361c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
20003620:	3b01      	subs	r3, #1
20003622:	d1fd      	bne.n	20003620 <JTAG_TransferSlow+0xa4>
20003624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
}
20003628:	bf00      	nop
2000362a:	4b63      	ldr	r3, [pc, #396]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
2000362c:	7edb      	ldrb	r3, [r3, #27]
2000362e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003632:	e01e      	b.n	20003672 <JTAG_TransferSlow+0xf6>
20003634:	f7ff f847 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003638:	4b5f      	ldr	r3, [pc, #380]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
2000363a:	685b      	ldr	r3, [r3, #4]
2000363c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile (
20003640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
20003644:	3b01      	subs	r3, #1
20003646:	d1fd      	bne.n	20003644 <JTAG_TransferSlow+0xc8>
20003648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
}
2000364c:	bf00      	nop
2000364e:	f7ff f833 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003652:	4b59      	ldr	r3, [pc, #356]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
20003654:	685b      	ldr	r3, [r3, #4]
20003656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  __ASM volatile (
2000365a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
2000365e:	3b01      	subs	r3, #1
20003660:	d1fd      	bne.n	2000365e <JTAG_TransferSlow+0xe2>
20003662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
}
20003666:	bf00      	nop
20003668:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000366c:	3b01      	subs	r3, #1
2000366e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003676:	2b00      	cmp	r3, #0
20003678:	d1dc      	bne.n	20003634 <JTAG_TransferSlow+0xb8>
2000367a:	687b      	ldr	r3, [r7, #4]
2000367c:	085b      	lsrs	r3, r3, #1
2000367e:	4618      	mov	r0, r3
20003680:	f7ff f836 	bl	200026f0 <PIN_TDI_OUT>
20003684:	f7ff f81f 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003688:	4b4b      	ldr	r3, [pc, #300]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
2000368a:	685b      	ldr	r3, [r3, #4]
2000368c:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
2000368e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20003690:	3b01      	subs	r3, #1
20003692:	d1fd      	bne.n	20003690 <JTAG_TransferSlow+0x114>
20003694:	67bb      	str	r3, [r7, #120]	@ 0x78
}
20003696:	bf00      	nop
20003698:	f7ff f834 	bl	20002704 <PIN_TDO_IN>
2000369c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200036a0:	f7ff f80a 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200036a4:	4b44      	ldr	r3, [pc, #272]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
200036a6:	685b      	ldr	r3, [r3, #4]
200036a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile (
200036aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200036ac:	3b01      	subs	r3, #1
200036ae:	d1fd      	bne.n	200036ac <JTAG_TransferSlow+0x130>
200036b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
}
200036b2:	bf00      	nop
200036b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
200036b8:	005b      	lsls	r3, r3, #1
200036ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
200036be:	687b      	ldr	r3, [r7, #4]
200036c0:	089b      	lsrs	r3, r3, #2
200036c2:	4618      	mov	r0, r3
200036c4:	f7ff f814 	bl	200026f0 <PIN_TDI_OUT>
200036c8:	f7fe fffd 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200036cc:	4b3a      	ldr	r3, [pc, #232]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
200036ce:	685b      	ldr	r3, [r3, #4]
200036d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  __ASM volatile (
200036d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
200036d8:	3b01      	subs	r3, #1
200036da:	d1fd      	bne.n	200036d8 <JTAG_TransferSlow+0x15c>
200036dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
}
200036e0:	bf00      	nop
200036e2:	f7ff f80f 	bl	20002704 <PIN_TDO_IN>
200036e6:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200036ea:	f7fe ffe5 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200036ee:	4b32      	ldr	r3, [pc, #200]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
200036f0:	685b      	ldr	r3, [r3, #4]
200036f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  __ASM volatile (
200036f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
200036fa:	3b01      	subs	r3, #1
200036fc:	d1fd      	bne.n	200036fa <JTAG_TransferSlow+0x17e>
200036fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
}
20003702:	bf00      	nop
20003704:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
20003708:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
2000370c:	4313      	orrs	r3, r2
2000370e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20003712:	687b      	ldr	r3, [r7, #4]
20003714:	08db      	lsrs	r3, r3, #3
20003716:	4618      	mov	r0, r3
20003718:	f7fe ffea 	bl	200026f0 <PIN_TDI_OUT>
2000371c:	f7fe ffd3 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003720:	4b25      	ldr	r3, [pc, #148]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
20003722:	685b      	ldr	r3, [r3, #4]
20003724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile (
20003728:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
2000372c:	3b01      	subs	r3, #1
2000372e:	d1fd      	bne.n	2000372c <JTAG_TransferSlow+0x1b0>
20003730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
}
20003734:	bf00      	nop
20003736:	f7fe ffe5 	bl	20002704 <PIN_TDO_IN>
2000373a:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
2000373e:	f7fe ffbb 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003742:	4b1d      	ldr	r3, [pc, #116]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
20003744:	685b      	ldr	r3, [r3, #4]
20003746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  __ASM volatile (
2000374a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
2000374e:	3b01      	subs	r3, #1
20003750:	d1fd      	bne.n	2000374e <JTAG_TransferSlow+0x1d2>
20003752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
}
20003756:	bf00      	nop
20003758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
2000375c:	009b      	lsls	r3, r3, #2
2000375e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
20003762:	4313      	orrs	r3, r2
20003764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20003768:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
2000376c:	2b01      	cmp	r3, #1
2000376e:	d016      	beq.n	2000379e <JTAG_TransferSlow+0x222>
20003770:	f7fe ffb0 	bl	200026d4 <PIN_SWDIO_TMS_SET>
20003774:	f7fe ffa7 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003778:	4b0f      	ldr	r3, [pc, #60]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
2000377a:	685b      	ldr	r3, [r3, #4]
2000377c:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
2000377e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
20003780:	3b01      	subs	r3, #1
20003782:	d1fd      	bne.n	20003780 <JTAG_TransferSlow+0x204>
20003784:	673b      	str	r3, [r7, #112]	@ 0x70
}
20003786:	bf00      	nop
20003788:	f7fe ff96 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000378c:	4b0a      	ldr	r3, [pc, #40]	@ (200037b8 <JTAG_TransferSlow+0x23c>)
2000378e:	685b      	ldr	r3, [r3, #4]
20003790:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
20003792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20003794:	3b01      	subs	r3, #1
20003796:	d1fd      	bne.n	20003794 <JTAG_TransferSlow+0x218>
20003798:	677b      	str	r3, [r7, #116]	@ 0x74
}
2000379a:	bf00      	nop
2000379c:	e16d      	b.n	20003a7a <JTAG_TransferSlow+0x4fe>
2000379e:	687b      	ldr	r3, [r7, #4]
200037a0:	f003 0302 	and.w	r3, r3, #2
200037a4:	2b00      	cmp	r3, #0
200037a6:	f000 80c0 	beq.w	2000392a <JTAG_TransferSlow+0x3ae>
200037aa:	2300      	movs	r3, #0
200037ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200037b0:	231f      	movs	r3, #31
200037b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200037b6:	e02b      	b.n	20003810 <JTAG_TransferSlow+0x294>
200037b8:	2000da4c 	.word	0x2000da4c
200037bc:	f7fe ff83 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200037c0:	4b86      	ldr	r3, [pc, #536]	@ (200039dc <JTAG_TransferSlow+0x460>)
200037c2:	685b      	ldr	r3, [r3, #4]
200037c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
200037c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
200037c8:	3b01      	subs	r3, #1
200037ca:	d1fd      	bne.n	200037c8 <JTAG_TransferSlow+0x24c>
200037cc:	66bb      	str	r3, [r7, #104]	@ 0x68
}
200037ce:	bf00      	nop
200037d0:	f7fe ff98 	bl	20002704 <PIN_TDO_IN>
200037d4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200037d8:	f7fe ff6e 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200037dc:	4b7f      	ldr	r3, [pc, #508]	@ (200039dc <JTAG_TransferSlow+0x460>)
200037de:	685b      	ldr	r3, [r3, #4]
200037e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
200037e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200037e4:	3b01      	subs	r3, #1
200037e6:	d1fd      	bne.n	200037e4 <JTAG_TransferSlow+0x268>
200037e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
200037ea:	bf00      	nop
200037ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
200037f0:	07db      	lsls	r3, r3, #31
200037f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
200037f6:	4313      	orrs	r3, r2
200037f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200037fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
20003800:	085b      	lsrs	r3, r3, #1
20003802:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20003806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000380a:	3b01      	subs	r3, #1
2000380c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003814:	2b00      	cmp	r3, #0
20003816:	d1d1      	bne.n	200037bc <JTAG_TransferSlow+0x240>
20003818:	4b70      	ldr	r3, [pc, #448]	@ (200039dc <JTAG_TransferSlow+0x460>)
2000381a:	7e9b      	ldrb	r3, [r3, #26]
2000381c:	461a      	mov	r2, r3
2000381e:	4b6f      	ldr	r3, [pc, #444]	@ (200039dc <JTAG_TransferSlow+0x460>)
20003820:	7edb      	ldrb	r3, [r3, #27]
20003822:	1ad3      	subs	r3, r2, r3
20003824:	3b01      	subs	r3, #1
20003826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
2000382a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000382e:	2b00      	cmp	r3, #0
20003830:	d050      	beq.n	200038d4 <JTAG_TransferSlow+0x358>
20003832:	f7fe ff48 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003836:	4b69      	ldr	r3, [pc, #420]	@ (200039dc <JTAG_TransferSlow+0x460>)
20003838:	685b      	ldr	r3, [r3, #4]
2000383a:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
2000383c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
2000383e:	3b01      	subs	r3, #1
20003840:	d1fd      	bne.n	2000383e <JTAG_TransferSlow+0x2c2>
20003842:	663b      	str	r3, [r7, #96]	@ 0x60
}
20003844:	bf00      	nop
20003846:	f7fe ff5d 	bl	20002704 <PIN_TDO_IN>
2000384a:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
2000384e:	f7fe ff33 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003852:	4b62      	ldr	r3, [pc, #392]	@ (200039dc <JTAG_TransferSlow+0x460>)
20003854:	685b      	ldr	r3, [r3, #4]
20003856:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20003858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
2000385a:	3b01      	subs	r3, #1
2000385c:	d1fd      	bne.n	2000385a <JTAG_TransferSlow+0x2de>
2000385e:	667b      	str	r3, [r7, #100]	@ 0x64
}
20003860:	bf00      	nop
20003862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003866:	3b01      	subs	r3, #1
20003868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
2000386c:	e018      	b.n	200038a0 <JTAG_TransferSlow+0x324>
2000386e:	f7fe ff2a 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003872:	4b5a      	ldr	r3, [pc, #360]	@ (200039dc <JTAG_TransferSlow+0x460>)
20003874:	685b      	ldr	r3, [r3, #4]
20003876:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20003878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
2000387a:	3b01      	subs	r3, #1
2000387c:	d1fd      	bne.n	2000387a <JTAG_TransferSlow+0x2fe>
2000387e:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20003880:	bf00      	nop
20003882:	f7fe ff19 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003886:	4b55      	ldr	r3, [pc, #340]	@ (200039dc <JTAG_TransferSlow+0x460>)
20003888:	685b      	ldr	r3, [r3, #4]
2000388a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
2000388c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
2000388e:	3b01      	subs	r3, #1
20003890:	d1fd      	bne.n	2000388e <JTAG_TransferSlow+0x312>
20003892:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20003894:	bf00      	nop
20003896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000389a:	3b01      	subs	r3, #1
2000389c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200038a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200038a4:	2b00      	cmp	r3, #0
200038a6:	d1e2      	bne.n	2000386e <JTAG_TransferSlow+0x2f2>
200038a8:	f7fe ff14 	bl	200026d4 <PIN_SWDIO_TMS_SET>
200038ac:	f7fe ff0b 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200038b0:	4b4a      	ldr	r3, [pc, #296]	@ (200039dc <JTAG_TransferSlow+0x460>)
200038b2:	685b      	ldr	r3, [r3, #4]
200038b4:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
200038b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200038b8:	3b01      	subs	r3, #1
200038ba:	d1fd      	bne.n	200038b8 <JTAG_TransferSlow+0x33c>
200038bc:	653b      	str	r3, [r7, #80]	@ 0x50
}
200038be:	bf00      	nop
200038c0:	f7fe fefa 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200038c4:	4b45      	ldr	r3, [pc, #276]	@ (200039dc <JTAG_TransferSlow+0x460>)
200038c6:	685b      	ldr	r3, [r3, #4]
200038c8:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
200038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200038cc:	3b01      	subs	r3, #1
200038ce:	d1fd      	bne.n	200038cc <JTAG_TransferSlow+0x350>
200038d0:	657b      	str	r3, [r7, #84]	@ 0x54
}
200038d2:	e019      	b.n	20003908 <JTAG_TransferSlow+0x38c>
200038d4:	f7fe fefe 	bl	200026d4 <PIN_SWDIO_TMS_SET>
200038d8:	f7fe fef5 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200038dc:	4b3f      	ldr	r3, [pc, #252]	@ (200039dc <JTAG_TransferSlow+0x460>)
200038de:	685b      	ldr	r3, [r3, #4]
200038e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
200038e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
200038e4:	3b01      	subs	r3, #1
200038e6:	d1fd      	bne.n	200038e4 <JTAG_TransferSlow+0x368>
200038e8:	64bb      	str	r3, [r7, #72]	@ 0x48
}
200038ea:	bf00      	nop
200038ec:	f7fe ff0a 	bl	20002704 <PIN_TDO_IN>
200038f0:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200038f4:	f7fe fee0 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200038f8:	4b38      	ldr	r3, [pc, #224]	@ (200039dc <JTAG_TransferSlow+0x460>)
200038fa:	685b      	ldr	r3, [r3, #4]
200038fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
200038fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20003900:	3b01      	subs	r3, #1
20003902:	d1fd      	bne.n	20003900 <JTAG_TransferSlow+0x384>
20003904:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
20003906:	bf00      	nop
20003908:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
2000390c:	07db      	lsls	r3, r3, #31
2000390e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
20003912:	4313      	orrs	r3, r2
20003914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20003918:	683b      	ldr	r3, [r7, #0]
2000391a:	2b00      	cmp	r3, #0
2000391c:	f000 80ad 	beq.w	20003a7a <JTAG_TransferSlow+0x4fe>
20003920:	683b      	ldr	r3, [r7, #0]
20003922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
20003926:	601a      	str	r2, [r3, #0]
20003928:	e0a7      	b.n	20003a7a <JTAG_TransferSlow+0x4fe>
2000392a:	683b      	ldr	r3, [r7, #0]
2000392c:	681b      	ldr	r3, [r3, #0]
2000392e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20003932:	231f      	movs	r3, #31
20003934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003938:	e021      	b.n	2000397e <JTAG_TransferSlow+0x402>
2000393a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
2000393e:	f7fe fed7 	bl	200026f0 <PIN_TDI_OUT>
20003942:	f7fe fec0 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003946:	4b25      	ldr	r3, [pc, #148]	@ (200039dc <JTAG_TransferSlow+0x460>)
20003948:	685b      	ldr	r3, [r3, #4]
2000394a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
2000394c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000394e:	3b01      	subs	r3, #1
20003950:	d1fd      	bne.n	2000394e <JTAG_TransferSlow+0x3d2>
20003952:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003954:	bf00      	nop
20003956:	f7fe feaf 	bl	200026b8 <PIN_SWCLK_TCK_SET>
2000395a:	4b20      	ldr	r3, [pc, #128]	@ (200039dc <JTAG_TransferSlow+0x460>)
2000395c:	685b      	ldr	r3, [r3, #4]
2000395e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20003960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003962:	3b01      	subs	r3, #1
20003964:	d1fd      	bne.n	20003962 <JTAG_TransferSlow+0x3e6>
20003966:	647b      	str	r3, [r7, #68]	@ 0x44
}
20003968:	bf00      	nop
2000396a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
2000396e:	085b      	lsrs	r3, r3, #1
20003970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20003974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003978:	3b01      	subs	r3, #1
2000397a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
2000397e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003982:	2b00      	cmp	r3, #0
20003984:	d1d9      	bne.n	2000393a <JTAG_TransferSlow+0x3be>
20003986:	4b15      	ldr	r3, [pc, #84]	@ (200039dc <JTAG_TransferSlow+0x460>)
20003988:	7e9b      	ldrb	r3, [r3, #26]
2000398a:	461a      	mov	r2, r3
2000398c:	4b13      	ldr	r3, [pc, #76]	@ (200039dc <JTAG_TransferSlow+0x460>)
2000398e:	7edb      	ldrb	r3, [r3, #27]
20003990:	1ad3      	subs	r3, r2, r3
20003992:	3b01      	subs	r3, #1
20003994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003998:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000399c:	2b00      	cmp	r3, #0
2000399e:	d052      	beq.n	20003a46 <JTAG_TransferSlow+0x4ca>
200039a0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
200039a4:	f7fe fea4 	bl	200026f0 <PIN_TDI_OUT>
200039a8:	f7fe fe8d 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200039ac:	4b0b      	ldr	r3, [pc, #44]	@ (200039dc <JTAG_TransferSlow+0x460>)
200039ae:	685b      	ldr	r3, [r3, #4]
200039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
200039b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200039b4:	3b01      	subs	r3, #1
200039b6:	d1fd      	bne.n	200039b4 <JTAG_TransferSlow+0x438>
200039b8:	63bb      	str	r3, [r7, #56]	@ 0x38
}
200039ba:	bf00      	nop
200039bc:	f7fe fe7c 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200039c0:	4b06      	ldr	r3, [pc, #24]	@ (200039dc <JTAG_TransferSlow+0x460>)
200039c2:	685b      	ldr	r3, [r3, #4]
200039c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
200039c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200039c8:	3b01      	subs	r3, #1
200039ca:	d1fd      	bne.n	200039c8 <JTAG_TransferSlow+0x44c>
200039cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
200039ce:	bf00      	nop
200039d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200039d4:	3b01      	subs	r3, #1
200039d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200039da:	e01a      	b.n	20003a12 <JTAG_TransferSlow+0x496>
200039dc:	2000da4c 	.word	0x2000da4c
200039e0:	f7fe fe71 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
200039e4:	4b54      	ldr	r3, [pc, #336]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
200039e6:	685b      	ldr	r3, [r3, #4]
200039e8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
200039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200039ec:	3b01      	subs	r3, #1
200039ee:	d1fd      	bne.n	200039ec <JTAG_TransferSlow+0x470>
200039f0:	633b      	str	r3, [r7, #48]	@ 0x30
}
200039f2:	bf00      	nop
200039f4:	f7fe fe60 	bl	200026b8 <PIN_SWCLK_TCK_SET>
200039f8:	4b4f      	ldr	r3, [pc, #316]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
200039fa:	685b      	ldr	r3, [r3, #4]
200039fc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
200039fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003a00:	3b01      	subs	r3, #1
20003a02:	d1fd      	bne.n	20003a00 <JTAG_TransferSlow+0x484>
20003a04:	637b      	str	r3, [r7, #52]	@ 0x34
}
20003a06:	bf00      	nop
20003a08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003a0c:	3b01      	subs	r3, #1
20003a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003a16:	2b00      	cmp	r3, #0
20003a18:	d1e2      	bne.n	200039e0 <JTAG_TransferSlow+0x464>
20003a1a:	f7fe fe5b 	bl	200026d4 <PIN_SWDIO_TMS_SET>
20003a1e:	f7fe fe52 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003a22:	4b45      	ldr	r3, [pc, #276]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003a24:	685b      	ldr	r3, [r3, #4]
20003a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20003a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20003a2a:	3b01      	subs	r3, #1
20003a2c:	d1fd      	bne.n	20003a2a <JTAG_TransferSlow+0x4ae>
20003a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20003a30:	bf00      	nop
20003a32:	f7fe fe41 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003a36:	4b40      	ldr	r3, [pc, #256]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003a38:	685b      	ldr	r3, [r3, #4]
20003a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20003a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003a3e:	3b01      	subs	r3, #1
20003a40:	d1fd      	bne.n	20003a3e <JTAG_TransferSlow+0x4c2>
20003a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20003a44:	e019      	b.n	20003a7a <JTAG_TransferSlow+0x4fe>
20003a46:	f7fe fe45 	bl	200026d4 <PIN_SWDIO_TMS_SET>
20003a4a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20003a4e:	f7fe fe4f 	bl	200026f0 <PIN_TDI_OUT>
20003a52:	f7fe fe38 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003a56:	4b38      	ldr	r3, [pc, #224]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003a58:	685b      	ldr	r3, [r3, #4]
20003a5a:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003a5c:	6a3b      	ldr	r3, [r7, #32]
20003a5e:	3b01      	subs	r3, #1
20003a60:	d1fd      	bne.n	20003a5e <JTAG_TransferSlow+0x4e2>
20003a62:	623b      	str	r3, [r7, #32]
}
20003a64:	bf00      	nop
20003a66:	f7fe fe27 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003a6a:	4b33      	ldr	r3, [pc, #204]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003a6c:	685b      	ldr	r3, [r3, #4]
20003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003a72:	3b01      	subs	r3, #1
20003a74:	d1fd      	bne.n	20003a72 <JTAG_TransferSlow+0x4f6>
20003a76:	627b      	str	r3, [r7, #36]	@ 0x24
}
20003a78:	bf00      	nop
20003a7a:	f7fe fe24 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003a7e:	4b2e      	ldr	r3, [pc, #184]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003a80:	685b      	ldr	r3, [r3, #4]
20003a82:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003a84:	693b      	ldr	r3, [r7, #16]
20003a86:	3b01      	subs	r3, #1
20003a88:	d1fd      	bne.n	20003a86 <JTAG_TransferSlow+0x50a>
20003a8a:	613b      	str	r3, [r7, #16]
}
20003a8c:	bf00      	nop
20003a8e:	f7fe fe13 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003a92:	4b29      	ldr	r3, [pc, #164]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003a94:	685b      	ldr	r3, [r3, #4]
20003a96:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003a98:	697b      	ldr	r3, [r7, #20]
20003a9a:	3b01      	subs	r3, #1
20003a9c:	d1fd      	bne.n	20003a9a <JTAG_TransferSlow+0x51e>
20003a9e:	617b      	str	r3, [r7, #20]
}
20003aa0:	bf00      	nop
20003aa2:	f7fe fe1e 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
20003aa6:	f7fe fe0e 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003aaa:	4b23      	ldr	r3, [pc, #140]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003aac:	685b      	ldr	r3, [r3, #4]
20003aae:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003ab0:	69bb      	ldr	r3, [r7, #24]
20003ab2:	3b01      	subs	r3, #1
20003ab4:	d1fd      	bne.n	20003ab2 <JTAG_TransferSlow+0x536>
20003ab6:	61bb      	str	r3, [r7, #24]
}
20003ab8:	bf00      	nop
20003aba:	f7fe fdfd 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003abe:	4b1e      	ldr	r3, [pc, #120]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003ac0:	685b      	ldr	r3, [r3, #4]
20003ac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20003ac4:	69fb      	ldr	r3, [r7, #28]
20003ac6:	3b01      	subs	r3, #1
20003ac8:	d1fd      	bne.n	20003ac6 <JTAG_TransferSlow+0x54a>
20003aca:	61fb      	str	r3, [r7, #28]
}
20003acc:	bf00      	nop
20003ace:	2001      	movs	r0, #1
20003ad0:	f7fe fe0e 	bl	200026f0 <PIN_TDI_OUT>
20003ad4:	687b      	ldr	r3, [r7, #4]
20003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003ada:	2b00      	cmp	r3, #0
20003adc:	d004      	beq.n	20003ae8 <JTAG_TransferSlow+0x56c>
20003ade:	f7fe fe19 	bl	20002714 <TIMESTAMP_GET>
20003ae2:	4603      	mov	r3, r0
20003ae4:	4a14      	ldr	r2, [pc, #80]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003ae6:	6093      	str	r3, [r2, #8]
20003ae8:	4b13      	ldr	r3, [pc, #76]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003aea:	7b1b      	ldrb	r3, [r3, #12]
20003aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003af0:	e013      	b.n	20003b1a <JTAG_TransferSlow+0x59e>
20003af2:	f7fe fde8 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003af6:	4b10      	ldr	r3, [pc, #64]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003af8:	685b      	ldr	r3, [r3, #4]
20003afa:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
20003afc:	68bb      	ldr	r3, [r7, #8]
20003afe:	3b01      	subs	r3, #1
20003b00:	d1fd      	bne.n	20003afe <JTAG_TransferSlow+0x582>
20003b02:	60bb      	str	r3, [r7, #8]
}
20003b04:	bf00      	nop
20003b06:	f7fe fdd7 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (20003b38 <JTAG_TransferSlow+0x5bc>)
20003b0c:	685b      	ldr	r3, [r3, #4]
20003b0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003b10:	68fb      	ldr	r3, [r7, #12]
20003b12:	3b01      	subs	r3, #1
20003b14:	d1fd      	bne.n	20003b12 <JTAG_TransferSlow+0x596>
20003b16:	60fb      	str	r3, [r7, #12]
}
20003b18:	bf00      	nop
20003b1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003b1e:	1e5a      	subs	r2, r3, #1
20003b20:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
20003b24:	2b00      	cmp	r3, #0
20003b26:	d1e4      	bne.n	20003af2 <JTAG_TransferSlow+0x576>
20003b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
20003b2c:	b2db      	uxtb	r3, r3
20003b2e:	4618      	mov	r0, r3
20003b30:	37c0      	adds	r7, #192	@ 0xc0
20003b32:	46bd      	mov	sp, r7
20003b34:	bd80      	pop	{r7, pc}
20003b36:	bf00      	nop
20003b38:	2000da4c 	.word	0x2000da4c

20003b3c <JTAG_ReadIDCode>:


// JTAG Read IDCODE register
//   return: value read
uint32_t JTAG_ReadIDCode (void) {
20003b3c:	b580      	push	{r7, lr}
20003b3e:	b094      	sub	sp, #80	@ 0x50
20003b40:	af00      	add	r7, sp, #0
  uint32_t bit;
  uint32_t val;
  uint32_t n;

  PIN_TMS_SET();
20003b42:	f7fe fdc7 	bl	200026d4 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
20003b46:	f7fe fdbe 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003b4a:	4b68      	ldr	r3, [pc, #416]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003b4c:	685b      	ldr	r3, [r3, #4]
20003b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003b52:	3b01      	subs	r3, #1
20003b54:	d1fd      	bne.n	20003b52 <JTAG_ReadIDCode+0x16>
20003b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20003b58:	bf00      	nop
20003b5a:	f7fe fdad 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003b5e:	4b63      	ldr	r3, [pc, #396]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003b60:	685b      	ldr	r3, [r3, #4]
20003b62:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20003b66:	3b01      	subs	r3, #1
20003b68:	d1fd      	bne.n	20003b66 <JTAG_ReadIDCode+0x2a>
20003b6a:	633b      	str	r3, [r7, #48]	@ 0x30
}
20003b6c:	bf00      	nop
  PIN_TMS_CLR();
20003b6e:	f7fe fdb8 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
20003b72:	f7fe fda8 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003b76:	4b5d      	ldr	r3, [pc, #372]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003b78:	685b      	ldr	r3, [r3, #4]
20003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003b7e:	3b01      	subs	r3, #1
20003b80:	d1fd      	bne.n	20003b7e <JTAG_ReadIDCode+0x42>
20003b82:	637b      	str	r3, [r7, #52]	@ 0x34
}
20003b84:	bf00      	nop
20003b86:	f7fe fd97 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003b8a:	4b58      	ldr	r3, [pc, #352]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003b8c:	685b      	ldr	r3, [r3, #4]
20003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20003b92:	3b01      	subs	r3, #1
20003b94:	d1fd      	bne.n	20003b92 <JTAG_ReadIDCode+0x56>
20003b96:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20003b98:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
20003b9a:	f7fe fd94 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003b9e:	4b53      	ldr	r3, [pc, #332]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003ba0:	685b      	ldr	r3, [r3, #4]
20003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20003ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20003ba6:	3b01      	subs	r3, #1
20003ba8:	d1fd      	bne.n	20003ba6 <JTAG_ReadIDCode+0x6a>
20003baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003bac:	bf00      	nop
20003bae:	f7fe fd83 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003bb2:	4b4e      	ldr	r3, [pc, #312]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003bb4:	685b      	ldr	r3, [r3, #4]
20003bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20003bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20003bba:	3b01      	subs	r3, #1
20003bbc:	d1fd      	bne.n	20003bba <JTAG_ReadIDCode+0x7e>
20003bbe:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003bc0:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003bc2:	4b4a      	ldr	r3, [pc, #296]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003bc4:	7edb      	ldrb	r3, [r3, #27]
20003bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
20003bc8:	e016      	b.n	20003bf8 <JTAG_ReadIDCode+0xbc>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
20003bca:	f7fe fd7c 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003bce:	4b47      	ldr	r3, [pc, #284]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003bd0:	685b      	ldr	r3, [r3, #4]
20003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003bd6:	3b01      	subs	r3, #1
20003bd8:	d1fd      	bne.n	20003bd6 <JTAG_ReadIDCode+0x9a>
20003bda:	627b      	str	r3, [r7, #36]	@ 0x24
}
20003bdc:	bf00      	nop
20003bde:	f7fe fd6b 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003be2:	4b42      	ldr	r3, [pc, #264]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003be4:	685b      	ldr	r3, [r3, #4]
20003be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20003bea:	3b01      	subs	r3, #1
20003bec:	d1fd      	bne.n	20003bea <JTAG_ReadIDCode+0xae>
20003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20003bf0:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003bf4:	3b01      	subs	r3, #1
20003bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
20003bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003bfa:	2b00      	cmp	r3, #0
20003bfc:	d1e5      	bne.n	20003bca <JTAG_ReadIDCode+0x8e>
  }

  val = 0U;
20003bfe:	2300      	movs	r3, #0
20003c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
20003c02:	231f      	movs	r3, #31
20003c04:	64bb      	str	r3, [r7, #72]	@ 0x48
20003c06:	e021      	b.n	20003c4c <JTAG_ReadIDCode+0x110>
    JTAG_CYCLE_TDO(bit);                    /* Get D0..D30 */
20003c08:	f7fe fd5d 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003c0c:	4b37      	ldr	r3, [pc, #220]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003c0e:	685b      	ldr	r3, [r3, #4]
20003c10:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20003c12:	69fb      	ldr	r3, [r7, #28]
20003c14:	3b01      	subs	r3, #1
20003c16:	d1fd      	bne.n	20003c14 <JTAG_ReadIDCode+0xd8>
20003c18:	61fb      	str	r3, [r7, #28]
}
20003c1a:	bf00      	nop
20003c1c:	f7fe fd72 	bl	20002704 <PIN_TDO_IN>
20003c20:	6478      	str	r0, [r7, #68]	@ 0x44
20003c22:	f7fe fd49 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003c26:	4b31      	ldr	r3, [pc, #196]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003c28:	685b      	ldr	r3, [r3, #4]
20003c2a:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003c2c:	6a3b      	ldr	r3, [r7, #32]
20003c2e:	3b01      	subs	r3, #1
20003c30:	d1fd      	bne.n	20003c2e <JTAG_ReadIDCode+0xf2>
20003c32:	623b      	str	r3, [r7, #32]
}
20003c34:	bf00      	nop
    val  |= bit << 31;
20003c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003c38:	07db      	lsls	r3, r3, #31
20003c3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20003c3c:	4313      	orrs	r3, r2
20003c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    val >>= 1;
20003c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20003c42:	085b      	lsrs	r3, r3, #1
20003c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
20003c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003c48:	3b01      	subs	r3, #1
20003c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
20003c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003c4e:	2b00      	cmp	r3, #0
20003c50:	d1da      	bne.n	20003c08 <JTAG_ReadIDCode+0xcc>
  }
  PIN_TMS_SET();
20003c52:	f7fe fd3f 	bl	200026d4 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TDO(bit);                      /* Get D31 & Exit1-DR */
20003c56:	f7fe fd36 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003c5a:	4b24      	ldr	r3, [pc, #144]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003c5c:	685b      	ldr	r3, [r3, #4]
20003c5e:	607b      	str	r3, [r7, #4]
  __ASM volatile (
20003c60:	687b      	ldr	r3, [r7, #4]
20003c62:	3b01      	subs	r3, #1
20003c64:	d1fd      	bne.n	20003c62 <JTAG_ReadIDCode+0x126>
20003c66:	607b      	str	r3, [r7, #4]
}
20003c68:	bf00      	nop
20003c6a:	f7fe fd4b 	bl	20002704 <PIN_TDO_IN>
20003c6e:	6478      	str	r0, [r7, #68]	@ 0x44
20003c70:	f7fe fd22 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003c74:	4b1d      	ldr	r3, [pc, #116]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003c76:	685b      	ldr	r3, [r3, #4]
20003c78:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
20003c7a:	68bb      	ldr	r3, [r7, #8]
20003c7c:	3b01      	subs	r3, #1
20003c7e:	d1fd      	bne.n	20003c7c <JTAG_ReadIDCode+0x140>
20003c80:	60bb      	str	r3, [r7, #8]
}
20003c82:	bf00      	nop
  val |= bit << 31;
20003c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003c86:	07db      	lsls	r3, r3, #31
20003c88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20003c8a:	4313      	orrs	r3, r2
20003c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  JTAG_CYCLE_TCK();                         /* Update-DR */
20003c8e:	f7fe fd1a 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003c92:	4b16      	ldr	r3, [pc, #88]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003c94:	685b      	ldr	r3, [r3, #4]
20003c96:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003c98:	68fb      	ldr	r3, [r7, #12]
20003c9a:	3b01      	subs	r3, #1
20003c9c:	d1fd      	bne.n	20003c9a <JTAG_ReadIDCode+0x15e>
20003c9e:	60fb      	str	r3, [r7, #12]
}
20003ca0:	bf00      	nop
20003ca2:	f7fe fd09 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003ca6:	4b11      	ldr	r3, [pc, #68]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003ca8:	685b      	ldr	r3, [r3, #4]
20003caa:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003cac:	693b      	ldr	r3, [r7, #16]
20003cae:	3b01      	subs	r3, #1
20003cb0:	d1fd      	bne.n	20003cae <JTAG_ReadIDCode+0x172>
20003cb2:	613b      	str	r3, [r7, #16]
}
20003cb4:	bf00      	nop
  PIN_TMS_CLR();
20003cb6:	f7fe fd14 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
20003cba:	f7fe fd04 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003cbe:	4b0b      	ldr	r3, [pc, #44]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003cc0:	685b      	ldr	r3, [r3, #4]
20003cc2:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003cc4:	697b      	ldr	r3, [r7, #20]
20003cc6:	3b01      	subs	r3, #1
20003cc8:	d1fd      	bne.n	20003cc6 <JTAG_ReadIDCode+0x18a>
20003cca:	617b      	str	r3, [r7, #20]
}
20003ccc:	bf00      	nop
20003cce:	f7fe fcf3 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003cd2:	4b06      	ldr	r3, [pc, #24]	@ (20003cec <JTAG_ReadIDCode+0x1b0>)
20003cd4:	685b      	ldr	r3, [r3, #4]
20003cd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003cd8:	69bb      	ldr	r3, [r7, #24]
20003cda:	3b01      	subs	r3, #1
20003cdc:	d1fd      	bne.n	20003cda <JTAG_ReadIDCode+0x19e>
20003cde:	61bb      	str	r3, [r7, #24]
}
20003ce0:	bf00      	nop

  return (val);
20003ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
20003ce4:	4618      	mov	r0, r3
20003ce6:	3750      	adds	r7, #80	@ 0x50
20003ce8:	46bd      	mov	sp, r7
20003cea:	bd80      	pop	{r7, pc}
20003cec:	2000da4c 	.word	0x2000da4c

20003cf0 <JTAG_WriteAbort>:


// JTAG Write ABORT register
//   data:   value to write
//   return: none
void JTAG_WriteAbort (uint32_t data) {
20003cf0:	b580      	push	{r7, lr}
20003cf2:	b0a0      	sub	sp, #128	@ 0x80
20003cf4:	af00      	add	r7, sp, #0
20003cf6:	6078      	str	r0, [r7, #4]
  uint32_t n;

  PIN_TMS_SET();
20003cf8:	f7fe fcec 	bl	200026d4 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
20003cfc:	f7fe fce3 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003d00:	4b70      	ldr	r3, [pc, #448]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d02:	685b      	ldr	r3, [r3, #4]
20003d04:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20003d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20003d08:	3b01      	subs	r3, #1
20003d0a:	d1fd      	bne.n	20003d08 <JTAG_WriteAbort+0x18>
20003d0c:	667b      	str	r3, [r7, #100]	@ 0x64
}
20003d0e:	bf00      	nop
20003d10:	f7fe fcd2 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003d14:	4b6b      	ldr	r3, [pc, #428]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d16:	685b      	ldr	r3, [r3, #4]
20003d18:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
20003d1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20003d1c:	3b01      	subs	r3, #1
20003d1e:	d1fd      	bne.n	20003d1c <JTAG_WriteAbort+0x2c>
20003d20:	66bb      	str	r3, [r7, #104]	@ 0x68
}
20003d22:	bf00      	nop
  PIN_TMS_CLR();
20003d24:	f7fe fcdd 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
20003d28:	f7fe fccd 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003d2c:	4b65      	ldr	r3, [pc, #404]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d2e:	685b      	ldr	r3, [r3, #4]
20003d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
20003d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003d34:	3b01      	subs	r3, #1
20003d36:	d1fd      	bne.n	20003d34 <JTAG_WriteAbort+0x44>
20003d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
20003d3a:	bf00      	nop
20003d3c:	f7fe fcbc 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003d40:	4b60      	ldr	r3, [pc, #384]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d42:	685b      	ldr	r3, [r3, #4]
20003d44:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
20003d46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
20003d48:	3b01      	subs	r3, #1
20003d4a:	d1fd      	bne.n	20003d48 <JTAG_WriteAbort+0x58>
20003d4c:	673b      	str	r3, [r7, #112]	@ 0x70
}
20003d4e:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
20003d50:	f7fe fcb9 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003d54:	4b5b      	ldr	r3, [pc, #364]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d56:	685b      	ldr	r3, [r3, #4]
20003d58:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
20003d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20003d5c:	3b01      	subs	r3, #1
20003d5e:	d1fd      	bne.n	20003d5c <JTAG_WriteAbort+0x6c>
20003d60:	677b      	str	r3, [r7, #116]	@ 0x74
}
20003d62:	bf00      	nop
20003d64:	f7fe fca8 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003d68:	4b56      	ldr	r3, [pc, #344]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d6a:	685b      	ldr	r3, [r3, #4]
20003d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
20003d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20003d70:	3b01      	subs	r3, #1
20003d72:	d1fd      	bne.n	20003d70 <JTAG_WriteAbort+0x80>
20003d74:	67bb      	str	r3, [r7, #120]	@ 0x78
}
20003d76:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003d78:	4b52      	ldr	r3, [pc, #328]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d7a:	7edb      	ldrb	r3, [r3, #27]
20003d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003d7e:	e016      	b.n	20003dae <JTAG_WriteAbort+0xbe>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
20003d80:	f7fe fca1 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003d84:	4b4f      	ldr	r3, [pc, #316]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d86:	685b      	ldr	r3, [r3, #4]
20003d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
20003d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20003d8c:	3b01      	subs	r3, #1
20003d8e:	d1fd      	bne.n	20003d8c <JTAG_WriteAbort+0x9c>
20003d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20003d92:	bf00      	nop
20003d94:	f7fe fc90 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003d98:	4b4a      	ldr	r3, [pc, #296]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003d9a:	685b      	ldr	r3, [r3, #4]
20003d9c:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20003d9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20003da0:	3b01      	subs	r3, #1
20003da2:	d1fd      	bne.n	20003da0 <JTAG_WriteAbort+0xb0>
20003da4:	663b      	str	r3, [r7, #96]	@ 0x60
}
20003da6:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003da8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003daa:	3b01      	subs	r3, #1
20003dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003dae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003db0:	2b00      	cmp	r3, #0
20003db2:	d1e5      	bne.n	20003d80 <JTAG_WriteAbort+0x90>
  }

  PIN_TDI_OUT(0U);
20003db4:	2000      	movs	r0, #0
20003db6:	f7fe fc9b 	bl	200026f0 <PIN_TDI_OUT>
  JTAG_CYCLE_TCK();                         /* Set RnW=0 (Write) */
20003dba:	f7fe fc84 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003dbe:	4b41      	ldr	r3, [pc, #260]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003dc0:	685b      	ldr	r3, [r3, #4]
20003dc2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20003dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003dc6:	3b01      	subs	r3, #1
20003dc8:	d1fd      	bne.n	20003dc6 <JTAG_WriteAbort+0xd6>
20003dca:	647b      	str	r3, [r7, #68]	@ 0x44
}
20003dcc:	bf00      	nop
20003dce:	f7fe fc73 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003dd2:	4b3c      	ldr	r3, [pc, #240]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003dd4:	685b      	ldr	r3, [r3, #4]
20003dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
20003dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003dda:	3b01      	subs	r3, #1
20003ddc:	d1fd      	bne.n	20003dda <JTAG_WriteAbort+0xea>
20003dde:	64bb      	str	r3, [r7, #72]	@ 0x48
}
20003de0:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A2=0 */
20003de2:	f7fe fc70 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003de6:	4b37      	ldr	r3, [pc, #220]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003de8:	685b      	ldr	r3, [r3, #4]
20003dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
20003dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20003dee:	3b01      	subs	r3, #1
20003df0:	d1fd      	bne.n	20003dee <JTAG_WriteAbort+0xfe>
20003df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
20003df4:	bf00      	nop
20003df6:	f7fe fc5f 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003dfa:	4b32      	ldr	r3, [pc, #200]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003dfc:	685b      	ldr	r3, [r3, #4]
20003dfe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
20003e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20003e02:	3b01      	subs	r3, #1
20003e04:	d1fd      	bne.n	20003e02 <JTAG_WriteAbort+0x112>
20003e06:	653b      	str	r3, [r7, #80]	@ 0x50
}
20003e08:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A3=0 */
20003e0a:	f7fe fc5c 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003e0e:	4b2d      	ldr	r3, [pc, #180]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003e10:	685b      	ldr	r3, [r3, #4]
20003e12:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
20003e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20003e16:	3b01      	subs	r3, #1
20003e18:	d1fd      	bne.n	20003e16 <JTAG_WriteAbort+0x126>
20003e1a:	657b      	str	r3, [r7, #84]	@ 0x54
}
20003e1c:	bf00      	nop
20003e1e:	f7fe fc4b 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003e22:	4b28      	ldr	r3, [pc, #160]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003e24:	685b      	ldr	r3, [r3, #4]
20003e26:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20003e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20003e2a:	3b01      	subs	r3, #1
20003e2c:	d1fd      	bne.n	20003e2a <JTAG_WriteAbort+0x13a>
20003e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20003e30:	bf00      	nop

  for (n = 31U; n; n--) {
20003e32:	231f      	movs	r3, #31
20003e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003e36:	e01c      	b.n	20003e72 <JTAG_WriteAbort+0x182>
    JTAG_CYCLE_TDI(data);                   /* Set D0..D30 */
20003e38:	6878      	ldr	r0, [r7, #4]
20003e3a:	f7fe fc59 	bl	200026f0 <PIN_TDI_OUT>
20003e3e:	f7fe fc42 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003e42:	4b20      	ldr	r3, [pc, #128]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003e44:	685b      	ldr	r3, [r3, #4]
20003e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20003e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20003e4a:	3b01      	subs	r3, #1
20003e4c:	d1fd      	bne.n	20003e4a <JTAG_WriteAbort+0x15a>
20003e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003e50:	bf00      	nop
20003e52:	f7fe fc31 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003e56:	4b1b      	ldr	r3, [pc, #108]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003e58:	685b      	ldr	r3, [r3, #4]
20003e5a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20003e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20003e5e:	3b01      	subs	r3, #1
20003e60:	d1fd      	bne.n	20003e5e <JTAG_WriteAbort+0x16e>
20003e62:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003e64:	bf00      	nop
    data >>= 1;
20003e66:	687b      	ldr	r3, [r7, #4]
20003e68:	085b      	lsrs	r3, r3, #1
20003e6a:	607b      	str	r3, [r7, #4]
  for (n = 31U; n; n--) {
20003e6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003e6e:	3b01      	subs	r3, #1
20003e70:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003e72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003e74:	2b00      	cmp	r3, #0
20003e76:	d1df      	bne.n	20003e38 <JTAG_WriteAbort+0x148>
  }
  n = DAP_Data.jtag_dev.count - DAP_Data.jtag_dev.index - 1U;
20003e78:	4b12      	ldr	r3, [pc, #72]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003e7a:	7e9b      	ldrb	r3, [r3, #26]
20003e7c:	461a      	mov	r2, r3
20003e7e:	4b11      	ldr	r3, [pc, #68]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003e80:	7edb      	ldrb	r3, [r3, #27]
20003e82:	1ad3      	subs	r3, r2, r3
20003e84:	3b01      	subs	r3, #1
20003e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (n) {
20003e88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003e8a:	2b00      	cmp	r3, #0
20003e8c:	d04c      	beq.n	20003f28 <JTAG_WriteAbort+0x238>
    JTAG_CYCLE_TDI(data);                   /* Set D31 */
20003e8e:	6878      	ldr	r0, [r7, #4]
20003e90:	f7fe fc2e 	bl	200026f0 <PIN_TDI_OUT>
20003e94:	f7fe fc17 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003e98:	4b0a      	ldr	r3, [pc, #40]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003e9a:	685b      	ldr	r3, [r3, #4]
20003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003ea0:	3b01      	subs	r3, #1
20003ea2:	d1fd      	bne.n	20003ea0 <JTAG_WriteAbort+0x1b0>
20003ea4:	637b      	str	r3, [r7, #52]	@ 0x34
}
20003ea6:	bf00      	nop
20003ea8:	f7fe fc06 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003eac:	4b05      	ldr	r3, [pc, #20]	@ (20003ec4 <JTAG_WriteAbort+0x1d4>)
20003eae:	685b      	ldr	r3, [r3, #4]
20003eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20003eb4:	3b01      	subs	r3, #1
20003eb6:	d1fd      	bne.n	20003eb4 <JTAG_WriteAbort+0x1c4>
20003eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20003eba:	bf00      	nop
    for (--n; n; n--) {
20003ebc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003ebe:	3b01      	subs	r3, #1
20003ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003ec2:	e018      	b.n	20003ef6 <JTAG_WriteAbort+0x206>
20003ec4:	2000da4c 	.word	0x2000da4c
      JTAG_CYCLE_TCK();                     /* Bypass after data */
20003ec8:	f7fe fbfd 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003ecc:	4b3b      	ldr	r3, [pc, #236]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003ece:	685b      	ldr	r3, [r3, #4]
20003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003ed4:	3b01      	subs	r3, #1
20003ed6:	d1fd      	bne.n	20003ed4 <JTAG_WriteAbort+0x1e4>
20003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20003eda:	bf00      	nop
20003edc:	f7fe fbec 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003ee0:	4b36      	ldr	r3, [pc, #216]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003ee2:	685b      	ldr	r3, [r3, #4]
20003ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20003ee8:	3b01      	subs	r3, #1
20003eea:	d1fd      	bne.n	20003ee8 <JTAG_WriteAbort+0x1f8>
20003eec:	633b      	str	r3, [r7, #48]	@ 0x30
}
20003eee:	bf00      	nop
    for (--n; n; n--) {
20003ef0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003ef2:	3b01      	subs	r3, #1
20003ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003ef6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003ef8:	2b00      	cmp	r3, #0
20003efa:	d1e5      	bne.n	20003ec8 <JTAG_WriteAbort+0x1d8>
    }
    PIN_TMS_SET();
20003efc:	f7fe fbea 	bl	200026d4 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TCK();                       /* Bypass & Exit1-DR */
20003f00:	f7fe fbe1 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003f04:	4b2d      	ldr	r3, [pc, #180]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003f06:	685b      	ldr	r3, [r3, #4]
20003f08:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003f0c:	3b01      	subs	r3, #1
20003f0e:	d1fd      	bne.n	20003f0c <JTAG_WriteAbort+0x21c>
20003f10:	627b      	str	r3, [r7, #36]	@ 0x24
}
20003f12:	bf00      	nop
20003f14:	f7fe fbd0 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003f18:	4b28      	ldr	r3, [pc, #160]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003f1a:	685b      	ldr	r3, [r3, #4]
20003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20003f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20003f20:	3b01      	subs	r3, #1
20003f22:	d1fd      	bne.n	20003f20 <JTAG_WriteAbort+0x230>
20003f24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20003f26:	e018      	b.n	20003f5a <JTAG_WriteAbort+0x26a>
  } else {
    PIN_TMS_SET();
20003f28:	f7fe fbd4 	bl	200026d4 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TDI(data);                   /* Set D31 & Exit1-DR */
20003f2c:	6878      	ldr	r0, [r7, #4]
20003f2e:	f7fe fbdf 	bl	200026f0 <PIN_TDI_OUT>
20003f32:	f7fe fbc8 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003f36:	4b21      	ldr	r3, [pc, #132]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003f38:	685b      	ldr	r3, [r3, #4]
20003f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20003f3c:	69fb      	ldr	r3, [r7, #28]
20003f3e:	3b01      	subs	r3, #1
20003f40:	d1fd      	bne.n	20003f3e <JTAG_WriteAbort+0x24e>
20003f42:	61fb      	str	r3, [r7, #28]
}
20003f44:	bf00      	nop
20003f46:	f7fe fbb7 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003f4a:	4b1c      	ldr	r3, [pc, #112]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003f4c:	685b      	ldr	r3, [r3, #4]
20003f4e:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003f50:	6a3b      	ldr	r3, [r7, #32]
20003f52:	3b01      	subs	r3, #1
20003f54:	d1fd      	bne.n	20003f52 <JTAG_WriteAbort+0x262>
20003f56:	623b      	str	r3, [r7, #32]
}
20003f58:	bf00      	nop
  }

  JTAG_CYCLE_TCK();                         /* Update-DR */
20003f5a:	f7fe fbb4 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003f5e:	4b17      	ldr	r3, [pc, #92]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003f60:	685b      	ldr	r3, [r3, #4]
20003f62:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003f64:	68fb      	ldr	r3, [r7, #12]
20003f66:	3b01      	subs	r3, #1
20003f68:	d1fd      	bne.n	20003f66 <JTAG_WriteAbort+0x276>
20003f6a:	60fb      	str	r3, [r7, #12]
}
20003f6c:	bf00      	nop
20003f6e:	f7fe fba3 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003f72:	4b12      	ldr	r3, [pc, #72]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003f74:	685b      	ldr	r3, [r3, #4]
20003f76:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003f78:	693b      	ldr	r3, [r7, #16]
20003f7a:	3b01      	subs	r3, #1
20003f7c:	d1fd      	bne.n	20003f7a <JTAG_WriteAbort+0x28a>
20003f7e:	613b      	str	r3, [r7, #16]
}
20003f80:	bf00      	nop
  PIN_TMS_CLR();
20003f82:	f7fe fbae 	bl	200026e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
20003f86:	f7fe fb9e 	bl	200026c6 <PIN_SWCLK_TCK_CLR>
20003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003f8c:	685b      	ldr	r3, [r3, #4]
20003f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003f90:	697b      	ldr	r3, [r7, #20]
20003f92:	3b01      	subs	r3, #1
20003f94:	d1fd      	bne.n	20003f92 <JTAG_WriteAbort+0x2a2>
20003f96:	617b      	str	r3, [r7, #20]
}
20003f98:	bf00      	nop
20003f9a:	f7fe fb8d 	bl	200026b8 <PIN_SWCLK_TCK_SET>
20003f9e:	4b07      	ldr	r3, [pc, #28]	@ (20003fbc <JTAG_WriteAbort+0x2cc>)
20003fa0:	685b      	ldr	r3, [r3, #4]
20003fa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003fa4:	69bb      	ldr	r3, [r7, #24]
20003fa6:	3b01      	subs	r3, #1
20003fa8:	d1fd      	bne.n	20003fa6 <JTAG_WriteAbort+0x2b6>
20003faa:	61bb      	str	r3, [r7, #24]
}
20003fac:	bf00      	nop
  PIN_TDI_OUT(1U);
20003fae:	2001      	movs	r0, #1
20003fb0:	f7fe fb9e 	bl	200026f0 <PIN_TDI_OUT>
}
20003fb4:	bf00      	nop
20003fb6:	3780      	adds	r7, #128	@ 0x80
20003fb8:	46bd      	mov	sp, r7
20003fba:	bd80      	pop	{r7, pc}
20003fbc:	2000da4c 	.word	0x2000da4c

20003fc0 <JTAG_IR>:


// JTAG Set IR
//   ir:     IR value
//   return: none
void JTAG_IR (uint32_t ir) {
20003fc0:	b580      	push	{r7, lr}
20003fc2:	b082      	sub	sp, #8
20003fc4:	af00      	add	r7, sp, #0
20003fc6:	6078      	str	r0, [r7, #4]
  if (DAP_Data.fast_clock) {
20003fc8:	4b07      	ldr	r3, [pc, #28]	@ (20003fe8 <JTAG_IR+0x28>)
20003fca:	785b      	ldrb	r3, [r3, #1]
20003fcc:	2b00      	cmp	r3, #0
20003fce:	d003      	beq.n	20003fd8 <JTAG_IR+0x18>
    JTAG_IR_Fast(ir);
20003fd0:	6878      	ldr	r0, [r7, #4]
20003fd2:	f7fe ff8f 	bl	20002ef4 <JTAG_IR_Fast>
  } else {
    JTAG_IR_Slow(ir);
  }
}
20003fd6:	e002      	b.n	20003fde <JTAG_IR+0x1e>
    JTAG_IR_Slow(ir);
20003fd8:	6878      	ldr	r0, [r7, #4]
20003fda:	f7ff f981 	bl	200032e0 <JTAG_IR_Slow>
}
20003fde:	bf00      	nop
20003fe0:	3708      	adds	r7, #8
20003fe2:	46bd      	mov	sp, r7
20003fe4:	bd80      	pop	{r7, pc}
20003fe6:	bf00      	nop
20003fe8:	2000da4c 	.word	0x2000da4c

20003fec <JTAG_Transfer>:

// JTAG Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
uint8_t  JTAG_Transfer(uint32_t request, uint32_t *data) {
20003fec:	b580      	push	{r7, lr}
20003fee:	b082      	sub	sp, #8
20003ff0:	af00      	add	r7, sp, #0
20003ff2:	6078      	str	r0, [r7, #4]
20003ff4:	6039      	str	r1, [r7, #0]
  if (DAP_Data.fast_clock) {
20003ff6:	4b09      	ldr	r3, [pc, #36]	@ (2000401c <JTAG_Transfer+0x30>)
20003ff8:	785b      	ldrb	r3, [r3, #1]
20003ffa:	2b00      	cmp	r3, #0
20003ffc:	d005      	beq.n	2000400a <JTAG_Transfer+0x1e>
    return JTAG_TransferFast(request, data);
20003ffe:	6839      	ldr	r1, [r7, #0]
20004000:	6878      	ldr	r0, [r7, #4]
20004002:	f7ff f81b 	bl	2000303c <JTAG_TransferFast>
20004006:	4603      	mov	r3, r0
20004008:	e004      	b.n	20004014 <JTAG_Transfer+0x28>
  } else {
    return JTAG_TransferSlow(request, data);
2000400a:	6839      	ldr	r1, [r7, #0]
2000400c:	6878      	ldr	r0, [r7, #4]
2000400e:	f7ff fab5 	bl	2000357c <JTAG_TransferSlow>
20004012:	4603      	mov	r3, r0
  }
}
20004014:	4618      	mov	r0, r3
20004016:	3708      	adds	r7, #8
20004018:	46bd      	mov	sp, r7
2000401a:	bd80      	pop	{r7, pc}
2000401c:	2000da4c 	.word	0x2000da4c

20004020 <PIN_SWCLK_TCK_SET>:
static void     PIN_SWCLK_TCK_SET (void) {
20004020:	b480      	push	{r7}
20004022:	af00      	add	r7, sp, #0
}
20004024:	bf00      	nop
20004026:	46bd      	mov	sp, r7
20004028:	f85d 7b04 	ldr.w	r7, [sp], #4
2000402c:	4770      	bx	lr

2000402e <PIN_SWCLK_TCK_CLR>:
static void     PIN_SWCLK_TCK_CLR (void) {
2000402e:	b480      	push	{r7}
20004030:	af00      	add	r7, sp, #0
}
20004032:	bf00      	nop
20004034:	46bd      	mov	sp, r7
20004036:	f85d 7b04 	ldr.w	r7, [sp], #4
2000403a:	4770      	bx	lr

2000403c <PIN_SWDIO_IN>:
static uint32_t PIN_SWDIO_IN      (void) {
2000403c:	b480      	push	{r7}
2000403e:	af00      	add	r7, sp, #0
  return (0U);
20004040:	2300      	movs	r3, #0
}
20004042:	4618      	mov	r0, r3
20004044:	46bd      	mov	sp, r7
20004046:	f85d 7b04 	ldr.w	r7, [sp], #4
2000404a:	4770      	bx	lr

2000404c <PIN_SWDIO_OUT>:
static void     PIN_SWDIO_OUT     (uint32_t bit) {
2000404c:	b480      	push	{r7}
2000404e:	b083      	sub	sp, #12
20004050:	af00      	add	r7, sp, #0
20004052:	6078      	str	r0, [r7, #4]
}
20004054:	bf00      	nop
20004056:	370c      	adds	r7, #12
20004058:	46bd      	mov	sp, r7
2000405a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000405e:	4770      	bx	lr

20004060 <TIMESTAMP_GET>:
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
20004060:	b480      	push	{r7}
20004062:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20004064:	4b03      	ldr	r3, [pc, #12]	@ (20004074 <TIMESTAMP_GET+0x14>)
20004066:	685b      	ldr	r3, [r3, #4]
}
20004068:	4618      	mov	r0, r3
2000406a:	46bd      	mov	sp, r7
2000406c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004070:	4770      	bx	lr
20004072:	bf00      	nop
20004074:	e0001000 	.word	0xe0001000

20004078 <SWJ_Sequence>:
// Generate SWJ Sequence
//   count:  sequence bit count
//   data:   pointer to sequence bit data
//   return: none
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
void SWJ_Sequence (uint32_t count, const uint8_t *data) {
20004078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2000407c:	b092      	sub	sp, #72	@ 0x48
2000407e:	af02      	add	r7, sp, #8
20004080:	6078      	str	r0, [r7, #4]
20004082:	6039      	str	r1, [r7, #0]
  uint32_t val;
  uint32_t n;

  uint8_t xFerSizes[3];

  	uint8_t dummyVal = 0;
20004084:	2300      	movs	r3, #0
20004086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  	calculate_xfer_sizes(count, xFerSizes);
2000408a:	687b      	ldr	r3, [r7, #4]
2000408c:	b29b      	uxth	r3, r3
2000408e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
20004092:	4611      	mov	r1, r2
20004094:	4618      	mov	r0, r3
20004096:	f7fe fca1 	bl	200029dc <calculate_xfer_sizes>

  	uint32_t currentBit = 0;
2000409a:	2300      	movs	r3, #0
2000409c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  	SPI4->CR1 &= ~(1 << 6);
2000409e:	4b6f      	ldr	r3, [pc, #444]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040a0:	681b      	ldr	r3, [r3, #0]
200040a2:	4a6e      	ldr	r2, [pc, #440]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
200040a8:	6013      	str	r3, [r2, #0]

  	SPI3->CR1 &= ~(1 << 6);
200040aa:	4b6d      	ldr	r3, [pc, #436]	@ (20004260 <SWJ_Sequence+0x1e8>)
200040ac:	681b      	ldr	r3, [r3, #0]
200040ae:	4a6c      	ldr	r2, [pc, #432]	@ (20004260 <SWJ_Sequence+0x1e8>)
200040b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
200040b4:	6013      	str	r3, [r2, #0]

  	SPI4->CR1 &= ~(1);
200040b6:	4b69      	ldr	r3, [pc, #420]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040b8:	681b      	ldr	r3, [r3, #0]
200040ba:	4a68      	ldr	r2, [pc, #416]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040bc:	f023 0301 	bic.w	r3, r3, #1
200040c0:	6013      	str	r3, [r2, #0]
  	SPI3->CR1 &= ~(1);
200040c2:	4b67      	ldr	r3, [pc, #412]	@ (20004260 <SWJ_Sequence+0x1e8>)
200040c4:	681b      	ldr	r3, [r3, #0]
200040c6:	4a66      	ldr	r2, [pc, #408]	@ (20004260 <SWJ_Sequence+0x1e8>)
200040c8:	f023 0301 	bic.w	r3, r3, #1
200040cc:	6013      	str	r3, [r2, #0]


  	SPI4->CR1 |= (1 << 14);
200040ce:	4b63      	ldr	r3, [pc, #396]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040d0:	681b      	ldr	r3, [r3, #0]
200040d2:	4a62      	ldr	r2, [pc, #392]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
200040d8:	6013      	str	r3, [r2, #0]

  	SPI4->CR1 |= (1 << 6);
200040da:	4b60      	ldr	r3, [pc, #384]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040dc:	681b      	ldr	r3, [r3, #0]
200040de:	4a5f      	ldr	r2, [pc, #380]	@ (2000425c <SWJ_Sequence+0x1e4>)
200040e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200040e4:	6013      	str	r3, [r2, #0]
  	SPI3->CR1 |= (1 << 6);
200040e6:	4b5e      	ldr	r3, [pc, #376]	@ (20004260 <SWJ_Sequence+0x1e8>)
200040e8:	681b      	ldr	r3, [r3, #0]
200040ea:	4a5d      	ldr	r2, [pc, #372]	@ (20004260 <SWJ_Sequence+0x1e8>)
200040ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200040f0:	6013      	str	r3, [r2, #0]

  	uint32_t delay_cnt = 2500;
200040f2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
200040f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  	  		while(delay_cnt--)
200040f8:	e000      	b.n	200040fc <SWJ_Sequence+0x84>
  	  	    {
  	  		  __asm("nop");
200040fa:	bf00      	nop
  	  		while(delay_cnt--)
200040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200040fe:	1e5a      	subs	r2, r3, #1
20004100:	63ba      	str	r2, [r7, #56]	@ 0x38
20004102:	2b00      	cmp	r3, #0
20004104:	d1f9      	bne.n	200040fa <SWJ_Sequence+0x82>
  	  	    }

  	while(xFerSizes[IDX_8_BIT])
20004106:	e02e      	b.n	20004166 <SWJ_Sequence+0xee>
  	{
  		uint8_t tms_val = *data;
20004108:	683b      	ldr	r3, [r7, #0]
2000410a:	781b      	ldrb	r3, [r3, #0]
2000410c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  		uint64_t tdo_val;

  		if(tms_val != 0 && currentBit != 0)
20004110:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
20004114:	2b00      	cmp	r3, #0
20004116:	d005      	beq.n	20004124 <SWJ_Sequence+0xac>
20004118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000411a:	2b00      	cmp	r3, #0
2000411c:	d002      	beq.n	20004124 <SWJ_Sequence+0xac>
  		{
  			dummyVal = 1;
2000411e:	2301      	movs	r3, #1
20004120:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		}

  		SPI_TMS_Transfer(tms_val, 8);
20004124:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
20004128:	2200      	movs	r2, #0
2000412a:	469a      	mov	sl, r3
2000412c:	4693      	mov	fp, r2
2000412e:	2208      	movs	r2, #8
20004130:	4650      	mov	r0, sl
20004132:	4659      	mov	r1, fp
20004134:	f000 ff20 	bl	20004f78 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , 8);
20004138:	f107 0118 	add.w	r1, r7, #24
2000413c:	2308      	movs	r3, #8
2000413e:	9300      	str	r3, [sp, #0]
20004140:	f04f 0200 	mov.w	r2, #0
20004144:	f04f 0300 	mov.w	r3, #0
20004148:	4608      	mov	r0, r1
2000414a:	f000 ffbd 	bl	200050c8 <SPI_Transfer>

  		data++;
2000414e:	683b      	ldr	r3, [r7, #0]
20004150:	3301      	adds	r3, #1
20004152:	603b      	str	r3, [r7, #0]
  		xFerSizes[IDX_8_BIT]--;
20004154:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20004158:	3b01      	subs	r3, #1
2000415a:	b2db      	uxtb	r3, r3
2000415c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  		currentBit+= 8;
20004160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20004162:	3308      	adds	r3, #8
20004164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  	while(xFerSizes[IDX_8_BIT])
20004166:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
2000416a:	2b00      	cmp	r3, #0
2000416c:	d1cc      	bne.n	20004108 <SWJ_Sequence+0x90>
  	}

  	while(xFerSizes[IDX_RM1_BIT])
2000416e:	e032      	b.n	200041d6 <SWJ_Sequence+0x15e>
  	{
  		uint32_t delay_cnt = 2500;
20004170:	f640 13c4 	movw	r3, #2500	@ 0x9c4
20004174:	637b      	str	r3, [r7, #52]	@ 0x34

  		while(delay_cnt--)
20004176:	e000      	b.n	2000417a <SWJ_Sequence+0x102>
  	    {
  		  __asm("nop");
20004178:	bf00      	nop
  		while(delay_cnt--)
2000417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000417c:	1e5a      	subs	r2, r3, #1
2000417e:	637a      	str	r2, [r7, #52]	@ 0x34
20004180:	2b00      	cmp	r3, #0
20004182:	d1f9      	bne.n	20004178 <SWJ_Sequence+0x100>
  	    }

  		uint16_t tms_val = extract_nbits_lsb(data, currentBit, xFerSizes[IDX_RM1_BIT]);
20004184:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
20004188:	461a      	mov	r2, r3
2000418a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
2000418c:	6838      	ldr	r0, [r7, #0]
2000418e:	f7fe fb29 	bl	200027e4 <extract_nbits_lsb>
20004192:	4603      	mov	r3, r0
20004194:	857b      	strh	r3, [r7, #42]	@ 0x2a
  		uint64_t tdo_val;

  		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM1_BIT]);
20004196:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
20004198:	2200      	movs	r2, #0
2000419a:	4698      	mov	r8, r3
2000419c:	4691      	mov	r9, r2
2000419e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
200041a2:	461a      	mov	r2, r3
200041a4:	4640      	mov	r0, r8
200041a6:	4649      	mov	r1, r9
200041a8:	f000 fee6 	bl	20004f78 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , xFerSizes[IDX_RM1_BIT]);
200041ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
200041b0:	f107 0110 	add.w	r1, r7, #16
200041b4:	9300      	str	r3, [sp, #0]
200041b6:	f04f 0200 	mov.w	r2, #0
200041ba:	f04f 0300 	mov.w	r3, #0
200041be:	4608      	mov	r0, r1
200041c0:	f000 ff82 	bl	200050c8 <SPI_Transfer>


  		currentBit+= xFerSizes[IDX_RM1_BIT];
200041c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
200041c8:	461a      	mov	r2, r3
200041ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200041cc:	4413      	add	r3, r2
200041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  		xFerSizes[IDX_RM1_BIT] = 0;
200041d0:	2300      	movs	r3, #0
200041d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  	while(xFerSizes[IDX_RM1_BIT])
200041d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
200041da:	2b00      	cmp	r3, #0
200041dc:	d1c8      	bne.n	20004170 <SWJ_Sequence+0xf8>

  	}

  	while(xFerSizes[IDX_RM2_BIT])
200041de:	e032      	b.n	20004246 <SWJ_Sequence+0x1ce>
  	{
  		//TODO: extract bits!!
  		uint32_t delay_cnt = 2000;
200041e0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
200041e4:	633b      	str	r3, [r7, #48]	@ 0x30

  		while(delay_cnt--)
200041e6:	e000      	b.n	200041ea <SWJ_Sequence+0x172>
  		{
  		  __asm("nop");
200041e8:	bf00      	nop
  		while(delay_cnt--)
200041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200041ec:	1e5a      	subs	r2, r3, #1
200041ee:	633a      	str	r2, [r7, #48]	@ 0x30
200041f0:	2b00      	cmp	r3, #0
200041f2:	d1f9      	bne.n	200041e8 <SWJ_Sequence+0x170>
  		}

  		uint16_t tms_val = extract_nbits_lsb(data, currentBit, xFerSizes[IDX_RM2_BIT]);
200041f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
200041f8:	461a      	mov	r2, r3
200041fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
200041fc:	6838      	ldr	r0, [r7, #0]
200041fe:	f7fe faf1 	bl	200027e4 <extract_nbits_lsb>
20004202:	4603      	mov	r3, r0
20004204:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  		uint64_t tdo_val;

  		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM2_BIT]);
20004206:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
20004208:	2200      	movs	r2, #0
2000420a:	461c      	mov	r4, r3
2000420c:	4615      	mov	r5, r2
2000420e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
20004212:	461a      	mov	r2, r3
20004214:	4620      	mov	r0, r4
20004216:	4629      	mov	r1, r5
20004218:	f000 feae 	bl	20004f78 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , xFerSizes[IDX_RM2_BIT]);
2000421c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
20004220:	f107 0108 	add.w	r1, r7, #8
20004224:	9300      	str	r3, [sp, #0]
20004226:	f04f 0200 	mov.w	r2, #0
2000422a:	f04f 0300 	mov.w	r3, #0
2000422e:	4608      	mov	r0, r1
20004230:	f000 ff4a 	bl	200050c8 <SPI_Transfer>


  		currentBit+= xFerSizes[IDX_RM2_BIT];
20004234:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
20004238:	461a      	mov	r2, r3
2000423a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000423c:	4413      	add	r3, r2
2000423e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  		xFerSizes[IDX_RM2_BIT] = 0;
20004240:	2300      	movs	r3, #0
20004242:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  	while(xFerSizes[IDX_RM2_BIT])
20004246:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
2000424a:	2b00      	cmp	r3, #0
2000424c:	d1c8      	bne.n	200041e0 <SWJ_Sequence+0x168>

  	}

}
2000424e:	bf00      	nop
20004250:	bf00      	nop
20004252:	3740      	adds	r7, #64	@ 0x40
20004254:	46bd      	mov	sp, r7
20004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2000425a:	bf00      	nop
2000425c:	40013400 	.word	0x40013400
20004260:	40003c00 	.word	0x40003c00

20004264 <SWD_Sequence>:
//   info:   sequence information
//   swdo:   pointer to SWDIO generated data
//   swdi:   pointer to SWDIO captured data
//   return: none
#if (DAP_SWD != 0)
void SWD_Sequence (uint32_t info, const uint8_t *swdo, uint8_t *swdi) {
20004264:	b580      	push	{r7, lr}
20004266:	b08c      	sub	sp, #48	@ 0x30
20004268:	af00      	add	r7, sp, #0
2000426a:	60f8      	str	r0, [r7, #12]
2000426c:	60b9      	str	r1, [r7, #8]
2000426e:	607a      	str	r2, [r7, #4]
  uint32_t val;
  uint32_t bit;
  uint32_t n, k;

  n = info & SWD_SEQUENCE_CLK;
20004270:	68fb      	ldr	r3, [r7, #12]
20004272:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20004276:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (n == 0U) {
20004278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000427a:	2b00      	cmp	r3, #0
2000427c:	d101      	bne.n	20004282 <SWD_Sequence+0x1e>
    n = 64U;
2000427e:	2340      	movs	r3, #64	@ 0x40
20004280:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  if (info & SWD_SEQUENCE_DIN) {
20004282:	68fb      	ldr	r3, [r7, #12]
20004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004288:	2b00      	cmp	r3, #0
2000428a:	d06d      	beq.n	20004368 <SWD_Sequence+0x104>
    while (n) {
2000428c:	e03a      	b.n	20004304 <SWD_Sequence+0xa0>
      val = 0U;
2000428e:	2300      	movs	r3, #0
20004290:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
20004292:	2308      	movs	r3, #8
20004294:	627b      	str	r3, [r7, #36]	@ 0x24
20004296:	e024      	b.n	200042e2 <SWD_Sequence+0x7e>
        SW_READ_BIT(bit);
20004298:	f7ff fec9 	bl	2000402e <PIN_SWCLK_TCK_CLR>
2000429c:	4b36      	ldr	r3, [pc, #216]	@ (20004378 <SWD_Sequence+0x114>)
2000429e:	685b      	ldr	r3, [r3, #4]
200042a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
200042a2:	69bb      	ldr	r3, [r7, #24]
200042a4:	3b01      	subs	r3, #1
200042a6:	d1fd      	bne.n	200042a4 <SWD_Sequence+0x40>
200042a8:	61bb      	str	r3, [r7, #24]
}
200042aa:	bf00      	nop
200042ac:	f7ff fec6 	bl	2000403c <PIN_SWDIO_IN>
200042b0:	6238      	str	r0, [r7, #32]
200042b2:	f7ff feb5 	bl	20004020 <PIN_SWCLK_TCK_SET>
200042b6:	4b30      	ldr	r3, [pc, #192]	@ (20004378 <SWD_Sequence+0x114>)
200042b8:	685b      	ldr	r3, [r3, #4]
200042ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
200042bc:	69fb      	ldr	r3, [r7, #28]
200042be:	3b01      	subs	r3, #1
200042c0:	d1fd      	bne.n	200042be <SWD_Sequence+0x5a>
200042c2:	61fb      	str	r3, [r7, #28]
}
200042c4:	bf00      	nop
        val >>= 1;
200042c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200042c8:	085b      	lsrs	r3, r3, #1
200042ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        val  |= bit << 7;
200042cc:	6a3b      	ldr	r3, [r7, #32]
200042ce:	01db      	lsls	r3, r3, #7
200042d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200042d2:	4313      	orrs	r3, r2
200042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
200042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200042d8:	3b01      	subs	r3, #1
200042da:	627b      	str	r3, [r7, #36]	@ 0x24
200042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200042de:	3b01      	subs	r3, #1
200042e0:	62bb      	str	r3, [r7, #40]	@ 0x28
200042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200042e4:	2b00      	cmp	r3, #0
200042e6:	d002      	beq.n	200042ee <SWD_Sequence+0x8a>
200042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200042ea:	2b00      	cmp	r3, #0
200042ec:	d1d4      	bne.n	20004298 <SWD_Sequence+0x34>
      }
      val >>= k;
200042ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200042f2:	fa22 f303 	lsr.w	r3, r2, r3
200042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *swdi++ = (uint8_t)val;
200042f8:	687b      	ldr	r3, [r7, #4]
200042fa:	1c5a      	adds	r2, r3, #1
200042fc:	607a      	str	r2, [r7, #4]
200042fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20004300:	b2d2      	uxtb	r2, r2
20004302:	701a      	strb	r2, [r3, #0]
    while (n) {
20004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004306:	2b00      	cmp	r3, #0
20004308:	d1c1      	bne.n	2000428e <SWD_Sequence+0x2a>
        SW_WRITE_BIT(val);
        val >>= 1;
      }
    }
  }
}
2000430a:	e030      	b.n	2000436e <SWD_Sequence+0x10a>
      val = *swdo++;
2000430c:	68bb      	ldr	r3, [r7, #8]
2000430e:	1c5a      	adds	r2, r3, #1
20004310:	60ba      	str	r2, [r7, #8]
20004312:	781b      	ldrb	r3, [r3, #0]
20004314:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
20004316:	2308      	movs	r3, #8
20004318:	627b      	str	r3, [r7, #36]	@ 0x24
2000431a:	e01f      	b.n	2000435c <SWD_Sequence+0xf8>
        SW_WRITE_BIT(val);
2000431c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
2000431e:	f7ff fe95 	bl	2000404c <PIN_SWDIO_OUT>
20004322:	f7ff fe84 	bl	2000402e <PIN_SWCLK_TCK_CLR>
20004326:	4b14      	ldr	r3, [pc, #80]	@ (20004378 <SWD_Sequence+0x114>)
20004328:	685b      	ldr	r3, [r3, #4]
2000432a:	613b      	str	r3, [r7, #16]
  __ASM volatile (
2000432c:	693b      	ldr	r3, [r7, #16]
2000432e:	3b01      	subs	r3, #1
20004330:	d1fd      	bne.n	2000432e <SWD_Sequence+0xca>
20004332:	613b      	str	r3, [r7, #16]
}
20004334:	bf00      	nop
20004336:	f7ff fe73 	bl	20004020 <PIN_SWCLK_TCK_SET>
2000433a:	4b0f      	ldr	r3, [pc, #60]	@ (20004378 <SWD_Sequence+0x114>)
2000433c:	685b      	ldr	r3, [r3, #4]
2000433e:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20004340:	697b      	ldr	r3, [r7, #20]
20004342:	3b01      	subs	r3, #1
20004344:	d1fd      	bne.n	20004342 <SWD_Sequence+0xde>
20004346:	617b      	str	r3, [r7, #20]
}
20004348:	bf00      	nop
        val >>= 1;
2000434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000434c:	085b      	lsrs	r3, r3, #1
2000434e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
20004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20004352:	3b01      	subs	r3, #1
20004354:	627b      	str	r3, [r7, #36]	@ 0x24
20004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004358:	3b01      	subs	r3, #1
2000435a:	62bb      	str	r3, [r7, #40]	@ 0x28
2000435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000435e:	2b00      	cmp	r3, #0
20004360:	d002      	beq.n	20004368 <SWD_Sequence+0x104>
20004362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004364:	2b00      	cmp	r3, #0
20004366:	d1d9      	bne.n	2000431c <SWD_Sequence+0xb8>
    while (n) {
20004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000436a:	2b00      	cmp	r3, #0
2000436c:	d1ce      	bne.n	2000430c <SWD_Sequence+0xa8>
}
2000436e:	bf00      	nop
20004370:	3730      	adds	r7, #48	@ 0x30
20004372:	46bd      	mov	sp, r7
20004374:	bd80      	pop	{r7, pc}
20004376:	bf00      	nop
20004378:	2000da4c 	.word	0x2000da4c

2000437c <generate_even_parity>:
int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize);

void SPI_TMS_Transfer(uint64_t data, uint8_t bits );

// Generate even parity bit for given data
uint8_t generate_even_parity(uint32_t data) {
2000437c:	b480      	push	{r7}
2000437e:	b085      	sub	sp, #20
20004380:	af00      	add	r7, sp, #0
20004382:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
20004384:	2300      	movs	r3, #0
20004386:	73fb      	strb	r3, [r7, #15]
    uint32_t temp = data;
20004388:	687b      	ldr	r3, [r7, #4]
2000438a:	60bb      	str	r3, [r7, #8]

    // Count number of 1s
    while (temp) {
2000438c:	e00a      	b.n	200043a4 <generate_even_parity+0x28>
        count ^= (temp & 1);
2000438e:	68bb      	ldr	r3, [r7, #8]
20004390:	b2db      	uxtb	r3, r3
20004392:	f003 0301 	and.w	r3, r3, #1
20004396:	b2da      	uxtb	r2, r3
20004398:	7bfb      	ldrb	r3, [r7, #15]
2000439a:	4053      	eors	r3, r2
2000439c:	73fb      	strb	r3, [r7, #15]
        temp >>= 1;
2000439e:	68bb      	ldr	r3, [r7, #8]
200043a0:	085b      	lsrs	r3, r3, #1
200043a2:	60bb      	str	r3, [r7, #8]
    while (temp) {
200043a4:	68bb      	ldr	r3, [r7, #8]
200043a6:	2b00      	cmp	r3, #0
200043a8:	d1f1      	bne.n	2000438e <generate_even_parity+0x12>
    }

    // For even parity: if count of 1s is odd, parity bit must be 1
    // if count is even, parity bit is 0
    return count; 
200043aa:	7bfb      	ldrb	r3, [r7, #15]
}
200043ac:	4618      	mov	r0, r3
200043ae:	3714      	adds	r7, #20
200043b0:	46bd      	mov	sp, r7
200043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200043b6:	4770      	bx	lr

200043b8 <check_even_parity>:

// Check if data + parity bit satisfies even parity
uint8_t check_even_parity(uint32_t data, uint8_t parity) {
200043b8:	b480      	push	{r7}
200043ba:	b085      	sub	sp, #20
200043bc:	af00      	add	r7, sp, #0
200043be:	6078      	str	r0, [r7, #4]
200043c0:	460b      	mov	r3, r1
200043c2:	70fb      	strb	r3, [r7, #3]
    uint8_t total_ones = parity;
200043c4:	78fb      	ldrb	r3, [r7, #3]
200043c6:	73fb      	strb	r3, [r7, #15]
    uint32_t temp = data;
200043c8:	687b      	ldr	r3, [r7, #4]
200043ca:	60bb      	str	r3, [r7, #8]

    while (temp) {
200043cc:	e00a      	b.n	200043e4 <check_even_parity+0x2c>
        total_ones ^= (temp & 1);
200043ce:	68bb      	ldr	r3, [r7, #8]
200043d0:	b2db      	uxtb	r3, r3
200043d2:	f003 0301 	and.w	r3, r3, #1
200043d6:	b2da      	uxtb	r2, r3
200043d8:	7bfb      	ldrb	r3, [r7, #15]
200043da:	4053      	eors	r3, r2
200043dc:	73fb      	strb	r3, [r7, #15]
        temp >>= 1;
200043de:	68bb      	ldr	r3, [r7, #8]
200043e0:	085b      	lsrs	r3, r3, #1
200043e2:	60bb      	str	r3, [r7, #8]
    while (temp) {
200043e4:	68bb      	ldr	r3, [r7, #8]
200043e6:	2b00      	cmp	r3, #0
200043e8:	d1f1      	bne.n	200043ce <check_even_parity+0x16>
    }

    // If XOR result is 0, then even parity is satisfied
    return (total_ones == 0);
200043ea:	7bfb      	ldrb	r3, [r7, #15]
200043ec:	2b00      	cmp	r3, #0
200043ee:	bf0c      	ite	eq
200043f0:	2301      	moveq	r3, #1
200043f2:	2300      	movne	r3, #0
200043f4:	b2db      	uxtb	r3, r3
}
200043f6:	4618      	mov	r0, r3
200043f8:	3714      	adds	r7, #20
200043fa:	46bd      	mov	sp, r7
200043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004400:	4770      	bx	lr
	...

20004404 <SWD_Transfer_LL>:
// SWD Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
                                 \
uint8_t SWD_Transfer_LL(uint32_t request, uint32_t *data) {
20004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20004408:	b090      	sub	sp, #64	@ 0x40
2000440a:	af02      	add	r7, sp, #8
2000440c:	60f8      	str	r0, [r7, #12]
2000440e:	60b9      	str	r1, [r7, #8]
  uint32_t ack;
  uint8_t writeReq = 1;
20004410:	2301      	movs	r3, #1
20004412:	77fb      	strb	r3, [r7, #31]
  uint32_t bit;

  uint64_t dummyRead;
                                                                                
  uint32_t n;
  uint32_t read_data = 0;
20004414:	2300      	movs	r3, #0
20004416:	623b      	str	r3, [r7, #32]

  uint32_t write_data = 0;
20004418:	2300      	movs	r3, #0
2000441a:	633b      	str	r3, [r7, #48]	@ 0x30
  write_nbits_lsb(&writeReq, 1, 4, request);
2000441c:	68fb      	ldr	r3, [r7, #12]
2000441e:	b29b      	uxth	r3, r3
20004420:	f107 001f 	add.w	r0, r7, #31
20004424:	2204      	movs	r2, #4
20004426:	2101      	movs	r1, #1
20004428:	f7fe fa1a 	bl	20002860 <write_nbits_lsb>

  parity = generate_even_parity(request & 0xf);
2000442c:	68fb      	ldr	r3, [r7, #12]
2000442e:	f003 030f 	and.w	r3, r3, #15
20004432:	4618      	mov	r0, r3
20004434:	f7ff ffa2 	bl	2000437c <generate_even_parity>
20004438:	4603      	mov	r3, r0
2000443a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  write_nbits_lsb(&writeReq, 5, 1, parity);
2000443e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
20004442:	b29b      	uxth	r3, r3
20004444:	f107 001f 	add.w	r0, r7, #31
20004448:	2201      	movs	r2, #1
2000444a:	2105      	movs	r1, #5
2000444c:	f7fe fa08 	bl	20002860 <write_nbits_lsb>

  write_nbits_lsb(&writeReq, 7, 1, 1);
20004450:	f107 001f 	add.w	r0, r7, #31
20004454:	2301      	movs	r3, #1
20004456:	2201      	movs	r2, #1
20004458:	2107      	movs	r1, #7
2000445a:	f7fe fa01 	bl	20002860 <write_nbits_lsb>

  SPI_SwitchPhaseToWrite();
2000445e:	f000 fe09 	bl	20005074 <SPI_SwitchPhaseToWrite>
  SPI4->CR1 |= (0x1 << 6);
20004462:	4bb1      	ldr	r3, [pc, #708]	@ (20004728 <SWD_Transfer_LL+0x324>)
20004464:	681b      	ldr	r3, [r3, #0]
20004466:	4ab0      	ldr	r2, [pc, #704]	@ (20004728 <SWD_Transfer_LL+0x324>)
20004468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000446c:	6013      	str	r3, [r2, #0]

  SPI_TMS_Transfer(writeReq, 8);
2000446e:	7ffb      	ldrb	r3, [r7, #31]
20004470:	b2db      	uxtb	r3, r3
20004472:	2200      	movs	r2, #0
20004474:	603b      	str	r3, [r7, #0]
20004476:	607a      	str	r2, [r7, #4]
20004478:	2208      	movs	r2, #8
2000447a:	e9d7 0100 	ldrd	r0, r1, [r7]
2000447e:	f000 fd7b 	bl	20004f78 <SPI_TMS_Transfer>
  SPI_Transfer(&dummyRead, 0, 8);
20004482:	f107 0110 	add.w	r1, r7, #16
20004486:	2308      	movs	r3, #8
20004488:	9300      	str	r3, [sp, #0]
2000448a:	f04f 0200 	mov.w	r2, #0
2000448e:	f04f 0300 	mov.w	r3, #0
20004492:	4608      	mov	r0, r1
20004494:	f000 fe18 	bl	200050c8 <SPI_Transfer>
  SPI_TMSRead(&dummyRead, 8);
20004498:	f107 0310 	add.w	r3, r7, #16
2000449c:	2108      	movs	r1, #8
2000449e:	4618      	mov	r0, r3
200044a0:	f000 fd9c 	bl	20004fdc <SPI_TMSRead>

  if (request & DAP_TRANSFER_RnW)
200044a4:	68fb      	ldr	r3, [r7, #12]
200044a6:	f003 0302 	and.w	r3, r3, #2
200044aa:	2b00      	cmp	r3, #0
200044ac:	f000 8094 	beq.w	200045d8 <SWD_Transfer_LL+0x1d4>
  {
	  //TODO: correct the shiftin according to n variable...
	  SPI_SwitchPhaseToListen();
200044b0:	f000 fdb6 	bl	20005020 <SPI_SwitchPhaseToListen>
	  /* Turnaround */

	  n = DAP_Data.swd_conf.turnaround;
200044b4:	4b9d      	ldr	r3, [pc, #628]	@ (2000472c <SWD_Transfer_LL+0x328>)
200044b6:	7e1b      	ldrb	r3, [r3, #24]
200044b8:	62bb      	str	r3, [r7, #40]	@ 0x28

	  SPI4->CR2 = ( (16 -1) << 8);
200044ba:	4b9b      	ldr	r3, [pc, #620]	@ (20004728 <SWD_Transfer_LL+0x324>)
200044bc:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
200044c0:	605a      	str	r2, [r3, #4]
	  SPI_Transfer(&dummyRead, 0, 16);
200044c2:	f107 0110 	add.w	r1, r7, #16
200044c6:	2310      	movs	r3, #16
200044c8:	9300      	str	r3, [sp, #0]
200044ca:	f04f 0200 	mov.w	r2, #0
200044ce:	f04f 0300 	mov.w	r3, #0
200044d2:	4608      	mov	r0, r1
200044d4:	f000 fdf8 	bl	200050c8 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, 16);
200044d8:	f107 0310 	add.w	r3, r7, #16
200044dc:	2110      	movs	r1, #16
200044de:	4618      	mov	r0, r3
200044e0:	f000 fd7c 	bl	20004fdc <SPI_TMSRead>

	  ack = dummyRead & 0x7;
200044e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
200044e8:	4613      	mov	r3, r2
200044ea:	f003 0307 	and.w	r3, r3, #7
200044ee:	627b      	str	r3, [r7, #36]	@ 0x24


	  read_data |= dummyRead >> 3;
200044f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
200044f4:	f04f 0200 	mov.w	r2, #0
200044f8:	f04f 0300 	mov.w	r3, #0
200044fc:	08c2      	lsrs	r2, r0, #3
200044fe:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
20004502:	08cb      	lsrs	r3, r1, #3
20004504:	6a3b      	ldr	r3, [r7, #32]
20004506:	4313      	orrs	r3, r2
20004508:	623b      	str	r3, [r7, #32]

	  SPI4->CR2 = ( (16 -1) << 8);
2000450a:	4b87      	ldr	r3, [pc, #540]	@ (20004728 <SWD_Transfer_LL+0x324>)
2000450c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
20004510:	605a      	str	r2, [r3, #4]
	  SPI_Transfer(&dummyRead, 0, 16);
20004512:	f107 0110 	add.w	r1, r7, #16
20004516:	2310      	movs	r3, #16
20004518:	9300      	str	r3, [sp, #0]
2000451a:	f04f 0200 	mov.w	r2, #0
2000451e:	f04f 0300 	mov.w	r3, #0
20004522:	4608      	mov	r0, r1
20004524:	f000 fdd0 	bl	200050c8 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, 16);
20004528:	f107 0310 	add.w	r3, r7, #16
2000452c:	2110      	movs	r1, #16
2000452e:	4618      	mov	r0, r3
20004530:	f000 fd54 	bl	20004fdc <SPI_TMSRead>

	  read_data |= (dummyRead) << 13;
20004534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20004538:	4613      	mov	r3, r2
2000453a:	035b      	lsls	r3, r3, #13
2000453c:	6a3a      	ldr	r2, [r7, #32]
2000453e:	4313      	orrs	r3, r2
20004540:	623b      	str	r3, [r7, #32]

	  SPI4->CR2 = ( (5 + n -1) << 8);
20004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004544:	3304      	adds	r3, #4
20004546:	4a78      	ldr	r2, [pc, #480]	@ (20004728 <SWD_Transfer_LL+0x324>)
20004548:	021b      	lsls	r3, r3, #8
2000454a:	6053      	str	r3, [r2, #4]
	  SPI_Transfer(&dummyRead, 0, (5 + n) );
2000454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000454e:	b2db      	uxtb	r3, r3
20004550:	3305      	adds	r3, #5
20004552:	b2db      	uxtb	r3, r3
20004554:	f107 0110 	add.w	r1, r7, #16
20004558:	9300      	str	r3, [sp, #0]
2000455a:	f04f 0200 	mov.w	r2, #0
2000455e:	f04f 0300 	mov.w	r3, #0
20004562:	4608      	mov	r0, r1
20004564:	f000 fdb0 	bl	200050c8 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, (5 + n) );
20004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000456a:	b2db      	uxtb	r3, r3
2000456c:	3305      	adds	r3, #5
2000456e:	b2da      	uxtb	r2, r3
20004570:	f107 0310 	add.w	r3, r7, #16
20004574:	4611      	mov	r1, r2
20004576:	4618      	mov	r0, r3
20004578:	f000 fd30 	bl	20004fdc <SPI_TMSRead>

	  read_data |= ( dummyRead & 0x7) << 29;
2000457c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20004580:	4613      	mov	r3, r2
20004582:	075b      	lsls	r3, r3, #29
20004584:	6a3a      	ldr	r2, [r7, #32]
20004586:	4313      	orrs	r3, r2
20004588:	623b      	str	r3, [r7, #32]

	  parity = (dummyRead & 0x8) >> 3;
2000458a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
2000458e:	f04f 0200 	mov.w	r2, #0
20004592:	f04f 0300 	mov.w	r3, #0
20004596:	08c2      	lsrs	r2, r0, #3
20004598:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
2000459c:	08cb      	lsrs	r3, r1, #3
2000459e:	b2d3      	uxtb	r3, r2
200045a0:	f003 0301 	and.w	r3, r3, #1
200045a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	  if( !check_even_parity(read_data, parity) && DAP_TRANSFER_OK == ack)
200045a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
200045ac:	4619      	mov	r1, r3
200045ae:	6a38      	ldr	r0, [r7, #32]
200045b0:	f7ff ff02 	bl	200043b8 <check_even_parity>
200045b4:	4603      	mov	r3, r0
200045b6:	2b00      	cmp	r3, #0
200045b8:	d104      	bne.n	200045c4 <SWD_Transfer_LL+0x1c0>
200045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200045bc:	2b01      	cmp	r3, #1
200045be:	d101      	bne.n	200045c4 <SWD_Transfer_LL+0x1c0>
	  {
		  ack = DAP_TRANSFER_ERROR;
200045c0:	2308      	movs	r3, #8
200045c2:	627b      	str	r3, [r7, #36]	@ 0x24
	  }

	  *data = read_data;
200045c4:	68bb      	ldr	r3, [r7, #8]
200045c6:	6a3a      	ldr	r2, [r7, #32]
200045c8:	601a      	str	r2, [r3, #0]
	  SPI4->CR1 &= ~(0x1 << 6);
200045ca:	4b57      	ldr	r3, [pc, #348]	@ (20004728 <SWD_Transfer_LL+0x324>)
200045cc:	681b      	ldr	r3, [r3, #0]
200045ce:	4a56      	ldr	r2, [pc, #344]	@ (20004728 <SWD_Transfer_LL+0x324>)
200045d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
200045d4:	6013      	str	r3, [r2, #0]
200045d6:	e0fc      	b.n	200047d2 <SWD_Transfer_LL+0x3ce>


  }
  else
  {
	  SPI_SwitchPhaseToListen();
200045d8:	f000 fd22 	bl	20005020 <SPI_SwitchPhaseToListen>
	  /* Turnaround */

	  n = DAP_Data.swd_conf.turnaround;
200045dc:	4b53      	ldr	r3, [pc, #332]	@ (2000472c <SWD_Transfer_LL+0x328>)
200045de:	7e1b      	ldrb	r3, [r3, #24]
200045e0:	62bb      	str	r3, [r7, #40]	@ 0x28


	  SPI4->CR2 = ( ( 2*n +3 -1) << 8);
200045e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200045e4:	3301      	adds	r3, #1
200045e6:	005b      	lsls	r3, r3, #1
200045e8:	4a4f      	ldr	r2, [pc, #316]	@ (20004728 <SWD_Transfer_LL+0x324>)
200045ea:	021b      	lsls	r3, r3, #8
200045ec:	6053      	str	r3, [r2, #4]
	  SPI_Transfer(&dummyRead, 0, 2*n+3);
200045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200045f0:	b2db      	uxtb	r3, r3
200045f2:	005b      	lsls	r3, r3, #1
200045f4:	b2db      	uxtb	r3, r3
200045f6:	3303      	adds	r3, #3
200045f8:	b2db      	uxtb	r3, r3
200045fa:	f107 0110 	add.w	r1, r7, #16
200045fe:	9300      	str	r3, [sp, #0]
20004600:	f04f 0200 	mov.w	r2, #0
20004604:	f04f 0300 	mov.w	r3, #0
20004608:	4608      	mov	r0, r1
2000460a:	f000 fd5d 	bl	200050c8 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, 2*n+3);
2000460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004610:	b2db      	uxtb	r3, r3
20004612:	005b      	lsls	r3, r3, #1
20004614:	b2db      	uxtb	r3, r3
20004616:	3303      	adds	r3, #3
20004618:	b2da      	uxtb	r2, r3
2000461a:	f107 0310 	add.w	r3, r7, #16
2000461e:	4611      	mov	r1, r2
20004620:	4618      	mov	r0, r3
20004622:	f000 fcdb 	bl	20004fdc <SPI_TMSRead>

	  SPI_SwitchPhaseToWrite();
20004626:	f000 fd25 	bl	20005074 <SPI_SwitchPhaseToWrite>
	  //SPI4->CR1 &= ~(0x1 << 6);


	  ack = (dummyRead & 0x7);
2000462a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
2000462e:	4613      	mov	r3, r2
20004630:	f003 0307 	and.w	r3, r3, #7
20004634:	627b      	str	r3, [r7, #36]	@ 0x24

	  if(DAP_TRANSFER_OK == ack)
20004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20004638:	2b01      	cmp	r3, #1
2000463a:	d179      	bne.n	20004730 <SWD_Transfer_LL+0x32c>
	  {
		  parity = generate_even_parity(*data);
2000463c:	68bb      	ldr	r3, [r7, #8]
2000463e:	681b      	ldr	r3, [r3, #0]
20004640:	4618      	mov	r0, r3
20004642:	f7ff fe9b 	bl	2000437c <generate_even_parity>
20004646:	4603      	mov	r3, r0
20004648:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  write_data = *data;
2000464c:	68bb      	ldr	r3, [r7, #8]
2000464e:	681b      	ldr	r3, [r3, #0]
20004650:	633b      	str	r3, [r7, #48]	@ 0x30
		  SPI4->CR1 |= (0x1 << 6);
20004652:	4b35      	ldr	r3, [pc, #212]	@ (20004728 <SWD_Transfer_LL+0x324>)
20004654:	681b      	ldr	r3, [r3, #0]
20004656:	4a34      	ldr	r2, [pc, #208]	@ (20004728 <SWD_Transfer_LL+0x324>)
20004658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000465c:	6013      	str	r3, [r2, #0]

		  SPI_TMS_Transfer(write_data, 16);
2000465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20004660:	2200      	movs	r2, #0
20004662:	469a      	mov	sl, r3
20004664:	4693      	mov	fp, r2
20004666:	2210      	movs	r2, #16
20004668:	4650      	mov	r0, sl
2000466a:	4659      	mov	r1, fp
2000466c:	f000 fc84 	bl	20004f78 <SPI_TMS_Transfer>
		  SPI_Transfer(&dummyRead, 0, 16);
20004670:	f107 0110 	add.w	r1, r7, #16
20004674:	2310      	movs	r3, #16
20004676:	9300      	str	r3, [sp, #0]
20004678:	f04f 0200 	mov.w	r2, #0
2000467c:	f04f 0300 	mov.w	r3, #0
20004680:	4608      	mov	r0, r1
20004682:	f000 fd21 	bl	200050c8 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 16);
20004686:	f107 0310 	add.w	r3, r7, #16
2000468a:	2110      	movs	r1, #16
2000468c:	4618      	mov	r0, r3
2000468e:	f000 fca5 	bl	20004fdc <SPI_TMSRead>

		  write_data >>= 16;
20004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20004694:	0c1b      	lsrs	r3, r3, #16
20004696:	633b      	str	r3, [r7, #48]	@ 0x30

		  SPI_TMS_Transfer(write_data, 8);
20004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000469a:	2200      	movs	r2, #0
2000469c:	4698      	mov	r8, r3
2000469e:	4691      	mov	r9, r2
200046a0:	2208      	movs	r2, #8
200046a2:	4640      	mov	r0, r8
200046a4:	4649      	mov	r1, r9
200046a6:	f000 fc67 	bl	20004f78 <SPI_TMS_Transfer>
		  SPI_Transfer(&dummyRead, 0, 8);
200046aa:	f107 0110 	add.w	r1, r7, #16
200046ae:	2308      	movs	r3, #8
200046b0:	9300      	str	r3, [sp, #0]
200046b2:	f04f 0200 	mov.w	r2, #0
200046b6:	f04f 0300 	mov.w	r3, #0
200046ba:	4608      	mov	r0, r1
200046bc:	f000 fd04 	bl	200050c8 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 8);
200046c0:	f107 0310 	add.w	r3, r7, #16
200046c4:	2108      	movs	r1, #8
200046c6:	4618      	mov	r0, r3
200046c8:	f000 fc88 	bl	20004fdc <SPI_TMSRead>

		  uint32_t delay_cnt = 2000;
200046cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
200046d0:	637b      	str	r3, [r7, #52]	@ 0x34

		  while(delay_cnt--)
200046d2:	e000      	b.n	200046d6 <SWD_Transfer_LL+0x2d2>
		  {
			  __asm("nop");
200046d4:	bf00      	nop
		  while(delay_cnt--)
200046d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200046d8:	1e5a      	subs	r2, r3, #1
200046da:	637a      	str	r2, [r7, #52]	@ 0x34
200046dc:	2b00      	cmp	r3, #0
200046de:	d1f9      	bne.n	200046d4 <SWD_Transfer_LL+0x2d0>
		  }

		  write_data >>= 8;
200046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200046e2:	0a1b      	lsrs	r3, r3, #8
200046e4:	633b      	str	r3, [r7, #48]	@ 0x30

		  write_data |= parity << 8;
200046e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
200046ea:	021b      	lsls	r3, r3, #8
200046ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
200046ee:	4313      	orrs	r3, r2
200046f0:	633b      	str	r3, [r7, #48]	@ 0x30

		  SPI_TMS_Transfer(write_data, 16);
200046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200046f4:	2200      	movs	r2, #0
200046f6:	461c      	mov	r4, r3
200046f8:	4615      	mov	r5, r2
200046fa:	2210      	movs	r2, #16
200046fc:	4620      	mov	r0, r4
200046fe:	4629      	mov	r1, r5
20004700:	f000 fc3a 	bl	20004f78 <SPI_TMS_Transfer>
		  SPI_Transfer(&dummyRead, 0, 16);
20004704:	f107 0110 	add.w	r1, r7, #16
20004708:	2310      	movs	r3, #16
2000470a:	9300      	str	r3, [sp, #0]
2000470c:	f04f 0200 	mov.w	r2, #0
20004710:	f04f 0300 	mov.w	r3, #0
20004714:	4608      	mov	r0, r1
20004716:	f000 fcd7 	bl	200050c8 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 16);
2000471a:	f107 0310 	add.w	r3, r7, #16
2000471e:	2110      	movs	r1, #16
20004720:	4618      	mov	r0, r3
20004722:	f000 fc5b 	bl	20004fdc <SPI_TMSRead>
20004726:	e04e      	b.n	200047c6 <SWD_Transfer_LL+0x3c2>
20004728:	40013400 	.word	0x40013400
2000472c:	2000da4c 	.word	0x2000da4c


	  }
	  else
	  {
		  SPI4->CR1 &= ~(0x1 << 6);
20004730:	4b30      	ldr	r3, [pc, #192]	@ (200047f4 <SWD_Transfer_LL+0x3f0>)
20004732:	681b      	ldr	r3, [r3, #0]
20004734:	4a2f      	ldr	r2, [pc, #188]	@ (200047f4 <SWD_Transfer_LL+0x3f0>)
20004736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
2000473a:	6013      	str	r3, [r2, #0]
		  SPI_SwitchPhaseToListen();
2000473c:	f000 fc70 	bl	20005020 <SPI_SwitchPhaseToListen>
		  SPI4->CR1 |= (0x1 << 6);
20004740:	4b2c      	ldr	r3, [pc, #176]	@ (200047f4 <SWD_Transfer_LL+0x3f0>)
20004742:	681b      	ldr	r3, [r3, #0]
20004744:	4a2b      	ldr	r2, [pc, #172]	@ (200047f4 <SWD_Transfer_LL+0x3f0>)
20004746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000474a:	6013      	str	r3, [r2, #0]

		  n = DAP_Data.swd_conf.turnaround;
2000474c:	4b2a      	ldr	r3, [pc, #168]	@ (200047f8 <SWD_Transfer_LL+0x3f4>)
2000474e:	7e1b      	ldrb	r3, [r3, #24]
20004750:	62bb      	str	r3, [r7, #40]	@ 0x28

		  SPI_Transfer(&dummyRead, 0, 16);
20004752:	f107 0110 	add.w	r1, r7, #16
20004756:	2310      	movs	r3, #16
20004758:	9300      	str	r3, [sp, #0]
2000475a:	f04f 0200 	mov.w	r2, #0
2000475e:	f04f 0300 	mov.w	r3, #0
20004762:	4608      	mov	r0, r1
20004764:	f000 fcb0 	bl	200050c8 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 16);
20004768:	f107 0310 	add.w	r3, r7, #16
2000476c:	2110      	movs	r1, #16
2000476e:	4618      	mov	r0, r3
20004770:	f000 fc34 	bl	20004fdc <SPI_TMSRead>

		  SPI_Transfer(&dummyRead, 0, 8);
20004774:	f107 0110 	add.w	r1, r7, #16
20004778:	2308      	movs	r3, #8
2000477a:	9300      	str	r3, [sp, #0]
2000477c:	f04f 0200 	mov.w	r2, #0
20004780:	f04f 0300 	mov.w	r3, #0
20004784:	4608      	mov	r0, r1
20004786:	f000 fc9f 	bl	200050c8 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 8);
2000478a:	f107 0310 	add.w	r3, r7, #16
2000478e:	2108      	movs	r1, #8
20004790:	4618      	mov	r0, r3
20004792:	f000 fc23 	bl	20004fdc <SPI_TMSRead>

		  SPI_Transfer(&dummyRead, 0, 33-24 +n);
20004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004798:	b2db      	uxtb	r3, r3
2000479a:	3309      	adds	r3, #9
2000479c:	b2db      	uxtb	r3, r3
2000479e:	f107 0110 	add.w	r1, r7, #16
200047a2:	9300      	str	r3, [sp, #0]
200047a4:	f04f 0200 	mov.w	r2, #0
200047a8:	f04f 0300 	mov.w	r3, #0
200047ac:	4608      	mov	r0, r1
200047ae:	f000 fc8b 	bl	200050c8 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 33-24 +n);
200047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200047b4:	b2db      	uxtb	r3, r3
200047b6:	3309      	adds	r3, #9
200047b8:	b2da      	uxtb	r2, r3
200047ba:	f107 0310 	add.w	r3, r7, #16
200047be:	4611      	mov	r1, r2
200047c0:	4618      	mov	r0, r3
200047c2:	f000 fc0b 	bl	20004fdc <SPI_TMSRead>

	  }

	  SPI4->CR1 &= ~(0x1 << 6);
200047c6:	4b0b      	ldr	r3, [pc, #44]	@ (200047f4 <SWD_Transfer_LL+0x3f0>)
200047c8:	681b      	ldr	r3, [r3, #0]
200047ca:	4a0a      	ldr	r2, [pc, #40]	@ (200047f4 <SWD_Transfer_LL+0x3f0>)
200047cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
200047d0:	6013      	str	r3, [r2, #0]


  }

  /* Capture Timestamp */
      if (request & DAP_TRANSFER_TIMESTAMP) {
200047d2:	68fb      	ldr	r3, [r7, #12]
200047d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200047d8:	2b00      	cmp	r3, #0
200047da:	d004      	beq.n	200047e6 <SWD_Transfer_LL+0x3e2>
        DAP_Data.timestamp = TIMESTAMP_GET();
200047dc:	f7ff fc40 	bl	20004060 <TIMESTAMP_GET>
200047e0:	4603      	mov	r3, r0
200047e2:	4a05      	ldr	r2, [pc, #20]	@ (200047f8 <SWD_Transfer_LL+0x3f4>)
200047e4:	6093      	str	r3, [r2, #8]
      }

  return ((uint8_t)ack);
200047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200047e8:	b2db      	uxtb	r3, r3
    SW_CLOCK_CYCLE();                   /* Back off data phase */               
  }                                                                             
  PIN_SWDIO_OUT_ENABLE();                                                       
  PIN_SWDIO_OUT(1U);                                                            
  return ((uint8_t)ack);                                                        
}
200047ea:	4618      	mov	r0, r3
200047ec:	3738      	adds	r7, #56	@ 0x38
200047ee:	46bd      	mov	sp, r7
200047f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
200047f4:	40013400 	.word	0x40013400
200047f8:	2000da4c 	.word	0x2000da4c

200047fc <SWD_Transfer>:

// SWD Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
uint8_t  SWD_Transfer(uint32_t request, uint32_t *data) {
200047fc:	b580      	push	{r7, lr}
200047fe:	b082      	sub	sp, #8
20004800:	af00      	add	r7, sp, #0
20004802:	6078      	str	r0, [r7, #4]
20004804:	6039      	str	r1, [r7, #0]
  if (DAP_Data.fast_clock) {
20004806:	4b09      	ldr	r3, [pc, #36]	@ (2000482c <SWD_Transfer+0x30>)
20004808:	785b      	ldrb	r3, [r3, #1]
2000480a:	2b00      	cmp	r3, #0
2000480c:	d005      	beq.n	2000481a <SWD_Transfer+0x1e>
    return SWD_Transfer_LL(request, data);
2000480e:	6839      	ldr	r1, [r7, #0]
20004810:	6878      	ldr	r0, [r7, #4]
20004812:	f7ff fdf7 	bl	20004404 <SWD_Transfer_LL>
20004816:	4603      	mov	r3, r0
20004818:	e004      	b.n	20004824 <SWD_Transfer+0x28>
  } else {
    return SWD_Transfer_LL(request, data);
2000481a:	6839      	ldr	r1, [r7, #0]
2000481c:	6878      	ldr	r0, [r7, #4]
2000481e:	f7ff fdf1 	bl	20004404 <SWD_Transfer_LL>
20004822:	4603      	mov	r3, r0
  }
}
20004824:	4618      	mov	r0, r3
20004826:	3708      	adds	r7, #8
20004828:	46bd      	mov	sp, r7
2000482a:	bd80      	pop	{r7, pc}
2000482c:	2000da4c 	.word	0x2000da4c

20004830 <JTAG_GPIO_Write>:
 * @brief Sets the state of a GPIO pin.
 * @param port GPIO_TypeDef* The GPIO port (e.g., GPIOA, GPIOB).
 * @param pin uint16_t The pin number (e.g., GPIO_PIN_5).
 * @param state GPIO_PinState The desired state (GPIO_PIN_SET or GPIO_PIN_RESET).
 */
void JTAG_GPIO_Write(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state) {
20004830:	b580      	push	{r7, lr}
20004832:	b082      	sub	sp, #8
20004834:	af00      	add	r7, sp, #0
20004836:	6078      	str	r0, [r7, #4]
20004838:	460b      	mov	r3, r1
2000483a:	807b      	strh	r3, [r7, #2]
2000483c:	4613      	mov	r3, r2
2000483e:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(port, pin, state); // Using STM32 HAL library function
20004840:	787a      	ldrb	r2, [r7, #1]
20004842:	887b      	ldrh	r3, [r7, #2]
20004844:	4619      	mov	r1, r3
20004846:	6878      	ldr	r0, [r7, #4]
20004848:	f001 fd96 	bl	20006378 <HAL_GPIO_WritePin>
}
2000484c:	bf00      	nop
2000484e:	3708      	adds	r7, #8
20004850:	46bd      	mov	sp, r7
20004852:	bd80      	pop	{r7, pc}

20004854 <JTAG_Delay_ns>:

/**
 * @brief Introduces a small delay. Crucial for JTAG timing.
 * This needs to be carefully tuned. A simple loop or a timer-based delay.
 */
void JTAG_Delay_ns(uint32_t nanoseconds) {
20004854:	b580      	push	{r7, lr}
20004856:	b082      	sub	sp, #8
20004858:	af00      	add	r7, sp, #0
2000485a:	6078      	str	r0, [r7, #4]
    // Consider using a DWT (Data Watchpoint and Trace) cycle counter for very precise delays,
    // or a TIM (Timer) in one-shot mode. A simple NOP loop might be too slow or imprecise.
    // Example (very rough):
    //for (volatile uint32_t i = 0; i < (nanoseconds / 10); i++); // Adjust divisor based on CPU freq
	//HAL_Delay(nanoseconds);
	Delayms(nanoseconds);
2000485c:	6878      	ldr	r0, [r7, #4]
2000485e:	f7fc f875 	bl	2000094c <Delayms>

}
20004862:	bf00      	nop
20004864:	3708      	adds	r7, #8
20004866:	46bd      	mov	sp, r7
20004868:	bd80      	pop	{r7, pc}
	...

2000486c <JTAG_Reset>:

/**
 * @brief Resets the JTAG state machine to Test-Logic-Reset.
 * Can use TRST if available, or sequence TMS.
 */
void JTAG_Reset(void) {
2000486c:	b580      	push	{r7, lr}
2000486e:	af00      	add	r7, sp, #0
    #ifdef JTAG_TRST_PORT
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_RESET); // Assert TRST
20004870:	2200      	movs	r2, #0
20004872:	f44f 7180 	mov.w	r1, #256	@ 0x100
20004876:	4808      	ldr	r0, [pc, #32]	@ (20004898 <JTAG_Reset+0x2c>)
20004878:	f7ff ffda 	bl	20004830 <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS); // Hold for a short period
2000487c:	2001      	movs	r0, #1
2000487e:	f7ff ffe9 	bl	20004854 <JTAG_Delay_ns>
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_SET);   // De-assert TRST
20004882:	2201      	movs	r2, #1
20004884:	f44f 7180 	mov.w	r1, #256	@ 0x100
20004888:	4803      	ldr	r0, [pc, #12]	@ (20004898 <JTAG_Reset+0x2c>)
2000488a:	f7ff ffd1 	bl	20004830 <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS);
2000488e:	2001      	movs	r0, #1
20004890:	f7ff ffe0 	bl	20004854 <JTAG_Delay_ns>
    #else
    // Go to run-test/idle state
    SPI_TMS_Transfer(0x001f, 16);
    SPI_Transfer(&dummyInVal, 0, 16);
	#endif
}
20004894:	bf00      	nop
20004896:	bd80      	pop	{r7, pc}
20004898:	40020800 	.word	0x40020800

2000489c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000489c:	b580      	push	{r7, lr}
2000489e:	b084      	sub	sp, #16
200048a0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
200048a2:	f000 fec4 	bl	2000562e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
200048a6:	f000 f881 	bl	200049ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
200048aa:	f000 f9e3 	bl	20004c74 <MX_GPIO_Init>
  MX_ETH_Init();
200048ae:	f000 f8eb 	bl	20004a88 <MX_ETH_Init>
  MX_USART3_UART_Init();
200048b2:	f000 f9af 	bl	20004c14 <MX_USART3_UART_Init>
  MX_SPI1_Init();
200048b6:	f000 f935 	bl	20004b24 <MX_SPI1_Init>
  MX_SPI4_Init();
200048ba:	f000 f971 	bl	20004ba0 <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
200048be:	f008 f8bd 	bl	2000ca3c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */

  RCC->APB1ENR |= (1 << 15);
200048c2:	4b2f      	ldr	r3, [pc, #188]	@ (20004980 <main+0xe4>)
200048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200048c6:	4a2e      	ldr	r2, [pc, #184]	@ (20004980 <main+0xe4>)
200048c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
200048cc:	6413      	str	r3, [r2, #64]	@ 0x40

  Switch_SPI();
200048ce:	f000 fad9 	bl	20004e84 <Switch_SPI>
  SPI4->CR1 |= (1 << 6);
200048d2:	4b2c      	ldr	r3, [pc, #176]	@ (20004984 <main+0xe8>)
200048d4:	681b      	ldr	r3, [r3, #0]
200048d6:	4a2b      	ldr	r2, [pc, #172]	@ (20004984 <main+0xe8>)
200048d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200048dc:	6013      	str	r3, [r2, #0]

  SPI3->CR1 &= ~0x38;
200048de:	4b2a      	ldr	r3, [pc, #168]	@ (20004988 <main+0xec>)
200048e0:	681b      	ldr	r3, [r3, #0]
200048e2:	4a29      	ldr	r2, [pc, #164]	@ (20004988 <main+0xec>)
200048e4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
200048e8:	6013      	str	r3, [r2, #0]

  SPI3->CR1 |= (0x7 << 3);
200048ea:	4b27      	ldr	r3, [pc, #156]	@ (20004988 <main+0xec>)
200048ec:	681b      	ldr	r3, [r3, #0]
200048ee:	4a26      	ldr	r2, [pc, #152]	@ (20004988 <main+0xec>)
200048f0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
200048f4:	6013      	str	r3, [r2, #0]

  SPI4->CR1 |= (1 << 15);
200048f6:	4b23      	ldr	r3, [pc, #140]	@ (20004984 <main+0xe8>)
200048f8:	681b      	ldr	r3, [r3, #0]
200048fa:	4a22      	ldr	r2, [pc, #136]	@ (20004984 <main+0xe8>)
200048fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20004900:	6013      	str	r3, [r2, #0]
  SPI4->CR1 |= (1 << 14);
20004902:	4b20      	ldr	r3, [pc, #128]	@ (20004984 <main+0xe8>)
20004904:	681b      	ldr	r3, [r3, #0]
20004906:	4a1f      	ldr	r2, [pc, #124]	@ (20004984 <main+0xe8>)
20004908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2000490c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //__enable_irq();
  DWT->LAR = 0xC5ACCE55;
2000490e:	4b1f      	ldr	r3, [pc, #124]	@ (2000498c <main+0xf0>)
20004910:	4a1f      	ldr	r2, [pc, #124]	@ (20004990 <main+0xf4>)
20004912:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
20004916:	4b1f      	ldr	r3, [pc, #124]	@ (20004994 <main+0xf8>)
20004918:	68db      	ldr	r3, [r3, #12]
2000491a:	4a1e      	ldr	r2, [pc, #120]	@ (20004994 <main+0xf8>)
2000491c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20004920:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
20004922:	4b1a      	ldr	r3, [pc, #104]	@ (2000498c <main+0xf0>)
20004924:	2200      	movs	r2, #0
20004926:	605a      	str	r2, [r3, #4]
  DWT->CTRL  |= DWT_CTRL_CYCCNTENA_Msk;
20004928:	4b18      	ldr	r3, [pc, #96]	@ (2000498c <main+0xf0>)
2000492a:	681b      	ldr	r3, [r3, #0]
2000492c:	4a17      	ldr	r2, [pc, #92]	@ (2000498c <main+0xf0>)
2000492e:	f043 0301 	orr.w	r3, r3, #1
20004932:	6013      	str	r3, [r2, #0]
  while (1)
  {

	  uint32_t num;

	  if(msgAvailable)
20004934:	4b18      	ldr	r3, [pc, #96]	@ (20004998 <main+0xfc>)
20004936:	681b      	ldr	r3, [r3, #0]
20004938:	2b00      	cmp	r3, #0
2000493a:	d0fb      	beq.n	20004934 <main+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000493c:	b672      	cpsid	i
}
2000493e:	bf00      	nop
	  {
		  uint32_t readLen, writeLen;
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		  __disable_irq();
		  num = DAP_ProcessCommand(rdBuff, wrBuff);
20004940:	4916      	ldr	r1, [pc, #88]	@ (2000499c <main+0x100>)
20004942:	4817      	ldr	r0, [pc, #92]	@ (200049a0 <main+0x104>)
20004944:	f7fd fd74 	bl	20002430 <DAP_ProcessCommand>
20004948:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
2000494a:	b662      	cpsie	i
}
2000494c:	bf00      	nop
		  __enable_irq();
		  readLen = (num & 0xFFFF0000) >> 16;
2000494e:	68fb      	ldr	r3, [r7, #12]
20004950:	0c1b      	lsrs	r3, r3, #16
20004952:	60bb      	str	r3, [r7, #8]
		  wrIdx += readLen;
20004954:	68bb      	ldr	r3, [r7, #8]
20004956:	b2da      	uxtb	r2, r3
20004958:	4b12      	ldr	r3, [pc, #72]	@ (200049a4 <main+0x108>)
2000495a:	781b      	ldrb	r3, [r3, #0]
2000495c:	4413      	add	r3, r2
2000495e:	b2da      	uxtb	r2, r3
20004960:	4b10      	ldr	r3, [pc, #64]	@ (200049a4 <main+0x108>)
20004962:	701a      	strb	r2, [r3, #0]

		  writeLen = (num & 0xFFFF);
20004964:	68fb      	ldr	r3, [r7, #12]
20004966:	b29b      	uxth	r3, r3
20004968:	607b      	str	r3, [r7, #4]
		  //writeLen = 0x40;

		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
2000496a:	687b      	ldr	r3, [r7, #4]
2000496c:	b29b      	uxth	r3, r3
2000496e:	461a      	mov	r2, r3
20004970:	490a      	ldr	r1, [pc, #40]	@ (2000499c <main+0x100>)
20004972:	480d      	ldr	r0, [pc, #52]	@ (200049a8 <main+0x10c>)
20004974:	f006 fb7c 	bl	2000b070 <USBD_CUSTOM_HID_SendReport>
		  			  wrBuff, writeLen);

		  msgAvailable = 0;
20004978:	4b07      	ldr	r3, [pc, #28]	@ (20004998 <main+0xfc>)
2000497a:	2200      	movs	r2, #0
2000497c:	601a      	str	r2, [r3, #0]
  {
2000497e:	e7d9      	b.n	20004934 <main+0x98>
20004980:	40023800 	.word	0x40023800
20004984:	40013400 	.word	0x40013400
20004988:	40003c00 	.word	0x40003c00
2000498c:	e0001000 	.word	0xe0001000
20004990:	c5acce55 	.word	0xc5acce55
20004994:	e000edf0 	.word	0xe000edf0
20004998:	2000ede4 	.word	0x2000ede4
2000499c:	2000ece0 	.word	0x2000ece0
200049a0:	2000ed60 	.word	0x2000ed60
200049a4:	2000ede0 	.word	0x2000ede0
200049a8:	2000ee0c 	.word	0x2000ee0c

200049ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
200049ac:	b580      	push	{r7, lr}
200049ae:	b094      	sub	sp, #80	@ 0x50
200049b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
200049b2:	f107 0320 	add.w	r3, r7, #32
200049b6:	2230      	movs	r2, #48	@ 0x30
200049b8:	2100      	movs	r1, #0
200049ba:	4618      	mov	r0, r3
200049bc:	f008 fdf4 	bl	2000d5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
200049c0:	f107 030c 	add.w	r3, r7, #12
200049c4:	2200      	movs	r2, #0
200049c6:	601a      	str	r2, [r3, #0]
200049c8:	605a      	str	r2, [r3, #4]
200049ca:	609a      	str	r2, [r3, #8]
200049cc:	60da      	str	r2, [r3, #12]
200049ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
200049d0:	f002 ff76 	bl	200078c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
200049d4:	4b2a      	ldr	r3, [pc, #168]	@ (20004a80 <SystemClock_Config+0xd4>)
200049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200049d8:	4a29      	ldr	r2, [pc, #164]	@ (20004a80 <SystemClock_Config+0xd4>)
200049da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200049de:	6413      	str	r3, [r2, #64]	@ 0x40
200049e0:	4b27      	ldr	r3, [pc, #156]	@ (20004a80 <SystemClock_Config+0xd4>)
200049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200049e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200049e8:	60bb      	str	r3, [r7, #8]
200049ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200049ec:	4b25      	ldr	r3, [pc, #148]	@ (20004a84 <SystemClock_Config+0xd8>)
200049ee:	681b      	ldr	r3, [r3, #0]
200049f0:	4a24      	ldr	r2, [pc, #144]	@ (20004a84 <SystemClock_Config+0xd8>)
200049f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
200049f6:	6013      	str	r3, [r2, #0]
200049f8:	4b22      	ldr	r3, [pc, #136]	@ (20004a84 <SystemClock_Config+0xd8>)
200049fa:	681b      	ldr	r3, [r3, #0]
200049fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20004a00:	607b      	str	r3, [r7, #4]
20004a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20004a04:	2301      	movs	r3, #1
20004a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
20004a08:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
20004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20004a0e:	2302      	movs	r3, #2
20004a10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20004a12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20004a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
20004a18:	2304      	movs	r3, #4
20004a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
20004a1c:	23d8      	movs	r3, #216	@ 0xd8
20004a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20004a20:	2302      	movs	r3, #2
20004a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
20004a24:	2309      	movs	r3, #9
20004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20004a28:	f107 0320 	add.w	r3, r7, #32
20004a2c:	4618      	mov	r0, r3
20004a2e:	f002 ffa7 	bl	20007980 <HAL_RCC_OscConfig>
20004a32:	4603      	mov	r3, r0
20004a34:	2b00      	cmp	r3, #0
20004a36:	d001      	beq.n	20004a3c <SystemClock_Config+0x90>
  {
    Error_Handler();
20004a38:	f000 fb72 	bl	20005120 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20004a3c:	f002 ff50 	bl	200078e0 <HAL_PWREx_EnableOverDrive>
20004a40:	4603      	mov	r3, r0
20004a42:	2b00      	cmp	r3, #0
20004a44:	d001      	beq.n	20004a4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
20004a46:	f000 fb6b 	bl	20005120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20004a4a:	230f      	movs	r3, #15
20004a4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20004a4e:	2302      	movs	r3, #2
20004a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20004a52:	2300      	movs	r3, #0
20004a54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
20004a56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
20004a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20004a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20004a60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
20004a62:	f107 030c 	add.w	r3, r7, #12
20004a66:	2107      	movs	r1, #7
20004a68:	4618      	mov	r0, r3
20004a6a:	f003 fa2d 	bl	20007ec8 <HAL_RCC_ClockConfig>
20004a6e:	4603      	mov	r3, r0
20004a70:	2b00      	cmp	r3, #0
20004a72:	d001      	beq.n	20004a78 <SystemClock_Config+0xcc>
  {
    Error_Handler();
20004a74:	f000 fb54 	bl	20005120 <Error_Handler>
  }
}
20004a78:	bf00      	nop
20004a7a:	3750      	adds	r7, #80	@ 0x50
20004a7c:	46bd      	mov	sp, r7
20004a7e:	bd80      	pop	{r7, pc}
20004a80:	40023800 	.word	0x40023800
20004a84:	40007000 	.word	0x40007000

20004a88 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
20004a88:	b580      	push	{r7, lr}
20004a8a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
20004a8c:	4b1f      	ldr	r3, [pc, #124]	@ (20004b0c <MX_ETH_Init+0x84>)
20004a8e:	4a20      	ldr	r2, [pc, #128]	@ (20004b10 <MX_ETH_Init+0x88>)
20004a90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
20004a92:	4b20      	ldr	r3, [pc, #128]	@ (20004b14 <MX_ETH_Init+0x8c>)
20004a94:	2200      	movs	r2, #0
20004a96:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
20004a98:	4b1e      	ldr	r3, [pc, #120]	@ (20004b14 <MX_ETH_Init+0x8c>)
20004a9a:	2280      	movs	r2, #128	@ 0x80
20004a9c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
20004a9e:	4b1d      	ldr	r3, [pc, #116]	@ (20004b14 <MX_ETH_Init+0x8c>)
20004aa0:	22e1      	movs	r2, #225	@ 0xe1
20004aa2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
20004aa4:	4b1b      	ldr	r3, [pc, #108]	@ (20004b14 <MX_ETH_Init+0x8c>)
20004aa6:	2200      	movs	r2, #0
20004aa8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
20004aaa:	4b1a      	ldr	r3, [pc, #104]	@ (20004b14 <MX_ETH_Init+0x8c>)
20004aac:	2200      	movs	r2, #0
20004aae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
20004ab0:	4b18      	ldr	r3, [pc, #96]	@ (20004b14 <MX_ETH_Init+0x8c>)
20004ab2:	2200      	movs	r2, #0
20004ab4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
20004ab6:	4b15      	ldr	r3, [pc, #84]	@ (20004b0c <MX_ETH_Init+0x84>)
20004ab8:	4a16      	ldr	r2, [pc, #88]	@ (20004b14 <MX_ETH_Init+0x8c>)
20004aba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
20004abc:	4b13      	ldr	r3, [pc, #76]	@ (20004b0c <MX_ETH_Init+0x84>)
20004abe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
20004ac2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
20004ac4:	4b11      	ldr	r3, [pc, #68]	@ (20004b0c <MX_ETH_Init+0x84>)
20004ac6:	4a14      	ldr	r2, [pc, #80]	@ (20004b18 <MX_ETH_Init+0x90>)
20004ac8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
20004aca:	4b10      	ldr	r3, [pc, #64]	@ (20004b0c <MX_ETH_Init+0x84>)
20004acc:	4a13      	ldr	r2, [pc, #76]	@ (20004b1c <MX_ETH_Init+0x94>)
20004ace:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
20004ad0:	4b0e      	ldr	r3, [pc, #56]	@ (20004b0c <MX_ETH_Init+0x84>)
20004ad2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
20004ad6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
20004ad8:	480c      	ldr	r0, [pc, #48]	@ (20004b0c <MX_ETH_Init+0x84>)
20004ada:	f000 ff3b 	bl	20005954 <HAL_ETH_Init>
20004ade:	4603      	mov	r3, r0
20004ae0:	2b00      	cmp	r3, #0
20004ae2:	d001      	beq.n	20004ae8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
20004ae4:	f000 fb1c 	bl	20005120 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
20004ae8:	2238      	movs	r2, #56	@ 0x38
20004aea:	2100      	movs	r1, #0
20004aec:	480c      	ldr	r0, [pc, #48]	@ (20004b20 <MX_ETH_Init+0x98>)
20004aee:	f008 fd5b 	bl	2000d5a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
20004af2:	4b0b      	ldr	r3, [pc, #44]	@ (20004b20 <MX_ETH_Init+0x98>)
20004af4:	2221      	movs	r2, #33	@ 0x21
20004af6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
20004af8:	4b09      	ldr	r3, [pc, #36]	@ (20004b20 <MX_ETH_Init+0x98>)
20004afa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
20004afe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
20004b00:	4b07      	ldr	r3, [pc, #28]	@ (20004b20 <MX_ETH_Init+0x98>)
20004b02:	2200      	movs	r2, #0
20004b04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
20004b06:	bf00      	nop
20004b08:	bd80      	pop	{r7, pc}
20004b0a:	bf00      	nop
20004b0c:	2000eae0 	.word	0x2000eae0
20004b10:	40028000 	.word	0x40028000
20004b14:	2000edf4 	.word	0x2000edf4
20004b18:	2000d990 	.word	0x2000d990
20004b1c:	2000d8f0 	.word	0x2000d8f0
20004b20:	2000eaa8 	.word	0x2000eaa8

20004b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
20004b24:	b580      	push	{r7, lr}
20004b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
20004b28:	4b1b      	ldr	r3, [pc, #108]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b2a:	4a1c      	ldr	r2, [pc, #112]	@ (20004b9c <MX_SPI1_Init+0x78>)
20004b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
20004b2e:	4b1a      	ldr	r3, [pc, #104]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
20004b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
20004b36:	4b18      	ldr	r3, [pc, #96]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b38:	2200      	movs	r2, #0
20004b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
20004b3c:	4b16      	ldr	r3, [pc, #88]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b3e:	f44f 7240 	mov.w	r2, #768	@ 0x300
20004b42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
20004b44:	4b14      	ldr	r3, [pc, #80]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b46:	2200      	movs	r2, #0
20004b48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
20004b4a:	4b13      	ldr	r3, [pc, #76]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b4c:	2200      	movs	r2, #0
20004b4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
20004b50:	4b11      	ldr	r3, [pc, #68]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
20004b56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
20004b58:	4b0f      	ldr	r3, [pc, #60]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b5a:	2238      	movs	r2, #56	@ 0x38
20004b5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
20004b5e:	4b0e      	ldr	r3, [pc, #56]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b60:	2280      	movs	r2, #128	@ 0x80
20004b62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
20004b64:	4b0c      	ldr	r3, [pc, #48]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b66:	2200      	movs	r2, #0
20004b68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20004b6a:	4b0b      	ldr	r3, [pc, #44]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b6c:	2200      	movs	r2, #0
20004b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
20004b70:	4b09      	ldr	r3, [pc, #36]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b72:	2207      	movs	r2, #7
20004b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
20004b76:	4b08      	ldr	r3, [pc, #32]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b78:	2200      	movs	r2, #0
20004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
20004b7c:	4b06      	ldr	r3, [pc, #24]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b7e:	2208      	movs	r2, #8
20004b80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
20004b82:	4805      	ldr	r0, [pc, #20]	@ (20004b98 <MX_SPI1_Init+0x74>)
20004b84:	f003 ffb6 	bl	20008af4 <HAL_SPI_Init>
20004b88:	4603      	mov	r3, r0
20004b8a:	2b00      	cmp	r3, #0
20004b8c:	d001      	beq.n	20004b92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
20004b8e:	f000 fac7 	bl	20005120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
20004b92:	bf00      	nop
20004b94:	bd80      	pop	{r7, pc}
20004b96:	bf00      	nop
20004b98:	2000eb90 	.word	0x2000eb90
20004b9c:	40013000 	.word	0x40013000

20004ba0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
20004ba0:	b580      	push	{r7, lr}
20004ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
20004ba4:	4b19      	ldr	r3, [pc, #100]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004ba6:	4a1a      	ldr	r2, [pc, #104]	@ (20004c10 <MX_SPI4_Init+0x70>)
20004ba8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
20004baa:	4b18      	ldr	r3, [pc, #96]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bac:	2200      	movs	r2, #0
20004bae:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
20004bb0:	4b16      	ldr	r3, [pc, #88]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bb2:	2200      	movs	r2, #0
20004bb4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
20004bb6:	4b15      	ldr	r3, [pc, #84]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bb8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
20004bbc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
20004bbe:	4b13      	ldr	r3, [pc, #76]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bc0:	2200      	movs	r2, #0
20004bc2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
20004bc4:	4b11      	ldr	r3, [pc, #68]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bc6:	2200      	movs	r2, #0
20004bc8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
20004bca:	4b10      	ldr	r3, [pc, #64]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
20004bd0:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_LSB;
20004bd2:	4b0e      	ldr	r3, [pc, #56]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bd4:	2280      	movs	r2, #128	@ 0x80
20004bd6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
20004bd8:	4b0c      	ldr	r3, [pc, #48]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bda:	2200      	movs	r2, #0
20004bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20004bde:	4b0b      	ldr	r3, [pc, #44]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004be0:	2200      	movs	r2, #0
20004be2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
20004be4:	4b09      	ldr	r3, [pc, #36]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004be6:	2207      	movs	r2, #7
20004be8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
20004bea:	4b08      	ldr	r3, [pc, #32]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bec:	2200      	movs	r2, #0
20004bee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
20004bf0:	4b06      	ldr	r3, [pc, #24]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bf2:	2200      	movs	r2, #0
20004bf4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
20004bf6:	4805      	ldr	r0, [pc, #20]	@ (20004c0c <MX_SPI4_Init+0x6c>)
20004bf8:	f003 ff7c 	bl	20008af4 <HAL_SPI_Init>
20004bfc:	4603      	mov	r3, r0
20004bfe:	2b00      	cmp	r3, #0
20004c00:	d001      	beq.n	20004c06 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
20004c02:	f000 fa8d 	bl	20005120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
20004c06:	bf00      	nop
20004c08:	bd80      	pop	{r7, pc}
20004c0a:	bf00      	nop
20004c0c:	2000ebf4 	.word	0x2000ebf4
20004c10:	40013400 	.word	0x40013400

20004c14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
20004c14:	b580      	push	{r7, lr}
20004c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
20004c18:	4b14      	ldr	r3, [pc, #80]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c1a:	4a15      	ldr	r2, [pc, #84]	@ (20004c70 <MX_USART3_UART_Init+0x5c>)
20004c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
20004c1e:	4b13      	ldr	r3, [pc, #76]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
20004c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
20004c26:	4b11      	ldr	r3, [pc, #68]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c28:	2200      	movs	r2, #0
20004c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
20004c2c:	4b0f      	ldr	r3, [pc, #60]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c2e:	2200      	movs	r2, #0
20004c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
20004c32:	4b0e      	ldr	r3, [pc, #56]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c34:	2200      	movs	r2, #0
20004c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
20004c38:	4b0c      	ldr	r3, [pc, #48]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c3a:	220c      	movs	r2, #12
20004c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
20004c3e:	4b0b      	ldr	r3, [pc, #44]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c40:	2200      	movs	r2, #0
20004c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
20004c44:	4b09      	ldr	r3, [pc, #36]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c46:	2200      	movs	r2, #0
20004c48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
20004c4a:	4b08      	ldr	r3, [pc, #32]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c4c:	2200      	movs	r2, #0
20004c4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
20004c50:	4b06      	ldr	r3, [pc, #24]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c52:	2200      	movs	r2, #0
20004c54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
20004c56:	4805      	ldr	r0, [pc, #20]	@ (20004c6c <MX_USART3_UART_Init+0x58>)
20004c58:	f003 fff7 	bl	20008c4a <HAL_UART_Init>
20004c5c:	4603      	mov	r3, r0
20004c5e:	2b00      	cmp	r3, #0
20004c60:	d001      	beq.n	20004c66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
20004c62:	f000 fa5d 	bl	20005120 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
20004c66:	bf00      	nop
20004c68:	bd80      	pop	{r7, pc}
20004c6a:	bf00      	nop
20004c6c:	2000ec58 	.word	0x2000ec58
20004c70:	40004800 	.word	0x40004800

20004c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
20004c74:	b580      	push	{r7, lr}
20004c76:	b08c      	sub	sp, #48	@ 0x30
20004c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20004c7a:	f107 031c 	add.w	r3, r7, #28
20004c7e:	2200      	movs	r2, #0
20004c80:	601a      	str	r2, [r3, #0]
20004c82:	605a      	str	r2, [r3, #4]
20004c84:	609a      	str	r2, [r3, #8]
20004c86:	60da      	str	r2, [r3, #12]
20004c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
20004c8a:	4b79      	ldr	r3, [pc, #484]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004c8e:	4a78      	ldr	r2, [pc, #480]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004c90:	f043 0310 	orr.w	r3, r3, #16
20004c94:	6313      	str	r3, [r2, #48]	@ 0x30
20004c96:	4b76      	ldr	r3, [pc, #472]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004c9a:	f003 0310 	and.w	r3, r3, #16
20004c9e:	61bb      	str	r3, [r7, #24]
20004ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20004ca2:	4b73      	ldr	r3, [pc, #460]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004ca6:	4a72      	ldr	r2, [pc, #456]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004ca8:	f043 0304 	orr.w	r3, r3, #4
20004cac:	6313      	str	r3, [r2, #48]	@ 0x30
20004cae:	4b70      	ldr	r3, [pc, #448]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004cb2:	f003 0304 	and.w	r3, r3, #4
20004cb6:	617b      	str	r3, [r7, #20]
20004cb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
20004cba:	4b6d      	ldr	r3, [pc, #436]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004cbe:	4a6c      	ldr	r2, [pc, #432]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20004cc4:	6313      	str	r3, [r2, #48]	@ 0x30
20004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004cce:	613b      	str	r3, [r7, #16]
20004cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20004cd2:	4b67      	ldr	r3, [pc, #412]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004cd6:	4a66      	ldr	r2, [pc, #408]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cd8:	f043 0301 	orr.w	r3, r3, #1
20004cdc:	6313      	str	r3, [r2, #48]	@ 0x30
20004cde:	4b64      	ldr	r3, [pc, #400]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004ce2:	f003 0301 	and.w	r3, r3, #1
20004ce6:	60fb      	str	r3, [r7, #12]
20004ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20004cea:	4b61      	ldr	r3, [pc, #388]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004cee:	4a60      	ldr	r2, [pc, #384]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cf0:	f043 0302 	orr.w	r3, r3, #2
20004cf4:	6313      	str	r3, [r2, #48]	@ 0x30
20004cf6:	4b5e      	ldr	r3, [pc, #376]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004cfa:	f003 0302 	and.w	r3, r3, #2
20004cfe:	60bb      	str	r3, [r7, #8]
20004d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
20004d02:	4b5b      	ldr	r3, [pc, #364]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004d06:	4a5a      	ldr	r2, [pc, #360]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004d08:	f043 0308 	orr.w	r3, r3, #8
20004d0c:	6313      	str	r3, [r2, #48]	@ 0x30
20004d0e:	4b58      	ldr	r3, [pc, #352]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004d12:	f003 0308 	and.w	r3, r3, #8
20004d16:	607b      	str	r3, [r7, #4]
20004d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
20004d1a:	4b55      	ldr	r3, [pc, #340]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004d1e:	4a54      	ldr	r2, [pc, #336]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20004d24:	6313      	str	r3, [r2, #48]	@ 0x30
20004d26:	4b52      	ldr	r3, [pc, #328]	@ (20004e70 <MX_GPIO_Init+0x1fc>)
20004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20004d2e:	603b      	str	r3, [r7, #0]
20004d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
20004d32:	2200      	movs	r2, #0
20004d34:	f244 0181 	movw	r1, #16513	@ 0x4081
20004d38:	484e      	ldr	r0, [pc, #312]	@ (20004e74 <MX_GPIO_Init+0x200>)
20004d3a:	f001 fb1d 	bl	20006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
20004d3e:	2200      	movs	r2, #0
20004d40:	2140      	movs	r1, #64	@ 0x40
20004d42:	484d      	ldr	r0, [pc, #308]	@ (20004e78 <MX_GPIO_Init+0x204>)
20004d44:	f001 fb18 	bl	20006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TRST_Pin|JTAG_TDI_Pin, GPIO_PIN_SET);
20004d48:	2201      	movs	r2, #1
20004d4a:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
20004d4e:	484b      	ldr	r0, [pc, #300]	@ (20004e7c <MX_GPIO_Init+0x208>)
20004d50:	f001 fb12 	bl	20006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TMS_Pin|JTAG_TCK_Pin, GPIO_PIN_RESET);
20004d54:	2200      	movs	r2, #0
20004d56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
20004d5a:	4848      	ldr	r0, [pc, #288]	@ (20004e7c <MX_GPIO_Init+0x208>)
20004d5c:	f001 fb0c 	bl	20006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JTAG_SRST_GPIO_Port, JTAG_SRST_Pin, GPIO_PIN_SET);
20004d60:	2201      	movs	r2, #1
20004d62:	2104      	movs	r1, #4
20004d64:	4846      	ldr	r0, [pc, #280]	@ (20004e80 <MX_GPIO_Init+0x20c>)
20004d66:	f001 fb07 	bl	20006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
20004d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20004d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
20004d70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
20004d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004d76:	2300      	movs	r3, #0
20004d78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
20004d7a:	f107 031c 	add.w	r3, r7, #28
20004d7e:	4619      	mov	r1, r3
20004d80:	483e      	ldr	r0, [pc, #248]	@ (20004e7c <MX_GPIO_Init+0x208>)
20004d82:	f001 f935 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
20004d86:	f244 0381 	movw	r3, #16513	@ 0x4081
20004d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004d8c:	2301      	movs	r3, #1
20004d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004d90:	2300      	movs	r3, #0
20004d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20004d94:	2300      	movs	r3, #0
20004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20004d98:	f107 031c 	add.w	r3, r7, #28
20004d9c:	4619      	mov	r1, r3
20004d9e:	4835      	ldr	r0, [pc, #212]	@ (20004e74 <MX_GPIO_Init+0x200>)
20004da0:	f001 f926 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
20004da4:	2340      	movs	r3, #64	@ 0x40
20004da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004da8:	2301      	movs	r3, #1
20004daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004dac:	2300      	movs	r3, #0
20004dae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20004db0:	2300      	movs	r3, #0
20004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
20004db4:	f107 031c 	add.w	r3, r7, #28
20004db8:	4619      	mov	r1, r3
20004dba:	482f      	ldr	r0, [pc, #188]	@ (20004e78 <MX_GPIO_Init+0x204>)
20004dbc:	f001 f918 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
20004dc0:	2380      	movs	r3, #128	@ 0x80
20004dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20004dc4:	2300      	movs	r3, #0
20004dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004dc8:	2300      	movs	r3, #0
20004dca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
20004dcc:	f107 031c 	add.w	r3, r7, #28
20004dd0:	4619      	mov	r1, r3
20004dd2:	4829      	ldr	r0, [pc, #164]	@ (20004e78 <MX_GPIO_Init+0x204>)
20004dd4:	f001 f90c 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TRST_Pin */
  GPIO_InitStruct.Pin = JTAG_TRST_Pin;
20004dd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004dde:	2301      	movs	r3, #1
20004de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004de2:	2300      	movs	r3, #0
20004de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004de6:	2303      	movs	r3, #3
20004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TRST_GPIO_Port, &GPIO_InitStruct);
20004dea:	f107 031c 	add.w	r3, r7, #28
20004dee:	4619      	mov	r1, r3
20004df0:	4822      	ldr	r0, [pc, #136]	@ (20004e7c <MX_GPIO_Init+0x208>)
20004df2:	f001 f8fd 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : JTAG_TMS_Pin JTAG_TCK_Pin */
  GPIO_InitStruct.Pin = JTAG_TMS_Pin|JTAG_TCK_Pin;
20004df6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
20004dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004dfc:	2301      	movs	r3, #1
20004dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20004e00:	2302      	movs	r3, #2
20004e02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004e04:	2303      	movs	r3, #3
20004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20004e08:	f107 031c 	add.w	r3, r7, #28
20004e0c:	4619      	mov	r1, r3
20004e0e:	481b      	ldr	r0, [pc, #108]	@ (20004e7c <MX_GPIO_Init+0x208>)
20004e10:	f001 f8ee 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDO_Pin */
  GPIO_InitStruct.Pin = JTAG_TDO_Pin;
20004e14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20004e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20004e1a:	2300      	movs	r3, #0
20004e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20004e1e:	2301      	movs	r3, #1
20004e20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JTAG_TDO_GPIO_Port, &GPIO_InitStruct);
20004e22:	f107 031c 	add.w	r3, r7, #28
20004e26:	4619      	mov	r1, r3
20004e28:	4814      	ldr	r0, [pc, #80]	@ (20004e7c <MX_GPIO_Init+0x208>)
20004e2a:	f001 f8e1 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDI_Pin */
  GPIO_InitStruct.Pin = JTAG_TDI_Pin;
20004e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20004e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004e34:	2301      	movs	r3, #1
20004e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20004e38:	2301      	movs	r3, #1
20004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004e3c:	2303      	movs	r3, #3
20004e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TDI_GPIO_Port, &GPIO_InitStruct);
20004e40:	f107 031c 	add.w	r3, r7, #28
20004e44:	4619      	mov	r1, r3
20004e46:	480d      	ldr	r0, [pc, #52]	@ (20004e7c <MX_GPIO_Init+0x208>)
20004e48:	f001 f8d2 	bl	20005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_SRST_Pin */
  GPIO_InitStruct.Pin = JTAG_SRST_Pin;
20004e4c:	2304      	movs	r3, #4
20004e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004e50:	2301      	movs	r3, #1
20004e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20004e54:	2301      	movs	r3, #1
20004e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004e58:	2303      	movs	r3, #3
20004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_SRST_GPIO_Port, &GPIO_InitStruct);
20004e5c:	f107 031c 	add.w	r3, r7, #28
20004e60:	4619      	mov	r1, r3
20004e62:	4807      	ldr	r0, [pc, #28]	@ (20004e80 <MX_GPIO_Init+0x20c>)
20004e64:	f001 f8c4 	bl	20005ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
20004e68:	bf00      	nop
20004e6a:	3730      	adds	r7, #48	@ 0x30
20004e6c:	46bd      	mov	sp, r7
20004e6e:	bd80      	pop	{r7, pc}
20004e70:	40023800 	.word	0x40023800
20004e74:	40020400 	.word	0x40020400
20004e78:	40021800 	.word	0x40021800
20004e7c:	40020800 	.word	0x40020800
20004e80:	40020c00 	.word	0x40020c00

20004e84 <Switch_SPI>:

/* USER CODE BEGIN 4 */

uint32_t pupdr, afr, moder;
void Switch_SPI(void)
{
20004e84:	b480      	push	{r7}
20004e86:	af00      	add	r7, sp, #0
	pupdr = GPIOC->PUPDR;
20004e88:	4b0f      	ldr	r3, [pc, #60]	@ (20004ec8 <Switch_SPI+0x44>)
20004e8a:	68db      	ldr	r3, [r3, #12]
20004e8c:	4a0f      	ldr	r2, [pc, #60]	@ (20004ecc <Switch_SPI+0x48>)
20004e8e:	6013      	str	r3, [r2, #0]
	afr = GPIOC->AFR[1];
20004e90:	4b0d      	ldr	r3, [pc, #52]	@ (20004ec8 <Switch_SPI+0x44>)
20004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20004e94:	4a0e      	ldr	r2, [pc, #56]	@ (20004ed0 <Switch_SPI+0x4c>)
20004e96:	6013      	str	r3, [r2, #0]
	moder = GPIOC->MODER;
20004e98:	4b0b      	ldr	r3, [pc, #44]	@ (20004ec8 <Switch_SPI+0x44>)
20004e9a:	681b      	ldr	r3, [r3, #0]
20004e9c:	4a0d      	ldr	r2, [pc, #52]	@ (20004ed4 <Switch_SPI+0x50>)
20004e9e:	6013      	str	r3, [r2, #0]

	GPIOC->PUPDR = (0x1 << 16);
20004ea0:	4b09      	ldr	r3, [pc, #36]	@ (20004ec8 <Switch_SPI+0x44>)
20004ea2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20004ea6:	60da      	str	r2, [r3, #12]
	GPIOC->AFR[1] = (0x6 << 8) | (0x6 << 12) | (0x6 << 16);
20004ea8:	4b07      	ldr	r3, [pc, #28]	@ (20004ec8 <Switch_SPI+0x44>)
20004eaa:	4a0b      	ldr	r2, [pc, #44]	@ (20004ed8 <Switch_SPI+0x54>)
20004eac:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOC->MODER = (1 << 16) | (0x1 << 18) | (0x2 << 20) | (0x2 << 22 )| (0x2 << 24);
20004eae:	4b06      	ldr	r3, [pc, #24]	@ (20004ec8 <Switch_SPI+0x44>)
20004eb0:	4a0a      	ldr	r2, [pc, #40]	@ (20004edc <Switch_SPI+0x58>)
20004eb2:	601a      	str	r2, [r3, #0]

	SPI3->CR1 = (0x1 << 8) | (0x1 << 9) |
20004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (20004ee0 <Switch_SPI+0x5c>)
20004eb6:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
20004eba:	601a      	str	r2, [r3, #0]
			(1 << 2) | (0x7 << 3) | (0x1 << 7) |
			(0x1 << 6);


}
20004ebc:	bf00      	nop
20004ebe:	46bd      	mov	sp, r7
20004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ec4:	4770      	bx	lr
20004ec6:	bf00      	nop
20004ec8:	40020800 	.word	0x40020800
20004ecc:	2000ede8 	.word	0x2000ede8
20004ed0:	2000edec 	.word	0x2000edec
20004ed4:	2000edf0 	.word	0x2000edf0
20004ed8:	00066600 	.word	0x00066600
20004edc:	02a50000 	.word	0x02a50000
20004ee0:	40003c00 	.word	0x40003c00

20004ee4 <WaitForComplete>:
{
	while( !(SPI3->SR & (0x1 << 7) ) );
}

static inline void WaitForComplete(void)
{
20004ee4:	b480      	push	{r7}
20004ee6:	af00      	add	r7, sp, #0
	while( (SPI3->SR & (0x1 << 7) ) );
20004ee8:	bf00      	nop
20004eea:	4b06      	ldr	r3, [pc, #24]	@ (20004f04 <WaitForComplete+0x20>)
20004eec:	689b      	ldr	r3, [r3, #8]
20004eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004ef2:	2b00      	cmp	r3, #0
20004ef4:	d1f9      	bne.n	20004eea <WaitForComplete+0x6>
}
20004ef6:	bf00      	nop
20004ef8:	bf00      	nop
20004efa:	46bd      	mov	sp, r7
20004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f00:	4770      	bx	lr
20004f02:	bf00      	nop
20004f04:	40003c00 	.word	0x40003c00

20004f08 <xFer>:

static inline void xFer(uint32_t *rdData, uint32_t wrData, uint8_t bitSize)
{
20004f08:	b580      	push	{r7, lr}
20004f0a:	b086      	sub	sp, #24
20004f0c:	af00      	add	r7, sp, #0
20004f0e:	60f8      	str	r0, [r7, #12]
20004f10:	60b9      	str	r1, [r7, #8]
20004f12:	4613      	mov	r3, r2
20004f14:	71fb      	strb	r3, [r7, #7]

	WaitForComplete();
20004f16:	f7ff ffe5 	bl	20004ee4 <WaitForComplete>
	uint8_t dummyStop = 1;
20004f1a:	2301      	movs	r3, #1
20004f1c:	75fb      	strb	r3, [r7, #23]



	SPI3->CR2 = ( (bitSize -1) << 8);
20004f1e:	79fb      	ldrb	r3, [r7, #7]
20004f20:	3b01      	subs	r3, #1
20004f22:	021a      	lsls	r2, r3, #8
20004f24:	4b12      	ldr	r3, [pc, #72]	@ (20004f70 <xFer+0x68>)
20004f26:	605a      	str	r2, [r3, #4]


	if(bitSize == 8)
20004f28:	79fb      	ldrb	r3, [r7, #7]
20004f2a:	2b08      	cmp	r3, #8
20004f2c:	d101      	bne.n	20004f32 <xFer+0x2a>
	{
		dummyStop = 0;
20004f2e:	2300      	movs	r3, #0
20004f30:	75fb      	strb	r3, [r7, #23]
	}

	if(bitSize <= 8)
20004f32:	79fb      	ldrb	r3, [r7, #7]
20004f34:	2b08      	cmp	r3, #8
20004f36:	d804      	bhi.n	20004f42 <xFer+0x3a>
	{
		*(uint8_t *)&SPI3->DR = wrData;
20004f38:	4b0e      	ldr	r3, [pc, #56]	@ (20004f74 <xFer+0x6c>)
20004f3a:	68ba      	ldr	r2, [r7, #8]
20004f3c:	b2d2      	uxtb	r2, r2
20004f3e:	701a      	strb	r2, [r3, #0]
20004f40:	e002      	b.n	20004f48 <xFer+0x40>
	}
	else
	{
		SPI3->DR = wrData;
20004f42:	4a0b      	ldr	r2, [pc, #44]	@ (20004f70 <xFer+0x68>)
20004f44:	68bb      	ldr	r3, [r7, #8]
20004f46:	60d3      	str	r3, [r2, #12]
	}




	WaitForComplete();
20004f48:	f7ff ffcc 	bl	20004ee4 <WaitForComplete>

	if(bitSize <= 8)
20004f4c:	79fb      	ldrb	r3, [r7, #7]
20004f4e:	2b08      	cmp	r3, #8
20004f50:	d805      	bhi.n	20004f5e <xFer+0x56>
	{
		*rdData = *(uint8_t *)&SPI3->DR;
20004f52:	4b08      	ldr	r3, [pc, #32]	@ (20004f74 <xFer+0x6c>)
20004f54:	781b      	ldrb	r3, [r3, #0]
20004f56:	461a      	mov	r2, r3
20004f58:	68fb      	ldr	r3, [r7, #12]
20004f5a:	601a      	str	r2, [r3, #0]
	{
		*rdData = *(uint16_t *)&SPI3->DR;
	}


}
20004f5c:	e004      	b.n	20004f68 <xFer+0x60>
		*rdData = *(uint16_t *)&SPI3->DR;
20004f5e:	4b05      	ldr	r3, [pc, #20]	@ (20004f74 <xFer+0x6c>)
20004f60:	881b      	ldrh	r3, [r3, #0]
20004f62:	461a      	mov	r2, r3
20004f64:	68fb      	ldr	r3, [r7, #12]
20004f66:	601a      	str	r2, [r3, #0]
}
20004f68:	bf00      	nop
20004f6a:	3718      	adds	r7, #24
20004f6c:	46bd      	mov	sp, r7
20004f6e:	bd80      	pop	{r7, pc}
20004f70:	40003c00 	.word	0x40003c00
20004f74:	40003c0c 	.word	0x40003c0c

20004f78 <SPI_TMS_Transfer>:


void SPI_TMS_Transfer(uint64_t data, uint8_t bits)
{
20004f78:	b480      	push	{r7}
20004f7a:	b089      	sub	sp, #36	@ 0x24
20004f7c:	af00      	add	r7, sp, #0
20004f7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
20004f82:	4613      	mov	r3, r2
20004f84:	71fb      	strb	r3, [r7, #7]

	int a = 0, b = 0;
20004f86:	2300      	movs	r3, #0
20004f88:	61bb      	str	r3, [r7, #24]
20004f8a:	2300      	movs	r3, #0
20004f8c:	61fb      	str	r3, [r7, #28]

	SPI4->CR2 = ( (bits -1) << 8);
20004f8e:	79fb      	ldrb	r3, [r7, #7]
20004f90:	3b01      	subs	r3, #1
20004f92:	021a      	lsls	r2, r3, #8
20004f94:	4b0f      	ldr	r3, [pc, #60]	@ (20004fd4 <SPI_TMS_Transfer+0x5c>)
20004f96:	605a      	str	r2, [r3, #4]

	while( (SPI4->SR & (0x1 << 7) ) )
20004f98:	e002      	b.n	20004fa0 <SPI_TMS_Transfer+0x28>
	{
		b++;
20004f9a:	69fb      	ldr	r3, [r7, #28]
20004f9c:	3301      	adds	r3, #1
20004f9e:	61fb      	str	r3, [r7, #28]
	while( (SPI4->SR & (0x1 << 7) ) )
20004fa0:	4b0c      	ldr	r3, [pc, #48]	@ (20004fd4 <SPI_TMS_Transfer+0x5c>)
20004fa2:	689b      	ldr	r3, [r3, #8]
20004fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004fa8:	2b00      	cmp	r3, #0
20004faa:	d1f6      	bne.n	20004f9a <SPI_TMS_Transfer+0x22>
	}

	//while( ( (SPI4->SR >> 11) & 0x3 ) != 0) ;


	uint32_t dummyRead = SPI4->DR;
20004fac:	4b09      	ldr	r3, [pc, #36]	@ (20004fd4 <SPI_TMS_Transfer+0x5c>)
20004fae:	68db      	ldr	r3, [r3, #12]
20004fb0:	617b      	str	r3, [r7, #20]


	if(bits <= 8)
20004fb2:	79fb      	ldrb	r3, [r7, #7]
20004fb4:	2b08      	cmp	r3, #8
20004fb6:	d803      	bhi.n	20004fc0 <SPI_TMS_Transfer+0x48>
	{
		*(uint8_t *)&SPI4->DR = data;
20004fb8:	4b07      	ldr	r3, [pc, #28]	@ (20004fd8 <SPI_TMS_Transfer+0x60>)
20004fba:	7a3a      	ldrb	r2, [r7, #8]
20004fbc:	701a      	strb	r2, [r3, #0]
	else
	{
		*(uint16_t *)&SPI4->DR = data;
	}

}
20004fbe:	e002      	b.n	20004fc6 <SPI_TMS_Transfer+0x4e>
		*(uint16_t *)&SPI4->DR = data;
20004fc0:	4b05      	ldr	r3, [pc, #20]	@ (20004fd8 <SPI_TMS_Transfer+0x60>)
20004fc2:	893a      	ldrh	r2, [r7, #8]
20004fc4:	801a      	strh	r2, [r3, #0]
}
20004fc6:	bf00      	nop
20004fc8:	3724      	adds	r7, #36	@ 0x24
20004fca:	46bd      	mov	sp, r7
20004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fd0:	4770      	bx	lr
20004fd2:	bf00      	nop
20004fd4:	40013400 	.word	0x40013400
20004fd8:	4001340c 	.word	0x4001340c

20004fdc <SPI_TMSRead>:

void SPI_TMSRead(uint64_t *ptr, uint8_t bits)
{
20004fdc:	b4b0      	push	{r4, r5, r7}
20004fde:	b083      	sub	sp, #12
20004fe0:	af00      	add	r7, sp, #0
20004fe2:	6078      	str	r0, [r7, #4]
20004fe4:	70f9      	strb	r1, [r7, #3]
	if(bits <= 8)
20004fe6:	78f9      	ldrb	r1, [r7, #3]
20004fe8:	2908      	cmp	r1, #8
20004fea:	d809      	bhi.n	20005000 <SPI_TMSRead+0x24>
	{
		*ptr = *(uint8_t *)&SPI4->DR;
20004fec:	4b0b      	ldr	r3, [pc, #44]	@ (2000501c <SPI_TMSRead+0x40>)
20004fee:	781b      	ldrb	r3, [r3, #0]
20004ff0:	b2db      	uxtb	r3, r3
20004ff2:	2200      	movs	r2, #0
20004ff4:	461c      	mov	r4, r3
20004ff6:	4615      	mov	r5, r2
20004ff8:	687b      	ldr	r3, [r7, #4]
20004ffa:	e9c3 4500 	strd	r4, r5, [r3]
	else
	{
		*ptr = *(uint16_t *)&SPI4->DR;
	}

}
20004ffe:	e008      	b.n	20005012 <SPI_TMSRead+0x36>
		*ptr = *(uint16_t *)&SPI4->DR;
20005000:	4906      	ldr	r1, [pc, #24]	@ (2000501c <SPI_TMSRead+0x40>)
20005002:	8809      	ldrh	r1, [r1, #0]
20005004:	b289      	uxth	r1, r1
20005006:	2000      	movs	r0, #0
20005008:	460a      	mov	r2, r1
2000500a:	4603      	mov	r3, r0
2000500c:	6879      	ldr	r1, [r7, #4]
2000500e:	e9c1 2300 	strd	r2, r3, [r1]
}
20005012:	bf00      	nop
20005014:	370c      	adds	r7, #12
20005016:	46bd      	mov	sp, r7
20005018:	bcb0      	pop	{r4, r5, r7}
2000501a:	4770      	bx	lr
2000501c:	4001340c 	.word	0x4001340c

20005020 <SPI_SwitchPhaseToListen>:

void SPI_SwitchPhaseToListen(void)
{
20005020:	b480      	push	{r7}
20005022:	af00      	add	r7, sp, #0
	SPI4->CR1 &= ~(0x1 << 6);
20005024:	4b11      	ldr	r3, [pc, #68]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
20005026:	681b      	ldr	r3, [r3, #0]
20005028:	4a10      	ldr	r2, [pc, #64]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
2000502a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
2000502e:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= 1;
20005030:	4b0f      	ldr	r3, [pc, #60]	@ (20005070 <SPI_SwitchPhaseToListen+0x50>)
20005032:	681b      	ldr	r3, [r3, #0]
20005034:	4a0e      	ldr	r2, [pc, #56]	@ (20005070 <SPI_SwitchPhaseToListen+0x50>)
20005036:	f043 0301 	orr.w	r3, r3, #1
2000503a:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= 1;
2000503c:	4b0b      	ldr	r3, [pc, #44]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
2000503e:	681b      	ldr	r3, [r3, #0]
20005040:	4a0a      	ldr	r2, [pc, #40]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
20005042:	f043 0301 	orr.w	r3, r3, #1
20005046:	6013      	str	r3, [r2, #0]

	SPI4->CR1 &= ~(1 << 14);
20005048:	4b08      	ldr	r3, [pc, #32]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
2000504a:	681b      	ldr	r3, [r3, #0]
2000504c:	4a07      	ldr	r2, [pc, #28]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
2000504e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
20005052:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= (0x1 << 6);
20005054:	4b05      	ldr	r3, [pc, #20]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
20005056:	681b      	ldr	r3, [r3, #0]
20005058:	4a04      	ldr	r2, [pc, #16]	@ (2000506c <SPI_SwitchPhaseToListen+0x4c>)
2000505a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000505e:	6013      	str	r3, [r2, #0]

}
20005060:	bf00      	nop
20005062:	46bd      	mov	sp, r7
20005064:	f85d 7b04 	ldr.w	r7, [sp], #4
20005068:	4770      	bx	lr
2000506a:	bf00      	nop
2000506c:	40013400 	.word	0x40013400
20005070:	40003c00 	.word	0x40003c00

20005074 <SPI_SwitchPhaseToWrite>:

void SPI_SwitchPhaseToWrite(void)
{
20005074:	b480      	push	{r7}
20005076:	af00      	add	r7, sp, #0
	SPI4->CR1 &= ~(0x1 << 6);
20005078:	4b11      	ldr	r3, [pc, #68]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
2000507a:	681b      	ldr	r3, [r3, #0]
2000507c:	4a10      	ldr	r2, [pc, #64]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
2000507e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
20005082:	6013      	str	r3, [r2, #0]
	SPI3->CR1 &= ~1uL;
20005084:	4b0f      	ldr	r3, [pc, #60]	@ (200050c4 <SPI_SwitchPhaseToWrite+0x50>)
20005086:	681b      	ldr	r3, [r3, #0]
20005088:	4a0e      	ldr	r2, [pc, #56]	@ (200050c4 <SPI_SwitchPhaseToWrite+0x50>)
2000508a:	f023 0301 	bic.w	r3, r3, #1
2000508e:	6013      	str	r3, [r2, #0]
	SPI4->CR1 &= ~1uL;
20005090:	4b0b      	ldr	r3, [pc, #44]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
20005092:	681b      	ldr	r3, [r3, #0]
20005094:	4a0a      	ldr	r2, [pc, #40]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
20005096:	f023 0301 	bic.w	r3, r3, #1
2000509a:	6013      	str	r3, [r2, #0]

	SPI4->CR1 |= (1uL << 14);
2000509c:	4b08      	ldr	r3, [pc, #32]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
2000509e:	681b      	ldr	r3, [r3, #0]
200050a0:	4a07      	ldr	r2, [pc, #28]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
200050a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
200050a6:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= (0x1 << 6);
200050a8:	4b05      	ldr	r3, [pc, #20]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
200050aa:	681b      	ldr	r3, [r3, #0]
200050ac:	4a04      	ldr	r2, [pc, #16]	@ (200050c0 <SPI_SwitchPhaseToWrite+0x4c>)
200050ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200050b2:	6013      	str	r3, [r2, #0]

}
200050b4:	bf00      	nop
200050b6:	46bd      	mov	sp, r7
200050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200050bc:	4770      	bx	lr
200050be:	bf00      	nop
200050c0:	40013400 	.word	0x40013400
200050c4:	40003c00 	.word	0x40003c00

200050c8 <SPI_Transfer>:

int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize)
{
200050c8:	b5b0      	push	{r4, r5, r7, lr}
200050ca:	b088      	sub	sp, #32
200050cc:	af00      	add	r7, sp, #0
200050ce:	60f8      	str	r0, [r7, #12]
200050d0:	e9c7 2300 	strd	r2, r3, [r7]
	int retVal = -1;
200050d4:	f04f 33ff 	mov.w	r3, #4294967295
200050d8:	61fb      	str	r3, [r7, #28]
	int i = 0;
200050da:	2300      	movs	r3, #0
200050dc:	61bb      	str	r3, [r7, #24]


	int halfWordIterationCnt = (bitSize / 16) -1;
200050de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
200050e2:	091b      	lsrs	r3, r3, #4
200050e4:	b2db      	uxtb	r3, r3
200050e6:	3b01      	subs	r3, #1
200050e8:	617b      	str	r3, [r7, #20]
	uint32_t tempReadVal, tempWriteVal;

	*rdData = 0;
200050ea:	68f9      	ldr	r1, [r7, #12]
200050ec:	f04f 0200 	mov.w	r2, #0
200050f0:	f04f 0300 	mov.w	r3, #0
200050f4:	e9c1 2300 	strd	r2, r3, [r1]
	xFer(&tempReadVal, wrData, bitSize);
200050f8:	6839      	ldr	r1, [r7, #0]
200050fa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
200050fe:	f107 0310 	add.w	r3, r7, #16
20005102:	4618      	mov	r0, r3
20005104:	f7ff ff00 	bl	20004f08 <xFer>
	*rdData = tempReadVal;
20005108:	693b      	ldr	r3, [r7, #16]
2000510a:	2200      	movs	r2, #0
2000510c:	461c      	mov	r4, r3
2000510e:	4615      	mov	r5, r2
20005110:	68fb      	ldr	r3, [r7, #12]
20005112:	e9c3 4500 	strd	r4, r5, [r3]

}
20005116:	bf00      	nop
20005118:	4618      	mov	r0, r3
2000511a:	3720      	adds	r7, #32
2000511c:	46bd      	mov	sp, r7
2000511e:	bdb0      	pop	{r4, r5, r7, pc}

20005120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20005120:	b480      	push	{r7}
20005122:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20005124:	b672      	cpsid	i
}
20005126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20005128:	bf00      	nop
2000512a:	e7fd      	b.n	20005128 <Error_Handler+0x8>

2000512c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000512c:	b480      	push	{r7}
2000512e:	b083      	sub	sp, #12
20005130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
20005132:	4b0f      	ldr	r3, [pc, #60]	@ (20005170 <HAL_MspInit+0x44>)
20005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005136:	4a0e      	ldr	r2, [pc, #56]	@ (20005170 <HAL_MspInit+0x44>)
20005138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000513c:	6413      	str	r3, [r2, #64]	@ 0x40
2000513e:	4b0c      	ldr	r3, [pc, #48]	@ (20005170 <HAL_MspInit+0x44>)
20005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20005146:	607b      	str	r3, [r7, #4]
20005148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000514a:	4b09      	ldr	r3, [pc, #36]	@ (20005170 <HAL_MspInit+0x44>)
2000514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000514e:	4a08      	ldr	r2, [pc, #32]	@ (20005170 <HAL_MspInit+0x44>)
20005150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20005154:	6453      	str	r3, [r2, #68]	@ 0x44
20005156:	4b06      	ldr	r3, [pc, #24]	@ (20005170 <HAL_MspInit+0x44>)
20005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000515a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000515e:	603b      	str	r3, [r7, #0]
20005160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20005162:	bf00      	nop
20005164:	370c      	adds	r7, #12
20005166:	46bd      	mov	sp, r7
20005168:	f85d 7b04 	ldr.w	r7, [sp], #4
2000516c:	4770      	bx	lr
2000516e:	bf00      	nop
20005170:	40023800 	.word	0x40023800

20005174 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
20005174:	b580      	push	{r7, lr}
20005176:	b08e      	sub	sp, #56	@ 0x38
20005178:	af00      	add	r7, sp, #0
2000517a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000517c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20005180:	2200      	movs	r2, #0
20005182:	601a      	str	r2, [r3, #0]
20005184:	605a      	str	r2, [r3, #4]
20005186:	609a      	str	r2, [r3, #8]
20005188:	60da      	str	r2, [r3, #12]
2000518a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
2000518c:	687b      	ldr	r3, [r7, #4]
2000518e:	681b      	ldr	r3, [r3, #0]
20005190:	4a4e      	ldr	r2, [pc, #312]	@ (200052cc <HAL_ETH_MspInit+0x158>)
20005192:	4293      	cmp	r3, r2
20005194:	f040 8096 	bne.w	200052c4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
20005198:	4b4d      	ldr	r3, [pc, #308]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
2000519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000519c:	4a4c      	ldr	r2, [pc, #304]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
2000519e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
200051a2:	6313      	str	r3, [r2, #48]	@ 0x30
200051a4:	4b4a      	ldr	r3, [pc, #296]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200051ac:	623b      	str	r3, [r7, #32]
200051ae:	6a3b      	ldr	r3, [r7, #32]
200051b0:	4b47      	ldr	r3, [pc, #284]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051b4:	4a46      	ldr	r2, [pc, #280]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
200051ba:	6313      	str	r3, [r2, #48]	@ 0x30
200051bc:	4b44      	ldr	r3, [pc, #272]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
200051c4:	61fb      	str	r3, [r7, #28]
200051c6:	69fb      	ldr	r3, [r7, #28]
200051c8:	4b41      	ldr	r3, [pc, #260]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051cc:	4a40      	ldr	r2, [pc, #256]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
200051d2:	6313      	str	r3, [r2, #48]	@ 0x30
200051d4:	4b3e      	ldr	r3, [pc, #248]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200051dc:	61bb      	str	r3, [r7, #24]
200051de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
200051e0:	4b3b      	ldr	r3, [pc, #236]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051e4:	4a3a      	ldr	r2, [pc, #232]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051e6:	f043 0304 	orr.w	r3, r3, #4
200051ea:	6313      	str	r3, [r2, #48]	@ 0x30
200051ec:	4b38      	ldr	r3, [pc, #224]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051f0:	f003 0304 	and.w	r3, r3, #4
200051f4:	617b      	str	r3, [r7, #20]
200051f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
200051f8:	4b35      	ldr	r3, [pc, #212]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051fc:	4a34      	ldr	r2, [pc, #208]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
200051fe:	f043 0301 	orr.w	r3, r3, #1
20005202:	6313      	str	r3, [r2, #48]	@ 0x30
20005204:	4b32      	ldr	r3, [pc, #200]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
20005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005208:	f003 0301 	and.w	r3, r3, #1
2000520c:	613b      	str	r3, [r7, #16]
2000520e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20005210:	4b2f      	ldr	r3, [pc, #188]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
20005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005214:	4a2e      	ldr	r2, [pc, #184]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
20005216:	f043 0302 	orr.w	r3, r3, #2
2000521a:	6313      	str	r3, [r2, #48]	@ 0x30
2000521c:	4b2c      	ldr	r3, [pc, #176]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
2000521e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005220:	f003 0302 	and.w	r3, r3, #2
20005224:	60fb      	str	r3, [r7, #12]
20005226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
20005228:	4b29      	ldr	r3, [pc, #164]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
2000522a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000522c:	4a28      	ldr	r2, [pc, #160]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
2000522e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20005232:	6313      	str	r3, [r2, #48]	@ 0x30
20005234:	4b26      	ldr	r3, [pc, #152]	@ (200052d0 <HAL_ETH_MspInit+0x15c>)
20005236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000523c:	60bb      	str	r3, [r7, #8]
2000523e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
20005240:	2332      	movs	r3, #50	@ 0x32
20005242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20005244:	2302      	movs	r3, #2
20005246:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005248:	2300      	movs	r3, #0
2000524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000524c:	2303      	movs	r3, #3
2000524e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20005250:	230b      	movs	r3, #11
20005252:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20005254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20005258:	4619      	mov	r1, r3
2000525a:	481e      	ldr	r0, [pc, #120]	@ (200052d4 <HAL_ETH_MspInit+0x160>)
2000525c:	f000 fec8 	bl	20005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
20005260:	2386      	movs	r3, #134	@ 0x86
20005262:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20005264:	2302      	movs	r3, #2
20005266:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005268:	2300      	movs	r3, #0
2000526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000526c:	2303      	movs	r3, #3
2000526e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20005270:	230b      	movs	r3, #11
20005272:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20005274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20005278:	4619      	mov	r1, r3
2000527a:	4817      	ldr	r0, [pc, #92]	@ (200052d8 <HAL_ETH_MspInit+0x164>)
2000527c:	f000 feb8 	bl	20005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
20005280:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20005284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20005286:	2302      	movs	r3, #2
20005288:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000528a:	2300      	movs	r3, #0
2000528c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000528e:	2303      	movs	r3, #3
20005290:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20005292:	230b      	movs	r3, #11
20005294:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
20005296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2000529a:	4619      	mov	r1, r3
2000529c:	480f      	ldr	r0, [pc, #60]	@ (200052dc <HAL_ETH_MspInit+0x168>)
2000529e:	f000 fea7 	bl	20005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
200052a2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
200052a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200052a8:	2302      	movs	r3, #2
200052aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200052ac:	2300      	movs	r3, #0
200052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200052b0:	2303      	movs	r3, #3
200052b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
200052b4:	230b      	movs	r3, #11
200052b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
200052b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
200052bc:	4619      	mov	r1, r3
200052be:	4808      	ldr	r0, [pc, #32]	@ (200052e0 <HAL_ETH_MspInit+0x16c>)
200052c0:	f000 fe96 	bl	20005ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
200052c4:	bf00      	nop
200052c6:	3738      	adds	r7, #56	@ 0x38
200052c8:	46bd      	mov	sp, r7
200052ca:	bd80      	pop	{r7, pc}
200052cc:	40028000 	.word	0x40028000
200052d0:	40023800 	.word	0x40023800
200052d4:	40020800 	.word	0x40020800
200052d8:	40020000 	.word	0x40020000
200052dc:	40020400 	.word	0x40020400
200052e0:	40021800 	.word	0x40021800

200052e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
200052e4:	b580      	push	{r7, lr}
200052e6:	b08c      	sub	sp, #48	@ 0x30
200052e8:	af00      	add	r7, sp, #0
200052ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200052ec:	f107 031c 	add.w	r3, r7, #28
200052f0:	2200      	movs	r2, #0
200052f2:	601a      	str	r2, [r3, #0]
200052f4:	605a      	str	r2, [r3, #4]
200052f6:	609a      	str	r2, [r3, #8]
200052f8:	60da      	str	r2, [r3, #12]
200052fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
200052fc:	687b      	ldr	r3, [r7, #4]
200052fe:	681b      	ldr	r3, [r3, #0]
20005300:	4a3c      	ldr	r2, [pc, #240]	@ (200053f4 <HAL_SPI_MspInit+0x110>)
20005302:	4293      	cmp	r3, r2
20005304:	d144      	bne.n	20005390 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
20005306:	4b3c      	ldr	r3, [pc, #240]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
20005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000530a:	4a3b      	ldr	r2, [pc, #236]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
2000530c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
20005310:	6453      	str	r3, [r2, #68]	@ 0x44
20005312:	4b39      	ldr	r3, [pc, #228]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
20005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
2000531a:	61bb      	str	r3, [r7, #24]
2000531c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000531e:	4b36      	ldr	r3, [pc, #216]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
20005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005322:	4a35      	ldr	r2, [pc, #212]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
20005324:	f043 0301 	orr.w	r3, r3, #1
20005328:	6313      	str	r3, [r2, #48]	@ 0x30
2000532a:	4b33      	ldr	r3, [pc, #204]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
2000532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000532e:	f003 0301 	and.w	r3, r3, #1
20005332:	617b      	str	r3, [r7, #20]
20005334:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20005336:	4b30      	ldr	r3, [pc, #192]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
20005338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000533a:	4a2f      	ldr	r2, [pc, #188]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
2000533c:	f043 0302 	orr.w	r3, r3, #2
20005340:	6313      	str	r3, [r2, #48]	@ 0x30
20005342:	4b2d      	ldr	r3, [pc, #180]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
20005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005346:	f003 0302 	and.w	r3, r3, #2
2000534a:	613b      	str	r3, [r7, #16]
2000534c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
2000534e:	2360      	movs	r3, #96	@ 0x60
20005350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20005352:	2302      	movs	r3, #2
20005354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005356:	2300      	movs	r3, #0
20005358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000535a:	2303      	movs	r3, #3
2000535c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2000535e:	2305      	movs	r3, #5
20005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20005362:	f107 031c 	add.w	r3, r7, #28
20005366:	4619      	mov	r1, r3
20005368:	4824      	ldr	r0, [pc, #144]	@ (200053fc <HAL_SPI_MspInit+0x118>)
2000536a:	f000 fe41 	bl	20005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
2000536e:	2320      	movs	r3, #32
20005370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20005372:	2302      	movs	r3, #2
20005374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005376:	2300      	movs	r3, #0
20005378:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000537a:	2303      	movs	r3, #3
2000537c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2000537e:	2305      	movs	r3, #5
20005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20005382:	f107 031c 	add.w	r3, r7, #28
20005386:	4619      	mov	r1, r3
20005388:	481d      	ldr	r0, [pc, #116]	@ (20005400 <HAL_SPI_MspInit+0x11c>)
2000538a:	f000 fe31 	bl	20005ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
2000538e:	e02c      	b.n	200053ea <HAL_SPI_MspInit+0x106>
  else if(hspi->Instance==SPI4)
20005390:	687b      	ldr	r3, [r7, #4]
20005392:	681b      	ldr	r3, [r3, #0]
20005394:	4a1b      	ldr	r2, [pc, #108]	@ (20005404 <HAL_SPI_MspInit+0x120>)
20005396:	4293      	cmp	r3, r2
20005398:	d127      	bne.n	200053ea <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
2000539a:	4b17      	ldr	r3, [pc, #92]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
2000539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000539e:	4a16      	ldr	r2, [pc, #88]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
200053a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
200053a4:	6453      	str	r3, [r2, #68]	@ 0x44
200053a6:	4b14      	ldr	r3, [pc, #80]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
200053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200053aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200053ae:	60fb      	str	r3, [r7, #12]
200053b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
200053b2:	4b11      	ldr	r3, [pc, #68]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
200053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200053b6:	4a10      	ldr	r2, [pc, #64]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
200053b8:	f043 0310 	orr.w	r3, r3, #16
200053bc:	6313      	str	r3, [r2, #48]	@ 0x30
200053be:	4b0e      	ldr	r3, [pc, #56]	@ (200053f8 <HAL_SPI_MspInit+0x114>)
200053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200053c2:	f003 0310 	and.w	r3, r3, #16
200053c6:	60bb      	str	r3, [r7, #8]
200053c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
200053ca:	2364      	movs	r3, #100	@ 0x64
200053cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200053ce:	2302      	movs	r3, #2
200053d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200053d2:	2300      	movs	r3, #0
200053d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200053d6:	2303      	movs	r3, #3
200053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
200053da:	2305      	movs	r3, #5
200053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
200053de:	f107 031c 	add.w	r3, r7, #28
200053e2:	4619      	mov	r1, r3
200053e4:	4808      	ldr	r0, [pc, #32]	@ (20005408 <HAL_SPI_MspInit+0x124>)
200053e6:	f000 fe03 	bl	20005ff0 <HAL_GPIO_Init>
}
200053ea:	bf00      	nop
200053ec:	3730      	adds	r7, #48	@ 0x30
200053ee:	46bd      	mov	sp, r7
200053f0:	bd80      	pop	{r7, pc}
200053f2:	bf00      	nop
200053f4:	40013000 	.word	0x40013000
200053f8:	40023800 	.word	0x40023800
200053fc:	40020000 	.word	0x40020000
20005400:	40020400 	.word	0x40020400
20005404:	40013400 	.word	0x40013400
20005408:	40021000 	.word	0x40021000

2000540c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
2000540c:	b580      	push	{r7, lr}
2000540e:	b0aa      	sub	sp, #168	@ 0xa8
20005410:	af00      	add	r7, sp, #0
20005412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20005414:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20005418:	2200      	movs	r2, #0
2000541a:	601a      	str	r2, [r3, #0]
2000541c:	605a      	str	r2, [r3, #4]
2000541e:	609a      	str	r2, [r3, #8]
20005420:	60da      	str	r2, [r3, #12]
20005422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
20005424:	f107 0310 	add.w	r3, r7, #16
20005428:	2284      	movs	r2, #132	@ 0x84
2000542a:	2100      	movs	r1, #0
2000542c:	4618      	mov	r0, r3
2000542e:	f008 f8bb 	bl	2000d5a8 <memset>
  if(huart->Instance==USART3)
20005432:	687b      	ldr	r3, [r7, #4]
20005434:	681b      	ldr	r3, [r3, #0]
20005436:	4a22      	ldr	r2, [pc, #136]	@ (200054c0 <HAL_UART_MspInit+0xb4>)
20005438:	4293      	cmp	r3, r2
2000543a:	d13c      	bne.n	200054b6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
2000543c:	f44f 7380 	mov.w	r3, #256	@ 0x100
20005440:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
20005442:	2300      	movs	r3, #0
20005444:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
20005446:	f107 0310 	add.w	r3, r7, #16
2000544a:	4618      	mov	r0, r3
2000544c:	f002 ff62 	bl	20008314 <HAL_RCCEx_PeriphCLKConfig>
20005450:	4603      	mov	r3, r0
20005452:	2b00      	cmp	r3, #0
20005454:	d001      	beq.n	2000545a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
20005456:	f7ff fe63 	bl	20005120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
2000545a:	4b1a      	ldr	r3, [pc, #104]	@ (200054c4 <HAL_UART_MspInit+0xb8>)
2000545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000545e:	4a19      	ldr	r2, [pc, #100]	@ (200054c4 <HAL_UART_MspInit+0xb8>)
20005460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20005464:	6413      	str	r3, [r2, #64]	@ 0x40
20005466:	4b17      	ldr	r3, [pc, #92]	@ (200054c4 <HAL_UART_MspInit+0xb8>)
20005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000546a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2000546e:	60fb      	str	r3, [r7, #12]
20005470:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
20005472:	4b14      	ldr	r3, [pc, #80]	@ (200054c4 <HAL_UART_MspInit+0xb8>)
20005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005476:	4a13      	ldr	r2, [pc, #76]	@ (200054c4 <HAL_UART_MspInit+0xb8>)
20005478:	f043 0308 	orr.w	r3, r3, #8
2000547c:	6313      	str	r3, [r2, #48]	@ 0x30
2000547e:	4b11      	ldr	r3, [pc, #68]	@ (200054c4 <HAL_UART_MspInit+0xb8>)
20005480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005482:	f003 0308 	and.w	r3, r3, #8
20005486:	60bb      	str	r3, [r7, #8]
20005488:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
2000548a:	f44f 7340 	mov.w	r3, #768	@ 0x300
2000548e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20005492:	2302      	movs	r3, #2
20005494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
20005498:	2301      	movs	r3, #1
2000549a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000549e:	2303      	movs	r3, #3
200054a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
200054a4:	2307      	movs	r3, #7
200054a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
200054aa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
200054ae:	4619      	mov	r1, r3
200054b0:	4805      	ldr	r0, [pc, #20]	@ (200054c8 <HAL_UART_MspInit+0xbc>)
200054b2:	f000 fd9d 	bl	20005ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
200054b6:	bf00      	nop
200054b8:	37a8      	adds	r7, #168	@ 0xa8
200054ba:	46bd      	mov	sp, r7
200054bc:	bd80      	pop	{r7, pc}
200054be:	bf00      	nop
200054c0:	40004800 	.word	0x40004800
200054c4:	40023800 	.word	0x40023800
200054c8:	40020c00 	.word	0x40020c00

200054cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
200054cc:	b480      	push	{r7}
200054ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
200054d0:	bf00      	nop
200054d2:	e7fd      	b.n	200054d0 <NMI_Handler+0x4>

200054d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
200054d4:	b480      	push	{r7}
200054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
200054d8:	bf00      	nop
200054da:	e7fd      	b.n	200054d8 <HardFault_Handler+0x4>

200054dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
200054dc:	b480      	push	{r7}
200054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
200054e0:	bf00      	nop
200054e2:	e7fd      	b.n	200054e0 <MemManage_Handler+0x4>

200054e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
200054e4:	b480      	push	{r7}
200054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
200054e8:	bf00      	nop
200054ea:	e7fd      	b.n	200054e8 <BusFault_Handler+0x4>

200054ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
200054ec:	b480      	push	{r7}
200054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
200054f0:	bf00      	nop
200054f2:	e7fd      	b.n	200054f0 <UsageFault_Handler+0x4>

200054f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
200054f4:	b480      	push	{r7}
200054f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
200054f8:	bf00      	nop
200054fa:	46bd      	mov	sp, r7
200054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20005500:	4770      	bx	lr

20005502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20005502:	b480      	push	{r7}
20005504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20005506:	bf00      	nop
20005508:	46bd      	mov	sp, r7
2000550a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000550e:	4770      	bx	lr

20005510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20005510:	b480      	push	{r7}
20005512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20005514:	bf00      	nop
20005516:	46bd      	mov	sp, r7
20005518:	f85d 7b04 	ldr.w	r7, [sp], #4
2000551c:	4770      	bx	lr

2000551e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000551e:	b580      	push	{r7, lr}
20005520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20005522:	f000 f8c1 	bl	200056a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20005526:	bf00      	nop
20005528:	bd80      	pop	{r7, pc}
	...

2000552c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
2000552c:	b580      	push	{r7, lr}
2000552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	cnt++;
20005530:	4b04      	ldr	r3, [pc, #16]	@ (20005544 <OTG_FS_IRQHandler+0x18>)
20005532:	681b      	ldr	r3, [r3, #0]
20005534:	3301      	adds	r3, #1
20005536:	4a03      	ldr	r2, [pc, #12]	@ (20005544 <OTG_FS_IRQHandler+0x18>)
20005538:	6013      	str	r3, [r2, #0]

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
2000553a:	4803      	ldr	r0, [pc, #12]	@ (20005548 <OTG_FS_IRQHandler+0x1c>)
2000553c:	f001 f86d 	bl	2000661a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
20005540:	bf00      	nop
20005542:	bd80      	pop	{r7, pc}
20005544:	2000edfc 	.word	0x2000edfc
20005548:	2000f2e8 	.word	0x2000f2e8

2000554c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000554c:	b580      	push	{r7, lr}
2000554e:	b086      	sub	sp, #24
20005550:	af00      	add	r7, sp, #0
20005552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20005554:	4a14      	ldr	r2, [pc, #80]	@ (200055a8 <_sbrk+0x5c>)
20005556:	4b15      	ldr	r3, [pc, #84]	@ (200055ac <_sbrk+0x60>)
20005558:	1ad3      	subs	r3, r2, r3
2000555a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000555c:	697b      	ldr	r3, [r7, #20]
2000555e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20005560:	4b13      	ldr	r3, [pc, #76]	@ (200055b0 <_sbrk+0x64>)
20005562:	681b      	ldr	r3, [r3, #0]
20005564:	2b00      	cmp	r3, #0
20005566:	d102      	bne.n	2000556e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20005568:	4b11      	ldr	r3, [pc, #68]	@ (200055b0 <_sbrk+0x64>)
2000556a:	4a12      	ldr	r2, [pc, #72]	@ (200055b4 <_sbrk+0x68>)
2000556c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000556e:	4b10      	ldr	r3, [pc, #64]	@ (200055b0 <_sbrk+0x64>)
20005570:	681a      	ldr	r2, [r3, #0]
20005572:	687b      	ldr	r3, [r7, #4]
20005574:	4413      	add	r3, r2
20005576:	693a      	ldr	r2, [r7, #16]
20005578:	429a      	cmp	r2, r3
2000557a:	d207      	bcs.n	2000558c <_sbrk+0x40>
  {
    errno = ENOMEM;
2000557c:	f008 f82c 	bl	2000d5d8 <__errno>
20005580:	4603      	mov	r3, r0
20005582:	220c      	movs	r2, #12
20005584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
20005586:	f04f 33ff 	mov.w	r3, #4294967295
2000558a:	e009      	b.n	200055a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2000558c:	4b08      	ldr	r3, [pc, #32]	@ (200055b0 <_sbrk+0x64>)
2000558e:	681b      	ldr	r3, [r3, #0]
20005590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
20005592:	4b07      	ldr	r3, [pc, #28]	@ (200055b0 <_sbrk+0x64>)
20005594:	681a      	ldr	r2, [r3, #0]
20005596:	687b      	ldr	r3, [r7, #4]
20005598:	4413      	add	r3, r2
2000559a:	4a05      	ldr	r2, [pc, #20]	@ (200055b0 <_sbrk+0x64>)
2000559c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000559e:	68fb      	ldr	r3, [r7, #12]
}
200055a0:	4618      	mov	r0, r3
200055a2:	3718      	adds	r7, #24
200055a4:	46bd      	mov	sp, r7
200055a6:	bd80      	pop	{r7, pc}
200055a8:	20050000 	.word	0x20050000
200055ac:	00000400 	.word	0x00000400
200055b0:	2000ee00 	.word	0x2000ee00
200055b4:	2000f910 	.word	0x2000f910

200055b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200055b8:	b480      	push	{r7}
200055ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200055bc:	4b06      	ldr	r3, [pc, #24]	@ (200055d8 <SystemInit+0x20>)
200055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200055c2:	4a05      	ldr	r2, [pc, #20]	@ (200055d8 <SystemInit+0x20>)
200055c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
200055c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
200055cc:	bf00      	nop
200055ce:	46bd      	mov	sp, r7
200055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200055d4:	4770      	bx	lr
200055d6:	bf00      	nop
200055d8:	e000ed00 	.word	0xe000ed00

200055dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
200055dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 20005614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
200055e0:	f7ff ffea 	bl	200055b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
200055e4:	480c      	ldr	r0, [pc, #48]	@ (20005618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
200055e6:	490d      	ldr	r1, [pc, #52]	@ (2000561c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
200055e8:	4a0d      	ldr	r2, [pc, #52]	@ (20005620 <LoopFillZerobss+0x1a>)
  movs r3, #0
200055ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
200055ec:	e002      	b.n	200055f4 <LoopCopyDataInit>

200055ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
200055ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
200055f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
200055f2:	3304      	adds	r3, #4

200055f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
200055f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
200055f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
200055f8:	d3f9      	bcc.n	200055ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
200055fa:	4a0a      	ldr	r2, [pc, #40]	@ (20005624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
200055fc:	4c0a      	ldr	r4, [pc, #40]	@ (20005628 <LoopFillZerobss+0x22>)
  movs r3, #0
200055fe:	2300      	movs	r3, #0
  b LoopFillZerobss
20005600:	e001      	b.n	20005606 <LoopFillZerobss>

20005602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20005602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20005604:	3204      	adds	r2, #4

20005606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20005606:	42a2      	cmp	r2, r4
  bcc FillZerobss
20005608:	d3fb      	bcc.n	20005602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
2000560a:	f007 ffeb 	bl	2000d5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000560e:	f7ff f945 	bl	2000489c <main>
  bx  lr    
20005612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20005614:	20050000 	.word	0x20050000
  ldr r0, =_sdata
20005618:	2000d768 	.word	0x2000d768
  ldr r1, =_edata
2000561c:	2000d8f0 	.word	0x2000d8f0
  ldr r2, =_sidata
20005620:	2000d768 	.word	0x2000d768
  ldr r2, =_sbss
20005624:	2000da30 	.word	0x2000da30
  ldr r4, =_ebss
20005628:	2000f910 	.word	0x2000f910

2000562c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000562c:	e7fe      	b.n	2000562c <ADC_IRQHandler>

2000562e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000562e:	b580      	push	{r7, lr}
20005630:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20005632:	2003      	movs	r0, #3
20005634:	f000 f94c 	bl	200058d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20005638:	2000      	movs	r0, #0
2000563a:	f000 f805 	bl	20005648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000563e:	f7ff fd75 	bl	2000512c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20005642:	2300      	movs	r3, #0
}
20005644:	4618      	mov	r0, r3
20005646:	bd80      	pop	{r7, pc}

20005648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20005648:	b580      	push	{r7, lr}
2000564a:	b082      	sub	sp, #8
2000564c:	af00      	add	r7, sp, #0
2000564e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20005650:	4b12      	ldr	r3, [pc, #72]	@ (2000569c <HAL_InitTick+0x54>)
20005652:	681a      	ldr	r2, [r3, #0]
20005654:	4b12      	ldr	r3, [pc, #72]	@ (200056a0 <HAL_InitTick+0x58>)
20005656:	781b      	ldrb	r3, [r3, #0]
20005658:	4619      	mov	r1, r3
2000565a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
2000565e:	fbb3 f3f1 	udiv	r3, r3, r1
20005662:	fbb2 f3f3 	udiv	r3, r2, r3
20005666:	4618      	mov	r0, r3
20005668:	f000 f967 	bl	2000593a <HAL_SYSTICK_Config>
2000566c:	4603      	mov	r3, r0
2000566e:	2b00      	cmp	r3, #0
20005670:	d001      	beq.n	20005676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20005672:	2301      	movs	r3, #1
20005674:	e00e      	b.n	20005694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20005676:	687b      	ldr	r3, [r7, #4]
20005678:	2b0f      	cmp	r3, #15
2000567a:	d80a      	bhi.n	20005692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000567c:	2200      	movs	r2, #0
2000567e:	6879      	ldr	r1, [r7, #4]
20005680:	f04f 30ff 	mov.w	r0, #4294967295
20005684:	f000 f92f 	bl	200058e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20005688:	4a06      	ldr	r2, [pc, #24]	@ (200056a4 <HAL_InitTick+0x5c>)
2000568a:	687b      	ldr	r3, [r7, #4]
2000568c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000568e:	2300      	movs	r3, #0
20005690:	e000      	b.n	20005694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20005692:	2301      	movs	r3, #1
}
20005694:	4618      	mov	r0, r3
20005696:	3708      	adds	r7, #8
20005698:	46bd      	mov	sp, r7
2000569a:	bd80      	pop	{r7, pc}
2000569c:	2000d768 	.word	0x2000d768
200056a0:	2000d770 	.word	0x2000d770
200056a4:	2000d76c 	.word	0x2000d76c

200056a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
200056a8:	b480      	push	{r7}
200056aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
200056ac:	4b06      	ldr	r3, [pc, #24]	@ (200056c8 <HAL_IncTick+0x20>)
200056ae:	781b      	ldrb	r3, [r3, #0]
200056b0:	461a      	mov	r2, r3
200056b2:	4b06      	ldr	r3, [pc, #24]	@ (200056cc <HAL_IncTick+0x24>)
200056b4:	681b      	ldr	r3, [r3, #0]
200056b6:	4413      	add	r3, r2
200056b8:	4a04      	ldr	r2, [pc, #16]	@ (200056cc <HAL_IncTick+0x24>)
200056ba:	6013      	str	r3, [r2, #0]
}
200056bc:	bf00      	nop
200056be:	46bd      	mov	sp, r7
200056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200056c4:	4770      	bx	lr
200056c6:	bf00      	nop
200056c8:	2000d770 	.word	0x2000d770
200056cc:	2000ee04 	.word	0x2000ee04

200056d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
200056d0:	b480      	push	{r7}
200056d2:	af00      	add	r7, sp, #0
  return uwTick;
200056d4:	4b03      	ldr	r3, [pc, #12]	@ (200056e4 <HAL_GetTick+0x14>)
200056d6:	681b      	ldr	r3, [r3, #0]
}
200056d8:	4618      	mov	r0, r3
200056da:	46bd      	mov	sp, r7
200056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200056e0:	4770      	bx	lr
200056e2:	bf00      	nop
200056e4:	2000ee04 	.word	0x2000ee04

200056e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
200056e8:	b580      	push	{r7, lr}
200056ea:	b084      	sub	sp, #16
200056ec:	af00      	add	r7, sp, #0
200056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
200056f0:	f7ff ffee 	bl	200056d0 <HAL_GetTick>
200056f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
200056f6:	687b      	ldr	r3, [r7, #4]
200056f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
200056fa:	68fb      	ldr	r3, [r7, #12]
200056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
20005700:	d005      	beq.n	2000570e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20005702:	4b0a      	ldr	r3, [pc, #40]	@ (2000572c <HAL_Delay+0x44>)
20005704:	781b      	ldrb	r3, [r3, #0]
20005706:	461a      	mov	r2, r3
20005708:	68fb      	ldr	r3, [r7, #12]
2000570a:	4413      	add	r3, r2
2000570c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
2000570e:	bf00      	nop
20005710:	f7ff ffde 	bl	200056d0 <HAL_GetTick>
20005714:	4602      	mov	r2, r0
20005716:	68bb      	ldr	r3, [r7, #8]
20005718:	1ad3      	subs	r3, r2, r3
2000571a:	68fa      	ldr	r2, [r7, #12]
2000571c:	429a      	cmp	r2, r3
2000571e:	d8f7      	bhi.n	20005710 <HAL_Delay+0x28>
  {
  }
}
20005720:	bf00      	nop
20005722:	bf00      	nop
20005724:	3710      	adds	r7, #16
20005726:	46bd      	mov	sp, r7
20005728:	bd80      	pop	{r7, pc}
2000572a:	bf00      	nop
2000572c:	2000d770 	.word	0x2000d770

20005730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20005730:	b480      	push	{r7}
20005732:	b085      	sub	sp, #20
20005734:	af00      	add	r7, sp, #0
20005736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20005738:	687b      	ldr	r3, [r7, #4]
2000573a:	f003 0307 	and.w	r3, r3, #7
2000573e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20005740:	4b0b      	ldr	r3, [pc, #44]	@ (20005770 <__NVIC_SetPriorityGrouping+0x40>)
20005742:	68db      	ldr	r3, [r3, #12]
20005744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20005746:	68ba      	ldr	r2, [r7, #8]
20005748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
2000574c:	4013      	ands	r3, r2
2000574e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20005750:	68fb      	ldr	r3, [r7, #12]
20005752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20005754:	68bb      	ldr	r3, [r7, #8]
20005756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
20005758:	4b06      	ldr	r3, [pc, #24]	@ (20005774 <__NVIC_SetPriorityGrouping+0x44>)
2000575a:	4313      	orrs	r3, r2
2000575c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000575e:	4a04      	ldr	r2, [pc, #16]	@ (20005770 <__NVIC_SetPriorityGrouping+0x40>)
20005760:	68bb      	ldr	r3, [r7, #8]
20005762:	60d3      	str	r3, [r2, #12]
}
20005764:	bf00      	nop
20005766:	3714      	adds	r7, #20
20005768:	46bd      	mov	sp, r7
2000576a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000576e:	4770      	bx	lr
20005770:	e000ed00 	.word	0xe000ed00
20005774:	05fa0000 	.word	0x05fa0000

20005778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20005778:	b480      	push	{r7}
2000577a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000577c:	4b04      	ldr	r3, [pc, #16]	@ (20005790 <__NVIC_GetPriorityGrouping+0x18>)
2000577e:	68db      	ldr	r3, [r3, #12]
20005780:	0a1b      	lsrs	r3, r3, #8
20005782:	f003 0307 	and.w	r3, r3, #7
}
20005786:	4618      	mov	r0, r3
20005788:	46bd      	mov	sp, r7
2000578a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000578e:	4770      	bx	lr
20005790:	e000ed00 	.word	0xe000ed00

20005794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20005794:	b480      	push	{r7}
20005796:	b083      	sub	sp, #12
20005798:	af00      	add	r7, sp, #0
2000579a:	4603      	mov	r3, r0
2000579c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000579e:	f997 3007 	ldrsb.w	r3, [r7, #7]
200057a2:	2b00      	cmp	r3, #0
200057a4:	db0b      	blt.n	200057be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200057a6:	79fb      	ldrb	r3, [r7, #7]
200057a8:	f003 021f 	and.w	r2, r3, #31
200057ac:	4907      	ldr	r1, [pc, #28]	@ (200057cc <__NVIC_EnableIRQ+0x38>)
200057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
200057b2:	095b      	lsrs	r3, r3, #5
200057b4:	2001      	movs	r0, #1
200057b6:	fa00 f202 	lsl.w	r2, r0, r2
200057ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200057be:	bf00      	nop
200057c0:	370c      	adds	r7, #12
200057c2:	46bd      	mov	sp, r7
200057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200057c8:	4770      	bx	lr
200057ca:	bf00      	nop
200057cc:	e000e100 	.word	0xe000e100

200057d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200057d0:	b480      	push	{r7}
200057d2:	b083      	sub	sp, #12
200057d4:	af00      	add	r7, sp, #0
200057d6:	4603      	mov	r3, r0
200057d8:	6039      	str	r1, [r7, #0]
200057da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200057dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
200057e0:	2b00      	cmp	r3, #0
200057e2:	db0a      	blt.n	200057fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200057e4:	683b      	ldr	r3, [r7, #0]
200057e6:	b2da      	uxtb	r2, r3
200057e8:	490c      	ldr	r1, [pc, #48]	@ (2000581c <__NVIC_SetPriority+0x4c>)
200057ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
200057ee:	0112      	lsls	r2, r2, #4
200057f0:	b2d2      	uxtb	r2, r2
200057f2:	440b      	add	r3, r1
200057f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
200057f8:	e00a      	b.n	20005810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200057fa:	683b      	ldr	r3, [r7, #0]
200057fc:	b2da      	uxtb	r2, r3
200057fe:	4908      	ldr	r1, [pc, #32]	@ (20005820 <__NVIC_SetPriority+0x50>)
20005800:	79fb      	ldrb	r3, [r7, #7]
20005802:	f003 030f 	and.w	r3, r3, #15
20005806:	3b04      	subs	r3, #4
20005808:	0112      	lsls	r2, r2, #4
2000580a:	b2d2      	uxtb	r2, r2
2000580c:	440b      	add	r3, r1
2000580e:	761a      	strb	r2, [r3, #24]
}
20005810:	bf00      	nop
20005812:	370c      	adds	r7, #12
20005814:	46bd      	mov	sp, r7
20005816:	f85d 7b04 	ldr.w	r7, [sp], #4
2000581a:	4770      	bx	lr
2000581c:	e000e100 	.word	0xe000e100
20005820:	e000ed00 	.word	0xe000ed00

20005824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20005824:	b480      	push	{r7}
20005826:	b089      	sub	sp, #36	@ 0x24
20005828:	af00      	add	r7, sp, #0
2000582a:	60f8      	str	r0, [r7, #12]
2000582c:	60b9      	str	r1, [r7, #8]
2000582e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20005830:	68fb      	ldr	r3, [r7, #12]
20005832:	f003 0307 	and.w	r3, r3, #7
20005836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20005838:	69fb      	ldr	r3, [r7, #28]
2000583a:	f1c3 0307 	rsb	r3, r3, #7
2000583e:	2b04      	cmp	r3, #4
20005840:	bf28      	it	cs
20005842:	2304      	movcs	r3, #4
20005844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20005846:	69fb      	ldr	r3, [r7, #28]
20005848:	3304      	adds	r3, #4
2000584a:	2b06      	cmp	r3, #6
2000584c:	d902      	bls.n	20005854 <NVIC_EncodePriority+0x30>
2000584e:	69fb      	ldr	r3, [r7, #28]
20005850:	3b03      	subs	r3, #3
20005852:	e000      	b.n	20005856 <NVIC_EncodePriority+0x32>
20005854:	2300      	movs	r3, #0
20005856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20005858:	f04f 32ff 	mov.w	r2, #4294967295
2000585c:	69bb      	ldr	r3, [r7, #24]
2000585e:	fa02 f303 	lsl.w	r3, r2, r3
20005862:	43da      	mvns	r2, r3
20005864:	68bb      	ldr	r3, [r7, #8]
20005866:	401a      	ands	r2, r3
20005868:	697b      	ldr	r3, [r7, #20]
2000586a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000586c:	f04f 31ff 	mov.w	r1, #4294967295
20005870:	697b      	ldr	r3, [r7, #20]
20005872:	fa01 f303 	lsl.w	r3, r1, r3
20005876:	43d9      	mvns	r1, r3
20005878:	687b      	ldr	r3, [r7, #4]
2000587a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000587c:	4313      	orrs	r3, r2
         );
}
2000587e:	4618      	mov	r0, r3
20005880:	3724      	adds	r7, #36	@ 0x24
20005882:	46bd      	mov	sp, r7
20005884:	f85d 7b04 	ldr.w	r7, [sp], #4
20005888:	4770      	bx	lr
	...

2000588c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000588c:	b580      	push	{r7, lr}
2000588e:	b082      	sub	sp, #8
20005890:	af00      	add	r7, sp, #0
20005892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20005894:	687b      	ldr	r3, [r7, #4]
20005896:	3b01      	subs	r3, #1
20005898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2000589c:	d301      	bcc.n	200058a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000589e:	2301      	movs	r3, #1
200058a0:	e00f      	b.n	200058c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200058a2:	4a0a      	ldr	r2, [pc, #40]	@ (200058cc <SysTick_Config+0x40>)
200058a4:	687b      	ldr	r3, [r7, #4]
200058a6:	3b01      	subs	r3, #1
200058a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200058aa:	210f      	movs	r1, #15
200058ac:	f04f 30ff 	mov.w	r0, #4294967295
200058b0:	f7ff ff8e 	bl	200057d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200058b4:	4b05      	ldr	r3, [pc, #20]	@ (200058cc <SysTick_Config+0x40>)
200058b6:	2200      	movs	r2, #0
200058b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200058ba:	4b04      	ldr	r3, [pc, #16]	@ (200058cc <SysTick_Config+0x40>)
200058bc:	2207      	movs	r2, #7
200058be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200058c0:	2300      	movs	r3, #0
}
200058c2:	4618      	mov	r0, r3
200058c4:	3708      	adds	r7, #8
200058c6:	46bd      	mov	sp, r7
200058c8:	bd80      	pop	{r7, pc}
200058ca:	bf00      	nop
200058cc:	e000e010 	.word	0xe000e010

200058d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200058d0:	b580      	push	{r7, lr}
200058d2:	b082      	sub	sp, #8
200058d4:	af00      	add	r7, sp, #0
200058d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200058d8:	6878      	ldr	r0, [r7, #4]
200058da:	f7ff ff29 	bl	20005730 <__NVIC_SetPriorityGrouping>
}
200058de:	bf00      	nop
200058e0:	3708      	adds	r7, #8
200058e2:	46bd      	mov	sp, r7
200058e4:	bd80      	pop	{r7, pc}

200058e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200058e6:	b580      	push	{r7, lr}
200058e8:	b086      	sub	sp, #24
200058ea:	af00      	add	r7, sp, #0
200058ec:	4603      	mov	r3, r0
200058ee:	60b9      	str	r1, [r7, #8]
200058f0:	607a      	str	r2, [r7, #4]
200058f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
200058f4:	2300      	movs	r3, #0
200058f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
200058f8:	f7ff ff3e 	bl	20005778 <__NVIC_GetPriorityGrouping>
200058fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
200058fe:	687a      	ldr	r2, [r7, #4]
20005900:	68b9      	ldr	r1, [r7, #8]
20005902:	6978      	ldr	r0, [r7, #20]
20005904:	f7ff ff8e 	bl	20005824 <NVIC_EncodePriority>
20005908:	4602      	mov	r2, r0
2000590a:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000590e:	4611      	mov	r1, r2
20005910:	4618      	mov	r0, r3
20005912:	f7ff ff5d 	bl	200057d0 <__NVIC_SetPriority>
}
20005916:	bf00      	nop
20005918:	3718      	adds	r7, #24
2000591a:	46bd      	mov	sp, r7
2000591c:	bd80      	pop	{r7, pc}

2000591e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000591e:	b580      	push	{r7, lr}
20005920:	b082      	sub	sp, #8
20005922:	af00      	add	r7, sp, #0
20005924:	4603      	mov	r3, r0
20005926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20005928:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000592c:	4618      	mov	r0, r3
2000592e:	f7ff ff31 	bl	20005794 <__NVIC_EnableIRQ>
}
20005932:	bf00      	nop
20005934:	3708      	adds	r7, #8
20005936:	46bd      	mov	sp, r7
20005938:	bd80      	pop	{r7, pc}

2000593a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000593a:	b580      	push	{r7, lr}
2000593c:	b082      	sub	sp, #8
2000593e:	af00      	add	r7, sp, #0
20005940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20005942:	6878      	ldr	r0, [r7, #4]
20005944:	f7ff ffa2 	bl	2000588c <SysTick_Config>
20005948:	4603      	mov	r3, r0
}
2000594a:	4618      	mov	r0, r3
2000594c:	3708      	adds	r7, #8
2000594e:	46bd      	mov	sp, r7
20005950:	bd80      	pop	{r7, pc}
	...

20005954 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
20005954:	b580      	push	{r7, lr}
20005956:	b084      	sub	sp, #16
20005958:	af00      	add	r7, sp, #0
2000595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
2000595c:	687b      	ldr	r3, [r7, #4]
2000595e:	2b00      	cmp	r3, #0
20005960:	d101      	bne.n	20005966 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
20005962:	2301      	movs	r3, #1
20005964:	e086      	b.n	20005a74 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
20005966:	687b      	ldr	r3, [r7, #4]
20005968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2000596c:	2b00      	cmp	r3, #0
2000596e:	d106      	bne.n	2000597e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
20005970:	687b      	ldr	r3, [r7, #4]
20005972:	2220      	movs	r2, #32
20005974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
20005978:	6878      	ldr	r0, [r7, #4]
2000597a:	f7ff fbfb 	bl	20005174 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000597e:	4b3f      	ldr	r3, [pc, #252]	@ (20005a7c <HAL_ETH_Init+0x128>)
20005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005982:	4a3e      	ldr	r2, [pc, #248]	@ (20005a7c <HAL_ETH_Init+0x128>)
20005984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20005988:	6453      	str	r3, [r2, #68]	@ 0x44
2000598a:	4b3c      	ldr	r3, [pc, #240]	@ (20005a7c <HAL_ETH_Init+0x128>)
2000598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000598e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20005992:	60bb      	str	r3, [r7, #8]
20005994:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
20005996:	4b3a      	ldr	r3, [pc, #232]	@ (20005a80 <HAL_ETH_Init+0x12c>)
20005998:	685b      	ldr	r3, [r3, #4]
2000599a:	4a39      	ldr	r2, [pc, #228]	@ (20005a80 <HAL_ETH_Init+0x12c>)
2000599c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
200059a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
200059a2:	4b37      	ldr	r3, [pc, #220]	@ (20005a80 <HAL_ETH_Init+0x12c>)
200059a4:	685a      	ldr	r2, [r3, #4]
200059a6:	687b      	ldr	r3, [r7, #4]
200059a8:	689b      	ldr	r3, [r3, #8]
200059aa:	4935      	ldr	r1, [pc, #212]	@ (20005a80 <HAL_ETH_Init+0x12c>)
200059ac:	4313      	orrs	r3, r2
200059ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
200059b0:	4b33      	ldr	r3, [pc, #204]	@ (20005a80 <HAL_ETH_Init+0x12c>)
200059b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
200059b4:	687b      	ldr	r3, [r7, #4]
200059b6:	681b      	ldr	r3, [r3, #0]
200059b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200059bc:	681b      	ldr	r3, [r3, #0]
200059be:	687a      	ldr	r2, [r7, #4]
200059c0:	6812      	ldr	r2, [r2, #0]
200059c2:	f043 0301 	orr.w	r3, r3, #1
200059c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
200059ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200059cc:	f7ff fe80 	bl	200056d0 <HAL_GetTick>
200059d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
200059d2:	e011      	b.n	200059f8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
200059d4:	f7ff fe7c 	bl	200056d0 <HAL_GetTick>
200059d8:	4602      	mov	r2, r0
200059da:	68fb      	ldr	r3, [r7, #12]
200059dc:	1ad3      	subs	r3, r2, r3
200059de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
200059e2:	d909      	bls.n	200059f8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
200059e4:	687b      	ldr	r3, [r7, #4]
200059e6:	2204      	movs	r2, #4
200059e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
200059ec:	687b      	ldr	r3, [r7, #4]
200059ee:	22e0      	movs	r2, #224	@ 0xe0
200059f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
200059f4:	2301      	movs	r3, #1
200059f6:	e03d      	b.n	20005a74 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
200059f8:	687b      	ldr	r3, [r7, #4]
200059fa:	681b      	ldr	r3, [r3, #0]
200059fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005a00:	681b      	ldr	r3, [r3, #0]
20005a02:	f003 0301 	and.w	r3, r3, #1
20005a06:	2b00      	cmp	r3, #0
20005a08:	d1e4      	bne.n	200059d4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
20005a0a:	6878      	ldr	r0, [r7, #4]
20005a0c:	f000 f97a 	bl	20005d04 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
20005a10:	6878      	ldr	r0, [r7, #4]
20005a12:	f000 fa25 	bl	20005e60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
20005a16:	6878      	ldr	r0, [r7, #4]
20005a18:	f000 fa7b 	bl	20005f12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
20005a1c:	687b      	ldr	r3, [r7, #4]
20005a1e:	685b      	ldr	r3, [r3, #4]
20005a20:	461a      	mov	r2, r3
20005a22:	2100      	movs	r1, #0
20005a24:	6878      	ldr	r0, [r7, #4]
20005a26:	f000 f9e3 	bl	20005df0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
20005a2a:	687b      	ldr	r3, [r7, #4]
20005a2c:	681b      	ldr	r3, [r3, #0]
20005a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20005a30:	687b      	ldr	r3, [r7, #4]
20005a32:	681b      	ldr	r3, [r3, #0]
20005a34:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
20005a38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
20005a3a:	687b      	ldr	r3, [r7, #4]
20005a3c:	681b      	ldr	r3, [r3, #0]
20005a3e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
20005a42:	687b      	ldr	r3, [r7, #4]
20005a44:	681a      	ldr	r2, [r3, #0]
20005a46:	4b0f      	ldr	r3, [pc, #60]	@ (20005a84 <HAL_ETH_Init+0x130>)
20005a48:	430b      	orrs	r3, r1
20005a4a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
20005a4e:	687b      	ldr	r3, [r7, #4]
20005a50:	681b      	ldr	r3, [r3, #0]
20005a52:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
20005a56:	687b      	ldr	r3, [r7, #4]
20005a58:	681b      	ldr	r3, [r3, #0]
20005a5a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
20005a5e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
20005a62:	687b      	ldr	r3, [r7, #4]
20005a64:	2200      	movs	r2, #0
20005a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
20005a6a:	687b      	ldr	r3, [r7, #4]
20005a6c:	2210      	movs	r2, #16
20005a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
20005a72:	2300      	movs	r3, #0
}
20005a74:	4618      	mov	r0, r3
20005a76:	3710      	adds	r7, #16
20005a78:	46bd      	mov	sp, r7
20005a7a:	bd80      	pop	{r7, pc}
20005a7c:	40023800 	.word	0x40023800
20005a80:	40013800 	.word	0x40013800
20005a84:	00020060 	.word	0x00020060

20005a88 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
20005a88:	b580      	push	{r7, lr}
20005a8a:	b084      	sub	sp, #16
20005a8c:	af00      	add	r7, sp, #0
20005a8e:	6078      	str	r0, [r7, #4]
20005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
20005a92:	687b      	ldr	r3, [r7, #4]
20005a94:	681b      	ldr	r3, [r3, #0]
20005a96:	681b      	ldr	r3, [r3, #0]
20005a98:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
20005a9a:	68fa      	ldr	r2, [r7, #12]
20005a9c:	4b53      	ldr	r3, [pc, #332]	@ (20005bec <ETH_SetMACConfig+0x164>)
20005a9e:	4013      	ands	r3, r2
20005aa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20005aa2:	683b      	ldr	r3, [r7, #0]
20005aa4:	7b9b      	ldrb	r3, [r3, #14]
20005aa6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20005aa8:	683a      	ldr	r2, [r7, #0]
20005aaa:	7c12      	ldrb	r2, [r2, #16]
20005aac:	2a00      	cmp	r2, #0
20005aae:	d102      	bne.n	20005ab6 <ETH_SetMACConfig+0x2e>
20005ab0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
20005ab4:	e000      	b.n	20005ab8 <ETH_SetMACConfig+0x30>
20005ab6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20005ab8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
20005aba:	683a      	ldr	r2, [r7, #0]
20005abc:	7c52      	ldrb	r2, [r2, #17]
20005abe:	2a00      	cmp	r2, #0
20005ac0:	d102      	bne.n	20005ac8 <ETH_SetMACConfig+0x40>
20005ac2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
20005ac6:	e000      	b.n	20005aca <ETH_SetMACConfig+0x42>
20005ac8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20005aca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
20005acc:	683b      	ldr	r3, [r7, #0]
20005ace:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
20005ad0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
20005ad2:	683b      	ldr	r3, [r7, #0]
20005ad4:	7fdb      	ldrb	r3, [r3, #31]
20005ad6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
20005ad8:	431a      	orrs	r2, r3
                        macconf->Speed |
20005ada:	683b      	ldr	r3, [r7, #0]
20005adc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
20005ade:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20005ae0:	683a      	ldr	r2, [r7, #0]
20005ae2:	7f92      	ldrb	r2, [r2, #30]
20005ae4:	2a00      	cmp	r2, #0
20005ae6:	d102      	bne.n	20005aee <ETH_SetMACConfig+0x66>
20005ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
20005aec:	e000      	b.n	20005af0 <ETH_SetMACConfig+0x68>
20005aee:	2200      	movs	r2, #0
                        macconf->Speed |
20005af0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
20005af2:	683b      	ldr	r3, [r7, #0]
20005af4:	7f1b      	ldrb	r3, [r3, #28]
20005af6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20005af8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
20005afa:	683b      	ldr	r3, [r7, #0]
20005afc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
20005afe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
20005b00:	683b      	ldr	r3, [r7, #0]
20005b02:	791b      	ldrb	r3, [r3, #4]
20005b04:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
20005b06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
20005b08:	683a      	ldr	r2, [r7, #0]
20005b0a:	f892 2020 	ldrb.w	r2, [r2, #32]
20005b0e:	2a00      	cmp	r2, #0
20005b10:	d102      	bne.n	20005b18 <ETH_SetMACConfig+0x90>
20005b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
20005b16:	e000      	b.n	20005b1a <ETH_SetMACConfig+0x92>
20005b18:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
20005b1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
20005b1c:	683b      	ldr	r3, [r7, #0]
20005b1e:	7bdb      	ldrb	r3, [r3, #15]
20005b20:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
20005b22:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
20005b24:	683b      	ldr	r3, [r7, #0]
20005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
20005b28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
20005b2a:	683b      	ldr	r3, [r7, #0]
20005b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
20005b30:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20005b32:	4313      	orrs	r3, r2
20005b34:	68fa      	ldr	r2, [r7, #12]
20005b36:	4313      	orrs	r3, r2
20005b38:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
20005b3a:	687b      	ldr	r3, [r7, #4]
20005b3c:	681b      	ldr	r3, [r3, #0]
20005b3e:	68fa      	ldr	r2, [r7, #12]
20005b40:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
20005b42:	687b      	ldr	r3, [r7, #4]
20005b44:	681b      	ldr	r3, [r3, #0]
20005b46:	681b      	ldr	r3, [r3, #0]
20005b48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20005b4a:	2001      	movs	r0, #1
20005b4c:	f7ff fdcc 	bl	200056e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
20005b50:	687b      	ldr	r3, [r7, #4]
20005b52:	681b      	ldr	r3, [r3, #0]
20005b54:	68fa      	ldr	r2, [r7, #12]
20005b56:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
20005b58:	687b      	ldr	r3, [r7, #4]
20005b5a:	681b      	ldr	r3, [r3, #0]
20005b5c:	699b      	ldr	r3, [r3, #24]
20005b5e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
20005b60:	68fa      	ldr	r2, [r7, #12]
20005b62:	f64f 7341 	movw	r3, #65345	@ 0xff41
20005b66:	4013      	ands	r3, r2
20005b68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20005b6a:	683b      	ldr	r3, [r7, #0]
20005b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20005b6e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
20005b70:	683a      	ldr	r2, [r7, #0]
20005b72:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
20005b76:	2a00      	cmp	r2, #0
20005b78:	d101      	bne.n	20005b7e <ETH_SetMACConfig+0xf6>
20005b7a:	2280      	movs	r2, #128	@ 0x80
20005b7c:	e000      	b.n	20005b80 <ETH_SetMACConfig+0xf8>
20005b7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20005b80:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
20005b82:	683b      	ldr	r3, [r7, #0]
20005b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
20005b86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20005b88:	683a      	ldr	r2, [r7, #0]
20005b8a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
20005b8e:	2a01      	cmp	r2, #1
20005b90:	d101      	bne.n	20005b96 <ETH_SetMACConfig+0x10e>
20005b92:	2208      	movs	r2, #8
20005b94:	e000      	b.n	20005b98 <ETH_SetMACConfig+0x110>
20005b96:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
20005b98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
20005b9a:	683a      	ldr	r2, [r7, #0]
20005b9c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
20005ba0:	2a01      	cmp	r2, #1
20005ba2:	d101      	bne.n	20005ba8 <ETH_SetMACConfig+0x120>
20005ba4:	2204      	movs	r2, #4
20005ba6:	e000      	b.n	20005baa <ETH_SetMACConfig+0x122>
20005ba8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20005baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
20005bac:	683a      	ldr	r2, [r7, #0]
20005bae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
20005bb2:	2a01      	cmp	r2, #1
20005bb4:	d101      	bne.n	20005bba <ETH_SetMACConfig+0x132>
20005bb6:	2202      	movs	r2, #2
20005bb8:	e000      	b.n	20005bbc <ETH_SetMACConfig+0x134>
20005bba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20005bbc:	4313      	orrs	r3, r2
20005bbe:	68fa      	ldr	r2, [r7, #12]
20005bc0:	4313      	orrs	r3, r2
20005bc2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
20005bc4:	687b      	ldr	r3, [r7, #4]
20005bc6:	681b      	ldr	r3, [r3, #0]
20005bc8:	68fa      	ldr	r2, [r7, #12]
20005bca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
20005bcc:	687b      	ldr	r3, [r7, #4]
20005bce:	681b      	ldr	r3, [r3, #0]
20005bd0:	699b      	ldr	r3, [r3, #24]
20005bd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20005bd4:	2001      	movs	r0, #1
20005bd6:	f7ff fd87 	bl	200056e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
20005bda:	687b      	ldr	r3, [r7, #4]
20005bdc:	681b      	ldr	r3, [r3, #0]
20005bde:	68fa      	ldr	r2, [r7, #12]
20005be0:	619a      	str	r2, [r3, #24]
}
20005be2:	bf00      	nop
20005be4:	3710      	adds	r7, #16
20005be6:	46bd      	mov	sp, r7
20005be8:	bd80      	pop	{r7, pc}
20005bea:	bf00      	nop
20005bec:	fd20810f 	.word	0xfd20810f

20005bf0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
20005bf0:	b580      	push	{r7, lr}
20005bf2:	b084      	sub	sp, #16
20005bf4:	af00      	add	r7, sp, #0
20005bf6:	6078      	str	r0, [r7, #4]
20005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
20005bfa:	687b      	ldr	r3, [r7, #4]
20005bfc:	681b      	ldr	r3, [r3, #0]
20005bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005c02:	699b      	ldr	r3, [r3, #24]
20005c04:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
20005c06:	68fa      	ldr	r2, [r7, #12]
20005c08:	4b3d      	ldr	r3, [pc, #244]	@ (20005d00 <ETH_SetDMAConfig+0x110>)
20005c0a:	4013      	ands	r3, r2
20005c0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
20005c0e:	683b      	ldr	r3, [r7, #0]
20005c10:	7b1b      	ldrb	r3, [r3, #12]
20005c12:	2b00      	cmp	r3, #0
20005c14:	d102      	bne.n	20005c1c <ETH_SetDMAConfig+0x2c>
20005c16:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
20005c1a:	e000      	b.n	20005c1e <ETH_SetDMAConfig+0x2e>
20005c1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
20005c1e:	683b      	ldr	r3, [r7, #0]
20005c20:	7b5b      	ldrb	r3, [r3, #13]
20005c22:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
20005c24:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
20005c26:	683a      	ldr	r2, [r7, #0]
20005c28:	7f52      	ldrb	r2, [r2, #29]
20005c2a:	2a00      	cmp	r2, #0
20005c2c:	d102      	bne.n	20005c34 <ETH_SetDMAConfig+0x44>
20005c2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
20005c32:	e000      	b.n	20005c36 <ETH_SetDMAConfig+0x46>
20005c34:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
20005c36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
20005c38:	683b      	ldr	r3, [r7, #0]
20005c3a:	7b9b      	ldrb	r3, [r3, #14]
20005c3c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
20005c3e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
20005c40:	683b      	ldr	r3, [r7, #0]
20005c42:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
20005c44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
20005c46:	683b      	ldr	r3, [r7, #0]
20005c48:	7f1b      	ldrb	r3, [r3, #28]
20005c4a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
20005c4c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
20005c4e:	683b      	ldr	r3, [r7, #0]
20005c50:	7f9b      	ldrb	r3, [r3, #30]
20005c52:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
20005c54:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
20005c56:	683b      	ldr	r3, [r7, #0]
20005c58:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
20005c5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
20005c5c:	683b      	ldr	r3, [r7, #0]
20005c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
20005c62:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
20005c64:	4313      	orrs	r3, r2
20005c66:	68fa      	ldr	r2, [r7, #12]
20005c68:	4313      	orrs	r3, r2
20005c6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
20005c6c:	687b      	ldr	r3, [r7, #4]
20005c6e:	681b      	ldr	r3, [r3, #0]
20005c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005c74:	461a      	mov	r2, r3
20005c76:	68fb      	ldr	r3, [r7, #12]
20005c78:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
20005c7a:	687b      	ldr	r3, [r7, #4]
20005c7c:	681b      	ldr	r3, [r3, #0]
20005c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005c82:	699b      	ldr	r3, [r3, #24]
20005c84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20005c86:	2001      	movs	r0, #1
20005c88:	f7ff fd2e 	bl	200056e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
20005c8c:	687b      	ldr	r3, [r7, #4]
20005c8e:	681b      	ldr	r3, [r3, #0]
20005c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005c94:	461a      	mov	r2, r3
20005c96:	68fb      	ldr	r3, [r7, #12]
20005c98:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20005c9a:	683b      	ldr	r3, [r7, #0]
20005c9c:	791b      	ldrb	r3, [r3, #4]
20005c9e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
20005ca0:	683b      	ldr	r3, [r7, #0]
20005ca2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20005ca4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20005ca6:	683b      	ldr	r3, [r7, #0]
20005ca8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
20005caa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
20005cac:	683b      	ldr	r3, [r7, #0]
20005cae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20005cb0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
20005cb2:	683b      	ldr	r3, [r7, #0]
20005cb4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
20005cb8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
20005cba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
20005cbc:	683b      	ldr	r3, [r7, #0]
20005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20005cc0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
20005cc2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
20005cc4:	683b      	ldr	r3, [r7, #0]
20005cc6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
20005cc8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20005cca:	687a      	ldr	r2, [r7, #4]
20005ccc:	6812      	ldr	r2, [r2, #0]
20005cce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
20005cd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
20005cd6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
20005cd8:	687b      	ldr	r3, [r7, #4]
20005cda:	681b      	ldr	r3, [r3, #0]
20005cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005ce0:	681b      	ldr	r3, [r3, #0]
20005ce2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20005ce4:	2001      	movs	r0, #1
20005ce6:	f7ff fcff 	bl	200056e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
20005cea:	687b      	ldr	r3, [r7, #4]
20005cec:	681b      	ldr	r3, [r3, #0]
20005cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005cf2:	461a      	mov	r2, r3
20005cf4:	68fb      	ldr	r3, [r7, #12]
20005cf6:	6013      	str	r3, [r2, #0]
}
20005cf8:	bf00      	nop
20005cfa:	3710      	adds	r7, #16
20005cfc:	46bd      	mov	sp, r7
20005cfe:	bd80      	pop	{r7, pc}
20005d00:	f8de3f23 	.word	0xf8de3f23

20005d04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
20005d04:	b580      	push	{r7, lr}
20005d06:	b0a6      	sub	sp, #152	@ 0x98
20005d08:	af00      	add	r7, sp, #0
20005d0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
20005d0c:	2301      	movs	r3, #1
20005d0e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
20005d12:	2301      	movs	r3, #1
20005d14:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
20005d18:	2300      	movs	r3, #0
20005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
20005d1c:	2300      	movs	r3, #0
20005d1e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
20005d22:	2301      	movs	r3, #1
20005d24:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
20005d28:	2300      	movs	r3, #0
20005d2a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
20005d2e:	2301      	movs	r3, #1
20005d30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
20005d34:	2301      	movs	r3, #1
20005d36:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
20005d3a:	2300      	movs	r3, #0
20005d3c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
20005d40:	2300      	movs	r3, #0
20005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
20005d46:	2300      	movs	r3, #0
20005d48:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
20005d4a:	2300      	movs	r3, #0
20005d4c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
20005d50:	2300      	movs	r3, #0
20005d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
20005d54:	2300      	movs	r3, #0
20005d56:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
20005d5a:	2300      	movs	r3, #0
20005d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
20005d60:	2300      	movs	r3, #0
20005d62:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
20005d66:	2300      	movs	r3, #0
20005d68:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
20005d6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
20005d70:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
20005d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20005d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
20005d78:	2300      	movs	r3, #0
20005d7a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
20005d7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
20005d82:	4619      	mov	r1, r3
20005d84:	6878      	ldr	r0, [r7, #4]
20005d86:	f7ff fe7f 	bl	20005a88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
20005d8a:	2301      	movs	r3, #1
20005d8c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
20005d8e:	2301      	movs	r3, #1
20005d90:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
20005d92:	2301      	movs	r3, #1
20005d94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
20005d98:	2301      	movs	r3, #1
20005d9a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
20005d9c:	2300      	movs	r3, #0
20005d9e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
20005da0:	2300      	movs	r3, #0
20005da2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
20005da6:	2300      	movs	r3, #0
20005da8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
20005dac:	2300      	movs	r3, #0
20005dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
20005db0:	2301      	movs	r3, #1
20005db2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
20005db6:	2301      	movs	r3, #1
20005db8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
20005dba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20005dbe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
20005dc0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20005dc4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
20005dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20005dca:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
20005dcc:	2301      	movs	r3, #1
20005dce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
20005dd2:	2300      	movs	r3, #0
20005dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
20005dd6:	2300      	movs	r3, #0
20005dd8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
20005dda:	f107 0308 	add.w	r3, r7, #8
20005dde:	4619      	mov	r1, r3
20005de0:	6878      	ldr	r0, [r7, #4]
20005de2:	f7ff ff05 	bl	20005bf0 <ETH_SetDMAConfig>
}
20005de6:	bf00      	nop
20005de8:	3798      	adds	r7, #152	@ 0x98
20005dea:	46bd      	mov	sp, r7
20005dec:	bd80      	pop	{r7, pc}
	...

20005df0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
20005df0:	b480      	push	{r7}
20005df2:	b087      	sub	sp, #28
20005df4:	af00      	add	r7, sp, #0
20005df6:	60f8      	str	r0, [r7, #12]
20005df8:	60b9      	str	r1, [r7, #8]
20005dfa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
20005dfc:	687b      	ldr	r3, [r7, #4]
20005dfe:	3305      	adds	r3, #5
20005e00:	781b      	ldrb	r3, [r3, #0]
20005e02:	021b      	lsls	r3, r3, #8
20005e04:	687a      	ldr	r2, [r7, #4]
20005e06:	3204      	adds	r2, #4
20005e08:	7812      	ldrb	r2, [r2, #0]
20005e0a:	4313      	orrs	r3, r2
20005e0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
20005e0e:	68ba      	ldr	r2, [r7, #8]
20005e10:	4b11      	ldr	r3, [pc, #68]	@ (20005e58 <ETH_MACAddressConfig+0x68>)
20005e12:	4413      	add	r3, r2
20005e14:	461a      	mov	r2, r3
20005e16:	697b      	ldr	r3, [r7, #20]
20005e18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
20005e1a:	687b      	ldr	r3, [r7, #4]
20005e1c:	3303      	adds	r3, #3
20005e1e:	781b      	ldrb	r3, [r3, #0]
20005e20:	061a      	lsls	r2, r3, #24
20005e22:	687b      	ldr	r3, [r7, #4]
20005e24:	3302      	adds	r3, #2
20005e26:	781b      	ldrb	r3, [r3, #0]
20005e28:	041b      	lsls	r3, r3, #16
20005e2a:	431a      	orrs	r2, r3
20005e2c:	687b      	ldr	r3, [r7, #4]
20005e2e:	3301      	adds	r3, #1
20005e30:	781b      	ldrb	r3, [r3, #0]
20005e32:	021b      	lsls	r3, r3, #8
20005e34:	4313      	orrs	r3, r2
20005e36:	687a      	ldr	r2, [r7, #4]
20005e38:	7812      	ldrb	r2, [r2, #0]
20005e3a:	4313      	orrs	r3, r2
20005e3c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
20005e3e:	68ba      	ldr	r2, [r7, #8]
20005e40:	4b06      	ldr	r3, [pc, #24]	@ (20005e5c <ETH_MACAddressConfig+0x6c>)
20005e42:	4413      	add	r3, r2
20005e44:	461a      	mov	r2, r3
20005e46:	697b      	ldr	r3, [r7, #20]
20005e48:	6013      	str	r3, [r2, #0]
}
20005e4a:	bf00      	nop
20005e4c:	371c      	adds	r7, #28
20005e4e:	46bd      	mov	sp, r7
20005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e54:	4770      	bx	lr
20005e56:	bf00      	nop
20005e58:	40028040 	.word	0x40028040
20005e5c:	40028044 	.word	0x40028044

20005e60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
20005e60:	b480      	push	{r7}
20005e62:	b085      	sub	sp, #20
20005e64:	af00      	add	r7, sp, #0
20005e66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20005e68:	2300      	movs	r3, #0
20005e6a:	60fb      	str	r3, [r7, #12]
20005e6c:	e03e      	b.n	20005eec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
20005e6e:	687b      	ldr	r3, [r7, #4]
20005e70:	68d9      	ldr	r1, [r3, #12]
20005e72:	68fa      	ldr	r2, [r7, #12]
20005e74:	4613      	mov	r3, r2
20005e76:	009b      	lsls	r3, r3, #2
20005e78:	4413      	add	r3, r2
20005e7a:	00db      	lsls	r3, r3, #3
20005e7c:	440b      	add	r3, r1
20005e7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
20005e80:	68bb      	ldr	r3, [r7, #8]
20005e82:	2200      	movs	r2, #0
20005e84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
20005e86:	68bb      	ldr	r3, [r7, #8]
20005e88:	2200      	movs	r2, #0
20005e8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
20005e8c:	68bb      	ldr	r3, [r7, #8]
20005e8e:	2200      	movs	r2, #0
20005e90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
20005e92:	68bb      	ldr	r3, [r7, #8]
20005e94:	2200      	movs	r2, #0
20005e96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
20005e98:	68b9      	ldr	r1, [r7, #8]
20005e9a:	687b      	ldr	r3, [r7, #4]
20005e9c:	68fa      	ldr	r2, [r7, #12]
20005e9e:	3206      	adds	r2, #6
20005ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
20005ea4:	68bb      	ldr	r3, [r7, #8]
20005ea6:	681b      	ldr	r3, [r3, #0]
20005ea8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20005eac:	68bb      	ldr	r3, [r7, #8]
20005eae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
20005eb0:	68fb      	ldr	r3, [r7, #12]
20005eb2:	2b02      	cmp	r3, #2
20005eb4:	d80c      	bhi.n	20005ed0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
20005eb6:	687b      	ldr	r3, [r7, #4]
20005eb8:	68d9      	ldr	r1, [r3, #12]
20005eba:	68fb      	ldr	r3, [r7, #12]
20005ebc:	1c5a      	adds	r2, r3, #1
20005ebe:	4613      	mov	r3, r2
20005ec0:	009b      	lsls	r3, r3, #2
20005ec2:	4413      	add	r3, r2
20005ec4:	00db      	lsls	r3, r3, #3
20005ec6:	440b      	add	r3, r1
20005ec8:	461a      	mov	r2, r3
20005eca:	68bb      	ldr	r3, [r7, #8]
20005ecc:	60da      	str	r2, [r3, #12]
20005ece:	e004      	b.n	20005eda <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
20005ed0:	687b      	ldr	r3, [r7, #4]
20005ed2:	68db      	ldr	r3, [r3, #12]
20005ed4:	461a      	mov	r2, r3
20005ed6:	68bb      	ldr	r3, [r7, #8]
20005ed8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
20005eda:	68bb      	ldr	r3, [r7, #8]
20005edc:	681b      	ldr	r3, [r3, #0]
20005ede:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
20005ee2:	68bb      	ldr	r3, [r7, #8]
20005ee4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20005ee6:	68fb      	ldr	r3, [r7, #12]
20005ee8:	3301      	adds	r3, #1
20005eea:	60fb      	str	r3, [r7, #12]
20005eec:	68fb      	ldr	r3, [r7, #12]
20005eee:	2b03      	cmp	r3, #3
20005ef0:	d9bd      	bls.n	20005e6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
20005ef2:	687b      	ldr	r3, [r7, #4]
20005ef4:	2200      	movs	r2, #0
20005ef6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
20005ef8:	687b      	ldr	r3, [r7, #4]
20005efa:	68da      	ldr	r2, [r3, #12]
20005efc:	687b      	ldr	r3, [r7, #4]
20005efe:	681b      	ldr	r3, [r3, #0]
20005f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005f04:	611a      	str	r2, [r3, #16]
}
20005f06:	bf00      	nop
20005f08:	3714      	adds	r7, #20
20005f0a:	46bd      	mov	sp, r7
20005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f10:	4770      	bx	lr

20005f12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
20005f12:	b480      	push	{r7}
20005f14:	b085      	sub	sp, #20
20005f16:	af00      	add	r7, sp, #0
20005f18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20005f1a:	2300      	movs	r3, #0
20005f1c:	60fb      	str	r3, [r7, #12]
20005f1e:	e048      	b.n	20005fb2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
20005f20:	687b      	ldr	r3, [r7, #4]
20005f22:	6919      	ldr	r1, [r3, #16]
20005f24:	68fa      	ldr	r2, [r7, #12]
20005f26:	4613      	mov	r3, r2
20005f28:	009b      	lsls	r3, r3, #2
20005f2a:	4413      	add	r3, r2
20005f2c:	00db      	lsls	r3, r3, #3
20005f2e:	440b      	add	r3, r1
20005f30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
20005f32:	68bb      	ldr	r3, [r7, #8]
20005f34:	2200      	movs	r2, #0
20005f36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
20005f38:	68bb      	ldr	r3, [r7, #8]
20005f3a:	2200      	movs	r2, #0
20005f3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
20005f3e:	68bb      	ldr	r3, [r7, #8]
20005f40:	2200      	movs	r2, #0
20005f42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
20005f44:	68bb      	ldr	r3, [r7, #8]
20005f46:	2200      	movs	r2, #0
20005f48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
20005f4a:	68bb      	ldr	r3, [r7, #8]
20005f4c:	2200      	movs	r2, #0
20005f4e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
20005f50:	68bb      	ldr	r3, [r7, #8]
20005f52:	2200      	movs	r2, #0
20005f54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
20005f56:	68bb      	ldr	r3, [r7, #8]
20005f58:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
20005f5c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
20005f5e:	687b      	ldr	r3, [r7, #4]
20005f60:	695b      	ldr	r3, [r3, #20]
20005f62:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
20005f66:	68bb      	ldr	r3, [r7, #8]
20005f68:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
20005f6a:	68bb      	ldr	r3, [r7, #8]
20005f6c:	685b      	ldr	r3, [r3, #4]
20005f6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
20005f72:	68bb      	ldr	r3, [r7, #8]
20005f74:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
20005f76:	68b9      	ldr	r1, [r7, #8]
20005f78:	687b      	ldr	r3, [r7, #4]
20005f7a:	68fa      	ldr	r2, [r7, #12]
20005f7c:	3212      	adds	r2, #18
20005f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
20005f82:	68fb      	ldr	r3, [r7, #12]
20005f84:	2b02      	cmp	r3, #2
20005f86:	d80c      	bhi.n	20005fa2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
20005f88:	687b      	ldr	r3, [r7, #4]
20005f8a:	6919      	ldr	r1, [r3, #16]
20005f8c:	68fb      	ldr	r3, [r7, #12]
20005f8e:	1c5a      	adds	r2, r3, #1
20005f90:	4613      	mov	r3, r2
20005f92:	009b      	lsls	r3, r3, #2
20005f94:	4413      	add	r3, r2
20005f96:	00db      	lsls	r3, r3, #3
20005f98:	440b      	add	r3, r1
20005f9a:	461a      	mov	r2, r3
20005f9c:	68bb      	ldr	r3, [r7, #8]
20005f9e:	60da      	str	r2, [r3, #12]
20005fa0:	e004      	b.n	20005fac <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
20005fa2:	687b      	ldr	r3, [r7, #4]
20005fa4:	691b      	ldr	r3, [r3, #16]
20005fa6:	461a      	mov	r2, r3
20005fa8:	68bb      	ldr	r3, [r7, #8]
20005faa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20005fac:	68fb      	ldr	r3, [r7, #12]
20005fae:	3301      	adds	r3, #1
20005fb0:	60fb      	str	r3, [r7, #12]
20005fb2:	68fb      	ldr	r3, [r7, #12]
20005fb4:	2b03      	cmp	r3, #3
20005fb6:	d9b3      	bls.n	20005f20 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
20005fb8:	687b      	ldr	r3, [r7, #4]
20005fba:	2200      	movs	r2, #0
20005fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
20005fbe:	687b      	ldr	r3, [r7, #4]
20005fc0:	2200      	movs	r2, #0
20005fc2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
20005fc4:	687b      	ldr	r3, [r7, #4]
20005fc6:	2200      	movs	r2, #0
20005fc8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
20005fca:	687b      	ldr	r3, [r7, #4]
20005fcc:	2200      	movs	r2, #0
20005fce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
20005fd0:	687b      	ldr	r3, [r7, #4]
20005fd2:	2200      	movs	r2, #0
20005fd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
20005fd6:	687b      	ldr	r3, [r7, #4]
20005fd8:	691a      	ldr	r2, [r3, #16]
20005fda:	687b      	ldr	r3, [r7, #4]
20005fdc:	681b      	ldr	r3, [r3, #0]
20005fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005fe2:	60da      	str	r2, [r3, #12]
}
20005fe4:	bf00      	nop
20005fe6:	3714      	adds	r7, #20
20005fe8:	46bd      	mov	sp, r7
20005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
20005fee:	4770      	bx	lr

20005ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20005ff0:	b480      	push	{r7}
20005ff2:	b089      	sub	sp, #36	@ 0x24
20005ff4:	af00      	add	r7, sp, #0
20005ff6:	6078      	str	r0, [r7, #4]
20005ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
20005ffa:	2300      	movs	r3, #0
20005ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
20005ffe:	2300      	movs	r3, #0
20006000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
20006002:	2300      	movs	r3, #0
20006004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
20006006:	2300      	movs	r3, #0
20006008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
2000600a:	2300      	movs	r3, #0
2000600c:	61fb      	str	r3, [r7, #28]
2000600e:	e175      	b.n	200062fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
20006010:	2201      	movs	r2, #1
20006012:	69fb      	ldr	r3, [r7, #28]
20006014:	fa02 f303 	lsl.w	r3, r2, r3
20006018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000601a:	683b      	ldr	r3, [r7, #0]
2000601c:	681b      	ldr	r3, [r3, #0]
2000601e:	697a      	ldr	r2, [r7, #20]
20006020:	4013      	ands	r3, r2
20006022:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
20006024:	693a      	ldr	r2, [r7, #16]
20006026:	697b      	ldr	r3, [r7, #20]
20006028:	429a      	cmp	r2, r3
2000602a:	f040 8164 	bne.w	200062f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2000602e:	683b      	ldr	r3, [r7, #0]
20006030:	685b      	ldr	r3, [r3, #4]
20006032:	f003 0303 	and.w	r3, r3, #3
20006036:	2b01      	cmp	r3, #1
20006038:	d005      	beq.n	20006046 <HAL_GPIO_Init+0x56>
2000603a:	683b      	ldr	r3, [r7, #0]
2000603c:	685b      	ldr	r3, [r3, #4]
2000603e:	f003 0303 	and.w	r3, r3, #3
20006042:	2b02      	cmp	r3, #2
20006044:	d130      	bne.n	200060a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
20006046:	687b      	ldr	r3, [r7, #4]
20006048:	689b      	ldr	r3, [r3, #8]
2000604a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
2000604c:	69fb      	ldr	r3, [r7, #28]
2000604e:	005b      	lsls	r3, r3, #1
20006050:	2203      	movs	r2, #3
20006052:	fa02 f303 	lsl.w	r3, r2, r3
20006056:	43db      	mvns	r3, r3
20006058:	69ba      	ldr	r2, [r7, #24]
2000605a:	4013      	ands	r3, r2
2000605c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
2000605e:	683b      	ldr	r3, [r7, #0]
20006060:	68da      	ldr	r2, [r3, #12]
20006062:	69fb      	ldr	r3, [r7, #28]
20006064:	005b      	lsls	r3, r3, #1
20006066:	fa02 f303 	lsl.w	r3, r2, r3
2000606a:	69ba      	ldr	r2, [r7, #24]
2000606c:	4313      	orrs	r3, r2
2000606e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20006070:	687b      	ldr	r3, [r7, #4]
20006072:	69ba      	ldr	r2, [r7, #24]
20006074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20006076:	687b      	ldr	r3, [r7, #4]
20006078:	685b      	ldr	r3, [r3, #4]
2000607a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000607c:	2201      	movs	r2, #1
2000607e:	69fb      	ldr	r3, [r7, #28]
20006080:	fa02 f303 	lsl.w	r3, r2, r3
20006084:	43db      	mvns	r3, r3
20006086:	69ba      	ldr	r2, [r7, #24]
20006088:	4013      	ands	r3, r2
2000608a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2000608c:	683b      	ldr	r3, [r7, #0]
2000608e:	685b      	ldr	r3, [r3, #4]
20006090:	091b      	lsrs	r3, r3, #4
20006092:	f003 0201 	and.w	r2, r3, #1
20006096:	69fb      	ldr	r3, [r7, #28]
20006098:	fa02 f303 	lsl.w	r3, r2, r3
2000609c:	69ba      	ldr	r2, [r7, #24]
2000609e:	4313      	orrs	r3, r2
200060a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
200060a2:	687b      	ldr	r3, [r7, #4]
200060a4:	69ba      	ldr	r2, [r7, #24]
200060a6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
200060a8:	683b      	ldr	r3, [r7, #0]
200060aa:	685b      	ldr	r3, [r3, #4]
200060ac:	f003 0303 	and.w	r3, r3, #3
200060b0:	2b03      	cmp	r3, #3
200060b2:	d017      	beq.n	200060e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
200060b4:	687b      	ldr	r3, [r7, #4]
200060b6:	68db      	ldr	r3, [r3, #12]
200060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
200060ba:	69fb      	ldr	r3, [r7, #28]
200060bc:	005b      	lsls	r3, r3, #1
200060be:	2203      	movs	r2, #3
200060c0:	fa02 f303 	lsl.w	r3, r2, r3
200060c4:	43db      	mvns	r3, r3
200060c6:	69ba      	ldr	r2, [r7, #24]
200060c8:	4013      	ands	r3, r2
200060ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
200060cc:	683b      	ldr	r3, [r7, #0]
200060ce:	689a      	ldr	r2, [r3, #8]
200060d0:	69fb      	ldr	r3, [r7, #28]
200060d2:	005b      	lsls	r3, r3, #1
200060d4:	fa02 f303 	lsl.w	r3, r2, r3
200060d8:	69ba      	ldr	r2, [r7, #24]
200060da:	4313      	orrs	r3, r2
200060dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
200060de:	687b      	ldr	r3, [r7, #4]
200060e0:	69ba      	ldr	r2, [r7, #24]
200060e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200060e4:	683b      	ldr	r3, [r7, #0]
200060e6:	685b      	ldr	r3, [r3, #4]
200060e8:	f003 0303 	and.w	r3, r3, #3
200060ec:	2b02      	cmp	r3, #2
200060ee:	d123      	bne.n	20006138 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
200060f0:	69fb      	ldr	r3, [r7, #28]
200060f2:	08da      	lsrs	r2, r3, #3
200060f4:	687b      	ldr	r3, [r7, #4]
200060f6:	3208      	adds	r2, #8
200060f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200060fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
200060fe:	69fb      	ldr	r3, [r7, #28]
20006100:	f003 0307 	and.w	r3, r3, #7
20006104:	009b      	lsls	r3, r3, #2
20006106:	220f      	movs	r2, #15
20006108:	fa02 f303 	lsl.w	r3, r2, r3
2000610c:	43db      	mvns	r3, r3
2000610e:	69ba      	ldr	r2, [r7, #24]
20006110:	4013      	ands	r3, r2
20006112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
20006114:	683b      	ldr	r3, [r7, #0]
20006116:	691a      	ldr	r2, [r3, #16]
20006118:	69fb      	ldr	r3, [r7, #28]
2000611a:	f003 0307 	and.w	r3, r3, #7
2000611e:	009b      	lsls	r3, r3, #2
20006120:	fa02 f303 	lsl.w	r3, r2, r3
20006124:	69ba      	ldr	r2, [r7, #24]
20006126:	4313      	orrs	r3, r2
20006128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
2000612a:	69fb      	ldr	r3, [r7, #28]
2000612c:	08da      	lsrs	r2, r3, #3
2000612e:	687b      	ldr	r3, [r7, #4]
20006130:	3208      	adds	r2, #8
20006132:	69b9      	ldr	r1, [r7, #24]
20006134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20006138:	687b      	ldr	r3, [r7, #4]
2000613a:	681b      	ldr	r3, [r3, #0]
2000613c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
2000613e:	69fb      	ldr	r3, [r7, #28]
20006140:	005b      	lsls	r3, r3, #1
20006142:	2203      	movs	r2, #3
20006144:	fa02 f303 	lsl.w	r3, r2, r3
20006148:	43db      	mvns	r3, r3
2000614a:	69ba      	ldr	r2, [r7, #24]
2000614c:	4013      	ands	r3, r2
2000614e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20006150:	683b      	ldr	r3, [r7, #0]
20006152:	685b      	ldr	r3, [r3, #4]
20006154:	f003 0203 	and.w	r2, r3, #3
20006158:	69fb      	ldr	r3, [r7, #28]
2000615a:	005b      	lsls	r3, r3, #1
2000615c:	fa02 f303 	lsl.w	r3, r2, r3
20006160:	69ba      	ldr	r2, [r7, #24]
20006162:	4313      	orrs	r3, r2
20006164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20006166:	687b      	ldr	r3, [r7, #4]
20006168:	69ba      	ldr	r2, [r7, #24]
2000616a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
2000616c:	683b      	ldr	r3, [r7, #0]
2000616e:	685b      	ldr	r3, [r3, #4]
20006170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20006174:	2b00      	cmp	r3, #0
20006176:	f000 80be 	beq.w	200062f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000617a:	4b66      	ldr	r3, [pc, #408]	@ (20006314 <HAL_GPIO_Init+0x324>)
2000617c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000617e:	4a65      	ldr	r2, [pc, #404]	@ (20006314 <HAL_GPIO_Init+0x324>)
20006180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20006184:	6453      	str	r3, [r2, #68]	@ 0x44
20006186:	4b63      	ldr	r3, [pc, #396]	@ (20006314 <HAL_GPIO_Init+0x324>)
20006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000618a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000618e:	60fb      	str	r3, [r7, #12]
20006190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
20006192:	4a61      	ldr	r2, [pc, #388]	@ (20006318 <HAL_GPIO_Init+0x328>)
20006194:	69fb      	ldr	r3, [r7, #28]
20006196:	089b      	lsrs	r3, r3, #2
20006198:	3302      	adds	r3, #2
2000619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000619e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
200061a0:	69fb      	ldr	r3, [r7, #28]
200061a2:	f003 0303 	and.w	r3, r3, #3
200061a6:	009b      	lsls	r3, r3, #2
200061a8:	220f      	movs	r2, #15
200061aa:	fa02 f303 	lsl.w	r3, r2, r3
200061ae:	43db      	mvns	r3, r3
200061b0:	69ba      	ldr	r2, [r7, #24]
200061b2:	4013      	ands	r3, r2
200061b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
200061b6:	687b      	ldr	r3, [r7, #4]
200061b8:	4a58      	ldr	r2, [pc, #352]	@ (2000631c <HAL_GPIO_Init+0x32c>)
200061ba:	4293      	cmp	r3, r2
200061bc:	d037      	beq.n	2000622e <HAL_GPIO_Init+0x23e>
200061be:	687b      	ldr	r3, [r7, #4]
200061c0:	4a57      	ldr	r2, [pc, #348]	@ (20006320 <HAL_GPIO_Init+0x330>)
200061c2:	4293      	cmp	r3, r2
200061c4:	d031      	beq.n	2000622a <HAL_GPIO_Init+0x23a>
200061c6:	687b      	ldr	r3, [r7, #4]
200061c8:	4a56      	ldr	r2, [pc, #344]	@ (20006324 <HAL_GPIO_Init+0x334>)
200061ca:	4293      	cmp	r3, r2
200061cc:	d02b      	beq.n	20006226 <HAL_GPIO_Init+0x236>
200061ce:	687b      	ldr	r3, [r7, #4]
200061d0:	4a55      	ldr	r2, [pc, #340]	@ (20006328 <HAL_GPIO_Init+0x338>)
200061d2:	4293      	cmp	r3, r2
200061d4:	d025      	beq.n	20006222 <HAL_GPIO_Init+0x232>
200061d6:	687b      	ldr	r3, [r7, #4]
200061d8:	4a54      	ldr	r2, [pc, #336]	@ (2000632c <HAL_GPIO_Init+0x33c>)
200061da:	4293      	cmp	r3, r2
200061dc:	d01f      	beq.n	2000621e <HAL_GPIO_Init+0x22e>
200061de:	687b      	ldr	r3, [r7, #4]
200061e0:	4a53      	ldr	r2, [pc, #332]	@ (20006330 <HAL_GPIO_Init+0x340>)
200061e2:	4293      	cmp	r3, r2
200061e4:	d019      	beq.n	2000621a <HAL_GPIO_Init+0x22a>
200061e6:	687b      	ldr	r3, [r7, #4]
200061e8:	4a52      	ldr	r2, [pc, #328]	@ (20006334 <HAL_GPIO_Init+0x344>)
200061ea:	4293      	cmp	r3, r2
200061ec:	d013      	beq.n	20006216 <HAL_GPIO_Init+0x226>
200061ee:	687b      	ldr	r3, [r7, #4]
200061f0:	4a51      	ldr	r2, [pc, #324]	@ (20006338 <HAL_GPIO_Init+0x348>)
200061f2:	4293      	cmp	r3, r2
200061f4:	d00d      	beq.n	20006212 <HAL_GPIO_Init+0x222>
200061f6:	687b      	ldr	r3, [r7, #4]
200061f8:	4a50      	ldr	r2, [pc, #320]	@ (2000633c <HAL_GPIO_Init+0x34c>)
200061fa:	4293      	cmp	r3, r2
200061fc:	d007      	beq.n	2000620e <HAL_GPIO_Init+0x21e>
200061fe:	687b      	ldr	r3, [r7, #4]
20006200:	4a4f      	ldr	r2, [pc, #316]	@ (20006340 <HAL_GPIO_Init+0x350>)
20006202:	4293      	cmp	r3, r2
20006204:	d101      	bne.n	2000620a <HAL_GPIO_Init+0x21a>
20006206:	2309      	movs	r3, #9
20006208:	e012      	b.n	20006230 <HAL_GPIO_Init+0x240>
2000620a:	230a      	movs	r3, #10
2000620c:	e010      	b.n	20006230 <HAL_GPIO_Init+0x240>
2000620e:	2308      	movs	r3, #8
20006210:	e00e      	b.n	20006230 <HAL_GPIO_Init+0x240>
20006212:	2307      	movs	r3, #7
20006214:	e00c      	b.n	20006230 <HAL_GPIO_Init+0x240>
20006216:	2306      	movs	r3, #6
20006218:	e00a      	b.n	20006230 <HAL_GPIO_Init+0x240>
2000621a:	2305      	movs	r3, #5
2000621c:	e008      	b.n	20006230 <HAL_GPIO_Init+0x240>
2000621e:	2304      	movs	r3, #4
20006220:	e006      	b.n	20006230 <HAL_GPIO_Init+0x240>
20006222:	2303      	movs	r3, #3
20006224:	e004      	b.n	20006230 <HAL_GPIO_Init+0x240>
20006226:	2302      	movs	r3, #2
20006228:	e002      	b.n	20006230 <HAL_GPIO_Init+0x240>
2000622a:	2301      	movs	r3, #1
2000622c:	e000      	b.n	20006230 <HAL_GPIO_Init+0x240>
2000622e:	2300      	movs	r3, #0
20006230:	69fa      	ldr	r2, [r7, #28]
20006232:	f002 0203 	and.w	r2, r2, #3
20006236:	0092      	lsls	r2, r2, #2
20006238:	4093      	lsls	r3, r2
2000623a:	69ba      	ldr	r2, [r7, #24]
2000623c:	4313      	orrs	r3, r2
2000623e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
20006240:	4935      	ldr	r1, [pc, #212]	@ (20006318 <HAL_GPIO_Init+0x328>)
20006242:	69fb      	ldr	r3, [r7, #28]
20006244:	089b      	lsrs	r3, r3, #2
20006246:	3302      	adds	r3, #2
20006248:	69ba      	ldr	r2, [r7, #24]
2000624a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000624e:	4b3d      	ldr	r3, [pc, #244]	@ (20006344 <HAL_GPIO_Init+0x354>)
20006250:	689b      	ldr	r3, [r3, #8]
20006252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20006254:	693b      	ldr	r3, [r7, #16]
20006256:	43db      	mvns	r3, r3
20006258:	69ba      	ldr	r2, [r7, #24]
2000625a:	4013      	ands	r3, r2
2000625c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
2000625e:	683b      	ldr	r3, [r7, #0]
20006260:	685b      	ldr	r3, [r3, #4]
20006262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20006266:	2b00      	cmp	r3, #0
20006268:	d003      	beq.n	20006272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
2000626a:	69ba      	ldr	r2, [r7, #24]
2000626c:	693b      	ldr	r3, [r7, #16]
2000626e:	4313      	orrs	r3, r2
20006270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20006272:	4a34      	ldr	r2, [pc, #208]	@ (20006344 <HAL_GPIO_Init+0x354>)
20006274:	69bb      	ldr	r3, [r7, #24]
20006276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20006278:	4b32      	ldr	r3, [pc, #200]	@ (20006344 <HAL_GPIO_Init+0x354>)
2000627a:	68db      	ldr	r3, [r3, #12]
2000627c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000627e:	693b      	ldr	r3, [r7, #16]
20006280:	43db      	mvns	r3, r3
20006282:	69ba      	ldr	r2, [r7, #24]
20006284:	4013      	ands	r3, r2
20006286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
20006288:	683b      	ldr	r3, [r7, #0]
2000628a:	685b      	ldr	r3, [r3, #4]
2000628c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20006290:	2b00      	cmp	r3, #0
20006292:	d003      	beq.n	2000629c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
20006294:	69ba      	ldr	r2, [r7, #24]
20006296:	693b      	ldr	r3, [r7, #16]
20006298:	4313      	orrs	r3, r2
2000629a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000629c:	4a29      	ldr	r2, [pc, #164]	@ (20006344 <HAL_GPIO_Init+0x354>)
2000629e:	69bb      	ldr	r3, [r7, #24]
200062a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
200062a2:	4b28      	ldr	r3, [pc, #160]	@ (20006344 <HAL_GPIO_Init+0x354>)
200062a4:	685b      	ldr	r3, [r3, #4]
200062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200062a8:	693b      	ldr	r3, [r7, #16]
200062aa:	43db      	mvns	r3, r3
200062ac:	69ba      	ldr	r2, [r7, #24]
200062ae:	4013      	ands	r3, r2
200062b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
200062b2:	683b      	ldr	r3, [r7, #0]
200062b4:	685b      	ldr	r3, [r3, #4]
200062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200062ba:	2b00      	cmp	r3, #0
200062bc:	d003      	beq.n	200062c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
200062be:	69ba      	ldr	r2, [r7, #24]
200062c0:	693b      	ldr	r3, [r7, #16]
200062c2:	4313      	orrs	r3, r2
200062c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
200062c6:	4a1f      	ldr	r2, [pc, #124]	@ (20006344 <HAL_GPIO_Init+0x354>)
200062c8:	69bb      	ldr	r3, [r7, #24]
200062ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200062cc:	4b1d      	ldr	r3, [pc, #116]	@ (20006344 <HAL_GPIO_Init+0x354>)
200062ce:	681b      	ldr	r3, [r3, #0]
200062d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200062d2:	693b      	ldr	r3, [r7, #16]
200062d4:	43db      	mvns	r3, r3
200062d6:	69ba      	ldr	r2, [r7, #24]
200062d8:	4013      	ands	r3, r2
200062da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
200062dc:	683b      	ldr	r3, [r7, #0]
200062de:	685b      	ldr	r3, [r3, #4]
200062e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200062e4:	2b00      	cmp	r3, #0
200062e6:	d003      	beq.n	200062f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
200062e8:	69ba      	ldr	r2, [r7, #24]
200062ea:	693b      	ldr	r3, [r7, #16]
200062ec:	4313      	orrs	r3, r2
200062ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
200062f0:	4a14      	ldr	r2, [pc, #80]	@ (20006344 <HAL_GPIO_Init+0x354>)
200062f2:	69bb      	ldr	r3, [r7, #24]
200062f4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
200062f6:	69fb      	ldr	r3, [r7, #28]
200062f8:	3301      	adds	r3, #1
200062fa:	61fb      	str	r3, [r7, #28]
200062fc:	69fb      	ldr	r3, [r7, #28]
200062fe:	2b0f      	cmp	r3, #15
20006300:	f67f ae86 	bls.w	20006010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
20006304:	bf00      	nop
20006306:	bf00      	nop
20006308:	3724      	adds	r7, #36	@ 0x24
2000630a:	46bd      	mov	sp, r7
2000630c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006310:	4770      	bx	lr
20006312:	bf00      	nop
20006314:	40023800 	.word	0x40023800
20006318:	40013800 	.word	0x40013800
2000631c:	40020000 	.word	0x40020000
20006320:	40020400 	.word	0x40020400
20006324:	40020800 	.word	0x40020800
20006328:	40020c00 	.word	0x40020c00
2000632c:	40021000 	.word	0x40021000
20006330:	40021400 	.word	0x40021400
20006334:	40021800 	.word	0x40021800
20006338:	40021c00 	.word	0x40021c00
2000633c:	40022000 	.word	0x40022000
20006340:	40022400 	.word	0x40022400
20006344:	40013c00 	.word	0x40013c00

20006348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
20006348:	b480      	push	{r7}
2000634a:	b085      	sub	sp, #20
2000634c:	af00      	add	r7, sp, #0
2000634e:	6078      	str	r0, [r7, #4]
20006350:	460b      	mov	r3, r1
20006352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20006354:	687b      	ldr	r3, [r7, #4]
20006356:	691a      	ldr	r2, [r3, #16]
20006358:	887b      	ldrh	r3, [r7, #2]
2000635a:	4013      	ands	r3, r2
2000635c:	2b00      	cmp	r3, #0
2000635e:	d002      	beq.n	20006366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20006360:	2301      	movs	r3, #1
20006362:	73fb      	strb	r3, [r7, #15]
20006364:	e001      	b.n	2000636a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20006366:	2300      	movs	r3, #0
20006368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2000636a:	7bfb      	ldrb	r3, [r7, #15]
}
2000636c:	4618      	mov	r0, r3
2000636e:	3714      	adds	r7, #20
20006370:	46bd      	mov	sp, r7
20006372:	f85d 7b04 	ldr.w	r7, [sp], #4
20006376:	4770      	bx	lr

20006378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20006378:	b480      	push	{r7}
2000637a:	b083      	sub	sp, #12
2000637c:	af00      	add	r7, sp, #0
2000637e:	6078      	str	r0, [r7, #4]
20006380:	460b      	mov	r3, r1
20006382:	807b      	strh	r3, [r7, #2]
20006384:	4613      	mov	r3, r2
20006386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
20006388:	787b      	ldrb	r3, [r7, #1]
2000638a:	2b00      	cmp	r3, #0
2000638c:	d003      	beq.n	20006396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000638e:	887a      	ldrh	r2, [r7, #2]
20006390:	687b      	ldr	r3, [r7, #4]
20006392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
20006394:	e003      	b.n	2000639e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
20006396:	887b      	ldrh	r3, [r7, #2]
20006398:	041a      	lsls	r2, r3, #16
2000639a:	687b      	ldr	r3, [r7, #4]
2000639c:	619a      	str	r2, [r3, #24]
}
2000639e:	bf00      	nop
200063a0:	370c      	adds	r7, #12
200063a2:	46bd      	mov	sp, r7
200063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200063a8:	4770      	bx	lr

200063aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
200063aa:	b580      	push	{r7, lr}
200063ac:	b086      	sub	sp, #24
200063ae:	af02      	add	r7, sp, #8
200063b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
200063b2:	687b      	ldr	r3, [r7, #4]
200063b4:	2b00      	cmp	r3, #0
200063b6:	d101      	bne.n	200063bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
200063b8:	2301      	movs	r3, #1
200063ba:	e108      	b.n	200065ce <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
200063bc:	687b      	ldr	r3, [r7, #4]
200063be:	681b      	ldr	r3, [r3, #0]
200063c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
200063c2:	687b      	ldr	r3, [r7, #4]
200063c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
200063c8:	b2db      	uxtb	r3, r3
200063ca:	2b00      	cmp	r3, #0
200063cc:	d106      	bne.n	200063dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
200063ce:	687b      	ldr	r3, [r7, #4]
200063d0:	2200      	movs	r2, #0
200063d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
200063d6:	6878      	ldr	r0, [r7, #4]
200063d8:	f006 fcaa 	bl	2000cd30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
200063dc:	687b      	ldr	r3, [r7, #4]
200063de:	2203      	movs	r2, #3
200063e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
200063e4:	68bb      	ldr	r3, [r7, #8]
200063e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
200063ea:	d102      	bne.n	200063f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
200063ec:	687b      	ldr	r3, [r7, #4]
200063ee:	2200      	movs	r2, #0
200063f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
200063f2:	687b      	ldr	r3, [r7, #4]
200063f4:	681b      	ldr	r3, [r3, #0]
200063f6:	4618      	mov	r0, r3
200063f8:	f003 f9b1 	bl	2000975e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
200063fc:	687b      	ldr	r3, [r7, #4]
200063fe:	6818      	ldr	r0, [r3, #0]
20006400:	687b      	ldr	r3, [r7, #4]
20006402:	7c1a      	ldrb	r2, [r3, #16]
20006404:	f88d 2000 	strb.w	r2, [sp]
20006408:	3304      	adds	r3, #4
2000640a:	cb0e      	ldmia	r3, {r1, r2, r3}
2000640c:	f003 f89a 	bl	20009544 <USB_CoreInit>
20006410:	4603      	mov	r3, r0
20006412:	2b00      	cmp	r3, #0
20006414:	d005      	beq.n	20006422 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20006416:	687b      	ldr	r3, [r7, #4]
20006418:	2202      	movs	r2, #2
2000641a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
2000641e:	2301      	movs	r3, #1
20006420:	e0d5      	b.n	200065ce <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
20006422:	687b      	ldr	r3, [r7, #4]
20006424:	681b      	ldr	r3, [r3, #0]
20006426:	2100      	movs	r1, #0
20006428:	4618      	mov	r0, r3
2000642a:	f003 f9a9 	bl	20009780 <USB_SetCurrentMode>
2000642e:	4603      	mov	r3, r0
20006430:	2b00      	cmp	r3, #0
20006432:	d005      	beq.n	20006440 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20006434:	687b      	ldr	r3, [r7, #4]
20006436:	2202      	movs	r2, #2
20006438:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
2000643c:	2301      	movs	r3, #1
2000643e:	e0c6      	b.n	200065ce <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20006440:	2300      	movs	r3, #0
20006442:	73fb      	strb	r3, [r7, #15]
20006444:	e04a      	b.n	200064dc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
20006446:	7bfa      	ldrb	r2, [r7, #15]
20006448:	6879      	ldr	r1, [r7, #4]
2000644a:	4613      	mov	r3, r2
2000644c:	00db      	lsls	r3, r3, #3
2000644e:	4413      	add	r3, r2
20006450:	009b      	lsls	r3, r3, #2
20006452:	440b      	add	r3, r1
20006454:	3315      	adds	r3, #21
20006456:	2201      	movs	r2, #1
20006458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
2000645a:	7bfa      	ldrb	r2, [r7, #15]
2000645c:	6879      	ldr	r1, [r7, #4]
2000645e:	4613      	mov	r3, r2
20006460:	00db      	lsls	r3, r3, #3
20006462:	4413      	add	r3, r2
20006464:	009b      	lsls	r3, r3, #2
20006466:	440b      	add	r3, r1
20006468:	3314      	adds	r3, #20
2000646a:	7bfa      	ldrb	r2, [r7, #15]
2000646c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
2000646e:	7bfa      	ldrb	r2, [r7, #15]
20006470:	7bfb      	ldrb	r3, [r7, #15]
20006472:	b298      	uxth	r0, r3
20006474:	6879      	ldr	r1, [r7, #4]
20006476:	4613      	mov	r3, r2
20006478:	00db      	lsls	r3, r3, #3
2000647a:	4413      	add	r3, r2
2000647c:	009b      	lsls	r3, r3, #2
2000647e:	440b      	add	r3, r1
20006480:	332e      	adds	r3, #46	@ 0x2e
20006482:	4602      	mov	r2, r0
20006484:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
20006486:	7bfa      	ldrb	r2, [r7, #15]
20006488:	6879      	ldr	r1, [r7, #4]
2000648a:	4613      	mov	r3, r2
2000648c:	00db      	lsls	r3, r3, #3
2000648e:	4413      	add	r3, r2
20006490:	009b      	lsls	r3, r3, #2
20006492:	440b      	add	r3, r1
20006494:	3318      	adds	r3, #24
20006496:	2200      	movs	r2, #0
20006498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
2000649a:	7bfa      	ldrb	r2, [r7, #15]
2000649c:	6879      	ldr	r1, [r7, #4]
2000649e:	4613      	mov	r3, r2
200064a0:	00db      	lsls	r3, r3, #3
200064a2:	4413      	add	r3, r2
200064a4:	009b      	lsls	r3, r3, #2
200064a6:	440b      	add	r3, r1
200064a8:	331c      	adds	r3, #28
200064aa:	2200      	movs	r2, #0
200064ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
200064ae:	7bfa      	ldrb	r2, [r7, #15]
200064b0:	6879      	ldr	r1, [r7, #4]
200064b2:	4613      	mov	r3, r2
200064b4:	00db      	lsls	r3, r3, #3
200064b6:	4413      	add	r3, r2
200064b8:	009b      	lsls	r3, r3, #2
200064ba:	440b      	add	r3, r1
200064bc:	3320      	adds	r3, #32
200064be:	2200      	movs	r2, #0
200064c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
200064c2:	7bfa      	ldrb	r2, [r7, #15]
200064c4:	6879      	ldr	r1, [r7, #4]
200064c6:	4613      	mov	r3, r2
200064c8:	00db      	lsls	r3, r3, #3
200064ca:	4413      	add	r3, r2
200064cc:	009b      	lsls	r3, r3, #2
200064ce:	440b      	add	r3, r1
200064d0:	3324      	adds	r3, #36	@ 0x24
200064d2:	2200      	movs	r2, #0
200064d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200064d6:	7bfb      	ldrb	r3, [r7, #15]
200064d8:	3301      	adds	r3, #1
200064da:	73fb      	strb	r3, [r7, #15]
200064dc:	687b      	ldr	r3, [r7, #4]
200064de:	791b      	ldrb	r3, [r3, #4]
200064e0:	7bfa      	ldrb	r2, [r7, #15]
200064e2:	429a      	cmp	r2, r3
200064e4:	d3af      	bcc.n	20006446 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200064e6:	2300      	movs	r3, #0
200064e8:	73fb      	strb	r3, [r7, #15]
200064ea:	e044      	b.n	20006576 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
200064ec:	7bfa      	ldrb	r2, [r7, #15]
200064ee:	6879      	ldr	r1, [r7, #4]
200064f0:	4613      	mov	r3, r2
200064f2:	00db      	lsls	r3, r3, #3
200064f4:	4413      	add	r3, r2
200064f6:	009b      	lsls	r3, r3, #2
200064f8:	440b      	add	r3, r1
200064fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
200064fe:	2200      	movs	r2, #0
20006500:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
20006502:	7bfa      	ldrb	r2, [r7, #15]
20006504:	6879      	ldr	r1, [r7, #4]
20006506:	4613      	mov	r3, r2
20006508:	00db      	lsls	r3, r3, #3
2000650a:	4413      	add	r3, r2
2000650c:	009b      	lsls	r3, r3, #2
2000650e:	440b      	add	r3, r1
20006510:	f503 7315 	add.w	r3, r3, #596	@ 0x254
20006514:	7bfa      	ldrb	r2, [r7, #15]
20006516:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
20006518:	7bfa      	ldrb	r2, [r7, #15]
2000651a:	6879      	ldr	r1, [r7, #4]
2000651c:	4613      	mov	r3, r2
2000651e:	00db      	lsls	r3, r3, #3
20006520:	4413      	add	r3, r2
20006522:	009b      	lsls	r3, r3, #2
20006524:	440b      	add	r3, r1
20006526:	f503 7316 	add.w	r3, r3, #600	@ 0x258
2000652a:	2200      	movs	r2, #0
2000652c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
2000652e:	7bfa      	ldrb	r2, [r7, #15]
20006530:	6879      	ldr	r1, [r7, #4]
20006532:	4613      	mov	r3, r2
20006534:	00db      	lsls	r3, r3, #3
20006536:	4413      	add	r3, r2
20006538:	009b      	lsls	r3, r3, #2
2000653a:	440b      	add	r3, r1
2000653c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
20006540:	2200      	movs	r2, #0
20006542:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
20006544:	7bfa      	ldrb	r2, [r7, #15]
20006546:	6879      	ldr	r1, [r7, #4]
20006548:	4613      	mov	r3, r2
2000654a:	00db      	lsls	r3, r3, #3
2000654c:	4413      	add	r3, r2
2000654e:	009b      	lsls	r3, r3, #2
20006550:	440b      	add	r3, r1
20006552:	f503 7318 	add.w	r3, r3, #608	@ 0x260
20006556:	2200      	movs	r2, #0
20006558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
2000655a:	7bfa      	ldrb	r2, [r7, #15]
2000655c:	6879      	ldr	r1, [r7, #4]
2000655e:	4613      	mov	r3, r2
20006560:	00db      	lsls	r3, r3, #3
20006562:	4413      	add	r3, r2
20006564:	009b      	lsls	r3, r3, #2
20006566:	440b      	add	r3, r1
20006568:	f503 7319 	add.w	r3, r3, #612	@ 0x264
2000656c:	2200      	movs	r2, #0
2000656e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20006570:	7bfb      	ldrb	r3, [r7, #15]
20006572:	3301      	adds	r3, #1
20006574:	73fb      	strb	r3, [r7, #15]
20006576:	687b      	ldr	r3, [r7, #4]
20006578:	791b      	ldrb	r3, [r3, #4]
2000657a:	7bfa      	ldrb	r2, [r7, #15]
2000657c:	429a      	cmp	r2, r3
2000657e:	d3b5      	bcc.n	200064ec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20006580:	687b      	ldr	r3, [r7, #4]
20006582:	6818      	ldr	r0, [r3, #0]
20006584:	687b      	ldr	r3, [r7, #4]
20006586:	7c1a      	ldrb	r2, [r3, #16]
20006588:	f88d 2000 	strb.w	r2, [sp]
2000658c:	3304      	adds	r3, #4
2000658e:	cb0e      	ldmia	r3, {r1, r2, r3}
20006590:	f003 f942 	bl	20009818 <USB_DevInit>
20006594:	4603      	mov	r3, r0
20006596:	2b00      	cmp	r3, #0
20006598:	d005      	beq.n	200065a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
2000659a:	687b      	ldr	r3, [r7, #4]
2000659c:	2202      	movs	r2, #2
2000659e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
200065a2:	2301      	movs	r3, #1
200065a4:	e013      	b.n	200065ce <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
200065a6:	687b      	ldr	r3, [r7, #4]
200065a8:	2200      	movs	r2, #0
200065aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
200065ac:	687b      	ldr	r3, [r7, #4]
200065ae:	2201      	movs	r2, #1
200065b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
200065b4:	687b      	ldr	r3, [r7, #4]
200065b6:	7b1b      	ldrb	r3, [r3, #12]
200065b8:	2b01      	cmp	r3, #1
200065ba:	d102      	bne.n	200065c2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
200065bc:	6878      	ldr	r0, [r7, #4]
200065be:	f001 f95b 	bl	20007878 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
200065c2:	687b      	ldr	r3, [r7, #4]
200065c4:	681b      	ldr	r3, [r3, #0]
200065c6:	4618      	mov	r0, r3
200065c8:	f004 f985 	bl	2000a8d6 <USB_DevDisconnect>

  return HAL_OK;
200065cc:	2300      	movs	r3, #0
}
200065ce:	4618      	mov	r0, r3
200065d0:	3710      	adds	r7, #16
200065d2:	46bd      	mov	sp, r7
200065d4:	bd80      	pop	{r7, pc}

200065d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
200065d6:	b580      	push	{r7, lr}
200065d8:	b082      	sub	sp, #8
200065da:	af00      	add	r7, sp, #0
200065dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
200065de:	687b      	ldr	r3, [r7, #4]
200065e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200065e4:	2b01      	cmp	r3, #1
200065e6:	d101      	bne.n	200065ec <HAL_PCD_Start+0x16>
200065e8:	2302      	movs	r3, #2
200065ea:	e012      	b.n	20006612 <HAL_PCD_Start+0x3c>
200065ec:	687b      	ldr	r3, [r7, #4]
200065ee:	2201      	movs	r2, #1
200065f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
200065f4:	687b      	ldr	r3, [r7, #4]
200065f6:	681b      	ldr	r3, [r3, #0]
200065f8:	4618      	mov	r0, r3
200065fa:	f003 f89f 	bl	2000973c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
200065fe:	687b      	ldr	r3, [r7, #4]
20006600:	681b      	ldr	r3, [r3, #0]
20006602:	4618      	mov	r0, r3
20006604:	f004 f946 	bl	2000a894 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
20006608:	687b      	ldr	r3, [r7, #4]
2000660a:	2200      	movs	r2, #0
2000660c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20006610:	2300      	movs	r3, #0
}
20006612:	4618      	mov	r0, r3
20006614:	3708      	adds	r7, #8
20006616:	46bd      	mov	sp, r7
20006618:	bd80      	pop	{r7, pc}

2000661a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
2000661a:	b590      	push	{r4, r7, lr}
2000661c:	b08d      	sub	sp, #52	@ 0x34
2000661e:	af00      	add	r7, sp, #0
20006620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20006622:	687b      	ldr	r3, [r7, #4]
20006624:	681b      	ldr	r3, [r3, #0]
20006626:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006628:	6a3b      	ldr	r3, [r7, #32]
2000662a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
2000662c:	687b      	ldr	r3, [r7, #4]
2000662e:	681b      	ldr	r3, [r3, #0]
20006630:	4618      	mov	r0, r3
20006632:	f004 fa04 	bl	2000aa3e <USB_GetMode>
20006636:	4603      	mov	r3, r0
20006638:	2b00      	cmp	r3, #0
2000663a:	f040 84b9 	bne.w	20006fb0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
2000663e:	687b      	ldr	r3, [r7, #4]
20006640:	681b      	ldr	r3, [r3, #0]
20006642:	4618      	mov	r0, r3
20006644:	f004 f968 	bl	2000a918 <USB_ReadInterrupts>
20006648:	4603      	mov	r3, r0
2000664a:	2b00      	cmp	r3, #0
2000664c:	f000 84af 	beq.w	20006fae <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
20006650:	69fb      	ldr	r3, [r7, #28]
20006652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006656:	689b      	ldr	r3, [r3, #8]
20006658:	0a1b      	lsrs	r3, r3, #8
2000665a:	f3c3 020d 	ubfx	r2, r3, #0, #14
2000665e:	687b      	ldr	r3, [r7, #4]
20006660:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
20006664:	687b      	ldr	r3, [r7, #4]
20006666:	681b      	ldr	r3, [r3, #0]
20006668:	4618      	mov	r0, r3
2000666a:	f004 f955 	bl	2000a918 <USB_ReadInterrupts>
2000666e:	4603      	mov	r3, r0
20006670:	f003 0302 	and.w	r3, r3, #2
20006674:	2b02      	cmp	r3, #2
20006676:	d107      	bne.n	20006688 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
20006678:	687b      	ldr	r3, [r7, #4]
2000667a:	681b      	ldr	r3, [r3, #0]
2000667c:	695a      	ldr	r2, [r3, #20]
2000667e:	687b      	ldr	r3, [r7, #4]
20006680:	681b      	ldr	r3, [r3, #0]
20006682:	f002 0202 	and.w	r2, r2, #2
20006686:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
20006688:	687b      	ldr	r3, [r7, #4]
2000668a:	681b      	ldr	r3, [r3, #0]
2000668c:	4618      	mov	r0, r3
2000668e:	f004 f943 	bl	2000a918 <USB_ReadInterrupts>
20006692:	4603      	mov	r3, r0
20006694:	f003 0310 	and.w	r3, r3, #16
20006698:	2b10      	cmp	r3, #16
2000669a:	d161      	bne.n	20006760 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
2000669c:	687b      	ldr	r3, [r7, #4]
2000669e:	681b      	ldr	r3, [r3, #0]
200066a0:	699a      	ldr	r2, [r3, #24]
200066a2:	687b      	ldr	r3, [r7, #4]
200066a4:	681b      	ldr	r3, [r3, #0]
200066a6:	f022 0210 	bic.w	r2, r2, #16
200066aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
200066ac:	6a3b      	ldr	r3, [r7, #32]
200066ae:	6a1b      	ldr	r3, [r3, #32]
200066b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
200066b2:	69bb      	ldr	r3, [r7, #24]
200066b4:	f003 020f 	and.w	r2, r3, #15
200066b8:	4613      	mov	r3, r2
200066ba:	00db      	lsls	r3, r3, #3
200066bc:	4413      	add	r3, r2
200066be:	009b      	lsls	r3, r3, #2
200066c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200066c4:	687a      	ldr	r2, [r7, #4]
200066c6:	4413      	add	r3, r2
200066c8:	3304      	adds	r3, #4
200066ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
200066cc:	69bb      	ldr	r3, [r7, #24]
200066ce:	0c5b      	lsrs	r3, r3, #17
200066d0:	f003 030f 	and.w	r3, r3, #15
200066d4:	2b02      	cmp	r3, #2
200066d6:	d124      	bne.n	20006722 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
200066d8:	69ba      	ldr	r2, [r7, #24]
200066da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
200066de:	4013      	ands	r3, r2
200066e0:	2b00      	cmp	r3, #0
200066e2:	d035      	beq.n	20006750 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
200066e4:	697b      	ldr	r3, [r7, #20]
200066e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
200066e8:	69bb      	ldr	r3, [r7, #24]
200066ea:	091b      	lsrs	r3, r3, #4
200066ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
200066ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
200066f2:	b29b      	uxth	r3, r3
200066f4:	461a      	mov	r2, r3
200066f6:	6a38      	ldr	r0, [r7, #32]
200066f8:	f003 ff7a 	bl	2000a5f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
200066fc:	697b      	ldr	r3, [r7, #20]
200066fe:	68da      	ldr	r2, [r3, #12]
20006700:	69bb      	ldr	r3, [r7, #24]
20006702:	091b      	lsrs	r3, r3, #4
20006704:	f3c3 030a 	ubfx	r3, r3, #0, #11
20006708:	441a      	add	r2, r3
2000670a:	697b      	ldr	r3, [r7, #20]
2000670c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
2000670e:	697b      	ldr	r3, [r7, #20]
20006710:	695a      	ldr	r2, [r3, #20]
20006712:	69bb      	ldr	r3, [r7, #24]
20006714:	091b      	lsrs	r3, r3, #4
20006716:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000671a:	441a      	add	r2, r3
2000671c:	697b      	ldr	r3, [r7, #20]
2000671e:	615a      	str	r2, [r3, #20]
20006720:	e016      	b.n	20006750 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
20006722:	69bb      	ldr	r3, [r7, #24]
20006724:	0c5b      	lsrs	r3, r3, #17
20006726:	f003 030f 	and.w	r3, r3, #15
2000672a:	2b06      	cmp	r3, #6
2000672c:	d110      	bne.n	20006750 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
2000672e:	687b      	ldr	r3, [r7, #4]
20006730:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20006734:	2208      	movs	r2, #8
20006736:	4619      	mov	r1, r3
20006738:	6a38      	ldr	r0, [r7, #32]
2000673a:	f003 ff59 	bl	2000a5f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
2000673e:	697b      	ldr	r3, [r7, #20]
20006740:	695a      	ldr	r2, [r3, #20]
20006742:	69bb      	ldr	r3, [r7, #24]
20006744:	091b      	lsrs	r3, r3, #4
20006746:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000674a:	441a      	add	r2, r3
2000674c:	697b      	ldr	r3, [r7, #20]
2000674e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
20006750:	687b      	ldr	r3, [r7, #4]
20006752:	681b      	ldr	r3, [r3, #0]
20006754:	699a      	ldr	r2, [r3, #24]
20006756:	687b      	ldr	r3, [r7, #4]
20006758:	681b      	ldr	r3, [r3, #0]
2000675a:	f042 0210 	orr.w	r2, r2, #16
2000675e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
20006760:	687b      	ldr	r3, [r7, #4]
20006762:	681b      	ldr	r3, [r3, #0]
20006764:	4618      	mov	r0, r3
20006766:	f004 f8d7 	bl	2000a918 <USB_ReadInterrupts>
2000676a:	4603      	mov	r3, r0
2000676c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20006770:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
20006774:	f040 80a7 	bne.w	200068c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
20006778:	2300      	movs	r3, #0
2000677a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
2000677c:	687b      	ldr	r3, [r7, #4]
2000677e:	681b      	ldr	r3, [r3, #0]
20006780:	4618      	mov	r0, r3
20006782:	f004 f8dc 	bl	2000a93e <USB_ReadDevAllOutEpInterrupt>
20006786:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
20006788:	e099      	b.n	200068be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
2000678a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000678c:	f003 0301 	and.w	r3, r3, #1
20006790:	2b00      	cmp	r3, #0
20006792:	f000 808e 	beq.w	200068b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
20006796:	687b      	ldr	r3, [r7, #4]
20006798:	681b      	ldr	r3, [r3, #0]
2000679a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000679c:	b2d2      	uxtb	r2, r2
2000679e:	4611      	mov	r1, r2
200067a0:	4618      	mov	r0, r3
200067a2:	f004 f900 	bl	2000a9a6 <USB_ReadDevOutEPInterrupt>
200067a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
200067a8:	693b      	ldr	r3, [r7, #16]
200067aa:	f003 0301 	and.w	r3, r3, #1
200067ae:	2b00      	cmp	r3, #0
200067b0:	d00c      	beq.n	200067cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
200067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200067b4:	015a      	lsls	r2, r3, #5
200067b6:	69fb      	ldr	r3, [r7, #28]
200067b8:	4413      	add	r3, r2
200067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200067be:	461a      	mov	r2, r3
200067c0:	2301      	movs	r3, #1
200067c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
200067c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200067c6:	6878      	ldr	r0, [r7, #4]
200067c8:	f000 fed0 	bl	2000756c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
200067cc:	693b      	ldr	r3, [r7, #16]
200067ce:	f003 0308 	and.w	r3, r3, #8
200067d2:	2b00      	cmp	r3, #0
200067d4:	d00c      	beq.n	200067f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
200067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200067d8:	015a      	lsls	r2, r3, #5
200067da:	69fb      	ldr	r3, [r7, #28]
200067dc:	4413      	add	r3, r2
200067de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200067e2:	461a      	mov	r2, r3
200067e4:	2308      	movs	r3, #8
200067e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
200067e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200067ea:	6878      	ldr	r0, [r7, #4]
200067ec:	f000 ffa6 	bl	2000773c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
200067f0:	693b      	ldr	r3, [r7, #16]
200067f2:	f003 0310 	and.w	r3, r3, #16
200067f6:	2b00      	cmp	r3, #0
200067f8:	d008      	beq.n	2000680c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
200067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200067fc:	015a      	lsls	r2, r3, #5
200067fe:	69fb      	ldr	r3, [r7, #28]
20006800:	4413      	add	r3, r2
20006802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006806:	461a      	mov	r2, r3
20006808:	2310      	movs	r3, #16
2000680a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
2000680c:	693b      	ldr	r3, [r7, #16]
2000680e:	f003 0302 	and.w	r3, r3, #2
20006812:	2b00      	cmp	r3, #0
20006814:	d030      	beq.n	20006878 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
20006816:	6a3b      	ldr	r3, [r7, #32]
20006818:	695b      	ldr	r3, [r3, #20]
2000681a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000681e:	2b80      	cmp	r3, #128	@ 0x80
20006820:	d109      	bne.n	20006836 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
20006822:	69fb      	ldr	r3, [r7, #28]
20006824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006828:	685b      	ldr	r3, [r3, #4]
2000682a:	69fa      	ldr	r2, [r7, #28]
2000682c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006830:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
20006834:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
20006836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006838:	4613      	mov	r3, r2
2000683a:	00db      	lsls	r3, r3, #3
2000683c:	4413      	add	r3, r2
2000683e:	009b      	lsls	r3, r3, #2
20006840:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20006844:	687a      	ldr	r2, [r7, #4]
20006846:	4413      	add	r3, r2
20006848:	3304      	adds	r3, #4
2000684a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
2000684c:	697b      	ldr	r3, [r7, #20]
2000684e:	78db      	ldrb	r3, [r3, #3]
20006850:	2b01      	cmp	r3, #1
20006852:	d108      	bne.n	20006866 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
20006854:	697b      	ldr	r3, [r7, #20]
20006856:	2200      	movs	r2, #0
20006858:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
2000685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000685c:	b2db      	uxtb	r3, r3
2000685e:	4619      	mov	r1, r3
20006860:	6878      	ldr	r0, [r7, #4]
20006862:	f006 fb99 	bl	2000cf98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
20006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006868:	015a      	lsls	r2, r3, #5
2000686a:	69fb      	ldr	r3, [r7, #28]
2000686c:	4413      	add	r3, r2
2000686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006872:	461a      	mov	r2, r3
20006874:	2302      	movs	r3, #2
20006876:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
20006878:	693b      	ldr	r3, [r7, #16]
2000687a:	f003 0320 	and.w	r3, r3, #32
2000687e:	2b00      	cmp	r3, #0
20006880:	d008      	beq.n	20006894 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006884:	015a      	lsls	r2, r3, #5
20006886:	69fb      	ldr	r3, [r7, #28]
20006888:	4413      	add	r3, r2
2000688a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000688e:	461a      	mov	r2, r3
20006890:	2320      	movs	r3, #32
20006892:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
20006894:	693b      	ldr	r3, [r7, #16]
20006896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2000689a:	2b00      	cmp	r3, #0
2000689c:	d009      	beq.n	200068b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
2000689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200068a0:	015a      	lsls	r2, r3, #5
200068a2:	69fb      	ldr	r3, [r7, #28]
200068a4:	4413      	add	r3, r2
200068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200068aa:	461a      	mov	r2, r3
200068ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
200068b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
200068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200068b4:	3301      	adds	r3, #1
200068b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
200068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200068ba:	085b      	lsrs	r3, r3, #1
200068bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
200068be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200068c0:	2b00      	cmp	r3, #0
200068c2:	f47f af62 	bne.w	2000678a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
200068c6:	687b      	ldr	r3, [r7, #4]
200068c8:	681b      	ldr	r3, [r3, #0]
200068ca:	4618      	mov	r0, r3
200068cc:	f004 f824 	bl	2000a918 <USB_ReadInterrupts>
200068d0:	4603      	mov	r3, r0
200068d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
200068d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
200068da:	f040 80db 	bne.w	20006a94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
200068de:	687b      	ldr	r3, [r7, #4]
200068e0:	681b      	ldr	r3, [r3, #0]
200068e2:	4618      	mov	r0, r3
200068e4:	f004 f845 	bl	2000a972 <USB_ReadDevAllInEpInterrupt>
200068e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
200068ea:	2300      	movs	r3, #0
200068ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
200068ee:	e0cd      	b.n	20006a8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
200068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200068f2:	f003 0301 	and.w	r3, r3, #1
200068f6:	2b00      	cmp	r3, #0
200068f8:	f000 80c2 	beq.w	20006a80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
200068fc:	687b      	ldr	r3, [r7, #4]
200068fe:	681b      	ldr	r3, [r3, #0]
20006900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006902:	b2d2      	uxtb	r2, r2
20006904:	4611      	mov	r1, r2
20006906:	4618      	mov	r0, r3
20006908:	f004 f86b 	bl	2000a9e2 <USB_ReadDevInEPInterrupt>
2000690c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
2000690e:	693b      	ldr	r3, [r7, #16]
20006910:	f003 0301 	and.w	r3, r3, #1
20006914:	2b00      	cmp	r3, #0
20006916:	d057      	beq.n	200069c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
20006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000691a:	f003 030f 	and.w	r3, r3, #15
2000691e:	2201      	movs	r2, #1
20006920:	fa02 f303 	lsl.w	r3, r2, r3
20006924:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
20006926:	69fb      	ldr	r3, [r7, #28]
20006928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000692c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2000692e:	68fb      	ldr	r3, [r7, #12]
20006930:	43db      	mvns	r3, r3
20006932:	69f9      	ldr	r1, [r7, #28]
20006934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20006938:	4013      	ands	r3, r2
2000693a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
2000693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000693e:	015a      	lsls	r2, r3, #5
20006940:	69fb      	ldr	r3, [r7, #28]
20006942:	4413      	add	r3, r2
20006944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006948:	461a      	mov	r2, r3
2000694a:	2301      	movs	r3, #1
2000694c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
2000694e:	687b      	ldr	r3, [r7, #4]
20006950:	799b      	ldrb	r3, [r3, #6]
20006952:	2b01      	cmp	r3, #1
20006954:	d132      	bne.n	200069bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
20006956:	6879      	ldr	r1, [r7, #4]
20006958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000695a:	4613      	mov	r3, r2
2000695c:	00db      	lsls	r3, r3, #3
2000695e:	4413      	add	r3, r2
20006960:	009b      	lsls	r3, r3, #2
20006962:	440b      	add	r3, r1
20006964:	3320      	adds	r3, #32
20006966:	6819      	ldr	r1, [r3, #0]
20006968:	6878      	ldr	r0, [r7, #4]
2000696a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000696c:	4613      	mov	r3, r2
2000696e:	00db      	lsls	r3, r3, #3
20006970:	4413      	add	r3, r2
20006972:	009b      	lsls	r3, r3, #2
20006974:	4403      	add	r3, r0
20006976:	331c      	adds	r3, #28
20006978:	681b      	ldr	r3, [r3, #0]
2000697a:	4419      	add	r1, r3
2000697c:	6878      	ldr	r0, [r7, #4]
2000697e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006980:	4613      	mov	r3, r2
20006982:	00db      	lsls	r3, r3, #3
20006984:	4413      	add	r3, r2
20006986:	009b      	lsls	r3, r3, #2
20006988:	4403      	add	r3, r0
2000698a:	3320      	adds	r3, #32
2000698c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
2000698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006990:	2b00      	cmp	r3, #0
20006992:	d113      	bne.n	200069bc <HAL_PCD_IRQHandler+0x3a2>
20006994:	6879      	ldr	r1, [r7, #4]
20006996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006998:	4613      	mov	r3, r2
2000699a:	00db      	lsls	r3, r3, #3
2000699c:	4413      	add	r3, r2
2000699e:	009b      	lsls	r3, r3, #2
200069a0:	440b      	add	r3, r1
200069a2:	3324      	adds	r3, #36	@ 0x24
200069a4:	681b      	ldr	r3, [r3, #0]
200069a6:	2b00      	cmp	r3, #0
200069a8:	d108      	bne.n	200069bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
200069aa:	687b      	ldr	r3, [r7, #4]
200069ac:	6818      	ldr	r0, [r3, #0]
200069ae:	687b      	ldr	r3, [r7, #4]
200069b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
200069b4:	461a      	mov	r2, r3
200069b6:	2101      	movs	r1, #1
200069b8:	f004 f874 	bl	2000aaa4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
200069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200069be:	b2db      	uxtb	r3, r3
200069c0:	4619      	mov	r1, r3
200069c2:	6878      	ldr	r0, [r7, #4]
200069c4:	f006 fa63 	bl	2000ce8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
200069c8:	693b      	ldr	r3, [r7, #16]
200069ca:	f003 0308 	and.w	r3, r3, #8
200069ce:	2b00      	cmp	r3, #0
200069d0:	d008      	beq.n	200069e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
200069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200069d4:	015a      	lsls	r2, r3, #5
200069d6:	69fb      	ldr	r3, [r7, #28]
200069d8:	4413      	add	r3, r2
200069da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200069de:	461a      	mov	r2, r3
200069e0:	2308      	movs	r3, #8
200069e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
200069e4:	693b      	ldr	r3, [r7, #16]
200069e6:	f003 0310 	and.w	r3, r3, #16
200069ea:	2b00      	cmp	r3, #0
200069ec:	d008      	beq.n	20006a00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
200069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200069f0:	015a      	lsls	r2, r3, #5
200069f2:	69fb      	ldr	r3, [r7, #28]
200069f4:	4413      	add	r3, r2
200069f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200069fa:	461a      	mov	r2, r3
200069fc:	2310      	movs	r3, #16
200069fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
20006a00:	693b      	ldr	r3, [r7, #16]
20006a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20006a06:	2b00      	cmp	r3, #0
20006a08:	d008      	beq.n	20006a1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
20006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006a0c:	015a      	lsls	r2, r3, #5
20006a0e:	69fb      	ldr	r3, [r7, #28]
20006a10:	4413      	add	r3, r2
20006a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006a16:	461a      	mov	r2, r3
20006a18:	2340      	movs	r3, #64	@ 0x40
20006a1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
20006a1c:	693b      	ldr	r3, [r7, #16]
20006a1e:	f003 0302 	and.w	r3, r3, #2
20006a22:	2b00      	cmp	r3, #0
20006a24:	d023      	beq.n	20006a6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
20006a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20006a28:	6a38      	ldr	r0, [r7, #32]
20006a2a:	f003 f853 	bl	20009ad4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
20006a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006a30:	4613      	mov	r3, r2
20006a32:	00db      	lsls	r3, r3, #3
20006a34:	4413      	add	r3, r2
20006a36:	009b      	lsls	r3, r3, #2
20006a38:	3310      	adds	r3, #16
20006a3a:	687a      	ldr	r2, [r7, #4]
20006a3c:	4413      	add	r3, r2
20006a3e:	3304      	adds	r3, #4
20006a40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
20006a42:	697b      	ldr	r3, [r7, #20]
20006a44:	78db      	ldrb	r3, [r3, #3]
20006a46:	2b01      	cmp	r3, #1
20006a48:	d108      	bne.n	20006a5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
20006a4a:	697b      	ldr	r3, [r7, #20]
20006a4c:	2200      	movs	r2, #0
20006a4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
20006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006a52:	b2db      	uxtb	r3, r3
20006a54:	4619      	mov	r1, r3
20006a56:	6878      	ldr	r0, [r7, #4]
20006a58:	f006 fab0 	bl	2000cfbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
20006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006a5e:	015a      	lsls	r2, r3, #5
20006a60:	69fb      	ldr	r3, [r7, #28]
20006a62:	4413      	add	r3, r2
20006a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006a68:	461a      	mov	r2, r3
20006a6a:	2302      	movs	r3, #2
20006a6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
20006a6e:	693b      	ldr	r3, [r7, #16]
20006a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006a74:	2b00      	cmp	r3, #0
20006a76:	d003      	beq.n	20006a80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
20006a78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20006a7a:	6878      	ldr	r0, [r7, #4]
20006a7c:	f000 fcea 	bl	20007454 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
20006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006a82:	3301      	adds	r3, #1
20006a84:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
20006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20006a88:	085b      	lsrs	r3, r3, #1
20006a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
20006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20006a8e:	2b00      	cmp	r3, #0
20006a90:	f47f af2e 	bne.w	200068f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
20006a94:	687b      	ldr	r3, [r7, #4]
20006a96:	681b      	ldr	r3, [r3, #0]
20006a98:	4618      	mov	r0, r3
20006a9a:	f003 ff3d 	bl	2000a918 <USB_ReadInterrupts>
20006a9e:	4603      	mov	r3, r0
20006aa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20006aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20006aa8:	d122      	bne.n	20006af0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
20006aaa:	69fb      	ldr	r3, [r7, #28]
20006aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006ab0:	685b      	ldr	r3, [r3, #4]
20006ab2:	69fa      	ldr	r2, [r7, #28]
20006ab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006ab8:	f023 0301 	bic.w	r3, r3, #1
20006abc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
20006abe:	687b      	ldr	r3, [r7, #4]
20006ac0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
20006ac4:	2b01      	cmp	r3, #1
20006ac6:	d108      	bne.n	20006ada <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
20006ac8:	687b      	ldr	r3, [r7, #4]
20006aca:	2200      	movs	r2, #0
20006acc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
20006ad0:	2100      	movs	r1, #0
20006ad2:	6878      	ldr	r0, [r7, #4]
20006ad4:	f006 fc2a 	bl	2000d32c <HAL_PCDEx_LPM_Callback>
20006ad8:	e002      	b.n	20006ae0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
20006ada:	6878      	ldr	r0, [r7, #4]
20006adc:	f006 fa4e 	bl	2000cf7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
20006ae0:	687b      	ldr	r3, [r7, #4]
20006ae2:	681b      	ldr	r3, [r3, #0]
20006ae4:	695a      	ldr	r2, [r3, #20]
20006ae6:	687b      	ldr	r3, [r7, #4]
20006ae8:	681b      	ldr	r3, [r3, #0]
20006aea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
20006aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
20006af0:	687b      	ldr	r3, [r7, #4]
20006af2:	681b      	ldr	r3, [r3, #0]
20006af4:	4618      	mov	r0, r3
20006af6:	f003 ff0f 	bl	2000a918 <USB_ReadInterrupts>
20006afa:	4603      	mov	r3, r0
20006afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20006b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20006b04:	d112      	bne.n	20006b2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
20006b06:	69fb      	ldr	r3, [r7, #28]
20006b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006b0c:	689b      	ldr	r3, [r3, #8]
20006b0e:	f003 0301 	and.w	r3, r3, #1
20006b12:	2b01      	cmp	r3, #1
20006b14:	d102      	bne.n	20006b1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
20006b16:	6878      	ldr	r0, [r7, #4]
20006b18:	f006 fa0a 	bl	2000cf30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
20006b1c:	687b      	ldr	r3, [r7, #4]
20006b1e:	681b      	ldr	r3, [r3, #0]
20006b20:	695a      	ldr	r2, [r3, #20]
20006b22:	687b      	ldr	r3, [r7, #4]
20006b24:	681b      	ldr	r3, [r3, #0]
20006b26:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
20006b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
20006b2c:	687b      	ldr	r3, [r7, #4]
20006b2e:	681b      	ldr	r3, [r3, #0]
20006b30:	4618      	mov	r0, r3
20006b32:	f003 fef1 	bl	2000a918 <USB_ReadInterrupts>
20006b36:	4603      	mov	r3, r0
20006b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20006b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20006b40:	d121      	bne.n	20006b86 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
20006b42:	687b      	ldr	r3, [r7, #4]
20006b44:	681b      	ldr	r3, [r3, #0]
20006b46:	695a      	ldr	r2, [r3, #20]
20006b48:	687b      	ldr	r3, [r7, #4]
20006b4a:	681b      	ldr	r3, [r3, #0]
20006b4c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
20006b50:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
20006b52:	687b      	ldr	r3, [r7, #4]
20006b54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
20006b58:	2b00      	cmp	r3, #0
20006b5a:	d111      	bne.n	20006b80 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
20006b5c:	687b      	ldr	r3, [r7, #4]
20006b5e:	2201      	movs	r2, #1
20006b60:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
20006b64:	687b      	ldr	r3, [r7, #4]
20006b66:	681b      	ldr	r3, [r3, #0]
20006b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20006b6a:	089b      	lsrs	r3, r3, #2
20006b6c:	f003 020f 	and.w	r2, r3, #15
20006b70:	687b      	ldr	r3, [r7, #4]
20006b72:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
20006b76:	2101      	movs	r1, #1
20006b78:	6878      	ldr	r0, [r7, #4]
20006b7a:	f006 fbd7 	bl	2000d32c <HAL_PCDEx_LPM_Callback>
20006b7e:	e002      	b.n	20006b86 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
20006b80:	6878      	ldr	r0, [r7, #4]
20006b82:	f006 f9d5 	bl	2000cf30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
20006b86:	687b      	ldr	r3, [r7, #4]
20006b88:	681b      	ldr	r3, [r3, #0]
20006b8a:	4618      	mov	r0, r3
20006b8c:	f003 fec4 	bl	2000a918 <USB_ReadInterrupts>
20006b90:	4603      	mov	r3, r0
20006b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20006b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20006b9a:	f040 80b7 	bne.w	20006d0c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
20006b9e:	69fb      	ldr	r3, [r7, #28]
20006ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006ba4:	685b      	ldr	r3, [r3, #4]
20006ba6:	69fa      	ldr	r2, [r7, #28]
20006ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006bac:	f023 0301 	bic.w	r3, r3, #1
20006bb0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
20006bb2:	687b      	ldr	r3, [r7, #4]
20006bb4:	681b      	ldr	r3, [r3, #0]
20006bb6:	2110      	movs	r1, #16
20006bb8:	4618      	mov	r0, r3
20006bba:	f002 ff8b 	bl	20009ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20006bbe:	2300      	movs	r3, #0
20006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
20006bc2:	e046      	b.n	20006c52 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
20006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006bc6:	015a      	lsls	r2, r3, #5
20006bc8:	69fb      	ldr	r3, [r7, #28]
20006bca:	4413      	add	r3, r2
20006bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006bd0:	461a      	mov	r2, r3
20006bd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20006bd6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
20006bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006bda:	015a      	lsls	r2, r3, #5
20006bdc:	69fb      	ldr	r3, [r7, #28]
20006bde:	4413      	add	r3, r2
20006be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006be4:	681b      	ldr	r3, [r3, #0]
20006be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20006be8:	0151      	lsls	r1, r2, #5
20006bea:	69fa      	ldr	r2, [r7, #28]
20006bec:	440a      	add	r2, r1
20006bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20006bf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
20006bf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
20006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006bfa:	015a      	lsls	r2, r3, #5
20006bfc:	69fb      	ldr	r3, [r7, #28]
20006bfe:	4413      	add	r3, r2
20006c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006c04:	461a      	mov	r2, r3
20006c06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20006c0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
20006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006c0e:	015a      	lsls	r2, r3, #5
20006c10:	69fb      	ldr	r3, [r7, #28]
20006c12:	4413      	add	r3, r2
20006c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006c18:	681b      	ldr	r3, [r3, #0]
20006c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20006c1c:	0151      	lsls	r1, r2, #5
20006c1e:	69fa      	ldr	r2, [r7, #28]
20006c20:	440a      	add	r2, r1
20006c22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006c26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
20006c2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20006c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006c2e:	015a      	lsls	r2, r3, #5
20006c30:	69fb      	ldr	r3, [r7, #28]
20006c32:	4413      	add	r3, r2
20006c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006c38:	681b      	ldr	r3, [r3, #0]
20006c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20006c3c:	0151      	lsls	r1, r2, #5
20006c3e:	69fa      	ldr	r2, [r7, #28]
20006c40:	440a      	add	r2, r1
20006c42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006c46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20006c4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20006c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006c4e:	3301      	adds	r3, #1
20006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
20006c52:	687b      	ldr	r3, [r7, #4]
20006c54:	791b      	ldrb	r3, [r3, #4]
20006c56:	461a      	mov	r2, r3
20006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006c5a:	4293      	cmp	r3, r2
20006c5c:	d3b2      	bcc.n	20006bc4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
20006c5e:	69fb      	ldr	r3, [r7, #28]
20006c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006c64:	69db      	ldr	r3, [r3, #28]
20006c66:	69fa      	ldr	r2, [r7, #28]
20006c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006c6c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
20006c70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
20006c72:	687b      	ldr	r3, [r7, #4]
20006c74:	7bdb      	ldrb	r3, [r3, #15]
20006c76:	2b00      	cmp	r3, #0
20006c78:	d016      	beq.n	20006ca8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
20006c7a:	69fb      	ldr	r3, [r7, #28]
20006c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20006c84:	69fa      	ldr	r2, [r7, #28]
20006c86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006c8a:	f043 030b 	orr.w	r3, r3, #11
20006c8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
20006c92:	69fb      	ldr	r3, [r7, #28]
20006c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20006c9a:	69fa      	ldr	r2, [r7, #28]
20006c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006ca0:	f043 030b 	orr.w	r3, r3, #11
20006ca4:	6453      	str	r3, [r2, #68]	@ 0x44
20006ca6:	e015      	b.n	20006cd4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
20006ca8:	69fb      	ldr	r3, [r7, #28]
20006caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006cae:	695a      	ldr	r2, [r3, #20]
20006cb0:	69fb      	ldr	r3, [r7, #28]
20006cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006cb6:	4619      	mov	r1, r3
20006cb8:	f242 032b 	movw	r3, #8235	@ 0x202b
20006cbc:	4313      	orrs	r3, r2
20006cbe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
20006cc0:	69fb      	ldr	r3, [r7, #28]
20006cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006cc6:	691b      	ldr	r3, [r3, #16]
20006cc8:	69fa      	ldr	r2, [r7, #28]
20006cca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006cce:	f043 030b 	orr.w	r3, r3, #11
20006cd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
20006cd4:	69fb      	ldr	r3, [r7, #28]
20006cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006cda:	681b      	ldr	r3, [r3, #0]
20006cdc:	69fa      	ldr	r2, [r7, #28]
20006cde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006ce2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
20006ce6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20006ce8:	687b      	ldr	r3, [r7, #4]
20006cea:	6818      	ldr	r0, [r3, #0]
20006cec:	687b      	ldr	r3, [r7, #4]
20006cee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
20006cf0:	687b      	ldr	r3, [r7, #4]
20006cf2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20006cf6:	461a      	mov	r2, r3
20006cf8:	f003 fed4 	bl	2000aaa4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
20006cfc:	687b      	ldr	r3, [r7, #4]
20006cfe:	681b      	ldr	r3, [r3, #0]
20006d00:	695a      	ldr	r2, [r3, #20]
20006d02:	687b      	ldr	r3, [r7, #4]
20006d04:	681b      	ldr	r3, [r3, #0]
20006d06:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
20006d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
20006d0c:	687b      	ldr	r3, [r7, #4]
20006d0e:	681b      	ldr	r3, [r3, #0]
20006d10:	4618      	mov	r0, r3
20006d12:	f003 fe01 	bl	2000a918 <USB_ReadInterrupts>
20006d16:	4603      	mov	r3, r0
20006d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20006d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20006d20:	d123      	bne.n	20006d6a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
20006d22:	687b      	ldr	r3, [r7, #4]
20006d24:	681b      	ldr	r3, [r3, #0]
20006d26:	4618      	mov	r0, r3
20006d28:	f003 fe98 	bl	2000aa5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
20006d2c:	687b      	ldr	r3, [r7, #4]
20006d2e:	681b      	ldr	r3, [r3, #0]
20006d30:	4618      	mov	r0, r3
20006d32:	f002 ff48 	bl	20009bc6 <USB_GetDevSpeed>
20006d36:	4603      	mov	r3, r0
20006d38:	461a      	mov	r2, r3
20006d3a:	687b      	ldr	r3, [r7, #4]
20006d3c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
20006d3e:	687b      	ldr	r3, [r7, #4]
20006d40:	681c      	ldr	r4, [r3, #0]
20006d42:	f001 fab3 	bl	200082ac <HAL_RCC_GetHCLKFreq>
20006d46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
20006d48:	687b      	ldr	r3, [r7, #4]
20006d4a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
20006d4c:	461a      	mov	r2, r3
20006d4e:	4620      	mov	r0, r4
20006d50:	f002 fc52 	bl	200095f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
20006d54:	6878      	ldr	r0, [r7, #4]
20006d56:	f006 f8c2 	bl	2000cede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
20006d5a:	687b      	ldr	r3, [r7, #4]
20006d5c:	681b      	ldr	r3, [r3, #0]
20006d5e:	695a      	ldr	r2, [r3, #20]
20006d60:	687b      	ldr	r3, [r7, #4]
20006d62:	681b      	ldr	r3, [r3, #0]
20006d64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
20006d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
20006d6a:	687b      	ldr	r3, [r7, #4]
20006d6c:	681b      	ldr	r3, [r3, #0]
20006d6e:	4618      	mov	r0, r3
20006d70:	f003 fdd2 	bl	2000a918 <USB_ReadInterrupts>
20006d74:	4603      	mov	r3, r0
20006d76:	f003 0308 	and.w	r3, r3, #8
20006d7a:	2b08      	cmp	r3, #8
20006d7c:	d10a      	bne.n	20006d94 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
20006d7e:	6878      	ldr	r0, [r7, #4]
20006d80:	f006 f89f 	bl	2000cec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
20006d84:	687b      	ldr	r3, [r7, #4]
20006d86:	681b      	ldr	r3, [r3, #0]
20006d88:	695a      	ldr	r2, [r3, #20]
20006d8a:	687b      	ldr	r3, [r7, #4]
20006d8c:	681b      	ldr	r3, [r3, #0]
20006d8e:	f002 0208 	and.w	r2, r2, #8
20006d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
20006d94:	687b      	ldr	r3, [r7, #4]
20006d96:	681b      	ldr	r3, [r3, #0]
20006d98:	4618      	mov	r0, r3
20006d9a:	f003 fdbd 	bl	2000a918 <USB_ReadInterrupts>
20006d9e:	4603      	mov	r3, r0
20006da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006da4:	2b80      	cmp	r3, #128	@ 0x80
20006da6:	d123      	bne.n	20006df0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
20006da8:	6a3b      	ldr	r3, [r7, #32]
20006daa:	699b      	ldr	r3, [r3, #24]
20006dac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
20006db0:	6a3b      	ldr	r3, [r7, #32]
20006db2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006db4:	2301      	movs	r3, #1
20006db6:	627b      	str	r3, [r7, #36]	@ 0x24
20006db8:	e014      	b.n	20006de4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
20006dba:	6879      	ldr	r1, [r7, #4]
20006dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006dbe:	4613      	mov	r3, r2
20006dc0:	00db      	lsls	r3, r3, #3
20006dc2:	4413      	add	r3, r2
20006dc4:	009b      	lsls	r3, r3, #2
20006dc6:	440b      	add	r3, r1
20006dc8:	f203 2357 	addw	r3, r3, #599	@ 0x257
20006dcc:	781b      	ldrb	r3, [r3, #0]
20006dce:	2b01      	cmp	r3, #1
20006dd0:	d105      	bne.n	20006dde <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
20006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006dd4:	b2db      	uxtb	r3, r3
20006dd6:	4619      	mov	r1, r3
20006dd8:	6878      	ldr	r0, [r7, #4]
20006dda:	f000 fb0a 	bl	200073f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006de0:	3301      	adds	r3, #1
20006de2:	627b      	str	r3, [r7, #36]	@ 0x24
20006de4:	687b      	ldr	r3, [r7, #4]
20006de6:	791b      	ldrb	r3, [r3, #4]
20006de8:	461a      	mov	r2, r3
20006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006dec:	4293      	cmp	r3, r2
20006dee:	d3e4      	bcc.n	20006dba <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
20006df0:	687b      	ldr	r3, [r7, #4]
20006df2:	681b      	ldr	r3, [r3, #0]
20006df4:	4618      	mov	r0, r3
20006df6:	f003 fd8f 	bl	2000a918 <USB_ReadInterrupts>
20006dfa:	4603      	mov	r3, r0
20006dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20006e00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20006e04:	d13c      	bne.n	20006e80 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006e06:	2301      	movs	r3, #1
20006e08:	627b      	str	r3, [r7, #36]	@ 0x24
20006e0a:	e02b      	b.n	20006e64 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
20006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006e0e:	015a      	lsls	r2, r3, #5
20006e10:	69fb      	ldr	r3, [r7, #28]
20006e12:	4413      	add	r3, r2
20006e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006e18:	681b      	ldr	r3, [r3, #0]
20006e1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20006e1c:	6879      	ldr	r1, [r7, #4]
20006e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006e20:	4613      	mov	r3, r2
20006e22:	00db      	lsls	r3, r3, #3
20006e24:	4413      	add	r3, r2
20006e26:	009b      	lsls	r3, r3, #2
20006e28:	440b      	add	r3, r1
20006e2a:	3318      	adds	r3, #24
20006e2c:	781b      	ldrb	r3, [r3, #0]
20006e2e:	2b01      	cmp	r3, #1
20006e30:	d115      	bne.n	20006e5e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
20006e32:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20006e34:	2b00      	cmp	r3, #0
20006e36:	da12      	bge.n	20006e5e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
20006e38:	6879      	ldr	r1, [r7, #4]
20006e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006e3c:	4613      	mov	r3, r2
20006e3e:	00db      	lsls	r3, r3, #3
20006e40:	4413      	add	r3, r2
20006e42:	009b      	lsls	r3, r3, #2
20006e44:	440b      	add	r3, r1
20006e46:	3317      	adds	r3, #23
20006e48:	2201      	movs	r2, #1
20006e4a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
20006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006e4e:	b2db      	uxtb	r3, r3
20006e50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
20006e54:	b2db      	uxtb	r3, r3
20006e56:	4619      	mov	r1, r3
20006e58:	6878      	ldr	r0, [r7, #4]
20006e5a:	f000 faca 	bl	200073f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006e60:	3301      	adds	r3, #1
20006e62:	627b      	str	r3, [r7, #36]	@ 0x24
20006e64:	687b      	ldr	r3, [r7, #4]
20006e66:	791b      	ldrb	r3, [r3, #4]
20006e68:	461a      	mov	r2, r3
20006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006e6c:	4293      	cmp	r3, r2
20006e6e:	d3cd      	bcc.n	20006e0c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
20006e70:	687b      	ldr	r3, [r7, #4]
20006e72:	681b      	ldr	r3, [r3, #0]
20006e74:	695a      	ldr	r2, [r3, #20]
20006e76:	687b      	ldr	r3, [r7, #4]
20006e78:	681b      	ldr	r3, [r3, #0]
20006e7a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
20006e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
20006e80:	687b      	ldr	r3, [r7, #4]
20006e82:	681b      	ldr	r3, [r3, #0]
20006e84:	4618      	mov	r0, r3
20006e86:	f003 fd47 	bl	2000a918 <USB_ReadInterrupts>
20006e8a:	4603      	mov	r3, r0
20006e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20006e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20006e94:	d156      	bne.n	20006f44 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006e96:	2301      	movs	r3, #1
20006e98:	627b      	str	r3, [r7, #36]	@ 0x24
20006e9a:	e045      	b.n	20006f28 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
20006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006e9e:	015a      	lsls	r2, r3, #5
20006ea0:	69fb      	ldr	r3, [r7, #28]
20006ea2:	4413      	add	r3, r2
20006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006ea8:	681b      	ldr	r3, [r3, #0]
20006eaa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20006eac:	6879      	ldr	r1, [r7, #4]
20006eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006eb0:	4613      	mov	r3, r2
20006eb2:	00db      	lsls	r3, r3, #3
20006eb4:	4413      	add	r3, r2
20006eb6:	009b      	lsls	r3, r3, #2
20006eb8:	440b      	add	r3, r1
20006eba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20006ebe:	781b      	ldrb	r3, [r3, #0]
20006ec0:	2b01      	cmp	r3, #1
20006ec2:	d12e      	bne.n	20006f22 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20006ec4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20006ec6:	2b00      	cmp	r3, #0
20006ec8:	da2b      	bge.n	20006f22 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
20006eca:	69bb      	ldr	r3, [r7, #24]
20006ecc:	0c1a      	lsrs	r2, r3, #16
20006ece:	687b      	ldr	r3, [r7, #4]
20006ed0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
20006ed4:	4053      	eors	r3, r2
20006ed6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20006eda:	2b00      	cmp	r3, #0
20006edc:	d121      	bne.n	20006f22 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
20006ede:	6879      	ldr	r1, [r7, #4]
20006ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006ee2:	4613      	mov	r3, r2
20006ee4:	00db      	lsls	r3, r3, #3
20006ee6:	4413      	add	r3, r2
20006ee8:	009b      	lsls	r3, r3, #2
20006eea:	440b      	add	r3, r1
20006eec:	f203 2357 	addw	r3, r3, #599	@ 0x257
20006ef0:	2201      	movs	r2, #1
20006ef2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
20006ef4:	6a3b      	ldr	r3, [r7, #32]
20006ef6:	699b      	ldr	r3, [r3, #24]
20006ef8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20006efc:	6a3b      	ldr	r3, [r7, #32]
20006efe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
20006f00:	6a3b      	ldr	r3, [r7, #32]
20006f02:	695b      	ldr	r3, [r3, #20]
20006f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006f08:	2b00      	cmp	r3, #0
20006f0a:	d10a      	bne.n	20006f22 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
20006f0c:	69fb      	ldr	r3, [r7, #28]
20006f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006f12:	685b      	ldr	r3, [r3, #4]
20006f14:	69fa      	ldr	r2, [r7, #28]
20006f16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20006f1e:	6053      	str	r3, [r2, #4]
            break;
20006f20:	e008      	b.n	20006f34 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006f24:	3301      	adds	r3, #1
20006f26:	627b      	str	r3, [r7, #36]	@ 0x24
20006f28:	687b      	ldr	r3, [r7, #4]
20006f2a:	791b      	ldrb	r3, [r3, #4]
20006f2c:	461a      	mov	r2, r3
20006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006f30:	4293      	cmp	r3, r2
20006f32:	d3b3      	bcc.n	20006e9c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
20006f34:	687b      	ldr	r3, [r7, #4]
20006f36:	681b      	ldr	r3, [r3, #0]
20006f38:	695a      	ldr	r2, [r3, #20]
20006f3a:	687b      	ldr	r3, [r7, #4]
20006f3c:	681b      	ldr	r3, [r3, #0]
20006f3e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
20006f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
20006f44:	687b      	ldr	r3, [r7, #4]
20006f46:	681b      	ldr	r3, [r3, #0]
20006f48:	4618      	mov	r0, r3
20006f4a:	f003 fce5 	bl	2000a918 <USB_ReadInterrupts>
20006f4e:	4603      	mov	r3, r0
20006f50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
20006f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20006f58:	d10a      	bne.n	20006f70 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
20006f5a:	6878      	ldr	r0, [r7, #4]
20006f5c:	f006 f840 	bl	2000cfe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
20006f60:	687b      	ldr	r3, [r7, #4]
20006f62:	681b      	ldr	r3, [r3, #0]
20006f64:	695a      	ldr	r2, [r3, #20]
20006f66:	687b      	ldr	r3, [r7, #4]
20006f68:	681b      	ldr	r3, [r3, #0]
20006f6a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
20006f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
20006f70:	687b      	ldr	r3, [r7, #4]
20006f72:	681b      	ldr	r3, [r3, #0]
20006f74:	4618      	mov	r0, r3
20006f76:	f003 fccf 	bl	2000a918 <USB_ReadInterrupts>
20006f7a:	4603      	mov	r3, r0
20006f7c:	f003 0304 	and.w	r3, r3, #4
20006f80:	2b04      	cmp	r3, #4
20006f82:	d115      	bne.n	20006fb0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
20006f84:	687b      	ldr	r3, [r7, #4]
20006f86:	681b      	ldr	r3, [r3, #0]
20006f88:	685b      	ldr	r3, [r3, #4]
20006f8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
20006f8c:	69bb      	ldr	r3, [r7, #24]
20006f8e:	f003 0304 	and.w	r3, r3, #4
20006f92:	2b00      	cmp	r3, #0
20006f94:	d002      	beq.n	20006f9c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
20006f96:	6878      	ldr	r0, [r7, #4]
20006f98:	f006 f830 	bl	2000cffc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
20006f9c:	687b      	ldr	r3, [r7, #4]
20006f9e:	681b      	ldr	r3, [r3, #0]
20006fa0:	6859      	ldr	r1, [r3, #4]
20006fa2:	687b      	ldr	r3, [r7, #4]
20006fa4:	681b      	ldr	r3, [r3, #0]
20006fa6:	69ba      	ldr	r2, [r7, #24]
20006fa8:	430a      	orrs	r2, r1
20006faa:	605a      	str	r2, [r3, #4]
20006fac:	e000      	b.n	20006fb0 <HAL_PCD_IRQHandler+0x996>
      return;
20006fae:	bf00      	nop
    }
  }
}
20006fb0:	3734      	adds	r7, #52	@ 0x34
20006fb2:	46bd      	mov	sp, r7
20006fb4:	bd90      	pop	{r4, r7, pc}

20006fb6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
20006fb6:	b580      	push	{r7, lr}
20006fb8:	b082      	sub	sp, #8
20006fba:	af00      	add	r7, sp, #0
20006fbc:	6078      	str	r0, [r7, #4]
20006fbe:	460b      	mov	r3, r1
20006fc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
20006fc2:	687b      	ldr	r3, [r7, #4]
20006fc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20006fc8:	2b01      	cmp	r3, #1
20006fca:	d101      	bne.n	20006fd0 <HAL_PCD_SetAddress+0x1a>
20006fcc:	2302      	movs	r3, #2
20006fce:	e012      	b.n	20006ff6 <HAL_PCD_SetAddress+0x40>
20006fd0:	687b      	ldr	r3, [r7, #4]
20006fd2:	2201      	movs	r2, #1
20006fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
20006fd8:	687b      	ldr	r3, [r7, #4]
20006fda:	78fa      	ldrb	r2, [r7, #3]
20006fdc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
20006fde:	687b      	ldr	r3, [r7, #4]
20006fe0:	681b      	ldr	r3, [r3, #0]
20006fe2:	78fa      	ldrb	r2, [r7, #3]
20006fe4:	4611      	mov	r1, r2
20006fe6:	4618      	mov	r0, r3
20006fe8:	f003 fc2e 	bl	2000a848 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
20006fec:	687b      	ldr	r3, [r7, #4]
20006fee:	2200      	movs	r2, #0
20006ff0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20006ff4:	2300      	movs	r3, #0
}
20006ff6:	4618      	mov	r0, r3
20006ff8:	3708      	adds	r7, #8
20006ffa:	46bd      	mov	sp, r7
20006ffc:	bd80      	pop	{r7, pc}

20006ffe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
20006ffe:	b580      	push	{r7, lr}
20007000:	b084      	sub	sp, #16
20007002:	af00      	add	r7, sp, #0
20007004:	6078      	str	r0, [r7, #4]
20007006:	4608      	mov	r0, r1
20007008:	4611      	mov	r1, r2
2000700a:	461a      	mov	r2, r3
2000700c:	4603      	mov	r3, r0
2000700e:	70fb      	strb	r3, [r7, #3]
20007010:	460b      	mov	r3, r1
20007012:	803b      	strh	r3, [r7, #0]
20007014:	4613      	mov	r3, r2
20007016:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
20007018:	2300      	movs	r3, #0
2000701a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
2000701c:	f997 3003 	ldrsb.w	r3, [r7, #3]
20007020:	2b00      	cmp	r3, #0
20007022:	da0f      	bge.n	20007044 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20007024:	78fb      	ldrb	r3, [r7, #3]
20007026:	f003 020f 	and.w	r2, r3, #15
2000702a:	4613      	mov	r3, r2
2000702c:	00db      	lsls	r3, r3, #3
2000702e:	4413      	add	r3, r2
20007030:	009b      	lsls	r3, r3, #2
20007032:	3310      	adds	r3, #16
20007034:	687a      	ldr	r2, [r7, #4]
20007036:	4413      	add	r3, r2
20007038:	3304      	adds	r3, #4
2000703a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
2000703c:	68fb      	ldr	r3, [r7, #12]
2000703e:	2201      	movs	r2, #1
20007040:	705a      	strb	r2, [r3, #1]
20007042:	e00f      	b.n	20007064 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20007044:	78fb      	ldrb	r3, [r7, #3]
20007046:	f003 020f 	and.w	r2, r3, #15
2000704a:	4613      	mov	r3, r2
2000704c:	00db      	lsls	r3, r3, #3
2000704e:	4413      	add	r3, r2
20007050:	009b      	lsls	r3, r3, #2
20007052:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20007056:	687a      	ldr	r2, [r7, #4]
20007058:	4413      	add	r3, r2
2000705a:	3304      	adds	r3, #4
2000705c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
2000705e:	68fb      	ldr	r3, [r7, #12]
20007060:	2200      	movs	r2, #0
20007062:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
20007064:	78fb      	ldrb	r3, [r7, #3]
20007066:	f003 030f 	and.w	r3, r3, #15
2000706a:	b2da      	uxtb	r2, r3
2000706c:	68fb      	ldr	r3, [r7, #12]
2000706e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
20007070:	883b      	ldrh	r3, [r7, #0]
20007072:	f3c3 020a 	ubfx	r2, r3, #0, #11
20007076:	68fb      	ldr	r3, [r7, #12]
20007078:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
2000707a:	68fb      	ldr	r3, [r7, #12]
2000707c:	78ba      	ldrb	r2, [r7, #2]
2000707e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
20007080:	68fb      	ldr	r3, [r7, #12]
20007082:	785b      	ldrb	r3, [r3, #1]
20007084:	2b00      	cmp	r3, #0
20007086:	d004      	beq.n	20007092 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
20007088:	68fb      	ldr	r3, [r7, #12]
2000708a:	781b      	ldrb	r3, [r3, #0]
2000708c:	461a      	mov	r2, r3
2000708e:	68fb      	ldr	r3, [r7, #12]
20007090:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
20007092:	78bb      	ldrb	r3, [r7, #2]
20007094:	2b02      	cmp	r3, #2
20007096:	d102      	bne.n	2000709e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
20007098:	68fb      	ldr	r3, [r7, #12]
2000709a:	2200      	movs	r2, #0
2000709c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
2000709e:	687b      	ldr	r3, [r7, #4]
200070a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200070a4:	2b01      	cmp	r3, #1
200070a6:	d101      	bne.n	200070ac <HAL_PCD_EP_Open+0xae>
200070a8:	2302      	movs	r3, #2
200070aa:	e00e      	b.n	200070ca <HAL_PCD_EP_Open+0xcc>
200070ac:	687b      	ldr	r3, [r7, #4]
200070ae:	2201      	movs	r2, #1
200070b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
200070b4:	687b      	ldr	r3, [r7, #4]
200070b6:	681b      	ldr	r3, [r3, #0]
200070b8:	68f9      	ldr	r1, [r7, #12]
200070ba:	4618      	mov	r0, r3
200070bc:	f002 fda8 	bl	20009c10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
200070c0:	687b      	ldr	r3, [r7, #4]
200070c2:	2200      	movs	r2, #0
200070c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
200070c8:	7afb      	ldrb	r3, [r7, #11]
}
200070ca:	4618      	mov	r0, r3
200070cc:	3710      	adds	r7, #16
200070ce:	46bd      	mov	sp, r7
200070d0:	bd80      	pop	{r7, pc}

200070d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
200070d2:	b580      	push	{r7, lr}
200070d4:	b084      	sub	sp, #16
200070d6:	af00      	add	r7, sp, #0
200070d8:	6078      	str	r0, [r7, #4]
200070da:	460b      	mov	r3, r1
200070dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
200070de:	f997 3003 	ldrsb.w	r3, [r7, #3]
200070e2:	2b00      	cmp	r3, #0
200070e4:	da0f      	bge.n	20007106 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
200070e6:	78fb      	ldrb	r3, [r7, #3]
200070e8:	f003 020f 	and.w	r2, r3, #15
200070ec:	4613      	mov	r3, r2
200070ee:	00db      	lsls	r3, r3, #3
200070f0:	4413      	add	r3, r2
200070f2:	009b      	lsls	r3, r3, #2
200070f4:	3310      	adds	r3, #16
200070f6:	687a      	ldr	r2, [r7, #4]
200070f8:	4413      	add	r3, r2
200070fa:	3304      	adds	r3, #4
200070fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
200070fe:	68fb      	ldr	r3, [r7, #12]
20007100:	2201      	movs	r2, #1
20007102:	705a      	strb	r2, [r3, #1]
20007104:	e00f      	b.n	20007126 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20007106:	78fb      	ldrb	r3, [r7, #3]
20007108:	f003 020f 	and.w	r2, r3, #15
2000710c:	4613      	mov	r3, r2
2000710e:	00db      	lsls	r3, r3, #3
20007110:	4413      	add	r3, r2
20007112:	009b      	lsls	r3, r3, #2
20007114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20007118:	687a      	ldr	r2, [r7, #4]
2000711a:	4413      	add	r3, r2
2000711c:	3304      	adds	r3, #4
2000711e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20007120:	68fb      	ldr	r3, [r7, #12]
20007122:	2200      	movs	r2, #0
20007124:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
20007126:	78fb      	ldrb	r3, [r7, #3]
20007128:	f003 030f 	and.w	r3, r3, #15
2000712c:	b2da      	uxtb	r2, r3
2000712e:	68fb      	ldr	r3, [r7, #12]
20007130:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20007132:	687b      	ldr	r3, [r7, #4]
20007134:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20007138:	2b01      	cmp	r3, #1
2000713a:	d101      	bne.n	20007140 <HAL_PCD_EP_Close+0x6e>
2000713c:	2302      	movs	r3, #2
2000713e:	e00e      	b.n	2000715e <HAL_PCD_EP_Close+0x8c>
20007140:	687b      	ldr	r3, [r7, #4]
20007142:	2201      	movs	r2, #1
20007144:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
20007148:	687b      	ldr	r3, [r7, #4]
2000714a:	681b      	ldr	r3, [r3, #0]
2000714c:	68f9      	ldr	r1, [r7, #12]
2000714e:	4618      	mov	r0, r3
20007150:	f002 fde6 	bl	20009d20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
20007154:	687b      	ldr	r3, [r7, #4]
20007156:	2200      	movs	r2, #0
20007158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
2000715c:	2300      	movs	r3, #0
}
2000715e:	4618      	mov	r0, r3
20007160:	3710      	adds	r7, #16
20007162:	46bd      	mov	sp, r7
20007164:	bd80      	pop	{r7, pc}

20007166 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20007166:	b580      	push	{r7, lr}
20007168:	b086      	sub	sp, #24
2000716a:	af00      	add	r7, sp, #0
2000716c:	60f8      	str	r0, [r7, #12]
2000716e:	607a      	str	r2, [r7, #4]
20007170:	603b      	str	r3, [r7, #0]
20007172:	460b      	mov	r3, r1
20007174:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20007176:	7afb      	ldrb	r3, [r7, #11]
20007178:	f003 020f 	and.w	r2, r3, #15
2000717c:	4613      	mov	r3, r2
2000717e:	00db      	lsls	r3, r3, #3
20007180:	4413      	add	r3, r2
20007182:	009b      	lsls	r3, r3, #2
20007184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20007188:	68fa      	ldr	r2, [r7, #12]
2000718a:	4413      	add	r3, r2
2000718c:	3304      	adds	r3, #4
2000718e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20007190:	697b      	ldr	r3, [r7, #20]
20007192:	687a      	ldr	r2, [r7, #4]
20007194:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20007196:	697b      	ldr	r3, [r7, #20]
20007198:	683a      	ldr	r2, [r7, #0]
2000719a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
2000719c:	697b      	ldr	r3, [r7, #20]
2000719e:	2200      	movs	r2, #0
200071a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
200071a2:	697b      	ldr	r3, [r7, #20]
200071a4:	2200      	movs	r2, #0
200071a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
200071a8:	7afb      	ldrb	r3, [r7, #11]
200071aa:	f003 030f 	and.w	r3, r3, #15
200071ae:	b2da      	uxtb	r2, r3
200071b0:	697b      	ldr	r3, [r7, #20]
200071b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
200071b4:	68fb      	ldr	r3, [r7, #12]
200071b6:	799b      	ldrb	r3, [r3, #6]
200071b8:	2b01      	cmp	r3, #1
200071ba:	d102      	bne.n	200071c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
200071bc:	687a      	ldr	r2, [r7, #4]
200071be:	697b      	ldr	r3, [r7, #20]
200071c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
200071c2:	68fb      	ldr	r3, [r7, #12]
200071c4:	6818      	ldr	r0, [r3, #0]
200071c6:	68fb      	ldr	r3, [r7, #12]
200071c8:	799b      	ldrb	r3, [r3, #6]
200071ca:	461a      	mov	r2, r3
200071cc:	6979      	ldr	r1, [r7, #20]
200071ce:	f002 fe83 	bl	20009ed8 <USB_EPStartXfer>

  return HAL_OK;
200071d2:	2300      	movs	r3, #0
}
200071d4:	4618      	mov	r0, r3
200071d6:	3718      	adds	r7, #24
200071d8:	46bd      	mov	sp, r7
200071da:	bd80      	pop	{r7, pc}

200071dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
200071dc:	b480      	push	{r7}
200071de:	b083      	sub	sp, #12
200071e0:	af00      	add	r7, sp, #0
200071e2:	6078      	str	r0, [r7, #4]
200071e4:	460b      	mov	r3, r1
200071e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
200071e8:	78fb      	ldrb	r3, [r7, #3]
200071ea:	f003 020f 	and.w	r2, r3, #15
200071ee:	6879      	ldr	r1, [r7, #4]
200071f0:	4613      	mov	r3, r2
200071f2:	00db      	lsls	r3, r3, #3
200071f4:	4413      	add	r3, r2
200071f6:	009b      	lsls	r3, r3, #2
200071f8:	440b      	add	r3, r1
200071fa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
200071fe:	681b      	ldr	r3, [r3, #0]
}
20007200:	4618      	mov	r0, r3
20007202:	370c      	adds	r7, #12
20007204:	46bd      	mov	sp, r7
20007206:	f85d 7b04 	ldr.w	r7, [sp], #4
2000720a:	4770      	bx	lr

2000720c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
2000720c:	b580      	push	{r7, lr}
2000720e:	b086      	sub	sp, #24
20007210:	af00      	add	r7, sp, #0
20007212:	60f8      	str	r0, [r7, #12]
20007214:	607a      	str	r2, [r7, #4]
20007216:	603b      	str	r3, [r7, #0]
20007218:	460b      	mov	r3, r1
2000721a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
2000721c:	7afb      	ldrb	r3, [r7, #11]
2000721e:	f003 020f 	and.w	r2, r3, #15
20007222:	4613      	mov	r3, r2
20007224:	00db      	lsls	r3, r3, #3
20007226:	4413      	add	r3, r2
20007228:	009b      	lsls	r3, r3, #2
2000722a:	3310      	adds	r3, #16
2000722c:	68fa      	ldr	r2, [r7, #12]
2000722e:	4413      	add	r3, r2
20007230:	3304      	adds	r3, #4
20007232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20007234:	697b      	ldr	r3, [r7, #20]
20007236:	687a      	ldr	r2, [r7, #4]
20007238:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
2000723a:	697b      	ldr	r3, [r7, #20]
2000723c:	683a      	ldr	r2, [r7, #0]
2000723e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
20007240:	697b      	ldr	r3, [r7, #20]
20007242:	2200      	movs	r2, #0
20007244:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
20007246:	697b      	ldr	r3, [r7, #20]
20007248:	2201      	movs	r2, #1
2000724a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
2000724c:	7afb      	ldrb	r3, [r7, #11]
2000724e:	f003 030f 	and.w	r3, r3, #15
20007252:	b2da      	uxtb	r2, r3
20007254:	697b      	ldr	r3, [r7, #20]
20007256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20007258:	68fb      	ldr	r3, [r7, #12]
2000725a:	799b      	ldrb	r3, [r3, #6]
2000725c:	2b01      	cmp	r3, #1
2000725e:	d102      	bne.n	20007266 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
20007260:	687a      	ldr	r2, [r7, #4]
20007262:	697b      	ldr	r3, [r7, #20]
20007264:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
20007266:	68fb      	ldr	r3, [r7, #12]
20007268:	6818      	ldr	r0, [r3, #0]
2000726a:	68fb      	ldr	r3, [r7, #12]
2000726c:	799b      	ldrb	r3, [r3, #6]
2000726e:	461a      	mov	r2, r3
20007270:	6979      	ldr	r1, [r7, #20]
20007272:	f002 fe31 	bl	20009ed8 <USB_EPStartXfer>

  return HAL_OK;
20007276:	2300      	movs	r3, #0
}
20007278:	4618      	mov	r0, r3
2000727a:	3718      	adds	r7, #24
2000727c:	46bd      	mov	sp, r7
2000727e:	bd80      	pop	{r7, pc}

20007280 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20007280:	b580      	push	{r7, lr}
20007282:	b084      	sub	sp, #16
20007284:	af00      	add	r7, sp, #0
20007286:	6078      	str	r0, [r7, #4]
20007288:	460b      	mov	r3, r1
2000728a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
2000728c:	78fb      	ldrb	r3, [r7, #3]
2000728e:	f003 030f 	and.w	r3, r3, #15
20007292:	687a      	ldr	r2, [r7, #4]
20007294:	7912      	ldrb	r2, [r2, #4]
20007296:	4293      	cmp	r3, r2
20007298:	d901      	bls.n	2000729e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
2000729a:	2301      	movs	r3, #1
2000729c:	e04f      	b.n	2000733e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
2000729e:	f997 3003 	ldrsb.w	r3, [r7, #3]
200072a2:	2b00      	cmp	r3, #0
200072a4:	da0f      	bge.n	200072c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
200072a6:	78fb      	ldrb	r3, [r7, #3]
200072a8:	f003 020f 	and.w	r2, r3, #15
200072ac:	4613      	mov	r3, r2
200072ae:	00db      	lsls	r3, r3, #3
200072b0:	4413      	add	r3, r2
200072b2:	009b      	lsls	r3, r3, #2
200072b4:	3310      	adds	r3, #16
200072b6:	687a      	ldr	r2, [r7, #4]
200072b8:	4413      	add	r3, r2
200072ba:	3304      	adds	r3, #4
200072bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
200072be:	68fb      	ldr	r3, [r7, #12]
200072c0:	2201      	movs	r2, #1
200072c2:	705a      	strb	r2, [r3, #1]
200072c4:	e00d      	b.n	200072e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
200072c6:	78fa      	ldrb	r2, [r7, #3]
200072c8:	4613      	mov	r3, r2
200072ca:	00db      	lsls	r3, r3, #3
200072cc:	4413      	add	r3, r2
200072ce:	009b      	lsls	r3, r3, #2
200072d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200072d4:	687a      	ldr	r2, [r7, #4]
200072d6:	4413      	add	r3, r2
200072d8:	3304      	adds	r3, #4
200072da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
200072dc:	68fb      	ldr	r3, [r7, #12]
200072de:	2200      	movs	r2, #0
200072e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
200072e2:	68fb      	ldr	r3, [r7, #12]
200072e4:	2201      	movs	r2, #1
200072e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
200072e8:	78fb      	ldrb	r3, [r7, #3]
200072ea:	f003 030f 	and.w	r3, r3, #15
200072ee:	b2da      	uxtb	r2, r3
200072f0:	68fb      	ldr	r3, [r7, #12]
200072f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
200072f4:	687b      	ldr	r3, [r7, #4]
200072f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200072fa:	2b01      	cmp	r3, #1
200072fc:	d101      	bne.n	20007302 <HAL_PCD_EP_SetStall+0x82>
200072fe:	2302      	movs	r3, #2
20007300:	e01d      	b.n	2000733e <HAL_PCD_EP_SetStall+0xbe>
20007302:	687b      	ldr	r3, [r7, #4]
20007304:	2201      	movs	r2, #1
20007306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
2000730a:	687b      	ldr	r3, [r7, #4]
2000730c:	681b      	ldr	r3, [r3, #0]
2000730e:	68f9      	ldr	r1, [r7, #12]
20007310:	4618      	mov	r0, r3
20007312:	f003 f9c5 	bl	2000a6a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
20007316:	78fb      	ldrb	r3, [r7, #3]
20007318:	f003 030f 	and.w	r3, r3, #15
2000731c:	2b00      	cmp	r3, #0
2000731e:	d109      	bne.n	20007334 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
20007320:	687b      	ldr	r3, [r7, #4]
20007322:	6818      	ldr	r0, [r3, #0]
20007324:	687b      	ldr	r3, [r7, #4]
20007326:	7999      	ldrb	r1, [r3, #6]
20007328:	687b      	ldr	r3, [r7, #4]
2000732a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000732e:	461a      	mov	r2, r3
20007330:	f003 fbb8 	bl	2000aaa4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
20007334:	687b      	ldr	r3, [r7, #4]
20007336:	2200      	movs	r2, #0
20007338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
2000733c:	2300      	movs	r3, #0
}
2000733e:	4618      	mov	r0, r3
20007340:	3710      	adds	r7, #16
20007342:	46bd      	mov	sp, r7
20007344:	bd80      	pop	{r7, pc}

20007346 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20007346:	b580      	push	{r7, lr}
20007348:	b084      	sub	sp, #16
2000734a:	af00      	add	r7, sp, #0
2000734c:	6078      	str	r0, [r7, #4]
2000734e:	460b      	mov	r3, r1
20007350:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
20007352:	78fb      	ldrb	r3, [r7, #3]
20007354:	f003 030f 	and.w	r3, r3, #15
20007358:	687a      	ldr	r2, [r7, #4]
2000735a:	7912      	ldrb	r2, [r2, #4]
2000735c:	4293      	cmp	r3, r2
2000735e:	d901      	bls.n	20007364 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
20007360:	2301      	movs	r3, #1
20007362:	e042      	b.n	200073ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
20007364:	f997 3003 	ldrsb.w	r3, [r7, #3]
20007368:	2b00      	cmp	r3, #0
2000736a:	da0f      	bge.n	2000738c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
2000736c:	78fb      	ldrb	r3, [r7, #3]
2000736e:	f003 020f 	and.w	r2, r3, #15
20007372:	4613      	mov	r3, r2
20007374:	00db      	lsls	r3, r3, #3
20007376:	4413      	add	r3, r2
20007378:	009b      	lsls	r3, r3, #2
2000737a:	3310      	adds	r3, #16
2000737c:	687a      	ldr	r2, [r7, #4]
2000737e:	4413      	add	r3, r2
20007380:	3304      	adds	r3, #4
20007382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20007384:	68fb      	ldr	r3, [r7, #12]
20007386:	2201      	movs	r2, #1
20007388:	705a      	strb	r2, [r3, #1]
2000738a:	e00f      	b.n	200073ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
2000738c:	78fb      	ldrb	r3, [r7, #3]
2000738e:	f003 020f 	and.w	r2, r3, #15
20007392:	4613      	mov	r3, r2
20007394:	00db      	lsls	r3, r3, #3
20007396:	4413      	add	r3, r2
20007398:	009b      	lsls	r3, r3, #2
2000739a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
2000739e:	687a      	ldr	r2, [r7, #4]
200073a0:	4413      	add	r3, r2
200073a2:	3304      	adds	r3, #4
200073a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
200073a6:	68fb      	ldr	r3, [r7, #12]
200073a8:	2200      	movs	r2, #0
200073aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
200073ac:	68fb      	ldr	r3, [r7, #12]
200073ae:	2200      	movs	r2, #0
200073b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
200073b2:	78fb      	ldrb	r3, [r7, #3]
200073b4:	f003 030f 	and.w	r3, r3, #15
200073b8:	b2da      	uxtb	r2, r3
200073ba:	68fb      	ldr	r3, [r7, #12]
200073bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
200073be:	687b      	ldr	r3, [r7, #4]
200073c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200073c4:	2b01      	cmp	r3, #1
200073c6:	d101      	bne.n	200073cc <HAL_PCD_EP_ClrStall+0x86>
200073c8:	2302      	movs	r3, #2
200073ca:	e00e      	b.n	200073ea <HAL_PCD_EP_ClrStall+0xa4>
200073cc:	687b      	ldr	r3, [r7, #4]
200073ce:	2201      	movs	r2, #1
200073d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
200073d4:	687b      	ldr	r3, [r7, #4]
200073d6:	681b      	ldr	r3, [r3, #0]
200073d8:	68f9      	ldr	r1, [r7, #12]
200073da:	4618      	mov	r0, r3
200073dc:	f003 f9ce 	bl	2000a77c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
200073e0:	687b      	ldr	r3, [r7, #4]
200073e2:	2200      	movs	r2, #0
200073e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
200073e8:	2300      	movs	r3, #0
}
200073ea:	4618      	mov	r0, r3
200073ec:	3710      	adds	r7, #16
200073ee:	46bd      	mov	sp, r7
200073f0:	bd80      	pop	{r7, pc}

200073f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
200073f2:	b580      	push	{r7, lr}
200073f4:	b084      	sub	sp, #16
200073f6:	af00      	add	r7, sp, #0
200073f8:	6078      	str	r0, [r7, #4]
200073fa:	460b      	mov	r3, r1
200073fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
200073fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
20007402:	2b00      	cmp	r3, #0
20007404:	da0c      	bge.n	20007420 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20007406:	78fb      	ldrb	r3, [r7, #3]
20007408:	f003 020f 	and.w	r2, r3, #15
2000740c:	4613      	mov	r3, r2
2000740e:	00db      	lsls	r3, r3, #3
20007410:	4413      	add	r3, r2
20007412:	009b      	lsls	r3, r3, #2
20007414:	3310      	adds	r3, #16
20007416:	687a      	ldr	r2, [r7, #4]
20007418:	4413      	add	r3, r2
2000741a:	3304      	adds	r3, #4
2000741c:	60fb      	str	r3, [r7, #12]
2000741e:	e00c      	b.n	2000743a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20007420:	78fb      	ldrb	r3, [r7, #3]
20007422:	f003 020f 	and.w	r2, r3, #15
20007426:	4613      	mov	r3, r2
20007428:	00db      	lsls	r3, r3, #3
2000742a:	4413      	add	r3, r2
2000742c:	009b      	lsls	r3, r3, #2
2000742e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20007432:	687a      	ldr	r2, [r7, #4]
20007434:	4413      	add	r3, r2
20007436:	3304      	adds	r3, #4
20007438:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
2000743a:	687b      	ldr	r3, [r7, #4]
2000743c:	681b      	ldr	r3, [r3, #0]
2000743e:	68f9      	ldr	r1, [r7, #12]
20007440:	4618      	mov	r0, r3
20007442:	f002 ffed 	bl	2000a420 <USB_EPStopXfer>
20007446:	4603      	mov	r3, r0
20007448:	72fb      	strb	r3, [r7, #11]

  return ret;
2000744a:	7afb      	ldrb	r3, [r7, #11]
}
2000744c:	4618      	mov	r0, r3
2000744e:	3710      	adds	r7, #16
20007450:	46bd      	mov	sp, r7
20007452:	bd80      	pop	{r7, pc}

20007454 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20007454:	b580      	push	{r7, lr}
20007456:	b08a      	sub	sp, #40	@ 0x28
20007458:	af02      	add	r7, sp, #8
2000745a:	6078      	str	r0, [r7, #4]
2000745c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
2000745e:	687b      	ldr	r3, [r7, #4]
20007460:	681b      	ldr	r3, [r3, #0]
20007462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
20007464:	697b      	ldr	r3, [r7, #20]
20007466:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
20007468:	683a      	ldr	r2, [r7, #0]
2000746a:	4613      	mov	r3, r2
2000746c:	00db      	lsls	r3, r3, #3
2000746e:	4413      	add	r3, r2
20007470:	009b      	lsls	r3, r3, #2
20007472:	3310      	adds	r3, #16
20007474:	687a      	ldr	r2, [r7, #4]
20007476:	4413      	add	r3, r2
20007478:	3304      	adds	r3, #4
2000747a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
2000747c:	68fb      	ldr	r3, [r7, #12]
2000747e:	695a      	ldr	r2, [r3, #20]
20007480:	68fb      	ldr	r3, [r7, #12]
20007482:	691b      	ldr	r3, [r3, #16]
20007484:	429a      	cmp	r2, r3
20007486:	d901      	bls.n	2000748c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
20007488:	2301      	movs	r3, #1
2000748a:	e06b      	b.n	20007564 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
2000748c:	68fb      	ldr	r3, [r7, #12]
2000748e:	691a      	ldr	r2, [r3, #16]
20007490:	68fb      	ldr	r3, [r7, #12]
20007492:	695b      	ldr	r3, [r3, #20]
20007494:	1ad3      	subs	r3, r2, r3
20007496:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
20007498:	68fb      	ldr	r3, [r7, #12]
2000749a:	689b      	ldr	r3, [r3, #8]
2000749c:	69fa      	ldr	r2, [r7, #28]
2000749e:	429a      	cmp	r2, r3
200074a0:	d902      	bls.n	200074a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
200074a2:	68fb      	ldr	r3, [r7, #12]
200074a4:	689b      	ldr	r3, [r3, #8]
200074a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
200074a8:	69fb      	ldr	r3, [r7, #28]
200074aa:	3303      	adds	r3, #3
200074ac:	089b      	lsrs	r3, r3, #2
200074ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
200074b0:	e02a      	b.n	20007508 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
200074b2:	68fb      	ldr	r3, [r7, #12]
200074b4:	691a      	ldr	r2, [r3, #16]
200074b6:	68fb      	ldr	r3, [r7, #12]
200074b8:	695b      	ldr	r3, [r3, #20]
200074ba:	1ad3      	subs	r3, r2, r3
200074bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
200074be:	68fb      	ldr	r3, [r7, #12]
200074c0:	689b      	ldr	r3, [r3, #8]
200074c2:	69fa      	ldr	r2, [r7, #28]
200074c4:	429a      	cmp	r2, r3
200074c6:	d902      	bls.n	200074ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
200074c8:	68fb      	ldr	r3, [r7, #12]
200074ca:	689b      	ldr	r3, [r3, #8]
200074cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
200074ce:	69fb      	ldr	r3, [r7, #28]
200074d0:	3303      	adds	r3, #3
200074d2:	089b      	lsrs	r3, r3, #2
200074d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
200074d6:	68fb      	ldr	r3, [r7, #12]
200074d8:	68d9      	ldr	r1, [r3, #12]
200074da:	683b      	ldr	r3, [r7, #0]
200074dc:	b2da      	uxtb	r2, r3
200074de:	69fb      	ldr	r3, [r7, #28]
200074e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
200074e2:	687b      	ldr	r3, [r7, #4]
200074e4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
200074e6:	9300      	str	r3, [sp, #0]
200074e8:	4603      	mov	r3, r0
200074ea:	6978      	ldr	r0, [r7, #20]
200074ec:	f003 f842 	bl	2000a574 <USB_WritePacket>

    ep->xfer_buff  += len;
200074f0:	68fb      	ldr	r3, [r7, #12]
200074f2:	68da      	ldr	r2, [r3, #12]
200074f4:	69fb      	ldr	r3, [r7, #28]
200074f6:	441a      	add	r2, r3
200074f8:	68fb      	ldr	r3, [r7, #12]
200074fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
200074fc:	68fb      	ldr	r3, [r7, #12]
200074fe:	695a      	ldr	r2, [r3, #20]
20007500:	69fb      	ldr	r3, [r7, #28]
20007502:	441a      	add	r2, r3
20007504:	68fb      	ldr	r3, [r7, #12]
20007506:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20007508:	683b      	ldr	r3, [r7, #0]
2000750a:	015a      	lsls	r2, r3, #5
2000750c:	693b      	ldr	r3, [r7, #16]
2000750e:	4413      	add	r3, r2
20007510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20007514:	699b      	ldr	r3, [r3, #24]
20007516:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
20007518:	69ba      	ldr	r2, [r7, #24]
2000751a:	429a      	cmp	r2, r3
2000751c:	d809      	bhi.n	20007532 <PCD_WriteEmptyTxFifo+0xde>
2000751e:	68fb      	ldr	r3, [r7, #12]
20007520:	695a      	ldr	r2, [r3, #20]
20007522:	68fb      	ldr	r3, [r7, #12]
20007524:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20007526:	429a      	cmp	r2, r3
20007528:	d203      	bcs.n	20007532 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
2000752a:	68fb      	ldr	r3, [r7, #12]
2000752c:	691b      	ldr	r3, [r3, #16]
2000752e:	2b00      	cmp	r3, #0
20007530:	d1bf      	bne.n	200074b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
20007532:	68fb      	ldr	r3, [r7, #12]
20007534:	691a      	ldr	r2, [r3, #16]
20007536:	68fb      	ldr	r3, [r7, #12]
20007538:	695b      	ldr	r3, [r3, #20]
2000753a:	429a      	cmp	r2, r3
2000753c:	d811      	bhi.n	20007562 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
2000753e:	683b      	ldr	r3, [r7, #0]
20007540:	f003 030f 	and.w	r3, r3, #15
20007544:	2201      	movs	r2, #1
20007546:	fa02 f303 	lsl.w	r3, r2, r3
2000754a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
2000754c:	693b      	ldr	r3, [r7, #16]
2000754e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20007552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20007554:	68bb      	ldr	r3, [r7, #8]
20007556:	43db      	mvns	r3, r3
20007558:	6939      	ldr	r1, [r7, #16]
2000755a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000755e:	4013      	ands	r3, r2
20007560:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
20007562:	2300      	movs	r3, #0
}
20007564:	4618      	mov	r0, r3
20007566:	3720      	adds	r7, #32
20007568:	46bd      	mov	sp, r7
2000756a:	bd80      	pop	{r7, pc}

2000756c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
2000756c:	b580      	push	{r7, lr}
2000756e:	b088      	sub	sp, #32
20007570:	af00      	add	r7, sp, #0
20007572:	6078      	str	r0, [r7, #4]
20007574:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20007576:	687b      	ldr	r3, [r7, #4]
20007578:	681b      	ldr	r3, [r3, #0]
2000757a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000757c:	69fb      	ldr	r3, [r7, #28]
2000757e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20007580:	69fb      	ldr	r3, [r7, #28]
20007582:	333c      	adds	r3, #60	@ 0x3c
20007584:	3304      	adds	r3, #4
20007586:	681b      	ldr	r3, [r3, #0]
20007588:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
2000758a:	683b      	ldr	r3, [r7, #0]
2000758c:	015a      	lsls	r2, r3, #5
2000758e:	69bb      	ldr	r3, [r7, #24]
20007590:	4413      	add	r3, r2
20007592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007596:	689b      	ldr	r3, [r3, #8]
20007598:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
2000759a:	687b      	ldr	r3, [r7, #4]
2000759c:	799b      	ldrb	r3, [r3, #6]
2000759e:	2b01      	cmp	r3, #1
200075a0:	d17b      	bne.n	2000769a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
200075a2:	693b      	ldr	r3, [r7, #16]
200075a4:	f003 0308 	and.w	r3, r3, #8
200075a8:	2b00      	cmp	r3, #0
200075aa:	d015      	beq.n	200075d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200075ac:	697b      	ldr	r3, [r7, #20]
200075ae:	4a61      	ldr	r2, [pc, #388]	@ (20007734 <PCD_EP_OutXfrComplete_int+0x1c8>)
200075b0:	4293      	cmp	r3, r2
200075b2:	f240 80b9 	bls.w	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
200075b6:	693b      	ldr	r3, [r7, #16]
200075b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200075bc:	2b00      	cmp	r3, #0
200075be:	f000 80b3 	beq.w	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
200075c2:	683b      	ldr	r3, [r7, #0]
200075c4:	015a      	lsls	r2, r3, #5
200075c6:	69bb      	ldr	r3, [r7, #24]
200075c8:	4413      	add	r3, r2
200075ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200075ce:	461a      	mov	r2, r3
200075d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200075d4:	6093      	str	r3, [r2, #8]
200075d6:	e0a7      	b.n	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
200075d8:	693b      	ldr	r3, [r7, #16]
200075da:	f003 0320 	and.w	r3, r3, #32
200075de:	2b00      	cmp	r3, #0
200075e0:	d009      	beq.n	200075f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
200075e2:	683b      	ldr	r3, [r7, #0]
200075e4:	015a      	lsls	r2, r3, #5
200075e6:	69bb      	ldr	r3, [r7, #24]
200075e8:	4413      	add	r3, r2
200075ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200075ee:	461a      	mov	r2, r3
200075f0:	2320      	movs	r3, #32
200075f2:	6093      	str	r3, [r2, #8]
200075f4:	e098      	b.n	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
200075f6:	693b      	ldr	r3, [r7, #16]
200075f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
200075fc:	2b00      	cmp	r3, #0
200075fe:	f040 8093 	bne.w	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20007602:	697b      	ldr	r3, [r7, #20]
20007604:	4a4b      	ldr	r2, [pc, #300]	@ (20007734 <PCD_EP_OutXfrComplete_int+0x1c8>)
20007606:	4293      	cmp	r3, r2
20007608:	d90f      	bls.n	2000762a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
2000760a:	693b      	ldr	r3, [r7, #16]
2000760c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20007610:	2b00      	cmp	r3, #0
20007612:	d00a      	beq.n	2000762a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20007614:	683b      	ldr	r3, [r7, #0]
20007616:	015a      	lsls	r2, r3, #5
20007618:	69bb      	ldr	r3, [r7, #24]
2000761a:	4413      	add	r3, r2
2000761c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007620:	461a      	mov	r2, r3
20007622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20007626:	6093      	str	r3, [r2, #8]
20007628:	e07e      	b.n	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
2000762a:	683a      	ldr	r2, [r7, #0]
2000762c:	4613      	mov	r3, r2
2000762e:	00db      	lsls	r3, r3, #3
20007630:	4413      	add	r3, r2
20007632:	009b      	lsls	r3, r3, #2
20007634:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20007638:	687a      	ldr	r2, [r7, #4]
2000763a:	4413      	add	r3, r2
2000763c:	3304      	adds	r3, #4
2000763e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
20007640:	68fb      	ldr	r3, [r7, #12]
20007642:	6a1a      	ldr	r2, [r3, #32]
20007644:	683b      	ldr	r3, [r7, #0]
20007646:	0159      	lsls	r1, r3, #5
20007648:	69bb      	ldr	r3, [r7, #24]
2000764a:	440b      	add	r3, r1
2000764c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007650:	691b      	ldr	r3, [r3, #16]
20007652:	f3c3 0312 	ubfx	r3, r3, #0, #19
20007656:	1ad2      	subs	r2, r2, r3
20007658:	68fb      	ldr	r3, [r7, #12]
2000765a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
2000765c:	683b      	ldr	r3, [r7, #0]
2000765e:	2b00      	cmp	r3, #0
20007660:	d114      	bne.n	2000768c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
20007662:	68fb      	ldr	r3, [r7, #12]
20007664:	691b      	ldr	r3, [r3, #16]
20007666:	2b00      	cmp	r3, #0
20007668:	d109      	bne.n	2000767e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
2000766a:	687b      	ldr	r3, [r7, #4]
2000766c:	6818      	ldr	r0, [r3, #0]
2000766e:	687b      	ldr	r3, [r7, #4]
20007670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20007674:	461a      	mov	r2, r3
20007676:	2101      	movs	r1, #1
20007678:	f003 fa14 	bl	2000aaa4 <USB_EP0_OutStart>
2000767c:	e006      	b.n	2000768c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
2000767e:	68fb      	ldr	r3, [r7, #12]
20007680:	68da      	ldr	r2, [r3, #12]
20007682:	68fb      	ldr	r3, [r7, #12]
20007684:	695b      	ldr	r3, [r3, #20]
20007686:	441a      	add	r2, r3
20007688:	68fb      	ldr	r3, [r7, #12]
2000768a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
2000768c:	683b      	ldr	r3, [r7, #0]
2000768e:	b2db      	uxtb	r3, r3
20007690:	4619      	mov	r1, r3
20007692:	6878      	ldr	r0, [r7, #4]
20007694:	f005 fbe0 	bl	2000ce58 <HAL_PCD_DataOutStageCallback>
20007698:	e046      	b.n	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
2000769a:	697b      	ldr	r3, [r7, #20]
2000769c:	4a26      	ldr	r2, [pc, #152]	@ (20007738 <PCD_EP_OutXfrComplete_int+0x1cc>)
2000769e:	4293      	cmp	r3, r2
200076a0:	d124      	bne.n	200076ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
200076a2:	693b      	ldr	r3, [r7, #16]
200076a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
200076a8:	2b00      	cmp	r3, #0
200076aa:	d00a      	beq.n	200076c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
200076ac:	683b      	ldr	r3, [r7, #0]
200076ae:	015a      	lsls	r2, r3, #5
200076b0:	69bb      	ldr	r3, [r7, #24]
200076b2:	4413      	add	r3, r2
200076b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200076b8:	461a      	mov	r2, r3
200076ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200076be:	6093      	str	r3, [r2, #8]
200076c0:	e032      	b.n	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
200076c2:	693b      	ldr	r3, [r7, #16]
200076c4:	f003 0320 	and.w	r3, r3, #32
200076c8:	2b00      	cmp	r3, #0
200076ca:	d008      	beq.n	200076de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
200076cc:	683b      	ldr	r3, [r7, #0]
200076ce:	015a      	lsls	r2, r3, #5
200076d0:	69bb      	ldr	r3, [r7, #24]
200076d2:	4413      	add	r3, r2
200076d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200076d8:	461a      	mov	r2, r3
200076da:	2320      	movs	r3, #32
200076dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
200076de:	683b      	ldr	r3, [r7, #0]
200076e0:	b2db      	uxtb	r3, r3
200076e2:	4619      	mov	r1, r3
200076e4:	6878      	ldr	r0, [r7, #4]
200076e6:	f005 fbb7 	bl	2000ce58 <HAL_PCD_DataOutStageCallback>
200076ea:	e01d      	b.n	20007728 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
200076ec:	683b      	ldr	r3, [r7, #0]
200076ee:	2b00      	cmp	r3, #0
200076f0:	d114      	bne.n	2000771c <PCD_EP_OutXfrComplete_int+0x1b0>
200076f2:	6879      	ldr	r1, [r7, #4]
200076f4:	683a      	ldr	r2, [r7, #0]
200076f6:	4613      	mov	r3, r2
200076f8:	00db      	lsls	r3, r3, #3
200076fa:	4413      	add	r3, r2
200076fc:	009b      	lsls	r3, r3, #2
200076fe:	440b      	add	r3, r1
20007700:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20007704:	681b      	ldr	r3, [r3, #0]
20007706:	2b00      	cmp	r3, #0
20007708:	d108      	bne.n	2000771c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
2000770a:	687b      	ldr	r3, [r7, #4]
2000770c:	6818      	ldr	r0, [r3, #0]
2000770e:	687b      	ldr	r3, [r7, #4]
20007710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20007714:	461a      	mov	r2, r3
20007716:	2100      	movs	r1, #0
20007718:	f003 f9c4 	bl	2000aaa4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
2000771c:	683b      	ldr	r3, [r7, #0]
2000771e:	b2db      	uxtb	r3, r3
20007720:	4619      	mov	r1, r3
20007722:	6878      	ldr	r0, [r7, #4]
20007724:	f005 fb98 	bl	2000ce58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
20007728:	2300      	movs	r3, #0
}
2000772a:	4618      	mov	r0, r3
2000772c:	3720      	adds	r7, #32
2000772e:	46bd      	mov	sp, r7
20007730:	bd80      	pop	{r7, pc}
20007732:	bf00      	nop
20007734:	4f54300a 	.word	0x4f54300a
20007738:	4f54310a 	.word	0x4f54310a

2000773c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
2000773c:	b580      	push	{r7, lr}
2000773e:	b086      	sub	sp, #24
20007740:	af00      	add	r7, sp, #0
20007742:	6078      	str	r0, [r7, #4]
20007744:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20007746:	687b      	ldr	r3, [r7, #4]
20007748:	681b      	ldr	r3, [r3, #0]
2000774a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000774c:	697b      	ldr	r3, [r7, #20]
2000774e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20007750:	697b      	ldr	r3, [r7, #20]
20007752:	333c      	adds	r3, #60	@ 0x3c
20007754:	3304      	adds	r3, #4
20007756:	681b      	ldr	r3, [r3, #0]
20007758:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
2000775a:	683b      	ldr	r3, [r7, #0]
2000775c:	015a      	lsls	r2, r3, #5
2000775e:	693b      	ldr	r3, [r7, #16]
20007760:	4413      	add	r3, r2
20007762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007766:	689b      	ldr	r3, [r3, #8]
20007768:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
2000776a:	68fb      	ldr	r3, [r7, #12]
2000776c:	4a15      	ldr	r2, [pc, #84]	@ (200077c4 <PCD_EP_OutSetupPacket_int+0x88>)
2000776e:	4293      	cmp	r3, r2
20007770:	d90e      	bls.n	20007790 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
20007772:	68bb      	ldr	r3, [r7, #8]
20007774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20007778:	2b00      	cmp	r3, #0
2000777a:	d009      	beq.n	20007790 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
2000777c:	683b      	ldr	r3, [r7, #0]
2000777e:	015a      	lsls	r2, r3, #5
20007780:	693b      	ldr	r3, [r7, #16]
20007782:	4413      	add	r3, r2
20007784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007788:	461a      	mov	r2, r3
2000778a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
2000778e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
20007790:	6878      	ldr	r0, [r7, #4]
20007792:	f005 fb4f 	bl	2000ce34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
20007796:	68fb      	ldr	r3, [r7, #12]
20007798:	4a0a      	ldr	r2, [pc, #40]	@ (200077c4 <PCD_EP_OutSetupPacket_int+0x88>)
2000779a:	4293      	cmp	r3, r2
2000779c:	d90c      	bls.n	200077b8 <PCD_EP_OutSetupPacket_int+0x7c>
2000779e:	687b      	ldr	r3, [r7, #4]
200077a0:	799b      	ldrb	r3, [r3, #6]
200077a2:	2b01      	cmp	r3, #1
200077a4:	d108      	bne.n	200077b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
200077a6:	687b      	ldr	r3, [r7, #4]
200077a8:	6818      	ldr	r0, [r3, #0]
200077aa:	687b      	ldr	r3, [r7, #4]
200077ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
200077b0:	461a      	mov	r2, r3
200077b2:	2101      	movs	r1, #1
200077b4:	f003 f976 	bl	2000aaa4 <USB_EP0_OutStart>
  }

  return HAL_OK;
200077b8:	2300      	movs	r3, #0
}
200077ba:	4618      	mov	r0, r3
200077bc:	3718      	adds	r7, #24
200077be:	46bd      	mov	sp, r7
200077c0:	bd80      	pop	{r7, pc}
200077c2:	bf00      	nop
200077c4:	4f54300a 	.word	0x4f54300a

200077c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
200077c8:	b480      	push	{r7}
200077ca:	b085      	sub	sp, #20
200077cc:	af00      	add	r7, sp, #0
200077ce:	6078      	str	r0, [r7, #4]
200077d0:	460b      	mov	r3, r1
200077d2:	70fb      	strb	r3, [r7, #3]
200077d4:	4613      	mov	r3, r2
200077d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
200077d8:	687b      	ldr	r3, [r7, #4]
200077da:	681b      	ldr	r3, [r3, #0]
200077dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200077de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
200077e0:	78fb      	ldrb	r3, [r7, #3]
200077e2:	2b00      	cmp	r3, #0
200077e4:	d107      	bne.n	200077f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
200077e6:	883b      	ldrh	r3, [r7, #0]
200077e8:	0419      	lsls	r1, r3, #16
200077ea:	687b      	ldr	r3, [r7, #4]
200077ec:	681b      	ldr	r3, [r3, #0]
200077ee:	68ba      	ldr	r2, [r7, #8]
200077f0:	430a      	orrs	r2, r1
200077f2:	629a      	str	r2, [r3, #40]	@ 0x28
200077f4:	e028      	b.n	20007848 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
200077f6:	687b      	ldr	r3, [r7, #4]
200077f8:	681b      	ldr	r3, [r3, #0]
200077fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200077fc:	0c1b      	lsrs	r3, r3, #16
200077fe:	68ba      	ldr	r2, [r7, #8]
20007800:	4413      	add	r3, r2
20007802:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20007804:	2300      	movs	r3, #0
20007806:	73fb      	strb	r3, [r7, #15]
20007808:	e00d      	b.n	20007826 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
2000780a:	687b      	ldr	r3, [r7, #4]
2000780c:	681a      	ldr	r2, [r3, #0]
2000780e:	7bfb      	ldrb	r3, [r7, #15]
20007810:	3340      	adds	r3, #64	@ 0x40
20007812:	009b      	lsls	r3, r3, #2
20007814:	4413      	add	r3, r2
20007816:	685b      	ldr	r3, [r3, #4]
20007818:	0c1b      	lsrs	r3, r3, #16
2000781a:	68ba      	ldr	r2, [r7, #8]
2000781c:	4413      	add	r3, r2
2000781e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20007820:	7bfb      	ldrb	r3, [r7, #15]
20007822:	3301      	adds	r3, #1
20007824:	73fb      	strb	r3, [r7, #15]
20007826:	7bfa      	ldrb	r2, [r7, #15]
20007828:	78fb      	ldrb	r3, [r7, #3]
2000782a:	3b01      	subs	r3, #1
2000782c:	429a      	cmp	r2, r3
2000782e:	d3ec      	bcc.n	2000780a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
20007830:	883b      	ldrh	r3, [r7, #0]
20007832:	0418      	lsls	r0, r3, #16
20007834:	687b      	ldr	r3, [r7, #4]
20007836:	6819      	ldr	r1, [r3, #0]
20007838:	78fb      	ldrb	r3, [r7, #3]
2000783a:	3b01      	subs	r3, #1
2000783c:	68ba      	ldr	r2, [r7, #8]
2000783e:	4302      	orrs	r2, r0
20007840:	3340      	adds	r3, #64	@ 0x40
20007842:	009b      	lsls	r3, r3, #2
20007844:	440b      	add	r3, r1
20007846:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
20007848:	2300      	movs	r3, #0
}
2000784a:	4618      	mov	r0, r3
2000784c:	3714      	adds	r7, #20
2000784e:	46bd      	mov	sp, r7
20007850:	f85d 7b04 	ldr.w	r7, [sp], #4
20007854:	4770      	bx	lr

20007856 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
20007856:	b480      	push	{r7}
20007858:	b083      	sub	sp, #12
2000785a:	af00      	add	r7, sp, #0
2000785c:	6078      	str	r0, [r7, #4]
2000785e:	460b      	mov	r3, r1
20007860:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
20007862:	687b      	ldr	r3, [r7, #4]
20007864:	681b      	ldr	r3, [r3, #0]
20007866:	887a      	ldrh	r2, [r7, #2]
20007868:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
2000786a:	2300      	movs	r3, #0
}
2000786c:	4618      	mov	r0, r3
2000786e:	370c      	adds	r7, #12
20007870:	46bd      	mov	sp, r7
20007872:	f85d 7b04 	ldr.w	r7, [sp], #4
20007876:	4770      	bx	lr

20007878 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
20007878:	b480      	push	{r7}
2000787a:	b085      	sub	sp, #20
2000787c:	af00      	add	r7, sp, #0
2000787e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20007880:	687b      	ldr	r3, [r7, #4]
20007882:	681b      	ldr	r3, [r3, #0]
20007884:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
20007886:	687b      	ldr	r3, [r7, #4]
20007888:	2201      	movs	r2, #1
2000788a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
2000788e:	687b      	ldr	r3, [r7, #4]
20007890:	2200      	movs	r2, #0
20007892:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
20007896:	68fb      	ldr	r3, [r7, #12]
20007898:	699b      	ldr	r3, [r3, #24]
2000789a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
2000789e:	68fb      	ldr	r3, [r7, #12]
200078a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
200078a2:	68fb      	ldr	r3, [r7, #12]
200078a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
200078a6:	4b05      	ldr	r3, [pc, #20]	@ (200078bc <HAL_PCDEx_ActivateLPM+0x44>)
200078a8:	4313      	orrs	r3, r2
200078aa:	68fa      	ldr	r2, [r7, #12]
200078ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
200078ae:	2300      	movs	r3, #0
}
200078b0:	4618      	mov	r0, r3
200078b2:	3714      	adds	r7, #20
200078b4:	46bd      	mov	sp, r7
200078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200078ba:	4770      	bx	lr
200078bc:	10000003 	.word	0x10000003

200078c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
200078c0:	b480      	push	{r7}
200078c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
200078c4:	4b05      	ldr	r3, [pc, #20]	@ (200078dc <HAL_PWR_EnableBkUpAccess+0x1c>)
200078c6:	681b      	ldr	r3, [r3, #0]
200078c8:	4a04      	ldr	r2, [pc, #16]	@ (200078dc <HAL_PWR_EnableBkUpAccess+0x1c>)
200078ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200078ce:	6013      	str	r3, [r2, #0]
}
200078d0:	bf00      	nop
200078d2:	46bd      	mov	sp, r7
200078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200078d8:	4770      	bx	lr
200078da:	bf00      	nop
200078dc:	40007000 	.word	0x40007000

200078e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
200078e0:	b580      	push	{r7, lr}
200078e2:	b082      	sub	sp, #8
200078e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
200078e6:	2300      	movs	r3, #0
200078e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
200078ea:	4b23      	ldr	r3, [pc, #140]	@ (20007978 <HAL_PWREx_EnableOverDrive+0x98>)
200078ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200078ee:	4a22      	ldr	r2, [pc, #136]	@ (20007978 <HAL_PWREx_EnableOverDrive+0x98>)
200078f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200078f4:	6413      	str	r3, [r2, #64]	@ 0x40
200078f6:	4b20      	ldr	r3, [pc, #128]	@ (20007978 <HAL_PWREx_EnableOverDrive+0x98>)
200078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200078fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200078fe:	603b      	str	r3, [r7, #0]
20007900:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20007902:	4b1e      	ldr	r3, [pc, #120]	@ (2000797c <HAL_PWREx_EnableOverDrive+0x9c>)
20007904:	681b      	ldr	r3, [r3, #0]
20007906:	4a1d      	ldr	r2, [pc, #116]	@ (2000797c <HAL_PWREx_EnableOverDrive+0x9c>)
20007908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000790c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000790e:	f7fd fedf 	bl	200056d0 <HAL_GetTick>
20007912:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007914:	e009      	b.n	2000792a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20007916:	f7fd fedb 	bl	200056d0 <HAL_GetTick>
2000791a:	4602      	mov	r2, r0
2000791c:	687b      	ldr	r3, [r7, #4]
2000791e:	1ad3      	subs	r3, r2, r3
20007920:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20007924:	d901      	bls.n	2000792a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
20007926:	2303      	movs	r3, #3
20007928:	e022      	b.n	20007970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000792a:	4b14      	ldr	r3, [pc, #80]	@ (2000797c <HAL_PWREx_EnableOverDrive+0x9c>)
2000792c:	685b      	ldr	r3, [r3, #4]
2000792e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20007932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20007936:	d1ee      	bne.n	20007916 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20007938:	4b10      	ldr	r3, [pc, #64]	@ (2000797c <HAL_PWREx_EnableOverDrive+0x9c>)
2000793a:	681b      	ldr	r3, [r3, #0]
2000793c:	4a0f      	ldr	r2, [pc, #60]	@ (2000797c <HAL_PWREx_EnableOverDrive+0x9c>)
2000793e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20007942:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20007944:	f7fd fec4 	bl	200056d0 <HAL_GetTick>
20007948:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000794a:	e009      	b.n	20007960 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000794c:	f7fd fec0 	bl	200056d0 <HAL_GetTick>
20007950:	4602      	mov	r2, r0
20007952:	687b      	ldr	r3, [r7, #4]
20007954:	1ad3      	subs	r3, r2, r3
20007956:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
2000795a:	d901      	bls.n	20007960 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
2000795c:	2303      	movs	r3, #3
2000795e:	e007      	b.n	20007970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007960:	4b06      	ldr	r3, [pc, #24]	@ (2000797c <HAL_PWREx_EnableOverDrive+0x9c>)
20007962:	685b      	ldr	r3, [r3, #4]
20007964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20007968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2000796c:	d1ee      	bne.n	2000794c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
2000796e:	2300      	movs	r3, #0
}
20007970:	4618      	mov	r0, r3
20007972:	3708      	adds	r7, #8
20007974:	46bd      	mov	sp, r7
20007976:	bd80      	pop	{r7, pc}
20007978:	40023800 	.word	0x40023800
2000797c:	40007000 	.word	0x40007000

20007980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20007980:	b580      	push	{r7, lr}
20007982:	b086      	sub	sp, #24
20007984:	af00      	add	r7, sp, #0
20007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
20007988:	2300      	movs	r3, #0
2000798a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
2000798c:	687b      	ldr	r3, [r7, #4]
2000798e:	2b00      	cmp	r3, #0
20007990:	d101      	bne.n	20007996 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
20007992:	2301      	movs	r3, #1
20007994:	e291      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20007996:	687b      	ldr	r3, [r7, #4]
20007998:	681b      	ldr	r3, [r3, #0]
2000799a:	f003 0301 	and.w	r3, r3, #1
2000799e:	2b00      	cmp	r3, #0
200079a0:	f000 8087 	beq.w	20007ab2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
200079a4:	4b96      	ldr	r3, [pc, #600]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
200079a6:	689b      	ldr	r3, [r3, #8]
200079a8:	f003 030c 	and.w	r3, r3, #12
200079ac:	2b04      	cmp	r3, #4
200079ae:	d00c      	beq.n	200079ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200079b0:	4b93      	ldr	r3, [pc, #588]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
200079b2:	689b      	ldr	r3, [r3, #8]
200079b4:	f003 030c 	and.w	r3, r3, #12
200079b8:	2b08      	cmp	r3, #8
200079ba:	d112      	bne.n	200079e2 <HAL_RCC_OscConfig+0x62>
200079bc:	4b90      	ldr	r3, [pc, #576]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
200079be:	685b      	ldr	r3, [r3, #4]
200079c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200079c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200079c8:	d10b      	bne.n	200079e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200079ca:	4b8d      	ldr	r3, [pc, #564]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
200079cc:	681b      	ldr	r3, [r3, #0]
200079ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200079d2:	2b00      	cmp	r3, #0
200079d4:	d06c      	beq.n	20007ab0 <HAL_RCC_OscConfig+0x130>
200079d6:	687b      	ldr	r3, [r7, #4]
200079d8:	685b      	ldr	r3, [r3, #4]
200079da:	2b00      	cmp	r3, #0
200079dc:	d168      	bne.n	20007ab0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
200079de:	2301      	movs	r3, #1
200079e0:	e26b      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
200079e2:	687b      	ldr	r3, [r7, #4]
200079e4:	685b      	ldr	r3, [r3, #4]
200079e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200079ea:	d106      	bne.n	200079fa <HAL_RCC_OscConfig+0x7a>
200079ec:	4b84      	ldr	r3, [pc, #528]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
200079ee:	681b      	ldr	r3, [r3, #0]
200079f0:	4a83      	ldr	r2, [pc, #524]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
200079f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200079f6:	6013      	str	r3, [r2, #0]
200079f8:	e02e      	b.n	20007a58 <HAL_RCC_OscConfig+0xd8>
200079fa:	687b      	ldr	r3, [r7, #4]
200079fc:	685b      	ldr	r3, [r3, #4]
200079fe:	2b00      	cmp	r3, #0
20007a00:	d10c      	bne.n	20007a1c <HAL_RCC_OscConfig+0x9c>
20007a02:	4b7f      	ldr	r3, [pc, #508]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a04:	681b      	ldr	r3, [r3, #0]
20007a06:	4a7e      	ldr	r2, [pc, #504]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20007a0c:	6013      	str	r3, [r2, #0]
20007a0e:	4b7c      	ldr	r3, [pc, #496]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a10:	681b      	ldr	r3, [r3, #0]
20007a12:	4a7b      	ldr	r2, [pc, #492]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20007a18:	6013      	str	r3, [r2, #0]
20007a1a:	e01d      	b.n	20007a58 <HAL_RCC_OscConfig+0xd8>
20007a1c:	687b      	ldr	r3, [r7, #4]
20007a1e:	685b      	ldr	r3, [r3, #4]
20007a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20007a24:	d10c      	bne.n	20007a40 <HAL_RCC_OscConfig+0xc0>
20007a26:	4b76      	ldr	r3, [pc, #472]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a28:	681b      	ldr	r3, [r3, #0]
20007a2a:	4a75      	ldr	r2, [pc, #468]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20007a30:	6013      	str	r3, [r2, #0]
20007a32:	4b73      	ldr	r3, [pc, #460]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a34:	681b      	ldr	r3, [r3, #0]
20007a36:	4a72      	ldr	r2, [pc, #456]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20007a3c:	6013      	str	r3, [r2, #0]
20007a3e:	e00b      	b.n	20007a58 <HAL_RCC_OscConfig+0xd8>
20007a40:	4b6f      	ldr	r3, [pc, #444]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a42:	681b      	ldr	r3, [r3, #0]
20007a44:	4a6e      	ldr	r2, [pc, #440]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20007a4a:	6013      	str	r3, [r2, #0]
20007a4c:	4b6c      	ldr	r3, [pc, #432]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a4e:	681b      	ldr	r3, [r3, #0]
20007a50:	4a6b      	ldr	r2, [pc, #428]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20007a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
20007a58:	687b      	ldr	r3, [r7, #4]
20007a5a:	685b      	ldr	r3, [r3, #4]
20007a5c:	2b00      	cmp	r3, #0
20007a5e:	d013      	beq.n	20007a88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007a60:	f7fd fe36 	bl	200056d0 <HAL_GetTick>
20007a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20007a66:	e008      	b.n	20007a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20007a68:	f7fd fe32 	bl	200056d0 <HAL_GetTick>
20007a6c:	4602      	mov	r2, r0
20007a6e:	693b      	ldr	r3, [r7, #16]
20007a70:	1ad3      	subs	r3, r2, r3
20007a72:	2b64      	cmp	r3, #100	@ 0x64
20007a74:	d901      	bls.n	20007a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20007a76:	2303      	movs	r3, #3
20007a78:	e21f      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20007a7a:	4b61      	ldr	r3, [pc, #388]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007a7c:	681b      	ldr	r3, [r3, #0]
20007a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20007a82:	2b00      	cmp	r3, #0
20007a84:	d0f0      	beq.n	20007a68 <HAL_RCC_OscConfig+0xe8>
20007a86:	e014      	b.n	20007ab2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007a88:	f7fd fe22 	bl	200056d0 <HAL_GetTick>
20007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20007a8e:	e008      	b.n	20007aa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20007a90:	f7fd fe1e 	bl	200056d0 <HAL_GetTick>
20007a94:	4602      	mov	r2, r0
20007a96:	693b      	ldr	r3, [r7, #16]
20007a98:	1ad3      	subs	r3, r2, r3
20007a9a:	2b64      	cmp	r3, #100	@ 0x64
20007a9c:	d901      	bls.n	20007aa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
20007a9e:	2303      	movs	r3, #3
20007aa0:	e20b      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20007aa2:	4b57      	ldr	r3, [pc, #348]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007aa4:	681b      	ldr	r3, [r3, #0]
20007aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20007aaa:	2b00      	cmp	r3, #0
20007aac:	d1f0      	bne.n	20007a90 <HAL_RCC_OscConfig+0x110>
20007aae:	e000      	b.n	20007ab2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20007ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20007ab2:	687b      	ldr	r3, [r7, #4]
20007ab4:	681b      	ldr	r3, [r3, #0]
20007ab6:	f003 0302 	and.w	r3, r3, #2
20007aba:	2b00      	cmp	r3, #0
20007abc:	d069      	beq.n	20007b92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
20007abe:	4b50      	ldr	r3, [pc, #320]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007ac0:	689b      	ldr	r3, [r3, #8]
20007ac2:	f003 030c 	and.w	r3, r3, #12
20007ac6:	2b00      	cmp	r3, #0
20007ac8:	d00b      	beq.n	20007ae2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20007aca:	4b4d      	ldr	r3, [pc, #308]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007acc:	689b      	ldr	r3, [r3, #8]
20007ace:	f003 030c 	and.w	r3, r3, #12
20007ad2:	2b08      	cmp	r3, #8
20007ad4:	d11c      	bne.n	20007b10 <HAL_RCC_OscConfig+0x190>
20007ad6:	4b4a      	ldr	r3, [pc, #296]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007ad8:	685b      	ldr	r3, [r3, #4]
20007ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20007ade:	2b00      	cmp	r3, #0
20007ae0:	d116      	bne.n	20007b10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20007ae2:	4b47      	ldr	r3, [pc, #284]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007ae4:	681b      	ldr	r3, [r3, #0]
20007ae6:	f003 0302 	and.w	r3, r3, #2
20007aea:	2b00      	cmp	r3, #0
20007aec:	d005      	beq.n	20007afa <HAL_RCC_OscConfig+0x17a>
20007aee:	687b      	ldr	r3, [r7, #4]
20007af0:	68db      	ldr	r3, [r3, #12]
20007af2:	2b01      	cmp	r3, #1
20007af4:	d001      	beq.n	20007afa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
20007af6:	2301      	movs	r3, #1
20007af8:	e1df      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20007afa:	4b41      	ldr	r3, [pc, #260]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007afc:	681b      	ldr	r3, [r3, #0]
20007afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20007b02:	687b      	ldr	r3, [r7, #4]
20007b04:	691b      	ldr	r3, [r3, #16]
20007b06:	00db      	lsls	r3, r3, #3
20007b08:	493d      	ldr	r1, [pc, #244]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b0a:	4313      	orrs	r3, r2
20007b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20007b0e:	e040      	b.n	20007b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
20007b10:	687b      	ldr	r3, [r7, #4]
20007b12:	68db      	ldr	r3, [r3, #12]
20007b14:	2b00      	cmp	r3, #0
20007b16:	d023      	beq.n	20007b60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20007b18:	4b39      	ldr	r3, [pc, #228]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b1a:	681b      	ldr	r3, [r3, #0]
20007b1c:	4a38      	ldr	r2, [pc, #224]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b1e:	f043 0301 	orr.w	r3, r3, #1
20007b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007b24:	f7fd fdd4 	bl	200056d0 <HAL_GetTick>
20007b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20007b2a:	e008      	b.n	20007b3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20007b2c:	f7fd fdd0 	bl	200056d0 <HAL_GetTick>
20007b30:	4602      	mov	r2, r0
20007b32:	693b      	ldr	r3, [r7, #16]
20007b34:	1ad3      	subs	r3, r2, r3
20007b36:	2b02      	cmp	r3, #2
20007b38:	d901      	bls.n	20007b3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
20007b3a:	2303      	movs	r3, #3
20007b3c:	e1bd      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20007b3e:	4b30      	ldr	r3, [pc, #192]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b40:	681b      	ldr	r3, [r3, #0]
20007b42:	f003 0302 	and.w	r3, r3, #2
20007b46:	2b00      	cmp	r3, #0
20007b48:	d0f0      	beq.n	20007b2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20007b4a:	4b2d      	ldr	r3, [pc, #180]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b4c:	681b      	ldr	r3, [r3, #0]
20007b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20007b52:	687b      	ldr	r3, [r7, #4]
20007b54:	691b      	ldr	r3, [r3, #16]
20007b56:	00db      	lsls	r3, r3, #3
20007b58:	4929      	ldr	r1, [pc, #164]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b5a:	4313      	orrs	r3, r2
20007b5c:	600b      	str	r3, [r1, #0]
20007b5e:	e018      	b.n	20007b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20007b60:	4b27      	ldr	r3, [pc, #156]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b62:	681b      	ldr	r3, [r3, #0]
20007b64:	4a26      	ldr	r2, [pc, #152]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b66:	f023 0301 	bic.w	r3, r3, #1
20007b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007b6c:	f7fd fdb0 	bl	200056d0 <HAL_GetTick>
20007b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20007b72:	e008      	b.n	20007b86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20007b74:	f7fd fdac 	bl	200056d0 <HAL_GetTick>
20007b78:	4602      	mov	r2, r0
20007b7a:	693b      	ldr	r3, [r7, #16]
20007b7c:	1ad3      	subs	r3, r2, r3
20007b7e:	2b02      	cmp	r3, #2
20007b80:	d901      	bls.n	20007b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
20007b82:	2303      	movs	r3, #3
20007b84:	e199      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20007b86:	4b1e      	ldr	r3, [pc, #120]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007b88:	681b      	ldr	r3, [r3, #0]
20007b8a:	f003 0302 	and.w	r3, r3, #2
20007b8e:	2b00      	cmp	r3, #0
20007b90:	d1f0      	bne.n	20007b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20007b92:	687b      	ldr	r3, [r7, #4]
20007b94:	681b      	ldr	r3, [r3, #0]
20007b96:	f003 0308 	and.w	r3, r3, #8
20007b9a:	2b00      	cmp	r3, #0
20007b9c:	d038      	beq.n	20007c10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
20007b9e:	687b      	ldr	r3, [r7, #4]
20007ba0:	695b      	ldr	r3, [r3, #20]
20007ba2:	2b00      	cmp	r3, #0
20007ba4:	d019      	beq.n	20007bda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20007ba6:	4b16      	ldr	r3, [pc, #88]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007baa:	4a15      	ldr	r2, [pc, #84]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007bac:	f043 0301 	orr.w	r3, r3, #1
20007bb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20007bb2:	f7fd fd8d 	bl	200056d0 <HAL_GetTick>
20007bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20007bb8:	e008      	b.n	20007bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20007bba:	f7fd fd89 	bl	200056d0 <HAL_GetTick>
20007bbe:	4602      	mov	r2, r0
20007bc0:	693b      	ldr	r3, [r7, #16]
20007bc2:	1ad3      	subs	r3, r2, r3
20007bc4:	2b02      	cmp	r3, #2
20007bc6:	d901      	bls.n	20007bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20007bc8:	2303      	movs	r3, #3
20007bca:	e176      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20007bcc:	4b0c      	ldr	r3, [pc, #48]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007bd0:	f003 0302 	and.w	r3, r3, #2
20007bd4:	2b00      	cmp	r3, #0
20007bd6:	d0f0      	beq.n	20007bba <HAL_RCC_OscConfig+0x23a>
20007bd8:	e01a      	b.n	20007c10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20007bda:	4b09      	ldr	r3, [pc, #36]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007bde:	4a08      	ldr	r2, [pc, #32]	@ (20007c00 <HAL_RCC_OscConfig+0x280>)
20007be0:	f023 0301 	bic.w	r3, r3, #1
20007be4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20007be6:	f7fd fd73 	bl	200056d0 <HAL_GetTick>
20007bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20007bec:	e00a      	b.n	20007c04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20007bee:	f7fd fd6f 	bl	200056d0 <HAL_GetTick>
20007bf2:	4602      	mov	r2, r0
20007bf4:	693b      	ldr	r3, [r7, #16]
20007bf6:	1ad3      	subs	r3, r2, r3
20007bf8:	2b02      	cmp	r3, #2
20007bfa:	d903      	bls.n	20007c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
20007bfc:	2303      	movs	r3, #3
20007bfe:	e15c      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
20007c00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20007c04:	4b91      	ldr	r3, [pc, #580]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007c08:	f003 0302 	and.w	r3, r3, #2
20007c0c:	2b00      	cmp	r3, #0
20007c0e:	d1ee      	bne.n	20007bee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20007c10:	687b      	ldr	r3, [r7, #4]
20007c12:	681b      	ldr	r3, [r3, #0]
20007c14:	f003 0304 	and.w	r3, r3, #4
20007c18:	2b00      	cmp	r3, #0
20007c1a:	f000 80a4 	beq.w	20007d66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
20007c1e:	4b8b      	ldr	r3, [pc, #556]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20007c26:	2b00      	cmp	r3, #0
20007c28:	d10d      	bne.n	20007c46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
20007c2a:	4b88      	ldr	r3, [pc, #544]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007c2e:	4a87      	ldr	r2, [pc, #540]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20007c34:	6413      	str	r3, [r2, #64]	@ 0x40
20007c36:	4b85      	ldr	r3, [pc, #532]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20007c3e:	60bb      	str	r3, [r7, #8]
20007c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20007c42:	2301      	movs	r3, #1
20007c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20007c46:	4b82      	ldr	r3, [pc, #520]	@ (20007e50 <HAL_RCC_OscConfig+0x4d0>)
20007c48:	681b      	ldr	r3, [r3, #0]
20007c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20007c4e:	2b00      	cmp	r3, #0
20007c50:	d118      	bne.n	20007c84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
20007c52:	4b7f      	ldr	r3, [pc, #508]	@ (20007e50 <HAL_RCC_OscConfig+0x4d0>)
20007c54:	681b      	ldr	r3, [r3, #0]
20007c56:	4a7e      	ldr	r2, [pc, #504]	@ (20007e50 <HAL_RCC_OscConfig+0x4d0>)
20007c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20007c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20007c5e:	f7fd fd37 	bl	200056d0 <HAL_GetTick>
20007c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20007c64:	e008      	b.n	20007c78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20007c66:	f7fd fd33 	bl	200056d0 <HAL_GetTick>
20007c6a:	4602      	mov	r2, r0
20007c6c:	693b      	ldr	r3, [r7, #16]
20007c6e:	1ad3      	subs	r3, r2, r3
20007c70:	2b64      	cmp	r3, #100	@ 0x64
20007c72:	d901      	bls.n	20007c78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
20007c74:	2303      	movs	r3, #3
20007c76:	e120      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20007c78:	4b75      	ldr	r3, [pc, #468]	@ (20007e50 <HAL_RCC_OscConfig+0x4d0>)
20007c7a:	681b      	ldr	r3, [r3, #0]
20007c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20007c80:	2b00      	cmp	r3, #0
20007c82:	d0f0      	beq.n	20007c66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20007c84:	687b      	ldr	r3, [r7, #4]
20007c86:	689b      	ldr	r3, [r3, #8]
20007c88:	2b01      	cmp	r3, #1
20007c8a:	d106      	bne.n	20007c9a <HAL_RCC_OscConfig+0x31a>
20007c8c:	4b6f      	ldr	r3, [pc, #444]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007c90:	4a6e      	ldr	r2, [pc, #440]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007c92:	f043 0301 	orr.w	r3, r3, #1
20007c96:	6713      	str	r3, [r2, #112]	@ 0x70
20007c98:	e02d      	b.n	20007cf6 <HAL_RCC_OscConfig+0x376>
20007c9a:	687b      	ldr	r3, [r7, #4]
20007c9c:	689b      	ldr	r3, [r3, #8]
20007c9e:	2b00      	cmp	r3, #0
20007ca0:	d10c      	bne.n	20007cbc <HAL_RCC_OscConfig+0x33c>
20007ca2:	4b6a      	ldr	r3, [pc, #424]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007ca6:	4a69      	ldr	r2, [pc, #420]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007ca8:	f023 0301 	bic.w	r3, r3, #1
20007cac:	6713      	str	r3, [r2, #112]	@ 0x70
20007cae:	4b67      	ldr	r3, [pc, #412]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007cb2:	4a66      	ldr	r2, [pc, #408]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cb4:	f023 0304 	bic.w	r3, r3, #4
20007cb8:	6713      	str	r3, [r2, #112]	@ 0x70
20007cba:	e01c      	b.n	20007cf6 <HAL_RCC_OscConfig+0x376>
20007cbc:	687b      	ldr	r3, [r7, #4]
20007cbe:	689b      	ldr	r3, [r3, #8]
20007cc0:	2b05      	cmp	r3, #5
20007cc2:	d10c      	bne.n	20007cde <HAL_RCC_OscConfig+0x35e>
20007cc4:	4b61      	ldr	r3, [pc, #388]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007cc8:	4a60      	ldr	r2, [pc, #384]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cca:	f043 0304 	orr.w	r3, r3, #4
20007cce:	6713      	str	r3, [r2, #112]	@ 0x70
20007cd0:	4b5e      	ldr	r3, [pc, #376]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007cd4:	4a5d      	ldr	r2, [pc, #372]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cd6:	f043 0301 	orr.w	r3, r3, #1
20007cda:	6713      	str	r3, [r2, #112]	@ 0x70
20007cdc:	e00b      	b.n	20007cf6 <HAL_RCC_OscConfig+0x376>
20007cde:	4b5b      	ldr	r3, [pc, #364]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007ce2:	4a5a      	ldr	r2, [pc, #360]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007ce4:	f023 0301 	bic.w	r3, r3, #1
20007ce8:	6713      	str	r3, [r2, #112]	@ 0x70
20007cea:	4b58      	ldr	r3, [pc, #352]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007cee:	4a57      	ldr	r2, [pc, #348]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007cf0:	f023 0304 	bic.w	r3, r3, #4
20007cf4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20007cf6:	687b      	ldr	r3, [r7, #4]
20007cf8:	689b      	ldr	r3, [r3, #8]
20007cfa:	2b00      	cmp	r3, #0
20007cfc:	d015      	beq.n	20007d2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20007cfe:	f7fd fce7 	bl	200056d0 <HAL_GetTick>
20007d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20007d04:	e00a      	b.n	20007d1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20007d06:	f7fd fce3 	bl	200056d0 <HAL_GetTick>
20007d0a:	4602      	mov	r2, r0
20007d0c:	693b      	ldr	r3, [r7, #16]
20007d0e:	1ad3      	subs	r3, r2, r3
20007d10:	f241 3288 	movw	r2, #5000	@ 0x1388
20007d14:	4293      	cmp	r3, r2
20007d16:	d901      	bls.n	20007d1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
20007d18:	2303      	movs	r3, #3
20007d1a:	e0ce      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20007d1c:	4b4b      	ldr	r3, [pc, #300]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007d20:	f003 0302 	and.w	r3, r3, #2
20007d24:	2b00      	cmp	r3, #0
20007d26:	d0ee      	beq.n	20007d06 <HAL_RCC_OscConfig+0x386>
20007d28:	e014      	b.n	20007d54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20007d2a:	f7fd fcd1 	bl	200056d0 <HAL_GetTick>
20007d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20007d30:	e00a      	b.n	20007d48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20007d32:	f7fd fccd 	bl	200056d0 <HAL_GetTick>
20007d36:	4602      	mov	r2, r0
20007d38:	693b      	ldr	r3, [r7, #16]
20007d3a:	1ad3      	subs	r3, r2, r3
20007d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
20007d40:	4293      	cmp	r3, r2
20007d42:	d901      	bls.n	20007d48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
20007d44:	2303      	movs	r3, #3
20007d46:	e0b8      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20007d48:	4b40      	ldr	r3, [pc, #256]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007d4c:	f003 0302 	and.w	r3, r3, #2
20007d50:	2b00      	cmp	r3, #0
20007d52:	d1ee      	bne.n	20007d32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
20007d54:	7dfb      	ldrb	r3, [r7, #23]
20007d56:	2b01      	cmp	r3, #1
20007d58:	d105      	bne.n	20007d66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20007d5a:	4b3c      	ldr	r3, [pc, #240]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007d5e:	4a3b      	ldr	r2, [pc, #236]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20007d64:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20007d66:	687b      	ldr	r3, [r7, #4]
20007d68:	699b      	ldr	r3, [r3, #24]
20007d6a:	2b00      	cmp	r3, #0
20007d6c:	f000 80a4 	beq.w	20007eb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
20007d70:	4b36      	ldr	r3, [pc, #216]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007d72:	689b      	ldr	r3, [r3, #8]
20007d74:	f003 030c 	and.w	r3, r3, #12
20007d78:	2b08      	cmp	r3, #8
20007d7a:	d06b      	beq.n	20007e54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20007d7c:	687b      	ldr	r3, [r7, #4]
20007d7e:	699b      	ldr	r3, [r3, #24]
20007d80:	2b02      	cmp	r3, #2
20007d82:	d149      	bne.n	20007e18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20007d84:	4b31      	ldr	r3, [pc, #196]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007d86:	681b      	ldr	r3, [r3, #0]
20007d88:	4a30      	ldr	r2, [pc, #192]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20007d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007d90:	f7fd fc9e 	bl	200056d0 <HAL_GetTick>
20007d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007d96:	e008      	b.n	20007daa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20007d98:	f7fd fc9a 	bl	200056d0 <HAL_GetTick>
20007d9c:	4602      	mov	r2, r0
20007d9e:	693b      	ldr	r3, [r7, #16]
20007da0:	1ad3      	subs	r3, r2, r3
20007da2:	2b02      	cmp	r3, #2
20007da4:	d901      	bls.n	20007daa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
20007da6:	2303      	movs	r3, #3
20007da8:	e087      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007daa:	4b28      	ldr	r3, [pc, #160]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007dac:	681b      	ldr	r3, [r3, #0]
20007dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007db2:	2b00      	cmp	r3, #0
20007db4:	d1f0      	bne.n	20007d98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
20007db6:	687b      	ldr	r3, [r7, #4]
20007db8:	69da      	ldr	r2, [r3, #28]
20007dba:	687b      	ldr	r3, [r7, #4]
20007dbc:	6a1b      	ldr	r3, [r3, #32]
20007dbe:	431a      	orrs	r2, r3
20007dc0:	687b      	ldr	r3, [r7, #4]
20007dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007dc4:	019b      	lsls	r3, r3, #6
20007dc6:	431a      	orrs	r2, r3
20007dc8:	687b      	ldr	r3, [r7, #4]
20007dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007dcc:	085b      	lsrs	r3, r3, #1
20007dce:	3b01      	subs	r3, #1
20007dd0:	041b      	lsls	r3, r3, #16
20007dd2:	431a      	orrs	r2, r3
20007dd4:	687b      	ldr	r3, [r7, #4]
20007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20007dd8:	061b      	lsls	r3, r3, #24
20007dda:	4313      	orrs	r3, r2
20007ddc:	4a1b      	ldr	r2, [pc, #108]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007dde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20007de2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20007de4:	4b19      	ldr	r3, [pc, #100]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007de6:	681b      	ldr	r3, [r3, #0]
20007de8:	4a18      	ldr	r2, [pc, #96]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20007dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007df0:	f7fd fc6e 	bl	200056d0 <HAL_GetTick>
20007df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007df6:	e008      	b.n	20007e0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20007df8:	f7fd fc6a 	bl	200056d0 <HAL_GetTick>
20007dfc:	4602      	mov	r2, r0
20007dfe:	693b      	ldr	r3, [r7, #16]
20007e00:	1ad3      	subs	r3, r2, r3
20007e02:	2b02      	cmp	r3, #2
20007e04:	d901      	bls.n	20007e0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
20007e06:	2303      	movs	r3, #3
20007e08:	e057      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007e0a:	4b10      	ldr	r3, [pc, #64]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007e0c:	681b      	ldr	r3, [r3, #0]
20007e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007e12:	2b00      	cmp	r3, #0
20007e14:	d0f0      	beq.n	20007df8 <HAL_RCC_OscConfig+0x478>
20007e16:	e04f      	b.n	20007eb8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20007e18:	4b0c      	ldr	r3, [pc, #48]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007e1a:	681b      	ldr	r3, [r3, #0]
20007e1c:	4a0b      	ldr	r2, [pc, #44]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20007e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007e24:	f7fd fc54 	bl	200056d0 <HAL_GetTick>
20007e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007e2a:	e008      	b.n	20007e3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20007e2c:	f7fd fc50 	bl	200056d0 <HAL_GetTick>
20007e30:	4602      	mov	r2, r0
20007e32:	693b      	ldr	r3, [r7, #16]
20007e34:	1ad3      	subs	r3, r2, r3
20007e36:	2b02      	cmp	r3, #2
20007e38:	d901      	bls.n	20007e3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
20007e3a:	2303      	movs	r3, #3
20007e3c:	e03d      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007e3e:	4b03      	ldr	r3, [pc, #12]	@ (20007e4c <HAL_RCC_OscConfig+0x4cc>)
20007e40:	681b      	ldr	r3, [r3, #0]
20007e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007e46:	2b00      	cmp	r3, #0
20007e48:	d1f0      	bne.n	20007e2c <HAL_RCC_OscConfig+0x4ac>
20007e4a:	e035      	b.n	20007eb8 <HAL_RCC_OscConfig+0x538>
20007e4c:	40023800 	.word	0x40023800
20007e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
20007e54:	4b1b      	ldr	r3, [pc, #108]	@ (20007ec4 <HAL_RCC_OscConfig+0x544>)
20007e56:	685b      	ldr	r3, [r3, #4]
20007e58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20007e5a:	687b      	ldr	r3, [r7, #4]
20007e5c:	699b      	ldr	r3, [r3, #24]
20007e5e:	2b01      	cmp	r3, #1
20007e60:	d028      	beq.n	20007eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20007e62:	68fb      	ldr	r3, [r7, #12]
20007e64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20007e68:	687b      	ldr	r3, [r7, #4]
20007e6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20007e6c:	429a      	cmp	r2, r3
20007e6e:	d121      	bne.n	20007eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20007e70:	68fb      	ldr	r3, [r7, #12]
20007e72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20007e76:	687b      	ldr	r3, [r7, #4]
20007e78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20007e7a:	429a      	cmp	r2, r3
20007e7c:	d11a      	bne.n	20007eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20007e7e:	68fa      	ldr	r2, [r7, #12]
20007e80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
20007e84:	4013      	ands	r3, r2
20007e86:	687a      	ldr	r2, [r7, #4]
20007e88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
20007e8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20007e8c:	4293      	cmp	r3, r2
20007e8e:	d111      	bne.n	20007eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20007e90:	68fb      	ldr	r3, [r7, #12]
20007e92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
20007e96:	687b      	ldr	r3, [r7, #4]
20007e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007e9a:	085b      	lsrs	r3, r3, #1
20007e9c:	3b01      	subs	r3, #1
20007e9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20007ea0:	429a      	cmp	r2, r3
20007ea2:	d107      	bne.n	20007eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20007ea4:	68fb      	ldr	r3, [r7, #12]
20007ea6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
20007eaa:	687b      	ldr	r3, [r7, #4]
20007eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20007eae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20007eb0:	429a      	cmp	r2, r3
20007eb2:	d001      	beq.n	20007eb8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
20007eb4:	2301      	movs	r3, #1
20007eb6:	e000      	b.n	20007eba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
20007eb8:	2300      	movs	r3, #0
}
20007eba:	4618      	mov	r0, r3
20007ebc:	3718      	adds	r7, #24
20007ebe:	46bd      	mov	sp, r7
20007ec0:	bd80      	pop	{r7, pc}
20007ec2:	bf00      	nop
20007ec4:	40023800 	.word	0x40023800

20007ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20007ec8:	b580      	push	{r7, lr}
20007eca:	b084      	sub	sp, #16
20007ecc:	af00      	add	r7, sp, #0
20007ece:	6078      	str	r0, [r7, #4]
20007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
20007ed2:	2300      	movs	r3, #0
20007ed4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
20007ed6:	687b      	ldr	r3, [r7, #4]
20007ed8:	2b00      	cmp	r3, #0
20007eda:	d101      	bne.n	20007ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
20007edc:	2301      	movs	r3, #1
20007ede:	e0d0      	b.n	20008082 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
20007ee0:	4b6a      	ldr	r3, [pc, #424]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
20007ee2:	681b      	ldr	r3, [r3, #0]
20007ee4:	f003 030f 	and.w	r3, r3, #15
20007ee8:	683a      	ldr	r2, [r7, #0]
20007eea:	429a      	cmp	r2, r3
20007eec:	d910      	bls.n	20007f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20007eee:	4b67      	ldr	r3, [pc, #412]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
20007ef0:	681b      	ldr	r3, [r3, #0]
20007ef2:	f023 020f 	bic.w	r2, r3, #15
20007ef6:	4965      	ldr	r1, [pc, #404]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
20007ef8:	683b      	ldr	r3, [r7, #0]
20007efa:	4313      	orrs	r3, r2
20007efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20007efe:	4b63      	ldr	r3, [pc, #396]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
20007f00:	681b      	ldr	r3, [r3, #0]
20007f02:	f003 030f 	and.w	r3, r3, #15
20007f06:	683a      	ldr	r2, [r7, #0]
20007f08:	429a      	cmp	r2, r3
20007f0a:	d001      	beq.n	20007f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
20007f0c:	2301      	movs	r3, #1
20007f0e:	e0b8      	b.n	20008082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20007f10:	687b      	ldr	r3, [r7, #4]
20007f12:	681b      	ldr	r3, [r3, #0]
20007f14:	f003 0302 	and.w	r3, r3, #2
20007f18:	2b00      	cmp	r3, #0
20007f1a:	d020      	beq.n	20007f5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20007f1c:	687b      	ldr	r3, [r7, #4]
20007f1e:	681b      	ldr	r3, [r3, #0]
20007f20:	f003 0304 	and.w	r3, r3, #4
20007f24:	2b00      	cmp	r3, #0
20007f26:	d005      	beq.n	20007f34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20007f28:	4b59      	ldr	r3, [pc, #356]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f2a:	689b      	ldr	r3, [r3, #8]
20007f2c:	4a58      	ldr	r2, [pc, #352]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
20007f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20007f34:	687b      	ldr	r3, [r7, #4]
20007f36:	681b      	ldr	r3, [r3, #0]
20007f38:	f003 0308 	and.w	r3, r3, #8
20007f3c:	2b00      	cmp	r3, #0
20007f3e:	d005      	beq.n	20007f4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20007f40:	4b53      	ldr	r3, [pc, #332]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f42:	689b      	ldr	r3, [r3, #8]
20007f44:	4a52      	ldr	r2, [pc, #328]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
20007f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20007f4c:	4b50      	ldr	r3, [pc, #320]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f4e:	689b      	ldr	r3, [r3, #8]
20007f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
20007f54:	687b      	ldr	r3, [r7, #4]
20007f56:	689b      	ldr	r3, [r3, #8]
20007f58:	494d      	ldr	r1, [pc, #308]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f5a:	4313      	orrs	r3, r2
20007f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20007f5e:	687b      	ldr	r3, [r7, #4]
20007f60:	681b      	ldr	r3, [r3, #0]
20007f62:	f003 0301 	and.w	r3, r3, #1
20007f66:	2b00      	cmp	r3, #0
20007f68:	d040      	beq.n	20007fec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20007f6a:	687b      	ldr	r3, [r7, #4]
20007f6c:	685b      	ldr	r3, [r3, #4]
20007f6e:	2b01      	cmp	r3, #1
20007f70:	d107      	bne.n	20007f82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20007f72:	4b47      	ldr	r3, [pc, #284]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f74:	681b      	ldr	r3, [r3, #0]
20007f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20007f7a:	2b00      	cmp	r3, #0
20007f7c:	d115      	bne.n	20007faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20007f7e:	2301      	movs	r3, #1
20007f80:	e07f      	b.n	20008082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
20007f82:	687b      	ldr	r3, [r7, #4]
20007f84:	685b      	ldr	r3, [r3, #4]
20007f86:	2b02      	cmp	r3, #2
20007f88:	d107      	bne.n	20007f9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007f8a:	4b41      	ldr	r3, [pc, #260]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f8c:	681b      	ldr	r3, [r3, #0]
20007f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007f92:	2b00      	cmp	r3, #0
20007f94:	d109      	bne.n	20007faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20007f96:	2301      	movs	r3, #1
20007f98:	e073      	b.n	20008082 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20007f9a:	4b3d      	ldr	r3, [pc, #244]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007f9c:	681b      	ldr	r3, [r3, #0]
20007f9e:	f003 0302 	and.w	r3, r3, #2
20007fa2:	2b00      	cmp	r3, #0
20007fa4:	d101      	bne.n	20007faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20007fa6:	2301      	movs	r3, #1
20007fa8:	e06b      	b.n	20008082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20007faa:	4b39      	ldr	r3, [pc, #228]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007fac:	689b      	ldr	r3, [r3, #8]
20007fae:	f023 0203 	bic.w	r2, r3, #3
20007fb2:	687b      	ldr	r3, [r7, #4]
20007fb4:	685b      	ldr	r3, [r3, #4]
20007fb6:	4936      	ldr	r1, [pc, #216]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007fb8:	4313      	orrs	r3, r2
20007fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20007fbc:	f7fd fb88 	bl	200056d0 <HAL_GetTick>
20007fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20007fc2:	e00a      	b.n	20007fda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20007fc4:	f7fd fb84 	bl	200056d0 <HAL_GetTick>
20007fc8:	4602      	mov	r2, r0
20007fca:	68fb      	ldr	r3, [r7, #12]
20007fcc:	1ad3      	subs	r3, r2, r3
20007fce:	f241 3288 	movw	r2, #5000	@ 0x1388
20007fd2:	4293      	cmp	r3, r2
20007fd4:	d901      	bls.n	20007fda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
20007fd6:	2303      	movs	r3, #3
20007fd8:	e053      	b.n	20008082 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20007fda:	4b2d      	ldr	r3, [pc, #180]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20007fdc:	689b      	ldr	r3, [r3, #8]
20007fde:	f003 020c 	and.w	r2, r3, #12
20007fe2:	687b      	ldr	r3, [r7, #4]
20007fe4:	685b      	ldr	r3, [r3, #4]
20007fe6:	009b      	lsls	r3, r3, #2
20007fe8:	429a      	cmp	r2, r3
20007fea:	d1eb      	bne.n	20007fc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20007fec:	4b27      	ldr	r3, [pc, #156]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
20007fee:	681b      	ldr	r3, [r3, #0]
20007ff0:	f003 030f 	and.w	r3, r3, #15
20007ff4:	683a      	ldr	r2, [r7, #0]
20007ff6:	429a      	cmp	r2, r3
20007ff8:	d210      	bcs.n	2000801c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20007ffa:	4b24      	ldr	r3, [pc, #144]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
20007ffc:	681b      	ldr	r3, [r3, #0]
20007ffe:	f023 020f 	bic.w	r2, r3, #15
20008002:	4922      	ldr	r1, [pc, #136]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
20008004:	683b      	ldr	r3, [r7, #0]
20008006:	4313      	orrs	r3, r2
20008008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2000800a:	4b20      	ldr	r3, [pc, #128]	@ (2000808c <HAL_RCC_ClockConfig+0x1c4>)
2000800c:	681b      	ldr	r3, [r3, #0]
2000800e:	f003 030f 	and.w	r3, r3, #15
20008012:	683a      	ldr	r2, [r7, #0]
20008014:	429a      	cmp	r2, r3
20008016:	d001      	beq.n	2000801c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
20008018:	2301      	movs	r3, #1
2000801a:	e032      	b.n	20008082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000801c:	687b      	ldr	r3, [r7, #4]
2000801e:	681b      	ldr	r3, [r3, #0]
20008020:	f003 0304 	and.w	r3, r3, #4
20008024:	2b00      	cmp	r3, #0
20008026:	d008      	beq.n	2000803a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20008028:	4b19      	ldr	r3, [pc, #100]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
2000802a:	689b      	ldr	r3, [r3, #8]
2000802c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
20008030:	687b      	ldr	r3, [r7, #4]
20008032:	68db      	ldr	r3, [r3, #12]
20008034:	4916      	ldr	r1, [pc, #88]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20008036:	4313      	orrs	r3, r2
20008038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000803a:	687b      	ldr	r3, [r7, #4]
2000803c:	681b      	ldr	r3, [r3, #0]
2000803e:	f003 0308 	and.w	r3, r3, #8
20008042:	2b00      	cmp	r3, #0
20008044:	d009      	beq.n	2000805a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
20008046:	4b12      	ldr	r3, [pc, #72]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20008048:	689b      	ldr	r3, [r3, #8]
2000804a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
2000804e:	687b      	ldr	r3, [r7, #4]
20008050:	691b      	ldr	r3, [r3, #16]
20008052:	00db      	lsls	r3, r3, #3
20008054:	490e      	ldr	r1, [pc, #56]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20008056:	4313      	orrs	r3, r2
20008058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
2000805a:	f000 f821 	bl	200080a0 <HAL_RCC_GetSysClockFreq>
2000805e:	4602      	mov	r2, r0
20008060:	4b0b      	ldr	r3, [pc, #44]	@ (20008090 <HAL_RCC_ClockConfig+0x1c8>)
20008062:	689b      	ldr	r3, [r3, #8]
20008064:	091b      	lsrs	r3, r3, #4
20008066:	f003 030f 	and.w	r3, r3, #15
2000806a:	490a      	ldr	r1, [pc, #40]	@ (20008094 <HAL_RCC_ClockConfig+0x1cc>)
2000806c:	5ccb      	ldrb	r3, [r1, r3]
2000806e:	fa22 f303 	lsr.w	r3, r2, r3
20008072:	4a09      	ldr	r2, [pc, #36]	@ (20008098 <HAL_RCC_ClockConfig+0x1d0>)
20008074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
20008076:	4b09      	ldr	r3, [pc, #36]	@ (2000809c <HAL_RCC_ClockConfig+0x1d4>)
20008078:	681b      	ldr	r3, [r3, #0]
2000807a:	4618      	mov	r0, r3
2000807c:	f7fd fae4 	bl	20005648 <HAL_InitTick>

  return HAL_OK;
20008080:	2300      	movs	r3, #0
}
20008082:	4618      	mov	r0, r3
20008084:	3710      	adds	r7, #16
20008086:	46bd      	mov	sp, r7
20008088:	bd80      	pop	{r7, pc}
2000808a:	bf00      	nop
2000808c:	40023c00 	.word	0x40023c00
20008090:	40023800 	.word	0x40023800
20008094:	2000d740 	.word	0x2000d740
20008098:	2000d768 	.word	0x2000d768
2000809c:	2000d76c 	.word	0x2000d76c

200080a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
200080a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200080a4:	b094      	sub	sp, #80	@ 0x50
200080a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
200080a8:	2300      	movs	r3, #0
200080aa:	647b      	str	r3, [r7, #68]	@ 0x44
200080ac:	2300      	movs	r3, #0
200080ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
200080b0:	2300      	movs	r3, #0
200080b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
200080b4:	2300      	movs	r3, #0
200080b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
200080b8:	4b79      	ldr	r3, [pc, #484]	@ (200082a0 <HAL_RCC_GetSysClockFreq+0x200>)
200080ba:	689b      	ldr	r3, [r3, #8]
200080bc:	f003 030c 	and.w	r3, r3, #12
200080c0:	2b08      	cmp	r3, #8
200080c2:	d00d      	beq.n	200080e0 <HAL_RCC_GetSysClockFreq+0x40>
200080c4:	2b08      	cmp	r3, #8
200080c6:	f200 80e1 	bhi.w	2000828c <HAL_RCC_GetSysClockFreq+0x1ec>
200080ca:	2b00      	cmp	r3, #0
200080cc:	d002      	beq.n	200080d4 <HAL_RCC_GetSysClockFreq+0x34>
200080ce:	2b04      	cmp	r3, #4
200080d0:	d003      	beq.n	200080da <HAL_RCC_GetSysClockFreq+0x3a>
200080d2:	e0db      	b.n	2000828c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
200080d4:	4b73      	ldr	r3, [pc, #460]	@ (200082a4 <HAL_RCC_GetSysClockFreq+0x204>)
200080d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
200080d8:	e0db      	b.n	20008292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
200080da:	4b73      	ldr	r3, [pc, #460]	@ (200082a8 <HAL_RCC_GetSysClockFreq+0x208>)
200080dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
200080de:	e0d8      	b.n	20008292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200080e0:	4b6f      	ldr	r3, [pc, #444]	@ (200082a0 <HAL_RCC_GetSysClockFreq+0x200>)
200080e2:	685b      	ldr	r3, [r3, #4]
200080e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200080e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
200080ea:	4b6d      	ldr	r3, [pc, #436]	@ (200082a0 <HAL_RCC_GetSysClockFreq+0x200>)
200080ec:	685b      	ldr	r3, [r3, #4]
200080ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200080f2:	2b00      	cmp	r3, #0
200080f4:	d063      	beq.n	200081be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200080f6:	4b6a      	ldr	r3, [pc, #424]	@ (200082a0 <HAL_RCC_GetSysClockFreq+0x200>)
200080f8:	685b      	ldr	r3, [r3, #4]
200080fa:	099b      	lsrs	r3, r3, #6
200080fc:	2200      	movs	r2, #0
200080fe:	63bb      	str	r3, [r7, #56]	@ 0x38
20008100:	63fa      	str	r2, [r7, #60]	@ 0x3c
20008102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20008104:	f3c3 0308 	ubfx	r3, r3, #0, #9
20008108:	633b      	str	r3, [r7, #48]	@ 0x30
2000810a:	2300      	movs	r3, #0
2000810c:	637b      	str	r3, [r7, #52]	@ 0x34
2000810e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
20008112:	4622      	mov	r2, r4
20008114:	462b      	mov	r3, r5
20008116:	f04f 0000 	mov.w	r0, #0
2000811a:	f04f 0100 	mov.w	r1, #0
2000811e:	0159      	lsls	r1, r3, #5
20008120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20008124:	0150      	lsls	r0, r2, #5
20008126:	4602      	mov	r2, r0
20008128:	460b      	mov	r3, r1
2000812a:	4621      	mov	r1, r4
2000812c:	1a51      	subs	r1, r2, r1
2000812e:	6139      	str	r1, [r7, #16]
20008130:	4629      	mov	r1, r5
20008132:	eb63 0301 	sbc.w	r3, r3, r1
20008136:	617b      	str	r3, [r7, #20]
20008138:	f04f 0200 	mov.w	r2, #0
2000813c:	f04f 0300 	mov.w	r3, #0
20008140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20008144:	4659      	mov	r1, fp
20008146:	018b      	lsls	r3, r1, #6
20008148:	4651      	mov	r1, sl
2000814a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
2000814e:	4651      	mov	r1, sl
20008150:	018a      	lsls	r2, r1, #6
20008152:	4651      	mov	r1, sl
20008154:	ebb2 0801 	subs.w	r8, r2, r1
20008158:	4659      	mov	r1, fp
2000815a:	eb63 0901 	sbc.w	r9, r3, r1
2000815e:	f04f 0200 	mov.w	r2, #0
20008162:	f04f 0300 	mov.w	r3, #0
20008166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
2000816a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
2000816e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20008172:	4690      	mov	r8, r2
20008174:	4699      	mov	r9, r3
20008176:	4623      	mov	r3, r4
20008178:	eb18 0303 	adds.w	r3, r8, r3
2000817c:	60bb      	str	r3, [r7, #8]
2000817e:	462b      	mov	r3, r5
20008180:	eb49 0303 	adc.w	r3, r9, r3
20008184:	60fb      	str	r3, [r7, #12]
20008186:	f04f 0200 	mov.w	r2, #0
2000818a:	f04f 0300 	mov.w	r3, #0
2000818e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20008192:	4629      	mov	r1, r5
20008194:	024b      	lsls	r3, r1, #9
20008196:	4621      	mov	r1, r4
20008198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
2000819c:	4621      	mov	r1, r4
2000819e:	024a      	lsls	r2, r1, #9
200081a0:	4610      	mov	r0, r2
200081a2:	4619      	mov	r1, r3
200081a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200081a6:	2200      	movs	r2, #0
200081a8:	62bb      	str	r3, [r7, #40]	@ 0x28
200081aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
200081ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
200081b0:	f7f8 f82a 	bl	20000208 <__aeabi_uldivmod>
200081b4:	4602      	mov	r2, r0
200081b6:	460b      	mov	r3, r1
200081b8:	4613      	mov	r3, r2
200081ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
200081bc:	e058      	b.n	20008270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200081be:	4b38      	ldr	r3, [pc, #224]	@ (200082a0 <HAL_RCC_GetSysClockFreq+0x200>)
200081c0:	685b      	ldr	r3, [r3, #4]
200081c2:	099b      	lsrs	r3, r3, #6
200081c4:	2200      	movs	r2, #0
200081c6:	4618      	mov	r0, r3
200081c8:	4611      	mov	r1, r2
200081ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
200081ce:	623b      	str	r3, [r7, #32]
200081d0:	2300      	movs	r3, #0
200081d2:	627b      	str	r3, [r7, #36]	@ 0x24
200081d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
200081d8:	4642      	mov	r2, r8
200081da:	464b      	mov	r3, r9
200081dc:	f04f 0000 	mov.w	r0, #0
200081e0:	f04f 0100 	mov.w	r1, #0
200081e4:	0159      	lsls	r1, r3, #5
200081e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
200081ea:	0150      	lsls	r0, r2, #5
200081ec:	4602      	mov	r2, r0
200081ee:	460b      	mov	r3, r1
200081f0:	4641      	mov	r1, r8
200081f2:	ebb2 0a01 	subs.w	sl, r2, r1
200081f6:	4649      	mov	r1, r9
200081f8:	eb63 0b01 	sbc.w	fp, r3, r1
200081fc:	f04f 0200 	mov.w	r2, #0
20008200:	f04f 0300 	mov.w	r3, #0
20008204:	ea4f 138b 	mov.w	r3, fp, lsl #6
20008208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
2000820c:	ea4f 128a 	mov.w	r2, sl, lsl #6
20008210:	ebb2 040a 	subs.w	r4, r2, sl
20008214:	eb63 050b 	sbc.w	r5, r3, fp
20008218:	f04f 0200 	mov.w	r2, #0
2000821c:	f04f 0300 	mov.w	r3, #0
20008220:	00eb      	lsls	r3, r5, #3
20008222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20008226:	00e2      	lsls	r2, r4, #3
20008228:	4614      	mov	r4, r2
2000822a:	461d      	mov	r5, r3
2000822c:	4643      	mov	r3, r8
2000822e:	18e3      	adds	r3, r4, r3
20008230:	603b      	str	r3, [r7, #0]
20008232:	464b      	mov	r3, r9
20008234:	eb45 0303 	adc.w	r3, r5, r3
20008238:	607b      	str	r3, [r7, #4]
2000823a:	f04f 0200 	mov.w	r2, #0
2000823e:	f04f 0300 	mov.w	r3, #0
20008242:	e9d7 4500 	ldrd	r4, r5, [r7]
20008246:	4629      	mov	r1, r5
20008248:	028b      	lsls	r3, r1, #10
2000824a:	4621      	mov	r1, r4
2000824c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20008250:	4621      	mov	r1, r4
20008252:	028a      	lsls	r2, r1, #10
20008254:	4610      	mov	r0, r2
20008256:	4619      	mov	r1, r3
20008258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000825a:	2200      	movs	r2, #0
2000825c:	61bb      	str	r3, [r7, #24]
2000825e:	61fa      	str	r2, [r7, #28]
20008260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20008264:	f7f7 ffd0 	bl	20000208 <__aeabi_uldivmod>
20008268:	4602      	mov	r2, r0
2000826a:	460b      	mov	r3, r1
2000826c:	4613      	mov	r3, r2
2000826e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
20008270:	4b0b      	ldr	r3, [pc, #44]	@ (200082a0 <HAL_RCC_GetSysClockFreq+0x200>)
20008272:	685b      	ldr	r3, [r3, #4]
20008274:	0c1b      	lsrs	r3, r3, #16
20008276:	f003 0303 	and.w	r3, r3, #3
2000827a:	3301      	adds	r3, #1
2000827c:	005b      	lsls	r3, r3, #1
2000827e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
20008280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20008282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20008284:	fbb2 f3f3 	udiv	r3, r2, r3
20008288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
2000828a:	e002      	b.n	20008292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000828c:	4b05      	ldr	r3, [pc, #20]	@ (200082a4 <HAL_RCC_GetSysClockFreq+0x204>)
2000828e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20008290:	bf00      	nop
    }
  }
  return sysclockfreq;
20008292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
20008294:	4618      	mov	r0, r3
20008296:	3750      	adds	r7, #80	@ 0x50
20008298:	46bd      	mov	sp, r7
2000829a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2000829e:	bf00      	nop
200082a0:	40023800 	.word	0x40023800
200082a4:	00f42400 	.word	0x00f42400
200082a8:	007a1200 	.word	0x007a1200

200082ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
200082ac:	b480      	push	{r7}
200082ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
200082b0:	4b03      	ldr	r3, [pc, #12]	@ (200082c0 <HAL_RCC_GetHCLKFreq+0x14>)
200082b2:	681b      	ldr	r3, [r3, #0]
}
200082b4:	4618      	mov	r0, r3
200082b6:	46bd      	mov	sp, r7
200082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200082bc:	4770      	bx	lr
200082be:	bf00      	nop
200082c0:	2000d768 	.word	0x2000d768

200082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
200082c4:	b580      	push	{r7, lr}
200082c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
200082c8:	f7ff fff0 	bl	200082ac <HAL_RCC_GetHCLKFreq>
200082cc:	4602      	mov	r2, r0
200082ce:	4b05      	ldr	r3, [pc, #20]	@ (200082e4 <HAL_RCC_GetPCLK1Freq+0x20>)
200082d0:	689b      	ldr	r3, [r3, #8]
200082d2:	0a9b      	lsrs	r3, r3, #10
200082d4:	f003 0307 	and.w	r3, r3, #7
200082d8:	4903      	ldr	r1, [pc, #12]	@ (200082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
200082da:	5ccb      	ldrb	r3, [r1, r3]
200082dc:	fa22 f303 	lsr.w	r3, r2, r3
}
200082e0:	4618      	mov	r0, r3
200082e2:	bd80      	pop	{r7, pc}
200082e4:	40023800 	.word	0x40023800
200082e8:	2000d750 	.word	0x2000d750

200082ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
200082ec:	b580      	push	{r7, lr}
200082ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
200082f0:	f7ff ffdc 	bl	200082ac <HAL_RCC_GetHCLKFreq>
200082f4:	4602      	mov	r2, r0
200082f6:	4b05      	ldr	r3, [pc, #20]	@ (2000830c <HAL_RCC_GetPCLK2Freq+0x20>)
200082f8:	689b      	ldr	r3, [r3, #8]
200082fa:	0b5b      	lsrs	r3, r3, #13
200082fc:	f003 0307 	and.w	r3, r3, #7
20008300:	4903      	ldr	r1, [pc, #12]	@ (20008310 <HAL_RCC_GetPCLK2Freq+0x24>)
20008302:	5ccb      	ldrb	r3, [r1, r3]
20008304:	fa22 f303 	lsr.w	r3, r2, r3
}
20008308:	4618      	mov	r0, r3
2000830a:	bd80      	pop	{r7, pc}
2000830c:	40023800 	.word	0x40023800
20008310:	2000d750 	.word	0x2000d750

20008314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20008314:	b580      	push	{r7, lr}
20008316:	b088      	sub	sp, #32
20008318:	af00      	add	r7, sp, #0
2000831a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
2000831c:	2300      	movs	r3, #0
2000831e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
20008320:	2300      	movs	r3, #0
20008322:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
20008324:	2300      	movs	r3, #0
20008326:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
20008328:	2300      	movs	r3, #0
2000832a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
2000832c:	2300      	movs	r3, #0
2000832e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
20008330:	687b      	ldr	r3, [r7, #4]
20008332:	681b      	ldr	r3, [r3, #0]
20008334:	f003 0301 	and.w	r3, r3, #1
20008338:	2b00      	cmp	r3, #0
2000833a:	d012      	beq.n	20008362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
2000833c:	4b69      	ldr	r3, [pc, #420]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000833e:	689b      	ldr	r3, [r3, #8]
20008340:	4a68      	ldr	r2, [pc, #416]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008342:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
20008346:	6093      	str	r3, [r2, #8]
20008348:	4b66      	ldr	r3, [pc, #408]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000834a:	689a      	ldr	r2, [r3, #8]
2000834c:	687b      	ldr	r3, [r7, #4]
2000834e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20008350:	4964      	ldr	r1, [pc, #400]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008352:	4313      	orrs	r3, r2
20008354:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
20008356:	687b      	ldr	r3, [r7, #4]
20008358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000835a:	2b00      	cmp	r3, #0
2000835c:	d101      	bne.n	20008362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
2000835e:	2301      	movs	r3, #1
20008360:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
20008362:	687b      	ldr	r3, [r7, #4]
20008364:	681b      	ldr	r3, [r3, #0]
20008366:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2000836a:	2b00      	cmp	r3, #0
2000836c:	d017      	beq.n	2000839e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2000836e:	4b5d      	ldr	r3, [pc, #372]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20008374:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20008378:	687b      	ldr	r3, [r7, #4]
2000837a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000837c:	4959      	ldr	r1, [pc, #356]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000837e:	4313      	orrs	r3, r2
20008380:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
20008384:	687b      	ldr	r3, [r7, #4]
20008386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20008388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
2000838c:	d101      	bne.n	20008392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
2000838e:	2301      	movs	r3, #1
20008390:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
20008392:	687b      	ldr	r3, [r7, #4]
20008394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20008396:	2b00      	cmp	r3, #0
20008398:	d101      	bne.n	2000839e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
2000839a:	2301      	movs	r3, #1
2000839c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
2000839e:	687b      	ldr	r3, [r7, #4]
200083a0:	681b      	ldr	r3, [r3, #0]
200083a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
200083a6:	2b00      	cmp	r3, #0
200083a8:	d017      	beq.n	200083da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
200083aa:	4b4e      	ldr	r3, [pc, #312]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200083ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200083b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
200083b4:	687b      	ldr	r3, [r7, #4]
200083b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200083b8:	494a      	ldr	r1, [pc, #296]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200083ba:	4313      	orrs	r3, r2
200083bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
200083c0:	687b      	ldr	r3, [r7, #4]
200083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200083c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200083c8:	d101      	bne.n	200083ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
200083ca:	2301      	movs	r3, #1
200083cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
200083ce:	687b      	ldr	r3, [r7, #4]
200083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200083d2:	2b00      	cmp	r3, #0
200083d4:	d101      	bne.n	200083da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
200083d6:	2301      	movs	r3, #1
200083d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
200083da:	687b      	ldr	r3, [r7, #4]
200083dc:	681b      	ldr	r3, [r3, #0]
200083de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
200083e2:	2b00      	cmp	r3, #0
200083e4:	d001      	beq.n	200083ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
200083e6:	2301      	movs	r3, #1
200083e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
200083ea:	687b      	ldr	r3, [r7, #4]
200083ec:	681b      	ldr	r3, [r3, #0]
200083ee:	f003 0320 	and.w	r3, r3, #32
200083f2:	2b00      	cmp	r3, #0
200083f4:	f000 808b 	beq.w	2000850e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
200083f8:	4b3a      	ldr	r3, [pc, #232]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200083fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200083fc:	4a39      	ldr	r2, [pc, #228]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200083fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008402:	6413      	str	r3, [r2, #64]	@ 0x40
20008404:	4b37      	ldr	r3, [pc, #220]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20008408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000840c:	60bb      	str	r3, [r7, #8]
2000840e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
20008410:	4b35      	ldr	r3, [pc, #212]	@ (200084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20008412:	681b      	ldr	r3, [r3, #0]
20008414:	4a34      	ldr	r2, [pc, #208]	@ (200084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20008416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2000841a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000841c:	f7fd f958 	bl	200056d0 <HAL_GetTick>
20008420:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20008422:	e008      	b.n	20008436 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20008424:	f7fd f954 	bl	200056d0 <HAL_GetTick>
20008428:	4602      	mov	r2, r0
2000842a:	697b      	ldr	r3, [r7, #20]
2000842c:	1ad3      	subs	r3, r2, r3
2000842e:	2b64      	cmp	r3, #100	@ 0x64
20008430:	d901      	bls.n	20008436 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
20008432:	2303      	movs	r3, #3
20008434:	e357      	b.n	20008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20008436:	4b2c      	ldr	r3, [pc, #176]	@ (200084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20008438:	681b      	ldr	r3, [r3, #0]
2000843a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000843e:	2b00      	cmp	r3, #0
20008440:	d0f0      	beq.n	20008424 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
20008442:	4b28      	ldr	r3, [pc, #160]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20008446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2000844a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
2000844c:	693b      	ldr	r3, [r7, #16]
2000844e:	2b00      	cmp	r3, #0
20008450:	d035      	beq.n	200084be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
20008452:	687b      	ldr	r3, [r7, #4]
20008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20008456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2000845a:	693a      	ldr	r2, [r7, #16]
2000845c:	429a      	cmp	r2, r3
2000845e:	d02e      	beq.n	200084be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20008460:	4b20      	ldr	r3, [pc, #128]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20008464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20008468:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
2000846a:	4b1e      	ldr	r3, [pc, #120]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000846c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000846e:	4a1d      	ldr	r2, [pc, #116]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20008474:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
20008476:	4b1b      	ldr	r3, [pc, #108]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000847a:	4a1a      	ldr	r2, [pc, #104]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000847c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20008480:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
20008482:	4a18      	ldr	r2, [pc, #96]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008484:	693b      	ldr	r3, [r7, #16]
20008486:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20008488:	4b16      	ldr	r3, [pc, #88]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000848a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000848c:	f003 0301 	and.w	r3, r3, #1
20008490:	2b01      	cmp	r3, #1
20008492:	d114      	bne.n	200084be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20008494:	f7fd f91c 	bl	200056d0 <HAL_GetTick>
20008498:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000849a:	e00a      	b.n	200084b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000849c:	f7fd f918 	bl	200056d0 <HAL_GetTick>
200084a0:	4602      	mov	r2, r0
200084a2:	697b      	ldr	r3, [r7, #20]
200084a4:	1ad3      	subs	r3, r2, r3
200084a6:	f241 3288 	movw	r2, #5000	@ 0x1388
200084aa:	4293      	cmp	r3, r2
200084ac:	d901      	bls.n	200084b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
200084ae:	2303      	movs	r3, #3
200084b0:	e319      	b.n	20008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200084b2:	4b0c      	ldr	r3, [pc, #48]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200084b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200084b6:	f003 0302 	and.w	r3, r3, #2
200084ba:	2b00      	cmp	r3, #0
200084bc:	d0ee      	beq.n	2000849c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
200084be:	687b      	ldr	r3, [r7, #4]
200084c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200084c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
200084c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200084ca:	d111      	bne.n	200084f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
200084cc:	4b05      	ldr	r3, [pc, #20]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200084ce:	689b      	ldr	r3, [r3, #8]
200084d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
200084d4:	687b      	ldr	r3, [r7, #4]
200084d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
200084d8:	4b04      	ldr	r3, [pc, #16]	@ (200084ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
200084da:	400b      	ands	r3, r1
200084dc:	4901      	ldr	r1, [pc, #4]	@ (200084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200084de:	4313      	orrs	r3, r2
200084e0:	608b      	str	r3, [r1, #8]
200084e2:	e00b      	b.n	200084fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
200084e4:	40023800 	.word	0x40023800
200084e8:	40007000 	.word	0x40007000
200084ec:	0ffffcff 	.word	0x0ffffcff
200084f0:	4baa      	ldr	r3, [pc, #680]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084f2:	689b      	ldr	r3, [r3, #8]
200084f4:	4aa9      	ldr	r2, [pc, #676]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
200084fa:	6093      	str	r3, [r2, #8]
200084fc:	4ba7      	ldr	r3, [pc, #668]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
20008500:	687b      	ldr	r3, [r7, #4]
20008502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20008504:	f3c3 030b 	ubfx	r3, r3, #0, #12
20008508:	49a4      	ldr	r1, [pc, #656]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000850a:	4313      	orrs	r3, r2
2000850c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2000850e:	687b      	ldr	r3, [r7, #4]
20008510:	681b      	ldr	r3, [r3, #0]
20008512:	f003 0310 	and.w	r3, r3, #16
20008516:	2b00      	cmp	r3, #0
20008518:	d010      	beq.n	2000853c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2000851a:	4ba0      	ldr	r3, [pc, #640]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000851c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20008520:	4a9e      	ldr	r2, [pc, #632]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20008526:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
2000852a:	4b9c      	ldr	r3, [pc, #624]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000852c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
20008530:	687b      	ldr	r3, [r7, #4]
20008532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20008534:	4999      	ldr	r1, [pc, #612]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008536:	4313      	orrs	r3, r2
20008538:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
2000853c:	687b      	ldr	r3, [r7, #4]
2000853e:	681b      	ldr	r3, [r3, #0]
20008540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20008544:	2b00      	cmp	r3, #0
20008546:	d00a      	beq.n	2000855e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
20008548:	4b94      	ldr	r3, [pc, #592]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000854a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000854e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20008552:	687b      	ldr	r3, [r7, #4]
20008554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20008556:	4991      	ldr	r1, [pc, #580]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008558:	4313      	orrs	r3, r2
2000855a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
2000855e:	687b      	ldr	r3, [r7, #4]
20008560:	681b      	ldr	r3, [r3, #0]
20008562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20008566:	2b00      	cmp	r3, #0
20008568:	d00a      	beq.n	20008580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
2000856a:	4b8c      	ldr	r3, [pc, #560]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008570:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
20008574:	687b      	ldr	r3, [r7, #4]
20008576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20008578:	4988      	ldr	r1, [pc, #544]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000857a:	4313      	orrs	r3, r2
2000857c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
20008580:	687b      	ldr	r3, [r7, #4]
20008582:	681b      	ldr	r3, [r3, #0]
20008584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20008588:	2b00      	cmp	r3, #0
2000858a:	d00a      	beq.n	200085a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
2000858c:	4b83      	ldr	r3, [pc, #524]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000858e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20008596:	687b      	ldr	r3, [r7, #4]
20008598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2000859a:	4980      	ldr	r1, [pc, #512]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000859c:	4313      	orrs	r3, r2
2000859e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
200085a2:	687b      	ldr	r3, [r7, #4]
200085a4:	681b      	ldr	r3, [r3, #0]
200085a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200085aa:	2b00      	cmp	r3, #0
200085ac:	d00a      	beq.n	200085c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
200085ae:	4b7b      	ldr	r3, [pc, #492]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200085b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200085b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
200085b8:	687b      	ldr	r3, [r7, #4]
200085ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200085bc:	4977      	ldr	r1, [pc, #476]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200085be:	4313      	orrs	r3, r2
200085c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
200085c4:	687b      	ldr	r3, [r7, #4]
200085c6:	681b      	ldr	r3, [r3, #0]
200085c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200085cc:	2b00      	cmp	r3, #0
200085ce:	d00a      	beq.n	200085e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
200085d0:	4b72      	ldr	r3, [pc, #456]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200085d6:	f023 0203 	bic.w	r2, r3, #3
200085da:	687b      	ldr	r3, [r7, #4]
200085dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200085de:	496f      	ldr	r1, [pc, #444]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200085e0:	4313      	orrs	r3, r2
200085e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
200085e6:	687b      	ldr	r3, [r7, #4]
200085e8:	681b      	ldr	r3, [r3, #0]
200085ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200085ee:	2b00      	cmp	r3, #0
200085f0:	d00a      	beq.n	20008608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
200085f2:	4b6a      	ldr	r3, [pc, #424]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200085f8:	f023 020c 	bic.w	r2, r3, #12
200085fc:	687b      	ldr	r3, [r7, #4]
200085fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008600:	4966      	ldr	r1, [pc, #408]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008602:	4313      	orrs	r3, r2
20008604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
20008608:	687b      	ldr	r3, [r7, #4]
2000860a:	681b      	ldr	r3, [r3, #0]
2000860c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008610:	2b00      	cmp	r3, #0
20008612:	d00a      	beq.n	2000862a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
20008614:	4b61      	ldr	r3, [pc, #388]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000861a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
2000861e:	687b      	ldr	r3, [r7, #4]
20008620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008622:	495e      	ldr	r1, [pc, #376]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008624:	4313      	orrs	r3, r2
20008626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
2000862a:	687b      	ldr	r3, [r7, #4]
2000862c:	681b      	ldr	r3, [r3, #0]
2000862e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20008632:	2b00      	cmp	r3, #0
20008634:	d00a      	beq.n	2000864c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
20008636:	4b59      	ldr	r3, [pc, #356]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000863c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
20008640:	687b      	ldr	r3, [r7, #4]
20008642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20008644:	4955      	ldr	r1, [pc, #340]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008646:	4313      	orrs	r3, r2
20008648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
2000864c:	687b      	ldr	r3, [r7, #4]
2000864e:	681b      	ldr	r3, [r3, #0]
20008650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20008654:	2b00      	cmp	r3, #0
20008656:	d00a      	beq.n	2000866e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
20008658:	4b50      	ldr	r3, [pc, #320]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000865e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
20008662:	687b      	ldr	r3, [r7, #4]
20008664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008666:	494d      	ldr	r1, [pc, #308]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008668:	4313      	orrs	r3, r2
2000866a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
2000866e:	687b      	ldr	r3, [r7, #4]
20008670:	681b      	ldr	r3, [r3, #0]
20008672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20008676:	2b00      	cmp	r3, #0
20008678:	d00a      	beq.n	20008690 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
2000867a:	4b48      	ldr	r3, [pc, #288]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000867c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008680:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
20008684:	687b      	ldr	r3, [r7, #4]
20008686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20008688:	4944      	ldr	r1, [pc, #272]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000868a:	4313      	orrs	r3, r2
2000868c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
20008690:	687b      	ldr	r3, [r7, #4]
20008692:	681b      	ldr	r3, [r3, #0]
20008694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20008698:	2b00      	cmp	r3, #0
2000869a:	d00a      	beq.n	200086b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
2000869c:	4b3f      	ldr	r3, [pc, #252]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000869e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200086a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
200086a6:	687b      	ldr	r3, [r7, #4]
200086a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200086aa:	493c      	ldr	r1, [pc, #240]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200086ac:	4313      	orrs	r3, r2
200086ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
200086b2:	687b      	ldr	r3, [r7, #4]
200086b4:	681b      	ldr	r3, [r3, #0]
200086b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200086ba:	2b00      	cmp	r3, #0
200086bc:	d00a      	beq.n	200086d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
200086be:	4b37      	ldr	r3, [pc, #220]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200086c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200086c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
200086c8:	687b      	ldr	r3, [r7, #4]
200086ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200086cc:	4933      	ldr	r1, [pc, #204]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200086ce:	4313      	orrs	r3, r2
200086d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
200086d4:	687b      	ldr	r3, [r7, #4]
200086d6:	681b      	ldr	r3, [r3, #0]
200086d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200086dc:	2b00      	cmp	r3, #0
200086de:	d00a      	beq.n	200086f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
200086e0:	4b2e      	ldr	r3, [pc, #184]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200086e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
200086ea:	687b      	ldr	r3, [r7, #4]
200086ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
200086ee:	492b      	ldr	r1, [pc, #172]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
200086f0:	4313      	orrs	r3, r2
200086f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
200086f6:	687b      	ldr	r3, [r7, #4]
200086f8:	681b      	ldr	r3, [r3, #0]
200086fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200086fe:	2b00      	cmp	r3, #0
20008700:	d011      	beq.n	20008726 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
20008702:	4b26      	ldr	r3, [pc, #152]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008708:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
2000870c:	687b      	ldr	r3, [r7, #4]
2000870e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20008710:	4922      	ldr	r1, [pc, #136]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008712:	4313      	orrs	r3, r2
20008714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
20008718:	687b      	ldr	r3, [r7, #4]
2000871a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
2000871c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20008720:	d101      	bne.n	20008726 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
20008722:	2301      	movs	r3, #1
20008724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
20008726:	687b      	ldr	r3, [r7, #4]
20008728:	681b      	ldr	r3, [r3, #0]
2000872a:	f003 0308 	and.w	r3, r3, #8
2000872e:	2b00      	cmp	r3, #0
20008730:	d001      	beq.n	20008736 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
20008732:	2301      	movs	r3, #1
20008734:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
20008736:	687b      	ldr	r3, [r7, #4]
20008738:	681b      	ldr	r3, [r3, #0]
2000873a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2000873e:	2b00      	cmp	r3, #0
20008740:	d00a      	beq.n	20008758 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
20008742:	4b16      	ldr	r3, [pc, #88]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008748:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
2000874c:	687b      	ldr	r3, [r7, #4]
2000874e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20008750:	4912      	ldr	r1, [pc, #72]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008752:	4313      	orrs	r3, r2
20008754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
20008758:	687b      	ldr	r3, [r7, #4]
2000875a:	681b      	ldr	r3, [r3, #0]
2000875c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
20008760:	2b00      	cmp	r3, #0
20008762:	d00b      	beq.n	2000877c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
20008764:	4b0d      	ldr	r3, [pc, #52]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000876a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
2000876e:	687b      	ldr	r3, [r7, #4]
20008770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20008774:	4909      	ldr	r1, [pc, #36]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008776:	4313      	orrs	r3, r2
20008778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
2000877c:	69fb      	ldr	r3, [r7, #28]
2000877e:	2b01      	cmp	r3, #1
20008780:	d006      	beq.n	20008790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
20008782:	687b      	ldr	r3, [r7, #4]
20008784:	681b      	ldr	r3, [r3, #0]
20008786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000878a:	2b00      	cmp	r3, #0
2000878c:	f000 80d9 	beq.w	20008942 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20008790:	4b02      	ldr	r3, [pc, #8]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008792:	681b      	ldr	r3, [r3, #0]
20008794:	4a01      	ldr	r2, [pc, #4]	@ (2000879c <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008796:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
2000879a:	e001      	b.n	200087a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
2000879c:	40023800 	.word	0x40023800
200087a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200087a2:	f7fc ff95 	bl	200056d0 <HAL_GetTick>
200087a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200087a8:	e008      	b.n	200087bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
200087aa:	f7fc ff91 	bl	200056d0 <HAL_GetTick>
200087ae:	4602      	mov	r2, r0
200087b0:	697b      	ldr	r3, [r7, #20]
200087b2:	1ad3      	subs	r3, r2, r3
200087b4:	2b64      	cmp	r3, #100	@ 0x64
200087b6:	d901      	bls.n	200087bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200087b8:	2303      	movs	r3, #3
200087ba:	e194      	b.n	20008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200087bc:	4b6c      	ldr	r3, [pc, #432]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200087be:	681b      	ldr	r3, [r3, #0]
200087c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200087c4:	2b00      	cmp	r3, #0
200087c6:	d1f0      	bne.n	200087aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
200087c8:	687b      	ldr	r3, [r7, #4]
200087ca:	681b      	ldr	r3, [r3, #0]
200087cc:	f003 0301 	and.w	r3, r3, #1
200087d0:	2b00      	cmp	r3, #0
200087d2:	d021      	beq.n	20008818 <HAL_RCCEx_PeriphCLKConfig+0x504>
200087d4:	687b      	ldr	r3, [r7, #4]
200087d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200087d8:	2b00      	cmp	r3, #0
200087da:	d11d      	bne.n	20008818 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
200087dc:	4b64      	ldr	r3, [pc, #400]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200087de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200087e2:	0c1b      	lsrs	r3, r3, #16
200087e4:	f003 0303 	and.w	r3, r3, #3
200087e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
200087ea:	4b61      	ldr	r3, [pc, #388]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200087f0:	0e1b      	lsrs	r3, r3, #24
200087f2:	f003 030f 	and.w	r3, r3, #15
200087f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
200087f8:	687b      	ldr	r3, [r7, #4]
200087fa:	685b      	ldr	r3, [r3, #4]
200087fc:	019a      	lsls	r2, r3, #6
200087fe:	693b      	ldr	r3, [r7, #16]
20008800:	041b      	lsls	r3, r3, #16
20008802:	431a      	orrs	r2, r3
20008804:	68fb      	ldr	r3, [r7, #12]
20008806:	061b      	lsls	r3, r3, #24
20008808:	431a      	orrs	r2, r3
2000880a:	687b      	ldr	r3, [r7, #4]
2000880c:	689b      	ldr	r3, [r3, #8]
2000880e:	071b      	lsls	r3, r3, #28
20008810:	4957      	ldr	r1, [pc, #348]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008812:	4313      	orrs	r3, r2
20008814:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20008818:	687b      	ldr	r3, [r7, #4]
2000881a:	681b      	ldr	r3, [r3, #0]
2000881c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20008820:	2b00      	cmp	r3, #0
20008822:	d004      	beq.n	2000882e <HAL_RCCEx_PeriphCLKConfig+0x51a>
20008824:	687b      	ldr	r3, [r7, #4]
20008826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20008828:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
2000882c:	d00a      	beq.n	20008844 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
2000882e:	687b      	ldr	r3, [r7, #4]
20008830:	681b      	ldr	r3, [r3, #0]
20008832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20008836:	2b00      	cmp	r3, #0
20008838:	d02e      	beq.n	20008898 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
2000883a:	687b      	ldr	r3, [r7, #4]
2000883c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000883e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20008842:	d129      	bne.n	20008898 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20008844:	4b4a      	ldr	r3, [pc, #296]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2000884a:	0c1b      	lsrs	r3, r3, #16
2000884c:	f003 0303 	and.w	r3, r3, #3
20008850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20008852:	4b47      	ldr	r3, [pc, #284]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20008858:	0f1b      	lsrs	r3, r3, #28
2000885a:	f003 0307 	and.w	r3, r3, #7
2000885e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
20008860:	687b      	ldr	r3, [r7, #4]
20008862:	685b      	ldr	r3, [r3, #4]
20008864:	019a      	lsls	r2, r3, #6
20008866:	693b      	ldr	r3, [r7, #16]
20008868:	041b      	lsls	r3, r3, #16
2000886a:	431a      	orrs	r2, r3
2000886c:	687b      	ldr	r3, [r7, #4]
2000886e:	68db      	ldr	r3, [r3, #12]
20008870:	061b      	lsls	r3, r3, #24
20008872:	431a      	orrs	r2, r3
20008874:	68fb      	ldr	r3, [r7, #12]
20008876:	071b      	lsls	r3, r3, #28
20008878:	493d      	ldr	r1, [pc, #244]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000887a:	4313      	orrs	r3, r2
2000887c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
20008880:	4b3b      	ldr	r3, [pc, #236]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20008886:	f023 021f 	bic.w	r2, r3, #31
2000888a:	687b      	ldr	r3, [r7, #4]
2000888c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000888e:	3b01      	subs	r3, #1
20008890:	4937      	ldr	r1, [pc, #220]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008892:	4313      	orrs	r3, r2
20008894:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20008898:	687b      	ldr	r3, [r7, #4]
2000889a:	681b      	ldr	r3, [r3, #0]
2000889c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
200088a0:	2b00      	cmp	r3, #0
200088a2:	d01d      	beq.n	200088e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
200088a4:	4b32      	ldr	r3, [pc, #200]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200088a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200088aa:	0e1b      	lsrs	r3, r3, #24
200088ac:	f003 030f 	and.w	r3, r3, #15
200088b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
200088b2:	4b2f      	ldr	r3, [pc, #188]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200088b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200088b8:	0f1b      	lsrs	r3, r3, #28
200088ba:	f003 0307 	and.w	r3, r3, #7
200088be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
200088c0:	687b      	ldr	r3, [r7, #4]
200088c2:	685b      	ldr	r3, [r3, #4]
200088c4:	019a      	lsls	r2, r3, #6
200088c6:	687b      	ldr	r3, [r7, #4]
200088c8:	691b      	ldr	r3, [r3, #16]
200088ca:	041b      	lsls	r3, r3, #16
200088cc:	431a      	orrs	r2, r3
200088ce:	693b      	ldr	r3, [r7, #16]
200088d0:	061b      	lsls	r3, r3, #24
200088d2:	431a      	orrs	r2, r3
200088d4:	68fb      	ldr	r3, [r7, #12]
200088d6:	071b      	lsls	r3, r3, #28
200088d8:	4925      	ldr	r1, [pc, #148]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200088da:	4313      	orrs	r3, r2
200088dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
200088e0:	687b      	ldr	r3, [r7, #4]
200088e2:	681b      	ldr	r3, [r3, #0]
200088e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200088e8:	2b00      	cmp	r3, #0
200088ea:	d011      	beq.n	20008910 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
200088ec:	687b      	ldr	r3, [r7, #4]
200088ee:	685b      	ldr	r3, [r3, #4]
200088f0:	019a      	lsls	r2, r3, #6
200088f2:	687b      	ldr	r3, [r7, #4]
200088f4:	691b      	ldr	r3, [r3, #16]
200088f6:	041b      	lsls	r3, r3, #16
200088f8:	431a      	orrs	r2, r3
200088fa:	687b      	ldr	r3, [r7, #4]
200088fc:	68db      	ldr	r3, [r3, #12]
200088fe:	061b      	lsls	r3, r3, #24
20008900:	431a      	orrs	r2, r3
20008902:	687b      	ldr	r3, [r7, #4]
20008904:	689b      	ldr	r3, [r3, #8]
20008906:	071b      	lsls	r3, r3, #28
20008908:	4919      	ldr	r1, [pc, #100]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000890a:	4313      	orrs	r3, r2
2000890c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20008910:	4b17      	ldr	r3, [pc, #92]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008912:	681b      	ldr	r3, [r3, #0]
20008914:	4a16      	ldr	r2, [pc, #88]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008916:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
2000891a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000891c:	f7fc fed8 	bl	200056d0 <HAL_GetTick>
20008920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20008922:	e008      	b.n	20008936 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20008924:	f7fc fed4 	bl	200056d0 <HAL_GetTick>
20008928:	4602      	mov	r2, r0
2000892a:	697b      	ldr	r3, [r7, #20]
2000892c:	1ad3      	subs	r3, r2, r3
2000892e:	2b64      	cmp	r3, #100	@ 0x64
20008930:	d901      	bls.n	20008936 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20008932:	2303      	movs	r3, #3
20008934:	e0d7      	b.n	20008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20008936:	4b0e      	ldr	r3, [pc, #56]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008938:	681b      	ldr	r3, [r3, #0]
2000893a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
2000893e:	2b00      	cmp	r3, #0
20008940:	d0f0      	beq.n	20008924 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
20008942:	69bb      	ldr	r3, [r7, #24]
20008944:	2b01      	cmp	r3, #1
20008946:	f040 80cd 	bne.w	20008ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
2000894a:	4b09      	ldr	r3, [pc, #36]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000894c:	681b      	ldr	r3, [r3, #0]
2000894e:	4a08      	ldr	r2, [pc, #32]	@ (20008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20008954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20008956:	f7fc febb 	bl	200056d0 <HAL_GetTick>
2000895a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000895c:	e00a      	b.n	20008974 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2000895e:	f7fc feb7 	bl	200056d0 <HAL_GetTick>
20008962:	4602      	mov	r2, r0
20008964:	697b      	ldr	r3, [r7, #20]
20008966:	1ad3      	subs	r3, r2, r3
20008968:	2b64      	cmp	r3, #100	@ 0x64
2000896a:	d903      	bls.n	20008974 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000896c:	2303      	movs	r3, #3
2000896e:	e0ba      	b.n	20008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
20008970:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20008974:	4b5e      	ldr	r3, [pc, #376]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008976:	681b      	ldr	r3, [r3, #0]
20008978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
2000897c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20008980:	d0ed      	beq.n	2000895e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20008982:	687b      	ldr	r3, [r7, #4]
20008984:	681b      	ldr	r3, [r3, #0]
20008986:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2000898a:	2b00      	cmp	r3, #0
2000898c:	d003      	beq.n	20008996 <HAL_RCCEx_PeriphCLKConfig+0x682>
2000898e:	687b      	ldr	r3, [r7, #4]
20008990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20008992:	2b00      	cmp	r3, #0
20008994:	d009      	beq.n	200089aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
20008996:	687b      	ldr	r3, [r7, #4]
20008998:	681b      	ldr	r3, [r3, #0]
2000899a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
2000899e:	2b00      	cmp	r3, #0
200089a0:	d02e      	beq.n	20008a00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
200089a2:	687b      	ldr	r3, [r7, #4]
200089a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200089a6:	2b00      	cmp	r3, #0
200089a8:	d12a      	bne.n	20008a00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
200089aa:	4b51      	ldr	r3, [pc, #324]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200089b0:	0c1b      	lsrs	r3, r3, #16
200089b2:	f003 0303 	and.w	r3, r3, #3
200089b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
200089b8:	4b4d      	ldr	r3, [pc, #308]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200089be:	0f1b      	lsrs	r3, r3, #28
200089c0:	f003 0307 	and.w	r3, r3, #7
200089c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
200089c6:	687b      	ldr	r3, [r7, #4]
200089c8:	695b      	ldr	r3, [r3, #20]
200089ca:	019a      	lsls	r2, r3, #6
200089cc:	693b      	ldr	r3, [r7, #16]
200089ce:	041b      	lsls	r3, r3, #16
200089d0:	431a      	orrs	r2, r3
200089d2:	687b      	ldr	r3, [r7, #4]
200089d4:	699b      	ldr	r3, [r3, #24]
200089d6:	061b      	lsls	r3, r3, #24
200089d8:	431a      	orrs	r2, r3
200089da:	68fb      	ldr	r3, [r7, #12]
200089dc:	071b      	lsls	r3, r3, #28
200089de:	4944      	ldr	r1, [pc, #272]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200089e0:	4313      	orrs	r3, r2
200089e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
200089e6:	4b42      	ldr	r3, [pc, #264]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200089e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200089ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
200089f0:	687b      	ldr	r3, [r7, #4]
200089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200089f4:	3b01      	subs	r3, #1
200089f6:	021b      	lsls	r3, r3, #8
200089f8:	493d      	ldr	r1, [pc, #244]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200089fa:	4313      	orrs	r3, r2
200089fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
20008a00:	687b      	ldr	r3, [r7, #4]
20008a02:	681b      	ldr	r3, [r3, #0]
20008a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20008a08:	2b00      	cmp	r3, #0
20008a0a:	d022      	beq.n	20008a52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
20008a0c:	687b      	ldr	r3, [r7, #4]
20008a0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20008a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20008a14:	d11d      	bne.n	20008a52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20008a16:	4b36      	ldr	r3, [pc, #216]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20008a1c:	0e1b      	lsrs	r3, r3, #24
20008a1e:	f003 030f 	and.w	r3, r3, #15
20008a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20008a24:	4b32      	ldr	r3, [pc, #200]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20008a2a:	0f1b      	lsrs	r3, r3, #28
20008a2c:	f003 0307 	and.w	r3, r3, #7
20008a30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
20008a32:	687b      	ldr	r3, [r7, #4]
20008a34:	695b      	ldr	r3, [r3, #20]
20008a36:	019a      	lsls	r2, r3, #6
20008a38:	687b      	ldr	r3, [r7, #4]
20008a3a:	6a1b      	ldr	r3, [r3, #32]
20008a3c:	041b      	lsls	r3, r3, #16
20008a3e:	431a      	orrs	r2, r3
20008a40:	693b      	ldr	r3, [r7, #16]
20008a42:	061b      	lsls	r3, r3, #24
20008a44:	431a      	orrs	r2, r3
20008a46:	68fb      	ldr	r3, [r7, #12]
20008a48:	071b      	lsls	r3, r3, #28
20008a4a:	4929      	ldr	r1, [pc, #164]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008a4c:	4313      	orrs	r3, r2
20008a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
20008a52:	687b      	ldr	r3, [r7, #4]
20008a54:	681b      	ldr	r3, [r3, #0]
20008a56:	f003 0308 	and.w	r3, r3, #8
20008a5a:	2b00      	cmp	r3, #0
20008a5c:	d028      	beq.n	20008ab0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20008a5e:	4b24      	ldr	r3, [pc, #144]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20008a64:	0e1b      	lsrs	r3, r3, #24
20008a66:	f003 030f 	and.w	r3, r3, #15
20008a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20008a6c:	4b20      	ldr	r3, [pc, #128]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20008a72:	0c1b      	lsrs	r3, r3, #16
20008a74:	f003 0303 	and.w	r3, r3, #3
20008a78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
20008a7a:	687b      	ldr	r3, [r7, #4]
20008a7c:	695b      	ldr	r3, [r3, #20]
20008a7e:	019a      	lsls	r2, r3, #6
20008a80:	68fb      	ldr	r3, [r7, #12]
20008a82:	041b      	lsls	r3, r3, #16
20008a84:	431a      	orrs	r2, r3
20008a86:	693b      	ldr	r3, [r7, #16]
20008a88:	061b      	lsls	r3, r3, #24
20008a8a:	431a      	orrs	r2, r3
20008a8c:	687b      	ldr	r3, [r7, #4]
20008a8e:	69db      	ldr	r3, [r3, #28]
20008a90:	071b      	lsls	r3, r3, #28
20008a92:	4917      	ldr	r1, [pc, #92]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008a94:	4313      	orrs	r3, r2
20008a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
20008a9a:	4b15      	ldr	r3, [pc, #84]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20008aa0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20008aa4:	687b      	ldr	r3, [r7, #4]
20008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20008aa8:	4911      	ldr	r1, [pc, #68]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008aaa:	4313      	orrs	r3, r2
20008aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
20008ab0:	4b0f      	ldr	r3, [pc, #60]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008ab2:	681b      	ldr	r3, [r3, #0]
20008ab4:	4a0e      	ldr	r2, [pc, #56]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20008abc:	f7fc fe08 	bl	200056d0 <HAL_GetTick>
20008ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20008ac2:	e008      	b.n	20008ad6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20008ac4:	f7fc fe04 	bl	200056d0 <HAL_GetTick>
20008ac8:	4602      	mov	r2, r0
20008aca:	697b      	ldr	r3, [r7, #20]
20008acc:	1ad3      	subs	r3, r2, r3
20008ace:	2b64      	cmp	r3, #100	@ 0x64
20008ad0:	d901      	bls.n	20008ad6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20008ad2:	2303      	movs	r3, #3
20008ad4:	e007      	b.n	20008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20008ad6:	4b06      	ldr	r3, [pc, #24]	@ (20008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008ad8:	681b      	ldr	r3, [r3, #0]
20008ada:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20008ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20008ae2:	d1ef      	bne.n	20008ac4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
20008ae4:	2300      	movs	r3, #0
}
20008ae6:	4618      	mov	r0, r3
20008ae8:	3720      	adds	r7, #32
20008aea:	46bd      	mov	sp, r7
20008aec:	bd80      	pop	{r7, pc}
20008aee:	bf00      	nop
20008af0:	40023800 	.word	0x40023800

20008af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20008af4:	b580      	push	{r7, lr}
20008af6:	b084      	sub	sp, #16
20008af8:	af00      	add	r7, sp, #0
20008afa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
20008afc:	687b      	ldr	r3, [r7, #4]
20008afe:	2b00      	cmp	r3, #0
20008b00:	d101      	bne.n	20008b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20008b02:	2301      	movs	r3, #1
20008b04:	e09d      	b.n	20008c42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20008b06:	687b      	ldr	r3, [r7, #4]
20008b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008b0a:	2b00      	cmp	r3, #0
20008b0c:	d108      	bne.n	20008b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20008b0e:	687b      	ldr	r3, [r7, #4]
20008b10:	685b      	ldr	r3, [r3, #4]
20008b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20008b16:	d009      	beq.n	20008b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20008b18:	687b      	ldr	r3, [r7, #4]
20008b1a:	2200      	movs	r2, #0
20008b1c:	61da      	str	r2, [r3, #28]
20008b1e:	e005      	b.n	20008b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20008b20:	687b      	ldr	r3, [r7, #4]
20008b22:	2200      	movs	r2, #0
20008b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20008b26:	687b      	ldr	r3, [r7, #4]
20008b28:	2200      	movs	r2, #0
20008b2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20008b2c:	687b      	ldr	r3, [r7, #4]
20008b2e:	2200      	movs	r2, #0
20008b30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20008b32:	687b      	ldr	r3, [r7, #4]
20008b34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
20008b38:	b2db      	uxtb	r3, r3
20008b3a:	2b00      	cmp	r3, #0
20008b3c:	d106      	bne.n	20008b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20008b3e:	687b      	ldr	r3, [r7, #4]
20008b40:	2200      	movs	r2, #0
20008b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20008b46:	6878      	ldr	r0, [r7, #4]
20008b48:	f7fc fbcc 	bl	200052e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20008b4c:	687b      	ldr	r3, [r7, #4]
20008b4e:	2202      	movs	r2, #2
20008b50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20008b54:	687b      	ldr	r3, [r7, #4]
20008b56:	681b      	ldr	r3, [r3, #0]
20008b58:	681a      	ldr	r2, [r3, #0]
20008b5a:	687b      	ldr	r3, [r7, #4]
20008b5c:	681b      	ldr	r3, [r3, #0]
20008b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20008b62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20008b64:	687b      	ldr	r3, [r7, #4]
20008b66:	68db      	ldr	r3, [r3, #12]
20008b68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20008b6c:	d902      	bls.n	20008b74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
20008b6e:	2300      	movs	r3, #0
20008b70:	60fb      	str	r3, [r7, #12]
20008b72:	e002      	b.n	20008b7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
20008b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20008b78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
20008b7a:	687b      	ldr	r3, [r7, #4]
20008b7c:	68db      	ldr	r3, [r3, #12]
20008b7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
20008b82:	d007      	beq.n	20008b94 <HAL_SPI_Init+0xa0>
20008b84:	687b      	ldr	r3, [r7, #4]
20008b86:	68db      	ldr	r3, [r3, #12]
20008b88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20008b8c:	d002      	beq.n	20008b94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20008b8e:	687b      	ldr	r3, [r7, #4]
20008b90:	2200      	movs	r2, #0
20008b92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20008b94:	687b      	ldr	r3, [r7, #4]
20008b96:	685b      	ldr	r3, [r3, #4]
20008b98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
20008b9c:	687b      	ldr	r3, [r7, #4]
20008b9e:	689b      	ldr	r3, [r3, #8]
20008ba0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
20008ba4:	431a      	orrs	r2, r3
20008ba6:	687b      	ldr	r3, [r7, #4]
20008ba8:	691b      	ldr	r3, [r3, #16]
20008baa:	f003 0302 	and.w	r3, r3, #2
20008bae:	431a      	orrs	r2, r3
20008bb0:	687b      	ldr	r3, [r7, #4]
20008bb2:	695b      	ldr	r3, [r3, #20]
20008bb4:	f003 0301 	and.w	r3, r3, #1
20008bb8:	431a      	orrs	r2, r3
20008bba:	687b      	ldr	r3, [r7, #4]
20008bbc:	699b      	ldr	r3, [r3, #24]
20008bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20008bc2:	431a      	orrs	r2, r3
20008bc4:	687b      	ldr	r3, [r7, #4]
20008bc6:	69db      	ldr	r3, [r3, #28]
20008bc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20008bcc:	431a      	orrs	r2, r3
20008bce:	687b      	ldr	r3, [r7, #4]
20008bd0:	6a1b      	ldr	r3, [r3, #32]
20008bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20008bd6:	ea42 0103 	orr.w	r1, r2, r3
20008bda:	687b      	ldr	r3, [r7, #4]
20008bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20008bde:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
20008be2:	687b      	ldr	r3, [r7, #4]
20008be4:	681b      	ldr	r3, [r3, #0]
20008be6:	430a      	orrs	r2, r1
20008be8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
20008bea:	687b      	ldr	r3, [r7, #4]
20008bec:	699b      	ldr	r3, [r3, #24]
20008bee:	0c1b      	lsrs	r3, r3, #16
20008bf0:	f003 0204 	and.w	r2, r3, #4
20008bf4:	687b      	ldr	r3, [r7, #4]
20008bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008bf8:	f003 0310 	and.w	r3, r3, #16
20008bfc:	431a      	orrs	r2, r3
20008bfe:	687b      	ldr	r3, [r7, #4]
20008c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20008c02:	f003 0308 	and.w	r3, r3, #8
20008c06:	431a      	orrs	r2, r3
20008c08:	687b      	ldr	r3, [r7, #4]
20008c0a:	68db      	ldr	r3, [r3, #12]
20008c0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
20008c10:	ea42 0103 	orr.w	r1, r2, r3
20008c14:	68fb      	ldr	r3, [r7, #12]
20008c16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
20008c1a:	687b      	ldr	r3, [r7, #4]
20008c1c:	681b      	ldr	r3, [r3, #0]
20008c1e:	430a      	orrs	r2, r1
20008c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20008c22:	687b      	ldr	r3, [r7, #4]
20008c24:	681b      	ldr	r3, [r3, #0]
20008c26:	69da      	ldr	r2, [r3, #28]
20008c28:	687b      	ldr	r3, [r7, #4]
20008c2a:	681b      	ldr	r3, [r3, #0]
20008c2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
20008c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008c32:	687b      	ldr	r3, [r7, #4]
20008c34:	2200      	movs	r2, #0
20008c36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
20008c38:	687b      	ldr	r3, [r7, #4]
20008c3a:	2201      	movs	r2, #1
20008c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
20008c40:	2300      	movs	r3, #0
}
20008c42:	4618      	mov	r0, r3
20008c44:	3710      	adds	r7, #16
20008c46:	46bd      	mov	sp, r7
20008c48:	bd80      	pop	{r7, pc}

20008c4a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
20008c4a:	b580      	push	{r7, lr}
20008c4c:	b082      	sub	sp, #8
20008c4e:	af00      	add	r7, sp, #0
20008c50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
20008c52:	687b      	ldr	r3, [r7, #4]
20008c54:	2b00      	cmp	r3, #0
20008c56:	d101      	bne.n	20008c5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
20008c58:	2301      	movs	r3, #1
20008c5a:	e040      	b.n	20008cde <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
20008c5c:	687b      	ldr	r3, [r7, #4]
20008c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20008c60:	2b00      	cmp	r3, #0
20008c62:	d106      	bne.n	20008c72 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
20008c64:	687b      	ldr	r3, [r7, #4]
20008c66:	2200      	movs	r2, #0
20008c68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
20008c6c:	6878      	ldr	r0, [r7, #4]
20008c6e:	f7fc fbcd 	bl	2000540c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
20008c72:	687b      	ldr	r3, [r7, #4]
20008c74:	2224      	movs	r2, #36	@ 0x24
20008c76:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
20008c78:	687b      	ldr	r3, [r7, #4]
20008c7a:	681b      	ldr	r3, [r3, #0]
20008c7c:	681a      	ldr	r2, [r3, #0]
20008c7e:	687b      	ldr	r3, [r7, #4]
20008c80:	681b      	ldr	r3, [r3, #0]
20008c82:	f022 0201 	bic.w	r2, r2, #1
20008c86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
20008c88:	687b      	ldr	r3, [r7, #4]
20008c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008c8c:	2b00      	cmp	r3, #0
20008c8e:	d002      	beq.n	20008c96 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
20008c90:	6878      	ldr	r0, [r7, #4]
20008c92:	f000 fa8d 	bl	200091b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
20008c96:	6878      	ldr	r0, [r7, #4]
20008c98:	f000 f826 	bl	20008ce8 <UART_SetConfig>
20008c9c:	4603      	mov	r3, r0
20008c9e:	2b01      	cmp	r3, #1
20008ca0:	d101      	bne.n	20008ca6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
20008ca2:	2301      	movs	r3, #1
20008ca4:	e01b      	b.n	20008cde <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
20008ca6:	687b      	ldr	r3, [r7, #4]
20008ca8:	681b      	ldr	r3, [r3, #0]
20008caa:	685a      	ldr	r2, [r3, #4]
20008cac:	687b      	ldr	r3, [r7, #4]
20008cae:	681b      	ldr	r3, [r3, #0]
20008cb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
20008cb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
20008cb6:	687b      	ldr	r3, [r7, #4]
20008cb8:	681b      	ldr	r3, [r3, #0]
20008cba:	689a      	ldr	r2, [r3, #8]
20008cbc:	687b      	ldr	r3, [r7, #4]
20008cbe:	681b      	ldr	r3, [r3, #0]
20008cc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
20008cc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
20008cc6:	687b      	ldr	r3, [r7, #4]
20008cc8:	681b      	ldr	r3, [r3, #0]
20008cca:	681a      	ldr	r2, [r3, #0]
20008ccc:	687b      	ldr	r3, [r7, #4]
20008cce:	681b      	ldr	r3, [r3, #0]
20008cd0:	f042 0201 	orr.w	r2, r2, #1
20008cd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
20008cd6:	6878      	ldr	r0, [r7, #4]
20008cd8:	f000 fb0c 	bl	200092f4 <UART_CheckIdleState>
20008cdc:	4603      	mov	r3, r0
}
20008cde:	4618      	mov	r0, r3
20008ce0:	3708      	adds	r7, #8
20008ce2:	46bd      	mov	sp, r7
20008ce4:	bd80      	pop	{r7, pc}
	...

20008ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
20008ce8:	b580      	push	{r7, lr}
20008cea:	b088      	sub	sp, #32
20008cec:	af00      	add	r7, sp, #0
20008cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
20008cf0:	2300      	movs	r3, #0
20008cf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
20008cf4:	687b      	ldr	r3, [r7, #4]
20008cf6:	689a      	ldr	r2, [r3, #8]
20008cf8:	687b      	ldr	r3, [r7, #4]
20008cfa:	691b      	ldr	r3, [r3, #16]
20008cfc:	431a      	orrs	r2, r3
20008cfe:	687b      	ldr	r3, [r7, #4]
20008d00:	695b      	ldr	r3, [r3, #20]
20008d02:	431a      	orrs	r2, r3
20008d04:	687b      	ldr	r3, [r7, #4]
20008d06:	69db      	ldr	r3, [r3, #28]
20008d08:	4313      	orrs	r3, r2
20008d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
20008d0c:	687b      	ldr	r3, [r7, #4]
20008d0e:	681b      	ldr	r3, [r3, #0]
20008d10:	681a      	ldr	r2, [r3, #0]
20008d12:	4ba6      	ldr	r3, [pc, #664]	@ (20008fac <UART_SetConfig+0x2c4>)
20008d14:	4013      	ands	r3, r2
20008d16:	687a      	ldr	r2, [r7, #4]
20008d18:	6812      	ldr	r2, [r2, #0]
20008d1a:	6979      	ldr	r1, [r7, #20]
20008d1c:	430b      	orrs	r3, r1
20008d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
20008d20:	687b      	ldr	r3, [r7, #4]
20008d22:	681b      	ldr	r3, [r3, #0]
20008d24:	685b      	ldr	r3, [r3, #4]
20008d26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
20008d2a:	687b      	ldr	r3, [r7, #4]
20008d2c:	68da      	ldr	r2, [r3, #12]
20008d2e:	687b      	ldr	r3, [r7, #4]
20008d30:	681b      	ldr	r3, [r3, #0]
20008d32:	430a      	orrs	r2, r1
20008d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
20008d36:	687b      	ldr	r3, [r7, #4]
20008d38:	699b      	ldr	r3, [r3, #24]
20008d3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
20008d3c:	687b      	ldr	r3, [r7, #4]
20008d3e:	6a1b      	ldr	r3, [r3, #32]
20008d40:	697a      	ldr	r2, [r7, #20]
20008d42:	4313      	orrs	r3, r2
20008d44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
20008d46:	687b      	ldr	r3, [r7, #4]
20008d48:	681b      	ldr	r3, [r3, #0]
20008d4a:	689b      	ldr	r3, [r3, #8]
20008d4c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
20008d50:	687b      	ldr	r3, [r7, #4]
20008d52:	681b      	ldr	r3, [r3, #0]
20008d54:	697a      	ldr	r2, [r7, #20]
20008d56:	430a      	orrs	r2, r1
20008d58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
20008d5a:	687b      	ldr	r3, [r7, #4]
20008d5c:	681b      	ldr	r3, [r3, #0]
20008d5e:	4a94      	ldr	r2, [pc, #592]	@ (20008fb0 <UART_SetConfig+0x2c8>)
20008d60:	4293      	cmp	r3, r2
20008d62:	d120      	bne.n	20008da6 <UART_SetConfig+0xbe>
20008d64:	4b93      	ldr	r3, [pc, #588]	@ (20008fb4 <UART_SetConfig+0x2cc>)
20008d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008d6a:	f003 0303 	and.w	r3, r3, #3
20008d6e:	2b03      	cmp	r3, #3
20008d70:	d816      	bhi.n	20008da0 <UART_SetConfig+0xb8>
20008d72:	a201      	add	r2, pc, #4	@ (adr r2, 20008d78 <UART_SetConfig+0x90>)
20008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20008d78:	20008d89 	.word	0x20008d89
20008d7c:	20008d95 	.word	0x20008d95
20008d80:	20008d8f 	.word	0x20008d8f
20008d84:	20008d9b 	.word	0x20008d9b
20008d88:	2301      	movs	r3, #1
20008d8a:	77fb      	strb	r3, [r7, #31]
20008d8c:	e150      	b.n	20009030 <UART_SetConfig+0x348>
20008d8e:	2302      	movs	r3, #2
20008d90:	77fb      	strb	r3, [r7, #31]
20008d92:	e14d      	b.n	20009030 <UART_SetConfig+0x348>
20008d94:	2304      	movs	r3, #4
20008d96:	77fb      	strb	r3, [r7, #31]
20008d98:	e14a      	b.n	20009030 <UART_SetConfig+0x348>
20008d9a:	2308      	movs	r3, #8
20008d9c:	77fb      	strb	r3, [r7, #31]
20008d9e:	e147      	b.n	20009030 <UART_SetConfig+0x348>
20008da0:	2310      	movs	r3, #16
20008da2:	77fb      	strb	r3, [r7, #31]
20008da4:	e144      	b.n	20009030 <UART_SetConfig+0x348>
20008da6:	687b      	ldr	r3, [r7, #4]
20008da8:	681b      	ldr	r3, [r3, #0]
20008daa:	4a83      	ldr	r2, [pc, #524]	@ (20008fb8 <UART_SetConfig+0x2d0>)
20008dac:	4293      	cmp	r3, r2
20008dae:	d132      	bne.n	20008e16 <UART_SetConfig+0x12e>
20008db0:	4b80      	ldr	r3, [pc, #512]	@ (20008fb4 <UART_SetConfig+0x2cc>)
20008db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008db6:	f003 030c 	and.w	r3, r3, #12
20008dba:	2b0c      	cmp	r3, #12
20008dbc:	d828      	bhi.n	20008e10 <UART_SetConfig+0x128>
20008dbe:	a201      	add	r2, pc, #4	@ (adr r2, 20008dc4 <UART_SetConfig+0xdc>)
20008dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20008dc4:	20008df9 	.word	0x20008df9
20008dc8:	20008e11 	.word	0x20008e11
20008dcc:	20008e11 	.word	0x20008e11
20008dd0:	20008e11 	.word	0x20008e11
20008dd4:	20008e05 	.word	0x20008e05
20008dd8:	20008e11 	.word	0x20008e11
20008ddc:	20008e11 	.word	0x20008e11
20008de0:	20008e11 	.word	0x20008e11
20008de4:	20008dff 	.word	0x20008dff
20008de8:	20008e11 	.word	0x20008e11
20008dec:	20008e11 	.word	0x20008e11
20008df0:	20008e11 	.word	0x20008e11
20008df4:	20008e0b 	.word	0x20008e0b
20008df8:	2300      	movs	r3, #0
20008dfa:	77fb      	strb	r3, [r7, #31]
20008dfc:	e118      	b.n	20009030 <UART_SetConfig+0x348>
20008dfe:	2302      	movs	r3, #2
20008e00:	77fb      	strb	r3, [r7, #31]
20008e02:	e115      	b.n	20009030 <UART_SetConfig+0x348>
20008e04:	2304      	movs	r3, #4
20008e06:	77fb      	strb	r3, [r7, #31]
20008e08:	e112      	b.n	20009030 <UART_SetConfig+0x348>
20008e0a:	2308      	movs	r3, #8
20008e0c:	77fb      	strb	r3, [r7, #31]
20008e0e:	e10f      	b.n	20009030 <UART_SetConfig+0x348>
20008e10:	2310      	movs	r3, #16
20008e12:	77fb      	strb	r3, [r7, #31]
20008e14:	e10c      	b.n	20009030 <UART_SetConfig+0x348>
20008e16:	687b      	ldr	r3, [r7, #4]
20008e18:	681b      	ldr	r3, [r3, #0]
20008e1a:	4a68      	ldr	r2, [pc, #416]	@ (20008fbc <UART_SetConfig+0x2d4>)
20008e1c:	4293      	cmp	r3, r2
20008e1e:	d120      	bne.n	20008e62 <UART_SetConfig+0x17a>
20008e20:	4b64      	ldr	r3, [pc, #400]	@ (20008fb4 <UART_SetConfig+0x2cc>)
20008e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008e26:	f003 0330 	and.w	r3, r3, #48	@ 0x30
20008e2a:	2b30      	cmp	r3, #48	@ 0x30
20008e2c:	d013      	beq.n	20008e56 <UART_SetConfig+0x16e>
20008e2e:	2b30      	cmp	r3, #48	@ 0x30
20008e30:	d814      	bhi.n	20008e5c <UART_SetConfig+0x174>
20008e32:	2b20      	cmp	r3, #32
20008e34:	d009      	beq.n	20008e4a <UART_SetConfig+0x162>
20008e36:	2b20      	cmp	r3, #32
20008e38:	d810      	bhi.n	20008e5c <UART_SetConfig+0x174>
20008e3a:	2b00      	cmp	r3, #0
20008e3c:	d002      	beq.n	20008e44 <UART_SetConfig+0x15c>
20008e3e:	2b10      	cmp	r3, #16
20008e40:	d006      	beq.n	20008e50 <UART_SetConfig+0x168>
20008e42:	e00b      	b.n	20008e5c <UART_SetConfig+0x174>
20008e44:	2300      	movs	r3, #0
20008e46:	77fb      	strb	r3, [r7, #31]
20008e48:	e0f2      	b.n	20009030 <UART_SetConfig+0x348>
20008e4a:	2302      	movs	r3, #2
20008e4c:	77fb      	strb	r3, [r7, #31]
20008e4e:	e0ef      	b.n	20009030 <UART_SetConfig+0x348>
20008e50:	2304      	movs	r3, #4
20008e52:	77fb      	strb	r3, [r7, #31]
20008e54:	e0ec      	b.n	20009030 <UART_SetConfig+0x348>
20008e56:	2308      	movs	r3, #8
20008e58:	77fb      	strb	r3, [r7, #31]
20008e5a:	e0e9      	b.n	20009030 <UART_SetConfig+0x348>
20008e5c:	2310      	movs	r3, #16
20008e5e:	77fb      	strb	r3, [r7, #31]
20008e60:	e0e6      	b.n	20009030 <UART_SetConfig+0x348>
20008e62:	687b      	ldr	r3, [r7, #4]
20008e64:	681b      	ldr	r3, [r3, #0]
20008e66:	4a56      	ldr	r2, [pc, #344]	@ (20008fc0 <UART_SetConfig+0x2d8>)
20008e68:	4293      	cmp	r3, r2
20008e6a:	d120      	bne.n	20008eae <UART_SetConfig+0x1c6>
20008e6c:	4b51      	ldr	r3, [pc, #324]	@ (20008fb4 <UART_SetConfig+0x2cc>)
20008e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008e72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
20008e76:	2bc0      	cmp	r3, #192	@ 0xc0
20008e78:	d013      	beq.n	20008ea2 <UART_SetConfig+0x1ba>
20008e7a:	2bc0      	cmp	r3, #192	@ 0xc0
20008e7c:	d814      	bhi.n	20008ea8 <UART_SetConfig+0x1c0>
20008e7e:	2b80      	cmp	r3, #128	@ 0x80
20008e80:	d009      	beq.n	20008e96 <UART_SetConfig+0x1ae>
20008e82:	2b80      	cmp	r3, #128	@ 0x80
20008e84:	d810      	bhi.n	20008ea8 <UART_SetConfig+0x1c0>
20008e86:	2b00      	cmp	r3, #0
20008e88:	d002      	beq.n	20008e90 <UART_SetConfig+0x1a8>
20008e8a:	2b40      	cmp	r3, #64	@ 0x40
20008e8c:	d006      	beq.n	20008e9c <UART_SetConfig+0x1b4>
20008e8e:	e00b      	b.n	20008ea8 <UART_SetConfig+0x1c0>
20008e90:	2300      	movs	r3, #0
20008e92:	77fb      	strb	r3, [r7, #31]
20008e94:	e0cc      	b.n	20009030 <UART_SetConfig+0x348>
20008e96:	2302      	movs	r3, #2
20008e98:	77fb      	strb	r3, [r7, #31]
20008e9a:	e0c9      	b.n	20009030 <UART_SetConfig+0x348>
20008e9c:	2304      	movs	r3, #4
20008e9e:	77fb      	strb	r3, [r7, #31]
20008ea0:	e0c6      	b.n	20009030 <UART_SetConfig+0x348>
20008ea2:	2308      	movs	r3, #8
20008ea4:	77fb      	strb	r3, [r7, #31]
20008ea6:	e0c3      	b.n	20009030 <UART_SetConfig+0x348>
20008ea8:	2310      	movs	r3, #16
20008eaa:	77fb      	strb	r3, [r7, #31]
20008eac:	e0c0      	b.n	20009030 <UART_SetConfig+0x348>
20008eae:	687b      	ldr	r3, [r7, #4]
20008eb0:	681b      	ldr	r3, [r3, #0]
20008eb2:	4a44      	ldr	r2, [pc, #272]	@ (20008fc4 <UART_SetConfig+0x2dc>)
20008eb4:	4293      	cmp	r3, r2
20008eb6:	d125      	bne.n	20008f04 <UART_SetConfig+0x21c>
20008eb8:	4b3e      	ldr	r3, [pc, #248]	@ (20008fb4 <UART_SetConfig+0x2cc>)
20008eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20008ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20008ec6:	d017      	beq.n	20008ef8 <UART_SetConfig+0x210>
20008ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20008ecc:	d817      	bhi.n	20008efe <UART_SetConfig+0x216>
20008ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20008ed2:	d00b      	beq.n	20008eec <UART_SetConfig+0x204>
20008ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20008ed8:	d811      	bhi.n	20008efe <UART_SetConfig+0x216>
20008eda:	2b00      	cmp	r3, #0
20008edc:	d003      	beq.n	20008ee6 <UART_SetConfig+0x1fe>
20008ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20008ee2:	d006      	beq.n	20008ef2 <UART_SetConfig+0x20a>
20008ee4:	e00b      	b.n	20008efe <UART_SetConfig+0x216>
20008ee6:	2300      	movs	r3, #0
20008ee8:	77fb      	strb	r3, [r7, #31]
20008eea:	e0a1      	b.n	20009030 <UART_SetConfig+0x348>
20008eec:	2302      	movs	r3, #2
20008eee:	77fb      	strb	r3, [r7, #31]
20008ef0:	e09e      	b.n	20009030 <UART_SetConfig+0x348>
20008ef2:	2304      	movs	r3, #4
20008ef4:	77fb      	strb	r3, [r7, #31]
20008ef6:	e09b      	b.n	20009030 <UART_SetConfig+0x348>
20008ef8:	2308      	movs	r3, #8
20008efa:	77fb      	strb	r3, [r7, #31]
20008efc:	e098      	b.n	20009030 <UART_SetConfig+0x348>
20008efe:	2310      	movs	r3, #16
20008f00:	77fb      	strb	r3, [r7, #31]
20008f02:	e095      	b.n	20009030 <UART_SetConfig+0x348>
20008f04:	687b      	ldr	r3, [r7, #4]
20008f06:	681b      	ldr	r3, [r3, #0]
20008f08:	4a2f      	ldr	r2, [pc, #188]	@ (20008fc8 <UART_SetConfig+0x2e0>)
20008f0a:	4293      	cmp	r3, r2
20008f0c:	d125      	bne.n	20008f5a <UART_SetConfig+0x272>
20008f0e:	4b29      	ldr	r3, [pc, #164]	@ (20008fb4 <UART_SetConfig+0x2cc>)
20008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
20008f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20008f1c:	d017      	beq.n	20008f4e <UART_SetConfig+0x266>
20008f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20008f22:	d817      	bhi.n	20008f54 <UART_SetConfig+0x26c>
20008f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20008f28:	d00b      	beq.n	20008f42 <UART_SetConfig+0x25a>
20008f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20008f2e:	d811      	bhi.n	20008f54 <UART_SetConfig+0x26c>
20008f30:	2b00      	cmp	r3, #0
20008f32:	d003      	beq.n	20008f3c <UART_SetConfig+0x254>
20008f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20008f38:	d006      	beq.n	20008f48 <UART_SetConfig+0x260>
20008f3a:	e00b      	b.n	20008f54 <UART_SetConfig+0x26c>
20008f3c:	2301      	movs	r3, #1
20008f3e:	77fb      	strb	r3, [r7, #31]
20008f40:	e076      	b.n	20009030 <UART_SetConfig+0x348>
20008f42:	2302      	movs	r3, #2
20008f44:	77fb      	strb	r3, [r7, #31]
20008f46:	e073      	b.n	20009030 <UART_SetConfig+0x348>
20008f48:	2304      	movs	r3, #4
20008f4a:	77fb      	strb	r3, [r7, #31]
20008f4c:	e070      	b.n	20009030 <UART_SetConfig+0x348>
20008f4e:	2308      	movs	r3, #8
20008f50:	77fb      	strb	r3, [r7, #31]
20008f52:	e06d      	b.n	20009030 <UART_SetConfig+0x348>
20008f54:	2310      	movs	r3, #16
20008f56:	77fb      	strb	r3, [r7, #31]
20008f58:	e06a      	b.n	20009030 <UART_SetConfig+0x348>
20008f5a:	687b      	ldr	r3, [r7, #4]
20008f5c:	681b      	ldr	r3, [r3, #0]
20008f5e:	4a1b      	ldr	r2, [pc, #108]	@ (20008fcc <UART_SetConfig+0x2e4>)
20008f60:	4293      	cmp	r3, r2
20008f62:	d138      	bne.n	20008fd6 <UART_SetConfig+0x2ee>
20008f64:	4b13      	ldr	r3, [pc, #76]	@ (20008fb4 <UART_SetConfig+0x2cc>)
20008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008f6a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
20008f6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20008f72:	d017      	beq.n	20008fa4 <UART_SetConfig+0x2bc>
20008f74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20008f78:	d82a      	bhi.n	20008fd0 <UART_SetConfig+0x2e8>
20008f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20008f7e:	d00b      	beq.n	20008f98 <UART_SetConfig+0x2b0>
20008f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20008f84:	d824      	bhi.n	20008fd0 <UART_SetConfig+0x2e8>
20008f86:	2b00      	cmp	r3, #0
20008f88:	d003      	beq.n	20008f92 <UART_SetConfig+0x2aa>
20008f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20008f8e:	d006      	beq.n	20008f9e <UART_SetConfig+0x2b6>
20008f90:	e01e      	b.n	20008fd0 <UART_SetConfig+0x2e8>
20008f92:	2300      	movs	r3, #0
20008f94:	77fb      	strb	r3, [r7, #31]
20008f96:	e04b      	b.n	20009030 <UART_SetConfig+0x348>
20008f98:	2302      	movs	r3, #2
20008f9a:	77fb      	strb	r3, [r7, #31]
20008f9c:	e048      	b.n	20009030 <UART_SetConfig+0x348>
20008f9e:	2304      	movs	r3, #4
20008fa0:	77fb      	strb	r3, [r7, #31]
20008fa2:	e045      	b.n	20009030 <UART_SetConfig+0x348>
20008fa4:	2308      	movs	r3, #8
20008fa6:	77fb      	strb	r3, [r7, #31]
20008fa8:	e042      	b.n	20009030 <UART_SetConfig+0x348>
20008faa:	bf00      	nop
20008fac:	efff69f3 	.word	0xefff69f3
20008fb0:	40011000 	.word	0x40011000
20008fb4:	40023800 	.word	0x40023800
20008fb8:	40004400 	.word	0x40004400
20008fbc:	40004800 	.word	0x40004800
20008fc0:	40004c00 	.word	0x40004c00
20008fc4:	40005000 	.word	0x40005000
20008fc8:	40011400 	.word	0x40011400
20008fcc:	40007800 	.word	0x40007800
20008fd0:	2310      	movs	r3, #16
20008fd2:	77fb      	strb	r3, [r7, #31]
20008fd4:	e02c      	b.n	20009030 <UART_SetConfig+0x348>
20008fd6:	687b      	ldr	r3, [r7, #4]
20008fd8:	681b      	ldr	r3, [r3, #0]
20008fda:	4a72      	ldr	r2, [pc, #456]	@ (200091a4 <UART_SetConfig+0x4bc>)
20008fdc:	4293      	cmp	r3, r2
20008fde:	d125      	bne.n	2000902c <UART_SetConfig+0x344>
20008fe0:	4b71      	ldr	r3, [pc, #452]	@ (200091a8 <UART_SetConfig+0x4c0>)
20008fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008fe6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20008fea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20008fee:	d017      	beq.n	20009020 <UART_SetConfig+0x338>
20008ff0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20008ff4:	d817      	bhi.n	20009026 <UART_SetConfig+0x33e>
20008ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20008ffa:	d00b      	beq.n	20009014 <UART_SetConfig+0x32c>
20008ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20009000:	d811      	bhi.n	20009026 <UART_SetConfig+0x33e>
20009002:	2b00      	cmp	r3, #0
20009004:	d003      	beq.n	2000900e <UART_SetConfig+0x326>
20009006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2000900a:	d006      	beq.n	2000901a <UART_SetConfig+0x332>
2000900c:	e00b      	b.n	20009026 <UART_SetConfig+0x33e>
2000900e:	2300      	movs	r3, #0
20009010:	77fb      	strb	r3, [r7, #31]
20009012:	e00d      	b.n	20009030 <UART_SetConfig+0x348>
20009014:	2302      	movs	r3, #2
20009016:	77fb      	strb	r3, [r7, #31]
20009018:	e00a      	b.n	20009030 <UART_SetConfig+0x348>
2000901a:	2304      	movs	r3, #4
2000901c:	77fb      	strb	r3, [r7, #31]
2000901e:	e007      	b.n	20009030 <UART_SetConfig+0x348>
20009020:	2308      	movs	r3, #8
20009022:	77fb      	strb	r3, [r7, #31]
20009024:	e004      	b.n	20009030 <UART_SetConfig+0x348>
20009026:	2310      	movs	r3, #16
20009028:	77fb      	strb	r3, [r7, #31]
2000902a:	e001      	b.n	20009030 <UART_SetConfig+0x348>
2000902c:	2310      	movs	r3, #16
2000902e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20009030:	687b      	ldr	r3, [r7, #4]
20009032:	69db      	ldr	r3, [r3, #28]
20009034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20009038:	d15b      	bne.n	200090f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
2000903a:	7ffb      	ldrb	r3, [r7, #31]
2000903c:	2b08      	cmp	r3, #8
2000903e:	d828      	bhi.n	20009092 <UART_SetConfig+0x3aa>
20009040:	a201      	add	r2, pc, #4	@ (adr r2, 20009048 <UART_SetConfig+0x360>)
20009042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20009046:	bf00      	nop
20009048:	2000906d 	.word	0x2000906d
2000904c:	20009075 	.word	0x20009075
20009050:	2000907d 	.word	0x2000907d
20009054:	20009093 	.word	0x20009093
20009058:	20009083 	.word	0x20009083
2000905c:	20009093 	.word	0x20009093
20009060:	20009093 	.word	0x20009093
20009064:	20009093 	.word	0x20009093
20009068:	2000908b 	.word	0x2000908b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
2000906c:	f7ff f92a 	bl	200082c4 <HAL_RCC_GetPCLK1Freq>
20009070:	61b8      	str	r0, [r7, #24]
        break;
20009072:	e013      	b.n	2000909c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20009074:	f7ff f93a 	bl	200082ec <HAL_RCC_GetPCLK2Freq>
20009078:	61b8      	str	r0, [r7, #24]
        break;
2000907a:	e00f      	b.n	2000909c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
2000907c:	4b4b      	ldr	r3, [pc, #300]	@ (200091ac <UART_SetConfig+0x4c4>)
2000907e:	61bb      	str	r3, [r7, #24]
        break;
20009080:	e00c      	b.n	2000909c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20009082:	f7ff f80d 	bl	200080a0 <HAL_RCC_GetSysClockFreq>
20009086:	61b8      	str	r0, [r7, #24]
        break;
20009088:	e008      	b.n	2000909c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
2000908a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
2000908e:	61bb      	str	r3, [r7, #24]
        break;
20009090:	e004      	b.n	2000909c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
20009092:	2300      	movs	r3, #0
20009094:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20009096:	2301      	movs	r3, #1
20009098:	77bb      	strb	r3, [r7, #30]
        break;
2000909a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
2000909c:	69bb      	ldr	r3, [r7, #24]
2000909e:	2b00      	cmp	r3, #0
200090a0:	d074      	beq.n	2000918c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
200090a2:	69bb      	ldr	r3, [r7, #24]
200090a4:	005a      	lsls	r2, r3, #1
200090a6:	687b      	ldr	r3, [r7, #4]
200090a8:	685b      	ldr	r3, [r3, #4]
200090aa:	085b      	lsrs	r3, r3, #1
200090ac:	441a      	add	r2, r3
200090ae:	687b      	ldr	r3, [r7, #4]
200090b0:	685b      	ldr	r3, [r3, #4]
200090b2:	fbb2 f3f3 	udiv	r3, r2, r3
200090b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
200090b8:	693b      	ldr	r3, [r7, #16]
200090ba:	2b0f      	cmp	r3, #15
200090bc:	d916      	bls.n	200090ec <UART_SetConfig+0x404>
200090be:	693b      	ldr	r3, [r7, #16]
200090c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200090c4:	d212      	bcs.n	200090ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
200090c6:	693b      	ldr	r3, [r7, #16]
200090c8:	b29b      	uxth	r3, r3
200090ca:	f023 030f 	bic.w	r3, r3, #15
200090ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
200090d0:	693b      	ldr	r3, [r7, #16]
200090d2:	085b      	lsrs	r3, r3, #1
200090d4:	b29b      	uxth	r3, r3
200090d6:	f003 0307 	and.w	r3, r3, #7
200090da:	b29a      	uxth	r2, r3
200090dc:	89fb      	ldrh	r3, [r7, #14]
200090de:	4313      	orrs	r3, r2
200090e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
200090e2:	687b      	ldr	r3, [r7, #4]
200090e4:	681b      	ldr	r3, [r3, #0]
200090e6:	89fa      	ldrh	r2, [r7, #14]
200090e8:	60da      	str	r2, [r3, #12]
200090ea:	e04f      	b.n	2000918c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
200090ec:	2301      	movs	r3, #1
200090ee:	77bb      	strb	r3, [r7, #30]
200090f0:	e04c      	b.n	2000918c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
200090f2:	7ffb      	ldrb	r3, [r7, #31]
200090f4:	2b08      	cmp	r3, #8
200090f6:	d828      	bhi.n	2000914a <UART_SetConfig+0x462>
200090f8:	a201      	add	r2, pc, #4	@ (adr r2, 20009100 <UART_SetConfig+0x418>)
200090fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200090fe:	bf00      	nop
20009100:	20009125 	.word	0x20009125
20009104:	2000912d 	.word	0x2000912d
20009108:	20009135 	.word	0x20009135
2000910c:	2000914b 	.word	0x2000914b
20009110:	2000913b 	.word	0x2000913b
20009114:	2000914b 	.word	0x2000914b
20009118:	2000914b 	.word	0x2000914b
2000911c:	2000914b 	.word	0x2000914b
20009120:	20009143 	.word	0x20009143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20009124:	f7ff f8ce 	bl	200082c4 <HAL_RCC_GetPCLK1Freq>
20009128:	61b8      	str	r0, [r7, #24]
        break;
2000912a:	e013      	b.n	20009154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
2000912c:	f7ff f8de 	bl	200082ec <HAL_RCC_GetPCLK2Freq>
20009130:	61b8      	str	r0, [r7, #24]
        break;
20009132:	e00f      	b.n	20009154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20009134:	4b1d      	ldr	r3, [pc, #116]	@ (200091ac <UART_SetConfig+0x4c4>)
20009136:	61bb      	str	r3, [r7, #24]
        break;
20009138:	e00c      	b.n	20009154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
2000913a:	f7fe ffb1 	bl	200080a0 <HAL_RCC_GetSysClockFreq>
2000913e:	61b8      	str	r0, [r7, #24]
        break;
20009140:	e008      	b.n	20009154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20009142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20009146:	61bb      	str	r3, [r7, #24]
        break;
20009148:	e004      	b.n	20009154 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
2000914a:	2300      	movs	r3, #0
2000914c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
2000914e:	2301      	movs	r3, #1
20009150:	77bb      	strb	r3, [r7, #30]
        break;
20009152:	bf00      	nop
    }

    if (pclk != 0U)
20009154:	69bb      	ldr	r3, [r7, #24]
20009156:	2b00      	cmp	r3, #0
20009158:	d018      	beq.n	2000918c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
2000915a:	687b      	ldr	r3, [r7, #4]
2000915c:	685b      	ldr	r3, [r3, #4]
2000915e:	085a      	lsrs	r2, r3, #1
20009160:	69bb      	ldr	r3, [r7, #24]
20009162:	441a      	add	r2, r3
20009164:	687b      	ldr	r3, [r7, #4]
20009166:	685b      	ldr	r3, [r3, #4]
20009168:	fbb2 f3f3 	udiv	r3, r2, r3
2000916c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
2000916e:	693b      	ldr	r3, [r7, #16]
20009170:	2b0f      	cmp	r3, #15
20009172:	d909      	bls.n	20009188 <UART_SetConfig+0x4a0>
20009174:	693b      	ldr	r3, [r7, #16]
20009176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2000917a:	d205      	bcs.n	20009188 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
2000917c:	693b      	ldr	r3, [r7, #16]
2000917e:	b29a      	uxth	r2, r3
20009180:	687b      	ldr	r3, [r7, #4]
20009182:	681b      	ldr	r3, [r3, #0]
20009184:	60da      	str	r2, [r3, #12]
20009186:	e001      	b.n	2000918c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20009188:	2301      	movs	r3, #1
2000918a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
2000918c:	687b      	ldr	r3, [r7, #4]
2000918e:	2200      	movs	r2, #0
20009190:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
20009192:	687b      	ldr	r3, [r7, #4]
20009194:	2200      	movs	r2, #0
20009196:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
20009198:	7fbb      	ldrb	r3, [r7, #30]
}
2000919a:	4618      	mov	r0, r3
2000919c:	3720      	adds	r7, #32
2000919e:	46bd      	mov	sp, r7
200091a0:	bd80      	pop	{r7, pc}
200091a2:	bf00      	nop
200091a4:	40007c00 	.word	0x40007c00
200091a8:	40023800 	.word	0x40023800
200091ac:	00f42400 	.word	0x00f42400

200091b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
200091b0:	b480      	push	{r7}
200091b2:	b083      	sub	sp, #12
200091b4:	af00      	add	r7, sp, #0
200091b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
200091b8:	687b      	ldr	r3, [r7, #4]
200091ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200091bc:	f003 0308 	and.w	r3, r3, #8
200091c0:	2b00      	cmp	r3, #0
200091c2:	d00a      	beq.n	200091da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
200091c4:	687b      	ldr	r3, [r7, #4]
200091c6:	681b      	ldr	r3, [r3, #0]
200091c8:	685b      	ldr	r3, [r3, #4]
200091ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
200091ce:	687b      	ldr	r3, [r7, #4]
200091d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
200091d2:	687b      	ldr	r3, [r7, #4]
200091d4:	681b      	ldr	r3, [r3, #0]
200091d6:	430a      	orrs	r2, r1
200091d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
200091da:	687b      	ldr	r3, [r7, #4]
200091dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200091de:	f003 0301 	and.w	r3, r3, #1
200091e2:	2b00      	cmp	r3, #0
200091e4:	d00a      	beq.n	200091fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
200091e6:	687b      	ldr	r3, [r7, #4]
200091e8:	681b      	ldr	r3, [r3, #0]
200091ea:	685b      	ldr	r3, [r3, #4]
200091ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
200091f0:	687b      	ldr	r3, [r7, #4]
200091f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
200091f4:	687b      	ldr	r3, [r7, #4]
200091f6:	681b      	ldr	r3, [r3, #0]
200091f8:	430a      	orrs	r2, r1
200091fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
200091fc:	687b      	ldr	r3, [r7, #4]
200091fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20009200:	f003 0302 	and.w	r3, r3, #2
20009204:	2b00      	cmp	r3, #0
20009206:	d00a      	beq.n	2000921e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
20009208:	687b      	ldr	r3, [r7, #4]
2000920a:	681b      	ldr	r3, [r3, #0]
2000920c:	685b      	ldr	r3, [r3, #4]
2000920e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
20009212:	687b      	ldr	r3, [r7, #4]
20009214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20009216:	687b      	ldr	r3, [r7, #4]
20009218:	681b      	ldr	r3, [r3, #0]
2000921a:	430a      	orrs	r2, r1
2000921c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
2000921e:	687b      	ldr	r3, [r7, #4]
20009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20009222:	f003 0304 	and.w	r3, r3, #4
20009226:	2b00      	cmp	r3, #0
20009228:	d00a      	beq.n	20009240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
2000922a:	687b      	ldr	r3, [r7, #4]
2000922c:	681b      	ldr	r3, [r3, #0]
2000922e:	685b      	ldr	r3, [r3, #4]
20009230:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
20009234:	687b      	ldr	r3, [r7, #4]
20009236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20009238:	687b      	ldr	r3, [r7, #4]
2000923a:	681b      	ldr	r3, [r3, #0]
2000923c:	430a      	orrs	r2, r1
2000923e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
20009240:	687b      	ldr	r3, [r7, #4]
20009242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20009244:	f003 0310 	and.w	r3, r3, #16
20009248:	2b00      	cmp	r3, #0
2000924a:	d00a      	beq.n	20009262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
2000924c:	687b      	ldr	r3, [r7, #4]
2000924e:	681b      	ldr	r3, [r3, #0]
20009250:	689b      	ldr	r3, [r3, #8]
20009252:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
20009256:	687b      	ldr	r3, [r7, #4]
20009258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
2000925a:	687b      	ldr	r3, [r7, #4]
2000925c:	681b      	ldr	r3, [r3, #0]
2000925e:	430a      	orrs	r2, r1
20009260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
20009262:	687b      	ldr	r3, [r7, #4]
20009264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20009266:	f003 0320 	and.w	r3, r3, #32
2000926a:	2b00      	cmp	r3, #0
2000926c:	d00a      	beq.n	20009284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
2000926e:	687b      	ldr	r3, [r7, #4]
20009270:	681b      	ldr	r3, [r3, #0]
20009272:	689b      	ldr	r3, [r3, #8]
20009274:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
20009278:	687b      	ldr	r3, [r7, #4]
2000927a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
2000927c:	687b      	ldr	r3, [r7, #4]
2000927e:	681b      	ldr	r3, [r3, #0]
20009280:	430a      	orrs	r2, r1
20009282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
20009284:	687b      	ldr	r3, [r7, #4]
20009286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20009288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000928c:	2b00      	cmp	r3, #0
2000928e:	d01a      	beq.n	200092c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
20009290:	687b      	ldr	r3, [r7, #4]
20009292:	681b      	ldr	r3, [r3, #0]
20009294:	685b      	ldr	r3, [r3, #4]
20009296:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
2000929a:	687b      	ldr	r3, [r7, #4]
2000929c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
2000929e:	687b      	ldr	r3, [r7, #4]
200092a0:	681b      	ldr	r3, [r3, #0]
200092a2:	430a      	orrs	r2, r1
200092a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
200092a6:	687b      	ldr	r3, [r7, #4]
200092a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200092aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
200092ae:	d10a      	bne.n	200092c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
200092b0:	687b      	ldr	r3, [r7, #4]
200092b2:	681b      	ldr	r3, [r3, #0]
200092b4:	685b      	ldr	r3, [r3, #4]
200092b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
200092ba:	687b      	ldr	r3, [r7, #4]
200092bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
200092be:	687b      	ldr	r3, [r7, #4]
200092c0:	681b      	ldr	r3, [r3, #0]
200092c2:	430a      	orrs	r2, r1
200092c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
200092c6:	687b      	ldr	r3, [r7, #4]
200092c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200092ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200092ce:	2b00      	cmp	r3, #0
200092d0:	d00a      	beq.n	200092e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
200092d2:	687b      	ldr	r3, [r7, #4]
200092d4:	681b      	ldr	r3, [r3, #0]
200092d6:	685b      	ldr	r3, [r3, #4]
200092d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
200092dc:	687b      	ldr	r3, [r7, #4]
200092de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
200092e0:	687b      	ldr	r3, [r7, #4]
200092e2:	681b      	ldr	r3, [r3, #0]
200092e4:	430a      	orrs	r2, r1
200092e6:	605a      	str	r2, [r3, #4]
  }
}
200092e8:	bf00      	nop
200092ea:	370c      	adds	r7, #12
200092ec:	46bd      	mov	sp, r7
200092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200092f2:	4770      	bx	lr

200092f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
200092f4:	b580      	push	{r7, lr}
200092f6:	b08c      	sub	sp, #48	@ 0x30
200092f8:	af02      	add	r7, sp, #8
200092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
200092fc:	687b      	ldr	r3, [r7, #4]
200092fe:	2200      	movs	r2, #0
20009300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
20009304:	f7fc f9e4 	bl	200056d0 <HAL_GetTick>
20009308:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
2000930a:	687b      	ldr	r3, [r7, #4]
2000930c:	681b      	ldr	r3, [r3, #0]
2000930e:	681b      	ldr	r3, [r3, #0]
20009310:	f003 0308 	and.w	r3, r3, #8
20009314:	2b08      	cmp	r3, #8
20009316:	d12e      	bne.n	20009376 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
20009318:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
2000931c:	9300      	str	r3, [sp, #0]
2000931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20009320:	2200      	movs	r2, #0
20009322:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
20009326:	6878      	ldr	r0, [r7, #4]
20009328:	f000 f83b 	bl	200093a2 <UART_WaitOnFlagUntilTimeout>
2000932c:	4603      	mov	r3, r0
2000932e:	2b00      	cmp	r3, #0
20009330:	d021      	beq.n	20009376 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
20009332:	687b      	ldr	r3, [r7, #4]
20009334:	681b      	ldr	r3, [r3, #0]
20009336:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20009338:	693b      	ldr	r3, [r7, #16]
2000933a:	e853 3f00 	ldrex	r3, [r3]
2000933e:	60fb      	str	r3, [r7, #12]
   return(result);
20009340:	68fb      	ldr	r3, [r7, #12]
20009342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
20009346:	623b      	str	r3, [r7, #32]
20009348:	687b      	ldr	r3, [r7, #4]
2000934a:	681b      	ldr	r3, [r3, #0]
2000934c:	461a      	mov	r2, r3
2000934e:	6a3b      	ldr	r3, [r7, #32]
20009350:	61fb      	str	r3, [r7, #28]
20009352:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20009354:	69b9      	ldr	r1, [r7, #24]
20009356:	69fa      	ldr	r2, [r7, #28]
20009358:	e841 2300 	strex	r3, r2, [r1]
2000935c:	617b      	str	r3, [r7, #20]
   return(result);
2000935e:	697b      	ldr	r3, [r7, #20]
20009360:	2b00      	cmp	r3, #0
20009362:	d1e6      	bne.n	20009332 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
20009364:	687b      	ldr	r3, [r7, #4]
20009366:	2220      	movs	r2, #32
20009368:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
2000936a:	687b      	ldr	r3, [r7, #4]
2000936c:	2200      	movs	r2, #0
2000936e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
20009372:	2303      	movs	r3, #3
20009374:	e011      	b.n	2000939a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
20009376:	687b      	ldr	r3, [r7, #4]
20009378:	2220      	movs	r2, #32
2000937a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
2000937c:	687b      	ldr	r3, [r7, #4]
2000937e:	2220      	movs	r2, #32
20009380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
20009384:	687b      	ldr	r3, [r7, #4]
20009386:	2200      	movs	r2, #0
20009388:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
2000938a:	687b      	ldr	r3, [r7, #4]
2000938c:	2200      	movs	r2, #0
2000938e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
20009390:	687b      	ldr	r3, [r7, #4]
20009392:	2200      	movs	r2, #0
20009394:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
20009398:	2300      	movs	r3, #0
}
2000939a:	4618      	mov	r0, r3
2000939c:	3728      	adds	r7, #40	@ 0x28
2000939e:	46bd      	mov	sp, r7
200093a0:	bd80      	pop	{r7, pc}

200093a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
200093a2:	b580      	push	{r7, lr}
200093a4:	b084      	sub	sp, #16
200093a6:	af00      	add	r7, sp, #0
200093a8:	60f8      	str	r0, [r7, #12]
200093aa:	60b9      	str	r1, [r7, #8]
200093ac:	603b      	str	r3, [r7, #0]
200093ae:	4613      	mov	r3, r2
200093b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
200093b2:	e04f      	b.n	20009454 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
200093b4:	69bb      	ldr	r3, [r7, #24]
200093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
200093ba:	d04b      	beq.n	20009454 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200093bc:	f7fc f988 	bl	200056d0 <HAL_GetTick>
200093c0:	4602      	mov	r2, r0
200093c2:	683b      	ldr	r3, [r7, #0]
200093c4:	1ad3      	subs	r3, r2, r3
200093c6:	69ba      	ldr	r2, [r7, #24]
200093c8:	429a      	cmp	r2, r3
200093ca:	d302      	bcc.n	200093d2 <UART_WaitOnFlagUntilTimeout+0x30>
200093cc:	69bb      	ldr	r3, [r7, #24]
200093ce:	2b00      	cmp	r3, #0
200093d0:	d101      	bne.n	200093d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
200093d2:	2303      	movs	r3, #3
200093d4:	e04e      	b.n	20009474 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
200093d6:	68fb      	ldr	r3, [r7, #12]
200093d8:	681b      	ldr	r3, [r3, #0]
200093da:	681b      	ldr	r3, [r3, #0]
200093dc:	f003 0304 	and.w	r3, r3, #4
200093e0:	2b00      	cmp	r3, #0
200093e2:	d037      	beq.n	20009454 <UART_WaitOnFlagUntilTimeout+0xb2>
200093e4:	68bb      	ldr	r3, [r7, #8]
200093e6:	2b80      	cmp	r3, #128	@ 0x80
200093e8:	d034      	beq.n	20009454 <UART_WaitOnFlagUntilTimeout+0xb2>
200093ea:	68bb      	ldr	r3, [r7, #8]
200093ec:	2b40      	cmp	r3, #64	@ 0x40
200093ee:	d031      	beq.n	20009454 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
200093f0:	68fb      	ldr	r3, [r7, #12]
200093f2:	681b      	ldr	r3, [r3, #0]
200093f4:	69db      	ldr	r3, [r3, #28]
200093f6:	f003 0308 	and.w	r3, r3, #8
200093fa:	2b08      	cmp	r3, #8
200093fc:	d110      	bne.n	20009420 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
200093fe:	68fb      	ldr	r3, [r7, #12]
20009400:	681b      	ldr	r3, [r3, #0]
20009402:	2208      	movs	r2, #8
20009404:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
20009406:	68f8      	ldr	r0, [r7, #12]
20009408:	f000 f838 	bl	2000947c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
2000940c:	68fb      	ldr	r3, [r7, #12]
2000940e:	2208      	movs	r2, #8
20009410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20009414:	68fb      	ldr	r3, [r7, #12]
20009416:	2200      	movs	r2, #0
20009418:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
2000941c:	2301      	movs	r3, #1
2000941e:	e029      	b.n	20009474 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
20009420:	68fb      	ldr	r3, [r7, #12]
20009422:	681b      	ldr	r3, [r3, #0]
20009424:	69db      	ldr	r3, [r3, #28]
20009426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
2000942a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2000942e:	d111      	bne.n	20009454 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
20009430:	68fb      	ldr	r3, [r7, #12]
20009432:	681b      	ldr	r3, [r3, #0]
20009434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20009438:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
2000943a:	68f8      	ldr	r0, [r7, #12]
2000943c:	f000 f81e 	bl	2000947c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
20009440:	68fb      	ldr	r3, [r7, #12]
20009442:	2220      	movs	r2, #32
20009444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20009448:	68fb      	ldr	r3, [r7, #12]
2000944a:	2200      	movs	r2, #0
2000944c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
20009450:	2303      	movs	r3, #3
20009452:	e00f      	b.n	20009474 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
20009454:	68fb      	ldr	r3, [r7, #12]
20009456:	681b      	ldr	r3, [r3, #0]
20009458:	69da      	ldr	r2, [r3, #28]
2000945a:	68bb      	ldr	r3, [r7, #8]
2000945c:	4013      	ands	r3, r2
2000945e:	68ba      	ldr	r2, [r7, #8]
20009460:	429a      	cmp	r2, r3
20009462:	bf0c      	ite	eq
20009464:	2301      	moveq	r3, #1
20009466:	2300      	movne	r3, #0
20009468:	b2db      	uxtb	r3, r3
2000946a:	461a      	mov	r2, r3
2000946c:	79fb      	ldrb	r3, [r7, #7]
2000946e:	429a      	cmp	r2, r3
20009470:	d0a0      	beq.n	200093b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
20009472:	2300      	movs	r3, #0
}
20009474:	4618      	mov	r0, r3
20009476:	3710      	adds	r7, #16
20009478:	46bd      	mov	sp, r7
2000947a:	bd80      	pop	{r7, pc}

2000947c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
2000947c:	b480      	push	{r7}
2000947e:	b095      	sub	sp, #84	@ 0x54
20009480:	af00      	add	r7, sp, #0
20009482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
20009484:	687b      	ldr	r3, [r7, #4]
20009486:	681b      	ldr	r3, [r3, #0]
20009488:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
2000948a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000948c:	e853 3f00 	ldrex	r3, [r3]
20009490:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
20009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20009494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
20009498:	64fb      	str	r3, [r7, #76]	@ 0x4c
2000949a:	687b      	ldr	r3, [r7, #4]
2000949c:	681b      	ldr	r3, [r3, #0]
2000949e:	461a      	mov	r2, r3
200094a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200094a2:	643b      	str	r3, [r7, #64]	@ 0x40
200094a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200094a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
200094a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
200094aa:	e841 2300 	strex	r3, r2, [r1]
200094ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
200094b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200094b2:	2b00      	cmp	r3, #0
200094b4:	d1e6      	bne.n	20009484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
200094b6:	687b      	ldr	r3, [r7, #4]
200094b8:	681b      	ldr	r3, [r3, #0]
200094ba:	3308      	adds	r3, #8
200094bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200094be:	6a3b      	ldr	r3, [r7, #32]
200094c0:	e853 3f00 	ldrex	r3, [r3]
200094c4:	61fb      	str	r3, [r7, #28]
   return(result);
200094c6:	69fb      	ldr	r3, [r7, #28]
200094c8:	f023 0301 	bic.w	r3, r3, #1
200094cc:	64bb      	str	r3, [r7, #72]	@ 0x48
200094ce:	687b      	ldr	r3, [r7, #4]
200094d0:	681b      	ldr	r3, [r3, #0]
200094d2:	3308      	adds	r3, #8
200094d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
200094d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
200094d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200094da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
200094dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200094de:	e841 2300 	strex	r3, r2, [r1]
200094e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
200094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200094e6:	2b00      	cmp	r3, #0
200094e8:	d1e5      	bne.n	200094b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
200094ea:	687b      	ldr	r3, [r7, #4]
200094ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200094ee:	2b01      	cmp	r3, #1
200094f0:	d118      	bne.n	20009524 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
200094f2:	687b      	ldr	r3, [r7, #4]
200094f4:	681b      	ldr	r3, [r3, #0]
200094f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200094f8:	68fb      	ldr	r3, [r7, #12]
200094fa:	e853 3f00 	ldrex	r3, [r3]
200094fe:	60bb      	str	r3, [r7, #8]
   return(result);
20009500:	68bb      	ldr	r3, [r7, #8]
20009502:	f023 0310 	bic.w	r3, r3, #16
20009506:	647b      	str	r3, [r7, #68]	@ 0x44
20009508:	687b      	ldr	r3, [r7, #4]
2000950a:	681b      	ldr	r3, [r3, #0]
2000950c:	461a      	mov	r2, r3
2000950e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20009510:	61bb      	str	r3, [r7, #24]
20009512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20009514:	6979      	ldr	r1, [r7, #20]
20009516:	69ba      	ldr	r2, [r7, #24]
20009518:	e841 2300 	strex	r3, r2, [r1]
2000951c:	613b      	str	r3, [r7, #16]
   return(result);
2000951e:	693b      	ldr	r3, [r7, #16]
20009520:	2b00      	cmp	r3, #0
20009522:	d1e6      	bne.n	200094f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
20009524:	687b      	ldr	r3, [r7, #4]
20009526:	2220      	movs	r2, #32
20009528:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
2000952c:	687b      	ldr	r3, [r7, #4]
2000952e:	2200      	movs	r2, #0
20009530:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
20009532:	687b      	ldr	r3, [r7, #4]
20009534:	2200      	movs	r2, #0
20009536:	669a      	str	r2, [r3, #104]	@ 0x68
}
20009538:	bf00      	nop
2000953a:	3754      	adds	r7, #84	@ 0x54
2000953c:	46bd      	mov	sp, r7
2000953e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009542:	4770      	bx	lr

20009544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
20009544:	b084      	sub	sp, #16
20009546:	b580      	push	{r7, lr}
20009548:	b084      	sub	sp, #16
2000954a:	af00      	add	r7, sp, #0
2000954c:	6078      	str	r0, [r7, #4]
2000954e:	f107 001c 	add.w	r0, r7, #28
20009552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
20009556:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
2000955a:	2b01      	cmp	r3, #1
2000955c:	d121      	bne.n	200095a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
2000955e:	687b      	ldr	r3, [r7, #4]
20009560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009562:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
20009566:	687b      	ldr	r3, [r7, #4]
20009568:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
2000956a:	687b      	ldr	r3, [r7, #4]
2000956c:	68da      	ldr	r2, [r3, #12]
2000956e:	4b21      	ldr	r3, [pc, #132]	@ (200095f4 <USB_CoreInit+0xb0>)
20009570:	4013      	ands	r3, r2
20009572:	687a      	ldr	r2, [r7, #4]
20009574:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
20009576:	687b      	ldr	r3, [r7, #4]
20009578:	68db      	ldr	r3, [r3, #12]
2000957a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
2000957e:	687b      	ldr	r3, [r7, #4]
20009580:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
20009582:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
20009586:	2b01      	cmp	r3, #1
20009588:	d105      	bne.n	20009596 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
2000958a:	687b      	ldr	r3, [r7, #4]
2000958c:	68db      	ldr	r3, [r3, #12]
2000958e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20009592:	687b      	ldr	r3, [r7, #4]
20009594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
20009596:	6878      	ldr	r0, [r7, #4]
20009598:	f001 fae2 	bl	2000ab60 <USB_CoreReset>
2000959c:	4603      	mov	r3, r0
2000959e:	73fb      	strb	r3, [r7, #15]
200095a0:	e010      	b.n	200095c4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
200095a2:	687b      	ldr	r3, [r7, #4]
200095a4:	68db      	ldr	r3, [r3, #12]
200095a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
200095aa:	687b      	ldr	r3, [r7, #4]
200095ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
200095ae:	6878      	ldr	r0, [r7, #4]
200095b0:	f001 fad6 	bl	2000ab60 <USB_CoreReset>
200095b4:	4603      	mov	r3, r0
200095b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
200095b8:	687b      	ldr	r3, [r7, #4]
200095ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200095bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
200095c0:	687b      	ldr	r3, [r7, #4]
200095c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
200095c4:	7fbb      	ldrb	r3, [r7, #30]
200095c6:	2b01      	cmp	r3, #1
200095c8:	d10b      	bne.n	200095e2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
200095ca:	687b      	ldr	r3, [r7, #4]
200095cc:	689b      	ldr	r3, [r3, #8]
200095ce:	f043 0206 	orr.w	r2, r3, #6
200095d2:	687b      	ldr	r3, [r7, #4]
200095d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
200095d6:	687b      	ldr	r3, [r7, #4]
200095d8:	689b      	ldr	r3, [r3, #8]
200095da:	f043 0220 	orr.w	r2, r3, #32
200095de:	687b      	ldr	r3, [r7, #4]
200095e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
200095e2:	7bfb      	ldrb	r3, [r7, #15]
}
200095e4:	4618      	mov	r0, r3
200095e6:	3710      	adds	r7, #16
200095e8:	46bd      	mov	sp, r7
200095ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
200095ee:	b004      	add	sp, #16
200095f0:	4770      	bx	lr
200095f2:	bf00      	nop
200095f4:	ffbdffbf 	.word	0xffbdffbf

200095f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
200095f8:	b480      	push	{r7}
200095fa:	b087      	sub	sp, #28
200095fc:	af00      	add	r7, sp, #0
200095fe:	60f8      	str	r0, [r7, #12]
20009600:	60b9      	str	r1, [r7, #8]
20009602:	4613      	mov	r3, r2
20009604:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
20009606:	79fb      	ldrb	r3, [r7, #7]
20009608:	2b02      	cmp	r3, #2
2000960a:	d165      	bne.n	200096d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
2000960c:	68bb      	ldr	r3, [r7, #8]
2000960e:	4a41      	ldr	r2, [pc, #260]	@ (20009714 <USB_SetTurnaroundTime+0x11c>)
20009610:	4293      	cmp	r3, r2
20009612:	d906      	bls.n	20009622 <USB_SetTurnaroundTime+0x2a>
20009614:	68bb      	ldr	r3, [r7, #8]
20009616:	4a40      	ldr	r2, [pc, #256]	@ (20009718 <USB_SetTurnaroundTime+0x120>)
20009618:	4293      	cmp	r3, r2
2000961a:	d202      	bcs.n	20009622 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
2000961c:	230f      	movs	r3, #15
2000961e:	617b      	str	r3, [r7, #20]
20009620:	e062      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
20009622:	68bb      	ldr	r3, [r7, #8]
20009624:	4a3c      	ldr	r2, [pc, #240]	@ (20009718 <USB_SetTurnaroundTime+0x120>)
20009626:	4293      	cmp	r3, r2
20009628:	d306      	bcc.n	20009638 <USB_SetTurnaroundTime+0x40>
2000962a:	68bb      	ldr	r3, [r7, #8]
2000962c:	4a3b      	ldr	r2, [pc, #236]	@ (2000971c <USB_SetTurnaroundTime+0x124>)
2000962e:	4293      	cmp	r3, r2
20009630:	d202      	bcs.n	20009638 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
20009632:	230e      	movs	r3, #14
20009634:	617b      	str	r3, [r7, #20]
20009636:	e057      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
20009638:	68bb      	ldr	r3, [r7, #8]
2000963a:	4a38      	ldr	r2, [pc, #224]	@ (2000971c <USB_SetTurnaroundTime+0x124>)
2000963c:	4293      	cmp	r3, r2
2000963e:	d306      	bcc.n	2000964e <USB_SetTurnaroundTime+0x56>
20009640:	68bb      	ldr	r3, [r7, #8]
20009642:	4a37      	ldr	r2, [pc, #220]	@ (20009720 <USB_SetTurnaroundTime+0x128>)
20009644:	4293      	cmp	r3, r2
20009646:	d202      	bcs.n	2000964e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
20009648:	230d      	movs	r3, #13
2000964a:	617b      	str	r3, [r7, #20]
2000964c:	e04c      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
2000964e:	68bb      	ldr	r3, [r7, #8]
20009650:	4a33      	ldr	r2, [pc, #204]	@ (20009720 <USB_SetTurnaroundTime+0x128>)
20009652:	4293      	cmp	r3, r2
20009654:	d306      	bcc.n	20009664 <USB_SetTurnaroundTime+0x6c>
20009656:	68bb      	ldr	r3, [r7, #8]
20009658:	4a32      	ldr	r2, [pc, #200]	@ (20009724 <USB_SetTurnaroundTime+0x12c>)
2000965a:	4293      	cmp	r3, r2
2000965c:	d802      	bhi.n	20009664 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
2000965e:	230c      	movs	r3, #12
20009660:	617b      	str	r3, [r7, #20]
20009662:	e041      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
20009664:	68bb      	ldr	r3, [r7, #8]
20009666:	4a2f      	ldr	r2, [pc, #188]	@ (20009724 <USB_SetTurnaroundTime+0x12c>)
20009668:	4293      	cmp	r3, r2
2000966a:	d906      	bls.n	2000967a <USB_SetTurnaroundTime+0x82>
2000966c:	68bb      	ldr	r3, [r7, #8]
2000966e:	4a2e      	ldr	r2, [pc, #184]	@ (20009728 <USB_SetTurnaroundTime+0x130>)
20009670:	4293      	cmp	r3, r2
20009672:	d802      	bhi.n	2000967a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
20009674:	230b      	movs	r3, #11
20009676:	617b      	str	r3, [r7, #20]
20009678:	e036      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
2000967a:	68bb      	ldr	r3, [r7, #8]
2000967c:	4a2a      	ldr	r2, [pc, #168]	@ (20009728 <USB_SetTurnaroundTime+0x130>)
2000967e:	4293      	cmp	r3, r2
20009680:	d906      	bls.n	20009690 <USB_SetTurnaroundTime+0x98>
20009682:	68bb      	ldr	r3, [r7, #8]
20009684:	4a29      	ldr	r2, [pc, #164]	@ (2000972c <USB_SetTurnaroundTime+0x134>)
20009686:	4293      	cmp	r3, r2
20009688:	d802      	bhi.n	20009690 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
2000968a:	230a      	movs	r3, #10
2000968c:	617b      	str	r3, [r7, #20]
2000968e:	e02b      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
20009690:	68bb      	ldr	r3, [r7, #8]
20009692:	4a26      	ldr	r2, [pc, #152]	@ (2000972c <USB_SetTurnaroundTime+0x134>)
20009694:	4293      	cmp	r3, r2
20009696:	d906      	bls.n	200096a6 <USB_SetTurnaroundTime+0xae>
20009698:	68bb      	ldr	r3, [r7, #8]
2000969a:	4a25      	ldr	r2, [pc, #148]	@ (20009730 <USB_SetTurnaroundTime+0x138>)
2000969c:	4293      	cmp	r3, r2
2000969e:	d202      	bcs.n	200096a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
200096a0:	2309      	movs	r3, #9
200096a2:	617b      	str	r3, [r7, #20]
200096a4:	e020      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
200096a6:	68bb      	ldr	r3, [r7, #8]
200096a8:	4a21      	ldr	r2, [pc, #132]	@ (20009730 <USB_SetTurnaroundTime+0x138>)
200096aa:	4293      	cmp	r3, r2
200096ac:	d306      	bcc.n	200096bc <USB_SetTurnaroundTime+0xc4>
200096ae:	68bb      	ldr	r3, [r7, #8]
200096b0:	4a20      	ldr	r2, [pc, #128]	@ (20009734 <USB_SetTurnaroundTime+0x13c>)
200096b2:	4293      	cmp	r3, r2
200096b4:	d802      	bhi.n	200096bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
200096b6:	2308      	movs	r3, #8
200096b8:	617b      	str	r3, [r7, #20]
200096ba:	e015      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
200096bc:	68bb      	ldr	r3, [r7, #8]
200096be:	4a1d      	ldr	r2, [pc, #116]	@ (20009734 <USB_SetTurnaroundTime+0x13c>)
200096c0:	4293      	cmp	r3, r2
200096c2:	d906      	bls.n	200096d2 <USB_SetTurnaroundTime+0xda>
200096c4:	68bb      	ldr	r3, [r7, #8]
200096c6:	4a1c      	ldr	r2, [pc, #112]	@ (20009738 <USB_SetTurnaroundTime+0x140>)
200096c8:	4293      	cmp	r3, r2
200096ca:	d202      	bcs.n	200096d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
200096cc:	2307      	movs	r3, #7
200096ce:	617b      	str	r3, [r7, #20]
200096d0:	e00a      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
200096d2:	2306      	movs	r3, #6
200096d4:	617b      	str	r3, [r7, #20]
200096d6:	e007      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
200096d8:	79fb      	ldrb	r3, [r7, #7]
200096da:	2b00      	cmp	r3, #0
200096dc:	d102      	bne.n	200096e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
200096de:	2309      	movs	r3, #9
200096e0:	617b      	str	r3, [r7, #20]
200096e2:	e001      	b.n	200096e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
200096e4:	2309      	movs	r3, #9
200096e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
200096e8:	68fb      	ldr	r3, [r7, #12]
200096ea:	68db      	ldr	r3, [r3, #12]
200096ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
200096f0:	68fb      	ldr	r3, [r7, #12]
200096f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
200096f4:	68fb      	ldr	r3, [r7, #12]
200096f6:	68da      	ldr	r2, [r3, #12]
200096f8:	697b      	ldr	r3, [r7, #20]
200096fa:	029b      	lsls	r3, r3, #10
200096fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
20009700:	431a      	orrs	r2, r3
20009702:	68fb      	ldr	r3, [r7, #12]
20009704:	60da      	str	r2, [r3, #12]

  return HAL_OK;
20009706:	2300      	movs	r3, #0
}
20009708:	4618      	mov	r0, r3
2000970a:	371c      	adds	r7, #28
2000970c:	46bd      	mov	sp, r7
2000970e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009712:	4770      	bx	lr
20009714:	00d8acbf 	.word	0x00d8acbf
20009718:	00e4e1c0 	.word	0x00e4e1c0
2000971c:	00f42400 	.word	0x00f42400
20009720:	01067380 	.word	0x01067380
20009724:	011a499f 	.word	0x011a499f
20009728:	01312cff 	.word	0x01312cff
2000972c:	014ca43f 	.word	0x014ca43f
20009730:	016e3600 	.word	0x016e3600
20009734:	01a6ab1f 	.word	0x01a6ab1f
20009738:	01e84800 	.word	0x01e84800

2000973c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
2000973c:	b480      	push	{r7}
2000973e:	b083      	sub	sp, #12
20009740:	af00      	add	r7, sp, #0
20009742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
20009744:	687b      	ldr	r3, [r7, #4]
20009746:	689b      	ldr	r3, [r3, #8]
20009748:	f043 0201 	orr.w	r2, r3, #1
2000974c:	687b      	ldr	r3, [r7, #4]
2000974e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
20009750:	2300      	movs	r3, #0
}
20009752:	4618      	mov	r0, r3
20009754:	370c      	adds	r7, #12
20009756:	46bd      	mov	sp, r7
20009758:	f85d 7b04 	ldr.w	r7, [sp], #4
2000975c:	4770      	bx	lr

2000975e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
2000975e:	b480      	push	{r7}
20009760:	b083      	sub	sp, #12
20009762:	af00      	add	r7, sp, #0
20009764:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
20009766:	687b      	ldr	r3, [r7, #4]
20009768:	689b      	ldr	r3, [r3, #8]
2000976a:	f023 0201 	bic.w	r2, r3, #1
2000976e:	687b      	ldr	r3, [r7, #4]
20009770:	609a      	str	r2, [r3, #8]
  return HAL_OK;
20009772:	2300      	movs	r3, #0
}
20009774:	4618      	mov	r0, r3
20009776:	370c      	adds	r7, #12
20009778:	46bd      	mov	sp, r7
2000977a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000977e:	4770      	bx	lr

20009780 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
20009780:	b580      	push	{r7, lr}
20009782:	b084      	sub	sp, #16
20009784:	af00      	add	r7, sp, #0
20009786:	6078      	str	r0, [r7, #4]
20009788:	460b      	mov	r3, r1
2000978a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
2000978c:	2300      	movs	r3, #0
2000978e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
20009790:	687b      	ldr	r3, [r7, #4]
20009792:	68db      	ldr	r3, [r3, #12]
20009794:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
20009798:	687b      	ldr	r3, [r7, #4]
2000979a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
2000979c:	78fb      	ldrb	r3, [r7, #3]
2000979e:	2b01      	cmp	r3, #1
200097a0:	d115      	bne.n	200097ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
200097a2:	687b      	ldr	r3, [r7, #4]
200097a4:	68db      	ldr	r3, [r3, #12]
200097a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
200097aa:	687b      	ldr	r3, [r7, #4]
200097ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
200097ae:	200a      	movs	r0, #10
200097b0:	f7fb ff9a 	bl	200056e8 <HAL_Delay>
      ms += 10U;
200097b4:	68fb      	ldr	r3, [r7, #12]
200097b6:	330a      	adds	r3, #10
200097b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
200097ba:	6878      	ldr	r0, [r7, #4]
200097bc:	f001 f93f 	bl	2000aa3e <USB_GetMode>
200097c0:	4603      	mov	r3, r0
200097c2:	2b01      	cmp	r3, #1
200097c4:	d01e      	beq.n	20009804 <USB_SetCurrentMode+0x84>
200097c6:	68fb      	ldr	r3, [r7, #12]
200097c8:	2bc7      	cmp	r3, #199	@ 0xc7
200097ca:	d9f0      	bls.n	200097ae <USB_SetCurrentMode+0x2e>
200097cc:	e01a      	b.n	20009804 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
200097ce:	78fb      	ldrb	r3, [r7, #3]
200097d0:	2b00      	cmp	r3, #0
200097d2:	d115      	bne.n	20009800 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
200097d4:	687b      	ldr	r3, [r7, #4]
200097d6:	68db      	ldr	r3, [r3, #12]
200097d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
200097dc:	687b      	ldr	r3, [r7, #4]
200097de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
200097e0:	200a      	movs	r0, #10
200097e2:	f7fb ff81 	bl	200056e8 <HAL_Delay>
      ms += 10U;
200097e6:	68fb      	ldr	r3, [r7, #12]
200097e8:	330a      	adds	r3, #10
200097ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
200097ec:	6878      	ldr	r0, [r7, #4]
200097ee:	f001 f926 	bl	2000aa3e <USB_GetMode>
200097f2:	4603      	mov	r3, r0
200097f4:	2b00      	cmp	r3, #0
200097f6:	d005      	beq.n	20009804 <USB_SetCurrentMode+0x84>
200097f8:	68fb      	ldr	r3, [r7, #12]
200097fa:	2bc7      	cmp	r3, #199	@ 0xc7
200097fc:	d9f0      	bls.n	200097e0 <USB_SetCurrentMode+0x60>
200097fe:	e001      	b.n	20009804 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
20009800:	2301      	movs	r3, #1
20009802:	e005      	b.n	20009810 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
20009804:	68fb      	ldr	r3, [r7, #12]
20009806:	2bc8      	cmp	r3, #200	@ 0xc8
20009808:	d101      	bne.n	2000980e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
2000980a:	2301      	movs	r3, #1
2000980c:	e000      	b.n	20009810 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
2000980e:	2300      	movs	r3, #0
}
20009810:	4618      	mov	r0, r3
20009812:	3710      	adds	r7, #16
20009814:	46bd      	mov	sp, r7
20009816:	bd80      	pop	{r7, pc}

20009818 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
20009818:	b084      	sub	sp, #16
2000981a:	b580      	push	{r7, lr}
2000981c:	b086      	sub	sp, #24
2000981e:	af00      	add	r7, sp, #0
20009820:	6078      	str	r0, [r7, #4]
20009822:	f107 0024 	add.w	r0, r7, #36	@ 0x24
20009826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
2000982a:	2300      	movs	r3, #0
2000982c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000982e:	687b      	ldr	r3, [r7, #4]
20009830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
20009832:	2300      	movs	r3, #0
20009834:	613b      	str	r3, [r7, #16]
20009836:	e009      	b.n	2000984c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
20009838:	687a      	ldr	r2, [r7, #4]
2000983a:	693b      	ldr	r3, [r7, #16]
2000983c:	3340      	adds	r3, #64	@ 0x40
2000983e:	009b      	lsls	r3, r3, #2
20009840:	4413      	add	r3, r2
20009842:	2200      	movs	r2, #0
20009844:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
20009846:	693b      	ldr	r3, [r7, #16]
20009848:	3301      	adds	r3, #1
2000984a:	613b      	str	r3, [r7, #16]
2000984c:	693b      	ldr	r3, [r7, #16]
2000984e:	2b0e      	cmp	r3, #14
20009850:	d9f2      	bls.n	20009838 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
20009852:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
20009856:	2b00      	cmp	r3, #0
20009858:	d11c      	bne.n	20009894 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
2000985a:	68fb      	ldr	r3, [r7, #12]
2000985c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009860:	685b      	ldr	r3, [r3, #4]
20009862:	68fa      	ldr	r2, [r7, #12]
20009864:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009868:	f043 0302 	orr.w	r3, r3, #2
2000986c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
2000986e:	687b      	ldr	r3, [r7, #4]
20009870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009872:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
20009876:	687b      	ldr	r3, [r7, #4]
20009878:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
2000987a:	687b      	ldr	r3, [r7, #4]
2000987c:	681b      	ldr	r3, [r3, #0]
2000987e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20009882:	687b      	ldr	r3, [r7, #4]
20009884:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
20009886:	687b      	ldr	r3, [r7, #4]
20009888:	681b      	ldr	r3, [r3, #0]
2000988a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000988e:	687b      	ldr	r3, [r7, #4]
20009890:	601a      	str	r2, [r3, #0]
20009892:	e005      	b.n	200098a0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
20009894:	687b      	ldr	r3, [r7, #4]
20009896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009898:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
2000989c:	687b      	ldr	r3, [r7, #4]
2000989e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
200098a0:	68fb      	ldr	r3, [r7, #12]
200098a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
200098a6:	461a      	mov	r2, r3
200098a8:	2300      	movs	r3, #0
200098aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
200098ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
200098b0:	2b01      	cmp	r3, #1
200098b2:	d10d      	bne.n	200098d0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
200098b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
200098b8:	2b00      	cmp	r3, #0
200098ba:	d104      	bne.n	200098c6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
200098bc:	2100      	movs	r1, #0
200098be:	6878      	ldr	r0, [r7, #4]
200098c0:	f000 f968 	bl	20009b94 <USB_SetDevSpeed>
200098c4:	e008      	b.n	200098d8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
200098c6:	2101      	movs	r1, #1
200098c8:	6878      	ldr	r0, [r7, #4]
200098ca:	f000 f963 	bl	20009b94 <USB_SetDevSpeed>
200098ce:	e003      	b.n	200098d8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
200098d0:	2103      	movs	r1, #3
200098d2:	6878      	ldr	r0, [r7, #4]
200098d4:	f000 f95e 	bl	20009b94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
200098d8:	2110      	movs	r1, #16
200098da:	6878      	ldr	r0, [r7, #4]
200098dc:	f000 f8fa 	bl	20009ad4 <USB_FlushTxFifo>
200098e0:	4603      	mov	r3, r0
200098e2:	2b00      	cmp	r3, #0
200098e4:	d001      	beq.n	200098ea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
200098e6:	2301      	movs	r3, #1
200098e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
200098ea:	6878      	ldr	r0, [r7, #4]
200098ec:	f000 f924 	bl	20009b38 <USB_FlushRxFifo>
200098f0:	4603      	mov	r3, r0
200098f2:	2b00      	cmp	r3, #0
200098f4:	d001      	beq.n	200098fa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
200098f6:	2301      	movs	r3, #1
200098f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
200098fa:	68fb      	ldr	r3, [r7, #12]
200098fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009900:	461a      	mov	r2, r3
20009902:	2300      	movs	r3, #0
20009904:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
20009906:	68fb      	ldr	r3, [r7, #12]
20009908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000990c:	461a      	mov	r2, r3
2000990e:	2300      	movs	r3, #0
20009910:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
20009912:	68fb      	ldr	r3, [r7, #12]
20009914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009918:	461a      	mov	r2, r3
2000991a:	2300      	movs	r3, #0
2000991c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
2000991e:	2300      	movs	r3, #0
20009920:	613b      	str	r3, [r7, #16]
20009922:	e043      	b.n	200099ac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20009924:	693b      	ldr	r3, [r7, #16]
20009926:	015a      	lsls	r2, r3, #5
20009928:	68fb      	ldr	r3, [r7, #12]
2000992a:	4413      	add	r3, r2
2000992c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009930:	681b      	ldr	r3, [r3, #0]
20009932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000993a:	d118      	bne.n	2000996e <USB_DevInit+0x156>
    {
      if (i == 0U)
2000993c:	693b      	ldr	r3, [r7, #16]
2000993e:	2b00      	cmp	r3, #0
20009940:	d10a      	bne.n	20009958 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
20009942:	693b      	ldr	r3, [r7, #16]
20009944:	015a      	lsls	r2, r3, #5
20009946:	68fb      	ldr	r3, [r7, #12]
20009948:	4413      	add	r3, r2
2000994a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000994e:	461a      	mov	r2, r3
20009950:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20009954:	6013      	str	r3, [r2, #0]
20009956:	e013      	b.n	20009980 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
20009958:	693b      	ldr	r3, [r7, #16]
2000995a:	015a      	lsls	r2, r3, #5
2000995c:	68fb      	ldr	r3, [r7, #12]
2000995e:	4413      	add	r3, r2
20009960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009964:	461a      	mov	r2, r3
20009966:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
2000996a:	6013      	str	r3, [r2, #0]
2000996c:	e008      	b.n	20009980 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
2000996e:	693b      	ldr	r3, [r7, #16]
20009970:	015a      	lsls	r2, r3, #5
20009972:	68fb      	ldr	r3, [r7, #12]
20009974:	4413      	add	r3, r2
20009976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000997a:	461a      	mov	r2, r3
2000997c:	2300      	movs	r3, #0
2000997e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
20009980:	693b      	ldr	r3, [r7, #16]
20009982:	015a      	lsls	r2, r3, #5
20009984:	68fb      	ldr	r3, [r7, #12]
20009986:	4413      	add	r3, r2
20009988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000998c:	461a      	mov	r2, r3
2000998e:	2300      	movs	r3, #0
20009990:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
20009992:	693b      	ldr	r3, [r7, #16]
20009994:	015a      	lsls	r2, r3, #5
20009996:	68fb      	ldr	r3, [r7, #12]
20009998:	4413      	add	r3, r2
2000999a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000999e:	461a      	mov	r2, r3
200099a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
200099a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
200099a6:	693b      	ldr	r3, [r7, #16]
200099a8:	3301      	adds	r3, #1
200099aa:	613b      	str	r3, [r7, #16]
200099ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
200099b0:	461a      	mov	r2, r3
200099b2:	693b      	ldr	r3, [r7, #16]
200099b4:	4293      	cmp	r3, r2
200099b6:	d3b5      	bcc.n	20009924 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
200099b8:	2300      	movs	r3, #0
200099ba:	613b      	str	r3, [r7, #16]
200099bc:	e043      	b.n	20009a46 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
200099be:	693b      	ldr	r3, [r7, #16]
200099c0:	015a      	lsls	r2, r3, #5
200099c2:	68fb      	ldr	r3, [r7, #12]
200099c4:	4413      	add	r3, r2
200099c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200099ca:	681b      	ldr	r3, [r3, #0]
200099cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200099d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200099d4:	d118      	bne.n	20009a08 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
200099d6:	693b      	ldr	r3, [r7, #16]
200099d8:	2b00      	cmp	r3, #0
200099da:	d10a      	bne.n	200099f2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
200099dc:	693b      	ldr	r3, [r7, #16]
200099de:	015a      	lsls	r2, r3, #5
200099e0:	68fb      	ldr	r3, [r7, #12]
200099e2:	4413      	add	r3, r2
200099e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200099e8:	461a      	mov	r2, r3
200099ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
200099ee:	6013      	str	r3, [r2, #0]
200099f0:	e013      	b.n	20009a1a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
200099f2:	693b      	ldr	r3, [r7, #16]
200099f4:	015a      	lsls	r2, r3, #5
200099f6:	68fb      	ldr	r3, [r7, #12]
200099f8:	4413      	add	r3, r2
200099fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200099fe:	461a      	mov	r2, r3
20009a00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20009a04:	6013      	str	r3, [r2, #0]
20009a06:	e008      	b.n	20009a1a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
20009a08:	693b      	ldr	r3, [r7, #16]
20009a0a:	015a      	lsls	r2, r3, #5
20009a0c:	68fb      	ldr	r3, [r7, #12]
20009a0e:	4413      	add	r3, r2
20009a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009a14:	461a      	mov	r2, r3
20009a16:	2300      	movs	r3, #0
20009a18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
20009a1a:	693b      	ldr	r3, [r7, #16]
20009a1c:	015a      	lsls	r2, r3, #5
20009a1e:	68fb      	ldr	r3, [r7, #12]
20009a20:	4413      	add	r3, r2
20009a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009a26:	461a      	mov	r2, r3
20009a28:	2300      	movs	r3, #0
20009a2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
20009a2c:	693b      	ldr	r3, [r7, #16]
20009a2e:	015a      	lsls	r2, r3, #5
20009a30:	68fb      	ldr	r3, [r7, #12]
20009a32:	4413      	add	r3, r2
20009a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009a38:	461a      	mov	r2, r3
20009a3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20009a3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
20009a40:	693b      	ldr	r3, [r7, #16]
20009a42:	3301      	adds	r3, #1
20009a44:	613b      	str	r3, [r7, #16]
20009a46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20009a4a:	461a      	mov	r2, r3
20009a4c:	693b      	ldr	r3, [r7, #16]
20009a4e:	4293      	cmp	r3, r2
20009a50:	d3b5      	bcc.n	200099be <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
20009a52:	68fb      	ldr	r3, [r7, #12]
20009a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009a58:	691b      	ldr	r3, [r3, #16]
20009a5a:	68fa      	ldr	r2, [r7, #12]
20009a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
20009a64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
20009a66:	687b      	ldr	r3, [r7, #4]
20009a68:	2200      	movs	r2, #0
20009a6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
20009a6c:	687b      	ldr	r3, [r7, #4]
20009a6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
20009a72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
20009a74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
20009a78:	2b00      	cmp	r3, #0
20009a7a:	d105      	bne.n	20009a88 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
20009a7c:	687b      	ldr	r3, [r7, #4]
20009a7e:	699b      	ldr	r3, [r3, #24]
20009a80:	f043 0210 	orr.w	r2, r3, #16
20009a84:	687b      	ldr	r3, [r7, #4]
20009a86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
20009a88:	687b      	ldr	r3, [r7, #4]
20009a8a:	699a      	ldr	r2, [r3, #24]
20009a8c:	4b0f      	ldr	r3, [pc, #60]	@ (20009acc <USB_DevInit+0x2b4>)
20009a8e:	4313      	orrs	r3, r2
20009a90:	687a      	ldr	r2, [r7, #4]
20009a92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
20009a94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
20009a98:	2b00      	cmp	r3, #0
20009a9a:	d005      	beq.n	20009aa8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
20009a9c:	687b      	ldr	r3, [r7, #4]
20009a9e:	699b      	ldr	r3, [r3, #24]
20009aa0:	f043 0208 	orr.w	r2, r3, #8
20009aa4:	687b      	ldr	r3, [r7, #4]
20009aa6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
20009aa8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
20009aac:	2b01      	cmp	r3, #1
20009aae:	d105      	bne.n	20009abc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
20009ab0:	687b      	ldr	r3, [r7, #4]
20009ab2:	699a      	ldr	r2, [r3, #24]
20009ab4:	4b06      	ldr	r3, [pc, #24]	@ (20009ad0 <USB_DevInit+0x2b8>)
20009ab6:	4313      	orrs	r3, r2
20009ab8:	687a      	ldr	r2, [r7, #4]
20009aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
20009abc:	7dfb      	ldrb	r3, [r7, #23]
}
20009abe:	4618      	mov	r0, r3
20009ac0:	3718      	adds	r7, #24
20009ac2:	46bd      	mov	sp, r7
20009ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20009ac8:	b004      	add	sp, #16
20009aca:	4770      	bx	lr
20009acc:	803c3800 	.word	0x803c3800
20009ad0:	40000004 	.word	0x40000004

20009ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
20009ad4:	b480      	push	{r7}
20009ad6:	b085      	sub	sp, #20
20009ad8:	af00      	add	r7, sp, #0
20009ada:	6078      	str	r0, [r7, #4]
20009adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
20009ade:	2300      	movs	r3, #0
20009ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20009ae2:	68fb      	ldr	r3, [r7, #12]
20009ae4:	3301      	adds	r3, #1
20009ae6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20009ae8:	68fb      	ldr	r3, [r7, #12]
20009aea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20009aee:	d901      	bls.n	20009af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
20009af0:	2303      	movs	r3, #3
20009af2:	e01b      	b.n	20009b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20009af4:	687b      	ldr	r3, [r7, #4]
20009af6:	691b      	ldr	r3, [r3, #16]
20009af8:	2b00      	cmp	r3, #0
20009afa:	daf2      	bge.n	20009ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
20009afc:	2300      	movs	r3, #0
20009afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
20009b00:	683b      	ldr	r3, [r7, #0]
20009b02:	019b      	lsls	r3, r3, #6
20009b04:	f043 0220 	orr.w	r2, r3, #32
20009b08:	687b      	ldr	r3, [r7, #4]
20009b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20009b0c:	68fb      	ldr	r3, [r7, #12]
20009b0e:	3301      	adds	r3, #1
20009b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20009b12:	68fb      	ldr	r3, [r7, #12]
20009b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20009b18:	d901      	bls.n	20009b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
20009b1a:	2303      	movs	r3, #3
20009b1c:	e006      	b.n	20009b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
20009b1e:	687b      	ldr	r3, [r7, #4]
20009b20:	691b      	ldr	r3, [r3, #16]
20009b22:	f003 0320 	and.w	r3, r3, #32
20009b26:	2b20      	cmp	r3, #32
20009b28:	d0f0      	beq.n	20009b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
20009b2a:	2300      	movs	r3, #0
}
20009b2c:	4618      	mov	r0, r3
20009b2e:	3714      	adds	r7, #20
20009b30:	46bd      	mov	sp, r7
20009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
20009b36:	4770      	bx	lr

20009b38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
20009b38:	b480      	push	{r7}
20009b3a:	b085      	sub	sp, #20
20009b3c:	af00      	add	r7, sp, #0
20009b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
20009b40:	2300      	movs	r3, #0
20009b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20009b44:	68fb      	ldr	r3, [r7, #12]
20009b46:	3301      	adds	r3, #1
20009b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20009b4a:	68fb      	ldr	r3, [r7, #12]
20009b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20009b50:	d901      	bls.n	20009b56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
20009b52:	2303      	movs	r3, #3
20009b54:	e018      	b.n	20009b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20009b56:	687b      	ldr	r3, [r7, #4]
20009b58:	691b      	ldr	r3, [r3, #16]
20009b5a:	2b00      	cmp	r3, #0
20009b5c:	daf2      	bge.n	20009b44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
20009b5e:	2300      	movs	r3, #0
20009b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
20009b62:	687b      	ldr	r3, [r7, #4]
20009b64:	2210      	movs	r2, #16
20009b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20009b68:	68fb      	ldr	r3, [r7, #12]
20009b6a:	3301      	adds	r3, #1
20009b6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20009b6e:	68fb      	ldr	r3, [r7, #12]
20009b70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20009b74:	d901      	bls.n	20009b7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
20009b76:	2303      	movs	r3, #3
20009b78:	e006      	b.n	20009b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
20009b7a:	687b      	ldr	r3, [r7, #4]
20009b7c:	691b      	ldr	r3, [r3, #16]
20009b7e:	f003 0310 	and.w	r3, r3, #16
20009b82:	2b10      	cmp	r3, #16
20009b84:	d0f0      	beq.n	20009b68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
20009b86:	2300      	movs	r3, #0
}
20009b88:	4618      	mov	r0, r3
20009b8a:	3714      	adds	r7, #20
20009b8c:	46bd      	mov	sp, r7
20009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009b92:	4770      	bx	lr

20009b94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
20009b94:	b480      	push	{r7}
20009b96:	b085      	sub	sp, #20
20009b98:	af00      	add	r7, sp, #0
20009b9a:	6078      	str	r0, [r7, #4]
20009b9c:	460b      	mov	r3, r1
20009b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009ba0:	687b      	ldr	r3, [r7, #4]
20009ba2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
20009ba4:	68fb      	ldr	r3, [r7, #12]
20009ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009baa:	681a      	ldr	r2, [r3, #0]
20009bac:	78fb      	ldrb	r3, [r7, #3]
20009bae:	68f9      	ldr	r1, [r7, #12]
20009bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009bb4:	4313      	orrs	r3, r2
20009bb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
20009bb8:	2300      	movs	r3, #0
}
20009bba:	4618      	mov	r0, r3
20009bbc:	3714      	adds	r7, #20
20009bbe:	46bd      	mov	sp, r7
20009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
20009bc4:	4770      	bx	lr

20009bc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
20009bc6:	b480      	push	{r7}
20009bc8:	b087      	sub	sp, #28
20009bca:	af00      	add	r7, sp, #0
20009bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009bce:	687b      	ldr	r3, [r7, #4]
20009bd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
20009bd2:	693b      	ldr	r3, [r7, #16]
20009bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009bd8:	689b      	ldr	r3, [r3, #8]
20009bda:	f003 0306 	and.w	r3, r3, #6
20009bde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
20009be0:	68fb      	ldr	r3, [r7, #12]
20009be2:	2b00      	cmp	r3, #0
20009be4:	d102      	bne.n	20009bec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
20009be6:	2300      	movs	r3, #0
20009be8:	75fb      	strb	r3, [r7, #23]
20009bea:	e00a      	b.n	20009c02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
20009bec:	68fb      	ldr	r3, [r7, #12]
20009bee:	2b02      	cmp	r3, #2
20009bf0:	d002      	beq.n	20009bf8 <USB_GetDevSpeed+0x32>
20009bf2:	68fb      	ldr	r3, [r7, #12]
20009bf4:	2b06      	cmp	r3, #6
20009bf6:	d102      	bne.n	20009bfe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
20009bf8:	2302      	movs	r3, #2
20009bfa:	75fb      	strb	r3, [r7, #23]
20009bfc:	e001      	b.n	20009c02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
20009bfe:	230f      	movs	r3, #15
20009c00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
20009c02:	7dfb      	ldrb	r3, [r7, #23]
}
20009c04:	4618      	mov	r0, r3
20009c06:	371c      	adds	r7, #28
20009c08:	46bd      	mov	sp, r7
20009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
20009c0e:	4770      	bx	lr

20009c10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20009c10:	b480      	push	{r7}
20009c12:	b085      	sub	sp, #20
20009c14:	af00      	add	r7, sp, #0
20009c16:	6078      	str	r0, [r7, #4]
20009c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009c1a:	687b      	ldr	r3, [r7, #4]
20009c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20009c1e:	683b      	ldr	r3, [r7, #0]
20009c20:	781b      	ldrb	r3, [r3, #0]
20009c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20009c24:	683b      	ldr	r3, [r7, #0]
20009c26:	785b      	ldrb	r3, [r3, #1]
20009c28:	2b01      	cmp	r3, #1
20009c2a:	d139      	bne.n	20009ca0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
20009c2c:	68fb      	ldr	r3, [r7, #12]
20009c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009c32:	69da      	ldr	r2, [r3, #28]
20009c34:	683b      	ldr	r3, [r7, #0]
20009c36:	781b      	ldrb	r3, [r3, #0]
20009c38:	f003 030f 	and.w	r3, r3, #15
20009c3c:	2101      	movs	r1, #1
20009c3e:	fa01 f303 	lsl.w	r3, r1, r3
20009c42:	b29b      	uxth	r3, r3
20009c44:	68f9      	ldr	r1, [r7, #12]
20009c46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009c4a:	4313      	orrs	r3, r2
20009c4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
20009c4e:	68bb      	ldr	r3, [r7, #8]
20009c50:	015a      	lsls	r2, r3, #5
20009c52:	68fb      	ldr	r3, [r7, #12]
20009c54:	4413      	add	r3, r2
20009c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009c5a:	681b      	ldr	r3, [r3, #0]
20009c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20009c60:	2b00      	cmp	r3, #0
20009c62:	d153      	bne.n	20009d0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20009c64:	68bb      	ldr	r3, [r7, #8]
20009c66:	015a      	lsls	r2, r3, #5
20009c68:	68fb      	ldr	r3, [r7, #12]
20009c6a:	4413      	add	r3, r2
20009c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009c70:	681a      	ldr	r2, [r3, #0]
20009c72:	683b      	ldr	r3, [r7, #0]
20009c74:	689b      	ldr	r3, [r3, #8]
20009c76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
20009c7a:	683b      	ldr	r3, [r7, #0]
20009c7c:	791b      	ldrb	r3, [r3, #4]
20009c7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20009c80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
20009c82:	68bb      	ldr	r3, [r7, #8]
20009c84:	059b      	lsls	r3, r3, #22
20009c86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20009c88:	431a      	orrs	r2, r3
20009c8a:	68bb      	ldr	r3, [r7, #8]
20009c8c:	0159      	lsls	r1, r3, #5
20009c8e:	68fb      	ldr	r3, [r7, #12]
20009c90:	440b      	add	r3, r1
20009c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009c96:	4619      	mov	r1, r3
20009c98:	4b20      	ldr	r3, [pc, #128]	@ (20009d1c <USB_ActivateEndpoint+0x10c>)
20009c9a:	4313      	orrs	r3, r2
20009c9c:	600b      	str	r3, [r1, #0]
20009c9e:	e035      	b.n	20009d0c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
20009ca0:	68fb      	ldr	r3, [r7, #12]
20009ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009ca6:	69da      	ldr	r2, [r3, #28]
20009ca8:	683b      	ldr	r3, [r7, #0]
20009caa:	781b      	ldrb	r3, [r3, #0]
20009cac:	f003 030f 	and.w	r3, r3, #15
20009cb0:	2101      	movs	r1, #1
20009cb2:	fa01 f303 	lsl.w	r3, r1, r3
20009cb6:	041b      	lsls	r3, r3, #16
20009cb8:	68f9      	ldr	r1, [r7, #12]
20009cba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009cbe:	4313      	orrs	r3, r2
20009cc0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
20009cc2:	68bb      	ldr	r3, [r7, #8]
20009cc4:	015a      	lsls	r2, r3, #5
20009cc6:	68fb      	ldr	r3, [r7, #12]
20009cc8:	4413      	add	r3, r2
20009cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009cce:	681b      	ldr	r3, [r3, #0]
20009cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20009cd4:	2b00      	cmp	r3, #0
20009cd6:	d119      	bne.n	20009d0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20009cd8:	68bb      	ldr	r3, [r7, #8]
20009cda:	015a      	lsls	r2, r3, #5
20009cdc:	68fb      	ldr	r3, [r7, #12]
20009cde:	4413      	add	r3, r2
20009ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009ce4:	681a      	ldr	r2, [r3, #0]
20009ce6:	683b      	ldr	r3, [r7, #0]
20009ce8:	689b      	ldr	r3, [r3, #8]
20009cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
20009cee:	683b      	ldr	r3, [r7, #0]
20009cf0:	791b      	ldrb	r3, [r3, #4]
20009cf2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20009cf4:	430b      	orrs	r3, r1
20009cf6:	431a      	orrs	r2, r3
20009cf8:	68bb      	ldr	r3, [r7, #8]
20009cfa:	0159      	lsls	r1, r3, #5
20009cfc:	68fb      	ldr	r3, [r7, #12]
20009cfe:	440b      	add	r3, r1
20009d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009d04:	4619      	mov	r1, r3
20009d06:	4b05      	ldr	r3, [pc, #20]	@ (20009d1c <USB_ActivateEndpoint+0x10c>)
20009d08:	4313      	orrs	r3, r2
20009d0a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
20009d0c:	2300      	movs	r3, #0
}
20009d0e:	4618      	mov	r0, r3
20009d10:	3714      	adds	r7, #20
20009d12:	46bd      	mov	sp, r7
20009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
20009d18:	4770      	bx	lr
20009d1a:	bf00      	nop
20009d1c:	10008000 	.word	0x10008000

20009d20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20009d20:	b480      	push	{r7}
20009d22:	b085      	sub	sp, #20
20009d24:	af00      	add	r7, sp, #0
20009d26:	6078      	str	r0, [r7, #4]
20009d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009d2a:	687b      	ldr	r3, [r7, #4]
20009d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20009d2e:	683b      	ldr	r3, [r7, #0]
20009d30:	781b      	ldrb	r3, [r3, #0]
20009d32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
20009d34:	683b      	ldr	r3, [r7, #0]
20009d36:	785b      	ldrb	r3, [r3, #1]
20009d38:	2b01      	cmp	r3, #1
20009d3a:	d161      	bne.n	20009e00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20009d3c:	68bb      	ldr	r3, [r7, #8]
20009d3e:	015a      	lsls	r2, r3, #5
20009d40:	68fb      	ldr	r3, [r7, #12]
20009d42:	4413      	add	r3, r2
20009d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d48:	681b      	ldr	r3, [r3, #0]
20009d4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20009d52:	d11f      	bne.n	20009d94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
20009d54:	68bb      	ldr	r3, [r7, #8]
20009d56:	015a      	lsls	r2, r3, #5
20009d58:	68fb      	ldr	r3, [r7, #12]
20009d5a:	4413      	add	r3, r2
20009d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d60:	681b      	ldr	r3, [r3, #0]
20009d62:	68ba      	ldr	r2, [r7, #8]
20009d64:	0151      	lsls	r1, r2, #5
20009d66:	68fa      	ldr	r2, [r7, #12]
20009d68:	440a      	add	r2, r1
20009d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009d6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20009d72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
20009d74:	68bb      	ldr	r3, [r7, #8]
20009d76:	015a      	lsls	r2, r3, #5
20009d78:	68fb      	ldr	r3, [r7, #12]
20009d7a:	4413      	add	r3, r2
20009d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d80:	681b      	ldr	r3, [r3, #0]
20009d82:	68ba      	ldr	r2, [r7, #8]
20009d84:	0151      	lsls	r1, r2, #5
20009d86:	68fa      	ldr	r2, [r7, #12]
20009d88:	440a      	add	r2, r1
20009d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009d8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20009d92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
20009d94:	68fb      	ldr	r3, [r7, #12]
20009d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20009d9c:	683b      	ldr	r3, [r7, #0]
20009d9e:	781b      	ldrb	r3, [r3, #0]
20009da0:	f003 030f 	and.w	r3, r3, #15
20009da4:	2101      	movs	r1, #1
20009da6:	fa01 f303 	lsl.w	r3, r1, r3
20009daa:	b29b      	uxth	r3, r3
20009dac:	43db      	mvns	r3, r3
20009dae:	68f9      	ldr	r1, [r7, #12]
20009db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009db4:	4013      	ands	r3, r2
20009db6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
20009db8:	68fb      	ldr	r3, [r7, #12]
20009dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009dbe:	69da      	ldr	r2, [r3, #28]
20009dc0:	683b      	ldr	r3, [r7, #0]
20009dc2:	781b      	ldrb	r3, [r3, #0]
20009dc4:	f003 030f 	and.w	r3, r3, #15
20009dc8:	2101      	movs	r1, #1
20009dca:	fa01 f303 	lsl.w	r3, r1, r3
20009dce:	b29b      	uxth	r3, r3
20009dd0:	43db      	mvns	r3, r3
20009dd2:	68f9      	ldr	r1, [r7, #12]
20009dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009dd8:	4013      	ands	r3, r2
20009dda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
20009ddc:	68bb      	ldr	r3, [r7, #8]
20009dde:	015a      	lsls	r2, r3, #5
20009de0:	68fb      	ldr	r3, [r7, #12]
20009de2:	4413      	add	r3, r2
20009de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009de8:	681a      	ldr	r2, [r3, #0]
20009dea:	68bb      	ldr	r3, [r7, #8]
20009dec:	0159      	lsls	r1, r3, #5
20009dee:	68fb      	ldr	r3, [r7, #12]
20009df0:	440b      	add	r3, r1
20009df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009df6:	4619      	mov	r1, r3
20009df8:	4b35      	ldr	r3, [pc, #212]	@ (20009ed0 <USB_DeactivateEndpoint+0x1b0>)
20009dfa:	4013      	ands	r3, r2
20009dfc:	600b      	str	r3, [r1, #0]
20009dfe:	e060      	b.n	20009ec2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20009e00:	68bb      	ldr	r3, [r7, #8]
20009e02:	015a      	lsls	r2, r3, #5
20009e04:	68fb      	ldr	r3, [r7, #12]
20009e06:	4413      	add	r3, r2
20009e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009e0c:	681b      	ldr	r3, [r3, #0]
20009e0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20009e16:	d11f      	bne.n	20009e58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20009e18:	68bb      	ldr	r3, [r7, #8]
20009e1a:	015a      	lsls	r2, r3, #5
20009e1c:	68fb      	ldr	r3, [r7, #12]
20009e1e:	4413      	add	r3, r2
20009e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009e24:	681b      	ldr	r3, [r3, #0]
20009e26:	68ba      	ldr	r2, [r7, #8]
20009e28:	0151      	lsls	r1, r2, #5
20009e2a:	68fa      	ldr	r2, [r7, #12]
20009e2c:	440a      	add	r2, r1
20009e2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009e32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20009e36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
20009e38:	68bb      	ldr	r3, [r7, #8]
20009e3a:	015a      	lsls	r2, r3, #5
20009e3c:	68fb      	ldr	r3, [r7, #12]
20009e3e:	4413      	add	r3, r2
20009e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009e44:	681b      	ldr	r3, [r3, #0]
20009e46:	68ba      	ldr	r2, [r7, #8]
20009e48:	0151      	lsls	r1, r2, #5
20009e4a:	68fa      	ldr	r2, [r7, #12]
20009e4c:	440a      	add	r2, r1
20009e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009e52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20009e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20009e58:	68fb      	ldr	r3, [r7, #12]
20009e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20009e60:	683b      	ldr	r3, [r7, #0]
20009e62:	781b      	ldrb	r3, [r3, #0]
20009e64:	f003 030f 	and.w	r3, r3, #15
20009e68:	2101      	movs	r1, #1
20009e6a:	fa01 f303 	lsl.w	r3, r1, r3
20009e6e:	041b      	lsls	r3, r3, #16
20009e70:	43db      	mvns	r3, r3
20009e72:	68f9      	ldr	r1, [r7, #12]
20009e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009e78:	4013      	ands	r3, r2
20009e7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20009e7c:	68fb      	ldr	r3, [r7, #12]
20009e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009e82:	69da      	ldr	r2, [r3, #28]
20009e84:	683b      	ldr	r3, [r7, #0]
20009e86:	781b      	ldrb	r3, [r3, #0]
20009e88:	f003 030f 	and.w	r3, r3, #15
20009e8c:	2101      	movs	r1, #1
20009e8e:	fa01 f303 	lsl.w	r3, r1, r3
20009e92:	041b      	lsls	r3, r3, #16
20009e94:	43db      	mvns	r3, r3
20009e96:	68f9      	ldr	r1, [r7, #12]
20009e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009e9c:	4013      	ands	r3, r2
20009e9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
20009ea0:	68bb      	ldr	r3, [r7, #8]
20009ea2:	015a      	lsls	r2, r3, #5
20009ea4:	68fb      	ldr	r3, [r7, #12]
20009ea6:	4413      	add	r3, r2
20009ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009eac:	681a      	ldr	r2, [r3, #0]
20009eae:	68bb      	ldr	r3, [r7, #8]
20009eb0:	0159      	lsls	r1, r3, #5
20009eb2:	68fb      	ldr	r3, [r7, #12]
20009eb4:	440b      	add	r3, r1
20009eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009eba:	4619      	mov	r1, r3
20009ebc:	4b05      	ldr	r3, [pc, #20]	@ (20009ed4 <USB_DeactivateEndpoint+0x1b4>)
20009ebe:	4013      	ands	r3, r2
20009ec0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
20009ec2:	2300      	movs	r3, #0
}
20009ec4:	4618      	mov	r0, r3
20009ec6:	3714      	adds	r7, #20
20009ec8:	46bd      	mov	sp, r7
20009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
20009ece:	4770      	bx	lr
20009ed0:	ec337800 	.word	0xec337800
20009ed4:	eff37800 	.word	0xeff37800

20009ed8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
20009ed8:	b580      	push	{r7, lr}
20009eda:	b08a      	sub	sp, #40	@ 0x28
20009edc:	af02      	add	r7, sp, #8
20009ede:	60f8      	str	r0, [r7, #12]
20009ee0:	60b9      	str	r1, [r7, #8]
20009ee2:	4613      	mov	r3, r2
20009ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009ee6:	68fb      	ldr	r3, [r7, #12]
20009ee8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
20009eea:	68bb      	ldr	r3, [r7, #8]
20009eec:	781b      	ldrb	r3, [r3, #0]
20009eee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
20009ef0:	68bb      	ldr	r3, [r7, #8]
20009ef2:	785b      	ldrb	r3, [r3, #1]
20009ef4:	2b01      	cmp	r3, #1
20009ef6:	f040 8185 	bne.w	2000a204 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
20009efa:	68bb      	ldr	r3, [r7, #8]
20009efc:	691b      	ldr	r3, [r3, #16]
20009efe:	2b00      	cmp	r3, #0
20009f00:	d132      	bne.n	20009f68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
20009f02:	69bb      	ldr	r3, [r7, #24]
20009f04:	015a      	lsls	r2, r3, #5
20009f06:	69fb      	ldr	r3, [r7, #28]
20009f08:	4413      	add	r3, r2
20009f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f0e:	691a      	ldr	r2, [r3, #16]
20009f10:	69bb      	ldr	r3, [r7, #24]
20009f12:	0159      	lsls	r1, r3, #5
20009f14:	69fb      	ldr	r3, [r7, #28]
20009f16:	440b      	add	r3, r1
20009f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f1c:	4619      	mov	r1, r3
20009f1e:	4ba7      	ldr	r3, [pc, #668]	@ (2000a1bc <USB_EPStartXfer+0x2e4>)
20009f20:	4013      	ands	r3, r2
20009f22:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
20009f24:	69bb      	ldr	r3, [r7, #24]
20009f26:	015a      	lsls	r2, r3, #5
20009f28:	69fb      	ldr	r3, [r7, #28]
20009f2a:	4413      	add	r3, r2
20009f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f30:	691b      	ldr	r3, [r3, #16]
20009f32:	69ba      	ldr	r2, [r7, #24]
20009f34:	0151      	lsls	r1, r2, #5
20009f36:	69fa      	ldr	r2, [r7, #28]
20009f38:	440a      	add	r2, r1
20009f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009f3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20009f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20009f44:	69bb      	ldr	r3, [r7, #24]
20009f46:	015a      	lsls	r2, r3, #5
20009f48:	69fb      	ldr	r3, [r7, #28]
20009f4a:	4413      	add	r3, r2
20009f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f50:	691a      	ldr	r2, [r3, #16]
20009f52:	69bb      	ldr	r3, [r7, #24]
20009f54:	0159      	lsls	r1, r3, #5
20009f56:	69fb      	ldr	r3, [r7, #28]
20009f58:	440b      	add	r3, r1
20009f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f5e:	4619      	mov	r1, r3
20009f60:	4b97      	ldr	r3, [pc, #604]	@ (2000a1c0 <USB_EPStartXfer+0x2e8>)
20009f62:	4013      	ands	r3, r2
20009f64:	610b      	str	r3, [r1, #16]
20009f66:	e097      	b.n	2000a098 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20009f68:	69bb      	ldr	r3, [r7, #24]
20009f6a:	015a      	lsls	r2, r3, #5
20009f6c:	69fb      	ldr	r3, [r7, #28]
20009f6e:	4413      	add	r3, r2
20009f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f74:	691a      	ldr	r2, [r3, #16]
20009f76:	69bb      	ldr	r3, [r7, #24]
20009f78:	0159      	lsls	r1, r3, #5
20009f7a:	69fb      	ldr	r3, [r7, #28]
20009f7c:	440b      	add	r3, r1
20009f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f82:	4619      	mov	r1, r3
20009f84:	4b8e      	ldr	r3, [pc, #568]	@ (2000a1c0 <USB_EPStartXfer+0x2e8>)
20009f86:	4013      	ands	r3, r2
20009f88:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
20009f8a:	69bb      	ldr	r3, [r7, #24]
20009f8c:	015a      	lsls	r2, r3, #5
20009f8e:	69fb      	ldr	r3, [r7, #28]
20009f90:	4413      	add	r3, r2
20009f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f96:	691a      	ldr	r2, [r3, #16]
20009f98:	69bb      	ldr	r3, [r7, #24]
20009f9a:	0159      	lsls	r1, r3, #5
20009f9c:	69fb      	ldr	r3, [r7, #28]
20009f9e:	440b      	add	r3, r1
20009fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009fa4:	4619      	mov	r1, r3
20009fa6:	4b85      	ldr	r3, [pc, #532]	@ (2000a1bc <USB_EPStartXfer+0x2e4>)
20009fa8:	4013      	ands	r3, r2
20009faa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
20009fac:	69bb      	ldr	r3, [r7, #24]
20009fae:	2b00      	cmp	r3, #0
20009fb0:	d11a      	bne.n	20009fe8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
20009fb2:	68bb      	ldr	r3, [r7, #8]
20009fb4:	691a      	ldr	r2, [r3, #16]
20009fb6:	68bb      	ldr	r3, [r7, #8]
20009fb8:	689b      	ldr	r3, [r3, #8]
20009fba:	429a      	cmp	r2, r3
20009fbc:	d903      	bls.n	20009fc6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
20009fbe:	68bb      	ldr	r3, [r7, #8]
20009fc0:	689a      	ldr	r2, [r3, #8]
20009fc2:	68bb      	ldr	r3, [r7, #8]
20009fc4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
20009fc6:	69bb      	ldr	r3, [r7, #24]
20009fc8:	015a      	lsls	r2, r3, #5
20009fca:	69fb      	ldr	r3, [r7, #28]
20009fcc:	4413      	add	r3, r2
20009fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009fd2:	691b      	ldr	r3, [r3, #16]
20009fd4:	69ba      	ldr	r2, [r7, #24]
20009fd6:	0151      	lsls	r1, r2, #5
20009fd8:	69fa      	ldr	r2, [r7, #28]
20009fda:	440a      	add	r2, r1
20009fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009fe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20009fe4:	6113      	str	r3, [r2, #16]
20009fe6:	e044      	b.n	2000a072 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
20009fe8:	68bb      	ldr	r3, [r7, #8]
20009fea:	691a      	ldr	r2, [r3, #16]
20009fec:	68bb      	ldr	r3, [r7, #8]
20009fee:	689b      	ldr	r3, [r3, #8]
20009ff0:	4413      	add	r3, r2
20009ff2:	1e5a      	subs	r2, r3, #1
20009ff4:	68bb      	ldr	r3, [r7, #8]
20009ff6:	689b      	ldr	r3, [r3, #8]
20009ff8:	fbb2 f3f3 	udiv	r3, r2, r3
20009ffc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
20009ffe:	69bb      	ldr	r3, [r7, #24]
2000a000:	015a      	lsls	r2, r3, #5
2000a002:	69fb      	ldr	r3, [r7, #28]
2000a004:	4413      	add	r3, r2
2000a006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a00a:	691a      	ldr	r2, [r3, #16]
2000a00c:	8afb      	ldrh	r3, [r7, #22]
2000a00e:	04d9      	lsls	r1, r3, #19
2000a010:	4b6c      	ldr	r3, [pc, #432]	@ (2000a1c4 <USB_EPStartXfer+0x2ec>)
2000a012:	400b      	ands	r3, r1
2000a014:	69b9      	ldr	r1, [r7, #24]
2000a016:	0148      	lsls	r0, r1, #5
2000a018:	69f9      	ldr	r1, [r7, #28]
2000a01a:	4401      	add	r1, r0
2000a01c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
2000a020:	4313      	orrs	r3, r2
2000a022:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
2000a024:	68bb      	ldr	r3, [r7, #8]
2000a026:	791b      	ldrb	r3, [r3, #4]
2000a028:	2b01      	cmp	r3, #1
2000a02a:	d122      	bne.n	2000a072 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
2000a02c:	69bb      	ldr	r3, [r7, #24]
2000a02e:	015a      	lsls	r2, r3, #5
2000a030:	69fb      	ldr	r3, [r7, #28]
2000a032:	4413      	add	r3, r2
2000a034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a038:	691b      	ldr	r3, [r3, #16]
2000a03a:	69ba      	ldr	r2, [r7, #24]
2000a03c:	0151      	lsls	r1, r2, #5
2000a03e:	69fa      	ldr	r2, [r7, #28]
2000a040:	440a      	add	r2, r1
2000a042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a046:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
2000a04a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
2000a04c:	69bb      	ldr	r3, [r7, #24]
2000a04e:	015a      	lsls	r2, r3, #5
2000a050:	69fb      	ldr	r3, [r7, #28]
2000a052:	4413      	add	r3, r2
2000a054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a058:	691a      	ldr	r2, [r3, #16]
2000a05a:	8afb      	ldrh	r3, [r7, #22]
2000a05c:	075b      	lsls	r3, r3, #29
2000a05e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
2000a062:	69b9      	ldr	r1, [r7, #24]
2000a064:	0148      	lsls	r0, r1, #5
2000a066:	69f9      	ldr	r1, [r7, #28]
2000a068:	4401      	add	r1, r0
2000a06a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
2000a06e:	4313      	orrs	r3, r2
2000a070:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
2000a072:	69bb      	ldr	r3, [r7, #24]
2000a074:	015a      	lsls	r2, r3, #5
2000a076:	69fb      	ldr	r3, [r7, #28]
2000a078:	4413      	add	r3, r2
2000a07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a07e:	691a      	ldr	r2, [r3, #16]
2000a080:	68bb      	ldr	r3, [r7, #8]
2000a082:	691b      	ldr	r3, [r3, #16]
2000a084:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000a088:	69b9      	ldr	r1, [r7, #24]
2000a08a:	0148      	lsls	r0, r1, #5
2000a08c:	69f9      	ldr	r1, [r7, #28]
2000a08e:	4401      	add	r1, r0
2000a090:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
2000a094:	4313      	orrs	r3, r2
2000a096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
2000a098:	79fb      	ldrb	r3, [r7, #7]
2000a09a:	2b01      	cmp	r3, #1
2000a09c:	d14b      	bne.n	2000a136 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
2000a09e:	68bb      	ldr	r3, [r7, #8]
2000a0a0:	69db      	ldr	r3, [r3, #28]
2000a0a2:	2b00      	cmp	r3, #0
2000a0a4:	d009      	beq.n	2000a0ba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
2000a0a6:	69bb      	ldr	r3, [r7, #24]
2000a0a8:	015a      	lsls	r2, r3, #5
2000a0aa:	69fb      	ldr	r3, [r7, #28]
2000a0ac:	4413      	add	r3, r2
2000a0ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a0b2:	461a      	mov	r2, r3
2000a0b4:	68bb      	ldr	r3, [r7, #8]
2000a0b6:	69db      	ldr	r3, [r3, #28]
2000a0b8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
2000a0ba:	68bb      	ldr	r3, [r7, #8]
2000a0bc:	791b      	ldrb	r3, [r3, #4]
2000a0be:	2b01      	cmp	r3, #1
2000a0c0:	d128      	bne.n	2000a114 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
2000a0c2:	69fb      	ldr	r3, [r7, #28]
2000a0c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a0c8:	689b      	ldr	r3, [r3, #8]
2000a0ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000a0ce:	2b00      	cmp	r3, #0
2000a0d0:	d110      	bne.n	2000a0f4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
2000a0d2:	69bb      	ldr	r3, [r7, #24]
2000a0d4:	015a      	lsls	r2, r3, #5
2000a0d6:	69fb      	ldr	r3, [r7, #28]
2000a0d8:	4413      	add	r3, r2
2000a0da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a0de:	681b      	ldr	r3, [r3, #0]
2000a0e0:	69ba      	ldr	r2, [r7, #24]
2000a0e2:	0151      	lsls	r1, r2, #5
2000a0e4:	69fa      	ldr	r2, [r7, #28]
2000a0e6:	440a      	add	r2, r1
2000a0e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a0ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
2000a0f0:	6013      	str	r3, [r2, #0]
2000a0f2:	e00f      	b.n	2000a114 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
2000a0f4:	69bb      	ldr	r3, [r7, #24]
2000a0f6:	015a      	lsls	r2, r3, #5
2000a0f8:	69fb      	ldr	r3, [r7, #28]
2000a0fa:	4413      	add	r3, r2
2000a0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a100:	681b      	ldr	r3, [r3, #0]
2000a102:	69ba      	ldr	r2, [r7, #24]
2000a104:	0151      	lsls	r1, r2, #5
2000a106:	69fa      	ldr	r2, [r7, #28]
2000a108:	440a      	add	r2, r1
2000a10a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a10e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a112:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
2000a114:	69bb      	ldr	r3, [r7, #24]
2000a116:	015a      	lsls	r2, r3, #5
2000a118:	69fb      	ldr	r3, [r7, #28]
2000a11a:	4413      	add	r3, r2
2000a11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a120:	681b      	ldr	r3, [r3, #0]
2000a122:	69ba      	ldr	r2, [r7, #24]
2000a124:	0151      	lsls	r1, r2, #5
2000a126:	69fa      	ldr	r2, [r7, #28]
2000a128:	440a      	add	r2, r1
2000a12a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a12e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
2000a132:	6013      	str	r3, [r2, #0]
2000a134:	e169      	b.n	2000a40a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
2000a136:	69bb      	ldr	r3, [r7, #24]
2000a138:	015a      	lsls	r2, r3, #5
2000a13a:	69fb      	ldr	r3, [r7, #28]
2000a13c:	4413      	add	r3, r2
2000a13e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a142:	681b      	ldr	r3, [r3, #0]
2000a144:	69ba      	ldr	r2, [r7, #24]
2000a146:	0151      	lsls	r1, r2, #5
2000a148:	69fa      	ldr	r2, [r7, #28]
2000a14a:	440a      	add	r2, r1
2000a14c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a150:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
2000a154:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
2000a156:	68bb      	ldr	r3, [r7, #8]
2000a158:	791b      	ldrb	r3, [r3, #4]
2000a15a:	2b01      	cmp	r3, #1
2000a15c:	d015      	beq.n	2000a18a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
2000a15e:	68bb      	ldr	r3, [r7, #8]
2000a160:	691b      	ldr	r3, [r3, #16]
2000a162:	2b00      	cmp	r3, #0
2000a164:	f000 8151 	beq.w	2000a40a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
2000a168:	69fb      	ldr	r3, [r7, #28]
2000a16a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a16e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2000a170:	68bb      	ldr	r3, [r7, #8]
2000a172:	781b      	ldrb	r3, [r3, #0]
2000a174:	f003 030f 	and.w	r3, r3, #15
2000a178:	2101      	movs	r1, #1
2000a17a:	fa01 f303 	lsl.w	r3, r1, r3
2000a17e:	69f9      	ldr	r1, [r7, #28]
2000a180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000a184:	4313      	orrs	r3, r2
2000a186:	634b      	str	r3, [r1, #52]	@ 0x34
2000a188:	e13f      	b.n	2000a40a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
2000a18a:	69fb      	ldr	r3, [r7, #28]
2000a18c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a190:	689b      	ldr	r3, [r3, #8]
2000a192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000a196:	2b00      	cmp	r3, #0
2000a198:	d116      	bne.n	2000a1c8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
2000a19a:	69bb      	ldr	r3, [r7, #24]
2000a19c:	015a      	lsls	r2, r3, #5
2000a19e:	69fb      	ldr	r3, [r7, #28]
2000a1a0:	4413      	add	r3, r2
2000a1a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a1a6:	681b      	ldr	r3, [r3, #0]
2000a1a8:	69ba      	ldr	r2, [r7, #24]
2000a1aa:	0151      	lsls	r1, r2, #5
2000a1ac:	69fa      	ldr	r2, [r7, #28]
2000a1ae:	440a      	add	r2, r1
2000a1b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a1b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
2000a1b8:	6013      	str	r3, [r2, #0]
2000a1ba:	e015      	b.n	2000a1e8 <USB_EPStartXfer+0x310>
2000a1bc:	e007ffff 	.word	0xe007ffff
2000a1c0:	fff80000 	.word	0xfff80000
2000a1c4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
2000a1c8:	69bb      	ldr	r3, [r7, #24]
2000a1ca:	015a      	lsls	r2, r3, #5
2000a1cc:	69fb      	ldr	r3, [r7, #28]
2000a1ce:	4413      	add	r3, r2
2000a1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a1d4:	681b      	ldr	r3, [r3, #0]
2000a1d6:	69ba      	ldr	r2, [r7, #24]
2000a1d8:	0151      	lsls	r1, r2, #5
2000a1da:	69fa      	ldr	r2, [r7, #28]
2000a1dc:	440a      	add	r2, r1
2000a1de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a1e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a1e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
2000a1e8:	68bb      	ldr	r3, [r7, #8]
2000a1ea:	68d9      	ldr	r1, [r3, #12]
2000a1ec:	68bb      	ldr	r3, [r7, #8]
2000a1ee:	781a      	ldrb	r2, [r3, #0]
2000a1f0:	68bb      	ldr	r3, [r7, #8]
2000a1f2:	691b      	ldr	r3, [r3, #16]
2000a1f4:	b298      	uxth	r0, r3
2000a1f6:	79fb      	ldrb	r3, [r7, #7]
2000a1f8:	9300      	str	r3, [sp, #0]
2000a1fa:	4603      	mov	r3, r0
2000a1fc:	68f8      	ldr	r0, [r7, #12]
2000a1fe:	f000 f9b9 	bl	2000a574 <USB_WritePacket>
2000a202:	e102      	b.n	2000a40a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
2000a204:	69bb      	ldr	r3, [r7, #24]
2000a206:	015a      	lsls	r2, r3, #5
2000a208:	69fb      	ldr	r3, [r7, #28]
2000a20a:	4413      	add	r3, r2
2000a20c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a210:	691a      	ldr	r2, [r3, #16]
2000a212:	69bb      	ldr	r3, [r7, #24]
2000a214:	0159      	lsls	r1, r3, #5
2000a216:	69fb      	ldr	r3, [r7, #28]
2000a218:	440b      	add	r3, r1
2000a21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a21e:	4619      	mov	r1, r3
2000a220:	4b7c      	ldr	r3, [pc, #496]	@ (2000a414 <USB_EPStartXfer+0x53c>)
2000a222:	4013      	ands	r3, r2
2000a224:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
2000a226:	69bb      	ldr	r3, [r7, #24]
2000a228:	015a      	lsls	r2, r3, #5
2000a22a:	69fb      	ldr	r3, [r7, #28]
2000a22c:	4413      	add	r3, r2
2000a22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a232:	691a      	ldr	r2, [r3, #16]
2000a234:	69bb      	ldr	r3, [r7, #24]
2000a236:	0159      	lsls	r1, r3, #5
2000a238:	69fb      	ldr	r3, [r7, #28]
2000a23a:	440b      	add	r3, r1
2000a23c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a240:	4619      	mov	r1, r3
2000a242:	4b75      	ldr	r3, [pc, #468]	@ (2000a418 <USB_EPStartXfer+0x540>)
2000a244:	4013      	ands	r3, r2
2000a246:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
2000a248:	69bb      	ldr	r3, [r7, #24]
2000a24a:	2b00      	cmp	r3, #0
2000a24c:	d12f      	bne.n	2000a2ae <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
2000a24e:	68bb      	ldr	r3, [r7, #8]
2000a250:	691b      	ldr	r3, [r3, #16]
2000a252:	2b00      	cmp	r3, #0
2000a254:	d003      	beq.n	2000a25e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
2000a256:	68bb      	ldr	r3, [r7, #8]
2000a258:	689a      	ldr	r2, [r3, #8]
2000a25a:	68bb      	ldr	r3, [r7, #8]
2000a25c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
2000a25e:	68bb      	ldr	r3, [r7, #8]
2000a260:	689a      	ldr	r2, [r3, #8]
2000a262:	68bb      	ldr	r3, [r7, #8]
2000a264:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
2000a266:	69bb      	ldr	r3, [r7, #24]
2000a268:	015a      	lsls	r2, r3, #5
2000a26a:	69fb      	ldr	r3, [r7, #28]
2000a26c:	4413      	add	r3, r2
2000a26e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a272:	691a      	ldr	r2, [r3, #16]
2000a274:	68bb      	ldr	r3, [r7, #8]
2000a276:	6a1b      	ldr	r3, [r3, #32]
2000a278:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000a27c:	69b9      	ldr	r1, [r7, #24]
2000a27e:	0148      	lsls	r0, r1, #5
2000a280:	69f9      	ldr	r1, [r7, #28]
2000a282:	4401      	add	r1, r0
2000a284:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a288:	4313      	orrs	r3, r2
2000a28a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000a28c:	69bb      	ldr	r3, [r7, #24]
2000a28e:	015a      	lsls	r2, r3, #5
2000a290:	69fb      	ldr	r3, [r7, #28]
2000a292:	4413      	add	r3, r2
2000a294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a298:	691b      	ldr	r3, [r3, #16]
2000a29a:	69ba      	ldr	r2, [r7, #24]
2000a29c:	0151      	lsls	r1, r2, #5
2000a29e:	69fa      	ldr	r2, [r7, #28]
2000a2a0:	440a      	add	r2, r1
2000a2a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a2a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000a2aa:	6113      	str	r3, [r2, #16]
2000a2ac:	e05f      	b.n	2000a36e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
2000a2ae:	68bb      	ldr	r3, [r7, #8]
2000a2b0:	691b      	ldr	r3, [r3, #16]
2000a2b2:	2b00      	cmp	r3, #0
2000a2b4:	d123      	bne.n	2000a2fe <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
2000a2b6:	69bb      	ldr	r3, [r7, #24]
2000a2b8:	015a      	lsls	r2, r3, #5
2000a2ba:	69fb      	ldr	r3, [r7, #28]
2000a2bc:	4413      	add	r3, r2
2000a2be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a2c2:	691a      	ldr	r2, [r3, #16]
2000a2c4:	68bb      	ldr	r3, [r7, #8]
2000a2c6:	689b      	ldr	r3, [r3, #8]
2000a2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000a2cc:	69b9      	ldr	r1, [r7, #24]
2000a2ce:	0148      	lsls	r0, r1, #5
2000a2d0:	69f9      	ldr	r1, [r7, #28]
2000a2d2:	4401      	add	r1, r0
2000a2d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a2d8:	4313      	orrs	r3, r2
2000a2da:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000a2dc:	69bb      	ldr	r3, [r7, #24]
2000a2de:	015a      	lsls	r2, r3, #5
2000a2e0:	69fb      	ldr	r3, [r7, #28]
2000a2e2:	4413      	add	r3, r2
2000a2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a2e8:	691b      	ldr	r3, [r3, #16]
2000a2ea:	69ba      	ldr	r2, [r7, #24]
2000a2ec:	0151      	lsls	r1, r2, #5
2000a2ee:	69fa      	ldr	r2, [r7, #28]
2000a2f0:	440a      	add	r2, r1
2000a2f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a2f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000a2fa:	6113      	str	r3, [r2, #16]
2000a2fc:	e037      	b.n	2000a36e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
2000a2fe:	68bb      	ldr	r3, [r7, #8]
2000a300:	691a      	ldr	r2, [r3, #16]
2000a302:	68bb      	ldr	r3, [r7, #8]
2000a304:	689b      	ldr	r3, [r3, #8]
2000a306:	4413      	add	r3, r2
2000a308:	1e5a      	subs	r2, r3, #1
2000a30a:	68bb      	ldr	r3, [r7, #8]
2000a30c:	689b      	ldr	r3, [r3, #8]
2000a30e:	fbb2 f3f3 	udiv	r3, r2, r3
2000a312:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
2000a314:	68bb      	ldr	r3, [r7, #8]
2000a316:	689b      	ldr	r3, [r3, #8]
2000a318:	8afa      	ldrh	r2, [r7, #22]
2000a31a:	fb03 f202 	mul.w	r2, r3, r2
2000a31e:	68bb      	ldr	r3, [r7, #8]
2000a320:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
2000a322:	69bb      	ldr	r3, [r7, #24]
2000a324:	015a      	lsls	r2, r3, #5
2000a326:	69fb      	ldr	r3, [r7, #28]
2000a328:	4413      	add	r3, r2
2000a32a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a32e:	691a      	ldr	r2, [r3, #16]
2000a330:	8afb      	ldrh	r3, [r7, #22]
2000a332:	04d9      	lsls	r1, r3, #19
2000a334:	4b39      	ldr	r3, [pc, #228]	@ (2000a41c <USB_EPStartXfer+0x544>)
2000a336:	400b      	ands	r3, r1
2000a338:	69b9      	ldr	r1, [r7, #24]
2000a33a:	0148      	lsls	r0, r1, #5
2000a33c:	69f9      	ldr	r1, [r7, #28]
2000a33e:	4401      	add	r1, r0
2000a340:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a344:	4313      	orrs	r3, r2
2000a346:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
2000a348:	69bb      	ldr	r3, [r7, #24]
2000a34a:	015a      	lsls	r2, r3, #5
2000a34c:	69fb      	ldr	r3, [r7, #28]
2000a34e:	4413      	add	r3, r2
2000a350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a354:	691a      	ldr	r2, [r3, #16]
2000a356:	68bb      	ldr	r3, [r7, #8]
2000a358:	6a1b      	ldr	r3, [r3, #32]
2000a35a:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000a35e:	69b9      	ldr	r1, [r7, #24]
2000a360:	0148      	lsls	r0, r1, #5
2000a362:	69f9      	ldr	r1, [r7, #28]
2000a364:	4401      	add	r1, r0
2000a366:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a36a:	4313      	orrs	r3, r2
2000a36c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
2000a36e:	79fb      	ldrb	r3, [r7, #7]
2000a370:	2b01      	cmp	r3, #1
2000a372:	d10d      	bne.n	2000a390 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
2000a374:	68bb      	ldr	r3, [r7, #8]
2000a376:	68db      	ldr	r3, [r3, #12]
2000a378:	2b00      	cmp	r3, #0
2000a37a:	d009      	beq.n	2000a390 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
2000a37c:	68bb      	ldr	r3, [r7, #8]
2000a37e:	68d9      	ldr	r1, [r3, #12]
2000a380:	69bb      	ldr	r3, [r7, #24]
2000a382:	015a      	lsls	r2, r3, #5
2000a384:	69fb      	ldr	r3, [r7, #28]
2000a386:	4413      	add	r3, r2
2000a388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a38c:	460a      	mov	r2, r1
2000a38e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
2000a390:	68bb      	ldr	r3, [r7, #8]
2000a392:	791b      	ldrb	r3, [r3, #4]
2000a394:	2b01      	cmp	r3, #1
2000a396:	d128      	bne.n	2000a3ea <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
2000a398:	69fb      	ldr	r3, [r7, #28]
2000a39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a39e:	689b      	ldr	r3, [r3, #8]
2000a3a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000a3a4:	2b00      	cmp	r3, #0
2000a3a6:	d110      	bne.n	2000a3ca <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
2000a3a8:	69bb      	ldr	r3, [r7, #24]
2000a3aa:	015a      	lsls	r2, r3, #5
2000a3ac:	69fb      	ldr	r3, [r7, #28]
2000a3ae:	4413      	add	r3, r2
2000a3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a3b4:	681b      	ldr	r3, [r3, #0]
2000a3b6:	69ba      	ldr	r2, [r7, #24]
2000a3b8:	0151      	lsls	r1, r2, #5
2000a3ba:	69fa      	ldr	r2, [r7, #28]
2000a3bc:	440a      	add	r2, r1
2000a3be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a3c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
2000a3c6:	6013      	str	r3, [r2, #0]
2000a3c8:	e00f      	b.n	2000a3ea <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
2000a3ca:	69bb      	ldr	r3, [r7, #24]
2000a3cc:	015a      	lsls	r2, r3, #5
2000a3ce:	69fb      	ldr	r3, [r7, #28]
2000a3d0:	4413      	add	r3, r2
2000a3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a3d6:	681b      	ldr	r3, [r3, #0]
2000a3d8:	69ba      	ldr	r2, [r7, #24]
2000a3da:	0151      	lsls	r1, r2, #5
2000a3dc:	69fa      	ldr	r2, [r7, #28]
2000a3de:	440a      	add	r2, r1
2000a3e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a3e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a3e8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
2000a3ea:	69bb      	ldr	r3, [r7, #24]
2000a3ec:	015a      	lsls	r2, r3, #5
2000a3ee:	69fb      	ldr	r3, [r7, #28]
2000a3f0:	4413      	add	r3, r2
2000a3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a3f6:	681b      	ldr	r3, [r3, #0]
2000a3f8:	69ba      	ldr	r2, [r7, #24]
2000a3fa:	0151      	lsls	r1, r2, #5
2000a3fc:	69fa      	ldr	r2, [r7, #28]
2000a3fe:	440a      	add	r2, r1
2000a400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a404:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
2000a408:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
2000a40a:	2300      	movs	r3, #0
}
2000a40c:	4618      	mov	r0, r3
2000a40e:	3720      	adds	r7, #32
2000a410:	46bd      	mov	sp, r7
2000a412:	bd80      	pop	{r7, pc}
2000a414:	fff80000 	.word	0xfff80000
2000a418:	e007ffff 	.word	0xe007ffff
2000a41c:	1ff80000 	.word	0x1ff80000

2000a420 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
2000a420:	b480      	push	{r7}
2000a422:	b087      	sub	sp, #28
2000a424:	af00      	add	r7, sp, #0
2000a426:	6078      	str	r0, [r7, #4]
2000a428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
2000a42a:	2300      	movs	r3, #0
2000a42c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
2000a42e:	2300      	movs	r3, #0
2000a430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a432:	687b      	ldr	r3, [r7, #4]
2000a434:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
2000a436:	683b      	ldr	r3, [r7, #0]
2000a438:	785b      	ldrb	r3, [r3, #1]
2000a43a:	2b01      	cmp	r3, #1
2000a43c:	d14a      	bne.n	2000a4d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
2000a43e:	683b      	ldr	r3, [r7, #0]
2000a440:	781b      	ldrb	r3, [r3, #0]
2000a442:	015a      	lsls	r2, r3, #5
2000a444:	693b      	ldr	r3, [r7, #16]
2000a446:	4413      	add	r3, r2
2000a448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a44c:	681b      	ldr	r3, [r3, #0]
2000a44e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a456:	f040 8086 	bne.w	2000a566 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
2000a45a:	683b      	ldr	r3, [r7, #0]
2000a45c:	781b      	ldrb	r3, [r3, #0]
2000a45e:	015a      	lsls	r2, r3, #5
2000a460:	693b      	ldr	r3, [r7, #16]
2000a462:	4413      	add	r3, r2
2000a464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a468:	681b      	ldr	r3, [r3, #0]
2000a46a:	683a      	ldr	r2, [r7, #0]
2000a46c:	7812      	ldrb	r2, [r2, #0]
2000a46e:	0151      	lsls	r1, r2, #5
2000a470:	693a      	ldr	r2, [r7, #16]
2000a472:	440a      	add	r2, r1
2000a474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a478:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000a47c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
2000a47e:	683b      	ldr	r3, [r7, #0]
2000a480:	781b      	ldrb	r3, [r3, #0]
2000a482:	015a      	lsls	r2, r3, #5
2000a484:	693b      	ldr	r3, [r7, #16]
2000a486:	4413      	add	r3, r2
2000a488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a48c:	681b      	ldr	r3, [r3, #0]
2000a48e:	683a      	ldr	r2, [r7, #0]
2000a490:	7812      	ldrb	r2, [r2, #0]
2000a492:	0151      	lsls	r1, r2, #5
2000a494:	693a      	ldr	r2, [r7, #16]
2000a496:	440a      	add	r2, r1
2000a498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a49c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
2000a4a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
2000a4a2:	68fb      	ldr	r3, [r7, #12]
2000a4a4:	3301      	adds	r3, #1
2000a4a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
2000a4a8:	68fb      	ldr	r3, [r7, #12]
2000a4aa:	f242 7210 	movw	r2, #10000	@ 0x2710
2000a4ae:	4293      	cmp	r3, r2
2000a4b0:	d902      	bls.n	2000a4b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
2000a4b2:	2301      	movs	r3, #1
2000a4b4:	75fb      	strb	r3, [r7, #23]
          break;
2000a4b6:	e056      	b.n	2000a566 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
2000a4b8:	683b      	ldr	r3, [r7, #0]
2000a4ba:	781b      	ldrb	r3, [r3, #0]
2000a4bc:	015a      	lsls	r2, r3, #5
2000a4be:	693b      	ldr	r3, [r7, #16]
2000a4c0:	4413      	add	r3, r2
2000a4c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a4c6:	681b      	ldr	r3, [r3, #0]
2000a4c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a4d0:	d0e7      	beq.n	2000a4a2 <USB_EPStopXfer+0x82>
2000a4d2:	e048      	b.n	2000a566 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
2000a4d4:	683b      	ldr	r3, [r7, #0]
2000a4d6:	781b      	ldrb	r3, [r3, #0]
2000a4d8:	015a      	lsls	r2, r3, #5
2000a4da:	693b      	ldr	r3, [r7, #16]
2000a4dc:	4413      	add	r3, r2
2000a4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a4e2:	681b      	ldr	r3, [r3, #0]
2000a4e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a4ec:	d13b      	bne.n	2000a566 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
2000a4ee:	683b      	ldr	r3, [r7, #0]
2000a4f0:	781b      	ldrb	r3, [r3, #0]
2000a4f2:	015a      	lsls	r2, r3, #5
2000a4f4:	693b      	ldr	r3, [r7, #16]
2000a4f6:	4413      	add	r3, r2
2000a4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a4fc:	681b      	ldr	r3, [r3, #0]
2000a4fe:	683a      	ldr	r2, [r7, #0]
2000a500:	7812      	ldrb	r2, [r2, #0]
2000a502:	0151      	lsls	r1, r2, #5
2000a504:	693a      	ldr	r2, [r7, #16]
2000a506:	440a      	add	r2, r1
2000a508:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a50c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000a510:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
2000a512:	683b      	ldr	r3, [r7, #0]
2000a514:	781b      	ldrb	r3, [r3, #0]
2000a516:	015a      	lsls	r2, r3, #5
2000a518:	693b      	ldr	r3, [r7, #16]
2000a51a:	4413      	add	r3, r2
2000a51c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a520:	681b      	ldr	r3, [r3, #0]
2000a522:	683a      	ldr	r2, [r7, #0]
2000a524:	7812      	ldrb	r2, [r2, #0]
2000a526:	0151      	lsls	r1, r2, #5
2000a528:	693a      	ldr	r2, [r7, #16]
2000a52a:	440a      	add	r2, r1
2000a52c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
2000a534:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
2000a536:	68fb      	ldr	r3, [r7, #12]
2000a538:	3301      	adds	r3, #1
2000a53a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
2000a53c:	68fb      	ldr	r3, [r7, #12]
2000a53e:	f242 7210 	movw	r2, #10000	@ 0x2710
2000a542:	4293      	cmp	r3, r2
2000a544:	d902      	bls.n	2000a54c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
2000a546:	2301      	movs	r3, #1
2000a548:	75fb      	strb	r3, [r7, #23]
          break;
2000a54a:	e00c      	b.n	2000a566 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
2000a54c:	683b      	ldr	r3, [r7, #0]
2000a54e:	781b      	ldrb	r3, [r3, #0]
2000a550:	015a      	lsls	r2, r3, #5
2000a552:	693b      	ldr	r3, [r7, #16]
2000a554:	4413      	add	r3, r2
2000a556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a55a:	681b      	ldr	r3, [r3, #0]
2000a55c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a564:	d0e7      	beq.n	2000a536 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
2000a566:	7dfb      	ldrb	r3, [r7, #23]
}
2000a568:	4618      	mov	r0, r3
2000a56a:	371c      	adds	r7, #28
2000a56c:	46bd      	mov	sp, r7
2000a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a572:	4770      	bx	lr

2000a574 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
2000a574:	b480      	push	{r7}
2000a576:	b089      	sub	sp, #36	@ 0x24
2000a578:	af00      	add	r7, sp, #0
2000a57a:	60f8      	str	r0, [r7, #12]
2000a57c:	60b9      	str	r1, [r7, #8]
2000a57e:	4611      	mov	r1, r2
2000a580:	461a      	mov	r2, r3
2000a582:	460b      	mov	r3, r1
2000a584:	71fb      	strb	r3, [r7, #7]
2000a586:	4613      	mov	r3, r2
2000a588:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a58a:	68fb      	ldr	r3, [r7, #12]
2000a58c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
2000a58e:	68bb      	ldr	r3, [r7, #8]
2000a590:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
2000a592:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
2000a596:	2b00      	cmp	r3, #0
2000a598:	d123      	bne.n	2000a5e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
2000a59a:	88bb      	ldrh	r3, [r7, #4]
2000a59c:	3303      	adds	r3, #3
2000a59e:	089b      	lsrs	r3, r3, #2
2000a5a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
2000a5a2:	2300      	movs	r3, #0
2000a5a4:	61bb      	str	r3, [r7, #24]
2000a5a6:	e018      	b.n	2000a5da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
2000a5a8:	79fb      	ldrb	r3, [r7, #7]
2000a5aa:	031a      	lsls	r2, r3, #12
2000a5ac:	697b      	ldr	r3, [r7, #20]
2000a5ae:	4413      	add	r3, r2
2000a5b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000a5b4:	461a      	mov	r2, r3
2000a5b6:	69fb      	ldr	r3, [r7, #28]
2000a5b8:	681b      	ldr	r3, [r3, #0]
2000a5ba:	6013      	str	r3, [r2, #0]
      pSrc++;
2000a5bc:	69fb      	ldr	r3, [r7, #28]
2000a5be:	3301      	adds	r3, #1
2000a5c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
2000a5c2:	69fb      	ldr	r3, [r7, #28]
2000a5c4:	3301      	adds	r3, #1
2000a5c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
2000a5c8:	69fb      	ldr	r3, [r7, #28]
2000a5ca:	3301      	adds	r3, #1
2000a5cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
2000a5ce:	69fb      	ldr	r3, [r7, #28]
2000a5d0:	3301      	adds	r3, #1
2000a5d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
2000a5d4:	69bb      	ldr	r3, [r7, #24]
2000a5d6:	3301      	adds	r3, #1
2000a5d8:	61bb      	str	r3, [r7, #24]
2000a5da:	69ba      	ldr	r2, [r7, #24]
2000a5dc:	693b      	ldr	r3, [r7, #16]
2000a5de:	429a      	cmp	r2, r3
2000a5e0:	d3e2      	bcc.n	2000a5a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
2000a5e2:	2300      	movs	r3, #0
}
2000a5e4:	4618      	mov	r0, r3
2000a5e6:	3724      	adds	r7, #36	@ 0x24
2000a5e8:	46bd      	mov	sp, r7
2000a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a5ee:	4770      	bx	lr

2000a5f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
2000a5f0:	b480      	push	{r7}
2000a5f2:	b08b      	sub	sp, #44	@ 0x2c
2000a5f4:	af00      	add	r7, sp, #0
2000a5f6:	60f8      	str	r0, [r7, #12]
2000a5f8:	60b9      	str	r1, [r7, #8]
2000a5fa:	4613      	mov	r3, r2
2000a5fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a5fe:	68fb      	ldr	r3, [r7, #12]
2000a600:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
2000a602:	68bb      	ldr	r3, [r7, #8]
2000a604:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
2000a606:	88fb      	ldrh	r3, [r7, #6]
2000a608:	089b      	lsrs	r3, r3, #2
2000a60a:	b29b      	uxth	r3, r3
2000a60c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
2000a60e:	88fb      	ldrh	r3, [r7, #6]
2000a610:	f003 0303 	and.w	r3, r3, #3
2000a614:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
2000a616:	2300      	movs	r3, #0
2000a618:	623b      	str	r3, [r7, #32]
2000a61a:	e014      	b.n	2000a646 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
2000a61c:	69bb      	ldr	r3, [r7, #24]
2000a61e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000a622:	681a      	ldr	r2, [r3, #0]
2000a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a626:	601a      	str	r2, [r3, #0]
    pDest++;
2000a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a62a:	3301      	adds	r3, #1
2000a62c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
2000a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a630:	3301      	adds	r3, #1
2000a632:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
2000a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a636:	3301      	adds	r3, #1
2000a638:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
2000a63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a63c:	3301      	adds	r3, #1
2000a63e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
2000a640:	6a3b      	ldr	r3, [r7, #32]
2000a642:	3301      	adds	r3, #1
2000a644:	623b      	str	r3, [r7, #32]
2000a646:	6a3a      	ldr	r2, [r7, #32]
2000a648:	697b      	ldr	r3, [r7, #20]
2000a64a:	429a      	cmp	r2, r3
2000a64c:	d3e6      	bcc.n	2000a61c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
2000a64e:	8bfb      	ldrh	r3, [r7, #30]
2000a650:	2b00      	cmp	r3, #0
2000a652:	d01e      	beq.n	2000a692 <USB_ReadPacket+0xa2>
  {
    i = 0U;
2000a654:	2300      	movs	r3, #0
2000a656:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
2000a658:	69bb      	ldr	r3, [r7, #24]
2000a65a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000a65e:	461a      	mov	r2, r3
2000a660:	f107 0310 	add.w	r3, r7, #16
2000a664:	6812      	ldr	r2, [r2, #0]
2000a666:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
2000a668:	693a      	ldr	r2, [r7, #16]
2000a66a:	6a3b      	ldr	r3, [r7, #32]
2000a66c:	b2db      	uxtb	r3, r3
2000a66e:	00db      	lsls	r3, r3, #3
2000a670:	fa22 f303 	lsr.w	r3, r2, r3
2000a674:	b2da      	uxtb	r2, r3
2000a676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a678:	701a      	strb	r2, [r3, #0]
      i++;
2000a67a:	6a3b      	ldr	r3, [r7, #32]
2000a67c:	3301      	adds	r3, #1
2000a67e:	623b      	str	r3, [r7, #32]
      pDest++;
2000a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a682:	3301      	adds	r3, #1
2000a684:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
2000a686:	8bfb      	ldrh	r3, [r7, #30]
2000a688:	3b01      	subs	r3, #1
2000a68a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
2000a68c:	8bfb      	ldrh	r3, [r7, #30]
2000a68e:	2b00      	cmp	r3, #0
2000a690:	d1ea      	bne.n	2000a668 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
2000a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
2000a694:	4618      	mov	r0, r3
2000a696:	372c      	adds	r7, #44	@ 0x2c
2000a698:	46bd      	mov	sp, r7
2000a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a69e:	4770      	bx	lr

2000a6a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
2000a6a0:	b480      	push	{r7}
2000a6a2:	b085      	sub	sp, #20
2000a6a4:	af00      	add	r7, sp, #0
2000a6a6:	6078      	str	r0, [r7, #4]
2000a6a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a6aa:	687b      	ldr	r3, [r7, #4]
2000a6ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
2000a6ae:	683b      	ldr	r3, [r7, #0]
2000a6b0:	781b      	ldrb	r3, [r3, #0]
2000a6b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
2000a6b4:	683b      	ldr	r3, [r7, #0]
2000a6b6:	785b      	ldrb	r3, [r3, #1]
2000a6b8:	2b01      	cmp	r3, #1
2000a6ba:	d12c      	bne.n	2000a716 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
2000a6bc:	68bb      	ldr	r3, [r7, #8]
2000a6be:	015a      	lsls	r2, r3, #5
2000a6c0:	68fb      	ldr	r3, [r7, #12]
2000a6c2:	4413      	add	r3, r2
2000a6c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a6c8:	681b      	ldr	r3, [r3, #0]
2000a6ca:	2b00      	cmp	r3, #0
2000a6cc:	db12      	blt.n	2000a6f4 <USB_EPSetStall+0x54>
2000a6ce:	68bb      	ldr	r3, [r7, #8]
2000a6d0:	2b00      	cmp	r3, #0
2000a6d2:	d00f      	beq.n	2000a6f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
2000a6d4:	68bb      	ldr	r3, [r7, #8]
2000a6d6:	015a      	lsls	r2, r3, #5
2000a6d8:	68fb      	ldr	r3, [r7, #12]
2000a6da:	4413      	add	r3, r2
2000a6dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a6e0:	681b      	ldr	r3, [r3, #0]
2000a6e2:	68ba      	ldr	r2, [r7, #8]
2000a6e4:	0151      	lsls	r1, r2, #5
2000a6e6:	68fa      	ldr	r2, [r7, #12]
2000a6e8:	440a      	add	r2, r1
2000a6ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a6ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
2000a6f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
2000a6f4:	68bb      	ldr	r3, [r7, #8]
2000a6f6:	015a      	lsls	r2, r3, #5
2000a6f8:	68fb      	ldr	r3, [r7, #12]
2000a6fa:	4413      	add	r3, r2
2000a6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a700:	681b      	ldr	r3, [r3, #0]
2000a702:	68ba      	ldr	r2, [r7, #8]
2000a704:	0151      	lsls	r1, r2, #5
2000a706:	68fa      	ldr	r2, [r7, #12]
2000a708:	440a      	add	r2, r1
2000a70a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a70e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2000a712:	6013      	str	r3, [r2, #0]
2000a714:	e02b      	b.n	2000a76e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
2000a716:	68bb      	ldr	r3, [r7, #8]
2000a718:	015a      	lsls	r2, r3, #5
2000a71a:	68fb      	ldr	r3, [r7, #12]
2000a71c:	4413      	add	r3, r2
2000a71e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a722:	681b      	ldr	r3, [r3, #0]
2000a724:	2b00      	cmp	r3, #0
2000a726:	db12      	blt.n	2000a74e <USB_EPSetStall+0xae>
2000a728:	68bb      	ldr	r3, [r7, #8]
2000a72a:	2b00      	cmp	r3, #0
2000a72c:	d00f      	beq.n	2000a74e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
2000a72e:	68bb      	ldr	r3, [r7, #8]
2000a730:	015a      	lsls	r2, r3, #5
2000a732:	68fb      	ldr	r3, [r7, #12]
2000a734:	4413      	add	r3, r2
2000a736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a73a:	681b      	ldr	r3, [r3, #0]
2000a73c:	68ba      	ldr	r2, [r7, #8]
2000a73e:	0151      	lsls	r1, r2, #5
2000a740:	68fa      	ldr	r2, [r7, #12]
2000a742:	440a      	add	r2, r1
2000a744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a748:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
2000a74c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
2000a74e:	68bb      	ldr	r3, [r7, #8]
2000a750:	015a      	lsls	r2, r3, #5
2000a752:	68fb      	ldr	r3, [r7, #12]
2000a754:	4413      	add	r3, r2
2000a756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a75a:	681b      	ldr	r3, [r3, #0]
2000a75c:	68ba      	ldr	r2, [r7, #8]
2000a75e:	0151      	lsls	r1, r2, #5
2000a760:	68fa      	ldr	r2, [r7, #12]
2000a762:	440a      	add	r2, r1
2000a764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a768:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2000a76c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
2000a76e:	2300      	movs	r3, #0
}
2000a770:	4618      	mov	r0, r3
2000a772:	3714      	adds	r7, #20
2000a774:	46bd      	mov	sp, r7
2000a776:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a77a:	4770      	bx	lr

2000a77c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
2000a77c:	b480      	push	{r7}
2000a77e:	b085      	sub	sp, #20
2000a780:	af00      	add	r7, sp, #0
2000a782:	6078      	str	r0, [r7, #4]
2000a784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a786:	687b      	ldr	r3, [r7, #4]
2000a788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
2000a78a:	683b      	ldr	r3, [r7, #0]
2000a78c:	781b      	ldrb	r3, [r3, #0]
2000a78e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
2000a790:	683b      	ldr	r3, [r7, #0]
2000a792:	785b      	ldrb	r3, [r3, #1]
2000a794:	2b01      	cmp	r3, #1
2000a796:	d128      	bne.n	2000a7ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
2000a798:	68bb      	ldr	r3, [r7, #8]
2000a79a:	015a      	lsls	r2, r3, #5
2000a79c:	68fb      	ldr	r3, [r7, #12]
2000a79e:	4413      	add	r3, r2
2000a7a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a7a4:	681b      	ldr	r3, [r3, #0]
2000a7a6:	68ba      	ldr	r2, [r7, #8]
2000a7a8:	0151      	lsls	r1, r2, #5
2000a7aa:	68fa      	ldr	r2, [r7, #12]
2000a7ac:	440a      	add	r2, r1
2000a7ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a7b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000a7b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
2000a7b8:	683b      	ldr	r3, [r7, #0]
2000a7ba:	791b      	ldrb	r3, [r3, #4]
2000a7bc:	2b03      	cmp	r3, #3
2000a7be:	d003      	beq.n	2000a7c8 <USB_EPClearStall+0x4c>
2000a7c0:	683b      	ldr	r3, [r7, #0]
2000a7c2:	791b      	ldrb	r3, [r3, #4]
2000a7c4:	2b02      	cmp	r3, #2
2000a7c6:	d138      	bne.n	2000a83a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
2000a7c8:	68bb      	ldr	r3, [r7, #8]
2000a7ca:	015a      	lsls	r2, r3, #5
2000a7cc:	68fb      	ldr	r3, [r7, #12]
2000a7ce:	4413      	add	r3, r2
2000a7d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a7d4:	681b      	ldr	r3, [r3, #0]
2000a7d6:	68ba      	ldr	r2, [r7, #8]
2000a7d8:	0151      	lsls	r1, r2, #5
2000a7da:	68fa      	ldr	r2, [r7, #12]
2000a7dc:	440a      	add	r2, r1
2000a7de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a7e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a7e6:	6013      	str	r3, [r2, #0]
2000a7e8:	e027      	b.n	2000a83a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
2000a7ea:	68bb      	ldr	r3, [r7, #8]
2000a7ec:	015a      	lsls	r2, r3, #5
2000a7ee:	68fb      	ldr	r3, [r7, #12]
2000a7f0:	4413      	add	r3, r2
2000a7f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a7f6:	681b      	ldr	r3, [r3, #0]
2000a7f8:	68ba      	ldr	r2, [r7, #8]
2000a7fa:	0151      	lsls	r1, r2, #5
2000a7fc:	68fa      	ldr	r2, [r7, #12]
2000a7fe:	440a      	add	r2, r1
2000a800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a804:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000a808:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
2000a80a:	683b      	ldr	r3, [r7, #0]
2000a80c:	791b      	ldrb	r3, [r3, #4]
2000a80e:	2b03      	cmp	r3, #3
2000a810:	d003      	beq.n	2000a81a <USB_EPClearStall+0x9e>
2000a812:	683b      	ldr	r3, [r7, #0]
2000a814:	791b      	ldrb	r3, [r3, #4]
2000a816:	2b02      	cmp	r3, #2
2000a818:	d10f      	bne.n	2000a83a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
2000a81a:	68bb      	ldr	r3, [r7, #8]
2000a81c:	015a      	lsls	r2, r3, #5
2000a81e:	68fb      	ldr	r3, [r7, #12]
2000a820:	4413      	add	r3, r2
2000a822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a826:	681b      	ldr	r3, [r3, #0]
2000a828:	68ba      	ldr	r2, [r7, #8]
2000a82a:	0151      	lsls	r1, r2, #5
2000a82c:	68fa      	ldr	r2, [r7, #12]
2000a82e:	440a      	add	r2, r1
2000a830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a838:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
2000a83a:	2300      	movs	r3, #0
}
2000a83c:	4618      	mov	r0, r3
2000a83e:	3714      	adds	r7, #20
2000a840:	46bd      	mov	sp, r7
2000a842:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a846:	4770      	bx	lr

2000a848 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
2000a848:	b480      	push	{r7}
2000a84a:	b085      	sub	sp, #20
2000a84c:	af00      	add	r7, sp, #0
2000a84e:	6078      	str	r0, [r7, #4]
2000a850:	460b      	mov	r3, r1
2000a852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a854:	687b      	ldr	r3, [r7, #4]
2000a856:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
2000a858:	68fb      	ldr	r3, [r7, #12]
2000a85a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a85e:	681b      	ldr	r3, [r3, #0]
2000a860:	68fa      	ldr	r2, [r7, #12]
2000a862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000a866:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
2000a86a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
2000a86c:	68fb      	ldr	r3, [r7, #12]
2000a86e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a872:	681a      	ldr	r2, [r3, #0]
2000a874:	78fb      	ldrb	r3, [r7, #3]
2000a876:	011b      	lsls	r3, r3, #4
2000a878:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
2000a87c:	68f9      	ldr	r1, [r7, #12]
2000a87e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000a882:	4313      	orrs	r3, r2
2000a884:	600b      	str	r3, [r1, #0]

  return HAL_OK;
2000a886:	2300      	movs	r3, #0
}
2000a888:	4618      	mov	r0, r3
2000a88a:	3714      	adds	r7, #20
2000a88c:	46bd      	mov	sp, r7
2000a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a892:	4770      	bx	lr

2000a894 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
2000a894:	b480      	push	{r7}
2000a896:	b085      	sub	sp, #20
2000a898:	af00      	add	r7, sp, #0
2000a89a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a89c:	687b      	ldr	r3, [r7, #4]
2000a89e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
2000a8a0:	68fb      	ldr	r3, [r7, #12]
2000a8a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000a8a6:	681b      	ldr	r3, [r3, #0]
2000a8a8:	68fa      	ldr	r2, [r7, #12]
2000a8aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000a8ae:	f023 0303 	bic.w	r3, r3, #3
2000a8b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
2000a8b4:	68fb      	ldr	r3, [r7, #12]
2000a8b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a8ba:	685b      	ldr	r3, [r3, #4]
2000a8bc:	68fa      	ldr	r2, [r7, #12]
2000a8be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000a8c2:	f023 0302 	bic.w	r3, r3, #2
2000a8c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000a8c8:	2300      	movs	r3, #0
}
2000a8ca:	4618      	mov	r0, r3
2000a8cc:	3714      	adds	r7, #20
2000a8ce:	46bd      	mov	sp, r7
2000a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a8d4:	4770      	bx	lr

2000a8d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
2000a8d6:	b480      	push	{r7}
2000a8d8:	b085      	sub	sp, #20
2000a8da:	af00      	add	r7, sp, #0
2000a8dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a8de:	687b      	ldr	r3, [r7, #4]
2000a8e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
2000a8e2:	68fb      	ldr	r3, [r7, #12]
2000a8e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000a8e8:	681b      	ldr	r3, [r3, #0]
2000a8ea:	68fa      	ldr	r2, [r7, #12]
2000a8ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000a8f0:	f023 0303 	bic.w	r3, r3, #3
2000a8f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
2000a8f6:	68fb      	ldr	r3, [r7, #12]
2000a8f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a8fc:	685b      	ldr	r3, [r3, #4]
2000a8fe:	68fa      	ldr	r2, [r7, #12]
2000a900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000a904:	f043 0302 	orr.w	r3, r3, #2
2000a908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000a90a:	2300      	movs	r3, #0
}
2000a90c:	4618      	mov	r0, r3
2000a90e:	3714      	adds	r7, #20
2000a910:	46bd      	mov	sp, r7
2000a912:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a916:	4770      	bx	lr

2000a918 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
2000a918:	b480      	push	{r7}
2000a91a:	b085      	sub	sp, #20
2000a91c:	af00      	add	r7, sp, #0
2000a91e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
2000a920:	687b      	ldr	r3, [r7, #4]
2000a922:	695b      	ldr	r3, [r3, #20]
2000a924:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
2000a926:	687b      	ldr	r3, [r7, #4]
2000a928:	699b      	ldr	r3, [r3, #24]
2000a92a:	68fa      	ldr	r2, [r7, #12]
2000a92c:	4013      	ands	r3, r2
2000a92e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
2000a930:	68fb      	ldr	r3, [r7, #12]
}
2000a932:	4618      	mov	r0, r3
2000a934:	3714      	adds	r7, #20
2000a936:	46bd      	mov	sp, r7
2000a938:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a93c:	4770      	bx	lr

2000a93e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
2000a93e:	b480      	push	{r7}
2000a940:	b085      	sub	sp, #20
2000a942:	af00      	add	r7, sp, #0
2000a944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a946:	687b      	ldr	r3, [r7, #4]
2000a948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
2000a94a:	68fb      	ldr	r3, [r7, #12]
2000a94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a950:	699b      	ldr	r3, [r3, #24]
2000a952:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
2000a954:	68fb      	ldr	r3, [r7, #12]
2000a956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a95a:	69db      	ldr	r3, [r3, #28]
2000a95c:	68ba      	ldr	r2, [r7, #8]
2000a95e:	4013      	ands	r3, r2
2000a960:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
2000a962:	68bb      	ldr	r3, [r7, #8]
2000a964:	0c1b      	lsrs	r3, r3, #16
}
2000a966:	4618      	mov	r0, r3
2000a968:	3714      	adds	r7, #20
2000a96a:	46bd      	mov	sp, r7
2000a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a970:	4770      	bx	lr

2000a972 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
2000a972:	b480      	push	{r7}
2000a974:	b085      	sub	sp, #20
2000a976:	af00      	add	r7, sp, #0
2000a978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a97a:	687b      	ldr	r3, [r7, #4]
2000a97c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
2000a97e:	68fb      	ldr	r3, [r7, #12]
2000a980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a984:	699b      	ldr	r3, [r3, #24]
2000a986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
2000a988:	68fb      	ldr	r3, [r7, #12]
2000a98a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a98e:	69db      	ldr	r3, [r3, #28]
2000a990:	68ba      	ldr	r2, [r7, #8]
2000a992:	4013      	ands	r3, r2
2000a994:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
2000a996:	68bb      	ldr	r3, [r7, #8]
2000a998:	b29b      	uxth	r3, r3
}
2000a99a:	4618      	mov	r0, r3
2000a99c:	3714      	adds	r7, #20
2000a99e:	46bd      	mov	sp, r7
2000a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a9a4:	4770      	bx	lr

2000a9a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
2000a9a6:	b480      	push	{r7}
2000a9a8:	b085      	sub	sp, #20
2000a9aa:	af00      	add	r7, sp, #0
2000a9ac:	6078      	str	r0, [r7, #4]
2000a9ae:	460b      	mov	r3, r1
2000a9b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a9b2:	687b      	ldr	r3, [r7, #4]
2000a9b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
2000a9b6:	78fb      	ldrb	r3, [r7, #3]
2000a9b8:	015a      	lsls	r2, r3, #5
2000a9ba:	68fb      	ldr	r3, [r7, #12]
2000a9bc:	4413      	add	r3, r2
2000a9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a9c2:	689b      	ldr	r3, [r3, #8]
2000a9c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
2000a9c6:	68fb      	ldr	r3, [r7, #12]
2000a9c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a9cc:	695b      	ldr	r3, [r3, #20]
2000a9ce:	68ba      	ldr	r2, [r7, #8]
2000a9d0:	4013      	ands	r3, r2
2000a9d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
2000a9d4:	68bb      	ldr	r3, [r7, #8]
}
2000a9d6:	4618      	mov	r0, r3
2000a9d8:	3714      	adds	r7, #20
2000a9da:	46bd      	mov	sp, r7
2000a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a9e0:	4770      	bx	lr

2000a9e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
2000a9e2:	b480      	push	{r7}
2000a9e4:	b087      	sub	sp, #28
2000a9e6:	af00      	add	r7, sp, #0
2000a9e8:	6078      	str	r0, [r7, #4]
2000a9ea:	460b      	mov	r3, r1
2000a9ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a9ee:	687b      	ldr	r3, [r7, #4]
2000a9f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
2000a9f2:	697b      	ldr	r3, [r7, #20]
2000a9f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a9f8:	691b      	ldr	r3, [r3, #16]
2000a9fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
2000a9fc:	697b      	ldr	r3, [r7, #20]
2000a9fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000aa02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000aa04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
2000aa06:	78fb      	ldrb	r3, [r7, #3]
2000aa08:	f003 030f 	and.w	r3, r3, #15
2000aa0c:	68fa      	ldr	r2, [r7, #12]
2000aa0e:	fa22 f303 	lsr.w	r3, r2, r3
2000aa12:	01db      	lsls	r3, r3, #7
2000aa14:	b2db      	uxtb	r3, r3
2000aa16:	693a      	ldr	r2, [r7, #16]
2000aa18:	4313      	orrs	r3, r2
2000aa1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
2000aa1c:	78fb      	ldrb	r3, [r7, #3]
2000aa1e:	015a      	lsls	r2, r3, #5
2000aa20:	697b      	ldr	r3, [r7, #20]
2000aa22:	4413      	add	r3, r2
2000aa24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000aa28:	689b      	ldr	r3, [r3, #8]
2000aa2a:	693a      	ldr	r2, [r7, #16]
2000aa2c:	4013      	ands	r3, r2
2000aa2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
2000aa30:	68bb      	ldr	r3, [r7, #8]
}
2000aa32:	4618      	mov	r0, r3
2000aa34:	371c      	adds	r7, #28
2000aa36:	46bd      	mov	sp, r7
2000aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
2000aa3c:	4770      	bx	lr

2000aa3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
2000aa3e:	b480      	push	{r7}
2000aa40:	b083      	sub	sp, #12
2000aa42:	af00      	add	r7, sp, #0
2000aa44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
2000aa46:	687b      	ldr	r3, [r7, #4]
2000aa48:	695b      	ldr	r3, [r3, #20]
2000aa4a:	f003 0301 	and.w	r3, r3, #1
}
2000aa4e:	4618      	mov	r0, r3
2000aa50:	370c      	adds	r7, #12
2000aa52:	46bd      	mov	sp, r7
2000aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
2000aa58:	4770      	bx	lr
	...

2000aa5c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
2000aa5c:	b480      	push	{r7}
2000aa5e:	b085      	sub	sp, #20
2000aa60:	af00      	add	r7, sp, #0
2000aa62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000aa64:	687b      	ldr	r3, [r7, #4]
2000aa66:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
2000aa68:	68fb      	ldr	r3, [r7, #12]
2000aa6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000aa6e:	681a      	ldr	r2, [r3, #0]
2000aa70:	68fb      	ldr	r3, [r7, #12]
2000aa72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000aa76:	4619      	mov	r1, r3
2000aa78:	4b09      	ldr	r3, [pc, #36]	@ (2000aaa0 <USB_ActivateSetup+0x44>)
2000aa7a:	4013      	ands	r3, r2
2000aa7c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
2000aa7e:	68fb      	ldr	r3, [r7, #12]
2000aa80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000aa84:	685b      	ldr	r3, [r3, #4]
2000aa86:	68fa      	ldr	r2, [r7, #12]
2000aa88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000aa8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2000aa90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000aa92:	2300      	movs	r3, #0
}
2000aa94:	4618      	mov	r0, r3
2000aa96:	3714      	adds	r7, #20
2000aa98:	46bd      	mov	sp, r7
2000aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000aa9e:	4770      	bx	lr
2000aaa0:	fffff800 	.word	0xfffff800

2000aaa4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
2000aaa4:	b480      	push	{r7}
2000aaa6:	b087      	sub	sp, #28
2000aaa8:	af00      	add	r7, sp, #0
2000aaaa:	60f8      	str	r0, [r7, #12]
2000aaac:	460b      	mov	r3, r1
2000aaae:	607a      	str	r2, [r7, #4]
2000aab0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000aab2:	68fb      	ldr	r3, [r7, #12]
2000aab4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
2000aab6:	68fb      	ldr	r3, [r7, #12]
2000aab8:	333c      	adds	r3, #60	@ 0x3c
2000aaba:	3304      	adds	r3, #4
2000aabc:	681b      	ldr	r3, [r3, #0]
2000aabe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
2000aac0:	693b      	ldr	r3, [r7, #16]
2000aac2:	4a26      	ldr	r2, [pc, #152]	@ (2000ab5c <USB_EP0_OutStart+0xb8>)
2000aac4:	4293      	cmp	r3, r2
2000aac6:	d90a      	bls.n	2000aade <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
2000aac8:	697b      	ldr	r3, [r7, #20]
2000aaca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000aace:	681b      	ldr	r3, [r3, #0]
2000aad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000aad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000aad8:	d101      	bne.n	2000aade <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
2000aada:	2300      	movs	r3, #0
2000aadc:	e037      	b.n	2000ab4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
2000aade:	697b      	ldr	r3, [r7, #20]
2000aae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000aae4:	461a      	mov	r2, r3
2000aae6:	2300      	movs	r3, #0
2000aae8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000aaea:	697b      	ldr	r3, [r7, #20]
2000aaec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000aaf0:	691b      	ldr	r3, [r3, #16]
2000aaf2:	697a      	ldr	r2, [r7, #20]
2000aaf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000aaf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000aafc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
2000aafe:	697b      	ldr	r3, [r7, #20]
2000ab00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000ab04:	691b      	ldr	r3, [r3, #16]
2000ab06:	697a      	ldr	r2, [r7, #20]
2000ab08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000ab0c:	f043 0318 	orr.w	r3, r3, #24
2000ab10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
2000ab12:	697b      	ldr	r3, [r7, #20]
2000ab14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000ab18:	691b      	ldr	r3, [r3, #16]
2000ab1a:	697a      	ldr	r2, [r7, #20]
2000ab1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000ab20:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
2000ab24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
2000ab26:	7afb      	ldrb	r3, [r7, #11]
2000ab28:	2b01      	cmp	r3, #1
2000ab2a:	d10f      	bne.n	2000ab4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
2000ab2c:	697b      	ldr	r3, [r7, #20]
2000ab2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000ab32:	461a      	mov	r2, r3
2000ab34:	687b      	ldr	r3, [r7, #4]
2000ab36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
2000ab38:	697b      	ldr	r3, [r7, #20]
2000ab3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000ab3e:	681b      	ldr	r3, [r3, #0]
2000ab40:	697a      	ldr	r2, [r7, #20]
2000ab42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000ab46:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
2000ab4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
2000ab4c:	2300      	movs	r3, #0
}
2000ab4e:	4618      	mov	r0, r3
2000ab50:	371c      	adds	r7, #28
2000ab52:	46bd      	mov	sp, r7
2000ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ab58:	4770      	bx	lr
2000ab5a:	bf00      	nop
2000ab5c:	4f54300a 	.word	0x4f54300a

2000ab60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
2000ab60:	b480      	push	{r7}
2000ab62:	b085      	sub	sp, #20
2000ab64:	af00      	add	r7, sp, #0
2000ab66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
2000ab68:	2300      	movs	r3, #0
2000ab6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
2000ab6c:	68fb      	ldr	r3, [r7, #12]
2000ab6e:	3301      	adds	r3, #1
2000ab70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000ab72:	68fb      	ldr	r3, [r7, #12]
2000ab74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000ab78:	d901      	bls.n	2000ab7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
2000ab7a:	2303      	movs	r3, #3
2000ab7c:	e022      	b.n	2000abc4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
2000ab7e:	687b      	ldr	r3, [r7, #4]
2000ab80:	691b      	ldr	r3, [r3, #16]
2000ab82:	2b00      	cmp	r3, #0
2000ab84:	daf2      	bge.n	2000ab6c <USB_CoreReset+0xc>

  count = 10U;
2000ab86:	230a      	movs	r3, #10
2000ab88:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
2000ab8a:	e002      	b.n	2000ab92 <USB_CoreReset+0x32>
  {
    count--;
2000ab8c:	68fb      	ldr	r3, [r7, #12]
2000ab8e:	3b01      	subs	r3, #1
2000ab90:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
2000ab92:	68fb      	ldr	r3, [r7, #12]
2000ab94:	2b00      	cmp	r3, #0
2000ab96:	d1f9      	bne.n	2000ab8c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
2000ab98:	687b      	ldr	r3, [r7, #4]
2000ab9a:	691b      	ldr	r3, [r3, #16]
2000ab9c:	f043 0201 	orr.w	r2, r3, #1
2000aba0:	687b      	ldr	r3, [r7, #4]
2000aba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
2000aba4:	68fb      	ldr	r3, [r7, #12]
2000aba6:	3301      	adds	r3, #1
2000aba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000abaa:	68fb      	ldr	r3, [r7, #12]
2000abac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000abb0:	d901      	bls.n	2000abb6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
2000abb2:	2303      	movs	r3, #3
2000abb4:	e006      	b.n	2000abc4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
2000abb6:	687b      	ldr	r3, [r7, #4]
2000abb8:	691b      	ldr	r3, [r3, #16]
2000abba:	f003 0301 	and.w	r3, r3, #1
2000abbe:	2b01      	cmp	r3, #1
2000abc0:	d0f0      	beq.n	2000aba4 <USB_CoreReset+0x44>

  return HAL_OK;
2000abc2:	2300      	movs	r3, #0
}
2000abc4:	4618      	mov	r0, r3
2000abc6:	3714      	adds	r7, #20
2000abc8:	46bd      	mov	sp, r7
2000abca:	f85d 7b04 	ldr.w	r7, [sp], #4
2000abce:	4770      	bx	lr

2000abd0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000abd0:	b580      	push	{r7, lr}
2000abd2:	b084      	sub	sp, #16
2000abd4:	af00      	add	r7, sp, #0
2000abd6:	6078      	str	r0, [r7, #4]
2000abd8:	460b      	mov	r3, r1
2000abda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
2000abdc:	2054      	movs	r0, #84	@ 0x54
2000abde:	f002 fc25 	bl	2000d42c <malloc>
2000abe2:	4603      	mov	r3, r0
2000abe4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
2000abe6:	68fb      	ldr	r3, [r7, #12]
2000abe8:	2b00      	cmp	r3, #0
2000abea:	d109      	bne.n	2000ac00 <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
2000abec:	687b      	ldr	r3, [r7, #4]
2000abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000abf2:	687b      	ldr	r3, [r7, #4]
2000abf4:	32b0      	adds	r2, #176	@ 0xb0
2000abf6:	2100      	movs	r1, #0
2000abf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
2000abfc:	2302      	movs	r3, #2
2000abfe:	e08b      	b.n	2000ad18 <USBD_CUSTOM_HID_Init+0x148>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
2000ac00:	687b      	ldr	r3, [r7, #4]
2000ac02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ac06:	687b      	ldr	r3, [r7, #4]
2000ac08:	32b0      	adds	r2, #176	@ 0xb0
2000ac0a:	68f9      	ldr	r1, [r7, #12]
2000ac0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
2000ac10:	687b      	ldr	r3, [r7, #4]
2000ac12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ac16:	687b      	ldr	r3, [r7, #4]
2000ac18:	32b0      	adds	r2, #176	@ 0xb0
2000ac1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
2000ac1e:	687b      	ldr	r3, [r7, #4]
2000ac20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
2000ac24:	687b      	ldr	r3, [r7, #4]
2000ac26:	7c1b      	ldrb	r3, [r3, #16]
2000ac28:	2b00      	cmp	r3, #0
2000ac2a:	d11b      	bne.n	2000ac64 <USBD_CUSTOM_HID_Init+0x94>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
2000ac2c:	4b3c      	ldr	r3, [pc, #240]	@ (2000ad20 <USBD_CUSTOM_HID_Init+0x150>)
2000ac2e:	781b      	ldrb	r3, [r3, #0]
2000ac30:	f003 020f 	and.w	r2, r3, #15
2000ac34:	6879      	ldr	r1, [r7, #4]
2000ac36:	4613      	mov	r3, r2
2000ac38:	009b      	lsls	r3, r3, #2
2000ac3a:	4413      	add	r3, r2
2000ac3c:	009b      	lsls	r3, r3, #2
2000ac3e:	440b      	add	r3, r1
2000ac40:	331c      	adds	r3, #28
2000ac42:	2205      	movs	r2, #5
2000ac44:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
2000ac46:	4b37      	ldr	r3, [pc, #220]	@ (2000ad24 <USBD_CUSTOM_HID_Init+0x154>)
2000ac48:	781b      	ldrb	r3, [r3, #0]
2000ac4a:	f003 020f 	and.w	r2, r3, #15
2000ac4e:	6879      	ldr	r1, [r7, #4]
2000ac50:	4613      	mov	r3, r2
2000ac52:	009b      	lsls	r3, r3, #2
2000ac54:	4413      	add	r3, r2
2000ac56:	009b      	lsls	r3, r3, #2
2000ac58:	440b      	add	r3, r1
2000ac5a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000ac5e:	2205      	movs	r2, #5
2000ac60:	601a      	str	r2, [r3, #0]
2000ac62:	e01a      	b.n	2000ac9a <USBD_CUSTOM_HID_Init+0xca>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
2000ac64:	4b2e      	ldr	r3, [pc, #184]	@ (2000ad20 <USBD_CUSTOM_HID_Init+0x150>)
2000ac66:	781b      	ldrb	r3, [r3, #0]
2000ac68:	f003 020f 	and.w	r2, r3, #15
2000ac6c:	6879      	ldr	r1, [r7, #4]
2000ac6e:	4613      	mov	r3, r2
2000ac70:	009b      	lsls	r3, r3, #2
2000ac72:	4413      	add	r3, r2
2000ac74:	009b      	lsls	r3, r3, #2
2000ac76:	440b      	add	r3, r1
2000ac78:	331c      	adds	r3, #28
2000ac7a:	2205      	movs	r2, #5
2000ac7c:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
2000ac7e:	4b29      	ldr	r3, [pc, #164]	@ (2000ad24 <USBD_CUSTOM_HID_Init+0x154>)
2000ac80:	781b      	ldrb	r3, [r3, #0]
2000ac82:	f003 020f 	and.w	r2, r3, #15
2000ac86:	6879      	ldr	r1, [r7, #4]
2000ac88:	4613      	mov	r3, r2
2000ac8a:	009b      	lsls	r3, r3, #2
2000ac8c:	4413      	add	r3, r2
2000ac8e:	009b      	lsls	r3, r3, #2
2000ac90:	440b      	add	r3, r1
2000ac92:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000ac96:	2205      	movs	r2, #5
2000ac98:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
2000ac9a:	4b21      	ldr	r3, [pc, #132]	@ (2000ad20 <USBD_CUSTOM_HID_Init+0x150>)
2000ac9c:	7819      	ldrb	r1, [r3, #0]
2000ac9e:	2340      	movs	r3, #64	@ 0x40
2000aca0:	2203      	movs	r2, #3
2000aca2:	6878      	ldr	r0, [r7, #4]
2000aca4:	f002 fa1f 	bl	2000d0e6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
2000aca8:	4b1d      	ldr	r3, [pc, #116]	@ (2000ad20 <USBD_CUSTOM_HID_Init+0x150>)
2000acaa:	781b      	ldrb	r3, [r3, #0]
2000acac:	f003 020f 	and.w	r2, r3, #15
2000acb0:	6879      	ldr	r1, [r7, #4]
2000acb2:	4613      	mov	r3, r2
2000acb4:	009b      	lsls	r3, r3, #2
2000acb6:	4413      	add	r3, r2
2000acb8:	009b      	lsls	r3, r3, #2
2000acba:	440b      	add	r3, r1
2000acbc:	3323      	adds	r3, #35	@ 0x23
2000acbe:	2201      	movs	r2, #1
2000acc0:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
2000acc2:	4b18      	ldr	r3, [pc, #96]	@ (2000ad24 <USBD_CUSTOM_HID_Init+0x154>)
2000acc4:	7819      	ldrb	r1, [r3, #0]
2000acc6:	2340      	movs	r3, #64	@ 0x40
2000acc8:	2203      	movs	r2, #3
2000acca:	6878      	ldr	r0, [r7, #4]
2000accc:	f002 fa0b 	bl	2000d0e6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
2000acd0:	4b14      	ldr	r3, [pc, #80]	@ (2000ad24 <USBD_CUSTOM_HID_Init+0x154>)
2000acd2:	781b      	ldrb	r3, [r3, #0]
2000acd4:	f003 020f 	and.w	r2, r3, #15
2000acd8:	6879      	ldr	r1, [r7, #4]
2000acda:	4613      	mov	r3, r2
2000acdc:	009b      	lsls	r3, r3, #2
2000acde:	4413      	add	r3, r2
2000ace0:	009b      	lsls	r3, r3, #2
2000ace2:	440b      	add	r3, r1
2000ace4:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000ace8:	2201      	movs	r2, #1
2000acea:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
2000acec:	68fb      	ldr	r3, [r7, #12]
2000acee:	2200      	movs	r2, #0
2000acf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
2000acf4:	687b      	ldr	r3, [r7, #4]
2000acf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000acfa:	687a      	ldr	r2, [r7, #4]
2000acfc:	33b0      	adds	r3, #176	@ 0xb0
2000acfe:	009b      	lsls	r3, r3, #2
2000ad00:	4413      	add	r3, r2
2000ad02:	685b      	ldr	r3, [r3, #4]
2000ad04:	685b      	ldr	r3, [r3, #4]
2000ad06:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
2000ad08:	4b06      	ldr	r3, [pc, #24]	@ (2000ad24 <USBD_CUSTOM_HID_Init+0x154>)
2000ad0a:	7819      	ldrb	r1, [r3, #0]
2000ad0c:	68fa      	ldr	r2, [r7, #12]
2000ad0e:	2340      	movs	r3, #64	@ 0x40
2000ad10:	6878      	ldr	r0, [r7, #4]
2000ad12:	f002 fad7 	bl	2000d2c4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
2000ad16:	2300      	movs	r3, #0
}
2000ad18:	4618      	mov	r0, r3
2000ad1a:	3710      	adds	r7, #16
2000ad1c:	46bd      	mov	sp, r7
2000ad1e:	bd80      	pop	{r7, pc}
2000ad20:	2000d7ee 	.word	0x2000d7ee
2000ad24:	2000d7ef 	.word	0x2000d7ef

2000ad28 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000ad28:	b580      	push	{r7, lr}
2000ad2a:	b082      	sub	sp, #8
2000ad2c:	af00      	add	r7, sp, #0
2000ad2e:	6078      	str	r0, [r7, #4]
2000ad30:	460b      	mov	r3, r1
2000ad32:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
2000ad34:	4b37      	ldr	r3, [pc, #220]	@ (2000ae14 <USBD_CUSTOM_HID_DeInit+0xec>)
2000ad36:	781b      	ldrb	r3, [r3, #0]
2000ad38:	4619      	mov	r1, r3
2000ad3a:	6878      	ldr	r0, [r7, #4]
2000ad3c:	f002 f9f9 	bl	2000d132 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
2000ad40:	4b34      	ldr	r3, [pc, #208]	@ (2000ae14 <USBD_CUSTOM_HID_DeInit+0xec>)
2000ad42:	781b      	ldrb	r3, [r3, #0]
2000ad44:	f003 020f 	and.w	r2, r3, #15
2000ad48:	6879      	ldr	r1, [r7, #4]
2000ad4a:	4613      	mov	r3, r2
2000ad4c:	009b      	lsls	r3, r3, #2
2000ad4e:	4413      	add	r3, r2
2000ad50:	009b      	lsls	r3, r3, #2
2000ad52:	440b      	add	r3, r1
2000ad54:	3323      	adds	r3, #35	@ 0x23
2000ad56:	2200      	movs	r2, #0
2000ad58:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
2000ad5a:	4b2e      	ldr	r3, [pc, #184]	@ (2000ae14 <USBD_CUSTOM_HID_DeInit+0xec>)
2000ad5c:	781b      	ldrb	r3, [r3, #0]
2000ad5e:	f003 020f 	and.w	r2, r3, #15
2000ad62:	6879      	ldr	r1, [r7, #4]
2000ad64:	4613      	mov	r3, r2
2000ad66:	009b      	lsls	r3, r3, #2
2000ad68:	4413      	add	r3, r2
2000ad6a:	009b      	lsls	r3, r3, #2
2000ad6c:	440b      	add	r3, r1
2000ad6e:	331c      	adds	r3, #28
2000ad70:	2200      	movs	r2, #0
2000ad72:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
2000ad74:	4b28      	ldr	r3, [pc, #160]	@ (2000ae18 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000ad76:	781b      	ldrb	r3, [r3, #0]
2000ad78:	4619      	mov	r1, r3
2000ad7a:	6878      	ldr	r0, [r7, #4]
2000ad7c:	f002 f9d9 	bl	2000d132 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
2000ad80:	4b25      	ldr	r3, [pc, #148]	@ (2000ae18 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000ad82:	781b      	ldrb	r3, [r3, #0]
2000ad84:	f003 020f 	and.w	r2, r3, #15
2000ad88:	6879      	ldr	r1, [r7, #4]
2000ad8a:	4613      	mov	r3, r2
2000ad8c:	009b      	lsls	r3, r3, #2
2000ad8e:	4413      	add	r3, r2
2000ad90:	009b      	lsls	r3, r3, #2
2000ad92:	440b      	add	r3, r1
2000ad94:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000ad98:	2200      	movs	r2, #0
2000ad9a:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
2000ad9c:	4b1e      	ldr	r3, [pc, #120]	@ (2000ae18 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000ad9e:	781b      	ldrb	r3, [r3, #0]
2000ada0:	f003 020f 	and.w	r2, r3, #15
2000ada4:	6879      	ldr	r1, [r7, #4]
2000ada6:	4613      	mov	r3, r2
2000ada8:	009b      	lsls	r3, r3, #2
2000adaa:	4413      	add	r3, r2
2000adac:	009b      	lsls	r3, r3, #2
2000adae:	440b      	add	r3, r1
2000adb0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000adb4:	2200      	movs	r2, #0
2000adb6:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
2000adb8:	687b      	ldr	r3, [r7, #4]
2000adba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000adbe:	687b      	ldr	r3, [r7, #4]
2000adc0:	32b0      	adds	r2, #176	@ 0xb0
2000adc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000adc6:	2b00      	cmp	r3, #0
2000adc8:	d01f      	beq.n	2000ae0a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
2000adca:	687b      	ldr	r3, [r7, #4]
2000adcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000add0:	687a      	ldr	r2, [r7, #4]
2000add2:	33b0      	adds	r3, #176	@ 0xb0
2000add4:	009b      	lsls	r3, r3, #2
2000add6:	4413      	add	r3, r2
2000add8:	685b      	ldr	r3, [r3, #4]
2000adda:	689b      	ldr	r3, [r3, #8]
2000addc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
2000adde:	687b      	ldr	r3, [r7, #4]
2000ade0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ade4:	687b      	ldr	r3, [r7, #4]
2000ade6:	32b0      	adds	r2, #176	@ 0xb0
2000ade8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000adec:	4618      	mov	r0, r3
2000adee:	f002 fb25 	bl	2000d43c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
2000adf2:	687b      	ldr	r3, [r7, #4]
2000adf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000adf8:	687b      	ldr	r3, [r7, #4]
2000adfa:	32b0      	adds	r2, #176	@ 0xb0
2000adfc:	2100      	movs	r1, #0
2000adfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
2000ae02:	687b      	ldr	r3, [r7, #4]
2000ae04:	2200      	movs	r2, #0
2000ae06:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
2000ae0a:	2300      	movs	r3, #0
}
2000ae0c:	4618      	mov	r0, r3
2000ae0e:	3708      	adds	r7, #8
2000ae10:	46bd      	mov	sp, r7
2000ae12:	bd80      	pop	{r7, pc}
2000ae14:	2000d7ee 	.word	0x2000d7ee
2000ae18:	2000d7ef 	.word	0x2000d7ef

2000ae1c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
2000ae1c:	b580      	push	{r7, lr}
2000ae1e:	b088      	sub	sp, #32
2000ae20:	af00      	add	r7, sp, #0
2000ae22:	6078      	str	r0, [r7, #4]
2000ae24:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000ae26:	687b      	ldr	r3, [r7, #4]
2000ae28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ae2c:	687b      	ldr	r3, [r7, #4]
2000ae2e:	32b0      	adds	r2, #176	@ 0xb0
2000ae30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ae34:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
2000ae36:	2300      	movs	r3, #0
2000ae38:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
2000ae3a:	2300      	movs	r3, #0
2000ae3c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
2000ae3e:	2300      	movs	r3, #0
2000ae40:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
2000ae42:	2300      	movs	r3, #0
2000ae44:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
2000ae46:	693b      	ldr	r3, [r7, #16]
2000ae48:	2b00      	cmp	r3, #0
2000ae4a:	d101      	bne.n	2000ae50 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
2000ae4c:	2303      	movs	r3, #3
2000ae4e:	e108      	b.n	2000b062 <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000ae50:	683b      	ldr	r3, [r7, #0]
2000ae52:	781b      	ldrb	r3, [r3, #0]
2000ae54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000ae58:	2b00      	cmp	r3, #0
2000ae5a:	d05c      	beq.n	2000af16 <USBD_CUSTOM_HID_Setup+0xfa>
2000ae5c:	2b20      	cmp	r3, #32
2000ae5e:	f040 80f8 	bne.w	2000b052 <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
2000ae62:	683b      	ldr	r3, [r7, #0]
2000ae64:	785b      	ldrb	r3, [r3, #1]
2000ae66:	3b02      	subs	r3, #2
2000ae68:	2b09      	cmp	r3, #9
2000ae6a:	d84c      	bhi.n	2000af06 <USBD_CUSTOM_HID_Setup+0xea>
2000ae6c:	a201      	add	r2, pc, #4	@ (adr r2, 2000ae74 <USBD_CUSTOM_HID_Setup+0x58>)
2000ae6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000ae72:	bf00      	nop
2000ae74:	2000aecd 	.word	0x2000aecd
2000ae78:	2000aeab 	.word	0x2000aeab
2000ae7c:	2000af07 	.word	0x2000af07
2000ae80:	2000af07 	.word	0x2000af07
2000ae84:	2000af07 	.word	0x2000af07
2000ae88:	2000af07 	.word	0x2000af07
2000ae8c:	2000af07 	.word	0x2000af07
2000ae90:	2000aedd 	.word	0x2000aedd
2000ae94:	2000aebb 	.word	0x2000aebb
2000ae98:	2000ae9d 	.word	0x2000ae9d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
2000ae9c:	683b      	ldr	r3, [r7, #0]
2000ae9e:	885b      	ldrh	r3, [r3, #2]
2000aea0:	b2db      	uxtb	r3, r3
2000aea2:	461a      	mov	r2, r3
2000aea4:	693b      	ldr	r3, [r7, #16]
2000aea6:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
2000aea8:	e034      	b.n	2000af14 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
2000aeaa:	693b      	ldr	r3, [r7, #16]
2000aeac:	3340      	adds	r3, #64	@ 0x40
2000aeae:	2201      	movs	r2, #1
2000aeb0:	4619      	mov	r1, r3
2000aeb2:	6878      	ldr	r0, [r7, #4]
2000aeb4:	f001 fd3a 	bl	2000c92c <USBD_CtlSendData>
          break;
2000aeb8:	e02c      	b.n	2000af14 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
2000aeba:	683b      	ldr	r3, [r7, #0]
2000aebc:	885b      	ldrh	r3, [r3, #2]
2000aebe:	0a1b      	lsrs	r3, r3, #8
2000aec0:	b29b      	uxth	r3, r3
2000aec2:	b2db      	uxtb	r3, r3
2000aec4:	461a      	mov	r2, r3
2000aec6:	693b      	ldr	r3, [r7, #16]
2000aec8:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
2000aeca:	e023      	b.n	2000af14 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
2000aecc:	693b      	ldr	r3, [r7, #16]
2000aece:	3344      	adds	r3, #68	@ 0x44
2000aed0:	2201      	movs	r2, #1
2000aed2:	4619      	mov	r1, r3
2000aed4:	6878      	ldr	r0, [r7, #4]
2000aed6:	f001 fd29 	bl	2000c92c <USBD_CtlSendData>
          break;
2000aeda:	e01b      	b.n	2000af14 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
2000aedc:	683b      	ldr	r3, [r7, #0]
2000aede:	88db      	ldrh	r3, [r3, #6]
2000aee0:	2b40      	cmp	r3, #64	@ 0x40
2000aee2:	d905      	bls.n	2000aef0 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
2000aee4:	6839      	ldr	r1, [r7, #0]
2000aee6:	6878      	ldr	r0, [r7, #4]
2000aee8:	f001 fca3 	bl	2000c832 <USBD_CtlError>
            return USBD_FAIL;
2000aeec:	2303      	movs	r3, #3
2000aeee:	e0b8      	b.n	2000b062 <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
2000aef0:	693b      	ldr	r3, [r7, #16]
2000aef2:	2201      	movs	r2, #1
2000aef4:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
2000aef6:	6939      	ldr	r1, [r7, #16]
2000aef8:	683b      	ldr	r3, [r7, #0]
2000aefa:	88db      	ldrh	r3, [r3, #6]
2000aefc:	461a      	mov	r2, r3
2000aefe:	6878      	ldr	r0, [r7, #4]
2000af00:	f001 fd43 	bl	2000c98a <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
2000af04:	e006      	b.n	2000af14 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
2000af06:	6839      	ldr	r1, [r7, #0]
2000af08:	6878      	ldr	r0, [r7, #4]
2000af0a:	f001 fc92 	bl	2000c832 <USBD_CtlError>
          ret = USBD_FAIL;
2000af0e:	2303      	movs	r3, #3
2000af10:	75fb      	strb	r3, [r7, #23]
          break;
2000af12:	bf00      	nop
      }
      break;
2000af14:	e0a4      	b.n	2000b060 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000af16:	683b      	ldr	r3, [r7, #0]
2000af18:	785b      	ldrb	r3, [r3, #1]
2000af1a:	2b0b      	cmp	r3, #11
2000af1c:	f200 8090 	bhi.w	2000b040 <USBD_CUSTOM_HID_Setup+0x224>
2000af20:	a201      	add	r2, pc, #4	@ (adr r2, 2000af28 <USBD_CUSTOM_HID_Setup+0x10c>)
2000af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000af26:	bf00      	nop
2000af28:	2000af59 	.word	0x2000af59
2000af2c:	2000b04f 	.word	0x2000b04f
2000af30:	2000b041 	.word	0x2000b041
2000af34:	2000b041 	.word	0x2000b041
2000af38:	2000b041 	.word	0x2000b041
2000af3c:	2000b041 	.word	0x2000b041
2000af40:	2000af83 	.word	0x2000af83
2000af44:	2000b041 	.word	0x2000b041
2000af48:	2000b041 	.word	0x2000b041
2000af4c:	2000b041 	.word	0x2000b041
2000af50:	2000afef 	.word	0x2000afef
2000af54:	2000b019 	.word	0x2000b019
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000af58:	687b      	ldr	r3, [r7, #4]
2000af5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000af5e:	b2db      	uxtb	r3, r3
2000af60:	2b03      	cmp	r3, #3
2000af62:	d107      	bne.n	2000af74 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
2000af64:	f107 030e 	add.w	r3, r7, #14
2000af68:	2202      	movs	r2, #2
2000af6a:	4619      	mov	r1, r3
2000af6c:	6878      	ldr	r0, [r7, #4]
2000af6e:	f001 fcdd 	bl	2000c92c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000af72:	e06d      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000af74:	6839      	ldr	r1, [r7, #0]
2000af76:	6878      	ldr	r0, [r7, #4]
2000af78:	f001 fc5b 	bl	2000c832 <USBD_CtlError>
            ret = USBD_FAIL;
2000af7c:	2303      	movs	r3, #3
2000af7e:	75fb      	strb	r3, [r7, #23]
          break;
2000af80:	e066      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
2000af82:	683b      	ldr	r3, [r7, #0]
2000af84:	885b      	ldrh	r3, [r3, #2]
2000af86:	0a1b      	lsrs	r3, r3, #8
2000af88:	b29b      	uxth	r3, r3
2000af8a:	2b22      	cmp	r3, #34	@ 0x22
2000af8c:	d110      	bne.n	2000afb0 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
2000af8e:	683b      	ldr	r3, [r7, #0]
2000af90:	88db      	ldrh	r3, [r3, #6]
2000af92:	2b40      	cmp	r3, #64	@ 0x40
2000af94:	bf28      	it	cs
2000af96:	2340      	movcs	r3, #64	@ 0x40
2000af98:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
2000af9a:	687b      	ldr	r3, [r7, #4]
2000af9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000afa0:	687a      	ldr	r2, [r7, #4]
2000afa2:	33b0      	adds	r3, #176	@ 0xb0
2000afa4:	009b      	lsls	r3, r3, #2
2000afa6:	4413      	add	r3, r2
2000afa8:	685b      	ldr	r3, [r3, #4]
2000afaa:	681b      	ldr	r3, [r3, #0]
2000afac:	61bb      	str	r3, [r7, #24]
2000afae:	e00d      	b.n	2000afcc <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
2000afb0:	683b      	ldr	r3, [r7, #0]
2000afb2:	885b      	ldrh	r3, [r3, #2]
2000afb4:	0a1b      	lsrs	r3, r3, #8
2000afb6:	b29b      	uxth	r3, r3
2000afb8:	2b21      	cmp	r3, #33	@ 0x21
2000afba:	d107      	bne.n	2000afcc <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
2000afbc:	4b2b      	ldr	r3, [pc, #172]	@ (2000b06c <USBD_CUSTOM_HID_Setup+0x250>)
2000afbe:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
2000afc0:	683b      	ldr	r3, [r7, #0]
2000afc2:	88db      	ldrh	r3, [r3, #6]
2000afc4:	2b09      	cmp	r3, #9
2000afc6:	bf28      	it	cs
2000afc8:	2309      	movcs	r3, #9
2000afca:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
2000afcc:	69bb      	ldr	r3, [r7, #24]
2000afce:	2b00      	cmp	r3, #0
2000afd0:	d006      	beq.n	2000afe0 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
2000afd2:	8bfb      	ldrh	r3, [r7, #30]
2000afd4:	461a      	mov	r2, r3
2000afd6:	69b9      	ldr	r1, [r7, #24]
2000afd8:	6878      	ldr	r0, [r7, #4]
2000afda:	f001 fca7 	bl	2000c92c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000afde:	e037      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000afe0:	6839      	ldr	r1, [r7, #0]
2000afe2:	6878      	ldr	r0, [r7, #4]
2000afe4:	f001 fc25 	bl	2000c832 <USBD_CtlError>
            ret = USBD_FAIL;
2000afe8:	2303      	movs	r3, #3
2000afea:	75fb      	strb	r3, [r7, #23]
          break;
2000afec:	e030      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000afee:	687b      	ldr	r3, [r7, #4]
2000aff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000aff4:	b2db      	uxtb	r3, r3
2000aff6:	2b03      	cmp	r3, #3
2000aff8:	d107      	bne.n	2000b00a <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
2000affa:	693b      	ldr	r3, [r7, #16]
2000affc:	3348      	adds	r3, #72	@ 0x48
2000affe:	2201      	movs	r2, #1
2000b000:	4619      	mov	r1, r3
2000b002:	6878      	ldr	r0, [r7, #4]
2000b004:	f001 fc92 	bl	2000c92c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000b008:	e022      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000b00a:	6839      	ldr	r1, [r7, #0]
2000b00c:	6878      	ldr	r0, [r7, #4]
2000b00e:	f001 fc10 	bl	2000c832 <USBD_CtlError>
            ret = USBD_FAIL;
2000b012:	2303      	movs	r3, #3
2000b014:	75fb      	strb	r3, [r7, #23]
          break;
2000b016:	e01b      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b018:	687b      	ldr	r3, [r7, #4]
2000b01a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b01e:	b2db      	uxtb	r3, r3
2000b020:	2b03      	cmp	r3, #3
2000b022:	d106      	bne.n	2000b032 <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
2000b024:	683b      	ldr	r3, [r7, #0]
2000b026:	885b      	ldrh	r3, [r3, #2]
2000b028:	b2db      	uxtb	r3, r3
2000b02a:	461a      	mov	r2, r3
2000b02c:	693b      	ldr	r3, [r7, #16]
2000b02e:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000b030:	e00e      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000b032:	6839      	ldr	r1, [r7, #0]
2000b034:	6878      	ldr	r0, [r7, #4]
2000b036:	f001 fbfc 	bl	2000c832 <USBD_CtlError>
            ret = USBD_FAIL;
2000b03a:	2303      	movs	r3, #3
2000b03c:	75fb      	strb	r3, [r7, #23]
          break;
2000b03e:	e007      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
2000b040:	6839      	ldr	r1, [r7, #0]
2000b042:	6878      	ldr	r0, [r7, #4]
2000b044:	f001 fbf5 	bl	2000c832 <USBD_CtlError>
          ret = USBD_FAIL;
2000b048:	2303      	movs	r3, #3
2000b04a:	75fb      	strb	r3, [r7, #23]
          break;
2000b04c:	e000      	b.n	2000b050 <USBD_CUSTOM_HID_Setup+0x234>
          break;
2000b04e:	bf00      	nop
      }
      break;
2000b050:	e006      	b.n	2000b060 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
2000b052:	6839      	ldr	r1, [r7, #0]
2000b054:	6878      	ldr	r0, [r7, #4]
2000b056:	f001 fbec 	bl	2000c832 <USBD_CtlError>
      ret = USBD_FAIL;
2000b05a:	2303      	movs	r3, #3
2000b05c:	75fb      	strb	r3, [r7, #23]
      break;
2000b05e:	bf00      	nop
  }
  return (uint8_t)ret;
2000b060:	7dfb      	ldrb	r3, [r7, #23]
}
2000b062:	4618      	mov	r0, r3
2000b064:	3720      	adds	r7, #32
2000b066:	46bd      	mov	sp, r7
2000b068:	bd80      	pop	{r7, pc}
2000b06a:	bf00      	nop
2000b06c:	2000d7d8 	.word	0x2000d7d8

2000b070 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
2000b070:	b580      	push	{r7, lr}
2000b072:	b086      	sub	sp, #24
2000b074:	af00      	add	r7, sp, #0
2000b076:	60f8      	str	r0, [r7, #12]
2000b078:	60b9      	str	r1, [r7, #8]
2000b07a:	4613      	mov	r3, r2
2000b07c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000b07e:	68fb      	ldr	r3, [r7, #12]
2000b080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b084:	68fb      	ldr	r3, [r7, #12]
2000b086:	32b0      	adds	r2, #176	@ 0xb0
2000b088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b08c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
2000b08e:	697b      	ldr	r3, [r7, #20]
2000b090:	2b00      	cmp	r3, #0
2000b092:	d101      	bne.n	2000b098 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
2000b094:	2303      	movs	r3, #3
2000b096:	e019      	b.n	2000b0cc <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b098:	68fb      	ldr	r3, [r7, #12]
2000b09a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b09e:	b2db      	uxtb	r3, r3
2000b0a0:	2b03      	cmp	r3, #3
2000b0a2:	d112      	bne.n	2000b0ca <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
2000b0a4:	697b      	ldr	r3, [r7, #20]
2000b0a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
2000b0aa:	2b00      	cmp	r3, #0
2000b0ac:	d10b      	bne.n	2000b0c6 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
2000b0ae:	697b      	ldr	r3, [r7, #20]
2000b0b0:	2201      	movs	r2, #1
2000b0b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
2000b0b6:	4b07      	ldr	r3, [pc, #28]	@ (2000b0d4 <USBD_CUSTOM_HID_SendReport+0x64>)
2000b0b8:	7819      	ldrb	r1, [r3, #0]
2000b0ba:	88fb      	ldrh	r3, [r7, #6]
2000b0bc:	68ba      	ldr	r2, [r7, #8]
2000b0be:	68f8      	ldr	r0, [r7, #12]
2000b0c0:	f002 f8df 	bl	2000d282 <USBD_LL_Transmit>
2000b0c4:	e001      	b.n	2000b0ca <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
2000b0c6:	2301      	movs	r3, #1
2000b0c8:	e000      	b.n	2000b0cc <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
2000b0ca:	2300      	movs	r3, #0
}
2000b0cc:	4618      	mov	r0, r3
2000b0ce:	3718      	adds	r7, #24
2000b0d0:	46bd      	mov	sp, r7
2000b0d2:	bd80      	pop	{r7, pc}
2000b0d4:	2000d7ee 	.word	0x2000d7ee

2000b0d8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
2000b0d8:	b580      	push	{r7, lr}
2000b0da:	b084      	sub	sp, #16
2000b0dc:	af00      	add	r7, sp, #0
2000b0de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
2000b0e0:	2181      	movs	r1, #129	@ 0x81
2000b0e2:	4815      	ldr	r0, [pc, #84]	@ (2000b138 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
2000b0e4:	f000 fd44 	bl	2000bb70 <USBD_GetEpDesc>
2000b0e8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
2000b0ea:	2101      	movs	r1, #1
2000b0ec:	4812      	ldr	r0, [pc, #72]	@ (2000b138 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
2000b0ee:	f000 fd3f 	bl	2000bb70 <USBD_GetEpDesc>
2000b0f2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
2000b0f4:	68fb      	ldr	r3, [r7, #12]
2000b0f6:	2b00      	cmp	r3, #0
2000b0f8:	d009      	beq.n	2000b10e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
2000b0fa:	68fb      	ldr	r3, [r7, #12]
2000b0fc:	2200      	movs	r2, #0
2000b0fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000b102:	711a      	strb	r2, [r3, #4]
2000b104:	2200      	movs	r2, #0
2000b106:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000b108:	68fb      	ldr	r3, [r7, #12]
2000b10a:	2205      	movs	r2, #5
2000b10c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
2000b10e:	68bb      	ldr	r3, [r7, #8]
2000b110:	2b00      	cmp	r3, #0
2000b112:	d009      	beq.n	2000b128 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
2000b114:	68bb      	ldr	r3, [r7, #8]
2000b116:	2200      	movs	r2, #0
2000b118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000b11c:	711a      	strb	r2, [r3, #4]
2000b11e:	2200      	movs	r2, #0
2000b120:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000b122:	68bb      	ldr	r3, [r7, #8]
2000b124:	2205      	movs	r2, #5
2000b126:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
2000b128:	687b      	ldr	r3, [r7, #4]
2000b12a:	2229      	movs	r2, #41	@ 0x29
2000b12c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
2000b12e:	4b02      	ldr	r3, [pc, #8]	@ (2000b138 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
2000b130:	4618      	mov	r0, r3
2000b132:	3710      	adds	r7, #16
2000b134:	46bd      	mov	sp, r7
2000b136:	bd80      	pop	{r7, pc}
2000b138:	2000d7ac 	.word	0x2000d7ac

2000b13c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
2000b13c:	b580      	push	{r7, lr}
2000b13e:	b084      	sub	sp, #16
2000b140:	af00      	add	r7, sp, #0
2000b142:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
2000b144:	2181      	movs	r1, #129	@ 0x81
2000b146:	4815      	ldr	r0, [pc, #84]	@ (2000b19c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
2000b148:	f000 fd12 	bl	2000bb70 <USBD_GetEpDesc>
2000b14c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
2000b14e:	2101      	movs	r1, #1
2000b150:	4812      	ldr	r0, [pc, #72]	@ (2000b19c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
2000b152:	f000 fd0d 	bl	2000bb70 <USBD_GetEpDesc>
2000b156:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
2000b158:	68fb      	ldr	r3, [r7, #12]
2000b15a:	2b00      	cmp	r3, #0
2000b15c:	d009      	beq.n	2000b172 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
2000b15e:	68fb      	ldr	r3, [r7, #12]
2000b160:	2200      	movs	r2, #0
2000b162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000b166:	711a      	strb	r2, [r3, #4]
2000b168:	2200      	movs	r2, #0
2000b16a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
2000b16c:	68fb      	ldr	r3, [r7, #12]
2000b16e:	2205      	movs	r2, #5
2000b170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
2000b172:	68bb      	ldr	r3, [r7, #8]
2000b174:	2b00      	cmp	r3, #0
2000b176:	d009      	beq.n	2000b18c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
2000b178:	68bb      	ldr	r3, [r7, #8]
2000b17a:	2200      	movs	r2, #0
2000b17c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000b180:	711a      	strb	r2, [r3, #4]
2000b182:	2200      	movs	r2, #0
2000b184:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
2000b186:	68bb      	ldr	r3, [r7, #8]
2000b188:	2205      	movs	r2, #5
2000b18a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
2000b18c:	687b      	ldr	r3, [r7, #4]
2000b18e:	2229      	movs	r2, #41	@ 0x29
2000b190:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
2000b192:	4b02      	ldr	r3, [pc, #8]	@ (2000b19c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
2000b194:	4618      	mov	r0, r3
2000b196:	3710      	adds	r7, #16
2000b198:	46bd      	mov	sp, r7
2000b19a:	bd80      	pop	{r7, pc}
2000b19c:	2000d7ac 	.word	0x2000d7ac

2000b1a0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
2000b1a0:	b580      	push	{r7, lr}
2000b1a2:	b084      	sub	sp, #16
2000b1a4:	af00      	add	r7, sp, #0
2000b1a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
2000b1a8:	2181      	movs	r1, #129	@ 0x81
2000b1aa:	4815      	ldr	r0, [pc, #84]	@ (2000b200 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
2000b1ac:	f000 fce0 	bl	2000bb70 <USBD_GetEpDesc>
2000b1b0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
2000b1b2:	2101      	movs	r1, #1
2000b1b4:	4812      	ldr	r0, [pc, #72]	@ (2000b200 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
2000b1b6:	f000 fcdb 	bl	2000bb70 <USBD_GetEpDesc>
2000b1ba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
2000b1bc:	68fb      	ldr	r3, [r7, #12]
2000b1be:	2b00      	cmp	r3, #0
2000b1c0:	d009      	beq.n	2000b1d6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
2000b1c2:	68fb      	ldr	r3, [r7, #12]
2000b1c4:	2200      	movs	r2, #0
2000b1c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000b1ca:	711a      	strb	r2, [r3, #4]
2000b1cc:	2200      	movs	r2, #0
2000b1ce:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000b1d0:	68fb      	ldr	r3, [r7, #12]
2000b1d2:	2205      	movs	r2, #5
2000b1d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
2000b1d6:	68bb      	ldr	r3, [r7, #8]
2000b1d8:	2b00      	cmp	r3, #0
2000b1da:	d009      	beq.n	2000b1f0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
2000b1dc:	68bb      	ldr	r3, [r7, #8]
2000b1de:	2200      	movs	r2, #0
2000b1e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000b1e4:	711a      	strb	r2, [r3, #4]
2000b1e6:	2200      	movs	r2, #0
2000b1e8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000b1ea:	68bb      	ldr	r3, [r7, #8]
2000b1ec:	2205      	movs	r2, #5
2000b1ee:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
2000b1f0:	687b      	ldr	r3, [r7, #4]
2000b1f2:	2229      	movs	r2, #41	@ 0x29
2000b1f4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
2000b1f6:	4b02      	ldr	r3, [pc, #8]	@ (2000b200 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
2000b1f8:	4618      	mov	r0, r3
2000b1fa:	3710      	adds	r7, #16
2000b1fc:	46bd      	mov	sp, r7
2000b1fe:	bd80      	pop	{r7, pc}
2000b200:	2000d7ac 	.word	0x2000d7ac

2000b204 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
2000b204:	b480      	push	{r7}
2000b206:	b083      	sub	sp, #12
2000b208:	af00      	add	r7, sp, #0
2000b20a:	6078      	str	r0, [r7, #4]
2000b20c:	460b      	mov	r3, r1
2000b20e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
2000b210:	687b      	ldr	r3, [r7, #4]
2000b212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b216:	687b      	ldr	r3, [r7, #4]
2000b218:	32b0      	adds	r2, #176	@ 0xb0
2000b21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b21e:	2200      	movs	r2, #0
2000b220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
2000b224:	2300      	movs	r3, #0
}
2000b226:	4618      	mov	r0, r3
2000b228:	370c      	adds	r7, #12
2000b22a:	46bd      	mov	sp, r7
2000b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b230:	4770      	bx	lr

2000b232 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
2000b232:	b580      	push	{r7, lr}
2000b234:	b084      	sub	sp, #16
2000b236:	af00      	add	r7, sp, #0
2000b238:	6078      	str	r0, [r7, #4]
2000b23a:	460b      	mov	r3, r1
2000b23c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
2000b23e:	687b      	ldr	r3, [r7, #4]
2000b240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b244:	687b      	ldr	r3, [r7, #4]
2000b246:	32b0      	adds	r2, #176	@ 0xb0
2000b248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b24c:	2b00      	cmp	r3, #0
2000b24e:	d101      	bne.n	2000b254 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
2000b250:	2303      	movs	r3, #3
2000b252:	e017      	b.n	2000b284 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000b254:	687b      	ldr	r3, [r7, #4]
2000b256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b25a:	687b      	ldr	r3, [r7, #4]
2000b25c:	32b0      	adds	r2, #176	@ 0xb0
2000b25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b262:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
2000b264:	687b      	ldr	r3, [r7, #4]
2000b266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000b26a:	687a      	ldr	r2, [r7, #4]
2000b26c:	33b0      	adds	r3, #176	@ 0xb0
2000b26e:	009b      	lsls	r3, r3, #2
2000b270:	4413      	add	r3, r2
2000b272:	685b      	ldr	r3, [r3, #4]
2000b274:	68db      	ldr	r3, [r3, #12]
2000b276:	68fa      	ldr	r2, [r7, #12]
2000b278:	7810      	ldrb	r0, [r2, #0]
2000b27a:	68fa      	ldr	r2, [r7, #12]
2000b27c:	7852      	ldrb	r2, [r2, #1]
2000b27e:	4611      	mov	r1, r2
2000b280:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
2000b282:	2300      	movs	r3, #0
}
2000b284:	4618      	mov	r0, r3
2000b286:	3710      	adds	r7, #16
2000b288:	46bd      	mov	sp, r7
2000b28a:	bd80      	pop	{r7, pc}

2000b28c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
2000b28c:	b580      	push	{r7, lr}
2000b28e:	b084      	sub	sp, #16
2000b290:	af00      	add	r7, sp, #0
2000b292:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;
  uint8_t len;

  len = USBD_LL_GetRxDataSize(pdev, CUSTOMHIDOutEpAdd);
2000b294:	4b17      	ldr	r3, [pc, #92]	@ (2000b2f4 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
2000b296:	781b      	ldrb	r3, [r3, #0]
2000b298:	4619      	mov	r1, r3
2000b29a:	6878      	ldr	r0, [r7, #4]
2000b29c:	f002 f833 	bl	2000d306 <USBD_LL_GetRxDataSize>
2000b2a0:	4603      	mov	r3, r0
2000b2a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
2000b2a4:	687b      	ldr	r3, [r7, #4]
2000b2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b2aa:	687b      	ldr	r3, [r7, #4]
2000b2ac:	32b0      	adds	r2, #176	@ 0xb0
2000b2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b2b2:	2b00      	cmp	r3, #0
2000b2b4:	d101      	bne.n	2000b2ba <USBD_CUSTOM_HID_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
2000b2b6:	2303      	movs	r3, #3
2000b2b8:	e018      	b.n	2000b2ec <USBD_CUSTOM_HID_ReceivePacket+0x60>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000b2ba:	687b      	ldr	r3, [r7, #4]
2000b2bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b2c0:	687b      	ldr	r3, [r7, #4]
2000b2c2:	32b0      	adds	r2, #176	@ 0xb0
2000b2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b2c8:	60bb      	str	r3, [r7, #8]

  memcpy(rdBuff, hhid->Report_buf, len);
2000b2ca:	68bb      	ldr	r3, [r7, #8]
2000b2cc:	7bfa      	ldrb	r2, [r7, #15]
2000b2ce:	4619      	mov	r1, r3
2000b2d0:	4809      	ldr	r0, [pc, #36]	@ (2000b2f8 <USBD_CUSTOM_HID_ReceivePacket+0x6c>)
2000b2d2:	f002 f9ad 	bl	2000d630 <memcpy>
  msgAvailable = 1;
2000b2d6:	4b09      	ldr	r3, [pc, #36]	@ (2000b2fc <USBD_CUSTOM_HID_ReceivePacket+0x70>)
2000b2d8:	2201      	movs	r2, #1
2000b2da:	601a      	str	r2, [r3, #0]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
2000b2dc:	4b05      	ldr	r3, [pc, #20]	@ (2000b2f4 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
2000b2de:	7819      	ldrb	r1, [r3, #0]
2000b2e0:	68ba      	ldr	r2, [r7, #8]
2000b2e2:	2340      	movs	r3, #64	@ 0x40
2000b2e4:	6878      	ldr	r0, [r7, #4]
2000b2e6:	f001 ffed 	bl	2000d2c4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);



  return (uint8_t)USBD_OK;
2000b2ea:	2300      	movs	r3, #0
}
2000b2ec:	4618      	mov	r0, r3
2000b2ee:	3710      	adds	r7, #16
2000b2f0:	46bd      	mov	sp, r7
2000b2f2:	bd80      	pop	{r7, pc}
2000b2f4:	2000d7ef 	.word	0x2000d7ef
2000b2f8:	2000ed60 	.word	0x2000ed60
2000b2fc:	2000ede4 	.word	0x2000ede4

2000b300 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
2000b300:	b580      	push	{r7, lr}
2000b302:	b084      	sub	sp, #16
2000b304:	af00      	add	r7, sp, #0
2000b306:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000b308:	687b      	ldr	r3, [r7, #4]
2000b30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b30e:	687b      	ldr	r3, [r7, #4]
2000b310:	32b0      	adds	r2, #176	@ 0xb0
2000b312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b316:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
2000b318:	68fb      	ldr	r3, [r7, #12]
2000b31a:	2b00      	cmp	r3, #0
2000b31c:	d101      	bne.n	2000b322 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
2000b31e:	2303      	movs	r3, #3
2000b320:	e016      	b.n	2000b350 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
2000b322:	68fb      	ldr	r3, [r7, #12]
2000b324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000b326:	2b01      	cmp	r3, #1
2000b328:	d111      	bne.n	2000b34e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
2000b32a:	687b      	ldr	r3, [r7, #4]
2000b32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000b330:	687a      	ldr	r2, [r7, #4]
2000b332:	33b0      	adds	r3, #176	@ 0xb0
2000b334:	009b      	lsls	r3, r3, #2
2000b336:	4413      	add	r3, r2
2000b338:	685b      	ldr	r3, [r3, #4]
2000b33a:	68db      	ldr	r3, [r3, #12]
2000b33c:	68fa      	ldr	r2, [r7, #12]
2000b33e:	7810      	ldrb	r0, [r2, #0]
2000b340:	68fa      	ldr	r2, [r7, #12]
2000b342:	7852      	ldrb	r2, [r2, #1]
2000b344:	4611      	mov	r1, r2
2000b346:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
2000b348:	68fb      	ldr	r3, [r7, #12]
2000b34a:	2200      	movs	r2, #0
2000b34c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
2000b34e:	2300      	movs	r3, #0
}
2000b350:	4618      	mov	r0, r3
2000b352:	3710      	adds	r7, #16
2000b354:	46bd      	mov	sp, r7
2000b356:	bd80      	pop	{r7, pc}

2000b358 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
2000b358:	b480      	push	{r7}
2000b35a:	b083      	sub	sp, #12
2000b35c:	af00      	add	r7, sp, #0
2000b35e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
2000b360:	687b      	ldr	r3, [r7, #4]
2000b362:	220a      	movs	r2, #10
2000b364:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
2000b366:	4b03      	ldr	r3, [pc, #12]	@ (2000b374 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
2000b368:	4618      	mov	r0, r3
2000b36a:	370c      	adds	r7, #12
2000b36c:	46bd      	mov	sp, r7
2000b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b372:	4770      	bx	lr
2000b374:	2000d7e4 	.word	0x2000d7e4

2000b378 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
2000b378:	b480      	push	{r7}
2000b37a:	b083      	sub	sp, #12
2000b37c:	af00      	add	r7, sp, #0
2000b37e:	6078      	str	r0, [r7, #4]
2000b380:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
2000b382:	683b      	ldr	r3, [r7, #0]
2000b384:	2b00      	cmp	r3, #0
2000b386:	d101      	bne.n	2000b38c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
2000b388:	2303      	movs	r3, #3
2000b38a:	e009      	b.n	2000b3a0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
2000b38c:	687b      	ldr	r3, [r7, #4]
2000b38e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000b392:	687a      	ldr	r2, [r7, #4]
2000b394:	33b0      	adds	r3, #176	@ 0xb0
2000b396:	009b      	lsls	r3, r3, #2
2000b398:	4413      	add	r3, r2
2000b39a:	683a      	ldr	r2, [r7, #0]
2000b39c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
2000b39e:	2300      	movs	r3, #0
}
2000b3a0:	4618      	mov	r0, r3
2000b3a2:	370c      	adds	r7, #12
2000b3a4:	46bd      	mov	sp, r7
2000b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b3aa:	4770      	bx	lr

2000b3ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
2000b3ac:	b580      	push	{r7, lr}
2000b3ae:	b086      	sub	sp, #24
2000b3b0:	af00      	add	r7, sp, #0
2000b3b2:	60f8      	str	r0, [r7, #12]
2000b3b4:	60b9      	str	r1, [r7, #8]
2000b3b6:	4613      	mov	r3, r2
2000b3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
2000b3ba:	68fb      	ldr	r3, [r7, #12]
2000b3bc:	2b00      	cmp	r3, #0
2000b3be:	d101      	bne.n	2000b3c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
2000b3c0:	2303      	movs	r3, #3
2000b3c2:	e01f      	b.n	2000b404 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
2000b3c4:	68fb      	ldr	r3, [r7, #12]
2000b3c6:	2200      	movs	r2, #0
2000b3c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
2000b3cc:	68fb      	ldr	r3, [r7, #12]
2000b3ce:	2200      	movs	r2, #0
2000b3d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
2000b3d4:	68fb      	ldr	r3, [r7, #12]
2000b3d6:	2200      	movs	r2, #0
2000b3d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
2000b3dc:	68bb      	ldr	r3, [r7, #8]
2000b3de:	2b00      	cmp	r3, #0
2000b3e0:	d003      	beq.n	2000b3ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
2000b3e2:	68fb      	ldr	r3, [r7, #12]
2000b3e4:	68ba      	ldr	r2, [r7, #8]
2000b3e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000b3ea:	68fb      	ldr	r3, [r7, #12]
2000b3ec:	2201      	movs	r2, #1
2000b3ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
2000b3f2:	68fb      	ldr	r3, [r7, #12]
2000b3f4:	79fa      	ldrb	r2, [r7, #7]
2000b3f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
2000b3f8:	68f8      	ldr	r0, [r7, #12]
2000b3fa:	f001 fe0d 	bl	2000d018 <USBD_LL_Init>
2000b3fe:	4603      	mov	r3, r0
2000b400:	75fb      	strb	r3, [r7, #23]

  return ret;
2000b402:	7dfb      	ldrb	r3, [r7, #23]
}
2000b404:	4618      	mov	r0, r3
2000b406:	3718      	adds	r7, #24
2000b408:	46bd      	mov	sp, r7
2000b40a:	bd80      	pop	{r7, pc}

2000b40c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
2000b40c:	b580      	push	{r7, lr}
2000b40e:	b084      	sub	sp, #16
2000b410:	af00      	add	r7, sp, #0
2000b412:	6078      	str	r0, [r7, #4]
2000b414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000b416:	2300      	movs	r3, #0
2000b418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
2000b41a:	683b      	ldr	r3, [r7, #0]
2000b41c:	2b00      	cmp	r3, #0
2000b41e:	d101      	bne.n	2000b424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
2000b420:	2303      	movs	r3, #3
2000b422:	e025      	b.n	2000b470 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
2000b424:	687b      	ldr	r3, [r7, #4]
2000b426:	683a      	ldr	r2, [r7, #0]
2000b428:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
2000b42c:	687b      	ldr	r3, [r7, #4]
2000b42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b432:	687b      	ldr	r3, [r7, #4]
2000b434:	32ae      	adds	r2, #174	@ 0xae
2000b436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000b43c:	2b00      	cmp	r3, #0
2000b43e:	d00f      	beq.n	2000b460 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
2000b440:	687b      	ldr	r3, [r7, #4]
2000b442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b446:	687b      	ldr	r3, [r7, #4]
2000b448:	32ae      	adds	r2, #174	@ 0xae
2000b44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000b450:	f107 020e 	add.w	r2, r7, #14
2000b454:	4610      	mov	r0, r2
2000b456:	4798      	blx	r3
2000b458:	4602      	mov	r2, r0
2000b45a:	687b      	ldr	r3, [r7, #4]
2000b45c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
2000b460:	687b      	ldr	r3, [r7, #4]
2000b462:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
2000b466:	1c5a      	adds	r2, r3, #1
2000b468:	687b      	ldr	r3, [r7, #4]
2000b46a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
2000b46e:	2300      	movs	r3, #0
}
2000b470:	4618      	mov	r0, r3
2000b472:	3710      	adds	r7, #16
2000b474:	46bd      	mov	sp, r7
2000b476:	bd80      	pop	{r7, pc}

2000b478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
2000b478:	b580      	push	{r7, lr}
2000b47a:	b082      	sub	sp, #8
2000b47c:	af00      	add	r7, sp, #0
2000b47e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
2000b480:	6878      	ldr	r0, [r7, #4]
2000b482:	f001 fe15 	bl	2000d0b0 <USBD_LL_Start>
2000b486:	4603      	mov	r3, r0
}
2000b488:	4618      	mov	r0, r3
2000b48a:	3708      	adds	r7, #8
2000b48c:	46bd      	mov	sp, r7
2000b48e:	bd80      	pop	{r7, pc}

2000b490 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
2000b490:	b480      	push	{r7}
2000b492:	b083      	sub	sp, #12
2000b494:	af00      	add	r7, sp, #0
2000b496:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
2000b498:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
2000b49a:	4618      	mov	r0, r3
2000b49c:	370c      	adds	r7, #12
2000b49e:	46bd      	mov	sp, r7
2000b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b4a4:	4770      	bx	lr

2000b4a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000b4a6:	b580      	push	{r7, lr}
2000b4a8:	b084      	sub	sp, #16
2000b4aa:	af00      	add	r7, sp, #0
2000b4ac:	6078      	str	r0, [r7, #4]
2000b4ae:	460b      	mov	r3, r1
2000b4b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
2000b4b2:	2300      	movs	r3, #0
2000b4b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
2000b4b6:	687b      	ldr	r3, [r7, #4]
2000b4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b4bc:	2b00      	cmp	r3, #0
2000b4be:	d009      	beq.n	2000b4d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
2000b4c0:	687b      	ldr	r3, [r7, #4]
2000b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b4c6:	681b      	ldr	r3, [r3, #0]
2000b4c8:	78fa      	ldrb	r2, [r7, #3]
2000b4ca:	4611      	mov	r1, r2
2000b4cc:	6878      	ldr	r0, [r7, #4]
2000b4ce:	4798      	blx	r3
2000b4d0:	4603      	mov	r3, r0
2000b4d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000b4d4:	7bfb      	ldrb	r3, [r7, #15]
}
2000b4d6:	4618      	mov	r0, r3
2000b4d8:	3710      	adds	r7, #16
2000b4da:	46bd      	mov	sp, r7
2000b4dc:	bd80      	pop	{r7, pc}

2000b4de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000b4de:	b580      	push	{r7, lr}
2000b4e0:	b084      	sub	sp, #16
2000b4e2:	af00      	add	r7, sp, #0
2000b4e4:	6078      	str	r0, [r7, #4]
2000b4e6:	460b      	mov	r3, r1
2000b4e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
2000b4ea:	2300      	movs	r3, #0
2000b4ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
2000b4ee:	687b      	ldr	r3, [r7, #4]
2000b4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b4f4:	685b      	ldr	r3, [r3, #4]
2000b4f6:	78fa      	ldrb	r2, [r7, #3]
2000b4f8:	4611      	mov	r1, r2
2000b4fa:	6878      	ldr	r0, [r7, #4]
2000b4fc:	4798      	blx	r3
2000b4fe:	4603      	mov	r3, r0
2000b500:	2b00      	cmp	r3, #0
2000b502:	d001      	beq.n	2000b508 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
2000b504:	2303      	movs	r3, #3
2000b506:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000b508:	7bfb      	ldrb	r3, [r7, #15]
}
2000b50a:	4618      	mov	r0, r3
2000b50c:	3710      	adds	r7, #16
2000b50e:	46bd      	mov	sp, r7
2000b510:	bd80      	pop	{r7, pc}

2000b512 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
2000b512:	b580      	push	{r7, lr}
2000b514:	b084      	sub	sp, #16
2000b516:	af00      	add	r7, sp, #0
2000b518:	6078      	str	r0, [r7, #4]
2000b51a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
2000b51c:	687b      	ldr	r3, [r7, #4]
2000b51e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b522:	6839      	ldr	r1, [r7, #0]
2000b524:	4618      	mov	r0, r3
2000b526:	f001 f94a 	bl	2000c7be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
2000b52a:	687b      	ldr	r3, [r7, #4]
2000b52c:	2201      	movs	r2, #1
2000b52e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
2000b532:	687b      	ldr	r3, [r7, #4]
2000b534:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
2000b538:	461a      	mov	r2, r3
2000b53a:	687b      	ldr	r3, [r7, #4]
2000b53c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
2000b540:	687b      	ldr	r3, [r7, #4]
2000b542:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000b546:	f003 031f 	and.w	r3, r3, #31
2000b54a:	2b02      	cmp	r3, #2
2000b54c:	d01a      	beq.n	2000b584 <USBD_LL_SetupStage+0x72>
2000b54e:	2b02      	cmp	r3, #2
2000b550:	d822      	bhi.n	2000b598 <USBD_LL_SetupStage+0x86>
2000b552:	2b00      	cmp	r3, #0
2000b554:	d002      	beq.n	2000b55c <USBD_LL_SetupStage+0x4a>
2000b556:	2b01      	cmp	r3, #1
2000b558:	d00a      	beq.n	2000b570 <USBD_LL_SetupStage+0x5e>
2000b55a:	e01d      	b.n	2000b598 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
2000b55c:	687b      	ldr	r3, [r7, #4]
2000b55e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b562:	4619      	mov	r1, r3
2000b564:	6878      	ldr	r0, [r7, #4]
2000b566:	f000 fb75 	bl	2000bc54 <USBD_StdDevReq>
2000b56a:	4603      	mov	r3, r0
2000b56c:	73fb      	strb	r3, [r7, #15]
      break;
2000b56e:	e020      	b.n	2000b5b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
2000b570:	687b      	ldr	r3, [r7, #4]
2000b572:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b576:	4619      	mov	r1, r3
2000b578:	6878      	ldr	r0, [r7, #4]
2000b57a:	f000 fbdd 	bl	2000bd38 <USBD_StdItfReq>
2000b57e:	4603      	mov	r3, r0
2000b580:	73fb      	strb	r3, [r7, #15]
      break;
2000b582:	e016      	b.n	2000b5b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
2000b584:	687b      	ldr	r3, [r7, #4]
2000b586:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b58a:	4619      	mov	r1, r3
2000b58c:	6878      	ldr	r0, [r7, #4]
2000b58e:	f000 fc3f 	bl	2000be10 <USBD_StdEPReq>
2000b592:	4603      	mov	r3, r0
2000b594:	73fb      	strb	r3, [r7, #15]
      break;
2000b596:	e00c      	b.n	2000b5b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
2000b598:	687b      	ldr	r3, [r7, #4]
2000b59a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000b59e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
2000b5a2:	b2db      	uxtb	r3, r3
2000b5a4:	4619      	mov	r1, r3
2000b5a6:	6878      	ldr	r0, [r7, #4]
2000b5a8:	f001 fde2 	bl	2000d170 <USBD_LL_StallEP>
2000b5ac:	4603      	mov	r3, r0
2000b5ae:	73fb      	strb	r3, [r7, #15]
      break;
2000b5b0:	bf00      	nop
  }

  return ret;
2000b5b2:	7bfb      	ldrb	r3, [r7, #15]
}
2000b5b4:	4618      	mov	r0, r3
2000b5b6:	3710      	adds	r7, #16
2000b5b8:	46bd      	mov	sp, r7
2000b5ba:	bd80      	pop	{r7, pc}

2000b5bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
2000b5bc:	b580      	push	{r7, lr}
2000b5be:	b086      	sub	sp, #24
2000b5c0:	af00      	add	r7, sp, #0
2000b5c2:	60f8      	str	r0, [r7, #12]
2000b5c4:	460b      	mov	r3, r1
2000b5c6:	607a      	str	r2, [r7, #4]
2000b5c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
2000b5ca:	2300      	movs	r3, #0
2000b5cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
2000b5ce:	7afb      	ldrb	r3, [r7, #11]
2000b5d0:	2b00      	cmp	r3, #0
2000b5d2:	d177      	bne.n	2000b6c4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
2000b5d4:	68fb      	ldr	r3, [r7, #12]
2000b5d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
2000b5da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
2000b5dc:	68fb      	ldr	r3, [r7, #12]
2000b5de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
2000b5e2:	2b03      	cmp	r3, #3
2000b5e4:	f040 80a1 	bne.w	2000b72a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
2000b5e8:	693b      	ldr	r3, [r7, #16]
2000b5ea:	685b      	ldr	r3, [r3, #4]
2000b5ec:	693a      	ldr	r2, [r7, #16]
2000b5ee:	8992      	ldrh	r2, [r2, #12]
2000b5f0:	4293      	cmp	r3, r2
2000b5f2:	d91c      	bls.n	2000b62e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
2000b5f4:	693b      	ldr	r3, [r7, #16]
2000b5f6:	685b      	ldr	r3, [r3, #4]
2000b5f8:	693a      	ldr	r2, [r7, #16]
2000b5fa:	8992      	ldrh	r2, [r2, #12]
2000b5fc:	1a9a      	subs	r2, r3, r2
2000b5fe:	693b      	ldr	r3, [r7, #16]
2000b600:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
2000b602:	693b      	ldr	r3, [r7, #16]
2000b604:	691b      	ldr	r3, [r3, #16]
2000b606:	693a      	ldr	r2, [r7, #16]
2000b608:	8992      	ldrh	r2, [r2, #12]
2000b60a:	441a      	add	r2, r3
2000b60c:	693b      	ldr	r3, [r7, #16]
2000b60e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
2000b610:	693b      	ldr	r3, [r7, #16]
2000b612:	6919      	ldr	r1, [r3, #16]
2000b614:	693b      	ldr	r3, [r7, #16]
2000b616:	899b      	ldrh	r3, [r3, #12]
2000b618:	461a      	mov	r2, r3
2000b61a:	693b      	ldr	r3, [r7, #16]
2000b61c:	685b      	ldr	r3, [r3, #4]
2000b61e:	4293      	cmp	r3, r2
2000b620:	bf38      	it	cc
2000b622:	4613      	movcc	r3, r2
2000b624:	461a      	mov	r2, r3
2000b626:	68f8      	ldr	r0, [r7, #12]
2000b628:	f001 f9d0 	bl	2000c9cc <USBD_CtlContinueRx>
2000b62c:	e07d      	b.n	2000b72a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
2000b62e:	68fb      	ldr	r3, [r7, #12]
2000b630:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000b634:	f003 031f 	and.w	r3, r3, #31
2000b638:	2b02      	cmp	r3, #2
2000b63a:	d014      	beq.n	2000b666 <USBD_LL_DataOutStage+0xaa>
2000b63c:	2b02      	cmp	r3, #2
2000b63e:	d81d      	bhi.n	2000b67c <USBD_LL_DataOutStage+0xc0>
2000b640:	2b00      	cmp	r3, #0
2000b642:	d002      	beq.n	2000b64a <USBD_LL_DataOutStage+0x8e>
2000b644:	2b01      	cmp	r3, #1
2000b646:	d003      	beq.n	2000b650 <USBD_LL_DataOutStage+0x94>
2000b648:	e018      	b.n	2000b67c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
2000b64a:	2300      	movs	r3, #0
2000b64c:	75bb      	strb	r3, [r7, #22]
            break;
2000b64e:	e018      	b.n	2000b682 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
2000b650:	68fb      	ldr	r3, [r7, #12]
2000b652:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
2000b656:	b2db      	uxtb	r3, r3
2000b658:	4619      	mov	r1, r3
2000b65a:	68f8      	ldr	r0, [r7, #12]
2000b65c:	f000 fa6e 	bl	2000bb3c <USBD_CoreFindIF>
2000b660:	4603      	mov	r3, r0
2000b662:	75bb      	strb	r3, [r7, #22]
            break;
2000b664:	e00d      	b.n	2000b682 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
2000b666:	68fb      	ldr	r3, [r7, #12]
2000b668:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
2000b66c:	b2db      	uxtb	r3, r3
2000b66e:	4619      	mov	r1, r3
2000b670:	68f8      	ldr	r0, [r7, #12]
2000b672:	f000 fa70 	bl	2000bb56 <USBD_CoreFindEP>
2000b676:	4603      	mov	r3, r0
2000b678:	75bb      	strb	r3, [r7, #22]
            break;
2000b67a:	e002      	b.n	2000b682 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
2000b67c:	2300      	movs	r3, #0
2000b67e:	75bb      	strb	r3, [r7, #22]
            break;
2000b680:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
2000b682:	7dbb      	ldrb	r3, [r7, #22]
2000b684:	2b00      	cmp	r3, #0
2000b686:	d119      	bne.n	2000b6bc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b688:	68fb      	ldr	r3, [r7, #12]
2000b68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b68e:	b2db      	uxtb	r3, r3
2000b690:	2b03      	cmp	r3, #3
2000b692:	d113      	bne.n	2000b6bc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
2000b694:	7dba      	ldrb	r2, [r7, #22]
2000b696:	68fb      	ldr	r3, [r7, #12]
2000b698:	32ae      	adds	r2, #174	@ 0xae
2000b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b69e:	691b      	ldr	r3, [r3, #16]
2000b6a0:	2b00      	cmp	r3, #0
2000b6a2:	d00b      	beq.n	2000b6bc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
2000b6a4:	7dba      	ldrb	r2, [r7, #22]
2000b6a6:	68fb      	ldr	r3, [r7, #12]
2000b6a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
2000b6ac:	7dba      	ldrb	r2, [r7, #22]
2000b6ae:	68fb      	ldr	r3, [r7, #12]
2000b6b0:	32ae      	adds	r2, #174	@ 0xae
2000b6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b6b6:	691b      	ldr	r3, [r3, #16]
2000b6b8:	68f8      	ldr	r0, [r7, #12]
2000b6ba:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
2000b6bc:	68f8      	ldr	r0, [r7, #12]
2000b6be:	f001 f996 	bl	2000c9ee <USBD_CtlSendStatus>
2000b6c2:	e032      	b.n	2000b72a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
2000b6c4:	7afb      	ldrb	r3, [r7, #11]
2000b6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000b6ca:	b2db      	uxtb	r3, r3
2000b6cc:	4619      	mov	r1, r3
2000b6ce:	68f8      	ldr	r0, [r7, #12]
2000b6d0:	f000 fa41 	bl	2000bb56 <USBD_CoreFindEP>
2000b6d4:	4603      	mov	r3, r0
2000b6d6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000b6d8:	7dbb      	ldrb	r3, [r7, #22]
2000b6da:	2bff      	cmp	r3, #255	@ 0xff
2000b6dc:	d025      	beq.n	2000b72a <USBD_LL_DataOutStage+0x16e>
2000b6de:	7dbb      	ldrb	r3, [r7, #22]
2000b6e0:	2b00      	cmp	r3, #0
2000b6e2:	d122      	bne.n	2000b72a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b6e4:	68fb      	ldr	r3, [r7, #12]
2000b6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b6ea:	b2db      	uxtb	r3, r3
2000b6ec:	2b03      	cmp	r3, #3
2000b6ee:	d117      	bne.n	2000b720 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
2000b6f0:	7dba      	ldrb	r2, [r7, #22]
2000b6f2:	68fb      	ldr	r3, [r7, #12]
2000b6f4:	32ae      	adds	r2, #174	@ 0xae
2000b6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b6fa:	699b      	ldr	r3, [r3, #24]
2000b6fc:	2b00      	cmp	r3, #0
2000b6fe:	d00f      	beq.n	2000b720 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
2000b700:	7dba      	ldrb	r2, [r7, #22]
2000b702:	68fb      	ldr	r3, [r7, #12]
2000b704:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
2000b708:	7dba      	ldrb	r2, [r7, #22]
2000b70a:	68fb      	ldr	r3, [r7, #12]
2000b70c:	32ae      	adds	r2, #174	@ 0xae
2000b70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b712:	699b      	ldr	r3, [r3, #24]
2000b714:	7afa      	ldrb	r2, [r7, #11]
2000b716:	4611      	mov	r1, r2
2000b718:	68f8      	ldr	r0, [r7, #12]
2000b71a:	4798      	blx	r3
2000b71c:	4603      	mov	r3, r0
2000b71e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
2000b720:	7dfb      	ldrb	r3, [r7, #23]
2000b722:	2b00      	cmp	r3, #0
2000b724:	d001      	beq.n	2000b72a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
2000b726:	7dfb      	ldrb	r3, [r7, #23]
2000b728:	e000      	b.n	2000b72c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
2000b72a:	2300      	movs	r3, #0
}
2000b72c:	4618      	mov	r0, r3
2000b72e:	3718      	adds	r7, #24
2000b730:	46bd      	mov	sp, r7
2000b732:	bd80      	pop	{r7, pc}

2000b734 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
2000b734:	b580      	push	{r7, lr}
2000b736:	b086      	sub	sp, #24
2000b738:	af00      	add	r7, sp, #0
2000b73a:	60f8      	str	r0, [r7, #12]
2000b73c:	460b      	mov	r3, r1
2000b73e:	607a      	str	r2, [r7, #4]
2000b740:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
2000b742:	7afb      	ldrb	r3, [r7, #11]
2000b744:	2b00      	cmp	r3, #0
2000b746:	d178      	bne.n	2000b83a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
2000b748:	68fb      	ldr	r3, [r7, #12]
2000b74a:	3314      	adds	r3, #20
2000b74c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
2000b74e:	68fb      	ldr	r3, [r7, #12]
2000b750:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
2000b754:	2b02      	cmp	r3, #2
2000b756:	d163      	bne.n	2000b820 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
2000b758:	693b      	ldr	r3, [r7, #16]
2000b75a:	685b      	ldr	r3, [r3, #4]
2000b75c:	693a      	ldr	r2, [r7, #16]
2000b75e:	8992      	ldrh	r2, [r2, #12]
2000b760:	4293      	cmp	r3, r2
2000b762:	d91c      	bls.n	2000b79e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
2000b764:	693b      	ldr	r3, [r7, #16]
2000b766:	685b      	ldr	r3, [r3, #4]
2000b768:	693a      	ldr	r2, [r7, #16]
2000b76a:	8992      	ldrh	r2, [r2, #12]
2000b76c:	1a9a      	subs	r2, r3, r2
2000b76e:	693b      	ldr	r3, [r7, #16]
2000b770:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
2000b772:	693b      	ldr	r3, [r7, #16]
2000b774:	691b      	ldr	r3, [r3, #16]
2000b776:	693a      	ldr	r2, [r7, #16]
2000b778:	8992      	ldrh	r2, [r2, #12]
2000b77a:	441a      	add	r2, r3
2000b77c:	693b      	ldr	r3, [r7, #16]
2000b77e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
2000b780:	693b      	ldr	r3, [r7, #16]
2000b782:	6919      	ldr	r1, [r3, #16]
2000b784:	693b      	ldr	r3, [r7, #16]
2000b786:	685b      	ldr	r3, [r3, #4]
2000b788:	461a      	mov	r2, r3
2000b78a:	68f8      	ldr	r0, [r7, #12]
2000b78c:	f001 f8ec 	bl	2000c968 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000b790:	2300      	movs	r3, #0
2000b792:	2200      	movs	r2, #0
2000b794:	2100      	movs	r1, #0
2000b796:	68f8      	ldr	r0, [r7, #12]
2000b798:	f001 fd94 	bl	2000d2c4 <USBD_LL_PrepareReceive>
2000b79c:	e040      	b.n	2000b820 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
2000b79e:	693b      	ldr	r3, [r7, #16]
2000b7a0:	899b      	ldrh	r3, [r3, #12]
2000b7a2:	461a      	mov	r2, r3
2000b7a4:	693b      	ldr	r3, [r7, #16]
2000b7a6:	685b      	ldr	r3, [r3, #4]
2000b7a8:	429a      	cmp	r2, r3
2000b7aa:	d11c      	bne.n	2000b7e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
2000b7ac:	693b      	ldr	r3, [r7, #16]
2000b7ae:	681b      	ldr	r3, [r3, #0]
2000b7b0:	693a      	ldr	r2, [r7, #16]
2000b7b2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
2000b7b4:	4293      	cmp	r3, r2
2000b7b6:	d316      	bcc.n	2000b7e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
2000b7b8:	693b      	ldr	r3, [r7, #16]
2000b7ba:	681a      	ldr	r2, [r3, #0]
2000b7bc:	68fb      	ldr	r3, [r7, #12]
2000b7be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
2000b7c2:	429a      	cmp	r2, r3
2000b7c4:	d20f      	bcs.n	2000b7e6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
2000b7c6:	2200      	movs	r2, #0
2000b7c8:	2100      	movs	r1, #0
2000b7ca:	68f8      	ldr	r0, [r7, #12]
2000b7cc:	f001 f8cc 	bl	2000c968 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
2000b7d0:	68fb      	ldr	r3, [r7, #12]
2000b7d2:	2200      	movs	r2, #0
2000b7d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000b7d8:	2300      	movs	r3, #0
2000b7da:	2200      	movs	r2, #0
2000b7dc:	2100      	movs	r1, #0
2000b7de:	68f8      	ldr	r0, [r7, #12]
2000b7e0:	f001 fd70 	bl	2000d2c4 <USBD_LL_PrepareReceive>
2000b7e4:	e01c      	b.n	2000b820 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b7e6:	68fb      	ldr	r3, [r7, #12]
2000b7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b7ec:	b2db      	uxtb	r3, r3
2000b7ee:	2b03      	cmp	r3, #3
2000b7f0:	d10f      	bne.n	2000b812 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
2000b7f2:	68fb      	ldr	r3, [r7, #12]
2000b7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b7f8:	68db      	ldr	r3, [r3, #12]
2000b7fa:	2b00      	cmp	r3, #0
2000b7fc:	d009      	beq.n	2000b812 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
2000b7fe:	68fb      	ldr	r3, [r7, #12]
2000b800:	2200      	movs	r2, #0
2000b802:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
2000b806:	68fb      	ldr	r3, [r7, #12]
2000b808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b80c:	68db      	ldr	r3, [r3, #12]
2000b80e:	68f8      	ldr	r0, [r7, #12]
2000b810:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
2000b812:	2180      	movs	r1, #128	@ 0x80
2000b814:	68f8      	ldr	r0, [r7, #12]
2000b816:	f001 fcab 	bl	2000d170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
2000b81a:	68f8      	ldr	r0, [r7, #12]
2000b81c:	f001 f8fa 	bl	2000ca14 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
2000b820:	68fb      	ldr	r3, [r7, #12]
2000b822:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
2000b826:	2b00      	cmp	r3, #0
2000b828:	d03a      	beq.n	2000b8a0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
2000b82a:	68f8      	ldr	r0, [r7, #12]
2000b82c:	f7ff fe30 	bl	2000b490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
2000b830:	68fb      	ldr	r3, [r7, #12]
2000b832:	2200      	movs	r2, #0
2000b834:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
2000b838:	e032      	b.n	2000b8a0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
2000b83a:	7afb      	ldrb	r3, [r7, #11]
2000b83c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
2000b840:	b2db      	uxtb	r3, r3
2000b842:	4619      	mov	r1, r3
2000b844:	68f8      	ldr	r0, [r7, #12]
2000b846:	f000 f986 	bl	2000bb56 <USBD_CoreFindEP>
2000b84a:	4603      	mov	r3, r0
2000b84c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000b84e:	7dfb      	ldrb	r3, [r7, #23]
2000b850:	2bff      	cmp	r3, #255	@ 0xff
2000b852:	d025      	beq.n	2000b8a0 <USBD_LL_DataInStage+0x16c>
2000b854:	7dfb      	ldrb	r3, [r7, #23]
2000b856:	2b00      	cmp	r3, #0
2000b858:	d122      	bne.n	2000b8a0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b85a:	68fb      	ldr	r3, [r7, #12]
2000b85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b860:	b2db      	uxtb	r3, r3
2000b862:	2b03      	cmp	r3, #3
2000b864:	d11c      	bne.n	2000b8a0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
2000b866:	7dfa      	ldrb	r2, [r7, #23]
2000b868:	68fb      	ldr	r3, [r7, #12]
2000b86a:	32ae      	adds	r2, #174	@ 0xae
2000b86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b870:	695b      	ldr	r3, [r3, #20]
2000b872:	2b00      	cmp	r3, #0
2000b874:	d014      	beq.n	2000b8a0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
2000b876:	7dfa      	ldrb	r2, [r7, #23]
2000b878:	68fb      	ldr	r3, [r7, #12]
2000b87a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
2000b87e:	7dfa      	ldrb	r2, [r7, #23]
2000b880:	68fb      	ldr	r3, [r7, #12]
2000b882:	32ae      	adds	r2, #174	@ 0xae
2000b884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b888:	695b      	ldr	r3, [r3, #20]
2000b88a:	7afa      	ldrb	r2, [r7, #11]
2000b88c:	4611      	mov	r1, r2
2000b88e:	68f8      	ldr	r0, [r7, #12]
2000b890:	4798      	blx	r3
2000b892:	4603      	mov	r3, r0
2000b894:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
2000b896:	7dbb      	ldrb	r3, [r7, #22]
2000b898:	2b00      	cmp	r3, #0
2000b89a:	d001      	beq.n	2000b8a0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
2000b89c:	7dbb      	ldrb	r3, [r7, #22]
2000b89e:	e000      	b.n	2000b8a2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
2000b8a0:	2300      	movs	r3, #0
}
2000b8a2:	4618      	mov	r0, r3
2000b8a4:	3718      	adds	r7, #24
2000b8a6:	46bd      	mov	sp, r7
2000b8a8:	bd80      	pop	{r7, pc}

2000b8aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
2000b8aa:	b580      	push	{r7, lr}
2000b8ac:	b084      	sub	sp, #16
2000b8ae:	af00      	add	r7, sp, #0
2000b8b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
2000b8b2:	2300      	movs	r3, #0
2000b8b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000b8b6:	687b      	ldr	r3, [r7, #4]
2000b8b8:	2201      	movs	r2, #1
2000b8ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
2000b8be:	687b      	ldr	r3, [r7, #4]
2000b8c0:	2200      	movs	r2, #0
2000b8c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
2000b8c6:	687b      	ldr	r3, [r7, #4]
2000b8c8:	2200      	movs	r2, #0
2000b8ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
2000b8cc:	687b      	ldr	r3, [r7, #4]
2000b8ce:	2200      	movs	r2, #0
2000b8d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
2000b8d4:	687b      	ldr	r3, [r7, #4]
2000b8d6:	2200      	movs	r2, #0
2000b8d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
2000b8dc:	687b      	ldr	r3, [r7, #4]
2000b8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b8e2:	2b00      	cmp	r3, #0
2000b8e4:	d014      	beq.n	2000b910 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
2000b8e6:	687b      	ldr	r3, [r7, #4]
2000b8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b8ec:	685b      	ldr	r3, [r3, #4]
2000b8ee:	2b00      	cmp	r3, #0
2000b8f0:	d00e      	beq.n	2000b910 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
2000b8f2:	687b      	ldr	r3, [r7, #4]
2000b8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b8f8:	685b      	ldr	r3, [r3, #4]
2000b8fa:	687a      	ldr	r2, [r7, #4]
2000b8fc:	6852      	ldr	r2, [r2, #4]
2000b8fe:	b2d2      	uxtb	r2, r2
2000b900:	4611      	mov	r1, r2
2000b902:	6878      	ldr	r0, [r7, #4]
2000b904:	4798      	blx	r3
2000b906:	4603      	mov	r3, r0
2000b908:	2b00      	cmp	r3, #0
2000b90a:	d001      	beq.n	2000b910 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
2000b90c:	2303      	movs	r3, #3
2000b90e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000b910:	2340      	movs	r3, #64	@ 0x40
2000b912:	2200      	movs	r2, #0
2000b914:	2100      	movs	r1, #0
2000b916:	6878      	ldr	r0, [r7, #4]
2000b918:	f001 fbe5 	bl	2000d0e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
2000b91c:	687b      	ldr	r3, [r7, #4]
2000b91e:	2201      	movs	r2, #1
2000b920:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
2000b924:	687b      	ldr	r3, [r7, #4]
2000b926:	2240      	movs	r2, #64	@ 0x40
2000b928:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000b92c:	2340      	movs	r3, #64	@ 0x40
2000b92e:	2200      	movs	r2, #0
2000b930:	2180      	movs	r1, #128	@ 0x80
2000b932:	6878      	ldr	r0, [r7, #4]
2000b934:	f001 fbd7 	bl	2000d0e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
2000b938:	687b      	ldr	r3, [r7, #4]
2000b93a:	2201      	movs	r2, #1
2000b93c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
2000b940:	687b      	ldr	r3, [r7, #4]
2000b942:	2240      	movs	r2, #64	@ 0x40
2000b944:	841a      	strh	r2, [r3, #32]

  return ret;
2000b946:	7bfb      	ldrb	r3, [r7, #15]
}
2000b948:	4618      	mov	r0, r3
2000b94a:	3710      	adds	r7, #16
2000b94c:	46bd      	mov	sp, r7
2000b94e:	bd80      	pop	{r7, pc}

2000b950 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
2000b950:	b480      	push	{r7}
2000b952:	b083      	sub	sp, #12
2000b954:	af00      	add	r7, sp, #0
2000b956:	6078      	str	r0, [r7, #4]
2000b958:	460b      	mov	r3, r1
2000b95a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
2000b95c:	687b      	ldr	r3, [r7, #4]
2000b95e:	78fa      	ldrb	r2, [r7, #3]
2000b960:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
2000b962:	2300      	movs	r3, #0
}
2000b964:	4618      	mov	r0, r3
2000b966:	370c      	adds	r7, #12
2000b968:	46bd      	mov	sp, r7
2000b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b96e:	4770      	bx	lr

2000b970 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
2000b970:	b480      	push	{r7}
2000b972:	b083      	sub	sp, #12
2000b974:	af00      	add	r7, sp, #0
2000b976:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
2000b978:	687b      	ldr	r3, [r7, #4]
2000b97a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b97e:	b2db      	uxtb	r3, r3
2000b980:	2b04      	cmp	r3, #4
2000b982:	d006      	beq.n	2000b992 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
2000b984:	687b      	ldr	r3, [r7, #4]
2000b986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b98a:	b2da      	uxtb	r2, r3
2000b98c:	687b      	ldr	r3, [r7, #4]
2000b98e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
2000b992:	687b      	ldr	r3, [r7, #4]
2000b994:	2204      	movs	r2, #4
2000b996:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
2000b99a:	2300      	movs	r3, #0
}
2000b99c:	4618      	mov	r0, r3
2000b99e:	370c      	adds	r7, #12
2000b9a0:	46bd      	mov	sp, r7
2000b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b9a6:	4770      	bx	lr

2000b9a8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
2000b9a8:	b480      	push	{r7}
2000b9aa:	b083      	sub	sp, #12
2000b9ac:	af00      	add	r7, sp, #0
2000b9ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
2000b9b0:	687b      	ldr	r3, [r7, #4]
2000b9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b9b6:	b2db      	uxtb	r3, r3
2000b9b8:	2b04      	cmp	r3, #4
2000b9ba:	d106      	bne.n	2000b9ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
2000b9bc:	687b      	ldr	r3, [r7, #4]
2000b9be:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
2000b9c2:	b2da      	uxtb	r2, r3
2000b9c4:	687b      	ldr	r3, [r7, #4]
2000b9c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
2000b9ca:	2300      	movs	r3, #0
}
2000b9cc:	4618      	mov	r0, r3
2000b9ce:	370c      	adds	r7, #12
2000b9d0:	46bd      	mov	sp, r7
2000b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b9d6:	4770      	bx	lr

2000b9d8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
2000b9d8:	b580      	push	{r7, lr}
2000b9da:	b082      	sub	sp, #8
2000b9dc:	af00      	add	r7, sp, #0
2000b9de:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b9e0:	687b      	ldr	r3, [r7, #4]
2000b9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b9e6:	b2db      	uxtb	r3, r3
2000b9e8:	2b03      	cmp	r3, #3
2000b9ea:	d110      	bne.n	2000ba0e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
2000b9ec:	687b      	ldr	r3, [r7, #4]
2000b9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b9f2:	2b00      	cmp	r3, #0
2000b9f4:	d00b      	beq.n	2000ba0e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
2000b9f6:	687b      	ldr	r3, [r7, #4]
2000b9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b9fc:	69db      	ldr	r3, [r3, #28]
2000b9fe:	2b00      	cmp	r3, #0
2000ba00:	d005      	beq.n	2000ba0e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
2000ba02:	687b      	ldr	r3, [r7, #4]
2000ba04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000ba08:	69db      	ldr	r3, [r3, #28]
2000ba0a:	6878      	ldr	r0, [r7, #4]
2000ba0c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
2000ba0e:	2300      	movs	r3, #0
}
2000ba10:	4618      	mov	r0, r3
2000ba12:	3708      	adds	r7, #8
2000ba14:	46bd      	mov	sp, r7
2000ba16:	bd80      	pop	{r7, pc}

2000ba18 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
2000ba18:	b580      	push	{r7, lr}
2000ba1a:	b082      	sub	sp, #8
2000ba1c:	af00      	add	r7, sp, #0
2000ba1e:	6078      	str	r0, [r7, #4]
2000ba20:	460b      	mov	r3, r1
2000ba22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000ba24:	687b      	ldr	r3, [r7, #4]
2000ba26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ba2a:	687b      	ldr	r3, [r7, #4]
2000ba2c:	32ae      	adds	r2, #174	@ 0xae
2000ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ba32:	2b00      	cmp	r3, #0
2000ba34:	d101      	bne.n	2000ba3a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
2000ba36:	2303      	movs	r3, #3
2000ba38:	e01c      	b.n	2000ba74 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ba3a:	687b      	ldr	r3, [r7, #4]
2000ba3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000ba40:	b2db      	uxtb	r3, r3
2000ba42:	2b03      	cmp	r3, #3
2000ba44:	d115      	bne.n	2000ba72 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
2000ba46:	687b      	ldr	r3, [r7, #4]
2000ba48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ba4c:	687b      	ldr	r3, [r7, #4]
2000ba4e:	32ae      	adds	r2, #174	@ 0xae
2000ba50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ba54:	6a1b      	ldr	r3, [r3, #32]
2000ba56:	2b00      	cmp	r3, #0
2000ba58:	d00b      	beq.n	2000ba72 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
2000ba5a:	687b      	ldr	r3, [r7, #4]
2000ba5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ba60:	687b      	ldr	r3, [r7, #4]
2000ba62:	32ae      	adds	r2, #174	@ 0xae
2000ba64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ba68:	6a1b      	ldr	r3, [r3, #32]
2000ba6a:	78fa      	ldrb	r2, [r7, #3]
2000ba6c:	4611      	mov	r1, r2
2000ba6e:	6878      	ldr	r0, [r7, #4]
2000ba70:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000ba72:	2300      	movs	r3, #0
}
2000ba74:	4618      	mov	r0, r3
2000ba76:	3708      	adds	r7, #8
2000ba78:	46bd      	mov	sp, r7
2000ba7a:	bd80      	pop	{r7, pc}

2000ba7c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
2000ba7c:	b580      	push	{r7, lr}
2000ba7e:	b082      	sub	sp, #8
2000ba80:	af00      	add	r7, sp, #0
2000ba82:	6078      	str	r0, [r7, #4]
2000ba84:	460b      	mov	r3, r1
2000ba86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000ba88:	687b      	ldr	r3, [r7, #4]
2000ba8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ba8e:	687b      	ldr	r3, [r7, #4]
2000ba90:	32ae      	adds	r2, #174	@ 0xae
2000ba92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ba96:	2b00      	cmp	r3, #0
2000ba98:	d101      	bne.n	2000ba9e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
2000ba9a:	2303      	movs	r3, #3
2000ba9c:	e01c      	b.n	2000bad8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ba9e:	687b      	ldr	r3, [r7, #4]
2000baa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000baa4:	b2db      	uxtb	r3, r3
2000baa6:	2b03      	cmp	r3, #3
2000baa8:	d115      	bne.n	2000bad6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
2000baaa:	687b      	ldr	r3, [r7, #4]
2000baac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000bab0:	687b      	ldr	r3, [r7, #4]
2000bab2:	32ae      	adds	r2, #174	@ 0xae
2000bab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000baba:	2b00      	cmp	r3, #0
2000babc:	d00b      	beq.n	2000bad6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
2000babe:	687b      	ldr	r3, [r7, #4]
2000bac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000bac4:	687b      	ldr	r3, [r7, #4]
2000bac6:	32ae      	adds	r2, #174	@ 0xae
2000bac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000bace:	78fa      	ldrb	r2, [r7, #3]
2000bad0:	4611      	mov	r1, r2
2000bad2:	6878      	ldr	r0, [r7, #4]
2000bad4:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000bad6:	2300      	movs	r3, #0
}
2000bad8:	4618      	mov	r0, r3
2000bada:	3708      	adds	r7, #8
2000badc:	46bd      	mov	sp, r7
2000bade:	bd80      	pop	{r7, pc}

2000bae0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
2000bae0:	b480      	push	{r7}
2000bae2:	b083      	sub	sp, #12
2000bae4:	af00      	add	r7, sp, #0
2000bae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
2000bae8:	2300      	movs	r3, #0
}
2000baea:	4618      	mov	r0, r3
2000baec:	370c      	adds	r7, #12
2000baee:	46bd      	mov	sp, r7
2000baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000baf4:	4770      	bx	lr

2000baf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
2000baf6:	b580      	push	{r7, lr}
2000baf8:	b084      	sub	sp, #16
2000bafa:	af00      	add	r7, sp, #0
2000bafc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
2000bafe:	2300      	movs	r3, #0
2000bb00:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000bb02:	687b      	ldr	r3, [r7, #4]
2000bb04:	2201      	movs	r2, #1
2000bb06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
2000bb0a:	687b      	ldr	r3, [r7, #4]
2000bb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000bb10:	2b00      	cmp	r3, #0
2000bb12:	d00e      	beq.n	2000bb32 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
2000bb14:	687b      	ldr	r3, [r7, #4]
2000bb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000bb1a:	685b      	ldr	r3, [r3, #4]
2000bb1c:	687a      	ldr	r2, [r7, #4]
2000bb1e:	6852      	ldr	r2, [r2, #4]
2000bb20:	b2d2      	uxtb	r2, r2
2000bb22:	4611      	mov	r1, r2
2000bb24:	6878      	ldr	r0, [r7, #4]
2000bb26:	4798      	blx	r3
2000bb28:	4603      	mov	r3, r0
2000bb2a:	2b00      	cmp	r3, #0
2000bb2c:	d001      	beq.n	2000bb32 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
2000bb2e:	2303      	movs	r3, #3
2000bb30:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000bb32:	7bfb      	ldrb	r3, [r7, #15]
}
2000bb34:	4618      	mov	r0, r3
2000bb36:	3710      	adds	r7, #16
2000bb38:	46bd      	mov	sp, r7
2000bb3a:	bd80      	pop	{r7, pc}

2000bb3c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000bb3c:	b480      	push	{r7}
2000bb3e:	b083      	sub	sp, #12
2000bb40:	af00      	add	r7, sp, #0
2000bb42:	6078      	str	r0, [r7, #4]
2000bb44:	460b      	mov	r3, r1
2000bb46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000bb48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000bb4a:	4618      	mov	r0, r3
2000bb4c:	370c      	adds	r7, #12
2000bb4e:	46bd      	mov	sp, r7
2000bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
2000bb54:	4770      	bx	lr

2000bb56 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000bb56:	b480      	push	{r7}
2000bb58:	b083      	sub	sp, #12
2000bb5a:	af00      	add	r7, sp, #0
2000bb5c:	6078      	str	r0, [r7, #4]
2000bb5e:	460b      	mov	r3, r1
2000bb60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000bb62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000bb64:	4618      	mov	r0, r3
2000bb66:	370c      	adds	r7, #12
2000bb68:	46bd      	mov	sp, r7
2000bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000bb6e:	4770      	bx	lr

2000bb70 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
2000bb70:	b580      	push	{r7, lr}
2000bb72:	b086      	sub	sp, #24
2000bb74:	af00      	add	r7, sp, #0
2000bb76:	6078      	str	r0, [r7, #4]
2000bb78:	460b      	mov	r3, r1
2000bb7a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
2000bb7c:	687b      	ldr	r3, [r7, #4]
2000bb7e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
2000bb80:	687b      	ldr	r3, [r7, #4]
2000bb82:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
2000bb84:	2300      	movs	r3, #0
2000bb86:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
2000bb88:	68fb      	ldr	r3, [r7, #12]
2000bb8a:	885b      	ldrh	r3, [r3, #2]
2000bb8c:	b29b      	uxth	r3, r3
2000bb8e:	68fa      	ldr	r2, [r7, #12]
2000bb90:	7812      	ldrb	r2, [r2, #0]
2000bb92:	4293      	cmp	r3, r2
2000bb94:	d91f      	bls.n	2000bbd6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
2000bb96:	68fb      	ldr	r3, [r7, #12]
2000bb98:	781b      	ldrb	r3, [r3, #0]
2000bb9a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
2000bb9c:	e013      	b.n	2000bbc6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
2000bb9e:	f107 030a 	add.w	r3, r7, #10
2000bba2:	4619      	mov	r1, r3
2000bba4:	6978      	ldr	r0, [r7, #20]
2000bba6:	f000 f81b 	bl	2000bbe0 <USBD_GetNextDesc>
2000bbaa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
2000bbac:	697b      	ldr	r3, [r7, #20]
2000bbae:	785b      	ldrb	r3, [r3, #1]
2000bbb0:	2b05      	cmp	r3, #5
2000bbb2:	d108      	bne.n	2000bbc6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
2000bbb4:	697b      	ldr	r3, [r7, #20]
2000bbb6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
2000bbb8:	693b      	ldr	r3, [r7, #16]
2000bbba:	789b      	ldrb	r3, [r3, #2]
2000bbbc:	78fa      	ldrb	r2, [r7, #3]
2000bbbe:	429a      	cmp	r2, r3
2000bbc0:	d008      	beq.n	2000bbd4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
2000bbc2:	2300      	movs	r3, #0
2000bbc4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
2000bbc6:	68fb      	ldr	r3, [r7, #12]
2000bbc8:	885b      	ldrh	r3, [r3, #2]
2000bbca:	b29a      	uxth	r2, r3
2000bbcc:	897b      	ldrh	r3, [r7, #10]
2000bbce:	429a      	cmp	r2, r3
2000bbd0:	d8e5      	bhi.n	2000bb9e <USBD_GetEpDesc+0x2e>
2000bbd2:	e000      	b.n	2000bbd6 <USBD_GetEpDesc+0x66>
          break;
2000bbd4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
2000bbd6:	693b      	ldr	r3, [r7, #16]
}
2000bbd8:	4618      	mov	r0, r3
2000bbda:	3718      	adds	r7, #24
2000bbdc:	46bd      	mov	sp, r7
2000bbde:	bd80      	pop	{r7, pc}

2000bbe0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
2000bbe0:	b480      	push	{r7}
2000bbe2:	b085      	sub	sp, #20
2000bbe4:	af00      	add	r7, sp, #0
2000bbe6:	6078      	str	r0, [r7, #4]
2000bbe8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
2000bbea:	687b      	ldr	r3, [r7, #4]
2000bbec:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
2000bbee:	683b      	ldr	r3, [r7, #0]
2000bbf0:	881b      	ldrh	r3, [r3, #0]
2000bbf2:	68fa      	ldr	r2, [r7, #12]
2000bbf4:	7812      	ldrb	r2, [r2, #0]
2000bbf6:	4413      	add	r3, r2
2000bbf8:	b29a      	uxth	r2, r3
2000bbfa:	683b      	ldr	r3, [r7, #0]
2000bbfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
2000bbfe:	68fb      	ldr	r3, [r7, #12]
2000bc00:	781b      	ldrb	r3, [r3, #0]
2000bc02:	461a      	mov	r2, r3
2000bc04:	687b      	ldr	r3, [r7, #4]
2000bc06:	4413      	add	r3, r2
2000bc08:	60fb      	str	r3, [r7, #12]

  return (pnext);
2000bc0a:	68fb      	ldr	r3, [r7, #12]
}
2000bc0c:	4618      	mov	r0, r3
2000bc0e:	3714      	adds	r7, #20
2000bc10:	46bd      	mov	sp, r7
2000bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
2000bc16:	4770      	bx	lr

2000bc18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
2000bc18:	b480      	push	{r7}
2000bc1a:	b087      	sub	sp, #28
2000bc1c:	af00      	add	r7, sp, #0
2000bc1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
2000bc20:	687b      	ldr	r3, [r7, #4]
2000bc22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
2000bc24:	697b      	ldr	r3, [r7, #20]
2000bc26:	781b      	ldrb	r3, [r3, #0]
2000bc28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
2000bc2a:	697b      	ldr	r3, [r7, #20]
2000bc2c:	3301      	adds	r3, #1
2000bc2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
2000bc30:	697b      	ldr	r3, [r7, #20]
2000bc32:	781b      	ldrb	r3, [r3, #0]
2000bc34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
2000bc36:	8a3b      	ldrh	r3, [r7, #16]
2000bc38:	021b      	lsls	r3, r3, #8
2000bc3a:	b21a      	sxth	r2, r3
2000bc3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
2000bc40:	4313      	orrs	r3, r2
2000bc42:	b21b      	sxth	r3, r3
2000bc44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
2000bc46:	89fb      	ldrh	r3, [r7, #14]
}
2000bc48:	4618      	mov	r0, r3
2000bc4a:	371c      	adds	r7, #28
2000bc4c:	46bd      	mov	sp, r7
2000bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000bc52:	4770      	bx	lr

2000bc54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000bc54:	b580      	push	{r7, lr}
2000bc56:	b084      	sub	sp, #16
2000bc58:	af00      	add	r7, sp, #0
2000bc5a:	6078      	str	r0, [r7, #4]
2000bc5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000bc5e:	2300      	movs	r3, #0
2000bc60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000bc62:	683b      	ldr	r3, [r7, #0]
2000bc64:	781b      	ldrb	r3, [r3, #0]
2000bc66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000bc6a:	2b40      	cmp	r3, #64	@ 0x40
2000bc6c:	d005      	beq.n	2000bc7a <USBD_StdDevReq+0x26>
2000bc6e:	2b40      	cmp	r3, #64	@ 0x40
2000bc70:	d857      	bhi.n	2000bd22 <USBD_StdDevReq+0xce>
2000bc72:	2b00      	cmp	r3, #0
2000bc74:	d00f      	beq.n	2000bc96 <USBD_StdDevReq+0x42>
2000bc76:	2b20      	cmp	r3, #32
2000bc78:	d153      	bne.n	2000bd22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
2000bc7a:	687b      	ldr	r3, [r7, #4]
2000bc7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000bc80:	687b      	ldr	r3, [r7, #4]
2000bc82:	32ae      	adds	r2, #174	@ 0xae
2000bc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bc88:	689b      	ldr	r3, [r3, #8]
2000bc8a:	6839      	ldr	r1, [r7, #0]
2000bc8c:	6878      	ldr	r0, [r7, #4]
2000bc8e:	4798      	blx	r3
2000bc90:	4603      	mov	r3, r0
2000bc92:	73fb      	strb	r3, [r7, #15]
      break;
2000bc94:	e04a      	b.n	2000bd2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000bc96:	683b      	ldr	r3, [r7, #0]
2000bc98:	785b      	ldrb	r3, [r3, #1]
2000bc9a:	2b09      	cmp	r3, #9
2000bc9c:	d83b      	bhi.n	2000bd16 <USBD_StdDevReq+0xc2>
2000bc9e:	a201      	add	r2, pc, #4	@ (adr r2, 2000bca4 <USBD_StdDevReq+0x50>)
2000bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000bca4:	2000bcf9 	.word	0x2000bcf9
2000bca8:	2000bd0d 	.word	0x2000bd0d
2000bcac:	2000bd17 	.word	0x2000bd17
2000bcb0:	2000bd03 	.word	0x2000bd03
2000bcb4:	2000bd17 	.word	0x2000bd17
2000bcb8:	2000bcd7 	.word	0x2000bcd7
2000bcbc:	2000bccd 	.word	0x2000bccd
2000bcc0:	2000bd17 	.word	0x2000bd17
2000bcc4:	2000bcef 	.word	0x2000bcef
2000bcc8:	2000bce1 	.word	0x2000bce1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
2000bccc:	6839      	ldr	r1, [r7, #0]
2000bcce:	6878      	ldr	r0, [r7, #4]
2000bcd0:	f000 fa3e 	bl	2000c150 <USBD_GetDescriptor>
          break;
2000bcd4:	e024      	b.n	2000bd20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
2000bcd6:	6839      	ldr	r1, [r7, #0]
2000bcd8:	6878      	ldr	r0, [r7, #4]
2000bcda:	f000 fbcd 	bl	2000c478 <USBD_SetAddress>
          break;
2000bcde:	e01f      	b.n	2000bd20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
2000bce0:	6839      	ldr	r1, [r7, #0]
2000bce2:	6878      	ldr	r0, [r7, #4]
2000bce4:	f000 fc0c 	bl	2000c500 <USBD_SetConfig>
2000bce8:	4603      	mov	r3, r0
2000bcea:	73fb      	strb	r3, [r7, #15]
          break;
2000bcec:	e018      	b.n	2000bd20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
2000bcee:	6839      	ldr	r1, [r7, #0]
2000bcf0:	6878      	ldr	r0, [r7, #4]
2000bcf2:	f000 fcaf 	bl	2000c654 <USBD_GetConfig>
          break;
2000bcf6:	e013      	b.n	2000bd20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
2000bcf8:	6839      	ldr	r1, [r7, #0]
2000bcfa:	6878      	ldr	r0, [r7, #4]
2000bcfc:	f000 fce0 	bl	2000c6c0 <USBD_GetStatus>
          break;
2000bd00:	e00e      	b.n	2000bd20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
2000bd02:	6839      	ldr	r1, [r7, #0]
2000bd04:	6878      	ldr	r0, [r7, #4]
2000bd06:	f000 fd0f 	bl	2000c728 <USBD_SetFeature>
          break;
2000bd0a:	e009      	b.n	2000bd20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
2000bd0c:	6839      	ldr	r1, [r7, #0]
2000bd0e:	6878      	ldr	r0, [r7, #4]
2000bd10:	f000 fd33 	bl	2000c77a <USBD_ClrFeature>
          break;
2000bd14:	e004      	b.n	2000bd20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
2000bd16:	6839      	ldr	r1, [r7, #0]
2000bd18:	6878      	ldr	r0, [r7, #4]
2000bd1a:	f000 fd8a 	bl	2000c832 <USBD_CtlError>
          break;
2000bd1e:	bf00      	nop
      }
      break;
2000bd20:	e004      	b.n	2000bd2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
2000bd22:	6839      	ldr	r1, [r7, #0]
2000bd24:	6878      	ldr	r0, [r7, #4]
2000bd26:	f000 fd84 	bl	2000c832 <USBD_CtlError>
      break;
2000bd2a:	bf00      	nop
  }

  return ret;
2000bd2c:	7bfb      	ldrb	r3, [r7, #15]
}
2000bd2e:	4618      	mov	r0, r3
2000bd30:	3710      	adds	r7, #16
2000bd32:	46bd      	mov	sp, r7
2000bd34:	bd80      	pop	{r7, pc}
2000bd36:	bf00      	nop

2000bd38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000bd38:	b580      	push	{r7, lr}
2000bd3a:	b084      	sub	sp, #16
2000bd3c:	af00      	add	r7, sp, #0
2000bd3e:	6078      	str	r0, [r7, #4]
2000bd40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000bd42:	2300      	movs	r3, #0
2000bd44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000bd46:	683b      	ldr	r3, [r7, #0]
2000bd48:	781b      	ldrb	r3, [r3, #0]
2000bd4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000bd4e:	2b40      	cmp	r3, #64	@ 0x40
2000bd50:	d005      	beq.n	2000bd5e <USBD_StdItfReq+0x26>
2000bd52:	2b40      	cmp	r3, #64	@ 0x40
2000bd54:	d852      	bhi.n	2000bdfc <USBD_StdItfReq+0xc4>
2000bd56:	2b00      	cmp	r3, #0
2000bd58:	d001      	beq.n	2000bd5e <USBD_StdItfReq+0x26>
2000bd5a:	2b20      	cmp	r3, #32
2000bd5c:	d14e      	bne.n	2000bdfc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
2000bd5e:	687b      	ldr	r3, [r7, #4]
2000bd60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000bd64:	b2db      	uxtb	r3, r3
2000bd66:	3b01      	subs	r3, #1
2000bd68:	2b02      	cmp	r3, #2
2000bd6a:	d840      	bhi.n	2000bdee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
2000bd6c:	683b      	ldr	r3, [r7, #0]
2000bd6e:	889b      	ldrh	r3, [r3, #4]
2000bd70:	b2db      	uxtb	r3, r3
2000bd72:	2b01      	cmp	r3, #1
2000bd74:	d836      	bhi.n	2000bde4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
2000bd76:	683b      	ldr	r3, [r7, #0]
2000bd78:	889b      	ldrh	r3, [r3, #4]
2000bd7a:	b2db      	uxtb	r3, r3
2000bd7c:	4619      	mov	r1, r3
2000bd7e:	6878      	ldr	r0, [r7, #4]
2000bd80:	f7ff fedc 	bl	2000bb3c <USBD_CoreFindIF>
2000bd84:	4603      	mov	r3, r0
2000bd86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000bd88:	7bbb      	ldrb	r3, [r7, #14]
2000bd8a:	2bff      	cmp	r3, #255	@ 0xff
2000bd8c:	d01d      	beq.n	2000bdca <USBD_StdItfReq+0x92>
2000bd8e:	7bbb      	ldrb	r3, [r7, #14]
2000bd90:	2b00      	cmp	r3, #0
2000bd92:	d11a      	bne.n	2000bdca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
2000bd94:	7bba      	ldrb	r2, [r7, #14]
2000bd96:	687b      	ldr	r3, [r7, #4]
2000bd98:	32ae      	adds	r2, #174	@ 0xae
2000bd9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bd9e:	689b      	ldr	r3, [r3, #8]
2000bda0:	2b00      	cmp	r3, #0
2000bda2:	d00f      	beq.n	2000bdc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
2000bda4:	7bba      	ldrb	r2, [r7, #14]
2000bda6:	687b      	ldr	r3, [r7, #4]
2000bda8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000bdac:	7bba      	ldrb	r2, [r7, #14]
2000bdae:	687b      	ldr	r3, [r7, #4]
2000bdb0:	32ae      	adds	r2, #174	@ 0xae
2000bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bdb6:	689b      	ldr	r3, [r3, #8]
2000bdb8:	6839      	ldr	r1, [r7, #0]
2000bdba:	6878      	ldr	r0, [r7, #4]
2000bdbc:	4798      	blx	r3
2000bdbe:	4603      	mov	r3, r0
2000bdc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000bdc2:	e004      	b.n	2000bdce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
2000bdc4:	2303      	movs	r3, #3
2000bdc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000bdc8:	e001      	b.n	2000bdce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
2000bdca:	2303      	movs	r3, #3
2000bdcc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
2000bdce:	683b      	ldr	r3, [r7, #0]
2000bdd0:	88db      	ldrh	r3, [r3, #6]
2000bdd2:	2b00      	cmp	r3, #0
2000bdd4:	d110      	bne.n	2000bdf8 <USBD_StdItfReq+0xc0>
2000bdd6:	7bfb      	ldrb	r3, [r7, #15]
2000bdd8:	2b00      	cmp	r3, #0
2000bdda:	d10d      	bne.n	2000bdf8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
2000bddc:	6878      	ldr	r0, [r7, #4]
2000bdde:	f000 fe06 	bl	2000c9ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
2000bde2:	e009      	b.n	2000bdf8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
2000bde4:	6839      	ldr	r1, [r7, #0]
2000bde6:	6878      	ldr	r0, [r7, #4]
2000bde8:	f000 fd23 	bl	2000c832 <USBD_CtlError>
          break;
2000bdec:	e004      	b.n	2000bdf8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
2000bdee:	6839      	ldr	r1, [r7, #0]
2000bdf0:	6878      	ldr	r0, [r7, #4]
2000bdf2:	f000 fd1e 	bl	2000c832 <USBD_CtlError>
          break;
2000bdf6:	e000      	b.n	2000bdfa <USBD_StdItfReq+0xc2>
          break;
2000bdf8:	bf00      	nop
      }
      break;
2000bdfa:	e004      	b.n	2000be06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
2000bdfc:	6839      	ldr	r1, [r7, #0]
2000bdfe:	6878      	ldr	r0, [r7, #4]
2000be00:	f000 fd17 	bl	2000c832 <USBD_CtlError>
      break;
2000be04:	bf00      	nop
  }

  return ret;
2000be06:	7bfb      	ldrb	r3, [r7, #15]
}
2000be08:	4618      	mov	r0, r3
2000be0a:	3710      	adds	r7, #16
2000be0c:	46bd      	mov	sp, r7
2000be0e:	bd80      	pop	{r7, pc}

2000be10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000be10:	b580      	push	{r7, lr}
2000be12:	b084      	sub	sp, #16
2000be14:	af00      	add	r7, sp, #0
2000be16:	6078      	str	r0, [r7, #4]
2000be18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
2000be1a:	2300      	movs	r3, #0
2000be1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
2000be1e:	683b      	ldr	r3, [r7, #0]
2000be20:	889b      	ldrh	r3, [r3, #4]
2000be22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000be24:	683b      	ldr	r3, [r7, #0]
2000be26:	781b      	ldrb	r3, [r3, #0]
2000be28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000be2c:	2b40      	cmp	r3, #64	@ 0x40
2000be2e:	d007      	beq.n	2000be40 <USBD_StdEPReq+0x30>
2000be30:	2b40      	cmp	r3, #64	@ 0x40
2000be32:	f200 8181 	bhi.w	2000c138 <USBD_StdEPReq+0x328>
2000be36:	2b00      	cmp	r3, #0
2000be38:	d02a      	beq.n	2000be90 <USBD_StdEPReq+0x80>
2000be3a:	2b20      	cmp	r3, #32
2000be3c:	f040 817c 	bne.w	2000c138 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
2000be40:	7bbb      	ldrb	r3, [r7, #14]
2000be42:	4619      	mov	r1, r3
2000be44:	6878      	ldr	r0, [r7, #4]
2000be46:	f7ff fe86 	bl	2000bb56 <USBD_CoreFindEP>
2000be4a:	4603      	mov	r3, r0
2000be4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000be4e:	7b7b      	ldrb	r3, [r7, #13]
2000be50:	2bff      	cmp	r3, #255	@ 0xff
2000be52:	f000 8176 	beq.w	2000c142 <USBD_StdEPReq+0x332>
2000be56:	7b7b      	ldrb	r3, [r7, #13]
2000be58:	2b00      	cmp	r3, #0
2000be5a:	f040 8172 	bne.w	2000c142 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
2000be5e:	7b7a      	ldrb	r2, [r7, #13]
2000be60:	687b      	ldr	r3, [r7, #4]
2000be62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
2000be66:	7b7a      	ldrb	r2, [r7, #13]
2000be68:	687b      	ldr	r3, [r7, #4]
2000be6a:	32ae      	adds	r2, #174	@ 0xae
2000be6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000be70:	689b      	ldr	r3, [r3, #8]
2000be72:	2b00      	cmp	r3, #0
2000be74:	f000 8165 	beq.w	2000c142 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
2000be78:	7b7a      	ldrb	r2, [r7, #13]
2000be7a:	687b      	ldr	r3, [r7, #4]
2000be7c:	32ae      	adds	r2, #174	@ 0xae
2000be7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000be82:	689b      	ldr	r3, [r3, #8]
2000be84:	6839      	ldr	r1, [r7, #0]
2000be86:	6878      	ldr	r0, [r7, #4]
2000be88:	4798      	blx	r3
2000be8a:	4603      	mov	r3, r0
2000be8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
2000be8e:	e158      	b.n	2000c142 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000be90:	683b      	ldr	r3, [r7, #0]
2000be92:	785b      	ldrb	r3, [r3, #1]
2000be94:	2b03      	cmp	r3, #3
2000be96:	d008      	beq.n	2000beaa <USBD_StdEPReq+0x9a>
2000be98:	2b03      	cmp	r3, #3
2000be9a:	f300 8147 	bgt.w	2000c12c <USBD_StdEPReq+0x31c>
2000be9e:	2b00      	cmp	r3, #0
2000bea0:	f000 809b 	beq.w	2000bfda <USBD_StdEPReq+0x1ca>
2000bea4:	2b01      	cmp	r3, #1
2000bea6:	d03c      	beq.n	2000bf22 <USBD_StdEPReq+0x112>
2000bea8:	e140      	b.n	2000c12c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
2000beaa:	687b      	ldr	r3, [r7, #4]
2000beac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000beb0:	b2db      	uxtb	r3, r3
2000beb2:	2b02      	cmp	r3, #2
2000beb4:	d002      	beq.n	2000bebc <USBD_StdEPReq+0xac>
2000beb6:	2b03      	cmp	r3, #3
2000beb8:	d016      	beq.n	2000bee8 <USBD_StdEPReq+0xd8>
2000beba:	e02c      	b.n	2000bf16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000bebc:	7bbb      	ldrb	r3, [r7, #14]
2000bebe:	2b00      	cmp	r3, #0
2000bec0:	d00d      	beq.n	2000bede <USBD_StdEPReq+0xce>
2000bec2:	7bbb      	ldrb	r3, [r7, #14]
2000bec4:	2b80      	cmp	r3, #128	@ 0x80
2000bec6:	d00a      	beq.n	2000bede <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000bec8:	7bbb      	ldrb	r3, [r7, #14]
2000beca:	4619      	mov	r1, r3
2000becc:	6878      	ldr	r0, [r7, #4]
2000bece:	f001 f94f 	bl	2000d170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000bed2:	2180      	movs	r1, #128	@ 0x80
2000bed4:	6878      	ldr	r0, [r7, #4]
2000bed6:	f001 f94b 	bl	2000d170 <USBD_LL_StallEP>
2000beda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000bedc:	e020      	b.n	2000bf20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
2000bede:	6839      	ldr	r1, [r7, #0]
2000bee0:	6878      	ldr	r0, [r7, #4]
2000bee2:	f000 fca6 	bl	2000c832 <USBD_CtlError>
              break;
2000bee6:	e01b      	b.n	2000bf20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000bee8:	683b      	ldr	r3, [r7, #0]
2000beea:	885b      	ldrh	r3, [r3, #2]
2000beec:	2b00      	cmp	r3, #0
2000beee:	d10e      	bne.n	2000bf0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
2000bef0:	7bbb      	ldrb	r3, [r7, #14]
2000bef2:	2b00      	cmp	r3, #0
2000bef4:	d00b      	beq.n	2000bf0e <USBD_StdEPReq+0xfe>
2000bef6:	7bbb      	ldrb	r3, [r7, #14]
2000bef8:	2b80      	cmp	r3, #128	@ 0x80
2000befa:	d008      	beq.n	2000bf0e <USBD_StdEPReq+0xfe>
2000befc:	683b      	ldr	r3, [r7, #0]
2000befe:	88db      	ldrh	r3, [r3, #6]
2000bf00:	2b00      	cmp	r3, #0
2000bf02:	d104      	bne.n	2000bf0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
2000bf04:	7bbb      	ldrb	r3, [r7, #14]
2000bf06:	4619      	mov	r1, r3
2000bf08:	6878      	ldr	r0, [r7, #4]
2000bf0a:	f001 f931 	bl	2000d170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
2000bf0e:	6878      	ldr	r0, [r7, #4]
2000bf10:	f000 fd6d 	bl	2000c9ee <USBD_CtlSendStatus>

              break;
2000bf14:	e004      	b.n	2000bf20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
2000bf16:	6839      	ldr	r1, [r7, #0]
2000bf18:	6878      	ldr	r0, [r7, #4]
2000bf1a:	f000 fc8a 	bl	2000c832 <USBD_CtlError>
              break;
2000bf1e:	bf00      	nop
          }
          break;
2000bf20:	e109      	b.n	2000c136 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
2000bf22:	687b      	ldr	r3, [r7, #4]
2000bf24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000bf28:	b2db      	uxtb	r3, r3
2000bf2a:	2b02      	cmp	r3, #2
2000bf2c:	d002      	beq.n	2000bf34 <USBD_StdEPReq+0x124>
2000bf2e:	2b03      	cmp	r3, #3
2000bf30:	d016      	beq.n	2000bf60 <USBD_StdEPReq+0x150>
2000bf32:	e04b      	b.n	2000bfcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000bf34:	7bbb      	ldrb	r3, [r7, #14]
2000bf36:	2b00      	cmp	r3, #0
2000bf38:	d00d      	beq.n	2000bf56 <USBD_StdEPReq+0x146>
2000bf3a:	7bbb      	ldrb	r3, [r7, #14]
2000bf3c:	2b80      	cmp	r3, #128	@ 0x80
2000bf3e:	d00a      	beq.n	2000bf56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000bf40:	7bbb      	ldrb	r3, [r7, #14]
2000bf42:	4619      	mov	r1, r3
2000bf44:	6878      	ldr	r0, [r7, #4]
2000bf46:	f001 f913 	bl	2000d170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000bf4a:	2180      	movs	r1, #128	@ 0x80
2000bf4c:	6878      	ldr	r0, [r7, #4]
2000bf4e:	f001 f90f 	bl	2000d170 <USBD_LL_StallEP>
2000bf52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000bf54:	e040      	b.n	2000bfd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
2000bf56:	6839      	ldr	r1, [r7, #0]
2000bf58:	6878      	ldr	r0, [r7, #4]
2000bf5a:	f000 fc6a 	bl	2000c832 <USBD_CtlError>
              break;
2000bf5e:	e03b      	b.n	2000bfd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000bf60:	683b      	ldr	r3, [r7, #0]
2000bf62:	885b      	ldrh	r3, [r3, #2]
2000bf64:	2b00      	cmp	r3, #0
2000bf66:	d136      	bne.n	2000bfd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
2000bf68:	7bbb      	ldrb	r3, [r7, #14]
2000bf6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000bf6e:	2b00      	cmp	r3, #0
2000bf70:	d004      	beq.n	2000bf7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
2000bf72:	7bbb      	ldrb	r3, [r7, #14]
2000bf74:	4619      	mov	r1, r3
2000bf76:	6878      	ldr	r0, [r7, #4]
2000bf78:	f001 f919 	bl	2000d1ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
2000bf7c:	6878      	ldr	r0, [r7, #4]
2000bf7e:	f000 fd36 	bl	2000c9ee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
2000bf82:	7bbb      	ldrb	r3, [r7, #14]
2000bf84:	4619      	mov	r1, r3
2000bf86:	6878      	ldr	r0, [r7, #4]
2000bf88:	f7ff fde5 	bl	2000bb56 <USBD_CoreFindEP>
2000bf8c:	4603      	mov	r3, r0
2000bf8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000bf90:	7b7b      	ldrb	r3, [r7, #13]
2000bf92:	2bff      	cmp	r3, #255	@ 0xff
2000bf94:	d01f      	beq.n	2000bfd6 <USBD_StdEPReq+0x1c6>
2000bf96:	7b7b      	ldrb	r3, [r7, #13]
2000bf98:	2b00      	cmp	r3, #0
2000bf9a:	d11c      	bne.n	2000bfd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
2000bf9c:	7b7a      	ldrb	r2, [r7, #13]
2000bf9e:	687b      	ldr	r3, [r7, #4]
2000bfa0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
2000bfa4:	7b7a      	ldrb	r2, [r7, #13]
2000bfa6:	687b      	ldr	r3, [r7, #4]
2000bfa8:	32ae      	adds	r2, #174	@ 0xae
2000bfaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bfae:	689b      	ldr	r3, [r3, #8]
2000bfb0:	2b00      	cmp	r3, #0
2000bfb2:	d010      	beq.n	2000bfd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000bfb4:	7b7a      	ldrb	r2, [r7, #13]
2000bfb6:	687b      	ldr	r3, [r7, #4]
2000bfb8:	32ae      	adds	r2, #174	@ 0xae
2000bfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bfbe:	689b      	ldr	r3, [r3, #8]
2000bfc0:	6839      	ldr	r1, [r7, #0]
2000bfc2:	6878      	ldr	r0, [r7, #4]
2000bfc4:	4798      	blx	r3
2000bfc6:	4603      	mov	r3, r0
2000bfc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
2000bfca:	e004      	b.n	2000bfd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
2000bfcc:	6839      	ldr	r1, [r7, #0]
2000bfce:	6878      	ldr	r0, [r7, #4]
2000bfd0:	f000 fc2f 	bl	2000c832 <USBD_CtlError>
              break;
2000bfd4:	e000      	b.n	2000bfd8 <USBD_StdEPReq+0x1c8>
              break;
2000bfd6:	bf00      	nop
          }
          break;
2000bfd8:	e0ad      	b.n	2000c136 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
2000bfda:	687b      	ldr	r3, [r7, #4]
2000bfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000bfe0:	b2db      	uxtb	r3, r3
2000bfe2:	2b02      	cmp	r3, #2
2000bfe4:	d002      	beq.n	2000bfec <USBD_StdEPReq+0x1dc>
2000bfe6:	2b03      	cmp	r3, #3
2000bfe8:	d033      	beq.n	2000c052 <USBD_StdEPReq+0x242>
2000bfea:	e099      	b.n	2000c120 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000bfec:	7bbb      	ldrb	r3, [r7, #14]
2000bfee:	2b00      	cmp	r3, #0
2000bff0:	d007      	beq.n	2000c002 <USBD_StdEPReq+0x1f2>
2000bff2:	7bbb      	ldrb	r3, [r7, #14]
2000bff4:	2b80      	cmp	r3, #128	@ 0x80
2000bff6:	d004      	beq.n	2000c002 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
2000bff8:	6839      	ldr	r1, [r7, #0]
2000bffa:	6878      	ldr	r0, [r7, #4]
2000bffc:	f000 fc19 	bl	2000c832 <USBD_CtlError>
                break;
2000c000:	e093      	b.n	2000c12a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000c002:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000c006:	2b00      	cmp	r3, #0
2000c008:	da0b      	bge.n	2000c022 <USBD_StdEPReq+0x212>
2000c00a:	7bbb      	ldrb	r3, [r7, #14]
2000c00c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000c010:	4613      	mov	r3, r2
2000c012:	009b      	lsls	r3, r3, #2
2000c014:	4413      	add	r3, r2
2000c016:	009b      	lsls	r3, r3, #2
2000c018:	3310      	adds	r3, #16
2000c01a:	687a      	ldr	r2, [r7, #4]
2000c01c:	4413      	add	r3, r2
2000c01e:	3304      	adds	r3, #4
2000c020:	e00b      	b.n	2000c03a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000c022:	7bbb      	ldrb	r3, [r7, #14]
2000c024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000c028:	4613      	mov	r3, r2
2000c02a:	009b      	lsls	r3, r3, #2
2000c02c:	4413      	add	r3, r2
2000c02e:	009b      	lsls	r3, r3, #2
2000c030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000c034:	687a      	ldr	r2, [r7, #4]
2000c036:	4413      	add	r3, r2
2000c038:	3304      	adds	r3, #4
2000c03a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
2000c03c:	68bb      	ldr	r3, [r7, #8]
2000c03e:	2200      	movs	r2, #0
2000c040:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000c042:	68bb      	ldr	r3, [r7, #8]
2000c044:	330e      	adds	r3, #14
2000c046:	2202      	movs	r2, #2
2000c048:	4619      	mov	r1, r3
2000c04a:	6878      	ldr	r0, [r7, #4]
2000c04c:	f000 fc6e 	bl	2000c92c <USBD_CtlSendData>
              break;
2000c050:	e06b      	b.n	2000c12a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
2000c052:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000c056:	2b00      	cmp	r3, #0
2000c058:	da11      	bge.n	2000c07e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
2000c05a:	7bbb      	ldrb	r3, [r7, #14]
2000c05c:	f003 020f 	and.w	r2, r3, #15
2000c060:	6879      	ldr	r1, [r7, #4]
2000c062:	4613      	mov	r3, r2
2000c064:	009b      	lsls	r3, r3, #2
2000c066:	4413      	add	r3, r2
2000c068:	009b      	lsls	r3, r3, #2
2000c06a:	440b      	add	r3, r1
2000c06c:	3323      	adds	r3, #35	@ 0x23
2000c06e:	781b      	ldrb	r3, [r3, #0]
2000c070:	2b00      	cmp	r3, #0
2000c072:	d117      	bne.n	2000c0a4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000c074:	6839      	ldr	r1, [r7, #0]
2000c076:	6878      	ldr	r0, [r7, #4]
2000c078:	f000 fbdb 	bl	2000c832 <USBD_CtlError>
                  break;
2000c07c:	e055      	b.n	2000c12a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
2000c07e:	7bbb      	ldrb	r3, [r7, #14]
2000c080:	f003 020f 	and.w	r2, r3, #15
2000c084:	6879      	ldr	r1, [r7, #4]
2000c086:	4613      	mov	r3, r2
2000c088:	009b      	lsls	r3, r3, #2
2000c08a:	4413      	add	r3, r2
2000c08c:	009b      	lsls	r3, r3, #2
2000c08e:	440b      	add	r3, r1
2000c090:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000c094:	781b      	ldrb	r3, [r3, #0]
2000c096:	2b00      	cmp	r3, #0
2000c098:	d104      	bne.n	2000c0a4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000c09a:	6839      	ldr	r1, [r7, #0]
2000c09c:	6878      	ldr	r0, [r7, #4]
2000c09e:	f000 fbc8 	bl	2000c832 <USBD_CtlError>
                  break;
2000c0a2:	e042      	b.n	2000c12a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000c0a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000c0a8:	2b00      	cmp	r3, #0
2000c0aa:	da0b      	bge.n	2000c0c4 <USBD_StdEPReq+0x2b4>
2000c0ac:	7bbb      	ldrb	r3, [r7, #14]
2000c0ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000c0b2:	4613      	mov	r3, r2
2000c0b4:	009b      	lsls	r3, r3, #2
2000c0b6:	4413      	add	r3, r2
2000c0b8:	009b      	lsls	r3, r3, #2
2000c0ba:	3310      	adds	r3, #16
2000c0bc:	687a      	ldr	r2, [r7, #4]
2000c0be:	4413      	add	r3, r2
2000c0c0:	3304      	adds	r3, #4
2000c0c2:	e00b      	b.n	2000c0dc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000c0c4:	7bbb      	ldrb	r3, [r7, #14]
2000c0c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000c0ca:	4613      	mov	r3, r2
2000c0cc:	009b      	lsls	r3, r3, #2
2000c0ce:	4413      	add	r3, r2
2000c0d0:	009b      	lsls	r3, r3, #2
2000c0d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000c0d6:	687a      	ldr	r2, [r7, #4]
2000c0d8:	4413      	add	r3, r2
2000c0da:	3304      	adds	r3, #4
2000c0dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
2000c0de:	7bbb      	ldrb	r3, [r7, #14]
2000c0e0:	2b00      	cmp	r3, #0
2000c0e2:	d002      	beq.n	2000c0ea <USBD_StdEPReq+0x2da>
2000c0e4:	7bbb      	ldrb	r3, [r7, #14]
2000c0e6:	2b80      	cmp	r3, #128	@ 0x80
2000c0e8:	d103      	bne.n	2000c0f2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
2000c0ea:	68bb      	ldr	r3, [r7, #8]
2000c0ec:	2200      	movs	r2, #0
2000c0ee:	739a      	strb	r2, [r3, #14]
2000c0f0:	e00e      	b.n	2000c110 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
2000c0f2:	7bbb      	ldrb	r3, [r7, #14]
2000c0f4:	4619      	mov	r1, r3
2000c0f6:	6878      	ldr	r0, [r7, #4]
2000c0f8:	f001 f878 	bl	2000d1ec <USBD_LL_IsStallEP>
2000c0fc:	4603      	mov	r3, r0
2000c0fe:	2b00      	cmp	r3, #0
2000c100:	d003      	beq.n	2000c10a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
2000c102:	68bb      	ldr	r3, [r7, #8]
2000c104:	2201      	movs	r2, #1
2000c106:	739a      	strb	r2, [r3, #14]
2000c108:	e002      	b.n	2000c110 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
2000c10a:	68bb      	ldr	r3, [r7, #8]
2000c10c:	2200      	movs	r2, #0
2000c10e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000c110:	68bb      	ldr	r3, [r7, #8]
2000c112:	330e      	adds	r3, #14
2000c114:	2202      	movs	r2, #2
2000c116:	4619      	mov	r1, r3
2000c118:	6878      	ldr	r0, [r7, #4]
2000c11a:	f000 fc07 	bl	2000c92c <USBD_CtlSendData>
              break;
2000c11e:	e004      	b.n	2000c12a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
2000c120:	6839      	ldr	r1, [r7, #0]
2000c122:	6878      	ldr	r0, [r7, #4]
2000c124:	f000 fb85 	bl	2000c832 <USBD_CtlError>
              break;
2000c128:	bf00      	nop
          }
          break;
2000c12a:	e004      	b.n	2000c136 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
2000c12c:	6839      	ldr	r1, [r7, #0]
2000c12e:	6878      	ldr	r0, [r7, #4]
2000c130:	f000 fb7f 	bl	2000c832 <USBD_CtlError>
          break;
2000c134:	bf00      	nop
      }
      break;
2000c136:	e005      	b.n	2000c144 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
2000c138:	6839      	ldr	r1, [r7, #0]
2000c13a:	6878      	ldr	r0, [r7, #4]
2000c13c:	f000 fb79 	bl	2000c832 <USBD_CtlError>
      break;
2000c140:	e000      	b.n	2000c144 <USBD_StdEPReq+0x334>
      break;
2000c142:	bf00      	nop
  }

  return ret;
2000c144:	7bfb      	ldrb	r3, [r7, #15]
}
2000c146:	4618      	mov	r0, r3
2000c148:	3710      	adds	r7, #16
2000c14a:	46bd      	mov	sp, r7
2000c14c:	bd80      	pop	{r7, pc}
	...

2000c150 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c150:	b580      	push	{r7, lr}
2000c152:	b084      	sub	sp, #16
2000c154:	af00      	add	r7, sp, #0
2000c156:	6078      	str	r0, [r7, #4]
2000c158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000c15a:	2300      	movs	r3, #0
2000c15c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
2000c15e:	2300      	movs	r3, #0
2000c160:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
2000c162:	2300      	movs	r3, #0
2000c164:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
2000c166:	683b      	ldr	r3, [r7, #0]
2000c168:	885b      	ldrh	r3, [r3, #2]
2000c16a:	0a1b      	lsrs	r3, r3, #8
2000c16c:	b29b      	uxth	r3, r3
2000c16e:	3b01      	subs	r3, #1
2000c170:	2b0e      	cmp	r3, #14
2000c172:	f200 8152 	bhi.w	2000c41a <USBD_GetDescriptor+0x2ca>
2000c176:	a201      	add	r2, pc, #4	@ (adr r2, 2000c17c <USBD_GetDescriptor+0x2c>)
2000c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000c17c:	2000c1ed 	.word	0x2000c1ed
2000c180:	2000c205 	.word	0x2000c205
2000c184:	2000c245 	.word	0x2000c245
2000c188:	2000c41b 	.word	0x2000c41b
2000c18c:	2000c41b 	.word	0x2000c41b
2000c190:	2000c3bb 	.word	0x2000c3bb
2000c194:	2000c3e7 	.word	0x2000c3e7
2000c198:	2000c41b 	.word	0x2000c41b
2000c19c:	2000c41b 	.word	0x2000c41b
2000c1a0:	2000c41b 	.word	0x2000c41b
2000c1a4:	2000c41b 	.word	0x2000c41b
2000c1a8:	2000c41b 	.word	0x2000c41b
2000c1ac:	2000c41b 	.word	0x2000c41b
2000c1b0:	2000c41b 	.word	0x2000c41b
2000c1b4:	2000c1b9 	.word	0x2000c1b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
2000c1b8:	687b      	ldr	r3, [r7, #4]
2000c1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c1be:	69db      	ldr	r3, [r3, #28]
2000c1c0:	2b00      	cmp	r3, #0
2000c1c2:	d00b      	beq.n	2000c1dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
2000c1c4:	687b      	ldr	r3, [r7, #4]
2000c1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c1ca:	69db      	ldr	r3, [r3, #28]
2000c1cc:	687a      	ldr	r2, [r7, #4]
2000c1ce:	7c12      	ldrb	r2, [r2, #16]
2000c1d0:	f107 0108 	add.w	r1, r7, #8
2000c1d4:	4610      	mov	r0, r2
2000c1d6:	4798      	blx	r3
2000c1d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000c1da:	e126      	b.n	2000c42a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000c1dc:	6839      	ldr	r1, [r7, #0]
2000c1de:	6878      	ldr	r0, [r7, #4]
2000c1e0:	f000 fb27 	bl	2000c832 <USBD_CtlError>
        err++;
2000c1e4:	7afb      	ldrb	r3, [r7, #11]
2000c1e6:	3301      	adds	r3, #1
2000c1e8:	72fb      	strb	r3, [r7, #11]
      break;
2000c1ea:	e11e      	b.n	2000c42a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
2000c1ec:	687b      	ldr	r3, [r7, #4]
2000c1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c1f2:	681b      	ldr	r3, [r3, #0]
2000c1f4:	687a      	ldr	r2, [r7, #4]
2000c1f6:	7c12      	ldrb	r2, [r2, #16]
2000c1f8:	f107 0108 	add.w	r1, r7, #8
2000c1fc:	4610      	mov	r0, r2
2000c1fe:	4798      	blx	r3
2000c200:	60f8      	str	r0, [r7, #12]
      break;
2000c202:	e112      	b.n	2000c42a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000c204:	687b      	ldr	r3, [r7, #4]
2000c206:	7c1b      	ldrb	r3, [r3, #16]
2000c208:	2b00      	cmp	r3, #0
2000c20a:	d10d      	bne.n	2000c228 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
2000c20c:	687b      	ldr	r3, [r7, #4]
2000c20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000c212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000c214:	f107 0208 	add.w	r2, r7, #8
2000c218:	4610      	mov	r0, r2
2000c21a:	4798      	blx	r3
2000c21c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000c21e:	68fb      	ldr	r3, [r7, #12]
2000c220:	3301      	adds	r3, #1
2000c222:	2202      	movs	r2, #2
2000c224:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
2000c226:	e100      	b.n	2000c42a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
2000c228:	687b      	ldr	r3, [r7, #4]
2000c22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000c22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c230:	f107 0208 	add.w	r2, r7, #8
2000c234:	4610      	mov	r0, r2
2000c236:	4798      	blx	r3
2000c238:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000c23a:	68fb      	ldr	r3, [r7, #12]
2000c23c:	3301      	adds	r3, #1
2000c23e:	2202      	movs	r2, #2
2000c240:	701a      	strb	r2, [r3, #0]
      break;
2000c242:	e0f2      	b.n	2000c42a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
2000c244:	683b      	ldr	r3, [r7, #0]
2000c246:	885b      	ldrh	r3, [r3, #2]
2000c248:	b2db      	uxtb	r3, r3
2000c24a:	2b05      	cmp	r3, #5
2000c24c:	f200 80ac 	bhi.w	2000c3a8 <USBD_GetDescriptor+0x258>
2000c250:	a201      	add	r2, pc, #4	@ (adr r2, 2000c258 <USBD_GetDescriptor+0x108>)
2000c252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000c256:	bf00      	nop
2000c258:	2000c271 	.word	0x2000c271
2000c25c:	2000c2a5 	.word	0x2000c2a5
2000c260:	2000c2d9 	.word	0x2000c2d9
2000c264:	2000c30d 	.word	0x2000c30d
2000c268:	2000c341 	.word	0x2000c341
2000c26c:	2000c375 	.word	0x2000c375
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
2000c270:	687b      	ldr	r3, [r7, #4]
2000c272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c276:	685b      	ldr	r3, [r3, #4]
2000c278:	2b00      	cmp	r3, #0
2000c27a:	d00b      	beq.n	2000c294 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
2000c27c:	687b      	ldr	r3, [r7, #4]
2000c27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c282:	685b      	ldr	r3, [r3, #4]
2000c284:	687a      	ldr	r2, [r7, #4]
2000c286:	7c12      	ldrb	r2, [r2, #16]
2000c288:	f107 0108 	add.w	r1, r7, #8
2000c28c:	4610      	mov	r0, r2
2000c28e:	4798      	blx	r3
2000c290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c292:	e091      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c294:	6839      	ldr	r1, [r7, #0]
2000c296:	6878      	ldr	r0, [r7, #4]
2000c298:	f000 facb 	bl	2000c832 <USBD_CtlError>
            err++;
2000c29c:	7afb      	ldrb	r3, [r7, #11]
2000c29e:	3301      	adds	r3, #1
2000c2a0:	72fb      	strb	r3, [r7, #11]
          break;
2000c2a2:	e089      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
2000c2a4:	687b      	ldr	r3, [r7, #4]
2000c2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c2aa:	689b      	ldr	r3, [r3, #8]
2000c2ac:	2b00      	cmp	r3, #0
2000c2ae:	d00b      	beq.n	2000c2c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
2000c2b0:	687b      	ldr	r3, [r7, #4]
2000c2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c2b6:	689b      	ldr	r3, [r3, #8]
2000c2b8:	687a      	ldr	r2, [r7, #4]
2000c2ba:	7c12      	ldrb	r2, [r2, #16]
2000c2bc:	f107 0108 	add.w	r1, r7, #8
2000c2c0:	4610      	mov	r0, r2
2000c2c2:	4798      	blx	r3
2000c2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c2c6:	e077      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c2c8:	6839      	ldr	r1, [r7, #0]
2000c2ca:	6878      	ldr	r0, [r7, #4]
2000c2cc:	f000 fab1 	bl	2000c832 <USBD_CtlError>
            err++;
2000c2d0:	7afb      	ldrb	r3, [r7, #11]
2000c2d2:	3301      	adds	r3, #1
2000c2d4:	72fb      	strb	r3, [r7, #11]
          break;
2000c2d6:	e06f      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
2000c2d8:	687b      	ldr	r3, [r7, #4]
2000c2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c2de:	68db      	ldr	r3, [r3, #12]
2000c2e0:	2b00      	cmp	r3, #0
2000c2e2:	d00b      	beq.n	2000c2fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
2000c2e4:	687b      	ldr	r3, [r7, #4]
2000c2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c2ea:	68db      	ldr	r3, [r3, #12]
2000c2ec:	687a      	ldr	r2, [r7, #4]
2000c2ee:	7c12      	ldrb	r2, [r2, #16]
2000c2f0:	f107 0108 	add.w	r1, r7, #8
2000c2f4:	4610      	mov	r0, r2
2000c2f6:	4798      	blx	r3
2000c2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c2fa:	e05d      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c2fc:	6839      	ldr	r1, [r7, #0]
2000c2fe:	6878      	ldr	r0, [r7, #4]
2000c300:	f000 fa97 	bl	2000c832 <USBD_CtlError>
            err++;
2000c304:	7afb      	ldrb	r3, [r7, #11]
2000c306:	3301      	adds	r3, #1
2000c308:	72fb      	strb	r3, [r7, #11]
          break;
2000c30a:	e055      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
2000c30c:	687b      	ldr	r3, [r7, #4]
2000c30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c312:	691b      	ldr	r3, [r3, #16]
2000c314:	2b00      	cmp	r3, #0
2000c316:	d00b      	beq.n	2000c330 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
2000c318:	687b      	ldr	r3, [r7, #4]
2000c31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c31e:	691b      	ldr	r3, [r3, #16]
2000c320:	687a      	ldr	r2, [r7, #4]
2000c322:	7c12      	ldrb	r2, [r2, #16]
2000c324:	f107 0108 	add.w	r1, r7, #8
2000c328:	4610      	mov	r0, r2
2000c32a:	4798      	blx	r3
2000c32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c32e:	e043      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c330:	6839      	ldr	r1, [r7, #0]
2000c332:	6878      	ldr	r0, [r7, #4]
2000c334:	f000 fa7d 	bl	2000c832 <USBD_CtlError>
            err++;
2000c338:	7afb      	ldrb	r3, [r7, #11]
2000c33a:	3301      	adds	r3, #1
2000c33c:	72fb      	strb	r3, [r7, #11]
          break;
2000c33e:	e03b      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
2000c340:	687b      	ldr	r3, [r7, #4]
2000c342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c346:	695b      	ldr	r3, [r3, #20]
2000c348:	2b00      	cmp	r3, #0
2000c34a:	d00b      	beq.n	2000c364 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
2000c34c:	687b      	ldr	r3, [r7, #4]
2000c34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c352:	695b      	ldr	r3, [r3, #20]
2000c354:	687a      	ldr	r2, [r7, #4]
2000c356:	7c12      	ldrb	r2, [r2, #16]
2000c358:	f107 0108 	add.w	r1, r7, #8
2000c35c:	4610      	mov	r0, r2
2000c35e:	4798      	blx	r3
2000c360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c362:	e029      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c364:	6839      	ldr	r1, [r7, #0]
2000c366:	6878      	ldr	r0, [r7, #4]
2000c368:	f000 fa63 	bl	2000c832 <USBD_CtlError>
            err++;
2000c36c:	7afb      	ldrb	r3, [r7, #11]
2000c36e:	3301      	adds	r3, #1
2000c370:	72fb      	strb	r3, [r7, #11]
          break;
2000c372:	e021      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
2000c374:	687b      	ldr	r3, [r7, #4]
2000c376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c37a:	699b      	ldr	r3, [r3, #24]
2000c37c:	2b00      	cmp	r3, #0
2000c37e:	d00b      	beq.n	2000c398 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
2000c380:	687b      	ldr	r3, [r7, #4]
2000c382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c386:	699b      	ldr	r3, [r3, #24]
2000c388:	687a      	ldr	r2, [r7, #4]
2000c38a:	7c12      	ldrb	r2, [r2, #16]
2000c38c:	f107 0108 	add.w	r1, r7, #8
2000c390:	4610      	mov	r0, r2
2000c392:	4798      	blx	r3
2000c394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c396:	e00f      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c398:	6839      	ldr	r1, [r7, #0]
2000c39a:	6878      	ldr	r0, [r7, #4]
2000c39c:	f000 fa49 	bl	2000c832 <USBD_CtlError>
            err++;
2000c3a0:	7afb      	ldrb	r3, [r7, #11]
2000c3a2:	3301      	adds	r3, #1
2000c3a4:	72fb      	strb	r3, [r7, #11]
          break;
2000c3a6:	e007      	b.n	2000c3b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
2000c3a8:	6839      	ldr	r1, [r7, #0]
2000c3aa:	6878      	ldr	r0, [r7, #4]
2000c3ac:	f000 fa41 	bl	2000c832 <USBD_CtlError>
          err++;
2000c3b0:	7afb      	ldrb	r3, [r7, #11]
2000c3b2:	3301      	adds	r3, #1
2000c3b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
2000c3b6:	bf00      	nop
      }
      break;
2000c3b8:	e037      	b.n	2000c42a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000c3ba:	687b      	ldr	r3, [r7, #4]
2000c3bc:	7c1b      	ldrb	r3, [r3, #16]
2000c3be:	2b00      	cmp	r3, #0
2000c3c0:	d109      	bne.n	2000c3d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
2000c3c2:	687b      	ldr	r3, [r7, #4]
2000c3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000c3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000c3ca:	f107 0208 	add.w	r2, r7, #8
2000c3ce:	4610      	mov	r0, r2
2000c3d0:	4798      	blx	r3
2000c3d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000c3d4:	e029      	b.n	2000c42a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000c3d6:	6839      	ldr	r1, [r7, #0]
2000c3d8:	6878      	ldr	r0, [r7, #4]
2000c3da:	f000 fa2a 	bl	2000c832 <USBD_CtlError>
        err++;
2000c3de:	7afb      	ldrb	r3, [r7, #11]
2000c3e0:	3301      	adds	r3, #1
2000c3e2:	72fb      	strb	r3, [r7, #11]
      break;
2000c3e4:	e021      	b.n	2000c42a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000c3e6:	687b      	ldr	r3, [r7, #4]
2000c3e8:	7c1b      	ldrb	r3, [r3, #16]
2000c3ea:	2b00      	cmp	r3, #0
2000c3ec:	d10d      	bne.n	2000c40a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
2000c3ee:	687b      	ldr	r3, [r7, #4]
2000c3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000c3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000c3f6:	f107 0208 	add.w	r2, r7, #8
2000c3fa:	4610      	mov	r0, r2
2000c3fc:	4798      	blx	r3
2000c3fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
2000c400:	68fb      	ldr	r3, [r7, #12]
2000c402:	3301      	adds	r3, #1
2000c404:	2207      	movs	r2, #7
2000c406:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000c408:	e00f      	b.n	2000c42a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000c40a:	6839      	ldr	r1, [r7, #0]
2000c40c:	6878      	ldr	r0, [r7, #4]
2000c40e:	f000 fa10 	bl	2000c832 <USBD_CtlError>
        err++;
2000c412:	7afb      	ldrb	r3, [r7, #11]
2000c414:	3301      	adds	r3, #1
2000c416:	72fb      	strb	r3, [r7, #11]
      break;
2000c418:	e007      	b.n	2000c42a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
2000c41a:	6839      	ldr	r1, [r7, #0]
2000c41c:	6878      	ldr	r0, [r7, #4]
2000c41e:	f000 fa08 	bl	2000c832 <USBD_CtlError>
      err++;
2000c422:	7afb      	ldrb	r3, [r7, #11]
2000c424:	3301      	adds	r3, #1
2000c426:	72fb      	strb	r3, [r7, #11]
      break;
2000c428:	bf00      	nop
  }

  if (err != 0U)
2000c42a:	7afb      	ldrb	r3, [r7, #11]
2000c42c:	2b00      	cmp	r3, #0
2000c42e:	d11e      	bne.n	2000c46e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
2000c430:	683b      	ldr	r3, [r7, #0]
2000c432:	88db      	ldrh	r3, [r3, #6]
2000c434:	2b00      	cmp	r3, #0
2000c436:	d016      	beq.n	2000c466 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
2000c438:	893b      	ldrh	r3, [r7, #8]
2000c43a:	2b00      	cmp	r3, #0
2000c43c:	d00e      	beq.n	2000c45c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
2000c43e:	683b      	ldr	r3, [r7, #0]
2000c440:	88da      	ldrh	r2, [r3, #6]
2000c442:	893b      	ldrh	r3, [r7, #8]
2000c444:	4293      	cmp	r3, r2
2000c446:	bf28      	it	cs
2000c448:	4613      	movcs	r3, r2
2000c44a:	b29b      	uxth	r3, r3
2000c44c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
2000c44e:	893b      	ldrh	r3, [r7, #8]
2000c450:	461a      	mov	r2, r3
2000c452:	68f9      	ldr	r1, [r7, #12]
2000c454:	6878      	ldr	r0, [r7, #4]
2000c456:	f000 fa69 	bl	2000c92c <USBD_CtlSendData>
2000c45a:	e009      	b.n	2000c470 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
2000c45c:	6839      	ldr	r1, [r7, #0]
2000c45e:	6878      	ldr	r0, [r7, #4]
2000c460:	f000 f9e7 	bl	2000c832 <USBD_CtlError>
2000c464:	e004      	b.n	2000c470 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
2000c466:	6878      	ldr	r0, [r7, #4]
2000c468:	f000 fac1 	bl	2000c9ee <USBD_CtlSendStatus>
2000c46c:	e000      	b.n	2000c470 <USBD_GetDescriptor+0x320>
    return;
2000c46e:	bf00      	nop
  }
}
2000c470:	3710      	adds	r7, #16
2000c472:	46bd      	mov	sp, r7
2000c474:	bd80      	pop	{r7, pc}
2000c476:	bf00      	nop

2000c478 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c478:	b580      	push	{r7, lr}
2000c47a:	b084      	sub	sp, #16
2000c47c:	af00      	add	r7, sp, #0
2000c47e:	6078      	str	r0, [r7, #4]
2000c480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
2000c482:	683b      	ldr	r3, [r7, #0]
2000c484:	889b      	ldrh	r3, [r3, #4]
2000c486:	2b00      	cmp	r3, #0
2000c488:	d131      	bne.n	2000c4ee <USBD_SetAddress+0x76>
2000c48a:	683b      	ldr	r3, [r7, #0]
2000c48c:	88db      	ldrh	r3, [r3, #6]
2000c48e:	2b00      	cmp	r3, #0
2000c490:	d12d      	bne.n	2000c4ee <USBD_SetAddress+0x76>
2000c492:	683b      	ldr	r3, [r7, #0]
2000c494:	885b      	ldrh	r3, [r3, #2]
2000c496:	2b7f      	cmp	r3, #127	@ 0x7f
2000c498:	d829      	bhi.n	2000c4ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
2000c49a:	683b      	ldr	r3, [r7, #0]
2000c49c:	885b      	ldrh	r3, [r3, #2]
2000c49e:	b2db      	uxtb	r3, r3
2000c4a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000c4a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c4a6:	687b      	ldr	r3, [r7, #4]
2000c4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c4ac:	b2db      	uxtb	r3, r3
2000c4ae:	2b03      	cmp	r3, #3
2000c4b0:	d104      	bne.n	2000c4bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
2000c4b2:	6839      	ldr	r1, [r7, #0]
2000c4b4:	6878      	ldr	r0, [r7, #4]
2000c4b6:	f000 f9bc 	bl	2000c832 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c4ba:	e01d      	b.n	2000c4f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
2000c4bc:	687b      	ldr	r3, [r7, #4]
2000c4be:	7bfa      	ldrb	r2, [r7, #15]
2000c4c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
2000c4c4:	7bfb      	ldrb	r3, [r7, #15]
2000c4c6:	4619      	mov	r1, r3
2000c4c8:	6878      	ldr	r0, [r7, #4]
2000c4ca:	f000 febb 	bl	2000d244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
2000c4ce:	6878      	ldr	r0, [r7, #4]
2000c4d0:	f000 fa8d 	bl	2000c9ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
2000c4d4:	7bfb      	ldrb	r3, [r7, #15]
2000c4d6:	2b00      	cmp	r3, #0
2000c4d8:	d004      	beq.n	2000c4e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000c4da:	687b      	ldr	r3, [r7, #4]
2000c4dc:	2202      	movs	r2, #2
2000c4de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c4e2:	e009      	b.n	2000c4f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
2000c4e4:	687b      	ldr	r3, [r7, #4]
2000c4e6:	2201      	movs	r2, #1
2000c4e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c4ec:	e004      	b.n	2000c4f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
2000c4ee:	6839      	ldr	r1, [r7, #0]
2000c4f0:	6878      	ldr	r0, [r7, #4]
2000c4f2:	f000 f99e 	bl	2000c832 <USBD_CtlError>
  }
}
2000c4f6:	bf00      	nop
2000c4f8:	bf00      	nop
2000c4fa:	3710      	adds	r7, #16
2000c4fc:	46bd      	mov	sp, r7
2000c4fe:	bd80      	pop	{r7, pc}

2000c500 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c500:	b580      	push	{r7, lr}
2000c502:	b084      	sub	sp, #16
2000c504:	af00      	add	r7, sp, #0
2000c506:	6078      	str	r0, [r7, #4]
2000c508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000c50a:	2300      	movs	r3, #0
2000c50c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
2000c50e:	683b      	ldr	r3, [r7, #0]
2000c510:	885b      	ldrh	r3, [r3, #2]
2000c512:	b2da      	uxtb	r2, r3
2000c514:	4b4e      	ldr	r3, [pc, #312]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c516:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
2000c518:	4b4d      	ldr	r3, [pc, #308]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c51a:	781b      	ldrb	r3, [r3, #0]
2000c51c:	2b01      	cmp	r3, #1
2000c51e:	d905      	bls.n	2000c52c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
2000c520:	6839      	ldr	r1, [r7, #0]
2000c522:	6878      	ldr	r0, [r7, #4]
2000c524:	f000 f985 	bl	2000c832 <USBD_CtlError>
    return USBD_FAIL;
2000c528:	2303      	movs	r3, #3
2000c52a:	e08c      	b.n	2000c646 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
2000c52c:	687b      	ldr	r3, [r7, #4]
2000c52e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c532:	b2db      	uxtb	r3, r3
2000c534:	2b02      	cmp	r3, #2
2000c536:	d002      	beq.n	2000c53e <USBD_SetConfig+0x3e>
2000c538:	2b03      	cmp	r3, #3
2000c53a:	d029      	beq.n	2000c590 <USBD_SetConfig+0x90>
2000c53c:	e075      	b.n	2000c62a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
2000c53e:	4b44      	ldr	r3, [pc, #272]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c540:	781b      	ldrb	r3, [r3, #0]
2000c542:	2b00      	cmp	r3, #0
2000c544:	d020      	beq.n	2000c588 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
2000c546:	4b42      	ldr	r3, [pc, #264]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c548:	781b      	ldrb	r3, [r3, #0]
2000c54a:	461a      	mov	r2, r3
2000c54c:	687b      	ldr	r3, [r7, #4]
2000c54e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
2000c550:	4b3f      	ldr	r3, [pc, #252]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c552:	781b      	ldrb	r3, [r3, #0]
2000c554:	4619      	mov	r1, r3
2000c556:	6878      	ldr	r0, [r7, #4]
2000c558:	f7fe ffa5 	bl	2000b4a6 <USBD_SetClassConfig>
2000c55c:	4603      	mov	r3, r0
2000c55e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
2000c560:	7bfb      	ldrb	r3, [r7, #15]
2000c562:	2b00      	cmp	r3, #0
2000c564:	d008      	beq.n	2000c578 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
2000c566:	6839      	ldr	r1, [r7, #0]
2000c568:	6878      	ldr	r0, [r7, #4]
2000c56a:	f000 f962 	bl	2000c832 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000c56e:	687b      	ldr	r3, [r7, #4]
2000c570:	2202      	movs	r2, #2
2000c572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000c576:	e065      	b.n	2000c644 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000c578:	6878      	ldr	r0, [r7, #4]
2000c57a:	f000 fa38 	bl	2000c9ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
2000c57e:	687b      	ldr	r3, [r7, #4]
2000c580:	2203      	movs	r2, #3
2000c582:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000c586:	e05d      	b.n	2000c644 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000c588:	6878      	ldr	r0, [r7, #4]
2000c58a:	f000 fa30 	bl	2000c9ee <USBD_CtlSendStatus>
      break;
2000c58e:	e059      	b.n	2000c644 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
2000c590:	4b2f      	ldr	r3, [pc, #188]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c592:	781b      	ldrb	r3, [r3, #0]
2000c594:	2b00      	cmp	r3, #0
2000c596:	d112      	bne.n	2000c5be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000c598:	687b      	ldr	r3, [r7, #4]
2000c59a:	2202      	movs	r2, #2
2000c59c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
2000c5a0:	4b2b      	ldr	r3, [pc, #172]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c5a2:	781b      	ldrb	r3, [r3, #0]
2000c5a4:	461a      	mov	r2, r3
2000c5a6:	687b      	ldr	r3, [r7, #4]
2000c5a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
2000c5aa:	4b29      	ldr	r3, [pc, #164]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c5ac:	781b      	ldrb	r3, [r3, #0]
2000c5ae:	4619      	mov	r1, r3
2000c5b0:	6878      	ldr	r0, [r7, #4]
2000c5b2:	f7fe ff94 	bl	2000b4de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
2000c5b6:	6878      	ldr	r0, [r7, #4]
2000c5b8:	f000 fa19 	bl	2000c9ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000c5bc:	e042      	b.n	2000c644 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
2000c5be:	4b24      	ldr	r3, [pc, #144]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c5c0:	781b      	ldrb	r3, [r3, #0]
2000c5c2:	461a      	mov	r2, r3
2000c5c4:	687b      	ldr	r3, [r7, #4]
2000c5c6:	685b      	ldr	r3, [r3, #4]
2000c5c8:	429a      	cmp	r2, r3
2000c5ca:	d02a      	beq.n	2000c622 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000c5cc:	687b      	ldr	r3, [r7, #4]
2000c5ce:	685b      	ldr	r3, [r3, #4]
2000c5d0:	b2db      	uxtb	r3, r3
2000c5d2:	4619      	mov	r1, r3
2000c5d4:	6878      	ldr	r0, [r7, #4]
2000c5d6:	f7fe ff82 	bl	2000b4de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
2000c5da:	4b1d      	ldr	r3, [pc, #116]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c5dc:	781b      	ldrb	r3, [r3, #0]
2000c5de:	461a      	mov	r2, r3
2000c5e0:	687b      	ldr	r3, [r7, #4]
2000c5e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
2000c5e4:	4b1a      	ldr	r3, [pc, #104]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c5e6:	781b      	ldrb	r3, [r3, #0]
2000c5e8:	4619      	mov	r1, r3
2000c5ea:	6878      	ldr	r0, [r7, #4]
2000c5ec:	f7fe ff5b 	bl	2000b4a6 <USBD_SetClassConfig>
2000c5f0:	4603      	mov	r3, r0
2000c5f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
2000c5f4:	7bfb      	ldrb	r3, [r7, #15]
2000c5f6:	2b00      	cmp	r3, #0
2000c5f8:	d00f      	beq.n	2000c61a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
2000c5fa:	6839      	ldr	r1, [r7, #0]
2000c5fc:	6878      	ldr	r0, [r7, #4]
2000c5fe:	f000 f918 	bl	2000c832 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000c602:	687b      	ldr	r3, [r7, #4]
2000c604:	685b      	ldr	r3, [r3, #4]
2000c606:	b2db      	uxtb	r3, r3
2000c608:	4619      	mov	r1, r3
2000c60a:	6878      	ldr	r0, [r7, #4]
2000c60c:	f7fe ff67 	bl	2000b4de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000c610:	687b      	ldr	r3, [r7, #4]
2000c612:	2202      	movs	r2, #2
2000c614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000c618:	e014      	b.n	2000c644 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000c61a:	6878      	ldr	r0, [r7, #4]
2000c61c:	f000 f9e7 	bl	2000c9ee <USBD_CtlSendStatus>
      break;
2000c620:	e010      	b.n	2000c644 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000c622:	6878      	ldr	r0, [r7, #4]
2000c624:	f000 f9e3 	bl	2000c9ee <USBD_CtlSendStatus>
      break;
2000c628:	e00c      	b.n	2000c644 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
2000c62a:	6839      	ldr	r1, [r7, #0]
2000c62c:	6878      	ldr	r0, [r7, #4]
2000c62e:	f000 f900 	bl	2000c832 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
2000c632:	4b07      	ldr	r3, [pc, #28]	@ (2000c650 <USBD_SetConfig+0x150>)
2000c634:	781b      	ldrb	r3, [r3, #0]
2000c636:	4619      	mov	r1, r3
2000c638:	6878      	ldr	r0, [r7, #4]
2000c63a:	f7fe ff50 	bl	2000b4de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
2000c63e:	2303      	movs	r3, #3
2000c640:	73fb      	strb	r3, [r7, #15]
      break;
2000c642:	bf00      	nop
  }

  return ret;
2000c644:	7bfb      	ldrb	r3, [r7, #15]
}
2000c646:	4618      	mov	r0, r3
2000c648:	3710      	adds	r7, #16
2000c64a:	46bd      	mov	sp, r7
2000c64c:	bd80      	pop	{r7, pc}
2000c64e:	bf00      	nop
2000c650:	2000ee08 	.word	0x2000ee08

2000c654 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c654:	b580      	push	{r7, lr}
2000c656:	b082      	sub	sp, #8
2000c658:	af00      	add	r7, sp, #0
2000c65a:	6078      	str	r0, [r7, #4]
2000c65c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
2000c65e:	683b      	ldr	r3, [r7, #0]
2000c660:	88db      	ldrh	r3, [r3, #6]
2000c662:	2b01      	cmp	r3, #1
2000c664:	d004      	beq.n	2000c670 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
2000c666:	6839      	ldr	r1, [r7, #0]
2000c668:	6878      	ldr	r0, [r7, #4]
2000c66a:	f000 f8e2 	bl	2000c832 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
2000c66e:	e023      	b.n	2000c6b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
2000c670:	687b      	ldr	r3, [r7, #4]
2000c672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c676:	b2db      	uxtb	r3, r3
2000c678:	2b02      	cmp	r3, #2
2000c67a:	dc02      	bgt.n	2000c682 <USBD_GetConfig+0x2e>
2000c67c:	2b00      	cmp	r3, #0
2000c67e:	dc03      	bgt.n	2000c688 <USBD_GetConfig+0x34>
2000c680:	e015      	b.n	2000c6ae <USBD_GetConfig+0x5a>
2000c682:	2b03      	cmp	r3, #3
2000c684:	d00b      	beq.n	2000c69e <USBD_GetConfig+0x4a>
2000c686:	e012      	b.n	2000c6ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
2000c688:	687b      	ldr	r3, [r7, #4]
2000c68a:	2200      	movs	r2, #0
2000c68c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
2000c68e:	687b      	ldr	r3, [r7, #4]
2000c690:	3308      	adds	r3, #8
2000c692:	2201      	movs	r2, #1
2000c694:	4619      	mov	r1, r3
2000c696:	6878      	ldr	r0, [r7, #4]
2000c698:	f000 f948 	bl	2000c92c <USBD_CtlSendData>
        break;
2000c69c:	e00c      	b.n	2000c6b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
2000c69e:	687b      	ldr	r3, [r7, #4]
2000c6a0:	3304      	adds	r3, #4
2000c6a2:	2201      	movs	r2, #1
2000c6a4:	4619      	mov	r1, r3
2000c6a6:	6878      	ldr	r0, [r7, #4]
2000c6a8:	f000 f940 	bl	2000c92c <USBD_CtlSendData>
        break;
2000c6ac:	e004      	b.n	2000c6b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
2000c6ae:	6839      	ldr	r1, [r7, #0]
2000c6b0:	6878      	ldr	r0, [r7, #4]
2000c6b2:	f000 f8be 	bl	2000c832 <USBD_CtlError>
        break;
2000c6b6:	bf00      	nop
}
2000c6b8:	bf00      	nop
2000c6ba:	3708      	adds	r7, #8
2000c6bc:	46bd      	mov	sp, r7
2000c6be:	bd80      	pop	{r7, pc}

2000c6c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c6c0:	b580      	push	{r7, lr}
2000c6c2:	b082      	sub	sp, #8
2000c6c4:	af00      	add	r7, sp, #0
2000c6c6:	6078      	str	r0, [r7, #4]
2000c6c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000c6ca:	687b      	ldr	r3, [r7, #4]
2000c6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c6d0:	b2db      	uxtb	r3, r3
2000c6d2:	3b01      	subs	r3, #1
2000c6d4:	2b02      	cmp	r3, #2
2000c6d6:	d81e      	bhi.n	2000c716 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
2000c6d8:	683b      	ldr	r3, [r7, #0]
2000c6da:	88db      	ldrh	r3, [r3, #6]
2000c6dc:	2b02      	cmp	r3, #2
2000c6de:	d004      	beq.n	2000c6ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
2000c6e0:	6839      	ldr	r1, [r7, #0]
2000c6e2:	6878      	ldr	r0, [r7, #4]
2000c6e4:	f000 f8a5 	bl	2000c832 <USBD_CtlError>
        break;
2000c6e8:	e01a      	b.n	2000c720 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
2000c6ea:	687b      	ldr	r3, [r7, #4]
2000c6ec:	2201      	movs	r2, #1
2000c6ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
2000c6f0:	687b      	ldr	r3, [r7, #4]
2000c6f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
2000c6f6:	2b00      	cmp	r3, #0
2000c6f8:	d005      	beq.n	2000c706 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
2000c6fa:	687b      	ldr	r3, [r7, #4]
2000c6fc:	68db      	ldr	r3, [r3, #12]
2000c6fe:	f043 0202 	orr.w	r2, r3, #2
2000c702:	687b      	ldr	r3, [r7, #4]
2000c704:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
2000c706:	687b      	ldr	r3, [r7, #4]
2000c708:	330c      	adds	r3, #12
2000c70a:	2202      	movs	r2, #2
2000c70c:	4619      	mov	r1, r3
2000c70e:	6878      	ldr	r0, [r7, #4]
2000c710:	f000 f90c 	bl	2000c92c <USBD_CtlSendData>
      break;
2000c714:	e004      	b.n	2000c720 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
2000c716:	6839      	ldr	r1, [r7, #0]
2000c718:	6878      	ldr	r0, [r7, #4]
2000c71a:	f000 f88a 	bl	2000c832 <USBD_CtlError>
      break;
2000c71e:	bf00      	nop
  }
}
2000c720:	bf00      	nop
2000c722:	3708      	adds	r7, #8
2000c724:	46bd      	mov	sp, r7
2000c726:	bd80      	pop	{r7, pc}

2000c728 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c728:	b580      	push	{r7, lr}
2000c72a:	b082      	sub	sp, #8
2000c72c:	af00      	add	r7, sp, #0
2000c72e:	6078      	str	r0, [r7, #4]
2000c730:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000c732:	683b      	ldr	r3, [r7, #0]
2000c734:	885b      	ldrh	r3, [r3, #2]
2000c736:	2b01      	cmp	r3, #1
2000c738:	d107      	bne.n	2000c74a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
2000c73a:	687b      	ldr	r3, [r7, #4]
2000c73c:	2201      	movs	r2, #1
2000c73e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
2000c742:	6878      	ldr	r0, [r7, #4]
2000c744:	f000 f953 	bl	2000c9ee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
2000c748:	e013      	b.n	2000c772 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
2000c74a:	683b      	ldr	r3, [r7, #0]
2000c74c:	885b      	ldrh	r3, [r3, #2]
2000c74e:	2b02      	cmp	r3, #2
2000c750:	d10b      	bne.n	2000c76a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
2000c752:	683b      	ldr	r3, [r7, #0]
2000c754:	889b      	ldrh	r3, [r3, #4]
2000c756:	0a1b      	lsrs	r3, r3, #8
2000c758:	b29b      	uxth	r3, r3
2000c75a:	b2da      	uxtb	r2, r3
2000c75c:	687b      	ldr	r3, [r7, #4]
2000c75e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
2000c762:	6878      	ldr	r0, [r7, #4]
2000c764:	f000 f943 	bl	2000c9ee <USBD_CtlSendStatus>
}
2000c768:	e003      	b.n	2000c772 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
2000c76a:	6839      	ldr	r1, [r7, #0]
2000c76c:	6878      	ldr	r0, [r7, #4]
2000c76e:	f000 f860 	bl	2000c832 <USBD_CtlError>
}
2000c772:	bf00      	nop
2000c774:	3708      	adds	r7, #8
2000c776:	46bd      	mov	sp, r7
2000c778:	bd80      	pop	{r7, pc}

2000c77a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c77a:	b580      	push	{r7, lr}
2000c77c:	b082      	sub	sp, #8
2000c77e:	af00      	add	r7, sp, #0
2000c780:	6078      	str	r0, [r7, #4]
2000c782:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000c784:	687b      	ldr	r3, [r7, #4]
2000c786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c78a:	b2db      	uxtb	r3, r3
2000c78c:	3b01      	subs	r3, #1
2000c78e:	2b02      	cmp	r3, #2
2000c790:	d80b      	bhi.n	2000c7aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000c792:	683b      	ldr	r3, [r7, #0]
2000c794:	885b      	ldrh	r3, [r3, #2]
2000c796:	2b01      	cmp	r3, #1
2000c798:	d10c      	bne.n	2000c7b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
2000c79a:	687b      	ldr	r3, [r7, #4]
2000c79c:	2200      	movs	r2, #0
2000c79e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
2000c7a2:	6878      	ldr	r0, [r7, #4]
2000c7a4:	f000 f923 	bl	2000c9ee <USBD_CtlSendStatus>
      }
      break;
2000c7a8:	e004      	b.n	2000c7b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
2000c7aa:	6839      	ldr	r1, [r7, #0]
2000c7ac:	6878      	ldr	r0, [r7, #4]
2000c7ae:	f000 f840 	bl	2000c832 <USBD_CtlError>
      break;
2000c7b2:	e000      	b.n	2000c7b6 <USBD_ClrFeature+0x3c>
      break;
2000c7b4:	bf00      	nop
  }
}
2000c7b6:	bf00      	nop
2000c7b8:	3708      	adds	r7, #8
2000c7ba:	46bd      	mov	sp, r7
2000c7bc:	bd80      	pop	{r7, pc}

2000c7be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
2000c7be:	b580      	push	{r7, lr}
2000c7c0:	b084      	sub	sp, #16
2000c7c2:	af00      	add	r7, sp, #0
2000c7c4:	6078      	str	r0, [r7, #4]
2000c7c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
2000c7c8:	683b      	ldr	r3, [r7, #0]
2000c7ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
2000c7cc:	68fb      	ldr	r3, [r7, #12]
2000c7ce:	781a      	ldrb	r2, [r3, #0]
2000c7d0:	687b      	ldr	r3, [r7, #4]
2000c7d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
2000c7d4:	68fb      	ldr	r3, [r7, #12]
2000c7d6:	3301      	adds	r3, #1
2000c7d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
2000c7da:	68fb      	ldr	r3, [r7, #12]
2000c7dc:	781a      	ldrb	r2, [r3, #0]
2000c7de:	687b      	ldr	r3, [r7, #4]
2000c7e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
2000c7e2:	68fb      	ldr	r3, [r7, #12]
2000c7e4:	3301      	adds	r3, #1
2000c7e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
2000c7e8:	68f8      	ldr	r0, [r7, #12]
2000c7ea:	f7ff fa15 	bl	2000bc18 <SWAPBYTE>
2000c7ee:	4603      	mov	r3, r0
2000c7f0:	461a      	mov	r2, r3
2000c7f2:	687b      	ldr	r3, [r7, #4]
2000c7f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
2000c7f6:	68fb      	ldr	r3, [r7, #12]
2000c7f8:	3301      	adds	r3, #1
2000c7fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000c7fc:	68fb      	ldr	r3, [r7, #12]
2000c7fe:	3301      	adds	r3, #1
2000c800:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
2000c802:	68f8      	ldr	r0, [r7, #12]
2000c804:	f7ff fa08 	bl	2000bc18 <SWAPBYTE>
2000c808:	4603      	mov	r3, r0
2000c80a:	461a      	mov	r2, r3
2000c80c:	687b      	ldr	r3, [r7, #4]
2000c80e:	809a      	strh	r2, [r3, #4]

  pbuff++;
2000c810:	68fb      	ldr	r3, [r7, #12]
2000c812:	3301      	adds	r3, #1
2000c814:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000c816:	68fb      	ldr	r3, [r7, #12]
2000c818:	3301      	adds	r3, #1
2000c81a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
2000c81c:	68f8      	ldr	r0, [r7, #12]
2000c81e:	f7ff f9fb 	bl	2000bc18 <SWAPBYTE>
2000c822:	4603      	mov	r3, r0
2000c824:	461a      	mov	r2, r3
2000c826:	687b      	ldr	r3, [r7, #4]
2000c828:	80da      	strh	r2, [r3, #6]
}
2000c82a:	bf00      	nop
2000c82c:	3710      	adds	r7, #16
2000c82e:	46bd      	mov	sp, r7
2000c830:	bd80      	pop	{r7, pc}

2000c832 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c832:	b580      	push	{r7, lr}
2000c834:	b082      	sub	sp, #8
2000c836:	af00      	add	r7, sp, #0
2000c838:	6078      	str	r0, [r7, #4]
2000c83a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
2000c83c:	2180      	movs	r1, #128	@ 0x80
2000c83e:	6878      	ldr	r0, [r7, #4]
2000c840:	f000 fc96 	bl	2000d170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
2000c844:	2100      	movs	r1, #0
2000c846:	6878      	ldr	r0, [r7, #4]
2000c848:	f000 fc92 	bl	2000d170 <USBD_LL_StallEP>
}
2000c84c:	bf00      	nop
2000c84e:	3708      	adds	r7, #8
2000c850:	46bd      	mov	sp, r7
2000c852:	bd80      	pop	{r7, pc}

2000c854 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
2000c854:	b580      	push	{r7, lr}
2000c856:	b086      	sub	sp, #24
2000c858:	af00      	add	r7, sp, #0
2000c85a:	60f8      	str	r0, [r7, #12]
2000c85c:	60b9      	str	r1, [r7, #8]
2000c85e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
2000c860:	2300      	movs	r3, #0
2000c862:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
2000c864:	68fb      	ldr	r3, [r7, #12]
2000c866:	2b00      	cmp	r3, #0
2000c868:	d042      	beq.n	2000c8f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
2000c86a:	68fb      	ldr	r3, [r7, #12]
2000c86c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
2000c86e:	6938      	ldr	r0, [r7, #16]
2000c870:	f000 f842 	bl	2000c8f8 <USBD_GetLen>
2000c874:	4603      	mov	r3, r0
2000c876:	3301      	adds	r3, #1
2000c878:	005b      	lsls	r3, r3, #1
2000c87a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2000c87e:	d808      	bhi.n	2000c892 <USBD_GetString+0x3e>
2000c880:	6938      	ldr	r0, [r7, #16]
2000c882:	f000 f839 	bl	2000c8f8 <USBD_GetLen>
2000c886:	4603      	mov	r3, r0
2000c888:	3301      	adds	r3, #1
2000c88a:	b29b      	uxth	r3, r3
2000c88c:	005b      	lsls	r3, r3, #1
2000c88e:	b29a      	uxth	r2, r3
2000c890:	e001      	b.n	2000c896 <USBD_GetString+0x42>
2000c892:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000c896:	687b      	ldr	r3, [r7, #4]
2000c898:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
2000c89a:	7dfb      	ldrb	r3, [r7, #23]
2000c89c:	68ba      	ldr	r2, [r7, #8]
2000c89e:	4413      	add	r3, r2
2000c8a0:	687a      	ldr	r2, [r7, #4]
2000c8a2:	7812      	ldrb	r2, [r2, #0]
2000c8a4:	701a      	strb	r2, [r3, #0]
  idx++;
2000c8a6:	7dfb      	ldrb	r3, [r7, #23]
2000c8a8:	3301      	adds	r3, #1
2000c8aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
2000c8ac:	7dfb      	ldrb	r3, [r7, #23]
2000c8ae:	68ba      	ldr	r2, [r7, #8]
2000c8b0:	4413      	add	r3, r2
2000c8b2:	2203      	movs	r2, #3
2000c8b4:	701a      	strb	r2, [r3, #0]
  idx++;
2000c8b6:	7dfb      	ldrb	r3, [r7, #23]
2000c8b8:	3301      	adds	r3, #1
2000c8ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
2000c8bc:	e013      	b.n	2000c8e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
2000c8be:	7dfb      	ldrb	r3, [r7, #23]
2000c8c0:	68ba      	ldr	r2, [r7, #8]
2000c8c2:	4413      	add	r3, r2
2000c8c4:	693a      	ldr	r2, [r7, #16]
2000c8c6:	7812      	ldrb	r2, [r2, #0]
2000c8c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
2000c8ca:	693b      	ldr	r3, [r7, #16]
2000c8cc:	3301      	adds	r3, #1
2000c8ce:	613b      	str	r3, [r7, #16]
    idx++;
2000c8d0:	7dfb      	ldrb	r3, [r7, #23]
2000c8d2:	3301      	adds	r3, #1
2000c8d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
2000c8d6:	7dfb      	ldrb	r3, [r7, #23]
2000c8d8:	68ba      	ldr	r2, [r7, #8]
2000c8da:	4413      	add	r3, r2
2000c8dc:	2200      	movs	r2, #0
2000c8de:	701a      	strb	r2, [r3, #0]
    idx++;
2000c8e0:	7dfb      	ldrb	r3, [r7, #23]
2000c8e2:	3301      	adds	r3, #1
2000c8e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
2000c8e6:	693b      	ldr	r3, [r7, #16]
2000c8e8:	781b      	ldrb	r3, [r3, #0]
2000c8ea:	2b00      	cmp	r3, #0
2000c8ec:	d1e7      	bne.n	2000c8be <USBD_GetString+0x6a>
2000c8ee:	e000      	b.n	2000c8f2 <USBD_GetString+0x9e>
    return;
2000c8f0:	bf00      	nop
  }
}
2000c8f2:	3718      	adds	r7, #24
2000c8f4:	46bd      	mov	sp, r7
2000c8f6:	bd80      	pop	{r7, pc}

2000c8f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
2000c8f8:	b480      	push	{r7}
2000c8fa:	b085      	sub	sp, #20
2000c8fc:	af00      	add	r7, sp, #0
2000c8fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
2000c900:	2300      	movs	r3, #0
2000c902:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
2000c904:	687b      	ldr	r3, [r7, #4]
2000c906:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
2000c908:	e005      	b.n	2000c916 <USBD_GetLen+0x1e>
  {
    len++;
2000c90a:	7bfb      	ldrb	r3, [r7, #15]
2000c90c:	3301      	adds	r3, #1
2000c90e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
2000c910:	68bb      	ldr	r3, [r7, #8]
2000c912:	3301      	adds	r3, #1
2000c914:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
2000c916:	68bb      	ldr	r3, [r7, #8]
2000c918:	781b      	ldrb	r3, [r3, #0]
2000c91a:	2b00      	cmp	r3, #0
2000c91c:	d1f5      	bne.n	2000c90a <USBD_GetLen+0x12>
  }

  return len;
2000c91e:	7bfb      	ldrb	r3, [r7, #15]
}
2000c920:	4618      	mov	r0, r3
2000c922:	3714      	adds	r7, #20
2000c924:	46bd      	mov	sp, r7
2000c926:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c92a:	4770      	bx	lr

2000c92c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
2000c92c:	b580      	push	{r7, lr}
2000c92e:	b084      	sub	sp, #16
2000c930:	af00      	add	r7, sp, #0
2000c932:	60f8      	str	r0, [r7, #12]
2000c934:	60b9      	str	r1, [r7, #8]
2000c936:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
2000c938:	68fb      	ldr	r3, [r7, #12]
2000c93a:	2202      	movs	r2, #2
2000c93c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
2000c940:	68fb      	ldr	r3, [r7, #12]
2000c942:	687a      	ldr	r2, [r7, #4]
2000c944:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
2000c946:	68fb      	ldr	r3, [r7, #12]
2000c948:	68ba      	ldr	r2, [r7, #8]
2000c94a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
2000c94c:	68fb      	ldr	r3, [r7, #12]
2000c94e:	687a      	ldr	r2, [r7, #4]
2000c950:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000c952:	687b      	ldr	r3, [r7, #4]
2000c954:	68ba      	ldr	r2, [r7, #8]
2000c956:	2100      	movs	r1, #0
2000c958:	68f8      	ldr	r0, [r7, #12]
2000c95a:	f000 fc92 	bl	2000d282 <USBD_LL_Transmit>

  return USBD_OK;
2000c95e:	2300      	movs	r3, #0
}
2000c960:	4618      	mov	r0, r3
2000c962:	3710      	adds	r7, #16
2000c964:	46bd      	mov	sp, r7
2000c966:	bd80      	pop	{r7, pc}

2000c968 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
2000c968:	b580      	push	{r7, lr}
2000c96a:	b084      	sub	sp, #16
2000c96c:	af00      	add	r7, sp, #0
2000c96e:	60f8      	str	r0, [r7, #12]
2000c970:	60b9      	str	r1, [r7, #8]
2000c972:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000c974:	687b      	ldr	r3, [r7, #4]
2000c976:	68ba      	ldr	r2, [r7, #8]
2000c978:	2100      	movs	r1, #0
2000c97a:	68f8      	ldr	r0, [r7, #12]
2000c97c:	f000 fc81 	bl	2000d282 <USBD_LL_Transmit>

  return USBD_OK;
2000c980:	2300      	movs	r3, #0
}
2000c982:	4618      	mov	r0, r3
2000c984:	3710      	adds	r7, #16
2000c986:	46bd      	mov	sp, r7
2000c988:	bd80      	pop	{r7, pc}

2000c98a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
2000c98a:	b580      	push	{r7, lr}
2000c98c:	b084      	sub	sp, #16
2000c98e:	af00      	add	r7, sp, #0
2000c990:	60f8      	str	r0, [r7, #12]
2000c992:	60b9      	str	r1, [r7, #8]
2000c994:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
2000c996:	68fb      	ldr	r3, [r7, #12]
2000c998:	2203      	movs	r2, #3
2000c99a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
2000c99e:	68fb      	ldr	r3, [r7, #12]
2000c9a0:	687a      	ldr	r2, [r7, #4]
2000c9a2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
2000c9a6:	68fb      	ldr	r3, [r7, #12]
2000c9a8:	68ba      	ldr	r2, [r7, #8]
2000c9aa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
2000c9ae:	68fb      	ldr	r3, [r7, #12]
2000c9b0:	687a      	ldr	r2, [r7, #4]
2000c9b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000c9b6:	687b      	ldr	r3, [r7, #4]
2000c9b8:	68ba      	ldr	r2, [r7, #8]
2000c9ba:	2100      	movs	r1, #0
2000c9bc:	68f8      	ldr	r0, [r7, #12]
2000c9be:	f000 fc81 	bl	2000d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000c9c2:	2300      	movs	r3, #0
}
2000c9c4:	4618      	mov	r0, r3
2000c9c6:	3710      	adds	r7, #16
2000c9c8:	46bd      	mov	sp, r7
2000c9ca:	bd80      	pop	{r7, pc}

2000c9cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
2000c9cc:	b580      	push	{r7, lr}
2000c9ce:	b084      	sub	sp, #16
2000c9d0:	af00      	add	r7, sp, #0
2000c9d2:	60f8      	str	r0, [r7, #12]
2000c9d4:	60b9      	str	r1, [r7, #8]
2000c9d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000c9d8:	687b      	ldr	r3, [r7, #4]
2000c9da:	68ba      	ldr	r2, [r7, #8]
2000c9dc:	2100      	movs	r1, #0
2000c9de:	68f8      	ldr	r0, [r7, #12]
2000c9e0:	f000 fc70 	bl	2000d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000c9e4:	2300      	movs	r3, #0
}
2000c9e6:	4618      	mov	r0, r3
2000c9e8:	3710      	adds	r7, #16
2000c9ea:	46bd      	mov	sp, r7
2000c9ec:	bd80      	pop	{r7, pc}

2000c9ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
2000c9ee:	b580      	push	{r7, lr}
2000c9f0:	b082      	sub	sp, #8
2000c9f2:	af00      	add	r7, sp, #0
2000c9f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
2000c9f6:	687b      	ldr	r3, [r7, #4]
2000c9f8:	2204      	movs	r2, #4
2000c9fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
2000c9fe:	2300      	movs	r3, #0
2000ca00:	2200      	movs	r2, #0
2000ca02:	2100      	movs	r1, #0
2000ca04:	6878      	ldr	r0, [r7, #4]
2000ca06:	f000 fc3c 	bl	2000d282 <USBD_LL_Transmit>

  return USBD_OK;
2000ca0a:	2300      	movs	r3, #0
}
2000ca0c:	4618      	mov	r0, r3
2000ca0e:	3708      	adds	r7, #8
2000ca10:	46bd      	mov	sp, r7
2000ca12:	bd80      	pop	{r7, pc}

2000ca14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
2000ca14:	b580      	push	{r7, lr}
2000ca16:	b082      	sub	sp, #8
2000ca18:	af00      	add	r7, sp, #0
2000ca1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
2000ca1c:	687b      	ldr	r3, [r7, #4]
2000ca1e:	2205      	movs	r2, #5
2000ca20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000ca24:	2300      	movs	r3, #0
2000ca26:	2200      	movs	r2, #0
2000ca28:	2100      	movs	r1, #0
2000ca2a:	6878      	ldr	r0, [r7, #4]
2000ca2c:	f000 fc4a 	bl	2000d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000ca30:	2300      	movs	r3, #0
}
2000ca32:	4618      	mov	r0, r3
2000ca34:	3708      	adds	r7, #8
2000ca36:	46bd      	mov	sp, r7
2000ca38:	bd80      	pop	{r7, pc}
	...

2000ca3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
2000ca3c:	b580      	push	{r7, lr}
2000ca3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
2000ca40:	2200      	movs	r2, #0
2000ca42:	4912      	ldr	r1, [pc, #72]	@ (2000ca8c <MX_USB_DEVICE_Init+0x50>)
2000ca44:	4812      	ldr	r0, [pc, #72]	@ (2000ca90 <MX_USB_DEVICE_Init+0x54>)
2000ca46:	f7fe fcb1 	bl	2000b3ac <USBD_Init>
2000ca4a:	4603      	mov	r3, r0
2000ca4c:	2b00      	cmp	r3, #0
2000ca4e:	d001      	beq.n	2000ca54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
2000ca50:	f7f8 fb66 	bl	20005120 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
2000ca54:	490f      	ldr	r1, [pc, #60]	@ (2000ca94 <MX_USB_DEVICE_Init+0x58>)
2000ca56:	480e      	ldr	r0, [pc, #56]	@ (2000ca90 <MX_USB_DEVICE_Init+0x54>)
2000ca58:	f7fe fcd8 	bl	2000b40c <USBD_RegisterClass>
2000ca5c:	4603      	mov	r3, r0
2000ca5e:	2b00      	cmp	r3, #0
2000ca60:	d001      	beq.n	2000ca66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
2000ca62:	f7f8 fb5d 	bl	20005120 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
2000ca66:	490c      	ldr	r1, [pc, #48]	@ (2000ca98 <MX_USB_DEVICE_Init+0x5c>)
2000ca68:	4809      	ldr	r0, [pc, #36]	@ (2000ca90 <MX_USB_DEVICE_Init+0x54>)
2000ca6a:	f7fe fc85 	bl	2000b378 <USBD_CUSTOM_HID_RegisterInterface>
2000ca6e:	4603      	mov	r3, r0
2000ca70:	2b00      	cmp	r3, #0
2000ca72:	d001      	beq.n	2000ca78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
2000ca74:	f7f8 fb54 	bl	20005120 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
2000ca78:	4805      	ldr	r0, [pc, #20]	@ (2000ca90 <MX_USB_DEVICE_Init+0x54>)
2000ca7a:	f7fe fcfd 	bl	2000b478 <USBD_Start>
2000ca7e:	4603      	mov	r3, r0
2000ca80:	2b00      	cmp	r3, #0
2000ca82:	d001      	beq.n	2000ca88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
2000ca84:	f7f8 fb4c 	bl	20005120 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
2000ca88:	bf00      	nop
2000ca8a:	bd80      	pop	{r7, pc}
2000ca8c:	2000d840 	.word	0x2000d840
2000ca90:	2000ee0c 	.word	0x2000ee0c
2000ca94:	2000d774 	.word	0x2000d774
2000ca98:	2000d830 	.word	0x2000d830

2000ca9c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
2000ca9c:	b480      	push	{r7}
2000ca9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
2000caa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
2000caa2:	4618      	mov	r0, r3
2000caa4:	46bd      	mov	sp, r7
2000caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000caaa:	4770      	bx	lr

2000caac <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
2000caac:	b480      	push	{r7}
2000caae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
2000cab0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
2000cab2:	4618      	mov	r0, r3
2000cab4:	46bd      	mov	sp, r7
2000cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000caba:	4770      	bx	lr

2000cabc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
2000cabc:	b580      	push	{r7, lr}
2000cabe:	b082      	sub	sp, #8
2000cac0:	af00      	add	r7, sp, #0
2000cac2:	4603      	mov	r3, r0
2000cac4:	460a      	mov	r2, r1
2000cac6:	71fb      	strb	r3, [r7, #7]
2000cac8:	4613      	mov	r3, r2
2000caca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
2000cacc:	4806      	ldr	r0, [pc, #24]	@ (2000cae8 <CUSTOM_HID_OutEvent_FS+0x2c>)
2000cace:	f7fe fbdd 	bl	2000b28c <USBD_CUSTOM_HID_ReceivePacket>
2000cad2:	4603      	mov	r3, r0
2000cad4:	2b00      	cmp	r3, #0
2000cad6:	d002      	beq.n	2000cade <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
2000cad8:	f04f 33ff 	mov.w	r3, #4294967295
2000cadc:	e000      	b.n	2000cae0 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
2000cade:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
2000cae0:	4618      	mov	r0, r3
2000cae2:	3708      	adds	r7, #8
2000cae4:	46bd      	mov	sp, r7
2000cae6:	bd80      	pop	{r7, pc}
2000cae8:	2000ee0c 	.word	0x2000ee0c

2000caec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000caec:	b480      	push	{r7}
2000caee:	b083      	sub	sp, #12
2000caf0:	af00      	add	r7, sp, #0
2000caf2:	4603      	mov	r3, r0
2000caf4:	6039      	str	r1, [r7, #0]
2000caf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
2000caf8:	683b      	ldr	r3, [r7, #0]
2000cafa:	2212      	movs	r2, #18
2000cafc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
2000cafe:	4b03      	ldr	r3, [pc, #12]	@ (2000cb0c <USBD_FS_DeviceDescriptor+0x20>)
}
2000cb00:	4618      	mov	r0, r3
2000cb02:	370c      	adds	r7, #12
2000cb04:	46bd      	mov	sp, r7
2000cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
2000cb0a:	4770      	bx	lr
2000cb0c:	2000d860 	.word	0x2000d860

2000cb10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000cb10:	b480      	push	{r7}
2000cb12:	b083      	sub	sp, #12
2000cb14:	af00      	add	r7, sp, #0
2000cb16:	4603      	mov	r3, r0
2000cb18:	6039      	str	r1, [r7, #0]
2000cb1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
2000cb1c:	683b      	ldr	r3, [r7, #0]
2000cb1e:	2204      	movs	r2, #4
2000cb20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
2000cb22:	4b03      	ldr	r3, [pc, #12]	@ (2000cb30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
2000cb24:	4618      	mov	r0, r3
2000cb26:	370c      	adds	r7, #12
2000cb28:	46bd      	mov	sp, r7
2000cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000cb2e:	4770      	bx	lr
2000cb30:	2000d880 	.word	0x2000d880

2000cb34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000cb34:	b580      	push	{r7, lr}
2000cb36:	b082      	sub	sp, #8
2000cb38:	af00      	add	r7, sp, #0
2000cb3a:	4603      	mov	r3, r0
2000cb3c:	6039      	str	r1, [r7, #0]
2000cb3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000cb40:	79fb      	ldrb	r3, [r7, #7]
2000cb42:	2b00      	cmp	r3, #0
2000cb44:	d105      	bne.n	2000cb52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000cb46:	683a      	ldr	r2, [r7, #0]
2000cb48:	4907      	ldr	r1, [pc, #28]	@ (2000cb68 <USBD_FS_ProductStrDescriptor+0x34>)
2000cb4a:	4808      	ldr	r0, [pc, #32]	@ (2000cb6c <USBD_FS_ProductStrDescriptor+0x38>)
2000cb4c:	f7ff fe82 	bl	2000c854 <USBD_GetString>
2000cb50:	e004      	b.n	2000cb5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000cb52:	683a      	ldr	r2, [r7, #0]
2000cb54:	4904      	ldr	r1, [pc, #16]	@ (2000cb68 <USBD_FS_ProductStrDescriptor+0x34>)
2000cb56:	4805      	ldr	r0, [pc, #20]	@ (2000cb6c <USBD_FS_ProductStrDescriptor+0x38>)
2000cb58:	f7ff fe7c 	bl	2000c854 <USBD_GetString>
  }
  return USBD_StrDesc;
2000cb5c:	4b02      	ldr	r3, [pc, #8]	@ (2000cb68 <USBD_FS_ProductStrDescriptor+0x34>)
}
2000cb5e:	4618      	mov	r0, r3
2000cb60:	3708      	adds	r7, #8
2000cb62:	46bd      	mov	sp, r7
2000cb64:	bd80      	pop	{r7, pc}
2000cb66:	bf00      	nop
2000cb68:	2000f0e8 	.word	0x2000f0e8
2000cb6c:	2000d6f8 	.word	0x2000d6f8

2000cb70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000cb70:	b580      	push	{r7, lr}
2000cb72:	b082      	sub	sp, #8
2000cb74:	af00      	add	r7, sp, #0
2000cb76:	4603      	mov	r3, r0
2000cb78:	6039      	str	r1, [r7, #0]
2000cb7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
2000cb7c:	683a      	ldr	r2, [r7, #0]
2000cb7e:	4904      	ldr	r1, [pc, #16]	@ (2000cb90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
2000cb80:	4804      	ldr	r0, [pc, #16]	@ (2000cb94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
2000cb82:	f7ff fe67 	bl	2000c854 <USBD_GetString>
  return USBD_StrDesc;
2000cb86:	4b02      	ldr	r3, [pc, #8]	@ (2000cb90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
2000cb88:	4618      	mov	r0, r3
2000cb8a:	3708      	adds	r7, #8
2000cb8c:	46bd      	mov	sp, r7
2000cb8e:	bd80      	pop	{r7, pc}
2000cb90:	2000f0e8 	.word	0x2000f0e8
2000cb94:	2000d70c 	.word	0x2000d70c

2000cb98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000cb98:	b580      	push	{r7, lr}
2000cb9a:	b082      	sub	sp, #8
2000cb9c:	af00      	add	r7, sp, #0
2000cb9e:	4603      	mov	r3, r0
2000cba0:	6039      	str	r1, [r7, #0]
2000cba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
2000cba4:	683b      	ldr	r3, [r7, #0]
2000cba6:	221a      	movs	r2, #26
2000cba8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
2000cbaa:	f000 f855 	bl	2000cc58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
2000cbae:	4b02      	ldr	r3, [pc, #8]	@ (2000cbb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
2000cbb0:	4618      	mov	r0, r3
2000cbb2:	3708      	adds	r7, #8
2000cbb4:	46bd      	mov	sp, r7
2000cbb6:	bd80      	pop	{r7, pc}
2000cbb8:	2000d884 	.word	0x2000d884

2000cbbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000cbbc:	b580      	push	{r7, lr}
2000cbbe:	b082      	sub	sp, #8
2000cbc0:	af00      	add	r7, sp, #0
2000cbc2:	4603      	mov	r3, r0
2000cbc4:	6039      	str	r1, [r7, #0]
2000cbc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
2000cbc8:	79fb      	ldrb	r3, [r7, #7]
2000cbca:	2b00      	cmp	r3, #0
2000cbcc:	d105      	bne.n	2000cbda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000cbce:	683a      	ldr	r2, [r7, #0]
2000cbd0:	4907      	ldr	r1, [pc, #28]	@ (2000cbf0 <USBD_FS_ConfigStrDescriptor+0x34>)
2000cbd2:	4808      	ldr	r0, [pc, #32]	@ (2000cbf4 <USBD_FS_ConfigStrDescriptor+0x38>)
2000cbd4:	f7ff fe3e 	bl	2000c854 <USBD_GetString>
2000cbd8:	e004      	b.n	2000cbe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000cbda:	683a      	ldr	r2, [r7, #0]
2000cbdc:	4904      	ldr	r1, [pc, #16]	@ (2000cbf0 <USBD_FS_ConfigStrDescriptor+0x34>)
2000cbde:	4805      	ldr	r0, [pc, #20]	@ (2000cbf4 <USBD_FS_ConfigStrDescriptor+0x38>)
2000cbe0:	f7ff fe38 	bl	2000c854 <USBD_GetString>
  }
  return USBD_StrDesc;
2000cbe4:	4b02      	ldr	r3, [pc, #8]	@ (2000cbf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
2000cbe6:	4618      	mov	r0, r3
2000cbe8:	3708      	adds	r7, #8
2000cbea:	46bd      	mov	sp, r7
2000cbec:	bd80      	pop	{r7, pc}
2000cbee:	bf00      	nop
2000cbf0:	2000f0e8 	.word	0x2000f0e8
2000cbf4:	2000d720 	.word	0x2000d720

2000cbf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000cbf8:	b580      	push	{r7, lr}
2000cbfa:	b082      	sub	sp, #8
2000cbfc:	af00      	add	r7, sp, #0
2000cbfe:	4603      	mov	r3, r0
2000cc00:	6039      	str	r1, [r7, #0]
2000cc02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000cc04:	79fb      	ldrb	r3, [r7, #7]
2000cc06:	2b00      	cmp	r3, #0
2000cc08:	d105      	bne.n	2000cc16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000cc0a:	683a      	ldr	r2, [r7, #0]
2000cc0c:	4907      	ldr	r1, [pc, #28]	@ (2000cc2c <USBD_FS_InterfaceStrDescriptor+0x34>)
2000cc0e:	4808      	ldr	r0, [pc, #32]	@ (2000cc30 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000cc10:	f7ff fe20 	bl	2000c854 <USBD_GetString>
2000cc14:	e004      	b.n	2000cc20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000cc16:	683a      	ldr	r2, [r7, #0]
2000cc18:	4904      	ldr	r1, [pc, #16]	@ (2000cc2c <USBD_FS_InterfaceStrDescriptor+0x34>)
2000cc1a:	4805      	ldr	r0, [pc, #20]	@ (2000cc30 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000cc1c:	f7ff fe1a 	bl	2000c854 <USBD_GetString>
  }
  return USBD_StrDesc;
2000cc20:	4b02      	ldr	r3, [pc, #8]	@ (2000cc2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
2000cc22:	4618      	mov	r0, r3
2000cc24:	3708      	adds	r7, #8
2000cc26:	46bd      	mov	sp, r7
2000cc28:	bd80      	pop	{r7, pc}
2000cc2a:	bf00      	nop
2000cc2c:	2000f0e8 	.word	0x2000f0e8
2000cc30:	2000d720 	.word	0x2000d720

2000cc34 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000cc34:	b480      	push	{r7}
2000cc36:	b083      	sub	sp, #12
2000cc38:	af00      	add	r7, sp, #0
2000cc3a:	4603      	mov	r3, r0
2000cc3c:	6039      	str	r1, [r7, #0]
2000cc3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
2000cc40:	683b      	ldr	r3, [r7, #0]
2000cc42:	220c      	movs	r2, #12
2000cc44:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
2000cc46:	4b03      	ldr	r3, [pc, #12]	@ (2000cc54 <USBD_FS_USR_BOSDescriptor+0x20>)
}
2000cc48:	4618      	mov	r0, r3
2000cc4a:	370c      	adds	r7, #12
2000cc4c:	46bd      	mov	sp, r7
2000cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000cc52:	4770      	bx	lr
2000cc54:	2000d874 	.word	0x2000d874

2000cc58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
2000cc58:	b580      	push	{r7, lr}
2000cc5a:	b084      	sub	sp, #16
2000cc5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
2000cc5e:	4b0f      	ldr	r3, [pc, #60]	@ (2000cc9c <Get_SerialNum+0x44>)
2000cc60:	681b      	ldr	r3, [r3, #0]
2000cc62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
2000cc64:	4b0e      	ldr	r3, [pc, #56]	@ (2000cca0 <Get_SerialNum+0x48>)
2000cc66:	681b      	ldr	r3, [r3, #0]
2000cc68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
2000cc6a:	4b0e      	ldr	r3, [pc, #56]	@ (2000cca4 <Get_SerialNum+0x4c>)
2000cc6c:	681b      	ldr	r3, [r3, #0]
2000cc6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
2000cc70:	68fa      	ldr	r2, [r7, #12]
2000cc72:	687b      	ldr	r3, [r7, #4]
2000cc74:	4413      	add	r3, r2
2000cc76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
2000cc78:	68fb      	ldr	r3, [r7, #12]
2000cc7a:	2b00      	cmp	r3, #0
2000cc7c:	d009      	beq.n	2000cc92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
2000cc7e:	2208      	movs	r2, #8
2000cc80:	4909      	ldr	r1, [pc, #36]	@ (2000cca8 <Get_SerialNum+0x50>)
2000cc82:	68f8      	ldr	r0, [r7, #12]
2000cc84:	f000 f814 	bl	2000ccb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
2000cc88:	2204      	movs	r2, #4
2000cc8a:	4908      	ldr	r1, [pc, #32]	@ (2000ccac <Get_SerialNum+0x54>)
2000cc8c:	68b8      	ldr	r0, [r7, #8]
2000cc8e:	f000 f80f 	bl	2000ccb0 <IntToUnicode>
  }
}
2000cc92:	bf00      	nop
2000cc94:	3710      	adds	r7, #16
2000cc96:	46bd      	mov	sp, r7
2000cc98:	bd80      	pop	{r7, pc}
2000cc9a:	bf00      	nop
2000cc9c:	1ff0f420 	.word	0x1ff0f420
2000cca0:	1ff0f424 	.word	0x1ff0f424
2000cca4:	1ff0f428 	.word	0x1ff0f428
2000cca8:	2000d886 	.word	0x2000d886
2000ccac:	2000d896 	.word	0x2000d896

2000ccb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
2000ccb0:	b480      	push	{r7}
2000ccb2:	b087      	sub	sp, #28
2000ccb4:	af00      	add	r7, sp, #0
2000ccb6:	60f8      	str	r0, [r7, #12]
2000ccb8:	60b9      	str	r1, [r7, #8]
2000ccba:	4613      	mov	r3, r2
2000ccbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
2000ccbe:	2300      	movs	r3, #0
2000ccc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
2000ccc2:	2300      	movs	r3, #0
2000ccc4:	75fb      	strb	r3, [r7, #23]
2000ccc6:	e027      	b.n	2000cd18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
2000ccc8:	68fb      	ldr	r3, [r7, #12]
2000ccca:	0f1b      	lsrs	r3, r3, #28
2000cccc:	2b09      	cmp	r3, #9
2000ccce:	d80b      	bhi.n	2000cce8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
2000ccd0:	68fb      	ldr	r3, [r7, #12]
2000ccd2:	0f1b      	lsrs	r3, r3, #28
2000ccd4:	b2da      	uxtb	r2, r3
2000ccd6:	7dfb      	ldrb	r3, [r7, #23]
2000ccd8:	005b      	lsls	r3, r3, #1
2000ccda:	4619      	mov	r1, r3
2000ccdc:	68bb      	ldr	r3, [r7, #8]
2000ccde:	440b      	add	r3, r1
2000cce0:	3230      	adds	r2, #48	@ 0x30
2000cce2:	b2d2      	uxtb	r2, r2
2000cce4:	701a      	strb	r2, [r3, #0]
2000cce6:	e00a      	b.n	2000ccfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
2000cce8:	68fb      	ldr	r3, [r7, #12]
2000ccea:	0f1b      	lsrs	r3, r3, #28
2000ccec:	b2da      	uxtb	r2, r3
2000ccee:	7dfb      	ldrb	r3, [r7, #23]
2000ccf0:	005b      	lsls	r3, r3, #1
2000ccf2:	4619      	mov	r1, r3
2000ccf4:	68bb      	ldr	r3, [r7, #8]
2000ccf6:	440b      	add	r3, r1
2000ccf8:	3237      	adds	r2, #55	@ 0x37
2000ccfa:	b2d2      	uxtb	r2, r2
2000ccfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
2000ccfe:	68fb      	ldr	r3, [r7, #12]
2000cd00:	011b      	lsls	r3, r3, #4
2000cd02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
2000cd04:	7dfb      	ldrb	r3, [r7, #23]
2000cd06:	005b      	lsls	r3, r3, #1
2000cd08:	3301      	adds	r3, #1
2000cd0a:	68ba      	ldr	r2, [r7, #8]
2000cd0c:	4413      	add	r3, r2
2000cd0e:	2200      	movs	r2, #0
2000cd10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
2000cd12:	7dfb      	ldrb	r3, [r7, #23]
2000cd14:	3301      	adds	r3, #1
2000cd16:	75fb      	strb	r3, [r7, #23]
2000cd18:	7dfa      	ldrb	r2, [r7, #23]
2000cd1a:	79fb      	ldrb	r3, [r7, #7]
2000cd1c:	429a      	cmp	r2, r3
2000cd1e:	d3d3      	bcc.n	2000ccc8 <IntToUnicode+0x18>
  }
}
2000cd20:	bf00      	nop
2000cd22:	bf00      	nop
2000cd24:	371c      	adds	r7, #28
2000cd26:	46bd      	mov	sp, r7
2000cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
2000cd2c:	4770      	bx	lr
	...

2000cd30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
2000cd30:	b580      	push	{r7, lr}
2000cd32:	b0ac      	sub	sp, #176	@ 0xb0
2000cd34:	af00      	add	r7, sp, #0
2000cd36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000cd38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000cd3c:	2200      	movs	r2, #0
2000cd3e:	601a      	str	r2, [r3, #0]
2000cd40:	605a      	str	r2, [r3, #4]
2000cd42:	609a      	str	r2, [r3, #8]
2000cd44:	60da      	str	r2, [r3, #12]
2000cd46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2000cd48:	f107 0318 	add.w	r3, r7, #24
2000cd4c:	2284      	movs	r2, #132	@ 0x84
2000cd4e:	2100      	movs	r1, #0
2000cd50:	4618      	mov	r0, r3
2000cd52:	f000 fc29 	bl	2000d5a8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
2000cd56:	687b      	ldr	r3, [r7, #4]
2000cd58:	681b      	ldr	r3, [r3, #0]
2000cd5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2000cd5e:	d161      	bne.n	2000ce24 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
2000cd60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000cd64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
2000cd66:	2300      	movs	r3, #0
2000cd68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2000cd6c:	f107 0318 	add.w	r3, r7, #24
2000cd70:	4618      	mov	r0, r3
2000cd72:	f7fb facf 	bl	20008314 <HAL_RCCEx_PeriphCLKConfig>
2000cd76:	4603      	mov	r3, r0
2000cd78:	2b00      	cmp	r3, #0
2000cd7a:	d001      	beq.n	2000cd80 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
2000cd7c:	f7f8 f9d0 	bl	20005120 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000cd80:	4b2a      	ldr	r3, [pc, #168]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000cd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000cd84:	4a29      	ldr	r2, [pc, #164]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000cd86:	f043 0301 	orr.w	r3, r3, #1
2000cd8a:	6313      	str	r3, [r2, #48]	@ 0x30
2000cd8c:	4b27      	ldr	r3, [pc, #156]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000cd8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000cd90:	f003 0301 	and.w	r3, r3, #1
2000cd94:	617b      	str	r3, [r7, #20]
2000cd96:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
2000cd98:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
2000cd9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000cda0:	2302      	movs	r3, #2
2000cda2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000cda6:	2300      	movs	r3, #0
2000cda8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000cdac:	2303      	movs	r3, #3
2000cdae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
2000cdb2:	230a      	movs	r3, #10
2000cdb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000cdb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000cdbc:	4619      	mov	r1, r3
2000cdbe:	481c      	ldr	r0, [pc, #112]	@ (2000ce30 <HAL_PCD_MspInit+0x100>)
2000cdc0:	f7f9 f916 	bl	20005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
2000cdc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
2000cdc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
2000cdcc:	2300      	movs	r3, #0
2000cdce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000cdd2:	2300      	movs	r3, #0
2000cdd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
2000cdd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000cddc:	4619      	mov	r1, r3
2000cdde:	4814      	ldr	r0, [pc, #80]	@ (2000ce30 <HAL_PCD_MspInit+0x100>)
2000cde0:	f7f9 f906 	bl	20005ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
2000cde4:	4b11      	ldr	r3, [pc, #68]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000cde6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000cde8:	4a10      	ldr	r2, [pc, #64]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000cdea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2000cdee:	6353      	str	r3, [r2, #52]	@ 0x34
2000cdf0:	4b0e      	ldr	r3, [pc, #56]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000cdf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000cdf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000cdf8:	613b      	str	r3, [r7, #16]
2000cdfa:	693b      	ldr	r3, [r7, #16]
2000cdfc:	4b0b      	ldr	r3, [pc, #44]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000cdfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000ce00:	4a0a      	ldr	r2, [pc, #40]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000ce02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2000ce06:	6453      	str	r3, [r2, #68]	@ 0x44
2000ce08:	4b08      	ldr	r3, [pc, #32]	@ (2000ce2c <HAL_PCD_MspInit+0xfc>)
2000ce0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000ce0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000ce10:	60fb      	str	r3, [r7, #12]
2000ce12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
2000ce14:	2200      	movs	r2, #0
2000ce16:	2100      	movs	r1, #0
2000ce18:	2043      	movs	r0, #67	@ 0x43
2000ce1a:	f7f8 fd64 	bl	200058e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
2000ce1e:	2043      	movs	r0, #67	@ 0x43
2000ce20:	f7f8 fd7d 	bl	2000591e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
2000ce24:	bf00      	nop
2000ce26:	37b0      	adds	r7, #176	@ 0xb0
2000ce28:	46bd      	mov	sp, r7
2000ce2a:	bd80      	pop	{r7, pc}
2000ce2c:	40023800 	.word	0x40023800
2000ce30:	40020000 	.word	0x40020000

2000ce34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000ce34:	b580      	push	{r7, lr}
2000ce36:	b082      	sub	sp, #8
2000ce38:	af00      	add	r7, sp, #0
2000ce3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
2000ce3c:	687b      	ldr	r3, [r7, #4]
2000ce3e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
2000ce42:	687b      	ldr	r3, [r7, #4]
2000ce44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000ce48:	4619      	mov	r1, r3
2000ce4a:	4610      	mov	r0, r2
2000ce4c:	f7fe fb61 	bl	2000b512 <USBD_LL_SetupStage>
}
2000ce50:	bf00      	nop
2000ce52:	3708      	adds	r7, #8
2000ce54:	46bd      	mov	sp, r7
2000ce56:	bd80      	pop	{r7, pc}

2000ce58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000ce58:	b580      	push	{r7, lr}
2000ce5a:	b082      	sub	sp, #8
2000ce5c:	af00      	add	r7, sp, #0
2000ce5e:	6078      	str	r0, [r7, #4]
2000ce60:	460b      	mov	r3, r1
2000ce62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
2000ce64:	687b      	ldr	r3, [r7, #4]
2000ce66:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000ce6a:	78fa      	ldrb	r2, [r7, #3]
2000ce6c:	6879      	ldr	r1, [r7, #4]
2000ce6e:	4613      	mov	r3, r2
2000ce70:	00db      	lsls	r3, r3, #3
2000ce72:	4413      	add	r3, r2
2000ce74:	009b      	lsls	r3, r3, #2
2000ce76:	440b      	add	r3, r1
2000ce78:	f503 7318 	add.w	r3, r3, #608	@ 0x260
2000ce7c:	681a      	ldr	r2, [r3, #0]
2000ce7e:	78fb      	ldrb	r3, [r7, #3]
2000ce80:	4619      	mov	r1, r3
2000ce82:	f7fe fb9b 	bl	2000b5bc <USBD_LL_DataOutStage>
}
2000ce86:	bf00      	nop
2000ce88:	3708      	adds	r7, #8
2000ce8a:	46bd      	mov	sp, r7
2000ce8c:	bd80      	pop	{r7, pc}

2000ce8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000ce8e:	b580      	push	{r7, lr}
2000ce90:	b082      	sub	sp, #8
2000ce92:	af00      	add	r7, sp, #0
2000ce94:	6078      	str	r0, [r7, #4]
2000ce96:	460b      	mov	r3, r1
2000ce98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
2000ce9a:	687b      	ldr	r3, [r7, #4]
2000ce9c:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000cea0:	78fa      	ldrb	r2, [r7, #3]
2000cea2:	6879      	ldr	r1, [r7, #4]
2000cea4:	4613      	mov	r3, r2
2000cea6:	00db      	lsls	r3, r3, #3
2000cea8:	4413      	add	r3, r2
2000ceaa:	009b      	lsls	r3, r3, #2
2000ceac:	440b      	add	r3, r1
2000ceae:	3320      	adds	r3, #32
2000ceb0:	681a      	ldr	r2, [r3, #0]
2000ceb2:	78fb      	ldrb	r3, [r7, #3]
2000ceb4:	4619      	mov	r1, r3
2000ceb6:	f7fe fc3d 	bl	2000b734 <USBD_LL_DataInStage>
}
2000ceba:	bf00      	nop
2000cebc:	3708      	adds	r7, #8
2000cebe:	46bd      	mov	sp, r7
2000cec0:	bd80      	pop	{r7, pc}

2000cec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cec2:	b580      	push	{r7, lr}
2000cec4:	b082      	sub	sp, #8
2000cec6:	af00      	add	r7, sp, #0
2000cec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
2000ceca:	687b      	ldr	r3, [r7, #4]
2000cecc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000ced0:	4618      	mov	r0, r3
2000ced2:	f7fe fd81 	bl	2000b9d8 <USBD_LL_SOF>
}
2000ced6:	bf00      	nop
2000ced8:	3708      	adds	r7, #8
2000ceda:	46bd      	mov	sp, r7
2000cedc:	bd80      	pop	{r7, pc}

2000cede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cede:	b580      	push	{r7, lr}
2000cee0:	b084      	sub	sp, #16
2000cee2:	af00      	add	r7, sp, #0
2000cee4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
2000cee6:	2301      	movs	r3, #1
2000cee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
2000ceea:	687b      	ldr	r3, [r7, #4]
2000ceec:	79db      	ldrb	r3, [r3, #7]
2000ceee:	2b00      	cmp	r3, #0
2000cef0:	d102      	bne.n	2000cef8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
2000cef2:	2300      	movs	r3, #0
2000cef4:	73fb      	strb	r3, [r7, #15]
2000cef6:	e008      	b.n	2000cf0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
2000cef8:	687b      	ldr	r3, [r7, #4]
2000cefa:	79db      	ldrb	r3, [r3, #7]
2000cefc:	2b02      	cmp	r3, #2
2000cefe:	d102      	bne.n	2000cf06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
2000cf00:	2301      	movs	r3, #1
2000cf02:	73fb      	strb	r3, [r7, #15]
2000cf04:	e001      	b.n	2000cf0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
2000cf06:	f7f8 f90b 	bl	20005120 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
2000cf0a:	687b      	ldr	r3, [r7, #4]
2000cf0c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cf10:	7bfa      	ldrb	r2, [r7, #15]
2000cf12:	4611      	mov	r1, r2
2000cf14:	4618      	mov	r0, r3
2000cf16:	f7fe fd1b 	bl	2000b950 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
2000cf1a:	687b      	ldr	r3, [r7, #4]
2000cf1c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cf20:	4618      	mov	r0, r3
2000cf22:	f7fe fcc2 	bl	2000b8aa <USBD_LL_Reset>
}
2000cf26:	bf00      	nop
2000cf28:	3710      	adds	r7, #16
2000cf2a:	46bd      	mov	sp, r7
2000cf2c:	bd80      	pop	{r7, pc}
	...

2000cf30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cf30:	b580      	push	{r7, lr}
2000cf32:	b082      	sub	sp, #8
2000cf34:	af00      	add	r7, sp, #0
2000cf36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
2000cf38:	687b      	ldr	r3, [r7, #4]
2000cf3a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cf3e:	4618      	mov	r0, r3
2000cf40:	f7fe fd16 	bl	2000b970 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000cf44:	687b      	ldr	r3, [r7, #4]
2000cf46:	681b      	ldr	r3, [r3, #0]
2000cf48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000cf4c:	681b      	ldr	r3, [r3, #0]
2000cf4e:	687a      	ldr	r2, [r7, #4]
2000cf50:	6812      	ldr	r2, [r2, #0]
2000cf52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000cf56:	f043 0301 	orr.w	r3, r3, #1
2000cf5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
2000cf5c:	687b      	ldr	r3, [r7, #4]
2000cf5e:	7adb      	ldrb	r3, [r3, #11]
2000cf60:	2b00      	cmp	r3, #0
2000cf62:	d005      	beq.n	2000cf70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000cf64:	4b04      	ldr	r3, [pc, #16]	@ (2000cf78 <HAL_PCD_SuspendCallback+0x48>)
2000cf66:	691b      	ldr	r3, [r3, #16]
2000cf68:	4a03      	ldr	r2, [pc, #12]	@ (2000cf78 <HAL_PCD_SuspendCallback+0x48>)
2000cf6a:	f043 0306 	orr.w	r3, r3, #6
2000cf6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
2000cf70:	bf00      	nop
2000cf72:	3708      	adds	r7, #8
2000cf74:	46bd      	mov	sp, r7
2000cf76:	bd80      	pop	{r7, pc}
2000cf78:	e000ed00 	.word	0xe000ed00

2000cf7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cf7c:	b580      	push	{r7, lr}
2000cf7e:	b082      	sub	sp, #8
2000cf80:	af00      	add	r7, sp, #0
2000cf82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
2000cf84:	687b      	ldr	r3, [r7, #4]
2000cf86:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cf8a:	4618      	mov	r0, r3
2000cf8c:	f7fe fd0c 	bl	2000b9a8 <USBD_LL_Resume>
}
2000cf90:	bf00      	nop
2000cf92:	3708      	adds	r7, #8
2000cf94:	46bd      	mov	sp, r7
2000cf96:	bd80      	pop	{r7, pc}

2000cf98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cf98:	b580      	push	{r7, lr}
2000cf9a:	b082      	sub	sp, #8
2000cf9c:	af00      	add	r7, sp, #0
2000cf9e:	6078      	str	r0, [r7, #4]
2000cfa0:	460b      	mov	r3, r1
2000cfa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000cfa4:	687b      	ldr	r3, [r7, #4]
2000cfa6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cfaa:	78fa      	ldrb	r2, [r7, #3]
2000cfac:	4611      	mov	r1, r2
2000cfae:	4618      	mov	r0, r3
2000cfb0:	f7fe fd64 	bl	2000ba7c <USBD_LL_IsoOUTIncomplete>
}
2000cfb4:	bf00      	nop
2000cfb6:	3708      	adds	r7, #8
2000cfb8:	46bd      	mov	sp, r7
2000cfba:	bd80      	pop	{r7, pc}

2000cfbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cfbc:	b580      	push	{r7, lr}
2000cfbe:	b082      	sub	sp, #8
2000cfc0:	af00      	add	r7, sp, #0
2000cfc2:	6078      	str	r0, [r7, #4]
2000cfc4:	460b      	mov	r3, r1
2000cfc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000cfc8:	687b      	ldr	r3, [r7, #4]
2000cfca:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cfce:	78fa      	ldrb	r2, [r7, #3]
2000cfd0:	4611      	mov	r1, r2
2000cfd2:	4618      	mov	r0, r3
2000cfd4:	f7fe fd20 	bl	2000ba18 <USBD_LL_IsoINIncomplete>
}
2000cfd8:	bf00      	nop
2000cfda:	3708      	adds	r7, #8
2000cfdc:	46bd      	mov	sp, r7
2000cfde:	bd80      	pop	{r7, pc}

2000cfe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cfe0:	b580      	push	{r7, lr}
2000cfe2:	b082      	sub	sp, #8
2000cfe4:	af00      	add	r7, sp, #0
2000cfe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
2000cfe8:	687b      	ldr	r3, [r7, #4]
2000cfea:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cfee:	4618      	mov	r0, r3
2000cff0:	f7fe fd76 	bl	2000bae0 <USBD_LL_DevConnected>
}
2000cff4:	bf00      	nop
2000cff6:	3708      	adds	r7, #8
2000cff8:	46bd      	mov	sp, r7
2000cffa:	bd80      	pop	{r7, pc}

2000cffc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cffc:	b580      	push	{r7, lr}
2000cffe:	b082      	sub	sp, #8
2000d000:	af00      	add	r7, sp, #0
2000d002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
2000d004:	687b      	ldr	r3, [r7, #4]
2000d006:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000d00a:	4618      	mov	r0, r3
2000d00c:	f7fe fd73 	bl	2000baf6 <USBD_LL_DevDisconnected>
}
2000d010:	bf00      	nop
2000d012:	3708      	adds	r7, #8
2000d014:	46bd      	mov	sp, r7
2000d016:	bd80      	pop	{r7, pc}

2000d018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
2000d018:	b580      	push	{r7, lr}
2000d01a:	b082      	sub	sp, #8
2000d01c:	af00      	add	r7, sp, #0
2000d01e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
2000d020:	687b      	ldr	r3, [r7, #4]
2000d022:	781b      	ldrb	r3, [r3, #0]
2000d024:	2b00      	cmp	r3, #0
2000d026:	d13c      	bne.n	2000d0a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
2000d028:	4a20      	ldr	r2, [pc, #128]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d02a:	687b      	ldr	r3, [r7, #4]
2000d02c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
2000d030:	687b      	ldr	r3, [r7, #4]
2000d032:	4a1e      	ldr	r2, [pc, #120]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d034:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
2000d038:	4b1c      	ldr	r3, [pc, #112]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d03a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
2000d03e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
2000d040:	4b1a      	ldr	r3, [pc, #104]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d042:	2206      	movs	r2, #6
2000d044:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
2000d046:	4b19      	ldr	r3, [pc, #100]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d048:	2202      	movs	r2, #2
2000d04a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
2000d04c:	4b17      	ldr	r3, [pc, #92]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d04e:	2200      	movs	r2, #0
2000d050:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
2000d052:	4b16      	ldr	r3, [pc, #88]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d054:	2202      	movs	r2, #2
2000d056:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
2000d058:	4b14      	ldr	r3, [pc, #80]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d05a:	2201      	movs	r2, #1
2000d05c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
2000d05e:	4b13      	ldr	r3, [pc, #76]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d060:	2200      	movs	r2, #0
2000d062:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
2000d064:	4b11      	ldr	r3, [pc, #68]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d066:	2200      	movs	r2, #0
2000d068:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
2000d06a:	4b10      	ldr	r3, [pc, #64]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d06c:	2201      	movs	r2, #1
2000d06e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
2000d070:	4b0e      	ldr	r3, [pc, #56]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d072:	2200      	movs	r2, #0
2000d074:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
2000d076:	480d      	ldr	r0, [pc, #52]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d078:	f7f9 f997 	bl	200063aa <HAL_PCD_Init>
2000d07c:	4603      	mov	r3, r0
2000d07e:	2b00      	cmp	r3, #0
2000d080:	d001      	beq.n	2000d086 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
2000d082:	f7f8 f84d 	bl	20005120 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
2000d086:	2180      	movs	r1, #128	@ 0x80
2000d088:	4808      	ldr	r0, [pc, #32]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d08a:	f7fa fbe4 	bl	20007856 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
2000d08e:	2240      	movs	r2, #64	@ 0x40
2000d090:	2100      	movs	r1, #0
2000d092:	4806      	ldr	r0, [pc, #24]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d094:	f7fa fb98 	bl	200077c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
2000d098:	2280      	movs	r2, #128	@ 0x80
2000d09a:	2101      	movs	r1, #1
2000d09c:	4803      	ldr	r0, [pc, #12]	@ (2000d0ac <USBD_LL_Init+0x94>)
2000d09e:	f7fa fb93 	bl	200077c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
2000d0a2:	2300      	movs	r3, #0
}
2000d0a4:	4618      	mov	r0, r3
2000d0a6:	3708      	adds	r7, #8
2000d0a8:	46bd      	mov	sp, r7
2000d0aa:	bd80      	pop	{r7, pc}
2000d0ac:	2000f2e8 	.word	0x2000f2e8

2000d0b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
2000d0b0:	b580      	push	{r7, lr}
2000d0b2:	b084      	sub	sp, #16
2000d0b4:	af00      	add	r7, sp, #0
2000d0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d0b8:	2300      	movs	r3, #0
2000d0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d0bc:	2300      	movs	r3, #0
2000d0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
2000d0c0:	687b      	ldr	r3, [r7, #4]
2000d0c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d0c6:	4618      	mov	r0, r3
2000d0c8:	f7f9 fa85 	bl	200065d6 <HAL_PCD_Start>
2000d0cc:	4603      	mov	r3, r0
2000d0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d0d0:	7bfb      	ldrb	r3, [r7, #15]
2000d0d2:	4618      	mov	r0, r3
2000d0d4:	f000 f97e 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d0d8:	4603      	mov	r3, r0
2000d0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000d0dc:	7bbb      	ldrb	r3, [r7, #14]
}
2000d0de:	4618      	mov	r0, r3
2000d0e0:	3710      	adds	r7, #16
2000d0e2:	46bd      	mov	sp, r7
2000d0e4:	bd80      	pop	{r7, pc}

2000d0e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
2000d0e6:	b580      	push	{r7, lr}
2000d0e8:	b084      	sub	sp, #16
2000d0ea:	af00      	add	r7, sp, #0
2000d0ec:	6078      	str	r0, [r7, #4]
2000d0ee:	4608      	mov	r0, r1
2000d0f0:	4611      	mov	r1, r2
2000d0f2:	461a      	mov	r2, r3
2000d0f4:	4603      	mov	r3, r0
2000d0f6:	70fb      	strb	r3, [r7, #3]
2000d0f8:	460b      	mov	r3, r1
2000d0fa:	70bb      	strb	r3, [r7, #2]
2000d0fc:	4613      	mov	r3, r2
2000d0fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d100:	2300      	movs	r3, #0
2000d102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d104:	2300      	movs	r3, #0
2000d106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
2000d108:	687b      	ldr	r3, [r7, #4]
2000d10a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000d10e:	78bb      	ldrb	r3, [r7, #2]
2000d110:	883a      	ldrh	r2, [r7, #0]
2000d112:	78f9      	ldrb	r1, [r7, #3]
2000d114:	f7f9 ff73 	bl	20006ffe <HAL_PCD_EP_Open>
2000d118:	4603      	mov	r3, r0
2000d11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d11c:	7bfb      	ldrb	r3, [r7, #15]
2000d11e:	4618      	mov	r0, r3
2000d120:	f000 f958 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d124:	4603      	mov	r3, r0
2000d126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000d128:	7bbb      	ldrb	r3, [r7, #14]
}
2000d12a:	4618      	mov	r0, r3
2000d12c:	3710      	adds	r7, #16
2000d12e:	46bd      	mov	sp, r7
2000d130:	bd80      	pop	{r7, pc}

2000d132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000d132:	b580      	push	{r7, lr}
2000d134:	b084      	sub	sp, #16
2000d136:	af00      	add	r7, sp, #0
2000d138:	6078      	str	r0, [r7, #4]
2000d13a:	460b      	mov	r3, r1
2000d13c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d13e:	2300      	movs	r3, #0
2000d140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d142:	2300      	movs	r3, #0
2000d144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
2000d146:	687b      	ldr	r3, [r7, #4]
2000d148:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d14c:	78fa      	ldrb	r2, [r7, #3]
2000d14e:	4611      	mov	r1, r2
2000d150:	4618      	mov	r0, r3
2000d152:	f7f9 ffbe 	bl	200070d2 <HAL_PCD_EP_Close>
2000d156:	4603      	mov	r3, r0
2000d158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d15a:	7bfb      	ldrb	r3, [r7, #15]
2000d15c:	4618      	mov	r0, r3
2000d15e:	f000 f939 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d162:	4603      	mov	r3, r0
2000d164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000d166:	7bbb      	ldrb	r3, [r7, #14]
}
2000d168:	4618      	mov	r0, r3
2000d16a:	3710      	adds	r7, #16
2000d16c:	46bd      	mov	sp, r7
2000d16e:	bd80      	pop	{r7, pc}

2000d170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000d170:	b580      	push	{r7, lr}
2000d172:	b084      	sub	sp, #16
2000d174:	af00      	add	r7, sp, #0
2000d176:	6078      	str	r0, [r7, #4]
2000d178:	460b      	mov	r3, r1
2000d17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d17c:	2300      	movs	r3, #0
2000d17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d180:	2300      	movs	r3, #0
2000d182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
2000d184:	687b      	ldr	r3, [r7, #4]
2000d186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d18a:	78fa      	ldrb	r2, [r7, #3]
2000d18c:	4611      	mov	r1, r2
2000d18e:	4618      	mov	r0, r3
2000d190:	f7fa f876 	bl	20007280 <HAL_PCD_EP_SetStall>
2000d194:	4603      	mov	r3, r0
2000d196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d198:	7bfb      	ldrb	r3, [r7, #15]
2000d19a:	4618      	mov	r0, r3
2000d19c:	f000 f91a 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d1a0:	4603      	mov	r3, r0
2000d1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000d1a4:	7bbb      	ldrb	r3, [r7, #14]
}
2000d1a6:	4618      	mov	r0, r3
2000d1a8:	3710      	adds	r7, #16
2000d1aa:	46bd      	mov	sp, r7
2000d1ac:	bd80      	pop	{r7, pc}

2000d1ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000d1ae:	b580      	push	{r7, lr}
2000d1b0:	b084      	sub	sp, #16
2000d1b2:	af00      	add	r7, sp, #0
2000d1b4:	6078      	str	r0, [r7, #4]
2000d1b6:	460b      	mov	r3, r1
2000d1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d1ba:	2300      	movs	r3, #0
2000d1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d1be:	2300      	movs	r3, #0
2000d1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
2000d1c2:	687b      	ldr	r3, [r7, #4]
2000d1c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d1c8:	78fa      	ldrb	r2, [r7, #3]
2000d1ca:	4611      	mov	r1, r2
2000d1cc:	4618      	mov	r0, r3
2000d1ce:	f7fa f8ba 	bl	20007346 <HAL_PCD_EP_ClrStall>
2000d1d2:	4603      	mov	r3, r0
2000d1d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d1d6:	7bfb      	ldrb	r3, [r7, #15]
2000d1d8:	4618      	mov	r0, r3
2000d1da:	f000 f8fb 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d1de:	4603      	mov	r3, r0
2000d1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000d1e2:	7bbb      	ldrb	r3, [r7, #14]
}
2000d1e4:	4618      	mov	r0, r3
2000d1e6:	3710      	adds	r7, #16
2000d1e8:	46bd      	mov	sp, r7
2000d1ea:	bd80      	pop	{r7, pc}

2000d1ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000d1ec:	b480      	push	{r7}
2000d1ee:	b085      	sub	sp, #20
2000d1f0:	af00      	add	r7, sp, #0
2000d1f2:	6078      	str	r0, [r7, #4]
2000d1f4:	460b      	mov	r3, r1
2000d1f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
2000d1f8:	687b      	ldr	r3, [r7, #4]
2000d1fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d1fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
2000d200:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000d204:	2b00      	cmp	r3, #0
2000d206:	da0b      	bge.n	2000d220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
2000d208:	78fb      	ldrb	r3, [r7, #3]
2000d20a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000d20e:	68f9      	ldr	r1, [r7, #12]
2000d210:	4613      	mov	r3, r2
2000d212:	00db      	lsls	r3, r3, #3
2000d214:	4413      	add	r3, r2
2000d216:	009b      	lsls	r3, r3, #2
2000d218:	440b      	add	r3, r1
2000d21a:	3316      	adds	r3, #22
2000d21c:	781b      	ldrb	r3, [r3, #0]
2000d21e:	e00b      	b.n	2000d238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
2000d220:	78fb      	ldrb	r3, [r7, #3]
2000d222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000d226:	68f9      	ldr	r1, [r7, #12]
2000d228:	4613      	mov	r3, r2
2000d22a:	00db      	lsls	r3, r3, #3
2000d22c:	4413      	add	r3, r2
2000d22e:	009b      	lsls	r3, r3, #2
2000d230:	440b      	add	r3, r1
2000d232:	f203 2356 	addw	r3, r3, #598	@ 0x256
2000d236:	781b      	ldrb	r3, [r3, #0]
  }
}
2000d238:	4618      	mov	r0, r3
2000d23a:	3714      	adds	r7, #20
2000d23c:	46bd      	mov	sp, r7
2000d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d242:	4770      	bx	lr

2000d244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
2000d244:	b580      	push	{r7, lr}
2000d246:	b084      	sub	sp, #16
2000d248:	af00      	add	r7, sp, #0
2000d24a:	6078      	str	r0, [r7, #4]
2000d24c:	460b      	mov	r3, r1
2000d24e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d250:	2300      	movs	r3, #0
2000d252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d254:	2300      	movs	r3, #0
2000d256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
2000d258:	687b      	ldr	r3, [r7, #4]
2000d25a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d25e:	78fa      	ldrb	r2, [r7, #3]
2000d260:	4611      	mov	r1, r2
2000d262:	4618      	mov	r0, r3
2000d264:	f7f9 fea7 	bl	20006fb6 <HAL_PCD_SetAddress>
2000d268:	4603      	mov	r3, r0
2000d26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d26c:	7bfb      	ldrb	r3, [r7, #15]
2000d26e:	4618      	mov	r0, r3
2000d270:	f000 f8b0 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d274:	4603      	mov	r3, r0
2000d276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000d278:	7bbb      	ldrb	r3, [r7, #14]
}
2000d27a:	4618      	mov	r0, r3
2000d27c:	3710      	adds	r7, #16
2000d27e:	46bd      	mov	sp, r7
2000d280:	bd80      	pop	{r7, pc}

2000d282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000d282:	b580      	push	{r7, lr}
2000d284:	b086      	sub	sp, #24
2000d286:	af00      	add	r7, sp, #0
2000d288:	60f8      	str	r0, [r7, #12]
2000d28a:	607a      	str	r2, [r7, #4]
2000d28c:	603b      	str	r3, [r7, #0]
2000d28e:	460b      	mov	r3, r1
2000d290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d292:	2300      	movs	r3, #0
2000d294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d296:	2300      	movs	r3, #0
2000d298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
2000d29a:	68fb      	ldr	r3, [r7, #12]
2000d29c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000d2a0:	7af9      	ldrb	r1, [r7, #11]
2000d2a2:	683b      	ldr	r3, [r7, #0]
2000d2a4:	687a      	ldr	r2, [r7, #4]
2000d2a6:	f7f9 ffb1 	bl	2000720c <HAL_PCD_EP_Transmit>
2000d2aa:	4603      	mov	r3, r0
2000d2ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d2ae:	7dfb      	ldrb	r3, [r7, #23]
2000d2b0:	4618      	mov	r0, r3
2000d2b2:	f000 f88f 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d2b6:	4603      	mov	r3, r0
2000d2b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000d2ba:	7dbb      	ldrb	r3, [r7, #22]
}
2000d2bc:	4618      	mov	r0, r3
2000d2be:	3718      	adds	r7, #24
2000d2c0:	46bd      	mov	sp, r7
2000d2c2:	bd80      	pop	{r7, pc}

2000d2c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000d2c4:	b580      	push	{r7, lr}
2000d2c6:	b086      	sub	sp, #24
2000d2c8:	af00      	add	r7, sp, #0
2000d2ca:	60f8      	str	r0, [r7, #12]
2000d2cc:	607a      	str	r2, [r7, #4]
2000d2ce:	603b      	str	r3, [r7, #0]
2000d2d0:	460b      	mov	r3, r1
2000d2d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d2d4:	2300      	movs	r3, #0
2000d2d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d2d8:	2300      	movs	r3, #0
2000d2da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
2000d2dc:	68fb      	ldr	r3, [r7, #12]
2000d2de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000d2e2:	7af9      	ldrb	r1, [r7, #11]
2000d2e4:	683b      	ldr	r3, [r7, #0]
2000d2e6:	687a      	ldr	r2, [r7, #4]
2000d2e8:	f7f9 ff3d 	bl	20007166 <HAL_PCD_EP_Receive>
2000d2ec:	4603      	mov	r3, r0
2000d2ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d2f0:	7dfb      	ldrb	r3, [r7, #23]
2000d2f2:	4618      	mov	r0, r3
2000d2f4:	f000 f86e 	bl	2000d3d4 <USBD_Get_USB_Status>
2000d2f8:	4603      	mov	r3, r0
2000d2fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000d2fc:	7dbb      	ldrb	r3, [r7, #22]
}
2000d2fe:	4618      	mov	r0, r3
2000d300:	3718      	adds	r7, #24
2000d302:	46bd      	mov	sp, r7
2000d304:	bd80      	pop	{r7, pc}

2000d306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000d306:	b580      	push	{r7, lr}
2000d308:	b082      	sub	sp, #8
2000d30a:	af00      	add	r7, sp, #0
2000d30c:	6078      	str	r0, [r7, #4]
2000d30e:	460b      	mov	r3, r1
2000d310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
2000d312:	687b      	ldr	r3, [r7, #4]
2000d314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d318:	78fa      	ldrb	r2, [r7, #3]
2000d31a:	4611      	mov	r1, r2
2000d31c:	4618      	mov	r0, r3
2000d31e:	f7f9 ff5d 	bl	200071dc <HAL_PCD_EP_GetRxCount>
2000d322:	4603      	mov	r3, r0
}
2000d324:	4618      	mov	r0, r3
2000d326:	3708      	adds	r7, #8
2000d328:	46bd      	mov	sp, r7
2000d32a:	bd80      	pop	{r7, pc}

2000d32c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
2000d32c:	b580      	push	{r7, lr}
2000d32e:	b082      	sub	sp, #8
2000d330:	af00      	add	r7, sp, #0
2000d332:	6078      	str	r0, [r7, #4]
2000d334:	460b      	mov	r3, r1
2000d336:	70fb      	strb	r3, [r7, #3]
  switch (msg)
2000d338:	78fb      	ldrb	r3, [r7, #3]
2000d33a:	2b00      	cmp	r3, #0
2000d33c:	d002      	beq.n	2000d344 <HAL_PCDEx_LPM_Callback+0x18>
2000d33e:	2b01      	cmp	r3, #1
2000d340:	d01f      	beq.n	2000d382 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
2000d342:	e03b      	b.n	2000d3bc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
2000d344:	687b      	ldr	r3, [r7, #4]
2000d346:	7adb      	ldrb	r3, [r3, #11]
2000d348:	2b00      	cmp	r3, #0
2000d34a:	d007      	beq.n	2000d35c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
2000d34c:	f000 f83c 	bl	2000d3c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000d350:	4b1c      	ldr	r3, [pc, #112]	@ (2000d3c4 <HAL_PCDEx_LPM_Callback+0x98>)
2000d352:	691b      	ldr	r3, [r3, #16]
2000d354:	4a1b      	ldr	r2, [pc, #108]	@ (2000d3c4 <HAL_PCDEx_LPM_Callback+0x98>)
2000d356:	f023 0306 	bic.w	r3, r3, #6
2000d35a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
2000d35c:	687b      	ldr	r3, [r7, #4]
2000d35e:	681b      	ldr	r3, [r3, #0]
2000d360:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000d364:	681b      	ldr	r3, [r3, #0]
2000d366:	687a      	ldr	r2, [r7, #4]
2000d368:	6812      	ldr	r2, [r2, #0]
2000d36a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000d36e:	f023 0301 	bic.w	r3, r3, #1
2000d372:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
2000d374:	687b      	ldr	r3, [r7, #4]
2000d376:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000d37a:	4618      	mov	r0, r3
2000d37c:	f7fe fb14 	bl	2000b9a8 <USBD_LL_Resume>
    break;
2000d380:	e01c      	b.n	2000d3bc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000d382:	687b      	ldr	r3, [r7, #4]
2000d384:	681b      	ldr	r3, [r3, #0]
2000d386:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000d38a:	681b      	ldr	r3, [r3, #0]
2000d38c:	687a      	ldr	r2, [r7, #4]
2000d38e:	6812      	ldr	r2, [r2, #0]
2000d390:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000d394:	f043 0301 	orr.w	r3, r3, #1
2000d398:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
2000d39a:	687b      	ldr	r3, [r7, #4]
2000d39c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000d3a0:	4618      	mov	r0, r3
2000d3a2:	f7fe fae5 	bl	2000b970 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
2000d3a6:	687b      	ldr	r3, [r7, #4]
2000d3a8:	7adb      	ldrb	r3, [r3, #11]
2000d3aa:	2b00      	cmp	r3, #0
2000d3ac:	d005      	beq.n	2000d3ba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000d3ae:	4b05      	ldr	r3, [pc, #20]	@ (2000d3c4 <HAL_PCDEx_LPM_Callback+0x98>)
2000d3b0:	691b      	ldr	r3, [r3, #16]
2000d3b2:	4a04      	ldr	r2, [pc, #16]	@ (2000d3c4 <HAL_PCDEx_LPM_Callback+0x98>)
2000d3b4:	f043 0306 	orr.w	r3, r3, #6
2000d3b8:	6113      	str	r3, [r2, #16]
    break;
2000d3ba:	bf00      	nop
}
2000d3bc:	bf00      	nop
2000d3be:	3708      	adds	r7, #8
2000d3c0:	46bd      	mov	sp, r7
2000d3c2:	bd80      	pop	{r7, pc}
2000d3c4:	e000ed00 	.word	0xe000ed00

2000d3c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
2000d3c8:	b580      	push	{r7, lr}
2000d3ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
2000d3cc:	f7f7 faee 	bl	200049ac <SystemClock_Config>
}
2000d3d0:	bf00      	nop
2000d3d2:	bd80      	pop	{r7, pc}

2000d3d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
2000d3d4:	b480      	push	{r7}
2000d3d6:	b085      	sub	sp, #20
2000d3d8:	af00      	add	r7, sp, #0
2000d3da:	4603      	mov	r3, r0
2000d3dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d3de:	2300      	movs	r3, #0
2000d3e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
2000d3e2:	79fb      	ldrb	r3, [r7, #7]
2000d3e4:	2b03      	cmp	r3, #3
2000d3e6:	d817      	bhi.n	2000d418 <USBD_Get_USB_Status+0x44>
2000d3e8:	a201      	add	r2, pc, #4	@ (adr r2, 2000d3f0 <USBD_Get_USB_Status+0x1c>)
2000d3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000d3ee:	bf00      	nop
2000d3f0:	2000d401 	.word	0x2000d401
2000d3f4:	2000d407 	.word	0x2000d407
2000d3f8:	2000d40d 	.word	0x2000d40d
2000d3fc:	2000d413 	.word	0x2000d413
  {
    case HAL_OK :
      usb_status = USBD_OK;
2000d400:	2300      	movs	r3, #0
2000d402:	73fb      	strb	r3, [r7, #15]
    break;
2000d404:	e00b      	b.n	2000d41e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
2000d406:	2303      	movs	r3, #3
2000d408:	73fb      	strb	r3, [r7, #15]
    break;
2000d40a:	e008      	b.n	2000d41e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
2000d40c:	2301      	movs	r3, #1
2000d40e:	73fb      	strb	r3, [r7, #15]
    break;
2000d410:	e005      	b.n	2000d41e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
2000d412:	2303      	movs	r3, #3
2000d414:	73fb      	strb	r3, [r7, #15]
    break;
2000d416:	e002      	b.n	2000d41e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
2000d418:	2303      	movs	r3, #3
2000d41a:	73fb      	strb	r3, [r7, #15]
    break;
2000d41c:	bf00      	nop
  }
  return usb_status;
2000d41e:	7bfb      	ldrb	r3, [r7, #15]
}
2000d420:	4618      	mov	r0, r3
2000d422:	3714      	adds	r7, #20
2000d424:	46bd      	mov	sp, r7
2000d426:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d42a:	4770      	bx	lr

2000d42c <malloc>:
2000d42c:	4b02      	ldr	r3, [pc, #8]	@ (2000d438 <malloc+0xc>)
2000d42e:	4601      	mov	r1, r0
2000d430:	6818      	ldr	r0, [r3, #0]
2000d432:	f000 b82d 	b.w	2000d490 <_malloc_r>
2000d436:	bf00      	nop
2000d438:	2000d8a0 	.word	0x2000d8a0

2000d43c <free>:
2000d43c:	4b02      	ldr	r3, [pc, #8]	@ (2000d448 <free+0xc>)
2000d43e:	4601      	mov	r1, r0
2000d440:	6818      	ldr	r0, [r3, #0]
2000d442:	f000 b903 	b.w	2000d64c <_free_r>
2000d446:	bf00      	nop
2000d448:	2000d8a0 	.word	0x2000d8a0

2000d44c <sbrk_aligned>:
2000d44c:	b570      	push	{r4, r5, r6, lr}
2000d44e:	4e0f      	ldr	r6, [pc, #60]	@ (2000d48c <sbrk_aligned+0x40>)
2000d450:	460c      	mov	r4, r1
2000d452:	6831      	ldr	r1, [r6, #0]
2000d454:	4605      	mov	r5, r0
2000d456:	b911      	cbnz	r1, 2000d45e <sbrk_aligned+0x12>
2000d458:	f000 f8ae 	bl	2000d5b8 <_sbrk_r>
2000d45c:	6030      	str	r0, [r6, #0]
2000d45e:	4621      	mov	r1, r4
2000d460:	4628      	mov	r0, r5
2000d462:	f000 f8a9 	bl	2000d5b8 <_sbrk_r>
2000d466:	1c43      	adds	r3, r0, #1
2000d468:	d103      	bne.n	2000d472 <sbrk_aligned+0x26>
2000d46a:	f04f 34ff 	mov.w	r4, #4294967295
2000d46e:	4620      	mov	r0, r4
2000d470:	bd70      	pop	{r4, r5, r6, pc}
2000d472:	1cc4      	adds	r4, r0, #3
2000d474:	f024 0403 	bic.w	r4, r4, #3
2000d478:	42a0      	cmp	r0, r4
2000d47a:	d0f8      	beq.n	2000d46e <sbrk_aligned+0x22>
2000d47c:	1a21      	subs	r1, r4, r0
2000d47e:	4628      	mov	r0, r5
2000d480:	f000 f89a 	bl	2000d5b8 <_sbrk_r>
2000d484:	3001      	adds	r0, #1
2000d486:	d1f2      	bne.n	2000d46e <sbrk_aligned+0x22>
2000d488:	e7ef      	b.n	2000d46a <sbrk_aligned+0x1e>
2000d48a:	bf00      	nop
2000d48c:	2000f7c8 	.word	0x2000f7c8

2000d490 <_malloc_r>:
2000d490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000d494:	1ccd      	adds	r5, r1, #3
2000d496:	f025 0503 	bic.w	r5, r5, #3
2000d49a:	3508      	adds	r5, #8
2000d49c:	2d0c      	cmp	r5, #12
2000d49e:	bf38      	it	cc
2000d4a0:	250c      	movcc	r5, #12
2000d4a2:	2d00      	cmp	r5, #0
2000d4a4:	4606      	mov	r6, r0
2000d4a6:	db01      	blt.n	2000d4ac <_malloc_r+0x1c>
2000d4a8:	42a9      	cmp	r1, r5
2000d4aa:	d904      	bls.n	2000d4b6 <_malloc_r+0x26>
2000d4ac:	230c      	movs	r3, #12
2000d4ae:	6033      	str	r3, [r6, #0]
2000d4b0:	2000      	movs	r0, #0
2000d4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000d4b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2000d58c <_malloc_r+0xfc>
2000d4ba:	f000 f869 	bl	2000d590 <__malloc_lock>
2000d4be:	f8d8 3000 	ldr.w	r3, [r8]
2000d4c2:	461c      	mov	r4, r3
2000d4c4:	bb44      	cbnz	r4, 2000d518 <_malloc_r+0x88>
2000d4c6:	4629      	mov	r1, r5
2000d4c8:	4630      	mov	r0, r6
2000d4ca:	f7ff ffbf 	bl	2000d44c <sbrk_aligned>
2000d4ce:	1c43      	adds	r3, r0, #1
2000d4d0:	4604      	mov	r4, r0
2000d4d2:	d158      	bne.n	2000d586 <_malloc_r+0xf6>
2000d4d4:	f8d8 4000 	ldr.w	r4, [r8]
2000d4d8:	4627      	mov	r7, r4
2000d4da:	2f00      	cmp	r7, #0
2000d4dc:	d143      	bne.n	2000d566 <_malloc_r+0xd6>
2000d4de:	2c00      	cmp	r4, #0
2000d4e0:	d04b      	beq.n	2000d57a <_malloc_r+0xea>
2000d4e2:	6823      	ldr	r3, [r4, #0]
2000d4e4:	4639      	mov	r1, r7
2000d4e6:	4630      	mov	r0, r6
2000d4e8:	eb04 0903 	add.w	r9, r4, r3
2000d4ec:	f000 f864 	bl	2000d5b8 <_sbrk_r>
2000d4f0:	4581      	cmp	r9, r0
2000d4f2:	d142      	bne.n	2000d57a <_malloc_r+0xea>
2000d4f4:	6821      	ldr	r1, [r4, #0]
2000d4f6:	1a6d      	subs	r5, r5, r1
2000d4f8:	4629      	mov	r1, r5
2000d4fa:	4630      	mov	r0, r6
2000d4fc:	f7ff ffa6 	bl	2000d44c <sbrk_aligned>
2000d500:	3001      	adds	r0, #1
2000d502:	d03a      	beq.n	2000d57a <_malloc_r+0xea>
2000d504:	6823      	ldr	r3, [r4, #0]
2000d506:	442b      	add	r3, r5
2000d508:	6023      	str	r3, [r4, #0]
2000d50a:	f8d8 3000 	ldr.w	r3, [r8]
2000d50e:	685a      	ldr	r2, [r3, #4]
2000d510:	bb62      	cbnz	r2, 2000d56c <_malloc_r+0xdc>
2000d512:	f8c8 7000 	str.w	r7, [r8]
2000d516:	e00f      	b.n	2000d538 <_malloc_r+0xa8>
2000d518:	6822      	ldr	r2, [r4, #0]
2000d51a:	1b52      	subs	r2, r2, r5
2000d51c:	d420      	bmi.n	2000d560 <_malloc_r+0xd0>
2000d51e:	2a0b      	cmp	r2, #11
2000d520:	d917      	bls.n	2000d552 <_malloc_r+0xc2>
2000d522:	1961      	adds	r1, r4, r5
2000d524:	42a3      	cmp	r3, r4
2000d526:	6025      	str	r5, [r4, #0]
2000d528:	bf18      	it	ne
2000d52a:	6059      	strne	r1, [r3, #4]
2000d52c:	6863      	ldr	r3, [r4, #4]
2000d52e:	bf08      	it	eq
2000d530:	f8c8 1000 	streq.w	r1, [r8]
2000d534:	5162      	str	r2, [r4, r5]
2000d536:	604b      	str	r3, [r1, #4]
2000d538:	4630      	mov	r0, r6
2000d53a:	f000 f82f 	bl	2000d59c <__malloc_unlock>
2000d53e:	f104 000b 	add.w	r0, r4, #11
2000d542:	1d23      	adds	r3, r4, #4
2000d544:	f020 0007 	bic.w	r0, r0, #7
2000d548:	1ac2      	subs	r2, r0, r3
2000d54a:	bf1c      	itt	ne
2000d54c:	1a1b      	subne	r3, r3, r0
2000d54e:	50a3      	strne	r3, [r4, r2]
2000d550:	e7af      	b.n	2000d4b2 <_malloc_r+0x22>
2000d552:	6862      	ldr	r2, [r4, #4]
2000d554:	42a3      	cmp	r3, r4
2000d556:	bf0c      	ite	eq
2000d558:	f8c8 2000 	streq.w	r2, [r8]
2000d55c:	605a      	strne	r2, [r3, #4]
2000d55e:	e7eb      	b.n	2000d538 <_malloc_r+0xa8>
2000d560:	4623      	mov	r3, r4
2000d562:	6864      	ldr	r4, [r4, #4]
2000d564:	e7ae      	b.n	2000d4c4 <_malloc_r+0x34>
2000d566:	463c      	mov	r4, r7
2000d568:	687f      	ldr	r7, [r7, #4]
2000d56a:	e7b6      	b.n	2000d4da <_malloc_r+0x4a>
2000d56c:	461a      	mov	r2, r3
2000d56e:	685b      	ldr	r3, [r3, #4]
2000d570:	42a3      	cmp	r3, r4
2000d572:	d1fb      	bne.n	2000d56c <_malloc_r+0xdc>
2000d574:	2300      	movs	r3, #0
2000d576:	6053      	str	r3, [r2, #4]
2000d578:	e7de      	b.n	2000d538 <_malloc_r+0xa8>
2000d57a:	230c      	movs	r3, #12
2000d57c:	6033      	str	r3, [r6, #0]
2000d57e:	4630      	mov	r0, r6
2000d580:	f000 f80c 	bl	2000d59c <__malloc_unlock>
2000d584:	e794      	b.n	2000d4b0 <_malloc_r+0x20>
2000d586:	6005      	str	r5, [r0, #0]
2000d588:	e7d6      	b.n	2000d538 <_malloc_r+0xa8>
2000d58a:	bf00      	nop
2000d58c:	2000f7cc 	.word	0x2000f7cc

2000d590 <__malloc_lock>:
2000d590:	4801      	ldr	r0, [pc, #4]	@ (2000d598 <__malloc_lock+0x8>)
2000d592:	f000 b84b 	b.w	2000d62c <__retarget_lock_acquire_recursive>
2000d596:	bf00      	nop
2000d598:	2000f90c 	.word	0x2000f90c

2000d59c <__malloc_unlock>:
2000d59c:	4801      	ldr	r0, [pc, #4]	@ (2000d5a4 <__malloc_unlock+0x8>)
2000d59e:	f000 b846 	b.w	2000d62e <__retarget_lock_release_recursive>
2000d5a2:	bf00      	nop
2000d5a4:	2000f90c 	.word	0x2000f90c

2000d5a8 <memset>:
2000d5a8:	4402      	add	r2, r0
2000d5aa:	4603      	mov	r3, r0
2000d5ac:	4293      	cmp	r3, r2
2000d5ae:	d100      	bne.n	2000d5b2 <memset+0xa>
2000d5b0:	4770      	bx	lr
2000d5b2:	f803 1b01 	strb.w	r1, [r3], #1
2000d5b6:	e7f9      	b.n	2000d5ac <memset+0x4>

2000d5b8 <_sbrk_r>:
2000d5b8:	b538      	push	{r3, r4, r5, lr}
2000d5ba:	4d06      	ldr	r5, [pc, #24]	@ (2000d5d4 <_sbrk_r+0x1c>)
2000d5bc:	2300      	movs	r3, #0
2000d5be:	4604      	mov	r4, r0
2000d5c0:	4608      	mov	r0, r1
2000d5c2:	602b      	str	r3, [r5, #0]
2000d5c4:	f7f7 ffc2 	bl	2000554c <_sbrk>
2000d5c8:	1c43      	adds	r3, r0, #1
2000d5ca:	d102      	bne.n	2000d5d2 <_sbrk_r+0x1a>
2000d5cc:	682b      	ldr	r3, [r5, #0]
2000d5ce:	b103      	cbz	r3, 2000d5d2 <_sbrk_r+0x1a>
2000d5d0:	6023      	str	r3, [r4, #0]
2000d5d2:	bd38      	pop	{r3, r4, r5, pc}
2000d5d4:	2000f908 	.word	0x2000f908

2000d5d8 <__errno>:
2000d5d8:	4b01      	ldr	r3, [pc, #4]	@ (2000d5e0 <__errno+0x8>)
2000d5da:	6818      	ldr	r0, [r3, #0]
2000d5dc:	4770      	bx	lr
2000d5de:	bf00      	nop
2000d5e0:	2000d8a0 	.word	0x2000d8a0

2000d5e4 <__libc_init_array>:
2000d5e4:	b570      	push	{r4, r5, r6, lr}
2000d5e6:	4d0d      	ldr	r5, [pc, #52]	@ (2000d61c <__libc_init_array+0x38>)
2000d5e8:	4c0d      	ldr	r4, [pc, #52]	@ (2000d620 <__libc_init_array+0x3c>)
2000d5ea:	1b64      	subs	r4, r4, r5
2000d5ec:	10a4      	asrs	r4, r4, #2
2000d5ee:	2600      	movs	r6, #0
2000d5f0:	42a6      	cmp	r6, r4
2000d5f2:	d109      	bne.n	2000d608 <__libc_init_array+0x24>
2000d5f4:	4d0b      	ldr	r5, [pc, #44]	@ (2000d624 <__libc_init_array+0x40>)
2000d5f6:	4c0c      	ldr	r4, [pc, #48]	@ (2000d628 <__libc_init_array+0x44>)
2000d5f8:	f000 f872 	bl	2000d6e0 <_init>
2000d5fc:	1b64      	subs	r4, r4, r5
2000d5fe:	10a4      	asrs	r4, r4, #2
2000d600:	2600      	movs	r6, #0
2000d602:	42a6      	cmp	r6, r4
2000d604:	d105      	bne.n	2000d612 <__libc_init_array+0x2e>
2000d606:	bd70      	pop	{r4, r5, r6, pc}
2000d608:	f855 3b04 	ldr.w	r3, [r5], #4
2000d60c:	4798      	blx	r3
2000d60e:	3601      	adds	r6, #1
2000d610:	e7ee      	b.n	2000d5f0 <__libc_init_array+0xc>
2000d612:	f855 3b04 	ldr.w	r3, [r5], #4
2000d616:	4798      	blx	r3
2000d618:	3601      	adds	r6, #1
2000d61a:	e7f2      	b.n	2000d602 <__libc_init_array+0x1e>
2000d61c:	2000d760 	.word	0x2000d760
2000d620:	2000d760 	.word	0x2000d760
2000d624:	2000d760 	.word	0x2000d760
2000d628:	2000d764 	.word	0x2000d764

2000d62c <__retarget_lock_acquire_recursive>:
2000d62c:	4770      	bx	lr

2000d62e <__retarget_lock_release_recursive>:
2000d62e:	4770      	bx	lr

2000d630 <memcpy>:
2000d630:	440a      	add	r2, r1
2000d632:	4291      	cmp	r1, r2
2000d634:	f100 33ff 	add.w	r3, r0, #4294967295
2000d638:	d100      	bne.n	2000d63c <memcpy+0xc>
2000d63a:	4770      	bx	lr
2000d63c:	b510      	push	{r4, lr}
2000d63e:	f811 4b01 	ldrb.w	r4, [r1], #1
2000d642:	f803 4f01 	strb.w	r4, [r3, #1]!
2000d646:	4291      	cmp	r1, r2
2000d648:	d1f9      	bne.n	2000d63e <memcpy+0xe>
2000d64a:	bd10      	pop	{r4, pc}

2000d64c <_free_r>:
2000d64c:	b538      	push	{r3, r4, r5, lr}
2000d64e:	4605      	mov	r5, r0
2000d650:	2900      	cmp	r1, #0
2000d652:	d041      	beq.n	2000d6d8 <_free_r+0x8c>
2000d654:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000d658:	1f0c      	subs	r4, r1, #4
2000d65a:	2b00      	cmp	r3, #0
2000d65c:	bfb8      	it	lt
2000d65e:	18e4      	addlt	r4, r4, r3
2000d660:	f7ff ff96 	bl	2000d590 <__malloc_lock>
2000d664:	4a1d      	ldr	r2, [pc, #116]	@ (2000d6dc <_free_r+0x90>)
2000d666:	6813      	ldr	r3, [r2, #0]
2000d668:	b933      	cbnz	r3, 2000d678 <_free_r+0x2c>
2000d66a:	6063      	str	r3, [r4, #4]
2000d66c:	6014      	str	r4, [r2, #0]
2000d66e:	4628      	mov	r0, r5
2000d670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000d674:	f7ff bf92 	b.w	2000d59c <__malloc_unlock>
2000d678:	42a3      	cmp	r3, r4
2000d67a:	d908      	bls.n	2000d68e <_free_r+0x42>
2000d67c:	6820      	ldr	r0, [r4, #0]
2000d67e:	1821      	adds	r1, r4, r0
2000d680:	428b      	cmp	r3, r1
2000d682:	bf01      	itttt	eq
2000d684:	6819      	ldreq	r1, [r3, #0]
2000d686:	685b      	ldreq	r3, [r3, #4]
2000d688:	1809      	addeq	r1, r1, r0
2000d68a:	6021      	streq	r1, [r4, #0]
2000d68c:	e7ed      	b.n	2000d66a <_free_r+0x1e>
2000d68e:	461a      	mov	r2, r3
2000d690:	685b      	ldr	r3, [r3, #4]
2000d692:	b10b      	cbz	r3, 2000d698 <_free_r+0x4c>
2000d694:	42a3      	cmp	r3, r4
2000d696:	d9fa      	bls.n	2000d68e <_free_r+0x42>
2000d698:	6811      	ldr	r1, [r2, #0]
2000d69a:	1850      	adds	r0, r2, r1
2000d69c:	42a0      	cmp	r0, r4
2000d69e:	d10b      	bne.n	2000d6b8 <_free_r+0x6c>
2000d6a0:	6820      	ldr	r0, [r4, #0]
2000d6a2:	4401      	add	r1, r0
2000d6a4:	1850      	adds	r0, r2, r1
2000d6a6:	4283      	cmp	r3, r0
2000d6a8:	6011      	str	r1, [r2, #0]
2000d6aa:	d1e0      	bne.n	2000d66e <_free_r+0x22>
2000d6ac:	6818      	ldr	r0, [r3, #0]
2000d6ae:	685b      	ldr	r3, [r3, #4]
2000d6b0:	6053      	str	r3, [r2, #4]
2000d6b2:	4408      	add	r0, r1
2000d6b4:	6010      	str	r0, [r2, #0]
2000d6b6:	e7da      	b.n	2000d66e <_free_r+0x22>
2000d6b8:	d902      	bls.n	2000d6c0 <_free_r+0x74>
2000d6ba:	230c      	movs	r3, #12
2000d6bc:	602b      	str	r3, [r5, #0]
2000d6be:	e7d6      	b.n	2000d66e <_free_r+0x22>
2000d6c0:	6820      	ldr	r0, [r4, #0]
2000d6c2:	1821      	adds	r1, r4, r0
2000d6c4:	428b      	cmp	r3, r1
2000d6c6:	bf04      	itt	eq
2000d6c8:	6819      	ldreq	r1, [r3, #0]
2000d6ca:	685b      	ldreq	r3, [r3, #4]
2000d6cc:	6063      	str	r3, [r4, #4]
2000d6ce:	bf04      	itt	eq
2000d6d0:	1809      	addeq	r1, r1, r0
2000d6d2:	6021      	streq	r1, [r4, #0]
2000d6d4:	6054      	str	r4, [r2, #4]
2000d6d6:	e7ca      	b.n	2000d66e <_free_r+0x22>
2000d6d8:	bd38      	pop	{r3, r4, r5, pc}
2000d6da:	bf00      	nop
2000d6dc:	2000f7cc 	.word	0x2000f7cc

2000d6e0 <_init>:
2000d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000d6e2:	bf00      	nop
2000d6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000d6e6:	bc08      	pop	{r3}
2000d6e8:	469e      	mov	lr, r3
2000d6ea:	4770      	bx	lr

2000d6ec <_fini>:
2000d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000d6ee:	bf00      	nop
2000d6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000d6f2:	bc08      	pop	{r3}
2000d6f4:	469e      	mov	lr, r3
2000d6f6:	4770      	bx	lr
