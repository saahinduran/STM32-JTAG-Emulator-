
MY_JTAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c254  200001c8  200001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  2000c41c  2000c41c  0000d41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000c47c  2000c47c  0000d754  2**0
                  CONTENTS
  4 .ARM          00000008  2000c47c  2000c47c  0000d47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000c484  2000c754  0000d754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000c484  2000c484  0000d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  2000c488  2000c488  0000d488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  2000c48c  2000c48c  0000d48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000c614  2000c614  0000d614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000c6b4  2000c6b4  0000d6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001ed0  2000c754  2000c754  0000d754  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000e624  2000e624  0000d754  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000d754  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d993  00000000  00000000  0000d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004861  00000000  00000000  0002b117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001830  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001261  00000000  00000000  000311a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa4e  00000000  00000000  00032409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f90b  00000000  00000000  0005ce57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f57a0  00000000  00000000  0007c762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00171f02  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000672c  00000000  00000000  00171f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00178674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c8 <__do_global_dtors_aux>:
200001c8:	b510      	push	{r4, lr}
200001ca:	4c05      	ldr	r4, [pc, #20]	@ (200001e0 <__do_global_dtors_aux+0x18>)
200001cc:	7823      	ldrb	r3, [r4, #0]
200001ce:	b933      	cbnz	r3, 200001de <__do_global_dtors_aux+0x16>
200001d0:	4b04      	ldr	r3, [pc, #16]	@ (200001e4 <__do_global_dtors_aux+0x1c>)
200001d2:	b113      	cbz	r3, 200001da <__do_global_dtors_aux+0x12>
200001d4:	4804      	ldr	r0, [pc, #16]	@ (200001e8 <__do_global_dtors_aux+0x20>)
200001d6:	f3af 8000 	nop.w
200001da:	2301      	movs	r3, #1
200001dc:	7023      	strb	r3, [r4, #0]
200001de:	bd10      	pop	{r4, pc}
200001e0:	2000c754 	.word	0x2000c754
200001e4:	00000000 	.word	0x00000000
200001e8:	2000c404 	.word	0x2000c404

200001ec <frame_dummy>:
200001ec:	b508      	push	{r3, lr}
200001ee:	4b03      	ldr	r3, [pc, #12]	@ (200001fc <frame_dummy+0x10>)
200001f0:	b11b      	cbz	r3, 200001fa <frame_dummy+0xe>
200001f2:	4903      	ldr	r1, [pc, #12]	@ (20000200 <frame_dummy+0x14>)
200001f4:	4803      	ldr	r0, [pc, #12]	@ (20000204 <frame_dummy+0x18>)
200001f6:	f3af 8000 	nop.w
200001fa:	bd08      	pop	{r3, pc}
200001fc:	00000000 	.word	0x00000000
20000200:	2000c758 	.word	0x2000c758
20000204:	2000c404 	.word	0x2000c404

20000208 <__aeabi_uldivmod>:
20000208:	b953      	cbnz	r3, 20000220 <__aeabi_uldivmod+0x18>
2000020a:	b94a      	cbnz	r2, 20000220 <__aeabi_uldivmod+0x18>
2000020c:	2900      	cmp	r1, #0
2000020e:	bf08      	it	eq
20000210:	2800      	cmpeq	r0, #0
20000212:	bf1c      	itt	ne
20000214:	f04f 31ff 	movne.w	r1, #4294967295
20000218:	f04f 30ff 	movne.w	r0, #4294967295
2000021c:	f000 b96a 	b.w	200004f4 <__aeabi_idiv0>
20000220:	f1ad 0c08 	sub.w	ip, sp, #8
20000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000228:	f000 f806 	bl	20000238 <__udivmoddi4>
2000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
20000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000234:	b004      	add	sp, #16
20000236:	4770      	bx	lr

20000238 <__udivmoddi4>:
20000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000023c:	9d08      	ldr	r5, [sp, #32]
2000023e:	460c      	mov	r4, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14e      	bne.n	200002e2 <__udivmoddi4+0xaa>
20000244:	4694      	mov	ip, r2
20000246:	458c      	cmp	ip, r1
20000248:	4686      	mov	lr, r0
2000024a:	fab2 f282 	clz	r2, r2
2000024e:	d962      	bls.n	20000316 <__udivmoddi4+0xde>
20000250:	b14a      	cbz	r2, 20000266 <__udivmoddi4+0x2e>
20000252:	f1c2 0320 	rsb	r3, r2, #32
20000256:	4091      	lsls	r1, r2
20000258:	fa20 f303 	lsr.w	r3, r0, r3
2000025c:	fa0c fc02 	lsl.w	ip, ip, r2
20000260:	4319      	orrs	r1, r3
20000262:	fa00 fe02 	lsl.w	lr, r0, r2
20000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000026a:	fa1f f68c 	uxth.w	r6, ip
2000026e:	fbb1 f4f7 	udiv	r4, r1, r7
20000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000276:	fb07 1114 	mls	r1, r7, r4, r1
2000027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000027e:	fb04 f106 	mul.w	r1, r4, r6
20000282:	4299      	cmp	r1, r3
20000284:	d90a      	bls.n	2000029c <__udivmoddi4+0x64>
20000286:	eb1c 0303 	adds.w	r3, ip, r3
2000028a:	f104 30ff 	add.w	r0, r4, #4294967295
2000028e:	f080 8112 	bcs.w	200004b6 <__udivmoddi4+0x27e>
20000292:	4299      	cmp	r1, r3
20000294:	f240 810f 	bls.w	200004b6 <__udivmoddi4+0x27e>
20000298:	3c02      	subs	r4, #2
2000029a:	4463      	add	r3, ip
2000029c:	1a59      	subs	r1, r3, r1
2000029e:	fa1f f38e 	uxth.w	r3, lr
200002a2:	fbb1 f0f7 	udiv	r0, r1, r7
200002a6:	fb07 1110 	mls	r1, r7, r0, r1
200002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200002ae:	fb00 f606 	mul.w	r6, r0, r6
200002b2:	429e      	cmp	r6, r3
200002b4:	d90a      	bls.n	200002cc <__udivmoddi4+0x94>
200002b6:	eb1c 0303 	adds.w	r3, ip, r3
200002ba:	f100 31ff 	add.w	r1, r0, #4294967295
200002be:	f080 80fc 	bcs.w	200004ba <__udivmoddi4+0x282>
200002c2:	429e      	cmp	r6, r3
200002c4:	f240 80f9 	bls.w	200004ba <__udivmoddi4+0x282>
200002c8:	4463      	add	r3, ip
200002ca:	3802      	subs	r0, #2
200002cc:	1b9b      	subs	r3, r3, r6
200002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200002d2:	2100      	movs	r1, #0
200002d4:	b11d      	cbz	r5, 200002de <__udivmoddi4+0xa6>
200002d6:	40d3      	lsrs	r3, r2
200002d8:	2200      	movs	r2, #0
200002da:	e9c5 3200 	strd	r3, r2, [r5]
200002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002e2:	428b      	cmp	r3, r1
200002e4:	d905      	bls.n	200002f2 <__udivmoddi4+0xba>
200002e6:	b10d      	cbz	r5, 200002ec <__udivmoddi4+0xb4>
200002e8:	e9c5 0100 	strd	r0, r1, [r5]
200002ec:	2100      	movs	r1, #0
200002ee:	4608      	mov	r0, r1
200002f0:	e7f5      	b.n	200002de <__udivmoddi4+0xa6>
200002f2:	fab3 f183 	clz	r1, r3
200002f6:	2900      	cmp	r1, #0
200002f8:	d146      	bne.n	20000388 <__udivmoddi4+0x150>
200002fa:	42a3      	cmp	r3, r4
200002fc:	d302      	bcc.n	20000304 <__udivmoddi4+0xcc>
200002fe:	4290      	cmp	r0, r2
20000300:	f0c0 80f0 	bcc.w	200004e4 <__udivmoddi4+0x2ac>
20000304:	1a86      	subs	r6, r0, r2
20000306:	eb64 0303 	sbc.w	r3, r4, r3
2000030a:	2001      	movs	r0, #1
2000030c:	2d00      	cmp	r5, #0
2000030e:	d0e6      	beq.n	200002de <__udivmoddi4+0xa6>
20000310:	e9c5 6300 	strd	r6, r3, [r5]
20000314:	e7e3      	b.n	200002de <__udivmoddi4+0xa6>
20000316:	2a00      	cmp	r2, #0
20000318:	f040 8090 	bne.w	2000043c <__udivmoddi4+0x204>
2000031c:	eba1 040c 	sub.w	r4, r1, ip
20000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000324:	fa1f f78c 	uxth.w	r7, ip
20000328:	2101      	movs	r1, #1
2000032a:	fbb4 f6f8 	udiv	r6, r4, r8
2000032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000332:	fb08 4416 	mls	r4, r8, r6, r4
20000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000033a:	fb07 f006 	mul.w	r0, r7, r6
2000033e:	4298      	cmp	r0, r3
20000340:	d908      	bls.n	20000354 <__udivmoddi4+0x11c>
20000342:	eb1c 0303 	adds.w	r3, ip, r3
20000346:	f106 34ff 	add.w	r4, r6, #4294967295
2000034a:	d202      	bcs.n	20000352 <__udivmoddi4+0x11a>
2000034c:	4298      	cmp	r0, r3
2000034e:	f200 80cd 	bhi.w	200004ec <__udivmoddi4+0x2b4>
20000352:	4626      	mov	r6, r4
20000354:	1a1c      	subs	r4, r3, r0
20000356:	fa1f f38e 	uxth.w	r3, lr
2000035a:	fbb4 f0f8 	udiv	r0, r4, r8
2000035e:	fb08 4410 	mls	r4, r8, r0, r4
20000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000366:	fb00 f707 	mul.w	r7, r0, r7
2000036a:	429f      	cmp	r7, r3
2000036c:	d908      	bls.n	20000380 <__udivmoddi4+0x148>
2000036e:	eb1c 0303 	adds.w	r3, ip, r3
20000372:	f100 34ff 	add.w	r4, r0, #4294967295
20000376:	d202      	bcs.n	2000037e <__udivmoddi4+0x146>
20000378:	429f      	cmp	r7, r3
2000037a:	f200 80b0 	bhi.w	200004de <__udivmoddi4+0x2a6>
2000037e:	4620      	mov	r0, r4
20000380:	1bdb      	subs	r3, r3, r7
20000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000386:	e7a5      	b.n	200002d4 <__udivmoddi4+0x9c>
20000388:	f1c1 0620 	rsb	r6, r1, #32
2000038c:	408b      	lsls	r3, r1
2000038e:	fa22 f706 	lsr.w	r7, r2, r6
20000392:	431f      	orrs	r7, r3
20000394:	fa20 fc06 	lsr.w	ip, r0, r6
20000398:	fa04 f301 	lsl.w	r3, r4, r1
2000039c:	ea43 030c 	orr.w	r3, r3, ip
200003a0:	40f4      	lsrs	r4, r6
200003a2:	fa00 f801 	lsl.w	r8, r0, r1
200003a6:	0c38      	lsrs	r0, r7, #16
200003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
200003ac:	fbb4 fef0 	udiv	lr, r4, r0
200003b0:	fa1f fc87 	uxth.w	ip, r7
200003b4:	fb00 441e 	mls	r4, r0, lr, r4
200003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003bc:	fb0e f90c 	mul.w	r9, lr, ip
200003c0:	45a1      	cmp	r9, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	d90a      	bls.n	200003de <__udivmoddi4+0x1a6>
200003c8:	193c      	adds	r4, r7, r4
200003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
200003ce:	f080 8084 	bcs.w	200004da <__udivmoddi4+0x2a2>
200003d2:	45a1      	cmp	r9, r4
200003d4:	f240 8081 	bls.w	200004da <__udivmoddi4+0x2a2>
200003d8:	f1ae 0e02 	sub.w	lr, lr, #2
200003dc:	443c      	add	r4, r7
200003de:	eba4 0409 	sub.w	r4, r4, r9
200003e2:	fa1f f983 	uxth.w	r9, r3
200003e6:	fbb4 f3f0 	udiv	r3, r4, r0
200003ea:	fb00 4413 	mls	r4, r0, r3, r4
200003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003f2:	fb03 fc0c 	mul.w	ip, r3, ip
200003f6:	45a4      	cmp	ip, r4
200003f8:	d907      	bls.n	2000040a <__udivmoddi4+0x1d2>
200003fa:	193c      	adds	r4, r7, r4
200003fc:	f103 30ff 	add.w	r0, r3, #4294967295
20000400:	d267      	bcs.n	200004d2 <__udivmoddi4+0x29a>
20000402:	45a4      	cmp	ip, r4
20000404:	d965      	bls.n	200004d2 <__udivmoddi4+0x29a>
20000406:	3b02      	subs	r3, #2
20000408:	443c      	add	r4, r7
2000040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
2000040e:	fba0 9302 	umull	r9, r3, r0, r2
20000412:	eba4 040c 	sub.w	r4, r4, ip
20000416:	429c      	cmp	r4, r3
20000418:	46ce      	mov	lr, r9
2000041a:	469c      	mov	ip, r3
2000041c:	d351      	bcc.n	200004c2 <__udivmoddi4+0x28a>
2000041e:	d04e      	beq.n	200004be <__udivmoddi4+0x286>
20000420:	b155      	cbz	r5, 20000438 <__udivmoddi4+0x200>
20000422:	ebb8 030e 	subs.w	r3, r8, lr
20000426:	eb64 040c 	sbc.w	r4, r4, ip
2000042a:	fa04 f606 	lsl.w	r6, r4, r6
2000042e:	40cb      	lsrs	r3, r1
20000430:	431e      	orrs	r6, r3
20000432:	40cc      	lsrs	r4, r1
20000434:	e9c5 6400 	strd	r6, r4, [r5]
20000438:	2100      	movs	r1, #0
2000043a:	e750      	b.n	200002de <__udivmoddi4+0xa6>
2000043c:	f1c2 0320 	rsb	r3, r2, #32
20000440:	fa20 f103 	lsr.w	r1, r0, r3
20000444:	fa0c fc02 	lsl.w	ip, ip, r2
20000448:	fa24 f303 	lsr.w	r3, r4, r3
2000044c:	4094      	lsls	r4, r2
2000044e:	430c      	orrs	r4, r1
20000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000454:	fa00 fe02 	lsl.w	lr, r0, r2
20000458:	fa1f f78c 	uxth.w	r7, ip
2000045c:	fbb3 f0f8 	udiv	r0, r3, r8
20000460:	fb08 3110 	mls	r1, r8, r0, r3
20000464:	0c23      	lsrs	r3, r4, #16
20000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000046a:	fb00 f107 	mul.w	r1, r0, r7
2000046e:	4299      	cmp	r1, r3
20000470:	d908      	bls.n	20000484 <__udivmoddi4+0x24c>
20000472:	eb1c 0303 	adds.w	r3, ip, r3
20000476:	f100 36ff 	add.w	r6, r0, #4294967295
2000047a:	d22c      	bcs.n	200004d6 <__udivmoddi4+0x29e>
2000047c:	4299      	cmp	r1, r3
2000047e:	d92a      	bls.n	200004d6 <__udivmoddi4+0x29e>
20000480:	3802      	subs	r0, #2
20000482:	4463      	add	r3, ip
20000484:	1a5b      	subs	r3, r3, r1
20000486:	b2a4      	uxth	r4, r4
20000488:	fbb3 f1f8 	udiv	r1, r3, r8
2000048c:	fb08 3311 	mls	r3, r8, r1, r3
20000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000494:	fb01 f307 	mul.w	r3, r1, r7
20000498:	42a3      	cmp	r3, r4
2000049a:	d908      	bls.n	200004ae <__udivmoddi4+0x276>
2000049c:	eb1c 0404 	adds.w	r4, ip, r4
200004a0:	f101 36ff 	add.w	r6, r1, #4294967295
200004a4:	d213      	bcs.n	200004ce <__udivmoddi4+0x296>
200004a6:	42a3      	cmp	r3, r4
200004a8:	d911      	bls.n	200004ce <__udivmoddi4+0x296>
200004aa:	3902      	subs	r1, #2
200004ac:	4464      	add	r4, ip
200004ae:	1ae4      	subs	r4, r4, r3
200004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
200004b4:	e739      	b.n	2000032a <__udivmoddi4+0xf2>
200004b6:	4604      	mov	r4, r0
200004b8:	e6f0      	b.n	2000029c <__udivmoddi4+0x64>
200004ba:	4608      	mov	r0, r1
200004bc:	e706      	b.n	200002cc <__udivmoddi4+0x94>
200004be:	45c8      	cmp	r8, r9
200004c0:	d2ae      	bcs.n	20000420 <__udivmoddi4+0x1e8>
200004c2:	ebb9 0e02 	subs.w	lr, r9, r2
200004c6:	eb63 0c07 	sbc.w	ip, r3, r7
200004ca:	3801      	subs	r0, #1
200004cc:	e7a8      	b.n	20000420 <__udivmoddi4+0x1e8>
200004ce:	4631      	mov	r1, r6
200004d0:	e7ed      	b.n	200004ae <__udivmoddi4+0x276>
200004d2:	4603      	mov	r3, r0
200004d4:	e799      	b.n	2000040a <__udivmoddi4+0x1d2>
200004d6:	4630      	mov	r0, r6
200004d8:	e7d4      	b.n	20000484 <__udivmoddi4+0x24c>
200004da:	46d6      	mov	lr, sl
200004dc:	e77f      	b.n	200003de <__udivmoddi4+0x1a6>
200004de:	4463      	add	r3, ip
200004e0:	3802      	subs	r0, #2
200004e2:	e74d      	b.n	20000380 <__udivmoddi4+0x148>
200004e4:	4606      	mov	r6, r0
200004e6:	4623      	mov	r3, r4
200004e8:	4608      	mov	r0, r1
200004ea:	e70f      	b.n	2000030c <__udivmoddi4+0xd4>
200004ec:	3e02      	subs	r6, #2
200004ee:	4463      	add	r3, ip
200004f0:	e730      	b.n	20000354 <__udivmoddi4+0x11c>
200004f2:	bf00      	nop

200004f4 <__aeabi_idiv0>:
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <DAP_GetVendorString>:

/** Get Vendor Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetVendorString (char *str) {
200004f8:	b480      	push	{r7}
200004fa:	b083      	sub	sp, #12
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000500:	2300      	movs	r3, #0
}
20000502:	4618      	mov	r0, r3
20000504:	370c      	adds	r7, #12
20000506:	46bd      	mov	sp, r7
20000508:	f85d 7b04 	ldr.w	r7, [sp], #4
2000050c:	4770      	bx	lr

2000050e <DAP_GetProductString>:

/** Get Product Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductString (char *str) {
2000050e:	b480      	push	{r7}
20000510:	b083      	sub	sp, #12
20000512:	af00      	add	r7, sp, #0
20000514:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000516:	2300      	movs	r3, #0
}
20000518:	4618      	mov	r0, r3
2000051a:	370c      	adds	r7, #12
2000051c:	46bd      	mov	sp, r7
2000051e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000522:	4770      	bx	lr

20000524 <DAP_GetSerNumString>:

/** Get Serial Number string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetSerNumString (char *str) {
20000524:	b480      	push	{r7}
20000526:	b083      	sub	sp, #12
20000528:	af00      	add	r7, sp, #0
2000052a:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000052c:	2300      	movs	r3, #0
}
2000052e:	4618      	mov	r0, r3
20000530:	370c      	adds	r7, #12
20000532:	46bd      	mov	sp, r7
20000534:	f85d 7b04 	ldr.w	r7, [sp], #4
20000538:	4770      	bx	lr

2000053a <DAP_GetTargetDeviceVendorString>:

/** Get Target Device Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceVendorString (char *str) {
2000053a:	b480      	push	{r7}
2000053c:	b083      	sub	sp, #12
2000053e:	af00      	add	r7, sp, #0
20000540:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceVendor);
  len = (uint8_t)(strlen(TargetDeviceVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000542:	2300      	movs	r3, #0
#endif
}
20000544:	4618      	mov	r0, r3
20000546:	370c      	adds	r7, #12
20000548:	46bd      	mov	sp, r7
2000054a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000054e:	4770      	bx	lr

20000550 <DAP_GetTargetDeviceNameString>:

/** Get Target Device Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceNameString (char *str) {
20000550:	b480      	push	{r7}
20000552:	b083      	sub	sp, #12
20000554:	af00      	add	r7, sp, #0
20000556:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceName);
  len = (uint8_t)(strlen(TargetDeviceName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000558:	2300      	movs	r3, #0
#endif
}
2000055a:	4618      	mov	r0, r3
2000055c:	370c      	adds	r7, #12
2000055e:	46bd      	mov	sp, r7
20000560:	f85d 7b04 	ldr.w	r7, [sp], #4
20000564:	4770      	bx	lr

20000566 <DAP_GetTargetBoardVendorString>:

/** Get Target Board Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardVendorString (char *str) {
20000566:	b480      	push	{r7}
20000568:	b083      	sub	sp, #12
2000056a:	af00      	add	r7, sp, #0
2000056c:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardVendor);
  len = (uint8_t)(strlen(TargetBoardVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
2000056e:	2300      	movs	r3, #0
#endif
}
20000570:	4618      	mov	r0, r3
20000572:	370c      	adds	r7, #12
20000574:	46bd      	mov	sp, r7
20000576:	f85d 7b04 	ldr.w	r7, [sp], #4
2000057a:	4770      	bx	lr

2000057c <DAP_GetTargetBoardNameString>:

/** Get Target Board Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardNameString (char *str) {
2000057c:	b480      	push	{r7}
2000057e:	b083      	sub	sp, #12
20000580:	af00      	add	r7, sp, #0
20000582:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardName);
  len = (uint8_t)(strlen(TargetBoardName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000584:	2300      	movs	r3, #0
#endif
}
20000586:	4618      	mov	r0, r3
20000588:	370c      	adds	r7, #12
2000058a:	46bd      	mov	sp, r7
2000058c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000590:	4770      	bx	lr

20000592 <DAP_GetProductFirmwareVersionString>:

/** Get Product Firmware Version string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductFirmwareVersionString (char *str) {
20000592:	b480      	push	{r7}
20000594:	b083      	sub	sp, #12
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000059a:	2300      	movs	r3, #0
}
2000059c:	4618      	mov	r0, r3
2000059e:	370c      	adds	r7, #12
200005a0:	46bd      	mov	sp, r7
200005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200005a6:	4770      	bx	lr

200005a8 <PORT_JTAG_SETUP>:
/** Setup JTAG I/O pins: TCK, TMS, TDI, TDO, nTRST, and nRESET.
Configures the DAP Hardware I/O pins for JTAG mode:
 - TCK, TMS, TDI, nTRST, nRESET to output mode and set to high level.
 - TDO to input mode.
*/
__STATIC_INLINE void PORT_JTAG_SETUP (void) {
200005a8:	b480      	push	{r7}
200005aa:	af00      	add	r7, sp, #0
  ;
}
200005ac:	bf00      	nop
200005ae:	46bd      	mov	sp, r7
200005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005b4:	4770      	bx	lr

200005b6 <PORT_OFF>:

/** Disable JTAG/SWD I/O Pins.
Disables the DAP Hardware I/O pins which configures:
 - TCK/SWCLK, TMS/SWDIO, TDI, TDO, nTRST, nRESET to High-Z mode.
*/
__STATIC_INLINE void PORT_OFF (void) {
200005b6:	b480      	push	{r7}
200005b8:	af00      	add	r7, sp, #0
  ;
}
200005ba:	bf00      	nop
200005bc:	46bd      	mov	sp, r7
200005be:	f85d 7b04 	ldr.w	r7, [sp], #4
200005c2:	4770      	bx	lr

200005c4 <PIN_SWCLK_TCK_IN>:
// SWCLK/TCK I/O pin -------------------------------------

/** SWCLK/TCK I/O pin: Get Input.
\return Current status of the SWCLK/TCK DAP hardware I/O pin.
*/
static uint32_t PIN_SWCLK_TCK_IN  (void) {
200005c4:	b480      	push	{r7}
200005c6:	af00      	add	r7, sp, #0
  return (0U);
200005c8:	2300      	movs	r3, #0
}
200005ca:	4618      	mov	r0, r3
200005cc:	46bd      	mov	sp, r7
200005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200005d2:	4770      	bx	lr

200005d4 <PIN_SWCLK_TCK_SET>:

/** SWCLK/TCK I/O pin: Set Output to High.
Set the SWCLK/TCK DAP hardware I/O pin to high level.
*/
static void     PIN_SWCLK_TCK_SET (void) {
200005d4:	b480      	push	{r7}
200005d6:	af00      	add	r7, sp, #0
  ;
}
200005d8:	bf00      	nop
200005da:	46bd      	mov	sp, r7
200005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200005e0:	4770      	bx	lr

200005e2 <PIN_SWCLK_TCK_CLR>:

/** SWCLK/TCK I/O pin: Set Output to Low.
Set the SWCLK/TCK DAP hardware I/O pin to low level.
*/
static void     PIN_SWCLK_TCK_CLR (void) {
200005e2:	b480      	push	{r7}
200005e4:	af00      	add	r7, sp, #0
  ;
}
200005e6:	bf00      	nop
200005e8:	46bd      	mov	sp, r7
200005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200005ee:	4770      	bx	lr

200005f0 <PIN_SWDIO_TMS_IN>:
// SWDIO/TMS Pin I/O --------------------------------------

/** SWDIO/TMS I/O pin: Get Input.
\return Current status of the SWDIO/TMS DAP hardware I/O pin.
*/
static uint32_t PIN_SWDIO_TMS_IN  (void) {
200005f0:	b580      	push	{r7, lr}
200005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
200005f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
200005f8:	4802      	ldr	r0, [pc, #8]	@ (20000604 <PIN_SWDIO_TMS_IN+0x14>)
200005fa:	f004 fd4e 	bl	2000509a <HAL_GPIO_TogglePin>
  return (0U);
200005fe:	2300      	movs	r3, #0
}
20000600:	4618      	mov	r0, r3
20000602:	bd80      	pop	{r7, pc}
20000604:	40020400 	.word	0x40020400

20000608 <PIN_SWDIO_TMS_SET>:

/** SWDIO/TMS I/O pin: Set Output to High.
Set the SWDIO/TMS DAP hardware I/O pin to high level.
*/
static void     PIN_SWDIO_TMS_SET (void) {
20000608:	b580      	push	{r7, lr}
2000060a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
2000060c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20000610:	4802      	ldr	r0, [pc, #8]	@ (2000061c <PIN_SWDIO_TMS_SET+0x14>)
20000612:	f004 fd42 	bl	2000509a <HAL_GPIO_TogglePin>
}
20000616:	bf00      	nop
20000618:	bd80      	pop	{r7, pc}
2000061a:	bf00      	nop
2000061c:	40020400 	.word	0x40020400

20000620 <PIN_SWDIO_TMS_CLR>:

/** SWDIO/TMS I/O pin: Set Output to Low.
Set the SWDIO/TMS DAP hardware I/O pin to low level.
*/
static void     PIN_SWDIO_TMS_CLR (void) {
20000620:	b580      	push	{r7, lr}
20000622:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20000624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20000628:	4802      	ldr	r0, [pc, #8]	@ (20000634 <PIN_SWDIO_TMS_CLR+0x14>)
2000062a:	f004 fd36 	bl	2000509a <HAL_GPIO_TogglePin>
}
2000062e:	bf00      	nop
20000630:	bd80      	pop	{r7, pc}
20000632:	bf00      	nop
20000634:	40020400 	.word	0x40020400

20000638 <PIN_TDI_IN>:
// TDI Pin I/O ---------------------------------------------

/** TDI I/O pin: Get Input.
\return Current status of the TDI DAP hardware I/O pin.
*/
static uint32_t PIN_TDI_IN  (void) {
20000638:	b480      	push	{r7}
2000063a:	af00      	add	r7, sp, #0
  return (0U);
2000063c:	2300      	movs	r3, #0
}
2000063e:	4618      	mov	r0, r3
20000640:	46bd      	mov	sp, r7
20000642:	f85d 7b04 	ldr.w	r7, [sp], #4
20000646:	4770      	bx	lr

20000648 <PIN_TDI_OUT>:

/** TDI I/O pin: Set Output.
\param bit Output value for the TDI DAP hardware I/O pin.
*/
static void     PIN_TDI_OUT (uint32_t bit) {
20000648:	b480      	push	{r7}
2000064a:	b083      	sub	sp, #12
2000064c:	af00      	add	r7, sp, #0
2000064e:	6078      	str	r0, [r7, #4]
  ;
}
20000650:	bf00      	nop
20000652:	370c      	adds	r7, #12
20000654:	46bd      	mov	sp, r7
20000656:	f85d 7b04 	ldr.w	r7, [sp], #4
2000065a:	4770      	bx	lr

2000065c <PIN_TDO_IN>:
// TDO Pin I/O ---------------------------------------------

/** TDO I/O pin: Get Input.
\return Current status of the TDO DAP hardware I/O pin.
*/
static uint32_t PIN_TDO_IN  (void) {
2000065c:	b480      	push	{r7}
2000065e:	af00      	add	r7, sp, #0
  return (0U);
20000660:	2300      	movs	r3, #0
}
20000662:	4618      	mov	r0, r3
20000664:	46bd      	mov	sp, r7
20000666:	f85d 7b04 	ldr.w	r7, [sp], #4
2000066a:	4770      	bx	lr

2000066c <PIN_nTRST_IN>:
// nTRST Pin I/O -------------------------------------------

/** nTRST I/O pin: Get Input.
\return Current status of the nTRST DAP hardware I/O pin.
*/
static uint32_t PIN_nTRST_IN   (void) {
2000066c:	b480      	push	{r7}
2000066e:	af00      	add	r7, sp, #0
  return (0U);
20000670:	2300      	movs	r3, #0
}
20000672:	4618      	mov	r0, r3
20000674:	46bd      	mov	sp, r7
20000676:	f85d 7b04 	ldr.w	r7, [sp], #4
2000067a:	4770      	bx	lr

2000067c <PIN_nTRST_OUT>:
/** nTRST I/O pin: Set Output.
\param bit JTAG TRST Test Reset pin status:
           - 0: issue a JTAG TRST Test Reset.
           - 1: release JTAG TRST Test Reset.
*/
static void     PIN_nTRST_OUT  (uint32_t bit) {
2000067c:	b480      	push	{r7}
2000067e:	b083      	sub	sp, #12
20000680:	af00      	add	r7, sp, #0
20000682:	6078      	str	r0, [r7, #4]
  ;
}
20000684:	bf00      	nop
20000686:	370c      	adds	r7, #12
20000688:	46bd      	mov	sp, r7
2000068a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000068e:	4770      	bx	lr

20000690 <PIN_nRESET_IN>:
// nRESET Pin I/O------------------------------------------

/** nRESET I/O pin: Get Input.
\return Current status of the nRESET DAP hardware I/O pin.
*/
static uint32_t PIN_nRESET_IN  (void) {
20000690:	b480      	push	{r7}
20000692:	af00      	add	r7, sp, #0
  return (0U);
20000694:	2300      	movs	r3, #0
}
20000696:	4618      	mov	r0, r3
20000698:	46bd      	mov	sp, r7
2000069a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000069e:	4770      	bx	lr

200006a0 <PIN_nRESET_OUT>:
/** nRESET I/O pin: Set Output.
\param bit target device hardware reset pin status:
           - 0: issue a device hardware reset.
           - 1: release device hardware reset.
*/
static void     PIN_nRESET_OUT (uint32_t bit) {
200006a0:	b480      	push	{r7}
200006a2:	b083      	sub	sp, #12
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
  ;
}
200006a8:	bf00      	nop
200006aa:	370c      	adds	r7, #12
200006ac:	46bd      	mov	sp, r7
200006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200006b2:	4770      	bx	lr

200006b4 <LED_CONNECTED_OUT>:
/** Debug Unit: Set status of Connected LED.
\param bit status of the Connect LED.
           - 1: Connect LED ON: debugger is connected to CMSIS-DAP Debug Unit.
           - 0: Connect LED OFF: debugger is not connected to CMSIS-DAP Debug Unit.
*/
__STATIC_INLINE void LED_CONNECTED_OUT (uint32_t bit) {}
200006b4:	b480      	push	{r7}
200006b6:	b083      	sub	sp, #12
200006b8:	af00      	add	r7, sp, #0
200006ba:	6078      	str	r0, [r7, #4]
200006bc:	bf00      	nop
200006be:	370c      	adds	r7, #12
200006c0:	46bd      	mov	sp, r7
200006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200006c6:	4770      	bx	lr

200006c8 <LED_RUNNING_OUT>:
/** Debug Unit: Set status Target Running LED.
\param bit status of the Target Running LED.
           - 1: Target Running LED ON: program execution in target started.
           - 0: Target Running LED OFF: program execution in target stopped.
*/
__STATIC_INLINE void LED_RUNNING_OUT (uint32_t bit) {}
200006c8:	b480      	push	{r7}
200006ca:	b083      	sub	sp, #12
200006cc:	af00      	add	r7, sp, #0
200006ce:	6078      	str	r0, [r7, #4]
200006d0:	bf00      	nop
200006d2:	370c      	adds	r7, #12
200006d4:	46bd      	mov	sp, r7
200006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200006da:	4770      	bx	lr

200006dc <TIMESTAMP_GET>:
*/

/** Get timestamp of Test Domain Timer.
\return Current timestamp value.
*/
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
200006dc:	b480      	push	{r7}
200006de:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
200006e0:	4b03      	ldr	r3, [pc, #12]	@ (200006f0 <TIMESTAMP_GET+0x14>)
200006e2:	685b      	ldr	r3, [r3, #4]
}
200006e4:	4618      	mov	r0, r3
200006e6:	46bd      	mov	sp, r7
200006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200006ec:	4770      	bx	lr
200006ee:	bf00      	nop
200006f0:	e0001000 	.word	0xe0001000

200006f4 <RESET_TARGET>:
It is called when the command \ref DAP_ResetTarget and is for example required
when a device needs a time-critical unlock sequence that enables the debug port.
\return 0 = no device specific reset sequence is implemented.\n
        1 = a device specific reset sequence is implemented.
*/
__STATIC_INLINE uint8_t RESET_TARGET (void) {
200006f4:	b480      	push	{r7}
200006f6:	af00      	add	r7, sp, #0
  return (0U);             // change to '1' when a device reset sequence is implemented
200006f8:	2300      	movs	r3, #0
}
200006fa:	4618      	mov	r0, r3
200006fc:	46bd      	mov	sp, r7
200006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20000702:	4770      	bx	lr

20000704 <Set_Clock_Delay>:
static const char DAP_FW_Ver [] = DAP_FW_VER;


// Common clock delay calculation routine
//   clock:    requested SWJ frequency in Hertz
static void Set_Clock_Delay(uint32_t clock) {
20000704:	b480      	push	{r7}
20000706:	b085      	sub	sp, #20
20000708:	af00      	add	r7, sp, #0
2000070a:	6078      	str	r0, [r7, #4]
  uint32_t delay;

  if (clock >= MAX_SWJ_CLOCK(DELAY_FAST_CYCLES)) {
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	4a16      	ldr	r2, [pc, #88]	@ (20000768 <Set_Clock_Delay+0x64>)
20000710:	4293      	cmp	r3, r2
20000712:	d306      	bcc.n	20000722 <Set_Clock_Delay+0x1e>
    DAP_Data.fast_clock  = 1U;
20000714:	4b15      	ldr	r3, [pc, #84]	@ (2000076c <Set_Clock_Delay+0x68>)
20000716:	2201      	movs	r2, #1
20000718:	705a      	strb	r2, [r3, #1]
    DAP_Data.clock_delay = 1U;
2000071a:	4b14      	ldr	r3, [pc, #80]	@ (2000076c <Set_Clock_Delay+0x68>)
2000071c:	2201      	movs	r2, #1
2000071e:	605a      	str	r2, [r3, #4]
      delay  = 1U;
    }

    DAP_Data.clock_delay = delay;
  }
}
20000720:	e01c      	b.n	2000075c <Set_Clock_Delay+0x58>
    DAP_Data.fast_clock  = 0U;
20000722:	4b12      	ldr	r3, [pc, #72]	@ (2000076c <Set_Clock_Delay+0x68>)
20000724:	2200      	movs	r2, #0
20000726:	705a      	strb	r2, [r3, #1]
    delay = ((CPU_CLOCK/2U) + (clock - 1U)) / clock;
20000728:	687a      	ldr	r2, [r7, #4]
2000072a:	4b11      	ldr	r3, [pc, #68]	@ (20000770 <Set_Clock_Delay+0x6c>)
2000072c:	4413      	add	r3, r2
2000072e:	687a      	ldr	r2, [r7, #4]
20000730:	fbb3 f3f2 	udiv	r3, r3, r2
20000734:	60fb      	str	r3, [r7, #12]
    if (delay > IO_PORT_WRITE_CYCLES) {
20000736:	68fb      	ldr	r3, [r7, #12]
20000738:	2b02      	cmp	r3, #2
2000073a:	d90a      	bls.n	20000752 <Set_Clock_Delay+0x4e>
      delay -= IO_PORT_WRITE_CYCLES;
2000073c:	68fb      	ldr	r3, [r7, #12]
2000073e:	3b02      	subs	r3, #2
20000740:	60fb      	str	r3, [r7, #12]
      delay  = (delay + (DELAY_SLOW_CYCLES - 1U)) / DELAY_SLOW_CYCLES;
20000742:	68fb      	ldr	r3, [r7, #12]
20000744:	3302      	adds	r3, #2
20000746:	4a0b      	ldr	r2, [pc, #44]	@ (20000774 <Set_Clock_Delay+0x70>)
20000748:	fba2 2303 	umull	r2, r3, r2, r3
2000074c:	085b      	lsrs	r3, r3, #1
2000074e:	60fb      	str	r3, [r7, #12]
20000750:	e001      	b.n	20000756 <Set_Clock_Delay+0x52>
      delay  = 1U;
20000752:	2301      	movs	r3, #1
20000754:	60fb      	str	r3, [r7, #12]
    DAP_Data.clock_delay = delay;
20000756:	4a05      	ldr	r2, [pc, #20]	@ (2000076c <Set_Clock_Delay+0x68>)
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	6053      	str	r3, [r2, #4]
}
2000075c:	bf00      	nop
2000075e:	3714      	adds	r7, #20
20000760:	46bd      	mov	sp, r7
20000762:	f85d 7b04 	ldr.w	r7, [sp], #4
20000766:	4770      	bx	lr
20000768:	0337f980 	.word	0x0337f980
2000076c:	2000c770 	.word	0x2000c770
20000770:	066ff2ff 	.word	0x066ff2ff
20000774:	aaaaaaab 	.word	0xaaaaaaab

20000778 <DAP_Info>:

// Get DAP Information
//   id:      info identifier
//   info:    pointer to info data
//   return:  number of bytes in info data
static uint8_t DAP_Info(uint8_t id, uint8_t *info) {
20000778:	b580      	push	{r7, lr}
2000077a:	b084      	sub	sp, #16
2000077c:	af00      	add	r7, sp, #0
2000077e:	4603      	mov	r3, r0
20000780:	6039      	str	r1, [r7, #0]
20000782:	71fb      	strb	r3, [r7, #7]
  uint8_t length = 0U;
20000784:	2300      	movs	r3, #0
20000786:	73fb      	strb	r3, [r7, #15]

  switch (id) {
20000788:	79fb      	ldrb	r3, [r7, #7]
2000078a:	2b09      	cmp	r3, #9
2000078c:	dc42      	bgt.n	20000814 <DAP_Info+0x9c>
2000078e:	2b00      	cmp	r3, #0
20000790:	dc28      	bgt.n	200007e4 <DAP_Info+0x6c>
    case DAP_ID_PACKET_COUNT:
      info[0] = DAP_PACKET_COUNT;
      length = 1U;
      break;
    default:
      break;
20000792:	e0a9      	b.n	200008e8 <DAP_Info+0x170>
  switch (id) {
20000794:	3bf0      	subs	r3, #240	@ 0xf0
20000796:	2b0f      	cmp	r3, #15
20000798:	f200 80a6 	bhi.w	200008e8 <DAP_Info+0x170>
2000079c:	a201      	add	r2, pc, #4	@ (adr r2, 200007a4 <DAP_Info+0x2c>)
2000079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200007a2:	bf00      	nop
200007a4:	20000891 	.word	0x20000891
200007a8:	200008a5 	.word	0x200008a5
200007ac:	200008e9 	.word	0x200008e9
200007b0:	200008e9 	.word	0x200008e9
200007b4:	200008e9 	.word	0x200008e9
200007b8:	200008e9 	.word	0x200008e9
200007bc:	200008e9 	.word	0x200008e9
200007c0:	200008e9 	.word	0x200008e9
200007c4:	200008e9 	.word	0x200008e9
200007c8:	200008e9 	.word	0x200008e9
200007cc:	200008e9 	.word	0x200008e9
200007d0:	200008e9 	.word	0x200008e9
200007d4:	200008e9 	.word	0x200008e9
200007d8:	200008e9 	.word	0x200008e9
200007dc:	200008dd 	.word	0x200008dd
200007e0:	200008c9 	.word	0x200008c9
200007e4:	3b01      	subs	r3, #1
200007e6:	2b08      	cmp	r3, #8
200007e8:	d87e      	bhi.n	200008e8 <DAP_Info+0x170>
200007ea:	a201      	add	r2, pc, #4	@ (adr r2, 200007f0 <DAP_Info+0x78>)
200007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200007f0:	2000081f 	.word	0x2000081f
200007f4:	2000082b 	.word	0x2000082b
200007f8:	20000837 	.word	0x20000837
200007fc:	20000843 	.word	0x20000843
20000800:	20000855 	.word	0x20000855
20000804:	20000861 	.word	0x20000861
20000808:	2000086d 	.word	0x2000086d
2000080c:	20000879 	.word	0x20000879
20000810:	20000885 	.word	0x20000885
20000814:	2bff      	cmp	r3, #255	@ 0xff
20000816:	dc67      	bgt.n	200008e8 <DAP_Info+0x170>
20000818:	2bf0      	cmp	r3, #240	@ 0xf0
2000081a:	dabb      	bge.n	20000794 <DAP_Info+0x1c>
      break;
2000081c:	e064      	b.n	200008e8 <DAP_Info+0x170>
      length = DAP_GetVendorString((char *)info);
2000081e:	6838      	ldr	r0, [r7, #0]
20000820:	f7ff fe6a 	bl	200004f8 <DAP_GetVendorString>
20000824:	4603      	mov	r3, r0
20000826:	73fb      	strb	r3, [r7, #15]
      break;
20000828:	e05f      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetProductString((char *)info);
2000082a:	6838      	ldr	r0, [r7, #0]
2000082c:	f7ff fe6f 	bl	2000050e <DAP_GetProductString>
20000830:	4603      	mov	r3, r0
20000832:	73fb      	strb	r3, [r7, #15]
      break;
20000834:	e059      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetSerNumString((char *)info);
20000836:	6838      	ldr	r0, [r7, #0]
20000838:	f7ff fe74 	bl	20000524 <DAP_GetSerNumString>
2000083c:	4603      	mov	r3, r0
2000083e:	73fb      	strb	r3, [r7, #15]
      break;
20000840:	e053      	b.n	200008ea <DAP_Info+0x172>
      length = (uint8_t)sizeof(DAP_FW_Ver);
20000842:	2306      	movs	r3, #6
20000844:	73fb      	strb	r3, [r7, #15]
      memcpy(info, DAP_FW_Ver, length);
20000846:	7bfb      	ldrb	r3, [r7, #15]
20000848:	461a      	mov	r2, r3
2000084a:	492a      	ldr	r1, [pc, #168]	@ (200008f4 <DAP_Info+0x17c>)
2000084c:	6838      	ldr	r0, [r7, #0]
2000084e:	f00b fd81 	bl	2000c354 <memcpy>
      break;
20000852:	e04a      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetDeviceVendorString((char *)info);
20000854:	6838      	ldr	r0, [r7, #0]
20000856:	f7ff fe70 	bl	2000053a <DAP_GetTargetDeviceVendorString>
2000085a:	4603      	mov	r3, r0
2000085c:	73fb      	strb	r3, [r7, #15]
      break;
2000085e:	e044      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetDeviceNameString((char *)info);
20000860:	6838      	ldr	r0, [r7, #0]
20000862:	f7ff fe75 	bl	20000550 <DAP_GetTargetDeviceNameString>
20000866:	4603      	mov	r3, r0
20000868:	73fb      	strb	r3, [r7, #15]
      break;
2000086a:	e03e      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetBoardVendorString((char *)info);
2000086c:	6838      	ldr	r0, [r7, #0]
2000086e:	f7ff fe7a 	bl	20000566 <DAP_GetTargetBoardVendorString>
20000872:	4603      	mov	r3, r0
20000874:	73fb      	strb	r3, [r7, #15]
      break;
20000876:	e038      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetBoardNameString((char *)info);
20000878:	6838      	ldr	r0, [r7, #0]
2000087a:	f7ff fe7f 	bl	2000057c <DAP_GetTargetBoardNameString>
2000087e:	4603      	mov	r3, r0
20000880:	73fb      	strb	r3, [r7, #15]
      break;
20000882:	e032      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetProductFirmwareVersionString((char *)info);
20000884:	6838      	ldr	r0, [r7, #0]
20000886:	f7ff fe84 	bl	20000592 <DAP_GetProductFirmwareVersionString>
2000088a:	4603      	mov	r3, r0
2000088c:	73fb      	strb	r3, [r7, #15]
      break;
2000088e:	e02c      	b.n	200008ea <DAP_Info+0x172>
      info[0] = ((DAP_SWD  != 0)         ? (1U << 0) : 0U) |
20000890:	683b      	ldr	r3, [r7, #0]
20000892:	2232      	movs	r2, #50	@ 0x32
20000894:	701a      	strb	r2, [r3, #0]
      info[1] = ((DAP_UART_USB_COM_PORT != 0) ? (1U << 0) : 0U);
20000896:	683b      	ldr	r3, [r7, #0]
20000898:	3301      	adds	r3, #1
2000089a:	2201      	movs	r2, #1
2000089c:	701a      	strb	r2, [r3, #0]
      length = 2U;
2000089e:	2302      	movs	r3, #2
200008a0:	73fb      	strb	r3, [r7, #15]
      break;
200008a2:	e022      	b.n	200008ea <DAP_Info+0x172>
      info[0] = (uint8_t)(TIMESTAMP_CLOCK >>  0);
200008a4:	683b      	ldr	r3, [r7, #0]
200008a6:	2200      	movs	r2, #0
200008a8:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(TIMESTAMP_CLOCK >>  8);
200008aa:	683b      	ldr	r3, [r7, #0]
200008ac:	3301      	adds	r3, #1
200008ae:	22e1      	movs	r2, #225	@ 0xe1
200008b0:	701a      	strb	r2, [r3, #0]
      info[2] = (uint8_t)(TIMESTAMP_CLOCK >> 16);
200008b2:	683b      	ldr	r3, [r7, #0]
200008b4:	3302      	adds	r3, #2
200008b6:	22f5      	movs	r2, #245	@ 0xf5
200008b8:	701a      	strb	r2, [r3, #0]
      info[3] = (uint8_t)(TIMESTAMP_CLOCK >> 24);
200008ba:	683b      	ldr	r3, [r7, #0]
200008bc:	3303      	adds	r3, #3
200008be:	2205      	movs	r2, #5
200008c0:	701a      	strb	r2, [r3, #0]
      length = 4U;
200008c2:	2304      	movs	r3, #4
200008c4:	73fb      	strb	r3, [r7, #15]
      break;
200008c6:	e010      	b.n	200008ea <DAP_Info+0x172>
      info[0] = (uint8_t)(DAP_PACKET_SIZE >> 0);
200008c8:	683b      	ldr	r3, [r7, #0]
200008ca:	2240      	movs	r2, #64	@ 0x40
200008cc:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(DAP_PACKET_SIZE >> 8);
200008ce:	683b      	ldr	r3, [r7, #0]
200008d0:	3301      	adds	r3, #1
200008d2:	2200      	movs	r2, #0
200008d4:	701a      	strb	r2, [r3, #0]
      length = 2U;
200008d6:	2302      	movs	r3, #2
200008d8:	73fb      	strb	r3, [r7, #15]
      break;
200008da:	e006      	b.n	200008ea <DAP_Info+0x172>
      info[0] = DAP_PACKET_COUNT;
200008dc:	683b      	ldr	r3, [r7, #0]
200008de:	2201      	movs	r2, #1
200008e0:	701a      	strb	r2, [r3, #0]
      length = 1U;
200008e2:	2301      	movs	r3, #1
200008e4:	73fb      	strb	r3, [r7, #15]
      break;
200008e6:	e000      	b.n	200008ea <DAP_Info+0x172>
      break;
200008e8:	bf00      	nop
  }

  return (length);
200008ea:	7bfb      	ldrb	r3, [r7, #15]
}
200008ec:	4618      	mov	r0, r3
200008ee:	3710      	adds	r7, #16
200008f0:	46bd      	mov	sp, r7
200008f2:	bd80      	pop	{r7, pc}
200008f4:	2000c45c 	.word	0x2000c45c

200008f8 <DAP_Delay>:
// Process Delay command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Delay(const uint8_t *request, uint8_t *response) {
200008f8:	b480      	push	{r7}
200008fa:	b085      	sub	sp, #20
200008fc:	af00      	add	r7, sp, #0
200008fe:	6078      	str	r0, [r7, #4]
20000900:	6039      	str	r1, [r7, #0]
  uint32_t delay;

  delay  = (uint32_t)(*(request+0)) |
20000902:	687b      	ldr	r3, [r7, #4]
20000904:	781b      	ldrb	r3, [r3, #0]
20000906:	461a      	mov	r2, r3
           (uint32_t)(*(request+1) << 8);
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	3301      	adds	r3, #1
2000090c:	781b      	ldrb	r3, [r3, #0]
2000090e:	021b      	lsls	r3, r3, #8
  delay  = (uint32_t)(*(request+0)) |
20000910:	4313      	orrs	r3, r2
20000912:	60fb      	str	r3, [r7, #12]
  delay *= ((CPU_CLOCK/1000000U) + (DELAY_SLOW_CYCLES-1U)) / DELAY_SLOW_CYCLES;
20000914:	68fa      	ldr	r2, [r7, #12]
20000916:	4613      	mov	r3, r2
20000918:	00db      	lsls	r3, r3, #3
2000091a:	4413      	add	r3, r2
2000091c:	00db      	lsls	r3, r3, #3
2000091e:	60fb      	str	r3, [r7, #12]
20000920:	68fb      	ldr	r3, [r7, #12]
20000922:	60bb      	str	r3, [r7, #8]
  uint32_t count = delay;
  while (--count);
}
#else
__STATIC_FORCEINLINE void PIN_DELAY_SLOW (uint32_t delay) {
  __ASM volatile (
20000924:	68bb      	ldr	r3, [r7, #8]
20000926:	3b01      	subs	r3, #1
20000928:	d1fd      	bne.n	20000926 <DAP_Delay+0x2e>
2000092a:	60bb      	str	r3, [r7, #8]
  "0:\n\t"
    "subs %0,%0,#1\n\t"
    "bne  0b\n"
  : "+l" (delay) : : "cc"
  );
}
2000092c:	bf00      	nop

  PIN_DELAY_SLOW(delay);

  *response = DAP_OK;
2000092e:	683b      	ldr	r3, [r7, #0]
20000930:	2200      	movs	r2, #0
20000932:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
20000934:	4b03      	ldr	r3, [pc, #12]	@ (20000944 <DAP_Delay+0x4c>)
}
20000936:	4618      	mov	r0, r3
20000938:	3714      	adds	r7, #20
2000093a:	46bd      	mov	sp, r7
2000093c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000940:	4770      	bx	lr
20000942:	bf00      	nop
20000944:	00020001 	.word	0x00020001

20000948 <DAP_HostStatus>:
// Process Host Status command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_HostStatus(const uint8_t *request, uint8_t *response) {
20000948:	b580      	push	{r7, lr}
2000094a:	b082      	sub	sp, #8
2000094c:	af00      	add	r7, sp, #0
2000094e:	6078      	str	r0, [r7, #4]
20000950:	6039      	str	r1, [r7, #0]

  switch (*request) {
20000952:	687b      	ldr	r3, [r7, #4]
20000954:	781b      	ldrb	r3, [r3, #0]
20000956:	2b00      	cmp	r3, #0
20000958:	d002      	beq.n	20000960 <DAP_HostStatus+0x18>
2000095a:	2b01      	cmp	r3, #1
2000095c:	d009      	beq.n	20000972 <DAP_HostStatus+0x2a>
2000095e:	e011      	b.n	20000984 <DAP_HostStatus+0x3c>
    case DAP_DEBUGGER_CONNECTED:
      LED_CONNECTED_OUT((*(request+1) & 1U));
20000960:	687b      	ldr	r3, [r7, #4]
20000962:	3301      	adds	r3, #1
20000964:	781b      	ldrb	r3, [r3, #0]
20000966:	f003 0301 	and.w	r3, r3, #1
2000096a:	4618      	mov	r0, r3
2000096c:	f7ff fea2 	bl	200006b4 <LED_CONNECTED_OUT>
      break;
20000970:	e00d      	b.n	2000098e <DAP_HostStatus+0x46>
    case DAP_TARGET_RUNNING:
      LED_RUNNING_OUT((*(request+1) & 1U));
20000972:	687b      	ldr	r3, [r7, #4]
20000974:	3301      	adds	r3, #1
20000976:	781b      	ldrb	r3, [r3, #0]
20000978:	f003 0301 	and.w	r3, r3, #1
2000097c:	4618      	mov	r0, r3
2000097e:	f7ff fea3 	bl	200006c8 <LED_RUNNING_OUT>
      break;
20000982:	e004      	b.n	2000098e <DAP_HostStatus+0x46>
    default:
      *response = DAP_ERROR;
20000984:	683b      	ldr	r3, [r7, #0]
20000986:	22ff      	movs	r2, #255	@ 0xff
20000988:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) | 1U);
2000098a:	4b05      	ldr	r3, [pc, #20]	@ (200009a0 <DAP_HostStatus+0x58>)
2000098c:	e003      	b.n	20000996 <DAP_HostStatus+0x4e>
  }

  *response = DAP_OK;
2000098e:	683b      	ldr	r3, [r7, #0]
20000990:	2200      	movs	r2, #0
20000992:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
20000994:	4b02      	ldr	r3, [pc, #8]	@ (200009a0 <DAP_HostStatus+0x58>)
}
20000996:	4618      	mov	r0, r3
20000998:	3708      	adds	r7, #8
2000099a:	46bd      	mov	sp, r7
2000099c:	bd80      	pop	{r7, pc}
2000099e:	bf00      	nop
200009a0:	00020001 	.word	0x00020001

200009a4 <DAP_Connect>:
// Process Connect command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Connect(const uint8_t *request, uint8_t *response) {
200009a4:	b580      	push	{r7, lr}
200009a6:	b084      	sub	sp, #16
200009a8:	af00      	add	r7, sp, #0
200009aa:	6078      	str	r0, [r7, #4]
200009ac:	6039      	str	r1, [r7, #0]
  uint32_t port;

  if (*request == DAP_PORT_AUTODETECT) {
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	781b      	ldrb	r3, [r3, #0]
200009b2:	2b00      	cmp	r3, #0
200009b4:	d102      	bne.n	200009bc <DAP_Connect+0x18>
    port = DAP_DEFAULT_PORT;
200009b6:	2301      	movs	r3, #1
200009b8:	60fb      	str	r3, [r7, #12]
200009ba:	e002      	b.n	200009c2 <DAP_Connect+0x1e>
  } else {
    port = *request;
200009bc:	687b      	ldr	r3, [r7, #4]
200009be:	781b      	ldrb	r3, [r3, #0]
200009c0:	60fb      	str	r3, [r7, #12]
  }

  switch (port) {
200009c2:	68fb      	ldr	r3, [r7, #12]
200009c4:	2b02      	cmp	r3, #2
200009c6:	d105      	bne.n	200009d4 <DAP_Connect+0x30>
      PORT_SWD_SETUP();
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      DAP_Data.debug_port = DAP_PORT_JTAG;
200009c8:	4b09      	ldr	r3, [pc, #36]	@ (200009f0 <DAP_Connect+0x4c>)
200009ca:	2202      	movs	r2, #2
200009cc:	701a      	strb	r2, [r3, #0]
      PORT_JTAG_SETUP();
200009ce:	f7ff fdeb 	bl	200005a8 <PORT_JTAG_SETUP>
      break;
200009d2:	e002      	b.n	200009da <DAP_Connect+0x36>
#endif
    default:
      port = DAP_PORT_DISABLED;
200009d4:	2300      	movs	r3, #0
200009d6:	60fb      	str	r3, [r7, #12]
      break;
200009d8:	bf00      	nop
  }

  *response = (uint8_t)port;
200009da:	68fb      	ldr	r3, [r7, #12]
200009dc:	b2da      	uxtb	r2, r3
200009de:	683b      	ldr	r3, [r7, #0]
200009e0:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
200009e2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
200009e6:	4618      	mov	r0, r3
200009e8:	3710      	adds	r7, #16
200009ea:	46bd      	mov	sp, r7
200009ec:	bd80      	pop	{r7, pc}
200009ee:	bf00      	nop
200009f0:	2000c770 	.word	0x2000c770

200009f4 <DAP_Disconnect>:


// Process Disconnect command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_Disconnect(uint8_t *response) {
200009f4:	b580      	push	{r7, lr}
200009f6:	b082      	sub	sp, #8
200009f8:	af00      	add	r7, sp, #0
200009fa:	6078      	str	r0, [r7, #4]

  DAP_Data.debug_port = DAP_PORT_DISABLED;
200009fc:	4b06      	ldr	r3, [pc, #24]	@ (20000a18 <DAP_Disconnect+0x24>)
200009fe:	2200      	movs	r2, #0
20000a00:	701a      	strb	r2, [r3, #0]
  PORT_OFF();
20000a02:	f7ff fdd8 	bl	200005b6 <PORT_OFF>

  *response = DAP_OK;
20000a06:	687b      	ldr	r3, [r7, #4]
20000a08:	2200      	movs	r2, #0
20000a0a:	701a      	strb	r2, [r3, #0]
  return (1U);
20000a0c:	2301      	movs	r3, #1
}
20000a0e:	4618      	mov	r0, r3
20000a10:	3708      	adds	r7, #8
20000a12:	46bd      	mov	sp, r7
20000a14:	bd80      	pop	{r7, pc}
20000a16:	bf00      	nop
20000a18:	2000c770 	.word	0x2000c770

20000a1c <DAP_ResetTarget>:


// Process Reset Target command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_ResetTarget(uint8_t *response) {
20000a1c:	b590      	push	{r4, r7, lr}
20000a1e:	b083      	sub	sp, #12
20000a20:	af00      	add	r7, sp, #0
20000a22:	6078      	str	r0, [r7, #4]

  *(response+1) = RESET_TARGET();
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	1c5c      	adds	r4, r3, #1
20000a28:	f7ff fe64 	bl	200006f4 <RESET_TARGET>
20000a2c:	4603      	mov	r3, r0
20000a2e:	7023      	strb	r3, [r4, #0]
  *(response+0) = DAP_OK;
20000a30:	687b      	ldr	r3, [r7, #4]
20000a32:	2200      	movs	r2, #0
20000a34:	701a      	strb	r2, [r3, #0]
  return (2U);
20000a36:	2302      	movs	r3, #2
}
20000a38:	4618      	mov	r0, r3
20000a3a:	370c      	adds	r7, #12
20000a3c:	46bd      	mov	sp, r7
20000a3e:	bd90      	pop	{r4, r7, pc}

20000a40 <DAP_SWJ_Pins>:
// Process SWJ Pins command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Pins(const uint8_t *request, uint8_t *response) {
20000a40:	b590      	push	{r4, r7, lr}
20000a42:	b087      	sub	sp, #28
20000a44:	af00      	add	r7, sp, #0
20000a46:	6078      	str	r0, [r7, #4]
20000a48:	6039      	str	r1, [r7, #0]
  uint32_t value;
  uint32_t select;
  uint32_t wait;
  uint32_t timestamp;

  value  = (uint32_t) *(request+0);
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	781b      	ldrb	r3, [r3, #0]
20000a4e:	613b      	str	r3, [r7, #16]
  select = (uint32_t) *(request+1);
20000a50:	687b      	ldr	r3, [r7, #4]
20000a52:	3301      	adds	r3, #1
20000a54:	781b      	ldrb	r3, [r3, #0]
20000a56:	60fb      	str	r3, [r7, #12]
  wait   = (uint32_t)(*(request+2) <<  0) |
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	3302      	adds	r3, #2
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	461a      	mov	r2, r3
           (uint32_t)(*(request+3) <<  8) |
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	3303      	adds	r3, #3
20000a64:	781b      	ldrb	r3, [r3, #0]
20000a66:	021b      	lsls	r3, r3, #8
  wait   = (uint32_t)(*(request+2) <<  0) |
20000a68:	431a      	orrs	r2, r3
           (uint32_t)(*(request+4) << 16) |
20000a6a:	687b      	ldr	r3, [r7, #4]
20000a6c:	3304      	adds	r3, #4
20000a6e:	781b      	ldrb	r3, [r3, #0]
20000a70:	041b      	lsls	r3, r3, #16
           (uint32_t)(*(request+3) <<  8) |
20000a72:	431a      	orrs	r2, r3
           (uint32_t)(*(request+5) << 24);
20000a74:	687b      	ldr	r3, [r7, #4]
20000a76:	3305      	adds	r3, #5
20000a78:	781b      	ldrb	r3, [r3, #0]
20000a7a:	061b      	lsls	r3, r3, #24
  wait   = (uint32_t)(*(request+2) <<  0) |
20000a7c:	4313      	orrs	r3, r2
20000a7e:	617b      	str	r3, [r7, #20]

  if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000a80:	68fb      	ldr	r3, [r7, #12]
20000a82:	f003 0301 	and.w	r3, r3, #1
20000a86:	2b00      	cmp	r3, #0
20000a88:	d009      	beq.n	20000a9e <DAP_SWJ_Pins+0x5e>
    if ((value & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000a8a:	693b      	ldr	r3, [r7, #16]
20000a8c:	f003 0301 	and.w	r3, r3, #1
20000a90:	2b00      	cmp	r3, #0
20000a92:	d002      	beq.n	20000a9a <DAP_SWJ_Pins+0x5a>
      PIN_SWCLK_TCK_SET();
20000a94:	f7ff fd9e 	bl	200005d4 <PIN_SWCLK_TCK_SET>
20000a98:	e001      	b.n	20000a9e <DAP_SWJ_Pins+0x5e>
    } else {
      PIN_SWCLK_TCK_CLR();
20000a9a:	f7ff fda2 	bl	200005e2 <PIN_SWCLK_TCK_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000a9e:	68fb      	ldr	r3, [r7, #12]
20000aa0:	f003 0302 	and.w	r3, r3, #2
20000aa4:	2b00      	cmp	r3, #0
20000aa6:	d009      	beq.n	20000abc <DAP_SWJ_Pins+0x7c>
    if ((value & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000aa8:	693b      	ldr	r3, [r7, #16]
20000aaa:	f003 0302 	and.w	r3, r3, #2
20000aae:	2b00      	cmp	r3, #0
20000ab0:	d002      	beq.n	20000ab8 <DAP_SWJ_Pins+0x78>
      PIN_SWDIO_TMS_SET();
20000ab2:	f7ff fda9 	bl	20000608 <PIN_SWDIO_TMS_SET>
20000ab6:	e001      	b.n	20000abc <DAP_SWJ_Pins+0x7c>
    } else {
      PIN_SWDIO_TMS_CLR();
20000ab8:	f7ff fdb2 	bl	20000620 <PIN_SWDIO_TMS_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000abc:	68fb      	ldr	r3, [r7, #12]
20000abe:	f003 0304 	and.w	r3, r3, #4
20000ac2:	2b00      	cmp	r3, #0
20000ac4:	d004      	beq.n	20000ad0 <DAP_SWJ_Pins+0x90>
    PIN_TDI_OUT(value >> DAP_SWJ_TDI);
20000ac6:	693b      	ldr	r3, [r7, #16]
20000ac8:	089b      	lsrs	r3, r3, #2
20000aca:	4618      	mov	r0, r3
20000acc:	f7ff fdbc 	bl	20000648 <PIN_TDI_OUT>
  }
  if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000ad0:	68fb      	ldr	r3, [r7, #12]
20000ad2:	f003 0320 	and.w	r3, r3, #32
20000ad6:	2b00      	cmp	r3, #0
20000ad8:	d004      	beq.n	20000ae4 <DAP_SWJ_Pins+0xa4>
    PIN_nTRST_OUT(value >> DAP_SWJ_nTRST);
20000ada:	693b      	ldr	r3, [r7, #16]
20000adc:	095b      	lsrs	r3, r3, #5
20000ade:	4618      	mov	r0, r3
20000ae0:	f7ff fdcc 	bl	2000067c <PIN_nTRST_OUT>
  }
  if ((select & (1U << DAP_SWJ_nRESET)) != 0U){
20000ae4:	68fb      	ldr	r3, [r7, #12]
20000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000aea:	2b00      	cmp	r3, #0
20000aec:	d004      	beq.n	20000af8 <DAP_SWJ_Pins+0xb8>
    PIN_nRESET_OUT(value >> DAP_SWJ_nRESET);
20000aee:	693b      	ldr	r3, [r7, #16]
20000af0:	09db      	lsrs	r3, r3, #7
20000af2:	4618      	mov	r0, r3
20000af4:	f7ff fdd4 	bl	200006a0 <PIN_nRESET_OUT>
  }

  if (wait != 0U) {
20000af8:	697b      	ldr	r3, [r7, #20]
20000afa:	2b00      	cmp	r3, #0
20000afc:	d05a      	beq.n	20000bb4 <DAP_SWJ_Pins+0x174>
#if (TIMESTAMP_CLOCK != 0U)
    if (wait > 3000000U) {
20000afe:	697b      	ldr	r3, [r7, #20]
20000b00:	4a3f      	ldr	r2, [pc, #252]	@ (20000c00 <DAP_SWJ_Pins+0x1c0>)
20000b02:	4293      	cmp	r3, r2
20000b04:	d901      	bls.n	20000b0a <DAP_SWJ_Pins+0xca>
      wait = 3000000U;
20000b06:	4b3e      	ldr	r3, [pc, #248]	@ (20000c00 <DAP_SWJ_Pins+0x1c0>)
20000b08:	617b      	str	r3, [r7, #20]
    }
#if (TIMESTAMP_CLOCK >= 1000000U)
    wait *= TIMESTAMP_CLOCK / 1000000U;
20000b0a:	697b      	ldr	r3, [r7, #20]
20000b0c:	2264      	movs	r2, #100	@ 0x64
20000b0e:	fb02 f303 	mul.w	r3, r2, r3
20000b12:	617b      	str	r3, [r7, #20]
    wait /= 1000000U / TIMESTAMP_CLOCK;
#endif
#else
    wait  = 1U;
#endif
    timestamp = TIMESTAMP_GET();
20000b14:	f7ff fde2 	bl	200006dc <TIMESTAMP_GET>
20000b18:	60b8      	str	r0, [r7, #8]
    do {
      if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000b1a:	68fb      	ldr	r3, [r7, #12]
20000b1c:	f003 0301 	and.w	r3, r3, #1
20000b20:	2b00      	cmp	r3, #0
20000b22:	d005      	beq.n	20000b30 <DAP_SWJ_Pins+0xf0>
        if ((value >> DAP_SWJ_SWCLK_TCK) ^ PIN_SWCLK_TCK_IN()) {
20000b24:	f7ff fd4e 	bl	200005c4 <PIN_SWCLK_TCK_IN>
20000b28:	4602      	mov	r2, r0
20000b2a:	693b      	ldr	r3, [r7, #16]
20000b2c:	4293      	cmp	r3, r2
20000b2e:	d130      	bne.n	20000b92 <DAP_SWJ_Pins+0x152>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000b30:	68fb      	ldr	r3, [r7, #12]
20000b32:	f003 0302 	and.w	r3, r3, #2
20000b36:	2b00      	cmp	r3, #0
20000b38:	d006      	beq.n	20000b48 <DAP_SWJ_Pins+0x108>
        if ((value >> DAP_SWJ_SWDIO_TMS) ^ PIN_SWDIO_TMS_IN()) {
20000b3a:	693b      	ldr	r3, [r7, #16]
20000b3c:	085c      	lsrs	r4, r3, #1
20000b3e:	f7ff fd57 	bl	200005f0 <PIN_SWDIO_TMS_IN>
20000b42:	4603      	mov	r3, r0
20000b44:	429c      	cmp	r4, r3
20000b46:	d126      	bne.n	20000b96 <DAP_SWJ_Pins+0x156>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000b48:	68fb      	ldr	r3, [r7, #12]
20000b4a:	f003 0304 	and.w	r3, r3, #4
20000b4e:	2b00      	cmp	r3, #0
20000b50:	d006      	beq.n	20000b60 <DAP_SWJ_Pins+0x120>
        if ((value >> DAP_SWJ_TDI) ^ PIN_TDI_IN()) {
20000b52:	693b      	ldr	r3, [r7, #16]
20000b54:	089c      	lsrs	r4, r3, #2
20000b56:	f7ff fd6f 	bl	20000638 <PIN_TDI_IN>
20000b5a:	4603      	mov	r3, r0
20000b5c:	429c      	cmp	r4, r3
20000b5e:	d11c      	bne.n	20000b9a <DAP_SWJ_Pins+0x15a>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000b60:	68fb      	ldr	r3, [r7, #12]
20000b62:	f003 0320 	and.w	r3, r3, #32
20000b66:	2b00      	cmp	r3, #0
20000b68:	d006      	beq.n	20000b78 <DAP_SWJ_Pins+0x138>
        if ((value >> DAP_SWJ_nTRST) ^ PIN_nTRST_IN()) {
20000b6a:	693b      	ldr	r3, [r7, #16]
20000b6c:	095c      	lsrs	r4, r3, #5
20000b6e:	f7ff fd7d 	bl	2000066c <PIN_nTRST_IN>
20000b72:	4603      	mov	r3, r0
20000b74:	429c      	cmp	r4, r3
20000b76:	d112      	bne.n	20000b9e <DAP_SWJ_Pins+0x15e>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nRESET)) != 0U) {
20000b78:	68fb      	ldr	r3, [r7, #12]
20000b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000b7e:	2b00      	cmp	r3, #0
20000b80:	d017      	beq.n	20000bb2 <DAP_SWJ_Pins+0x172>
        if ((value >> DAP_SWJ_nRESET) ^ PIN_nRESET_IN()) {
20000b82:	693b      	ldr	r3, [r7, #16]
20000b84:	09dc      	lsrs	r4, r3, #7
20000b86:	f7ff fd83 	bl	20000690 <PIN_nRESET_IN>
20000b8a:	4603      	mov	r3, r0
20000b8c:	429c      	cmp	r4, r3
20000b8e:	d010      	beq.n	20000bb2 <DAP_SWJ_Pins+0x172>
          continue;
20000b90:	e006      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b92:	bf00      	nop
20000b94:	e004      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b96:	bf00      	nop
20000b98:	e002      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b9a:	bf00      	nop
20000b9c:	e000      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b9e:	bf00      	nop
        }
      }
      break;
    } while ((TIMESTAMP_GET() - timestamp) < wait);
20000ba0:	f7ff fd9c 	bl	200006dc <TIMESTAMP_GET>
20000ba4:	4602      	mov	r2, r0
20000ba6:	68bb      	ldr	r3, [r7, #8]
20000ba8:	1ad3      	subs	r3, r2, r3
20000baa:	697a      	ldr	r2, [r7, #20]
20000bac:	429a      	cmp	r2, r3
20000bae:	d8b4      	bhi.n	20000b1a <DAP_SWJ_Pins+0xda>
20000bb0:	e000      	b.n	20000bb4 <DAP_SWJ_Pins+0x174>
      break;
20000bb2:	bf00      	nop
  }

  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000bb4:	f7ff fd06 	bl	200005c4 <PIN_SWCLK_TCK_IN>
20000bb8:	4604      	mov	r4, r0
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000bba:	f7ff fd19 	bl	200005f0 <PIN_SWDIO_TMS_IN>
20000bbe:	4603      	mov	r3, r0
20000bc0:	005b      	lsls	r3, r3, #1
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000bc2:	431c      	orrs	r4, r3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000bc4:	f7ff fd38 	bl	20000638 <PIN_TDI_IN>
20000bc8:	4603      	mov	r3, r0
20000bca:	009b      	lsls	r3, r3, #2
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000bcc:	431c      	orrs	r4, r3
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000bce:	f7ff fd45 	bl	2000065c <PIN_TDO_IN>
20000bd2:	4603      	mov	r3, r0
20000bd4:	00db      	lsls	r3, r3, #3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000bd6:	431c      	orrs	r4, r3
          (PIN_nTRST_IN()     << DAP_SWJ_nTRST)     |
20000bd8:	f7ff fd48 	bl	2000066c <PIN_nTRST_IN>
20000bdc:	4603      	mov	r3, r0
20000bde:	015b      	lsls	r3, r3, #5
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000be0:	431c      	orrs	r4, r3
          (PIN_nRESET_IN()    << DAP_SWJ_nRESET);
20000be2:	f7ff fd55 	bl	20000690 <PIN_nRESET_IN>
20000be6:	4603      	mov	r3, r0
20000be8:	01db      	lsls	r3, r3, #7
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000bea:	4323      	orrs	r3, r4
20000bec:	613b      	str	r3, [r7, #16]

  *response = (uint8_t)value;
20000bee:	693b      	ldr	r3, [r7, #16]
20000bf0:	b2da      	uxtb	r2, r3
20000bf2:	683b      	ldr	r3, [r7, #0]
20000bf4:	701a      	strb	r2, [r3, #0]
#else
  *response = 0U;
#endif

  return ((6U << 16) | 1U);
20000bf6:	4b03      	ldr	r3, [pc, #12]	@ (20000c04 <DAP_SWJ_Pins+0x1c4>)
}
20000bf8:	4618      	mov	r0, r3
20000bfa:	371c      	adds	r7, #28
20000bfc:	46bd      	mov	sp, r7
20000bfe:	bd90      	pop	{r4, r7, pc}
20000c00:	002dc6c0 	.word	0x002dc6c0
20000c04:	00060001 	.word	0x00060001

20000c08 <DAP_SWJ_Clock>:
// Process SWJ Clock command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Clock(const uint8_t *request, uint8_t *response) {
20000c08:	b580      	push	{r7, lr}
20000c0a:	b084      	sub	sp, #16
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	6078      	str	r0, [r7, #4]
20000c10:	6039      	str	r1, [r7, #0]
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  uint32_t clock;
  uint32_t delay;

  clock = (uint32_t)(*(request+0) <<  0) |
20000c12:	687b      	ldr	r3, [r7, #4]
20000c14:	781b      	ldrb	r3, [r3, #0]
20000c16:	461a      	mov	r2, r3
          (uint32_t)(*(request+1) <<  8) |
20000c18:	687b      	ldr	r3, [r7, #4]
20000c1a:	3301      	adds	r3, #1
20000c1c:	781b      	ldrb	r3, [r3, #0]
20000c1e:	021b      	lsls	r3, r3, #8
  clock = (uint32_t)(*(request+0) <<  0) |
20000c20:	431a      	orrs	r2, r3
          (uint32_t)(*(request+2) << 16) |
20000c22:	687b      	ldr	r3, [r7, #4]
20000c24:	3302      	adds	r3, #2
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	041b      	lsls	r3, r3, #16
          (uint32_t)(*(request+1) <<  8) |
20000c2a:	431a      	orrs	r2, r3
          (uint32_t)(*(request+3) << 24);
20000c2c:	687b      	ldr	r3, [r7, #4]
20000c2e:	3303      	adds	r3, #3
20000c30:	781b      	ldrb	r3, [r3, #0]
20000c32:	061b      	lsls	r3, r3, #24
  clock = (uint32_t)(*(request+0) <<  0) |
20000c34:	4313      	orrs	r3, r2
20000c36:	60fb      	str	r3, [r7, #12]

  if (clock == 0U) {
20000c38:	68fb      	ldr	r3, [r7, #12]
20000c3a:	2b00      	cmp	r3, #0
20000c3c:	d104      	bne.n	20000c48 <DAP_SWJ_Clock+0x40>
    *response = DAP_ERROR;
20000c3e:	683b      	ldr	r3, [r7, #0]
20000c40:	22ff      	movs	r2, #255	@ 0xff
20000c42:	701a      	strb	r2, [r3, #0]
    return ((4U << 16) | 1U);
20000c44:	4b06      	ldr	r3, [pc, #24]	@ (20000c60 <DAP_SWJ_Clock+0x58>)
20000c46:	e006      	b.n	20000c56 <DAP_SWJ_Clock+0x4e>
  }

  Set_Clock_Delay(clock);
20000c48:	68f8      	ldr	r0, [r7, #12]
20000c4a:	f7ff fd5b 	bl	20000704 <Set_Clock_Delay>

  *response = DAP_OK;
20000c4e:	683b      	ldr	r3, [r7, #0]
20000c50:	2200      	movs	r2, #0
20000c52:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  return ((4U << 16) | 1U);
20000c54:	4b02      	ldr	r3, [pc, #8]	@ (20000c60 <DAP_SWJ_Clock+0x58>)
}
20000c56:	4618      	mov	r0, r3
20000c58:	3710      	adds	r7, #16
20000c5a:	46bd      	mov	sp, r7
20000c5c:	bd80      	pop	{r7, pc}
20000c5e:	bf00      	nop
20000c60:	00040001 	.word	0x00040001

20000c64 <DAP_SWJ_Sequence>:
// Process SWJ Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Sequence(const uint8_t *request, uint8_t *response) {
20000c64:	b580      	push	{r7, lr}
20000c66:	b084      	sub	sp, #16
20000c68:	af00      	add	r7, sp, #0
20000c6a:	6078      	str	r0, [r7, #4]
20000c6c:	6039      	str	r1, [r7, #0]
  uint32_t count;

  count = *request++;
20000c6e:	687b      	ldr	r3, [r7, #4]
20000c70:	1c5a      	adds	r2, r3, #1
20000c72:	607a      	str	r2, [r7, #4]
20000c74:	781b      	ldrb	r3, [r3, #0]
20000c76:	60fb      	str	r3, [r7, #12]
  if (count == 0U) {
20000c78:	68fb      	ldr	r3, [r7, #12]
20000c7a:	2b00      	cmp	r3, #0
20000c7c:	d102      	bne.n	20000c84 <DAP_SWJ_Sequence+0x20>
    count = 256U;
20000c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
20000c82:	60fb      	str	r3, [r7, #12]
  }

#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  SWJ_Sequence(count, request);
20000c84:	6879      	ldr	r1, [r7, #4]
20000c86:	68f8      	ldr	r0, [r7, #12]
20000c88:	f002 fc34 	bl	200034f4 <SWJ_Sequence>
  *response = DAP_OK;
20000c8c:	683b      	ldr	r3, [r7, #0]
20000c8e:	2200      	movs	r2, #0
20000c90:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  count = (count + 7U) >> 3;
20000c92:	68fb      	ldr	r3, [r7, #12]
20000c94:	3307      	adds	r3, #7
20000c96:	08db      	lsrs	r3, r3, #3
20000c98:	60fb      	str	r3, [r7, #12]

  return (((count + 1U) << 16) | 1U);
20000c9a:	68fb      	ldr	r3, [r7, #12]
20000c9c:	3301      	adds	r3, #1
20000c9e:	041b      	lsls	r3, r3, #16
20000ca0:	f043 0301 	orr.w	r3, r3, #1
}
20000ca4:	4618      	mov	r0, r3
20000ca6:	3710      	adds	r7, #16
20000ca8:	46bd      	mov	sp, r7
20000caa:	bd80      	pop	{r7, pc}

20000cac <DAP_SWD_Configure>:
// Process SWD Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Configure(const uint8_t *request, uint8_t *response) {
20000cac:	b480      	push	{r7}
20000cae:	b083      	sub	sp, #12
20000cb0:	af00      	add	r7, sp, #0
20000cb2:	6078      	str	r0, [r7, #4]
20000cb4:	6039      	str	r1, [r7, #0]
  DAP_Data.swd_conf.turnaround = (value & 0x03U) + 1U;
  DAP_Data.swd_conf.data_phase = (value & 0x04U) ? 1U : 0U;

  *response = DAP_OK;
#else
  *response = DAP_ERROR;
20000cb6:	683b      	ldr	r3, [r7, #0]
20000cb8:	22ff      	movs	r2, #255	@ 0xff
20000cba:	701a      	strb	r2, [r3, #0]
#endif

  return ((1U << 16) | 1U);
20000cbc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000cc0:	4618      	mov	r0, r3
20000cc2:	370c      	adds	r7, #12
20000cc4:	46bd      	mov	sp, r7
20000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000cca:	4770      	bx	lr

20000ccc <DAP_SWD_Sequence>:
// Process SWD Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Sequence(const uint8_t *request, uint8_t *response) {
20000ccc:	b480      	push	{r7}
20000cce:	b089      	sub	sp, #36	@ 0x24
20000cd0:	af00      	add	r7, sp, #0
20000cd2:	6078      	str	r0, [r7, #4]
20000cd4:	6039      	str	r1, [r7, #0]
  uint32_t count;

#if (DAP_SWD != 0)
  *response++ = DAP_OK;
#else
  *response++ = DAP_ERROR;
20000cd6:	683b      	ldr	r3, [r7, #0]
20000cd8:	1c5a      	adds	r2, r3, #1
20000cda:	603a      	str	r2, [r7, #0]
20000cdc:	22ff      	movs	r2, #255	@ 0xff
20000cde:	701a      	strb	r2, [r3, #0]
#endif
  request_count  = 1U;
20000ce0:	2301      	movs	r3, #1
20000ce2:	61bb      	str	r3, [r7, #24]
  response_count = 1U;
20000ce4:	2301      	movs	r3, #1
20000ce6:	613b      	str	r3, [r7, #16]

  sequence_count = *request++;
20000ce8:	687b      	ldr	r3, [r7, #4]
20000cea:	1c5a      	adds	r2, r3, #1
20000cec:	607a      	str	r2, [r7, #4]
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	61fb      	str	r3, [r7, #28]
  while (sequence_count--) {
20000cf2:	e023      	b.n	20000d3c <DAP_SWD_Sequence+0x70>
    sequence_info = *request++;
20000cf4:	687b      	ldr	r3, [r7, #4]
20000cf6:	1c5a      	adds	r2, r3, #1
20000cf8:	607a      	str	r2, [r7, #4]
20000cfa:	781b      	ldrb	r3, [r3, #0]
20000cfc:	60fb      	str	r3, [r7, #12]
    count = sequence_info & SWD_SEQUENCE_CLK;
20000cfe:	68fb      	ldr	r3, [r7, #12]
20000d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20000d04:	617b      	str	r3, [r7, #20]
    if (count == 0U) {
20000d06:	697b      	ldr	r3, [r7, #20]
20000d08:	2b00      	cmp	r3, #0
20000d0a:	d101      	bne.n	20000d10 <DAP_SWD_Sequence+0x44>
      count = 64U;
20000d0c:	2340      	movs	r3, #64	@ 0x40
20000d0e:	617b      	str	r3, [r7, #20]
    }
    count = (count + 7U) / 8U;
20000d10:	697b      	ldr	r3, [r7, #20]
20000d12:	3307      	adds	r3, #7
20000d14:	08db      	lsrs	r3, r3, #3
20000d16:	617b      	str	r3, [r7, #20]
    SWD_Sequence(sequence_info, request, response);
    if (sequence_count == 0U) {
      PIN_SWDIO_OUT_ENABLE();
    }
#endif
    if ((sequence_info & SWD_SEQUENCE_DIN) != 0U) {
20000d18:	68fb      	ldr	r3, [r7, #12]
20000d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000d1e:	2b00      	cmp	r3, #0
20000d20:	d003      	beq.n	20000d2a <DAP_SWD_Sequence+0x5e>
      request_count++;
20000d22:	69bb      	ldr	r3, [r7, #24]
20000d24:	3301      	adds	r3, #1
20000d26:	61bb      	str	r3, [r7, #24]
20000d28:	e008      	b.n	20000d3c <DAP_SWD_Sequence+0x70>
#if (DAP_SWD != 0)
      response += count;
      response_count += count;
#endif
    } else {
      request += count;
20000d2a:	687a      	ldr	r2, [r7, #4]
20000d2c:	697b      	ldr	r3, [r7, #20]
20000d2e:	4413      	add	r3, r2
20000d30:	607b      	str	r3, [r7, #4]
      request_count += count + 1U;
20000d32:	697a      	ldr	r2, [r7, #20]
20000d34:	69bb      	ldr	r3, [r7, #24]
20000d36:	4413      	add	r3, r2
20000d38:	3301      	adds	r3, #1
20000d3a:	61bb      	str	r3, [r7, #24]
  while (sequence_count--) {
20000d3c:	69fb      	ldr	r3, [r7, #28]
20000d3e:	1e5a      	subs	r2, r3, #1
20000d40:	61fa      	str	r2, [r7, #28]
20000d42:	2b00      	cmp	r3, #0
20000d44:	d1d6      	bne.n	20000cf4 <DAP_SWD_Sequence+0x28>
    }
  }

  return ((request_count << 16) | response_count);
20000d46:	69bb      	ldr	r3, [r7, #24]
20000d48:	041a      	lsls	r2, r3, #16
20000d4a:	693b      	ldr	r3, [r7, #16]
20000d4c:	4313      	orrs	r3, r2
}
20000d4e:	4618      	mov	r0, r3
20000d50:	3724      	adds	r7, #36	@ 0x24
20000d52:	46bd      	mov	sp, r7
20000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
20000d58:	4770      	bx	lr

20000d5a <DAP_JTAG_Sequence>:
// Process JTAG Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Sequence(const uint8_t *request, uint8_t *response) {
20000d5a:	b580      	push	{r7, lr}
20000d5c:	b086      	sub	sp, #24
20000d5e:	af00      	add	r7, sp, #0
20000d60:	6078      	str	r0, [r7, #4]
20000d62:	6039      	str	r1, [r7, #0]
  uint32_t request_count;
  uint32_t response_count;
  uint32_t count;

#if (DAP_JTAG != 0)
  *response++ = DAP_OK;
20000d64:	683b      	ldr	r3, [r7, #0]
20000d66:	1c5a      	adds	r2, r3, #1
20000d68:	603a      	str	r2, [r7, #0]
20000d6a:	2200      	movs	r2, #0
20000d6c:	701a      	strb	r2, [r3, #0]
#else
  *response++ = DAP_ERROR;
#endif
  request_count  = 1U;
20000d6e:	2301      	movs	r3, #1
20000d70:	617b      	str	r3, [r7, #20]
  response_count = 1U;
20000d72:	2301      	movs	r3, #1
20000d74:	613b      	str	r3, [r7, #16]

  sequence_count = *request++;
20000d76:	687b      	ldr	r3, [r7, #4]
20000d78:	1c5a      	adds	r2, r3, #1
20000d7a:	607a      	str	r2, [r7, #4]
20000d7c:	781b      	ldrb	r3, [r3, #0]
20000d7e:	60fb      	str	r3, [r7, #12]

  response_count = JTAG_Sequence(sequence_count, request, response);
20000d80:	683a      	ldr	r2, [r7, #0]
20000d82:	6879      	ldr	r1, [r7, #4]
20000d84:	68f8      	ldr	r0, [r7, #12]
20000d86:	f001 fa51 	bl	2000222c <JTAG_Sequence>
20000d8a:	6138      	str	r0, [r7, #16]


  return ((request_count << 16) | response_count) +1;
20000d8c:	697b      	ldr	r3, [r7, #20]
20000d8e:	041a      	lsls	r2, r3, #16
20000d90:	693b      	ldr	r3, [r7, #16]
20000d92:	4313      	orrs	r3, r2
20000d94:	3301      	adds	r3, #1
}
20000d96:	4618      	mov	r0, r3
20000d98:	3718      	adds	r7, #24
20000d9a:	46bd      	mov	sp, r7
20000d9c:	bd80      	pop	{r7, pc}
	...

20000da0 <DAP_JTAG_Configure>:
// Process JTAG Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Configure(const uint8_t *request, uint8_t *response) {
20000da0:	b480      	push	{r7}
20000da2:	b087      	sub	sp, #28
20000da4:	af00      	add	r7, sp, #0
20000da6:	6078      	str	r0, [r7, #4]
20000da8:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t length;
  uint32_t bits;
  uint32_t n;

  count = *request++;
20000daa:	687b      	ldr	r3, [r7, #4]
20000dac:	1c5a      	adds	r2, r3, #1
20000dae:	607a      	str	r2, [r7, #4]
20000db0:	781b      	ldrb	r3, [r3, #0]
20000db2:	60fb      	str	r3, [r7, #12]
  DAP_Data.jtag_dev.count = (uint8_t)count;
20000db4:	68fb      	ldr	r3, [r7, #12]
20000db6:	b2da      	uxtb	r2, r3
20000db8:	4b28      	ldr	r3, [pc, #160]	@ (20000e5c <DAP_JTAG_Configure+0xbc>)
20000dba:	761a      	strb	r2, [r3, #24]

  bits = 0U;
20000dbc:	2300      	movs	r3, #0
20000dbe:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000dc0:	2300      	movs	r3, #0
20000dc2:	613b      	str	r3, [r7, #16]
20000dc4:	e01c      	b.n	20000e00 <DAP_JTAG_Configure+0x60>
    length = *request++;
20000dc6:	687b      	ldr	r3, [r7, #4]
20000dc8:	1c5a      	adds	r2, r3, #1
20000dca:	607a      	str	r2, [r7, #4]
20000dcc:	781b      	ldrb	r3, [r3, #0]
20000dce:	60bb      	str	r3, [r7, #8]
    DAP_Data.jtag_dev.ir_length[n] =  (uint8_t)length;
20000dd0:	68bb      	ldr	r3, [r7, #8]
20000dd2:	b2d9      	uxtb	r1, r3
20000dd4:	4a21      	ldr	r2, [pc, #132]	@ (20000e5c <DAP_JTAG_Configure+0xbc>)
20000dd6:	693b      	ldr	r3, [r7, #16]
20000dd8:	4413      	add	r3, r2
20000dda:	331a      	adds	r3, #26
20000ddc:	460a      	mov	r2, r1
20000dde:	701a      	strb	r2, [r3, #0]
    DAP_Data.jtag_dev.ir_before[n] = (uint16_t)bits;
20000de0:	697b      	ldr	r3, [r7, #20]
20000de2:	b299      	uxth	r1, r3
20000de4:	4a1d      	ldr	r2, [pc, #116]	@ (20000e5c <DAP_JTAG_Configure+0xbc>)
20000de6:	693b      	ldr	r3, [r7, #16]
20000de8:	3310      	adds	r3, #16
20000dea:	005b      	lsls	r3, r3, #1
20000dec:	4413      	add	r3, r2
20000dee:	460a      	mov	r2, r1
20000df0:	805a      	strh	r2, [r3, #2]
    bits += length;
20000df2:	697a      	ldr	r2, [r7, #20]
20000df4:	68bb      	ldr	r3, [r7, #8]
20000df6:	4413      	add	r3, r2
20000df8:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000dfa:	693b      	ldr	r3, [r7, #16]
20000dfc:	3301      	adds	r3, #1
20000dfe:	613b      	str	r3, [r7, #16]
20000e00:	693a      	ldr	r2, [r7, #16]
20000e02:	68fb      	ldr	r3, [r7, #12]
20000e04:	429a      	cmp	r2, r3
20000e06:	d3de      	bcc.n	20000dc6 <DAP_JTAG_Configure+0x26>
  }
  for (n = 0U; n < count; n++) {
20000e08:	2300      	movs	r3, #0
20000e0a:	613b      	str	r3, [r7, #16]
20000e0c:	e014      	b.n	20000e38 <DAP_JTAG_Configure+0x98>
    bits -= DAP_Data.jtag_dev.ir_length[n];
20000e0e:	4a13      	ldr	r2, [pc, #76]	@ (20000e5c <DAP_JTAG_Configure+0xbc>)
20000e10:	693b      	ldr	r3, [r7, #16]
20000e12:	4413      	add	r3, r2
20000e14:	331a      	adds	r3, #26
20000e16:	781b      	ldrb	r3, [r3, #0]
20000e18:	461a      	mov	r2, r3
20000e1a:	697b      	ldr	r3, [r7, #20]
20000e1c:	1a9b      	subs	r3, r3, r2
20000e1e:	617b      	str	r3, [r7, #20]
    DAP_Data.jtag_dev.ir_after[n] = (uint16_t)bits;
20000e20:	697b      	ldr	r3, [r7, #20]
20000e22:	b299      	uxth	r1, r3
20000e24:	4a0d      	ldr	r2, [pc, #52]	@ (20000e5c <DAP_JTAG_Configure+0xbc>)
20000e26:	693b      	ldr	r3, [r7, #16]
20000e28:	3318      	adds	r3, #24
20000e2a:	005b      	lsls	r3, r3, #1
20000e2c:	4413      	add	r3, r2
20000e2e:	460a      	mov	r2, r1
20000e30:	805a      	strh	r2, [r3, #2]
  for (n = 0U; n < count; n++) {
20000e32:	693b      	ldr	r3, [r7, #16]
20000e34:	3301      	adds	r3, #1
20000e36:	613b      	str	r3, [r7, #16]
20000e38:	693a      	ldr	r2, [r7, #16]
20000e3a:	68fb      	ldr	r3, [r7, #12]
20000e3c:	429a      	cmp	r2, r3
20000e3e:	d3e6      	bcc.n	20000e0e <DAP_JTAG_Configure+0x6e>
  }

  *response = DAP_OK;
20000e40:	683b      	ldr	r3, [r7, #0]
20000e42:	2200      	movs	r2, #0
20000e44:	701a      	strb	r2, [r3, #0]
#else
  count = *request;
  *response = DAP_ERROR;
#endif

  return (((count + 1U) << 16) | 1U);
20000e46:	68fb      	ldr	r3, [r7, #12]
20000e48:	3301      	adds	r3, #1
20000e4a:	041b      	lsls	r3, r3, #16
20000e4c:	f043 0301 	orr.w	r3, r3, #1
}
20000e50:	4618      	mov	r0, r3
20000e52:	371c      	adds	r7, #28
20000e54:	46bd      	mov	sp, r7
20000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e5a:	4770      	bx	lr
20000e5c:	2000c770 	.word	0x2000c770

20000e60 <DAP_JTAG_IDCode>:
// Process JTAG IDCODE command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_IDCode(const uint8_t *request, uint8_t *response) {
20000e60:	b580      	push	{r7, lr}
20000e62:	b084      	sub	sp, #16
20000e64:	af00      	add	r7, sp, #0
20000e66:	6078      	str	r0, [r7, #4]
20000e68:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t data;

  if (DAP_Data.debug_port != DAP_PORT_JTAG) {
20000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (20000ee4 <DAP_JTAG_IDCode+0x84>)
20000e6c:	781b      	ldrb	r3, [r3, #0]
20000e6e:	2b02      	cmp	r3, #2
20000e70:	d12b      	bne.n	20000eca <DAP_JTAG_IDCode+0x6a>
    goto id_error;
  }

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
20000e72:	687b      	ldr	r3, [r7, #4]
20000e74:	781a      	ldrb	r2, [r3, #0]
20000e76:	4b1b      	ldr	r3, [pc, #108]	@ (20000ee4 <DAP_JTAG_IDCode+0x84>)
20000e78:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (20000ee4 <DAP_JTAG_IDCode+0x84>)
20000e7c:	7e5a      	ldrb	r2, [r3, #25]
20000e7e:	4b19      	ldr	r3, [pc, #100]	@ (20000ee4 <DAP_JTAG_IDCode+0x84>)
20000e80:	7e1b      	ldrb	r3, [r3, #24]
20000e82:	429a      	cmp	r2, r3
20000e84:	d223      	bcs.n	20000ece <DAP_JTAG_IDCode+0x6e>
    goto id_error;
  }

  // Select JTAG chain
  JTAG_IR(JTAG_IDCODE);
20000e86:	200e      	movs	r0, #14
20000e88:	f002 fb04 	bl	20003494 <JTAG_IR>

  // Read IDCODE register
  data = JTAG_ReadIDCode();
20000e8c:	f002 f8c0 	bl	20003010 <JTAG_ReadIDCode>
20000e90:	60f8      	str	r0, [r7, #12]

  // Store Data
  *(response+0) =  DAP_OK;
20000e92:	683b      	ldr	r3, [r7, #0]
20000e94:	2200      	movs	r2, #0
20000e96:	701a      	strb	r2, [r3, #0]
  *(response+1) = (uint8_t)(data >>  0);
20000e98:	683b      	ldr	r3, [r7, #0]
20000e9a:	3301      	adds	r3, #1
20000e9c:	68fa      	ldr	r2, [r7, #12]
20000e9e:	b2d2      	uxtb	r2, r2
20000ea0:	701a      	strb	r2, [r3, #0]
  *(response+2) = (uint8_t)(data >>  8);
20000ea2:	68fb      	ldr	r3, [r7, #12]
20000ea4:	0a1a      	lsrs	r2, r3, #8
20000ea6:	683b      	ldr	r3, [r7, #0]
20000ea8:	3302      	adds	r3, #2
20000eaa:	b2d2      	uxtb	r2, r2
20000eac:	701a      	strb	r2, [r3, #0]
  *(response+3) = (uint8_t)(data >> 16);
20000eae:	68fb      	ldr	r3, [r7, #12]
20000eb0:	0c1a      	lsrs	r2, r3, #16
20000eb2:	683b      	ldr	r3, [r7, #0]
20000eb4:	3303      	adds	r3, #3
20000eb6:	b2d2      	uxtb	r2, r2
20000eb8:	701a      	strb	r2, [r3, #0]
  *(response+4) = (uint8_t)(data >> 24);
20000eba:	68fb      	ldr	r3, [r7, #12]
20000ebc:	0e1a      	lsrs	r2, r3, #24
20000ebe:	683b      	ldr	r3, [r7, #0]
20000ec0:	3304      	adds	r3, #4
20000ec2:	b2d2      	uxtb	r2, r2
20000ec4:	701a      	strb	r2, [r3, #0]

  return ((1U << 16) | 5U);
20000ec6:	4b08      	ldr	r3, [pc, #32]	@ (20000ee8 <DAP_JTAG_IDCode+0x88>)
20000ec8:	e007      	b.n	20000eda <DAP_JTAG_IDCode+0x7a>
    goto id_error;
20000eca:	bf00      	nop
20000ecc:	e000      	b.n	20000ed0 <DAP_JTAG_IDCode+0x70>
    goto id_error;
20000ece:	bf00      	nop

id_error:
#endif
  *response = DAP_ERROR;
20000ed0:	683b      	ldr	r3, [r7, #0]
20000ed2:	22ff      	movs	r2, #255	@ 0xff
20000ed4:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
20000ed6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000eda:	4618      	mov	r0, r3
20000edc:	3710      	adds	r7, #16
20000ede:	46bd      	mov	sp, r7
20000ee0:	bd80      	pop	{r7, pc}
20000ee2:	bf00      	nop
20000ee4:	2000c770 	.word	0x2000c770
20000ee8:	00010005 	.word	0x00010005

20000eec <DAP_TransferConfigure>:
// Process Transfer Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferConfigure(const uint8_t *request, uint8_t *response) {
20000eec:	b480      	push	{r7}
20000eee:	b083      	sub	sp, #12
20000ef0:	af00      	add	r7, sp, #0
20000ef2:	6078      	str	r0, [r7, #4]
20000ef4:	6039      	str	r1, [r7, #0]

  DAP_Data.transfer.idle_cycles =            *(request+0);
20000ef6:	687b      	ldr	r3, [r7, #4]
20000ef8:	781a      	ldrb	r2, [r3, #0]
20000efa:	4b13      	ldr	r3, [pc, #76]	@ (20000f48 <DAP_TransferConfigure+0x5c>)
20000efc:	731a      	strb	r2, [r3, #12]
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
20000efe:	687b      	ldr	r3, [r7, #4]
20000f00:	3301      	adds	r3, #1
20000f02:	781b      	ldrb	r3, [r3, #0]
20000f04:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+2) << 8);
20000f06:	687b      	ldr	r3, [r7, #4]
20000f08:	3302      	adds	r3, #2
20000f0a:	781b      	ldrb	r3, [r3, #0]
20000f0c:	021b      	lsls	r3, r3, #8
20000f0e:	b29b      	uxth	r3, r3
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
20000f10:	4313      	orrs	r3, r2
20000f12:	b29a      	uxth	r2, r3
20000f14:	4b0c      	ldr	r3, [pc, #48]	@ (20000f48 <DAP_TransferConfigure+0x5c>)
20000f16:	821a      	strh	r2, [r3, #16]
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
20000f18:	687b      	ldr	r3, [r7, #4]
20000f1a:	3303      	adds	r3, #3
20000f1c:	781b      	ldrb	r3, [r3, #0]
20000f1e:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+4) << 8);
20000f20:	687b      	ldr	r3, [r7, #4]
20000f22:	3304      	adds	r3, #4
20000f24:	781b      	ldrb	r3, [r3, #0]
20000f26:	021b      	lsls	r3, r3, #8
20000f28:	b29b      	uxth	r3, r3
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
20000f2a:	4313      	orrs	r3, r2
20000f2c:	b29a      	uxth	r2, r3
20000f2e:	4b06      	ldr	r3, [pc, #24]	@ (20000f48 <DAP_TransferConfigure+0x5c>)
20000f30:	825a      	strh	r2, [r3, #18]

  *response = DAP_OK;
20000f32:	683b      	ldr	r3, [r7, #0]
20000f34:	2200      	movs	r2, #0
20000f36:	701a      	strb	r2, [r3, #0]
  return ((5U << 16) | 1U);
20000f38:	4b04      	ldr	r3, [pc, #16]	@ (20000f4c <DAP_TransferConfigure+0x60>)
}
20000f3a:	4618      	mov	r0, r3
20000f3c:	370c      	adds	r7, #12
20000f3e:	46bd      	mov	sp, r7
20000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f44:	4770      	bx	lr
20000f46:	bf00      	nop
20000f48:	2000c770 	.word	0x2000c770
20000f4c:	00050001 	.word	0x00050001

20000f50 <DAP_JTAG_Transfer>:
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_Transfer(const uint8_t *request, uint8_t *response) {
20000f50:	b580      	push	{r7, lr}
20000f52:	b090      	sub	sp, #64	@ 0x40
20000f54:	af00      	add	r7, sp, #0
20000f56:	6078      	str	r0, [r7, #4]
20000f58:	6039      	str	r1, [r7, #0]
  uint32_t  ir;
#if (TIMESTAMP_CLOCK != 0U)
  uint32_t  timestamp;
#endif

  request_head   = request;
20000f5a:	687b      	ldr	r3, [r7, #4]
20000f5c:	623b      	str	r3, [r7, #32]

  response_count = 0U;
20000f5e:	2300      	movs	r3, #0
20000f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  response_value = 0U;
20000f62:	2300      	movs	r3, #0
20000f64:	637b      	str	r3, [r7, #52]	@ 0x34
  response_head  = response;
20000f66:	683b      	ldr	r3, [r7, #0]
20000f68:	61fb      	str	r3, [r7, #28]
  response      += 2;
20000f6a:	683b      	ldr	r3, [r7, #0]
20000f6c:	3302      	adds	r3, #2
20000f6e:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20000f70:	4b95      	ldr	r3, [pc, #596]	@ (200011c8 <DAP_JTAG_Transfer+0x278>)
20000f72:	2200      	movs	r2, #0
20000f74:	701a      	strb	r2, [r3, #0]

  ir        = 0U;
20000f76:	2300      	movs	r3, #0
20000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  post_read = 0U;
20000f7a:	2300      	movs	r3, #0
20000f7c:	633b      	str	r3, [r7, #48]	@ 0x30

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20000f7e:	687b      	ldr	r3, [r7, #4]
20000f80:	1c5a      	adds	r2, r3, #1
20000f82:	607a      	str	r2, [r7, #4]
20000f84:	781a      	ldrb	r2, [r3, #0]
20000f86:	4b91      	ldr	r3, [pc, #580]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
20000f88:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20000f8a:	4b90      	ldr	r3, [pc, #576]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
20000f8c:	7e5a      	ldrb	r2, [r3, #25]
20000f8e:	4b8f      	ldr	r3, [pc, #572]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
20000f90:	7e1b      	ldrb	r3, [r3, #24]
20000f92:	429a      	cmp	r2, r3
20000f94:	f080 82bc 	bcs.w	20001510 <DAP_JTAG_Transfer+0x5c0>
    goto end;
  }

  request_count = *request++;
20000f98:	687b      	ldr	r3, [r7, #4]
20000f9a:	1c5a      	adds	r2, r3, #1
20000f9c:	607a      	str	r2, [r7, #4]
20000f9e:	781b      	ldrb	r3, [r3, #0]
20000fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  while (request_count != 0) {
20000fa2:	e227      	b.n	200013f4 <DAP_JTAG_Transfer+0x4a4>
    request_count--;
20000fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20000fa6:	3b01      	subs	r3, #1
20000fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
20000faa:	687b      	ldr	r3, [r7, #4]
20000fac:	1c5a      	adds	r2, r3, #1
20000fae:	607a      	str	r2, [r7, #4]
20000fb0:	781b      	ldrb	r3, [r3, #0]
20000fb2:	61bb      	str	r3, [r7, #24]
    request_ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
20000fb4:	69bb      	ldr	r3, [r7, #24]
20000fb6:	f003 0301 	and.w	r3, r3, #1
20000fba:	2b00      	cmp	r3, #0
20000fbc:	d001      	beq.n	20000fc2 <DAP_JTAG_Transfer+0x72>
20000fbe:	230b      	movs	r3, #11
20000fc0:	e000      	b.n	20000fc4 <DAP_JTAG_Transfer+0x74>
20000fc2:	230a      	movs	r3, #10
20000fc4:	617b      	str	r3, [r7, #20]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20000fc6:	69bb      	ldr	r3, [r7, #24]
20000fc8:	f003 0302 	and.w	r3, r3, #2
20000fcc:	2b00      	cmp	r3, #0
20000fce:	f000 815d 	beq.w	2000128c <DAP_JTAG_Transfer+0x33c>
      // Read register
      if (post_read) {
20000fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000fd4:	2b00      	cmp	r3, #0
20000fd6:	f000 8088 	beq.w	200010ea <DAP_JTAG_Transfer+0x19a>
        // Read was posted before
        retry = DAP_Data.transfer.retry_count;
20000fda:	4b7c      	ldr	r3, [pc, #496]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
20000fdc:	8a1b      	ldrh	r3, [r3, #16]
20000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
20000fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20000fe2:	697b      	ldr	r3, [r7, #20]
20000fe4:	429a      	cmp	r2, r3
20000fe6:	d11a      	bne.n	2000101e <DAP_JTAG_Transfer+0xce>
20000fe8:	69bb      	ldr	r3, [r7, #24]
20000fea:	f003 0310 	and.w	r3, r3, #16
20000fee:	2b00      	cmp	r3, #0
20000ff0:	d115      	bne.n	2000101e <DAP_JTAG_Transfer+0xce>
          // Read previous data and post next read
          do {
            response_value = JTAG_Transfer(request_value, &data);
20000ff2:	f107 0308 	add.w	r3, r7, #8
20000ff6:	4619      	mov	r1, r3
20000ff8:	69b8      	ldr	r0, [r7, #24]
20000ffa:	f002 fa61 	bl	200034c0 <JTAG_Transfer>
20000ffe:	4603      	mov	r3, r0
20001000:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001004:	2b02      	cmp	r3, #2
20001006:	d12a      	bne.n	2000105e <DAP_JTAG_Transfer+0x10e>
20001008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000100a:	1e5a      	subs	r2, r3, #1
2000100c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000100e:	2b00      	cmp	r3, #0
20001010:	d025      	beq.n	2000105e <DAP_JTAG_Transfer+0x10e>
20001012:	4b6d      	ldr	r3, [pc, #436]	@ (200011c8 <DAP_JTAG_Transfer+0x278>)
20001014:	781b      	ldrb	r3, [r3, #0]
20001016:	b2db      	uxtb	r3, r3
20001018:	2b00      	cmp	r3, #0
2000101a:	d0ea      	beq.n	20000ff2 <DAP_JTAG_Transfer+0xa2>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
2000101c:	e01f      	b.n	2000105e <DAP_JTAG_Transfer+0x10e>
        } else {
          // Select JTAG chain
          if (ir != JTAG_DPACC) {
2000101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001020:	2b0a      	cmp	r3, #10
20001022:	d004      	beq.n	2000102e <DAP_JTAG_Transfer+0xde>
            ir = JTAG_DPACC;
20001024:	230a      	movs	r3, #10
20001026:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
20001028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000102a:	f002 fa33 	bl	20003494 <JTAG_IR>
          }
          // Read previous data
          do {
            response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
2000102e:	f107 0308 	add.w	r3, r7, #8
20001032:	4619      	mov	r1, r3
20001034:	200e      	movs	r0, #14
20001036:	f002 fa43 	bl	200034c0 <JTAG_Transfer>
2000103a:	4603      	mov	r3, r0
2000103c:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000103e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001040:	2b02      	cmp	r3, #2
20001042:	d109      	bne.n	20001058 <DAP_JTAG_Transfer+0x108>
20001044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001046:	1e5a      	subs	r2, r3, #1
20001048:	62ba      	str	r2, [r7, #40]	@ 0x28
2000104a:	2b00      	cmp	r3, #0
2000104c:	d004      	beq.n	20001058 <DAP_JTAG_Transfer+0x108>
2000104e:	4b5e      	ldr	r3, [pc, #376]	@ (200011c8 <DAP_JTAG_Transfer+0x278>)
20001050:	781b      	ldrb	r3, [r3, #0]
20001052:	b2db      	uxtb	r3, r3
20001054:	2b00      	cmp	r3, #0
20001056:	d0ea      	beq.n	2000102e <DAP_JTAG_Transfer+0xde>
          post_read = 0U;
20001058:	2300      	movs	r3, #0
2000105a:	633b      	str	r3, [r7, #48]	@ 0x30
2000105c:	e000      	b.n	20001060 <DAP_JTAG_Transfer+0x110>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
2000105e:	bf00      	nop
        }
        if (response_value != DAP_TRANSFER_OK) {
20001060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001062:	2b01      	cmp	r3, #1
20001064:	f040 81cb 	bne.w	200013fe <DAP_JTAG_Transfer+0x4ae>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
20001068:	68b9      	ldr	r1, [r7, #8]
2000106a:	683b      	ldr	r3, [r7, #0]
2000106c:	1c5a      	adds	r2, r3, #1
2000106e:	603a      	str	r2, [r7, #0]
20001070:	b2ca      	uxtb	r2, r1
20001072:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001074:	68bb      	ldr	r3, [r7, #8]
20001076:	0a19      	lsrs	r1, r3, #8
20001078:	683b      	ldr	r3, [r7, #0]
2000107a:	1c5a      	adds	r2, r3, #1
2000107c:	603a      	str	r2, [r7, #0]
2000107e:	b2ca      	uxtb	r2, r1
20001080:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001082:	68bb      	ldr	r3, [r7, #8]
20001084:	0c19      	lsrs	r1, r3, #16
20001086:	683b      	ldr	r3, [r7, #0]
20001088:	1c5a      	adds	r2, r3, #1
2000108a:	603a      	str	r2, [r7, #0]
2000108c:	b2ca      	uxtb	r2, r1
2000108e:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001090:	68bb      	ldr	r3, [r7, #8]
20001092:	0e19      	lsrs	r1, r3, #24
20001094:	683b      	ldr	r3, [r7, #0]
20001096:	1c5a      	adds	r2, r3, #1
20001098:	603a      	str	r2, [r7, #0]
2000109a:	b2ca      	uxtb	r2, r1
2000109c:	701a      	strb	r2, [r3, #0]
#if (TIMESTAMP_CLOCK != 0U)
        if (post_read) {
2000109e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200010a0:	2b00      	cmp	r3, #0
200010a2:	d022      	beq.n	200010ea <DAP_JTAG_Transfer+0x19a>
          // Store Timestamp of next AP read
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200010a4:	69bb      	ldr	r3, [r7, #24]
200010a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200010aa:	2b00      	cmp	r3, #0
200010ac:	d01d      	beq.n	200010ea <DAP_JTAG_Transfer+0x19a>
            timestamp = DAP_Data.timestamp;
200010ae:	4b47      	ldr	r3, [pc, #284]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
200010b0:	689b      	ldr	r3, [r3, #8]
200010b2:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
200010b4:	683b      	ldr	r3, [r7, #0]
200010b6:	1c5a      	adds	r2, r3, #1
200010b8:	603a      	str	r2, [r7, #0]
200010ba:	693a      	ldr	r2, [r7, #16]
200010bc:	b2d2      	uxtb	r2, r2
200010be:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
200010c0:	693b      	ldr	r3, [r7, #16]
200010c2:	0a19      	lsrs	r1, r3, #8
200010c4:	683b      	ldr	r3, [r7, #0]
200010c6:	1c5a      	adds	r2, r3, #1
200010c8:	603a      	str	r2, [r7, #0]
200010ca:	b2ca      	uxtb	r2, r1
200010cc:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
200010ce:	693b      	ldr	r3, [r7, #16]
200010d0:	0c19      	lsrs	r1, r3, #16
200010d2:	683b      	ldr	r3, [r7, #0]
200010d4:	1c5a      	adds	r2, r3, #1
200010d6:	603a      	str	r2, [r7, #0]
200010d8:	b2ca      	uxtb	r2, r1
200010da:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
200010dc:	693b      	ldr	r3, [r7, #16]
200010de:	0e19      	lsrs	r1, r3, #24
200010e0:	683b      	ldr	r3, [r7, #0]
200010e2:	1c5a      	adds	r2, r3, #1
200010e4:	603a      	str	r2, [r7, #0]
200010e6:	b2ca      	uxtb	r2, r1
200010e8:	701a      	strb	r2, [r3, #0]
          }
        }
#endif
      }
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
200010ea:	69bb      	ldr	r3, [r7, #24]
200010ec:	f003 0310 	and.w	r3, r3, #16
200010f0:	2b00      	cmp	r3, #0
200010f2:	d07e      	beq.n	200011f2 <DAP_JTAG_Transfer+0x2a2>
        // Read with value match
        match_value = (uint32_t)(*(request+0) <<  0) |
200010f4:	687b      	ldr	r3, [r7, #4]
200010f6:	781b      	ldrb	r3, [r3, #0]
200010f8:	461a      	mov	r2, r3
                      (uint32_t)(*(request+1) <<  8) |
200010fa:	687b      	ldr	r3, [r7, #4]
200010fc:	3301      	adds	r3, #1
200010fe:	781b      	ldrb	r3, [r3, #0]
20001100:	021b      	lsls	r3, r3, #8
        match_value = (uint32_t)(*(request+0) <<  0) |
20001102:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+2) << 16) |
20001104:	687b      	ldr	r3, [r7, #4]
20001106:	3302      	adds	r3, #2
20001108:	781b      	ldrb	r3, [r3, #0]
2000110a:	041b      	lsls	r3, r3, #16
                      (uint32_t)(*(request+1) <<  8) |
2000110c:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+3) << 24);
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	3303      	adds	r3, #3
20001112:	781b      	ldrb	r3, [r3, #0]
20001114:	061b      	lsls	r3, r3, #24
        match_value = (uint32_t)(*(request+0) <<  0) |
20001116:	4313      	orrs	r3, r2
20001118:	60fb      	str	r3, [r7, #12]
        request += 4;
2000111a:	687b      	ldr	r3, [r7, #4]
2000111c:	3304      	adds	r3, #4
2000111e:	607b      	str	r3, [r7, #4]
        match_retry  = DAP_Data.transfer.match_retry;
20001120:	4b2a      	ldr	r3, [pc, #168]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
20001122:	8a5b      	ldrh	r3, [r3, #18]
20001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // Select JTAG chain
        if (ir != request_ir) {
20001126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001128:	697b      	ldr	r3, [r7, #20]
2000112a:	429a      	cmp	r2, r3
2000112c:	d004      	beq.n	20001138 <DAP_JTAG_Transfer+0x1e8>
          ir = request_ir;
2000112e:	697b      	ldr	r3, [r7, #20]
20001130:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001134:	f002 f9ae 	bl	20003494 <JTAG_IR>
        }
        // Post DP/AP read
        retry = DAP_Data.transfer.retry_count;
20001138:	4b24      	ldr	r3, [pc, #144]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
2000113a:	8a1b      	ldrh	r3, [r3, #16]
2000113c:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, NULL);
2000113e:	2100      	movs	r1, #0
20001140:	69b8      	ldr	r0, [r7, #24]
20001142:	f002 f9bd 	bl	200034c0 <JTAG_Transfer>
20001146:	4603      	mov	r3, r0
20001148:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000114a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000114c:	2b02      	cmp	r3, #2
2000114e:	d109      	bne.n	20001164 <DAP_JTAG_Transfer+0x214>
20001150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001152:	1e5a      	subs	r2, r3, #1
20001154:	62ba      	str	r2, [r7, #40]	@ 0x28
20001156:	2b00      	cmp	r3, #0
20001158:	d004      	beq.n	20001164 <DAP_JTAG_Transfer+0x214>
2000115a:	4b1b      	ldr	r3, [pc, #108]	@ (200011c8 <DAP_JTAG_Transfer+0x278>)
2000115c:	781b      	ldrb	r3, [r3, #0]
2000115e:	b2db      	uxtb	r3, r3
20001160:	2b00      	cmp	r3, #0
20001162:	d0ec      	beq.n	2000113e <DAP_JTAG_Transfer+0x1ee>
        if (response_value != DAP_TRANSFER_OK) {
20001164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001166:	2b01      	cmp	r3, #1
20001168:	f040 814b 	bne.w	20001402 <DAP_JTAG_Transfer+0x4b2>
          break;
        }
        do {
          // Read register until its value matches or retry counter expires
          retry = DAP_Data.transfer.retry_count;
2000116c:	4b17      	ldr	r3, [pc, #92]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
2000116e:	8a1b      	ldrh	r3, [r3, #16]
20001170:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, &data);
20001172:	f107 0308 	add.w	r3, r7, #8
20001176:	4619      	mov	r1, r3
20001178:	69b8      	ldr	r0, [r7, #24]
2000117a:	f002 f9a1 	bl	200034c0 <JTAG_Transfer>
2000117e:	4603      	mov	r3, r0
20001180:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001184:	2b02      	cmp	r3, #2
20001186:	d109      	bne.n	2000119c <DAP_JTAG_Transfer+0x24c>
20001188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000118a:	1e5a      	subs	r2, r3, #1
2000118c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000118e:	2b00      	cmp	r3, #0
20001190:	d004      	beq.n	2000119c <DAP_JTAG_Transfer+0x24c>
20001192:	4b0d      	ldr	r3, [pc, #52]	@ (200011c8 <DAP_JTAG_Transfer+0x278>)
20001194:	781b      	ldrb	r3, [r3, #0]
20001196:	b2db      	uxtb	r3, r3
20001198:	2b00      	cmp	r3, #0
2000119a:	d0ea      	beq.n	20001172 <DAP_JTAG_Transfer+0x222>
          if (response_value != DAP_TRANSFER_OK) {
2000119c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000119e:	2b01      	cmp	r3, #1
200011a0:	d116      	bne.n	200011d0 <DAP_JTAG_Transfer+0x280>
            break;
          }
        } while (((data & DAP_Data.transfer.match_mask) != match_value) && match_retry-- && !DAP_TransferAbort);
200011a2:	4b0a      	ldr	r3, [pc, #40]	@ (200011cc <DAP_JTAG_Transfer+0x27c>)
200011a4:	695a      	ldr	r2, [r3, #20]
200011a6:	68bb      	ldr	r3, [r7, #8]
200011a8:	4013      	ands	r3, r2
200011aa:	68fa      	ldr	r2, [r7, #12]
200011ac:	429a      	cmp	r2, r3
200011ae:	d010      	beq.n	200011d2 <DAP_JTAG_Transfer+0x282>
200011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200011b2:	1e5a      	subs	r2, r3, #1
200011b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
200011b6:	2b00      	cmp	r3, #0
200011b8:	d00b      	beq.n	200011d2 <DAP_JTAG_Transfer+0x282>
200011ba:	4b03      	ldr	r3, [pc, #12]	@ (200011c8 <DAP_JTAG_Transfer+0x278>)
200011bc:	781b      	ldrb	r3, [r3, #0]
200011be:	b2db      	uxtb	r3, r3
200011c0:	2b00      	cmp	r3, #0
200011c2:	d0d3      	beq.n	2000116c <DAP_JTAG_Transfer+0x21c>
200011c4:	e005      	b.n	200011d2 <DAP_JTAG_Transfer+0x282>
200011c6:	bf00      	nop
200011c8:	2000c7b4 	.word	0x2000c7b4
200011cc:	2000c770 	.word	0x2000c770
            break;
200011d0:	bf00      	nop
        if ((data & DAP_Data.transfer.match_mask) != match_value) {
200011d2:	4b91      	ldr	r3, [pc, #580]	@ (20001418 <DAP_JTAG_Transfer+0x4c8>)
200011d4:	695a      	ldr	r2, [r3, #20]
200011d6:	68bb      	ldr	r3, [r7, #8]
200011d8:	4013      	ands	r3, r2
200011da:	68fa      	ldr	r2, [r7, #12]
200011dc:	429a      	cmp	r2, r3
200011de:	d003      	beq.n	200011e8 <DAP_JTAG_Transfer+0x298>
          response_value |= DAP_TRANSFER_MISMATCH;
200011e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011e2:	f043 0310 	orr.w	r3, r3, #16
200011e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (response_value != DAP_TRANSFER_OK) {
200011e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011ea:	2b01      	cmp	r3, #1
200011ec:	f000 80fa 	beq.w	200013e4 <DAP_JTAG_Transfer+0x494>
          break;
200011f0:	e110      	b.n	20001414 <DAP_JTAG_Transfer+0x4c4>
        }
      } else {
        // Normal read
        if (post_read == 0U) {
200011f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200011f4:	2b00      	cmp	r3, #0
200011f6:	f040 80f5 	bne.w	200013e4 <DAP_JTAG_Transfer+0x494>
          // Select JTAG chain
          if (ir != request_ir) {
200011fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200011fc:	697b      	ldr	r3, [r7, #20]
200011fe:	429a      	cmp	r2, r3
20001200:	d004      	beq.n	2000120c <DAP_JTAG_Transfer+0x2bc>
            ir = request_ir;
20001202:	697b      	ldr	r3, [r7, #20]
20001204:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
20001206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001208:	f002 f944 	bl	20003494 <JTAG_IR>
          }
          // Post DP/AP read
          retry = DAP_Data.transfer.retry_count;
2000120c:	4b82      	ldr	r3, [pc, #520]	@ (20001418 <DAP_JTAG_Transfer+0x4c8>)
2000120e:	8a1b      	ldrh	r3, [r3, #16]
20001210:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, NULL);
20001212:	2100      	movs	r1, #0
20001214:	69b8      	ldr	r0, [r7, #24]
20001216:	f002 f953 	bl	200034c0 <JTAG_Transfer>
2000121a:	4603      	mov	r3, r0
2000121c:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001220:	2b02      	cmp	r3, #2
20001222:	d109      	bne.n	20001238 <DAP_JTAG_Transfer+0x2e8>
20001224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001226:	1e5a      	subs	r2, r3, #1
20001228:	62ba      	str	r2, [r7, #40]	@ 0x28
2000122a:	2b00      	cmp	r3, #0
2000122c:	d004      	beq.n	20001238 <DAP_JTAG_Transfer+0x2e8>
2000122e:	4b7b      	ldr	r3, [pc, #492]	@ (2000141c <DAP_JTAG_Transfer+0x4cc>)
20001230:	781b      	ldrb	r3, [r3, #0]
20001232:	b2db      	uxtb	r3, r3
20001234:	2b00      	cmp	r3, #0
20001236:	d0ec      	beq.n	20001212 <DAP_JTAG_Transfer+0x2c2>
          if (response_value != DAP_TRANSFER_OK) {
20001238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000123a:	2b01      	cmp	r3, #1
2000123c:	f040 80e3 	bne.w	20001406 <DAP_JTAG_Transfer+0x4b6>
            break;
          }
#if (TIMESTAMP_CLOCK != 0U)
          // Store Timestamp
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001240:	69bb      	ldr	r3, [r7, #24]
20001242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001246:	2b00      	cmp	r3, #0
20001248:	d01d      	beq.n	20001286 <DAP_JTAG_Transfer+0x336>
            timestamp = DAP_Data.timestamp;
2000124a:	4b73      	ldr	r3, [pc, #460]	@ (20001418 <DAP_JTAG_Transfer+0x4c8>)
2000124c:	689b      	ldr	r3, [r3, #8]
2000124e:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
20001250:	683b      	ldr	r3, [r7, #0]
20001252:	1c5a      	adds	r2, r3, #1
20001254:	603a      	str	r2, [r7, #0]
20001256:	693a      	ldr	r2, [r7, #16]
20001258:	b2d2      	uxtb	r2, r2
2000125a:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
2000125c:	693b      	ldr	r3, [r7, #16]
2000125e:	0a19      	lsrs	r1, r3, #8
20001260:	683b      	ldr	r3, [r7, #0]
20001262:	1c5a      	adds	r2, r3, #1
20001264:	603a      	str	r2, [r7, #0]
20001266:	b2ca      	uxtb	r2, r1
20001268:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
2000126a:	693b      	ldr	r3, [r7, #16]
2000126c:	0c19      	lsrs	r1, r3, #16
2000126e:	683b      	ldr	r3, [r7, #0]
20001270:	1c5a      	adds	r2, r3, #1
20001272:	603a      	str	r2, [r7, #0]
20001274:	b2ca      	uxtb	r2, r1
20001276:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
20001278:	693b      	ldr	r3, [r7, #16]
2000127a:	0e19      	lsrs	r1, r3, #24
2000127c:	683b      	ldr	r3, [r7, #0]
2000127e:	1c5a      	adds	r2, r3, #1
20001280:	603a      	str	r2, [r7, #0]
20001282:	b2ca      	uxtb	r2, r1
20001284:	701a      	strb	r2, [r3, #0]
          }
#endif
          post_read = 1U;
20001286:	2301      	movs	r3, #1
20001288:	633b      	str	r3, [r7, #48]	@ 0x30
2000128a:	e0ab      	b.n	200013e4 <DAP_JTAG_Transfer+0x494>
        }
      }
    } else {
      // Write register
      if (post_read) {
2000128c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000128e:	2b00      	cmp	r3, #0
20001290:	d040      	beq.n	20001314 <DAP_JTAG_Transfer+0x3c4>
        // Select JTAG chain
        if (ir != JTAG_DPACC) {
20001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001294:	2b0a      	cmp	r3, #10
20001296:	d004      	beq.n	200012a2 <DAP_JTAG_Transfer+0x352>
          ir = JTAG_DPACC;
20001298:	230a      	movs	r3, #10
2000129a:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
2000129c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000129e:	f002 f8f9 	bl	20003494 <JTAG_IR>
        }
        // Read previous data
        retry = DAP_Data.transfer.retry_count;
200012a2:	4b5d      	ldr	r3, [pc, #372]	@ (20001418 <DAP_JTAG_Transfer+0x4c8>)
200012a4:	8a1b      	ldrh	r3, [r3, #16]
200012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200012a8:	f107 0308 	add.w	r3, r7, #8
200012ac:	4619      	mov	r1, r3
200012ae:	200e      	movs	r0, #14
200012b0:	f002 f906 	bl	200034c0 <JTAG_Transfer>
200012b4:	4603      	mov	r3, r0
200012b6:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200012b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200012ba:	2b02      	cmp	r3, #2
200012bc:	d109      	bne.n	200012d2 <DAP_JTAG_Transfer+0x382>
200012be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200012c0:	1e5a      	subs	r2, r3, #1
200012c2:	62ba      	str	r2, [r7, #40]	@ 0x28
200012c4:	2b00      	cmp	r3, #0
200012c6:	d004      	beq.n	200012d2 <DAP_JTAG_Transfer+0x382>
200012c8:	4b54      	ldr	r3, [pc, #336]	@ (2000141c <DAP_JTAG_Transfer+0x4cc>)
200012ca:	781b      	ldrb	r3, [r3, #0]
200012cc:	b2db      	uxtb	r3, r3
200012ce:	2b00      	cmp	r3, #0
200012d0:	d0ea      	beq.n	200012a8 <DAP_JTAG_Transfer+0x358>
        if (response_value != DAP_TRANSFER_OK) {
200012d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200012d4:	2b01      	cmp	r3, #1
200012d6:	f040 8098 	bne.w	2000140a <DAP_JTAG_Transfer+0x4ba>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
200012da:	68b9      	ldr	r1, [r7, #8]
200012dc:	683b      	ldr	r3, [r7, #0]
200012de:	1c5a      	adds	r2, r3, #1
200012e0:	603a      	str	r2, [r7, #0]
200012e2:	b2ca      	uxtb	r2, r1
200012e4:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
200012e6:	68bb      	ldr	r3, [r7, #8]
200012e8:	0a19      	lsrs	r1, r3, #8
200012ea:	683b      	ldr	r3, [r7, #0]
200012ec:	1c5a      	adds	r2, r3, #1
200012ee:	603a      	str	r2, [r7, #0]
200012f0:	b2ca      	uxtb	r2, r1
200012f2:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
200012f4:	68bb      	ldr	r3, [r7, #8]
200012f6:	0c19      	lsrs	r1, r3, #16
200012f8:	683b      	ldr	r3, [r7, #0]
200012fa:	1c5a      	adds	r2, r3, #1
200012fc:	603a      	str	r2, [r7, #0]
200012fe:	b2ca      	uxtb	r2, r1
20001300:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001302:	68bb      	ldr	r3, [r7, #8]
20001304:	0e19      	lsrs	r1, r3, #24
20001306:	683b      	ldr	r3, [r7, #0]
20001308:	1c5a      	adds	r2, r3, #1
2000130a:	603a      	str	r2, [r7, #0]
2000130c:	b2ca      	uxtb	r2, r1
2000130e:	701a      	strb	r2, [r3, #0]
        post_read = 0U;
20001310:	2300      	movs	r3, #0
20001312:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001314:	687b      	ldr	r3, [r7, #4]
20001316:	781b      	ldrb	r3, [r3, #0]
20001318:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000131a:	687b      	ldr	r3, [r7, #4]
2000131c:	3301      	adds	r3, #1
2000131e:	781b      	ldrb	r3, [r3, #0]
20001320:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001322:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001324:	687b      	ldr	r3, [r7, #4]
20001326:	3302      	adds	r3, #2
20001328:	781b      	ldrb	r3, [r3, #0]
2000132a:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
2000132c:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
2000132e:	687b      	ldr	r3, [r7, #4]
20001330:	3303      	adds	r3, #3
20001332:	781b      	ldrb	r3, [r3, #0]
20001334:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001336:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
20001338:	60bb      	str	r3, [r7, #8]
      request += 4;
2000133a:	687b      	ldr	r3, [r7, #4]
2000133c:	3304      	adds	r3, #4
2000133e:	607b      	str	r3, [r7, #4]
      if ((request_value & DAP_TRANSFER_MATCH_MASK) != 0U) {
20001340:	69bb      	ldr	r3, [r7, #24]
20001342:	f003 0320 	and.w	r3, r3, #32
20001346:	2b00      	cmp	r3, #0
20001348:	d005      	beq.n	20001356 <DAP_JTAG_Transfer+0x406>
        // Write match mask
        DAP_Data.transfer.match_mask = data;
2000134a:	68bb      	ldr	r3, [r7, #8]
2000134c:	4a32      	ldr	r2, [pc, #200]	@ (20001418 <DAP_JTAG_Transfer+0x4c8>)
2000134e:	6153      	str	r3, [r2, #20]
        response_value = DAP_TRANSFER_OK;
20001350:	2301      	movs	r3, #1
20001352:	637b      	str	r3, [r7, #52]	@ 0x34
20001354:	e046      	b.n	200013e4 <DAP_JTAG_Transfer+0x494>
      } else {
        // Select JTAG chain
        if (ir != request_ir) {
20001356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001358:	697b      	ldr	r3, [r7, #20]
2000135a:	429a      	cmp	r2, r3
2000135c:	d004      	beq.n	20001368 <DAP_JTAG_Transfer+0x418>
          ir = request_ir;
2000135e:	697b      	ldr	r3, [r7, #20]
20001360:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001362:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001364:	f002 f896 	bl	20003494 <JTAG_IR>
        }
        // Write DP/AP register
        retry = DAP_Data.transfer.retry_count;
20001368:	4b2b      	ldr	r3, [pc, #172]	@ (20001418 <DAP_JTAG_Transfer+0x4c8>)
2000136a:	8a1b      	ldrh	r3, [r3, #16]
2000136c:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, &data);
2000136e:	f107 0308 	add.w	r3, r7, #8
20001372:	4619      	mov	r1, r3
20001374:	69b8      	ldr	r0, [r7, #24]
20001376:	f002 f8a3 	bl	200034c0 <JTAG_Transfer>
2000137a:	4603      	mov	r3, r0
2000137c:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000137e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001380:	2b02      	cmp	r3, #2
20001382:	d109      	bne.n	20001398 <DAP_JTAG_Transfer+0x448>
20001384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001386:	1e5a      	subs	r2, r3, #1
20001388:	62ba      	str	r2, [r7, #40]	@ 0x28
2000138a:	2b00      	cmp	r3, #0
2000138c:	d004      	beq.n	20001398 <DAP_JTAG_Transfer+0x448>
2000138e:	4b23      	ldr	r3, [pc, #140]	@ (2000141c <DAP_JTAG_Transfer+0x4cc>)
20001390:	781b      	ldrb	r3, [r3, #0]
20001392:	b2db      	uxtb	r3, r3
20001394:	2b00      	cmp	r3, #0
20001396:	d0ea      	beq.n	2000136e <DAP_JTAG_Transfer+0x41e>
        if (response_value != DAP_TRANSFER_OK) {
20001398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000139a:	2b01      	cmp	r3, #1
2000139c:	d137      	bne.n	2000140e <DAP_JTAG_Transfer+0x4be>
          break;
        }
#if (TIMESTAMP_CLOCK != 0U)
        // Store Timestamp
        if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
2000139e:	69bb      	ldr	r3, [r7, #24]
200013a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200013a4:	2b00      	cmp	r3, #0
200013a6:	d01d      	beq.n	200013e4 <DAP_JTAG_Transfer+0x494>
          timestamp = DAP_Data.timestamp;
200013a8:	4b1b      	ldr	r3, [pc, #108]	@ (20001418 <DAP_JTAG_Transfer+0x4c8>)
200013aa:	689b      	ldr	r3, [r3, #8]
200013ac:	613b      	str	r3, [r7, #16]
          *response++ = (uint8_t) timestamp;
200013ae:	683b      	ldr	r3, [r7, #0]
200013b0:	1c5a      	adds	r2, r3, #1
200013b2:	603a      	str	r2, [r7, #0]
200013b4:	693a      	ldr	r2, [r7, #16]
200013b6:	b2d2      	uxtb	r2, r2
200013b8:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >>  8);
200013ba:	693b      	ldr	r3, [r7, #16]
200013bc:	0a19      	lsrs	r1, r3, #8
200013be:	683b      	ldr	r3, [r7, #0]
200013c0:	1c5a      	adds	r2, r3, #1
200013c2:	603a      	str	r2, [r7, #0]
200013c4:	b2ca      	uxtb	r2, r1
200013c6:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 16);
200013c8:	693b      	ldr	r3, [r7, #16]
200013ca:	0c19      	lsrs	r1, r3, #16
200013cc:	683b      	ldr	r3, [r7, #0]
200013ce:	1c5a      	adds	r2, r3, #1
200013d0:	603a      	str	r2, [r7, #0]
200013d2:	b2ca      	uxtb	r2, r1
200013d4:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 24);
200013d6:	693b      	ldr	r3, [r7, #16]
200013d8:	0e19      	lsrs	r1, r3, #24
200013da:	683b      	ldr	r3, [r7, #0]
200013dc:	1c5a      	adds	r2, r3, #1
200013de:	603a      	str	r2, [r7, #0]
200013e0:	b2ca      	uxtb	r2, r1
200013e2:	701a      	strb	r2, [r3, #0]
        }
#endif
      }
    }
    response_count++;
200013e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200013e6:	3301      	adds	r3, #1
200013e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (DAP_TransferAbort) {
200013ea:	4b0c      	ldr	r3, [pc, #48]	@ (2000141c <DAP_JTAG_Transfer+0x4cc>)
200013ec:	781b      	ldrb	r3, [r3, #0]
200013ee:	b2db      	uxtb	r3, r3
200013f0:	2b00      	cmp	r3, #0
200013f2:	d10e      	bne.n	20001412 <DAP_JTAG_Transfer+0x4c2>
  while (request_count != 0) {
200013f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200013f6:	2b00      	cmp	r3, #0
200013f8:	f47f add4 	bne.w	20000fa4 <DAP_JTAG_Transfer+0x54>
200013fc:	e029      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
          break;
200013fe:	bf00      	nop
20001400:	e027      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
          break;
20001402:	bf00      	nop
20001404:	e025      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
            break;
20001406:	bf00      	nop
20001408:	e023      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
          break;
2000140a:	bf00      	nop
2000140c:	e021      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
          break;
2000140e:	bf00      	nop
20001410:	e01f      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
      break;
20001412:	bf00      	nop
    }
  }

  while (request_count != 0) {
20001414:	e01d      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
20001416:	bf00      	nop
20001418:	2000c770 	.word	0x2000c770
2000141c:	2000c7b4 	.word	0x2000c7b4
    // Process canceled requests
    request_count--;
20001420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001422:	3b01      	subs	r3, #1
20001424:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
20001426:	687b      	ldr	r3, [r7, #4]
20001428:	1c5a      	adds	r2, r3, #1
2000142a:	607a      	str	r2, [r7, #4]
2000142c:	781b      	ldrb	r3, [r3, #0]
2000142e:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001430:	69bb      	ldr	r3, [r7, #24]
20001432:	f003 0302 	and.w	r3, r3, #2
20001436:	2b00      	cmp	r3, #0
20001438:	d008      	beq.n	2000144c <DAP_JTAG_Transfer+0x4fc>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
2000143a:	69bb      	ldr	r3, [r7, #24]
2000143c:	f003 0310 	and.w	r3, r3, #16
20001440:	2b00      	cmp	r3, #0
20001442:	d006      	beq.n	20001452 <DAP_JTAG_Transfer+0x502>
        // Read with value match
        request += 4;
20001444:	687b      	ldr	r3, [r7, #4]
20001446:	3304      	adds	r3, #4
20001448:	607b      	str	r3, [r7, #4]
2000144a:	e002      	b.n	20001452 <DAP_JTAG_Transfer+0x502>
      }
    } else {
      // Write register
      request += 4;
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	3304      	adds	r3, #4
20001450:	607b      	str	r3, [r7, #4]
  while (request_count != 0) {
20001452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001454:	2b00      	cmp	r3, #0
20001456:	d1e3      	bne.n	20001420 <DAP_JTAG_Transfer+0x4d0>
    }
  }

  if (response_value == DAP_TRANSFER_OK) {
20001458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000145a:	2b01      	cmp	r3, #1
2000145c:	d15a      	bne.n	20001514 <DAP_JTAG_Transfer+0x5c4>
    // Select JTAG chain
    if (ir != JTAG_DPACC) {
2000145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001460:	2b0a      	cmp	r3, #10
20001462:	d004      	beq.n	2000146e <DAP_JTAG_Transfer+0x51e>
      ir = JTAG_DPACC;
20001464:	230a      	movs	r3, #10
20001466:	627b      	str	r3, [r7, #36]	@ 0x24
      JTAG_IR(ir);
20001468:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000146a:	f002 f813 	bl	20003494 <JTAG_IR>
    }
    if (post_read) {
2000146e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001470:	2b00      	cmp	r3, #0
20001472:	d036      	beq.n	200014e2 <DAP_JTAG_Transfer+0x592>
      // Read previous data
      retry = DAP_Data.transfer.retry_count;
20001474:	4b33      	ldr	r3, [pc, #204]	@ (20001544 <DAP_JTAG_Transfer+0x5f4>)
20001476:	8a1b      	ldrh	r3, [r3, #16]
20001478:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
2000147a:	f107 0308 	add.w	r3, r7, #8
2000147e:	4619      	mov	r1, r3
20001480:	200e      	movs	r0, #14
20001482:	f002 f81d 	bl	200034c0 <JTAG_Transfer>
20001486:	4603      	mov	r3, r0
20001488:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000148a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000148c:	2b02      	cmp	r3, #2
2000148e:	d109      	bne.n	200014a4 <DAP_JTAG_Transfer+0x554>
20001490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001492:	1e5a      	subs	r2, r3, #1
20001494:	62ba      	str	r2, [r7, #40]	@ 0x28
20001496:	2b00      	cmp	r3, #0
20001498:	d004      	beq.n	200014a4 <DAP_JTAG_Transfer+0x554>
2000149a:	4b2b      	ldr	r3, [pc, #172]	@ (20001548 <DAP_JTAG_Transfer+0x5f8>)
2000149c:	781b      	ldrb	r3, [r3, #0]
2000149e:	b2db      	uxtb	r3, r3
200014a0:	2b00      	cmp	r3, #0
200014a2:	d0ea      	beq.n	2000147a <DAP_JTAG_Transfer+0x52a>
      if (response_value != DAP_TRANSFER_OK) {
200014a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014a6:	2b01      	cmp	r3, #1
200014a8:	d136      	bne.n	20001518 <DAP_JTAG_Transfer+0x5c8>
        goto end;
      }
      // Store previous data
      *response++ = (uint8_t) data;
200014aa:	68b9      	ldr	r1, [r7, #8]
200014ac:	683b      	ldr	r3, [r7, #0]
200014ae:	1c5a      	adds	r2, r3, #1
200014b0:	603a      	str	r2, [r7, #0]
200014b2:	b2ca      	uxtb	r2, r1
200014b4:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
200014b6:	68bb      	ldr	r3, [r7, #8]
200014b8:	0a19      	lsrs	r1, r3, #8
200014ba:	683b      	ldr	r3, [r7, #0]
200014bc:	1c5a      	adds	r2, r3, #1
200014be:	603a      	str	r2, [r7, #0]
200014c0:	b2ca      	uxtb	r2, r1
200014c2:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
200014c4:	68bb      	ldr	r3, [r7, #8]
200014c6:	0c19      	lsrs	r1, r3, #16
200014c8:	683b      	ldr	r3, [r7, #0]
200014ca:	1c5a      	adds	r2, r3, #1
200014cc:	603a      	str	r2, [r7, #0]
200014ce:	b2ca      	uxtb	r2, r1
200014d0:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
200014d2:	68bb      	ldr	r3, [r7, #8]
200014d4:	0e19      	lsrs	r1, r3, #24
200014d6:	683b      	ldr	r3, [r7, #0]
200014d8:	1c5a      	adds	r2, r3, #1
200014da:	603a      	str	r2, [r7, #0]
200014dc:	b2ca      	uxtb	r2, r1
200014de:	701a      	strb	r2, [r3, #0]
200014e0:	e01b      	b.n	2000151a <DAP_JTAG_Transfer+0x5ca>
    } else {
      // Check last write
      retry = DAP_Data.transfer.retry_count;
200014e2:	4b18      	ldr	r3, [pc, #96]	@ (20001544 <DAP_JTAG_Transfer+0x5f4>)
200014e4:	8a1b      	ldrh	r3, [r3, #16]
200014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
200014e8:	2100      	movs	r1, #0
200014ea:	200e      	movs	r0, #14
200014ec:	f001 ffe8 	bl	200034c0 <JTAG_Transfer>
200014f0:	4603      	mov	r3, r0
200014f2:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200014f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014f6:	2b02      	cmp	r3, #2
200014f8:	d10c      	bne.n	20001514 <DAP_JTAG_Transfer+0x5c4>
200014fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200014fc:	1e5a      	subs	r2, r3, #1
200014fe:	62ba      	str	r2, [r7, #40]	@ 0x28
20001500:	2b00      	cmp	r3, #0
20001502:	d007      	beq.n	20001514 <DAP_JTAG_Transfer+0x5c4>
20001504:	4b10      	ldr	r3, [pc, #64]	@ (20001548 <DAP_JTAG_Transfer+0x5f8>)
20001506:	781b      	ldrb	r3, [r3, #0]
20001508:	b2db      	uxtb	r3, r3
2000150a:	2b00      	cmp	r3, #0
2000150c:	d0ec      	beq.n	200014e8 <DAP_JTAG_Transfer+0x598>
    }
  }

end:
2000150e:	e001      	b.n	20001514 <DAP_JTAG_Transfer+0x5c4>
    goto end;
20001510:	bf00      	nop
20001512:	e002      	b.n	2000151a <DAP_JTAG_Transfer+0x5ca>
end:
20001514:	bf00      	nop
20001516:	e000      	b.n	2000151a <DAP_JTAG_Transfer+0x5ca>
        goto end;
20001518:	bf00      	nop
  *(response_head+0) = (uint8_t)response_count;
2000151a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000151c:	b2da      	uxtb	r2, r3
2000151e:	69fb      	ldr	r3, [r7, #28]
20001520:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)response_value;
20001522:	69fb      	ldr	r3, [r7, #28]
20001524:	3301      	adds	r3, #1
20001526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20001528:	b2d2      	uxtb	r2, r2
2000152a:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | (uint32_t)(response - response_head));
2000152c:	687a      	ldr	r2, [r7, #4]
2000152e:	6a3b      	ldr	r3, [r7, #32]
20001530:	1ad3      	subs	r3, r2, r3
20001532:	041b      	lsls	r3, r3, #16
20001534:	6839      	ldr	r1, [r7, #0]
20001536:	69fa      	ldr	r2, [r7, #28]
20001538:	1a8a      	subs	r2, r1, r2
2000153a:	4313      	orrs	r3, r2
}
2000153c:	4618      	mov	r0, r3
2000153e:	3740      	adds	r7, #64	@ 0x40
20001540:	46bd      	mov	sp, r7
20001542:	bd80      	pop	{r7, pc}
20001544:	2000c770 	.word	0x2000c770
20001548:	2000c7b4 	.word	0x2000c7b4

2000154c <DAP_Dummy_Transfer>:
// Process Dummy Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Dummy_Transfer(const uint8_t *request, uint8_t *response) {
2000154c:	b480      	push	{r7}
2000154e:	b087      	sub	sp, #28
20001550:	af00      	add	r7, sp, #0
20001552:	6078      	str	r0, [r7, #4]
20001554:	6039      	str	r1, [r7, #0]
  const
  uint8_t  *request_head;
  uint32_t  request_count;
  uint32_t  request_value;

  request_head  =  request;
20001556:	687b      	ldr	r3, [r7, #4]
20001558:	613b      	str	r3, [r7, #16]

  request++;            // Ignore DAP index
2000155a:	687b      	ldr	r3, [r7, #4]
2000155c:	3301      	adds	r3, #1
2000155e:	607b      	str	r3, [r7, #4]

  request_count = *request++;
20001560:	687b      	ldr	r3, [r7, #4]
20001562:	1c5a      	adds	r2, r3, #1
20001564:	607a      	str	r2, [r7, #4]
20001566:	781b      	ldrb	r3, [r3, #0]
20001568:	617b      	str	r3, [r7, #20]

  for (; request_count != 0U; request_count--) {
2000156a:	e018      	b.n	2000159e <DAP_Dummy_Transfer+0x52>
    // Process dummy requests
    request_value = *request++;
2000156c:	687b      	ldr	r3, [r7, #4]
2000156e:	1c5a      	adds	r2, r3, #1
20001570:	607a      	str	r2, [r7, #4]
20001572:	781b      	ldrb	r3, [r3, #0]
20001574:	60fb      	str	r3, [r7, #12]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001576:	68fb      	ldr	r3, [r7, #12]
20001578:	f003 0302 	and.w	r3, r3, #2
2000157c:	2b00      	cmp	r3, #0
2000157e:	d008      	beq.n	20001592 <DAP_Dummy_Transfer+0x46>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
20001580:	68fb      	ldr	r3, [r7, #12]
20001582:	f003 0310 	and.w	r3, r3, #16
20001586:	2b00      	cmp	r3, #0
20001588:	d006      	beq.n	20001598 <DAP_Dummy_Transfer+0x4c>
        // Read with value match
        request += 4;
2000158a:	687b      	ldr	r3, [r7, #4]
2000158c:	3304      	adds	r3, #4
2000158e:	607b      	str	r3, [r7, #4]
20001590:	e002      	b.n	20001598 <DAP_Dummy_Transfer+0x4c>
      }
    } else {
      // Write register
      request += 4;
20001592:	687b      	ldr	r3, [r7, #4]
20001594:	3304      	adds	r3, #4
20001596:	607b      	str	r3, [r7, #4]
  for (; request_count != 0U; request_count--) {
20001598:	697b      	ldr	r3, [r7, #20]
2000159a:	3b01      	subs	r3, #1
2000159c:	617b      	str	r3, [r7, #20]
2000159e:	697b      	ldr	r3, [r7, #20]
200015a0:	2b00      	cmp	r3, #0
200015a2:	d1e3      	bne.n	2000156c <DAP_Dummy_Transfer+0x20>
    }
  }

  *(response+0) = 0U;   // Response count
200015a4:	683b      	ldr	r3, [r7, #0]
200015a6:	2200      	movs	r2, #0
200015a8:	701a      	strb	r2, [r3, #0]
  *(response+1) = 0U;   // Response value
200015aa:	683b      	ldr	r3, [r7, #0]
200015ac:	3301      	adds	r3, #1
200015ae:	2200      	movs	r2, #0
200015b0:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | 2U);
200015b2:	687a      	ldr	r2, [r7, #4]
200015b4:	693b      	ldr	r3, [r7, #16]
200015b6:	1ad3      	subs	r3, r2, r3
200015b8:	041b      	lsls	r3, r3, #16
200015ba:	f043 0302 	orr.w	r3, r3, #2
}
200015be:	4618      	mov	r0, r3
200015c0:	371c      	adds	r7, #28
200015c2:	46bd      	mov	sp, r7
200015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200015c8:	4770      	bx	lr
	...

200015cc <DAP_Transfer>:
// Process Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Transfer(const uint8_t *request, uint8_t *response) {
200015cc:	b580      	push	{r7, lr}
200015ce:	b084      	sub	sp, #16
200015d0:	af00      	add	r7, sp, #0
200015d2:	6078      	str	r0, [r7, #4]
200015d4:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
200015d6:	4b0a      	ldr	r3, [pc, #40]	@ (20001600 <DAP_Transfer+0x34>)
200015d8:	781b      	ldrb	r3, [r3, #0]
200015da:	2b02      	cmp	r3, #2
200015dc:	d105      	bne.n	200015ea <DAP_Transfer+0x1e>
      num = DAP_SWD_Transfer(request, response);
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_Transfer(request, response);
200015de:	6839      	ldr	r1, [r7, #0]
200015e0:	6878      	ldr	r0, [r7, #4]
200015e2:	f7ff fcb5 	bl	20000f50 <DAP_JTAG_Transfer>
200015e6:	60f8      	str	r0, [r7, #12]
      break;
200015e8:	e005      	b.n	200015f6 <DAP_Transfer+0x2a>
#endif
    default:
      num = DAP_Dummy_Transfer(request, response);
200015ea:	6839      	ldr	r1, [r7, #0]
200015ec:	6878      	ldr	r0, [r7, #4]
200015ee:	f7ff ffad 	bl	2000154c <DAP_Dummy_Transfer>
200015f2:	60f8      	str	r0, [r7, #12]
      break;
200015f4:	bf00      	nop
  }

  return (num);
200015f6:	68fb      	ldr	r3, [r7, #12]
}
200015f8:	4618      	mov	r0, r3
200015fa:	3710      	adds	r7, #16
200015fc:	46bd      	mov	sp, r7
200015fe:	bd80      	pop	{r7, pc}
20001600:	2000c770 	.word	0x2000c770

20001604 <DAP_JTAG_TransferBlock>:
// Process JTAG Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_TransferBlock(const uint8_t *request, uint8_t *response) {
20001604:	b580      	push	{r7, lr}
20001606:	b08a      	sub	sp, #40	@ 0x28
20001608:	af00      	add	r7, sp, #0
2000160a:	6078      	str	r0, [r7, #4]
2000160c:	6039      	str	r1, [r7, #0]
  uint8_t  *response_head;
  uint32_t  retry;
  uint32_t  data;
  uint32_t  ir;

  response_count = 0U;
2000160e:	2300      	movs	r3, #0
20001610:	61fb      	str	r3, [r7, #28]
  response_value = 0U;
20001612:	2300      	movs	r3, #0
20001614:	61bb      	str	r3, [r7, #24]
  response_head  = response;
20001616:	683b      	ldr	r3, [r7, #0]
20001618:	613b      	str	r3, [r7, #16]
  response      += 3;
2000161a:	683b      	ldr	r3, [r7, #0]
2000161c:	3303      	adds	r3, #3
2000161e:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001620:	4b89      	ldr	r3, [pc, #548]	@ (20001848 <DAP_JTAG_TransferBlock+0x244>)
20001622:	2200      	movs	r2, #0
20001624:	701a      	strb	r2, [r3, #0]

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20001626:	687b      	ldr	r3, [r7, #4]
20001628:	1c5a      	adds	r2, r3, #1
2000162a:	607a      	str	r2, [r7, #4]
2000162c:	781a      	ldrb	r2, [r3, #0]
2000162e:	4b87      	ldr	r3, [pc, #540]	@ (2000184c <DAP_JTAG_TransferBlock+0x248>)
20001630:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20001632:	4b86      	ldr	r3, [pc, #536]	@ (2000184c <DAP_JTAG_TransferBlock+0x248>)
20001634:	7e5a      	ldrb	r2, [r3, #25]
20001636:	4b85      	ldr	r3, [pc, #532]	@ (2000184c <DAP_JTAG_TransferBlock+0x248>)
20001638:	7e1b      	ldrb	r3, [r3, #24]
2000163a:	429a      	cmp	r2, r3
2000163c:	f080 80e2 	bcs.w	20001804 <DAP_JTAG_TransferBlock+0x200>
    goto end;
  }

  request_count = (uint32_t)(*(request+0) << 0) |
20001640:	687b      	ldr	r3, [r7, #4]
20001642:	781b      	ldrb	r3, [r3, #0]
20001644:	461a      	mov	r2, r3
                  (uint32_t)(*(request+1) << 8);
20001646:	687b      	ldr	r3, [r7, #4]
20001648:	3301      	adds	r3, #1
2000164a:	781b      	ldrb	r3, [r3, #0]
2000164c:	021b      	lsls	r3, r3, #8
  request_count = (uint32_t)(*(request+0) << 0) |
2000164e:	4313      	orrs	r3, r2
20001650:	627b      	str	r3, [r7, #36]	@ 0x24
  request += 2;
20001652:	687b      	ldr	r3, [r7, #4]
20001654:	3302      	adds	r3, #2
20001656:	607b      	str	r3, [r7, #4]
  if (request_count == 0U) {
20001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000165a:	2b00      	cmp	r3, #0
2000165c:	f000 80d4 	beq.w	20001808 <DAP_JTAG_TransferBlock+0x204>
    goto end;
  }

  request_value = *request++;
20001660:	687b      	ldr	r3, [r7, #4]
20001662:	1c5a      	adds	r2, r3, #1
20001664:	607a      	str	r2, [r7, #4]
20001666:	781b      	ldrb	r3, [r3, #0]
20001668:	623b      	str	r3, [r7, #32]

  // Select JTAG chain
  ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
2000166a:	6a3b      	ldr	r3, [r7, #32]
2000166c:	f003 0301 	and.w	r3, r3, #1
20001670:	2b00      	cmp	r3, #0
20001672:	d001      	beq.n	20001678 <DAP_JTAG_TransferBlock+0x74>
20001674:	230b      	movs	r3, #11
20001676:	e000      	b.n	2000167a <DAP_JTAG_TransferBlock+0x76>
20001678:	230a      	movs	r3, #10
2000167a:	60fb      	str	r3, [r7, #12]
  JTAG_IR(ir);
2000167c:	68f8      	ldr	r0, [r7, #12]
2000167e:	f001 ff09 	bl	20003494 <JTAG_IR>

  if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001682:	6a3b      	ldr	r3, [r7, #32]
20001684:	f003 0302 	and.w	r3, r3, #2
20001688:	2b00      	cmp	r3, #0
2000168a:	f000 8099 	beq.w	200017c0 <DAP_JTAG_TransferBlock+0x1bc>
    // Post read
    retry = DAP_Data.transfer.retry_count;
2000168e:	4b6f      	ldr	r3, [pc, #444]	@ (2000184c <DAP_JTAG_TransferBlock+0x248>)
20001690:	8a1b      	ldrh	r3, [r3, #16]
20001692:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(request_value, NULL);
20001694:	2100      	movs	r1, #0
20001696:	6a38      	ldr	r0, [r7, #32]
20001698:	f001 ff12 	bl	200034c0 <JTAG_Transfer>
2000169c:	4603      	mov	r3, r0
2000169e:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200016a0:	69bb      	ldr	r3, [r7, #24]
200016a2:	2b02      	cmp	r3, #2
200016a4:	d109      	bne.n	200016ba <DAP_JTAG_TransferBlock+0xb6>
200016a6:	697b      	ldr	r3, [r7, #20]
200016a8:	1e5a      	subs	r2, r3, #1
200016aa:	617a      	str	r2, [r7, #20]
200016ac:	2b00      	cmp	r3, #0
200016ae:	d004      	beq.n	200016ba <DAP_JTAG_TransferBlock+0xb6>
200016b0:	4b65      	ldr	r3, [pc, #404]	@ (20001848 <DAP_JTAG_TransferBlock+0x244>)
200016b2:	781b      	ldrb	r3, [r3, #0]
200016b4:	b2db      	uxtb	r3, r3
200016b6:	2b00      	cmp	r3, #0
200016b8:	d0ec      	beq.n	20001694 <DAP_JTAG_TransferBlock+0x90>
    if (response_value != DAP_TRANSFER_OK) {
200016ba:	69bb      	ldr	r3, [r7, #24]
200016bc:	2b01      	cmp	r3, #1
200016be:	f040 80a5 	bne.w	2000180c <DAP_JTAG_TransferBlock+0x208>
      goto end;
    }
    // Read register block
    while (request_count--) {
200016c2:	e043      	b.n	2000174c <DAP_JTAG_TransferBlock+0x148>
      // Read DP/AP register
      if (request_count == 0U) {
200016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200016c6:	2b00      	cmp	r3, #0
200016c8:	d107      	bne.n	200016da <DAP_JTAG_TransferBlock+0xd6>
        // Last read
        if (ir != JTAG_DPACC) {
200016ca:	68fb      	ldr	r3, [r7, #12]
200016cc:	2b0a      	cmp	r3, #10
200016ce:	d002      	beq.n	200016d6 <DAP_JTAG_TransferBlock+0xd2>
          JTAG_IR(JTAG_DPACC);
200016d0:	200a      	movs	r0, #10
200016d2:	f001 fedf 	bl	20003494 <JTAG_IR>
        }
        request_value = DP_RDBUFF | DAP_TRANSFER_RnW;
200016d6:	230e      	movs	r3, #14
200016d8:	623b      	str	r3, [r7, #32]
      }
      retry = DAP_Data.transfer.retry_count;
200016da:	4b5c      	ldr	r3, [pc, #368]	@ (2000184c <DAP_JTAG_TransferBlock+0x248>)
200016dc:	8a1b      	ldrh	r3, [r3, #16]
200016de:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
200016e0:	f107 0308 	add.w	r3, r7, #8
200016e4:	4619      	mov	r1, r3
200016e6:	6a38      	ldr	r0, [r7, #32]
200016e8:	f001 feea 	bl	200034c0 <JTAG_Transfer>
200016ec:	4603      	mov	r3, r0
200016ee:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200016f0:	69bb      	ldr	r3, [r7, #24]
200016f2:	2b02      	cmp	r3, #2
200016f4:	d109      	bne.n	2000170a <DAP_JTAG_TransferBlock+0x106>
200016f6:	697b      	ldr	r3, [r7, #20]
200016f8:	1e5a      	subs	r2, r3, #1
200016fa:	617a      	str	r2, [r7, #20]
200016fc:	2b00      	cmp	r3, #0
200016fe:	d004      	beq.n	2000170a <DAP_JTAG_TransferBlock+0x106>
20001700:	4b51      	ldr	r3, [pc, #324]	@ (20001848 <DAP_JTAG_TransferBlock+0x244>)
20001702:	781b      	ldrb	r3, [r3, #0]
20001704:	b2db      	uxtb	r3, r3
20001706:	2b00      	cmp	r3, #0
20001708:	d0ea      	beq.n	200016e0 <DAP_JTAG_TransferBlock+0xdc>
      if (response_value != DAP_TRANSFER_OK) {
2000170a:	69bb      	ldr	r3, [r7, #24]
2000170c:	2b01      	cmp	r3, #1
2000170e:	d17f      	bne.n	20001810 <DAP_JTAG_TransferBlock+0x20c>
        goto end;
      }
      // Store data
      *response++ = (uint8_t) data;
20001710:	68b9      	ldr	r1, [r7, #8]
20001712:	683b      	ldr	r3, [r7, #0]
20001714:	1c5a      	adds	r2, r3, #1
20001716:	603a      	str	r2, [r7, #0]
20001718:	b2ca      	uxtb	r2, r1
2000171a:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
2000171c:	68bb      	ldr	r3, [r7, #8]
2000171e:	0a19      	lsrs	r1, r3, #8
20001720:	683b      	ldr	r3, [r7, #0]
20001722:	1c5a      	adds	r2, r3, #1
20001724:	603a      	str	r2, [r7, #0]
20001726:	b2ca      	uxtb	r2, r1
20001728:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
2000172a:	68bb      	ldr	r3, [r7, #8]
2000172c:	0c19      	lsrs	r1, r3, #16
2000172e:	683b      	ldr	r3, [r7, #0]
20001730:	1c5a      	adds	r2, r3, #1
20001732:	603a      	str	r2, [r7, #0]
20001734:	b2ca      	uxtb	r2, r1
20001736:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20001738:	68bb      	ldr	r3, [r7, #8]
2000173a:	0e19      	lsrs	r1, r3, #24
2000173c:	683b      	ldr	r3, [r7, #0]
2000173e:	1c5a      	adds	r2, r3, #1
20001740:	603a      	str	r2, [r7, #0]
20001742:	b2ca      	uxtb	r2, r1
20001744:	701a      	strb	r2, [r3, #0]
      response_count++;
20001746:	69fb      	ldr	r3, [r7, #28]
20001748:	3301      	adds	r3, #1
2000174a:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
2000174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000174e:	1e5a      	subs	r2, r3, #1
20001750:	627a      	str	r2, [r7, #36]	@ 0x24
20001752:	2b00      	cmp	r3, #0
20001754:	d1b6      	bne.n	200016c4 <DAP_JTAG_TransferBlock+0xc0>
20001756:	e060      	b.n	2000181a <DAP_JTAG_TransferBlock+0x216>
    }
  } else {
    // Write register block
    while (request_count--) {
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001758:	687b      	ldr	r3, [r7, #4]
2000175a:	781b      	ldrb	r3, [r3, #0]
2000175c:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000175e:	687b      	ldr	r3, [r7, #4]
20001760:	3301      	adds	r3, #1
20001762:	781b      	ldrb	r3, [r3, #0]
20001764:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001766:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001768:	687b      	ldr	r3, [r7, #4]
2000176a:	3302      	adds	r3, #2
2000176c:	781b      	ldrb	r3, [r3, #0]
2000176e:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
20001770:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
20001772:	687b      	ldr	r3, [r7, #4]
20001774:	3303      	adds	r3, #3
20001776:	781b      	ldrb	r3, [r3, #0]
20001778:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
2000177a:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
2000177c:	60bb      	str	r3, [r7, #8]
      request += 4;
2000177e:	687b      	ldr	r3, [r7, #4]
20001780:	3304      	adds	r3, #4
20001782:	607b      	str	r3, [r7, #4]
      // Write DP/AP register
      retry = DAP_Data.transfer.retry_count;
20001784:	4b31      	ldr	r3, [pc, #196]	@ (2000184c <DAP_JTAG_TransferBlock+0x248>)
20001786:	8a1b      	ldrh	r3, [r3, #16]
20001788:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
2000178a:	f107 0308 	add.w	r3, r7, #8
2000178e:	4619      	mov	r1, r3
20001790:	6a38      	ldr	r0, [r7, #32]
20001792:	f001 fe95 	bl	200034c0 <JTAG_Transfer>
20001796:	4603      	mov	r3, r0
20001798:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000179a:	69bb      	ldr	r3, [r7, #24]
2000179c:	2b02      	cmp	r3, #2
2000179e:	d109      	bne.n	200017b4 <DAP_JTAG_TransferBlock+0x1b0>
200017a0:	697b      	ldr	r3, [r7, #20]
200017a2:	1e5a      	subs	r2, r3, #1
200017a4:	617a      	str	r2, [r7, #20]
200017a6:	2b00      	cmp	r3, #0
200017a8:	d004      	beq.n	200017b4 <DAP_JTAG_TransferBlock+0x1b0>
200017aa:	4b27      	ldr	r3, [pc, #156]	@ (20001848 <DAP_JTAG_TransferBlock+0x244>)
200017ac:	781b      	ldrb	r3, [r3, #0]
200017ae:	b2db      	uxtb	r3, r3
200017b0:	2b00      	cmp	r3, #0
200017b2:	d0ea      	beq.n	2000178a <DAP_JTAG_TransferBlock+0x186>
      if (response_value != DAP_TRANSFER_OK) {
200017b4:	69bb      	ldr	r3, [r7, #24]
200017b6:	2b01      	cmp	r3, #1
200017b8:	d12c      	bne.n	20001814 <DAP_JTAG_TransferBlock+0x210>
        goto end;
      }
      response_count++;
200017ba:	69fb      	ldr	r3, [r7, #28]
200017bc:	3301      	adds	r3, #1
200017be:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
200017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200017c2:	1e5a      	subs	r2, r3, #1
200017c4:	627a      	str	r2, [r7, #36]	@ 0x24
200017c6:	2b00      	cmp	r3, #0
200017c8:	d1c6      	bne.n	20001758 <DAP_JTAG_TransferBlock+0x154>
    }
    // Check last write
    if (ir != JTAG_DPACC) {
200017ca:	68fb      	ldr	r3, [r7, #12]
200017cc:	2b0a      	cmp	r3, #10
200017ce:	d002      	beq.n	200017d6 <DAP_JTAG_TransferBlock+0x1d2>
      JTAG_IR(JTAG_DPACC);
200017d0:	200a      	movs	r0, #10
200017d2:	f001 fe5f 	bl	20003494 <JTAG_IR>
    }
    retry = DAP_Data.transfer.retry_count;
200017d6:	4b1d      	ldr	r3, [pc, #116]	@ (2000184c <DAP_JTAG_TransferBlock+0x248>)
200017d8:	8a1b      	ldrh	r3, [r3, #16]
200017da:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
200017dc:	2100      	movs	r1, #0
200017de:	200e      	movs	r0, #14
200017e0:	f001 fe6e 	bl	200034c0 <JTAG_Transfer>
200017e4:	4603      	mov	r3, r0
200017e6:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200017e8:	69bb      	ldr	r3, [r7, #24]
200017ea:	2b02      	cmp	r3, #2
200017ec:	d114      	bne.n	20001818 <DAP_JTAG_TransferBlock+0x214>
200017ee:	697b      	ldr	r3, [r7, #20]
200017f0:	1e5a      	subs	r2, r3, #1
200017f2:	617a      	str	r2, [r7, #20]
200017f4:	2b00      	cmp	r3, #0
200017f6:	d00f      	beq.n	20001818 <DAP_JTAG_TransferBlock+0x214>
200017f8:	4b13      	ldr	r3, [pc, #76]	@ (20001848 <DAP_JTAG_TransferBlock+0x244>)
200017fa:	781b      	ldrb	r3, [r3, #0]
200017fc:	b2db      	uxtb	r3, r3
200017fe:	2b00      	cmp	r3, #0
20001800:	d0ec      	beq.n	200017dc <DAP_JTAG_TransferBlock+0x1d8>
  }

end:
20001802:	e009      	b.n	20001818 <DAP_JTAG_TransferBlock+0x214>
    goto end;
20001804:	bf00      	nop
20001806:	e008      	b.n	2000181a <DAP_JTAG_TransferBlock+0x216>
    goto end;
20001808:	bf00      	nop
2000180a:	e006      	b.n	2000181a <DAP_JTAG_TransferBlock+0x216>
      goto end;
2000180c:	bf00      	nop
2000180e:	e004      	b.n	2000181a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20001810:	bf00      	nop
20001812:	e002      	b.n	2000181a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20001814:	bf00      	nop
20001816:	e000      	b.n	2000181a <DAP_JTAG_TransferBlock+0x216>
end:
20001818:	bf00      	nop
  *(response_head+0) = (uint8_t)(response_count >> 0);
2000181a:	69fb      	ldr	r3, [r7, #28]
2000181c:	b2da      	uxtb	r2, r3
2000181e:	693b      	ldr	r3, [r7, #16]
20001820:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)(response_count >> 8);
20001822:	69fb      	ldr	r3, [r7, #28]
20001824:	0a1a      	lsrs	r2, r3, #8
20001826:	693b      	ldr	r3, [r7, #16]
20001828:	3301      	adds	r3, #1
2000182a:	b2d2      	uxtb	r2, r2
2000182c:	701a      	strb	r2, [r3, #0]
  *(response_head+2) = (uint8_t) response_value;
2000182e:	693b      	ldr	r3, [r7, #16]
20001830:	3302      	adds	r3, #2
20001832:	69ba      	ldr	r2, [r7, #24]
20001834:	b2d2      	uxtb	r2, r2
20001836:	701a      	strb	r2, [r3, #0]

  return ((uint32_t)(response - response_head));
20001838:	683a      	ldr	r2, [r7, #0]
2000183a:	693b      	ldr	r3, [r7, #16]
2000183c:	1ad3      	subs	r3, r2, r3
}
2000183e:	4618      	mov	r0, r3
20001840:	3728      	adds	r7, #40	@ 0x28
20001842:	46bd      	mov	sp, r7
20001844:	bd80      	pop	{r7, pc}
20001846:	bf00      	nop
20001848:	2000c7b4 	.word	0x2000c7b4
2000184c:	2000c770 	.word	0x2000c770

20001850 <DAP_TransferBlock>:
// Process Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferBlock(const uint8_t *request, uint8_t *response) {
20001850:	b580      	push	{r7, lr}
20001852:	b084      	sub	sp, #16
20001854:	af00      	add	r7, sp, #0
20001856:	6078      	str	r0, [r7, #4]
20001858:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
2000185a:	4b1c      	ldr	r3, [pc, #112]	@ (200018cc <DAP_TransferBlock+0x7c>)
2000185c:	781b      	ldrb	r3, [r3, #0]
2000185e:	2b02      	cmp	r3, #2
20001860:	d105      	bne.n	2000186e <DAP_TransferBlock+0x1e>
      num = DAP_SWD_TransferBlock (request, response);
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_TransferBlock(request, response);
20001862:	6839      	ldr	r1, [r7, #0]
20001864:	6878      	ldr	r0, [r7, #4]
20001866:	f7ff fecd 	bl	20001604 <DAP_JTAG_TransferBlock>
2000186a:	60f8      	str	r0, [r7, #12]
      break;
2000186c:	e00d      	b.n	2000188a <DAP_TransferBlock+0x3a>
#endif
    default:
      *(response+0) = 0U;       // Response count [7:0]
2000186e:	683b      	ldr	r3, [r7, #0]
20001870:	2200      	movs	r2, #0
20001872:	701a      	strb	r2, [r3, #0]
      *(response+1) = 0U;       // Response count[15:8]
20001874:	683b      	ldr	r3, [r7, #0]
20001876:	3301      	adds	r3, #1
20001878:	2200      	movs	r2, #0
2000187a:	701a      	strb	r2, [r3, #0]
      *(response+2) = 0U;       // Response value
2000187c:	683b      	ldr	r3, [r7, #0]
2000187e:	3302      	adds	r3, #2
20001880:	2200      	movs	r2, #0
20001882:	701a      	strb	r2, [r3, #0]
      num = 3U;
20001884:	2303      	movs	r3, #3
20001886:	60fb      	str	r3, [r7, #12]
      break;
20001888:	bf00      	nop
  }

  if ((*(request+3) & DAP_TRANSFER_RnW) != 0U) {
2000188a:	687b      	ldr	r3, [r7, #4]
2000188c:	3303      	adds	r3, #3
2000188e:	781b      	ldrb	r3, [r3, #0]
20001890:	f003 0302 	and.w	r3, r3, #2
20001894:	2b00      	cmp	r3, #0
20001896:	d004      	beq.n	200018a2 <DAP_TransferBlock+0x52>
    // Read register block
    num |=  4U << 16;
20001898:	68fb      	ldr	r3, [r7, #12]
2000189a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2000189e:	60fb      	str	r3, [r7, #12]
200018a0:	e00e      	b.n	200018c0 <DAP_TransferBlock+0x70>
  } else {
    // Write register block
    num |= (4U + (((uint32_t)(*(request+1)) | (uint32_t)(*(request+2) << 8)) * 4)) << 16;
200018a2:	687b      	ldr	r3, [r7, #4]
200018a4:	3301      	adds	r3, #1
200018a6:	781b      	ldrb	r3, [r3, #0]
200018a8:	461a      	mov	r2, r3
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	3302      	adds	r3, #2
200018ae:	781b      	ldrb	r3, [r3, #0]
200018b0:	021b      	lsls	r3, r3, #8
200018b2:	4313      	orrs	r3, r2
200018b4:	3301      	adds	r3, #1
200018b6:	009b      	lsls	r3, r3, #2
200018b8:	041b      	lsls	r3, r3, #16
200018ba:	68fa      	ldr	r2, [r7, #12]
200018bc:	4313      	orrs	r3, r2
200018be:	60fb      	str	r3, [r7, #12]
  }

  return (num);
200018c0:	68fb      	ldr	r3, [r7, #12]
}
200018c2:	4618      	mov	r0, r3
200018c4:	3710      	adds	r7, #16
200018c6:	46bd      	mov	sp, r7
200018c8:	bd80      	pop	{r7, pc}
200018ca:	bf00      	nop
200018cc:	2000c770 	.word	0x2000c770

200018d0 <DAP_JTAG_WriteAbort>:
// Process JTAG Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_WriteAbort(const uint8_t *request, uint8_t *response) {
200018d0:	b580      	push	{r7, lr}
200018d2:	b084      	sub	sp, #16
200018d4:	af00      	add	r7, sp, #0
200018d6:	6078      	str	r0, [r7, #4]
200018d8:	6039      	str	r1, [r7, #0]
  uint32_t data;

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
200018da:	687b      	ldr	r3, [r7, #4]
200018dc:	781a      	ldrb	r2, [r3, #0]
200018de:	4b17      	ldr	r3, [pc, #92]	@ (2000193c <DAP_JTAG_WriteAbort+0x6c>)
200018e0:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
200018e2:	4b16      	ldr	r3, [pc, #88]	@ (2000193c <DAP_JTAG_WriteAbort+0x6c>)
200018e4:	7e5a      	ldrb	r2, [r3, #25]
200018e6:	4b15      	ldr	r3, [pc, #84]	@ (2000193c <DAP_JTAG_WriteAbort+0x6c>)
200018e8:	7e1b      	ldrb	r3, [r3, #24]
200018ea:	429a      	cmp	r2, r3
200018ec:	d304      	bcc.n	200018f8 <DAP_JTAG_WriteAbort+0x28>
    *response = DAP_ERROR;
200018ee:	683b      	ldr	r3, [r7, #0]
200018f0:	22ff      	movs	r2, #255	@ 0xff
200018f2:	701a      	strb	r2, [r3, #0]
    return (1U);
200018f4:	2301      	movs	r3, #1
200018f6:	e01d      	b.n	20001934 <DAP_JTAG_WriteAbort+0x64>
  }

  // Select JTAG chain
  JTAG_IR(JTAG_ABORT);
200018f8:	2008      	movs	r0, #8
200018fa:	f001 fdcb 	bl	20003494 <JTAG_IR>

  // Load data
  data = (uint32_t)(*(request+1) <<  0) |
200018fe:	687b      	ldr	r3, [r7, #4]
20001900:	3301      	adds	r3, #1
20001902:	781b      	ldrb	r3, [r3, #0]
20001904:	461a      	mov	r2, r3
         (uint32_t)(*(request+2) <<  8) |
20001906:	687b      	ldr	r3, [r7, #4]
20001908:	3302      	adds	r3, #2
2000190a:	781b      	ldrb	r3, [r3, #0]
2000190c:	021b      	lsls	r3, r3, #8
  data = (uint32_t)(*(request+1) <<  0) |
2000190e:	431a      	orrs	r2, r3
         (uint32_t)(*(request+3) << 16) |
20001910:	687b      	ldr	r3, [r7, #4]
20001912:	3303      	adds	r3, #3
20001914:	781b      	ldrb	r3, [r3, #0]
20001916:	041b      	lsls	r3, r3, #16
         (uint32_t)(*(request+2) <<  8) |
20001918:	431a      	orrs	r2, r3
         (uint32_t)(*(request+4) << 24);
2000191a:	687b      	ldr	r3, [r7, #4]
2000191c:	3304      	adds	r3, #4
2000191e:	781b      	ldrb	r3, [r3, #0]
20001920:	061b      	lsls	r3, r3, #24
  data = (uint32_t)(*(request+1) <<  0) |
20001922:	4313      	orrs	r3, r2
20001924:	60fb      	str	r3, [r7, #12]

  // Write Abort register
  JTAG_WriteAbort(data);
20001926:	68f8      	ldr	r0, [r7, #12]
20001928:	f001 fc4c 	bl	200031c4 <JTAG_WriteAbort>

  *response = DAP_OK;
2000192c:	683b      	ldr	r3, [r7, #0]
2000192e:	2200      	movs	r2, #0
20001930:	701a      	strb	r2, [r3, #0]
  return (1U);
20001932:	2301      	movs	r3, #1
}
20001934:	4618      	mov	r0, r3
20001936:	3710      	adds	r7, #16
20001938:	46bd      	mov	sp, r7
2000193a:	bd80      	pop	{r7, pc}
2000193c:	2000c770 	.word	0x2000c770

20001940 <DAP_WriteAbort>:
// Process Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_WriteAbort(const uint8_t *request, uint8_t *response) {
20001940:	b580      	push	{r7, lr}
20001942:	b084      	sub	sp, #16
20001944:	af00      	add	r7, sp, #0
20001946:	6078      	str	r0, [r7, #4]
20001948:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
2000194a:	4b0b      	ldr	r3, [pc, #44]	@ (20001978 <DAP_WriteAbort+0x38>)
2000194c:	781b      	ldrb	r3, [r3, #0]
2000194e:	2b02      	cmp	r3, #2
20001950:	d105      	bne.n	2000195e <DAP_WriteAbort+0x1e>
      num = DAP_SWD_WriteAbort (request, response);
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_WriteAbort(request, response);
20001952:	6839      	ldr	r1, [r7, #0]
20001954:	6878      	ldr	r0, [r7, #4]
20001956:	f7ff ffbb 	bl	200018d0 <DAP_JTAG_WriteAbort>
2000195a:	60f8      	str	r0, [r7, #12]
      break;
2000195c:	e005      	b.n	2000196a <DAP_WriteAbort+0x2a>
#endif
    default:
      *response = DAP_ERROR;
2000195e:	683b      	ldr	r3, [r7, #0]
20001960:	22ff      	movs	r2, #255	@ 0xff
20001962:	701a      	strb	r2, [r3, #0]
      num = 1U;
20001964:	2301      	movs	r3, #1
20001966:	60fb      	str	r3, [r7, #12]
      break;
20001968:	bf00      	nop
  }
  return ((5U << 16) | num);
2000196a:	68fb      	ldr	r3, [r7, #12]
2000196c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
}
20001970:	4618      	mov	r0, r3
20001972:	3710      	adds	r7, #16
20001974:	46bd      	mov	sp, r7
20001976:	bd80      	pop	{r7, pc}
20001978:	2000c770 	.word	0x2000c770

2000197c <DAP_ProcessCommand>:
// Process DAP command request and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
uint32_t DAP_ProcessCommand(const uint8_t *request, uint8_t *response) {
2000197c:	b580      	push	{r7, lr}
2000197e:	b084      	sub	sp, #16
20001980:	af00      	add	r7, sp, #0
20001982:	6078      	str	r0, [r7, #4]
20001984:	6039      	str	r1, [r7, #0]
  uint32_t num;

  if ((*request >= ID_DAP_Vendor0) && (*request <= ID_DAP_Vendor31)) {
20001986:	687b      	ldr	r3, [r7, #4]
20001988:	781b      	ldrb	r3, [r3, #0]
2000198a:	b25b      	sxtb	r3, r3
2000198c:	2b00      	cmp	r3, #0
2000198e:	da09      	bge.n	200019a4 <DAP_ProcessCommand+0x28>
20001990:	687b      	ldr	r3, [r7, #4]
20001992:	781b      	ldrb	r3, [r3, #0]
20001994:	2b9f      	cmp	r3, #159	@ 0x9f
20001996:	d805      	bhi.n	200019a4 <DAP_ProcessCommand+0x28>
    return DAP_ProcessVendorCommand(request, response);
20001998:	6839      	ldr	r1, [r7, #0]
2000199a:	6878      	ldr	r0, [r7, #4]
2000199c:	f000 f8d2 	bl	20001b44 <DAP_ProcessVendorCommand>
200019a0:	4603      	mov	r3, r0
200019a2:	e0cb      	b.n	20001b3c <DAP_ProcessCommand+0x1c0>
  }

  *response++ = *request;
200019a4:	683b      	ldr	r3, [r7, #0]
200019a6:	1c5a      	adds	r2, r3, #1
200019a8:	603a      	str	r2, [r7, #0]
200019aa:	687a      	ldr	r2, [r7, #4]
200019ac:	7812      	ldrb	r2, [r2, #0]
200019ae:	701a      	strb	r2, [r3, #0]

  switch (*request++) {
200019b0:	687b      	ldr	r3, [r7, #4]
200019b2:	1c5a      	adds	r2, r3, #1
200019b4:	607a      	str	r2, [r7, #4]
200019b6:	781b      	ldrb	r3, [r3, #0]
200019b8:	2b1d      	cmp	r3, #29
200019ba:	f200 80b5 	bhi.w	20001b28 <DAP_ProcessCommand+0x1ac>
200019be:	a201      	add	r2, pc, #4	@ (adr r2, 200019c4 <DAP_ProcessCommand+0x48>)
200019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200019c4:	20001a3d 	.word	0x20001a3d
200019c8:	20001a61 	.word	0x20001a61
200019cc:	20001a6d 	.word	0x20001a6d
200019d0:	20001a79 	.word	0x20001a79
200019d4:	20001af9 	.word	0x20001af9
200019d8:	20001b05 	.word	0x20001b05
200019dc:	20001b11 	.word	0x20001b11
200019e0:	20001b29 	.word	0x20001b29
200019e4:	20001b1d 	.word	0x20001b1d
200019e8:	20001a83 	.word	0x20001a83
200019ec:	20001a8f 	.word	0x20001a8f
200019f0:	20001b29 	.word	0x20001b29
200019f4:	20001b29 	.word	0x20001b29
200019f8:	20001b29 	.word	0x20001b29
200019fc:	20001b29 	.word	0x20001b29
20001a00:	20001b29 	.word	0x20001b29
20001a04:	20001a99 	.word	0x20001a99
20001a08:	20001aa5 	.word	0x20001aa5
20001a0c:	20001ab1 	.word	0x20001ab1
20001a10:	20001abd 	.word	0x20001abd
20001a14:	20001ad5 	.word	0x20001ad5
20001a18:	20001ae1 	.word	0x20001ae1
20001a1c:	20001aed 	.word	0x20001aed
20001a20:	20001b29 	.word	0x20001b29
20001a24:	20001b29 	.word	0x20001b29
20001a28:	20001b29 	.word	0x20001b29
20001a2c:	20001b29 	.word	0x20001b29
20001a30:	20001b29 	.word	0x20001b29
20001a34:	20001b29 	.word	0x20001b29
20001a38:	20001ac9 	.word	0x20001ac9
    case ID_DAP_Info:
      num = DAP_Info(*request, response+1);
20001a3c:	687b      	ldr	r3, [r7, #4]
20001a3e:	781a      	ldrb	r2, [r3, #0]
20001a40:	683b      	ldr	r3, [r7, #0]
20001a42:	3301      	adds	r3, #1
20001a44:	4619      	mov	r1, r3
20001a46:	4610      	mov	r0, r2
20001a48:	f7fe fe96 	bl	20000778 <DAP_Info>
20001a4c:	4603      	mov	r3, r0
20001a4e:	60fb      	str	r3, [r7, #12]
      *response = (uint8_t)num;
20001a50:	68fb      	ldr	r3, [r7, #12]
20001a52:	b2da      	uxtb	r2, r3
20001a54:	683b      	ldr	r3, [r7, #0]
20001a56:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) + 2U + num);
20001a58:	68fb      	ldr	r3, [r7, #12]
20001a5a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
20001a5e:	e06d      	b.n	20001b3c <DAP_ProcessCommand+0x1c0>

    case ID_DAP_HostStatus:
      num = DAP_HostStatus(request, response);
20001a60:	6839      	ldr	r1, [r7, #0]
20001a62:	6878      	ldr	r0, [r7, #4]
20001a64:	f7fe ff70 	bl	20000948 <DAP_HostStatus>
20001a68:	60f8      	str	r0, [r7, #12]
      break;
20001a6a:	e064      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Connect:
      num = DAP_Connect(request, response);
20001a6c:	6839      	ldr	r1, [r7, #0]
20001a6e:	6878      	ldr	r0, [r7, #4]
20001a70:	f7fe ff98 	bl	200009a4 <DAP_Connect>
20001a74:	60f8      	str	r0, [r7, #12]
      break;
20001a76:	e05e      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Disconnect:
      num = DAP_Disconnect(response);
20001a78:	6838      	ldr	r0, [r7, #0]
20001a7a:	f7fe ffbb 	bl	200009f4 <DAP_Disconnect>
20001a7e:	60f8      	str	r0, [r7, #12]
      break;
20001a80:	e059      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Delay:
      num = DAP_Delay(request, response);
20001a82:	6839      	ldr	r1, [r7, #0]
20001a84:	6878      	ldr	r0, [r7, #4]
20001a86:	f7fe ff37 	bl	200008f8 <DAP_Delay>
20001a8a:	60f8      	str	r0, [r7, #12]
      break;
20001a8c:	e053      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_ResetTarget:
      num = DAP_ResetTarget(response);
20001a8e:	6838      	ldr	r0, [r7, #0]
20001a90:	f7fe ffc4 	bl	20000a1c <DAP_ResetTarget>
20001a94:	60f8      	str	r0, [r7, #12]
      break;
20001a96:	e04e      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWJ_Pins:
      num = DAP_SWJ_Pins(request, response);
20001a98:	6839      	ldr	r1, [r7, #0]
20001a9a:	6878      	ldr	r0, [r7, #4]
20001a9c:	f7fe ffd0 	bl	20000a40 <DAP_SWJ_Pins>
20001aa0:	60f8      	str	r0, [r7, #12]
      break;
20001aa2:	e048      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Clock:
      num = DAP_SWJ_Clock(request, response);
20001aa4:	6839      	ldr	r1, [r7, #0]
20001aa6:	6878      	ldr	r0, [r7, #4]
20001aa8:	f7ff f8ae 	bl	20000c08 <DAP_SWJ_Clock>
20001aac:	60f8      	str	r0, [r7, #12]
      break;
20001aae:	e042      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Sequence:
      num = DAP_SWJ_Sequence(request, response);
20001ab0:	6839      	ldr	r1, [r7, #0]
20001ab2:	6878      	ldr	r0, [r7, #4]
20001ab4:	f7ff f8d6 	bl	20000c64 <DAP_SWJ_Sequence>
20001ab8:	60f8      	str	r0, [r7, #12]
      break;
20001aba:	e03c      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWD_Configure:
      num = DAP_SWD_Configure(request, response);
20001abc:	6839      	ldr	r1, [r7, #0]
20001abe:	6878      	ldr	r0, [r7, #4]
20001ac0:	f7ff f8f4 	bl	20000cac <DAP_SWD_Configure>
20001ac4:	60f8      	str	r0, [r7, #12]
      break;
20001ac6:	e036      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWD_Sequence:
      num = DAP_SWD_Sequence(request, response);
20001ac8:	6839      	ldr	r1, [r7, #0]
20001aca:	6878      	ldr	r0, [r7, #4]
20001acc:	f7ff f8fe 	bl	20000ccc <DAP_SWD_Sequence>
20001ad0:	60f8      	str	r0, [r7, #12]
      break;
20001ad2:	e030      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_JTAG_Sequence:
      num = DAP_JTAG_Sequence(request, response);
20001ad4:	6839      	ldr	r1, [r7, #0]
20001ad6:	6878      	ldr	r0, [r7, #4]
20001ad8:	f7ff f93f 	bl	20000d5a <DAP_JTAG_Sequence>
20001adc:	60f8      	str	r0, [r7, #12]
      break;
20001ade:	e02a      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_Configure:
      num = DAP_JTAG_Configure(request, response);
20001ae0:	6839      	ldr	r1, [r7, #0]
20001ae2:	6878      	ldr	r0, [r7, #4]
20001ae4:	f7ff f95c 	bl	20000da0 <DAP_JTAG_Configure>
20001ae8:	60f8      	str	r0, [r7, #12]
      break;
20001aea:	e024      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_IDCODE:
      num = DAP_JTAG_IDCode(request, response);
20001aec:	6839      	ldr	r1, [r7, #0]
20001aee:	6878      	ldr	r0, [r7, #4]
20001af0:	f7ff f9b6 	bl	20000e60 <DAP_JTAG_IDCode>
20001af4:	60f8      	str	r0, [r7, #12]
      break;
20001af6:	e01e      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_TransferConfigure:
      num = DAP_TransferConfigure(request, response);
20001af8:	6839      	ldr	r1, [r7, #0]
20001afa:	6878      	ldr	r0, [r7, #4]
20001afc:	f7ff f9f6 	bl	20000eec <DAP_TransferConfigure>
20001b00:	60f8      	str	r0, [r7, #12]
      break;
20001b02:	e018      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Transfer:
      num = DAP_Transfer(request, response);
20001b04:	6839      	ldr	r1, [r7, #0]
20001b06:	6878      	ldr	r0, [r7, #4]
20001b08:	f7ff fd60 	bl	200015cc <DAP_Transfer>
20001b0c:	60f8      	str	r0, [r7, #12]
      break;
20001b0e:	e012      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_TransferBlock:
      num = DAP_TransferBlock(request, response);
20001b10:	6839      	ldr	r1, [r7, #0]
20001b12:	6878      	ldr	r0, [r7, #4]
20001b14:	f7ff fe9c 	bl	20001850 <DAP_TransferBlock>
20001b18:	60f8      	str	r0, [r7, #12]
      break;
20001b1a:	e00c      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_WriteABORT:
      num = DAP_WriteAbort(request, response);
20001b1c:	6839      	ldr	r1, [r7, #0]
20001b1e:	6878      	ldr	r0, [r7, #4]
20001b20:	f7ff ff0e 	bl	20001940 <DAP_WriteAbort>
20001b24:	60f8      	str	r0, [r7, #12]
      break;
20001b26:	e006      	b.n	20001b36 <DAP_ProcessCommand+0x1ba>
      num = UART_Transfer(request, response);
      break;
#endif

    default:
      *(response-1) = ID_DAP_Invalid;
20001b28:	683b      	ldr	r3, [r7, #0]
20001b2a:	3b01      	subs	r3, #1
20001b2c:	22ff      	movs	r2, #255	@ 0xff
20001b2e:	701a      	strb	r2, [r3, #0]
      return ((1U << 16) | 1U);
20001b30:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
20001b34:	e002      	b.n	20001b3c <DAP_ProcessCommand+0x1c0>
  }

  return ((1U << 16) + 1U + num);
20001b36:	68fb      	ldr	r3, [r7, #12]
20001b38:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
}
20001b3c:	4618      	mov	r0, r3
20001b3e:	3710      	adds	r7, #16
20001b40:	46bd      	mov	sp, r7
20001b42:	bd80      	pop	{r7, pc}

20001b44 <DAP_ProcessVendorCommand>:
\param request   pointer to request data
\param response  pointer to response data
\return          number of bytes in response (lower 16 bits)
                 number of bytes in request (upper 16 bits)
*/
uint32_t DAP_ProcessVendorCommand(const uint8_t *request, uint8_t *response) {
20001b44:	b480      	push	{r7}
20001b46:	b085      	sub	sp, #20
20001b48:	af00      	add	r7, sp, #0
20001b4a:	6078      	str	r0, [r7, #4]
20001b4c:	6039      	str	r1, [r7, #0]
  uint32_t num = (1U << 16) | 1U;
20001b4e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
20001b52:	60fb      	str	r3, [r7, #12]

  *response++ = *request;        // copy Command ID
20001b54:	683b      	ldr	r3, [r7, #0]
20001b56:	1c5a      	adds	r2, r3, #1
20001b58:	603a      	str	r2, [r7, #0]
20001b5a:	687a      	ldr	r2, [r7, #4]
20001b5c:	7812      	ldrb	r2, [r2, #0]
20001b5e:	701a      	strb	r2, [r3, #0]

  switch (*request++) {          // first byte in request is Command ID
20001b60:	687b      	ldr	r3, [r7, #4]
20001b62:	1c5a      	adds	r2, r3, #1
20001b64:	607a      	str	r2, [r7, #4]
20001b66:	781b      	ldrb	r3, [r3, #0]
20001b68:	3b80      	subs	r3, #128	@ 0x80
20001b6a:	2b1f      	cmp	r3, #31
20001b6c:	d842      	bhi.n	20001bf4 <DAP_ProcessVendorCommand+0xb0>
20001b6e:	a201      	add	r2, pc, #4	@ (adr r2, 20001b74 <DAP_ProcessVendorCommand+0x30>)
20001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001b74:	20001bf5 	.word	0x20001bf5
20001b78:	20001bf5 	.word	0x20001bf5
20001b7c:	20001bf5 	.word	0x20001bf5
20001b80:	20001bf5 	.word	0x20001bf5
20001b84:	20001bf5 	.word	0x20001bf5
20001b88:	20001bf5 	.word	0x20001bf5
20001b8c:	20001bf5 	.word	0x20001bf5
20001b90:	20001bf5 	.word	0x20001bf5
20001b94:	20001bf5 	.word	0x20001bf5
20001b98:	20001bf5 	.word	0x20001bf5
20001b9c:	20001bf5 	.word	0x20001bf5
20001ba0:	20001bf5 	.word	0x20001bf5
20001ba4:	20001bf5 	.word	0x20001bf5
20001ba8:	20001bf5 	.word	0x20001bf5
20001bac:	20001bf5 	.word	0x20001bf5
20001bb0:	20001bf5 	.word	0x20001bf5
20001bb4:	20001bf5 	.word	0x20001bf5
20001bb8:	20001bf5 	.word	0x20001bf5
20001bbc:	20001bf5 	.word	0x20001bf5
20001bc0:	20001bf5 	.word	0x20001bf5
20001bc4:	20001bf5 	.word	0x20001bf5
20001bc8:	20001bf5 	.word	0x20001bf5
20001bcc:	20001bf5 	.word	0x20001bf5
20001bd0:	20001bf5 	.word	0x20001bf5
20001bd4:	20001bf5 	.word	0x20001bf5
20001bd8:	20001bf5 	.word	0x20001bf5
20001bdc:	20001bf5 	.word	0x20001bf5
20001be0:	20001bf5 	.word	0x20001bf5
20001be4:	20001bf5 	.word	0x20001bf5
20001be8:	20001bf5 	.word	0x20001bf5
20001bec:	20001bf5 	.word	0x20001bf5
20001bf0:	20001bf5 	.word	0x20001bf5
    case ID_DAP_Vendor29: break;
    case ID_DAP_Vendor30: break;
    case ID_DAP_Vendor31: break;
  }

  return (num);
20001bf4:	68fb      	ldr	r3, [r7, #12]
}
20001bf6:	4618      	mov	r0, r3
20001bf8:	3714      	adds	r7, #20
20001bfa:	46bd      	mov	sp, r7
20001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c00:	4770      	bx	lr
20001c02:	bf00      	nop

20001c04 <PIN_SWCLK_TCK_SET>:
static void     PIN_SWCLK_TCK_SET (void) {
20001c04:	b480      	push	{r7}
20001c06:	af00      	add	r7, sp, #0
}
20001c08:	bf00      	nop
20001c0a:	46bd      	mov	sp, r7
20001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c10:	4770      	bx	lr

20001c12 <PIN_SWCLK_TCK_CLR>:
static void     PIN_SWCLK_TCK_CLR (void) {
20001c12:	b480      	push	{r7}
20001c14:	af00      	add	r7, sp, #0
}
20001c16:	bf00      	nop
20001c18:	46bd      	mov	sp, r7
20001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c1e:	4770      	bx	lr

20001c20 <PIN_SWDIO_TMS_SET>:
static void     PIN_SWDIO_TMS_SET (void) {
20001c20:	b580      	push	{r7, lr}
20001c22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20001c24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20001c28:	4802      	ldr	r0, [pc, #8]	@ (20001c34 <PIN_SWDIO_TMS_SET+0x14>)
20001c2a:	f003 fa36 	bl	2000509a <HAL_GPIO_TogglePin>
}
20001c2e:	bf00      	nop
20001c30:	bd80      	pop	{r7, pc}
20001c32:	bf00      	nop
20001c34:	40020400 	.word	0x40020400

20001c38 <PIN_SWDIO_TMS_CLR>:
static void     PIN_SWDIO_TMS_CLR (void) {
20001c38:	b580      	push	{r7, lr}
20001c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20001c3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20001c40:	4802      	ldr	r0, [pc, #8]	@ (20001c4c <PIN_SWDIO_TMS_CLR+0x14>)
20001c42:	f003 fa2a 	bl	2000509a <HAL_GPIO_TogglePin>
}
20001c46:	bf00      	nop
20001c48:	bd80      	pop	{r7, pc}
20001c4a:	bf00      	nop
20001c4c:	40020400 	.word	0x40020400

20001c50 <PIN_TDI_OUT>:
static void     PIN_TDI_OUT (uint32_t bit) {
20001c50:	b480      	push	{r7}
20001c52:	b083      	sub	sp, #12
20001c54:	af00      	add	r7, sp, #0
20001c56:	6078      	str	r0, [r7, #4]
}
20001c58:	bf00      	nop
20001c5a:	370c      	adds	r7, #12
20001c5c:	46bd      	mov	sp, r7
20001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c62:	4770      	bx	lr

20001c64 <PIN_TDO_IN>:
static uint32_t PIN_TDO_IN  (void) {
20001c64:	b480      	push	{r7}
20001c66:	af00      	add	r7, sp, #0
  return (0U);
20001c68:	2300      	movs	r3, #0
}
20001c6a:	4618      	mov	r0, r3
20001c6c:	46bd      	mov	sp, r7
20001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c72:	4770      	bx	lr

20001c74 <TIMESTAMP_GET>:
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
20001c74:	b480      	push	{r7}
20001c76:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20001c78:	4b03      	ldr	r3, [pc, #12]	@ (20001c88 <TIMESTAMP_GET+0x14>)
20001c7a:	685b      	ldr	r3, [r3, #4]
}
20001c7c:	4618      	mov	r0, r3
20001c7e:	46bd      	mov	sp, r7
20001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c84:	4770      	bx	lr
20001c86:	bf00      	nop
20001c88:	e0001000 	.word	0xe0001000

20001c8c <copy_bits_lsb>:
void SPI_TMS_Transfer(uint64_t data, uint8_t bits);

void copy_bits_lsb(const uint8_t *src, uint32_t srcBitIndex,
                   uint32_t bitLen,
                   uint8_t *dst, uint32_t dstBitIndex)
{
20001c8c:	b480      	push	{r7}
20001c8e:	b08b      	sub	sp, #44	@ 0x2c
20001c90:	af00      	add	r7, sp, #0
20001c92:	60f8      	str	r0, [r7, #12]
20001c94:	60b9      	str	r1, [r7, #8]
20001c96:	607a      	str	r2, [r7, #4]
20001c98:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < bitLen; i++)
20001c9a:	2300      	movs	r3, #0
20001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
20001c9e:	e046      	b.n	20001d2e <copy_bits_lsb+0xa2>
    {
        // Locate the bit in the source
        uint32_t sByte = (srcBitIndex + i) / 8;
20001ca0:	68ba      	ldr	r2, [r7, #8]
20001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001ca4:	4413      	add	r3, r2
20001ca6:	08db      	lsrs	r3, r3, #3
20001ca8:	623b      	str	r3, [r7, #32]
        uint32_t sBit  = (srcBitIndex + i) % 8; // LSB-first
20001caa:	68ba      	ldr	r2, [r7, #8]
20001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001cae:	4413      	add	r3, r2
20001cb0:	f003 0307 	and.w	r3, r3, #7
20001cb4:	61fb      	str	r3, [r7, #28]
        uint8_t  bit   = (src[sByte] >> sBit) & 1;
20001cb6:	68fa      	ldr	r2, [r7, #12]
20001cb8:	6a3b      	ldr	r3, [r7, #32]
20001cba:	4413      	add	r3, r2
20001cbc:	781b      	ldrb	r3, [r3, #0]
20001cbe:	461a      	mov	r2, r3
20001cc0:	69fb      	ldr	r3, [r7, #28]
20001cc2:	fa42 f303 	asr.w	r3, r2, r3
20001cc6:	b2db      	uxtb	r3, r3
20001cc8:	f003 0301 	and.w	r3, r3, #1
20001ccc:	76fb      	strb	r3, [r7, #27]

        // Locate where to put it in the destination
        uint32_t dByte = (dstBitIndex + i) / 8;
20001cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001cd2:	4413      	add	r3, r2
20001cd4:	08db      	lsrs	r3, r3, #3
20001cd6:	617b      	str	r3, [r7, #20]
        uint32_t dBit  = (dstBitIndex + i) % 8; // LSB-first
20001cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001cdc:	4413      	add	r3, r2
20001cde:	f003 0307 	and.w	r3, r3, #7
20001ce2:	613b      	str	r3, [r7, #16]

        // Clear and set the destination bit
        dst[dByte] &= ~(1U << dBit);
20001ce4:	683a      	ldr	r2, [r7, #0]
20001ce6:	697b      	ldr	r3, [r7, #20]
20001ce8:	4413      	add	r3, r2
20001cea:	7819      	ldrb	r1, [r3, #0]
20001cec:	2201      	movs	r2, #1
20001cee:	693b      	ldr	r3, [r7, #16]
20001cf0:	fa02 f303 	lsl.w	r3, r2, r3
20001cf4:	b2db      	uxtb	r3, r3
20001cf6:	43db      	mvns	r3, r3
20001cf8:	b2da      	uxtb	r2, r3
20001cfa:	6838      	ldr	r0, [r7, #0]
20001cfc:	697b      	ldr	r3, [r7, #20]
20001cfe:	4403      	add	r3, r0
20001d00:	400a      	ands	r2, r1
20001d02:	b2d2      	uxtb	r2, r2
20001d04:	701a      	strb	r2, [r3, #0]
        dst[dByte] |=  (bit << dBit);
20001d06:	683a      	ldr	r2, [r7, #0]
20001d08:	697b      	ldr	r3, [r7, #20]
20001d0a:	4413      	add	r3, r2
20001d0c:	781b      	ldrb	r3, [r3, #0]
20001d0e:	b25a      	sxtb	r2, r3
20001d10:	7ef9      	ldrb	r1, [r7, #27]
20001d12:	693b      	ldr	r3, [r7, #16]
20001d14:	fa01 f303 	lsl.w	r3, r1, r3
20001d18:	b25b      	sxtb	r3, r3
20001d1a:	4313      	orrs	r3, r2
20001d1c:	b259      	sxtb	r1, r3
20001d1e:	683a      	ldr	r2, [r7, #0]
20001d20:	697b      	ldr	r3, [r7, #20]
20001d22:	4413      	add	r3, r2
20001d24:	b2ca      	uxtb	r2, r1
20001d26:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < bitLen; i++)
20001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001d2a:	3301      	adds	r3, #1
20001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
20001d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001d30:	687b      	ldr	r3, [r7, #4]
20001d32:	429a      	cmp	r2, r3
20001d34:	d3b4      	bcc.n	20001ca0 <copy_bits_lsb+0x14>
    }
}
20001d36:	bf00      	nop
20001d38:	bf00      	nop
20001d3a:	372c      	adds	r7, #44	@ 0x2c
20001d3c:	46bd      	mov	sp, r7
20001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d42:	4770      	bx	lr

20001d44 <extract_nbits_lsb>:


// Extracts 8 bits from a uint8_t array (LSB-first), starting at `bit_index`
// Returns the extracted bits right-aligned
// Extract up to 16 bits from a bitstream (LSB-first)
uint16_t extract_nbits_lsb(const uint8_t *buf, size_t bit_offset, size_t n) {
20001d44:	b480      	push	{r7}
20001d46:	b089      	sub	sp, #36	@ 0x24
20001d48:	af00      	add	r7, sp, #0
20001d4a:	60f8      	str	r0, [r7, #12]
20001d4c:	60b9      	str	r1, [r7, #8]
20001d4e:	607a      	str	r2, [r7, #4]
    if (n == 0 || n > 16) return 0;
20001d50:	687b      	ldr	r3, [r7, #4]
20001d52:	2b00      	cmp	r3, #0
20001d54:	d002      	beq.n	20001d5c <extract_nbits_lsb+0x18>
20001d56:	687b      	ldr	r3, [r7, #4]
20001d58:	2b10      	cmp	r3, #16
20001d5a:	d901      	bls.n	20001d60 <extract_nbits_lsb+0x1c>
20001d5c:	2300      	movs	r3, #0
20001d5e:	e029      	b.n	20001db4 <extract_nbits_lsb+0x70>

    size_t byte_offset = bit_offset / 8;
20001d60:	68bb      	ldr	r3, [r7, #8]
20001d62:	08db      	lsrs	r3, r3, #3
20001d64:	61fb      	str	r3, [r7, #28]
    size_t bit_in_byte = bit_offset % 8;
20001d66:	68bb      	ldr	r3, [r7, #8]
20001d68:	f003 0307 	and.w	r3, r3, #7
20001d6c:	61bb      	str	r3, [r7, #24]

    // Read 3 bytes to cover the worst case (bits span across 3 bytes)
    uint32_t temp = buf[byte_offset] |
20001d6e:	68fa      	ldr	r2, [r7, #12]
20001d70:	69fb      	ldr	r3, [r7, #28]
20001d72:	4413      	add	r3, r2
20001d74:	781b      	ldrb	r3, [r3, #0]
20001d76:	4619      	mov	r1, r3
                   ((uint32_t)buf[byte_offset + 1] << 8) |
20001d78:	69fb      	ldr	r3, [r7, #28]
20001d7a:	3301      	adds	r3, #1
20001d7c:	68fa      	ldr	r2, [r7, #12]
20001d7e:	4413      	add	r3, r2
20001d80:	781b      	ldrb	r3, [r3, #0]
20001d82:	021b      	lsls	r3, r3, #8
    uint32_t temp = buf[byte_offset] |
20001d84:	ea41 0203 	orr.w	r2, r1, r3
                   ((uint32_t)buf[byte_offset + 2] << 16);
20001d88:	69fb      	ldr	r3, [r7, #28]
20001d8a:	3302      	adds	r3, #2
20001d8c:	68f9      	ldr	r1, [r7, #12]
20001d8e:	440b      	add	r3, r1
20001d90:	781b      	ldrb	r3, [r3, #0]
20001d92:	041b      	lsls	r3, r3, #16
    uint32_t temp = buf[byte_offset] |
20001d94:	4313      	orrs	r3, r2
20001d96:	617b      	str	r3, [r7, #20]

    // Right shift to the relevant bit, then mask
    return (temp >> bit_in_byte) & ((1U << n) - 1);
20001d98:	697a      	ldr	r2, [r7, #20]
20001d9a:	69bb      	ldr	r3, [r7, #24]
20001d9c:	fa22 f303 	lsr.w	r3, r2, r3
20001da0:	b29a      	uxth	r2, r3
20001da2:	2101      	movs	r1, #1
20001da4:	687b      	ldr	r3, [r7, #4]
20001da6:	fa01 f303 	lsl.w	r3, r1, r3
20001daa:	b29b      	uxth	r3, r3
20001dac:	3b01      	subs	r3, #1
20001dae:	b29b      	uxth	r3, r3
20001db0:	4013      	ands	r3, r2
20001db2:	b29b      	uxth	r3, r3
}
20001db4:	4618      	mov	r0, r3
20001db6:	3724      	adds	r7, #36	@ 0x24
20001db8:	46bd      	mov	sp, r7
20001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
20001dbe:	4770      	bx	lr

20001dc0 <write_nbits_lsb>:
    // Store back
    dst[byte_index] = window & 0xFF;
    dst[byte_index + 1] = (window >> 8) & 0xFF;
}
#endif
void write_nbits_lsb(uint8_t *buf, size_t bit_offset, size_t n, uint16_t value) {
20001dc0:	b480      	push	{r7}
20001dc2:	b089      	sub	sp, #36	@ 0x24
20001dc4:	af00      	add	r7, sp, #0
20001dc6:	60f8      	str	r0, [r7, #12]
20001dc8:	60b9      	str	r1, [r7, #8]
20001dca:	607a      	str	r2, [r7, #4]
20001dcc:	807b      	strh	r3, [r7, #2]
    if (n == 0 || n > 16) return;
20001dce:	687b      	ldr	r3, [r7, #4]
20001dd0:	2b00      	cmp	r3, #0
20001dd2:	d04f      	beq.n	20001e74 <write_nbits_lsb+0xb4>
20001dd4:	687b      	ldr	r3, [r7, #4]
20001dd6:	2b10      	cmp	r3, #16
20001dd8:	d84c      	bhi.n	20001e74 <write_nbits_lsb+0xb4>

    size_t byte_offset = bit_offset / 8;
20001dda:	68bb      	ldr	r3, [r7, #8]
20001ddc:	08db      	lsrs	r3, r3, #3
20001dde:	61fb      	str	r3, [r7, #28]
    size_t bit_in_byte = bit_offset % 8;
20001de0:	68bb      	ldr	r3, [r7, #8]
20001de2:	f003 0307 	and.w	r3, r3, #7
20001de6:	61bb      	str	r3, [r7, #24]

    // Read 3 bytes to cover the worst case (spanning across 3 bytes)
    uint32_t temp = buf[byte_offset] |
20001de8:	68fa      	ldr	r2, [r7, #12]
20001dea:	69fb      	ldr	r3, [r7, #28]
20001dec:	4413      	add	r3, r2
20001dee:	781b      	ldrb	r3, [r3, #0]
20001df0:	4619      	mov	r1, r3
                   ((uint32_t)buf[byte_offset + 1] << 8) |
20001df2:	69fb      	ldr	r3, [r7, #28]
20001df4:	3301      	adds	r3, #1
20001df6:	68fa      	ldr	r2, [r7, #12]
20001df8:	4413      	add	r3, r2
20001dfa:	781b      	ldrb	r3, [r3, #0]
20001dfc:	021b      	lsls	r3, r3, #8
    uint32_t temp = buf[byte_offset] |
20001dfe:	ea41 0203 	orr.w	r2, r1, r3
                   ((uint32_t)buf[byte_offset + 2] << 16);
20001e02:	69fb      	ldr	r3, [r7, #28]
20001e04:	3302      	adds	r3, #2
20001e06:	68f9      	ldr	r1, [r7, #12]
20001e08:	440b      	add	r3, r1
20001e0a:	781b      	ldrb	r3, [r3, #0]
20001e0c:	041b      	lsls	r3, r3, #16
    uint32_t temp = buf[byte_offset] |
20001e0e:	4313      	orrs	r3, r2
20001e10:	617b      	str	r3, [r7, #20]

    // Mask and insert new value
    uint32_t mask = ((1U << n) - 1U) << bit_in_byte;
20001e12:	2201      	movs	r2, #1
20001e14:	687b      	ldr	r3, [r7, #4]
20001e16:	fa02 f303 	lsl.w	r3, r2, r3
20001e1a:	1e5a      	subs	r2, r3, #1
20001e1c:	69bb      	ldr	r3, [r7, #24]
20001e1e:	fa02 f303 	lsl.w	r3, r2, r3
20001e22:	613b      	str	r3, [r7, #16]
    temp = (temp & ~mask) | (((uint32_t)(value & ((1U << n) - 1))) << bit_in_byte);
20001e24:	693b      	ldr	r3, [r7, #16]
20001e26:	43da      	mvns	r2, r3
20001e28:	697b      	ldr	r3, [r7, #20]
20001e2a:	401a      	ands	r2, r3
20001e2c:	8879      	ldrh	r1, [r7, #2]
20001e2e:	f04f 30ff 	mov.w	r0, #4294967295
20001e32:	687b      	ldr	r3, [r7, #4]
20001e34:	fa00 f303 	lsl.w	r3, r0, r3
20001e38:	43db      	mvns	r3, r3
20001e3a:	4019      	ands	r1, r3
20001e3c:	69bb      	ldr	r3, [r7, #24]
20001e3e:	fa01 f303 	lsl.w	r3, r1, r3
20001e42:	4313      	orrs	r3, r2
20001e44:	617b      	str	r3, [r7, #20]

    // Write the result back
    buf[byte_offset]     = temp & 0xFF;
20001e46:	68fa      	ldr	r2, [r7, #12]
20001e48:	69fb      	ldr	r3, [r7, #28]
20001e4a:	4413      	add	r3, r2
20001e4c:	697a      	ldr	r2, [r7, #20]
20001e4e:	b2d2      	uxtb	r2, r2
20001e50:	701a      	strb	r2, [r3, #0]
    buf[byte_offset + 1] = (temp >> 8) & 0xFF;
20001e52:	697b      	ldr	r3, [r7, #20]
20001e54:	0a19      	lsrs	r1, r3, #8
20001e56:	69fb      	ldr	r3, [r7, #28]
20001e58:	3301      	adds	r3, #1
20001e5a:	68fa      	ldr	r2, [r7, #12]
20001e5c:	4413      	add	r3, r2
20001e5e:	b2ca      	uxtb	r2, r1
20001e60:	701a      	strb	r2, [r3, #0]
    buf[byte_offset + 2] = (temp >> 16) & 0xFF;
20001e62:	697b      	ldr	r3, [r7, #20]
20001e64:	0c19      	lsrs	r1, r3, #16
20001e66:	69fb      	ldr	r3, [r7, #28]
20001e68:	3302      	adds	r3, #2
20001e6a:	68fa      	ldr	r2, [r7, #12]
20001e6c:	4413      	add	r3, r2
20001e6e:	b2ca      	uxtb	r2, r1
20001e70:	701a      	strb	r2, [r3, #0]
20001e72:	e000      	b.n	20001e76 <write_nbits_lsb+0xb6>
    if (n == 0 || n > 16) return;
20001e74:	bf00      	nop
}
20001e76:	3724      	adds	r7, #36	@ 0x24
20001e78:	46bd      	mov	sp, r7
20001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e7e:	4770      	bx	lr

20001e80 <fill_tms_buffer>:

void fill_tms_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t tms_val)
{
20001e80:	b580      	push	{r7, lr}
20001e82:	b084      	sub	sp, #16
20001e84:	af00      	add	r7, sp, #0
20001e86:	60f8      	str	r0, [r7, #12]
20001e88:	60b9      	str	r1, [r7, #8]
20001e8a:	4613      	mov	r3, r2
20001e8c:	71fb      	strb	r3, [r7, #7]
	//TODO: optimize here!!
	while(n)
20001e8e:	e01d      	b.n	20001ecc <fill_tms_buffer+0x4c>
	{
		if(n > 8)
20001e90:	68bb      	ldr	r3, [r7, #8]
20001e92:	2b08      	cmp	r3, #8
20001e94:	d912      	bls.n	20001ebc <fill_tms_buffer+0x3c>
		{
			if(tms_val)
20001e96:	79fb      	ldrb	r3, [r7, #7]
20001e98:	2b00      	cmp	r3, #0
20001e9a:	d00b      	beq.n	20001eb4 <fill_tms_buffer+0x34>
			{
				tms_val = 0xFF;
20001e9c:	23ff      	movs	r3, #255	@ 0xff
20001e9e:	71fb      	strb	r3, [r7, #7]
				write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, 8, tms_val);
20001ea0:	79fb      	ldrb	r3, [r7, #7]
20001ea2:	b29b      	uxth	r3, r3
20001ea4:	2208      	movs	r2, #8
20001ea6:	68f9      	ldr	r1, [r7, #12]
20001ea8:	480c      	ldr	r0, [pc, #48]	@ (20001edc <fill_tms_buffer+0x5c>)
20001eaa:	f7ff ff89 	bl	20001dc0 <write_nbits_lsb>
				total_write_bit_cnt += 8;
20001eae:	68fb      	ldr	r3, [r7, #12]
20001eb0:	3308      	adds	r3, #8
20001eb2:	60fb      	str	r3, [r7, #12]
			}

			n -= 8;
20001eb4:	68bb      	ldr	r3, [r7, #8]
20001eb6:	3b08      	subs	r3, #8
20001eb8:	60bb      	str	r3, [r7, #8]
20001eba:	e007      	b.n	20001ecc <fill_tms_buffer+0x4c>
		}
		else
		{
			write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, n, tms_val);
20001ebc:	79fb      	ldrb	r3, [r7, #7]
20001ebe:	b29b      	uxth	r3, r3
20001ec0:	68ba      	ldr	r2, [r7, #8]
20001ec2:	68f9      	ldr	r1, [r7, #12]
20001ec4:	4805      	ldr	r0, [pc, #20]	@ (20001edc <fill_tms_buffer+0x5c>)
20001ec6:	f7ff ff7b 	bl	20001dc0 <write_nbits_lsb>
			break;
20001eca:	e003      	b.n	20001ed4 <fill_tms_buffer+0x54>
	while(n)
20001ecc:	68bb      	ldr	r3, [r7, #8]
20001ece:	2b00      	cmp	r3, #0
20001ed0:	d1de      	bne.n	20001e90 <fill_tms_buffer+0x10>
		}

	}
}
20001ed2:	bf00      	nop
20001ed4:	bf00      	nop
20001ed6:	3710      	adds	r7, #16
20001ed8:	46bd      	mov	sp, r7
20001eda:	bd80      	pop	{r7, pc}
20001edc:	2000c7b8 	.word	0x2000c7b8

20001ee0 <fill_tdi_buffer>:

void fill_tdi_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t *tdi_val_ptr)
{
20001ee0:	b580      	push	{r7, lr}
20001ee2:	b084      	sub	sp, #16
20001ee4:	af00      	add	r7, sp, #0
20001ee6:	60f8      	str	r0, [r7, #12]
20001ee8:	60b9      	str	r1, [r7, #8]
20001eea:	607a      	str	r2, [r7, #4]
	//TODO: optimize here!!
	while(n)
20001eec:	e01b      	b.n	20001f26 <fill_tdi_buffer+0x46>
	{
		if(n > 8)
20001eee:	68bb      	ldr	r3, [r7, #8]
20001ef0:	2b08      	cmp	r3, #8
20001ef2:	d910      	bls.n	20001f16 <fill_tdi_buffer+0x36>
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, 8, *tdi_val_ptr);
20001ef4:	687b      	ldr	r3, [r7, #4]
20001ef6:	781b      	ldrb	r3, [r3, #0]
20001ef8:	2208      	movs	r2, #8
20001efa:	68f9      	ldr	r1, [r7, #12]
20001efc:	480e      	ldr	r0, [pc, #56]	@ (20001f38 <fill_tdi_buffer+0x58>)
20001efe:	f7ff ff5f 	bl	20001dc0 <write_nbits_lsb>
			n -= 8;
20001f02:	68bb      	ldr	r3, [r7, #8]
20001f04:	3b08      	subs	r3, #8
20001f06:	60bb      	str	r3, [r7, #8]
			tdi_val_ptr++;
20001f08:	687b      	ldr	r3, [r7, #4]
20001f0a:	3301      	adds	r3, #1
20001f0c:	607b      	str	r3, [r7, #4]
			total_write_bit_cnt += 8;
20001f0e:	68fb      	ldr	r3, [r7, #12]
20001f10:	3308      	adds	r3, #8
20001f12:	60fb      	str	r3, [r7, #12]
20001f14:	e007      	b.n	20001f26 <fill_tdi_buffer+0x46>
		}
		else
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, n, *tdi_val_ptr);
20001f16:	687b      	ldr	r3, [r7, #4]
20001f18:	781b      	ldrb	r3, [r3, #0]
20001f1a:	68ba      	ldr	r2, [r7, #8]
20001f1c:	68f9      	ldr	r1, [r7, #12]
20001f1e:	4806      	ldr	r0, [pc, #24]	@ (20001f38 <fill_tdi_buffer+0x58>)
20001f20:	f7ff ff4e 	bl	20001dc0 <write_nbits_lsb>
			break;
20001f24:	e003      	b.n	20001f2e <fill_tdi_buffer+0x4e>
	while(n)
20001f26:	68bb      	ldr	r3, [r7, #8]
20001f28:	2b00      	cmp	r3, #0
20001f2a:	d1e0      	bne.n	20001eee <fill_tdi_buffer+0xe>
		}

	}
}
20001f2c:	bf00      	nop
20001f2e:	bf00      	nop
20001f30:	3710      	adds	r7, #16
20001f32:	46bd      	mov	sp, r7
20001f34:	bd80      	pop	{r7, pc}
20001f36:	bf00      	nop
20001f38:	2000cbb8 	.word	0x2000cbb8

20001f3c <calculate_xfer_sizes>:

#define IDX_8_BIT 0
#define IDX_RM1_BIT 1
#define IDX_RM2_BIT 2
void calculate_xfer_sizes(uint16_t input_len, uint8_t *buff)
{
20001f3c:	b480      	push	{r7}
20001f3e:	b085      	sub	sp, #20
20001f40:	af00      	add	r7, sp, #0
20001f42:	4603      	mov	r3, r0
20001f44:	6039      	str	r1, [r7, #0]
20001f46:	80fb      	strh	r3, [r7, #6]
	int isunAligned = input_len % 8 < 4 && input_len % 8 != 0;
20001f48:	88fb      	ldrh	r3, [r7, #6]
20001f4a:	f003 0304 	and.w	r3, r3, #4
20001f4e:	b29b      	uxth	r3, r3
20001f50:	2b00      	cmp	r3, #0
20001f52:	d107      	bne.n	20001f64 <calculate_xfer_sizes+0x28>
20001f54:	88fb      	ldrh	r3, [r7, #6]
20001f56:	f003 0307 	and.w	r3, r3, #7
20001f5a:	b29b      	uxth	r3, r3
20001f5c:	2b00      	cmp	r3, #0
20001f5e:	d001      	beq.n	20001f64 <calculate_xfer_sizes+0x28>
20001f60:	2301      	movs	r3, #1
20001f62:	e000      	b.n	20001f66 <calculate_xfer_sizes+0x2a>
20001f64:	2300      	movs	r3, #0
20001f66:	60fb      	str	r3, [r7, #12]
	int isGreaterThan8 = input_len > 8;
20001f68:	88fb      	ldrh	r3, [r7, #6]
20001f6a:	2b08      	cmp	r3, #8
20001f6c:	bf8c      	ite	hi
20001f6e:	2301      	movhi	r3, #1
20001f70:	2300      	movls	r3, #0
20001f72:	b2db      	uxtb	r3, r3
20001f74:	60bb      	str	r3, [r7, #8]

	if(isunAligned && isGreaterThan8)
20001f76:	68fb      	ldr	r3, [r7, #12]
20001f78:	2b00      	cmp	r3, #0
20001f7a:	d01f      	beq.n	20001fbc <calculate_xfer_sizes+0x80>
20001f7c:	68bb      	ldr	r3, [r7, #8]
20001f7e:	2b00      	cmp	r3, #0
20001f80:	d01c      	beq.n	20001fbc <calculate_xfer_sizes+0x80>
	{
		buff[IDX_8_BIT] = input_len / 8 -2;
20001f82:	88fb      	ldrh	r3, [r7, #6]
20001f84:	08db      	lsrs	r3, r3, #3
20001f86:	b29b      	uxth	r3, r3
20001f88:	b2db      	uxtb	r3, r3
20001f8a:	3b02      	subs	r3, #2
20001f8c:	b2da      	uxtb	r2, r3
20001f8e:	683b      	ldr	r3, [r7, #0]
20001f90:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = 4;
20001f92:	683b      	ldr	r3, [r7, #0]
20001f94:	3301      	adds	r3, #1
20001f96:	2204      	movs	r2, #4
20001f98:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = input_len - buff[IDX_8_BIT]*8 - buff[IDX_RM1_BIT];
20001f9a:	88fb      	ldrh	r3, [r7, #6]
20001f9c:	b2da      	uxtb	r2, r3
20001f9e:	683b      	ldr	r3, [r7, #0]
20001fa0:	781b      	ldrb	r3, [r3, #0]
20001fa2:	00db      	lsls	r3, r3, #3
20001fa4:	b2db      	uxtb	r3, r3
20001fa6:	1ad3      	subs	r3, r2, r3
20001fa8:	b2d9      	uxtb	r1, r3
20001faa:	683b      	ldr	r3, [r7, #0]
20001fac:	3301      	adds	r3, #1
20001fae:	781a      	ldrb	r2, [r3, #0]
20001fb0:	683b      	ldr	r3, [r7, #0]
20001fb2:	3302      	adds	r3, #2
20001fb4:	1a8a      	subs	r2, r1, r2
20001fb6:	b2d2      	uxtb	r2, r2
20001fb8:	701a      	strb	r2, [r3, #0]
		buff[IDX_8_BIT] = input_len /8;
		buff[IDX_RM1_BIT] = input_len % 8;
		buff[IDX_RM2_BIT] = 0;
	}

}
20001fba:	e024      	b.n	20002006 <calculate_xfer_sizes+0xca>
	else if (input_len < 8)
20001fbc:	88fb      	ldrh	r3, [r7, #6]
20001fbe:	2b07      	cmp	r3, #7
20001fc0:	d80f      	bhi.n	20001fe2 <calculate_xfer_sizes+0xa6>
		buff[IDX_8_BIT] = 0;
20001fc2:	683b      	ldr	r3, [r7, #0]
20001fc4:	2200      	movs	r2, #0
20001fc6:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = input_len % 8;
20001fc8:	88fb      	ldrh	r3, [r7, #6]
20001fca:	b2da      	uxtb	r2, r3
20001fcc:	683b      	ldr	r3, [r7, #0]
20001fce:	3301      	adds	r3, #1
20001fd0:	f002 0207 	and.w	r2, r2, #7
20001fd4:	b2d2      	uxtb	r2, r2
20001fd6:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = 0;
20001fd8:	683b      	ldr	r3, [r7, #0]
20001fda:	3302      	adds	r3, #2
20001fdc:	2200      	movs	r2, #0
20001fde:	701a      	strb	r2, [r3, #0]
}
20001fe0:	e011      	b.n	20002006 <calculate_xfer_sizes+0xca>
		buff[IDX_8_BIT] = input_len /8;
20001fe2:	88fb      	ldrh	r3, [r7, #6]
20001fe4:	08db      	lsrs	r3, r3, #3
20001fe6:	b29b      	uxth	r3, r3
20001fe8:	b2da      	uxtb	r2, r3
20001fea:	683b      	ldr	r3, [r7, #0]
20001fec:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = input_len % 8;
20001fee:	88fb      	ldrh	r3, [r7, #6]
20001ff0:	b2da      	uxtb	r2, r3
20001ff2:	683b      	ldr	r3, [r7, #0]
20001ff4:	3301      	adds	r3, #1
20001ff6:	f002 0207 	and.w	r2, r2, #7
20001ffa:	b2d2      	uxtb	r2, r2
20001ffc:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = 0;
20001ffe:	683b      	ldr	r3, [r7, #0]
20002000:	3302      	adds	r3, #2
20002002:	2200      	movs	r2, #0
20002004:	701a      	strb	r2, [r3, #0]
}
20002006:	bf00      	nop
20002008:	3714      	adds	r7, #20
2000200a:	46bd      	mov	sp, r7
2000200c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002010:	4770      	bx	lr
	...

20002014 <apply_jtag_xfer>:

void apply_jtag_xfer(const uint8_t *tdi, const uint8_t *tms, uint8_t *tdo, uint32_t cnt)
{
20002014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20002018:	b09c      	sub	sp, #112	@ 0x70
2000201a:	af02      	add	r7, sp, #8
2000201c:	6278      	str	r0, [r7, #36]	@ 0x24
2000201e:	6239      	str	r1, [r7, #32]
20002020:	61fa      	str	r2, [r7, #28]
20002022:	61bb      	str	r3, [r7, #24]
	uint8_t xFerSizes[3];

	uint8_t dummyVal = 0;
20002024:	2300      	movs	r3, #0
20002026:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	calculate_xfer_sizes(cnt, xFerSizes);
2000202a:	69bb      	ldr	r3, [r7, #24]
2000202c:	b29a      	uxth	r2, r3
2000202e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
20002032:	4619      	mov	r1, r3
20002034:	4610      	mov	r0, r2
20002036:	f7ff ff81 	bl	20001f3c <calculate_xfer_sizes>

	uint32_t currentBit = 0;
2000203a:	2300      	movs	r3, #0
2000203c:	667b      	str	r3, [r7, #100]	@ 0x64

	uint8_t *tms_seq_arr = tms;
2000203e:	6a3b      	ldr	r3, [r7, #32]
20002040:	657b      	str	r3, [r7, #84]	@ 0x54

	uint8_t *tdi_seq_arr = tdi;
20002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002044:	653b      	str	r3, [r7, #80]	@ 0x50


	while(xFerSizes[IDX_8_BIT])
20002046:	e040      	b.n	200020ca <apply_jtag_xfer+0xb6>
	{
		uint8_t tms_val = *tms;
20002048:	6a3b      	ldr	r3, [r7, #32]
2000204a:	781b      	ldrb	r3, [r3, #0]
2000204c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		uint8_t tdi_val = *tdi;
20002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002052:	781b      	ldrb	r3, [r3, #0]
20002054:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		uint64_t tdo_val;
		if(tms_val != 0 && currentBit != 0)
20002058:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
2000205c:	2b00      	cmp	r3, #0
2000205e:	d005      	beq.n	2000206c <apply_jtag_xfer+0x58>
20002060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002062:	2b00      	cmp	r3, #0
20002064:	d002      	beq.n	2000206c <apply_jtag_xfer+0x58>
		{
			dummyVal = 1;
20002066:	2301      	movs	r3, #1
20002068:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		}

		SPI_TMS_Transfer(tms_val, 8);
2000206c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
20002070:	2200      	movs	r2, #0
20002072:	461c      	mov	r4, r3
20002074:	4615      	mov	r5, r2
20002076:	2208      	movs	r2, #8
20002078:	4620      	mov	r0, r4
2000207a:	4629      	mov	r1, r5
2000207c:	f001 fe7a 	bl	20003d74 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , 8);
20002080:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
20002084:	2200      	movs	r2, #0
20002086:	4698      	mov	r8, r3
20002088:	4691      	mov	r9, r2
2000208a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
2000208e:	2308      	movs	r3, #8
20002090:	9300      	str	r3, [sp, #0]
20002092:	4642      	mov	r2, r8
20002094:	464b      	mov	r3, r9
20002096:	4608      	mov	r0, r1
20002098:	f001 fea6 	bl	20003de8 <SPI_Transfer>

		*tdo = (uint8_t)tdo_val;
2000209c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
200020a0:	b2d3      	uxtb	r3, r2
200020a2:	69fa      	ldr	r2, [r7, #28]
200020a4:	7013      	strb	r3, [r2, #0]

		tms++;
200020a6:	6a3b      	ldr	r3, [r7, #32]
200020a8:	3301      	adds	r3, #1
200020aa:	623b      	str	r3, [r7, #32]
		tdi++;
200020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200020ae:	3301      	adds	r3, #1
200020b0:	627b      	str	r3, [r7, #36]	@ 0x24
		tdo++;
200020b2:	69fb      	ldr	r3, [r7, #28]
200020b4:	3301      	adds	r3, #1
200020b6:	61fb      	str	r3, [r7, #28]

		xFerSizes[IDX_8_BIT]--;
200020b8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
200020bc:	3b01      	subs	r3, #1
200020be:	b2db      	uxtb	r3, r3
200020c0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

		currentBit+= 8;
200020c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
200020c6:	3308      	adds	r3, #8
200020c8:	667b      	str	r3, [r7, #100]	@ 0x64
	while(xFerSizes[IDX_8_BIT])
200020ca:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
200020ce:	2b00      	cmp	r3, #0
200020d0:	d1ba      	bne.n	20002048 <apply_jtag_xfer+0x34>
	}

	while(xFerSizes[IDX_RM1_BIT])
200020d2:	e04c      	b.n	2000216e <apply_jtag_xfer+0x15a>
	{
		uint32_t delay_cnt = 2500;
200020d4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
200020d8:	663b      	str	r3, [r7, #96]	@ 0x60

		while(delay_cnt--)
200020da:	e000      	b.n	200020de <apply_jtag_xfer+0xca>
	    {
		  __asm("nop");
200020dc:	bf00      	nop
		while(delay_cnt--)
200020de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
200020e0:	1e5a      	subs	r2, r3, #1
200020e2:	663a      	str	r2, [r7, #96]	@ 0x60
200020e4:	2b00      	cmp	r3, #0
200020e6:	d1f9      	bne.n	200020dc <apply_jtag_xfer+0xc8>
	    }

		uint16_t tms_val = extract_nbits_lsb(tms_seq_arr, currentBit, xFerSizes[IDX_RM1_BIT]);
200020e8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
200020ec:	461a      	mov	r2, r3
200020ee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
200020f0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
200020f2:	f7ff fe27 	bl	20001d44 <extract_nbits_lsb>
200020f6:	4603      	mov	r3, r0
200020f8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		uint16_t tdi_val = extract_nbits_lsb(tdi_seq_arr, currentBit, xFerSizes[IDX_RM1_BIT]);;
200020fc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002100:	461a      	mov	r2, r3
20002102:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002104:	6d38      	ldr	r0, [r7, #80]	@ 0x50
20002106:	f7ff fe1d 	bl	20001d44 <extract_nbits_lsb>
2000210a:	4603      	mov	r3, r0
2000210c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		uint64_t tdo_val;

		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM1_BIT]);
20002110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
20002114:	2200      	movs	r2, #0
20002116:	613b      	str	r3, [r7, #16]
20002118:	617a      	str	r2, [r7, #20]
2000211a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
2000211e:	461a      	mov	r2, r3
20002120:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20002124:	f001 fe26 	bl	20003d74 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , xFerSizes[IDX_RM1_BIT]);
20002128:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
2000212c:	2200      	movs	r2, #0
2000212e:	60bb      	str	r3, [r7, #8]
20002130:	60fa      	str	r2, [r7, #12]
20002132:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002136:	f107 0130 	add.w	r1, r7, #48	@ 0x30
2000213a:	9300      	str	r3, [sp, #0]
2000213c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20002140:	4608      	mov	r0, r1
20002142:	f001 fe51 	bl	20003de8 <SPI_Transfer>

		write_nbits_lsb(TDO_SEQ_ARR, currentBit, xFerSizes[IDX_RM1_BIT], tdo_val);
20002146:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
2000214a:	4619      	mov	r1, r3
2000214c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
20002150:	b293      	uxth	r3, r2
20002152:	460a      	mov	r2, r1
20002154:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002156:	4834      	ldr	r0, [pc, #208]	@ (20002228 <apply_jtag_xfer+0x214>)
20002158:	f7ff fe32 	bl	20001dc0 <write_nbits_lsb>

		currentBit+= xFerSizes[IDX_RM1_BIT];
2000215c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002160:	461a      	mov	r2, r3
20002162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002164:	4413      	add	r3, r2
20002166:	667b      	str	r3, [r7, #100]	@ 0x64

		xFerSizes[IDX_RM1_BIT] = 0;
20002168:	2300      	movs	r3, #0
2000216a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	while(xFerSizes[IDX_RM1_BIT])
2000216e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002172:	2b00      	cmp	r3, #0
20002174:	d1ae      	bne.n	200020d4 <apply_jtag_xfer+0xc0>

	}

	while(xFerSizes[IDX_RM2_BIT])
20002176:	e04c      	b.n	20002212 <apply_jtag_xfer+0x1fe>
	{
		//TODO: extract bits!!
		uint32_t delay_cnt = 2000;
20002178:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
2000217c:	65fb      	str	r3, [r7, #92]	@ 0x5c

		while(delay_cnt--)
2000217e:	e000      	b.n	20002182 <apply_jtag_xfer+0x16e>
		{
		  __asm("nop");
20002180:	bf00      	nop
		while(delay_cnt--)
20002182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20002184:	1e5a      	subs	r2, r3, #1
20002186:	65fa      	str	r2, [r7, #92]	@ 0x5c
20002188:	2b00      	cmp	r3, #0
2000218a:	d1f9      	bne.n	20002180 <apply_jtag_xfer+0x16c>
		}

		uint16_t tms_val = extract_nbits_lsb(tms_seq_arr, currentBit, xFerSizes[IDX_RM2_BIT]);
2000218c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002190:	461a      	mov	r2, r3
20002192:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002194:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20002196:	f7ff fdd5 	bl	20001d44 <extract_nbits_lsb>
2000219a:	4603      	mov	r3, r0
2000219c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		uint16_t tdi_val = extract_nbits_lsb(tdi_seq_arr, currentBit, xFerSizes[IDX_RM2_BIT]);;
200021a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
200021a4:	461a      	mov	r2, r3
200021a6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
200021a8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
200021aa:	f7ff fdcb 	bl	20001d44 <extract_nbits_lsb>
200021ae:	4603      	mov	r3, r0
200021b0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		uint64_t tdo_val;

		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM2_BIT]);
200021b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
200021b8:	2200      	movs	r2, #0
200021ba:	469a      	mov	sl, r3
200021bc:	4693      	mov	fp, r2
200021be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
200021c2:	461a      	mov	r2, r3
200021c4:	4650      	mov	r0, sl
200021c6:	4659      	mov	r1, fp
200021c8:	f001 fdd4 	bl	20003d74 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , xFerSizes[IDX_RM2_BIT]);
200021cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
200021d0:	2200      	movs	r2, #0
200021d2:	603b      	str	r3, [r7, #0]
200021d4:	607a      	str	r2, [r7, #4]
200021d6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
200021da:	f107 0128 	add.w	r1, r7, #40	@ 0x28
200021de:	9300      	str	r3, [sp, #0]
200021e0:	e9d7 2300 	ldrd	r2, r3, [r7]
200021e4:	4608      	mov	r0, r1
200021e6:	f001 fdff 	bl	20003de8 <SPI_Transfer>

		write_nbits_lsb(TDO_SEQ_ARR, currentBit, xFerSizes[IDX_RM2_BIT], tdo_val);
200021ea:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
200021ee:	4619      	mov	r1, r3
200021f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
200021f4:	b293      	uxth	r3, r2
200021f6:	460a      	mov	r2, r1
200021f8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
200021fa:	480b      	ldr	r0, [pc, #44]	@ (20002228 <apply_jtag_xfer+0x214>)
200021fc:	f7ff fde0 	bl	20001dc0 <write_nbits_lsb>

		currentBit+= xFerSizes[IDX_RM2_BIT];
20002200:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002204:	461a      	mov	r2, r3
20002206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002208:	4413      	add	r3, r2
2000220a:	667b      	str	r3, [r7, #100]	@ 0x64

		xFerSizes[IDX_RM2_BIT] = 0;
2000220c:	2300      	movs	r3, #0
2000220e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	while(xFerSizes[IDX_RM2_BIT])
20002212:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002216:	2b00      	cmp	r3, #0
20002218:	d1ae      	bne.n	20002178 <apply_jtag_xfer+0x164>

	}


}
2000221a:	bf00      	nop
2000221c:	bf00      	nop
2000221e:	3768      	adds	r7, #104	@ 0x68
20002220:	46bd      	mov	sp, r7
20002222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20002226:	bf00      	nop
20002228:	2000cfb8 	.word	0x2000cfb8

2000222c <JTAG_Sequence>:
//   info:   sequence information
//   tdi:    pointer to TDI generated data
//   tdo:    pointer to TDO captured data
//   return: none
uint32_t JTAG_Sequence (uint32_t count, const uint8_t *request, uint8_t *response)
{
2000222c:	b580      	push	{r7, lr}
2000222e:	b092      	sub	sp, #72	@ 0x48
20002230:	af02      	add	r7, sp, #8
20002232:	60f8      	str	r0, [r7, #12]
20002234:	60b9      	str	r1, [r7, #8]
20002236:	607a      	str	r2, [r7, #4]
	static int cnt = 0;
	int dummyVal = 31;
20002238:	231f      	movs	r3, #31
2000223a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t total_write_bit_cnt = 0;
2000223c:	2300      	movs	r3, #0
2000223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t total_read_bit_cnt = 0;
20002240:	2300      	movs	r3, #0
20002242:	63bb      	str	r3, [r7, #56]	@ 0x38

  uint32_t total_write_word_cnt = 0;
20002244:	2300      	movs	r3, #0
20002246:	623b      	str	r3, [r7, #32]
  uint32_t total_read_word_cnt = 0;
20002248:	2300      	movs	r3, #0
2000224a:	61fb      	str	r3, [r7, #28]

  uint32_t tdo_capture_index = 0;
2000224c:	2300      	movs	r3, #0
2000224e:	61bb      	str	r3, [r7, #24]

  uint32_t tms_seq_val = 0;
20002250:	2300      	movs	r3, #0
20002252:	617b      	str	r3, [r7, #20]

  uint32_t i;

  uint8_t *req_base = request;
20002254:	68bb      	ldr	r3, [r7, #8]
20002256:	633b      	str	r3, [r7, #48]	@ 0x30

  memset(TMS_SEQ_ARR, 0, 1024);
20002258:	f44f 6280 	mov.w	r2, #1024	@ 0x400
2000225c:	2100      	movs	r1, #0
2000225e:	4855      	ldr	r0, [pc, #340]	@ (200023b4 <JTAG_Sequence+0x188>)
20002260:	f00a f834 	bl	2000c2cc <memset>

  memset(TDI_SEQ_ARR, 0, 1024);
20002264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
20002268:	2100      	movs	r1, #0
2000226a:	4853      	ldr	r0, [pc, #332]	@ (200023b8 <JTAG_Sequence+0x18c>)
2000226c:	f00a f82e 	bl	2000c2cc <memset>

  memset(TDO_SEQ_ARR, 0, 1024);
20002270:	f44f 6280 	mov.w	r2, #1024	@ 0x400
20002274:	2100      	movs	r1, #0
20002276:	4851      	ldr	r0, [pc, #324]	@ (200023bc <JTAG_Sequence+0x190>)
20002278:	f00a f828 	bl	2000c2cc <memset>

  memset(TDO_PROCESSED_SEQ_ARR, 0, 1024);
2000227c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
20002280:	2100      	movs	r1, #0
20002282:	484f      	ldr	r0, [pc, #316]	@ (200023c0 <JTAG_Sequence+0x194>)
20002284:	f00a f822 	bl	2000c2cc <memset>


  cnt++;
20002288:	4b4e      	ldr	r3, [pc, #312]	@ (200023c4 <JTAG_Sequence+0x198>)
2000228a:	681b      	ldr	r3, [r3, #0]
2000228c:	3301      	adds	r3, #1
2000228e:	4a4d      	ldr	r2, [pc, #308]	@ (200023c4 <JTAG_Sequence+0x198>)
20002290:	6013      	str	r3, [r2, #0]


  for(i = 0; i < count; i++)
20002292:	2300      	movs	r3, #0
20002294:	637b      	str	r3, [r7, #52]	@ 0x34
20002296:	e038      	b.n	2000230a <JTAG_Sequence+0xde>
  {
	  uint32_t n;

	  uint8_t tms_val = (*request & JTAG_SEQUENCE_TMS) >> 6;
20002298:	68bb      	ldr	r3, [r7, #8]
2000229a:	781b      	ldrb	r3, [r3, #0]
2000229c:	099b      	lsrs	r3, r3, #6
2000229e:	b2db      	uxtb	r3, r3
200022a0:	f003 0301 	and.w	r3, r3, #1
200022a4:	74fb      	strb	r3, [r7, #19]

	  uint8_t tdi_val = *(request +1);
200022a6:	68bb      	ldr	r3, [r7, #8]
200022a8:	3301      	adds	r3, #1
200022aa:	781b      	ldrb	r3, [r3, #0]
200022ac:	74bb      	strb	r3, [r7, #18]

	  n = *request & JTAG_SEQUENCE_TCK;
200022ae:	68bb      	ldr	r3, [r7, #8]
200022b0:	781b      	ldrb	r3, [r3, #0]
200022b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200022b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  if (n == 0U)
200022b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200022ba:	2b00      	cmp	r3, #0
200022bc:	d101      	bne.n	200022c2 <JTAG_Sequence+0x96>
	  {
		  n = 64U;
200022be:	2340      	movs	r3, #64	@ 0x40
200022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  }

	  fill_tms_buffer(total_write_bit_cnt, n, tms_val);
200022c2:	7cfb      	ldrb	r3, [r7, #19]
200022c4:	461a      	mov	r2, r3
200022c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
200022c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
200022ca:	f7ff fdd9 	bl	20001e80 <fill_tms_buffer>
	  fill_tdi_buffer(total_write_bit_cnt, n, (request +1));
200022ce:	68bb      	ldr	r3, [r7, #8]
200022d0:	3301      	adds	r3, #1
200022d2:	461a      	mov	r2, r3
200022d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
200022d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
200022d8:	f7ff fe02 	bl	20001ee0 <fill_tdi_buffer>


	  total_write_bit_cnt += n;
200022dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
200022de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200022e0:	4413      	add	r3, r2
200022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  if(*request & JTAG_SEQUENCE_TDO)
200022e4:	68bb      	ldr	r3, [r7, #8]
200022e6:	781b      	ldrb	r3, [r3, #0]
200022e8:	b25b      	sxtb	r3, r3
200022ea:	2b00      	cmp	r3, #0
200022ec:	da03      	bge.n	200022f6 <JTAG_Sequence+0xca>
	  {
		  total_read_bit_cnt += n;
200022ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
200022f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200022f2:	4413      	add	r3, r2
200022f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }


	  request += ( (n + 7U) /8U ) + 1;
200022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200022f8:	3307      	adds	r3, #7
200022fa:	08db      	lsrs	r3, r3, #3
200022fc:	3301      	adds	r3, #1
200022fe:	68ba      	ldr	r2, [r7, #8]
20002300:	4413      	add	r3, r2
20002302:	60bb      	str	r3, [r7, #8]
  for(i = 0; i < count; i++)
20002304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002306:	3301      	adds	r3, #1
20002308:	637b      	str	r3, [r7, #52]	@ 0x34
2000230a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
2000230c:	68fb      	ldr	r3, [r7, #12]
2000230e:	429a      	cmp	r2, r3
20002310:	d3c2      	bcc.n	20002298 <JTAG_Sequence+0x6c>

  }

  apply_jtag_xfer(TDI_SEQ_ARR, TMS_SEQ_ARR, TDO_SEQ_ARR, total_write_bit_cnt);
20002312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002314:	4a29      	ldr	r2, [pc, #164]	@ (200023bc <JTAG_Sequence+0x190>)
20002316:	4927      	ldr	r1, [pc, #156]	@ (200023b4 <JTAG_Sequence+0x188>)
20002318:	4827      	ldr	r0, [pc, #156]	@ (200023b8 <JTAG_Sequence+0x18c>)
2000231a:	f7ff fe7b 	bl	20002014 <apply_jtag_xfer>

  total_write_bit_cnt = 0;
2000231e:	2300      	movs	r3, #0
20002320:	63fb      	str	r3, [r7, #60]	@ 0x3c

  total_read_bit_cnt = 0;
20002322:	2300      	movs	r3, #0
20002324:	63bb      	str	r3, [r7, #56]	@ 0x38

  for(i = 0; i < count; i++)
20002326:	2300      	movs	r3, #0
20002328:	637b      	str	r3, [r7, #52]	@ 0x34
2000232a:	e032      	b.n	20002392 <JTAG_Sequence+0x166>
  {
	  uint32_t n;



	  n = *req_base & JTAG_SEQUENCE_TCK;
2000232c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000232e:	781b      	ldrb	r3, [r3, #0]
20002330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20002334:	62bb      	str	r3, [r7, #40]	@ 0x28

	  if (n == 0U)
20002336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002338:	2b00      	cmp	r3, #0
2000233a:	d101      	bne.n	20002340 <JTAG_Sequence+0x114>
  	  {
  		  n = 64U;
2000233c:	2340      	movs	r3, #64	@ 0x40
2000233e:	62bb      	str	r3, [r7, #40]	@ 0x28
  	  }



	  if(*req_base & JTAG_SEQUENCE_TDO)
20002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002342:	781b      	ldrb	r3, [r3, #0]
20002344:	b25b      	sxtb	r3, r3
20002346:	2b00      	cmp	r3, #0
20002348:	da15      	bge.n	20002376 <JTAG_Sequence+0x14a>
	  {

		  copy_bits_lsb(TDO_SEQ_ARR, total_write_bit_cnt, n, TDO_PROCESSED_SEQ_ARR, total_read_bit_cnt);
2000234a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000234c:	9300      	str	r3, [sp, #0]
2000234e:	4b1c      	ldr	r3, [pc, #112]	@ (200023c0 <JTAG_Sequence+0x194>)
20002350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
20002352:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
20002354:	4819      	ldr	r0, [pc, #100]	@ (200023bc <JTAG_Sequence+0x190>)
20002356:	f7ff fc99 	bl	20001c8c <copy_bits_lsb>
		  total_read_bit_cnt += n;
2000235a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
2000235c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000235e:	4413      	add	r3, r2
20002360:	63bb      	str	r3, [r7, #56]	@ 0x38

		  if(total_read_bit_cnt % 8 )
20002362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002364:	f003 0307 	and.w	r3, r3, #7
20002368:	2b00      	cmp	r3, #0
2000236a:	d004      	beq.n	20002376 <JTAG_Sequence+0x14a>
		  {
			  total_read_bit_cnt = ( (total_read_bit_cnt / 8) +1) *8;
2000236c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000236e:	08db      	lsrs	r3, r3, #3
20002370:	3301      	adds	r3, #1
20002372:	00db      	lsls	r3, r3, #3
20002374:	63bb      	str	r3, [r7, #56]	@ 0x38
		  }


	  }

	  total_write_bit_cnt += n;
20002376:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
20002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000237a:	4413      	add	r3, r2
2000237c:	63fb      	str	r3, [r7, #60]	@ 0x3c


	  req_base += ( (n + 7U) /8U ) + 1;
2000237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002380:	3307      	adds	r3, #7
20002382:	08db      	lsrs	r3, r3, #3
20002384:	3301      	adds	r3, #1
20002386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20002388:	4413      	add	r3, r2
2000238a:	633b      	str	r3, [r7, #48]	@ 0x30
  for(i = 0; i < count; i++)
2000238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000238e:	3301      	adds	r3, #1
20002390:	637b      	str	r3, [r7, #52]	@ 0x34
20002392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20002394:	68fb      	ldr	r3, [r7, #12]
20002396:	429a      	cmp	r2, r3
20002398:	d3c8      	bcc.n	2000232c <JTAG_Sequence+0x100>


  //shift_right_bitstream_lsb(TDO_SEQ_ARR, total_write_bit_cnt, total_write_bit_cnt - total_read_bit_cnt);


  memcpy(response, TDO_PROCESSED_SEQ_ARR, total_read_bit_cnt /8);
2000239a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000239c:	08db      	lsrs	r3, r3, #3
2000239e:	461a      	mov	r2, r3
200023a0:	4907      	ldr	r1, [pc, #28]	@ (200023c0 <JTAG_Sequence+0x194>)
200023a2:	6878      	ldr	r0, [r7, #4]
200023a4:	f009 ffd6 	bl	2000c354 <memcpy>

  return total_read_bit_cnt / 8;
200023a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200023aa:	08db      	lsrs	r3, r3, #3

}
200023ac:	4618      	mov	r0, r3
200023ae:	3740      	adds	r7, #64	@ 0x40
200023b0:	46bd      	mov	sp, r7
200023b2:	bd80      	pop	{r7, pc}
200023b4:	2000c7b8 	.word	0x2000c7b8
200023b8:	2000cbb8 	.word	0x2000cbb8
200023bc:	2000cfb8 	.word	0x2000cfb8
200023c0:	2000d3b8 	.word	0x2000d3b8
200023c4:	2000d7b8 	.word	0x2000d7b8

200023c8 <JTAG_IR_Fast>:
}


#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_FAST()
JTAG_IR_Function(Fast)
200023c8:	b580      	push	{r7, lr}
200023ca:	b084      	sub	sp, #16
200023cc:	af00      	add	r7, sp, #0
200023ce:	6078      	str	r0, [r7, #4]
200023d0:	f7ff fc26 	bl	20001c20 <PIN_SWDIO_TMS_SET>
200023d4:	f7ff fc1d 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
  __NOP();
#endif
#if (DELAY_FAST_CYCLES >= 3U)
  __NOP();
#endif
}
200023d8:	bf00      	nop
200023da:	f7ff fc13 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200023de:	bf00      	nop
200023e0:	f7ff fc17 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200023e4:	bf00      	nop
200023e6:	f7ff fc0d 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200023ea:	bf00      	nop
200023ec:	f7ff fc24 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
200023f0:	f7ff fc0f 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200023f4:	bf00      	nop
200023f6:	f7ff fc05 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200023fa:	bf00      	nop
200023fc:	f7ff fc09 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002400:	bf00      	nop
20002402:	f7ff fbff 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002406:	bf00      	nop
20002408:	2001      	movs	r0, #1
2000240a:	f7ff fc21 	bl	20001c50 <PIN_TDI_OUT>
2000240e:	4b3f      	ldr	r3, [pc, #252]	@ (2000250c <JTAG_IR_Fast+0x144>)
20002410:	7e5b      	ldrb	r3, [r3, #25]
20002412:	4a3e      	ldr	r2, [pc, #248]	@ (2000250c <JTAG_IR_Fast+0x144>)
20002414:	3310      	adds	r3, #16
20002416:	005b      	lsls	r3, r3, #1
20002418:	4413      	add	r3, r2
2000241a:	885b      	ldrh	r3, [r3, #2]
2000241c:	60fb      	str	r3, [r7, #12]
2000241e:	e008      	b.n	20002432 <JTAG_IR_Fast+0x6a>
20002420:	f7ff fbf7 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002424:	bf00      	nop
20002426:	f7ff fbed 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000242a:	bf00      	nop
2000242c:	68fb      	ldr	r3, [r7, #12]
2000242e:	3b01      	subs	r3, #1
20002430:	60fb      	str	r3, [r7, #12]
20002432:	68fb      	ldr	r3, [r7, #12]
20002434:	2b00      	cmp	r3, #0
20002436:	d1f3      	bne.n	20002420 <JTAG_IR_Fast+0x58>
20002438:	4b34      	ldr	r3, [pc, #208]	@ (2000250c <JTAG_IR_Fast+0x144>)
2000243a:	7e5b      	ldrb	r3, [r3, #25]
2000243c:	461a      	mov	r2, r3
2000243e:	4b33      	ldr	r3, [pc, #204]	@ (2000250c <JTAG_IR_Fast+0x144>)
20002440:	4413      	add	r3, r2
20002442:	7e9b      	ldrb	r3, [r3, #26]
20002444:	3b01      	subs	r3, #1
20002446:	60fb      	str	r3, [r7, #12]
20002448:	e00e      	b.n	20002468 <JTAG_IR_Fast+0xa0>
2000244a:	6878      	ldr	r0, [r7, #4]
2000244c:	f7ff fc00 	bl	20001c50 <PIN_TDI_OUT>
20002450:	f7ff fbdf 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002454:	bf00      	nop
20002456:	f7ff fbd5 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000245a:	bf00      	nop
2000245c:	687b      	ldr	r3, [r7, #4]
2000245e:	085b      	lsrs	r3, r3, #1
20002460:	607b      	str	r3, [r7, #4]
20002462:	68fb      	ldr	r3, [r7, #12]
20002464:	3b01      	subs	r3, #1
20002466:	60fb      	str	r3, [r7, #12]
20002468:	68fb      	ldr	r3, [r7, #12]
2000246a:	2b00      	cmp	r3, #0
2000246c:	d1ed      	bne.n	2000244a <JTAG_IR_Fast+0x82>
2000246e:	4b27      	ldr	r3, [pc, #156]	@ (2000250c <JTAG_IR_Fast+0x144>)
20002470:	7e5b      	ldrb	r3, [r3, #25]
20002472:	4a26      	ldr	r2, [pc, #152]	@ (2000250c <JTAG_IR_Fast+0x144>)
20002474:	3318      	adds	r3, #24
20002476:	005b      	lsls	r3, r3, #1
20002478:	4413      	add	r3, r2
2000247a:	885b      	ldrh	r3, [r3, #2]
2000247c:	60fb      	str	r3, [r7, #12]
2000247e:	68fb      	ldr	r3, [r7, #12]
20002480:	2b00      	cmp	r3, #0
20002482:	d023      	beq.n	200024cc <JTAG_IR_Fast+0x104>
20002484:	6878      	ldr	r0, [r7, #4]
20002486:	f7ff fbe3 	bl	20001c50 <PIN_TDI_OUT>
2000248a:	f7ff fbc2 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000248e:	bf00      	nop
20002490:	f7ff fbb8 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002494:	bf00      	nop
20002496:	2001      	movs	r0, #1
20002498:	f7ff fbda 	bl	20001c50 <PIN_TDI_OUT>
2000249c:	68fb      	ldr	r3, [r7, #12]
2000249e:	3b01      	subs	r3, #1
200024a0:	60fb      	str	r3, [r7, #12]
200024a2:	e008      	b.n	200024b6 <JTAG_IR_Fast+0xee>
200024a4:	f7ff fbb5 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200024a8:	bf00      	nop
200024aa:	f7ff fbab 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200024ae:	bf00      	nop
200024b0:	68fb      	ldr	r3, [r7, #12]
200024b2:	3b01      	subs	r3, #1
200024b4:	60fb      	str	r3, [r7, #12]
200024b6:	68fb      	ldr	r3, [r7, #12]
200024b8:	2b00      	cmp	r3, #0
200024ba:	d1f3      	bne.n	200024a4 <JTAG_IR_Fast+0xdc>
200024bc:	f7ff fbb0 	bl	20001c20 <PIN_SWDIO_TMS_SET>
200024c0:	f7ff fba7 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200024c4:	bf00      	nop
200024c6:	f7ff fb9d 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200024ca:	e00a      	b.n	200024e2 <JTAG_IR_Fast+0x11a>
200024cc:	f7ff fba8 	bl	20001c20 <PIN_SWDIO_TMS_SET>
200024d0:	6878      	ldr	r0, [r7, #4]
200024d2:	f7ff fbbd 	bl	20001c50 <PIN_TDI_OUT>
200024d6:	f7ff fb9c 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200024da:	bf00      	nop
200024dc:	f7ff fb92 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200024e0:	bf00      	nop
200024e2:	f7ff fb96 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200024e6:	bf00      	nop
200024e8:	f7ff fb8c 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200024ec:	bf00      	nop
200024ee:	f7ff fba3 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
200024f2:	f7ff fb8e 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200024f6:	bf00      	nop
200024f8:	f7ff fb84 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200024fc:	bf00      	nop
200024fe:	2001      	movs	r0, #1
20002500:	f7ff fba6 	bl	20001c50 <PIN_TDI_OUT>
20002504:	3710      	adds	r7, #16
20002506:	46bd      	mov	sp, r7
20002508:	bd80      	pop	{r7, pc}
2000250a:	bf00      	nop
2000250c:	2000c770 	.word	0x2000c770

20002510 <JTAG_TransferFast>:
JTAG_TransferFunction(Fast)
20002510:	b580      	push	{r7, lr}
20002512:	b086      	sub	sp, #24
20002514:	af00      	add	r7, sp, #0
20002516:	6078      	str	r0, [r7, #4]
20002518:	6039      	str	r1, [r7, #0]
2000251a:	f7ff fb81 	bl	20001c20 <PIN_SWDIO_TMS_SET>
2000251e:	f7ff fb78 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002522:	bf00      	nop
20002524:	f7ff fb6e 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002528:	bf00      	nop
2000252a:	f7ff fb85 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
2000252e:	f7ff fb70 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002532:	bf00      	nop
20002534:	f7ff fb66 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002538:	bf00      	nop
2000253a:	f7ff fb6a 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000253e:	bf00      	nop
20002540:	f7ff fb60 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002544:	bf00      	nop
20002546:	4b9a      	ldr	r3, [pc, #616]	@ (200027b0 <JTAG_TransferFast+0x2a0>)
20002548:	7e5b      	ldrb	r3, [r3, #25]
2000254a:	60fb      	str	r3, [r7, #12]
2000254c:	e008      	b.n	20002560 <JTAG_TransferFast+0x50>
2000254e:	f7ff fb60 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002552:	bf00      	nop
20002554:	f7ff fb56 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002558:	bf00      	nop
2000255a:	68fb      	ldr	r3, [r7, #12]
2000255c:	3b01      	subs	r3, #1
2000255e:	60fb      	str	r3, [r7, #12]
20002560:	68fb      	ldr	r3, [r7, #12]
20002562:	2b00      	cmp	r3, #0
20002564:	d1f3      	bne.n	2000254e <JTAG_TransferFast+0x3e>
20002566:	687b      	ldr	r3, [r7, #4]
20002568:	085b      	lsrs	r3, r3, #1
2000256a:	4618      	mov	r0, r3
2000256c:	f7ff fb70 	bl	20001c50 <PIN_TDI_OUT>
20002570:	f7ff fb4f 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002574:	bf00      	nop
20002576:	f7ff fb75 	bl	20001c64 <PIN_TDO_IN>
2000257a:	6178      	str	r0, [r7, #20]
2000257c:	f7ff fb42 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002580:	bf00      	nop
20002582:	697b      	ldr	r3, [r7, #20]
20002584:	005b      	lsls	r3, r3, #1
20002586:	60bb      	str	r3, [r7, #8]
20002588:	687b      	ldr	r3, [r7, #4]
2000258a:	089b      	lsrs	r3, r3, #2
2000258c:	4618      	mov	r0, r3
2000258e:	f7ff fb5f 	bl	20001c50 <PIN_TDI_OUT>
20002592:	f7ff fb3e 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002596:	bf00      	nop
20002598:	f7ff fb64 	bl	20001c64 <PIN_TDO_IN>
2000259c:	6178      	str	r0, [r7, #20]
2000259e:	f7ff fb31 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200025a2:	bf00      	nop
200025a4:	68ba      	ldr	r2, [r7, #8]
200025a6:	697b      	ldr	r3, [r7, #20]
200025a8:	4313      	orrs	r3, r2
200025aa:	60bb      	str	r3, [r7, #8]
200025ac:	687b      	ldr	r3, [r7, #4]
200025ae:	08db      	lsrs	r3, r3, #3
200025b0:	4618      	mov	r0, r3
200025b2:	f7ff fb4d 	bl	20001c50 <PIN_TDI_OUT>
200025b6:	f7ff fb2c 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200025ba:	bf00      	nop
200025bc:	f7ff fb52 	bl	20001c64 <PIN_TDO_IN>
200025c0:	6178      	str	r0, [r7, #20]
200025c2:	f7ff fb1f 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200025c6:	bf00      	nop
200025c8:	697b      	ldr	r3, [r7, #20]
200025ca:	009b      	lsls	r3, r3, #2
200025cc:	68ba      	ldr	r2, [r7, #8]
200025ce:	4313      	orrs	r3, r2
200025d0:	60bb      	str	r3, [r7, #8]
200025d2:	68bb      	ldr	r3, [r7, #8]
200025d4:	2b01      	cmp	r3, #1
200025d6:	d008      	beq.n	200025ea <JTAG_TransferFast+0xda>
200025d8:	f7ff fb22 	bl	20001c20 <PIN_SWDIO_TMS_SET>
200025dc:	f7ff fb19 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200025e0:	bf00      	nop
200025e2:	f7ff fb0f 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200025e6:	bf00      	nop
200025e8:	e0b2      	b.n	20002750 <JTAG_TransferFast+0x240>
200025ea:	687b      	ldr	r3, [r7, #4]
200025ec:	f003 0302 	and.w	r3, r3, #2
200025f0:	2b00      	cmp	r3, #0
200025f2:	d05e      	beq.n	200026b2 <JTAG_TransferFast+0x1a2>
200025f4:	2300      	movs	r3, #0
200025f6:	613b      	str	r3, [r7, #16]
200025f8:	231f      	movs	r3, #31
200025fa:	60fb      	str	r3, [r7, #12]
200025fc:	e013      	b.n	20002626 <JTAG_TransferFast+0x116>
200025fe:	f7ff fb08 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002602:	bf00      	nop
20002604:	f7ff fb2e 	bl	20001c64 <PIN_TDO_IN>
20002608:	6178      	str	r0, [r7, #20]
2000260a:	f7ff fafb 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000260e:	bf00      	nop
20002610:	697b      	ldr	r3, [r7, #20]
20002612:	07db      	lsls	r3, r3, #31
20002614:	693a      	ldr	r2, [r7, #16]
20002616:	4313      	orrs	r3, r2
20002618:	613b      	str	r3, [r7, #16]
2000261a:	693b      	ldr	r3, [r7, #16]
2000261c:	085b      	lsrs	r3, r3, #1
2000261e:	613b      	str	r3, [r7, #16]
20002620:	68fb      	ldr	r3, [r7, #12]
20002622:	3b01      	subs	r3, #1
20002624:	60fb      	str	r3, [r7, #12]
20002626:	68fb      	ldr	r3, [r7, #12]
20002628:	2b00      	cmp	r3, #0
2000262a:	d1e8      	bne.n	200025fe <JTAG_TransferFast+0xee>
2000262c:	4b60      	ldr	r3, [pc, #384]	@ (200027b0 <JTAG_TransferFast+0x2a0>)
2000262e:	7e1b      	ldrb	r3, [r3, #24]
20002630:	461a      	mov	r2, r3
20002632:	4b5f      	ldr	r3, [pc, #380]	@ (200027b0 <JTAG_TransferFast+0x2a0>)
20002634:	7e5b      	ldrb	r3, [r3, #25]
20002636:	1ad3      	subs	r3, r2, r3
20002638:	3b01      	subs	r3, #1
2000263a:	60fb      	str	r3, [r7, #12]
2000263c:	68fb      	ldr	r3, [r7, #12]
2000263e:	2b00      	cmp	r3, #0
20002640:	d020      	beq.n	20002684 <JTAG_TransferFast+0x174>
20002642:	f7ff fae6 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002646:	bf00      	nop
20002648:	f7ff fb0c 	bl	20001c64 <PIN_TDO_IN>
2000264c:	6178      	str	r0, [r7, #20]
2000264e:	f7ff fad9 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002652:	bf00      	nop
20002654:	68fb      	ldr	r3, [r7, #12]
20002656:	3b01      	subs	r3, #1
20002658:	60fb      	str	r3, [r7, #12]
2000265a:	e008      	b.n	2000266e <JTAG_TransferFast+0x15e>
2000265c:	f7ff fad9 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002660:	bf00      	nop
20002662:	f7ff facf 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002666:	bf00      	nop
20002668:	68fb      	ldr	r3, [r7, #12]
2000266a:	3b01      	subs	r3, #1
2000266c:	60fb      	str	r3, [r7, #12]
2000266e:	68fb      	ldr	r3, [r7, #12]
20002670:	2b00      	cmp	r3, #0
20002672:	d1f3      	bne.n	2000265c <JTAG_TransferFast+0x14c>
20002674:	f7ff fad4 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002678:	f7ff facb 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000267c:	bf00      	nop
2000267e:	f7ff fac1 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002682:	e00a      	b.n	2000269a <JTAG_TransferFast+0x18a>
20002684:	f7ff facc 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002688:	f7ff fac3 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000268c:	bf00      	nop
2000268e:	f7ff fae9 	bl	20001c64 <PIN_TDO_IN>
20002692:	6178      	str	r0, [r7, #20]
20002694:	f7ff fab6 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002698:	bf00      	nop
2000269a:	697b      	ldr	r3, [r7, #20]
2000269c:	07db      	lsls	r3, r3, #31
2000269e:	693a      	ldr	r2, [r7, #16]
200026a0:	4313      	orrs	r3, r2
200026a2:	613b      	str	r3, [r7, #16]
200026a4:	683b      	ldr	r3, [r7, #0]
200026a6:	2b00      	cmp	r3, #0
200026a8:	d052      	beq.n	20002750 <JTAG_TransferFast+0x240>
200026aa:	683b      	ldr	r3, [r7, #0]
200026ac:	693a      	ldr	r2, [r7, #16]
200026ae:	601a      	str	r2, [r3, #0]
200026b0:	e04e      	b.n	20002750 <JTAG_TransferFast+0x240>
200026b2:	683b      	ldr	r3, [r7, #0]
200026b4:	681b      	ldr	r3, [r3, #0]
200026b6:	613b      	str	r3, [r7, #16]
200026b8:	231f      	movs	r3, #31
200026ba:	60fb      	str	r3, [r7, #12]
200026bc:	e00e      	b.n	200026dc <JTAG_TransferFast+0x1cc>
200026be:	6938      	ldr	r0, [r7, #16]
200026c0:	f7ff fac6 	bl	20001c50 <PIN_TDI_OUT>
200026c4:	f7ff faa5 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200026c8:	bf00      	nop
200026ca:	f7ff fa9b 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200026ce:	bf00      	nop
200026d0:	693b      	ldr	r3, [r7, #16]
200026d2:	085b      	lsrs	r3, r3, #1
200026d4:	613b      	str	r3, [r7, #16]
200026d6:	68fb      	ldr	r3, [r7, #12]
200026d8:	3b01      	subs	r3, #1
200026da:	60fb      	str	r3, [r7, #12]
200026dc:	68fb      	ldr	r3, [r7, #12]
200026de:	2b00      	cmp	r3, #0
200026e0:	d1ed      	bne.n	200026be <JTAG_TransferFast+0x1ae>
200026e2:	4b33      	ldr	r3, [pc, #204]	@ (200027b0 <JTAG_TransferFast+0x2a0>)
200026e4:	7e1b      	ldrb	r3, [r3, #24]
200026e6:	461a      	mov	r2, r3
200026e8:	4b31      	ldr	r3, [pc, #196]	@ (200027b0 <JTAG_TransferFast+0x2a0>)
200026ea:	7e5b      	ldrb	r3, [r3, #25]
200026ec:	1ad3      	subs	r3, r2, r3
200026ee:	3b01      	subs	r3, #1
200026f0:	60fb      	str	r3, [r7, #12]
200026f2:	68fb      	ldr	r3, [r7, #12]
200026f4:	2b00      	cmp	r3, #0
200026f6:	d020      	beq.n	2000273a <JTAG_TransferFast+0x22a>
200026f8:	6938      	ldr	r0, [r7, #16]
200026fa:	f7ff faa9 	bl	20001c50 <PIN_TDI_OUT>
200026fe:	f7ff fa88 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002702:	bf00      	nop
20002704:	f7ff fa7e 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002708:	bf00      	nop
2000270a:	68fb      	ldr	r3, [r7, #12]
2000270c:	3b01      	subs	r3, #1
2000270e:	60fb      	str	r3, [r7, #12]
20002710:	e008      	b.n	20002724 <JTAG_TransferFast+0x214>
20002712:	f7ff fa7e 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002716:	bf00      	nop
20002718:	f7ff fa74 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000271c:	bf00      	nop
2000271e:	68fb      	ldr	r3, [r7, #12]
20002720:	3b01      	subs	r3, #1
20002722:	60fb      	str	r3, [r7, #12]
20002724:	68fb      	ldr	r3, [r7, #12]
20002726:	2b00      	cmp	r3, #0
20002728:	d1f3      	bne.n	20002712 <JTAG_TransferFast+0x202>
2000272a:	f7ff fa79 	bl	20001c20 <PIN_SWDIO_TMS_SET>
2000272e:	f7ff fa70 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002732:	bf00      	nop
20002734:	f7ff fa66 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002738:	e00a      	b.n	20002750 <JTAG_TransferFast+0x240>
2000273a:	f7ff fa71 	bl	20001c20 <PIN_SWDIO_TMS_SET>
2000273e:	6938      	ldr	r0, [r7, #16]
20002740:	f7ff fa86 	bl	20001c50 <PIN_TDI_OUT>
20002744:	f7ff fa65 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002748:	bf00      	nop
2000274a:	f7ff fa5b 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000274e:	bf00      	nop
20002750:	f7ff fa5f 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002754:	bf00      	nop
20002756:	f7ff fa55 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000275a:	bf00      	nop
2000275c:	f7ff fa6c 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
20002760:	f7ff fa57 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002764:	bf00      	nop
20002766:	f7ff fa4d 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000276a:	bf00      	nop
2000276c:	2001      	movs	r0, #1
2000276e:	f7ff fa6f 	bl	20001c50 <PIN_TDI_OUT>
20002772:	687b      	ldr	r3, [r7, #4]
20002774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20002778:	2b00      	cmp	r3, #0
2000277a:	d004      	beq.n	20002786 <JTAG_TransferFast+0x276>
2000277c:	f7ff fa7a 	bl	20001c74 <TIMESTAMP_GET>
20002780:	4603      	mov	r3, r0
20002782:	4a0b      	ldr	r2, [pc, #44]	@ (200027b0 <JTAG_TransferFast+0x2a0>)
20002784:	6093      	str	r3, [r2, #8]
20002786:	4b0a      	ldr	r3, [pc, #40]	@ (200027b0 <JTAG_TransferFast+0x2a0>)
20002788:	7b1b      	ldrb	r3, [r3, #12]
2000278a:	60fb      	str	r3, [r7, #12]
2000278c:	e005      	b.n	2000279a <JTAG_TransferFast+0x28a>
2000278e:	f7ff fa40 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002792:	bf00      	nop
20002794:	f7ff fa36 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002798:	bf00      	nop
2000279a:	68fb      	ldr	r3, [r7, #12]
2000279c:	1e5a      	subs	r2, r3, #1
2000279e:	60fa      	str	r2, [r7, #12]
200027a0:	2b00      	cmp	r3, #0
200027a2:	d1f4      	bne.n	2000278e <JTAG_TransferFast+0x27e>
200027a4:	68bb      	ldr	r3, [r7, #8]
200027a6:	b2db      	uxtb	r3, r3
200027a8:	4618      	mov	r0, r3
200027aa:	3718      	adds	r7, #24
200027ac:	46bd      	mov	sp, r7
200027ae:	bd80      	pop	{r7, pc}
200027b0:	2000c770 	.word	0x2000c770

200027b4 <JTAG_IR_Slow>:

#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_SLOW(DAP_Data.clock_delay)
JTAG_IR_Function(Slow)
200027b4:	b580      	push	{r7, lr}
200027b6:	b09c      	sub	sp, #112	@ 0x70
200027b8:	af00      	add	r7, sp, #0
200027ba:	6078      	str	r0, [r7, #4]
200027bc:	f7ff fa30 	bl	20001c20 <PIN_SWDIO_TMS_SET>
200027c0:	f7ff fa27 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200027c4:	4b63      	ldr	r3, [pc, #396]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
200027c6:	685b      	ldr	r3, [r3, #4]
200027c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
200027ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200027cc:	3b01      	subs	r3, #1
200027ce:	d1fd      	bne.n	200027cc <JTAG_IR_Slow+0x18>
200027d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
200027d2:	bf00      	nop
200027d4:	f7ff fa16 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200027d8:	4b5e      	ldr	r3, [pc, #376]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
200027da:	685b      	ldr	r3, [r3, #4]
200027dc:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
200027de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200027e0:	3b01      	subs	r3, #1
200027e2:	d1fd      	bne.n	200027e0 <JTAG_IR_Slow+0x2c>
200027e4:	653b      	str	r3, [r7, #80]	@ 0x50
}
200027e6:	bf00      	nop
200027e8:	f7ff fa13 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200027ec:	4b59      	ldr	r3, [pc, #356]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
200027ee:	685b      	ldr	r3, [r3, #4]
200027f0:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
200027f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200027f4:	3b01      	subs	r3, #1
200027f6:	d1fd      	bne.n	200027f4 <JTAG_IR_Slow+0x40>
200027f8:	657b      	str	r3, [r7, #84]	@ 0x54
}
200027fa:	bf00      	nop
200027fc:	f7ff fa02 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002800:	4b54      	ldr	r3, [pc, #336]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002802:	685b      	ldr	r3, [r3, #4]
20002804:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20002806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20002808:	3b01      	subs	r3, #1
2000280a:	d1fd      	bne.n	20002808 <JTAG_IR_Slow+0x54>
2000280c:	65bb      	str	r3, [r7, #88]	@ 0x58
}
2000280e:	bf00      	nop
20002810:	f7ff fa12 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
20002814:	f7ff f9fd 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002818:	4b4e      	ldr	r3, [pc, #312]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
2000281a:	685b      	ldr	r3, [r3, #4]
2000281c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
2000281e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20002820:	3b01      	subs	r3, #1
20002822:	d1fd      	bne.n	20002820 <JTAG_IR_Slow+0x6c>
20002824:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20002826:	bf00      	nop
20002828:	f7ff f9ec 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000282c:	4b49      	ldr	r3, [pc, #292]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
2000282e:	685b      	ldr	r3, [r3, #4]
20002830:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20002832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20002834:	3b01      	subs	r3, #1
20002836:	d1fd      	bne.n	20002834 <JTAG_IR_Slow+0x80>
20002838:	663b      	str	r3, [r7, #96]	@ 0x60
}
2000283a:	bf00      	nop
2000283c:	f7ff f9e9 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002840:	4b44      	ldr	r3, [pc, #272]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002842:	685b      	ldr	r3, [r3, #4]
20002844:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20002846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002848:	3b01      	subs	r3, #1
2000284a:	d1fd      	bne.n	20002848 <JTAG_IR_Slow+0x94>
2000284c:	667b      	str	r3, [r7, #100]	@ 0x64
}
2000284e:	bf00      	nop
20002850:	f7ff f9d8 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002854:	4b3f      	ldr	r3, [pc, #252]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002856:	685b      	ldr	r3, [r3, #4]
20002858:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
2000285a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
2000285c:	3b01      	subs	r3, #1
2000285e:	d1fd      	bne.n	2000285c <JTAG_IR_Slow+0xa8>
20002860:	66bb      	str	r3, [r7, #104]	@ 0x68
}
20002862:	bf00      	nop
20002864:	2001      	movs	r0, #1
20002866:	f7ff f9f3 	bl	20001c50 <PIN_TDI_OUT>
2000286a:	4b3a      	ldr	r3, [pc, #232]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
2000286c:	7e5b      	ldrb	r3, [r3, #25]
2000286e:	4a39      	ldr	r2, [pc, #228]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002870:	3310      	adds	r3, #16
20002872:	005b      	lsls	r3, r3, #1
20002874:	4413      	add	r3, r2
20002876:	885b      	ldrh	r3, [r3, #2]
20002878:	66fb      	str	r3, [r7, #108]	@ 0x6c
2000287a:	e016      	b.n	200028aa <JTAG_IR_Slow+0xf6>
2000287c:	f7ff f9c9 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002880:	4b34      	ldr	r3, [pc, #208]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002882:	685b      	ldr	r3, [r3, #4]
20002884:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20002886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20002888:	3b01      	subs	r3, #1
2000288a:	d1fd      	bne.n	20002888 <JTAG_IR_Slow+0xd4>
2000288c:	647b      	str	r3, [r7, #68]	@ 0x44
}
2000288e:	bf00      	nop
20002890:	f7ff f9b8 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002894:	4b2f      	ldr	r3, [pc, #188]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002896:	685b      	ldr	r3, [r3, #4]
20002898:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
2000289a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2000289c:	3b01      	subs	r3, #1
2000289e:	d1fd      	bne.n	2000289c <JTAG_IR_Slow+0xe8>
200028a0:	64bb      	str	r3, [r7, #72]	@ 0x48
}
200028a2:	bf00      	nop
200028a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200028a6:	3b01      	subs	r3, #1
200028a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
200028aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200028ac:	2b00      	cmp	r3, #0
200028ae:	d1e5      	bne.n	2000287c <JTAG_IR_Slow+0xc8>
200028b0:	4b28      	ldr	r3, [pc, #160]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
200028b2:	7e5b      	ldrb	r3, [r3, #25]
200028b4:	461a      	mov	r2, r3
200028b6:	4b27      	ldr	r3, [pc, #156]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
200028b8:	4413      	add	r3, r2
200028ba:	7e9b      	ldrb	r3, [r3, #26]
200028bc:	3b01      	subs	r3, #1
200028be:	66fb      	str	r3, [r7, #108]	@ 0x6c
200028c0:	e01c      	b.n	200028fc <JTAG_IR_Slow+0x148>
200028c2:	6878      	ldr	r0, [r7, #4]
200028c4:	f7ff f9c4 	bl	20001c50 <PIN_TDI_OUT>
200028c8:	f7ff f9a3 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200028cc:	4b21      	ldr	r3, [pc, #132]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
200028ce:	685b      	ldr	r3, [r3, #4]
200028d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
200028d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200028d4:	3b01      	subs	r3, #1
200028d6:	d1fd      	bne.n	200028d4 <JTAG_IR_Slow+0x120>
200028d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
200028da:	bf00      	nop
200028dc:	f7ff f992 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200028e0:	4b1c      	ldr	r3, [pc, #112]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
200028e2:	685b      	ldr	r3, [r3, #4]
200028e4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
200028e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200028e8:	3b01      	subs	r3, #1
200028ea:	d1fd      	bne.n	200028e8 <JTAG_IR_Slow+0x134>
200028ec:	643b      	str	r3, [r7, #64]	@ 0x40
}
200028ee:	bf00      	nop
200028f0:	687b      	ldr	r3, [r7, #4]
200028f2:	085b      	lsrs	r3, r3, #1
200028f4:	607b      	str	r3, [r7, #4]
200028f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200028f8:	3b01      	subs	r3, #1
200028fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
200028fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200028fe:	2b00      	cmp	r3, #0
20002900:	d1df      	bne.n	200028c2 <JTAG_IR_Slow+0x10e>
20002902:	4b14      	ldr	r3, [pc, #80]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002904:	7e5b      	ldrb	r3, [r3, #25]
20002906:	4a13      	ldr	r2, [pc, #76]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002908:	3318      	adds	r3, #24
2000290a:	005b      	lsls	r3, r3, #1
2000290c:	4413      	add	r3, r2
2000290e:	885b      	ldrh	r3, [r3, #2]
20002910:	66fb      	str	r3, [r7, #108]	@ 0x6c
20002912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20002914:	2b00      	cmp	r3, #0
20002916:	d04f      	beq.n	200029b8 <JTAG_IR_Slow+0x204>
20002918:	6878      	ldr	r0, [r7, #4]
2000291a:	f7ff f999 	bl	20001c50 <PIN_TDI_OUT>
2000291e:	f7ff f978 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002922:	4b0c      	ldr	r3, [pc, #48]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002924:	685b      	ldr	r3, [r3, #4]
20002926:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20002928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000292a:	3b01      	subs	r3, #1
2000292c:	d1fd      	bne.n	2000292a <JTAG_IR_Slow+0x176>
2000292e:	637b      	str	r3, [r7, #52]	@ 0x34
}
20002930:	bf00      	nop
20002932:	f7ff f967 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002936:	4b07      	ldr	r3, [pc, #28]	@ (20002954 <JTAG_IR_Slow+0x1a0>)
20002938:	685b      	ldr	r3, [r3, #4]
2000293a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
2000293c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000293e:	3b01      	subs	r3, #1
20002940:	d1fd      	bne.n	2000293e <JTAG_IR_Slow+0x18a>
20002942:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20002944:	bf00      	nop
20002946:	2001      	movs	r0, #1
20002948:	f7ff f982 	bl	20001c50 <PIN_TDI_OUT>
2000294c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000294e:	3b01      	subs	r3, #1
20002950:	66fb      	str	r3, [r7, #108]	@ 0x6c
20002952:	e018      	b.n	20002986 <JTAG_IR_Slow+0x1d2>
20002954:	2000c770 	.word	0x2000c770
20002958:	f7ff f95b 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000295c:	4b3b      	ldr	r3, [pc, #236]	@ (20002a4c <JTAG_IR_Slow+0x298>)
2000295e:	685b      	ldr	r3, [r3, #4]
20002960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20002962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002964:	3b01      	subs	r3, #1
20002966:	d1fd      	bne.n	20002964 <JTAG_IR_Slow+0x1b0>
20002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
2000296a:	bf00      	nop
2000296c:	f7ff f94a 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002970:	4b36      	ldr	r3, [pc, #216]	@ (20002a4c <JTAG_IR_Slow+0x298>)
20002972:	685b      	ldr	r3, [r3, #4]
20002974:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002978:	3b01      	subs	r3, #1
2000297a:	d1fd      	bne.n	20002978 <JTAG_IR_Slow+0x1c4>
2000297c:	633b      	str	r3, [r7, #48]	@ 0x30
}
2000297e:	bf00      	nop
20002980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20002982:	3b01      	subs	r3, #1
20002984:	66fb      	str	r3, [r7, #108]	@ 0x6c
20002986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20002988:	2b00      	cmp	r3, #0
2000298a:	d1e5      	bne.n	20002958 <JTAG_IR_Slow+0x1a4>
2000298c:	f7ff f948 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002990:	f7ff f93f 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002994:	4b2d      	ldr	r3, [pc, #180]	@ (20002a4c <JTAG_IR_Slow+0x298>)
20002996:	685b      	ldr	r3, [r3, #4]
20002998:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
2000299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000299c:	3b01      	subs	r3, #1
2000299e:	d1fd      	bne.n	2000299c <JTAG_IR_Slow+0x1e8>
200029a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
200029a2:	bf00      	nop
200029a4:	f7ff f92e 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200029a8:	4b28      	ldr	r3, [pc, #160]	@ (20002a4c <JTAG_IR_Slow+0x298>)
200029aa:	685b      	ldr	r3, [r3, #4]
200029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
200029ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200029b0:	3b01      	subs	r3, #1
200029b2:	d1fd      	bne.n	200029b0 <JTAG_IR_Slow+0x1fc>
200029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
200029b6:	e018      	b.n	200029ea <JTAG_IR_Slow+0x236>
200029b8:	f7ff f932 	bl	20001c20 <PIN_SWDIO_TMS_SET>
200029bc:	6878      	ldr	r0, [r7, #4]
200029be:	f7ff f947 	bl	20001c50 <PIN_TDI_OUT>
200029c2:	f7ff f926 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200029c6:	4b21      	ldr	r3, [pc, #132]	@ (20002a4c <JTAG_IR_Slow+0x298>)
200029c8:	685b      	ldr	r3, [r3, #4]
200029ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
200029cc:	69fb      	ldr	r3, [r7, #28]
200029ce:	3b01      	subs	r3, #1
200029d0:	d1fd      	bne.n	200029ce <JTAG_IR_Slow+0x21a>
200029d2:	61fb      	str	r3, [r7, #28]
}
200029d4:	bf00      	nop
200029d6:	f7ff f915 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200029da:	4b1c      	ldr	r3, [pc, #112]	@ (20002a4c <JTAG_IR_Slow+0x298>)
200029dc:	685b      	ldr	r3, [r3, #4]
200029de:	623b      	str	r3, [r7, #32]
  __ASM volatile (
200029e0:	6a3b      	ldr	r3, [r7, #32]
200029e2:	3b01      	subs	r3, #1
200029e4:	d1fd      	bne.n	200029e2 <JTAG_IR_Slow+0x22e>
200029e6:	623b      	str	r3, [r7, #32]
}
200029e8:	bf00      	nop
200029ea:	f7ff f912 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200029ee:	4b17      	ldr	r3, [pc, #92]	@ (20002a4c <JTAG_IR_Slow+0x298>)
200029f0:	685b      	ldr	r3, [r3, #4]
200029f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
200029f4:	68fb      	ldr	r3, [r7, #12]
200029f6:	3b01      	subs	r3, #1
200029f8:	d1fd      	bne.n	200029f6 <JTAG_IR_Slow+0x242>
200029fa:	60fb      	str	r3, [r7, #12]
}
200029fc:	bf00      	nop
200029fe:	f7ff f901 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002a02:	4b12      	ldr	r3, [pc, #72]	@ (20002a4c <JTAG_IR_Slow+0x298>)
20002a04:	685b      	ldr	r3, [r3, #4]
20002a06:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20002a08:	693b      	ldr	r3, [r7, #16]
20002a0a:	3b01      	subs	r3, #1
20002a0c:	d1fd      	bne.n	20002a0a <JTAG_IR_Slow+0x256>
20002a0e:	613b      	str	r3, [r7, #16]
}
20002a10:	bf00      	nop
20002a12:	f7ff f911 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
20002a16:	f7ff f8fc 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (20002a4c <JTAG_IR_Slow+0x298>)
20002a1c:	685b      	ldr	r3, [r3, #4]
20002a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20002a20:	697b      	ldr	r3, [r7, #20]
20002a22:	3b01      	subs	r3, #1
20002a24:	d1fd      	bne.n	20002a22 <JTAG_IR_Slow+0x26e>
20002a26:	617b      	str	r3, [r7, #20]
}
20002a28:	bf00      	nop
20002a2a:	f7ff f8eb 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002a2e:	4b07      	ldr	r3, [pc, #28]	@ (20002a4c <JTAG_IR_Slow+0x298>)
20002a30:	685b      	ldr	r3, [r3, #4]
20002a32:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20002a34:	69bb      	ldr	r3, [r7, #24]
20002a36:	3b01      	subs	r3, #1
20002a38:	d1fd      	bne.n	20002a36 <JTAG_IR_Slow+0x282>
20002a3a:	61bb      	str	r3, [r7, #24]
}
20002a3c:	bf00      	nop
20002a3e:	2001      	movs	r0, #1
20002a40:	f7ff f906 	bl	20001c50 <PIN_TDI_OUT>
20002a44:	3770      	adds	r7, #112	@ 0x70
20002a46:	46bd      	mov	sp, r7
20002a48:	bd80      	pop	{r7, pc}
20002a4a:	bf00      	nop
20002a4c:	2000c770 	.word	0x2000c770

20002a50 <JTAG_TransferSlow>:
JTAG_TransferFunction(Slow)
20002a50:	b580      	push	{r7, lr}
20002a52:	b0b0      	sub	sp, #192	@ 0xc0
20002a54:	af00      	add	r7, sp, #0
20002a56:	6078      	str	r0, [r7, #4]
20002a58:	6039      	str	r1, [r7, #0]
20002a5a:	f7ff f8e1 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002a5e:	f7ff f8d8 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002a62:	4b8a      	ldr	r3, [pc, #552]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002a64:	685b      	ldr	r3, [r3, #4]
20002a66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  __ASM volatile (
20002a6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
20002a6e:	3b01      	subs	r3, #1
20002a70:	d1fd      	bne.n	20002a6e <JTAG_TransferSlow+0x1e>
20002a72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
20002a76:	bf00      	nop
20002a78:	f7ff f8c4 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002a7c:	4b83      	ldr	r3, [pc, #524]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002a7e:	685b      	ldr	r3, [r3, #4]
20002a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  __ASM volatile (
20002a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
20002a88:	3b01      	subs	r3, #1
20002a8a:	d1fd      	bne.n	20002a88 <JTAG_TransferSlow+0x38>
20002a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
20002a90:	bf00      	nop
20002a92:	f7ff f8d1 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
20002a96:	f7ff f8bc 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002a9a:	4b7c      	ldr	r3, [pc, #496]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002a9c:	685b      	ldr	r3, [r3, #4]
20002a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  __ASM volatile (
20002aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
20002aa6:	3b01      	subs	r3, #1
20002aa8:	d1fd      	bne.n	20002aa6 <JTAG_TransferSlow+0x56>
20002aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
20002aae:	bf00      	nop
20002ab0:	f7ff f8a8 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002ab4:	4b75      	ldr	r3, [pc, #468]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002ab6:	685b      	ldr	r3, [r3, #4]
20002ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  __ASM volatile (
20002abc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
20002ac0:	3b01      	subs	r3, #1
20002ac2:	d1fd      	bne.n	20002ac0 <JTAG_TransferSlow+0x70>
20002ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
}
20002ac8:	bf00      	nop
20002aca:	f7ff f8a2 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002ace:	4b6f      	ldr	r3, [pc, #444]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002ad0:	685b      	ldr	r3, [r3, #4]
20002ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  __ASM volatile (
20002ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
20002ada:	3b01      	subs	r3, #1
20002adc:	d1fd      	bne.n	20002ada <JTAG_TransferSlow+0x8a>
20002ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
}
20002ae2:	bf00      	nop
20002ae4:	f7ff f88e 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002ae8:	4b68      	ldr	r3, [pc, #416]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002aea:	685b      	ldr	r3, [r3, #4]
20002aec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  __ASM volatile (
20002af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
20002af4:	3b01      	subs	r3, #1
20002af6:	d1fd      	bne.n	20002af4 <JTAG_TransferSlow+0xa4>
20002af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
}
20002afc:	bf00      	nop
20002afe:	4b63      	ldr	r3, [pc, #396]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002b00:	7e5b      	ldrb	r3, [r3, #25]
20002b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002b06:	e01e      	b.n	20002b46 <JTAG_TransferSlow+0xf6>
20002b08:	f7ff f883 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002b0c:	4b5f      	ldr	r3, [pc, #380]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002b0e:	685b      	ldr	r3, [r3, #4]
20002b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile (
20002b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
20002b18:	3b01      	subs	r3, #1
20002b1a:	d1fd      	bne.n	20002b18 <JTAG_TransferSlow+0xc8>
20002b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
}
20002b20:	bf00      	nop
20002b22:	f7ff f86f 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002b26:	4b59      	ldr	r3, [pc, #356]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002b28:	685b      	ldr	r3, [r3, #4]
20002b2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  __ASM volatile (
20002b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
20002b32:	3b01      	subs	r3, #1
20002b34:	d1fd      	bne.n	20002b32 <JTAG_TransferSlow+0xe2>
20002b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
}
20002b3a:	bf00      	nop
20002b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002b40:	3b01      	subs	r3, #1
20002b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002b4a:	2b00      	cmp	r3, #0
20002b4c:	d1dc      	bne.n	20002b08 <JTAG_TransferSlow+0xb8>
20002b4e:	687b      	ldr	r3, [r7, #4]
20002b50:	085b      	lsrs	r3, r3, #1
20002b52:	4618      	mov	r0, r3
20002b54:	f7ff f87c 	bl	20001c50 <PIN_TDI_OUT>
20002b58:	f7ff f85b 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002b5c:	4b4b      	ldr	r3, [pc, #300]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002b5e:	685b      	ldr	r3, [r3, #4]
20002b60:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
20002b62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20002b64:	3b01      	subs	r3, #1
20002b66:	d1fd      	bne.n	20002b64 <JTAG_TransferSlow+0x114>
20002b68:	67bb      	str	r3, [r7, #120]	@ 0x78
}
20002b6a:	bf00      	nop
20002b6c:	f7ff f87a 	bl	20001c64 <PIN_TDO_IN>
20002b70:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002b74:	f7ff f846 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002b78:	4b44      	ldr	r3, [pc, #272]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002b7a:	685b      	ldr	r3, [r3, #4]
20002b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile (
20002b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20002b80:	3b01      	subs	r3, #1
20002b82:	d1fd      	bne.n	20002b80 <JTAG_TransferSlow+0x130>
20002b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
}
20002b86:	bf00      	nop
20002b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
20002b8c:	005b      	lsls	r3, r3, #1
20002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20002b92:	687b      	ldr	r3, [r7, #4]
20002b94:	089b      	lsrs	r3, r3, #2
20002b96:	4618      	mov	r0, r3
20002b98:	f7ff f85a 	bl	20001c50 <PIN_TDI_OUT>
20002b9c:	f7ff f839 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002ba0:	4b3a      	ldr	r3, [pc, #232]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002ba2:	685b      	ldr	r3, [r3, #4]
20002ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  __ASM volatile (
20002ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
20002bac:	3b01      	subs	r3, #1
20002bae:	d1fd      	bne.n	20002bac <JTAG_TransferSlow+0x15c>
20002bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
}
20002bb4:	bf00      	nop
20002bb6:	f7ff f855 	bl	20001c64 <PIN_TDO_IN>
20002bba:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002bbe:	f7ff f821 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002bc2:	4b32      	ldr	r3, [pc, #200]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002bc4:	685b      	ldr	r3, [r3, #4]
20002bc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  __ASM volatile (
20002bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
20002bce:	3b01      	subs	r3, #1
20002bd0:	d1fd      	bne.n	20002bce <JTAG_TransferSlow+0x17e>
20002bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
}
20002bd6:	bf00      	nop
20002bd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
20002bdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
20002be0:	4313      	orrs	r3, r2
20002be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20002be6:	687b      	ldr	r3, [r7, #4]
20002be8:	08db      	lsrs	r3, r3, #3
20002bea:	4618      	mov	r0, r3
20002bec:	f7ff f830 	bl	20001c50 <PIN_TDI_OUT>
20002bf0:	f7ff f80f 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002bf4:	4b25      	ldr	r3, [pc, #148]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002bf6:	685b      	ldr	r3, [r3, #4]
20002bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile (
20002bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
20002c00:	3b01      	subs	r3, #1
20002c02:	d1fd      	bne.n	20002c00 <JTAG_TransferSlow+0x1b0>
20002c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
}
20002c08:	bf00      	nop
20002c0a:	f7ff f82b 	bl	20001c64 <PIN_TDO_IN>
20002c0e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002c12:	f7fe fff7 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002c16:	4b1d      	ldr	r3, [pc, #116]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002c18:	685b      	ldr	r3, [r3, #4]
20002c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  __ASM volatile (
20002c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20002c22:	3b01      	subs	r3, #1
20002c24:	d1fd      	bne.n	20002c22 <JTAG_TransferSlow+0x1d2>
20002c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
}
20002c2a:	bf00      	nop
20002c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
20002c30:	009b      	lsls	r3, r3, #2
20002c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
20002c36:	4313      	orrs	r3, r2
20002c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20002c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
20002c40:	2b01      	cmp	r3, #1
20002c42:	d016      	beq.n	20002c72 <JTAG_TransferSlow+0x222>
20002c44:	f7fe ffec 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002c48:	f7fe ffe3 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002c4e:	685b      	ldr	r3, [r3, #4]
20002c50:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
20002c52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
20002c54:	3b01      	subs	r3, #1
20002c56:	d1fd      	bne.n	20002c54 <JTAG_TransferSlow+0x204>
20002c58:	673b      	str	r3, [r7, #112]	@ 0x70
}
20002c5a:	bf00      	nop
20002c5c:	f7fe ffd2 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002c60:	4b0a      	ldr	r3, [pc, #40]	@ (20002c8c <JTAG_TransferSlow+0x23c>)
20002c62:	685b      	ldr	r3, [r3, #4]
20002c64:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
20002c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20002c68:	3b01      	subs	r3, #1
20002c6a:	d1fd      	bne.n	20002c68 <JTAG_TransferSlow+0x218>
20002c6c:	677b      	str	r3, [r7, #116]	@ 0x74
}
20002c6e:	bf00      	nop
20002c70:	e16d      	b.n	20002f4e <JTAG_TransferSlow+0x4fe>
20002c72:	687b      	ldr	r3, [r7, #4]
20002c74:	f003 0302 	and.w	r3, r3, #2
20002c78:	2b00      	cmp	r3, #0
20002c7a:	f000 80c0 	beq.w	20002dfe <JTAG_TransferSlow+0x3ae>
20002c7e:	2300      	movs	r3, #0
20002c80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002c84:	231f      	movs	r3, #31
20002c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002c8a:	e02b      	b.n	20002ce4 <JTAG_TransferSlow+0x294>
20002c8c:	2000c770 	.word	0x2000c770
20002c90:	f7fe ffbf 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002c94:	4b86      	ldr	r3, [pc, #536]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002c96:	685b      	ldr	r3, [r3, #4]
20002c98:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
20002c9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20002c9c:	3b01      	subs	r3, #1
20002c9e:	d1fd      	bne.n	20002c9c <JTAG_TransferSlow+0x24c>
20002ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
}
20002ca2:	bf00      	nop
20002ca4:	f7fe ffde 	bl	20001c64 <PIN_TDO_IN>
20002ca8:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002cac:	f7fe ffaa 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002cb0:	4b7f      	ldr	r3, [pc, #508]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002cb2:	685b      	ldr	r3, [r3, #4]
20002cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
20002cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20002cb8:	3b01      	subs	r3, #1
20002cba:	d1fd      	bne.n	20002cb8 <JTAG_TransferSlow+0x268>
20002cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
20002cbe:	bf00      	nop
20002cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
20002cc4:	07db      	lsls	r3, r3, #31
20002cc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
20002cca:	4313      	orrs	r3, r2
20002ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
20002cd4:	085b      	lsrs	r3, r3, #1
20002cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002cde:	3b01      	subs	r3, #1
20002ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002ce8:	2b00      	cmp	r3, #0
20002cea:	d1d1      	bne.n	20002c90 <JTAG_TransferSlow+0x240>
20002cec:	4b70      	ldr	r3, [pc, #448]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002cee:	7e1b      	ldrb	r3, [r3, #24]
20002cf0:	461a      	mov	r2, r3
20002cf2:	4b6f      	ldr	r3, [pc, #444]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002cf4:	7e5b      	ldrb	r3, [r3, #25]
20002cf6:	1ad3      	subs	r3, r2, r3
20002cf8:	3b01      	subs	r3, #1
20002cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002d02:	2b00      	cmp	r3, #0
20002d04:	d050      	beq.n	20002da8 <JTAG_TransferSlow+0x358>
20002d06:	f7fe ff84 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002d0a:	4b69      	ldr	r3, [pc, #420]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002d0c:	685b      	ldr	r3, [r3, #4]
20002d0e:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20002d10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20002d12:	3b01      	subs	r3, #1
20002d14:	d1fd      	bne.n	20002d12 <JTAG_TransferSlow+0x2c2>
20002d16:	663b      	str	r3, [r7, #96]	@ 0x60
}
20002d18:	bf00      	nop
20002d1a:	f7fe ffa3 	bl	20001c64 <PIN_TDO_IN>
20002d1e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002d22:	f7fe ff6f 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002d26:	4b62      	ldr	r3, [pc, #392]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002d28:	685b      	ldr	r3, [r3, #4]
20002d2a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20002d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002d2e:	3b01      	subs	r3, #1
20002d30:	d1fd      	bne.n	20002d2e <JTAG_TransferSlow+0x2de>
20002d32:	667b      	str	r3, [r7, #100]	@ 0x64
}
20002d34:	bf00      	nop
20002d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002d3a:	3b01      	subs	r3, #1
20002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002d40:	e018      	b.n	20002d74 <JTAG_TransferSlow+0x324>
20002d42:	f7fe ff66 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002d46:	4b5a      	ldr	r3, [pc, #360]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002d48:	685b      	ldr	r3, [r3, #4]
20002d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20002d4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20002d4e:	3b01      	subs	r3, #1
20002d50:	d1fd      	bne.n	20002d4e <JTAG_TransferSlow+0x2fe>
20002d52:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20002d54:	bf00      	nop
20002d56:	f7fe ff55 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002d5a:	4b55      	ldr	r3, [pc, #340]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002d5c:	685b      	ldr	r3, [r3, #4]
20002d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
20002d60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20002d62:	3b01      	subs	r3, #1
20002d64:	d1fd      	bne.n	20002d62 <JTAG_TransferSlow+0x312>
20002d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20002d68:	bf00      	nop
20002d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002d6e:	3b01      	subs	r3, #1
20002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002d78:	2b00      	cmp	r3, #0
20002d7a:	d1e2      	bne.n	20002d42 <JTAG_TransferSlow+0x2f2>
20002d7c:	f7fe ff50 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002d80:	f7fe ff47 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002d84:	4b4a      	ldr	r3, [pc, #296]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002d86:	685b      	ldr	r3, [r3, #4]
20002d88:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
20002d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20002d8c:	3b01      	subs	r3, #1
20002d8e:	d1fd      	bne.n	20002d8c <JTAG_TransferSlow+0x33c>
20002d90:	653b      	str	r3, [r7, #80]	@ 0x50
}
20002d92:	bf00      	nop
20002d94:	f7fe ff36 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002d98:	4b45      	ldr	r3, [pc, #276]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002d9a:	685b      	ldr	r3, [r3, #4]
20002d9c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
20002d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20002da0:	3b01      	subs	r3, #1
20002da2:	d1fd      	bne.n	20002da0 <JTAG_TransferSlow+0x350>
20002da4:	657b      	str	r3, [r7, #84]	@ 0x54
}
20002da6:	e019      	b.n	20002ddc <JTAG_TransferSlow+0x38c>
20002da8:	f7fe ff3a 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002dac:	f7fe ff31 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002db0:	4b3f      	ldr	r3, [pc, #252]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002db2:	685b      	ldr	r3, [r3, #4]
20002db4:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
20002db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20002db8:	3b01      	subs	r3, #1
20002dba:	d1fd      	bne.n	20002db8 <JTAG_TransferSlow+0x368>
20002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
}
20002dbe:	bf00      	nop
20002dc0:	f7fe ff50 	bl	20001c64 <PIN_TDO_IN>
20002dc4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002dc8:	f7fe ff1c 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002dcc:	4b38      	ldr	r3, [pc, #224]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002dce:	685b      	ldr	r3, [r3, #4]
20002dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
20002dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20002dd4:	3b01      	subs	r3, #1
20002dd6:	d1fd      	bne.n	20002dd4 <JTAG_TransferSlow+0x384>
20002dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
20002dda:	bf00      	nop
20002ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
20002de0:	07db      	lsls	r3, r3, #31
20002de2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
20002de6:	4313      	orrs	r3, r2
20002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002dec:	683b      	ldr	r3, [r7, #0]
20002dee:	2b00      	cmp	r3, #0
20002df0:	f000 80ad 	beq.w	20002f4e <JTAG_TransferSlow+0x4fe>
20002df4:	683b      	ldr	r3, [r7, #0]
20002df6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
20002dfa:	601a      	str	r2, [r3, #0]
20002dfc:	e0a7      	b.n	20002f4e <JTAG_TransferSlow+0x4fe>
20002dfe:	683b      	ldr	r3, [r7, #0]
20002e00:	681b      	ldr	r3, [r3, #0]
20002e02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002e06:	231f      	movs	r3, #31
20002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002e0c:	e021      	b.n	20002e52 <JTAG_TransferSlow+0x402>
20002e0e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20002e12:	f7fe ff1d 	bl	20001c50 <PIN_TDI_OUT>
20002e16:	f7fe fefc 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002e1a:	4b25      	ldr	r3, [pc, #148]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002e1c:	685b      	ldr	r3, [r3, #4]
20002e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20002e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002e22:	3b01      	subs	r3, #1
20002e24:	d1fd      	bne.n	20002e22 <JTAG_TransferSlow+0x3d2>
20002e26:	643b      	str	r3, [r7, #64]	@ 0x40
}
20002e28:	bf00      	nop
20002e2a:	f7fe feeb 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002e2e:	4b20      	ldr	r3, [pc, #128]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002e30:	685b      	ldr	r3, [r3, #4]
20002e32:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20002e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20002e36:	3b01      	subs	r3, #1
20002e38:	d1fd      	bne.n	20002e36 <JTAG_TransferSlow+0x3e6>
20002e3a:	647b      	str	r3, [r7, #68]	@ 0x44
}
20002e3c:	bf00      	nop
20002e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
20002e42:	085b      	lsrs	r3, r3, #1
20002e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002e48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002e4c:	3b01      	subs	r3, #1
20002e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002e56:	2b00      	cmp	r3, #0
20002e58:	d1d9      	bne.n	20002e0e <JTAG_TransferSlow+0x3be>
20002e5a:	4b15      	ldr	r3, [pc, #84]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002e5c:	7e1b      	ldrb	r3, [r3, #24]
20002e5e:	461a      	mov	r2, r3
20002e60:	4b13      	ldr	r3, [pc, #76]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002e62:	7e5b      	ldrb	r3, [r3, #25]
20002e64:	1ad3      	subs	r3, r2, r3
20002e66:	3b01      	subs	r3, #1
20002e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002e70:	2b00      	cmp	r3, #0
20002e72:	d052      	beq.n	20002f1a <JTAG_TransferSlow+0x4ca>
20002e74:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20002e78:	f7fe feea 	bl	20001c50 <PIN_TDI_OUT>
20002e7c:	f7fe fec9 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002e80:	4b0b      	ldr	r3, [pc, #44]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002e82:	685b      	ldr	r3, [r3, #4]
20002e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002e88:	3b01      	subs	r3, #1
20002e8a:	d1fd      	bne.n	20002e88 <JTAG_TransferSlow+0x438>
20002e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20002e8e:	bf00      	nop
20002e90:	f7fe feb8 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002e94:	4b06      	ldr	r3, [pc, #24]	@ (20002eb0 <JTAG_TransferSlow+0x460>)
20002e96:	685b      	ldr	r3, [r3, #4]
20002e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20002e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002e9c:	3b01      	subs	r3, #1
20002e9e:	d1fd      	bne.n	20002e9c <JTAG_TransferSlow+0x44c>
20002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20002ea2:	bf00      	nop
20002ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002ea8:	3b01      	subs	r3, #1
20002eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002eae:	e01a      	b.n	20002ee6 <JTAG_TransferSlow+0x496>
20002eb0:	2000c770 	.word	0x2000c770
20002eb4:	f7fe fead 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002eb8:	4b54      	ldr	r3, [pc, #336]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002eba:	685b      	ldr	r3, [r3, #4]
20002ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002ec0:	3b01      	subs	r3, #1
20002ec2:	d1fd      	bne.n	20002ec0 <JTAG_TransferSlow+0x470>
20002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
}
20002ec6:	bf00      	nop
20002ec8:	f7fe fe9c 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002ecc:	4b4f      	ldr	r3, [pc, #316]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002ece:	685b      	ldr	r3, [r3, #4]
20002ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002ed4:	3b01      	subs	r3, #1
20002ed6:	d1fd      	bne.n	20002ed4 <JTAG_TransferSlow+0x484>
20002ed8:	637b      	str	r3, [r7, #52]	@ 0x34
}
20002eda:	bf00      	nop
20002edc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002ee0:	3b01      	subs	r3, #1
20002ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002eea:	2b00      	cmp	r3, #0
20002eec:	d1e2      	bne.n	20002eb4 <JTAG_TransferSlow+0x464>
20002eee:	f7fe fe97 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002ef2:	f7fe fe8e 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002ef6:	4b45      	ldr	r3, [pc, #276]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002ef8:	685b      	ldr	r3, [r3, #4]
20002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002efe:	3b01      	subs	r3, #1
20002f00:	d1fd      	bne.n	20002efe <JTAG_TransferSlow+0x4ae>
20002f02:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20002f04:	bf00      	nop
20002f06:	f7fe fe7d 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002f0a:	4b40      	ldr	r3, [pc, #256]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002f0c:	685b      	ldr	r3, [r3, #4]
20002f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20002f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002f12:	3b01      	subs	r3, #1
20002f14:	d1fd      	bne.n	20002f12 <JTAG_TransferSlow+0x4c2>
20002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20002f18:	e019      	b.n	20002f4e <JTAG_TransferSlow+0x4fe>
20002f1a:	f7fe fe81 	bl	20001c20 <PIN_SWDIO_TMS_SET>
20002f1e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20002f22:	f7fe fe95 	bl	20001c50 <PIN_TDI_OUT>
20002f26:	f7fe fe74 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002f2a:	4b38      	ldr	r3, [pc, #224]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002f2c:	685b      	ldr	r3, [r3, #4]
20002f2e:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20002f30:	6a3b      	ldr	r3, [r7, #32]
20002f32:	3b01      	subs	r3, #1
20002f34:	d1fd      	bne.n	20002f32 <JTAG_TransferSlow+0x4e2>
20002f36:	623b      	str	r3, [r7, #32]
}
20002f38:	bf00      	nop
20002f3a:	f7fe fe63 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002f3e:	4b33      	ldr	r3, [pc, #204]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002f40:	685b      	ldr	r3, [r3, #4]
20002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002f46:	3b01      	subs	r3, #1
20002f48:	d1fd      	bne.n	20002f46 <JTAG_TransferSlow+0x4f6>
20002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
20002f4c:	bf00      	nop
20002f4e:	f7fe fe60 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002f52:	4b2e      	ldr	r3, [pc, #184]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002f54:	685b      	ldr	r3, [r3, #4]
20002f56:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20002f58:	693b      	ldr	r3, [r7, #16]
20002f5a:	3b01      	subs	r3, #1
20002f5c:	d1fd      	bne.n	20002f5a <JTAG_TransferSlow+0x50a>
20002f5e:	613b      	str	r3, [r7, #16]
}
20002f60:	bf00      	nop
20002f62:	f7fe fe4f 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002f66:	4b29      	ldr	r3, [pc, #164]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002f68:	685b      	ldr	r3, [r3, #4]
20002f6a:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20002f6c:	697b      	ldr	r3, [r7, #20]
20002f6e:	3b01      	subs	r3, #1
20002f70:	d1fd      	bne.n	20002f6e <JTAG_TransferSlow+0x51e>
20002f72:	617b      	str	r3, [r7, #20]
}
20002f74:	bf00      	nop
20002f76:	f7fe fe5f 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
20002f7a:	f7fe fe4a 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002f7e:	4b23      	ldr	r3, [pc, #140]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002f80:	685b      	ldr	r3, [r3, #4]
20002f82:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20002f84:	69bb      	ldr	r3, [r7, #24]
20002f86:	3b01      	subs	r3, #1
20002f88:	d1fd      	bne.n	20002f86 <JTAG_TransferSlow+0x536>
20002f8a:	61bb      	str	r3, [r7, #24]
}
20002f8c:	bf00      	nop
20002f8e:	f7fe fe39 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002f92:	4b1e      	ldr	r3, [pc, #120]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002f94:	685b      	ldr	r3, [r3, #4]
20002f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20002f98:	69fb      	ldr	r3, [r7, #28]
20002f9a:	3b01      	subs	r3, #1
20002f9c:	d1fd      	bne.n	20002f9a <JTAG_TransferSlow+0x54a>
20002f9e:	61fb      	str	r3, [r7, #28]
}
20002fa0:	bf00      	nop
20002fa2:	2001      	movs	r0, #1
20002fa4:	f7fe fe54 	bl	20001c50 <PIN_TDI_OUT>
20002fa8:	687b      	ldr	r3, [r7, #4]
20002faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20002fae:	2b00      	cmp	r3, #0
20002fb0:	d004      	beq.n	20002fbc <JTAG_TransferSlow+0x56c>
20002fb2:	f7fe fe5f 	bl	20001c74 <TIMESTAMP_GET>
20002fb6:	4603      	mov	r3, r0
20002fb8:	4a14      	ldr	r2, [pc, #80]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002fba:	6093      	str	r3, [r2, #8]
20002fbc:	4b13      	ldr	r3, [pc, #76]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002fbe:	7b1b      	ldrb	r3, [r3, #12]
20002fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002fc4:	e013      	b.n	20002fee <JTAG_TransferSlow+0x59e>
20002fc6:	f7fe fe24 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20002fca:	4b10      	ldr	r3, [pc, #64]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002fcc:	685b      	ldr	r3, [r3, #4]
20002fce:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
20002fd0:	68bb      	ldr	r3, [r7, #8]
20002fd2:	3b01      	subs	r3, #1
20002fd4:	d1fd      	bne.n	20002fd2 <JTAG_TransferSlow+0x582>
20002fd6:	60bb      	str	r3, [r7, #8]
}
20002fd8:	bf00      	nop
20002fda:	f7fe fe13 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20002fde:	4b0b      	ldr	r3, [pc, #44]	@ (2000300c <JTAG_TransferSlow+0x5bc>)
20002fe0:	685b      	ldr	r3, [r3, #4]
20002fe2:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20002fe4:	68fb      	ldr	r3, [r7, #12]
20002fe6:	3b01      	subs	r3, #1
20002fe8:	d1fd      	bne.n	20002fe6 <JTAG_TransferSlow+0x596>
20002fea:	60fb      	str	r3, [r7, #12]
}
20002fec:	bf00      	nop
20002fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002ff2:	1e5a      	subs	r2, r3, #1
20002ff4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
20002ff8:	2b00      	cmp	r3, #0
20002ffa:	d1e4      	bne.n	20002fc6 <JTAG_TransferSlow+0x576>
20002ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
20003000:	b2db      	uxtb	r3, r3
20003002:	4618      	mov	r0, r3
20003004:	37c0      	adds	r7, #192	@ 0xc0
20003006:	46bd      	mov	sp, r7
20003008:	bd80      	pop	{r7, pc}
2000300a:	bf00      	nop
2000300c:	2000c770 	.word	0x2000c770

20003010 <JTAG_ReadIDCode>:


// JTAG Read IDCODE register
//   return: value read
uint32_t JTAG_ReadIDCode (void) {
20003010:	b580      	push	{r7, lr}
20003012:	b094      	sub	sp, #80	@ 0x50
20003014:	af00      	add	r7, sp, #0
  uint32_t bit;
  uint32_t val;
  uint32_t n;

  PIN_TMS_SET();
20003016:	f7fe fe03 	bl	20001c20 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
2000301a:	f7fe fdfa 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000301e:	4b68      	ldr	r3, [pc, #416]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003020:	685b      	ldr	r3, [r3, #4]
20003022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20003024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003026:	3b01      	subs	r3, #1
20003028:	d1fd      	bne.n	20003026 <JTAG_ReadIDCode+0x16>
2000302a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
2000302c:	bf00      	nop
2000302e:	f7fe fde9 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20003032:	4b63      	ldr	r3, [pc, #396]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003034:	685b      	ldr	r3, [r3, #4]
20003036:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000303a:	3b01      	subs	r3, #1
2000303c:	d1fd      	bne.n	2000303a <JTAG_ReadIDCode+0x2a>
2000303e:	633b      	str	r3, [r7, #48]	@ 0x30
}
20003040:	bf00      	nop
  PIN_TMS_CLR();
20003042:	f7fe fdf9 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
20003046:	f7fe fde4 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000304a:	4b5d      	ldr	r3, [pc, #372]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
2000304c:	685b      	ldr	r3, [r3, #4]
2000304e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003052:	3b01      	subs	r3, #1
20003054:	d1fd      	bne.n	20003052 <JTAG_ReadIDCode+0x42>
20003056:	637b      	str	r3, [r7, #52]	@ 0x34
}
20003058:	bf00      	nop
2000305a:	f7fe fdd3 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000305e:	4b58      	ldr	r3, [pc, #352]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003060:	685b      	ldr	r3, [r3, #4]
20003062:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20003066:	3b01      	subs	r3, #1
20003068:	d1fd      	bne.n	20003066 <JTAG_ReadIDCode+0x56>
2000306a:	63bb      	str	r3, [r7, #56]	@ 0x38
}
2000306c:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
2000306e:	f7fe fdd0 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003072:	4b53      	ldr	r3, [pc, #332]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003074:	685b      	ldr	r3, [r3, #4]
20003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20003078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000307a:	3b01      	subs	r3, #1
2000307c:	d1fd      	bne.n	2000307a <JTAG_ReadIDCode+0x6a>
2000307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003080:	bf00      	nop
20003082:	f7fe fdbf 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20003086:	4b4e      	ldr	r3, [pc, #312]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003088:	685b      	ldr	r3, [r3, #4]
2000308a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
2000308c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000308e:	3b01      	subs	r3, #1
20003090:	d1fd      	bne.n	2000308e <JTAG_ReadIDCode+0x7e>
20003092:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003094:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003096:	4b4a      	ldr	r3, [pc, #296]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003098:	7e5b      	ldrb	r3, [r3, #25]
2000309a:	64bb      	str	r3, [r7, #72]	@ 0x48
2000309c:	e016      	b.n	200030cc <JTAG_ReadIDCode+0xbc>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
2000309e:	f7fe fdb8 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200030a2:	4b47      	ldr	r3, [pc, #284]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
200030a4:	685b      	ldr	r3, [r3, #4]
200030a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
200030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200030aa:	3b01      	subs	r3, #1
200030ac:	d1fd      	bne.n	200030aa <JTAG_ReadIDCode+0x9a>
200030ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
200030b0:	bf00      	nop
200030b2:	f7fe fda7 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200030b6:	4b42      	ldr	r3, [pc, #264]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
200030b8:	685b      	ldr	r3, [r3, #4]
200030ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
200030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200030be:	3b01      	subs	r3, #1
200030c0:	d1fd      	bne.n	200030be <JTAG_ReadIDCode+0xae>
200030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
}
200030c4:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
200030c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
200030c8:	3b01      	subs	r3, #1
200030ca:	64bb      	str	r3, [r7, #72]	@ 0x48
200030cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
200030ce:	2b00      	cmp	r3, #0
200030d0:	d1e5      	bne.n	2000309e <JTAG_ReadIDCode+0x8e>
  }

  val = 0U;
200030d2:	2300      	movs	r3, #0
200030d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
200030d6:	231f      	movs	r3, #31
200030d8:	64bb      	str	r3, [r7, #72]	@ 0x48
200030da:	e021      	b.n	20003120 <JTAG_ReadIDCode+0x110>
    JTAG_CYCLE_TDO(bit);                    /* Get D0..D30 */
200030dc:	f7fe fd99 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200030e0:	4b37      	ldr	r3, [pc, #220]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
200030e2:	685b      	ldr	r3, [r3, #4]
200030e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
200030e6:	69fb      	ldr	r3, [r7, #28]
200030e8:	3b01      	subs	r3, #1
200030ea:	d1fd      	bne.n	200030e8 <JTAG_ReadIDCode+0xd8>
200030ec:	61fb      	str	r3, [r7, #28]
}
200030ee:	bf00      	nop
200030f0:	f7fe fdb8 	bl	20001c64 <PIN_TDO_IN>
200030f4:	6478      	str	r0, [r7, #68]	@ 0x44
200030f6:	f7fe fd85 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200030fa:	4b31      	ldr	r3, [pc, #196]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
200030fc:	685b      	ldr	r3, [r3, #4]
200030fe:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003100:	6a3b      	ldr	r3, [r7, #32]
20003102:	3b01      	subs	r3, #1
20003104:	d1fd      	bne.n	20003102 <JTAG_ReadIDCode+0xf2>
20003106:	623b      	str	r3, [r7, #32]
}
20003108:	bf00      	nop
    val  |= bit << 31;
2000310a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000310c:	07db      	lsls	r3, r3, #31
2000310e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20003110:	4313      	orrs	r3, r2
20003112:	64fb      	str	r3, [r7, #76]	@ 0x4c
    val >>= 1;
20003114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20003116:	085b      	lsrs	r3, r3, #1
20003118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
2000311a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2000311c:	3b01      	subs	r3, #1
2000311e:	64bb      	str	r3, [r7, #72]	@ 0x48
20003120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003122:	2b00      	cmp	r3, #0
20003124:	d1da      	bne.n	200030dc <JTAG_ReadIDCode+0xcc>
  }
  PIN_TMS_SET();
20003126:	f7fe fd7b 	bl	20001c20 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TDO(bit);                      /* Get D31 & Exit1-DR */
2000312a:	f7fe fd72 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000312e:	4b24      	ldr	r3, [pc, #144]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003130:	685b      	ldr	r3, [r3, #4]
20003132:	607b      	str	r3, [r7, #4]
  __ASM volatile (
20003134:	687b      	ldr	r3, [r7, #4]
20003136:	3b01      	subs	r3, #1
20003138:	d1fd      	bne.n	20003136 <JTAG_ReadIDCode+0x126>
2000313a:	607b      	str	r3, [r7, #4]
}
2000313c:	bf00      	nop
2000313e:	f7fe fd91 	bl	20001c64 <PIN_TDO_IN>
20003142:	6478      	str	r0, [r7, #68]	@ 0x44
20003144:	f7fe fd5e 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20003148:	4b1d      	ldr	r3, [pc, #116]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
2000314a:	685b      	ldr	r3, [r3, #4]
2000314c:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
2000314e:	68bb      	ldr	r3, [r7, #8]
20003150:	3b01      	subs	r3, #1
20003152:	d1fd      	bne.n	20003150 <JTAG_ReadIDCode+0x140>
20003154:	60bb      	str	r3, [r7, #8]
}
20003156:	bf00      	nop
  val |= bit << 31;
20003158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000315a:	07db      	lsls	r3, r3, #31
2000315c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
2000315e:	4313      	orrs	r3, r2
20003160:	64fb      	str	r3, [r7, #76]	@ 0x4c

  JTAG_CYCLE_TCK();                         /* Update-DR */
20003162:	f7fe fd56 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003166:	4b16      	ldr	r3, [pc, #88]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003168:	685b      	ldr	r3, [r3, #4]
2000316a:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
2000316c:	68fb      	ldr	r3, [r7, #12]
2000316e:	3b01      	subs	r3, #1
20003170:	d1fd      	bne.n	2000316e <JTAG_ReadIDCode+0x15e>
20003172:	60fb      	str	r3, [r7, #12]
}
20003174:	bf00      	nop
20003176:	f7fe fd45 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000317a:	4b11      	ldr	r3, [pc, #68]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
2000317c:	685b      	ldr	r3, [r3, #4]
2000317e:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003180:	693b      	ldr	r3, [r7, #16]
20003182:	3b01      	subs	r3, #1
20003184:	d1fd      	bne.n	20003182 <JTAG_ReadIDCode+0x172>
20003186:	613b      	str	r3, [r7, #16]
}
20003188:	bf00      	nop
  PIN_TMS_CLR();
2000318a:	f7fe fd55 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
2000318e:	f7fe fd40 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003192:	4b0b      	ldr	r3, [pc, #44]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
20003194:	685b      	ldr	r3, [r3, #4]
20003196:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003198:	697b      	ldr	r3, [r7, #20]
2000319a:	3b01      	subs	r3, #1
2000319c:	d1fd      	bne.n	2000319a <JTAG_ReadIDCode+0x18a>
2000319e:	617b      	str	r3, [r7, #20]
}
200031a0:	bf00      	nop
200031a2:	f7fe fd2f 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200031a6:	4b06      	ldr	r3, [pc, #24]	@ (200031c0 <JTAG_ReadIDCode+0x1b0>)
200031a8:	685b      	ldr	r3, [r3, #4]
200031aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
200031ac:	69bb      	ldr	r3, [r7, #24]
200031ae:	3b01      	subs	r3, #1
200031b0:	d1fd      	bne.n	200031ae <JTAG_ReadIDCode+0x19e>
200031b2:	61bb      	str	r3, [r7, #24]
}
200031b4:	bf00      	nop

  return (val);
200031b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
200031b8:	4618      	mov	r0, r3
200031ba:	3750      	adds	r7, #80	@ 0x50
200031bc:	46bd      	mov	sp, r7
200031be:	bd80      	pop	{r7, pc}
200031c0:	2000c770 	.word	0x2000c770

200031c4 <JTAG_WriteAbort>:


// JTAG Write ABORT register
//   data:   value to write
//   return: none
void JTAG_WriteAbort (uint32_t data) {
200031c4:	b580      	push	{r7, lr}
200031c6:	b0a0      	sub	sp, #128	@ 0x80
200031c8:	af00      	add	r7, sp, #0
200031ca:	6078      	str	r0, [r7, #4]
  uint32_t n;

  PIN_TMS_SET();
200031cc:	f7fe fd28 	bl	20001c20 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
200031d0:	f7fe fd1f 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200031d4:	4b70      	ldr	r3, [pc, #448]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
200031d6:	685b      	ldr	r3, [r3, #4]
200031d8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
200031da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
200031dc:	3b01      	subs	r3, #1
200031de:	d1fd      	bne.n	200031dc <JTAG_WriteAbort+0x18>
200031e0:	667b      	str	r3, [r7, #100]	@ 0x64
}
200031e2:	bf00      	nop
200031e4:	f7fe fd0e 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200031e8:	4b6b      	ldr	r3, [pc, #428]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
200031ea:	685b      	ldr	r3, [r3, #4]
200031ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
200031ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
200031f0:	3b01      	subs	r3, #1
200031f2:	d1fd      	bne.n	200031f0 <JTAG_WriteAbort+0x2c>
200031f4:	66bb      	str	r3, [r7, #104]	@ 0x68
}
200031f6:	bf00      	nop
  PIN_TMS_CLR();
200031f8:	f7fe fd1e 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
200031fc:	f7fe fd09 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003200:	4b65      	ldr	r3, [pc, #404]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
20003202:	685b      	ldr	r3, [r3, #4]
20003204:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
20003206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003208:	3b01      	subs	r3, #1
2000320a:	d1fd      	bne.n	20003208 <JTAG_WriteAbort+0x44>
2000320c:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
2000320e:	bf00      	nop
20003210:	f7fe fcf8 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20003214:	4b60      	ldr	r3, [pc, #384]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
20003216:	685b      	ldr	r3, [r3, #4]
20003218:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
2000321a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
2000321c:	3b01      	subs	r3, #1
2000321e:	d1fd      	bne.n	2000321c <JTAG_WriteAbort+0x58>
20003220:	673b      	str	r3, [r7, #112]	@ 0x70
}
20003222:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
20003224:	f7fe fcf5 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003228:	4b5b      	ldr	r3, [pc, #364]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000322a:	685b      	ldr	r3, [r3, #4]
2000322c:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
2000322e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20003230:	3b01      	subs	r3, #1
20003232:	d1fd      	bne.n	20003230 <JTAG_WriteAbort+0x6c>
20003234:	677b      	str	r3, [r7, #116]	@ 0x74
}
20003236:	bf00      	nop
20003238:	f7fe fce4 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000323c:	4b56      	ldr	r3, [pc, #344]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000323e:	685b      	ldr	r3, [r3, #4]
20003240:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
20003242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20003244:	3b01      	subs	r3, #1
20003246:	d1fd      	bne.n	20003244 <JTAG_WriteAbort+0x80>
20003248:	67bb      	str	r3, [r7, #120]	@ 0x78
}
2000324a:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
2000324c:	4b52      	ldr	r3, [pc, #328]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000324e:	7e5b      	ldrb	r3, [r3, #25]
20003250:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003252:	e016      	b.n	20003282 <JTAG_WriteAbort+0xbe>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
20003254:	f7fe fcdd 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003258:	4b4f      	ldr	r3, [pc, #316]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000325a:	685b      	ldr	r3, [r3, #4]
2000325c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
2000325e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20003260:	3b01      	subs	r3, #1
20003262:	d1fd      	bne.n	20003260 <JTAG_WriteAbort+0x9c>
20003264:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20003266:	bf00      	nop
20003268:	f7fe fccc 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000326c:	4b4a      	ldr	r3, [pc, #296]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000326e:	685b      	ldr	r3, [r3, #4]
20003270:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20003272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20003274:	3b01      	subs	r3, #1
20003276:	d1fd      	bne.n	20003274 <JTAG_WriteAbort+0xb0>
20003278:	663b      	str	r3, [r7, #96]	@ 0x60
}
2000327a:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
2000327c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
2000327e:	3b01      	subs	r3, #1
20003280:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003282:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003284:	2b00      	cmp	r3, #0
20003286:	d1e5      	bne.n	20003254 <JTAG_WriteAbort+0x90>
  }

  PIN_TDI_OUT(0U);
20003288:	2000      	movs	r0, #0
2000328a:	f7fe fce1 	bl	20001c50 <PIN_TDI_OUT>
  JTAG_CYCLE_TCK();                         /* Set RnW=0 (Write) */
2000328e:	f7fe fcc0 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003292:	4b41      	ldr	r3, [pc, #260]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
20003294:	685b      	ldr	r3, [r3, #4]
20003296:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20003298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000329a:	3b01      	subs	r3, #1
2000329c:	d1fd      	bne.n	2000329a <JTAG_WriteAbort+0xd6>
2000329e:	647b      	str	r3, [r7, #68]	@ 0x44
}
200032a0:	bf00      	nop
200032a2:	f7fe fcaf 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200032a6:	4b3c      	ldr	r3, [pc, #240]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
200032a8:	685b      	ldr	r3, [r3, #4]
200032aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
200032ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
200032ae:	3b01      	subs	r3, #1
200032b0:	d1fd      	bne.n	200032ae <JTAG_WriteAbort+0xea>
200032b2:	64bb      	str	r3, [r7, #72]	@ 0x48
}
200032b4:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A2=0 */
200032b6:	f7fe fcac 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200032ba:	4b37      	ldr	r3, [pc, #220]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
200032bc:	685b      	ldr	r3, [r3, #4]
200032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
200032c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200032c2:	3b01      	subs	r3, #1
200032c4:	d1fd      	bne.n	200032c2 <JTAG_WriteAbort+0xfe>
200032c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
200032c8:	bf00      	nop
200032ca:	f7fe fc9b 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200032ce:	4b32      	ldr	r3, [pc, #200]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
200032d0:	685b      	ldr	r3, [r3, #4]
200032d2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
200032d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200032d6:	3b01      	subs	r3, #1
200032d8:	d1fd      	bne.n	200032d6 <JTAG_WriteAbort+0x112>
200032da:	653b      	str	r3, [r7, #80]	@ 0x50
}
200032dc:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A3=0 */
200032de:	f7fe fc98 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200032e2:	4b2d      	ldr	r3, [pc, #180]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
200032e4:	685b      	ldr	r3, [r3, #4]
200032e6:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
200032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200032ea:	3b01      	subs	r3, #1
200032ec:	d1fd      	bne.n	200032ea <JTAG_WriteAbort+0x126>
200032ee:	657b      	str	r3, [r7, #84]	@ 0x54
}
200032f0:	bf00      	nop
200032f2:	f7fe fc87 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200032f6:	4b28      	ldr	r3, [pc, #160]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
200032f8:	685b      	ldr	r3, [r3, #4]
200032fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
200032fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
200032fe:	3b01      	subs	r3, #1
20003300:	d1fd      	bne.n	200032fe <JTAG_WriteAbort+0x13a>
20003302:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20003304:	bf00      	nop

  for (n = 31U; n; n--) {
20003306:	231f      	movs	r3, #31
20003308:	67fb      	str	r3, [r7, #124]	@ 0x7c
2000330a:	e01c      	b.n	20003346 <JTAG_WriteAbort+0x182>
    JTAG_CYCLE_TDI(data);                   /* Set D0..D30 */
2000330c:	6878      	ldr	r0, [r7, #4]
2000330e:	f7fe fc9f 	bl	20001c50 <PIN_TDI_OUT>
20003312:	f7fe fc7e 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003316:	4b20      	ldr	r3, [pc, #128]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
20003318:	685b      	ldr	r3, [r3, #4]
2000331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
2000331c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000331e:	3b01      	subs	r3, #1
20003320:	d1fd      	bne.n	2000331e <JTAG_WriteAbort+0x15a>
20003322:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003324:	bf00      	nop
20003326:	f7fe fc6d 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000332a:	4b1b      	ldr	r3, [pc, #108]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000332c:	685b      	ldr	r3, [r3, #4]
2000332e:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20003330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20003332:	3b01      	subs	r3, #1
20003334:	d1fd      	bne.n	20003332 <JTAG_WriteAbort+0x16e>
20003336:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003338:	bf00      	nop
    data >>= 1;
2000333a:	687b      	ldr	r3, [r7, #4]
2000333c:	085b      	lsrs	r3, r3, #1
2000333e:	607b      	str	r3, [r7, #4]
  for (n = 31U; n; n--) {
20003340:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003342:	3b01      	subs	r3, #1
20003344:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003348:	2b00      	cmp	r3, #0
2000334a:	d1df      	bne.n	2000330c <JTAG_WriteAbort+0x148>
  }
  n = DAP_Data.jtag_dev.count - DAP_Data.jtag_dev.index - 1U;
2000334c:	4b12      	ldr	r3, [pc, #72]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000334e:	7e1b      	ldrb	r3, [r3, #24]
20003350:	461a      	mov	r2, r3
20003352:	4b11      	ldr	r3, [pc, #68]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
20003354:	7e5b      	ldrb	r3, [r3, #25]
20003356:	1ad3      	subs	r3, r2, r3
20003358:	3b01      	subs	r3, #1
2000335a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (n) {
2000335c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
2000335e:	2b00      	cmp	r3, #0
20003360:	d04c      	beq.n	200033fc <JTAG_WriteAbort+0x238>
    JTAG_CYCLE_TDI(data);                   /* Set D31 */
20003362:	6878      	ldr	r0, [r7, #4]
20003364:	f7fe fc74 	bl	20001c50 <PIN_TDI_OUT>
20003368:	f7fe fc53 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000336c:	4b0a      	ldr	r3, [pc, #40]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
2000336e:	685b      	ldr	r3, [r3, #4]
20003370:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003374:	3b01      	subs	r3, #1
20003376:	d1fd      	bne.n	20003374 <JTAG_WriteAbort+0x1b0>
20003378:	637b      	str	r3, [r7, #52]	@ 0x34
}
2000337a:	bf00      	nop
2000337c:	f7fe fc42 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20003380:	4b05      	ldr	r3, [pc, #20]	@ (20003398 <JTAG_WriteAbort+0x1d4>)
20003382:	685b      	ldr	r3, [r3, #4]
20003384:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20003388:	3b01      	subs	r3, #1
2000338a:	d1fd      	bne.n	20003388 <JTAG_WriteAbort+0x1c4>
2000338c:	63bb      	str	r3, [r7, #56]	@ 0x38
}
2000338e:	bf00      	nop
    for (--n; n; n--) {
20003390:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003392:	3b01      	subs	r3, #1
20003394:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003396:	e018      	b.n	200033ca <JTAG_WriteAbort+0x206>
20003398:	2000c770 	.word	0x2000c770
      JTAG_CYCLE_TCK();                     /* Bypass after data */
2000339c:	f7fe fc39 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200033a0:	4b3b      	ldr	r3, [pc, #236]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
200033a2:	685b      	ldr	r3, [r3, #4]
200033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
200033a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200033a8:	3b01      	subs	r3, #1
200033aa:	d1fd      	bne.n	200033a8 <JTAG_WriteAbort+0x1e4>
200033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
200033ae:	bf00      	nop
200033b0:	f7fe fc28 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200033b4:	4b36      	ldr	r3, [pc, #216]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
200033b6:	685b      	ldr	r3, [r3, #4]
200033b8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
200033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200033bc:	3b01      	subs	r3, #1
200033be:	d1fd      	bne.n	200033bc <JTAG_WriteAbort+0x1f8>
200033c0:	633b      	str	r3, [r7, #48]	@ 0x30
}
200033c2:	bf00      	nop
    for (--n; n; n--) {
200033c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200033c6:	3b01      	subs	r3, #1
200033c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
200033ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200033cc:	2b00      	cmp	r3, #0
200033ce:	d1e5      	bne.n	2000339c <JTAG_WriteAbort+0x1d8>
    }
    PIN_TMS_SET();
200033d0:	f7fe fc26 	bl	20001c20 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TCK();                       /* Bypass & Exit1-DR */
200033d4:	f7fe fc1d 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
200033d8:	4b2d      	ldr	r3, [pc, #180]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
200033da:	685b      	ldr	r3, [r3, #4]
200033dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
200033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200033e0:	3b01      	subs	r3, #1
200033e2:	d1fd      	bne.n	200033e0 <JTAG_WriteAbort+0x21c>
200033e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
200033e6:	bf00      	nop
200033e8:	f7fe fc0c 	bl	20001c04 <PIN_SWCLK_TCK_SET>
200033ec:	4b28      	ldr	r3, [pc, #160]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
200033ee:	685b      	ldr	r3, [r3, #4]
200033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
200033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200033f4:	3b01      	subs	r3, #1
200033f6:	d1fd      	bne.n	200033f4 <JTAG_WriteAbort+0x230>
200033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
200033fa:	e018      	b.n	2000342e <JTAG_WriteAbort+0x26a>
  } else {
    PIN_TMS_SET();
200033fc:	f7fe fc10 	bl	20001c20 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TDI(data);                   /* Set D31 & Exit1-DR */
20003400:	6878      	ldr	r0, [r7, #4]
20003402:	f7fe fc25 	bl	20001c50 <PIN_TDI_OUT>
20003406:	f7fe fc04 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000340a:	4b21      	ldr	r3, [pc, #132]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
2000340c:	685b      	ldr	r3, [r3, #4]
2000340e:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20003410:	69fb      	ldr	r3, [r7, #28]
20003412:	3b01      	subs	r3, #1
20003414:	d1fd      	bne.n	20003412 <JTAG_WriteAbort+0x24e>
20003416:	61fb      	str	r3, [r7, #28]
}
20003418:	bf00      	nop
2000341a:	f7fe fbf3 	bl	20001c04 <PIN_SWCLK_TCK_SET>
2000341e:	4b1c      	ldr	r3, [pc, #112]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
20003420:	685b      	ldr	r3, [r3, #4]
20003422:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003424:	6a3b      	ldr	r3, [r7, #32]
20003426:	3b01      	subs	r3, #1
20003428:	d1fd      	bne.n	20003426 <JTAG_WriteAbort+0x262>
2000342a:	623b      	str	r3, [r7, #32]
}
2000342c:	bf00      	nop
  }

  JTAG_CYCLE_TCK();                         /* Update-DR */
2000342e:	f7fe fbf0 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
20003432:	4b17      	ldr	r3, [pc, #92]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
20003434:	685b      	ldr	r3, [r3, #4]
20003436:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003438:	68fb      	ldr	r3, [r7, #12]
2000343a:	3b01      	subs	r3, #1
2000343c:	d1fd      	bne.n	2000343a <JTAG_WriteAbort+0x276>
2000343e:	60fb      	str	r3, [r7, #12]
}
20003440:	bf00      	nop
20003442:	f7fe fbdf 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20003446:	4b12      	ldr	r3, [pc, #72]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
20003448:	685b      	ldr	r3, [r3, #4]
2000344a:	613b      	str	r3, [r7, #16]
  __ASM volatile (
2000344c:	693b      	ldr	r3, [r7, #16]
2000344e:	3b01      	subs	r3, #1
20003450:	d1fd      	bne.n	2000344e <JTAG_WriteAbort+0x28a>
20003452:	613b      	str	r3, [r7, #16]
}
20003454:	bf00      	nop
  PIN_TMS_CLR();
20003456:	f7fe fbef 	bl	20001c38 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
2000345a:	f7fe fbda 	bl	20001c12 <PIN_SWCLK_TCK_CLR>
2000345e:	4b0c      	ldr	r3, [pc, #48]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
20003460:	685b      	ldr	r3, [r3, #4]
20003462:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003464:	697b      	ldr	r3, [r7, #20]
20003466:	3b01      	subs	r3, #1
20003468:	d1fd      	bne.n	20003466 <JTAG_WriteAbort+0x2a2>
2000346a:	617b      	str	r3, [r7, #20]
}
2000346c:	bf00      	nop
2000346e:	f7fe fbc9 	bl	20001c04 <PIN_SWCLK_TCK_SET>
20003472:	4b07      	ldr	r3, [pc, #28]	@ (20003490 <JTAG_WriteAbort+0x2cc>)
20003474:	685b      	ldr	r3, [r3, #4]
20003476:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003478:	69bb      	ldr	r3, [r7, #24]
2000347a:	3b01      	subs	r3, #1
2000347c:	d1fd      	bne.n	2000347a <JTAG_WriteAbort+0x2b6>
2000347e:	61bb      	str	r3, [r7, #24]
}
20003480:	bf00      	nop
  PIN_TDI_OUT(1U);
20003482:	2001      	movs	r0, #1
20003484:	f7fe fbe4 	bl	20001c50 <PIN_TDI_OUT>
}
20003488:	bf00      	nop
2000348a:	3780      	adds	r7, #128	@ 0x80
2000348c:	46bd      	mov	sp, r7
2000348e:	bd80      	pop	{r7, pc}
20003490:	2000c770 	.word	0x2000c770

20003494 <JTAG_IR>:


// JTAG Set IR
//   ir:     IR value
//   return: none
void JTAG_IR (uint32_t ir) {
20003494:	b580      	push	{r7, lr}
20003496:	b082      	sub	sp, #8
20003498:	af00      	add	r7, sp, #0
2000349a:	6078      	str	r0, [r7, #4]
  if (DAP_Data.fast_clock) {
2000349c:	4b07      	ldr	r3, [pc, #28]	@ (200034bc <JTAG_IR+0x28>)
2000349e:	785b      	ldrb	r3, [r3, #1]
200034a0:	2b00      	cmp	r3, #0
200034a2:	d003      	beq.n	200034ac <JTAG_IR+0x18>
    JTAG_IR_Fast(ir);
200034a4:	6878      	ldr	r0, [r7, #4]
200034a6:	f7fe ff8f 	bl	200023c8 <JTAG_IR_Fast>
  } else {
    JTAG_IR_Slow(ir);
  }
}
200034aa:	e002      	b.n	200034b2 <JTAG_IR+0x1e>
    JTAG_IR_Slow(ir);
200034ac:	6878      	ldr	r0, [r7, #4]
200034ae:	f7ff f981 	bl	200027b4 <JTAG_IR_Slow>
}
200034b2:	bf00      	nop
200034b4:	3708      	adds	r7, #8
200034b6:	46bd      	mov	sp, r7
200034b8:	bd80      	pop	{r7, pc}
200034ba:	bf00      	nop
200034bc:	2000c770 	.word	0x2000c770

200034c0 <JTAG_Transfer>:

// JTAG Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
uint8_t  JTAG_Transfer(uint32_t request, uint32_t *data) {
200034c0:	b580      	push	{r7, lr}
200034c2:	b082      	sub	sp, #8
200034c4:	af00      	add	r7, sp, #0
200034c6:	6078      	str	r0, [r7, #4]
200034c8:	6039      	str	r1, [r7, #0]
  if (DAP_Data.fast_clock) {
200034ca:	4b09      	ldr	r3, [pc, #36]	@ (200034f0 <JTAG_Transfer+0x30>)
200034cc:	785b      	ldrb	r3, [r3, #1]
200034ce:	2b00      	cmp	r3, #0
200034d0:	d005      	beq.n	200034de <JTAG_Transfer+0x1e>
    return JTAG_TransferFast(request, data);
200034d2:	6839      	ldr	r1, [r7, #0]
200034d4:	6878      	ldr	r0, [r7, #4]
200034d6:	f7ff f81b 	bl	20002510 <JTAG_TransferFast>
200034da:	4603      	mov	r3, r0
200034dc:	e004      	b.n	200034e8 <JTAG_Transfer+0x28>
  } else {
    return JTAG_TransferSlow(request, data);
200034de:	6839      	ldr	r1, [r7, #0]
200034e0:	6878      	ldr	r0, [r7, #4]
200034e2:	f7ff fab5 	bl	20002a50 <JTAG_TransferSlow>
200034e6:	4603      	mov	r3, r0
  }
}
200034e8:	4618      	mov	r0, r3
200034ea:	3708      	adds	r7, #8
200034ec:	46bd      	mov	sp, r7
200034ee:	bd80      	pop	{r7, pc}
200034f0:	2000c770 	.word	0x2000c770

200034f4 <SWJ_Sequence>:
// Generate SWJ Sequence
//   count:  sequence bit count
//   data:   pointer to sequence bit data
//   return: none
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
void SWJ_Sequence (uint32_t count, const uint8_t *data) {
200034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200034f8:	b090      	sub	sp, #64	@ 0x40
200034fa:	af02      	add	r7, sp, #8
200034fc:	6078      	str	r0, [r7, #4]
200034fe:	6039      	str	r1, [r7, #0]
  uint32_t val;
  uint32_t n;

  uint8_t xFerSizes[3];

  	uint8_t dummyVal = 0;
20003500:	2300      	movs	r3, #0
20003502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  	calculate_xfer_sizes(count, xFerSizes);
20003506:	687b      	ldr	r3, [r7, #4]
20003508:	b29b      	uxth	r3, r3
2000350a:	f107 0220 	add.w	r2, r7, #32
2000350e:	4611      	mov	r1, r2
20003510:	4618      	mov	r0, r3
20003512:	f7fe fd13 	bl	20001f3c <calculate_xfer_sizes>

  	uint32_t currentBit = 0;
20003516:	2300      	movs	r3, #0
20003518:	637b      	str	r3, [r7, #52]	@ 0x34



  	while(xFerSizes[IDX_8_BIT])
2000351a:	e02e      	b.n	2000357a <SWJ_Sequence+0x86>
  	{
  		uint8_t tms_val = *data;
2000351c:	683b      	ldr	r3, [r7, #0]
2000351e:	781b      	ldrb	r3, [r3, #0]
20003520:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  		uint64_t tdo_val;

  		if(tms_val != 0 && currentBit != 0)
20003524:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
20003528:	2b00      	cmp	r3, #0
2000352a:	d005      	beq.n	20003538 <SWJ_Sequence+0x44>
2000352c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000352e:	2b00      	cmp	r3, #0
20003530:	d002      	beq.n	20003538 <SWJ_Sequence+0x44>
  		{
  			dummyVal = 1;
20003532:	2301      	movs	r3, #1
20003534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  		}

  		SPI_TMS_Transfer(tms_val, 8);
20003538:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
2000353c:	2200      	movs	r2, #0
2000353e:	469a      	mov	sl, r3
20003540:	4693      	mov	fp, r2
20003542:	2208      	movs	r2, #8
20003544:	4650      	mov	r0, sl
20003546:	4659      	mov	r1, fp
20003548:	f000 fc14 	bl	20003d74 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , 8);
2000354c:	f107 0118 	add.w	r1, r7, #24
20003550:	2308      	movs	r3, #8
20003552:	9300      	str	r3, [sp, #0]
20003554:	f04f 0200 	mov.w	r2, #0
20003558:	f04f 0300 	mov.w	r3, #0
2000355c:	4608      	mov	r0, r1
2000355e:	f000 fc43 	bl	20003de8 <SPI_Transfer>

  		data++;
20003562:	683b      	ldr	r3, [r7, #0]
20003564:	3301      	adds	r3, #1
20003566:	603b      	str	r3, [r7, #0]
  		xFerSizes[IDX_8_BIT]--;
20003568:	f897 3020 	ldrb.w	r3, [r7, #32]
2000356c:	3b01      	subs	r3, #1
2000356e:	b2db      	uxtb	r3, r3
20003570:	f887 3020 	strb.w	r3, [r7, #32]
  		currentBit+= 8;
20003574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003576:	3308      	adds	r3, #8
20003578:	637b      	str	r3, [r7, #52]	@ 0x34
  	while(xFerSizes[IDX_8_BIT])
2000357a:	f897 3020 	ldrb.w	r3, [r7, #32]
2000357e:	2b00      	cmp	r3, #0
20003580:	d1cc      	bne.n	2000351c <SWJ_Sequence+0x28>
  	}

  	while(xFerSizes[IDX_RM1_BIT])
20003582:	e032      	b.n	200035ea <SWJ_Sequence+0xf6>
  	{
  		uint32_t delay_cnt = 2500;
20003584:	f640 13c4 	movw	r3, #2500	@ 0x9c4
20003588:	633b      	str	r3, [r7, #48]	@ 0x30

  		while(delay_cnt--)
2000358a:	e000      	b.n	2000358e <SWJ_Sequence+0x9a>
  	    {
  		  __asm("nop");
2000358c:	bf00      	nop
  		while(delay_cnt--)
2000358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20003590:	1e5a      	subs	r2, r3, #1
20003592:	633a      	str	r2, [r7, #48]	@ 0x30
20003594:	2b00      	cmp	r3, #0
20003596:	d1f9      	bne.n	2000358c <SWJ_Sequence+0x98>
  	    }

  		uint16_t tms_val = extract_nbits_lsb(data, currentBit, xFerSizes[IDX_RM1_BIT]);
20003598:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
2000359c:	461a      	mov	r2, r3
2000359e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
200035a0:	6838      	ldr	r0, [r7, #0]
200035a2:	f7fe fbcf 	bl	20001d44 <extract_nbits_lsb>
200035a6:	4603      	mov	r3, r0
200035a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  		uint64_t tdo_val;

  		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM1_BIT]);
200035aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
200035ac:	2200      	movs	r2, #0
200035ae:	4698      	mov	r8, r3
200035b0:	4691      	mov	r9, r2
200035b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
200035b6:	461a      	mov	r2, r3
200035b8:	4640      	mov	r0, r8
200035ba:	4649      	mov	r1, r9
200035bc:	f000 fbda 	bl	20003d74 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , xFerSizes[IDX_RM1_BIT]);
200035c0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
200035c4:	f107 0110 	add.w	r1, r7, #16
200035c8:	9300      	str	r3, [sp, #0]
200035ca:	f04f 0200 	mov.w	r2, #0
200035ce:	f04f 0300 	mov.w	r3, #0
200035d2:	4608      	mov	r0, r1
200035d4:	f000 fc08 	bl	20003de8 <SPI_Transfer>


  		currentBit+= xFerSizes[IDX_RM1_BIT];
200035d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
200035dc:	461a      	mov	r2, r3
200035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200035e0:	4413      	add	r3, r2
200035e2:	637b      	str	r3, [r7, #52]	@ 0x34

  		xFerSizes[IDX_RM1_BIT] = 0;
200035e4:	2300      	movs	r3, #0
200035e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  	while(xFerSizes[IDX_RM1_BIT])
200035ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
200035ee:	2b00      	cmp	r3, #0
200035f0:	d1c8      	bne.n	20003584 <SWJ_Sequence+0x90>

  	}

  	while(xFerSizes[IDX_RM2_BIT])
200035f2:	e032      	b.n	2000365a <SWJ_Sequence+0x166>
  	{
  		//TODO: extract bits!!
  		uint32_t delay_cnt = 2000;
200035f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
200035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  		while(delay_cnt--)
200035fa:	e000      	b.n	200035fe <SWJ_Sequence+0x10a>
  		{
  		  __asm("nop");
200035fc:	bf00      	nop
  		while(delay_cnt--)
200035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003600:	1e5a      	subs	r2, r3, #1
20003602:	62fa      	str	r2, [r7, #44]	@ 0x2c
20003604:	2b00      	cmp	r3, #0
20003606:	d1f9      	bne.n	200035fc <SWJ_Sequence+0x108>
  		}

  		uint16_t tms_val = extract_nbits_lsb(data, currentBit, xFerSizes[IDX_RM2_BIT]);
20003608:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
2000360c:	461a      	mov	r2, r3
2000360e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
20003610:	6838      	ldr	r0, [r7, #0]
20003612:	f7fe fb97 	bl	20001d44 <extract_nbits_lsb>
20003616:	4603      	mov	r3, r0
20003618:	853b      	strh	r3, [r7, #40]	@ 0x28
  		uint64_t tdo_val;

  		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM2_BIT]);
2000361a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
2000361c:	2200      	movs	r2, #0
2000361e:	461c      	mov	r4, r3
20003620:	4615      	mov	r5, r2
20003622:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
20003626:	461a      	mov	r2, r3
20003628:	4620      	mov	r0, r4
2000362a:	4629      	mov	r1, r5
2000362c:	f000 fba2 	bl	20003d74 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , xFerSizes[IDX_RM2_BIT]);
20003630:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
20003634:	f107 0108 	add.w	r1, r7, #8
20003638:	9300      	str	r3, [sp, #0]
2000363a:	f04f 0200 	mov.w	r2, #0
2000363e:	f04f 0300 	mov.w	r3, #0
20003642:	4608      	mov	r0, r1
20003644:	f000 fbd0 	bl	20003de8 <SPI_Transfer>


  		currentBit+= xFerSizes[IDX_RM2_BIT];
20003648:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
2000364c:	461a      	mov	r2, r3
2000364e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003650:	4413      	add	r3, r2
20003652:	637b      	str	r3, [r7, #52]	@ 0x34

  		xFerSizes[IDX_RM2_BIT] = 0;
20003654:	2300      	movs	r3, #0
20003656:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  	while(xFerSizes[IDX_RM2_BIT])
2000365a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
2000365e:	2b00      	cmp	r3, #0
20003660:	d1c8      	bne.n	200035f4 <SWJ_Sequence+0x100>

  	}

}
20003662:	bf00      	nop
20003664:	bf00      	nop
20003666:	3738      	adds	r7, #56	@ 0x38
20003668:	46bd      	mov	sp, r7
2000366a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

2000366e <JTAG_GPIO_Write>:
 * @brief Sets the state of a GPIO pin.
 * @param port GPIO_TypeDef* The GPIO port (e.g., GPIOA, GPIOB).
 * @param pin uint16_t The pin number (e.g., GPIO_PIN_5).
 * @param state GPIO_PinState The desired state (GPIO_PIN_SET or GPIO_PIN_RESET).
 */
void JTAG_GPIO_Write(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state) {
2000366e:	b580      	push	{r7, lr}
20003670:	b082      	sub	sp, #8
20003672:	af00      	add	r7, sp, #0
20003674:	6078      	str	r0, [r7, #4]
20003676:	460b      	mov	r3, r1
20003678:	807b      	strh	r3, [r7, #2]
2000367a:	4613      	mov	r3, r2
2000367c:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(port, pin, state); // Using STM32 HAL library function
2000367e:	787a      	ldrb	r2, [r7, #1]
20003680:	887b      	ldrh	r3, [r7, #2]
20003682:	4619      	mov	r1, r3
20003684:	6878      	ldr	r0, [r7, #4]
20003686:	f001 fcef 	bl	20005068 <HAL_GPIO_WritePin>
}
2000368a:	bf00      	nop
2000368c:	3708      	adds	r7, #8
2000368e:	46bd      	mov	sp, r7
20003690:	bd80      	pop	{r7, pc}

20003692 <JTAG_Delay_ns>:

/**
 * @brief Introduces a small delay. Crucial for JTAG timing.
 * This needs to be carefully tuned. A simple loop or a timer-based delay.
 */
void JTAG_Delay_ns(uint32_t nanoseconds) {
20003692:	b580      	push	{r7, lr}
20003694:	b082      	sub	sp, #8
20003696:	af00      	add	r7, sp, #0
20003698:	6078      	str	r0, [r7, #4]
    // For bit-banging, even a few clock cycles can matter.
    // Consider using a DWT (Data Watchpoint and Trace) cycle counter for very precise delays,
    // or a TIM (Timer) in one-shot mode. A simple NOP loop might be too slow or imprecise.
    // Example (very rough):
    //for (volatile uint32_t i = 0; i < (nanoseconds / 10); i++); // Adjust divisor based on CPU freq
	HAL_Delay(nanoseconds);
2000369a:	6878      	ldr	r0, [r7, #4]
2000369c:	f000 feb4 	bl	20004408 <HAL_Delay>
}
200036a0:	bf00      	nop
200036a2:	3708      	adds	r7, #8
200036a4:	46bd      	mov	sp, r7
200036a6:	bd80      	pop	{r7, pc}

200036a8 <JTAG_Reset>:

/**
 * @brief Resets the JTAG state machine to Test-Logic-Reset.
 * Can use TRST if available, or sequence TMS.
 */
void JTAG_Reset(void) {
200036a8:	b580      	push	{r7, lr}
200036aa:	af00      	add	r7, sp, #0
    #ifdef JTAG_TRST_PORT
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_RESET); // Assert TRST
200036ac:	2200      	movs	r2, #0
200036ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
200036b2:	4808      	ldr	r0, [pc, #32]	@ (200036d4 <JTAG_Reset+0x2c>)
200036b4:	f7ff ffdb 	bl	2000366e <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS); // Hold for a short period
200036b8:	2001      	movs	r0, #1
200036ba:	f7ff ffea 	bl	20003692 <JTAG_Delay_ns>
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_SET);   // De-assert TRST
200036be:	2201      	movs	r2, #1
200036c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
200036c4:	4803      	ldr	r0, [pc, #12]	@ (200036d4 <JTAG_Reset+0x2c>)
200036c6:	f7ff ffd2 	bl	2000366e <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS);
200036ca:	2001      	movs	r0, #1
200036cc:	f7ff ffe1 	bl	20003692 <JTAG_Delay_ns>
    #else
    // Go to run-test/idle state
    SPI_TMS_Transfer(0x001f, 16);
    SPI_Transfer(&dummyInVal, 0, 16);
	#endif
}
200036d0:	bf00      	nop
200036d2:	bd80      	pop	{r7, pc}
200036d4:	40020800 	.word	0x40020800

200036d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
200036d8:	b580      	push	{r7, lr}
200036da:	b086      	sub	sp, #24
200036dc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
200036de:	f000 fe36 	bl	2000434e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
200036e2:	f000 f861 	bl	200037a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
200036e6:	f000 f9c3 	bl	20003a70 <MX_GPIO_Init>
  MX_ETH_Init();
200036ea:	f000 f8cb 	bl	20003884 <MX_ETH_Init>
  MX_USART3_UART_Init();
200036ee:	f000 f98f 	bl	20003a10 <MX_USART3_UART_Init>
  MX_SPI1_Init();
200036f2:	f000 f915 	bl	20003920 <MX_SPI1_Init>
  MX_SPI4_Init();
200036f6:	f000 f951 	bl	2000399c <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
200036fa:	f008 f831 	bl	2000b760 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  RCC->APB1ENR |= (1 << 15);
200036fe:	4b22      	ldr	r3, [pc, #136]	@ (20003788 <main+0xb0>)
20003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003702:	4a21      	ldr	r2, [pc, #132]	@ (20003788 <main+0xb0>)
20003704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20003708:	6413      	str	r3, [r2, #64]	@ 0x40

  Switch_SPI();
2000370a:	f000 fab9 	bl	20003c80 <Switch_SPI>
  SPI4->CR1 |= (1 << 6);
2000370e:	4b1f      	ldr	r3, [pc, #124]	@ (2000378c <main+0xb4>)
20003710:	681b      	ldr	r3, [r3, #0]
20003712:	4a1e      	ldr	r2, [pc, #120]	@ (2000378c <main+0xb4>)
20003714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20003718:	6013      	str	r3, [r2, #0]

  uint64_t tms_seq = 0x00;
2000371a:	f04f 0200 	mov.w	r2, #0
2000371e:	f04f 0300 	mov.w	r3, #0
20003722:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint16_t tdi_seq = 0xFF;
20003726:	23ff      	movs	r3, #255	@ 0xff
20003728:	81fb      	strh	r3, [r7, #14]
  uint64_t tdo_seq;
  uint8_t bit_size = 0x4;
2000372a:	2304      	movs	r3, #4
2000372c:	737b      	strb	r3, [r7, #13]

  JTAG_Reset();
2000372e:	f7ff ffbb 	bl	200036a8 <JTAG_Reset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t num;
	  if(msgAvailable)
20003732:	4b17      	ldr	r3, [pc, #92]	@ (20003790 <main+0xb8>)
20003734:	681b      	ldr	r3, [r3, #0]
20003736:	2b00      	cmp	r3, #0
20003738:	d0fb      	beq.n	20003732 <main+0x5a>
	  {
		  uint32_t readLen, writeLen;
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
2000373a:	2180      	movs	r1, #128	@ 0x80
2000373c:	4815      	ldr	r0, [pc, #84]	@ (20003794 <main+0xbc>)
2000373e:	f001 fcac 	bl	2000509a <HAL_GPIO_TogglePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
20003742:	b672      	cpsid	i
}
20003744:	bf00      	nop
		  __disable_irq();
		  num = DAP_ProcessCommand(rdBuff, wrBuff);
20003746:	4914      	ldr	r1, [pc, #80]	@ (20003798 <main+0xc0>)
20003748:	4814      	ldr	r0, [pc, #80]	@ (2000379c <main+0xc4>)
2000374a:	f7fe f917 	bl	2000197c <DAP_ProcessCommand>
2000374e:	60b8      	str	r0, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
20003750:	b662      	cpsie	i
}
20003752:	bf00      	nop
		  __enable_irq();
		  readLen = (num & 0xFFFF0000) >> 16;
20003754:	68bb      	ldr	r3, [r7, #8]
20003756:	0c1b      	lsrs	r3, r3, #16
20003758:	607b      	str	r3, [r7, #4]
		  wrIdx += readLen;
2000375a:	687b      	ldr	r3, [r7, #4]
2000375c:	b2da      	uxtb	r2, r3
2000375e:	4b10      	ldr	r3, [pc, #64]	@ (200037a0 <main+0xc8>)
20003760:	781b      	ldrb	r3, [r3, #0]
20003762:	4413      	add	r3, r2
20003764:	b2da      	uxtb	r2, r3
20003766:	4b0e      	ldr	r3, [pc, #56]	@ (200037a0 <main+0xc8>)
20003768:	701a      	strb	r2, [r3, #0]

		  writeLen = (num & 0xFFFF);
2000376a:	68bb      	ldr	r3, [r7, #8]
2000376c:	b29b      	uxth	r3, r3
2000376e:	603b      	str	r3, [r7, #0]
		  //writeLen = 0x40;

		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
20003770:	683b      	ldr	r3, [r7, #0]
20003772:	b29b      	uxth	r3, r3
20003774:	461a      	mov	r2, r3
20003776:	4908      	ldr	r1, [pc, #32]	@ (20003798 <main+0xc0>)
20003778:	480a      	ldr	r0, [pc, #40]	@ (200037a4 <main+0xcc>)
2000377a:	f006 fb0b 	bl	20009d94 <USBD_CUSTOM_HID_SendReport>
		  			  wrBuff, writeLen);

		  msgAvailable = 0;
2000377e:	4b04      	ldr	r3, [pc, #16]	@ (20003790 <main+0xb8>)
20003780:	2200      	movs	r2, #0
20003782:	601a      	str	r2, [r3, #0]
  {
20003784:	e7d5      	b.n	20003732 <main+0x5a>
20003786:	bf00      	nop
20003788:	40023800 	.word	0x40023800
2000378c:	40013400 	.word	0x40013400
20003790:	2000daf8 	.word	0x2000daf8
20003794:	40020400 	.word	0x40020400
20003798:	2000d9f4 	.word	0x2000d9f4
2000379c:	2000da74 	.word	0x2000da74
200037a0:	2000daf4 	.word	0x2000daf4
200037a4:	2000db20 	.word	0x2000db20

200037a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
200037a8:	b580      	push	{r7, lr}
200037aa:	b094      	sub	sp, #80	@ 0x50
200037ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
200037ae:	f107 0320 	add.w	r3, r7, #32
200037b2:	2230      	movs	r2, #48	@ 0x30
200037b4:	2100      	movs	r1, #0
200037b6:	4618      	mov	r0, r3
200037b8:	f008 fd88 	bl	2000c2cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
200037bc:	f107 030c 	add.w	r3, r7, #12
200037c0:	2200      	movs	r2, #0
200037c2:	601a      	str	r2, [r3, #0]
200037c4:	605a      	str	r2, [r3, #4]
200037c6:	609a      	str	r2, [r3, #8]
200037c8:	60da      	str	r2, [r3, #12]
200037ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
200037cc:	f002 ff0a 	bl	200065e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
200037d0:	4b2a      	ldr	r3, [pc, #168]	@ (2000387c <SystemClock_Config+0xd4>)
200037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200037d4:	4a29      	ldr	r2, [pc, #164]	@ (2000387c <SystemClock_Config+0xd4>)
200037d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200037da:	6413      	str	r3, [r2, #64]	@ 0x40
200037dc:	4b27      	ldr	r3, [pc, #156]	@ (2000387c <SystemClock_Config+0xd4>)
200037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200037e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200037e4:	60bb      	str	r3, [r7, #8]
200037e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200037e8:	4b25      	ldr	r3, [pc, #148]	@ (20003880 <SystemClock_Config+0xd8>)
200037ea:	681b      	ldr	r3, [r3, #0]
200037ec:	4a24      	ldr	r2, [pc, #144]	@ (20003880 <SystemClock_Config+0xd8>)
200037ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
200037f2:	6013      	str	r3, [r2, #0]
200037f4:	4b22      	ldr	r3, [pc, #136]	@ (20003880 <SystemClock_Config+0xd8>)
200037f6:	681b      	ldr	r3, [r3, #0]
200037f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
200037fc:	607b      	str	r3, [r7, #4]
200037fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20003800:	2301      	movs	r3, #1
20003802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
20003804:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
20003808:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000380a:	2302      	movs	r3, #2
2000380c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000380e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20003812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
20003814:	2304      	movs	r3, #4
20003816:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
20003818:	23d8      	movs	r3, #216	@ 0xd8
2000381a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000381c:	2302      	movs	r3, #2
2000381e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
20003820:	2309      	movs	r3, #9
20003822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20003824:	f107 0320 	add.w	r3, r7, #32
20003828:	4618      	mov	r0, r3
2000382a:	f002 ff3b 	bl	200066a4 <HAL_RCC_OscConfig>
2000382e:	4603      	mov	r3, r0
20003830:	2b00      	cmp	r3, #0
20003832:	d001      	beq.n	20003838 <SystemClock_Config+0x90>
  {
    Error_Handler();
20003834:	f000 fb04 	bl	20003e40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20003838:	f002 fee4 	bl	20006604 <HAL_PWREx_EnableOverDrive>
2000383c:	4603      	mov	r3, r0
2000383e:	2b00      	cmp	r3, #0
20003840:	d001      	beq.n	20003846 <SystemClock_Config+0x9e>
  {
    Error_Handler();
20003842:	f000 fafd 	bl	20003e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20003846:	230f      	movs	r3, #15
20003848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000384a:	2302      	movs	r3, #2
2000384c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000384e:	2300      	movs	r3, #0
20003850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
20003852:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
20003856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20003858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
2000385c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
2000385e:	f107 030c 	add.w	r3, r7, #12
20003862:	2107      	movs	r1, #7
20003864:	4618      	mov	r0, r3
20003866:	f003 f9c1 	bl	20006bec <HAL_RCC_ClockConfig>
2000386a:	4603      	mov	r3, r0
2000386c:	2b00      	cmp	r3, #0
2000386e:	d001      	beq.n	20003874 <SystemClock_Config+0xcc>
  {
    Error_Handler();
20003870:	f000 fae6 	bl	20003e40 <Error_Handler>
  }
}
20003874:	bf00      	nop
20003876:	3750      	adds	r7, #80	@ 0x50
20003878:	46bd      	mov	sp, r7
2000387a:	bd80      	pop	{r7, pc}
2000387c:	40023800 	.word	0x40023800
20003880:	40007000 	.word	0x40007000

20003884 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
20003884:	b580      	push	{r7, lr}
20003886:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
20003888:	4b1f      	ldr	r3, [pc, #124]	@ (20003908 <MX_ETH_Init+0x84>)
2000388a:	4a20      	ldr	r2, [pc, #128]	@ (2000390c <MX_ETH_Init+0x88>)
2000388c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
2000388e:	4b20      	ldr	r3, [pc, #128]	@ (20003910 <MX_ETH_Init+0x8c>)
20003890:	2200      	movs	r2, #0
20003892:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
20003894:	4b1e      	ldr	r3, [pc, #120]	@ (20003910 <MX_ETH_Init+0x8c>)
20003896:	2280      	movs	r2, #128	@ 0x80
20003898:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
2000389a:	4b1d      	ldr	r3, [pc, #116]	@ (20003910 <MX_ETH_Init+0x8c>)
2000389c:	22e1      	movs	r2, #225	@ 0xe1
2000389e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
200038a0:	4b1b      	ldr	r3, [pc, #108]	@ (20003910 <MX_ETH_Init+0x8c>)
200038a2:	2200      	movs	r2, #0
200038a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
200038a6:	4b1a      	ldr	r3, [pc, #104]	@ (20003910 <MX_ETH_Init+0x8c>)
200038a8:	2200      	movs	r2, #0
200038aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
200038ac:	4b18      	ldr	r3, [pc, #96]	@ (20003910 <MX_ETH_Init+0x8c>)
200038ae:	2200      	movs	r2, #0
200038b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
200038b2:	4b15      	ldr	r3, [pc, #84]	@ (20003908 <MX_ETH_Init+0x84>)
200038b4:	4a16      	ldr	r2, [pc, #88]	@ (20003910 <MX_ETH_Init+0x8c>)
200038b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
200038b8:	4b13      	ldr	r3, [pc, #76]	@ (20003908 <MX_ETH_Init+0x84>)
200038ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
200038be:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
200038c0:	4b11      	ldr	r3, [pc, #68]	@ (20003908 <MX_ETH_Init+0x84>)
200038c2:	4a14      	ldr	r2, [pc, #80]	@ (20003914 <MX_ETH_Init+0x90>)
200038c4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
200038c6:	4b10      	ldr	r3, [pc, #64]	@ (20003908 <MX_ETH_Init+0x84>)
200038c8:	4a13      	ldr	r2, [pc, #76]	@ (20003918 <MX_ETH_Init+0x94>)
200038ca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
200038cc:	4b0e      	ldr	r3, [pc, #56]	@ (20003908 <MX_ETH_Init+0x84>)
200038ce:	f240 52f4 	movw	r2, #1524	@ 0x5f4
200038d2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
200038d4:	480c      	ldr	r0, [pc, #48]	@ (20003908 <MX_ETH_Init+0x84>)
200038d6:	f000 fecd 	bl	20004674 <HAL_ETH_Init>
200038da:	4603      	mov	r3, r0
200038dc:	2b00      	cmp	r3, #0
200038de:	d001      	beq.n	200038e4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
200038e0:	f000 faae 	bl	20003e40 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
200038e4:	2238      	movs	r2, #56	@ 0x38
200038e6:	2100      	movs	r1, #0
200038e8:	480c      	ldr	r0, [pc, #48]	@ (2000391c <MX_ETH_Init+0x98>)
200038ea:	f008 fcef 	bl	2000c2cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
200038ee:	4b0b      	ldr	r3, [pc, #44]	@ (2000391c <MX_ETH_Init+0x98>)
200038f0:	2221      	movs	r2, #33	@ 0x21
200038f2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
200038f4:	4b09      	ldr	r3, [pc, #36]	@ (2000391c <MX_ETH_Init+0x98>)
200038f6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
200038fa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
200038fc:	4b07      	ldr	r3, [pc, #28]	@ (2000391c <MX_ETH_Init+0x98>)
200038fe:	2200      	movs	r2, #0
20003900:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
20003902:	bf00      	nop
20003904:	bd80      	pop	{r7, pc}
20003906:	bf00      	nop
20003908:	2000d7f4 	.word	0x2000d7f4
2000390c:	40028000 	.word	0x40028000
20003910:	2000db08 	.word	0x2000db08
20003914:	2000c6b4 	.word	0x2000c6b4
20003918:	2000c614 	.word	0x2000c614
2000391c:	2000d7bc 	.word	0x2000d7bc

20003920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
20003920:	b580      	push	{r7, lr}
20003922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
20003924:	4b1b      	ldr	r3, [pc, #108]	@ (20003994 <MX_SPI1_Init+0x74>)
20003926:	4a1c      	ldr	r2, [pc, #112]	@ (20003998 <MX_SPI1_Init+0x78>)
20003928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
2000392a:	4b1a      	ldr	r3, [pc, #104]	@ (20003994 <MX_SPI1_Init+0x74>)
2000392c:	f44f 7282 	mov.w	r2, #260	@ 0x104
20003930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
20003932:	4b18      	ldr	r3, [pc, #96]	@ (20003994 <MX_SPI1_Init+0x74>)
20003934:	2200      	movs	r2, #0
20003936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
20003938:	4b16      	ldr	r3, [pc, #88]	@ (20003994 <MX_SPI1_Init+0x74>)
2000393a:	f44f 7240 	mov.w	r2, #768	@ 0x300
2000393e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
20003940:	4b14      	ldr	r3, [pc, #80]	@ (20003994 <MX_SPI1_Init+0x74>)
20003942:	2200      	movs	r2, #0
20003944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
20003946:	4b13      	ldr	r3, [pc, #76]	@ (20003994 <MX_SPI1_Init+0x74>)
20003948:	2200      	movs	r2, #0
2000394a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
2000394c:	4b11      	ldr	r3, [pc, #68]	@ (20003994 <MX_SPI1_Init+0x74>)
2000394e:	f44f 7200 	mov.w	r2, #512	@ 0x200
20003952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
20003954:	4b0f      	ldr	r3, [pc, #60]	@ (20003994 <MX_SPI1_Init+0x74>)
20003956:	2238      	movs	r2, #56	@ 0x38
20003958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
2000395a:	4b0e      	ldr	r3, [pc, #56]	@ (20003994 <MX_SPI1_Init+0x74>)
2000395c:	2280      	movs	r2, #128	@ 0x80
2000395e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
20003960:	4b0c      	ldr	r3, [pc, #48]	@ (20003994 <MX_SPI1_Init+0x74>)
20003962:	2200      	movs	r2, #0
20003964:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20003966:	4b0b      	ldr	r3, [pc, #44]	@ (20003994 <MX_SPI1_Init+0x74>)
20003968:	2200      	movs	r2, #0
2000396a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
2000396c:	4b09      	ldr	r3, [pc, #36]	@ (20003994 <MX_SPI1_Init+0x74>)
2000396e:	2207      	movs	r2, #7
20003970:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
20003972:	4b08      	ldr	r3, [pc, #32]	@ (20003994 <MX_SPI1_Init+0x74>)
20003974:	2200      	movs	r2, #0
20003976:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
20003978:	4b06      	ldr	r3, [pc, #24]	@ (20003994 <MX_SPI1_Init+0x74>)
2000397a:	2208      	movs	r2, #8
2000397c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
2000397e:	4805      	ldr	r0, [pc, #20]	@ (20003994 <MX_SPI1_Init+0x74>)
20003980:	f003 ff4a 	bl	20007818 <HAL_SPI_Init>
20003984:	4603      	mov	r3, r0
20003986:	2b00      	cmp	r3, #0
20003988:	d001      	beq.n	2000398e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
2000398a:	f000 fa59 	bl	20003e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
2000398e:	bf00      	nop
20003990:	bd80      	pop	{r7, pc}
20003992:	bf00      	nop
20003994:	2000d8a4 	.word	0x2000d8a4
20003998:	40013000 	.word	0x40013000

2000399c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
2000399c:	b580      	push	{r7, lr}
2000399e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
200039a0:	4b19      	ldr	r3, [pc, #100]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039a2:	4a1a      	ldr	r2, [pc, #104]	@ (20003a0c <MX_SPI4_Init+0x70>)
200039a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
200039a6:	4b18      	ldr	r3, [pc, #96]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039a8:	2200      	movs	r2, #0
200039aa:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
200039ac:	4b16      	ldr	r3, [pc, #88]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039ae:	2200      	movs	r2, #0
200039b0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
200039b2:	4b15      	ldr	r3, [pc, #84]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
200039b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
200039ba:	4b13      	ldr	r3, [pc, #76]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039bc:	2200      	movs	r2, #0
200039be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
200039c0:	4b11      	ldr	r3, [pc, #68]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039c2:	2200      	movs	r2, #0
200039c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
200039c6:	4b10      	ldr	r3, [pc, #64]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
200039cc:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_LSB;
200039ce:	4b0e      	ldr	r3, [pc, #56]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039d0:	2280      	movs	r2, #128	@ 0x80
200039d2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
200039d4:	4b0c      	ldr	r3, [pc, #48]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039d6:	2200      	movs	r2, #0
200039d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200039da:	4b0b      	ldr	r3, [pc, #44]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039dc:	2200      	movs	r2, #0
200039de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
200039e0:	4b09      	ldr	r3, [pc, #36]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039e2:	2207      	movs	r2, #7
200039e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
200039e6:	4b08      	ldr	r3, [pc, #32]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039e8:	2200      	movs	r2, #0
200039ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
200039ec:	4b06      	ldr	r3, [pc, #24]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039ee:	2200      	movs	r2, #0
200039f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
200039f2:	4805      	ldr	r0, [pc, #20]	@ (20003a08 <MX_SPI4_Init+0x6c>)
200039f4:	f003 ff10 	bl	20007818 <HAL_SPI_Init>
200039f8:	4603      	mov	r3, r0
200039fa:	2b00      	cmp	r3, #0
200039fc:	d001      	beq.n	20003a02 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
200039fe:	f000 fa1f 	bl	20003e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
20003a02:	bf00      	nop
20003a04:	bd80      	pop	{r7, pc}
20003a06:	bf00      	nop
20003a08:	2000d908 	.word	0x2000d908
20003a0c:	40013400 	.word	0x40013400

20003a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
20003a10:	b580      	push	{r7, lr}
20003a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
20003a14:	4b14      	ldr	r3, [pc, #80]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a16:	4a15      	ldr	r2, [pc, #84]	@ (20003a6c <MX_USART3_UART_Init+0x5c>)
20003a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
20003a1a:	4b13      	ldr	r3, [pc, #76]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
20003a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
20003a22:	4b11      	ldr	r3, [pc, #68]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a24:	2200      	movs	r2, #0
20003a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
20003a28:	4b0f      	ldr	r3, [pc, #60]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a2a:	2200      	movs	r2, #0
20003a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
20003a2e:	4b0e      	ldr	r3, [pc, #56]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a30:	2200      	movs	r2, #0
20003a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
20003a34:	4b0c      	ldr	r3, [pc, #48]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a36:	220c      	movs	r2, #12
20003a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
20003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a3c:	2200      	movs	r2, #0
20003a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
20003a40:	4b09      	ldr	r3, [pc, #36]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a42:	2200      	movs	r2, #0
20003a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
20003a46:	4b08      	ldr	r3, [pc, #32]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a48:	2200      	movs	r2, #0
20003a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
20003a4c:	4b06      	ldr	r3, [pc, #24]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a4e:	2200      	movs	r2, #0
20003a50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
20003a52:	4805      	ldr	r0, [pc, #20]	@ (20003a68 <MX_USART3_UART_Init+0x58>)
20003a54:	f003 ff8b 	bl	2000796e <HAL_UART_Init>
20003a58:	4603      	mov	r3, r0
20003a5a:	2b00      	cmp	r3, #0
20003a5c:	d001      	beq.n	20003a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
20003a5e:	f000 f9ef 	bl	20003e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
20003a62:	bf00      	nop
20003a64:	bd80      	pop	{r7, pc}
20003a66:	bf00      	nop
20003a68:	2000d96c 	.word	0x2000d96c
20003a6c:	40004800 	.word	0x40004800

20003a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
20003a70:	b580      	push	{r7, lr}
20003a72:	b08c      	sub	sp, #48	@ 0x30
20003a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003a76:	f107 031c 	add.w	r3, r7, #28
20003a7a:	2200      	movs	r2, #0
20003a7c:	601a      	str	r2, [r3, #0]
20003a7e:	605a      	str	r2, [r3, #4]
20003a80:	609a      	str	r2, [r3, #8]
20003a82:	60da      	str	r2, [r3, #12]
20003a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
20003a86:	4b79      	ldr	r3, [pc, #484]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003a8a:	4a78      	ldr	r2, [pc, #480]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003a8c:	f043 0310 	orr.w	r3, r3, #16
20003a90:	6313      	str	r3, [r2, #48]	@ 0x30
20003a92:	4b76      	ldr	r3, [pc, #472]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003a96:	f003 0310 	and.w	r3, r3, #16
20003a9a:	61bb      	str	r3, [r7, #24]
20003a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20003a9e:	4b73      	ldr	r3, [pc, #460]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003aa2:	4a72      	ldr	r2, [pc, #456]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003aa4:	f043 0304 	orr.w	r3, r3, #4
20003aa8:	6313      	str	r3, [r2, #48]	@ 0x30
20003aaa:	4b70      	ldr	r3, [pc, #448]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003aae:	f003 0304 	and.w	r3, r3, #4
20003ab2:	617b      	str	r3, [r7, #20]
20003ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
20003ab6:	4b6d      	ldr	r3, [pc, #436]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003aba:	4a6c      	ldr	r2, [pc, #432]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20003ac0:	6313      	str	r3, [r2, #48]	@ 0x30
20003ac2:	4b6a      	ldr	r3, [pc, #424]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003aca:	613b      	str	r3, [r7, #16]
20003acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20003ace:	4b67      	ldr	r3, [pc, #412]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ad2:	4a66      	ldr	r2, [pc, #408]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003ad4:	f043 0301 	orr.w	r3, r3, #1
20003ad8:	6313      	str	r3, [r2, #48]	@ 0x30
20003ada:	4b64      	ldr	r3, [pc, #400]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ade:	f003 0301 	and.w	r3, r3, #1
20003ae2:	60fb      	str	r3, [r7, #12]
20003ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20003ae6:	4b61      	ldr	r3, [pc, #388]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003aea:	4a60      	ldr	r2, [pc, #384]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003aec:	f043 0302 	orr.w	r3, r3, #2
20003af0:	6313      	str	r3, [r2, #48]	@ 0x30
20003af2:	4b5e      	ldr	r3, [pc, #376]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003af6:	f003 0302 	and.w	r3, r3, #2
20003afa:	60bb      	str	r3, [r7, #8]
20003afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
20003afe:	4b5b      	ldr	r3, [pc, #364]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b02:	4a5a      	ldr	r2, [pc, #360]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003b04:	f043 0308 	orr.w	r3, r3, #8
20003b08:	6313      	str	r3, [r2, #48]	@ 0x30
20003b0a:	4b58      	ldr	r3, [pc, #352]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b0e:	f003 0308 	and.w	r3, r3, #8
20003b12:	607b      	str	r3, [r7, #4]
20003b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
20003b16:	4b55      	ldr	r3, [pc, #340]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b1a:	4a54      	ldr	r2, [pc, #336]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20003b20:	6313      	str	r3, [r2, #48]	@ 0x30
20003b22:	4b52      	ldr	r3, [pc, #328]	@ (20003c6c <MX_GPIO_Init+0x1fc>)
20003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20003b2a:	603b      	str	r3, [r7, #0]
20003b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
20003b2e:	2200      	movs	r2, #0
20003b30:	f244 0181 	movw	r1, #16513	@ 0x4081
20003b34:	484e      	ldr	r0, [pc, #312]	@ (20003c70 <MX_GPIO_Init+0x200>)
20003b36:	f001 fa97 	bl	20005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
20003b3a:	2200      	movs	r2, #0
20003b3c:	2140      	movs	r1, #64	@ 0x40
20003b3e:	484d      	ldr	r0, [pc, #308]	@ (20003c74 <MX_GPIO_Init+0x204>)
20003b40:	f001 fa92 	bl	20005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TRST_Pin|JTAG_TDI_Pin, GPIO_PIN_SET);
20003b44:	2201      	movs	r2, #1
20003b46:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
20003b4a:	484b      	ldr	r0, [pc, #300]	@ (20003c78 <MX_GPIO_Init+0x208>)
20003b4c:	f001 fa8c 	bl	20005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TMS_Pin|JTAG_TCK_Pin, GPIO_PIN_RESET);
20003b50:	2200      	movs	r2, #0
20003b52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
20003b56:	4848      	ldr	r0, [pc, #288]	@ (20003c78 <MX_GPIO_Init+0x208>)
20003b58:	f001 fa86 	bl	20005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JTAG_SRST_GPIO_Port, JTAG_SRST_Pin, GPIO_PIN_SET);
20003b5c:	2201      	movs	r2, #1
20003b5e:	2104      	movs	r1, #4
20003b60:	4846      	ldr	r0, [pc, #280]	@ (20003c7c <MX_GPIO_Init+0x20c>)
20003b62:	f001 fa81 	bl	20005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
20003b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20003b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
20003b6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
20003b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003b72:	2300      	movs	r3, #0
20003b74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
20003b76:	f107 031c 	add.w	r3, r7, #28
20003b7a:	4619      	mov	r1, r3
20003b7c:	483e      	ldr	r0, [pc, #248]	@ (20003c78 <MX_GPIO_Init+0x208>)
20003b7e:	f001 f8c7 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
20003b82:	f244 0381 	movw	r3, #16513	@ 0x4081
20003b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003b88:	2301      	movs	r3, #1
20003b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003b8c:	2300      	movs	r3, #0
20003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20003b90:	2300      	movs	r3, #0
20003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20003b94:	f107 031c 	add.w	r3, r7, #28
20003b98:	4619      	mov	r1, r3
20003b9a:	4835      	ldr	r0, [pc, #212]	@ (20003c70 <MX_GPIO_Init+0x200>)
20003b9c:	f001 f8b8 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
20003ba0:	2340      	movs	r3, #64	@ 0x40
20003ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003ba4:	2301      	movs	r3, #1
20003ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003ba8:	2300      	movs	r3, #0
20003baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20003bac:	2300      	movs	r3, #0
20003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
20003bb0:	f107 031c 	add.w	r3, r7, #28
20003bb4:	4619      	mov	r1, r3
20003bb6:	482f      	ldr	r0, [pc, #188]	@ (20003c74 <MX_GPIO_Init+0x204>)
20003bb8:	f001 f8aa 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
20003bbc:	2380      	movs	r3, #128	@ 0x80
20003bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20003bc0:	2300      	movs	r3, #0
20003bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003bc4:	2300      	movs	r3, #0
20003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
20003bc8:	f107 031c 	add.w	r3, r7, #28
20003bcc:	4619      	mov	r1, r3
20003bce:	4829      	ldr	r0, [pc, #164]	@ (20003c74 <MX_GPIO_Init+0x204>)
20003bd0:	f001 f89e 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TRST_Pin */
  GPIO_InitStruct.Pin = JTAG_TRST_Pin;
20003bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
20003bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003bda:	2301      	movs	r3, #1
20003bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003bde:	2300      	movs	r3, #0
20003be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003be2:	2303      	movs	r3, #3
20003be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TRST_GPIO_Port, &GPIO_InitStruct);
20003be6:	f107 031c 	add.w	r3, r7, #28
20003bea:	4619      	mov	r1, r3
20003bec:	4822      	ldr	r0, [pc, #136]	@ (20003c78 <MX_GPIO_Init+0x208>)
20003bee:	f001 f88f 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : JTAG_TMS_Pin JTAG_TCK_Pin */
  GPIO_InitStruct.Pin = JTAG_TMS_Pin|JTAG_TCK_Pin;
20003bf2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
20003bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003bf8:	2301      	movs	r3, #1
20003bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20003bfc:	2302      	movs	r3, #2
20003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003c00:	2303      	movs	r3, #3
20003c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20003c04:	f107 031c 	add.w	r3, r7, #28
20003c08:	4619      	mov	r1, r3
20003c0a:	481b      	ldr	r0, [pc, #108]	@ (20003c78 <MX_GPIO_Init+0x208>)
20003c0c:	f001 f880 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDO_Pin */
  GPIO_InitStruct.Pin = JTAG_TDO_Pin;
20003c10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20003c16:	2300      	movs	r3, #0
20003c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20003c1a:	2301      	movs	r3, #1
20003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JTAG_TDO_GPIO_Port, &GPIO_InitStruct);
20003c1e:	f107 031c 	add.w	r3, r7, #28
20003c22:	4619      	mov	r1, r3
20003c24:	4814      	ldr	r0, [pc, #80]	@ (20003c78 <MX_GPIO_Init+0x208>)
20003c26:	f001 f873 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDI_Pin */
  GPIO_InitStruct.Pin = JTAG_TDI_Pin;
20003c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20003c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003c30:	2301      	movs	r3, #1
20003c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20003c34:	2301      	movs	r3, #1
20003c36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003c38:	2303      	movs	r3, #3
20003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TDI_GPIO_Port, &GPIO_InitStruct);
20003c3c:	f107 031c 	add.w	r3, r7, #28
20003c40:	4619      	mov	r1, r3
20003c42:	480d      	ldr	r0, [pc, #52]	@ (20003c78 <MX_GPIO_Init+0x208>)
20003c44:	f001 f864 	bl	20004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_SRST_Pin */
  GPIO_InitStruct.Pin = JTAG_SRST_Pin;
20003c48:	2304      	movs	r3, #4
20003c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003c4c:	2301      	movs	r3, #1
20003c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20003c50:	2301      	movs	r3, #1
20003c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003c54:	2303      	movs	r3, #3
20003c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_SRST_GPIO_Port, &GPIO_InitStruct);
20003c58:	f107 031c 	add.w	r3, r7, #28
20003c5c:	4619      	mov	r1, r3
20003c5e:	4807      	ldr	r0, [pc, #28]	@ (20003c7c <MX_GPIO_Init+0x20c>)
20003c60:	f001 f856 	bl	20004d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
20003c64:	bf00      	nop
20003c66:	3730      	adds	r7, #48	@ 0x30
20003c68:	46bd      	mov	sp, r7
20003c6a:	bd80      	pop	{r7, pc}
20003c6c:	40023800 	.word	0x40023800
20003c70:	40020400 	.word	0x40020400
20003c74:	40021800 	.word	0x40021800
20003c78:	40020800 	.word	0x40020800
20003c7c:	40020c00 	.word	0x40020c00

20003c80 <Switch_SPI>:

/* USER CODE BEGIN 4 */

uint32_t pupdr, afr, moder;
void Switch_SPI(void)
{
20003c80:	b480      	push	{r7}
20003c82:	af00      	add	r7, sp, #0
	pupdr = GPIOC->PUPDR;
20003c84:	4b0f      	ldr	r3, [pc, #60]	@ (20003cc4 <Switch_SPI+0x44>)
20003c86:	68db      	ldr	r3, [r3, #12]
20003c88:	4a0f      	ldr	r2, [pc, #60]	@ (20003cc8 <Switch_SPI+0x48>)
20003c8a:	6013      	str	r3, [r2, #0]
	afr = GPIOC->AFR[1];
20003c8c:	4b0d      	ldr	r3, [pc, #52]	@ (20003cc4 <Switch_SPI+0x44>)
20003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003c90:	4a0e      	ldr	r2, [pc, #56]	@ (20003ccc <Switch_SPI+0x4c>)
20003c92:	6013      	str	r3, [r2, #0]
	moder = GPIOC->MODER;
20003c94:	4b0b      	ldr	r3, [pc, #44]	@ (20003cc4 <Switch_SPI+0x44>)
20003c96:	681b      	ldr	r3, [r3, #0]
20003c98:	4a0d      	ldr	r2, [pc, #52]	@ (20003cd0 <Switch_SPI+0x50>)
20003c9a:	6013      	str	r3, [r2, #0]

	GPIOC->PUPDR = (0x1 << 16);
20003c9c:	4b09      	ldr	r3, [pc, #36]	@ (20003cc4 <Switch_SPI+0x44>)
20003c9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20003ca2:	60da      	str	r2, [r3, #12]
	GPIOC->AFR[1] = (0x6 << 8) | (0x6 << 12) | (0x6 << 16);
20003ca4:	4b07      	ldr	r3, [pc, #28]	@ (20003cc4 <Switch_SPI+0x44>)
20003ca6:	4a0b      	ldr	r2, [pc, #44]	@ (20003cd4 <Switch_SPI+0x54>)
20003ca8:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOC->MODER = (1 << 16) | (0x1 << 18) | (0x2 << 20) | (0x2 << 22 )| (0x2 << 24);
20003caa:	4b06      	ldr	r3, [pc, #24]	@ (20003cc4 <Switch_SPI+0x44>)
20003cac:	4a0a      	ldr	r2, [pc, #40]	@ (20003cd8 <Switch_SPI+0x58>)
20003cae:	601a      	str	r2, [r3, #0]

	SPI3->CR1 = (0x1 << 8) | (0x1 << 9) |
20003cb0:	4b0a      	ldr	r3, [pc, #40]	@ (20003cdc <Switch_SPI+0x5c>)
20003cb2:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
20003cb6:	601a      	str	r2, [r3, #0]
			(1 << 2) | (0x7 << 3) | (0x1 << 7) |
			(0x1 << 6);


}
20003cb8:	bf00      	nop
20003cba:	46bd      	mov	sp, r7
20003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20003cc0:	4770      	bx	lr
20003cc2:	bf00      	nop
20003cc4:	40020800 	.word	0x40020800
20003cc8:	2000dafc 	.word	0x2000dafc
20003ccc:	2000db00 	.word	0x2000db00
20003cd0:	2000db04 	.word	0x2000db04
20003cd4:	00066600 	.word	0x00066600
20003cd8:	02a50000 	.word	0x02a50000
20003cdc:	40003c00 	.word	0x40003c00

20003ce0 <WaitForComplete>:
{
	while( !(SPI3->SR & (0x1 << 7) ) );
}

static inline void WaitForComplete(void)
{
20003ce0:	b480      	push	{r7}
20003ce2:	af00      	add	r7, sp, #0
	while( (SPI3->SR & (0x1 << 7) ) );
20003ce4:	bf00      	nop
20003ce6:	4b06      	ldr	r3, [pc, #24]	@ (20003d00 <WaitForComplete+0x20>)
20003ce8:	689b      	ldr	r3, [r3, #8]
20003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003cee:	2b00      	cmp	r3, #0
20003cf0:	d1f9      	bne.n	20003ce6 <WaitForComplete+0x6>
}
20003cf2:	bf00      	nop
20003cf4:	bf00      	nop
20003cf6:	46bd      	mov	sp, r7
20003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
20003cfc:	4770      	bx	lr
20003cfe:	bf00      	nop
20003d00:	40003c00 	.word	0x40003c00

20003d04 <xFer>:

static inline void xFer(uint32_t *rdData, uint32_t wrData, uint8_t bitSize)
{
20003d04:	b580      	push	{r7, lr}
20003d06:	b086      	sub	sp, #24
20003d08:	af00      	add	r7, sp, #0
20003d0a:	60f8      	str	r0, [r7, #12]
20003d0c:	60b9      	str	r1, [r7, #8]
20003d0e:	4613      	mov	r3, r2
20003d10:	71fb      	strb	r3, [r7, #7]

	WaitForComplete();
20003d12:	f7ff ffe5 	bl	20003ce0 <WaitForComplete>
	uint8_t dummyStop = 1;
20003d16:	2301      	movs	r3, #1
20003d18:	75fb      	strb	r3, [r7, #23]



	SPI3->CR2 = ( (bitSize -1) << 8);
20003d1a:	79fb      	ldrb	r3, [r7, #7]
20003d1c:	3b01      	subs	r3, #1
20003d1e:	021a      	lsls	r2, r3, #8
20003d20:	4b12      	ldr	r3, [pc, #72]	@ (20003d6c <xFer+0x68>)
20003d22:	605a      	str	r2, [r3, #4]


	if(bitSize == 8)
20003d24:	79fb      	ldrb	r3, [r7, #7]
20003d26:	2b08      	cmp	r3, #8
20003d28:	d101      	bne.n	20003d2e <xFer+0x2a>
	{
		dummyStop = 0;
20003d2a:	2300      	movs	r3, #0
20003d2c:	75fb      	strb	r3, [r7, #23]
	}

	if(bitSize <= 8)
20003d2e:	79fb      	ldrb	r3, [r7, #7]
20003d30:	2b08      	cmp	r3, #8
20003d32:	d804      	bhi.n	20003d3e <xFer+0x3a>
	{
		*(uint8_t *)&SPI3->DR = wrData;
20003d34:	4b0e      	ldr	r3, [pc, #56]	@ (20003d70 <xFer+0x6c>)
20003d36:	68ba      	ldr	r2, [r7, #8]
20003d38:	b2d2      	uxtb	r2, r2
20003d3a:	701a      	strb	r2, [r3, #0]
20003d3c:	e002      	b.n	20003d44 <xFer+0x40>
	}
	else
	{
		SPI3->DR = wrData;
20003d3e:	4a0b      	ldr	r2, [pc, #44]	@ (20003d6c <xFer+0x68>)
20003d40:	68bb      	ldr	r3, [r7, #8]
20003d42:	60d3      	str	r3, [r2, #12]
	}




	WaitForComplete();
20003d44:	f7ff ffcc 	bl	20003ce0 <WaitForComplete>

	if(bitSize <= 8)
20003d48:	79fb      	ldrb	r3, [r7, #7]
20003d4a:	2b08      	cmp	r3, #8
20003d4c:	d805      	bhi.n	20003d5a <xFer+0x56>
	{
		*rdData = *(uint8_t *)&SPI3->DR;
20003d4e:	4b08      	ldr	r3, [pc, #32]	@ (20003d70 <xFer+0x6c>)
20003d50:	781b      	ldrb	r3, [r3, #0]
20003d52:	461a      	mov	r2, r3
20003d54:	68fb      	ldr	r3, [r7, #12]
20003d56:	601a      	str	r2, [r3, #0]
	{
		*rdData = *(uint16_t *)&SPI3->DR;
	}


}
20003d58:	e004      	b.n	20003d64 <xFer+0x60>
		*rdData = *(uint16_t *)&SPI3->DR;
20003d5a:	4b05      	ldr	r3, [pc, #20]	@ (20003d70 <xFer+0x6c>)
20003d5c:	881b      	ldrh	r3, [r3, #0]
20003d5e:	461a      	mov	r2, r3
20003d60:	68fb      	ldr	r3, [r7, #12]
20003d62:	601a      	str	r2, [r3, #0]
}
20003d64:	bf00      	nop
20003d66:	3718      	adds	r7, #24
20003d68:	46bd      	mov	sp, r7
20003d6a:	bd80      	pop	{r7, pc}
20003d6c:	40003c00 	.word	0x40003c00
20003d70:	40003c0c 	.word	0x40003c0c

20003d74 <SPI_TMS_Transfer>:


void SPI_TMS_Transfer(uint64_t data, uint8_t bits)
{
20003d74:	b480      	push	{r7}
20003d76:	b089      	sub	sp, #36	@ 0x24
20003d78:	af00      	add	r7, sp, #0
20003d7a:	e9c7 0102 	strd	r0, r1, [r7, #8]
20003d7e:	4613      	mov	r3, r2
20003d80:	71fb      	strb	r3, [r7, #7]

	int a = 0, b = 0;
20003d82:	2300      	movs	r3, #0
20003d84:	61bb      	str	r3, [r7, #24]
20003d86:	2300      	movs	r3, #0
20003d88:	61fb      	str	r3, [r7, #28]

	while( (SPI4->SR & (0x1 << 7) ) )
20003d8a:	e002      	b.n	20003d92 <SPI_TMS_Transfer+0x1e>
	{
		b++;
20003d8c:	69fb      	ldr	r3, [r7, #28]
20003d8e:	3301      	adds	r3, #1
20003d90:	61fb      	str	r3, [r7, #28]
	while( (SPI4->SR & (0x1 << 7) ) )
20003d92:	4b13      	ldr	r3, [pc, #76]	@ (20003de0 <SPI_TMS_Transfer+0x6c>)
20003d94:	689b      	ldr	r3, [r3, #8]
20003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003d9a:	2b00      	cmp	r3, #0
20003d9c:	d1f6      	bne.n	20003d8c <SPI_TMS_Transfer+0x18>
	}

	while( ( (SPI4->SR >> 11) & 0x3 ) != 0) ;
20003d9e:	bf00      	nop
20003da0:	4b0f      	ldr	r3, [pc, #60]	@ (20003de0 <SPI_TMS_Transfer+0x6c>)
20003da2:	689b      	ldr	r3, [r3, #8]
20003da4:	0adb      	lsrs	r3, r3, #11
20003da6:	f003 0303 	and.w	r3, r3, #3
20003daa:	2b00      	cmp	r3, #0
20003dac:	d1f8      	bne.n	20003da0 <SPI_TMS_Transfer+0x2c>


	uint32_t dummyRead = SPI4->DR;
20003dae:	4b0c      	ldr	r3, [pc, #48]	@ (20003de0 <SPI_TMS_Transfer+0x6c>)
20003db0:	68db      	ldr	r3, [r3, #12]
20003db2:	617b      	str	r3, [r7, #20]


	if(bits <= 8)
20003db4:	79fb      	ldrb	r3, [r7, #7]
20003db6:	2b08      	cmp	r3, #8
20003db8:	d803      	bhi.n	20003dc2 <SPI_TMS_Transfer+0x4e>
	{
		*(uint8_t *)&SPI4->DR = data;
20003dba:	4b0a      	ldr	r3, [pc, #40]	@ (20003de4 <SPI_TMS_Transfer+0x70>)
20003dbc:	7a3a      	ldrb	r2, [r7, #8]
20003dbe:	701a      	strb	r2, [r3, #0]
20003dc0:	e002      	b.n	20003dc8 <SPI_TMS_Transfer+0x54>
	}
	else
	{
		SPI4->DR = data;
20003dc2:	4a07      	ldr	r2, [pc, #28]	@ (20003de0 <SPI_TMS_Transfer+0x6c>)
20003dc4:	68bb      	ldr	r3, [r7, #8]
20003dc6:	60d3      	str	r3, [r2, #12]
	}


	SPI4->CR2 = ( (bits -1) << 8);
20003dc8:	79fb      	ldrb	r3, [r7, #7]
20003dca:	3b01      	subs	r3, #1
20003dcc:	021a      	lsls	r2, r3, #8
20003dce:	4b04      	ldr	r3, [pc, #16]	@ (20003de0 <SPI_TMS_Transfer+0x6c>)
20003dd0:	605a      	str	r2, [r3, #4]


}
20003dd2:	bf00      	nop
20003dd4:	3724      	adds	r7, #36	@ 0x24
20003dd6:	46bd      	mov	sp, r7
20003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20003ddc:	4770      	bx	lr
20003dde:	bf00      	nop
20003de0:	40013400 	.word	0x40013400
20003de4:	4001340c 	.word	0x4001340c

20003de8 <SPI_Transfer>:

int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize)
{
20003de8:	b5b0      	push	{r4, r5, r7, lr}
20003dea:	b088      	sub	sp, #32
20003dec:	af00      	add	r7, sp, #0
20003dee:	60f8      	str	r0, [r7, #12]
20003df0:	e9c7 2300 	strd	r2, r3, [r7]
	int retVal = -1;
20003df4:	f04f 33ff 	mov.w	r3, #4294967295
20003df8:	61fb      	str	r3, [r7, #28]
	int i = 0;
20003dfa:	2300      	movs	r3, #0
20003dfc:	61bb      	str	r3, [r7, #24]


	int halfWordIterationCnt = (bitSize / 16) -1;
20003dfe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
20003e02:	091b      	lsrs	r3, r3, #4
20003e04:	b2db      	uxtb	r3, r3
20003e06:	3b01      	subs	r3, #1
20003e08:	617b      	str	r3, [r7, #20]
	uint32_t tempReadVal, tempWriteVal;

	*rdData = 0;
20003e0a:	68f9      	ldr	r1, [r7, #12]
20003e0c:	f04f 0200 	mov.w	r2, #0
20003e10:	f04f 0300 	mov.w	r3, #0
20003e14:	e9c1 2300 	strd	r2, r3, [r1]
	xFer(&tempReadVal, wrData, bitSize);
20003e18:	6839      	ldr	r1, [r7, #0]
20003e1a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
20003e1e:	f107 0310 	add.w	r3, r7, #16
20003e22:	4618      	mov	r0, r3
20003e24:	f7ff ff6e 	bl	20003d04 <xFer>
	*rdData = tempReadVal;
20003e28:	693b      	ldr	r3, [r7, #16]
20003e2a:	2200      	movs	r2, #0
20003e2c:	461c      	mov	r4, r3
20003e2e:	4615      	mov	r5, r2
20003e30:	68fb      	ldr	r3, [r7, #12]
20003e32:	e9c3 4500 	strd	r4, r5, [r3]

}
20003e36:	bf00      	nop
20003e38:	4618      	mov	r0, r3
20003e3a:	3720      	adds	r7, #32
20003e3c:	46bd      	mov	sp, r7
20003e3e:	bdb0      	pop	{r4, r5, r7, pc}

20003e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20003e40:	b480      	push	{r7}
20003e42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20003e44:	b672      	cpsid	i
}
20003e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20003e48:	bf00      	nop
20003e4a:	e7fd      	b.n	20003e48 <Error_Handler+0x8>

20003e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20003e4c:	b480      	push	{r7}
20003e4e:	b083      	sub	sp, #12
20003e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
20003e52:	4b0f      	ldr	r3, [pc, #60]	@ (20003e90 <HAL_MspInit+0x44>)
20003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003e56:	4a0e      	ldr	r2, [pc, #56]	@ (20003e90 <HAL_MspInit+0x44>)
20003e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20003e5c:	6413      	str	r3, [r2, #64]	@ 0x40
20003e5e:	4b0c      	ldr	r3, [pc, #48]	@ (20003e90 <HAL_MspInit+0x44>)
20003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20003e66:	607b      	str	r3, [r7, #4]
20003e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
20003e6a:	4b09      	ldr	r3, [pc, #36]	@ (20003e90 <HAL_MspInit+0x44>)
20003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003e6e:	4a08      	ldr	r2, [pc, #32]	@ (20003e90 <HAL_MspInit+0x44>)
20003e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20003e74:	6453      	str	r3, [r2, #68]	@ 0x44
20003e76:	4b06      	ldr	r3, [pc, #24]	@ (20003e90 <HAL_MspInit+0x44>)
20003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20003e7e:	603b      	str	r3, [r7, #0]
20003e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20003e82:	bf00      	nop
20003e84:	370c      	adds	r7, #12
20003e86:	46bd      	mov	sp, r7
20003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
20003e8c:	4770      	bx	lr
20003e8e:	bf00      	nop
20003e90:	40023800 	.word	0x40023800

20003e94 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
20003e94:	b580      	push	{r7, lr}
20003e96:	b08e      	sub	sp, #56	@ 0x38
20003e98:	af00      	add	r7, sp, #0
20003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003ea0:	2200      	movs	r2, #0
20003ea2:	601a      	str	r2, [r3, #0]
20003ea4:	605a      	str	r2, [r3, #4]
20003ea6:	609a      	str	r2, [r3, #8]
20003ea8:	60da      	str	r2, [r3, #12]
20003eaa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
20003eac:	687b      	ldr	r3, [r7, #4]
20003eae:	681b      	ldr	r3, [r3, #0]
20003eb0:	4a4e      	ldr	r2, [pc, #312]	@ (20003fec <HAL_ETH_MspInit+0x158>)
20003eb2:	4293      	cmp	r3, r2
20003eb4:	f040 8096 	bne.w	20003fe4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
20003eb8:	4b4d      	ldr	r3, [pc, #308]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ebc:	4a4c      	ldr	r2, [pc, #304]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003ebe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
20003ec2:	6313      	str	r3, [r2, #48]	@ 0x30
20003ec4:	4b4a      	ldr	r3, [pc, #296]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20003ecc:	623b      	str	r3, [r7, #32]
20003ece:	6a3b      	ldr	r3, [r7, #32]
20003ed0:	4b47      	ldr	r3, [pc, #284]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ed4:	4a46      	ldr	r2, [pc, #280]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003ed6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20003eda:	6313      	str	r3, [r2, #48]	@ 0x30
20003edc:	4b44      	ldr	r3, [pc, #272]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
20003ee4:	61fb      	str	r3, [r7, #28]
20003ee6:	69fb      	ldr	r3, [r7, #28]
20003ee8:	4b41      	ldr	r3, [pc, #260]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003eec:	4a40      	ldr	r2, [pc, #256]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003eee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20003ef2:	6313      	str	r3, [r2, #48]	@ 0x30
20003ef4:	4b3e      	ldr	r3, [pc, #248]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20003efc:	61bb      	str	r3, [r7, #24]
20003efe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
20003f00:	4b3b      	ldr	r3, [pc, #236]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f04:	4a3a      	ldr	r2, [pc, #232]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f06:	f043 0304 	orr.w	r3, r3, #4
20003f0a:	6313      	str	r3, [r2, #48]	@ 0x30
20003f0c:	4b38      	ldr	r3, [pc, #224]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f10:	f003 0304 	and.w	r3, r3, #4
20003f14:	617b      	str	r3, [r7, #20]
20003f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
20003f18:	4b35      	ldr	r3, [pc, #212]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f1c:	4a34      	ldr	r2, [pc, #208]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f1e:	f043 0301 	orr.w	r3, r3, #1
20003f22:	6313      	str	r3, [r2, #48]	@ 0x30
20003f24:	4b32      	ldr	r3, [pc, #200]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f28:	f003 0301 	and.w	r3, r3, #1
20003f2c:	613b      	str	r3, [r7, #16]
20003f2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20003f30:	4b2f      	ldr	r3, [pc, #188]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f34:	4a2e      	ldr	r2, [pc, #184]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f36:	f043 0302 	orr.w	r3, r3, #2
20003f3a:	6313      	str	r3, [r2, #48]	@ 0x30
20003f3c:	4b2c      	ldr	r3, [pc, #176]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f40:	f003 0302 	and.w	r3, r3, #2
20003f44:	60fb      	str	r3, [r7, #12]
20003f46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
20003f48:	4b29      	ldr	r3, [pc, #164]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f4c:	4a28      	ldr	r2, [pc, #160]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20003f52:	6313      	str	r3, [r2, #48]	@ 0x30
20003f54:	4b26      	ldr	r3, [pc, #152]	@ (20003ff0 <HAL_ETH_MspInit+0x15c>)
20003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20003f5c:	60bb      	str	r3, [r7, #8]
20003f5e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
20003f60:	2332      	movs	r3, #50	@ 0x32
20003f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003f64:	2302      	movs	r3, #2
20003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003f68:	2300      	movs	r3, #0
20003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003f6c:	2303      	movs	r3, #3
20003f6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003f70:	230b      	movs	r3, #11
20003f72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20003f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003f78:	4619      	mov	r1, r3
20003f7a:	481e      	ldr	r0, [pc, #120]	@ (20003ff4 <HAL_ETH_MspInit+0x160>)
20003f7c:	f000 fec8 	bl	20004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
20003f80:	2386      	movs	r3, #134	@ 0x86
20003f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003f84:	2302      	movs	r3, #2
20003f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003f88:	2300      	movs	r3, #0
20003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003f8c:	2303      	movs	r3, #3
20003f8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003f90:	230b      	movs	r3, #11
20003f92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20003f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003f98:	4619      	mov	r1, r3
20003f9a:	4817      	ldr	r0, [pc, #92]	@ (20003ff8 <HAL_ETH_MspInit+0x164>)
20003f9c:	f000 feb8 	bl	20004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
20003fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003fa6:	2302      	movs	r3, #2
20003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003faa:	2300      	movs	r3, #0
20003fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003fae:	2303      	movs	r3, #3
20003fb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003fb2:	230b      	movs	r3, #11
20003fb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
20003fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003fba:	4619      	mov	r1, r3
20003fbc:	480f      	ldr	r0, [pc, #60]	@ (20003ffc <HAL_ETH_MspInit+0x168>)
20003fbe:	f000 fea7 	bl	20004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
20003fc2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
20003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003fc8:	2302      	movs	r3, #2
20003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003fcc:	2300      	movs	r3, #0
20003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003fd0:	2303      	movs	r3, #3
20003fd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003fd4:	230b      	movs	r3, #11
20003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
20003fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003fdc:	4619      	mov	r1, r3
20003fde:	4808      	ldr	r0, [pc, #32]	@ (20004000 <HAL_ETH_MspInit+0x16c>)
20003fe0:	f000 fe96 	bl	20004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
20003fe4:	bf00      	nop
20003fe6:	3738      	adds	r7, #56	@ 0x38
20003fe8:	46bd      	mov	sp, r7
20003fea:	bd80      	pop	{r7, pc}
20003fec:	40028000 	.word	0x40028000
20003ff0:	40023800 	.word	0x40023800
20003ff4:	40020800 	.word	0x40020800
20003ff8:	40020000 	.word	0x40020000
20003ffc:	40020400 	.word	0x40020400
20004000:	40021800 	.word	0x40021800

20004004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
20004004:	b580      	push	{r7, lr}
20004006:	b08c      	sub	sp, #48	@ 0x30
20004008:	af00      	add	r7, sp, #0
2000400a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000400c:	f107 031c 	add.w	r3, r7, #28
20004010:	2200      	movs	r2, #0
20004012:	601a      	str	r2, [r3, #0]
20004014:	605a      	str	r2, [r3, #4]
20004016:	609a      	str	r2, [r3, #8]
20004018:	60da      	str	r2, [r3, #12]
2000401a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
2000401c:	687b      	ldr	r3, [r7, #4]
2000401e:	681b      	ldr	r3, [r3, #0]
20004020:	4a3c      	ldr	r2, [pc, #240]	@ (20004114 <HAL_SPI_MspInit+0x110>)
20004022:	4293      	cmp	r3, r2
20004024:	d144      	bne.n	200040b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
20004026:	4b3c      	ldr	r3, [pc, #240]	@ (20004118 <HAL_SPI_MspInit+0x114>)
20004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000402a:	4a3b      	ldr	r2, [pc, #236]	@ (20004118 <HAL_SPI_MspInit+0x114>)
2000402c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
20004030:	6453      	str	r3, [r2, #68]	@ 0x44
20004032:	4b39      	ldr	r3, [pc, #228]	@ (20004118 <HAL_SPI_MspInit+0x114>)
20004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
2000403a:	61bb      	str	r3, [r7, #24]
2000403c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000403e:	4b36      	ldr	r3, [pc, #216]	@ (20004118 <HAL_SPI_MspInit+0x114>)
20004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004042:	4a35      	ldr	r2, [pc, #212]	@ (20004118 <HAL_SPI_MspInit+0x114>)
20004044:	f043 0301 	orr.w	r3, r3, #1
20004048:	6313      	str	r3, [r2, #48]	@ 0x30
2000404a:	4b33      	ldr	r3, [pc, #204]	@ (20004118 <HAL_SPI_MspInit+0x114>)
2000404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000404e:	f003 0301 	and.w	r3, r3, #1
20004052:	617b      	str	r3, [r7, #20]
20004054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20004056:	4b30      	ldr	r3, [pc, #192]	@ (20004118 <HAL_SPI_MspInit+0x114>)
20004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000405a:	4a2f      	ldr	r2, [pc, #188]	@ (20004118 <HAL_SPI_MspInit+0x114>)
2000405c:	f043 0302 	orr.w	r3, r3, #2
20004060:	6313      	str	r3, [r2, #48]	@ 0x30
20004062:	4b2d      	ldr	r3, [pc, #180]	@ (20004118 <HAL_SPI_MspInit+0x114>)
20004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004066:	f003 0302 	and.w	r3, r3, #2
2000406a:	613b      	str	r3, [r7, #16]
2000406c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
2000406e:	2360      	movs	r3, #96	@ 0x60
20004070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20004072:	2302      	movs	r3, #2
20004074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20004076:	2300      	movs	r3, #0
20004078:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000407a:	2303      	movs	r3, #3
2000407c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2000407e:	2305      	movs	r3, #5
20004080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20004082:	f107 031c 	add.w	r3, r7, #28
20004086:	4619      	mov	r1, r3
20004088:	4824      	ldr	r0, [pc, #144]	@ (2000411c <HAL_SPI_MspInit+0x118>)
2000408a:	f000 fe41 	bl	20004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
2000408e:	2320      	movs	r3, #32
20004090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20004092:	2302      	movs	r3, #2
20004094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20004096:	2300      	movs	r3, #0
20004098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000409a:	2303      	movs	r3, #3
2000409c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2000409e:	2305      	movs	r3, #5
200040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
200040a2:	f107 031c 	add.w	r3, r7, #28
200040a6:	4619      	mov	r1, r3
200040a8:	481d      	ldr	r0, [pc, #116]	@ (20004120 <HAL_SPI_MspInit+0x11c>)
200040aa:	f000 fe31 	bl	20004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
200040ae:	e02c      	b.n	2000410a <HAL_SPI_MspInit+0x106>
  else if(hspi->Instance==SPI4)
200040b0:	687b      	ldr	r3, [r7, #4]
200040b2:	681b      	ldr	r3, [r3, #0]
200040b4:	4a1b      	ldr	r2, [pc, #108]	@ (20004124 <HAL_SPI_MspInit+0x120>)
200040b6:	4293      	cmp	r3, r2
200040b8:	d127      	bne.n	2000410a <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
200040ba:	4b17      	ldr	r3, [pc, #92]	@ (20004118 <HAL_SPI_MspInit+0x114>)
200040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200040be:	4a16      	ldr	r2, [pc, #88]	@ (20004118 <HAL_SPI_MspInit+0x114>)
200040c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
200040c4:	6453      	str	r3, [r2, #68]	@ 0x44
200040c6:	4b14      	ldr	r3, [pc, #80]	@ (20004118 <HAL_SPI_MspInit+0x114>)
200040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200040ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200040ce:	60fb      	str	r3, [r7, #12]
200040d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
200040d2:	4b11      	ldr	r3, [pc, #68]	@ (20004118 <HAL_SPI_MspInit+0x114>)
200040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200040d6:	4a10      	ldr	r2, [pc, #64]	@ (20004118 <HAL_SPI_MspInit+0x114>)
200040d8:	f043 0310 	orr.w	r3, r3, #16
200040dc:	6313      	str	r3, [r2, #48]	@ 0x30
200040de:	4b0e      	ldr	r3, [pc, #56]	@ (20004118 <HAL_SPI_MspInit+0x114>)
200040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200040e2:	f003 0310 	and.w	r3, r3, #16
200040e6:	60bb      	str	r3, [r7, #8]
200040e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
200040ea:	2364      	movs	r3, #100	@ 0x64
200040ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200040ee:	2302      	movs	r3, #2
200040f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200040f2:	2300      	movs	r3, #0
200040f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200040f6:	2303      	movs	r3, #3
200040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
200040fa:	2305      	movs	r3, #5
200040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
200040fe:	f107 031c 	add.w	r3, r7, #28
20004102:	4619      	mov	r1, r3
20004104:	4808      	ldr	r0, [pc, #32]	@ (20004128 <HAL_SPI_MspInit+0x124>)
20004106:	f000 fe03 	bl	20004d10 <HAL_GPIO_Init>
}
2000410a:	bf00      	nop
2000410c:	3730      	adds	r7, #48	@ 0x30
2000410e:	46bd      	mov	sp, r7
20004110:	bd80      	pop	{r7, pc}
20004112:	bf00      	nop
20004114:	40013000 	.word	0x40013000
20004118:	40023800 	.word	0x40023800
2000411c:	40020000 	.word	0x40020000
20004120:	40020400 	.word	0x40020400
20004124:	40013400 	.word	0x40013400
20004128:	40021000 	.word	0x40021000

2000412c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
2000412c:	b580      	push	{r7, lr}
2000412e:	b0aa      	sub	sp, #168	@ 0xa8
20004130:	af00      	add	r7, sp, #0
20004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20004134:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20004138:	2200      	movs	r2, #0
2000413a:	601a      	str	r2, [r3, #0]
2000413c:	605a      	str	r2, [r3, #4]
2000413e:	609a      	str	r2, [r3, #8]
20004140:	60da      	str	r2, [r3, #12]
20004142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
20004144:	f107 0310 	add.w	r3, r7, #16
20004148:	2284      	movs	r2, #132	@ 0x84
2000414a:	2100      	movs	r1, #0
2000414c:	4618      	mov	r0, r3
2000414e:	f008 f8bd 	bl	2000c2cc <memset>
  if(huart->Instance==USART3)
20004152:	687b      	ldr	r3, [r7, #4]
20004154:	681b      	ldr	r3, [r3, #0]
20004156:	4a22      	ldr	r2, [pc, #136]	@ (200041e0 <HAL_UART_MspInit+0xb4>)
20004158:	4293      	cmp	r3, r2
2000415a:	d13c      	bne.n	200041d6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
2000415c:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004160:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
20004162:	2300      	movs	r3, #0
20004164:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
20004166:	f107 0310 	add.w	r3, r7, #16
2000416a:	4618      	mov	r0, r3
2000416c:	f002 ff64 	bl	20007038 <HAL_RCCEx_PeriphCLKConfig>
20004170:	4603      	mov	r3, r0
20004172:	2b00      	cmp	r3, #0
20004174:	d001      	beq.n	2000417a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
20004176:	f7ff fe63 	bl	20003e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
2000417a:	4b1a      	ldr	r3, [pc, #104]	@ (200041e4 <HAL_UART_MspInit+0xb8>)
2000417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000417e:	4a19      	ldr	r2, [pc, #100]	@ (200041e4 <HAL_UART_MspInit+0xb8>)
20004180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20004184:	6413      	str	r3, [r2, #64]	@ 0x40
20004186:	4b17      	ldr	r3, [pc, #92]	@ (200041e4 <HAL_UART_MspInit+0xb8>)
20004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000418a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2000418e:	60fb      	str	r3, [r7, #12]
20004190:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
20004192:	4b14      	ldr	r3, [pc, #80]	@ (200041e4 <HAL_UART_MspInit+0xb8>)
20004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004196:	4a13      	ldr	r2, [pc, #76]	@ (200041e4 <HAL_UART_MspInit+0xb8>)
20004198:	f043 0308 	orr.w	r3, r3, #8
2000419c:	6313      	str	r3, [r2, #48]	@ 0x30
2000419e:	4b11      	ldr	r3, [pc, #68]	@ (200041e4 <HAL_UART_MspInit+0xb8>)
200041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200041a2:	f003 0308 	and.w	r3, r3, #8
200041a6:	60bb      	str	r3, [r7, #8]
200041a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
200041aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
200041ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200041b2:	2302      	movs	r3, #2
200041b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
200041b8:	2301      	movs	r3, #1
200041ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200041be:	2303      	movs	r3, #3
200041c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
200041c4:	2307      	movs	r3, #7
200041c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
200041ca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
200041ce:	4619      	mov	r1, r3
200041d0:	4805      	ldr	r0, [pc, #20]	@ (200041e8 <HAL_UART_MspInit+0xbc>)
200041d2:	f000 fd9d 	bl	20004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
200041d6:	bf00      	nop
200041d8:	37a8      	adds	r7, #168	@ 0xa8
200041da:	46bd      	mov	sp, r7
200041dc:	bd80      	pop	{r7, pc}
200041de:	bf00      	nop
200041e0:	40004800 	.word	0x40004800
200041e4:	40023800 	.word	0x40023800
200041e8:	40020c00 	.word	0x40020c00

200041ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
200041ec:	b480      	push	{r7}
200041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
200041f0:	bf00      	nop
200041f2:	e7fd      	b.n	200041f0 <NMI_Handler+0x4>

200041f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
200041f4:	b480      	push	{r7}
200041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
200041f8:	bf00      	nop
200041fa:	e7fd      	b.n	200041f8 <HardFault_Handler+0x4>

200041fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
200041fc:	b480      	push	{r7}
200041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20004200:	bf00      	nop
20004202:	e7fd      	b.n	20004200 <MemManage_Handler+0x4>

20004204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20004204:	b480      	push	{r7}
20004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20004208:	bf00      	nop
2000420a:	e7fd      	b.n	20004208 <BusFault_Handler+0x4>

2000420c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000420c:	b480      	push	{r7}
2000420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20004210:	bf00      	nop
20004212:	e7fd      	b.n	20004210 <UsageFault_Handler+0x4>

20004214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20004214:	b480      	push	{r7}
20004216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
20004218:	bf00      	nop
2000421a:	46bd      	mov	sp, r7
2000421c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004220:	4770      	bx	lr

20004222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20004222:	b480      	push	{r7}
20004224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20004226:	bf00      	nop
20004228:	46bd      	mov	sp, r7
2000422a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000422e:	4770      	bx	lr

20004230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20004230:	b480      	push	{r7}
20004232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20004234:	bf00      	nop
20004236:	46bd      	mov	sp, r7
20004238:	f85d 7b04 	ldr.w	r7, [sp], #4
2000423c:	4770      	bx	lr

2000423e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000423e:	b580      	push	{r7, lr}
20004240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20004242:	f000 f8c1 	bl	200043c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20004246:	bf00      	nop
20004248:	bd80      	pop	{r7, pc}
	...

2000424c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
2000424c:	b580      	push	{r7, lr}
2000424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	cnt++;
20004250:	4b04      	ldr	r3, [pc, #16]	@ (20004264 <OTG_FS_IRQHandler+0x18>)
20004252:	681b      	ldr	r3, [r3, #0]
20004254:	3301      	adds	r3, #1
20004256:	4a03      	ldr	r2, [pc, #12]	@ (20004264 <OTG_FS_IRQHandler+0x18>)
20004258:	6013      	str	r3, [r2, #0]

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
2000425a:	4803      	ldr	r0, [pc, #12]	@ (20004268 <OTG_FS_IRQHandler+0x1c>)
2000425c:	f001 f86f 	bl	2000533e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
20004260:	bf00      	nop
20004262:	bd80      	pop	{r7, pc}
20004264:	2000db10 	.word	0x2000db10
20004268:	2000dffc 	.word	0x2000dffc

2000426c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000426c:	b580      	push	{r7, lr}
2000426e:	b086      	sub	sp, #24
20004270:	af00      	add	r7, sp, #0
20004272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20004274:	4a14      	ldr	r2, [pc, #80]	@ (200042c8 <_sbrk+0x5c>)
20004276:	4b15      	ldr	r3, [pc, #84]	@ (200042cc <_sbrk+0x60>)
20004278:	1ad3      	subs	r3, r2, r3
2000427a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000427c:	697b      	ldr	r3, [r7, #20]
2000427e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20004280:	4b13      	ldr	r3, [pc, #76]	@ (200042d0 <_sbrk+0x64>)
20004282:	681b      	ldr	r3, [r3, #0]
20004284:	2b00      	cmp	r3, #0
20004286:	d102      	bne.n	2000428e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20004288:	4b11      	ldr	r3, [pc, #68]	@ (200042d0 <_sbrk+0x64>)
2000428a:	4a12      	ldr	r2, [pc, #72]	@ (200042d4 <_sbrk+0x68>)
2000428c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000428e:	4b10      	ldr	r3, [pc, #64]	@ (200042d0 <_sbrk+0x64>)
20004290:	681a      	ldr	r2, [r3, #0]
20004292:	687b      	ldr	r3, [r7, #4]
20004294:	4413      	add	r3, r2
20004296:	693a      	ldr	r2, [r7, #16]
20004298:	429a      	cmp	r2, r3
2000429a:	d207      	bcs.n	200042ac <_sbrk+0x40>
  {
    errno = ENOMEM;
2000429c:	f008 f82e 	bl	2000c2fc <__errno>
200042a0:	4603      	mov	r3, r0
200042a2:	220c      	movs	r2, #12
200042a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
200042a6:	f04f 33ff 	mov.w	r3, #4294967295
200042aa:	e009      	b.n	200042c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
200042ac:	4b08      	ldr	r3, [pc, #32]	@ (200042d0 <_sbrk+0x64>)
200042ae:	681b      	ldr	r3, [r3, #0]
200042b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
200042b2:	4b07      	ldr	r3, [pc, #28]	@ (200042d0 <_sbrk+0x64>)
200042b4:	681a      	ldr	r2, [r3, #0]
200042b6:	687b      	ldr	r3, [r7, #4]
200042b8:	4413      	add	r3, r2
200042ba:	4a05      	ldr	r2, [pc, #20]	@ (200042d0 <_sbrk+0x64>)
200042bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
200042be:	68fb      	ldr	r3, [r7, #12]
}
200042c0:	4618      	mov	r0, r3
200042c2:	3718      	adds	r7, #24
200042c4:	46bd      	mov	sp, r7
200042c6:	bd80      	pop	{r7, pc}
200042c8:	20050000 	.word	0x20050000
200042cc:	00000400 	.word	0x00000400
200042d0:	2000db14 	.word	0x2000db14
200042d4:	2000e628 	.word	0x2000e628

200042d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200042d8:	b480      	push	{r7}
200042da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200042dc:	4b06      	ldr	r3, [pc, #24]	@ (200042f8 <SystemInit+0x20>)
200042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200042e2:	4a05      	ldr	r2, [pc, #20]	@ (200042f8 <SystemInit+0x20>)
200042e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
200042e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
200042ec:	bf00      	nop
200042ee:	46bd      	mov	sp, r7
200042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200042f4:	4770      	bx	lr
200042f6:	bf00      	nop
200042f8:	e000ed00 	.word	0xe000ed00

200042fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
200042fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 20004334 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
20004300:	f7ff ffea 	bl	200042d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20004304:	480c      	ldr	r0, [pc, #48]	@ (20004338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
20004306:	490d      	ldr	r1, [pc, #52]	@ (2000433c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
20004308:	4a0d      	ldr	r2, [pc, #52]	@ (20004340 <LoopFillZerobss+0x1a>)
  movs r3, #0
2000430a:	2300      	movs	r3, #0
  b LoopCopyDataInit
2000430c:	e002      	b.n	20004314 <LoopCopyDataInit>

2000430e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
2000430e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20004310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20004312:	3304      	adds	r3, #4

20004314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20004314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20004316:	428c      	cmp	r4, r1
  bcc CopyDataInit
20004318:	d3f9      	bcc.n	2000430e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
2000431a:	4a0a      	ldr	r2, [pc, #40]	@ (20004344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
2000431c:	4c0a      	ldr	r4, [pc, #40]	@ (20004348 <LoopFillZerobss+0x22>)
  movs r3, #0
2000431e:	2300      	movs	r3, #0
  b LoopFillZerobss
20004320:	e001      	b.n	20004326 <LoopFillZerobss>

20004322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20004322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20004324:	3204      	adds	r2, #4

20004326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20004326:	42a2      	cmp	r2, r4
  bcc FillZerobss
20004328:	d3fb      	bcc.n	20004322 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
2000432a:	f007 ffed 	bl	2000c308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000432e:	f7ff f9d3 	bl	200036d8 <main>
  bx  lr    
20004332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20004334:	20050000 	.word	0x20050000
  ldr r0, =_sdata
20004338:	2000c48c 	.word	0x2000c48c
  ldr r1, =_edata
2000433c:	2000c614 	.word	0x2000c614
  ldr r2, =_sidata
20004340:	2000c48c 	.word	0x2000c48c
  ldr r2, =_sbss
20004344:	2000c754 	.word	0x2000c754
  ldr r4, =_ebss
20004348:	2000e624 	.word	0x2000e624

2000434c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000434c:	e7fe      	b.n	2000434c <ADC_IRQHandler>

2000434e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000434e:	b580      	push	{r7, lr}
20004350:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20004352:	2003      	movs	r0, #3
20004354:	f000 f94c 	bl	200045f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20004358:	2000      	movs	r0, #0
2000435a:	f000 f805 	bl	20004368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000435e:	f7ff fd75 	bl	20003e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20004362:	2300      	movs	r3, #0
}
20004364:	4618      	mov	r0, r3
20004366:	bd80      	pop	{r7, pc}

20004368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20004368:	b580      	push	{r7, lr}
2000436a:	b082      	sub	sp, #8
2000436c:	af00      	add	r7, sp, #0
2000436e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20004370:	4b12      	ldr	r3, [pc, #72]	@ (200043bc <HAL_InitTick+0x54>)
20004372:	681a      	ldr	r2, [r3, #0]
20004374:	4b12      	ldr	r3, [pc, #72]	@ (200043c0 <HAL_InitTick+0x58>)
20004376:	781b      	ldrb	r3, [r3, #0]
20004378:	4619      	mov	r1, r3
2000437a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
2000437e:	fbb3 f3f1 	udiv	r3, r3, r1
20004382:	fbb2 f3f3 	udiv	r3, r2, r3
20004386:	4618      	mov	r0, r3
20004388:	f000 f967 	bl	2000465a <HAL_SYSTICK_Config>
2000438c:	4603      	mov	r3, r0
2000438e:	2b00      	cmp	r3, #0
20004390:	d001      	beq.n	20004396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20004392:	2301      	movs	r3, #1
20004394:	e00e      	b.n	200043b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20004396:	687b      	ldr	r3, [r7, #4]
20004398:	2b0f      	cmp	r3, #15
2000439a:	d80a      	bhi.n	200043b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000439c:	2200      	movs	r2, #0
2000439e:	6879      	ldr	r1, [r7, #4]
200043a0:	f04f 30ff 	mov.w	r0, #4294967295
200043a4:	f000 f92f 	bl	20004606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
200043a8:	4a06      	ldr	r2, [pc, #24]	@ (200043c4 <HAL_InitTick+0x5c>)
200043aa:	687b      	ldr	r3, [r7, #4]
200043ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
200043ae:	2300      	movs	r3, #0
200043b0:	e000      	b.n	200043b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
200043b2:	2301      	movs	r3, #1
}
200043b4:	4618      	mov	r0, r3
200043b6:	3708      	adds	r7, #8
200043b8:	46bd      	mov	sp, r7
200043ba:	bd80      	pop	{r7, pc}
200043bc:	2000c48c 	.word	0x2000c48c
200043c0:	2000c494 	.word	0x2000c494
200043c4:	2000c490 	.word	0x2000c490

200043c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
200043c8:	b480      	push	{r7}
200043ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
200043cc:	4b06      	ldr	r3, [pc, #24]	@ (200043e8 <HAL_IncTick+0x20>)
200043ce:	781b      	ldrb	r3, [r3, #0]
200043d0:	461a      	mov	r2, r3
200043d2:	4b06      	ldr	r3, [pc, #24]	@ (200043ec <HAL_IncTick+0x24>)
200043d4:	681b      	ldr	r3, [r3, #0]
200043d6:	4413      	add	r3, r2
200043d8:	4a04      	ldr	r2, [pc, #16]	@ (200043ec <HAL_IncTick+0x24>)
200043da:	6013      	str	r3, [r2, #0]
}
200043dc:	bf00      	nop
200043de:	46bd      	mov	sp, r7
200043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
200043e4:	4770      	bx	lr
200043e6:	bf00      	nop
200043e8:	2000c494 	.word	0x2000c494
200043ec:	2000db18 	.word	0x2000db18

200043f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
200043f0:	b480      	push	{r7}
200043f2:	af00      	add	r7, sp, #0
  return uwTick;
200043f4:	4b03      	ldr	r3, [pc, #12]	@ (20004404 <HAL_GetTick+0x14>)
200043f6:	681b      	ldr	r3, [r3, #0]
}
200043f8:	4618      	mov	r0, r3
200043fa:	46bd      	mov	sp, r7
200043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004400:	4770      	bx	lr
20004402:	bf00      	nop
20004404:	2000db18 	.word	0x2000db18

20004408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20004408:	b580      	push	{r7, lr}
2000440a:	b084      	sub	sp, #16
2000440c:	af00      	add	r7, sp, #0
2000440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20004410:	f7ff ffee 	bl	200043f0 <HAL_GetTick>
20004414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20004416:	687b      	ldr	r3, [r7, #4]
20004418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000441a:	68fb      	ldr	r3, [r7, #12]
2000441c:	f1b3 3fff 	cmp.w	r3, #4294967295
20004420:	d005      	beq.n	2000442e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20004422:	4b0a      	ldr	r3, [pc, #40]	@ (2000444c <HAL_Delay+0x44>)
20004424:	781b      	ldrb	r3, [r3, #0]
20004426:	461a      	mov	r2, r3
20004428:	68fb      	ldr	r3, [r7, #12]
2000442a:	4413      	add	r3, r2
2000442c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
2000442e:	bf00      	nop
20004430:	f7ff ffde 	bl	200043f0 <HAL_GetTick>
20004434:	4602      	mov	r2, r0
20004436:	68bb      	ldr	r3, [r7, #8]
20004438:	1ad3      	subs	r3, r2, r3
2000443a:	68fa      	ldr	r2, [r7, #12]
2000443c:	429a      	cmp	r2, r3
2000443e:	d8f7      	bhi.n	20004430 <HAL_Delay+0x28>
  {
  }
}
20004440:	bf00      	nop
20004442:	bf00      	nop
20004444:	3710      	adds	r7, #16
20004446:	46bd      	mov	sp, r7
20004448:	bd80      	pop	{r7, pc}
2000444a:	bf00      	nop
2000444c:	2000c494 	.word	0x2000c494

20004450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20004450:	b480      	push	{r7}
20004452:	b085      	sub	sp, #20
20004454:	af00      	add	r7, sp, #0
20004456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20004458:	687b      	ldr	r3, [r7, #4]
2000445a:	f003 0307 	and.w	r3, r3, #7
2000445e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20004460:	4b0b      	ldr	r3, [pc, #44]	@ (20004490 <__NVIC_SetPriorityGrouping+0x40>)
20004462:	68db      	ldr	r3, [r3, #12]
20004464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20004466:	68ba      	ldr	r2, [r7, #8]
20004468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
2000446c:	4013      	ands	r3, r2
2000446e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20004470:	68fb      	ldr	r3, [r7, #12]
20004472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20004474:	68bb      	ldr	r3, [r7, #8]
20004476:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
20004478:	4b06      	ldr	r3, [pc, #24]	@ (20004494 <__NVIC_SetPriorityGrouping+0x44>)
2000447a:	4313      	orrs	r3, r2
2000447c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000447e:	4a04      	ldr	r2, [pc, #16]	@ (20004490 <__NVIC_SetPriorityGrouping+0x40>)
20004480:	68bb      	ldr	r3, [r7, #8]
20004482:	60d3      	str	r3, [r2, #12]
}
20004484:	bf00      	nop
20004486:	3714      	adds	r7, #20
20004488:	46bd      	mov	sp, r7
2000448a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000448e:	4770      	bx	lr
20004490:	e000ed00 	.word	0xe000ed00
20004494:	05fa0000 	.word	0x05fa0000

20004498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20004498:	b480      	push	{r7}
2000449a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000449c:	4b04      	ldr	r3, [pc, #16]	@ (200044b0 <__NVIC_GetPriorityGrouping+0x18>)
2000449e:	68db      	ldr	r3, [r3, #12]
200044a0:	0a1b      	lsrs	r3, r3, #8
200044a2:	f003 0307 	and.w	r3, r3, #7
}
200044a6:	4618      	mov	r0, r3
200044a8:	46bd      	mov	sp, r7
200044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200044ae:	4770      	bx	lr
200044b0:	e000ed00 	.word	0xe000ed00

200044b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
200044b4:	b480      	push	{r7}
200044b6:	b083      	sub	sp, #12
200044b8:	af00      	add	r7, sp, #0
200044ba:	4603      	mov	r3, r0
200044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
200044c2:	2b00      	cmp	r3, #0
200044c4:	db0b      	blt.n	200044de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200044c6:	79fb      	ldrb	r3, [r7, #7]
200044c8:	f003 021f 	and.w	r2, r3, #31
200044cc:	4907      	ldr	r1, [pc, #28]	@ (200044ec <__NVIC_EnableIRQ+0x38>)
200044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
200044d2:	095b      	lsrs	r3, r3, #5
200044d4:	2001      	movs	r0, #1
200044d6:	fa00 f202 	lsl.w	r2, r0, r2
200044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200044de:	bf00      	nop
200044e0:	370c      	adds	r7, #12
200044e2:	46bd      	mov	sp, r7
200044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200044e8:	4770      	bx	lr
200044ea:	bf00      	nop
200044ec:	e000e100 	.word	0xe000e100

200044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200044f0:	b480      	push	{r7}
200044f2:	b083      	sub	sp, #12
200044f4:	af00      	add	r7, sp, #0
200044f6:	4603      	mov	r3, r0
200044f8:	6039      	str	r1, [r7, #0]
200044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004500:	2b00      	cmp	r3, #0
20004502:	db0a      	blt.n	2000451a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004504:	683b      	ldr	r3, [r7, #0]
20004506:	b2da      	uxtb	r2, r3
20004508:	490c      	ldr	r1, [pc, #48]	@ (2000453c <__NVIC_SetPriority+0x4c>)
2000450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000450e:	0112      	lsls	r2, r2, #4
20004510:	b2d2      	uxtb	r2, r2
20004512:	440b      	add	r3, r1
20004514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20004518:	e00a      	b.n	20004530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000451a:	683b      	ldr	r3, [r7, #0]
2000451c:	b2da      	uxtb	r2, r3
2000451e:	4908      	ldr	r1, [pc, #32]	@ (20004540 <__NVIC_SetPriority+0x50>)
20004520:	79fb      	ldrb	r3, [r7, #7]
20004522:	f003 030f 	and.w	r3, r3, #15
20004526:	3b04      	subs	r3, #4
20004528:	0112      	lsls	r2, r2, #4
2000452a:	b2d2      	uxtb	r2, r2
2000452c:	440b      	add	r3, r1
2000452e:	761a      	strb	r2, [r3, #24]
}
20004530:	bf00      	nop
20004532:	370c      	adds	r7, #12
20004534:	46bd      	mov	sp, r7
20004536:	f85d 7b04 	ldr.w	r7, [sp], #4
2000453a:	4770      	bx	lr
2000453c:	e000e100 	.word	0xe000e100
20004540:	e000ed00 	.word	0xe000ed00

20004544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20004544:	b480      	push	{r7}
20004546:	b089      	sub	sp, #36	@ 0x24
20004548:	af00      	add	r7, sp, #0
2000454a:	60f8      	str	r0, [r7, #12]
2000454c:	60b9      	str	r1, [r7, #8]
2000454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20004550:	68fb      	ldr	r3, [r7, #12]
20004552:	f003 0307 	and.w	r3, r3, #7
20004556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20004558:	69fb      	ldr	r3, [r7, #28]
2000455a:	f1c3 0307 	rsb	r3, r3, #7
2000455e:	2b04      	cmp	r3, #4
20004560:	bf28      	it	cs
20004562:	2304      	movcs	r3, #4
20004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20004566:	69fb      	ldr	r3, [r7, #28]
20004568:	3304      	adds	r3, #4
2000456a:	2b06      	cmp	r3, #6
2000456c:	d902      	bls.n	20004574 <NVIC_EncodePriority+0x30>
2000456e:	69fb      	ldr	r3, [r7, #28]
20004570:	3b03      	subs	r3, #3
20004572:	e000      	b.n	20004576 <NVIC_EncodePriority+0x32>
20004574:	2300      	movs	r3, #0
20004576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004578:	f04f 32ff 	mov.w	r2, #4294967295
2000457c:	69bb      	ldr	r3, [r7, #24]
2000457e:	fa02 f303 	lsl.w	r3, r2, r3
20004582:	43da      	mvns	r2, r3
20004584:	68bb      	ldr	r3, [r7, #8]
20004586:	401a      	ands	r2, r3
20004588:	697b      	ldr	r3, [r7, #20]
2000458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000458c:	f04f 31ff 	mov.w	r1, #4294967295
20004590:	697b      	ldr	r3, [r7, #20]
20004592:	fa01 f303 	lsl.w	r3, r1, r3
20004596:	43d9      	mvns	r1, r3
20004598:	687b      	ldr	r3, [r7, #4]
2000459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000459c:	4313      	orrs	r3, r2
         );
}
2000459e:	4618      	mov	r0, r3
200045a0:	3724      	adds	r7, #36	@ 0x24
200045a2:	46bd      	mov	sp, r7
200045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200045a8:	4770      	bx	lr
	...

200045ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200045ac:	b580      	push	{r7, lr}
200045ae:	b082      	sub	sp, #8
200045b0:	af00      	add	r7, sp, #0
200045b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200045b4:	687b      	ldr	r3, [r7, #4]
200045b6:	3b01      	subs	r3, #1
200045b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
200045bc:	d301      	bcc.n	200045c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200045be:	2301      	movs	r3, #1
200045c0:	e00f      	b.n	200045e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200045c2:	4a0a      	ldr	r2, [pc, #40]	@ (200045ec <SysTick_Config+0x40>)
200045c4:	687b      	ldr	r3, [r7, #4]
200045c6:	3b01      	subs	r3, #1
200045c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200045ca:	210f      	movs	r1, #15
200045cc:	f04f 30ff 	mov.w	r0, #4294967295
200045d0:	f7ff ff8e 	bl	200044f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200045d4:	4b05      	ldr	r3, [pc, #20]	@ (200045ec <SysTick_Config+0x40>)
200045d6:	2200      	movs	r2, #0
200045d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200045da:	4b04      	ldr	r3, [pc, #16]	@ (200045ec <SysTick_Config+0x40>)
200045dc:	2207      	movs	r2, #7
200045de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200045e0:	2300      	movs	r3, #0
}
200045e2:	4618      	mov	r0, r3
200045e4:	3708      	adds	r7, #8
200045e6:	46bd      	mov	sp, r7
200045e8:	bd80      	pop	{r7, pc}
200045ea:	bf00      	nop
200045ec:	e000e010 	.word	0xe000e010

200045f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200045f0:	b580      	push	{r7, lr}
200045f2:	b082      	sub	sp, #8
200045f4:	af00      	add	r7, sp, #0
200045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200045f8:	6878      	ldr	r0, [r7, #4]
200045fa:	f7ff ff29 	bl	20004450 <__NVIC_SetPriorityGrouping>
}
200045fe:	bf00      	nop
20004600:	3708      	adds	r7, #8
20004602:	46bd      	mov	sp, r7
20004604:	bd80      	pop	{r7, pc}

20004606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20004606:	b580      	push	{r7, lr}
20004608:	b086      	sub	sp, #24
2000460a:	af00      	add	r7, sp, #0
2000460c:	4603      	mov	r3, r0
2000460e:	60b9      	str	r1, [r7, #8]
20004610:	607a      	str	r2, [r7, #4]
20004612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
20004614:	2300      	movs	r3, #0
20004616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20004618:	f7ff ff3e 	bl	20004498 <__NVIC_GetPriorityGrouping>
2000461c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000461e:	687a      	ldr	r2, [r7, #4]
20004620:	68b9      	ldr	r1, [r7, #8]
20004622:	6978      	ldr	r0, [r7, #20]
20004624:	f7ff ff8e 	bl	20004544 <NVIC_EncodePriority>
20004628:	4602      	mov	r2, r0
2000462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000462e:	4611      	mov	r1, r2
20004630:	4618      	mov	r0, r3
20004632:	f7ff ff5d 	bl	200044f0 <__NVIC_SetPriority>
}
20004636:	bf00      	nop
20004638:	3718      	adds	r7, #24
2000463a:	46bd      	mov	sp, r7
2000463c:	bd80      	pop	{r7, pc}

2000463e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000463e:	b580      	push	{r7, lr}
20004640:	b082      	sub	sp, #8
20004642:	af00      	add	r7, sp, #0
20004644:	4603      	mov	r3, r0
20004646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000464c:	4618      	mov	r0, r3
2000464e:	f7ff ff31 	bl	200044b4 <__NVIC_EnableIRQ>
}
20004652:	bf00      	nop
20004654:	3708      	adds	r7, #8
20004656:	46bd      	mov	sp, r7
20004658:	bd80      	pop	{r7, pc}

2000465a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000465a:	b580      	push	{r7, lr}
2000465c:	b082      	sub	sp, #8
2000465e:	af00      	add	r7, sp, #0
20004660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20004662:	6878      	ldr	r0, [r7, #4]
20004664:	f7ff ffa2 	bl	200045ac <SysTick_Config>
20004668:	4603      	mov	r3, r0
}
2000466a:	4618      	mov	r0, r3
2000466c:	3708      	adds	r7, #8
2000466e:	46bd      	mov	sp, r7
20004670:	bd80      	pop	{r7, pc}
	...

20004674 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
20004674:	b580      	push	{r7, lr}
20004676:	b084      	sub	sp, #16
20004678:	af00      	add	r7, sp, #0
2000467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
2000467c:	687b      	ldr	r3, [r7, #4]
2000467e:	2b00      	cmp	r3, #0
20004680:	d101      	bne.n	20004686 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
20004682:	2301      	movs	r3, #1
20004684:	e086      	b.n	20004794 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
20004686:	687b      	ldr	r3, [r7, #4]
20004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2000468c:	2b00      	cmp	r3, #0
2000468e:	d106      	bne.n	2000469e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
20004690:	687b      	ldr	r3, [r7, #4]
20004692:	2220      	movs	r2, #32
20004694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
20004698:	6878      	ldr	r0, [r7, #4]
2000469a:	f7ff fbfb 	bl	20003e94 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000469e:	4b3f      	ldr	r3, [pc, #252]	@ (2000479c <HAL_ETH_Init+0x128>)
200046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200046a2:	4a3e      	ldr	r2, [pc, #248]	@ (2000479c <HAL_ETH_Init+0x128>)
200046a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
200046a8:	6453      	str	r3, [r2, #68]	@ 0x44
200046aa:	4b3c      	ldr	r3, [pc, #240]	@ (2000479c <HAL_ETH_Init+0x128>)
200046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200046ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
200046b2:	60bb      	str	r3, [r7, #8]
200046b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
200046b6:	4b3a      	ldr	r3, [pc, #232]	@ (200047a0 <HAL_ETH_Init+0x12c>)
200046b8:	685b      	ldr	r3, [r3, #4]
200046ba:	4a39      	ldr	r2, [pc, #228]	@ (200047a0 <HAL_ETH_Init+0x12c>)
200046bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
200046c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
200046c2:	4b37      	ldr	r3, [pc, #220]	@ (200047a0 <HAL_ETH_Init+0x12c>)
200046c4:	685a      	ldr	r2, [r3, #4]
200046c6:	687b      	ldr	r3, [r7, #4]
200046c8:	689b      	ldr	r3, [r3, #8]
200046ca:	4935      	ldr	r1, [pc, #212]	@ (200047a0 <HAL_ETH_Init+0x12c>)
200046cc:	4313      	orrs	r3, r2
200046ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
200046d0:	4b33      	ldr	r3, [pc, #204]	@ (200047a0 <HAL_ETH_Init+0x12c>)
200046d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
200046d4:	687b      	ldr	r3, [r7, #4]
200046d6:	681b      	ldr	r3, [r3, #0]
200046d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200046dc:	681b      	ldr	r3, [r3, #0]
200046de:	687a      	ldr	r2, [r7, #4]
200046e0:	6812      	ldr	r2, [r2, #0]
200046e2:	f043 0301 	orr.w	r3, r3, #1
200046e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
200046ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200046ec:	f7ff fe80 	bl	200043f0 <HAL_GetTick>
200046f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
200046f2:	e011      	b.n	20004718 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
200046f4:	f7ff fe7c 	bl	200043f0 <HAL_GetTick>
200046f8:	4602      	mov	r2, r0
200046fa:	68fb      	ldr	r3, [r7, #12]
200046fc:	1ad3      	subs	r3, r2, r3
200046fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
20004702:	d909      	bls.n	20004718 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
20004704:	687b      	ldr	r3, [r7, #4]
20004706:	2204      	movs	r2, #4
20004708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
2000470c:	687b      	ldr	r3, [r7, #4]
2000470e:	22e0      	movs	r2, #224	@ 0xe0
20004710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
20004714:	2301      	movs	r3, #1
20004716:	e03d      	b.n	20004794 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
20004718:	687b      	ldr	r3, [r7, #4]
2000471a:	681b      	ldr	r3, [r3, #0]
2000471c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004720:	681b      	ldr	r3, [r3, #0]
20004722:	f003 0301 	and.w	r3, r3, #1
20004726:	2b00      	cmp	r3, #0
20004728:	d1e4      	bne.n	200046f4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
2000472a:	6878      	ldr	r0, [r7, #4]
2000472c:	f000 f97a 	bl	20004a24 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
20004730:	6878      	ldr	r0, [r7, #4]
20004732:	f000 fa25 	bl	20004b80 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
20004736:	6878      	ldr	r0, [r7, #4]
20004738:	f000 fa7b 	bl	20004c32 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
2000473c:	687b      	ldr	r3, [r7, #4]
2000473e:	685b      	ldr	r3, [r3, #4]
20004740:	461a      	mov	r2, r3
20004742:	2100      	movs	r1, #0
20004744:	6878      	ldr	r0, [r7, #4]
20004746:	f000 f9e3 	bl	20004b10 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
2000474a:	687b      	ldr	r3, [r7, #4]
2000474c:	681b      	ldr	r3, [r3, #0]
2000474e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20004750:	687b      	ldr	r3, [r7, #4]
20004752:	681b      	ldr	r3, [r3, #0]
20004754:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
20004758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
2000475a:	687b      	ldr	r3, [r7, #4]
2000475c:	681b      	ldr	r3, [r3, #0]
2000475e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
20004762:	687b      	ldr	r3, [r7, #4]
20004764:	681a      	ldr	r2, [r3, #0]
20004766:	4b0f      	ldr	r3, [pc, #60]	@ (200047a4 <HAL_ETH_Init+0x130>)
20004768:	430b      	orrs	r3, r1
2000476a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
2000476e:	687b      	ldr	r3, [r7, #4]
20004770:	681b      	ldr	r3, [r3, #0]
20004772:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
20004776:	687b      	ldr	r3, [r7, #4]
20004778:	681b      	ldr	r3, [r3, #0]
2000477a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
2000477e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
20004782:	687b      	ldr	r3, [r7, #4]
20004784:	2200      	movs	r2, #0
20004786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
2000478a:	687b      	ldr	r3, [r7, #4]
2000478c:	2210      	movs	r2, #16
2000478e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
20004792:	2300      	movs	r3, #0
}
20004794:	4618      	mov	r0, r3
20004796:	3710      	adds	r7, #16
20004798:	46bd      	mov	sp, r7
2000479a:	bd80      	pop	{r7, pc}
2000479c:	40023800 	.word	0x40023800
200047a0:	40013800 	.word	0x40013800
200047a4:	00020060 	.word	0x00020060

200047a8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
200047a8:	b580      	push	{r7, lr}
200047aa:	b084      	sub	sp, #16
200047ac:	af00      	add	r7, sp, #0
200047ae:	6078      	str	r0, [r7, #4]
200047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
200047b2:	687b      	ldr	r3, [r7, #4]
200047b4:	681b      	ldr	r3, [r3, #0]
200047b6:	681b      	ldr	r3, [r3, #0]
200047b8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
200047ba:	68fa      	ldr	r2, [r7, #12]
200047bc:	4b53      	ldr	r3, [pc, #332]	@ (2000490c <ETH_SetMACConfig+0x164>)
200047be:	4013      	ands	r3, r2
200047c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
200047c2:	683b      	ldr	r3, [r7, #0]
200047c4:	7b9b      	ldrb	r3, [r3, #14]
200047c6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
200047c8:	683a      	ldr	r2, [r7, #0]
200047ca:	7c12      	ldrb	r2, [r2, #16]
200047cc:	2a00      	cmp	r2, #0
200047ce:	d102      	bne.n	200047d6 <ETH_SetMACConfig+0x2e>
200047d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
200047d4:	e000      	b.n	200047d8 <ETH_SetMACConfig+0x30>
200047d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
200047d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
200047da:	683a      	ldr	r2, [r7, #0]
200047dc:	7c52      	ldrb	r2, [r2, #17]
200047de:	2a00      	cmp	r2, #0
200047e0:	d102      	bne.n	200047e8 <ETH_SetMACConfig+0x40>
200047e2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
200047e6:	e000      	b.n	200047ea <ETH_SetMACConfig+0x42>
200047e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
200047ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
200047ec:	683b      	ldr	r3, [r7, #0]
200047ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
200047f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
200047f2:	683b      	ldr	r3, [r7, #0]
200047f4:	7fdb      	ldrb	r3, [r3, #31]
200047f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
200047f8:	431a      	orrs	r2, r3
                        macconf->Speed |
200047fa:	683b      	ldr	r3, [r7, #0]
200047fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
200047fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20004800:	683a      	ldr	r2, [r7, #0]
20004802:	7f92      	ldrb	r2, [r2, #30]
20004804:	2a00      	cmp	r2, #0
20004806:	d102      	bne.n	2000480e <ETH_SetMACConfig+0x66>
20004808:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
2000480c:	e000      	b.n	20004810 <ETH_SetMACConfig+0x68>
2000480e:	2200      	movs	r2, #0
                        macconf->Speed |
20004810:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
20004812:	683b      	ldr	r3, [r7, #0]
20004814:	7f1b      	ldrb	r3, [r3, #28]
20004816:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20004818:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
2000481a:	683b      	ldr	r3, [r7, #0]
2000481c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
2000481e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
20004820:	683b      	ldr	r3, [r7, #0]
20004822:	791b      	ldrb	r3, [r3, #4]
20004824:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
20004826:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
20004828:	683a      	ldr	r2, [r7, #0]
2000482a:	f892 2020 	ldrb.w	r2, [r2, #32]
2000482e:	2a00      	cmp	r2, #0
20004830:	d102      	bne.n	20004838 <ETH_SetMACConfig+0x90>
20004832:	f44f 7200 	mov.w	r2, #512	@ 0x200
20004836:	e000      	b.n	2000483a <ETH_SetMACConfig+0x92>
20004838:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
2000483a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
2000483c:	683b      	ldr	r3, [r7, #0]
2000483e:	7bdb      	ldrb	r3, [r3, #15]
20004840:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
20004842:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
20004844:	683b      	ldr	r3, [r7, #0]
20004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
20004848:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
2000484a:	683b      	ldr	r3, [r7, #0]
2000484c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
20004850:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20004852:	4313      	orrs	r3, r2
20004854:	68fa      	ldr	r2, [r7, #12]
20004856:	4313      	orrs	r3, r2
20004858:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
2000485a:	687b      	ldr	r3, [r7, #4]
2000485c:	681b      	ldr	r3, [r3, #0]
2000485e:	68fa      	ldr	r2, [r7, #12]
20004860:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
20004862:	687b      	ldr	r3, [r7, #4]
20004864:	681b      	ldr	r3, [r3, #0]
20004866:	681b      	ldr	r3, [r3, #0]
20004868:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
2000486a:	2001      	movs	r0, #1
2000486c:	f7ff fdcc 	bl	20004408 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
20004870:	687b      	ldr	r3, [r7, #4]
20004872:	681b      	ldr	r3, [r3, #0]
20004874:	68fa      	ldr	r2, [r7, #12]
20004876:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
20004878:	687b      	ldr	r3, [r7, #4]
2000487a:	681b      	ldr	r3, [r3, #0]
2000487c:	699b      	ldr	r3, [r3, #24]
2000487e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
20004880:	68fa      	ldr	r2, [r7, #12]
20004882:	f64f 7341 	movw	r3, #65345	@ 0xff41
20004886:	4013      	ands	r3, r2
20004888:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
2000488a:	683b      	ldr	r3, [r7, #0]
2000488c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2000488e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
20004890:	683a      	ldr	r2, [r7, #0]
20004892:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
20004896:	2a00      	cmp	r2, #0
20004898:	d101      	bne.n	2000489e <ETH_SetMACConfig+0xf6>
2000489a:	2280      	movs	r2, #128	@ 0x80
2000489c:	e000      	b.n	200048a0 <ETH_SetMACConfig+0xf8>
2000489e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
200048a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
200048a2:	683b      	ldr	r3, [r7, #0]
200048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
200048a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
200048a8:	683a      	ldr	r2, [r7, #0]
200048aa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
200048ae:	2a01      	cmp	r2, #1
200048b0:	d101      	bne.n	200048b6 <ETH_SetMACConfig+0x10e>
200048b2:	2208      	movs	r2, #8
200048b4:	e000      	b.n	200048b8 <ETH_SetMACConfig+0x110>
200048b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
200048b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
200048ba:	683a      	ldr	r2, [r7, #0]
200048bc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
200048c0:	2a01      	cmp	r2, #1
200048c2:	d101      	bne.n	200048c8 <ETH_SetMACConfig+0x120>
200048c4:	2204      	movs	r2, #4
200048c6:	e000      	b.n	200048ca <ETH_SetMACConfig+0x122>
200048c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
200048ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
200048cc:	683a      	ldr	r2, [r7, #0]
200048ce:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
200048d2:	2a01      	cmp	r2, #1
200048d4:	d101      	bne.n	200048da <ETH_SetMACConfig+0x132>
200048d6:	2202      	movs	r2, #2
200048d8:	e000      	b.n	200048dc <ETH_SetMACConfig+0x134>
200048da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
200048dc:	4313      	orrs	r3, r2
200048de:	68fa      	ldr	r2, [r7, #12]
200048e0:	4313      	orrs	r3, r2
200048e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
200048e4:	687b      	ldr	r3, [r7, #4]
200048e6:	681b      	ldr	r3, [r3, #0]
200048e8:	68fa      	ldr	r2, [r7, #12]
200048ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
200048ec:	687b      	ldr	r3, [r7, #4]
200048ee:	681b      	ldr	r3, [r3, #0]
200048f0:	699b      	ldr	r3, [r3, #24]
200048f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
200048f4:	2001      	movs	r0, #1
200048f6:	f7ff fd87 	bl	20004408 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
200048fa:	687b      	ldr	r3, [r7, #4]
200048fc:	681b      	ldr	r3, [r3, #0]
200048fe:	68fa      	ldr	r2, [r7, #12]
20004900:	619a      	str	r2, [r3, #24]
}
20004902:	bf00      	nop
20004904:	3710      	adds	r7, #16
20004906:	46bd      	mov	sp, r7
20004908:	bd80      	pop	{r7, pc}
2000490a:	bf00      	nop
2000490c:	fd20810f 	.word	0xfd20810f

20004910 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
20004910:	b580      	push	{r7, lr}
20004912:	b084      	sub	sp, #16
20004914:	af00      	add	r7, sp, #0
20004916:	6078      	str	r0, [r7, #4]
20004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
2000491a:	687b      	ldr	r3, [r7, #4]
2000491c:	681b      	ldr	r3, [r3, #0]
2000491e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004922:	699b      	ldr	r3, [r3, #24]
20004924:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
20004926:	68fa      	ldr	r2, [r7, #12]
20004928:	4b3d      	ldr	r3, [pc, #244]	@ (20004a20 <ETH_SetDMAConfig+0x110>)
2000492a:	4013      	ands	r3, r2
2000492c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
2000492e:	683b      	ldr	r3, [r7, #0]
20004930:	7b1b      	ldrb	r3, [r3, #12]
20004932:	2b00      	cmp	r3, #0
20004934:	d102      	bne.n	2000493c <ETH_SetDMAConfig+0x2c>
20004936:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
2000493a:	e000      	b.n	2000493e <ETH_SetDMAConfig+0x2e>
2000493c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
2000493e:	683b      	ldr	r3, [r7, #0]
20004940:	7b5b      	ldrb	r3, [r3, #13]
20004942:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
20004944:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
20004946:	683a      	ldr	r2, [r7, #0]
20004948:	7f52      	ldrb	r2, [r2, #29]
2000494a:	2a00      	cmp	r2, #0
2000494c:	d102      	bne.n	20004954 <ETH_SetDMAConfig+0x44>
2000494e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
20004952:	e000      	b.n	20004956 <ETH_SetDMAConfig+0x46>
20004954:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
20004956:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
20004958:	683b      	ldr	r3, [r7, #0]
2000495a:	7b9b      	ldrb	r3, [r3, #14]
2000495c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
2000495e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
20004960:	683b      	ldr	r3, [r7, #0]
20004962:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
20004964:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
20004966:	683b      	ldr	r3, [r7, #0]
20004968:	7f1b      	ldrb	r3, [r3, #28]
2000496a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
2000496c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
2000496e:	683b      	ldr	r3, [r7, #0]
20004970:	7f9b      	ldrb	r3, [r3, #30]
20004972:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
20004974:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
20004976:	683b      	ldr	r3, [r7, #0]
20004978:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
2000497a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
2000497c:	683b      	ldr	r3, [r7, #0]
2000497e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
20004982:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
20004984:	4313      	orrs	r3, r2
20004986:	68fa      	ldr	r2, [r7, #12]
20004988:	4313      	orrs	r3, r2
2000498a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
2000498c:	687b      	ldr	r3, [r7, #4]
2000498e:	681b      	ldr	r3, [r3, #0]
20004990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004994:	461a      	mov	r2, r3
20004996:	68fb      	ldr	r3, [r7, #12]
20004998:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
2000499a:	687b      	ldr	r3, [r7, #4]
2000499c:	681b      	ldr	r3, [r3, #0]
2000499e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200049a2:	699b      	ldr	r3, [r3, #24]
200049a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
200049a6:	2001      	movs	r0, #1
200049a8:	f7ff fd2e 	bl	20004408 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
200049ac:	687b      	ldr	r3, [r7, #4]
200049ae:	681b      	ldr	r3, [r3, #0]
200049b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200049b4:	461a      	mov	r2, r3
200049b6:	68fb      	ldr	r3, [r7, #12]
200049b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
200049ba:	683b      	ldr	r3, [r7, #0]
200049bc:	791b      	ldrb	r3, [r3, #4]
200049be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
200049c0:	683b      	ldr	r3, [r7, #0]
200049c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
200049c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
200049c6:	683b      	ldr	r3, [r7, #0]
200049c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
200049ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
200049cc:	683b      	ldr	r3, [r7, #0]
200049ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
200049d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
200049d2:	683b      	ldr	r3, [r7, #0]
200049d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
200049d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
200049da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
200049dc:	683b      	ldr	r3, [r7, #0]
200049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200049e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
200049e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
200049e4:	683b      	ldr	r3, [r7, #0]
200049e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
200049e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
200049ea:	687a      	ldr	r2, [r7, #4]
200049ec:	6812      	ldr	r2, [r2, #0]
200049ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
200049f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
200049f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
200049f8:	687b      	ldr	r3, [r7, #4]
200049fa:	681b      	ldr	r3, [r3, #0]
200049fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004a00:	681b      	ldr	r3, [r3, #0]
20004a02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20004a04:	2001      	movs	r0, #1
20004a06:	f7ff fcff 	bl	20004408 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
20004a0a:	687b      	ldr	r3, [r7, #4]
20004a0c:	681b      	ldr	r3, [r3, #0]
20004a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004a12:	461a      	mov	r2, r3
20004a14:	68fb      	ldr	r3, [r7, #12]
20004a16:	6013      	str	r3, [r2, #0]
}
20004a18:	bf00      	nop
20004a1a:	3710      	adds	r7, #16
20004a1c:	46bd      	mov	sp, r7
20004a1e:	bd80      	pop	{r7, pc}
20004a20:	f8de3f23 	.word	0xf8de3f23

20004a24 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
20004a24:	b580      	push	{r7, lr}
20004a26:	b0a6      	sub	sp, #152	@ 0x98
20004a28:	af00      	add	r7, sp, #0
20004a2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
20004a2c:	2301      	movs	r3, #1
20004a2e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
20004a32:	2301      	movs	r3, #1
20004a34:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
20004a38:	2300      	movs	r3, #0
20004a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
20004a3c:	2300      	movs	r3, #0
20004a3e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
20004a42:	2301      	movs	r3, #1
20004a44:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
20004a48:	2300      	movs	r3, #0
20004a4a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
20004a4e:	2301      	movs	r3, #1
20004a50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
20004a54:	2301      	movs	r3, #1
20004a56:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
20004a5a:	2300      	movs	r3, #0
20004a5c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
20004a60:	2300      	movs	r3, #0
20004a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
20004a66:	2300      	movs	r3, #0
20004a68:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
20004a6a:	2300      	movs	r3, #0
20004a6c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
20004a70:	2300      	movs	r3, #0
20004a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
20004a74:	2300      	movs	r3, #0
20004a76:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
20004a7a:	2300      	movs	r3, #0
20004a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
20004a80:	2300      	movs	r3, #0
20004a82:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
20004a86:	2300      	movs	r3, #0
20004a88:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
20004a8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
20004a90:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
20004a92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
20004a98:	2300      	movs	r3, #0
20004a9a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
20004a9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
20004aa2:	4619      	mov	r1, r3
20004aa4:	6878      	ldr	r0, [r7, #4]
20004aa6:	f7ff fe7f 	bl	200047a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
20004aaa:	2301      	movs	r3, #1
20004aac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
20004aae:	2301      	movs	r3, #1
20004ab0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
20004ab2:	2301      	movs	r3, #1
20004ab4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
20004ab8:	2301      	movs	r3, #1
20004aba:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
20004abc:	2300      	movs	r3, #0
20004abe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
20004ac0:	2300      	movs	r3, #0
20004ac2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
20004ac6:	2300      	movs	r3, #0
20004ac8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
20004acc:	2300      	movs	r3, #0
20004ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
20004ad0:	2301      	movs	r3, #1
20004ad2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
20004ad6:	2301      	movs	r3, #1
20004ad8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
20004ada:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004ade:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
20004ae0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20004ae4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
20004ae6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20004aea:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
20004aec:	2301      	movs	r3, #1
20004aee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
20004af2:	2300      	movs	r3, #0
20004af4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
20004af6:	2300      	movs	r3, #0
20004af8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
20004afa:	f107 0308 	add.w	r3, r7, #8
20004afe:	4619      	mov	r1, r3
20004b00:	6878      	ldr	r0, [r7, #4]
20004b02:	f7ff ff05 	bl	20004910 <ETH_SetDMAConfig>
}
20004b06:	bf00      	nop
20004b08:	3798      	adds	r7, #152	@ 0x98
20004b0a:	46bd      	mov	sp, r7
20004b0c:	bd80      	pop	{r7, pc}
	...

20004b10 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
20004b10:	b480      	push	{r7}
20004b12:	b087      	sub	sp, #28
20004b14:	af00      	add	r7, sp, #0
20004b16:	60f8      	str	r0, [r7, #12]
20004b18:	60b9      	str	r1, [r7, #8]
20004b1a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
20004b1c:	687b      	ldr	r3, [r7, #4]
20004b1e:	3305      	adds	r3, #5
20004b20:	781b      	ldrb	r3, [r3, #0]
20004b22:	021b      	lsls	r3, r3, #8
20004b24:	687a      	ldr	r2, [r7, #4]
20004b26:	3204      	adds	r2, #4
20004b28:	7812      	ldrb	r2, [r2, #0]
20004b2a:	4313      	orrs	r3, r2
20004b2c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
20004b2e:	68ba      	ldr	r2, [r7, #8]
20004b30:	4b11      	ldr	r3, [pc, #68]	@ (20004b78 <ETH_MACAddressConfig+0x68>)
20004b32:	4413      	add	r3, r2
20004b34:	461a      	mov	r2, r3
20004b36:	697b      	ldr	r3, [r7, #20]
20004b38:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
20004b3a:	687b      	ldr	r3, [r7, #4]
20004b3c:	3303      	adds	r3, #3
20004b3e:	781b      	ldrb	r3, [r3, #0]
20004b40:	061a      	lsls	r2, r3, #24
20004b42:	687b      	ldr	r3, [r7, #4]
20004b44:	3302      	adds	r3, #2
20004b46:	781b      	ldrb	r3, [r3, #0]
20004b48:	041b      	lsls	r3, r3, #16
20004b4a:	431a      	orrs	r2, r3
20004b4c:	687b      	ldr	r3, [r7, #4]
20004b4e:	3301      	adds	r3, #1
20004b50:	781b      	ldrb	r3, [r3, #0]
20004b52:	021b      	lsls	r3, r3, #8
20004b54:	4313      	orrs	r3, r2
20004b56:	687a      	ldr	r2, [r7, #4]
20004b58:	7812      	ldrb	r2, [r2, #0]
20004b5a:	4313      	orrs	r3, r2
20004b5c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
20004b5e:	68ba      	ldr	r2, [r7, #8]
20004b60:	4b06      	ldr	r3, [pc, #24]	@ (20004b7c <ETH_MACAddressConfig+0x6c>)
20004b62:	4413      	add	r3, r2
20004b64:	461a      	mov	r2, r3
20004b66:	697b      	ldr	r3, [r7, #20]
20004b68:	6013      	str	r3, [r2, #0]
}
20004b6a:	bf00      	nop
20004b6c:	371c      	adds	r7, #28
20004b6e:	46bd      	mov	sp, r7
20004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b74:	4770      	bx	lr
20004b76:	bf00      	nop
20004b78:	40028040 	.word	0x40028040
20004b7c:	40028044 	.word	0x40028044

20004b80 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
20004b80:	b480      	push	{r7}
20004b82:	b085      	sub	sp, #20
20004b84:	af00      	add	r7, sp, #0
20004b86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20004b88:	2300      	movs	r3, #0
20004b8a:	60fb      	str	r3, [r7, #12]
20004b8c:	e03e      	b.n	20004c0c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
20004b8e:	687b      	ldr	r3, [r7, #4]
20004b90:	68d9      	ldr	r1, [r3, #12]
20004b92:	68fa      	ldr	r2, [r7, #12]
20004b94:	4613      	mov	r3, r2
20004b96:	009b      	lsls	r3, r3, #2
20004b98:	4413      	add	r3, r2
20004b9a:	00db      	lsls	r3, r3, #3
20004b9c:	440b      	add	r3, r1
20004b9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
20004ba0:	68bb      	ldr	r3, [r7, #8]
20004ba2:	2200      	movs	r2, #0
20004ba4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
20004ba6:	68bb      	ldr	r3, [r7, #8]
20004ba8:	2200      	movs	r2, #0
20004baa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
20004bac:	68bb      	ldr	r3, [r7, #8]
20004bae:	2200      	movs	r2, #0
20004bb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
20004bb2:	68bb      	ldr	r3, [r7, #8]
20004bb4:	2200      	movs	r2, #0
20004bb6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
20004bb8:	68b9      	ldr	r1, [r7, #8]
20004bba:	687b      	ldr	r3, [r7, #4]
20004bbc:	68fa      	ldr	r2, [r7, #12]
20004bbe:	3206      	adds	r2, #6
20004bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
20004bc4:	68bb      	ldr	r3, [r7, #8]
20004bc6:	681b      	ldr	r3, [r3, #0]
20004bc8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20004bcc:	68bb      	ldr	r3, [r7, #8]
20004bce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
20004bd0:	68fb      	ldr	r3, [r7, #12]
20004bd2:	2b02      	cmp	r3, #2
20004bd4:	d80c      	bhi.n	20004bf0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
20004bd6:	687b      	ldr	r3, [r7, #4]
20004bd8:	68d9      	ldr	r1, [r3, #12]
20004bda:	68fb      	ldr	r3, [r7, #12]
20004bdc:	1c5a      	adds	r2, r3, #1
20004bde:	4613      	mov	r3, r2
20004be0:	009b      	lsls	r3, r3, #2
20004be2:	4413      	add	r3, r2
20004be4:	00db      	lsls	r3, r3, #3
20004be6:	440b      	add	r3, r1
20004be8:	461a      	mov	r2, r3
20004bea:	68bb      	ldr	r3, [r7, #8]
20004bec:	60da      	str	r2, [r3, #12]
20004bee:	e004      	b.n	20004bfa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
20004bf0:	687b      	ldr	r3, [r7, #4]
20004bf2:	68db      	ldr	r3, [r3, #12]
20004bf4:	461a      	mov	r2, r3
20004bf6:	68bb      	ldr	r3, [r7, #8]
20004bf8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
20004bfa:	68bb      	ldr	r3, [r7, #8]
20004bfc:	681b      	ldr	r3, [r3, #0]
20004bfe:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
20004c02:	68bb      	ldr	r3, [r7, #8]
20004c04:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20004c06:	68fb      	ldr	r3, [r7, #12]
20004c08:	3301      	adds	r3, #1
20004c0a:	60fb      	str	r3, [r7, #12]
20004c0c:	68fb      	ldr	r3, [r7, #12]
20004c0e:	2b03      	cmp	r3, #3
20004c10:	d9bd      	bls.n	20004b8e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
20004c12:	687b      	ldr	r3, [r7, #4]
20004c14:	2200      	movs	r2, #0
20004c16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
20004c18:	687b      	ldr	r3, [r7, #4]
20004c1a:	68da      	ldr	r2, [r3, #12]
20004c1c:	687b      	ldr	r3, [r7, #4]
20004c1e:	681b      	ldr	r3, [r3, #0]
20004c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004c24:	611a      	str	r2, [r3, #16]
}
20004c26:	bf00      	nop
20004c28:	3714      	adds	r7, #20
20004c2a:	46bd      	mov	sp, r7
20004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c30:	4770      	bx	lr

20004c32 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
20004c32:	b480      	push	{r7}
20004c34:	b085      	sub	sp, #20
20004c36:	af00      	add	r7, sp, #0
20004c38:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20004c3a:	2300      	movs	r3, #0
20004c3c:	60fb      	str	r3, [r7, #12]
20004c3e:	e048      	b.n	20004cd2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
20004c40:	687b      	ldr	r3, [r7, #4]
20004c42:	6919      	ldr	r1, [r3, #16]
20004c44:	68fa      	ldr	r2, [r7, #12]
20004c46:	4613      	mov	r3, r2
20004c48:	009b      	lsls	r3, r3, #2
20004c4a:	4413      	add	r3, r2
20004c4c:	00db      	lsls	r3, r3, #3
20004c4e:	440b      	add	r3, r1
20004c50:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
20004c52:	68bb      	ldr	r3, [r7, #8]
20004c54:	2200      	movs	r2, #0
20004c56:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
20004c58:	68bb      	ldr	r3, [r7, #8]
20004c5a:	2200      	movs	r2, #0
20004c5c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
20004c5e:	68bb      	ldr	r3, [r7, #8]
20004c60:	2200      	movs	r2, #0
20004c62:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
20004c64:	68bb      	ldr	r3, [r7, #8]
20004c66:	2200      	movs	r2, #0
20004c68:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
20004c6a:	68bb      	ldr	r3, [r7, #8]
20004c6c:	2200      	movs	r2, #0
20004c6e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
20004c70:	68bb      	ldr	r3, [r7, #8]
20004c72:	2200      	movs	r2, #0
20004c74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
20004c76:	68bb      	ldr	r3, [r7, #8]
20004c78:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
20004c7c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
20004c7e:	687b      	ldr	r3, [r7, #4]
20004c80:	695b      	ldr	r3, [r3, #20]
20004c82:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
20004c86:	68bb      	ldr	r3, [r7, #8]
20004c88:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
20004c8a:	68bb      	ldr	r3, [r7, #8]
20004c8c:	685b      	ldr	r3, [r3, #4]
20004c8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
20004c92:	68bb      	ldr	r3, [r7, #8]
20004c94:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
20004c96:	68b9      	ldr	r1, [r7, #8]
20004c98:	687b      	ldr	r3, [r7, #4]
20004c9a:	68fa      	ldr	r2, [r7, #12]
20004c9c:	3212      	adds	r2, #18
20004c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
20004ca2:	68fb      	ldr	r3, [r7, #12]
20004ca4:	2b02      	cmp	r3, #2
20004ca6:	d80c      	bhi.n	20004cc2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
20004ca8:	687b      	ldr	r3, [r7, #4]
20004caa:	6919      	ldr	r1, [r3, #16]
20004cac:	68fb      	ldr	r3, [r7, #12]
20004cae:	1c5a      	adds	r2, r3, #1
20004cb0:	4613      	mov	r3, r2
20004cb2:	009b      	lsls	r3, r3, #2
20004cb4:	4413      	add	r3, r2
20004cb6:	00db      	lsls	r3, r3, #3
20004cb8:	440b      	add	r3, r1
20004cba:	461a      	mov	r2, r3
20004cbc:	68bb      	ldr	r3, [r7, #8]
20004cbe:	60da      	str	r2, [r3, #12]
20004cc0:	e004      	b.n	20004ccc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
20004cc2:	687b      	ldr	r3, [r7, #4]
20004cc4:	691b      	ldr	r3, [r3, #16]
20004cc6:	461a      	mov	r2, r3
20004cc8:	68bb      	ldr	r3, [r7, #8]
20004cca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20004ccc:	68fb      	ldr	r3, [r7, #12]
20004cce:	3301      	adds	r3, #1
20004cd0:	60fb      	str	r3, [r7, #12]
20004cd2:	68fb      	ldr	r3, [r7, #12]
20004cd4:	2b03      	cmp	r3, #3
20004cd6:	d9b3      	bls.n	20004c40 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
20004cd8:	687b      	ldr	r3, [r7, #4]
20004cda:	2200      	movs	r2, #0
20004cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
20004cde:	687b      	ldr	r3, [r7, #4]
20004ce0:	2200      	movs	r2, #0
20004ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
20004ce4:	687b      	ldr	r3, [r7, #4]
20004ce6:	2200      	movs	r2, #0
20004ce8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
20004cea:	687b      	ldr	r3, [r7, #4]
20004cec:	2200      	movs	r2, #0
20004cee:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
20004cf0:	687b      	ldr	r3, [r7, #4]
20004cf2:	2200      	movs	r2, #0
20004cf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
20004cf6:	687b      	ldr	r3, [r7, #4]
20004cf8:	691a      	ldr	r2, [r3, #16]
20004cfa:	687b      	ldr	r3, [r7, #4]
20004cfc:	681b      	ldr	r3, [r3, #0]
20004cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004d02:	60da      	str	r2, [r3, #12]
}
20004d04:	bf00      	nop
20004d06:	3714      	adds	r7, #20
20004d08:	46bd      	mov	sp, r7
20004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d0e:	4770      	bx	lr

20004d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20004d10:	b480      	push	{r7}
20004d12:	b089      	sub	sp, #36	@ 0x24
20004d14:	af00      	add	r7, sp, #0
20004d16:	6078      	str	r0, [r7, #4]
20004d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
20004d1a:	2300      	movs	r3, #0
20004d1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
20004d1e:	2300      	movs	r3, #0
20004d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
20004d22:	2300      	movs	r3, #0
20004d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
20004d26:	2300      	movs	r3, #0
20004d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
20004d2a:	2300      	movs	r3, #0
20004d2c:	61fb      	str	r3, [r7, #28]
20004d2e:	e175      	b.n	2000501c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
20004d30:	2201      	movs	r2, #1
20004d32:	69fb      	ldr	r3, [r7, #28]
20004d34:	fa02 f303 	lsl.w	r3, r2, r3
20004d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20004d3a:	683b      	ldr	r3, [r7, #0]
20004d3c:	681b      	ldr	r3, [r3, #0]
20004d3e:	697a      	ldr	r2, [r7, #20]
20004d40:	4013      	ands	r3, r2
20004d42:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
20004d44:	693a      	ldr	r2, [r7, #16]
20004d46:	697b      	ldr	r3, [r7, #20]
20004d48:	429a      	cmp	r2, r3
20004d4a:	f040 8164 	bne.w	20005016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
20004d4e:	683b      	ldr	r3, [r7, #0]
20004d50:	685b      	ldr	r3, [r3, #4]
20004d52:	f003 0303 	and.w	r3, r3, #3
20004d56:	2b01      	cmp	r3, #1
20004d58:	d005      	beq.n	20004d66 <HAL_GPIO_Init+0x56>
20004d5a:	683b      	ldr	r3, [r7, #0]
20004d5c:	685b      	ldr	r3, [r3, #4]
20004d5e:	f003 0303 	and.w	r3, r3, #3
20004d62:	2b02      	cmp	r3, #2
20004d64:	d130      	bne.n	20004dc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
20004d66:	687b      	ldr	r3, [r7, #4]
20004d68:	689b      	ldr	r3, [r3, #8]
20004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
20004d6c:	69fb      	ldr	r3, [r7, #28]
20004d6e:	005b      	lsls	r3, r3, #1
20004d70:	2203      	movs	r2, #3
20004d72:	fa02 f303 	lsl.w	r3, r2, r3
20004d76:	43db      	mvns	r3, r3
20004d78:	69ba      	ldr	r2, [r7, #24]
20004d7a:	4013      	ands	r3, r2
20004d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
20004d7e:	683b      	ldr	r3, [r7, #0]
20004d80:	68da      	ldr	r2, [r3, #12]
20004d82:	69fb      	ldr	r3, [r7, #28]
20004d84:	005b      	lsls	r3, r3, #1
20004d86:	fa02 f303 	lsl.w	r3, r2, r3
20004d8a:	69ba      	ldr	r2, [r7, #24]
20004d8c:	4313      	orrs	r3, r2
20004d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20004d90:	687b      	ldr	r3, [r7, #4]
20004d92:	69ba      	ldr	r2, [r7, #24]
20004d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20004d96:	687b      	ldr	r3, [r7, #4]
20004d98:	685b      	ldr	r3, [r3, #4]
20004d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20004d9c:	2201      	movs	r2, #1
20004d9e:	69fb      	ldr	r3, [r7, #28]
20004da0:	fa02 f303 	lsl.w	r3, r2, r3
20004da4:	43db      	mvns	r3, r3
20004da6:	69ba      	ldr	r2, [r7, #24]
20004da8:	4013      	ands	r3, r2
20004daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20004dac:	683b      	ldr	r3, [r7, #0]
20004dae:	685b      	ldr	r3, [r3, #4]
20004db0:	091b      	lsrs	r3, r3, #4
20004db2:	f003 0201 	and.w	r2, r3, #1
20004db6:	69fb      	ldr	r3, [r7, #28]
20004db8:	fa02 f303 	lsl.w	r3, r2, r3
20004dbc:	69ba      	ldr	r2, [r7, #24]
20004dbe:	4313      	orrs	r3, r2
20004dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20004dc2:	687b      	ldr	r3, [r7, #4]
20004dc4:	69ba      	ldr	r2, [r7, #24]
20004dc6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20004dc8:	683b      	ldr	r3, [r7, #0]
20004dca:	685b      	ldr	r3, [r3, #4]
20004dcc:	f003 0303 	and.w	r3, r3, #3
20004dd0:	2b03      	cmp	r3, #3
20004dd2:	d017      	beq.n	20004e04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20004dd4:	687b      	ldr	r3, [r7, #4]
20004dd6:	68db      	ldr	r3, [r3, #12]
20004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20004dda:	69fb      	ldr	r3, [r7, #28]
20004ddc:	005b      	lsls	r3, r3, #1
20004dde:	2203      	movs	r2, #3
20004de0:	fa02 f303 	lsl.w	r3, r2, r3
20004de4:	43db      	mvns	r3, r3
20004de6:	69ba      	ldr	r2, [r7, #24]
20004de8:	4013      	ands	r3, r2
20004dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
20004dec:	683b      	ldr	r3, [r7, #0]
20004dee:	689a      	ldr	r2, [r3, #8]
20004df0:	69fb      	ldr	r3, [r7, #28]
20004df2:	005b      	lsls	r3, r3, #1
20004df4:	fa02 f303 	lsl.w	r3, r2, r3
20004df8:	69ba      	ldr	r2, [r7, #24]
20004dfa:	4313      	orrs	r3, r2
20004dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20004dfe:	687b      	ldr	r3, [r7, #4]
20004e00:	69ba      	ldr	r2, [r7, #24]
20004e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20004e04:	683b      	ldr	r3, [r7, #0]
20004e06:	685b      	ldr	r3, [r3, #4]
20004e08:	f003 0303 	and.w	r3, r3, #3
20004e0c:	2b02      	cmp	r3, #2
20004e0e:	d123      	bne.n	20004e58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
20004e10:	69fb      	ldr	r3, [r7, #28]
20004e12:	08da      	lsrs	r2, r3, #3
20004e14:	687b      	ldr	r3, [r7, #4]
20004e16:	3208      	adds	r2, #8
20004e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20004e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20004e1e:	69fb      	ldr	r3, [r7, #28]
20004e20:	f003 0307 	and.w	r3, r3, #7
20004e24:	009b      	lsls	r3, r3, #2
20004e26:	220f      	movs	r2, #15
20004e28:	fa02 f303 	lsl.w	r3, r2, r3
20004e2c:	43db      	mvns	r3, r3
20004e2e:	69ba      	ldr	r2, [r7, #24]
20004e30:	4013      	ands	r3, r2
20004e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
20004e34:	683b      	ldr	r3, [r7, #0]
20004e36:	691a      	ldr	r2, [r3, #16]
20004e38:	69fb      	ldr	r3, [r7, #28]
20004e3a:	f003 0307 	and.w	r3, r3, #7
20004e3e:	009b      	lsls	r3, r3, #2
20004e40:	fa02 f303 	lsl.w	r3, r2, r3
20004e44:	69ba      	ldr	r2, [r7, #24]
20004e46:	4313      	orrs	r3, r2
20004e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
20004e4a:	69fb      	ldr	r3, [r7, #28]
20004e4c:	08da      	lsrs	r2, r3, #3
20004e4e:	687b      	ldr	r3, [r7, #4]
20004e50:	3208      	adds	r2, #8
20004e52:	69b9      	ldr	r1, [r7, #24]
20004e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20004e58:	687b      	ldr	r3, [r7, #4]
20004e5a:	681b      	ldr	r3, [r3, #0]
20004e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
20004e5e:	69fb      	ldr	r3, [r7, #28]
20004e60:	005b      	lsls	r3, r3, #1
20004e62:	2203      	movs	r2, #3
20004e64:	fa02 f303 	lsl.w	r3, r2, r3
20004e68:	43db      	mvns	r3, r3
20004e6a:	69ba      	ldr	r2, [r7, #24]
20004e6c:	4013      	ands	r3, r2
20004e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20004e70:	683b      	ldr	r3, [r7, #0]
20004e72:	685b      	ldr	r3, [r3, #4]
20004e74:	f003 0203 	and.w	r2, r3, #3
20004e78:	69fb      	ldr	r3, [r7, #28]
20004e7a:	005b      	lsls	r3, r3, #1
20004e7c:	fa02 f303 	lsl.w	r3, r2, r3
20004e80:	69ba      	ldr	r2, [r7, #24]
20004e82:	4313      	orrs	r3, r2
20004e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20004e86:	687b      	ldr	r3, [r7, #4]
20004e88:	69ba      	ldr	r2, [r7, #24]
20004e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
20004e8c:	683b      	ldr	r3, [r7, #0]
20004e8e:	685b      	ldr	r3, [r3, #4]
20004e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20004e94:	2b00      	cmp	r3, #0
20004e96:	f000 80be 	beq.w	20005016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20004e9a:	4b66      	ldr	r3, [pc, #408]	@ (20005034 <HAL_GPIO_Init+0x324>)
20004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004e9e:	4a65      	ldr	r2, [pc, #404]	@ (20005034 <HAL_GPIO_Init+0x324>)
20004ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20004ea4:	6453      	str	r3, [r2, #68]	@ 0x44
20004ea6:	4b63      	ldr	r3, [pc, #396]	@ (20005034 <HAL_GPIO_Init+0x324>)
20004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20004eae:	60fb      	str	r3, [r7, #12]
20004eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
20004eb2:	4a61      	ldr	r2, [pc, #388]	@ (20005038 <HAL_GPIO_Init+0x328>)
20004eb4:	69fb      	ldr	r3, [r7, #28]
20004eb6:	089b      	lsrs	r3, r3, #2
20004eb8:	3302      	adds	r3, #2
20004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
20004ec0:	69fb      	ldr	r3, [r7, #28]
20004ec2:	f003 0303 	and.w	r3, r3, #3
20004ec6:	009b      	lsls	r3, r3, #2
20004ec8:	220f      	movs	r2, #15
20004eca:	fa02 f303 	lsl.w	r3, r2, r3
20004ece:	43db      	mvns	r3, r3
20004ed0:	69ba      	ldr	r2, [r7, #24]
20004ed2:	4013      	ands	r3, r2
20004ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
20004ed6:	687b      	ldr	r3, [r7, #4]
20004ed8:	4a58      	ldr	r2, [pc, #352]	@ (2000503c <HAL_GPIO_Init+0x32c>)
20004eda:	4293      	cmp	r3, r2
20004edc:	d037      	beq.n	20004f4e <HAL_GPIO_Init+0x23e>
20004ede:	687b      	ldr	r3, [r7, #4]
20004ee0:	4a57      	ldr	r2, [pc, #348]	@ (20005040 <HAL_GPIO_Init+0x330>)
20004ee2:	4293      	cmp	r3, r2
20004ee4:	d031      	beq.n	20004f4a <HAL_GPIO_Init+0x23a>
20004ee6:	687b      	ldr	r3, [r7, #4]
20004ee8:	4a56      	ldr	r2, [pc, #344]	@ (20005044 <HAL_GPIO_Init+0x334>)
20004eea:	4293      	cmp	r3, r2
20004eec:	d02b      	beq.n	20004f46 <HAL_GPIO_Init+0x236>
20004eee:	687b      	ldr	r3, [r7, #4]
20004ef0:	4a55      	ldr	r2, [pc, #340]	@ (20005048 <HAL_GPIO_Init+0x338>)
20004ef2:	4293      	cmp	r3, r2
20004ef4:	d025      	beq.n	20004f42 <HAL_GPIO_Init+0x232>
20004ef6:	687b      	ldr	r3, [r7, #4]
20004ef8:	4a54      	ldr	r2, [pc, #336]	@ (2000504c <HAL_GPIO_Init+0x33c>)
20004efa:	4293      	cmp	r3, r2
20004efc:	d01f      	beq.n	20004f3e <HAL_GPIO_Init+0x22e>
20004efe:	687b      	ldr	r3, [r7, #4]
20004f00:	4a53      	ldr	r2, [pc, #332]	@ (20005050 <HAL_GPIO_Init+0x340>)
20004f02:	4293      	cmp	r3, r2
20004f04:	d019      	beq.n	20004f3a <HAL_GPIO_Init+0x22a>
20004f06:	687b      	ldr	r3, [r7, #4]
20004f08:	4a52      	ldr	r2, [pc, #328]	@ (20005054 <HAL_GPIO_Init+0x344>)
20004f0a:	4293      	cmp	r3, r2
20004f0c:	d013      	beq.n	20004f36 <HAL_GPIO_Init+0x226>
20004f0e:	687b      	ldr	r3, [r7, #4]
20004f10:	4a51      	ldr	r2, [pc, #324]	@ (20005058 <HAL_GPIO_Init+0x348>)
20004f12:	4293      	cmp	r3, r2
20004f14:	d00d      	beq.n	20004f32 <HAL_GPIO_Init+0x222>
20004f16:	687b      	ldr	r3, [r7, #4]
20004f18:	4a50      	ldr	r2, [pc, #320]	@ (2000505c <HAL_GPIO_Init+0x34c>)
20004f1a:	4293      	cmp	r3, r2
20004f1c:	d007      	beq.n	20004f2e <HAL_GPIO_Init+0x21e>
20004f1e:	687b      	ldr	r3, [r7, #4]
20004f20:	4a4f      	ldr	r2, [pc, #316]	@ (20005060 <HAL_GPIO_Init+0x350>)
20004f22:	4293      	cmp	r3, r2
20004f24:	d101      	bne.n	20004f2a <HAL_GPIO_Init+0x21a>
20004f26:	2309      	movs	r3, #9
20004f28:	e012      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f2a:	230a      	movs	r3, #10
20004f2c:	e010      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f2e:	2308      	movs	r3, #8
20004f30:	e00e      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f32:	2307      	movs	r3, #7
20004f34:	e00c      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f36:	2306      	movs	r3, #6
20004f38:	e00a      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f3a:	2305      	movs	r3, #5
20004f3c:	e008      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f3e:	2304      	movs	r3, #4
20004f40:	e006      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f42:	2303      	movs	r3, #3
20004f44:	e004      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f46:	2302      	movs	r3, #2
20004f48:	e002      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f4a:	2301      	movs	r3, #1
20004f4c:	e000      	b.n	20004f50 <HAL_GPIO_Init+0x240>
20004f4e:	2300      	movs	r3, #0
20004f50:	69fa      	ldr	r2, [r7, #28]
20004f52:	f002 0203 	and.w	r2, r2, #3
20004f56:	0092      	lsls	r2, r2, #2
20004f58:	4093      	lsls	r3, r2
20004f5a:	69ba      	ldr	r2, [r7, #24]
20004f5c:	4313      	orrs	r3, r2
20004f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
20004f60:	4935      	ldr	r1, [pc, #212]	@ (20005038 <HAL_GPIO_Init+0x328>)
20004f62:	69fb      	ldr	r3, [r7, #28]
20004f64:	089b      	lsrs	r3, r3, #2
20004f66:	3302      	adds	r3, #2
20004f68:	69ba      	ldr	r2, [r7, #24]
20004f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20004f6e:	4b3d      	ldr	r3, [pc, #244]	@ (20005064 <HAL_GPIO_Init+0x354>)
20004f70:	689b      	ldr	r3, [r3, #8]
20004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004f74:	693b      	ldr	r3, [r7, #16]
20004f76:	43db      	mvns	r3, r3
20004f78:	69ba      	ldr	r2, [r7, #24]
20004f7a:	4013      	ands	r3, r2
20004f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
20004f7e:	683b      	ldr	r3, [r7, #0]
20004f80:	685b      	ldr	r3, [r3, #4]
20004f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20004f86:	2b00      	cmp	r3, #0
20004f88:	d003      	beq.n	20004f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
20004f8a:	69ba      	ldr	r2, [r7, #24]
20004f8c:	693b      	ldr	r3, [r7, #16]
20004f8e:	4313      	orrs	r3, r2
20004f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20004f92:	4a34      	ldr	r2, [pc, #208]	@ (20005064 <HAL_GPIO_Init+0x354>)
20004f94:	69bb      	ldr	r3, [r7, #24]
20004f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20004f98:	4b32      	ldr	r3, [pc, #200]	@ (20005064 <HAL_GPIO_Init+0x354>)
20004f9a:	68db      	ldr	r3, [r3, #12]
20004f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004f9e:	693b      	ldr	r3, [r7, #16]
20004fa0:	43db      	mvns	r3, r3
20004fa2:	69ba      	ldr	r2, [r7, #24]
20004fa4:	4013      	ands	r3, r2
20004fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
20004fa8:	683b      	ldr	r3, [r7, #0]
20004faa:	685b      	ldr	r3, [r3, #4]
20004fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20004fb0:	2b00      	cmp	r3, #0
20004fb2:	d003      	beq.n	20004fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
20004fb4:	69ba      	ldr	r2, [r7, #24]
20004fb6:	693b      	ldr	r3, [r7, #16]
20004fb8:	4313      	orrs	r3, r2
20004fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20004fbc:	4a29      	ldr	r2, [pc, #164]	@ (20005064 <HAL_GPIO_Init+0x354>)
20004fbe:	69bb      	ldr	r3, [r7, #24]
20004fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20004fc2:	4b28      	ldr	r3, [pc, #160]	@ (20005064 <HAL_GPIO_Init+0x354>)
20004fc4:	685b      	ldr	r3, [r3, #4]
20004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004fc8:	693b      	ldr	r3, [r7, #16]
20004fca:	43db      	mvns	r3, r3
20004fcc:	69ba      	ldr	r2, [r7, #24]
20004fce:	4013      	ands	r3, r2
20004fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
20004fd2:	683b      	ldr	r3, [r7, #0]
20004fd4:	685b      	ldr	r3, [r3, #4]
20004fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20004fda:	2b00      	cmp	r3, #0
20004fdc:	d003      	beq.n	20004fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
20004fde:	69ba      	ldr	r2, [r7, #24]
20004fe0:	693b      	ldr	r3, [r7, #16]
20004fe2:	4313      	orrs	r3, r2
20004fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20004fe6:	4a1f      	ldr	r2, [pc, #124]	@ (20005064 <HAL_GPIO_Init+0x354>)
20004fe8:	69bb      	ldr	r3, [r7, #24]
20004fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20004fec:	4b1d      	ldr	r3, [pc, #116]	@ (20005064 <HAL_GPIO_Init+0x354>)
20004fee:	681b      	ldr	r3, [r3, #0]
20004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004ff2:	693b      	ldr	r3, [r7, #16]
20004ff4:	43db      	mvns	r3, r3
20004ff6:	69ba      	ldr	r2, [r7, #24]
20004ff8:	4013      	ands	r3, r2
20004ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
20004ffc:	683b      	ldr	r3, [r7, #0]
20004ffe:	685b      	ldr	r3, [r3, #4]
20005000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20005004:	2b00      	cmp	r3, #0
20005006:	d003      	beq.n	20005010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
20005008:	69ba      	ldr	r2, [r7, #24]
2000500a:	693b      	ldr	r3, [r7, #16]
2000500c:	4313      	orrs	r3, r2
2000500e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20005010:	4a14      	ldr	r2, [pc, #80]	@ (20005064 <HAL_GPIO_Init+0x354>)
20005012:	69bb      	ldr	r3, [r7, #24]
20005014:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
20005016:	69fb      	ldr	r3, [r7, #28]
20005018:	3301      	adds	r3, #1
2000501a:	61fb      	str	r3, [r7, #28]
2000501c:	69fb      	ldr	r3, [r7, #28]
2000501e:	2b0f      	cmp	r3, #15
20005020:	f67f ae86 	bls.w	20004d30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
20005024:	bf00      	nop
20005026:	bf00      	nop
20005028:	3724      	adds	r7, #36	@ 0x24
2000502a:	46bd      	mov	sp, r7
2000502c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005030:	4770      	bx	lr
20005032:	bf00      	nop
20005034:	40023800 	.word	0x40023800
20005038:	40013800 	.word	0x40013800
2000503c:	40020000 	.word	0x40020000
20005040:	40020400 	.word	0x40020400
20005044:	40020800 	.word	0x40020800
20005048:	40020c00 	.word	0x40020c00
2000504c:	40021000 	.word	0x40021000
20005050:	40021400 	.word	0x40021400
20005054:	40021800 	.word	0x40021800
20005058:	40021c00 	.word	0x40021c00
2000505c:	40022000 	.word	0x40022000
20005060:	40022400 	.word	0x40022400
20005064:	40013c00 	.word	0x40013c00

20005068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20005068:	b480      	push	{r7}
2000506a:	b083      	sub	sp, #12
2000506c:	af00      	add	r7, sp, #0
2000506e:	6078      	str	r0, [r7, #4]
20005070:	460b      	mov	r3, r1
20005072:	807b      	strh	r3, [r7, #2]
20005074:	4613      	mov	r3, r2
20005076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
20005078:	787b      	ldrb	r3, [r7, #1]
2000507a:	2b00      	cmp	r3, #0
2000507c:	d003      	beq.n	20005086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000507e:	887a      	ldrh	r2, [r7, #2]
20005080:	687b      	ldr	r3, [r7, #4]
20005082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
20005084:	e003      	b.n	2000508e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
20005086:	887b      	ldrh	r3, [r7, #2]
20005088:	041a      	lsls	r2, r3, #16
2000508a:	687b      	ldr	r3, [r7, #4]
2000508c:	619a      	str	r2, [r3, #24]
}
2000508e:	bf00      	nop
20005090:	370c      	adds	r7, #12
20005092:	46bd      	mov	sp, r7
20005094:	f85d 7b04 	ldr.w	r7, [sp], #4
20005098:	4770      	bx	lr

2000509a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2000509a:	b480      	push	{r7}
2000509c:	b085      	sub	sp, #20
2000509e:	af00      	add	r7, sp, #0
200050a0:	6078      	str	r0, [r7, #4]
200050a2:	460b      	mov	r3, r1
200050a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
200050a6:	687b      	ldr	r3, [r7, #4]
200050a8:	695b      	ldr	r3, [r3, #20]
200050aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
200050ac:	887a      	ldrh	r2, [r7, #2]
200050ae:	68fb      	ldr	r3, [r7, #12]
200050b0:	4013      	ands	r3, r2
200050b2:	041a      	lsls	r2, r3, #16
200050b4:	68fb      	ldr	r3, [r7, #12]
200050b6:	43d9      	mvns	r1, r3
200050b8:	887b      	ldrh	r3, [r7, #2]
200050ba:	400b      	ands	r3, r1
200050bc:	431a      	orrs	r2, r3
200050be:	687b      	ldr	r3, [r7, #4]
200050c0:	619a      	str	r2, [r3, #24]
}
200050c2:	bf00      	nop
200050c4:	3714      	adds	r7, #20
200050c6:	46bd      	mov	sp, r7
200050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200050cc:	4770      	bx	lr

200050ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
200050ce:	b580      	push	{r7, lr}
200050d0:	b086      	sub	sp, #24
200050d2:	af02      	add	r7, sp, #8
200050d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
200050d6:	687b      	ldr	r3, [r7, #4]
200050d8:	2b00      	cmp	r3, #0
200050da:	d101      	bne.n	200050e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
200050dc:	2301      	movs	r3, #1
200050de:	e108      	b.n	200052f2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
200050e0:	687b      	ldr	r3, [r7, #4]
200050e2:	681b      	ldr	r3, [r3, #0]
200050e4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
200050e6:	687b      	ldr	r3, [r7, #4]
200050e8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
200050ec:	b2db      	uxtb	r3, r3
200050ee:	2b00      	cmp	r3, #0
200050f0:	d106      	bne.n	20005100 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
200050f2:	687b      	ldr	r3, [r7, #4]
200050f4:	2200      	movs	r2, #0
200050f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
200050fa:	6878      	ldr	r0, [r7, #4]
200050fc:	f006 fcaa 	bl	2000ba54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
20005100:	687b      	ldr	r3, [r7, #4]
20005102:	2203      	movs	r2, #3
20005104:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
20005108:	68bb      	ldr	r3, [r7, #8]
2000510a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2000510e:	d102      	bne.n	20005116 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
20005110:	687b      	ldr	r3, [r7, #4]
20005112:	2200      	movs	r2, #0
20005114:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
20005116:	687b      	ldr	r3, [r7, #4]
20005118:	681b      	ldr	r3, [r3, #0]
2000511a:	4618      	mov	r0, r3
2000511c:	f003 f9b1 	bl	20008482 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20005120:	687b      	ldr	r3, [r7, #4]
20005122:	6818      	ldr	r0, [r3, #0]
20005124:	687b      	ldr	r3, [r7, #4]
20005126:	7c1a      	ldrb	r2, [r3, #16]
20005128:	f88d 2000 	strb.w	r2, [sp]
2000512c:	3304      	adds	r3, #4
2000512e:	cb0e      	ldmia	r3, {r1, r2, r3}
20005130:	f003 f89a 	bl	20008268 <USB_CoreInit>
20005134:	4603      	mov	r3, r0
20005136:	2b00      	cmp	r3, #0
20005138:	d005      	beq.n	20005146 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
2000513a:	687b      	ldr	r3, [r7, #4]
2000513c:	2202      	movs	r2, #2
2000513e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20005142:	2301      	movs	r3, #1
20005144:	e0d5      	b.n	200052f2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
20005146:	687b      	ldr	r3, [r7, #4]
20005148:	681b      	ldr	r3, [r3, #0]
2000514a:	2100      	movs	r1, #0
2000514c:	4618      	mov	r0, r3
2000514e:	f003 f9a9 	bl	200084a4 <USB_SetCurrentMode>
20005152:	4603      	mov	r3, r0
20005154:	2b00      	cmp	r3, #0
20005156:	d005      	beq.n	20005164 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20005158:	687b      	ldr	r3, [r7, #4]
2000515a:	2202      	movs	r2, #2
2000515c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20005160:	2301      	movs	r3, #1
20005162:	e0c6      	b.n	200052f2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20005164:	2300      	movs	r3, #0
20005166:	73fb      	strb	r3, [r7, #15]
20005168:	e04a      	b.n	20005200 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
2000516a:	7bfa      	ldrb	r2, [r7, #15]
2000516c:	6879      	ldr	r1, [r7, #4]
2000516e:	4613      	mov	r3, r2
20005170:	00db      	lsls	r3, r3, #3
20005172:	4413      	add	r3, r2
20005174:	009b      	lsls	r3, r3, #2
20005176:	440b      	add	r3, r1
20005178:	3315      	adds	r3, #21
2000517a:	2201      	movs	r2, #1
2000517c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
2000517e:	7bfa      	ldrb	r2, [r7, #15]
20005180:	6879      	ldr	r1, [r7, #4]
20005182:	4613      	mov	r3, r2
20005184:	00db      	lsls	r3, r3, #3
20005186:	4413      	add	r3, r2
20005188:	009b      	lsls	r3, r3, #2
2000518a:	440b      	add	r3, r1
2000518c:	3314      	adds	r3, #20
2000518e:	7bfa      	ldrb	r2, [r7, #15]
20005190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
20005192:	7bfa      	ldrb	r2, [r7, #15]
20005194:	7bfb      	ldrb	r3, [r7, #15]
20005196:	b298      	uxth	r0, r3
20005198:	6879      	ldr	r1, [r7, #4]
2000519a:	4613      	mov	r3, r2
2000519c:	00db      	lsls	r3, r3, #3
2000519e:	4413      	add	r3, r2
200051a0:	009b      	lsls	r3, r3, #2
200051a2:	440b      	add	r3, r1
200051a4:	332e      	adds	r3, #46	@ 0x2e
200051a6:	4602      	mov	r2, r0
200051a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
200051aa:	7bfa      	ldrb	r2, [r7, #15]
200051ac:	6879      	ldr	r1, [r7, #4]
200051ae:	4613      	mov	r3, r2
200051b0:	00db      	lsls	r3, r3, #3
200051b2:	4413      	add	r3, r2
200051b4:	009b      	lsls	r3, r3, #2
200051b6:	440b      	add	r3, r1
200051b8:	3318      	adds	r3, #24
200051ba:	2200      	movs	r2, #0
200051bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
200051be:	7bfa      	ldrb	r2, [r7, #15]
200051c0:	6879      	ldr	r1, [r7, #4]
200051c2:	4613      	mov	r3, r2
200051c4:	00db      	lsls	r3, r3, #3
200051c6:	4413      	add	r3, r2
200051c8:	009b      	lsls	r3, r3, #2
200051ca:	440b      	add	r3, r1
200051cc:	331c      	adds	r3, #28
200051ce:	2200      	movs	r2, #0
200051d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
200051d2:	7bfa      	ldrb	r2, [r7, #15]
200051d4:	6879      	ldr	r1, [r7, #4]
200051d6:	4613      	mov	r3, r2
200051d8:	00db      	lsls	r3, r3, #3
200051da:	4413      	add	r3, r2
200051dc:	009b      	lsls	r3, r3, #2
200051de:	440b      	add	r3, r1
200051e0:	3320      	adds	r3, #32
200051e2:	2200      	movs	r2, #0
200051e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
200051e6:	7bfa      	ldrb	r2, [r7, #15]
200051e8:	6879      	ldr	r1, [r7, #4]
200051ea:	4613      	mov	r3, r2
200051ec:	00db      	lsls	r3, r3, #3
200051ee:	4413      	add	r3, r2
200051f0:	009b      	lsls	r3, r3, #2
200051f2:	440b      	add	r3, r1
200051f4:	3324      	adds	r3, #36	@ 0x24
200051f6:	2200      	movs	r2, #0
200051f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200051fa:	7bfb      	ldrb	r3, [r7, #15]
200051fc:	3301      	adds	r3, #1
200051fe:	73fb      	strb	r3, [r7, #15]
20005200:	687b      	ldr	r3, [r7, #4]
20005202:	791b      	ldrb	r3, [r3, #4]
20005204:	7bfa      	ldrb	r2, [r7, #15]
20005206:	429a      	cmp	r2, r3
20005208:	d3af      	bcc.n	2000516a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
2000520a:	2300      	movs	r3, #0
2000520c:	73fb      	strb	r3, [r7, #15]
2000520e:	e044      	b.n	2000529a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
20005210:	7bfa      	ldrb	r2, [r7, #15]
20005212:	6879      	ldr	r1, [r7, #4]
20005214:	4613      	mov	r3, r2
20005216:	00db      	lsls	r3, r3, #3
20005218:	4413      	add	r3, r2
2000521a:	009b      	lsls	r3, r3, #2
2000521c:	440b      	add	r3, r1
2000521e:	f203 2355 	addw	r3, r3, #597	@ 0x255
20005222:	2200      	movs	r2, #0
20005224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
20005226:	7bfa      	ldrb	r2, [r7, #15]
20005228:	6879      	ldr	r1, [r7, #4]
2000522a:	4613      	mov	r3, r2
2000522c:	00db      	lsls	r3, r3, #3
2000522e:	4413      	add	r3, r2
20005230:	009b      	lsls	r3, r3, #2
20005232:	440b      	add	r3, r1
20005234:	f503 7315 	add.w	r3, r3, #596	@ 0x254
20005238:	7bfa      	ldrb	r2, [r7, #15]
2000523a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
2000523c:	7bfa      	ldrb	r2, [r7, #15]
2000523e:	6879      	ldr	r1, [r7, #4]
20005240:	4613      	mov	r3, r2
20005242:	00db      	lsls	r3, r3, #3
20005244:	4413      	add	r3, r2
20005246:	009b      	lsls	r3, r3, #2
20005248:	440b      	add	r3, r1
2000524a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
2000524e:	2200      	movs	r2, #0
20005250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
20005252:	7bfa      	ldrb	r2, [r7, #15]
20005254:	6879      	ldr	r1, [r7, #4]
20005256:	4613      	mov	r3, r2
20005258:	00db      	lsls	r3, r3, #3
2000525a:	4413      	add	r3, r2
2000525c:	009b      	lsls	r3, r3, #2
2000525e:	440b      	add	r3, r1
20005260:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
20005264:	2200      	movs	r2, #0
20005266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
20005268:	7bfa      	ldrb	r2, [r7, #15]
2000526a:	6879      	ldr	r1, [r7, #4]
2000526c:	4613      	mov	r3, r2
2000526e:	00db      	lsls	r3, r3, #3
20005270:	4413      	add	r3, r2
20005272:	009b      	lsls	r3, r3, #2
20005274:	440b      	add	r3, r1
20005276:	f503 7318 	add.w	r3, r3, #608	@ 0x260
2000527a:	2200      	movs	r2, #0
2000527c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
2000527e:	7bfa      	ldrb	r2, [r7, #15]
20005280:	6879      	ldr	r1, [r7, #4]
20005282:	4613      	mov	r3, r2
20005284:	00db      	lsls	r3, r3, #3
20005286:	4413      	add	r3, r2
20005288:	009b      	lsls	r3, r3, #2
2000528a:	440b      	add	r3, r1
2000528c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20005290:	2200      	movs	r2, #0
20005292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20005294:	7bfb      	ldrb	r3, [r7, #15]
20005296:	3301      	adds	r3, #1
20005298:	73fb      	strb	r3, [r7, #15]
2000529a:	687b      	ldr	r3, [r7, #4]
2000529c:	791b      	ldrb	r3, [r3, #4]
2000529e:	7bfa      	ldrb	r2, [r7, #15]
200052a0:	429a      	cmp	r2, r3
200052a2:	d3b5      	bcc.n	20005210 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
200052a4:	687b      	ldr	r3, [r7, #4]
200052a6:	6818      	ldr	r0, [r3, #0]
200052a8:	687b      	ldr	r3, [r7, #4]
200052aa:	7c1a      	ldrb	r2, [r3, #16]
200052ac:	f88d 2000 	strb.w	r2, [sp]
200052b0:	3304      	adds	r3, #4
200052b2:	cb0e      	ldmia	r3, {r1, r2, r3}
200052b4:	f003 f942 	bl	2000853c <USB_DevInit>
200052b8:	4603      	mov	r3, r0
200052ba:	2b00      	cmp	r3, #0
200052bc:	d005      	beq.n	200052ca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
200052be:	687b      	ldr	r3, [r7, #4]
200052c0:	2202      	movs	r2, #2
200052c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
200052c6:	2301      	movs	r3, #1
200052c8:	e013      	b.n	200052f2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
200052ca:	687b      	ldr	r3, [r7, #4]
200052cc:	2200      	movs	r2, #0
200052ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
200052d0:	687b      	ldr	r3, [r7, #4]
200052d2:	2201      	movs	r2, #1
200052d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
200052d8:	687b      	ldr	r3, [r7, #4]
200052da:	7b1b      	ldrb	r3, [r3, #12]
200052dc:	2b01      	cmp	r3, #1
200052de:	d102      	bne.n	200052e6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
200052e0:	6878      	ldr	r0, [r7, #4]
200052e2:	f001 f95b 	bl	2000659c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
200052e6:	687b      	ldr	r3, [r7, #4]
200052e8:	681b      	ldr	r3, [r3, #0]
200052ea:	4618      	mov	r0, r3
200052ec:	f004 f985 	bl	200095fa <USB_DevDisconnect>

  return HAL_OK;
200052f0:	2300      	movs	r3, #0
}
200052f2:	4618      	mov	r0, r3
200052f4:	3710      	adds	r7, #16
200052f6:	46bd      	mov	sp, r7
200052f8:	bd80      	pop	{r7, pc}

200052fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
200052fa:	b580      	push	{r7, lr}
200052fc:	b082      	sub	sp, #8
200052fe:	af00      	add	r7, sp, #0
20005300:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
20005302:	687b      	ldr	r3, [r7, #4]
20005304:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005308:	2b01      	cmp	r3, #1
2000530a:	d101      	bne.n	20005310 <HAL_PCD_Start+0x16>
2000530c:	2302      	movs	r3, #2
2000530e:	e012      	b.n	20005336 <HAL_PCD_Start+0x3c>
20005310:	687b      	ldr	r3, [r7, #4]
20005312:	2201      	movs	r2, #1
20005314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
20005318:	687b      	ldr	r3, [r7, #4]
2000531a:	681b      	ldr	r3, [r3, #0]
2000531c:	4618      	mov	r0, r3
2000531e:	f003 f89f 	bl	20008460 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
20005322:	687b      	ldr	r3, [r7, #4]
20005324:	681b      	ldr	r3, [r3, #0]
20005326:	4618      	mov	r0, r3
20005328:	f004 f946 	bl	200095b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
2000532c:	687b      	ldr	r3, [r7, #4]
2000532e:	2200      	movs	r2, #0
20005330:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20005334:	2300      	movs	r3, #0
}
20005336:	4618      	mov	r0, r3
20005338:	3708      	adds	r7, #8
2000533a:	46bd      	mov	sp, r7
2000533c:	bd80      	pop	{r7, pc}

2000533e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
2000533e:	b590      	push	{r4, r7, lr}
20005340:	b08d      	sub	sp, #52	@ 0x34
20005342:	af00      	add	r7, sp, #0
20005344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20005346:	687b      	ldr	r3, [r7, #4]
20005348:	681b      	ldr	r3, [r3, #0]
2000534a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000534c:	6a3b      	ldr	r3, [r7, #32]
2000534e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
20005350:	687b      	ldr	r3, [r7, #4]
20005352:	681b      	ldr	r3, [r3, #0]
20005354:	4618      	mov	r0, r3
20005356:	f004 fa04 	bl	20009762 <USB_GetMode>
2000535a:	4603      	mov	r3, r0
2000535c:	2b00      	cmp	r3, #0
2000535e:	f040 84b9 	bne.w	20005cd4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
20005362:	687b      	ldr	r3, [r7, #4]
20005364:	681b      	ldr	r3, [r3, #0]
20005366:	4618      	mov	r0, r3
20005368:	f004 f968 	bl	2000963c <USB_ReadInterrupts>
2000536c:	4603      	mov	r3, r0
2000536e:	2b00      	cmp	r3, #0
20005370:	f000 84af 	beq.w	20005cd2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
20005374:	69fb      	ldr	r3, [r7, #28]
20005376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000537a:	689b      	ldr	r3, [r3, #8]
2000537c:	0a1b      	lsrs	r3, r3, #8
2000537e:	f3c3 020d 	ubfx	r2, r3, #0, #14
20005382:	687b      	ldr	r3, [r7, #4]
20005384:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
20005388:	687b      	ldr	r3, [r7, #4]
2000538a:	681b      	ldr	r3, [r3, #0]
2000538c:	4618      	mov	r0, r3
2000538e:	f004 f955 	bl	2000963c <USB_ReadInterrupts>
20005392:	4603      	mov	r3, r0
20005394:	f003 0302 	and.w	r3, r3, #2
20005398:	2b02      	cmp	r3, #2
2000539a:	d107      	bne.n	200053ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
2000539c:	687b      	ldr	r3, [r7, #4]
2000539e:	681b      	ldr	r3, [r3, #0]
200053a0:	695a      	ldr	r2, [r3, #20]
200053a2:	687b      	ldr	r3, [r7, #4]
200053a4:	681b      	ldr	r3, [r3, #0]
200053a6:	f002 0202 	and.w	r2, r2, #2
200053aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
200053ac:	687b      	ldr	r3, [r7, #4]
200053ae:	681b      	ldr	r3, [r3, #0]
200053b0:	4618      	mov	r0, r3
200053b2:	f004 f943 	bl	2000963c <USB_ReadInterrupts>
200053b6:	4603      	mov	r3, r0
200053b8:	f003 0310 	and.w	r3, r3, #16
200053bc:	2b10      	cmp	r3, #16
200053be:	d161      	bne.n	20005484 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
200053c0:	687b      	ldr	r3, [r7, #4]
200053c2:	681b      	ldr	r3, [r3, #0]
200053c4:	699a      	ldr	r2, [r3, #24]
200053c6:	687b      	ldr	r3, [r7, #4]
200053c8:	681b      	ldr	r3, [r3, #0]
200053ca:	f022 0210 	bic.w	r2, r2, #16
200053ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
200053d0:	6a3b      	ldr	r3, [r7, #32]
200053d2:	6a1b      	ldr	r3, [r3, #32]
200053d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
200053d6:	69bb      	ldr	r3, [r7, #24]
200053d8:	f003 020f 	and.w	r2, r3, #15
200053dc:	4613      	mov	r3, r2
200053de:	00db      	lsls	r3, r3, #3
200053e0:	4413      	add	r3, r2
200053e2:	009b      	lsls	r3, r3, #2
200053e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200053e8:	687a      	ldr	r2, [r7, #4]
200053ea:	4413      	add	r3, r2
200053ec:	3304      	adds	r3, #4
200053ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
200053f0:	69bb      	ldr	r3, [r7, #24]
200053f2:	0c5b      	lsrs	r3, r3, #17
200053f4:	f003 030f 	and.w	r3, r3, #15
200053f8:	2b02      	cmp	r3, #2
200053fa:	d124      	bne.n	20005446 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
200053fc:	69ba      	ldr	r2, [r7, #24]
200053fe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
20005402:	4013      	ands	r3, r2
20005404:	2b00      	cmp	r3, #0
20005406:	d035      	beq.n	20005474 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
20005408:	697b      	ldr	r3, [r7, #20]
2000540a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
2000540c:	69bb      	ldr	r3, [r7, #24]
2000540e:	091b      	lsrs	r3, r3, #4
20005410:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
20005412:	f3c3 030a 	ubfx	r3, r3, #0, #11
20005416:	b29b      	uxth	r3, r3
20005418:	461a      	mov	r2, r3
2000541a:	6a38      	ldr	r0, [r7, #32]
2000541c:	f003 ff7a 	bl	20009314 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20005420:	697b      	ldr	r3, [r7, #20]
20005422:	68da      	ldr	r2, [r3, #12]
20005424:	69bb      	ldr	r3, [r7, #24]
20005426:	091b      	lsrs	r3, r3, #4
20005428:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000542c:	441a      	add	r2, r3
2000542e:	697b      	ldr	r3, [r7, #20]
20005430:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20005432:	697b      	ldr	r3, [r7, #20]
20005434:	695a      	ldr	r2, [r3, #20]
20005436:	69bb      	ldr	r3, [r7, #24]
20005438:	091b      	lsrs	r3, r3, #4
2000543a:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000543e:	441a      	add	r2, r3
20005440:	697b      	ldr	r3, [r7, #20]
20005442:	615a      	str	r2, [r3, #20]
20005444:	e016      	b.n	20005474 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
20005446:	69bb      	ldr	r3, [r7, #24]
20005448:	0c5b      	lsrs	r3, r3, #17
2000544a:	f003 030f 	and.w	r3, r3, #15
2000544e:	2b06      	cmp	r3, #6
20005450:	d110      	bne.n	20005474 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
20005452:	687b      	ldr	r3, [r7, #4]
20005454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20005458:	2208      	movs	r2, #8
2000545a:	4619      	mov	r1, r3
2000545c:	6a38      	ldr	r0, [r7, #32]
2000545e:	f003 ff59 	bl	20009314 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20005462:	697b      	ldr	r3, [r7, #20]
20005464:	695a      	ldr	r2, [r3, #20]
20005466:	69bb      	ldr	r3, [r7, #24]
20005468:	091b      	lsrs	r3, r3, #4
2000546a:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000546e:	441a      	add	r2, r3
20005470:	697b      	ldr	r3, [r7, #20]
20005472:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
20005474:	687b      	ldr	r3, [r7, #4]
20005476:	681b      	ldr	r3, [r3, #0]
20005478:	699a      	ldr	r2, [r3, #24]
2000547a:	687b      	ldr	r3, [r7, #4]
2000547c:	681b      	ldr	r3, [r3, #0]
2000547e:	f042 0210 	orr.w	r2, r2, #16
20005482:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
20005484:	687b      	ldr	r3, [r7, #4]
20005486:	681b      	ldr	r3, [r3, #0]
20005488:	4618      	mov	r0, r3
2000548a:	f004 f8d7 	bl	2000963c <USB_ReadInterrupts>
2000548e:	4603      	mov	r3, r0
20005490:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20005494:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
20005498:	f040 80a7 	bne.w	200055ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
2000549c:	2300      	movs	r3, #0
2000549e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
200054a0:	687b      	ldr	r3, [r7, #4]
200054a2:	681b      	ldr	r3, [r3, #0]
200054a4:	4618      	mov	r0, r3
200054a6:	f004 f8dc 	bl	20009662 <USB_ReadDevAllOutEpInterrupt>
200054aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
200054ac:	e099      	b.n	200055e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
200054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200054b0:	f003 0301 	and.w	r3, r3, #1
200054b4:	2b00      	cmp	r3, #0
200054b6:	f000 808e 	beq.w	200055d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
200054ba:	687b      	ldr	r3, [r7, #4]
200054bc:	681b      	ldr	r3, [r3, #0]
200054be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200054c0:	b2d2      	uxtb	r2, r2
200054c2:	4611      	mov	r1, r2
200054c4:	4618      	mov	r0, r3
200054c6:	f004 f900 	bl	200096ca <USB_ReadDevOutEPInterrupt>
200054ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
200054cc:	693b      	ldr	r3, [r7, #16]
200054ce:	f003 0301 	and.w	r3, r3, #1
200054d2:	2b00      	cmp	r3, #0
200054d4:	d00c      	beq.n	200054f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
200054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200054d8:	015a      	lsls	r2, r3, #5
200054da:	69fb      	ldr	r3, [r7, #28]
200054dc:	4413      	add	r3, r2
200054de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200054e2:	461a      	mov	r2, r3
200054e4:	2301      	movs	r3, #1
200054e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
200054e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200054ea:	6878      	ldr	r0, [r7, #4]
200054ec:	f000 fed0 	bl	20006290 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
200054f0:	693b      	ldr	r3, [r7, #16]
200054f2:	f003 0308 	and.w	r3, r3, #8
200054f6:	2b00      	cmp	r3, #0
200054f8:	d00c      	beq.n	20005514 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
200054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200054fc:	015a      	lsls	r2, r3, #5
200054fe:	69fb      	ldr	r3, [r7, #28]
20005500:	4413      	add	r3, r2
20005502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005506:	461a      	mov	r2, r3
20005508:	2308      	movs	r3, #8
2000550a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
2000550c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
2000550e:	6878      	ldr	r0, [r7, #4]
20005510:	f000 ffa6 	bl	20006460 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
20005514:	693b      	ldr	r3, [r7, #16]
20005516:	f003 0310 	and.w	r3, r3, #16
2000551a:	2b00      	cmp	r3, #0
2000551c:	d008      	beq.n	20005530 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
2000551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005520:	015a      	lsls	r2, r3, #5
20005522:	69fb      	ldr	r3, [r7, #28]
20005524:	4413      	add	r3, r2
20005526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000552a:	461a      	mov	r2, r3
2000552c:	2310      	movs	r3, #16
2000552e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
20005530:	693b      	ldr	r3, [r7, #16]
20005532:	f003 0302 	and.w	r3, r3, #2
20005536:	2b00      	cmp	r3, #0
20005538:	d030      	beq.n	2000559c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
2000553a:	6a3b      	ldr	r3, [r7, #32]
2000553c:	695b      	ldr	r3, [r3, #20]
2000553e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20005542:	2b80      	cmp	r3, #128	@ 0x80
20005544:	d109      	bne.n	2000555a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
20005546:	69fb      	ldr	r3, [r7, #28]
20005548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000554c:	685b      	ldr	r3, [r3, #4]
2000554e:	69fa      	ldr	r2, [r7, #28]
20005550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005554:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
20005558:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
2000555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000555c:	4613      	mov	r3, r2
2000555e:	00db      	lsls	r3, r3, #3
20005560:	4413      	add	r3, r2
20005562:	009b      	lsls	r3, r3, #2
20005564:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005568:	687a      	ldr	r2, [r7, #4]
2000556a:	4413      	add	r3, r2
2000556c:	3304      	adds	r3, #4
2000556e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
20005570:	697b      	ldr	r3, [r7, #20]
20005572:	78db      	ldrb	r3, [r3, #3]
20005574:	2b01      	cmp	r3, #1
20005576:	d108      	bne.n	2000558a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
20005578:	697b      	ldr	r3, [r7, #20]
2000557a:	2200      	movs	r2, #0
2000557c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
2000557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005580:	b2db      	uxtb	r3, r3
20005582:	4619      	mov	r1, r3
20005584:	6878      	ldr	r0, [r7, #4]
20005586:	f006 fb99 	bl	2000bcbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
2000558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000558c:	015a      	lsls	r2, r3, #5
2000558e:	69fb      	ldr	r3, [r7, #28]
20005590:	4413      	add	r3, r2
20005592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005596:	461a      	mov	r2, r3
20005598:	2302      	movs	r3, #2
2000559a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
2000559c:	693b      	ldr	r3, [r7, #16]
2000559e:	f003 0320 	and.w	r3, r3, #32
200055a2:	2b00      	cmp	r3, #0
200055a4:	d008      	beq.n	200055b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
200055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200055a8:	015a      	lsls	r2, r3, #5
200055aa:	69fb      	ldr	r3, [r7, #28]
200055ac:	4413      	add	r3, r2
200055ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200055b2:	461a      	mov	r2, r3
200055b4:	2320      	movs	r3, #32
200055b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
200055b8:	693b      	ldr	r3, [r7, #16]
200055ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200055be:	2b00      	cmp	r3, #0
200055c0:	d009      	beq.n	200055d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
200055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200055c4:	015a      	lsls	r2, r3, #5
200055c6:	69fb      	ldr	r3, [r7, #28]
200055c8:	4413      	add	r3, r2
200055ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200055ce:	461a      	mov	r2, r3
200055d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
200055d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
200055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200055d8:	3301      	adds	r3, #1
200055da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
200055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200055de:	085b      	lsrs	r3, r3, #1
200055e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
200055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200055e4:	2b00      	cmp	r3, #0
200055e6:	f47f af62 	bne.w	200054ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
200055ea:	687b      	ldr	r3, [r7, #4]
200055ec:	681b      	ldr	r3, [r3, #0]
200055ee:	4618      	mov	r0, r3
200055f0:	f004 f824 	bl	2000963c <USB_ReadInterrupts>
200055f4:	4603      	mov	r3, r0
200055f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
200055fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
200055fe:	f040 80db 	bne.w	200057b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
20005602:	687b      	ldr	r3, [r7, #4]
20005604:	681b      	ldr	r3, [r3, #0]
20005606:	4618      	mov	r0, r3
20005608:	f004 f845 	bl	20009696 <USB_ReadDevAllInEpInterrupt>
2000560c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
2000560e:	2300      	movs	r3, #0
20005610:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
20005612:	e0cd      	b.n	200057b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
20005614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20005616:	f003 0301 	and.w	r3, r3, #1
2000561a:	2b00      	cmp	r3, #0
2000561c:	f000 80c2 	beq.w	200057a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
20005620:	687b      	ldr	r3, [r7, #4]
20005622:	681b      	ldr	r3, [r3, #0]
20005624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005626:	b2d2      	uxtb	r2, r2
20005628:	4611      	mov	r1, r2
2000562a:	4618      	mov	r0, r3
2000562c:	f004 f86b 	bl	20009706 <USB_ReadDevInEPInterrupt>
20005630:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
20005632:	693b      	ldr	r3, [r7, #16]
20005634:	f003 0301 	and.w	r3, r3, #1
20005638:	2b00      	cmp	r3, #0
2000563a:	d057      	beq.n	200056ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
2000563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000563e:	f003 030f 	and.w	r3, r3, #15
20005642:	2201      	movs	r2, #1
20005644:	fa02 f303 	lsl.w	r3, r2, r3
20005648:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
2000564a:	69fb      	ldr	r3, [r7, #28]
2000564c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20005652:	68fb      	ldr	r3, [r7, #12]
20005654:	43db      	mvns	r3, r3
20005656:	69f9      	ldr	r1, [r7, #28]
20005658:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000565c:	4013      	ands	r3, r2
2000565e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
20005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005662:	015a      	lsls	r2, r3, #5
20005664:	69fb      	ldr	r3, [r7, #28]
20005666:	4413      	add	r3, r2
20005668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000566c:	461a      	mov	r2, r3
2000566e:	2301      	movs	r3, #1
20005670:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
20005672:	687b      	ldr	r3, [r7, #4]
20005674:	799b      	ldrb	r3, [r3, #6]
20005676:	2b01      	cmp	r3, #1
20005678:	d132      	bne.n	200056e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
2000567a:	6879      	ldr	r1, [r7, #4]
2000567c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000567e:	4613      	mov	r3, r2
20005680:	00db      	lsls	r3, r3, #3
20005682:	4413      	add	r3, r2
20005684:	009b      	lsls	r3, r3, #2
20005686:	440b      	add	r3, r1
20005688:	3320      	adds	r3, #32
2000568a:	6819      	ldr	r1, [r3, #0]
2000568c:	6878      	ldr	r0, [r7, #4]
2000568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005690:	4613      	mov	r3, r2
20005692:	00db      	lsls	r3, r3, #3
20005694:	4413      	add	r3, r2
20005696:	009b      	lsls	r3, r3, #2
20005698:	4403      	add	r3, r0
2000569a:	331c      	adds	r3, #28
2000569c:	681b      	ldr	r3, [r3, #0]
2000569e:	4419      	add	r1, r3
200056a0:	6878      	ldr	r0, [r7, #4]
200056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200056a4:	4613      	mov	r3, r2
200056a6:	00db      	lsls	r3, r3, #3
200056a8:	4413      	add	r3, r2
200056aa:	009b      	lsls	r3, r3, #2
200056ac:	4403      	add	r3, r0
200056ae:	3320      	adds	r3, #32
200056b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
200056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200056b4:	2b00      	cmp	r3, #0
200056b6:	d113      	bne.n	200056e0 <HAL_PCD_IRQHandler+0x3a2>
200056b8:	6879      	ldr	r1, [r7, #4]
200056ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200056bc:	4613      	mov	r3, r2
200056be:	00db      	lsls	r3, r3, #3
200056c0:	4413      	add	r3, r2
200056c2:	009b      	lsls	r3, r3, #2
200056c4:	440b      	add	r3, r1
200056c6:	3324      	adds	r3, #36	@ 0x24
200056c8:	681b      	ldr	r3, [r3, #0]
200056ca:	2b00      	cmp	r3, #0
200056cc:	d108      	bne.n	200056e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
200056ce:	687b      	ldr	r3, [r7, #4]
200056d0:	6818      	ldr	r0, [r3, #0]
200056d2:	687b      	ldr	r3, [r7, #4]
200056d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
200056d8:	461a      	mov	r2, r3
200056da:	2101      	movs	r1, #1
200056dc:	f004 f874 	bl	200097c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
200056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200056e2:	b2db      	uxtb	r3, r3
200056e4:	4619      	mov	r1, r3
200056e6:	6878      	ldr	r0, [r7, #4]
200056e8:	f006 fa63 	bl	2000bbb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
200056ec:	693b      	ldr	r3, [r7, #16]
200056ee:	f003 0308 	and.w	r3, r3, #8
200056f2:	2b00      	cmp	r3, #0
200056f4:	d008      	beq.n	20005708 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
200056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200056f8:	015a      	lsls	r2, r3, #5
200056fa:	69fb      	ldr	r3, [r7, #28]
200056fc:	4413      	add	r3, r2
200056fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005702:	461a      	mov	r2, r3
20005704:	2308      	movs	r3, #8
20005706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
20005708:	693b      	ldr	r3, [r7, #16]
2000570a:	f003 0310 	and.w	r3, r3, #16
2000570e:	2b00      	cmp	r3, #0
20005710:	d008      	beq.n	20005724 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
20005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005714:	015a      	lsls	r2, r3, #5
20005716:	69fb      	ldr	r3, [r7, #28]
20005718:	4413      	add	r3, r2
2000571a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000571e:	461a      	mov	r2, r3
20005720:	2310      	movs	r3, #16
20005722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
20005724:	693b      	ldr	r3, [r7, #16]
20005726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000572a:	2b00      	cmp	r3, #0
2000572c:	d008      	beq.n	20005740 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
2000572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005730:	015a      	lsls	r2, r3, #5
20005732:	69fb      	ldr	r3, [r7, #28]
20005734:	4413      	add	r3, r2
20005736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000573a:	461a      	mov	r2, r3
2000573c:	2340      	movs	r3, #64	@ 0x40
2000573e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
20005740:	693b      	ldr	r3, [r7, #16]
20005742:	f003 0302 	and.w	r3, r3, #2
20005746:	2b00      	cmp	r3, #0
20005748:	d023      	beq.n	20005792 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
2000574a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
2000574c:	6a38      	ldr	r0, [r7, #32]
2000574e:	f003 f853 	bl	200087f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
20005752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005754:	4613      	mov	r3, r2
20005756:	00db      	lsls	r3, r3, #3
20005758:	4413      	add	r3, r2
2000575a:	009b      	lsls	r3, r3, #2
2000575c:	3310      	adds	r3, #16
2000575e:	687a      	ldr	r2, [r7, #4]
20005760:	4413      	add	r3, r2
20005762:	3304      	adds	r3, #4
20005764:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
20005766:	697b      	ldr	r3, [r7, #20]
20005768:	78db      	ldrb	r3, [r3, #3]
2000576a:	2b01      	cmp	r3, #1
2000576c:	d108      	bne.n	20005780 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
2000576e:	697b      	ldr	r3, [r7, #20]
20005770:	2200      	movs	r2, #0
20005772:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
20005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005776:	b2db      	uxtb	r3, r3
20005778:	4619      	mov	r1, r3
2000577a:	6878      	ldr	r0, [r7, #4]
2000577c:	f006 fab0 	bl	2000bce0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
20005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005782:	015a      	lsls	r2, r3, #5
20005784:	69fb      	ldr	r3, [r7, #28]
20005786:	4413      	add	r3, r2
20005788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000578c:	461a      	mov	r2, r3
2000578e:	2302      	movs	r3, #2
20005790:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
20005792:	693b      	ldr	r3, [r7, #16]
20005794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20005798:	2b00      	cmp	r3, #0
2000579a:	d003      	beq.n	200057a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
2000579c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
2000579e:	6878      	ldr	r0, [r7, #4]
200057a0:	f000 fcea 	bl	20006178 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
200057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200057a6:	3301      	adds	r3, #1
200057a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
200057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200057ac:	085b      	lsrs	r3, r3, #1
200057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
200057b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200057b2:	2b00      	cmp	r3, #0
200057b4:	f47f af2e 	bne.w	20005614 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
200057b8:	687b      	ldr	r3, [r7, #4]
200057ba:	681b      	ldr	r3, [r3, #0]
200057bc:	4618      	mov	r0, r3
200057be:	f003 ff3d 	bl	2000963c <USB_ReadInterrupts>
200057c2:	4603      	mov	r3, r0
200057c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200057c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200057cc:	d122      	bne.n	20005814 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
200057ce:	69fb      	ldr	r3, [r7, #28]
200057d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200057d4:	685b      	ldr	r3, [r3, #4]
200057d6:	69fa      	ldr	r2, [r7, #28]
200057d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200057dc:	f023 0301 	bic.w	r3, r3, #1
200057e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
200057e2:	687b      	ldr	r3, [r7, #4]
200057e4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
200057e8:	2b01      	cmp	r3, #1
200057ea:	d108      	bne.n	200057fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
200057ec:	687b      	ldr	r3, [r7, #4]
200057ee:	2200      	movs	r2, #0
200057f0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
200057f4:	2100      	movs	r1, #0
200057f6:	6878      	ldr	r0, [r7, #4]
200057f8:	f006 fc2a 	bl	2000c050 <HAL_PCDEx_LPM_Callback>
200057fc:	e002      	b.n	20005804 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
200057fe:	6878      	ldr	r0, [r7, #4]
20005800:	f006 fa4e 	bl	2000bca0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
20005804:	687b      	ldr	r3, [r7, #4]
20005806:	681b      	ldr	r3, [r3, #0]
20005808:	695a      	ldr	r2, [r3, #20]
2000580a:	687b      	ldr	r3, [r7, #4]
2000580c:	681b      	ldr	r3, [r3, #0]
2000580e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
20005812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
20005814:	687b      	ldr	r3, [r7, #4]
20005816:	681b      	ldr	r3, [r3, #0]
20005818:	4618      	mov	r0, r3
2000581a:	f003 ff0f 	bl	2000963c <USB_ReadInterrupts>
2000581e:	4603      	mov	r3, r0
20005820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20005824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20005828:	d112      	bne.n	20005850 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
2000582a:	69fb      	ldr	r3, [r7, #28]
2000582c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005830:	689b      	ldr	r3, [r3, #8]
20005832:	f003 0301 	and.w	r3, r3, #1
20005836:	2b01      	cmp	r3, #1
20005838:	d102      	bne.n	20005840 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
2000583a:	6878      	ldr	r0, [r7, #4]
2000583c:	f006 fa0a 	bl	2000bc54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
20005840:	687b      	ldr	r3, [r7, #4]
20005842:	681b      	ldr	r3, [r3, #0]
20005844:	695a      	ldr	r2, [r3, #20]
20005846:	687b      	ldr	r3, [r7, #4]
20005848:	681b      	ldr	r3, [r3, #0]
2000584a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
2000584e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
20005850:	687b      	ldr	r3, [r7, #4]
20005852:	681b      	ldr	r3, [r3, #0]
20005854:	4618      	mov	r0, r3
20005856:	f003 fef1 	bl	2000963c <USB_ReadInterrupts>
2000585a:	4603      	mov	r3, r0
2000585c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20005860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20005864:	d121      	bne.n	200058aa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
20005866:	687b      	ldr	r3, [r7, #4]
20005868:	681b      	ldr	r3, [r3, #0]
2000586a:	695a      	ldr	r2, [r3, #20]
2000586c:	687b      	ldr	r3, [r7, #4]
2000586e:	681b      	ldr	r3, [r3, #0]
20005870:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
20005874:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
20005876:	687b      	ldr	r3, [r7, #4]
20005878:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
2000587c:	2b00      	cmp	r3, #0
2000587e:	d111      	bne.n	200058a4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
20005880:	687b      	ldr	r3, [r7, #4]
20005882:	2201      	movs	r2, #1
20005884:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
20005888:	687b      	ldr	r3, [r7, #4]
2000588a:	681b      	ldr	r3, [r3, #0]
2000588c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000588e:	089b      	lsrs	r3, r3, #2
20005890:	f003 020f 	and.w	r2, r3, #15
20005894:	687b      	ldr	r3, [r7, #4]
20005896:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
2000589a:	2101      	movs	r1, #1
2000589c:	6878      	ldr	r0, [r7, #4]
2000589e:	f006 fbd7 	bl	2000c050 <HAL_PCDEx_LPM_Callback>
200058a2:	e002      	b.n	200058aa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
200058a4:	6878      	ldr	r0, [r7, #4]
200058a6:	f006 f9d5 	bl	2000bc54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
200058aa:	687b      	ldr	r3, [r7, #4]
200058ac:	681b      	ldr	r3, [r3, #0]
200058ae:	4618      	mov	r0, r3
200058b0:	f003 fec4 	bl	2000963c <USB_ReadInterrupts>
200058b4:	4603      	mov	r3, r0
200058b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
200058ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
200058be:	f040 80b7 	bne.w	20005a30 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
200058c2:	69fb      	ldr	r3, [r7, #28]
200058c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200058c8:	685b      	ldr	r3, [r3, #4]
200058ca:	69fa      	ldr	r2, [r7, #28]
200058cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200058d0:	f023 0301 	bic.w	r3, r3, #1
200058d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
200058d6:	687b      	ldr	r3, [r7, #4]
200058d8:	681b      	ldr	r3, [r3, #0]
200058da:	2110      	movs	r1, #16
200058dc:	4618      	mov	r0, r3
200058de:	f002 ff8b 	bl	200087f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200058e2:	2300      	movs	r3, #0
200058e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
200058e6:	e046      	b.n	20005976 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
200058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200058ea:	015a      	lsls	r2, r3, #5
200058ec:	69fb      	ldr	r3, [r7, #28]
200058ee:	4413      	add	r3, r2
200058f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200058f4:	461a      	mov	r2, r3
200058f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
200058fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
200058fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200058fe:	015a      	lsls	r2, r3, #5
20005900:	69fb      	ldr	r3, [r7, #28]
20005902:	4413      	add	r3, r2
20005904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005908:	681b      	ldr	r3, [r3, #0]
2000590a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000590c:	0151      	lsls	r1, r2, #5
2000590e:	69fa      	ldr	r2, [r7, #28]
20005910:	440a      	add	r2, r1
20005912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20005916:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000591a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
2000591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000591e:	015a      	lsls	r2, r3, #5
20005920:	69fb      	ldr	r3, [r7, #28]
20005922:	4413      	add	r3, r2
20005924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005928:	461a      	mov	r2, r3
2000592a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
2000592e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
20005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20005932:	015a      	lsls	r2, r3, #5
20005934:	69fb      	ldr	r3, [r7, #28]
20005936:	4413      	add	r3, r2
20005938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000593c:	681b      	ldr	r3, [r3, #0]
2000593e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20005940:	0151      	lsls	r1, r2, #5
20005942:	69fa      	ldr	r2, [r7, #28]
20005944:	440a      	add	r2, r1
20005946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000594a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000594e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20005950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20005952:	015a      	lsls	r2, r3, #5
20005954:	69fb      	ldr	r3, [r7, #28]
20005956:	4413      	add	r3, r2
20005958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000595c:	681b      	ldr	r3, [r3, #0]
2000595e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20005960:	0151      	lsls	r1, r2, #5
20005962:	69fa      	ldr	r2, [r7, #28]
20005964:	440a      	add	r2, r1
20005966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000596a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000596e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20005972:	3301      	adds	r3, #1
20005974:	62fb      	str	r3, [r7, #44]	@ 0x2c
20005976:	687b      	ldr	r3, [r7, #4]
20005978:	791b      	ldrb	r3, [r3, #4]
2000597a:	461a      	mov	r2, r3
2000597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000597e:	4293      	cmp	r3, r2
20005980:	d3b2      	bcc.n	200058e8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
20005982:	69fb      	ldr	r3, [r7, #28]
20005984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005988:	69db      	ldr	r3, [r3, #28]
2000598a:	69fa      	ldr	r2, [r7, #28]
2000598c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005990:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
20005994:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
20005996:	687b      	ldr	r3, [r7, #4]
20005998:	7bdb      	ldrb	r3, [r3, #15]
2000599a:	2b00      	cmp	r3, #0
2000599c:	d016      	beq.n	200059cc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
2000599e:	69fb      	ldr	r3, [r7, #28]
200059a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200059a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200059a8:	69fa      	ldr	r2, [r7, #28]
200059aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200059ae:	f043 030b 	orr.w	r3, r3, #11
200059b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
200059b6:	69fb      	ldr	r3, [r7, #28]
200059b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200059be:	69fa      	ldr	r2, [r7, #28]
200059c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200059c4:	f043 030b 	orr.w	r3, r3, #11
200059c8:	6453      	str	r3, [r2, #68]	@ 0x44
200059ca:	e015      	b.n	200059f8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
200059cc:	69fb      	ldr	r3, [r7, #28]
200059ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200059d2:	695a      	ldr	r2, [r3, #20]
200059d4:	69fb      	ldr	r3, [r7, #28]
200059d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200059da:	4619      	mov	r1, r3
200059dc:	f242 032b 	movw	r3, #8235	@ 0x202b
200059e0:	4313      	orrs	r3, r2
200059e2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
200059e4:	69fb      	ldr	r3, [r7, #28]
200059e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200059ea:	691b      	ldr	r3, [r3, #16]
200059ec:	69fa      	ldr	r2, [r7, #28]
200059ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200059f2:	f043 030b 	orr.w	r3, r3, #11
200059f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
200059f8:	69fb      	ldr	r3, [r7, #28]
200059fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200059fe:	681b      	ldr	r3, [r3, #0]
20005a00:	69fa      	ldr	r2, [r7, #28]
20005a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005a06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
20005a0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20005a0c:	687b      	ldr	r3, [r7, #4]
20005a0e:	6818      	ldr	r0, [r3, #0]
20005a10:	687b      	ldr	r3, [r7, #4]
20005a12:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
20005a14:	687b      	ldr	r3, [r7, #4]
20005a16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20005a1a:	461a      	mov	r2, r3
20005a1c:	f003 fed4 	bl	200097c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
20005a20:	687b      	ldr	r3, [r7, #4]
20005a22:	681b      	ldr	r3, [r3, #0]
20005a24:	695a      	ldr	r2, [r3, #20]
20005a26:	687b      	ldr	r3, [r7, #4]
20005a28:	681b      	ldr	r3, [r3, #0]
20005a2a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
20005a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
20005a30:	687b      	ldr	r3, [r7, #4]
20005a32:	681b      	ldr	r3, [r3, #0]
20005a34:	4618      	mov	r0, r3
20005a36:	f003 fe01 	bl	2000963c <USB_ReadInterrupts>
20005a3a:	4603      	mov	r3, r0
20005a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20005a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20005a44:	d123      	bne.n	20005a8e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
20005a46:	687b      	ldr	r3, [r7, #4]
20005a48:	681b      	ldr	r3, [r3, #0]
20005a4a:	4618      	mov	r0, r3
20005a4c:	f003 fe98 	bl	20009780 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
20005a50:	687b      	ldr	r3, [r7, #4]
20005a52:	681b      	ldr	r3, [r3, #0]
20005a54:	4618      	mov	r0, r3
20005a56:	f002 ff48 	bl	200088ea <USB_GetDevSpeed>
20005a5a:	4603      	mov	r3, r0
20005a5c:	461a      	mov	r2, r3
20005a5e:	687b      	ldr	r3, [r7, #4]
20005a60:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
20005a62:	687b      	ldr	r3, [r7, #4]
20005a64:	681c      	ldr	r4, [r3, #0]
20005a66:	f001 fab3 	bl	20006fd0 <HAL_RCC_GetHCLKFreq>
20005a6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
20005a6c:	687b      	ldr	r3, [r7, #4]
20005a6e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
20005a70:	461a      	mov	r2, r3
20005a72:	4620      	mov	r0, r4
20005a74:	f002 fc52 	bl	2000831c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
20005a78:	6878      	ldr	r0, [r7, #4]
20005a7a:	f006 f8c2 	bl	2000bc02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
20005a7e:	687b      	ldr	r3, [r7, #4]
20005a80:	681b      	ldr	r3, [r3, #0]
20005a82:	695a      	ldr	r2, [r3, #20]
20005a84:	687b      	ldr	r3, [r7, #4]
20005a86:	681b      	ldr	r3, [r3, #0]
20005a88:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
20005a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
20005a8e:	687b      	ldr	r3, [r7, #4]
20005a90:	681b      	ldr	r3, [r3, #0]
20005a92:	4618      	mov	r0, r3
20005a94:	f003 fdd2 	bl	2000963c <USB_ReadInterrupts>
20005a98:	4603      	mov	r3, r0
20005a9a:	f003 0308 	and.w	r3, r3, #8
20005a9e:	2b08      	cmp	r3, #8
20005aa0:	d10a      	bne.n	20005ab8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
20005aa2:	6878      	ldr	r0, [r7, #4]
20005aa4:	f006 f89f 	bl	2000bbe6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
20005aa8:	687b      	ldr	r3, [r7, #4]
20005aaa:	681b      	ldr	r3, [r3, #0]
20005aac:	695a      	ldr	r2, [r3, #20]
20005aae:	687b      	ldr	r3, [r7, #4]
20005ab0:	681b      	ldr	r3, [r3, #0]
20005ab2:	f002 0208 	and.w	r2, r2, #8
20005ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
20005ab8:	687b      	ldr	r3, [r7, #4]
20005aba:	681b      	ldr	r3, [r3, #0]
20005abc:	4618      	mov	r0, r3
20005abe:	f003 fdbd 	bl	2000963c <USB_ReadInterrupts>
20005ac2:	4603      	mov	r3, r0
20005ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20005ac8:	2b80      	cmp	r3, #128	@ 0x80
20005aca:	d123      	bne.n	20005b14 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
20005acc:	6a3b      	ldr	r3, [r7, #32]
20005ace:	699b      	ldr	r3, [r3, #24]
20005ad0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
20005ad4:	6a3b      	ldr	r3, [r7, #32]
20005ad6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005ad8:	2301      	movs	r3, #1
20005ada:	627b      	str	r3, [r7, #36]	@ 0x24
20005adc:	e014      	b.n	20005b08 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
20005ade:	6879      	ldr	r1, [r7, #4]
20005ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005ae2:	4613      	mov	r3, r2
20005ae4:	00db      	lsls	r3, r3, #3
20005ae6:	4413      	add	r3, r2
20005ae8:	009b      	lsls	r3, r3, #2
20005aea:	440b      	add	r3, r1
20005aec:	f203 2357 	addw	r3, r3, #599	@ 0x257
20005af0:	781b      	ldrb	r3, [r3, #0]
20005af2:	2b01      	cmp	r3, #1
20005af4:	d105      	bne.n	20005b02 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
20005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005af8:	b2db      	uxtb	r3, r3
20005afa:	4619      	mov	r1, r3
20005afc:	6878      	ldr	r0, [r7, #4]
20005afe:	f000 fb0a 	bl	20006116 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005b04:	3301      	adds	r3, #1
20005b06:	627b      	str	r3, [r7, #36]	@ 0x24
20005b08:	687b      	ldr	r3, [r7, #4]
20005b0a:	791b      	ldrb	r3, [r3, #4]
20005b0c:	461a      	mov	r2, r3
20005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005b10:	4293      	cmp	r3, r2
20005b12:	d3e4      	bcc.n	20005ade <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
20005b14:	687b      	ldr	r3, [r7, #4]
20005b16:	681b      	ldr	r3, [r3, #0]
20005b18:	4618      	mov	r0, r3
20005b1a:	f003 fd8f 	bl	2000963c <USB_ReadInterrupts>
20005b1e:	4603      	mov	r3, r0
20005b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20005b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20005b28:	d13c      	bne.n	20005ba4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005b2a:	2301      	movs	r3, #1
20005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
20005b2e:	e02b      	b.n	20005b88 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
20005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005b32:	015a      	lsls	r2, r3, #5
20005b34:	69fb      	ldr	r3, [r7, #28]
20005b36:	4413      	add	r3, r2
20005b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005b3c:	681b      	ldr	r3, [r3, #0]
20005b3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20005b40:	6879      	ldr	r1, [r7, #4]
20005b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005b44:	4613      	mov	r3, r2
20005b46:	00db      	lsls	r3, r3, #3
20005b48:	4413      	add	r3, r2
20005b4a:	009b      	lsls	r3, r3, #2
20005b4c:	440b      	add	r3, r1
20005b4e:	3318      	adds	r3, #24
20005b50:	781b      	ldrb	r3, [r3, #0]
20005b52:	2b01      	cmp	r3, #1
20005b54:	d115      	bne.n	20005b82 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
20005b56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20005b58:	2b00      	cmp	r3, #0
20005b5a:	da12      	bge.n	20005b82 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
20005b5c:	6879      	ldr	r1, [r7, #4]
20005b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005b60:	4613      	mov	r3, r2
20005b62:	00db      	lsls	r3, r3, #3
20005b64:	4413      	add	r3, r2
20005b66:	009b      	lsls	r3, r3, #2
20005b68:	440b      	add	r3, r1
20005b6a:	3317      	adds	r3, #23
20005b6c:	2201      	movs	r2, #1
20005b6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
20005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005b72:	b2db      	uxtb	r3, r3
20005b74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
20005b78:	b2db      	uxtb	r3, r3
20005b7a:	4619      	mov	r1, r3
20005b7c:	6878      	ldr	r0, [r7, #4]
20005b7e:	f000 faca 	bl	20006116 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005b84:	3301      	adds	r3, #1
20005b86:	627b      	str	r3, [r7, #36]	@ 0x24
20005b88:	687b      	ldr	r3, [r7, #4]
20005b8a:	791b      	ldrb	r3, [r3, #4]
20005b8c:	461a      	mov	r2, r3
20005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005b90:	4293      	cmp	r3, r2
20005b92:	d3cd      	bcc.n	20005b30 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
20005b94:	687b      	ldr	r3, [r7, #4]
20005b96:	681b      	ldr	r3, [r3, #0]
20005b98:	695a      	ldr	r2, [r3, #20]
20005b9a:	687b      	ldr	r3, [r7, #4]
20005b9c:	681b      	ldr	r3, [r3, #0]
20005b9e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
20005ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
20005ba4:	687b      	ldr	r3, [r7, #4]
20005ba6:	681b      	ldr	r3, [r3, #0]
20005ba8:	4618      	mov	r0, r3
20005baa:	f003 fd47 	bl	2000963c <USB_ReadInterrupts>
20005bae:	4603      	mov	r3, r0
20005bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20005bb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20005bb8:	d156      	bne.n	20005c68 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005bba:	2301      	movs	r3, #1
20005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
20005bbe:	e045      	b.n	20005c4c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
20005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005bc2:	015a      	lsls	r2, r3, #5
20005bc4:	69fb      	ldr	r3, [r7, #28]
20005bc6:	4413      	add	r3, r2
20005bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005bcc:	681b      	ldr	r3, [r3, #0]
20005bce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20005bd0:	6879      	ldr	r1, [r7, #4]
20005bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005bd4:	4613      	mov	r3, r2
20005bd6:	00db      	lsls	r3, r3, #3
20005bd8:	4413      	add	r3, r2
20005bda:	009b      	lsls	r3, r3, #2
20005bdc:	440b      	add	r3, r1
20005bde:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20005be2:	781b      	ldrb	r3, [r3, #0]
20005be4:	2b01      	cmp	r3, #1
20005be6:	d12e      	bne.n	20005c46 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20005be8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20005bea:	2b00      	cmp	r3, #0
20005bec:	da2b      	bge.n	20005c46 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
20005bee:	69bb      	ldr	r3, [r7, #24]
20005bf0:	0c1a      	lsrs	r2, r3, #16
20005bf2:	687b      	ldr	r3, [r7, #4]
20005bf4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
20005bf8:	4053      	eors	r3, r2
20005bfa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20005bfe:	2b00      	cmp	r3, #0
20005c00:	d121      	bne.n	20005c46 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
20005c02:	6879      	ldr	r1, [r7, #4]
20005c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005c06:	4613      	mov	r3, r2
20005c08:	00db      	lsls	r3, r3, #3
20005c0a:	4413      	add	r3, r2
20005c0c:	009b      	lsls	r3, r3, #2
20005c0e:	440b      	add	r3, r1
20005c10:	f203 2357 	addw	r3, r3, #599	@ 0x257
20005c14:	2201      	movs	r2, #1
20005c16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
20005c18:	6a3b      	ldr	r3, [r7, #32]
20005c1a:	699b      	ldr	r3, [r3, #24]
20005c1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20005c20:	6a3b      	ldr	r3, [r7, #32]
20005c22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
20005c24:	6a3b      	ldr	r3, [r7, #32]
20005c26:	695b      	ldr	r3, [r3, #20]
20005c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20005c2c:	2b00      	cmp	r3, #0
20005c2e:	d10a      	bne.n	20005c46 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
20005c30:	69fb      	ldr	r3, [r7, #28]
20005c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005c36:	685b      	ldr	r3, [r3, #4]
20005c38:	69fa      	ldr	r2, [r7, #28]
20005c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20005c42:	6053      	str	r3, [r2, #4]
            break;
20005c44:	e008      	b.n	20005c58 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005c48:	3301      	adds	r3, #1
20005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
20005c4c:	687b      	ldr	r3, [r7, #4]
20005c4e:	791b      	ldrb	r3, [r3, #4]
20005c50:	461a      	mov	r2, r3
20005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005c54:	4293      	cmp	r3, r2
20005c56:	d3b3      	bcc.n	20005bc0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
20005c58:	687b      	ldr	r3, [r7, #4]
20005c5a:	681b      	ldr	r3, [r3, #0]
20005c5c:	695a      	ldr	r2, [r3, #20]
20005c5e:	687b      	ldr	r3, [r7, #4]
20005c60:	681b      	ldr	r3, [r3, #0]
20005c62:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
20005c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
20005c68:	687b      	ldr	r3, [r7, #4]
20005c6a:	681b      	ldr	r3, [r3, #0]
20005c6c:	4618      	mov	r0, r3
20005c6e:	f003 fce5 	bl	2000963c <USB_ReadInterrupts>
20005c72:	4603      	mov	r3, r0
20005c74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
20005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20005c7c:	d10a      	bne.n	20005c94 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
20005c7e:	6878      	ldr	r0, [r7, #4]
20005c80:	f006 f840 	bl	2000bd04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
20005c84:	687b      	ldr	r3, [r7, #4]
20005c86:	681b      	ldr	r3, [r3, #0]
20005c88:	695a      	ldr	r2, [r3, #20]
20005c8a:	687b      	ldr	r3, [r7, #4]
20005c8c:	681b      	ldr	r3, [r3, #0]
20005c8e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
20005c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
20005c94:	687b      	ldr	r3, [r7, #4]
20005c96:	681b      	ldr	r3, [r3, #0]
20005c98:	4618      	mov	r0, r3
20005c9a:	f003 fccf 	bl	2000963c <USB_ReadInterrupts>
20005c9e:	4603      	mov	r3, r0
20005ca0:	f003 0304 	and.w	r3, r3, #4
20005ca4:	2b04      	cmp	r3, #4
20005ca6:	d115      	bne.n	20005cd4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
20005ca8:	687b      	ldr	r3, [r7, #4]
20005caa:	681b      	ldr	r3, [r3, #0]
20005cac:	685b      	ldr	r3, [r3, #4]
20005cae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
20005cb0:	69bb      	ldr	r3, [r7, #24]
20005cb2:	f003 0304 	and.w	r3, r3, #4
20005cb6:	2b00      	cmp	r3, #0
20005cb8:	d002      	beq.n	20005cc0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
20005cba:	6878      	ldr	r0, [r7, #4]
20005cbc:	f006 f830 	bl	2000bd20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
20005cc0:	687b      	ldr	r3, [r7, #4]
20005cc2:	681b      	ldr	r3, [r3, #0]
20005cc4:	6859      	ldr	r1, [r3, #4]
20005cc6:	687b      	ldr	r3, [r7, #4]
20005cc8:	681b      	ldr	r3, [r3, #0]
20005cca:	69ba      	ldr	r2, [r7, #24]
20005ccc:	430a      	orrs	r2, r1
20005cce:	605a      	str	r2, [r3, #4]
20005cd0:	e000      	b.n	20005cd4 <HAL_PCD_IRQHandler+0x996>
      return;
20005cd2:	bf00      	nop
    }
  }
}
20005cd4:	3734      	adds	r7, #52	@ 0x34
20005cd6:	46bd      	mov	sp, r7
20005cd8:	bd90      	pop	{r4, r7, pc}

20005cda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
20005cda:	b580      	push	{r7, lr}
20005cdc:	b082      	sub	sp, #8
20005cde:	af00      	add	r7, sp, #0
20005ce0:	6078      	str	r0, [r7, #4]
20005ce2:	460b      	mov	r3, r1
20005ce4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
20005ce6:	687b      	ldr	r3, [r7, #4]
20005ce8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005cec:	2b01      	cmp	r3, #1
20005cee:	d101      	bne.n	20005cf4 <HAL_PCD_SetAddress+0x1a>
20005cf0:	2302      	movs	r3, #2
20005cf2:	e012      	b.n	20005d1a <HAL_PCD_SetAddress+0x40>
20005cf4:	687b      	ldr	r3, [r7, #4]
20005cf6:	2201      	movs	r2, #1
20005cf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
20005cfc:	687b      	ldr	r3, [r7, #4]
20005cfe:	78fa      	ldrb	r2, [r7, #3]
20005d00:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
20005d02:	687b      	ldr	r3, [r7, #4]
20005d04:	681b      	ldr	r3, [r3, #0]
20005d06:	78fa      	ldrb	r2, [r7, #3]
20005d08:	4611      	mov	r1, r2
20005d0a:	4618      	mov	r0, r3
20005d0c:	f003 fc2e 	bl	2000956c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
20005d10:	687b      	ldr	r3, [r7, #4]
20005d12:	2200      	movs	r2, #0
20005d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20005d18:	2300      	movs	r3, #0
}
20005d1a:	4618      	mov	r0, r3
20005d1c:	3708      	adds	r7, #8
20005d1e:	46bd      	mov	sp, r7
20005d20:	bd80      	pop	{r7, pc}

20005d22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
20005d22:	b580      	push	{r7, lr}
20005d24:	b084      	sub	sp, #16
20005d26:	af00      	add	r7, sp, #0
20005d28:	6078      	str	r0, [r7, #4]
20005d2a:	4608      	mov	r0, r1
20005d2c:	4611      	mov	r1, r2
20005d2e:	461a      	mov	r2, r3
20005d30:	4603      	mov	r3, r0
20005d32:	70fb      	strb	r3, [r7, #3]
20005d34:	460b      	mov	r3, r1
20005d36:	803b      	strh	r3, [r7, #0]
20005d38:	4613      	mov	r3, r2
20005d3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
20005d3c:	2300      	movs	r3, #0
20005d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
20005d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
20005d44:	2b00      	cmp	r3, #0
20005d46:	da0f      	bge.n	20005d68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005d48:	78fb      	ldrb	r3, [r7, #3]
20005d4a:	f003 020f 	and.w	r2, r3, #15
20005d4e:	4613      	mov	r3, r2
20005d50:	00db      	lsls	r3, r3, #3
20005d52:	4413      	add	r3, r2
20005d54:	009b      	lsls	r3, r3, #2
20005d56:	3310      	adds	r3, #16
20005d58:	687a      	ldr	r2, [r7, #4]
20005d5a:	4413      	add	r3, r2
20005d5c:	3304      	adds	r3, #4
20005d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20005d60:	68fb      	ldr	r3, [r7, #12]
20005d62:	2201      	movs	r2, #1
20005d64:	705a      	strb	r2, [r3, #1]
20005d66:	e00f      	b.n	20005d88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20005d68:	78fb      	ldrb	r3, [r7, #3]
20005d6a:	f003 020f 	and.w	r2, r3, #15
20005d6e:	4613      	mov	r3, r2
20005d70:	00db      	lsls	r3, r3, #3
20005d72:	4413      	add	r3, r2
20005d74:	009b      	lsls	r3, r3, #2
20005d76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005d7a:	687a      	ldr	r2, [r7, #4]
20005d7c:	4413      	add	r3, r2
20005d7e:	3304      	adds	r3, #4
20005d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20005d82:	68fb      	ldr	r3, [r7, #12]
20005d84:	2200      	movs	r2, #0
20005d86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
20005d88:	78fb      	ldrb	r3, [r7, #3]
20005d8a:	f003 030f 	and.w	r3, r3, #15
20005d8e:	b2da      	uxtb	r2, r3
20005d90:	68fb      	ldr	r3, [r7, #12]
20005d92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
20005d94:	883b      	ldrh	r3, [r7, #0]
20005d96:	f3c3 020a 	ubfx	r2, r3, #0, #11
20005d9a:	68fb      	ldr	r3, [r7, #12]
20005d9c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
20005d9e:	68fb      	ldr	r3, [r7, #12]
20005da0:	78ba      	ldrb	r2, [r7, #2]
20005da2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
20005da4:	68fb      	ldr	r3, [r7, #12]
20005da6:	785b      	ldrb	r3, [r3, #1]
20005da8:	2b00      	cmp	r3, #0
20005daa:	d004      	beq.n	20005db6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
20005dac:	68fb      	ldr	r3, [r7, #12]
20005dae:	781b      	ldrb	r3, [r3, #0]
20005db0:	461a      	mov	r2, r3
20005db2:	68fb      	ldr	r3, [r7, #12]
20005db4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
20005db6:	78bb      	ldrb	r3, [r7, #2]
20005db8:	2b02      	cmp	r3, #2
20005dba:	d102      	bne.n	20005dc2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
20005dbc:	68fb      	ldr	r3, [r7, #12]
20005dbe:	2200      	movs	r2, #0
20005dc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
20005dc2:	687b      	ldr	r3, [r7, #4]
20005dc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005dc8:	2b01      	cmp	r3, #1
20005dca:	d101      	bne.n	20005dd0 <HAL_PCD_EP_Open+0xae>
20005dcc:	2302      	movs	r3, #2
20005dce:	e00e      	b.n	20005dee <HAL_PCD_EP_Open+0xcc>
20005dd0:	687b      	ldr	r3, [r7, #4]
20005dd2:	2201      	movs	r2, #1
20005dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
20005dd8:	687b      	ldr	r3, [r7, #4]
20005dda:	681b      	ldr	r3, [r3, #0]
20005ddc:	68f9      	ldr	r1, [r7, #12]
20005dde:	4618      	mov	r0, r3
20005de0:	f002 fda8 	bl	20008934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
20005de4:	687b      	ldr	r3, [r7, #4]
20005de6:	2200      	movs	r2, #0
20005de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
20005dec:	7afb      	ldrb	r3, [r7, #11]
}
20005dee:	4618      	mov	r0, r3
20005df0:	3710      	adds	r7, #16
20005df2:	46bd      	mov	sp, r7
20005df4:	bd80      	pop	{r7, pc}

20005df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20005df6:	b580      	push	{r7, lr}
20005df8:	b084      	sub	sp, #16
20005dfa:	af00      	add	r7, sp, #0
20005dfc:	6078      	str	r0, [r7, #4]
20005dfe:	460b      	mov	r3, r1
20005e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
20005e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
20005e06:	2b00      	cmp	r3, #0
20005e08:	da0f      	bge.n	20005e2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005e0a:	78fb      	ldrb	r3, [r7, #3]
20005e0c:	f003 020f 	and.w	r2, r3, #15
20005e10:	4613      	mov	r3, r2
20005e12:	00db      	lsls	r3, r3, #3
20005e14:	4413      	add	r3, r2
20005e16:	009b      	lsls	r3, r3, #2
20005e18:	3310      	adds	r3, #16
20005e1a:	687a      	ldr	r2, [r7, #4]
20005e1c:	4413      	add	r3, r2
20005e1e:	3304      	adds	r3, #4
20005e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20005e22:	68fb      	ldr	r3, [r7, #12]
20005e24:	2201      	movs	r2, #1
20005e26:	705a      	strb	r2, [r3, #1]
20005e28:	e00f      	b.n	20005e4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20005e2a:	78fb      	ldrb	r3, [r7, #3]
20005e2c:	f003 020f 	and.w	r2, r3, #15
20005e30:	4613      	mov	r3, r2
20005e32:	00db      	lsls	r3, r3, #3
20005e34:	4413      	add	r3, r2
20005e36:	009b      	lsls	r3, r3, #2
20005e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005e3c:	687a      	ldr	r2, [r7, #4]
20005e3e:	4413      	add	r3, r2
20005e40:	3304      	adds	r3, #4
20005e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20005e44:	68fb      	ldr	r3, [r7, #12]
20005e46:	2200      	movs	r2, #0
20005e48:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
20005e4a:	78fb      	ldrb	r3, [r7, #3]
20005e4c:	f003 030f 	and.w	r3, r3, #15
20005e50:	b2da      	uxtb	r2, r3
20005e52:	68fb      	ldr	r3, [r7, #12]
20005e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20005e56:	687b      	ldr	r3, [r7, #4]
20005e58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005e5c:	2b01      	cmp	r3, #1
20005e5e:	d101      	bne.n	20005e64 <HAL_PCD_EP_Close+0x6e>
20005e60:	2302      	movs	r3, #2
20005e62:	e00e      	b.n	20005e82 <HAL_PCD_EP_Close+0x8c>
20005e64:	687b      	ldr	r3, [r7, #4]
20005e66:	2201      	movs	r2, #1
20005e68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
20005e6c:	687b      	ldr	r3, [r7, #4]
20005e6e:	681b      	ldr	r3, [r3, #0]
20005e70:	68f9      	ldr	r1, [r7, #12]
20005e72:	4618      	mov	r0, r3
20005e74:	f002 fde6 	bl	20008a44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
20005e78:	687b      	ldr	r3, [r7, #4]
20005e7a:	2200      	movs	r2, #0
20005e7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
20005e80:	2300      	movs	r3, #0
}
20005e82:	4618      	mov	r0, r3
20005e84:	3710      	adds	r7, #16
20005e86:	46bd      	mov	sp, r7
20005e88:	bd80      	pop	{r7, pc}

20005e8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20005e8a:	b580      	push	{r7, lr}
20005e8c:	b086      	sub	sp, #24
20005e8e:	af00      	add	r7, sp, #0
20005e90:	60f8      	str	r0, [r7, #12]
20005e92:	607a      	str	r2, [r7, #4]
20005e94:	603b      	str	r3, [r7, #0]
20005e96:	460b      	mov	r3, r1
20005e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20005e9a:	7afb      	ldrb	r3, [r7, #11]
20005e9c:	f003 020f 	and.w	r2, r3, #15
20005ea0:	4613      	mov	r3, r2
20005ea2:	00db      	lsls	r3, r3, #3
20005ea4:	4413      	add	r3, r2
20005ea6:	009b      	lsls	r3, r3, #2
20005ea8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005eac:	68fa      	ldr	r2, [r7, #12]
20005eae:	4413      	add	r3, r2
20005eb0:	3304      	adds	r3, #4
20005eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20005eb4:	697b      	ldr	r3, [r7, #20]
20005eb6:	687a      	ldr	r2, [r7, #4]
20005eb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20005eba:	697b      	ldr	r3, [r7, #20]
20005ebc:	683a      	ldr	r2, [r7, #0]
20005ebe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
20005ec0:	697b      	ldr	r3, [r7, #20]
20005ec2:	2200      	movs	r2, #0
20005ec4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
20005ec6:	697b      	ldr	r3, [r7, #20]
20005ec8:	2200      	movs	r2, #0
20005eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20005ecc:	7afb      	ldrb	r3, [r7, #11]
20005ece:	f003 030f 	and.w	r3, r3, #15
20005ed2:	b2da      	uxtb	r2, r3
20005ed4:	697b      	ldr	r3, [r7, #20]
20005ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20005ed8:	68fb      	ldr	r3, [r7, #12]
20005eda:	799b      	ldrb	r3, [r3, #6]
20005edc:	2b01      	cmp	r3, #1
20005ede:	d102      	bne.n	20005ee6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
20005ee0:	687a      	ldr	r2, [r7, #4]
20005ee2:	697b      	ldr	r3, [r7, #20]
20005ee4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
20005ee6:	68fb      	ldr	r3, [r7, #12]
20005ee8:	6818      	ldr	r0, [r3, #0]
20005eea:	68fb      	ldr	r3, [r7, #12]
20005eec:	799b      	ldrb	r3, [r3, #6]
20005eee:	461a      	mov	r2, r3
20005ef0:	6979      	ldr	r1, [r7, #20]
20005ef2:	f002 fe83 	bl	20008bfc <USB_EPStartXfer>

  return HAL_OK;
20005ef6:	2300      	movs	r3, #0
}
20005ef8:	4618      	mov	r0, r3
20005efa:	3718      	adds	r7, #24
20005efc:	46bd      	mov	sp, r7
20005efe:	bd80      	pop	{r7, pc}

20005f00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
20005f00:	b480      	push	{r7}
20005f02:	b083      	sub	sp, #12
20005f04:	af00      	add	r7, sp, #0
20005f06:	6078      	str	r0, [r7, #4]
20005f08:	460b      	mov	r3, r1
20005f0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
20005f0c:	78fb      	ldrb	r3, [r7, #3]
20005f0e:	f003 020f 	and.w	r2, r3, #15
20005f12:	6879      	ldr	r1, [r7, #4]
20005f14:	4613      	mov	r3, r2
20005f16:	00db      	lsls	r3, r3, #3
20005f18:	4413      	add	r3, r2
20005f1a:	009b      	lsls	r3, r3, #2
20005f1c:	440b      	add	r3, r1
20005f1e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
20005f22:	681b      	ldr	r3, [r3, #0]
}
20005f24:	4618      	mov	r0, r3
20005f26:	370c      	adds	r7, #12
20005f28:	46bd      	mov	sp, r7
20005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f2e:	4770      	bx	lr

20005f30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20005f30:	b580      	push	{r7, lr}
20005f32:	b086      	sub	sp, #24
20005f34:	af00      	add	r7, sp, #0
20005f36:	60f8      	str	r0, [r7, #12]
20005f38:	607a      	str	r2, [r7, #4]
20005f3a:	603b      	str	r3, [r7, #0]
20005f3c:	460b      	mov	r3, r1
20005f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005f40:	7afb      	ldrb	r3, [r7, #11]
20005f42:	f003 020f 	and.w	r2, r3, #15
20005f46:	4613      	mov	r3, r2
20005f48:	00db      	lsls	r3, r3, #3
20005f4a:	4413      	add	r3, r2
20005f4c:	009b      	lsls	r3, r3, #2
20005f4e:	3310      	adds	r3, #16
20005f50:	68fa      	ldr	r2, [r7, #12]
20005f52:	4413      	add	r3, r2
20005f54:	3304      	adds	r3, #4
20005f56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20005f58:	697b      	ldr	r3, [r7, #20]
20005f5a:	687a      	ldr	r2, [r7, #4]
20005f5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20005f5e:	697b      	ldr	r3, [r7, #20]
20005f60:	683a      	ldr	r2, [r7, #0]
20005f62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
20005f64:	697b      	ldr	r3, [r7, #20]
20005f66:	2200      	movs	r2, #0
20005f68:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
20005f6a:	697b      	ldr	r3, [r7, #20]
20005f6c:	2201      	movs	r2, #1
20005f6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20005f70:	7afb      	ldrb	r3, [r7, #11]
20005f72:	f003 030f 	and.w	r3, r3, #15
20005f76:	b2da      	uxtb	r2, r3
20005f78:	697b      	ldr	r3, [r7, #20]
20005f7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20005f7c:	68fb      	ldr	r3, [r7, #12]
20005f7e:	799b      	ldrb	r3, [r3, #6]
20005f80:	2b01      	cmp	r3, #1
20005f82:	d102      	bne.n	20005f8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
20005f84:	687a      	ldr	r2, [r7, #4]
20005f86:	697b      	ldr	r3, [r7, #20]
20005f88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
20005f8a:	68fb      	ldr	r3, [r7, #12]
20005f8c:	6818      	ldr	r0, [r3, #0]
20005f8e:	68fb      	ldr	r3, [r7, #12]
20005f90:	799b      	ldrb	r3, [r3, #6]
20005f92:	461a      	mov	r2, r3
20005f94:	6979      	ldr	r1, [r7, #20]
20005f96:	f002 fe31 	bl	20008bfc <USB_EPStartXfer>

  return HAL_OK;
20005f9a:	2300      	movs	r3, #0
}
20005f9c:	4618      	mov	r0, r3
20005f9e:	3718      	adds	r7, #24
20005fa0:	46bd      	mov	sp, r7
20005fa2:	bd80      	pop	{r7, pc}

20005fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20005fa4:	b580      	push	{r7, lr}
20005fa6:	b084      	sub	sp, #16
20005fa8:	af00      	add	r7, sp, #0
20005faa:	6078      	str	r0, [r7, #4]
20005fac:	460b      	mov	r3, r1
20005fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
20005fb0:	78fb      	ldrb	r3, [r7, #3]
20005fb2:	f003 030f 	and.w	r3, r3, #15
20005fb6:	687a      	ldr	r2, [r7, #4]
20005fb8:	7912      	ldrb	r2, [r2, #4]
20005fba:	4293      	cmp	r3, r2
20005fbc:	d901      	bls.n	20005fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
20005fbe:	2301      	movs	r3, #1
20005fc0:	e04f      	b.n	20006062 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
20005fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
20005fc6:	2b00      	cmp	r3, #0
20005fc8:	da0f      	bge.n	20005fea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005fca:	78fb      	ldrb	r3, [r7, #3]
20005fcc:	f003 020f 	and.w	r2, r3, #15
20005fd0:	4613      	mov	r3, r2
20005fd2:	00db      	lsls	r3, r3, #3
20005fd4:	4413      	add	r3, r2
20005fd6:	009b      	lsls	r3, r3, #2
20005fd8:	3310      	adds	r3, #16
20005fda:	687a      	ldr	r2, [r7, #4]
20005fdc:	4413      	add	r3, r2
20005fde:	3304      	adds	r3, #4
20005fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20005fe2:	68fb      	ldr	r3, [r7, #12]
20005fe4:	2201      	movs	r2, #1
20005fe6:	705a      	strb	r2, [r3, #1]
20005fe8:	e00d      	b.n	20006006 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
20005fea:	78fa      	ldrb	r2, [r7, #3]
20005fec:	4613      	mov	r3, r2
20005fee:	00db      	lsls	r3, r3, #3
20005ff0:	4413      	add	r3, r2
20005ff2:	009b      	lsls	r3, r3, #2
20005ff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005ff8:	687a      	ldr	r2, [r7, #4]
20005ffa:	4413      	add	r3, r2
20005ffc:	3304      	adds	r3, #4
20005ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20006000:	68fb      	ldr	r3, [r7, #12]
20006002:	2200      	movs	r2, #0
20006004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
20006006:	68fb      	ldr	r3, [r7, #12]
20006008:	2201      	movs	r2, #1
2000600a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
2000600c:	78fb      	ldrb	r3, [r7, #3]
2000600e:	f003 030f 	and.w	r3, r3, #15
20006012:	b2da      	uxtb	r2, r3
20006014:	68fb      	ldr	r3, [r7, #12]
20006016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20006018:	687b      	ldr	r3, [r7, #4]
2000601a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
2000601e:	2b01      	cmp	r3, #1
20006020:	d101      	bne.n	20006026 <HAL_PCD_EP_SetStall+0x82>
20006022:	2302      	movs	r3, #2
20006024:	e01d      	b.n	20006062 <HAL_PCD_EP_SetStall+0xbe>
20006026:	687b      	ldr	r3, [r7, #4]
20006028:	2201      	movs	r2, #1
2000602a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
2000602e:	687b      	ldr	r3, [r7, #4]
20006030:	681b      	ldr	r3, [r3, #0]
20006032:	68f9      	ldr	r1, [r7, #12]
20006034:	4618      	mov	r0, r3
20006036:	f003 f9c5 	bl	200093c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
2000603a:	78fb      	ldrb	r3, [r7, #3]
2000603c:	f003 030f 	and.w	r3, r3, #15
20006040:	2b00      	cmp	r3, #0
20006042:	d109      	bne.n	20006058 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
20006044:	687b      	ldr	r3, [r7, #4]
20006046:	6818      	ldr	r0, [r3, #0]
20006048:	687b      	ldr	r3, [r7, #4]
2000604a:	7999      	ldrb	r1, [r3, #6]
2000604c:	687b      	ldr	r3, [r7, #4]
2000604e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20006052:	461a      	mov	r2, r3
20006054:	f003 fbb8 	bl	200097c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
20006058:	687b      	ldr	r3, [r7, #4]
2000605a:	2200      	movs	r2, #0
2000605c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20006060:	2300      	movs	r3, #0
}
20006062:	4618      	mov	r0, r3
20006064:	3710      	adds	r7, #16
20006066:	46bd      	mov	sp, r7
20006068:	bd80      	pop	{r7, pc}

2000606a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
2000606a:	b580      	push	{r7, lr}
2000606c:	b084      	sub	sp, #16
2000606e:	af00      	add	r7, sp, #0
20006070:	6078      	str	r0, [r7, #4]
20006072:	460b      	mov	r3, r1
20006074:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
20006076:	78fb      	ldrb	r3, [r7, #3]
20006078:	f003 030f 	and.w	r3, r3, #15
2000607c:	687a      	ldr	r2, [r7, #4]
2000607e:	7912      	ldrb	r2, [r2, #4]
20006080:	4293      	cmp	r3, r2
20006082:	d901      	bls.n	20006088 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
20006084:	2301      	movs	r3, #1
20006086:	e042      	b.n	2000610e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
20006088:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000608c:	2b00      	cmp	r3, #0
2000608e:	da0f      	bge.n	200060b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20006090:	78fb      	ldrb	r3, [r7, #3]
20006092:	f003 020f 	and.w	r2, r3, #15
20006096:	4613      	mov	r3, r2
20006098:	00db      	lsls	r3, r3, #3
2000609a:	4413      	add	r3, r2
2000609c:	009b      	lsls	r3, r3, #2
2000609e:	3310      	adds	r3, #16
200060a0:	687a      	ldr	r2, [r7, #4]
200060a2:	4413      	add	r3, r2
200060a4:	3304      	adds	r3, #4
200060a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
200060a8:	68fb      	ldr	r3, [r7, #12]
200060aa:	2201      	movs	r2, #1
200060ac:	705a      	strb	r2, [r3, #1]
200060ae:	e00f      	b.n	200060d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
200060b0:	78fb      	ldrb	r3, [r7, #3]
200060b2:	f003 020f 	and.w	r2, r3, #15
200060b6:	4613      	mov	r3, r2
200060b8:	00db      	lsls	r3, r3, #3
200060ba:	4413      	add	r3, r2
200060bc:	009b      	lsls	r3, r3, #2
200060be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200060c2:	687a      	ldr	r2, [r7, #4]
200060c4:	4413      	add	r3, r2
200060c6:	3304      	adds	r3, #4
200060c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
200060ca:	68fb      	ldr	r3, [r7, #12]
200060cc:	2200      	movs	r2, #0
200060ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
200060d0:	68fb      	ldr	r3, [r7, #12]
200060d2:	2200      	movs	r2, #0
200060d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
200060d6:	78fb      	ldrb	r3, [r7, #3]
200060d8:	f003 030f 	and.w	r3, r3, #15
200060dc:	b2da      	uxtb	r2, r3
200060de:	68fb      	ldr	r3, [r7, #12]
200060e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
200060e2:	687b      	ldr	r3, [r7, #4]
200060e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200060e8:	2b01      	cmp	r3, #1
200060ea:	d101      	bne.n	200060f0 <HAL_PCD_EP_ClrStall+0x86>
200060ec:	2302      	movs	r3, #2
200060ee:	e00e      	b.n	2000610e <HAL_PCD_EP_ClrStall+0xa4>
200060f0:	687b      	ldr	r3, [r7, #4]
200060f2:	2201      	movs	r2, #1
200060f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
200060f8:	687b      	ldr	r3, [r7, #4]
200060fa:	681b      	ldr	r3, [r3, #0]
200060fc:	68f9      	ldr	r1, [r7, #12]
200060fe:	4618      	mov	r0, r3
20006100:	f003 f9ce 	bl	200094a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
20006104:	687b      	ldr	r3, [r7, #4]
20006106:	2200      	movs	r2, #0
20006108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
2000610c:	2300      	movs	r3, #0
}
2000610e:	4618      	mov	r0, r3
20006110:	3710      	adds	r7, #16
20006112:	46bd      	mov	sp, r7
20006114:	bd80      	pop	{r7, pc}

20006116 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20006116:	b580      	push	{r7, lr}
20006118:	b084      	sub	sp, #16
2000611a:	af00      	add	r7, sp, #0
2000611c:	6078      	str	r0, [r7, #4]
2000611e:	460b      	mov	r3, r1
20006120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
20006122:	f997 3003 	ldrsb.w	r3, [r7, #3]
20006126:	2b00      	cmp	r3, #0
20006128:	da0c      	bge.n	20006144 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
2000612a:	78fb      	ldrb	r3, [r7, #3]
2000612c:	f003 020f 	and.w	r2, r3, #15
20006130:	4613      	mov	r3, r2
20006132:	00db      	lsls	r3, r3, #3
20006134:	4413      	add	r3, r2
20006136:	009b      	lsls	r3, r3, #2
20006138:	3310      	adds	r3, #16
2000613a:	687a      	ldr	r2, [r7, #4]
2000613c:	4413      	add	r3, r2
2000613e:	3304      	adds	r3, #4
20006140:	60fb      	str	r3, [r7, #12]
20006142:	e00c      	b.n	2000615e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20006144:	78fb      	ldrb	r3, [r7, #3]
20006146:	f003 020f 	and.w	r2, r3, #15
2000614a:	4613      	mov	r3, r2
2000614c:	00db      	lsls	r3, r3, #3
2000614e:	4413      	add	r3, r2
20006150:	009b      	lsls	r3, r3, #2
20006152:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20006156:	687a      	ldr	r2, [r7, #4]
20006158:	4413      	add	r3, r2
2000615a:	3304      	adds	r3, #4
2000615c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
2000615e:	687b      	ldr	r3, [r7, #4]
20006160:	681b      	ldr	r3, [r3, #0]
20006162:	68f9      	ldr	r1, [r7, #12]
20006164:	4618      	mov	r0, r3
20006166:	f002 ffed 	bl	20009144 <USB_EPStopXfer>
2000616a:	4603      	mov	r3, r0
2000616c:	72fb      	strb	r3, [r7, #11]

  return ret;
2000616e:	7afb      	ldrb	r3, [r7, #11]
}
20006170:	4618      	mov	r0, r3
20006172:	3710      	adds	r7, #16
20006174:	46bd      	mov	sp, r7
20006176:	bd80      	pop	{r7, pc}

20006178 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20006178:	b580      	push	{r7, lr}
2000617a:	b08a      	sub	sp, #40	@ 0x28
2000617c:	af02      	add	r7, sp, #8
2000617e:	6078      	str	r0, [r7, #4]
20006180:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20006182:	687b      	ldr	r3, [r7, #4]
20006184:	681b      	ldr	r3, [r3, #0]
20006186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006188:	697b      	ldr	r3, [r7, #20]
2000618a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
2000618c:	683a      	ldr	r2, [r7, #0]
2000618e:	4613      	mov	r3, r2
20006190:	00db      	lsls	r3, r3, #3
20006192:	4413      	add	r3, r2
20006194:	009b      	lsls	r3, r3, #2
20006196:	3310      	adds	r3, #16
20006198:	687a      	ldr	r2, [r7, #4]
2000619a:	4413      	add	r3, r2
2000619c:	3304      	adds	r3, #4
2000619e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
200061a0:	68fb      	ldr	r3, [r7, #12]
200061a2:	695a      	ldr	r2, [r3, #20]
200061a4:	68fb      	ldr	r3, [r7, #12]
200061a6:	691b      	ldr	r3, [r3, #16]
200061a8:	429a      	cmp	r2, r3
200061aa:	d901      	bls.n	200061b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
200061ac:	2301      	movs	r3, #1
200061ae:	e06b      	b.n	20006288 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
200061b0:	68fb      	ldr	r3, [r7, #12]
200061b2:	691a      	ldr	r2, [r3, #16]
200061b4:	68fb      	ldr	r3, [r7, #12]
200061b6:	695b      	ldr	r3, [r3, #20]
200061b8:	1ad3      	subs	r3, r2, r3
200061ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
200061bc:	68fb      	ldr	r3, [r7, #12]
200061be:	689b      	ldr	r3, [r3, #8]
200061c0:	69fa      	ldr	r2, [r7, #28]
200061c2:	429a      	cmp	r2, r3
200061c4:	d902      	bls.n	200061cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
200061c6:	68fb      	ldr	r3, [r7, #12]
200061c8:	689b      	ldr	r3, [r3, #8]
200061ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
200061cc:	69fb      	ldr	r3, [r7, #28]
200061ce:	3303      	adds	r3, #3
200061d0:	089b      	lsrs	r3, r3, #2
200061d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
200061d4:	e02a      	b.n	2000622c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
200061d6:	68fb      	ldr	r3, [r7, #12]
200061d8:	691a      	ldr	r2, [r3, #16]
200061da:	68fb      	ldr	r3, [r7, #12]
200061dc:	695b      	ldr	r3, [r3, #20]
200061de:	1ad3      	subs	r3, r2, r3
200061e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
200061e2:	68fb      	ldr	r3, [r7, #12]
200061e4:	689b      	ldr	r3, [r3, #8]
200061e6:	69fa      	ldr	r2, [r7, #28]
200061e8:	429a      	cmp	r2, r3
200061ea:	d902      	bls.n	200061f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
200061ec:	68fb      	ldr	r3, [r7, #12]
200061ee:	689b      	ldr	r3, [r3, #8]
200061f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
200061f2:	69fb      	ldr	r3, [r7, #28]
200061f4:	3303      	adds	r3, #3
200061f6:	089b      	lsrs	r3, r3, #2
200061f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
200061fa:	68fb      	ldr	r3, [r7, #12]
200061fc:	68d9      	ldr	r1, [r3, #12]
200061fe:	683b      	ldr	r3, [r7, #0]
20006200:	b2da      	uxtb	r2, r3
20006202:	69fb      	ldr	r3, [r7, #28]
20006204:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
20006206:	687b      	ldr	r3, [r7, #4]
20006208:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
2000620a:	9300      	str	r3, [sp, #0]
2000620c:	4603      	mov	r3, r0
2000620e:	6978      	ldr	r0, [r7, #20]
20006210:	f003 f842 	bl	20009298 <USB_WritePacket>

    ep->xfer_buff  += len;
20006214:	68fb      	ldr	r3, [r7, #12]
20006216:	68da      	ldr	r2, [r3, #12]
20006218:	69fb      	ldr	r3, [r7, #28]
2000621a:	441a      	add	r2, r3
2000621c:	68fb      	ldr	r3, [r7, #12]
2000621e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
20006220:	68fb      	ldr	r3, [r7, #12]
20006222:	695a      	ldr	r2, [r3, #20]
20006224:	69fb      	ldr	r3, [r7, #28]
20006226:	441a      	add	r2, r3
20006228:	68fb      	ldr	r3, [r7, #12]
2000622a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
2000622c:	683b      	ldr	r3, [r7, #0]
2000622e:	015a      	lsls	r2, r3, #5
20006230:	693b      	ldr	r3, [r7, #16]
20006232:	4413      	add	r3, r2
20006234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006238:	699b      	ldr	r3, [r3, #24]
2000623a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
2000623c:	69ba      	ldr	r2, [r7, #24]
2000623e:	429a      	cmp	r2, r3
20006240:	d809      	bhi.n	20006256 <PCD_WriteEmptyTxFifo+0xde>
20006242:	68fb      	ldr	r3, [r7, #12]
20006244:	695a      	ldr	r2, [r3, #20]
20006246:	68fb      	ldr	r3, [r7, #12]
20006248:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
2000624a:	429a      	cmp	r2, r3
2000624c:	d203      	bcs.n	20006256 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
2000624e:	68fb      	ldr	r3, [r7, #12]
20006250:	691b      	ldr	r3, [r3, #16]
20006252:	2b00      	cmp	r3, #0
20006254:	d1bf      	bne.n	200061d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
20006256:	68fb      	ldr	r3, [r7, #12]
20006258:	691a      	ldr	r2, [r3, #16]
2000625a:	68fb      	ldr	r3, [r7, #12]
2000625c:	695b      	ldr	r3, [r3, #20]
2000625e:	429a      	cmp	r2, r3
20006260:	d811      	bhi.n	20006286 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
20006262:	683b      	ldr	r3, [r7, #0]
20006264:	f003 030f 	and.w	r3, r3, #15
20006268:	2201      	movs	r2, #1
2000626a:	fa02 f303 	lsl.w	r3, r2, r3
2000626e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
20006270:	693b      	ldr	r3, [r7, #16]
20006272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20006278:	68bb      	ldr	r3, [r7, #8]
2000627a:	43db      	mvns	r3, r3
2000627c:	6939      	ldr	r1, [r7, #16]
2000627e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20006282:	4013      	ands	r3, r2
20006284:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
20006286:	2300      	movs	r3, #0
}
20006288:	4618      	mov	r0, r3
2000628a:	3720      	adds	r7, #32
2000628c:	46bd      	mov	sp, r7
2000628e:	bd80      	pop	{r7, pc}

20006290 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20006290:	b580      	push	{r7, lr}
20006292:	b088      	sub	sp, #32
20006294:	af00      	add	r7, sp, #0
20006296:	6078      	str	r0, [r7, #4]
20006298:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
2000629a:	687b      	ldr	r3, [r7, #4]
2000629c:	681b      	ldr	r3, [r3, #0]
2000629e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
200062a0:	69fb      	ldr	r3, [r7, #28]
200062a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
200062a4:	69fb      	ldr	r3, [r7, #28]
200062a6:	333c      	adds	r3, #60	@ 0x3c
200062a8:	3304      	adds	r3, #4
200062aa:	681b      	ldr	r3, [r3, #0]
200062ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
200062ae:	683b      	ldr	r3, [r7, #0]
200062b0:	015a      	lsls	r2, r3, #5
200062b2:	69bb      	ldr	r3, [r7, #24]
200062b4:	4413      	add	r3, r2
200062b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200062ba:	689b      	ldr	r3, [r3, #8]
200062bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
200062be:	687b      	ldr	r3, [r7, #4]
200062c0:	799b      	ldrb	r3, [r3, #6]
200062c2:	2b01      	cmp	r3, #1
200062c4:	d17b      	bne.n	200063be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
200062c6:	693b      	ldr	r3, [r7, #16]
200062c8:	f003 0308 	and.w	r3, r3, #8
200062cc:	2b00      	cmp	r3, #0
200062ce:	d015      	beq.n	200062fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200062d0:	697b      	ldr	r3, [r7, #20]
200062d2:	4a61      	ldr	r2, [pc, #388]	@ (20006458 <PCD_EP_OutXfrComplete_int+0x1c8>)
200062d4:	4293      	cmp	r3, r2
200062d6:	f240 80b9 	bls.w	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
200062da:	693b      	ldr	r3, [r7, #16]
200062dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200062e0:	2b00      	cmp	r3, #0
200062e2:	f000 80b3 	beq.w	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
200062e6:	683b      	ldr	r3, [r7, #0]
200062e8:	015a      	lsls	r2, r3, #5
200062ea:	69bb      	ldr	r3, [r7, #24]
200062ec:	4413      	add	r3, r2
200062ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200062f2:	461a      	mov	r2, r3
200062f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200062f8:	6093      	str	r3, [r2, #8]
200062fa:	e0a7      	b.n	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
200062fc:	693b      	ldr	r3, [r7, #16]
200062fe:	f003 0320 	and.w	r3, r3, #32
20006302:	2b00      	cmp	r3, #0
20006304:	d009      	beq.n	2000631a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20006306:	683b      	ldr	r3, [r7, #0]
20006308:	015a      	lsls	r2, r3, #5
2000630a:	69bb      	ldr	r3, [r7, #24]
2000630c:	4413      	add	r3, r2
2000630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006312:	461a      	mov	r2, r3
20006314:	2320      	movs	r3, #32
20006316:	6093      	str	r3, [r2, #8]
20006318:	e098      	b.n	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
2000631a:	693b      	ldr	r3, [r7, #16]
2000631c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
20006320:	2b00      	cmp	r3, #0
20006322:	f040 8093 	bne.w	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20006326:	697b      	ldr	r3, [r7, #20]
20006328:	4a4b      	ldr	r2, [pc, #300]	@ (20006458 <PCD_EP_OutXfrComplete_int+0x1c8>)
2000632a:	4293      	cmp	r3, r2
2000632c:	d90f      	bls.n	2000634e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
2000632e:	693b      	ldr	r3, [r7, #16]
20006330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20006334:	2b00      	cmp	r3, #0
20006336:	d00a      	beq.n	2000634e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20006338:	683b      	ldr	r3, [r7, #0]
2000633a:	015a      	lsls	r2, r3, #5
2000633c:	69bb      	ldr	r3, [r7, #24]
2000633e:	4413      	add	r3, r2
20006340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006344:	461a      	mov	r2, r3
20006346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
2000634a:	6093      	str	r3, [r2, #8]
2000634c:	e07e      	b.n	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
2000634e:	683a      	ldr	r2, [r7, #0]
20006350:	4613      	mov	r3, r2
20006352:	00db      	lsls	r3, r3, #3
20006354:	4413      	add	r3, r2
20006356:	009b      	lsls	r3, r3, #2
20006358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
2000635c:	687a      	ldr	r2, [r7, #4]
2000635e:	4413      	add	r3, r2
20006360:	3304      	adds	r3, #4
20006362:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
20006364:	68fb      	ldr	r3, [r7, #12]
20006366:	6a1a      	ldr	r2, [r3, #32]
20006368:	683b      	ldr	r3, [r7, #0]
2000636a:	0159      	lsls	r1, r3, #5
2000636c:	69bb      	ldr	r3, [r7, #24]
2000636e:	440b      	add	r3, r1
20006370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006374:	691b      	ldr	r3, [r3, #16]
20006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000637a:	1ad2      	subs	r2, r2, r3
2000637c:	68fb      	ldr	r3, [r7, #12]
2000637e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
20006380:	683b      	ldr	r3, [r7, #0]
20006382:	2b00      	cmp	r3, #0
20006384:	d114      	bne.n	200063b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
20006386:	68fb      	ldr	r3, [r7, #12]
20006388:	691b      	ldr	r3, [r3, #16]
2000638a:	2b00      	cmp	r3, #0
2000638c:	d109      	bne.n	200063a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
2000638e:	687b      	ldr	r3, [r7, #4]
20006390:	6818      	ldr	r0, [r3, #0]
20006392:	687b      	ldr	r3, [r7, #4]
20006394:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20006398:	461a      	mov	r2, r3
2000639a:	2101      	movs	r1, #1
2000639c:	f003 fa14 	bl	200097c8 <USB_EP0_OutStart>
200063a0:	e006      	b.n	200063b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
200063a2:	68fb      	ldr	r3, [r7, #12]
200063a4:	68da      	ldr	r2, [r3, #12]
200063a6:	68fb      	ldr	r3, [r7, #12]
200063a8:	695b      	ldr	r3, [r3, #20]
200063aa:	441a      	add	r2, r3
200063ac:	68fb      	ldr	r3, [r7, #12]
200063ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
200063b0:	683b      	ldr	r3, [r7, #0]
200063b2:	b2db      	uxtb	r3, r3
200063b4:	4619      	mov	r1, r3
200063b6:	6878      	ldr	r0, [r7, #4]
200063b8:	f005 fbe0 	bl	2000bb7c <HAL_PCD_DataOutStageCallback>
200063bc:	e046      	b.n	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
200063be:	697b      	ldr	r3, [r7, #20]
200063c0:	4a26      	ldr	r2, [pc, #152]	@ (2000645c <PCD_EP_OutXfrComplete_int+0x1cc>)
200063c2:	4293      	cmp	r3, r2
200063c4:	d124      	bne.n	20006410 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
200063c6:	693b      	ldr	r3, [r7, #16]
200063c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
200063cc:	2b00      	cmp	r3, #0
200063ce:	d00a      	beq.n	200063e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
200063d0:	683b      	ldr	r3, [r7, #0]
200063d2:	015a      	lsls	r2, r3, #5
200063d4:	69bb      	ldr	r3, [r7, #24]
200063d6:	4413      	add	r3, r2
200063d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200063dc:	461a      	mov	r2, r3
200063de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200063e2:	6093      	str	r3, [r2, #8]
200063e4:	e032      	b.n	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
200063e6:	693b      	ldr	r3, [r7, #16]
200063e8:	f003 0320 	and.w	r3, r3, #32
200063ec:	2b00      	cmp	r3, #0
200063ee:	d008      	beq.n	20006402 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
200063f0:	683b      	ldr	r3, [r7, #0]
200063f2:	015a      	lsls	r2, r3, #5
200063f4:	69bb      	ldr	r3, [r7, #24]
200063f6:	4413      	add	r3, r2
200063f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200063fc:	461a      	mov	r2, r3
200063fe:	2320      	movs	r3, #32
20006400:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20006402:	683b      	ldr	r3, [r7, #0]
20006404:	b2db      	uxtb	r3, r3
20006406:	4619      	mov	r1, r3
20006408:	6878      	ldr	r0, [r7, #4]
2000640a:	f005 fbb7 	bl	2000bb7c <HAL_PCD_DataOutStageCallback>
2000640e:	e01d      	b.n	2000644c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
20006410:	683b      	ldr	r3, [r7, #0]
20006412:	2b00      	cmp	r3, #0
20006414:	d114      	bne.n	20006440 <PCD_EP_OutXfrComplete_int+0x1b0>
20006416:	6879      	ldr	r1, [r7, #4]
20006418:	683a      	ldr	r2, [r7, #0]
2000641a:	4613      	mov	r3, r2
2000641c:	00db      	lsls	r3, r3, #3
2000641e:	4413      	add	r3, r2
20006420:	009b      	lsls	r3, r3, #2
20006422:	440b      	add	r3, r1
20006424:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20006428:	681b      	ldr	r3, [r3, #0]
2000642a:	2b00      	cmp	r3, #0
2000642c:	d108      	bne.n	20006440 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
2000642e:	687b      	ldr	r3, [r7, #4]
20006430:	6818      	ldr	r0, [r3, #0]
20006432:	687b      	ldr	r3, [r7, #4]
20006434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20006438:	461a      	mov	r2, r3
2000643a:	2100      	movs	r1, #0
2000643c:	f003 f9c4 	bl	200097c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20006440:	683b      	ldr	r3, [r7, #0]
20006442:	b2db      	uxtb	r3, r3
20006444:	4619      	mov	r1, r3
20006446:	6878      	ldr	r0, [r7, #4]
20006448:	f005 fb98 	bl	2000bb7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
2000644c:	2300      	movs	r3, #0
}
2000644e:	4618      	mov	r0, r3
20006450:	3720      	adds	r7, #32
20006452:	46bd      	mov	sp, r7
20006454:	bd80      	pop	{r7, pc}
20006456:	bf00      	nop
20006458:	4f54300a 	.word	0x4f54300a
2000645c:	4f54310a 	.word	0x4f54310a

20006460 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20006460:	b580      	push	{r7, lr}
20006462:	b086      	sub	sp, #24
20006464:	af00      	add	r7, sp, #0
20006466:	6078      	str	r0, [r7, #4]
20006468:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
2000646a:	687b      	ldr	r3, [r7, #4]
2000646c:	681b      	ldr	r3, [r3, #0]
2000646e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006470:	697b      	ldr	r3, [r7, #20]
20006472:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20006474:	697b      	ldr	r3, [r7, #20]
20006476:	333c      	adds	r3, #60	@ 0x3c
20006478:	3304      	adds	r3, #4
2000647a:	681b      	ldr	r3, [r3, #0]
2000647c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
2000647e:	683b      	ldr	r3, [r7, #0]
20006480:	015a      	lsls	r2, r3, #5
20006482:	693b      	ldr	r3, [r7, #16]
20006484:	4413      	add	r3, r2
20006486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000648a:	689b      	ldr	r3, [r3, #8]
2000648c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
2000648e:	68fb      	ldr	r3, [r7, #12]
20006490:	4a15      	ldr	r2, [pc, #84]	@ (200064e8 <PCD_EP_OutSetupPacket_int+0x88>)
20006492:	4293      	cmp	r3, r2
20006494:	d90e      	bls.n	200064b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
20006496:	68bb      	ldr	r3, [r7, #8]
20006498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
2000649c:	2b00      	cmp	r3, #0
2000649e:	d009      	beq.n	200064b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
200064a0:	683b      	ldr	r3, [r7, #0]
200064a2:	015a      	lsls	r2, r3, #5
200064a4:	693b      	ldr	r3, [r7, #16]
200064a6:	4413      	add	r3, r2
200064a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200064ac:	461a      	mov	r2, r3
200064ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200064b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
200064b4:	6878      	ldr	r0, [r7, #4]
200064b6:	f005 fb4f 	bl	2000bb58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
200064ba:	68fb      	ldr	r3, [r7, #12]
200064bc:	4a0a      	ldr	r2, [pc, #40]	@ (200064e8 <PCD_EP_OutSetupPacket_int+0x88>)
200064be:	4293      	cmp	r3, r2
200064c0:	d90c      	bls.n	200064dc <PCD_EP_OutSetupPacket_int+0x7c>
200064c2:	687b      	ldr	r3, [r7, #4]
200064c4:	799b      	ldrb	r3, [r3, #6]
200064c6:	2b01      	cmp	r3, #1
200064c8:	d108      	bne.n	200064dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
200064ca:	687b      	ldr	r3, [r7, #4]
200064cc:	6818      	ldr	r0, [r3, #0]
200064ce:	687b      	ldr	r3, [r7, #4]
200064d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
200064d4:	461a      	mov	r2, r3
200064d6:	2101      	movs	r1, #1
200064d8:	f003 f976 	bl	200097c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
200064dc:	2300      	movs	r3, #0
}
200064de:	4618      	mov	r0, r3
200064e0:	3718      	adds	r7, #24
200064e2:	46bd      	mov	sp, r7
200064e4:	bd80      	pop	{r7, pc}
200064e6:	bf00      	nop
200064e8:	4f54300a 	.word	0x4f54300a

200064ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
200064ec:	b480      	push	{r7}
200064ee:	b085      	sub	sp, #20
200064f0:	af00      	add	r7, sp, #0
200064f2:	6078      	str	r0, [r7, #4]
200064f4:	460b      	mov	r3, r1
200064f6:	70fb      	strb	r3, [r7, #3]
200064f8:	4613      	mov	r3, r2
200064fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
200064fc:	687b      	ldr	r3, [r7, #4]
200064fe:	681b      	ldr	r3, [r3, #0]
20006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20006502:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
20006504:	78fb      	ldrb	r3, [r7, #3]
20006506:	2b00      	cmp	r3, #0
20006508:	d107      	bne.n	2000651a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
2000650a:	883b      	ldrh	r3, [r7, #0]
2000650c:	0419      	lsls	r1, r3, #16
2000650e:	687b      	ldr	r3, [r7, #4]
20006510:	681b      	ldr	r3, [r3, #0]
20006512:	68ba      	ldr	r2, [r7, #8]
20006514:	430a      	orrs	r2, r1
20006516:	629a      	str	r2, [r3, #40]	@ 0x28
20006518:	e028      	b.n	2000656c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
2000651a:	687b      	ldr	r3, [r7, #4]
2000651c:	681b      	ldr	r3, [r3, #0]
2000651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006520:	0c1b      	lsrs	r3, r3, #16
20006522:	68ba      	ldr	r2, [r7, #8]
20006524:	4413      	add	r3, r2
20006526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20006528:	2300      	movs	r3, #0
2000652a:	73fb      	strb	r3, [r7, #15]
2000652c:	e00d      	b.n	2000654a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
2000652e:	687b      	ldr	r3, [r7, #4]
20006530:	681a      	ldr	r2, [r3, #0]
20006532:	7bfb      	ldrb	r3, [r7, #15]
20006534:	3340      	adds	r3, #64	@ 0x40
20006536:	009b      	lsls	r3, r3, #2
20006538:	4413      	add	r3, r2
2000653a:	685b      	ldr	r3, [r3, #4]
2000653c:	0c1b      	lsrs	r3, r3, #16
2000653e:	68ba      	ldr	r2, [r7, #8]
20006540:	4413      	add	r3, r2
20006542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20006544:	7bfb      	ldrb	r3, [r7, #15]
20006546:	3301      	adds	r3, #1
20006548:	73fb      	strb	r3, [r7, #15]
2000654a:	7bfa      	ldrb	r2, [r7, #15]
2000654c:	78fb      	ldrb	r3, [r7, #3]
2000654e:	3b01      	subs	r3, #1
20006550:	429a      	cmp	r2, r3
20006552:	d3ec      	bcc.n	2000652e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
20006554:	883b      	ldrh	r3, [r7, #0]
20006556:	0418      	lsls	r0, r3, #16
20006558:	687b      	ldr	r3, [r7, #4]
2000655a:	6819      	ldr	r1, [r3, #0]
2000655c:	78fb      	ldrb	r3, [r7, #3]
2000655e:	3b01      	subs	r3, #1
20006560:	68ba      	ldr	r2, [r7, #8]
20006562:	4302      	orrs	r2, r0
20006564:	3340      	adds	r3, #64	@ 0x40
20006566:	009b      	lsls	r3, r3, #2
20006568:	440b      	add	r3, r1
2000656a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
2000656c:	2300      	movs	r3, #0
}
2000656e:	4618      	mov	r0, r3
20006570:	3714      	adds	r7, #20
20006572:	46bd      	mov	sp, r7
20006574:	f85d 7b04 	ldr.w	r7, [sp], #4
20006578:	4770      	bx	lr

2000657a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
2000657a:	b480      	push	{r7}
2000657c:	b083      	sub	sp, #12
2000657e:	af00      	add	r7, sp, #0
20006580:	6078      	str	r0, [r7, #4]
20006582:	460b      	mov	r3, r1
20006584:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
20006586:	687b      	ldr	r3, [r7, #4]
20006588:	681b      	ldr	r3, [r3, #0]
2000658a:	887a      	ldrh	r2, [r7, #2]
2000658c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
2000658e:	2300      	movs	r3, #0
}
20006590:	4618      	mov	r0, r3
20006592:	370c      	adds	r7, #12
20006594:	46bd      	mov	sp, r7
20006596:	f85d 7b04 	ldr.w	r7, [sp], #4
2000659a:	4770      	bx	lr

2000659c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
2000659c:	b480      	push	{r7}
2000659e:	b085      	sub	sp, #20
200065a0:	af00      	add	r7, sp, #0
200065a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
200065a4:	687b      	ldr	r3, [r7, #4]
200065a6:	681b      	ldr	r3, [r3, #0]
200065a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
200065aa:	687b      	ldr	r3, [r7, #4]
200065ac:	2201      	movs	r2, #1
200065ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
200065b2:	687b      	ldr	r3, [r7, #4]
200065b4:	2200      	movs	r2, #0
200065b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
200065ba:	68fb      	ldr	r3, [r7, #12]
200065bc:	699b      	ldr	r3, [r3, #24]
200065be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
200065c2:	68fb      	ldr	r3, [r7, #12]
200065c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
200065c6:	68fb      	ldr	r3, [r7, #12]
200065c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
200065ca:	4b05      	ldr	r3, [pc, #20]	@ (200065e0 <HAL_PCDEx_ActivateLPM+0x44>)
200065cc:	4313      	orrs	r3, r2
200065ce:	68fa      	ldr	r2, [r7, #12]
200065d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
200065d2:	2300      	movs	r3, #0
}
200065d4:	4618      	mov	r0, r3
200065d6:	3714      	adds	r7, #20
200065d8:	46bd      	mov	sp, r7
200065da:	f85d 7b04 	ldr.w	r7, [sp], #4
200065de:	4770      	bx	lr
200065e0:	10000003 	.word	0x10000003

200065e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
200065e4:	b480      	push	{r7}
200065e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
200065e8:	4b05      	ldr	r3, [pc, #20]	@ (20006600 <HAL_PWR_EnableBkUpAccess+0x1c>)
200065ea:	681b      	ldr	r3, [r3, #0]
200065ec:	4a04      	ldr	r2, [pc, #16]	@ (20006600 <HAL_PWR_EnableBkUpAccess+0x1c>)
200065ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200065f2:	6013      	str	r3, [r2, #0]
}
200065f4:	bf00      	nop
200065f6:	46bd      	mov	sp, r7
200065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200065fc:	4770      	bx	lr
200065fe:	bf00      	nop
20006600:	40007000 	.word	0x40007000

20006604 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20006604:	b580      	push	{r7, lr}
20006606:	b082      	sub	sp, #8
20006608:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
2000660a:	2300      	movs	r3, #0
2000660c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
2000660e:	4b23      	ldr	r3, [pc, #140]	@ (2000669c <HAL_PWREx_EnableOverDrive+0x98>)
20006610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006612:	4a22      	ldr	r2, [pc, #136]	@ (2000669c <HAL_PWREx_EnableOverDrive+0x98>)
20006614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006618:	6413      	str	r3, [r2, #64]	@ 0x40
2000661a:	4b20      	ldr	r3, [pc, #128]	@ (2000669c <HAL_PWREx_EnableOverDrive+0x98>)
2000661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000661e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20006622:	603b      	str	r3, [r7, #0]
20006624:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20006626:	4b1e      	ldr	r3, [pc, #120]	@ (200066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
20006628:	681b      	ldr	r3, [r3, #0]
2000662a:	4a1d      	ldr	r2, [pc, #116]	@ (200066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
2000662c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006630:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20006632:	f7fd fedd 	bl	200043f0 <HAL_GetTick>
20006636:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20006638:	e009      	b.n	2000664e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000663a:	f7fd fed9 	bl	200043f0 <HAL_GetTick>
2000663e:	4602      	mov	r2, r0
20006640:	687b      	ldr	r3, [r7, #4]
20006642:	1ad3      	subs	r3, r2, r3
20006644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20006648:	d901      	bls.n	2000664e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
2000664a:	2303      	movs	r3, #3
2000664c:	e022      	b.n	20006694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000664e:	4b14      	ldr	r3, [pc, #80]	@ (200066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
20006650:	685b      	ldr	r3, [r3, #4]
20006652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20006656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2000665a:	d1ee      	bne.n	2000663a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
2000665c:	4b10      	ldr	r3, [pc, #64]	@ (200066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
2000665e:	681b      	ldr	r3, [r3, #0]
20006660:	4a0f      	ldr	r2, [pc, #60]	@ (200066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
20006662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20006666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20006668:	f7fd fec2 	bl	200043f0 <HAL_GetTick>
2000666c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000666e:	e009      	b.n	20006684 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20006670:	f7fd febe 	bl	200043f0 <HAL_GetTick>
20006674:	4602      	mov	r2, r0
20006676:	687b      	ldr	r3, [r7, #4]
20006678:	1ad3      	subs	r3, r2, r3
2000667a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
2000667e:	d901      	bls.n	20006684 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
20006680:	2303      	movs	r3, #3
20006682:	e007      	b.n	20006694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20006684:	4b06      	ldr	r3, [pc, #24]	@ (200066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
20006686:	685b      	ldr	r3, [r3, #4]
20006688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2000668c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20006690:	d1ee      	bne.n	20006670 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
20006692:	2300      	movs	r3, #0
}
20006694:	4618      	mov	r0, r3
20006696:	3708      	adds	r7, #8
20006698:	46bd      	mov	sp, r7
2000669a:	bd80      	pop	{r7, pc}
2000669c:	40023800 	.word	0x40023800
200066a0:	40007000 	.word	0x40007000

200066a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200066a4:	b580      	push	{r7, lr}
200066a6:	b086      	sub	sp, #24
200066a8:	af00      	add	r7, sp, #0
200066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
200066ac:	2300      	movs	r3, #0
200066ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
200066b0:	687b      	ldr	r3, [r7, #4]
200066b2:	2b00      	cmp	r3, #0
200066b4:	d101      	bne.n	200066ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
200066b6:	2301      	movs	r3, #1
200066b8:	e291      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200066ba:	687b      	ldr	r3, [r7, #4]
200066bc:	681b      	ldr	r3, [r3, #0]
200066be:	f003 0301 	and.w	r3, r3, #1
200066c2:	2b00      	cmp	r3, #0
200066c4:	f000 8087 	beq.w	200067d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
200066c8:	4b96      	ldr	r3, [pc, #600]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200066ca:	689b      	ldr	r3, [r3, #8]
200066cc:	f003 030c 	and.w	r3, r3, #12
200066d0:	2b04      	cmp	r3, #4
200066d2:	d00c      	beq.n	200066ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200066d4:	4b93      	ldr	r3, [pc, #588]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200066d6:	689b      	ldr	r3, [r3, #8]
200066d8:	f003 030c 	and.w	r3, r3, #12
200066dc:	2b08      	cmp	r3, #8
200066de:	d112      	bne.n	20006706 <HAL_RCC_OscConfig+0x62>
200066e0:	4b90      	ldr	r3, [pc, #576]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200066e2:	685b      	ldr	r3, [r3, #4]
200066e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200066e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200066ec:	d10b      	bne.n	20006706 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200066ee:	4b8d      	ldr	r3, [pc, #564]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200066f0:	681b      	ldr	r3, [r3, #0]
200066f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200066f6:	2b00      	cmp	r3, #0
200066f8:	d06c      	beq.n	200067d4 <HAL_RCC_OscConfig+0x130>
200066fa:	687b      	ldr	r3, [r7, #4]
200066fc:	685b      	ldr	r3, [r3, #4]
200066fe:	2b00      	cmp	r3, #0
20006700:	d168      	bne.n	200067d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
20006702:	2301      	movs	r3, #1
20006704:	e26b      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20006706:	687b      	ldr	r3, [r7, #4]
20006708:	685b      	ldr	r3, [r3, #4]
2000670a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2000670e:	d106      	bne.n	2000671e <HAL_RCC_OscConfig+0x7a>
20006710:	4b84      	ldr	r3, [pc, #528]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006712:	681b      	ldr	r3, [r3, #0]
20006714:	4a83      	ldr	r2, [pc, #524]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000671a:	6013      	str	r3, [r2, #0]
2000671c:	e02e      	b.n	2000677c <HAL_RCC_OscConfig+0xd8>
2000671e:	687b      	ldr	r3, [r7, #4]
20006720:	685b      	ldr	r3, [r3, #4]
20006722:	2b00      	cmp	r3, #0
20006724:	d10c      	bne.n	20006740 <HAL_RCC_OscConfig+0x9c>
20006726:	4b7f      	ldr	r3, [pc, #508]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006728:	681b      	ldr	r3, [r3, #0]
2000672a:	4a7e      	ldr	r2, [pc, #504]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000672c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20006730:	6013      	str	r3, [r2, #0]
20006732:	4b7c      	ldr	r3, [pc, #496]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006734:	681b      	ldr	r3, [r3, #0]
20006736:	4a7b      	ldr	r2, [pc, #492]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2000673c:	6013      	str	r3, [r2, #0]
2000673e:	e01d      	b.n	2000677c <HAL_RCC_OscConfig+0xd8>
20006740:	687b      	ldr	r3, [r7, #4]
20006742:	685b      	ldr	r3, [r3, #4]
20006744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20006748:	d10c      	bne.n	20006764 <HAL_RCC_OscConfig+0xc0>
2000674a:	4b76      	ldr	r3, [pc, #472]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000674c:	681b      	ldr	r3, [r3, #0]
2000674e:	4a75      	ldr	r2, [pc, #468]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20006754:	6013      	str	r3, [r2, #0]
20006756:	4b73      	ldr	r3, [pc, #460]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006758:	681b      	ldr	r3, [r3, #0]
2000675a:	4a72      	ldr	r2, [pc, #456]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000675c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006760:	6013      	str	r3, [r2, #0]
20006762:	e00b      	b.n	2000677c <HAL_RCC_OscConfig+0xd8>
20006764:	4b6f      	ldr	r3, [pc, #444]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006766:	681b      	ldr	r3, [r3, #0]
20006768:	4a6e      	ldr	r2, [pc, #440]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000676a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
2000676e:	6013      	str	r3, [r2, #0]
20006770:	4b6c      	ldr	r3, [pc, #432]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006772:	681b      	ldr	r3, [r3, #0]
20006774:	4a6b      	ldr	r2, [pc, #428]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2000677a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2000677c:	687b      	ldr	r3, [r7, #4]
2000677e:	685b      	ldr	r3, [r3, #4]
20006780:	2b00      	cmp	r3, #0
20006782:	d013      	beq.n	200067ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006784:	f7fd fe34 	bl	200043f0 <HAL_GetTick>
20006788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000678a:	e008      	b.n	2000679e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2000678c:	f7fd fe30 	bl	200043f0 <HAL_GetTick>
20006790:	4602      	mov	r2, r0
20006792:	693b      	ldr	r3, [r7, #16]
20006794:	1ad3      	subs	r3, r2, r3
20006796:	2b64      	cmp	r3, #100	@ 0x64
20006798:	d901      	bls.n	2000679e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000679a:	2303      	movs	r3, #3
2000679c:	e21f      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000679e:	4b61      	ldr	r3, [pc, #388]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200067a0:	681b      	ldr	r3, [r3, #0]
200067a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200067a6:	2b00      	cmp	r3, #0
200067a8:	d0f0      	beq.n	2000678c <HAL_RCC_OscConfig+0xe8>
200067aa:	e014      	b.n	200067d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200067ac:	f7fd fe20 	bl	200043f0 <HAL_GetTick>
200067b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200067b2:	e008      	b.n	200067c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
200067b4:	f7fd fe1c 	bl	200043f0 <HAL_GetTick>
200067b8:	4602      	mov	r2, r0
200067ba:	693b      	ldr	r3, [r7, #16]
200067bc:	1ad3      	subs	r3, r2, r3
200067be:	2b64      	cmp	r3, #100	@ 0x64
200067c0:	d901      	bls.n	200067c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
200067c2:	2303      	movs	r3, #3
200067c4:	e20b      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200067c6:	4b57      	ldr	r3, [pc, #348]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200067c8:	681b      	ldr	r3, [r3, #0]
200067ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200067ce:	2b00      	cmp	r3, #0
200067d0:	d1f0      	bne.n	200067b4 <HAL_RCC_OscConfig+0x110>
200067d2:	e000      	b.n	200067d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200067d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
200067d6:	687b      	ldr	r3, [r7, #4]
200067d8:	681b      	ldr	r3, [r3, #0]
200067da:	f003 0302 	and.w	r3, r3, #2
200067de:	2b00      	cmp	r3, #0
200067e0:	d069      	beq.n	200068b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
200067e2:	4b50      	ldr	r3, [pc, #320]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200067e4:	689b      	ldr	r3, [r3, #8]
200067e6:	f003 030c 	and.w	r3, r3, #12
200067ea:	2b00      	cmp	r3, #0
200067ec:	d00b      	beq.n	20006806 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200067ee:	4b4d      	ldr	r3, [pc, #308]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200067f0:	689b      	ldr	r3, [r3, #8]
200067f2:	f003 030c 	and.w	r3, r3, #12
200067f6:	2b08      	cmp	r3, #8
200067f8:	d11c      	bne.n	20006834 <HAL_RCC_OscConfig+0x190>
200067fa:	4b4a      	ldr	r3, [pc, #296]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200067fc:	685b      	ldr	r3, [r3, #4]
200067fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20006802:	2b00      	cmp	r3, #0
20006804:	d116      	bne.n	20006834 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20006806:	4b47      	ldr	r3, [pc, #284]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006808:	681b      	ldr	r3, [r3, #0]
2000680a:	f003 0302 	and.w	r3, r3, #2
2000680e:	2b00      	cmp	r3, #0
20006810:	d005      	beq.n	2000681e <HAL_RCC_OscConfig+0x17a>
20006812:	687b      	ldr	r3, [r7, #4]
20006814:	68db      	ldr	r3, [r3, #12]
20006816:	2b01      	cmp	r3, #1
20006818:	d001      	beq.n	2000681e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
2000681a:	2301      	movs	r3, #1
2000681c:	e1df      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000681e:	4b41      	ldr	r3, [pc, #260]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006820:	681b      	ldr	r3, [r3, #0]
20006822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20006826:	687b      	ldr	r3, [r7, #4]
20006828:	691b      	ldr	r3, [r3, #16]
2000682a:	00db      	lsls	r3, r3, #3
2000682c:	493d      	ldr	r1, [pc, #244]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000682e:	4313      	orrs	r3, r2
20006830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20006832:	e040      	b.n	200068b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
20006834:	687b      	ldr	r3, [r7, #4]
20006836:	68db      	ldr	r3, [r3, #12]
20006838:	2b00      	cmp	r3, #0
2000683a:	d023      	beq.n	20006884 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000683c:	4b39      	ldr	r3, [pc, #228]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000683e:	681b      	ldr	r3, [r3, #0]
20006840:	4a38      	ldr	r2, [pc, #224]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006842:	f043 0301 	orr.w	r3, r3, #1
20006846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006848:	f7fd fdd2 	bl	200043f0 <HAL_GetTick>
2000684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000684e:	e008      	b.n	20006862 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20006850:	f7fd fdce 	bl	200043f0 <HAL_GetTick>
20006854:	4602      	mov	r2, r0
20006856:	693b      	ldr	r3, [r7, #16]
20006858:	1ad3      	subs	r3, r2, r3
2000685a:	2b02      	cmp	r3, #2
2000685c:	d901      	bls.n	20006862 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
2000685e:	2303      	movs	r3, #3
20006860:	e1bd      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20006862:	4b30      	ldr	r3, [pc, #192]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006864:	681b      	ldr	r3, [r3, #0]
20006866:	f003 0302 	and.w	r3, r3, #2
2000686a:	2b00      	cmp	r3, #0
2000686c:	d0f0      	beq.n	20006850 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000686e:	4b2d      	ldr	r3, [pc, #180]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006870:	681b      	ldr	r3, [r3, #0]
20006872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20006876:	687b      	ldr	r3, [r7, #4]
20006878:	691b      	ldr	r3, [r3, #16]
2000687a:	00db      	lsls	r3, r3, #3
2000687c:	4929      	ldr	r1, [pc, #164]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000687e:	4313      	orrs	r3, r2
20006880:	600b      	str	r3, [r1, #0]
20006882:	e018      	b.n	200068b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20006884:	4b27      	ldr	r3, [pc, #156]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006886:	681b      	ldr	r3, [r3, #0]
20006888:	4a26      	ldr	r2, [pc, #152]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
2000688a:	f023 0301 	bic.w	r3, r3, #1
2000688e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006890:	f7fd fdae 	bl	200043f0 <HAL_GetTick>
20006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20006896:	e008      	b.n	200068aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20006898:	f7fd fdaa 	bl	200043f0 <HAL_GetTick>
2000689c:	4602      	mov	r2, r0
2000689e:	693b      	ldr	r3, [r7, #16]
200068a0:	1ad3      	subs	r3, r2, r3
200068a2:	2b02      	cmp	r3, #2
200068a4:	d901      	bls.n	200068aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
200068a6:	2303      	movs	r3, #3
200068a8:	e199      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200068aa:	4b1e      	ldr	r3, [pc, #120]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200068ac:	681b      	ldr	r3, [r3, #0]
200068ae:	f003 0302 	and.w	r3, r3, #2
200068b2:	2b00      	cmp	r3, #0
200068b4:	d1f0      	bne.n	20006898 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200068b6:	687b      	ldr	r3, [r7, #4]
200068b8:	681b      	ldr	r3, [r3, #0]
200068ba:	f003 0308 	and.w	r3, r3, #8
200068be:	2b00      	cmp	r3, #0
200068c0:	d038      	beq.n	20006934 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
200068c2:	687b      	ldr	r3, [r7, #4]
200068c4:	695b      	ldr	r3, [r3, #20]
200068c6:	2b00      	cmp	r3, #0
200068c8:	d019      	beq.n	200068fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
200068ca:	4b16      	ldr	r3, [pc, #88]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200068cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200068ce:	4a15      	ldr	r2, [pc, #84]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200068d0:	f043 0301 	orr.w	r3, r3, #1
200068d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200068d6:	f7fd fd8b 	bl	200043f0 <HAL_GetTick>
200068da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200068dc:	e008      	b.n	200068f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
200068de:	f7fd fd87 	bl	200043f0 <HAL_GetTick>
200068e2:	4602      	mov	r2, r0
200068e4:	693b      	ldr	r3, [r7, #16]
200068e6:	1ad3      	subs	r3, r2, r3
200068e8:	2b02      	cmp	r3, #2
200068ea:	d901      	bls.n	200068f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
200068ec:	2303      	movs	r3, #3
200068ee:	e176      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200068f0:	4b0c      	ldr	r3, [pc, #48]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
200068f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200068f4:	f003 0302 	and.w	r3, r3, #2
200068f8:	2b00      	cmp	r3, #0
200068fa:	d0f0      	beq.n	200068de <HAL_RCC_OscConfig+0x23a>
200068fc:	e01a      	b.n	20006934 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200068fe:	4b09      	ldr	r3, [pc, #36]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20006902:	4a08      	ldr	r2, [pc, #32]	@ (20006924 <HAL_RCC_OscConfig+0x280>)
20006904:	f023 0301 	bic.w	r3, r3, #1
20006908:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000690a:	f7fd fd71 	bl	200043f0 <HAL_GetTick>
2000690e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20006910:	e00a      	b.n	20006928 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20006912:	f7fd fd6d 	bl	200043f0 <HAL_GetTick>
20006916:	4602      	mov	r2, r0
20006918:	693b      	ldr	r3, [r7, #16]
2000691a:	1ad3      	subs	r3, r2, r3
2000691c:	2b02      	cmp	r3, #2
2000691e:	d903      	bls.n	20006928 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
20006920:	2303      	movs	r3, #3
20006922:	e15c      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
20006924:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20006928:	4b91      	ldr	r3, [pc, #580]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
2000692a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2000692c:	f003 0302 	and.w	r3, r3, #2
20006930:	2b00      	cmp	r3, #0
20006932:	d1ee      	bne.n	20006912 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20006934:	687b      	ldr	r3, [r7, #4]
20006936:	681b      	ldr	r3, [r3, #0]
20006938:	f003 0304 	and.w	r3, r3, #4
2000693c:	2b00      	cmp	r3, #0
2000693e:	f000 80a4 	beq.w	20006a8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
20006942:	4b8b      	ldr	r3, [pc, #556]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000694a:	2b00      	cmp	r3, #0
2000694c:	d10d      	bne.n	2000696a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
2000694e:	4b88      	ldr	r3, [pc, #544]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006952:	4a87      	ldr	r2, [pc, #540]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006958:	6413      	str	r3, [r2, #64]	@ 0x40
2000695a:	4b85      	ldr	r3, [pc, #532]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
2000695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000695e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20006962:	60bb      	str	r3, [r7, #8]
20006964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20006966:	2301      	movs	r3, #1
20006968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
2000696a:	4b82      	ldr	r3, [pc, #520]	@ (20006b74 <HAL_RCC_OscConfig+0x4d0>)
2000696c:	681b      	ldr	r3, [r3, #0]
2000696e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20006972:	2b00      	cmp	r3, #0
20006974:	d118      	bne.n	200069a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
20006976:	4b7f      	ldr	r3, [pc, #508]	@ (20006b74 <HAL_RCC_OscConfig+0x4d0>)
20006978:	681b      	ldr	r3, [r3, #0]
2000697a:	4a7e      	ldr	r2, [pc, #504]	@ (20006b74 <HAL_RCC_OscConfig+0x4d0>)
2000697c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20006980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20006982:	f7fd fd35 	bl	200043f0 <HAL_GetTick>
20006986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20006988:	e008      	b.n	2000699c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000698a:	f7fd fd31 	bl	200043f0 <HAL_GetTick>
2000698e:	4602      	mov	r2, r0
20006990:	693b      	ldr	r3, [r7, #16]
20006992:	1ad3      	subs	r3, r2, r3
20006994:	2b64      	cmp	r3, #100	@ 0x64
20006996:	d901      	bls.n	2000699c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
20006998:	2303      	movs	r3, #3
2000699a:	e120      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
2000699c:	4b75      	ldr	r3, [pc, #468]	@ (20006b74 <HAL_RCC_OscConfig+0x4d0>)
2000699e:	681b      	ldr	r3, [r3, #0]
200069a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200069a4:	2b00      	cmp	r3, #0
200069a6:	d0f0      	beq.n	2000698a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200069a8:	687b      	ldr	r3, [r7, #4]
200069aa:	689b      	ldr	r3, [r3, #8]
200069ac:	2b01      	cmp	r3, #1
200069ae:	d106      	bne.n	200069be <HAL_RCC_OscConfig+0x31a>
200069b0:	4b6f      	ldr	r3, [pc, #444]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200069b4:	4a6e      	ldr	r2, [pc, #440]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069b6:	f043 0301 	orr.w	r3, r3, #1
200069ba:	6713      	str	r3, [r2, #112]	@ 0x70
200069bc:	e02d      	b.n	20006a1a <HAL_RCC_OscConfig+0x376>
200069be:	687b      	ldr	r3, [r7, #4]
200069c0:	689b      	ldr	r3, [r3, #8]
200069c2:	2b00      	cmp	r3, #0
200069c4:	d10c      	bne.n	200069e0 <HAL_RCC_OscConfig+0x33c>
200069c6:	4b6a      	ldr	r3, [pc, #424]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200069ca:	4a69      	ldr	r2, [pc, #420]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069cc:	f023 0301 	bic.w	r3, r3, #1
200069d0:	6713      	str	r3, [r2, #112]	@ 0x70
200069d2:	4b67      	ldr	r3, [pc, #412]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200069d6:	4a66      	ldr	r2, [pc, #408]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069d8:	f023 0304 	bic.w	r3, r3, #4
200069dc:	6713      	str	r3, [r2, #112]	@ 0x70
200069de:	e01c      	b.n	20006a1a <HAL_RCC_OscConfig+0x376>
200069e0:	687b      	ldr	r3, [r7, #4]
200069e2:	689b      	ldr	r3, [r3, #8]
200069e4:	2b05      	cmp	r3, #5
200069e6:	d10c      	bne.n	20006a02 <HAL_RCC_OscConfig+0x35e>
200069e8:	4b61      	ldr	r3, [pc, #388]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200069ec:	4a60      	ldr	r2, [pc, #384]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069ee:	f043 0304 	orr.w	r3, r3, #4
200069f2:	6713      	str	r3, [r2, #112]	@ 0x70
200069f4:	4b5e      	ldr	r3, [pc, #376]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200069f8:	4a5d      	ldr	r2, [pc, #372]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
200069fa:	f043 0301 	orr.w	r3, r3, #1
200069fe:	6713      	str	r3, [r2, #112]	@ 0x70
20006a00:	e00b      	b.n	20006a1a <HAL_RCC_OscConfig+0x376>
20006a02:	4b5b      	ldr	r3, [pc, #364]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006a06:	4a5a      	ldr	r2, [pc, #360]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a08:	f023 0301 	bic.w	r3, r3, #1
20006a0c:	6713      	str	r3, [r2, #112]	@ 0x70
20006a0e:	4b58      	ldr	r3, [pc, #352]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006a12:	4a57      	ldr	r2, [pc, #348]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a14:	f023 0304 	bic.w	r3, r3, #4
20006a18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20006a1a:	687b      	ldr	r3, [r7, #4]
20006a1c:	689b      	ldr	r3, [r3, #8]
20006a1e:	2b00      	cmp	r3, #0
20006a20:	d015      	beq.n	20006a4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006a22:	f7fd fce5 	bl	200043f0 <HAL_GetTick>
20006a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006a28:	e00a      	b.n	20006a40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20006a2a:	f7fd fce1 	bl	200043f0 <HAL_GetTick>
20006a2e:	4602      	mov	r2, r0
20006a30:	693b      	ldr	r3, [r7, #16]
20006a32:	1ad3      	subs	r3, r2, r3
20006a34:	f241 3288 	movw	r2, #5000	@ 0x1388
20006a38:	4293      	cmp	r3, r2
20006a3a:	d901      	bls.n	20006a40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
20006a3c:	2303      	movs	r3, #3
20006a3e:	e0ce      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006a40:	4b4b      	ldr	r3, [pc, #300]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006a44:	f003 0302 	and.w	r3, r3, #2
20006a48:	2b00      	cmp	r3, #0
20006a4a:	d0ee      	beq.n	20006a2a <HAL_RCC_OscConfig+0x386>
20006a4c:	e014      	b.n	20006a78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006a4e:	f7fd fccf 	bl	200043f0 <HAL_GetTick>
20006a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20006a54:	e00a      	b.n	20006a6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20006a56:	f7fd fccb 	bl	200043f0 <HAL_GetTick>
20006a5a:	4602      	mov	r2, r0
20006a5c:	693b      	ldr	r3, [r7, #16]
20006a5e:	1ad3      	subs	r3, r2, r3
20006a60:	f241 3288 	movw	r2, #5000	@ 0x1388
20006a64:	4293      	cmp	r3, r2
20006a66:	d901      	bls.n	20006a6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
20006a68:	2303      	movs	r3, #3
20006a6a:	e0b8      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20006a6c:	4b40      	ldr	r3, [pc, #256]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006a70:	f003 0302 	and.w	r3, r3, #2
20006a74:	2b00      	cmp	r3, #0
20006a76:	d1ee      	bne.n	20006a56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
20006a78:	7dfb      	ldrb	r3, [r7, #23]
20006a7a:	2b01      	cmp	r3, #1
20006a7c:	d105      	bne.n	20006a8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20006a7e:	4b3c      	ldr	r3, [pc, #240]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006a82:	4a3b      	ldr	r2, [pc, #236]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20006a88:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20006a8a:	687b      	ldr	r3, [r7, #4]
20006a8c:	699b      	ldr	r3, [r3, #24]
20006a8e:	2b00      	cmp	r3, #0
20006a90:	f000 80a4 	beq.w	20006bdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
20006a94:	4b36      	ldr	r3, [pc, #216]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006a96:	689b      	ldr	r3, [r3, #8]
20006a98:	f003 030c 	and.w	r3, r3, #12
20006a9c:	2b08      	cmp	r3, #8
20006a9e:	d06b      	beq.n	20006b78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20006aa0:	687b      	ldr	r3, [r7, #4]
20006aa2:	699b      	ldr	r3, [r3, #24]
20006aa4:	2b02      	cmp	r3, #2
20006aa6:	d149      	bne.n	20006b3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20006aa8:	4b31      	ldr	r3, [pc, #196]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006aaa:	681b      	ldr	r3, [r3, #0]
20006aac:	4a30      	ldr	r2, [pc, #192]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20006ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006ab4:	f7fd fc9c 	bl	200043f0 <HAL_GetTick>
20006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006aba:	e008      	b.n	20006ace <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20006abc:	f7fd fc98 	bl	200043f0 <HAL_GetTick>
20006ac0:	4602      	mov	r2, r0
20006ac2:	693b      	ldr	r3, [r7, #16]
20006ac4:	1ad3      	subs	r3, r2, r3
20006ac6:	2b02      	cmp	r3, #2
20006ac8:	d901      	bls.n	20006ace <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
20006aca:	2303      	movs	r3, #3
20006acc:	e087      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006ace:	4b28      	ldr	r3, [pc, #160]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006ad0:	681b      	ldr	r3, [r3, #0]
20006ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006ad6:	2b00      	cmp	r3, #0
20006ad8:	d1f0      	bne.n	20006abc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
20006ada:	687b      	ldr	r3, [r7, #4]
20006adc:	69da      	ldr	r2, [r3, #28]
20006ade:	687b      	ldr	r3, [r7, #4]
20006ae0:	6a1b      	ldr	r3, [r3, #32]
20006ae2:	431a      	orrs	r2, r3
20006ae4:	687b      	ldr	r3, [r7, #4]
20006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20006ae8:	019b      	lsls	r3, r3, #6
20006aea:	431a      	orrs	r2, r3
20006aec:	687b      	ldr	r3, [r7, #4]
20006aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006af0:	085b      	lsrs	r3, r3, #1
20006af2:	3b01      	subs	r3, #1
20006af4:	041b      	lsls	r3, r3, #16
20006af6:	431a      	orrs	r2, r3
20006af8:	687b      	ldr	r3, [r7, #4]
20006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006afc:	061b      	lsls	r3, r3, #24
20006afe:	4313      	orrs	r3, r2
20006b00:	4a1b      	ldr	r2, [pc, #108]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006b02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20006b06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20006b08:	4b19      	ldr	r3, [pc, #100]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006b0a:	681b      	ldr	r3, [r3, #0]
20006b0c:	4a18      	ldr	r2, [pc, #96]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20006b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006b14:	f7fd fc6c 	bl	200043f0 <HAL_GetTick>
20006b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006b1a:	e008      	b.n	20006b2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20006b1c:	f7fd fc68 	bl	200043f0 <HAL_GetTick>
20006b20:	4602      	mov	r2, r0
20006b22:	693b      	ldr	r3, [r7, #16]
20006b24:	1ad3      	subs	r3, r2, r3
20006b26:	2b02      	cmp	r3, #2
20006b28:	d901      	bls.n	20006b2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
20006b2a:	2303      	movs	r3, #3
20006b2c:	e057      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006b2e:	4b10      	ldr	r3, [pc, #64]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006b30:	681b      	ldr	r3, [r3, #0]
20006b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006b36:	2b00      	cmp	r3, #0
20006b38:	d0f0      	beq.n	20006b1c <HAL_RCC_OscConfig+0x478>
20006b3a:	e04f      	b.n	20006bdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20006b3c:	4b0c      	ldr	r3, [pc, #48]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006b3e:	681b      	ldr	r3, [r3, #0]
20006b40:	4a0b      	ldr	r2, [pc, #44]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20006b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006b48:	f7fd fc52 	bl	200043f0 <HAL_GetTick>
20006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006b4e:	e008      	b.n	20006b62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20006b50:	f7fd fc4e 	bl	200043f0 <HAL_GetTick>
20006b54:	4602      	mov	r2, r0
20006b56:	693b      	ldr	r3, [r7, #16]
20006b58:	1ad3      	subs	r3, r2, r3
20006b5a:	2b02      	cmp	r3, #2
20006b5c:	d901      	bls.n	20006b62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
20006b5e:	2303      	movs	r3, #3
20006b60:	e03d      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006b62:	4b03      	ldr	r3, [pc, #12]	@ (20006b70 <HAL_RCC_OscConfig+0x4cc>)
20006b64:	681b      	ldr	r3, [r3, #0]
20006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006b6a:	2b00      	cmp	r3, #0
20006b6c:	d1f0      	bne.n	20006b50 <HAL_RCC_OscConfig+0x4ac>
20006b6e:	e035      	b.n	20006bdc <HAL_RCC_OscConfig+0x538>
20006b70:	40023800 	.word	0x40023800
20006b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
20006b78:	4b1b      	ldr	r3, [pc, #108]	@ (20006be8 <HAL_RCC_OscConfig+0x544>)
20006b7a:	685b      	ldr	r3, [r3, #4]
20006b7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20006b7e:	687b      	ldr	r3, [r7, #4]
20006b80:	699b      	ldr	r3, [r3, #24]
20006b82:	2b01      	cmp	r3, #1
20006b84:	d028      	beq.n	20006bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20006b86:	68fb      	ldr	r3, [r7, #12]
20006b88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20006b8c:	687b      	ldr	r3, [r7, #4]
20006b8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20006b90:	429a      	cmp	r2, r3
20006b92:	d121      	bne.n	20006bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20006b94:	68fb      	ldr	r3, [r7, #12]
20006b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20006b9a:	687b      	ldr	r3, [r7, #4]
20006b9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20006b9e:	429a      	cmp	r2, r3
20006ba0:	d11a      	bne.n	20006bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20006ba2:	68fa      	ldr	r2, [r7, #12]
20006ba4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
20006ba8:	4013      	ands	r3, r2
20006baa:	687a      	ldr	r2, [r7, #4]
20006bac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
20006bae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20006bb0:	4293      	cmp	r3, r2
20006bb2:	d111      	bne.n	20006bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20006bb4:	68fb      	ldr	r3, [r7, #12]
20006bb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
20006bba:	687b      	ldr	r3, [r7, #4]
20006bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006bbe:	085b      	lsrs	r3, r3, #1
20006bc0:	3b01      	subs	r3, #1
20006bc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20006bc4:	429a      	cmp	r2, r3
20006bc6:	d107      	bne.n	20006bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20006bc8:	68fb      	ldr	r3, [r7, #12]
20006bca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
20006bce:	687b      	ldr	r3, [r7, #4]
20006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006bd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20006bd4:	429a      	cmp	r2, r3
20006bd6:	d001      	beq.n	20006bdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
20006bd8:	2301      	movs	r3, #1
20006bda:	e000      	b.n	20006bde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
20006bdc:	2300      	movs	r3, #0
}
20006bde:	4618      	mov	r0, r3
20006be0:	3718      	adds	r7, #24
20006be2:	46bd      	mov	sp, r7
20006be4:	bd80      	pop	{r7, pc}
20006be6:	bf00      	nop
20006be8:	40023800 	.word	0x40023800

20006bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20006bec:	b580      	push	{r7, lr}
20006bee:	b084      	sub	sp, #16
20006bf0:	af00      	add	r7, sp, #0
20006bf2:	6078      	str	r0, [r7, #4]
20006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
20006bf6:	2300      	movs	r3, #0
20006bf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
20006bfa:	687b      	ldr	r3, [r7, #4]
20006bfc:	2b00      	cmp	r3, #0
20006bfe:	d101      	bne.n	20006c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
20006c00:	2301      	movs	r3, #1
20006c02:	e0d0      	b.n	20006da6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
20006c04:	4b6a      	ldr	r3, [pc, #424]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006c06:	681b      	ldr	r3, [r3, #0]
20006c08:	f003 030f 	and.w	r3, r3, #15
20006c0c:	683a      	ldr	r2, [r7, #0]
20006c0e:	429a      	cmp	r2, r3
20006c10:	d910      	bls.n	20006c34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20006c12:	4b67      	ldr	r3, [pc, #412]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006c14:	681b      	ldr	r3, [r3, #0]
20006c16:	f023 020f 	bic.w	r2, r3, #15
20006c1a:	4965      	ldr	r1, [pc, #404]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006c1c:	683b      	ldr	r3, [r7, #0]
20006c1e:	4313      	orrs	r3, r2
20006c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20006c22:	4b63      	ldr	r3, [pc, #396]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006c24:	681b      	ldr	r3, [r3, #0]
20006c26:	f003 030f 	and.w	r3, r3, #15
20006c2a:	683a      	ldr	r2, [r7, #0]
20006c2c:	429a      	cmp	r2, r3
20006c2e:	d001      	beq.n	20006c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
20006c30:	2301      	movs	r3, #1
20006c32:	e0b8      	b.n	20006da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20006c34:	687b      	ldr	r3, [r7, #4]
20006c36:	681b      	ldr	r3, [r3, #0]
20006c38:	f003 0302 	and.w	r3, r3, #2
20006c3c:	2b00      	cmp	r3, #0
20006c3e:	d020      	beq.n	20006c82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006c40:	687b      	ldr	r3, [r7, #4]
20006c42:	681b      	ldr	r3, [r3, #0]
20006c44:	f003 0304 	and.w	r3, r3, #4
20006c48:	2b00      	cmp	r3, #0
20006c4a:	d005      	beq.n	20006c58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20006c4c:	4b59      	ldr	r3, [pc, #356]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006c4e:	689b      	ldr	r3, [r3, #8]
20006c50:	4a58      	ldr	r2, [pc, #352]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006c52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
20006c56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006c58:	687b      	ldr	r3, [r7, #4]
20006c5a:	681b      	ldr	r3, [r3, #0]
20006c5c:	f003 0308 	and.w	r3, r3, #8
20006c60:	2b00      	cmp	r3, #0
20006c62:	d005      	beq.n	20006c70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20006c64:	4b53      	ldr	r3, [pc, #332]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006c66:	689b      	ldr	r3, [r3, #8]
20006c68:	4a52      	ldr	r2, [pc, #328]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006c6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
20006c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20006c70:	4b50      	ldr	r3, [pc, #320]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006c72:	689b      	ldr	r3, [r3, #8]
20006c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
20006c78:	687b      	ldr	r3, [r7, #4]
20006c7a:	689b      	ldr	r3, [r3, #8]
20006c7c:	494d      	ldr	r1, [pc, #308]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006c7e:	4313      	orrs	r3, r2
20006c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20006c82:	687b      	ldr	r3, [r7, #4]
20006c84:	681b      	ldr	r3, [r3, #0]
20006c86:	f003 0301 	and.w	r3, r3, #1
20006c8a:	2b00      	cmp	r3, #0
20006c8c:	d040      	beq.n	20006d10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20006c8e:	687b      	ldr	r3, [r7, #4]
20006c90:	685b      	ldr	r3, [r3, #4]
20006c92:	2b01      	cmp	r3, #1
20006c94:	d107      	bne.n	20006ca6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20006c96:	4b47      	ldr	r3, [pc, #284]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006c98:	681b      	ldr	r3, [r3, #0]
20006c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20006c9e:	2b00      	cmp	r3, #0
20006ca0:	d115      	bne.n	20006cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20006ca2:	2301      	movs	r3, #1
20006ca4:	e07f      	b.n	20006da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
20006ca6:	687b      	ldr	r3, [r7, #4]
20006ca8:	685b      	ldr	r3, [r3, #4]
20006caa:	2b02      	cmp	r3, #2
20006cac:	d107      	bne.n	20006cbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006cae:	4b41      	ldr	r3, [pc, #260]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006cb0:	681b      	ldr	r3, [r3, #0]
20006cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006cb6:	2b00      	cmp	r3, #0
20006cb8:	d109      	bne.n	20006cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20006cba:	2301      	movs	r3, #1
20006cbc:	e073      	b.n	20006da6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20006cbe:	4b3d      	ldr	r3, [pc, #244]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006cc0:	681b      	ldr	r3, [r3, #0]
20006cc2:	f003 0302 	and.w	r3, r3, #2
20006cc6:	2b00      	cmp	r3, #0
20006cc8:	d101      	bne.n	20006cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20006cca:	2301      	movs	r3, #1
20006ccc:	e06b      	b.n	20006da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20006cce:	4b39      	ldr	r3, [pc, #228]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006cd0:	689b      	ldr	r3, [r3, #8]
20006cd2:	f023 0203 	bic.w	r2, r3, #3
20006cd6:	687b      	ldr	r3, [r7, #4]
20006cd8:	685b      	ldr	r3, [r3, #4]
20006cda:	4936      	ldr	r1, [pc, #216]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006cdc:	4313      	orrs	r3, r2
20006cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20006ce0:	f7fd fb86 	bl	200043f0 <HAL_GetTick>
20006ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006ce6:	e00a      	b.n	20006cfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20006ce8:	f7fd fb82 	bl	200043f0 <HAL_GetTick>
20006cec:	4602      	mov	r2, r0
20006cee:	68fb      	ldr	r3, [r7, #12]
20006cf0:	1ad3      	subs	r3, r2, r3
20006cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
20006cf6:	4293      	cmp	r3, r2
20006cf8:	d901      	bls.n	20006cfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
20006cfa:	2303      	movs	r3, #3
20006cfc:	e053      	b.n	20006da6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006cfe:	4b2d      	ldr	r3, [pc, #180]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006d00:	689b      	ldr	r3, [r3, #8]
20006d02:	f003 020c 	and.w	r2, r3, #12
20006d06:	687b      	ldr	r3, [r7, #4]
20006d08:	685b      	ldr	r3, [r3, #4]
20006d0a:	009b      	lsls	r3, r3, #2
20006d0c:	429a      	cmp	r2, r3
20006d0e:	d1eb      	bne.n	20006ce8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20006d10:	4b27      	ldr	r3, [pc, #156]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006d12:	681b      	ldr	r3, [r3, #0]
20006d14:	f003 030f 	and.w	r3, r3, #15
20006d18:	683a      	ldr	r2, [r7, #0]
20006d1a:	429a      	cmp	r2, r3
20006d1c:	d210      	bcs.n	20006d40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20006d1e:	4b24      	ldr	r3, [pc, #144]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006d20:	681b      	ldr	r3, [r3, #0]
20006d22:	f023 020f 	bic.w	r2, r3, #15
20006d26:	4922      	ldr	r1, [pc, #136]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006d28:	683b      	ldr	r3, [r7, #0]
20006d2a:	4313      	orrs	r3, r2
20006d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20006d2e:	4b20      	ldr	r3, [pc, #128]	@ (20006db0 <HAL_RCC_ClockConfig+0x1c4>)
20006d30:	681b      	ldr	r3, [r3, #0]
20006d32:	f003 030f 	and.w	r3, r3, #15
20006d36:	683a      	ldr	r2, [r7, #0]
20006d38:	429a      	cmp	r2, r3
20006d3a:	d001      	beq.n	20006d40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
20006d3c:	2301      	movs	r3, #1
20006d3e:	e032      	b.n	20006da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006d40:	687b      	ldr	r3, [r7, #4]
20006d42:	681b      	ldr	r3, [r3, #0]
20006d44:	f003 0304 	and.w	r3, r3, #4
20006d48:	2b00      	cmp	r3, #0
20006d4a:	d008      	beq.n	20006d5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20006d4c:	4b19      	ldr	r3, [pc, #100]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006d4e:	689b      	ldr	r3, [r3, #8]
20006d50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
20006d54:	687b      	ldr	r3, [r7, #4]
20006d56:	68db      	ldr	r3, [r3, #12]
20006d58:	4916      	ldr	r1, [pc, #88]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006d5a:	4313      	orrs	r3, r2
20006d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006d5e:	687b      	ldr	r3, [r7, #4]
20006d60:	681b      	ldr	r3, [r3, #0]
20006d62:	f003 0308 	and.w	r3, r3, #8
20006d66:	2b00      	cmp	r3, #0
20006d68:	d009      	beq.n	20006d7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
20006d6a:	4b12      	ldr	r3, [pc, #72]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006d6c:	689b      	ldr	r3, [r3, #8]
20006d6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
20006d72:	687b      	ldr	r3, [r7, #4]
20006d74:	691b      	ldr	r3, [r3, #16]
20006d76:	00db      	lsls	r3, r3, #3
20006d78:	490e      	ldr	r1, [pc, #56]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006d7a:	4313      	orrs	r3, r2
20006d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
20006d7e:	f000 f821 	bl	20006dc4 <HAL_RCC_GetSysClockFreq>
20006d82:	4602      	mov	r2, r0
20006d84:	4b0b      	ldr	r3, [pc, #44]	@ (20006db4 <HAL_RCC_ClockConfig+0x1c8>)
20006d86:	689b      	ldr	r3, [r3, #8]
20006d88:	091b      	lsrs	r3, r3, #4
20006d8a:	f003 030f 	and.w	r3, r3, #15
20006d8e:	490a      	ldr	r1, [pc, #40]	@ (20006db8 <HAL_RCC_ClockConfig+0x1cc>)
20006d90:	5ccb      	ldrb	r3, [r1, r3]
20006d92:	fa22 f303 	lsr.w	r3, r2, r3
20006d96:	4a09      	ldr	r2, [pc, #36]	@ (20006dbc <HAL_RCC_ClockConfig+0x1d0>)
20006d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
20006d9a:	4b09      	ldr	r3, [pc, #36]	@ (20006dc0 <HAL_RCC_ClockConfig+0x1d4>)
20006d9c:	681b      	ldr	r3, [r3, #0]
20006d9e:	4618      	mov	r0, r3
20006da0:	f7fd fae2 	bl	20004368 <HAL_InitTick>

  return HAL_OK;
20006da4:	2300      	movs	r3, #0
}
20006da6:	4618      	mov	r0, r3
20006da8:	3710      	adds	r7, #16
20006daa:	46bd      	mov	sp, r7
20006dac:	bd80      	pop	{r7, pc}
20006dae:	bf00      	nop
20006db0:	40023c00 	.word	0x40023c00
20006db4:	40023800 	.word	0x40023800
20006db8:	2000c464 	.word	0x2000c464
20006dbc:	2000c48c 	.word	0x2000c48c
20006dc0:	2000c490 	.word	0x2000c490

20006dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20006dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20006dc8:	b094      	sub	sp, #80	@ 0x50
20006dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
20006dcc:	2300      	movs	r3, #0
20006dce:	647b      	str	r3, [r7, #68]	@ 0x44
20006dd0:	2300      	movs	r3, #0
20006dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
20006dd4:	2300      	movs	r3, #0
20006dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
20006dd8:	2300      	movs	r3, #0
20006dda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20006ddc:	4b79      	ldr	r3, [pc, #484]	@ (20006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
20006dde:	689b      	ldr	r3, [r3, #8]
20006de0:	f003 030c 	and.w	r3, r3, #12
20006de4:	2b08      	cmp	r3, #8
20006de6:	d00d      	beq.n	20006e04 <HAL_RCC_GetSysClockFreq+0x40>
20006de8:	2b08      	cmp	r3, #8
20006dea:	f200 80e1 	bhi.w	20006fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
20006dee:	2b00      	cmp	r3, #0
20006df0:	d002      	beq.n	20006df8 <HAL_RCC_GetSysClockFreq+0x34>
20006df2:	2b04      	cmp	r3, #4
20006df4:	d003      	beq.n	20006dfe <HAL_RCC_GetSysClockFreq+0x3a>
20006df6:	e0db      	b.n	20006fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20006df8:	4b73      	ldr	r3, [pc, #460]	@ (20006fc8 <HAL_RCC_GetSysClockFreq+0x204>)
20006dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006dfc:	e0db      	b.n	20006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20006dfe:	4b73      	ldr	r3, [pc, #460]	@ (20006fcc <HAL_RCC_GetSysClockFreq+0x208>)
20006e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006e02:	e0d8      	b.n	20006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20006e04:	4b6f      	ldr	r3, [pc, #444]	@ (20006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
20006e06:	685b      	ldr	r3, [r3, #4]
20006e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20006e0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
20006e0e:	4b6d      	ldr	r3, [pc, #436]	@ (20006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
20006e10:	685b      	ldr	r3, [r3, #4]
20006e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20006e16:	2b00      	cmp	r3, #0
20006e18:	d063      	beq.n	20006ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006e1a:	4b6a      	ldr	r3, [pc, #424]	@ (20006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
20006e1c:	685b      	ldr	r3, [r3, #4]
20006e1e:	099b      	lsrs	r3, r3, #6
20006e20:	2200      	movs	r2, #0
20006e22:	63bb      	str	r3, [r7, #56]	@ 0x38
20006e24:	63fa      	str	r2, [r7, #60]	@ 0x3c
20006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20006e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
20006e2c:	633b      	str	r3, [r7, #48]	@ 0x30
20006e2e:	2300      	movs	r3, #0
20006e30:	637b      	str	r3, [r7, #52]	@ 0x34
20006e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
20006e36:	4622      	mov	r2, r4
20006e38:	462b      	mov	r3, r5
20006e3a:	f04f 0000 	mov.w	r0, #0
20006e3e:	f04f 0100 	mov.w	r1, #0
20006e42:	0159      	lsls	r1, r3, #5
20006e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006e48:	0150      	lsls	r0, r2, #5
20006e4a:	4602      	mov	r2, r0
20006e4c:	460b      	mov	r3, r1
20006e4e:	4621      	mov	r1, r4
20006e50:	1a51      	subs	r1, r2, r1
20006e52:	6139      	str	r1, [r7, #16]
20006e54:	4629      	mov	r1, r5
20006e56:	eb63 0301 	sbc.w	r3, r3, r1
20006e5a:	617b      	str	r3, [r7, #20]
20006e5c:	f04f 0200 	mov.w	r2, #0
20006e60:	f04f 0300 	mov.w	r3, #0
20006e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20006e68:	4659      	mov	r1, fp
20006e6a:	018b      	lsls	r3, r1, #6
20006e6c:	4651      	mov	r1, sl
20006e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20006e72:	4651      	mov	r1, sl
20006e74:	018a      	lsls	r2, r1, #6
20006e76:	4651      	mov	r1, sl
20006e78:	ebb2 0801 	subs.w	r8, r2, r1
20006e7c:	4659      	mov	r1, fp
20006e7e:	eb63 0901 	sbc.w	r9, r3, r1
20006e82:	f04f 0200 	mov.w	r2, #0
20006e86:	f04f 0300 	mov.w	r3, #0
20006e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20006e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20006e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20006e96:	4690      	mov	r8, r2
20006e98:	4699      	mov	r9, r3
20006e9a:	4623      	mov	r3, r4
20006e9c:	eb18 0303 	adds.w	r3, r8, r3
20006ea0:	60bb      	str	r3, [r7, #8]
20006ea2:	462b      	mov	r3, r5
20006ea4:	eb49 0303 	adc.w	r3, r9, r3
20006ea8:	60fb      	str	r3, [r7, #12]
20006eaa:	f04f 0200 	mov.w	r2, #0
20006eae:	f04f 0300 	mov.w	r3, #0
20006eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20006eb6:	4629      	mov	r1, r5
20006eb8:	024b      	lsls	r3, r1, #9
20006eba:	4621      	mov	r1, r4
20006ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20006ec0:	4621      	mov	r1, r4
20006ec2:	024a      	lsls	r2, r1, #9
20006ec4:	4610      	mov	r0, r2
20006ec6:	4619      	mov	r1, r3
20006ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20006eca:	2200      	movs	r2, #0
20006ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
20006ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
20006ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
20006ed4:	f7f9 f998 	bl	20000208 <__aeabi_uldivmod>
20006ed8:	4602      	mov	r2, r0
20006eda:	460b      	mov	r3, r1
20006edc:	4613      	mov	r3, r2
20006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
20006ee0:	e058      	b.n	20006f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006ee2:	4b38      	ldr	r3, [pc, #224]	@ (20006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
20006ee4:	685b      	ldr	r3, [r3, #4]
20006ee6:	099b      	lsrs	r3, r3, #6
20006ee8:	2200      	movs	r2, #0
20006eea:	4618      	mov	r0, r3
20006eec:	4611      	mov	r1, r2
20006eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
20006ef2:	623b      	str	r3, [r7, #32]
20006ef4:	2300      	movs	r3, #0
20006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
20006ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20006efc:	4642      	mov	r2, r8
20006efe:	464b      	mov	r3, r9
20006f00:	f04f 0000 	mov.w	r0, #0
20006f04:	f04f 0100 	mov.w	r1, #0
20006f08:	0159      	lsls	r1, r3, #5
20006f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006f0e:	0150      	lsls	r0, r2, #5
20006f10:	4602      	mov	r2, r0
20006f12:	460b      	mov	r3, r1
20006f14:	4641      	mov	r1, r8
20006f16:	ebb2 0a01 	subs.w	sl, r2, r1
20006f1a:	4649      	mov	r1, r9
20006f1c:	eb63 0b01 	sbc.w	fp, r3, r1
20006f20:	f04f 0200 	mov.w	r2, #0
20006f24:	f04f 0300 	mov.w	r3, #0
20006f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
20006f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20006f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
20006f34:	ebb2 040a 	subs.w	r4, r2, sl
20006f38:	eb63 050b 	sbc.w	r5, r3, fp
20006f3c:	f04f 0200 	mov.w	r2, #0
20006f40:	f04f 0300 	mov.w	r3, #0
20006f44:	00eb      	lsls	r3, r5, #3
20006f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20006f4a:	00e2      	lsls	r2, r4, #3
20006f4c:	4614      	mov	r4, r2
20006f4e:	461d      	mov	r5, r3
20006f50:	4643      	mov	r3, r8
20006f52:	18e3      	adds	r3, r4, r3
20006f54:	603b      	str	r3, [r7, #0]
20006f56:	464b      	mov	r3, r9
20006f58:	eb45 0303 	adc.w	r3, r5, r3
20006f5c:	607b      	str	r3, [r7, #4]
20006f5e:	f04f 0200 	mov.w	r2, #0
20006f62:	f04f 0300 	mov.w	r3, #0
20006f66:	e9d7 4500 	ldrd	r4, r5, [r7]
20006f6a:	4629      	mov	r1, r5
20006f6c:	028b      	lsls	r3, r1, #10
20006f6e:	4621      	mov	r1, r4
20006f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20006f74:	4621      	mov	r1, r4
20006f76:	028a      	lsls	r2, r1, #10
20006f78:	4610      	mov	r0, r2
20006f7a:	4619      	mov	r1, r3
20006f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20006f7e:	2200      	movs	r2, #0
20006f80:	61bb      	str	r3, [r7, #24]
20006f82:	61fa      	str	r2, [r7, #28]
20006f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20006f88:	f7f9 f93e 	bl	20000208 <__aeabi_uldivmod>
20006f8c:	4602      	mov	r2, r0
20006f8e:	460b      	mov	r3, r1
20006f90:	4613      	mov	r3, r2
20006f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
20006f94:	4b0b      	ldr	r3, [pc, #44]	@ (20006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
20006f96:	685b      	ldr	r3, [r3, #4]
20006f98:	0c1b      	lsrs	r3, r3, #16
20006f9a:	f003 0303 	and.w	r3, r3, #3
20006f9e:	3301      	adds	r3, #1
20006fa0:	005b      	lsls	r3, r3, #1
20006fa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
20006fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20006fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
20006fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006fae:	e002      	b.n	20006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20006fb0:	4b05      	ldr	r3, [pc, #20]	@ (20006fc8 <HAL_RCC_GetSysClockFreq+0x204>)
20006fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
20006fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
20006fb8:	4618      	mov	r0, r3
20006fba:	3750      	adds	r7, #80	@ 0x50
20006fbc:	46bd      	mov	sp, r7
20006fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20006fc2:	bf00      	nop
20006fc4:	40023800 	.word	0x40023800
20006fc8:	00f42400 	.word	0x00f42400
20006fcc:	007a1200 	.word	0x007a1200

20006fd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20006fd0:	b480      	push	{r7}
20006fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20006fd4:	4b03      	ldr	r3, [pc, #12]	@ (20006fe4 <HAL_RCC_GetHCLKFreq+0x14>)
20006fd6:	681b      	ldr	r3, [r3, #0]
}
20006fd8:	4618      	mov	r0, r3
20006fda:	46bd      	mov	sp, r7
20006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
20006fe0:	4770      	bx	lr
20006fe2:	bf00      	nop
20006fe4:	2000c48c 	.word	0x2000c48c

20006fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20006fe8:	b580      	push	{r7, lr}
20006fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
20006fec:	f7ff fff0 	bl	20006fd0 <HAL_RCC_GetHCLKFreq>
20006ff0:	4602      	mov	r2, r0
20006ff2:	4b05      	ldr	r3, [pc, #20]	@ (20007008 <HAL_RCC_GetPCLK1Freq+0x20>)
20006ff4:	689b      	ldr	r3, [r3, #8]
20006ff6:	0a9b      	lsrs	r3, r3, #10
20006ff8:	f003 0307 	and.w	r3, r3, #7
20006ffc:	4903      	ldr	r1, [pc, #12]	@ (2000700c <HAL_RCC_GetPCLK1Freq+0x24>)
20006ffe:	5ccb      	ldrb	r3, [r1, r3]
20007000:	fa22 f303 	lsr.w	r3, r2, r3
}
20007004:	4618      	mov	r0, r3
20007006:	bd80      	pop	{r7, pc}
20007008:	40023800 	.word	0x40023800
2000700c:	2000c474 	.word	0x2000c474

20007010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20007010:	b580      	push	{r7, lr}
20007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
20007014:	f7ff ffdc 	bl	20006fd0 <HAL_RCC_GetHCLKFreq>
20007018:	4602      	mov	r2, r0
2000701a:	4b05      	ldr	r3, [pc, #20]	@ (20007030 <HAL_RCC_GetPCLK2Freq+0x20>)
2000701c:	689b      	ldr	r3, [r3, #8]
2000701e:	0b5b      	lsrs	r3, r3, #13
20007020:	f003 0307 	and.w	r3, r3, #7
20007024:	4903      	ldr	r1, [pc, #12]	@ (20007034 <HAL_RCC_GetPCLK2Freq+0x24>)
20007026:	5ccb      	ldrb	r3, [r1, r3]
20007028:	fa22 f303 	lsr.w	r3, r2, r3
}
2000702c:	4618      	mov	r0, r3
2000702e:	bd80      	pop	{r7, pc}
20007030:	40023800 	.word	0x40023800
20007034:	2000c474 	.word	0x2000c474

20007038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20007038:	b580      	push	{r7, lr}
2000703a:	b088      	sub	sp, #32
2000703c:	af00      	add	r7, sp, #0
2000703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
20007040:	2300      	movs	r3, #0
20007042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
20007044:	2300      	movs	r3, #0
20007046:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
20007048:	2300      	movs	r3, #0
2000704a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
2000704c:	2300      	movs	r3, #0
2000704e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
20007050:	2300      	movs	r3, #0
20007052:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
20007054:	687b      	ldr	r3, [r7, #4]
20007056:	681b      	ldr	r3, [r3, #0]
20007058:	f003 0301 	and.w	r3, r3, #1
2000705c:	2b00      	cmp	r3, #0
2000705e:	d012      	beq.n	20007086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20007060:	4b69      	ldr	r3, [pc, #420]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007062:	689b      	ldr	r3, [r3, #8]
20007064:	4a68      	ldr	r2, [pc, #416]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007066:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
2000706a:	6093      	str	r3, [r2, #8]
2000706c:	4b66      	ldr	r3, [pc, #408]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000706e:	689a      	ldr	r2, [r3, #8]
20007070:	687b      	ldr	r3, [r7, #4]
20007072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20007074:	4964      	ldr	r1, [pc, #400]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007076:	4313      	orrs	r3, r2
20007078:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
2000707a:	687b      	ldr	r3, [r7, #4]
2000707c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000707e:	2b00      	cmp	r3, #0
20007080:	d101      	bne.n	20007086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
20007082:	2301      	movs	r3, #1
20007084:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
20007086:	687b      	ldr	r3, [r7, #4]
20007088:	681b      	ldr	r3, [r3, #0]
2000708a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2000708e:	2b00      	cmp	r3, #0
20007090:	d017      	beq.n	200070c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
20007092:	4b5d      	ldr	r3, [pc, #372]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20007098:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
2000709c:	687b      	ldr	r3, [r7, #4]
2000709e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200070a0:	4959      	ldr	r1, [pc, #356]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070a2:	4313      	orrs	r3, r2
200070a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
200070a8:	687b      	ldr	r3, [r7, #4]
200070aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200070ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
200070b0:	d101      	bne.n	200070b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
200070b2:	2301      	movs	r3, #1
200070b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
200070b6:	687b      	ldr	r3, [r7, #4]
200070b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200070ba:	2b00      	cmp	r3, #0
200070bc:	d101      	bne.n	200070c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
200070be:	2301      	movs	r3, #1
200070c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
200070c2:	687b      	ldr	r3, [r7, #4]
200070c4:	681b      	ldr	r3, [r3, #0]
200070c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
200070ca:	2b00      	cmp	r3, #0
200070cc:	d017      	beq.n	200070fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
200070ce:	4b4e      	ldr	r3, [pc, #312]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200070d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
200070d8:	687b      	ldr	r3, [r7, #4]
200070da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200070dc:	494a      	ldr	r1, [pc, #296]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070de:	4313      	orrs	r3, r2
200070e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
200070e4:	687b      	ldr	r3, [r7, #4]
200070e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200070e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200070ec:	d101      	bne.n	200070f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
200070ee:	2301      	movs	r3, #1
200070f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
200070f2:	687b      	ldr	r3, [r7, #4]
200070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200070f6:	2b00      	cmp	r3, #0
200070f8:	d101      	bne.n	200070fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
200070fa:	2301      	movs	r3, #1
200070fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
200070fe:	687b      	ldr	r3, [r7, #4]
20007100:	681b      	ldr	r3, [r3, #0]
20007102:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20007106:	2b00      	cmp	r3, #0
20007108:	d001      	beq.n	2000710e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
2000710a:	2301      	movs	r3, #1
2000710c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
2000710e:	687b      	ldr	r3, [r7, #4]
20007110:	681b      	ldr	r3, [r3, #0]
20007112:	f003 0320 	and.w	r3, r3, #32
20007116:	2b00      	cmp	r3, #0
20007118:	f000 808b 	beq.w	20007232 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
2000711c:	4b3a      	ldr	r3, [pc, #232]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007120:	4a39      	ldr	r2, [pc, #228]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20007126:	6413      	str	r3, [r2, #64]	@ 0x40
20007128:	4b37      	ldr	r3, [pc, #220]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000712a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000712c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20007130:	60bb      	str	r3, [r7, #8]
20007132:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
20007134:	4b35      	ldr	r3, [pc, #212]	@ (2000720c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20007136:	681b      	ldr	r3, [r3, #0]
20007138:	4a34      	ldr	r2, [pc, #208]	@ (2000720c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
2000713a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2000713e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20007140:	f7fd f956 	bl	200043f0 <HAL_GetTick>
20007144:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20007146:	e008      	b.n	2000715a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20007148:	f7fd f952 	bl	200043f0 <HAL_GetTick>
2000714c:	4602      	mov	r2, r0
2000714e:	697b      	ldr	r3, [r7, #20]
20007150:	1ad3      	subs	r3, r2, r3
20007152:	2b64      	cmp	r3, #100	@ 0x64
20007154:	d901      	bls.n	2000715a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
20007156:	2303      	movs	r3, #3
20007158:	e357      	b.n	2000780a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000715a:	4b2c      	ldr	r3, [pc, #176]	@ (2000720c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
2000715c:	681b      	ldr	r3, [r3, #0]
2000715e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20007162:	2b00      	cmp	r3, #0
20007164:	d0f0      	beq.n	20007148 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
20007166:	4b28      	ldr	r3, [pc, #160]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000716a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2000716e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20007170:	693b      	ldr	r3, [r7, #16]
20007172:	2b00      	cmp	r3, #0
20007174:	d035      	beq.n	200071e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
20007176:	687b      	ldr	r3, [r7, #4]
20007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000717a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2000717e:	693a      	ldr	r2, [r7, #16]
20007180:	429a      	cmp	r2, r3
20007182:	d02e      	beq.n	200071e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20007184:	4b20      	ldr	r3, [pc, #128]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
2000718c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
2000718e:	4b1e      	ldr	r3, [pc, #120]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007192:	4a1d      	ldr	r2, [pc, #116]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20007198:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
2000719a:	4b1b      	ldr	r3, [pc, #108]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000719c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000719e:	4a1a      	ldr	r2, [pc, #104]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200071a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200071a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
200071a6:	4a18      	ldr	r2, [pc, #96]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200071a8:	693b      	ldr	r3, [r7, #16]
200071aa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
200071ac:	4b16      	ldr	r3, [pc, #88]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200071ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200071b0:	f003 0301 	and.w	r3, r3, #1
200071b4:	2b01      	cmp	r3, #1
200071b6:	d114      	bne.n	200071e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200071b8:	f7fd f91a 	bl	200043f0 <HAL_GetTick>
200071bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200071be:	e00a      	b.n	200071d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200071c0:	f7fd f916 	bl	200043f0 <HAL_GetTick>
200071c4:	4602      	mov	r2, r0
200071c6:	697b      	ldr	r3, [r7, #20]
200071c8:	1ad3      	subs	r3, r2, r3
200071ca:	f241 3288 	movw	r2, #5000	@ 0x1388
200071ce:	4293      	cmp	r3, r2
200071d0:	d901      	bls.n	200071d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
200071d2:	2303      	movs	r3, #3
200071d4:	e319      	b.n	2000780a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200071d6:	4b0c      	ldr	r3, [pc, #48]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200071d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200071da:	f003 0302 	and.w	r3, r3, #2
200071de:	2b00      	cmp	r3, #0
200071e0:	d0ee      	beq.n	200071c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
200071e2:	687b      	ldr	r3, [r7, #4]
200071e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200071e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
200071ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200071ee:	d111      	bne.n	20007214 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
200071f0:	4b05      	ldr	r3, [pc, #20]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200071f2:	689b      	ldr	r3, [r3, #8]
200071f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
200071f8:	687b      	ldr	r3, [r7, #4]
200071fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
200071fc:	4b04      	ldr	r3, [pc, #16]	@ (20007210 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
200071fe:	400b      	ands	r3, r1
20007200:	4901      	ldr	r1, [pc, #4]	@ (20007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007202:	4313      	orrs	r3, r2
20007204:	608b      	str	r3, [r1, #8]
20007206:	e00b      	b.n	20007220 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
20007208:	40023800 	.word	0x40023800
2000720c:	40007000 	.word	0x40007000
20007210:	0ffffcff 	.word	0x0ffffcff
20007214:	4baa      	ldr	r3, [pc, #680]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007216:	689b      	ldr	r3, [r3, #8]
20007218:	4aa9      	ldr	r2, [pc, #676]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000721a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
2000721e:	6093      	str	r3, [r2, #8]
20007220:	4ba7      	ldr	r3, [pc, #668]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007222:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
20007224:	687b      	ldr	r3, [r7, #4]
20007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007228:	f3c3 030b 	ubfx	r3, r3, #0, #12
2000722c:	49a4      	ldr	r1, [pc, #656]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000722e:	4313      	orrs	r3, r2
20007230:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
20007232:	687b      	ldr	r3, [r7, #4]
20007234:	681b      	ldr	r3, [r3, #0]
20007236:	f003 0310 	and.w	r3, r3, #16
2000723a:	2b00      	cmp	r3, #0
2000723c:	d010      	beq.n	20007260 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2000723e:	4ba0      	ldr	r3, [pc, #640]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20007244:	4a9e      	ldr	r2, [pc, #632]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2000724a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
2000724e:	4b9c      	ldr	r3, [pc, #624]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007250:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
20007254:	687b      	ldr	r3, [r7, #4]
20007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007258:	4999      	ldr	r1, [pc, #612]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000725a:	4313      	orrs	r3, r2
2000725c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
20007260:	687b      	ldr	r3, [r7, #4]
20007262:	681b      	ldr	r3, [r3, #0]
20007264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20007268:	2b00      	cmp	r3, #0
2000726a:	d00a      	beq.n	20007282 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
2000726c:	4b94      	ldr	r3, [pc, #592]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007272:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20007276:	687b      	ldr	r3, [r7, #4]
20007278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2000727a:	4991      	ldr	r1, [pc, #580]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000727c:	4313      	orrs	r3, r2
2000727e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
20007282:	687b      	ldr	r3, [r7, #4]
20007284:	681b      	ldr	r3, [r3, #0]
20007286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000728a:	2b00      	cmp	r3, #0
2000728c:	d00a      	beq.n	200072a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
2000728e:	4b8c      	ldr	r3, [pc, #560]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007294:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
20007298:	687b      	ldr	r3, [r7, #4]
2000729a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
2000729c:	4988      	ldr	r1, [pc, #544]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000729e:	4313      	orrs	r3, r2
200072a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
200072a4:	687b      	ldr	r3, [r7, #4]
200072a6:	681b      	ldr	r3, [r3, #0]
200072a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200072ac:	2b00      	cmp	r3, #0
200072ae:	d00a      	beq.n	200072c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
200072b0:	4b83      	ldr	r3, [pc, #524]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200072b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
200072ba:	687b      	ldr	r3, [r7, #4]
200072bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200072be:	4980      	ldr	r1, [pc, #512]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200072c0:	4313      	orrs	r3, r2
200072c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
200072c6:	687b      	ldr	r3, [r7, #4]
200072c8:	681b      	ldr	r3, [r3, #0]
200072ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200072ce:	2b00      	cmp	r3, #0
200072d0:	d00a      	beq.n	200072e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
200072d2:	4b7b      	ldr	r3, [pc, #492]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200072d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200072d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
200072dc:	687b      	ldr	r3, [r7, #4]
200072de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200072e0:	4977      	ldr	r1, [pc, #476]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200072e2:	4313      	orrs	r3, r2
200072e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
200072e8:	687b      	ldr	r3, [r7, #4]
200072ea:	681b      	ldr	r3, [r3, #0]
200072ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200072f0:	2b00      	cmp	r3, #0
200072f2:	d00a      	beq.n	2000730a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
200072f4:	4b72      	ldr	r3, [pc, #456]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200072fa:	f023 0203 	bic.w	r2, r3, #3
200072fe:	687b      	ldr	r3, [r7, #4]
20007300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20007302:	496f      	ldr	r1, [pc, #444]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007304:	4313      	orrs	r3, r2
20007306:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
2000730a:	687b      	ldr	r3, [r7, #4]
2000730c:	681b      	ldr	r3, [r3, #0]
2000730e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20007312:	2b00      	cmp	r3, #0
20007314:	d00a      	beq.n	2000732c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
20007316:	4b6a      	ldr	r3, [pc, #424]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000731c:	f023 020c 	bic.w	r2, r3, #12
20007320:	687b      	ldr	r3, [r7, #4]
20007322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20007324:	4966      	ldr	r1, [pc, #408]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007326:	4313      	orrs	r3, r2
20007328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
2000732c:	687b      	ldr	r3, [r7, #4]
2000732e:	681b      	ldr	r3, [r3, #0]
20007330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20007334:	2b00      	cmp	r3, #0
20007336:	d00a      	beq.n	2000734e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
20007338:	4b61      	ldr	r3, [pc, #388]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000733e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
20007342:	687b      	ldr	r3, [r7, #4]
20007344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20007346:	495e      	ldr	r1, [pc, #376]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007348:	4313      	orrs	r3, r2
2000734a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
2000734e:	687b      	ldr	r3, [r7, #4]
20007350:	681b      	ldr	r3, [r3, #0]
20007352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20007356:	2b00      	cmp	r3, #0
20007358:	d00a      	beq.n	20007370 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
2000735a:	4b59      	ldr	r3, [pc, #356]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007360:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
20007364:	687b      	ldr	r3, [r7, #4]
20007366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20007368:	4955      	ldr	r1, [pc, #340]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000736a:	4313      	orrs	r3, r2
2000736c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
20007370:	687b      	ldr	r3, [r7, #4]
20007372:	681b      	ldr	r3, [r3, #0]
20007374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20007378:	2b00      	cmp	r3, #0
2000737a:	d00a      	beq.n	20007392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
2000737c:	4b50      	ldr	r3, [pc, #320]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000737e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007382:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
20007386:	687b      	ldr	r3, [r7, #4]
20007388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000738a:	494d      	ldr	r1, [pc, #308]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000738c:	4313      	orrs	r3, r2
2000738e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
20007392:	687b      	ldr	r3, [r7, #4]
20007394:	681b      	ldr	r3, [r3, #0]
20007396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
2000739a:	2b00      	cmp	r3, #0
2000739c:	d00a      	beq.n	200073b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
2000739e:	4b48      	ldr	r3, [pc, #288]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200073a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
200073a8:	687b      	ldr	r3, [r7, #4]
200073aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200073ac:	4944      	ldr	r1, [pc, #272]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200073ae:	4313      	orrs	r3, r2
200073b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
200073b4:	687b      	ldr	r3, [r7, #4]
200073b6:	681b      	ldr	r3, [r3, #0]
200073b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
200073bc:	2b00      	cmp	r3, #0
200073be:	d00a      	beq.n	200073d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
200073c0:	4b3f      	ldr	r3, [pc, #252]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200073c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
200073ca:	687b      	ldr	r3, [r7, #4]
200073cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200073ce:	493c      	ldr	r1, [pc, #240]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200073d0:	4313      	orrs	r3, r2
200073d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
200073d6:	687b      	ldr	r3, [r7, #4]
200073d8:	681b      	ldr	r3, [r3, #0]
200073da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200073de:	2b00      	cmp	r3, #0
200073e0:	d00a      	beq.n	200073f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
200073e2:	4b37      	ldr	r3, [pc, #220]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200073e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
200073ec:	687b      	ldr	r3, [r7, #4]
200073ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200073f0:	4933      	ldr	r1, [pc, #204]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200073f2:	4313      	orrs	r3, r2
200073f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
200073f8:	687b      	ldr	r3, [r7, #4]
200073fa:	681b      	ldr	r3, [r3, #0]
200073fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20007400:	2b00      	cmp	r3, #0
20007402:	d00a      	beq.n	2000741a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
20007404:	4b2e      	ldr	r3, [pc, #184]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000740a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
2000740e:	687b      	ldr	r3, [r7, #4]
20007410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
20007412:	492b      	ldr	r1, [pc, #172]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007414:	4313      	orrs	r3, r2
20007416:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
2000741a:	687b      	ldr	r3, [r7, #4]
2000741c:	681b      	ldr	r3, [r3, #0]
2000741e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20007422:	2b00      	cmp	r3, #0
20007424:	d011      	beq.n	2000744a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
20007426:	4b26      	ldr	r3, [pc, #152]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000742c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
20007430:	687b      	ldr	r3, [r7, #4]
20007432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20007434:	4922      	ldr	r1, [pc, #136]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007436:	4313      	orrs	r3, r2
20007438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
2000743c:	687b      	ldr	r3, [r7, #4]
2000743e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20007440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20007444:	d101      	bne.n	2000744a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
20007446:	2301      	movs	r3, #1
20007448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2000744a:	687b      	ldr	r3, [r7, #4]
2000744c:	681b      	ldr	r3, [r3, #0]
2000744e:	f003 0308 	and.w	r3, r3, #8
20007452:	2b00      	cmp	r3, #0
20007454:	d001      	beq.n	2000745a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
20007456:	2301      	movs	r3, #1
20007458:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2000745a:	687b      	ldr	r3, [r7, #4]
2000745c:	681b      	ldr	r3, [r3, #0]
2000745e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20007462:	2b00      	cmp	r3, #0
20007464:	d00a      	beq.n	2000747c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
20007466:	4b16      	ldr	r3, [pc, #88]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000746c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
20007470:	687b      	ldr	r3, [r7, #4]
20007472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007474:	4912      	ldr	r1, [pc, #72]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007476:	4313      	orrs	r3, r2
20007478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
2000747c:	687b      	ldr	r3, [r7, #4]
2000747e:	681b      	ldr	r3, [r3, #0]
20007480:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
20007484:	2b00      	cmp	r3, #0
20007486:	d00b      	beq.n	200074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
20007488:	4b0d      	ldr	r3, [pc, #52]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000748e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
20007492:	687b      	ldr	r3, [r7, #4]
20007494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20007498:	4909      	ldr	r1, [pc, #36]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000749a:	4313      	orrs	r3, r2
2000749c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
200074a0:	69fb      	ldr	r3, [r7, #28]
200074a2:	2b01      	cmp	r3, #1
200074a4:	d006      	beq.n	200074b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
200074a6:	687b      	ldr	r3, [r7, #4]
200074a8:	681b      	ldr	r3, [r3, #0]
200074aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200074ae:	2b00      	cmp	r3, #0
200074b0:	f000 80d9 	beq.w	20007666 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
200074b4:	4b02      	ldr	r3, [pc, #8]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200074b6:	681b      	ldr	r3, [r3, #0]
200074b8:	4a01      	ldr	r2, [pc, #4]	@ (200074c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200074ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
200074be:	e001      	b.n	200074c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
200074c0:	40023800 	.word	0x40023800
200074c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200074c6:	f7fc ff93 	bl	200043f0 <HAL_GetTick>
200074ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200074cc:	e008      	b.n	200074e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
200074ce:	f7fc ff8f 	bl	200043f0 <HAL_GetTick>
200074d2:	4602      	mov	r2, r0
200074d4:	697b      	ldr	r3, [r7, #20]
200074d6:	1ad3      	subs	r3, r2, r3
200074d8:	2b64      	cmp	r3, #100	@ 0x64
200074da:	d901      	bls.n	200074e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200074dc:	2303      	movs	r3, #3
200074de:	e194      	b.n	2000780a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200074e0:	4b6c      	ldr	r3, [pc, #432]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200074e2:	681b      	ldr	r3, [r3, #0]
200074e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200074e8:	2b00      	cmp	r3, #0
200074ea:	d1f0      	bne.n	200074ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
200074ec:	687b      	ldr	r3, [r7, #4]
200074ee:	681b      	ldr	r3, [r3, #0]
200074f0:	f003 0301 	and.w	r3, r3, #1
200074f4:	2b00      	cmp	r3, #0
200074f6:	d021      	beq.n	2000753c <HAL_RCCEx_PeriphCLKConfig+0x504>
200074f8:	687b      	ldr	r3, [r7, #4]
200074fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200074fc:	2b00      	cmp	r3, #0
200074fe:	d11d      	bne.n	2000753c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20007500:	4b64      	ldr	r3, [pc, #400]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20007506:	0c1b      	lsrs	r3, r3, #16
20007508:	f003 0303 	and.w	r3, r3, #3
2000750c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
2000750e:	4b61      	ldr	r3, [pc, #388]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20007514:	0e1b      	lsrs	r3, r3, #24
20007516:	f003 030f 	and.w	r3, r3, #15
2000751a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
2000751c:	687b      	ldr	r3, [r7, #4]
2000751e:	685b      	ldr	r3, [r3, #4]
20007520:	019a      	lsls	r2, r3, #6
20007522:	693b      	ldr	r3, [r7, #16]
20007524:	041b      	lsls	r3, r3, #16
20007526:	431a      	orrs	r2, r3
20007528:	68fb      	ldr	r3, [r7, #12]
2000752a:	061b      	lsls	r3, r3, #24
2000752c:	431a      	orrs	r2, r3
2000752e:	687b      	ldr	r3, [r7, #4]
20007530:	689b      	ldr	r3, [r3, #8]
20007532:	071b      	lsls	r3, r3, #28
20007534:	4957      	ldr	r1, [pc, #348]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007536:	4313      	orrs	r3, r2
20007538:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2000753c:	687b      	ldr	r3, [r7, #4]
2000753e:	681b      	ldr	r3, [r3, #0]
20007540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20007544:	2b00      	cmp	r3, #0
20007546:	d004      	beq.n	20007552 <HAL_RCCEx_PeriphCLKConfig+0x51a>
20007548:	687b      	ldr	r3, [r7, #4]
2000754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000754c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20007550:	d00a      	beq.n	20007568 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20007552:	687b      	ldr	r3, [r7, #4]
20007554:	681b      	ldr	r3, [r3, #0]
20007556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2000755a:	2b00      	cmp	r3, #0
2000755c:	d02e      	beq.n	200075bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
2000755e:	687b      	ldr	r3, [r7, #4]
20007560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20007566:	d129      	bne.n	200075bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20007568:	4b4a      	ldr	r3, [pc, #296]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000756a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2000756e:	0c1b      	lsrs	r3, r3, #16
20007570:	f003 0303 	and.w	r3, r3, #3
20007574:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20007576:	4b47      	ldr	r3, [pc, #284]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2000757c:	0f1b      	lsrs	r3, r3, #28
2000757e:	f003 0307 	and.w	r3, r3, #7
20007582:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
20007584:	687b      	ldr	r3, [r7, #4]
20007586:	685b      	ldr	r3, [r3, #4]
20007588:	019a      	lsls	r2, r3, #6
2000758a:	693b      	ldr	r3, [r7, #16]
2000758c:	041b      	lsls	r3, r3, #16
2000758e:	431a      	orrs	r2, r3
20007590:	687b      	ldr	r3, [r7, #4]
20007592:	68db      	ldr	r3, [r3, #12]
20007594:	061b      	lsls	r3, r3, #24
20007596:	431a      	orrs	r2, r3
20007598:	68fb      	ldr	r3, [r7, #12]
2000759a:	071b      	lsls	r3, r3, #28
2000759c:	493d      	ldr	r1, [pc, #244]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000759e:	4313      	orrs	r3, r2
200075a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
200075a4:	4b3b      	ldr	r3, [pc, #236]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200075a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200075aa:	f023 021f 	bic.w	r2, r3, #31
200075ae:	687b      	ldr	r3, [r7, #4]
200075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200075b2:	3b01      	subs	r3, #1
200075b4:	4937      	ldr	r1, [pc, #220]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200075b6:	4313      	orrs	r3, r2
200075b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
200075bc:	687b      	ldr	r3, [r7, #4]
200075be:	681b      	ldr	r3, [r3, #0]
200075c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
200075c4:	2b00      	cmp	r3, #0
200075c6:	d01d      	beq.n	20007604 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
200075c8:	4b32      	ldr	r3, [pc, #200]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200075ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200075ce:	0e1b      	lsrs	r3, r3, #24
200075d0:	f003 030f 	and.w	r3, r3, #15
200075d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
200075d6:	4b2f      	ldr	r3, [pc, #188]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200075d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200075dc:	0f1b      	lsrs	r3, r3, #28
200075de:	f003 0307 	and.w	r3, r3, #7
200075e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
200075e4:	687b      	ldr	r3, [r7, #4]
200075e6:	685b      	ldr	r3, [r3, #4]
200075e8:	019a      	lsls	r2, r3, #6
200075ea:	687b      	ldr	r3, [r7, #4]
200075ec:	691b      	ldr	r3, [r3, #16]
200075ee:	041b      	lsls	r3, r3, #16
200075f0:	431a      	orrs	r2, r3
200075f2:	693b      	ldr	r3, [r7, #16]
200075f4:	061b      	lsls	r3, r3, #24
200075f6:	431a      	orrs	r2, r3
200075f8:	68fb      	ldr	r3, [r7, #12]
200075fa:	071b      	lsls	r3, r3, #28
200075fc:	4925      	ldr	r1, [pc, #148]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200075fe:	4313      	orrs	r3, r2
20007600:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
20007604:	687b      	ldr	r3, [r7, #4]
20007606:	681b      	ldr	r3, [r3, #0]
20007608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000760c:	2b00      	cmp	r3, #0
2000760e:	d011      	beq.n	20007634 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
20007610:	687b      	ldr	r3, [r7, #4]
20007612:	685b      	ldr	r3, [r3, #4]
20007614:	019a      	lsls	r2, r3, #6
20007616:	687b      	ldr	r3, [r7, #4]
20007618:	691b      	ldr	r3, [r3, #16]
2000761a:	041b      	lsls	r3, r3, #16
2000761c:	431a      	orrs	r2, r3
2000761e:	687b      	ldr	r3, [r7, #4]
20007620:	68db      	ldr	r3, [r3, #12]
20007622:	061b      	lsls	r3, r3, #24
20007624:	431a      	orrs	r2, r3
20007626:	687b      	ldr	r3, [r7, #4]
20007628:	689b      	ldr	r3, [r3, #8]
2000762a:	071b      	lsls	r3, r3, #28
2000762c:	4919      	ldr	r1, [pc, #100]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000762e:	4313      	orrs	r3, r2
20007630:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20007634:	4b17      	ldr	r3, [pc, #92]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007636:	681b      	ldr	r3, [r3, #0]
20007638:	4a16      	ldr	r2, [pc, #88]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000763a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
2000763e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20007640:	f7fc fed6 	bl	200043f0 <HAL_GetTick>
20007644:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20007646:	e008      	b.n	2000765a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20007648:	f7fc fed2 	bl	200043f0 <HAL_GetTick>
2000764c:	4602      	mov	r2, r0
2000764e:	697b      	ldr	r3, [r7, #20]
20007650:	1ad3      	subs	r3, r2, r3
20007652:	2b64      	cmp	r3, #100	@ 0x64
20007654:	d901      	bls.n	2000765a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20007656:	2303      	movs	r3, #3
20007658:	e0d7      	b.n	2000780a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000765a:	4b0e      	ldr	r3, [pc, #56]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000765c:	681b      	ldr	r3, [r3, #0]
2000765e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20007662:	2b00      	cmp	r3, #0
20007664:	d0f0      	beq.n	20007648 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
20007666:	69bb      	ldr	r3, [r7, #24]
20007668:	2b01      	cmp	r3, #1
2000766a:	f040 80cd 	bne.w	20007808 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
2000766e:	4b09      	ldr	r3, [pc, #36]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007670:	681b      	ldr	r3, [r3, #0]
20007672:	4a08      	ldr	r2, [pc, #32]	@ (20007694 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20007678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000767a:	f7fc feb9 	bl	200043f0 <HAL_GetTick>
2000767e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20007680:	e00a      	b.n	20007698 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20007682:	f7fc feb5 	bl	200043f0 <HAL_GetTick>
20007686:	4602      	mov	r2, r0
20007688:	697b      	ldr	r3, [r7, #20]
2000768a:	1ad3      	subs	r3, r2, r3
2000768c:	2b64      	cmp	r3, #100	@ 0x64
2000768e:	d903      	bls.n	20007698 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20007690:	2303      	movs	r3, #3
20007692:	e0ba      	b.n	2000780a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
20007694:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20007698:	4b5e      	ldr	r3, [pc, #376]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000769a:	681b      	ldr	r3, [r3, #0]
2000769c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
200076a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
200076a4:	d0ed      	beq.n	20007682 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
200076a6:	687b      	ldr	r3, [r7, #4]
200076a8:	681b      	ldr	r3, [r3, #0]
200076aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
200076ae:	2b00      	cmp	r3, #0
200076b0:	d003      	beq.n	200076ba <HAL_RCCEx_PeriphCLKConfig+0x682>
200076b2:	687b      	ldr	r3, [r7, #4]
200076b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200076b6:	2b00      	cmp	r3, #0
200076b8:	d009      	beq.n	200076ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
200076ba:	687b      	ldr	r3, [r7, #4]
200076bc:	681b      	ldr	r3, [r3, #0]
200076be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
200076c2:	2b00      	cmp	r3, #0
200076c4:	d02e      	beq.n	20007724 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
200076c6:	687b      	ldr	r3, [r7, #4]
200076c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200076ca:	2b00      	cmp	r3, #0
200076cc:	d12a      	bne.n	20007724 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
200076ce:	4b51      	ldr	r3, [pc, #324]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200076d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200076d4:	0c1b      	lsrs	r3, r3, #16
200076d6:	f003 0303 	and.w	r3, r3, #3
200076da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
200076dc:	4b4d      	ldr	r3, [pc, #308]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200076e2:	0f1b      	lsrs	r3, r3, #28
200076e4:	f003 0307 	and.w	r3, r3, #7
200076e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
200076ea:	687b      	ldr	r3, [r7, #4]
200076ec:	695b      	ldr	r3, [r3, #20]
200076ee:	019a      	lsls	r2, r3, #6
200076f0:	693b      	ldr	r3, [r7, #16]
200076f2:	041b      	lsls	r3, r3, #16
200076f4:	431a      	orrs	r2, r3
200076f6:	687b      	ldr	r3, [r7, #4]
200076f8:	699b      	ldr	r3, [r3, #24]
200076fa:	061b      	lsls	r3, r3, #24
200076fc:	431a      	orrs	r2, r3
200076fe:	68fb      	ldr	r3, [r7, #12]
20007700:	071b      	lsls	r3, r3, #28
20007702:	4944      	ldr	r1, [pc, #272]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007704:	4313      	orrs	r3, r2
20007706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
2000770a:	4b42      	ldr	r3, [pc, #264]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000770c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20007710:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
20007714:	687b      	ldr	r3, [r7, #4]
20007716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007718:	3b01      	subs	r3, #1
2000771a:	021b      	lsls	r3, r3, #8
2000771c:	493d      	ldr	r1, [pc, #244]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000771e:	4313      	orrs	r3, r2
20007720:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
20007724:	687b      	ldr	r3, [r7, #4]
20007726:	681b      	ldr	r3, [r3, #0]
20007728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
2000772c:	2b00      	cmp	r3, #0
2000772e:	d022      	beq.n	20007776 <HAL_RCCEx_PeriphCLKConfig+0x73e>
20007730:	687b      	ldr	r3, [r7, #4]
20007732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20007734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20007738:	d11d      	bne.n	20007776 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2000773a:	4b36      	ldr	r3, [pc, #216]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000773c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20007740:	0e1b      	lsrs	r3, r3, #24
20007742:	f003 030f 	and.w	r3, r3, #15
20007746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20007748:	4b32      	ldr	r3, [pc, #200]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
2000774e:	0f1b      	lsrs	r3, r3, #28
20007750:	f003 0307 	and.w	r3, r3, #7
20007754:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
20007756:	687b      	ldr	r3, [r7, #4]
20007758:	695b      	ldr	r3, [r3, #20]
2000775a:	019a      	lsls	r2, r3, #6
2000775c:	687b      	ldr	r3, [r7, #4]
2000775e:	6a1b      	ldr	r3, [r3, #32]
20007760:	041b      	lsls	r3, r3, #16
20007762:	431a      	orrs	r2, r3
20007764:	693b      	ldr	r3, [r7, #16]
20007766:	061b      	lsls	r3, r3, #24
20007768:	431a      	orrs	r2, r3
2000776a:	68fb      	ldr	r3, [r7, #12]
2000776c:	071b      	lsls	r3, r3, #28
2000776e:	4929      	ldr	r1, [pc, #164]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007770:	4313      	orrs	r3, r2
20007772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
20007776:	687b      	ldr	r3, [r7, #4]
20007778:	681b      	ldr	r3, [r3, #0]
2000777a:	f003 0308 	and.w	r3, r3, #8
2000777e:	2b00      	cmp	r3, #0
20007780:	d028      	beq.n	200077d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20007782:	4b24      	ldr	r3, [pc, #144]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20007788:	0e1b      	lsrs	r3, r3, #24
2000778a:	f003 030f 	and.w	r3, r3, #15
2000778e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20007790:	4b20      	ldr	r3, [pc, #128]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20007796:	0c1b      	lsrs	r3, r3, #16
20007798:	f003 0303 	and.w	r3, r3, #3
2000779c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
2000779e:	687b      	ldr	r3, [r7, #4]
200077a0:	695b      	ldr	r3, [r3, #20]
200077a2:	019a      	lsls	r2, r3, #6
200077a4:	68fb      	ldr	r3, [r7, #12]
200077a6:	041b      	lsls	r3, r3, #16
200077a8:	431a      	orrs	r2, r3
200077aa:	693b      	ldr	r3, [r7, #16]
200077ac:	061b      	lsls	r3, r3, #24
200077ae:	431a      	orrs	r2, r3
200077b0:	687b      	ldr	r3, [r7, #4]
200077b2:	69db      	ldr	r3, [r3, #28]
200077b4:	071b      	lsls	r3, r3, #28
200077b6:	4917      	ldr	r1, [pc, #92]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200077b8:	4313      	orrs	r3, r2
200077ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
200077be:	4b15      	ldr	r3, [pc, #84]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200077c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200077c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
200077c8:	687b      	ldr	r3, [r7, #4]
200077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200077cc:	4911      	ldr	r1, [pc, #68]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200077ce:	4313      	orrs	r3, r2
200077d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
200077d4:	4b0f      	ldr	r3, [pc, #60]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200077d6:	681b      	ldr	r3, [r3, #0]
200077d8:	4a0e      	ldr	r2, [pc, #56]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200077da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200077de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200077e0:	f7fc fe06 	bl	200043f0 <HAL_GetTick>
200077e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
200077e6:	e008      	b.n	200077fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
200077e8:	f7fc fe02 	bl	200043f0 <HAL_GetTick>
200077ec:	4602      	mov	r2, r0
200077ee:	697b      	ldr	r3, [r7, #20]
200077f0:	1ad3      	subs	r3, r2, r3
200077f2:	2b64      	cmp	r3, #100	@ 0x64
200077f4:	d901      	bls.n	200077fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200077f6:	2303      	movs	r3, #3
200077f8:	e007      	b.n	2000780a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
200077fa:	4b06      	ldr	r3, [pc, #24]	@ (20007814 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200077fc:	681b      	ldr	r3, [r3, #0]
200077fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20007802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20007806:	d1ef      	bne.n	200077e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
20007808:	2300      	movs	r3, #0
}
2000780a:	4618      	mov	r0, r3
2000780c:	3720      	adds	r7, #32
2000780e:	46bd      	mov	sp, r7
20007810:	bd80      	pop	{r7, pc}
20007812:	bf00      	nop
20007814:	40023800 	.word	0x40023800

20007818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20007818:	b580      	push	{r7, lr}
2000781a:	b084      	sub	sp, #16
2000781c:	af00      	add	r7, sp, #0
2000781e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
20007820:	687b      	ldr	r3, [r7, #4]
20007822:	2b00      	cmp	r3, #0
20007824:	d101      	bne.n	2000782a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20007826:	2301      	movs	r3, #1
20007828:	e09d      	b.n	20007966 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
2000782a:	687b      	ldr	r3, [r7, #4]
2000782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000782e:	2b00      	cmp	r3, #0
20007830:	d108      	bne.n	20007844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20007832:	687b      	ldr	r3, [r7, #4]
20007834:	685b      	ldr	r3, [r3, #4]
20007836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
2000783a:	d009      	beq.n	20007850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
2000783c:	687b      	ldr	r3, [r7, #4]
2000783e:	2200      	movs	r2, #0
20007840:	61da      	str	r2, [r3, #28]
20007842:	e005      	b.n	20007850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20007844:	687b      	ldr	r3, [r7, #4]
20007846:	2200      	movs	r2, #0
20007848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
2000784a:	687b      	ldr	r3, [r7, #4]
2000784c:	2200      	movs	r2, #0
2000784e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20007850:	687b      	ldr	r3, [r7, #4]
20007852:	2200      	movs	r2, #0
20007854:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20007856:	687b      	ldr	r3, [r7, #4]
20007858:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
2000785c:	b2db      	uxtb	r3, r3
2000785e:	2b00      	cmp	r3, #0
20007860:	d106      	bne.n	20007870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20007862:	687b      	ldr	r3, [r7, #4]
20007864:	2200      	movs	r2, #0
20007866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
2000786a:	6878      	ldr	r0, [r7, #4]
2000786c:	f7fc fbca 	bl	20004004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20007870:	687b      	ldr	r3, [r7, #4]
20007872:	2202      	movs	r2, #2
20007874:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20007878:	687b      	ldr	r3, [r7, #4]
2000787a:	681b      	ldr	r3, [r3, #0]
2000787c:	681a      	ldr	r2, [r3, #0]
2000787e:	687b      	ldr	r3, [r7, #4]
20007880:	681b      	ldr	r3, [r3, #0]
20007882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20007886:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20007888:	687b      	ldr	r3, [r7, #4]
2000788a:	68db      	ldr	r3, [r3, #12]
2000788c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20007890:	d902      	bls.n	20007898 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
20007892:	2300      	movs	r3, #0
20007894:	60fb      	str	r3, [r7, #12]
20007896:	e002      	b.n	2000789e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
20007898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
2000789c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
2000789e:	687b      	ldr	r3, [r7, #4]
200078a0:	68db      	ldr	r3, [r3, #12]
200078a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
200078a6:	d007      	beq.n	200078b8 <HAL_SPI_Init+0xa0>
200078a8:	687b      	ldr	r3, [r7, #4]
200078aa:	68db      	ldr	r3, [r3, #12]
200078ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
200078b0:	d002      	beq.n	200078b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200078b2:	687b      	ldr	r3, [r7, #4]
200078b4:	2200      	movs	r2, #0
200078b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
200078b8:	687b      	ldr	r3, [r7, #4]
200078ba:	685b      	ldr	r3, [r3, #4]
200078bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
200078c0:	687b      	ldr	r3, [r7, #4]
200078c2:	689b      	ldr	r3, [r3, #8]
200078c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
200078c8:	431a      	orrs	r2, r3
200078ca:	687b      	ldr	r3, [r7, #4]
200078cc:	691b      	ldr	r3, [r3, #16]
200078ce:	f003 0302 	and.w	r3, r3, #2
200078d2:	431a      	orrs	r2, r3
200078d4:	687b      	ldr	r3, [r7, #4]
200078d6:	695b      	ldr	r3, [r3, #20]
200078d8:	f003 0301 	and.w	r3, r3, #1
200078dc:	431a      	orrs	r2, r3
200078de:	687b      	ldr	r3, [r7, #4]
200078e0:	699b      	ldr	r3, [r3, #24]
200078e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
200078e6:	431a      	orrs	r2, r3
200078e8:	687b      	ldr	r3, [r7, #4]
200078ea:	69db      	ldr	r3, [r3, #28]
200078ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
200078f0:	431a      	orrs	r2, r3
200078f2:	687b      	ldr	r3, [r7, #4]
200078f4:	6a1b      	ldr	r3, [r3, #32]
200078f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200078fa:	ea42 0103 	orr.w	r1, r2, r3
200078fe:	687b      	ldr	r3, [r7, #4]
20007900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007902:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
20007906:	687b      	ldr	r3, [r7, #4]
20007908:	681b      	ldr	r3, [r3, #0]
2000790a:	430a      	orrs	r2, r1
2000790c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
2000790e:	687b      	ldr	r3, [r7, #4]
20007910:	699b      	ldr	r3, [r3, #24]
20007912:	0c1b      	lsrs	r3, r3, #16
20007914:	f003 0204 	and.w	r2, r3, #4
20007918:	687b      	ldr	r3, [r7, #4]
2000791a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000791c:	f003 0310 	and.w	r3, r3, #16
20007920:	431a      	orrs	r2, r3
20007922:	687b      	ldr	r3, [r7, #4]
20007924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20007926:	f003 0308 	and.w	r3, r3, #8
2000792a:	431a      	orrs	r2, r3
2000792c:	687b      	ldr	r3, [r7, #4]
2000792e:	68db      	ldr	r3, [r3, #12]
20007930:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
20007934:	ea42 0103 	orr.w	r1, r2, r3
20007938:	68fb      	ldr	r3, [r7, #12]
2000793a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
2000793e:	687b      	ldr	r3, [r7, #4]
20007940:	681b      	ldr	r3, [r3, #0]
20007942:	430a      	orrs	r2, r1
20007944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20007946:	687b      	ldr	r3, [r7, #4]
20007948:	681b      	ldr	r3, [r3, #0]
2000794a:	69da      	ldr	r2, [r3, #28]
2000794c:	687b      	ldr	r3, [r7, #4]
2000794e:	681b      	ldr	r3, [r3, #0]
20007950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
20007954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20007956:	687b      	ldr	r3, [r7, #4]
20007958:	2200      	movs	r2, #0
2000795a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
2000795c:	687b      	ldr	r3, [r7, #4]
2000795e:	2201      	movs	r2, #1
20007960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
20007964:	2300      	movs	r3, #0
}
20007966:	4618      	mov	r0, r3
20007968:	3710      	adds	r7, #16
2000796a:	46bd      	mov	sp, r7
2000796c:	bd80      	pop	{r7, pc}

2000796e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
2000796e:	b580      	push	{r7, lr}
20007970:	b082      	sub	sp, #8
20007972:	af00      	add	r7, sp, #0
20007974:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
20007976:	687b      	ldr	r3, [r7, #4]
20007978:	2b00      	cmp	r3, #0
2000797a:	d101      	bne.n	20007980 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
2000797c:	2301      	movs	r3, #1
2000797e:	e040      	b.n	20007a02 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
20007980:	687b      	ldr	r3, [r7, #4]
20007982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20007984:	2b00      	cmp	r3, #0
20007986:	d106      	bne.n	20007996 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
20007988:	687b      	ldr	r3, [r7, #4]
2000798a:	2200      	movs	r2, #0
2000798c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
20007990:	6878      	ldr	r0, [r7, #4]
20007992:	f7fc fbcb 	bl	2000412c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
20007996:	687b      	ldr	r3, [r7, #4]
20007998:	2224      	movs	r2, #36	@ 0x24
2000799a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
2000799c:	687b      	ldr	r3, [r7, #4]
2000799e:	681b      	ldr	r3, [r3, #0]
200079a0:	681a      	ldr	r2, [r3, #0]
200079a2:	687b      	ldr	r3, [r7, #4]
200079a4:	681b      	ldr	r3, [r3, #0]
200079a6:	f022 0201 	bic.w	r2, r2, #1
200079aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
200079ac:	687b      	ldr	r3, [r7, #4]
200079ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200079b0:	2b00      	cmp	r3, #0
200079b2:	d002      	beq.n	200079ba <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
200079b4:	6878      	ldr	r0, [r7, #4]
200079b6:	f000 fa8d 	bl	20007ed4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
200079ba:	6878      	ldr	r0, [r7, #4]
200079bc:	f000 f826 	bl	20007a0c <UART_SetConfig>
200079c0:	4603      	mov	r3, r0
200079c2:	2b01      	cmp	r3, #1
200079c4:	d101      	bne.n	200079ca <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
200079c6:	2301      	movs	r3, #1
200079c8:	e01b      	b.n	20007a02 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
200079ca:	687b      	ldr	r3, [r7, #4]
200079cc:	681b      	ldr	r3, [r3, #0]
200079ce:	685a      	ldr	r2, [r3, #4]
200079d0:	687b      	ldr	r3, [r7, #4]
200079d2:	681b      	ldr	r3, [r3, #0]
200079d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
200079d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
200079da:	687b      	ldr	r3, [r7, #4]
200079dc:	681b      	ldr	r3, [r3, #0]
200079de:	689a      	ldr	r2, [r3, #8]
200079e0:	687b      	ldr	r3, [r7, #4]
200079e2:	681b      	ldr	r3, [r3, #0]
200079e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
200079e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
200079ea:	687b      	ldr	r3, [r7, #4]
200079ec:	681b      	ldr	r3, [r3, #0]
200079ee:	681a      	ldr	r2, [r3, #0]
200079f0:	687b      	ldr	r3, [r7, #4]
200079f2:	681b      	ldr	r3, [r3, #0]
200079f4:	f042 0201 	orr.w	r2, r2, #1
200079f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
200079fa:	6878      	ldr	r0, [r7, #4]
200079fc:	f000 fb0c 	bl	20008018 <UART_CheckIdleState>
20007a00:	4603      	mov	r3, r0
}
20007a02:	4618      	mov	r0, r3
20007a04:	3708      	adds	r7, #8
20007a06:	46bd      	mov	sp, r7
20007a08:	bd80      	pop	{r7, pc}
	...

20007a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
20007a0c:	b580      	push	{r7, lr}
20007a0e:	b088      	sub	sp, #32
20007a10:	af00      	add	r7, sp, #0
20007a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
20007a14:	2300      	movs	r3, #0
20007a16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
20007a18:	687b      	ldr	r3, [r7, #4]
20007a1a:	689a      	ldr	r2, [r3, #8]
20007a1c:	687b      	ldr	r3, [r7, #4]
20007a1e:	691b      	ldr	r3, [r3, #16]
20007a20:	431a      	orrs	r2, r3
20007a22:	687b      	ldr	r3, [r7, #4]
20007a24:	695b      	ldr	r3, [r3, #20]
20007a26:	431a      	orrs	r2, r3
20007a28:	687b      	ldr	r3, [r7, #4]
20007a2a:	69db      	ldr	r3, [r3, #28]
20007a2c:	4313      	orrs	r3, r2
20007a2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
20007a30:	687b      	ldr	r3, [r7, #4]
20007a32:	681b      	ldr	r3, [r3, #0]
20007a34:	681a      	ldr	r2, [r3, #0]
20007a36:	4ba6      	ldr	r3, [pc, #664]	@ (20007cd0 <UART_SetConfig+0x2c4>)
20007a38:	4013      	ands	r3, r2
20007a3a:	687a      	ldr	r2, [r7, #4]
20007a3c:	6812      	ldr	r2, [r2, #0]
20007a3e:	6979      	ldr	r1, [r7, #20]
20007a40:	430b      	orrs	r3, r1
20007a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
20007a44:	687b      	ldr	r3, [r7, #4]
20007a46:	681b      	ldr	r3, [r3, #0]
20007a48:	685b      	ldr	r3, [r3, #4]
20007a4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
20007a4e:	687b      	ldr	r3, [r7, #4]
20007a50:	68da      	ldr	r2, [r3, #12]
20007a52:	687b      	ldr	r3, [r7, #4]
20007a54:	681b      	ldr	r3, [r3, #0]
20007a56:	430a      	orrs	r2, r1
20007a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
20007a5a:	687b      	ldr	r3, [r7, #4]
20007a5c:	699b      	ldr	r3, [r3, #24]
20007a5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
20007a60:	687b      	ldr	r3, [r7, #4]
20007a62:	6a1b      	ldr	r3, [r3, #32]
20007a64:	697a      	ldr	r2, [r7, #20]
20007a66:	4313      	orrs	r3, r2
20007a68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
20007a6a:	687b      	ldr	r3, [r7, #4]
20007a6c:	681b      	ldr	r3, [r3, #0]
20007a6e:	689b      	ldr	r3, [r3, #8]
20007a70:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
20007a74:	687b      	ldr	r3, [r7, #4]
20007a76:	681b      	ldr	r3, [r3, #0]
20007a78:	697a      	ldr	r2, [r7, #20]
20007a7a:	430a      	orrs	r2, r1
20007a7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
20007a7e:	687b      	ldr	r3, [r7, #4]
20007a80:	681b      	ldr	r3, [r3, #0]
20007a82:	4a94      	ldr	r2, [pc, #592]	@ (20007cd4 <UART_SetConfig+0x2c8>)
20007a84:	4293      	cmp	r3, r2
20007a86:	d120      	bne.n	20007aca <UART_SetConfig+0xbe>
20007a88:	4b93      	ldr	r3, [pc, #588]	@ (20007cd8 <UART_SetConfig+0x2cc>)
20007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007a8e:	f003 0303 	and.w	r3, r3, #3
20007a92:	2b03      	cmp	r3, #3
20007a94:	d816      	bhi.n	20007ac4 <UART_SetConfig+0xb8>
20007a96:	a201      	add	r2, pc, #4	@ (adr r2, 20007a9c <UART_SetConfig+0x90>)
20007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20007a9c:	20007aad 	.word	0x20007aad
20007aa0:	20007ab9 	.word	0x20007ab9
20007aa4:	20007ab3 	.word	0x20007ab3
20007aa8:	20007abf 	.word	0x20007abf
20007aac:	2301      	movs	r3, #1
20007aae:	77fb      	strb	r3, [r7, #31]
20007ab0:	e150      	b.n	20007d54 <UART_SetConfig+0x348>
20007ab2:	2302      	movs	r3, #2
20007ab4:	77fb      	strb	r3, [r7, #31]
20007ab6:	e14d      	b.n	20007d54 <UART_SetConfig+0x348>
20007ab8:	2304      	movs	r3, #4
20007aba:	77fb      	strb	r3, [r7, #31]
20007abc:	e14a      	b.n	20007d54 <UART_SetConfig+0x348>
20007abe:	2308      	movs	r3, #8
20007ac0:	77fb      	strb	r3, [r7, #31]
20007ac2:	e147      	b.n	20007d54 <UART_SetConfig+0x348>
20007ac4:	2310      	movs	r3, #16
20007ac6:	77fb      	strb	r3, [r7, #31]
20007ac8:	e144      	b.n	20007d54 <UART_SetConfig+0x348>
20007aca:	687b      	ldr	r3, [r7, #4]
20007acc:	681b      	ldr	r3, [r3, #0]
20007ace:	4a83      	ldr	r2, [pc, #524]	@ (20007cdc <UART_SetConfig+0x2d0>)
20007ad0:	4293      	cmp	r3, r2
20007ad2:	d132      	bne.n	20007b3a <UART_SetConfig+0x12e>
20007ad4:	4b80      	ldr	r3, [pc, #512]	@ (20007cd8 <UART_SetConfig+0x2cc>)
20007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007ada:	f003 030c 	and.w	r3, r3, #12
20007ade:	2b0c      	cmp	r3, #12
20007ae0:	d828      	bhi.n	20007b34 <UART_SetConfig+0x128>
20007ae2:	a201      	add	r2, pc, #4	@ (adr r2, 20007ae8 <UART_SetConfig+0xdc>)
20007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20007ae8:	20007b1d 	.word	0x20007b1d
20007aec:	20007b35 	.word	0x20007b35
20007af0:	20007b35 	.word	0x20007b35
20007af4:	20007b35 	.word	0x20007b35
20007af8:	20007b29 	.word	0x20007b29
20007afc:	20007b35 	.word	0x20007b35
20007b00:	20007b35 	.word	0x20007b35
20007b04:	20007b35 	.word	0x20007b35
20007b08:	20007b23 	.word	0x20007b23
20007b0c:	20007b35 	.word	0x20007b35
20007b10:	20007b35 	.word	0x20007b35
20007b14:	20007b35 	.word	0x20007b35
20007b18:	20007b2f 	.word	0x20007b2f
20007b1c:	2300      	movs	r3, #0
20007b1e:	77fb      	strb	r3, [r7, #31]
20007b20:	e118      	b.n	20007d54 <UART_SetConfig+0x348>
20007b22:	2302      	movs	r3, #2
20007b24:	77fb      	strb	r3, [r7, #31]
20007b26:	e115      	b.n	20007d54 <UART_SetConfig+0x348>
20007b28:	2304      	movs	r3, #4
20007b2a:	77fb      	strb	r3, [r7, #31]
20007b2c:	e112      	b.n	20007d54 <UART_SetConfig+0x348>
20007b2e:	2308      	movs	r3, #8
20007b30:	77fb      	strb	r3, [r7, #31]
20007b32:	e10f      	b.n	20007d54 <UART_SetConfig+0x348>
20007b34:	2310      	movs	r3, #16
20007b36:	77fb      	strb	r3, [r7, #31]
20007b38:	e10c      	b.n	20007d54 <UART_SetConfig+0x348>
20007b3a:	687b      	ldr	r3, [r7, #4]
20007b3c:	681b      	ldr	r3, [r3, #0]
20007b3e:	4a68      	ldr	r2, [pc, #416]	@ (20007ce0 <UART_SetConfig+0x2d4>)
20007b40:	4293      	cmp	r3, r2
20007b42:	d120      	bne.n	20007b86 <UART_SetConfig+0x17a>
20007b44:	4b64      	ldr	r3, [pc, #400]	@ (20007cd8 <UART_SetConfig+0x2cc>)
20007b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007b4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
20007b4e:	2b30      	cmp	r3, #48	@ 0x30
20007b50:	d013      	beq.n	20007b7a <UART_SetConfig+0x16e>
20007b52:	2b30      	cmp	r3, #48	@ 0x30
20007b54:	d814      	bhi.n	20007b80 <UART_SetConfig+0x174>
20007b56:	2b20      	cmp	r3, #32
20007b58:	d009      	beq.n	20007b6e <UART_SetConfig+0x162>
20007b5a:	2b20      	cmp	r3, #32
20007b5c:	d810      	bhi.n	20007b80 <UART_SetConfig+0x174>
20007b5e:	2b00      	cmp	r3, #0
20007b60:	d002      	beq.n	20007b68 <UART_SetConfig+0x15c>
20007b62:	2b10      	cmp	r3, #16
20007b64:	d006      	beq.n	20007b74 <UART_SetConfig+0x168>
20007b66:	e00b      	b.n	20007b80 <UART_SetConfig+0x174>
20007b68:	2300      	movs	r3, #0
20007b6a:	77fb      	strb	r3, [r7, #31]
20007b6c:	e0f2      	b.n	20007d54 <UART_SetConfig+0x348>
20007b6e:	2302      	movs	r3, #2
20007b70:	77fb      	strb	r3, [r7, #31]
20007b72:	e0ef      	b.n	20007d54 <UART_SetConfig+0x348>
20007b74:	2304      	movs	r3, #4
20007b76:	77fb      	strb	r3, [r7, #31]
20007b78:	e0ec      	b.n	20007d54 <UART_SetConfig+0x348>
20007b7a:	2308      	movs	r3, #8
20007b7c:	77fb      	strb	r3, [r7, #31]
20007b7e:	e0e9      	b.n	20007d54 <UART_SetConfig+0x348>
20007b80:	2310      	movs	r3, #16
20007b82:	77fb      	strb	r3, [r7, #31]
20007b84:	e0e6      	b.n	20007d54 <UART_SetConfig+0x348>
20007b86:	687b      	ldr	r3, [r7, #4]
20007b88:	681b      	ldr	r3, [r3, #0]
20007b8a:	4a56      	ldr	r2, [pc, #344]	@ (20007ce4 <UART_SetConfig+0x2d8>)
20007b8c:	4293      	cmp	r3, r2
20007b8e:	d120      	bne.n	20007bd2 <UART_SetConfig+0x1c6>
20007b90:	4b51      	ldr	r3, [pc, #324]	@ (20007cd8 <UART_SetConfig+0x2cc>)
20007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007b96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
20007b9a:	2bc0      	cmp	r3, #192	@ 0xc0
20007b9c:	d013      	beq.n	20007bc6 <UART_SetConfig+0x1ba>
20007b9e:	2bc0      	cmp	r3, #192	@ 0xc0
20007ba0:	d814      	bhi.n	20007bcc <UART_SetConfig+0x1c0>
20007ba2:	2b80      	cmp	r3, #128	@ 0x80
20007ba4:	d009      	beq.n	20007bba <UART_SetConfig+0x1ae>
20007ba6:	2b80      	cmp	r3, #128	@ 0x80
20007ba8:	d810      	bhi.n	20007bcc <UART_SetConfig+0x1c0>
20007baa:	2b00      	cmp	r3, #0
20007bac:	d002      	beq.n	20007bb4 <UART_SetConfig+0x1a8>
20007bae:	2b40      	cmp	r3, #64	@ 0x40
20007bb0:	d006      	beq.n	20007bc0 <UART_SetConfig+0x1b4>
20007bb2:	e00b      	b.n	20007bcc <UART_SetConfig+0x1c0>
20007bb4:	2300      	movs	r3, #0
20007bb6:	77fb      	strb	r3, [r7, #31]
20007bb8:	e0cc      	b.n	20007d54 <UART_SetConfig+0x348>
20007bba:	2302      	movs	r3, #2
20007bbc:	77fb      	strb	r3, [r7, #31]
20007bbe:	e0c9      	b.n	20007d54 <UART_SetConfig+0x348>
20007bc0:	2304      	movs	r3, #4
20007bc2:	77fb      	strb	r3, [r7, #31]
20007bc4:	e0c6      	b.n	20007d54 <UART_SetConfig+0x348>
20007bc6:	2308      	movs	r3, #8
20007bc8:	77fb      	strb	r3, [r7, #31]
20007bca:	e0c3      	b.n	20007d54 <UART_SetConfig+0x348>
20007bcc:	2310      	movs	r3, #16
20007bce:	77fb      	strb	r3, [r7, #31]
20007bd0:	e0c0      	b.n	20007d54 <UART_SetConfig+0x348>
20007bd2:	687b      	ldr	r3, [r7, #4]
20007bd4:	681b      	ldr	r3, [r3, #0]
20007bd6:	4a44      	ldr	r2, [pc, #272]	@ (20007ce8 <UART_SetConfig+0x2dc>)
20007bd8:	4293      	cmp	r3, r2
20007bda:	d125      	bne.n	20007c28 <UART_SetConfig+0x21c>
20007bdc:	4b3e      	ldr	r3, [pc, #248]	@ (20007cd8 <UART_SetConfig+0x2cc>)
20007bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20007be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20007bea:	d017      	beq.n	20007c1c <UART_SetConfig+0x210>
20007bec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20007bf0:	d817      	bhi.n	20007c22 <UART_SetConfig+0x216>
20007bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20007bf6:	d00b      	beq.n	20007c10 <UART_SetConfig+0x204>
20007bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20007bfc:	d811      	bhi.n	20007c22 <UART_SetConfig+0x216>
20007bfe:	2b00      	cmp	r3, #0
20007c00:	d003      	beq.n	20007c0a <UART_SetConfig+0x1fe>
20007c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20007c06:	d006      	beq.n	20007c16 <UART_SetConfig+0x20a>
20007c08:	e00b      	b.n	20007c22 <UART_SetConfig+0x216>
20007c0a:	2300      	movs	r3, #0
20007c0c:	77fb      	strb	r3, [r7, #31]
20007c0e:	e0a1      	b.n	20007d54 <UART_SetConfig+0x348>
20007c10:	2302      	movs	r3, #2
20007c12:	77fb      	strb	r3, [r7, #31]
20007c14:	e09e      	b.n	20007d54 <UART_SetConfig+0x348>
20007c16:	2304      	movs	r3, #4
20007c18:	77fb      	strb	r3, [r7, #31]
20007c1a:	e09b      	b.n	20007d54 <UART_SetConfig+0x348>
20007c1c:	2308      	movs	r3, #8
20007c1e:	77fb      	strb	r3, [r7, #31]
20007c20:	e098      	b.n	20007d54 <UART_SetConfig+0x348>
20007c22:	2310      	movs	r3, #16
20007c24:	77fb      	strb	r3, [r7, #31]
20007c26:	e095      	b.n	20007d54 <UART_SetConfig+0x348>
20007c28:	687b      	ldr	r3, [r7, #4]
20007c2a:	681b      	ldr	r3, [r3, #0]
20007c2c:	4a2f      	ldr	r2, [pc, #188]	@ (20007cec <UART_SetConfig+0x2e0>)
20007c2e:	4293      	cmp	r3, r2
20007c30:	d125      	bne.n	20007c7e <UART_SetConfig+0x272>
20007c32:	4b29      	ldr	r3, [pc, #164]	@ (20007cd8 <UART_SetConfig+0x2cc>)
20007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007c38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
20007c3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20007c40:	d017      	beq.n	20007c72 <UART_SetConfig+0x266>
20007c42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20007c46:	d817      	bhi.n	20007c78 <UART_SetConfig+0x26c>
20007c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20007c4c:	d00b      	beq.n	20007c66 <UART_SetConfig+0x25a>
20007c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20007c52:	d811      	bhi.n	20007c78 <UART_SetConfig+0x26c>
20007c54:	2b00      	cmp	r3, #0
20007c56:	d003      	beq.n	20007c60 <UART_SetConfig+0x254>
20007c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20007c5c:	d006      	beq.n	20007c6c <UART_SetConfig+0x260>
20007c5e:	e00b      	b.n	20007c78 <UART_SetConfig+0x26c>
20007c60:	2301      	movs	r3, #1
20007c62:	77fb      	strb	r3, [r7, #31]
20007c64:	e076      	b.n	20007d54 <UART_SetConfig+0x348>
20007c66:	2302      	movs	r3, #2
20007c68:	77fb      	strb	r3, [r7, #31]
20007c6a:	e073      	b.n	20007d54 <UART_SetConfig+0x348>
20007c6c:	2304      	movs	r3, #4
20007c6e:	77fb      	strb	r3, [r7, #31]
20007c70:	e070      	b.n	20007d54 <UART_SetConfig+0x348>
20007c72:	2308      	movs	r3, #8
20007c74:	77fb      	strb	r3, [r7, #31]
20007c76:	e06d      	b.n	20007d54 <UART_SetConfig+0x348>
20007c78:	2310      	movs	r3, #16
20007c7a:	77fb      	strb	r3, [r7, #31]
20007c7c:	e06a      	b.n	20007d54 <UART_SetConfig+0x348>
20007c7e:	687b      	ldr	r3, [r7, #4]
20007c80:	681b      	ldr	r3, [r3, #0]
20007c82:	4a1b      	ldr	r2, [pc, #108]	@ (20007cf0 <UART_SetConfig+0x2e4>)
20007c84:	4293      	cmp	r3, r2
20007c86:	d138      	bne.n	20007cfa <UART_SetConfig+0x2ee>
20007c88:	4b13      	ldr	r3, [pc, #76]	@ (20007cd8 <UART_SetConfig+0x2cc>)
20007c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007c8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
20007c92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20007c96:	d017      	beq.n	20007cc8 <UART_SetConfig+0x2bc>
20007c98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20007c9c:	d82a      	bhi.n	20007cf4 <UART_SetConfig+0x2e8>
20007c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20007ca2:	d00b      	beq.n	20007cbc <UART_SetConfig+0x2b0>
20007ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20007ca8:	d824      	bhi.n	20007cf4 <UART_SetConfig+0x2e8>
20007caa:	2b00      	cmp	r3, #0
20007cac:	d003      	beq.n	20007cb6 <UART_SetConfig+0x2aa>
20007cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20007cb2:	d006      	beq.n	20007cc2 <UART_SetConfig+0x2b6>
20007cb4:	e01e      	b.n	20007cf4 <UART_SetConfig+0x2e8>
20007cb6:	2300      	movs	r3, #0
20007cb8:	77fb      	strb	r3, [r7, #31]
20007cba:	e04b      	b.n	20007d54 <UART_SetConfig+0x348>
20007cbc:	2302      	movs	r3, #2
20007cbe:	77fb      	strb	r3, [r7, #31]
20007cc0:	e048      	b.n	20007d54 <UART_SetConfig+0x348>
20007cc2:	2304      	movs	r3, #4
20007cc4:	77fb      	strb	r3, [r7, #31]
20007cc6:	e045      	b.n	20007d54 <UART_SetConfig+0x348>
20007cc8:	2308      	movs	r3, #8
20007cca:	77fb      	strb	r3, [r7, #31]
20007ccc:	e042      	b.n	20007d54 <UART_SetConfig+0x348>
20007cce:	bf00      	nop
20007cd0:	efff69f3 	.word	0xefff69f3
20007cd4:	40011000 	.word	0x40011000
20007cd8:	40023800 	.word	0x40023800
20007cdc:	40004400 	.word	0x40004400
20007ce0:	40004800 	.word	0x40004800
20007ce4:	40004c00 	.word	0x40004c00
20007ce8:	40005000 	.word	0x40005000
20007cec:	40011400 	.word	0x40011400
20007cf0:	40007800 	.word	0x40007800
20007cf4:	2310      	movs	r3, #16
20007cf6:	77fb      	strb	r3, [r7, #31]
20007cf8:	e02c      	b.n	20007d54 <UART_SetConfig+0x348>
20007cfa:	687b      	ldr	r3, [r7, #4]
20007cfc:	681b      	ldr	r3, [r3, #0]
20007cfe:	4a72      	ldr	r2, [pc, #456]	@ (20007ec8 <UART_SetConfig+0x4bc>)
20007d00:	4293      	cmp	r3, r2
20007d02:	d125      	bne.n	20007d50 <UART_SetConfig+0x344>
20007d04:	4b71      	ldr	r3, [pc, #452]	@ (20007ecc <UART_SetConfig+0x4c0>)
20007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007d0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20007d0e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20007d12:	d017      	beq.n	20007d44 <UART_SetConfig+0x338>
20007d14:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20007d18:	d817      	bhi.n	20007d4a <UART_SetConfig+0x33e>
20007d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20007d1e:	d00b      	beq.n	20007d38 <UART_SetConfig+0x32c>
20007d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20007d24:	d811      	bhi.n	20007d4a <UART_SetConfig+0x33e>
20007d26:	2b00      	cmp	r3, #0
20007d28:	d003      	beq.n	20007d32 <UART_SetConfig+0x326>
20007d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20007d2e:	d006      	beq.n	20007d3e <UART_SetConfig+0x332>
20007d30:	e00b      	b.n	20007d4a <UART_SetConfig+0x33e>
20007d32:	2300      	movs	r3, #0
20007d34:	77fb      	strb	r3, [r7, #31]
20007d36:	e00d      	b.n	20007d54 <UART_SetConfig+0x348>
20007d38:	2302      	movs	r3, #2
20007d3a:	77fb      	strb	r3, [r7, #31]
20007d3c:	e00a      	b.n	20007d54 <UART_SetConfig+0x348>
20007d3e:	2304      	movs	r3, #4
20007d40:	77fb      	strb	r3, [r7, #31]
20007d42:	e007      	b.n	20007d54 <UART_SetConfig+0x348>
20007d44:	2308      	movs	r3, #8
20007d46:	77fb      	strb	r3, [r7, #31]
20007d48:	e004      	b.n	20007d54 <UART_SetConfig+0x348>
20007d4a:	2310      	movs	r3, #16
20007d4c:	77fb      	strb	r3, [r7, #31]
20007d4e:	e001      	b.n	20007d54 <UART_SetConfig+0x348>
20007d50:	2310      	movs	r3, #16
20007d52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20007d54:	687b      	ldr	r3, [r7, #4]
20007d56:	69db      	ldr	r3, [r3, #28]
20007d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20007d5c:	d15b      	bne.n	20007e16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
20007d5e:	7ffb      	ldrb	r3, [r7, #31]
20007d60:	2b08      	cmp	r3, #8
20007d62:	d828      	bhi.n	20007db6 <UART_SetConfig+0x3aa>
20007d64:	a201      	add	r2, pc, #4	@ (adr r2, 20007d6c <UART_SetConfig+0x360>)
20007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20007d6a:	bf00      	nop
20007d6c:	20007d91 	.word	0x20007d91
20007d70:	20007d99 	.word	0x20007d99
20007d74:	20007da1 	.word	0x20007da1
20007d78:	20007db7 	.word	0x20007db7
20007d7c:	20007da7 	.word	0x20007da7
20007d80:	20007db7 	.word	0x20007db7
20007d84:	20007db7 	.word	0x20007db7
20007d88:	20007db7 	.word	0x20007db7
20007d8c:	20007daf 	.word	0x20007daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20007d90:	f7ff f92a 	bl	20006fe8 <HAL_RCC_GetPCLK1Freq>
20007d94:	61b8      	str	r0, [r7, #24]
        break;
20007d96:	e013      	b.n	20007dc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20007d98:	f7ff f93a 	bl	20007010 <HAL_RCC_GetPCLK2Freq>
20007d9c:	61b8      	str	r0, [r7, #24]
        break;
20007d9e:	e00f      	b.n	20007dc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20007da0:	4b4b      	ldr	r3, [pc, #300]	@ (20007ed0 <UART_SetConfig+0x4c4>)
20007da2:	61bb      	str	r3, [r7, #24]
        break;
20007da4:	e00c      	b.n	20007dc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20007da6:	f7ff f80d 	bl	20006dc4 <HAL_RCC_GetSysClockFreq>
20007daa:	61b8      	str	r0, [r7, #24]
        break;
20007dac:	e008      	b.n	20007dc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20007dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20007db2:	61bb      	str	r3, [r7, #24]
        break;
20007db4:	e004      	b.n	20007dc0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
20007db6:	2300      	movs	r3, #0
20007db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20007dba:	2301      	movs	r3, #1
20007dbc:	77bb      	strb	r3, [r7, #30]
        break;
20007dbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
20007dc0:	69bb      	ldr	r3, [r7, #24]
20007dc2:	2b00      	cmp	r3, #0
20007dc4:	d074      	beq.n	20007eb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
20007dc6:	69bb      	ldr	r3, [r7, #24]
20007dc8:	005a      	lsls	r2, r3, #1
20007dca:	687b      	ldr	r3, [r7, #4]
20007dcc:	685b      	ldr	r3, [r3, #4]
20007dce:	085b      	lsrs	r3, r3, #1
20007dd0:	441a      	add	r2, r3
20007dd2:	687b      	ldr	r3, [r7, #4]
20007dd4:	685b      	ldr	r3, [r3, #4]
20007dd6:	fbb2 f3f3 	udiv	r3, r2, r3
20007dda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
20007ddc:	693b      	ldr	r3, [r7, #16]
20007dde:	2b0f      	cmp	r3, #15
20007de0:	d916      	bls.n	20007e10 <UART_SetConfig+0x404>
20007de2:	693b      	ldr	r3, [r7, #16]
20007de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20007de8:	d212      	bcs.n	20007e10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
20007dea:	693b      	ldr	r3, [r7, #16]
20007dec:	b29b      	uxth	r3, r3
20007dee:	f023 030f 	bic.w	r3, r3, #15
20007df2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
20007df4:	693b      	ldr	r3, [r7, #16]
20007df6:	085b      	lsrs	r3, r3, #1
20007df8:	b29b      	uxth	r3, r3
20007dfa:	f003 0307 	and.w	r3, r3, #7
20007dfe:	b29a      	uxth	r2, r3
20007e00:	89fb      	ldrh	r3, [r7, #14]
20007e02:	4313      	orrs	r3, r2
20007e04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
20007e06:	687b      	ldr	r3, [r7, #4]
20007e08:	681b      	ldr	r3, [r3, #0]
20007e0a:	89fa      	ldrh	r2, [r7, #14]
20007e0c:	60da      	str	r2, [r3, #12]
20007e0e:	e04f      	b.n	20007eb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20007e10:	2301      	movs	r3, #1
20007e12:	77bb      	strb	r3, [r7, #30]
20007e14:	e04c      	b.n	20007eb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
20007e16:	7ffb      	ldrb	r3, [r7, #31]
20007e18:	2b08      	cmp	r3, #8
20007e1a:	d828      	bhi.n	20007e6e <UART_SetConfig+0x462>
20007e1c:	a201      	add	r2, pc, #4	@ (adr r2, 20007e24 <UART_SetConfig+0x418>)
20007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20007e22:	bf00      	nop
20007e24:	20007e49 	.word	0x20007e49
20007e28:	20007e51 	.word	0x20007e51
20007e2c:	20007e59 	.word	0x20007e59
20007e30:	20007e6f 	.word	0x20007e6f
20007e34:	20007e5f 	.word	0x20007e5f
20007e38:	20007e6f 	.word	0x20007e6f
20007e3c:	20007e6f 	.word	0x20007e6f
20007e40:	20007e6f 	.word	0x20007e6f
20007e44:	20007e67 	.word	0x20007e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20007e48:	f7ff f8ce 	bl	20006fe8 <HAL_RCC_GetPCLK1Freq>
20007e4c:	61b8      	str	r0, [r7, #24]
        break;
20007e4e:	e013      	b.n	20007e78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20007e50:	f7ff f8de 	bl	20007010 <HAL_RCC_GetPCLK2Freq>
20007e54:	61b8      	str	r0, [r7, #24]
        break;
20007e56:	e00f      	b.n	20007e78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20007e58:	4b1d      	ldr	r3, [pc, #116]	@ (20007ed0 <UART_SetConfig+0x4c4>)
20007e5a:	61bb      	str	r3, [r7, #24]
        break;
20007e5c:	e00c      	b.n	20007e78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20007e5e:	f7fe ffb1 	bl	20006dc4 <HAL_RCC_GetSysClockFreq>
20007e62:	61b8      	str	r0, [r7, #24]
        break;
20007e64:	e008      	b.n	20007e78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20007e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20007e6a:	61bb      	str	r3, [r7, #24]
        break;
20007e6c:	e004      	b.n	20007e78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
20007e6e:	2300      	movs	r3, #0
20007e70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20007e72:	2301      	movs	r3, #1
20007e74:	77bb      	strb	r3, [r7, #30]
        break;
20007e76:	bf00      	nop
    }

    if (pclk != 0U)
20007e78:	69bb      	ldr	r3, [r7, #24]
20007e7a:	2b00      	cmp	r3, #0
20007e7c:	d018      	beq.n	20007eb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
20007e7e:	687b      	ldr	r3, [r7, #4]
20007e80:	685b      	ldr	r3, [r3, #4]
20007e82:	085a      	lsrs	r2, r3, #1
20007e84:	69bb      	ldr	r3, [r7, #24]
20007e86:	441a      	add	r2, r3
20007e88:	687b      	ldr	r3, [r7, #4]
20007e8a:	685b      	ldr	r3, [r3, #4]
20007e8c:	fbb2 f3f3 	udiv	r3, r2, r3
20007e90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
20007e92:	693b      	ldr	r3, [r7, #16]
20007e94:	2b0f      	cmp	r3, #15
20007e96:	d909      	bls.n	20007eac <UART_SetConfig+0x4a0>
20007e98:	693b      	ldr	r3, [r7, #16]
20007e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20007e9e:	d205      	bcs.n	20007eac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
20007ea0:	693b      	ldr	r3, [r7, #16]
20007ea2:	b29a      	uxth	r2, r3
20007ea4:	687b      	ldr	r3, [r7, #4]
20007ea6:	681b      	ldr	r3, [r3, #0]
20007ea8:	60da      	str	r2, [r3, #12]
20007eaa:	e001      	b.n	20007eb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20007eac:	2301      	movs	r3, #1
20007eae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
20007eb0:	687b      	ldr	r3, [r7, #4]
20007eb2:	2200      	movs	r2, #0
20007eb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
20007eb6:	687b      	ldr	r3, [r7, #4]
20007eb8:	2200      	movs	r2, #0
20007eba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
20007ebc:	7fbb      	ldrb	r3, [r7, #30]
}
20007ebe:	4618      	mov	r0, r3
20007ec0:	3720      	adds	r7, #32
20007ec2:	46bd      	mov	sp, r7
20007ec4:	bd80      	pop	{r7, pc}
20007ec6:	bf00      	nop
20007ec8:	40007c00 	.word	0x40007c00
20007ecc:	40023800 	.word	0x40023800
20007ed0:	00f42400 	.word	0x00f42400

20007ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
20007ed4:	b480      	push	{r7}
20007ed6:	b083      	sub	sp, #12
20007ed8:	af00      	add	r7, sp, #0
20007eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
20007edc:	687b      	ldr	r3, [r7, #4]
20007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007ee0:	f003 0308 	and.w	r3, r3, #8
20007ee4:	2b00      	cmp	r3, #0
20007ee6:	d00a      	beq.n	20007efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
20007ee8:	687b      	ldr	r3, [r7, #4]
20007eea:	681b      	ldr	r3, [r3, #0]
20007eec:	685b      	ldr	r3, [r3, #4]
20007eee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
20007ef2:	687b      	ldr	r3, [r7, #4]
20007ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20007ef6:	687b      	ldr	r3, [r7, #4]
20007ef8:	681b      	ldr	r3, [r3, #0]
20007efa:	430a      	orrs	r2, r1
20007efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
20007efe:	687b      	ldr	r3, [r7, #4]
20007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007f02:	f003 0301 	and.w	r3, r3, #1
20007f06:	2b00      	cmp	r3, #0
20007f08:	d00a      	beq.n	20007f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
20007f0a:	687b      	ldr	r3, [r7, #4]
20007f0c:	681b      	ldr	r3, [r3, #0]
20007f0e:	685b      	ldr	r3, [r3, #4]
20007f10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
20007f14:	687b      	ldr	r3, [r7, #4]
20007f16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20007f18:	687b      	ldr	r3, [r7, #4]
20007f1a:	681b      	ldr	r3, [r3, #0]
20007f1c:	430a      	orrs	r2, r1
20007f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
20007f20:	687b      	ldr	r3, [r7, #4]
20007f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007f24:	f003 0302 	and.w	r3, r3, #2
20007f28:	2b00      	cmp	r3, #0
20007f2a:	d00a      	beq.n	20007f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
20007f2c:	687b      	ldr	r3, [r7, #4]
20007f2e:	681b      	ldr	r3, [r3, #0]
20007f30:	685b      	ldr	r3, [r3, #4]
20007f32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
20007f36:	687b      	ldr	r3, [r7, #4]
20007f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20007f3a:	687b      	ldr	r3, [r7, #4]
20007f3c:	681b      	ldr	r3, [r3, #0]
20007f3e:	430a      	orrs	r2, r1
20007f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
20007f42:	687b      	ldr	r3, [r7, #4]
20007f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007f46:	f003 0304 	and.w	r3, r3, #4
20007f4a:	2b00      	cmp	r3, #0
20007f4c:	d00a      	beq.n	20007f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
20007f4e:	687b      	ldr	r3, [r7, #4]
20007f50:	681b      	ldr	r3, [r3, #0]
20007f52:	685b      	ldr	r3, [r3, #4]
20007f54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
20007f58:	687b      	ldr	r3, [r7, #4]
20007f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20007f5c:	687b      	ldr	r3, [r7, #4]
20007f5e:	681b      	ldr	r3, [r3, #0]
20007f60:	430a      	orrs	r2, r1
20007f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
20007f64:	687b      	ldr	r3, [r7, #4]
20007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007f68:	f003 0310 	and.w	r3, r3, #16
20007f6c:	2b00      	cmp	r3, #0
20007f6e:	d00a      	beq.n	20007f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
20007f70:	687b      	ldr	r3, [r7, #4]
20007f72:	681b      	ldr	r3, [r3, #0]
20007f74:	689b      	ldr	r3, [r3, #8]
20007f76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
20007f7a:	687b      	ldr	r3, [r7, #4]
20007f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
20007f7e:	687b      	ldr	r3, [r7, #4]
20007f80:	681b      	ldr	r3, [r3, #0]
20007f82:	430a      	orrs	r2, r1
20007f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
20007f86:	687b      	ldr	r3, [r7, #4]
20007f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007f8a:	f003 0320 	and.w	r3, r3, #32
20007f8e:	2b00      	cmp	r3, #0
20007f90:	d00a      	beq.n	20007fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
20007f92:	687b      	ldr	r3, [r7, #4]
20007f94:	681b      	ldr	r3, [r3, #0]
20007f96:	689b      	ldr	r3, [r3, #8]
20007f98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
20007f9c:	687b      	ldr	r3, [r7, #4]
20007f9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20007fa0:	687b      	ldr	r3, [r7, #4]
20007fa2:	681b      	ldr	r3, [r3, #0]
20007fa4:	430a      	orrs	r2, r1
20007fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
20007fa8:	687b      	ldr	r3, [r7, #4]
20007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20007fb0:	2b00      	cmp	r3, #0
20007fb2:	d01a      	beq.n	20007fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
20007fb4:	687b      	ldr	r3, [r7, #4]
20007fb6:	681b      	ldr	r3, [r3, #0]
20007fb8:	685b      	ldr	r3, [r3, #4]
20007fba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
20007fbe:	687b      	ldr	r3, [r7, #4]
20007fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
20007fc2:	687b      	ldr	r3, [r7, #4]
20007fc4:	681b      	ldr	r3, [r3, #0]
20007fc6:	430a      	orrs	r2, r1
20007fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
20007fca:	687b      	ldr	r3, [r7, #4]
20007fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20007fd2:	d10a      	bne.n	20007fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
20007fd4:	687b      	ldr	r3, [r7, #4]
20007fd6:	681b      	ldr	r3, [r3, #0]
20007fd8:	685b      	ldr	r3, [r3, #4]
20007fda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
20007fde:	687b      	ldr	r3, [r7, #4]
20007fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
20007fe2:	687b      	ldr	r3, [r7, #4]
20007fe4:	681b      	ldr	r3, [r3, #0]
20007fe6:	430a      	orrs	r2, r1
20007fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
20007fea:	687b      	ldr	r3, [r7, #4]
20007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20007ff2:	2b00      	cmp	r3, #0
20007ff4:	d00a      	beq.n	2000800c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
20007ff6:	687b      	ldr	r3, [r7, #4]
20007ff8:	681b      	ldr	r3, [r3, #0]
20007ffa:	685b      	ldr	r3, [r3, #4]
20007ffc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
20008000:	687b      	ldr	r3, [r7, #4]
20008002:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
20008004:	687b      	ldr	r3, [r7, #4]
20008006:	681b      	ldr	r3, [r3, #0]
20008008:	430a      	orrs	r2, r1
2000800a:	605a      	str	r2, [r3, #4]
  }
}
2000800c:	bf00      	nop
2000800e:	370c      	adds	r7, #12
20008010:	46bd      	mov	sp, r7
20008012:	f85d 7b04 	ldr.w	r7, [sp], #4
20008016:	4770      	bx	lr

20008018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
20008018:	b580      	push	{r7, lr}
2000801a:	b08c      	sub	sp, #48	@ 0x30
2000801c:	af02      	add	r7, sp, #8
2000801e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20008020:	687b      	ldr	r3, [r7, #4]
20008022:	2200      	movs	r2, #0
20008024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
20008028:	f7fc f9e2 	bl	200043f0 <HAL_GetTick>
2000802c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
2000802e:	687b      	ldr	r3, [r7, #4]
20008030:	681b      	ldr	r3, [r3, #0]
20008032:	681b      	ldr	r3, [r3, #0]
20008034:	f003 0308 	and.w	r3, r3, #8
20008038:	2b08      	cmp	r3, #8
2000803a:	d12e      	bne.n	2000809a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
2000803c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
20008040:	9300      	str	r3, [sp, #0]
20008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008044:	2200      	movs	r2, #0
20008046:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
2000804a:	6878      	ldr	r0, [r7, #4]
2000804c:	f000 f83b 	bl	200080c6 <UART_WaitOnFlagUntilTimeout>
20008050:	4603      	mov	r3, r0
20008052:	2b00      	cmp	r3, #0
20008054:	d021      	beq.n	2000809a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
20008056:	687b      	ldr	r3, [r7, #4]
20008058:	681b      	ldr	r3, [r3, #0]
2000805a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
2000805c:	693b      	ldr	r3, [r7, #16]
2000805e:	e853 3f00 	ldrex	r3, [r3]
20008062:	60fb      	str	r3, [r7, #12]
   return(result);
20008064:	68fb      	ldr	r3, [r7, #12]
20008066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2000806a:	623b      	str	r3, [r7, #32]
2000806c:	687b      	ldr	r3, [r7, #4]
2000806e:	681b      	ldr	r3, [r3, #0]
20008070:	461a      	mov	r2, r3
20008072:	6a3b      	ldr	r3, [r7, #32]
20008074:	61fb      	str	r3, [r7, #28]
20008076:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20008078:	69b9      	ldr	r1, [r7, #24]
2000807a:	69fa      	ldr	r2, [r7, #28]
2000807c:	e841 2300 	strex	r3, r2, [r1]
20008080:	617b      	str	r3, [r7, #20]
   return(result);
20008082:	697b      	ldr	r3, [r7, #20]
20008084:	2b00      	cmp	r3, #0
20008086:	d1e6      	bne.n	20008056 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
20008088:	687b      	ldr	r3, [r7, #4]
2000808a:	2220      	movs	r2, #32
2000808c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
2000808e:	687b      	ldr	r3, [r7, #4]
20008090:	2200      	movs	r2, #0
20008092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
20008096:	2303      	movs	r3, #3
20008098:	e011      	b.n	200080be <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
2000809a:	687b      	ldr	r3, [r7, #4]
2000809c:	2220      	movs	r2, #32
2000809e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
200080a0:	687b      	ldr	r3, [r7, #4]
200080a2:	2220      	movs	r2, #32
200080a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
200080a8:	687b      	ldr	r3, [r7, #4]
200080aa:	2200      	movs	r2, #0
200080ac:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
200080ae:	687b      	ldr	r3, [r7, #4]
200080b0:	2200      	movs	r2, #0
200080b2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
200080b4:	687b      	ldr	r3, [r7, #4]
200080b6:	2200      	movs	r2, #0
200080b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
200080bc:	2300      	movs	r3, #0
}
200080be:	4618      	mov	r0, r3
200080c0:	3728      	adds	r7, #40	@ 0x28
200080c2:	46bd      	mov	sp, r7
200080c4:	bd80      	pop	{r7, pc}

200080c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
200080c6:	b580      	push	{r7, lr}
200080c8:	b084      	sub	sp, #16
200080ca:	af00      	add	r7, sp, #0
200080cc:	60f8      	str	r0, [r7, #12]
200080ce:	60b9      	str	r1, [r7, #8]
200080d0:	603b      	str	r3, [r7, #0]
200080d2:	4613      	mov	r3, r2
200080d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
200080d6:	e04f      	b.n	20008178 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
200080d8:	69bb      	ldr	r3, [r7, #24]
200080da:	f1b3 3fff 	cmp.w	r3, #4294967295
200080de:	d04b      	beq.n	20008178 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200080e0:	f7fc f986 	bl	200043f0 <HAL_GetTick>
200080e4:	4602      	mov	r2, r0
200080e6:	683b      	ldr	r3, [r7, #0]
200080e8:	1ad3      	subs	r3, r2, r3
200080ea:	69ba      	ldr	r2, [r7, #24]
200080ec:	429a      	cmp	r2, r3
200080ee:	d302      	bcc.n	200080f6 <UART_WaitOnFlagUntilTimeout+0x30>
200080f0:	69bb      	ldr	r3, [r7, #24]
200080f2:	2b00      	cmp	r3, #0
200080f4:	d101      	bne.n	200080fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
200080f6:	2303      	movs	r3, #3
200080f8:	e04e      	b.n	20008198 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
200080fa:	68fb      	ldr	r3, [r7, #12]
200080fc:	681b      	ldr	r3, [r3, #0]
200080fe:	681b      	ldr	r3, [r3, #0]
20008100:	f003 0304 	and.w	r3, r3, #4
20008104:	2b00      	cmp	r3, #0
20008106:	d037      	beq.n	20008178 <UART_WaitOnFlagUntilTimeout+0xb2>
20008108:	68bb      	ldr	r3, [r7, #8]
2000810a:	2b80      	cmp	r3, #128	@ 0x80
2000810c:	d034      	beq.n	20008178 <UART_WaitOnFlagUntilTimeout+0xb2>
2000810e:	68bb      	ldr	r3, [r7, #8]
20008110:	2b40      	cmp	r3, #64	@ 0x40
20008112:	d031      	beq.n	20008178 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
20008114:	68fb      	ldr	r3, [r7, #12]
20008116:	681b      	ldr	r3, [r3, #0]
20008118:	69db      	ldr	r3, [r3, #28]
2000811a:	f003 0308 	and.w	r3, r3, #8
2000811e:	2b08      	cmp	r3, #8
20008120:	d110      	bne.n	20008144 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
20008122:	68fb      	ldr	r3, [r7, #12]
20008124:	681b      	ldr	r3, [r3, #0]
20008126:	2208      	movs	r2, #8
20008128:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
2000812a:	68f8      	ldr	r0, [r7, #12]
2000812c:	f000 f838 	bl	200081a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
20008130:	68fb      	ldr	r3, [r7, #12]
20008132:	2208      	movs	r2, #8
20008134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20008138:	68fb      	ldr	r3, [r7, #12]
2000813a:	2200      	movs	r2, #0
2000813c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
20008140:	2301      	movs	r3, #1
20008142:	e029      	b.n	20008198 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
20008144:	68fb      	ldr	r3, [r7, #12]
20008146:	681b      	ldr	r3, [r3, #0]
20008148:	69db      	ldr	r3, [r3, #28]
2000814a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
2000814e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20008152:	d111      	bne.n	20008178 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
20008154:	68fb      	ldr	r3, [r7, #12]
20008156:	681b      	ldr	r3, [r3, #0]
20008158:	f44f 6200 	mov.w	r2, #2048	@ 0x800
2000815c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
2000815e:	68f8      	ldr	r0, [r7, #12]
20008160:	f000 f81e 	bl	200081a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
20008164:	68fb      	ldr	r3, [r7, #12]
20008166:	2220      	movs	r2, #32
20008168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
2000816c:	68fb      	ldr	r3, [r7, #12]
2000816e:	2200      	movs	r2, #0
20008170:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
20008174:	2303      	movs	r3, #3
20008176:	e00f      	b.n	20008198 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
20008178:	68fb      	ldr	r3, [r7, #12]
2000817a:	681b      	ldr	r3, [r3, #0]
2000817c:	69da      	ldr	r2, [r3, #28]
2000817e:	68bb      	ldr	r3, [r7, #8]
20008180:	4013      	ands	r3, r2
20008182:	68ba      	ldr	r2, [r7, #8]
20008184:	429a      	cmp	r2, r3
20008186:	bf0c      	ite	eq
20008188:	2301      	moveq	r3, #1
2000818a:	2300      	movne	r3, #0
2000818c:	b2db      	uxtb	r3, r3
2000818e:	461a      	mov	r2, r3
20008190:	79fb      	ldrb	r3, [r7, #7]
20008192:	429a      	cmp	r2, r3
20008194:	d0a0      	beq.n	200080d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
20008196:	2300      	movs	r3, #0
}
20008198:	4618      	mov	r0, r3
2000819a:	3710      	adds	r7, #16
2000819c:	46bd      	mov	sp, r7
2000819e:	bd80      	pop	{r7, pc}

200081a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
200081a0:	b480      	push	{r7}
200081a2:	b095      	sub	sp, #84	@ 0x54
200081a4:	af00      	add	r7, sp, #0
200081a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
200081a8:	687b      	ldr	r3, [r7, #4]
200081aa:	681b      	ldr	r3, [r3, #0]
200081ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200081ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200081b0:	e853 3f00 	ldrex	r3, [r3]
200081b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
200081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200081b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
200081bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
200081be:	687b      	ldr	r3, [r7, #4]
200081c0:	681b      	ldr	r3, [r3, #0]
200081c2:	461a      	mov	r2, r3
200081c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200081c6:	643b      	str	r3, [r7, #64]	@ 0x40
200081c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200081ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
200081cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
200081ce:	e841 2300 	strex	r3, r2, [r1]
200081d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
200081d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200081d6:	2b00      	cmp	r3, #0
200081d8:	d1e6      	bne.n	200081a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
200081da:	687b      	ldr	r3, [r7, #4]
200081dc:	681b      	ldr	r3, [r3, #0]
200081de:	3308      	adds	r3, #8
200081e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200081e2:	6a3b      	ldr	r3, [r7, #32]
200081e4:	e853 3f00 	ldrex	r3, [r3]
200081e8:	61fb      	str	r3, [r7, #28]
   return(result);
200081ea:	69fb      	ldr	r3, [r7, #28]
200081ec:	f023 0301 	bic.w	r3, r3, #1
200081f0:	64bb      	str	r3, [r7, #72]	@ 0x48
200081f2:	687b      	ldr	r3, [r7, #4]
200081f4:	681b      	ldr	r3, [r3, #0]
200081f6:	3308      	adds	r3, #8
200081f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
200081fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
200081fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200081fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
20008200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20008202:	e841 2300 	strex	r3, r2, [r1]
20008206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
20008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000820a:	2b00      	cmp	r3, #0
2000820c:	d1e5      	bne.n	200081da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
2000820e:	687b      	ldr	r3, [r7, #4]
20008210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20008212:	2b01      	cmp	r3, #1
20008214:	d118      	bne.n	20008248 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
20008216:	687b      	ldr	r3, [r7, #4]
20008218:	681b      	ldr	r3, [r3, #0]
2000821a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
2000821c:	68fb      	ldr	r3, [r7, #12]
2000821e:	e853 3f00 	ldrex	r3, [r3]
20008222:	60bb      	str	r3, [r7, #8]
   return(result);
20008224:	68bb      	ldr	r3, [r7, #8]
20008226:	f023 0310 	bic.w	r3, r3, #16
2000822a:	647b      	str	r3, [r7, #68]	@ 0x44
2000822c:	687b      	ldr	r3, [r7, #4]
2000822e:	681b      	ldr	r3, [r3, #0]
20008230:	461a      	mov	r2, r3
20008232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20008234:	61bb      	str	r3, [r7, #24]
20008236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20008238:	6979      	ldr	r1, [r7, #20]
2000823a:	69ba      	ldr	r2, [r7, #24]
2000823c:	e841 2300 	strex	r3, r2, [r1]
20008240:	613b      	str	r3, [r7, #16]
   return(result);
20008242:	693b      	ldr	r3, [r7, #16]
20008244:	2b00      	cmp	r3, #0
20008246:	d1e6      	bne.n	20008216 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
20008248:	687b      	ldr	r3, [r7, #4]
2000824a:	2220      	movs	r2, #32
2000824c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
20008250:	687b      	ldr	r3, [r7, #4]
20008252:	2200      	movs	r2, #0
20008254:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
20008256:	687b      	ldr	r3, [r7, #4]
20008258:	2200      	movs	r2, #0
2000825a:	669a      	str	r2, [r3, #104]	@ 0x68
}
2000825c:	bf00      	nop
2000825e:	3754      	adds	r7, #84	@ 0x54
20008260:	46bd      	mov	sp, r7
20008262:	f85d 7b04 	ldr.w	r7, [sp], #4
20008266:	4770      	bx	lr

20008268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
20008268:	b084      	sub	sp, #16
2000826a:	b580      	push	{r7, lr}
2000826c:	b084      	sub	sp, #16
2000826e:	af00      	add	r7, sp, #0
20008270:	6078      	str	r0, [r7, #4]
20008272:	f107 001c 	add.w	r0, r7, #28
20008276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
2000827a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
2000827e:	2b01      	cmp	r3, #1
20008280:	d121      	bne.n	200082c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
20008282:	687b      	ldr	r3, [r7, #4]
20008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20008286:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
2000828a:	687b      	ldr	r3, [r7, #4]
2000828c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
2000828e:	687b      	ldr	r3, [r7, #4]
20008290:	68da      	ldr	r2, [r3, #12]
20008292:	4b21      	ldr	r3, [pc, #132]	@ (20008318 <USB_CoreInit+0xb0>)
20008294:	4013      	ands	r3, r2
20008296:	687a      	ldr	r2, [r7, #4]
20008298:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
2000829a:	687b      	ldr	r3, [r7, #4]
2000829c:	68db      	ldr	r3, [r3, #12]
2000829e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
200082a2:	687b      	ldr	r3, [r7, #4]
200082a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
200082a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
200082aa:	2b01      	cmp	r3, #1
200082ac:	d105      	bne.n	200082ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
200082ae:	687b      	ldr	r3, [r7, #4]
200082b0:	68db      	ldr	r3, [r3, #12]
200082b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
200082b6:	687b      	ldr	r3, [r7, #4]
200082b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
200082ba:	6878      	ldr	r0, [r7, #4]
200082bc:	f001 fae2 	bl	20009884 <USB_CoreReset>
200082c0:	4603      	mov	r3, r0
200082c2:	73fb      	strb	r3, [r7, #15]
200082c4:	e010      	b.n	200082e8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
200082c6:	687b      	ldr	r3, [r7, #4]
200082c8:	68db      	ldr	r3, [r3, #12]
200082ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
200082ce:	687b      	ldr	r3, [r7, #4]
200082d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
200082d2:	6878      	ldr	r0, [r7, #4]
200082d4:	f001 fad6 	bl	20009884 <USB_CoreReset>
200082d8:	4603      	mov	r3, r0
200082da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
200082dc:	687b      	ldr	r3, [r7, #4]
200082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200082e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
200082e4:	687b      	ldr	r3, [r7, #4]
200082e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
200082e8:	7fbb      	ldrb	r3, [r7, #30]
200082ea:	2b01      	cmp	r3, #1
200082ec:	d10b      	bne.n	20008306 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
200082ee:	687b      	ldr	r3, [r7, #4]
200082f0:	689b      	ldr	r3, [r3, #8]
200082f2:	f043 0206 	orr.w	r2, r3, #6
200082f6:	687b      	ldr	r3, [r7, #4]
200082f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
200082fa:	687b      	ldr	r3, [r7, #4]
200082fc:	689b      	ldr	r3, [r3, #8]
200082fe:	f043 0220 	orr.w	r2, r3, #32
20008302:	687b      	ldr	r3, [r7, #4]
20008304:	609a      	str	r2, [r3, #8]
  }

  return ret;
20008306:	7bfb      	ldrb	r3, [r7, #15]
}
20008308:	4618      	mov	r0, r3
2000830a:	3710      	adds	r7, #16
2000830c:	46bd      	mov	sp, r7
2000830e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20008312:	b004      	add	sp, #16
20008314:	4770      	bx	lr
20008316:	bf00      	nop
20008318:	ffbdffbf 	.word	0xffbdffbf

2000831c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
2000831c:	b480      	push	{r7}
2000831e:	b087      	sub	sp, #28
20008320:	af00      	add	r7, sp, #0
20008322:	60f8      	str	r0, [r7, #12]
20008324:	60b9      	str	r1, [r7, #8]
20008326:	4613      	mov	r3, r2
20008328:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
2000832a:	79fb      	ldrb	r3, [r7, #7]
2000832c:	2b02      	cmp	r3, #2
2000832e:	d165      	bne.n	200083fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
20008330:	68bb      	ldr	r3, [r7, #8]
20008332:	4a41      	ldr	r2, [pc, #260]	@ (20008438 <USB_SetTurnaroundTime+0x11c>)
20008334:	4293      	cmp	r3, r2
20008336:	d906      	bls.n	20008346 <USB_SetTurnaroundTime+0x2a>
20008338:	68bb      	ldr	r3, [r7, #8]
2000833a:	4a40      	ldr	r2, [pc, #256]	@ (2000843c <USB_SetTurnaroundTime+0x120>)
2000833c:	4293      	cmp	r3, r2
2000833e:	d202      	bcs.n	20008346 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
20008340:	230f      	movs	r3, #15
20008342:	617b      	str	r3, [r7, #20]
20008344:	e062      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
20008346:	68bb      	ldr	r3, [r7, #8]
20008348:	4a3c      	ldr	r2, [pc, #240]	@ (2000843c <USB_SetTurnaroundTime+0x120>)
2000834a:	4293      	cmp	r3, r2
2000834c:	d306      	bcc.n	2000835c <USB_SetTurnaroundTime+0x40>
2000834e:	68bb      	ldr	r3, [r7, #8]
20008350:	4a3b      	ldr	r2, [pc, #236]	@ (20008440 <USB_SetTurnaroundTime+0x124>)
20008352:	4293      	cmp	r3, r2
20008354:	d202      	bcs.n	2000835c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
20008356:	230e      	movs	r3, #14
20008358:	617b      	str	r3, [r7, #20]
2000835a:	e057      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
2000835c:	68bb      	ldr	r3, [r7, #8]
2000835e:	4a38      	ldr	r2, [pc, #224]	@ (20008440 <USB_SetTurnaroundTime+0x124>)
20008360:	4293      	cmp	r3, r2
20008362:	d306      	bcc.n	20008372 <USB_SetTurnaroundTime+0x56>
20008364:	68bb      	ldr	r3, [r7, #8]
20008366:	4a37      	ldr	r2, [pc, #220]	@ (20008444 <USB_SetTurnaroundTime+0x128>)
20008368:	4293      	cmp	r3, r2
2000836a:	d202      	bcs.n	20008372 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
2000836c:	230d      	movs	r3, #13
2000836e:	617b      	str	r3, [r7, #20]
20008370:	e04c      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
20008372:	68bb      	ldr	r3, [r7, #8]
20008374:	4a33      	ldr	r2, [pc, #204]	@ (20008444 <USB_SetTurnaroundTime+0x128>)
20008376:	4293      	cmp	r3, r2
20008378:	d306      	bcc.n	20008388 <USB_SetTurnaroundTime+0x6c>
2000837a:	68bb      	ldr	r3, [r7, #8]
2000837c:	4a32      	ldr	r2, [pc, #200]	@ (20008448 <USB_SetTurnaroundTime+0x12c>)
2000837e:	4293      	cmp	r3, r2
20008380:	d802      	bhi.n	20008388 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
20008382:	230c      	movs	r3, #12
20008384:	617b      	str	r3, [r7, #20]
20008386:	e041      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
20008388:	68bb      	ldr	r3, [r7, #8]
2000838a:	4a2f      	ldr	r2, [pc, #188]	@ (20008448 <USB_SetTurnaroundTime+0x12c>)
2000838c:	4293      	cmp	r3, r2
2000838e:	d906      	bls.n	2000839e <USB_SetTurnaroundTime+0x82>
20008390:	68bb      	ldr	r3, [r7, #8]
20008392:	4a2e      	ldr	r2, [pc, #184]	@ (2000844c <USB_SetTurnaroundTime+0x130>)
20008394:	4293      	cmp	r3, r2
20008396:	d802      	bhi.n	2000839e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
20008398:	230b      	movs	r3, #11
2000839a:	617b      	str	r3, [r7, #20]
2000839c:	e036      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
2000839e:	68bb      	ldr	r3, [r7, #8]
200083a0:	4a2a      	ldr	r2, [pc, #168]	@ (2000844c <USB_SetTurnaroundTime+0x130>)
200083a2:	4293      	cmp	r3, r2
200083a4:	d906      	bls.n	200083b4 <USB_SetTurnaroundTime+0x98>
200083a6:	68bb      	ldr	r3, [r7, #8]
200083a8:	4a29      	ldr	r2, [pc, #164]	@ (20008450 <USB_SetTurnaroundTime+0x134>)
200083aa:	4293      	cmp	r3, r2
200083ac:	d802      	bhi.n	200083b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
200083ae:	230a      	movs	r3, #10
200083b0:	617b      	str	r3, [r7, #20]
200083b2:	e02b      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
200083b4:	68bb      	ldr	r3, [r7, #8]
200083b6:	4a26      	ldr	r2, [pc, #152]	@ (20008450 <USB_SetTurnaroundTime+0x134>)
200083b8:	4293      	cmp	r3, r2
200083ba:	d906      	bls.n	200083ca <USB_SetTurnaroundTime+0xae>
200083bc:	68bb      	ldr	r3, [r7, #8]
200083be:	4a25      	ldr	r2, [pc, #148]	@ (20008454 <USB_SetTurnaroundTime+0x138>)
200083c0:	4293      	cmp	r3, r2
200083c2:	d202      	bcs.n	200083ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
200083c4:	2309      	movs	r3, #9
200083c6:	617b      	str	r3, [r7, #20]
200083c8:	e020      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
200083ca:	68bb      	ldr	r3, [r7, #8]
200083cc:	4a21      	ldr	r2, [pc, #132]	@ (20008454 <USB_SetTurnaroundTime+0x138>)
200083ce:	4293      	cmp	r3, r2
200083d0:	d306      	bcc.n	200083e0 <USB_SetTurnaroundTime+0xc4>
200083d2:	68bb      	ldr	r3, [r7, #8]
200083d4:	4a20      	ldr	r2, [pc, #128]	@ (20008458 <USB_SetTurnaroundTime+0x13c>)
200083d6:	4293      	cmp	r3, r2
200083d8:	d802      	bhi.n	200083e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
200083da:	2308      	movs	r3, #8
200083dc:	617b      	str	r3, [r7, #20]
200083de:	e015      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
200083e0:	68bb      	ldr	r3, [r7, #8]
200083e2:	4a1d      	ldr	r2, [pc, #116]	@ (20008458 <USB_SetTurnaroundTime+0x13c>)
200083e4:	4293      	cmp	r3, r2
200083e6:	d906      	bls.n	200083f6 <USB_SetTurnaroundTime+0xda>
200083e8:	68bb      	ldr	r3, [r7, #8]
200083ea:	4a1c      	ldr	r2, [pc, #112]	@ (2000845c <USB_SetTurnaroundTime+0x140>)
200083ec:	4293      	cmp	r3, r2
200083ee:	d202      	bcs.n	200083f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
200083f0:	2307      	movs	r3, #7
200083f2:	617b      	str	r3, [r7, #20]
200083f4:	e00a      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
200083f6:	2306      	movs	r3, #6
200083f8:	617b      	str	r3, [r7, #20]
200083fa:	e007      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
200083fc:	79fb      	ldrb	r3, [r7, #7]
200083fe:	2b00      	cmp	r3, #0
20008400:	d102      	bne.n	20008408 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
20008402:	2309      	movs	r3, #9
20008404:	617b      	str	r3, [r7, #20]
20008406:	e001      	b.n	2000840c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
20008408:	2309      	movs	r3, #9
2000840a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
2000840c:	68fb      	ldr	r3, [r7, #12]
2000840e:	68db      	ldr	r3, [r3, #12]
20008410:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
20008414:	68fb      	ldr	r3, [r7, #12]
20008416:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
20008418:	68fb      	ldr	r3, [r7, #12]
2000841a:	68da      	ldr	r2, [r3, #12]
2000841c:	697b      	ldr	r3, [r7, #20]
2000841e:	029b      	lsls	r3, r3, #10
20008420:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
20008424:	431a      	orrs	r2, r3
20008426:	68fb      	ldr	r3, [r7, #12]
20008428:	60da      	str	r2, [r3, #12]

  return HAL_OK;
2000842a:	2300      	movs	r3, #0
}
2000842c:	4618      	mov	r0, r3
2000842e:	371c      	adds	r7, #28
20008430:	46bd      	mov	sp, r7
20008432:	f85d 7b04 	ldr.w	r7, [sp], #4
20008436:	4770      	bx	lr
20008438:	00d8acbf 	.word	0x00d8acbf
2000843c:	00e4e1c0 	.word	0x00e4e1c0
20008440:	00f42400 	.word	0x00f42400
20008444:	01067380 	.word	0x01067380
20008448:	011a499f 	.word	0x011a499f
2000844c:	01312cff 	.word	0x01312cff
20008450:	014ca43f 	.word	0x014ca43f
20008454:	016e3600 	.word	0x016e3600
20008458:	01a6ab1f 	.word	0x01a6ab1f
2000845c:	01e84800 	.word	0x01e84800

20008460 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
20008460:	b480      	push	{r7}
20008462:	b083      	sub	sp, #12
20008464:	af00      	add	r7, sp, #0
20008466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
20008468:	687b      	ldr	r3, [r7, #4]
2000846a:	689b      	ldr	r3, [r3, #8]
2000846c:	f043 0201 	orr.w	r2, r3, #1
20008470:	687b      	ldr	r3, [r7, #4]
20008472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
20008474:	2300      	movs	r3, #0
}
20008476:	4618      	mov	r0, r3
20008478:	370c      	adds	r7, #12
2000847a:	46bd      	mov	sp, r7
2000847c:	f85d 7b04 	ldr.w	r7, [sp], #4
20008480:	4770      	bx	lr

20008482 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
20008482:	b480      	push	{r7}
20008484:	b083      	sub	sp, #12
20008486:	af00      	add	r7, sp, #0
20008488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
2000848a:	687b      	ldr	r3, [r7, #4]
2000848c:	689b      	ldr	r3, [r3, #8]
2000848e:	f023 0201 	bic.w	r2, r3, #1
20008492:	687b      	ldr	r3, [r7, #4]
20008494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
20008496:	2300      	movs	r3, #0
}
20008498:	4618      	mov	r0, r3
2000849a:	370c      	adds	r7, #12
2000849c:	46bd      	mov	sp, r7
2000849e:	f85d 7b04 	ldr.w	r7, [sp], #4
200084a2:	4770      	bx	lr

200084a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
200084a4:	b580      	push	{r7, lr}
200084a6:	b084      	sub	sp, #16
200084a8:	af00      	add	r7, sp, #0
200084aa:	6078      	str	r0, [r7, #4]
200084ac:	460b      	mov	r3, r1
200084ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
200084b0:	2300      	movs	r3, #0
200084b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
200084b4:	687b      	ldr	r3, [r7, #4]
200084b6:	68db      	ldr	r3, [r3, #12]
200084b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
200084bc:	687b      	ldr	r3, [r7, #4]
200084be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
200084c0:	78fb      	ldrb	r3, [r7, #3]
200084c2:	2b01      	cmp	r3, #1
200084c4:	d115      	bne.n	200084f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
200084c6:	687b      	ldr	r3, [r7, #4]
200084c8:	68db      	ldr	r3, [r3, #12]
200084ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
200084ce:	687b      	ldr	r3, [r7, #4]
200084d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
200084d2:	200a      	movs	r0, #10
200084d4:	f7fb ff98 	bl	20004408 <HAL_Delay>
      ms += 10U;
200084d8:	68fb      	ldr	r3, [r7, #12]
200084da:	330a      	adds	r3, #10
200084dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
200084de:	6878      	ldr	r0, [r7, #4]
200084e0:	f001 f93f 	bl	20009762 <USB_GetMode>
200084e4:	4603      	mov	r3, r0
200084e6:	2b01      	cmp	r3, #1
200084e8:	d01e      	beq.n	20008528 <USB_SetCurrentMode+0x84>
200084ea:	68fb      	ldr	r3, [r7, #12]
200084ec:	2bc7      	cmp	r3, #199	@ 0xc7
200084ee:	d9f0      	bls.n	200084d2 <USB_SetCurrentMode+0x2e>
200084f0:	e01a      	b.n	20008528 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
200084f2:	78fb      	ldrb	r3, [r7, #3]
200084f4:	2b00      	cmp	r3, #0
200084f6:	d115      	bne.n	20008524 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
200084f8:	687b      	ldr	r3, [r7, #4]
200084fa:	68db      	ldr	r3, [r3, #12]
200084fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
20008500:	687b      	ldr	r3, [r7, #4]
20008502:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20008504:	200a      	movs	r0, #10
20008506:	f7fb ff7f 	bl	20004408 <HAL_Delay>
      ms += 10U;
2000850a:	68fb      	ldr	r3, [r7, #12]
2000850c:	330a      	adds	r3, #10
2000850e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
20008510:	6878      	ldr	r0, [r7, #4]
20008512:	f001 f926 	bl	20009762 <USB_GetMode>
20008516:	4603      	mov	r3, r0
20008518:	2b00      	cmp	r3, #0
2000851a:	d005      	beq.n	20008528 <USB_SetCurrentMode+0x84>
2000851c:	68fb      	ldr	r3, [r7, #12]
2000851e:	2bc7      	cmp	r3, #199	@ 0xc7
20008520:	d9f0      	bls.n	20008504 <USB_SetCurrentMode+0x60>
20008522:	e001      	b.n	20008528 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
20008524:	2301      	movs	r3, #1
20008526:	e005      	b.n	20008534 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
20008528:	68fb      	ldr	r3, [r7, #12]
2000852a:	2bc8      	cmp	r3, #200	@ 0xc8
2000852c:	d101      	bne.n	20008532 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
2000852e:	2301      	movs	r3, #1
20008530:	e000      	b.n	20008534 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
20008532:	2300      	movs	r3, #0
}
20008534:	4618      	mov	r0, r3
20008536:	3710      	adds	r7, #16
20008538:	46bd      	mov	sp, r7
2000853a:	bd80      	pop	{r7, pc}

2000853c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
2000853c:	b084      	sub	sp, #16
2000853e:	b580      	push	{r7, lr}
20008540:	b086      	sub	sp, #24
20008542:	af00      	add	r7, sp, #0
20008544:	6078      	str	r0, [r7, #4]
20008546:	f107 0024 	add.w	r0, r7, #36	@ 0x24
2000854a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
2000854e:	2300      	movs	r3, #0
20008550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008552:	687b      	ldr	r3, [r7, #4]
20008554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
20008556:	2300      	movs	r3, #0
20008558:	613b      	str	r3, [r7, #16]
2000855a:	e009      	b.n	20008570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
2000855c:	687a      	ldr	r2, [r7, #4]
2000855e:	693b      	ldr	r3, [r7, #16]
20008560:	3340      	adds	r3, #64	@ 0x40
20008562:	009b      	lsls	r3, r3, #2
20008564:	4413      	add	r3, r2
20008566:	2200      	movs	r2, #0
20008568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
2000856a:	693b      	ldr	r3, [r7, #16]
2000856c:	3301      	adds	r3, #1
2000856e:	613b      	str	r3, [r7, #16]
20008570:	693b      	ldr	r3, [r7, #16]
20008572:	2b0e      	cmp	r3, #14
20008574:	d9f2      	bls.n	2000855c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
20008576:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
2000857a:	2b00      	cmp	r3, #0
2000857c:	d11c      	bne.n	200085b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
2000857e:	68fb      	ldr	r3, [r7, #12]
20008580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008584:	685b      	ldr	r3, [r3, #4]
20008586:	68fa      	ldr	r2, [r7, #12]
20008588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000858c:	f043 0302 	orr.w	r3, r3, #2
20008590:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
20008592:	687b      	ldr	r3, [r7, #4]
20008594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20008596:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
2000859a:	687b      	ldr	r3, [r7, #4]
2000859c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
2000859e:	687b      	ldr	r3, [r7, #4]
200085a0:	681b      	ldr	r3, [r3, #0]
200085a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
200085a6:	687b      	ldr	r3, [r7, #4]
200085a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
200085aa:	687b      	ldr	r3, [r7, #4]
200085ac:	681b      	ldr	r3, [r3, #0]
200085ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
200085b2:	687b      	ldr	r3, [r7, #4]
200085b4:	601a      	str	r2, [r3, #0]
200085b6:	e005      	b.n	200085c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
200085b8:	687b      	ldr	r3, [r7, #4]
200085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200085bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
200085c0:	687b      	ldr	r3, [r7, #4]
200085c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
200085c4:	68fb      	ldr	r3, [r7, #12]
200085c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
200085ca:	461a      	mov	r2, r3
200085cc:	2300      	movs	r3, #0
200085ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
200085d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
200085d4:	2b01      	cmp	r3, #1
200085d6:	d10d      	bne.n	200085f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
200085d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
200085dc:	2b00      	cmp	r3, #0
200085de:	d104      	bne.n	200085ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
200085e0:	2100      	movs	r1, #0
200085e2:	6878      	ldr	r0, [r7, #4]
200085e4:	f000 f968 	bl	200088b8 <USB_SetDevSpeed>
200085e8:	e008      	b.n	200085fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
200085ea:	2101      	movs	r1, #1
200085ec:	6878      	ldr	r0, [r7, #4]
200085ee:	f000 f963 	bl	200088b8 <USB_SetDevSpeed>
200085f2:	e003      	b.n	200085fc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
200085f4:	2103      	movs	r1, #3
200085f6:	6878      	ldr	r0, [r7, #4]
200085f8:	f000 f95e 	bl	200088b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
200085fc:	2110      	movs	r1, #16
200085fe:	6878      	ldr	r0, [r7, #4]
20008600:	f000 f8fa 	bl	200087f8 <USB_FlushTxFifo>
20008604:	4603      	mov	r3, r0
20008606:	2b00      	cmp	r3, #0
20008608:	d001      	beq.n	2000860e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
2000860a:	2301      	movs	r3, #1
2000860c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
2000860e:	6878      	ldr	r0, [r7, #4]
20008610:	f000 f924 	bl	2000885c <USB_FlushRxFifo>
20008614:	4603      	mov	r3, r0
20008616:	2b00      	cmp	r3, #0
20008618:	d001      	beq.n	2000861e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
2000861a:	2301      	movs	r3, #1
2000861c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
2000861e:	68fb      	ldr	r3, [r7, #12]
20008620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008624:	461a      	mov	r2, r3
20008626:	2300      	movs	r3, #0
20008628:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
2000862a:	68fb      	ldr	r3, [r7, #12]
2000862c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008630:	461a      	mov	r2, r3
20008632:	2300      	movs	r3, #0
20008634:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
20008636:	68fb      	ldr	r3, [r7, #12]
20008638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000863c:	461a      	mov	r2, r3
2000863e:	2300      	movs	r3, #0
20008640:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
20008642:	2300      	movs	r3, #0
20008644:	613b      	str	r3, [r7, #16]
20008646:	e043      	b.n	200086d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20008648:	693b      	ldr	r3, [r7, #16]
2000864a:	015a      	lsls	r2, r3, #5
2000864c:	68fb      	ldr	r3, [r7, #12]
2000864e:	4413      	add	r3, r2
20008650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008654:	681b      	ldr	r3, [r3, #0]
20008656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000865a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000865e:	d118      	bne.n	20008692 <USB_DevInit+0x156>
    {
      if (i == 0U)
20008660:	693b      	ldr	r3, [r7, #16]
20008662:	2b00      	cmp	r3, #0
20008664:	d10a      	bne.n	2000867c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
20008666:	693b      	ldr	r3, [r7, #16]
20008668:	015a      	lsls	r2, r3, #5
2000866a:	68fb      	ldr	r3, [r7, #12]
2000866c:	4413      	add	r3, r2
2000866e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008672:	461a      	mov	r2, r3
20008674:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20008678:	6013      	str	r3, [r2, #0]
2000867a:	e013      	b.n	200086a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
2000867c:	693b      	ldr	r3, [r7, #16]
2000867e:	015a      	lsls	r2, r3, #5
20008680:	68fb      	ldr	r3, [r7, #12]
20008682:	4413      	add	r3, r2
20008684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008688:	461a      	mov	r2, r3
2000868a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
2000868e:	6013      	str	r3, [r2, #0]
20008690:	e008      	b.n	200086a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
20008692:	693b      	ldr	r3, [r7, #16]
20008694:	015a      	lsls	r2, r3, #5
20008696:	68fb      	ldr	r3, [r7, #12]
20008698:	4413      	add	r3, r2
2000869a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000869e:	461a      	mov	r2, r3
200086a0:	2300      	movs	r3, #0
200086a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
200086a4:	693b      	ldr	r3, [r7, #16]
200086a6:	015a      	lsls	r2, r3, #5
200086a8:	68fb      	ldr	r3, [r7, #12]
200086aa:	4413      	add	r3, r2
200086ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200086b0:	461a      	mov	r2, r3
200086b2:	2300      	movs	r3, #0
200086b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
200086b6:	693b      	ldr	r3, [r7, #16]
200086b8:	015a      	lsls	r2, r3, #5
200086ba:	68fb      	ldr	r3, [r7, #12]
200086bc:	4413      	add	r3, r2
200086be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200086c2:	461a      	mov	r2, r3
200086c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
200086c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
200086ca:	693b      	ldr	r3, [r7, #16]
200086cc:	3301      	adds	r3, #1
200086ce:	613b      	str	r3, [r7, #16]
200086d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
200086d4:	461a      	mov	r2, r3
200086d6:	693b      	ldr	r3, [r7, #16]
200086d8:	4293      	cmp	r3, r2
200086da:	d3b5      	bcc.n	20008648 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
200086dc:	2300      	movs	r3, #0
200086de:	613b      	str	r3, [r7, #16]
200086e0:	e043      	b.n	2000876a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
200086e2:	693b      	ldr	r3, [r7, #16]
200086e4:	015a      	lsls	r2, r3, #5
200086e6:	68fb      	ldr	r3, [r7, #12]
200086e8:	4413      	add	r3, r2
200086ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200086ee:	681b      	ldr	r3, [r3, #0]
200086f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200086f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200086f8:	d118      	bne.n	2000872c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
200086fa:	693b      	ldr	r3, [r7, #16]
200086fc:	2b00      	cmp	r3, #0
200086fe:	d10a      	bne.n	20008716 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
20008700:	693b      	ldr	r3, [r7, #16]
20008702:	015a      	lsls	r2, r3, #5
20008704:	68fb      	ldr	r3, [r7, #12]
20008706:	4413      	add	r3, r2
20008708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000870c:	461a      	mov	r2, r3
2000870e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20008712:	6013      	str	r3, [r2, #0]
20008714:	e013      	b.n	2000873e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
20008716:	693b      	ldr	r3, [r7, #16]
20008718:	015a      	lsls	r2, r3, #5
2000871a:	68fb      	ldr	r3, [r7, #12]
2000871c:	4413      	add	r3, r2
2000871e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008722:	461a      	mov	r2, r3
20008724:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20008728:	6013      	str	r3, [r2, #0]
2000872a:	e008      	b.n	2000873e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
2000872c:	693b      	ldr	r3, [r7, #16]
2000872e:	015a      	lsls	r2, r3, #5
20008730:	68fb      	ldr	r3, [r7, #12]
20008732:	4413      	add	r3, r2
20008734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008738:	461a      	mov	r2, r3
2000873a:	2300      	movs	r3, #0
2000873c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
2000873e:	693b      	ldr	r3, [r7, #16]
20008740:	015a      	lsls	r2, r3, #5
20008742:	68fb      	ldr	r3, [r7, #12]
20008744:	4413      	add	r3, r2
20008746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000874a:	461a      	mov	r2, r3
2000874c:	2300      	movs	r3, #0
2000874e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
20008750:	693b      	ldr	r3, [r7, #16]
20008752:	015a      	lsls	r2, r3, #5
20008754:	68fb      	ldr	r3, [r7, #12]
20008756:	4413      	add	r3, r2
20008758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000875c:	461a      	mov	r2, r3
2000875e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20008762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
20008764:	693b      	ldr	r3, [r7, #16]
20008766:	3301      	adds	r3, #1
20008768:	613b      	str	r3, [r7, #16]
2000876a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
2000876e:	461a      	mov	r2, r3
20008770:	693b      	ldr	r3, [r7, #16]
20008772:	4293      	cmp	r3, r2
20008774:	d3b5      	bcc.n	200086e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
20008776:	68fb      	ldr	r3, [r7, #12]
20008778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000877c:	691b      	ldr	r3, [r3, #16]
2000877e:	68fa      	ldr	r2, [r7, #12]
20008780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20008784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
20008788:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
2000878a:	687b      	ldr	r3, [r7, #4]
2000878c:	2200      	movs	r2, #0
2000878e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
20008790:	687b      	ldr	r3, [r7, #4]
20008792:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
20008796:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
20008798:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
2000879c:	2b00      	cmp	r3, #0
2000879e:	d105      	bne.n	200087ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
200087a0:	687b      	ldr	r3, [r7, #4]
200087a2:	699b      	ldr	r3, [r3, #24]
200087a4:	f043 0210 	orr.w	r2, r3, #16
200087a8:	687b      	ldr	r3, [r7, #4]
200087aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
200087ac:	687b      	ldr	r3, [r7, #4]
200087ae:	699a      	ldr	r2, [r3, #24]
200087b0:	4b0f      	ldr	r3, [pc, #60]	@ (200087f0 <USB_DevInit+0x2b4>)
200087b2:	4313      	orrs	r3, r2
200087b4:	687a      	ldr	r2, [r7, #4]
200087b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
200087b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
200087bc:	2b00      	cmp	r3, #0
200087be:	d005      	beq.n	200087cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
200087c0:	687b      	ldr	r3, [r7, #4]
200087c2:	699b      	ldr	r3, [r3, #24]
200087c4:	f043 0208 	orr.w	r2, r3, #8
200087c8:	687b      	ldr	r3, [r7, #4]
200087ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
200087cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
200087d0:	2b01      	cmp	r3, #1
200087d2:	d105      	bne.n	200087e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
200087d4:	687b      	ldr	r3, [r7, #4]
200087d6:	699a      	ldr	r2, [r3, #24]
200087d8:	4b06      	ldr	r3, [pc, #24]	@ (200087f4 <USB_DevInit+0x2b8>)
200087da:	4313      	orrs	r3, r2
200087dc:	687a      	ldr	r2, [r7, #4]
200087de:	6193      	str	r3, [r2, #24]
  }

  return ret;
200087e0:	7dfb      	ldrb	r3, [r7, #23]
}
200087e2:	4618      	mov	r0, r3
200087e4:	3718      	adds	r7, #24
200087e6:	46bd      	mov	sp, r7
200087e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
200087ec:	b004      	add	sp, #16
200087ee:	4770      	bx	lr
200087f0:	803c3800 	.word	0x803c3800
200087f4:	40000004 	.word	0x40000004

200087f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
200087f8:	b480      	push	{r7}
200087fa:	b085      	sub	sp, #20
200087fc:	af00      	add	r7, sp, #0
200087fe:	6078      	str	r0, [r7, #4]
20008800:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
20008802:	2300      	movs	r3, #0
20008804:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20008806:	68fb      	ldr	r3, [r7, #12]
20008808:	3301      	adds	r3, #1
2000880a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000880c:	68fb      	ldr	r3, [r7, #12]
2000880e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20008812:	d901      	bls.n	20008818 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
20008814:	2303      	movs	r3, #3
20008816:	e01b      	b.n	20008850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20008818:	687b      	ldr	r3, [r7, #4]
2000881a:	691b      	ldr	r3, [r3, #16]
2000881c:	2b00      	cmp	r3, #0
2000881e:	daf2      	bge.n	20008806 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
20008820:	2300      	movs	r3, #0
20008822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
20008824:	683b      	ldr	r3, [r7, #0]
20008826:	019b      	lsls	r3, r3, #6
20008828:	f043 0220 	orr.w	r2, r3, #32
2000882c:	687b      	ldr	r3, [r7, #4]
2000882e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20008830:	68fb      	ldr	r3, [r7, #12]
20008832:	3301      	adds	r3, #1
20008834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20008836:	68fb      	ldr	r3, [r7, #12]
20008838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000883c:	d901      	bls.n	20008842 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
2000883e:	2303      	movs	r3, #3
20008840:	e006      	b.n	20008850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
20008842:	687b      	ldr	r3, [r7, #4]
20008844:	691b      	ldr	r3, [r3, #16]
20008846:	f003 0320 	and.w	r3, r3, #32
2000884a:	2b20      	cmp	r3, #32
2000884c:	d0f0      	beq.n	20008830 <USB_FlushTxFifo+0x38>

  return HAL_OK;
2000884e:	2300      	movs	r3, #0
}
20008850:	4618      	mov	r0, r3
20008852:	3714      	adds	r7, #20
20008854:	46bd      	mov	sp, r7
20008856:	f85d 7b04 	ldr.w	r7, [sp], #4
2000885a:	4770      	bx	lr

2000885c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
2000885c:	b480      	push	{r7}
2000885e:	b085      	sub	sp, #20
20008860:	af00      	add	r7, sp, #0
20008862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
20008864:	2300      	movs	r3, #0
20008866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20008868:	68fb      	ldr	r3, [r7, #12]
2000886a:	3301      	adds	r3, #1
2000886c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000886e:	68fb      	ldr	r3, [r7, #12]
20008870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20008874:	d901      	bls.n	2000887a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
20008876:	2303      	movs	r3, #3
20008878:	e018      	b.n	200088ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
2000887a:	687b      	ldr	r3, [r7, #4]
2000887c:	691b      	ldr	r3, [r3, #16]
2000887e:	2b00      	cmp	r3, #0
20008880:	daf2      	bge.n	20008868 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
20008882:	2300      	movs	r3, #0
20008884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
20008886:	687b      	ldr	r3, [r7, #4]
20008888:	2210      	movs	r2, #16
2000888a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
2000888c:	68fb      	ldr	r3, [r7, #12]
2000888e:	3301      	adds	r3, #1
20008890:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20008892:	68fb      	ldr	r3, [r7, #12]
20008894:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20008898:	d901      	bls.n	2000889e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
2000889a:	2303      	movs	r3, #3
2000889c:	e006      	b.n	200088ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
2000889e:	687b      	ldr	r3, [r7, #4]
200088a0:	691b      	ldr	r3, [r3, #16]
200088a2:	f003 0310 	and.w	r3, r3, #16
200088a6:	2b10      	cmp	r3, #16
200088a8:	d0f0      	beq.n	2000888c <USB_FlushRxFifo+0x30>

  return HAL_OK;
200088aa:	2300      	movs	r3, #0
}
200088ac:	4618      	mov	r0, r3
200088ae:	3714      	adds	r7, #20
200088b0:	46bd      	mov	sp, r7
200088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200088b6:	4770      	bx	lr

200088b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
200088b8:	b480      	push	{r7}
200088ba:	b085      	sub	sp, #20
200088bc:	af00      	add	r7, sp, #0
200088be:	6078      	str	r0, [r7, #4]
200088c0:	460b      	mov	r3, r1
200088c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
200088c4:	687b      	ldr	r3, [r7, #4]
200088c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
200088c8:	68fb      	ldr	r3, [r7, #12]
200088ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200088ce:	681a      	ldr	r2, [r3, #0]
200088d0:	78fb      	ldrb	r3, [r7, #3]
200088d2:	68f9      	ldr	r1, [r7, #12]
200088d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200088d8:	4313      	orrs	r3, r2
200088da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
200088dc:	2300      	movs	r3, #0
}
200088de:	4618      	mov	r0, r3
200088e0:	3714      	adds	r7, #20
200088e2:	46bd      	mov	sp, r7
200088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200088e8:	4770      	bx	lr

200088ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
200088ea:	b480      	push	{r7}
200088ec:	b087      	sub	sp, #28
200088ee:	af00      	add	r7, sp, #0
200088f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200088f2:	687b      	ldr	r3, [r7, #4]
200088f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
200088f6:	693b      	ldr	r3, [r7, #16]
200088f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200088fc:	689b      	ldr	r3, [r3, #8]
200088fe:	f003 0306 	and.w	r3, r3, #6
20008902:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
20008904:	68fb      	ldr	r3, [r7, #12]
20008906:	2b00      	cmp	r3, #0
20008908:	d102      	bne.n	20008910 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
2000890a:	2300      	movs	r3, #0
2000890c:	75fb      	strb	r3, [r7, #23]
2000890e:	e00a      	b.n	20008926 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
20008910:	68fb      	ldr	r3, [r7, #12]
20008912:	2b02      	cmp	r3, #2
20008914:	d002      	beq.n	2000891c <USB_GetDevSpeed+0x32>
20008916:	68fb      	ldr	r3, [r7, #12]
20008918:	2b06      	cmp	r3, #6
2000891a:	d102      	bne.n	20008922 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
2000891c:	2302      	movs	r3, #2
2000891e:	75fb      	strb	r3, [r7, #23]
20008920:	e001      	b.n	20008926 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
20008922:	230f      	movs	r3, #15
20008924:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
20008926:	7dfb      	ldrb	r3, [r7, #23]
}
20008928:	4618      	mov	r0, r3
2000892a:	371c      	adds	r7, #28
2000892c:	46bd      	mov	sp, r7
2000892e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008932:	4770      	bx	lr

20008934 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20008934:	b480      	push	{r7}
20008936:	b085      	sub	sp, #20
20008938:	af00      	add	r7, sp, #0
2000893a:	6078      	str	r0, [r7, #4]
2000893c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000893e:	687b      	ldr	r3, [r7, #4]
20008940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20008942:	683b      	ldr	r3, [r7, #0]
20008944:	781b      	ldrb	r3, [r3, #0]
20008946:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20008948:	683b      	ldr	r3, [r7, #0]
2000894a:	785b      	ldrb	r3, [r3, #1]
2000894c:	2b01      	cmp	r3, #1
2000894e:	d139      	bne.n	200089c4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
20008950:	68fb      	ldr	r3, [r7, #12]
20008952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008956:	69da      	ldr	r2, [r3, #28]
20008958:	683b      	ldr	r3, [r7, #0]
2000895a:	781b      	ldrb	r3, [r3, #0]
2000895c:	f003 030f 	and.w	r3, r3, #15
20008960:	2101      	movs	r1, #1
20008962:	fa01 f303 	lsl.w	r3, r1, r3
20008966:	b29b      	uxth	r3, r3
20008968:	68f9      	ldr	r1, [r7, #12]
2000896a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000896e:	4313      	orrs	r3, r2
20008970:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
20008972:	68bb      	ldr	r3, [r7, #8]
20008974:	015a      	lsls	r2, r3, #5
20008976:	68fb      	ldr	r3, [r7, #12]
20008978:	4413      	add	r3, r2
2000897a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000897e:	681b      	ldr	r3, [r3, #0]
20008980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20008984:	2b00      	cmp	r3, #0
20008986:	d153      	bne.n	20008a30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20008988:	68bb      	ldr	r3, [r7, #8]
2000898a:	015a      	lsls	r2, r3, #5
2000898c:	68fb      	ldr	r3, [r7, #12]
2000898e:	4413      	add	r3, r2
20008990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008994:	681a      	ldr	r2, [r3, #0]
20008996:	683b      	ldr	r3, [r7, #0]
20008998:	689b      	ldr	r3, [r3, #8]
2000899a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
2000899e:	683b      	ldr	r3, [r7, #0]
200089a0:	791b      	ldrb	r3, [r3, #4]
200089a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
200089a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
200089a6:	68bb      	ldr	r3, [r7, #8]
200089a8:	059b      	lsls	r3, r3, #22
200089aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
200089ac:	431a      	orrs	r2, r3
200089ae:	68bb      	ldr	r3, [r7, #8]
200089b0:	0159      	lsls	r1, r3, #5
200089b2:	68fb      	ldr	r3, [r7, #12]
200089b4:	440b      	add	r3, r1
200089b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200089ba:	4619      	mov	r1, r3
200089bc:	4b20      	ldr	r3, [pc, #128]	@ (20008a40 <USB_ActivateEndpoint+0x10c>)
200089be:	4313      	orrs	r3, r2
200089c0:	600b      	str	r3, [r1, #0]
200089c2:	e035      	b.n	20008a30 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
200089c4:	68fb      	ldr	r3, [r7, #12]
200089c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200089ca:	69da      	ldr	r2, [r3, #28]
200089cc:	683b      	ldr	r3, [r7, #0]
200089ce:	781b      	ldrb	r3, [r3, #0]
200089d0:	f003 030f 	and.w	r3, r3, #15
200089d4:	2101      	movs	r1, #1
200089d6:	fa01 f303 	lsl.w	r3, r1, r3
200089da:	041b      	lsls	r3, r3, #16
200089dc:	68f9      	ldr	r1, [r7, #12]
200089de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200089e2:	4313      	orrs	r3, r2
200089e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
200089e6:	68bb      	ldr	r3, [r7, #8]
200089e8:	015a      	lsls	r2, r3, #5
200089ea:	68fb      	ldr	r3, [r7, #12]
200089ec:	4413      	add	r3, r2
200089ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200089f2:	681b      	ldr	r3, [r3, #0]
200089f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
200089f8:	2b00      	cmp	r3, #0
200089fa:	d119      	bne.n	20008a30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
200089fc:	68bb      	ldr	r3, [r7, #8]
200089fe:	015a      	lsls	r2, r3, #5
20008a00:	68fb      	ldr	r3, [r7, #12]
20008a02:	4413      	add	r3, r2
20008a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008a08:	681a      	ldr	r2, [r3, #0]
20008a0a:	683b      	ldr	r3, [r7, #0]
20008a0c:	689b      	ldr	r3, [r3, #8]
20008a0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
20008a12:	683b      	ldr	r3, [r7, #0]
20008a14:	791b      	ldrb	r3, [r3, #4]
20008a16:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20008a18:	430b      	orrs	r3, r1
20008a1a:	431a      	orrs	r2, r3
20008a1c:	68bb      	ldr	r3, [r7, #8]
20008a1e:	0159      	lsls	r1, r3, #5
20008a20:	68fb      	ldr	r3, [r7, #12]
20008a22:	440b      	add	r3, r1
20008a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008a28:	4619      	mov	r1, r3
20008a2a:	4b05      	ldr	r3, [pc, #20]	@ (20008a40 <USB_ActivateEndpoint+0x10c>)
20008a2c:	4313      	orrs	r3, r2
20008a2e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
20008a30:	2300      	movs	r3, #0
}
20008a32:	4618      	mov	r0, r3
20008a34:	3714      	adds	r7, #20
20008a36:	46bd      	mov	sp, r7
20008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
20008a3c:	4770      	bx	lr
20008a3e:	bf00      	nop
20008a40:	10008000 	.word	0x10008000

20008a44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20008a44:	b480      	push	{r7}
20008a46:	b085      	sub	sp, #20
20008a48:	af00      	add	r7, sp, #0
20008a4a:	6078      	str	r0, [r7, #4]
20008a4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008a4e:	687b      	ldr	r3, [r7, #4]
20008a50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20008a52:	683b      	ldr	r3, [r7, #0]
20008a54:	781b      	ldrb	r3, [r3, #0]
20008a56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
20008a58:	683b      	ldr	r3, [r7, #0]
20008a5a:	785b      	ldrb	r3, [r3, #1]
20008a5c:	2b01      	cmp	r3, #1
20008a5e:	d161      	bne.n	20008b24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20008a60:	68bb      	ldr	r3, [r7, #8]
20008a62:	015a      	lsls	r2, r3, #5
20008a64:	68fb      	ldr	r3, [r7, #12]
20008a66:	4413      	add	r3, r2
20008a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008a6c:	681b      	ldr	r3, [r3, #0]
20008a6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008a72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20008a76:	d11f      	bne.n	20008ab8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
20008a78:	68bb      	ldr	r3, [r7, #8]
20008a7a:	015a      	lsls	r2, r3, #5
20008a7c:	68fb      	ldr	r3, [r7, #12]
20008a7e:	4413      	add	r3, r2
20008a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008a84:	681b      	ldr	r3, [r3, #0]
20008a86:	68ba      	ldr	r2, [r7, #8]
20008a88:	0151      	lsls	r1, r2, #5
20008a8a:	68fa      	ldr	r2, [r7, #12]
20008a8c:	440a      	add	r2, r1
20008a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008a92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20008a96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
20008a98:	68bb      	ldr	r3, [r7, #8]
20008a9a:	015a      	lsls	r2, r3, #5
20008a9c:	68fb      	ldr	r3, [r7, #12]
20008a9e:	4413      	add	r3, r2
20008aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008aa4:	681b      	ldr	r3, [r3, #0]
20008aa6:	68ba      	ldr	r2, [r7, #8]
20008aa8:	0151      	lsls	r1, r2, #5
20008aaa:	68fa      	ldr	r2, [r7, #12]
20008aac:	440a      	add	r2, r1
20008aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008ab2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20008ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
20008ab8:	68fb      	ldr	r3, [r7, #12]
20008aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20008ac0:	683b      	ldr	r3, [r7, #0]
20008ac2:	781b      	ldrb	r3, [r3, #0]
20008ac4:	f003 030f 	and.w	r3, r3, #15
20008ac8:	2101      	movs	r1, #1
20008aca:	fa01 f303 	lsl.w	r3, r1, r3
20008ace:	b29b      	uxth	r3, r3
20008ad0:	43db      	mvns	r3, r3
20008ad2:	68f9      	ldr	r1, [r7, #12]
20008ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008ad8:	4013      	ands	r3, r2
20008ada:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
20008adc:	68fb      	ldr	r3, [r7, #12]
20008ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008ae2:	69da      	ldr	r2, [r3, #28]
20008ae4:	683b      	ldr	r3, [r7, #0]
20008ae6:	781b      	ldrb	r3, [r3, #0]
20008ae8:	f003 030f 	and.w	r3, r3, #15
20008aec:	2101      	movs	r1, #1
20008aee:	fa01 f303 	lsl.w	r3, r1, r3
20008af2:	b29b      	uxth	r3, r3
20008af4:	43db      	mvns	r3, r3
20008af6:	68f9      	ldr	r1, [r7, #12]
20008af8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008afc:	4013      	ands	r3, r2
20008afe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
20008b00:	68bb      	ldr	r3, [r7, #8]
20008b02:	015a      	lsls	r2, r3, #5
20008b04:	68fb      	ldr	r3, [r7, #12]
20008b06:	4413      	add	r3, r2
20008b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008b0c:	681a      	ldr	r2, [r3, #0]
20008b0e:	68bb      	ldr	r3, [r7, #8]
20008b10:	0159      	lsls	r1, r3, #5
20008b12:	68fb      	ldr	r3, [r7, #12]
20008b14:	440b      	add	r3, r1
20008b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008b1a:	4619      	mov	r1, r3
20008b1c:	4b35      	ldr	r3, [pc, #212]	@ (20008bf4 <USB_DeactivateEndpoint+0x1b0>)
20008b1e:	4013      	ands	r3, r2
20008b20:	600b      	str	r3, [r1, #0]
20008b22:	e060      	b.n	20008be6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20008b24:	68bb      	ldr	r3, [r7, #8]
20008b26:	015a      	lsls	r2, r3, #5
20008b28:	68fb      	ldr	r3, [r7, #12]
20008b2a:	4413      	add	r3, r2
20008b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008b30:	681b      	ldr	r3, [r3, #0]
20008b32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008b36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20008b3a:	d11f      	bne.n	20008b7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20008b3c:	68bb      	ldr	r3, [r7, #8]
20008b3e:	015a      	lsls	r2, r3, #5
20008b40:	68fb      	ldr	r3, [r7, #12]
20008b42:	4413      	add	r3, r2
20008b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008b48:	681b      	ldr	r3, [r3, #0]
20008b4a:	68ba      	ldr	r2, [r7, #8]
20008b4c:	0151      	lsls	r1, r2, #5
20008b4e:	68fa      	ldr	r2, [r7, #12]
20008b50:	440a      	add	r2, r1
20008b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008b56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20008b5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
20008b5c:	68bb      	ldr	r3, [r7, #8]
20008b5e:	015a      	lsls	r2, r3, #5
20008b60:	68fb      	ldr	r3, [r7, #12]
20008b62:	4413      	add	r3, r2
20008b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008b68:	681b      	ldr	r3, [r3, #0]
20008b6a:	68ba      	ldr	r2, [r7, #8]
20008b6c:	0151      	lsls	r1, r2, #5
20008b6e:	68fa      	ldr	r2, [r7, #12]
20008b70:	440a      	add	r2, r1
20008b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008b76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20008b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20008b7c:	68fb      	ldr	r3, [r7, #12]
20008b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008b82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20008b84:	683b      	ldr	r3, [r7, #0]
20008b86:	781b      	ldrb	r3, [r3, #0]
20008b88:	f003 030f 	and.w	r3, r3, #15
20008b8c:	2101      	movs	r1, #1
20008b8e:	fa01 f303 	lsl.w	r3, r1, r3
20008b92:	041b      	lsls	r3, r3, #16
20008b94:	43db      	mvns	r3, r3
20008b96:	68f9      	ldr	r1, [r7, #12]
20008b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008b9c:	4013      	ands	r3, r2
20008b9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20008ba0:	68fb      	ldr	r3, [r7, #12]
20008ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008ba6:	69da      	ldr	r2, [r3, #28]
20008ba8:	683b      	ldr	r3, [r7, #0]
20008baa:	781b      	ldrb	r3, [r3, #0]
20008bac:	f003 030f 	and.w	r3, r3, #15
20008bb0:	2101      	movs	r1, #1
20008bb2:	fa01 f303 	lsl.w	r3, r1, r3
20008bb6:	041b      	lsls	r3, r3, #16
20008bb8:	43db      	mvns	r3, r3
20008bba:	68f9      	ldr	r1, [r7, #12]
20008bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008bc0:	4013      	ands	r3, r2
20008bc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
20008bc4:	68bb      	ldr	r3, [r7, #8]
20008bc6:	015a      	lsls	r2, r3, #5
20008bc8:	68fb      	ldr	r3, [r7, #12]
20008bca:	4413      	add	r3, r2
20008bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008bd0:	681a      	ldr	r2, [r3, #0]
20008bd2:	68bb      	ldr	r3, [r7, #8]
20008bd4:	0159      	lsls	r1, r3, #5
20008bd6:	68fb      	ldr	r3, [r7, #12]
20008bd8:	440b      	add	r3, r1
20008bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008bde:	4619      	mov	r1, r3
20008be0:	4b05      	ldr	r3, [pc, #20]	@ (20008bf8 <USB_DeactivateEndpoint+0x1b4>)
20008be2:	4013      	ands	r3, r2
20008be4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
20008be6:	2300      	movs	r3, #0
}
20008be8:	4618      	mov	r0, r3
20008bea:	3714      	adds	r7, #20
20008bec:	46bd      	mov	sp, r7
20008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
20008bf2:	4770      	bx	lr
20008bf4:	ec337800 	.word	0xec337800
20008bf8:	eff37800 	.word	0xeff37800

20008bfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
20008bfc:	b580      	push	{r7, lr}
20008bfe:	b08a      	sub	sp, #40	@ 0x28
20008c00:	af02      	add	r7, sp, #8
20008c02:	60f8      	str	r0, [r7, #12]
20008c04:	60b9      	str	r1, [r7, #8]
20008c06:	4613      	mov	r3, r2
20008c08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008c0a:	68fb      	ldr	r3, [r7, #12]
20008c0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
20008c0e:	68bb      	ldr	r3, [r7, #8]
20008c10:	781b      	ldrb	r3, [r3, #0]
20008c12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
20008c14:	68bb      	ldr	r3, [r7, #8]
20008c16:	785b      	ldrb	r3, [r3, #1]
20008c18:	2b01      	cmp	r3, #1
20008c1a:	f040 8185 	bne.w	20008f28 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
20008c1e:	68bb      	ldr	r3, [r7, #8]
20008c20:	691b      	ldr	r3, [r3, #16]
20008c22:	2b00      	cmp	r3, #0
20008c24:	d132      	bne.n	20008c8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
20008c26:	69bb      	ldr	r3, [r7, #24]
20008c28:	015a      	lsls	r2, r3, #5
20008c2a:	69fb      	ldr	r3, [r7, #28]
20008c2c:	4413      	add	r3, r2
20008c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008c32:	691a      	ldr	r2, [r3, #16]
20008c34:	69bb      	ldr	r3, [r7, #24]
20008c36:	0159      	lsls	r1, r3, #5
20008c38:	69fb      	ldr	r3, [r7, #28]
20008c3a:	440b      	add	r3, r1
20008c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008c40:	4619      	mov	r1, r3
20008c42:	4ba7      	ldr	r3, [pc, #668]	@ (20008ee0 <USB_EPStartXfer+0x2e4>)
20008c44:	4013      	ands	r3, r2
20008c46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
20008c48:	69bb      	ldr	r3, [r7, #24]
20008c4a:	015a      	lsls	r2, r3, #5
20008c4c:	69fb      	ldr	r3, [r7, #28]
20008c4e:	4413      	add	r3, r2
20008c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008c54:	691b      	ldr	r3, [r3, #16]
20008c56:	69ba      	ldr	r2, [r7, #24]
20008c58:	0151      	lsls	r1, r2, #5
20008c5a:	69fa      	ldr	r2, [r7, #28]
20008c5c:	440a      	add	r2, r1
20008c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008c62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20008c66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20008c68:	69bb      	ldr	r3, [r7, #24]
20008c6a:	015a      	lsls	r2, r3, #5
20008c6c:	69fb      	ldr	r3, [r7, #28]
20008c6e:	4413      	add	r3, r2
20008c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008c74:	691a      	ldr	r2, [r3, #16]
20008c76:	69bb      	ldr	r3, [r7, #24]
20008c78:	0159      	lsls	r1, r3, #5
20008c7a:	69fb      	ldr	r3, [r7, #28]
20008c7c:	440b      	add	r3, r1
20008c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008c82:	4619      	mov	r1, r3
20008c84:	4b97      	ldr	r3, [pc, #604]	@ (20008ee4 <USB_EPStartXfer+0x2e8>)
20008c86:	4013      	ands	r3, r2
20008c88:	610b      	str	r3, [r1, #16]
20008c8a:	e097      	b.n	20008dbc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20008c8c:	69bb      	ldr	r3, [r7, #24]
20008c8e:	015a      	lsls	r2, r3, #5
20008c90:	69fb      	ldr	r3, [r7, #28]
20008c92:	4413      	add	r3, r2
20008c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008c98:	691a      	ldr	r2, [r3, #16]
20008c9a:	69bb      	ldr	r3, [r7, #24]
20008c9c:	0159      	lsls	r1, r3, #5
20008c9e:	69fb      	ldr	r3, [r7, #28]
20008ca0:	440b      	add	r3, r1
20008ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008ca6:	4619      	mov	r1, r3
20008ca8:	4b8e      	ldr	r3, [pc, #568]	@ (20008ee4 <USB_EPStartXfer+0x2e8>)
20008caa:	4013      	ands	r3, r2
20008cac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
20008cae:	69bb      	ldr	r3, [r7, #24]
20008cb0:	015a      	lsls	r2, r3, #5
20008cb2:	69fb      	ldr	r3, [r7, #28]
20008cb4:	4413      	add	r3, r2
20008cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008cba:	691a      	ldr	r2, [r3, #16]
20008cbc:	69bb      	ldr	r3, [r7, #24]
20008cbe:	0159      	lsls	r1, r3, #5
20008cc0:	69fb      	ldr	r3, [r7, #28]
20008cc2:	440b      	add	r3, r1
20008cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008cc8:	4619      	mov	r1, r3
20008cca:	4b85      	ldr	r3, [pc, #532]	@ (20008ee0 <USB_EPStartXfer+0x2e4>)
20008ccc:	4013      	ands	r3, r2
20008cce:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
20008cd0:	69bb      	ldr	r3, [r7, #24]
20008cd2:	2b00      	cmp	r3, #0
20008cd4:	d11a      	bne.n	20008d0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
20008cd6:	68bb      	ldr	r3, [r7, #8]
20008cd8:	691a      	ldr	r2, [r3, #16]
20008cda:	68bb      	ldr	r3, [r7, #8]
20008cdc:	689b      	ldr	r3, [r3, #8]
20008cde:	429a      	cmp	r2, r3
20008ce0:	d903      	bls.n	20008cea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
20008ce2:	68bb      	ldr	r3, [r7, #8]
20008ce4:	689a      	ldr	r2, [r3, #8]
20008ce6:	68bb      	ldr	r3, [r7, #8]
20008ce8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
20008cea:	69bb      	ldr	r3, [r7, #24]
20008cec:	015a      	lsls	r2, r3, #5
20008cee:	69fb      	ldr	r3, [r7, #28]
20008cf0:	4413      	add	r3, r2
20008cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008cf6:	691b      	ldr	r3, [r3, #16]
20008cf8:	69ba      	ldr	r2, [r7, #24]
20008cfa:	0151      	lsls	r1, r2, #5
20008cfc:	69fa      	ldr	r2, [r7, #28]
20008cfe:	440a      	add	r2, r1
20008d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008d04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20008d08:	6113      	str	r3, [r2, #16]
20008d0a:	e044      	b.n	20008d96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
20008d0c:	68bb      	ldr	r3, [r7, #8]
20008d0e:	691a      	ldr	r2, [r3, #16]
20008d10:	68bb      	ldr	r3, [r7, #8]
20008d12:	689b      	ldr	r3, [r3, #8]
20008d14:	4413      	add	r3, r2
20008d16:	1e5a      	subs	r2, r3, #1
20008d18:	68bb      	ldr	r3, [r7, #8]
20008d1a:	689b      	ldr	r3, [r3, #8]
20008d1c:	fbb2 f3f3 	udiv	r3, r2, r3
20008d20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
20008d22:	69bb      	ldr	r3, [r7, #24]
20008d24:	015a      	lsls	r2, r3, #5
20008d26:	69fb      	ldr	r3, [r7, #28]
20008d28:	4413      	add	r3, r2
20008d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008d2e:	691a      	ldr	r2, [r3, #16]
20008d30:	8afb      	ldrh	r3, [r7, #22]
20008d32:	04d9      	lsls	r1, r3, #19
20008d34:	4b6c      	ldr	r3, [pc, #432]	@ (20008ee8 <USB_EPStartXfer+0x2ec>)
20008d36:	400b      	ands	r3, r1
20008d38:	69b9      	ldr	r1, [r7, #24]
20008d3a:	0148      	lsls	r0, r1, #5
20008d3c:	69f9      	ldr	r1, [r7, #28]
20008d3e:	4401      	add	r1, r0
20008d40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
20008d44:	4313      	orrs	r3, r2
20008d46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
20008d48:	68bb      	ldr	r3, [r7, #8]
20008d4a:	791b      	ldrb	r3, [r3, #4]
20008d4c:	2b01      	cmp	r3, #1
20008d4e:	d122      	bne.n	20008d96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
20008d50:	69bb      	ldr	r3, [r7, #24]
20008d52:	015a      	lsls	r2, r3, #5
20008d54:	69fb      	ldr	r3, [r7, #28]
20008d56:	4413      	add	r3, r2
20008d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008d5c:	691b      	ldr	r3, [r3, #16]
20008d5e:	69ba      	ldr	r2, [r7, #24]
20008d60:	0151      	lsls	r1, r2, #5
20008d62:	69fa      	ldr	r2, [r7, #28]
20008d64:	440a      	add	r2, r1
20008d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008d6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
20008d6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
20008d70:	69bb      	ldr	r3, [r7, #24]
20008d72:	015a      	lsls	r2, r3, #5
20008d74:	69fb      	ldr	r3, [r7, #28]
20008d76:	4413      	add	r3, r2
20008d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008d7c:	691a      	ldr	r2, [r3, #16]
20008d7e:	8afb      	ldrh	r3, [r7, #22]
20008d80:	075b      	lsls	r3, r3, #29
20008d82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
20008d86:	69b9      	ldr	r1, [r7, #24]
20008d88:	0148      	lsls	r0, r1, #5
20008d8a:	69f9      	ldr	r1, [r7, #28]
20008d8c:	4401      	add	r1, r0
20008d8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
20008d92:	4313      	orrs	r3, r2
20008d94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
20008d96:	69bb      	ldr	r3, [r7, #24]
20008d98:	015a      	lsls	r2, r3, #5
20008d9a:	69fb      	ldr	r3, [r7, #28]
20008d9c:	4413      	add	r3, r2
20008d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008da2:	691a      	ldr	r2, [r3, #16]
20008da4:	68bb      	ldr	r3, [r7, #8]
20008da6:	691b      	ldr	r3, [r3, #16]
20008da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
20008dac:	69b9      	ldr	r1, [r7, #24]
20008dae:	0148      	lsls	r0, r1, #5
20008db0:	69f9      	ldr	r1, [r7, #28]
20008db2:	4401      	add	r1, r0
20008db4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
20008db8:	4313      	orrs	r3, r2
20008dba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
20008dbc:	79fb      	ldrb	r3, [r7, #7]
20008dbe:	2b01      	cmp	r3, #1
20008dc0:	d14b      	bne.n	20008e5a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
20008dc2:	68bb      	ldr	r3, [r7, #8]
20008dc4:	69db      	ldr	r3, [r3, #28]
20008dc6:	2b00      	cmp	r3, #0
20008dc8:	d009      	beq.n	20008dde <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
20008dca:	69bb      	ldr	r3, [r7, #24]
20008dcc:	015a      	lsls	r2, r3, #5
20008dce:	69fb      	ldr	r3, [r7, #28]
20008dd0:	4413      	add	r3, r2
20008dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008dd6:	461a      	mov	r2, r3
20008dd8:	68bb      	ldr	r3, [r7, #8]
20008dda:	69db      	ldr	r3, [r3, #28]
20008ddc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
20008dde:	68bb      	ldr	r3, [r7, #8]
20008de0:	791b      	ldrb	r3, [r3, #4]
20008de2:	2b01      	cmp	r3, #1
20008de4:	d128      	bne.n	20008e38 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
20008de6:	69fb      	ldr	r3, [r7, #28]
20008de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008dec:	689b      	ldr	r3, [r3, #8]
20008dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008df2:	2b00      	cmp	r3, #0
20008df4:	d110      	bne.n	20008e18 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
20008df6:	69bb      	ldr	r3, [r7, #24]
20008df8:	015a      	lsls	r2, r3, #5
20008dfa:	69fb      	ldr	r3, [r7, #28]
20008dfc:	4413      	add	r3, r2
20008dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008e02:	681b      	ldr	r3, [r3, #0]
20008e04:	69ba      	ldr	r2, [r7, #24]
20008e06:	0151      	lsls	r1, r2, #5
20008e08:	69fa      	ldr	r2, [r7, #28]
20008e0a:	440a      	add	r2, r1
20008e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008e10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20008e14:	6013      	str	r3, [r2, #0]
20008e16:	e00f      	b.n	20008e38 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
20008e18:	69bb      	ldr	r3, [r7, #24]
20008e1a:	015a      	lsls	r2, r3, #5
20008e1c:	69fb      	ldr	r3, [r7, #28]
20008e1e:	4413      	add	r3, r2
20008e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008e24:	681b      	ldr	r3, [r3, #0]
20008e26:	69ba      	ldr	r2, [r7, #24]
20008e28:	0151      	lsls	r1, r2, #5
20008e2a:	69fa      	ldr	r2, [r7, #28]
20008e2c:	440a      	add	r2, r1
20008e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008e36:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20008e38:	69bb      	ldr	r3, [r7, #24]
20008e3a:	015a      	lsls	r2, r3, #5
20008e3c:	69fb      	ldr	r3, [r7, #28]
20008e3e:	4413      	add	r3, r2
20008e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008e44:	681b      	ldr	r3, [r3, #0]
20008e46:	69ba      	ldr	r2, [r7, #24]
20008e48:	0151      	lsls	r1, r2, #5
20008e4a:	69fa      	ldr	r2, [r7, #28]
20008e4c:	440a      	add	r2, r1
20008e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008e52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20008e56:	6013      	str	r3, [r2, #0]
20008e58:	e169      	b.n	2000912e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20008e5a:	69bb      	ldr	r3, [r7, #24]
20008e5c:	015a      	lsls	r2, r3, #5
20008e5e:	69fb      	ldr	r3, [r7, #28]
20008e60:	4413      	add	r3, r2
20008e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008e66:	681b      	ldr	r3, [r3, #0]
20008e68:	69ba      	ldr	r2, [r7, #24]
20008e6a:	0151      	lsls	r1, r2, #5
20008e6c:	69fa      	ldr	r2, [r7, #28]
20008e6e:	440a      	add	r2, r1
20008e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008e74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20008e78:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
20008e7a:	68bb      	ldr	r3, [r7, #8]
20008e7c:	791b      	ldrb	r3, [r3, #4]
20008e7e:	2b01      	cmp	r3, #1
20008e80:	d015      	beq.n	20008eae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
20008e82:	68bb      	ldr	r3, [r7, #8]
20008e84:	691b      	ldr	r3, [r3, #16]
20008e86:	2b00      	cmp	r3, #0
20008e88:	f000 8151 	beq.w	2000912e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
20008e8c:	69fb      	ldr	r3, [r7, #28]
20008e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20008e94:	68bb      	ldr	r3, [r7, #8]
20008e96:	781b      	ldrb	r3, [r3, #0]
20008e98:	f003 030f 	and.w	r3, r3, #15
20008e9c:	2101      	movs	r1, #1
20008e9e:	fa01 f303 	lsl.w	r3, r1, r3
20008ea2:	69f9      	ldr	r1, [r7, #28]
20008ea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008ea8:	4313      	orrs	r3, r2
20008eaa:	634b      	str	r3, [r1, #52]	@ 0x34
20008eac:	e13f      	b.n	2000912e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
20008eae:	69fb      	ldr	r3, [r7, #28]
20008eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008eb4:	689b      	ldr	r3, [r3, #8]
20008eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008eba:	2b00      	cmp	r3, #0
20008ebc:	d116      	bne.n	20008eec <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
20008ebe:	69bb      	ldr	r3, [r7, #24]
20008ec0:	015a      	lsls	r2, r3, #5
20008ec2:	69fb      	ldr	r3, [r7, #28]
20008ec4:	4413      	add	r3, r2
20008ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008eca:	681b      	ldr	r3, [r3, #0]
20008ecc:	69ba      	ldr	r2, [r7, #24]
20008ece:	0151      	lsls	r1, r2, #5
20008ed0:	69fa      	ldr	r2, [r7, #28]
20008ed2:	440a      	add	r2, r1
20008ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008ed8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20008edc:	6013      	str	r3, [r2, #0]
20008ede:	e015      	b.n	20008f0c <USB_EPStartXfer+0x310>
20008ee0:	e007ffff 	.word	0xe007ffff
20008ee4:	fff80000 	.word	0xfff80000
20008ee8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
20008eec:	69bb      	ldr	r3, [r7, #24]
20008eee:	015a      	lsls	r2, r3, #5
20008ef0:	69fb      	ldr	r3, [r7, #28]
20008ef2:	4413      	add	r3, r2
20008ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008ef8:	681b      	ldr	r3, [r3, #0]
20008efa:	69ba      	ldr	r2, [r7, #24]
20008efc:	0151      	lsls	r1, r2, #5
20008efe:	69fa      	ldr	r2, [r7, #28]
20008f00:	440a      	add	r2, r1
20008f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008f0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
20008f0c:	68bb      	ldr	r3, [r7, #8]
20008f0e:	68d9      	ldr	r1, [r3, #12]
20008f10:	68bb      	ldr	r3, [r7, #8]
20008f12:	781a      	ldrb	r2, [r3, #0]
20008f14:	68bb      	ldr	r3, [r7, #8]
20008f16:	691b      	ldr	r3, [r3, #16]
20008f18:	b298      	uxth	r0, r3
20008f1a:	79fb      	ldrb	r3, [r7, #7]
20008f1c:	9300      	str	r3, [sp, #0]
20008f1e:	4603      	mov	r3, r0
20008f20:	68f8      	ldr	r0, [r7, #12]
20008f22:	f000 f9b9 	bl	20009298 <USB_WritePacket>
20008f26:	e102      	b.n	2000912e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
20008f28:	69bb      	ldr	r3, [r7, #24]
20008f2a:	015a      	lsls	r2, r3, #5
20008f2c:	69fb      	ldr	r3, [r7, #28]
20008f2e:	4413      	add	r3, r2
20008f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008f34:	691a      	ldr	r2, [r3, #16]
20008f36:	69bb      	ldr	r3, [r7, #24]
20008f38:	0159      	lsls	r1, r3, #5
20008f3a:	69fb      	ldr	r3, [r7, #28]
20008f3c:	440b      	add	r3, r1
20008f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008f42:	4619      	mov	r1, r3
20008f44:	4b7c      	ldr	r3, [pc, #496]	@ (20009138 <USB_EPStartXfer+0x53c>)
20008f46:	4013      	ands	r3, r2
20008f48:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
20008f4a:	69bb      	ldr	r3, [r7, #24]
20008f4c:	015a      	lsls	r2, r3, #5
20008f4e:	69fb      	ldr	r3, [r7, #28]
20008f50:	4413      	add	r3, r2
20008f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008f56:	691a      	ldr	r2, [r3, #16]
20008f58:	69bb      	ldr	r3, [r7, #24]
20008f5a:	0159      	lsls	r1, r3, #5
20008f5c:	69fb      	ldr	r3, [r7, #28]
20008f5e:	440b      	add	r3, r1
20008f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008f64:	4619      	mov	r1, r3
20008f66:	4b75      	ldr	r3, [pc, #468]	@ (2000913c <USB_EPStartXfer+0x540>)
20008f68:	4013      	ands	r3, r2
20008f6a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
20008f6c:	69bb      	ldr	r3, [r7, #24]
20008f6e:	2b00      	cmp	r3, #0
20008f70:	d12f      	bne.n	20008fd2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
20008f72:	68bb      	ldr	r3, [r7, #8]
20008f74:	691b      	ldr	r3, [r3, #16]
20008f76:	2b00      	cmp	r3, #0
20008f78:	d003      	beq.n	20008f82 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
20008f7a:	68bb      	ldr	r3, [r7, #8]
20008f7c:	689a      	ldr	r2, [r3, #8]
20008f7e:	68bb      	ldr	r3, [r7, #8]
20008f80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
20008f82:	68bb      	ldr	r3, [r7, #8]
20008f84:	689a      	ldr	r2, [r3, #8]
20008f86:	68bb      	ldr	r3, [r7, #8]
20008f88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
20008f8a:	69bb      	ldr	r3, [r7, #24]
20008f8c:	015a      	lsls	r2, r3, #5
20008f8e:	69fb      	ldr	r3, [r7, #28]
20008f90:	4413      	add	r3, r2
20008f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008f96:	691a      	ldr	r2, [r3, #16]
20008f98:	68bb      	ldr	r3, [r7, #8]
20008f9a:	6a1b      	ldr	r3, [r3, #32]
20008f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
20008fa0:	69b9      	ldr	r1, [r7, #24]
20008fa2:	0148      	lsls	r0, r1, #5
20008fa4:	69f9      	ldr	r1, [r7, #28]
20008fa6:	4401      	add	r1, r0
20008fa8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20008fac:	4313      	orrs	r3, r2
20008fae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
20008fb0:	69bb      	ldr	r3, [r7, #24]
20008fb2:	015a      	lsls	r2, r3, #5
20008fb4:	69fb      	ldr	r3, [r7, #28]
20008fb6:	4413      	add	r3, r2
20008fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008fbc:	691b      	ldr	r3, [r3, #16]
20008fbe:	69ba      	ldr	r2, [r7, #24]
20008fc0:	0151      	lsls	r1, r2, #5
20008fc2:	69fa      	ldr	r2, [r7, #28]
20008fc4:	440a      	add	r2, r1
20008fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008fca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20008fce:	6113      	str	r3, [r2, #16]
20008fd0:	e05f      	b.n	20009092 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
20008fd2:	68bb      	ldr	r3, [r7, #8]
20008fd4:	691b      	ldr	r3, [r3, #16]
20008fd6:	2b00      	cmp	r3, #0
20008fd8:	d123      	bne.n	20009022 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
20008fda:	69bb      	ldr	r3, [r7, #24]
20008fdc:	015a      	lsls	r2, r3, #5
20008fde:	69fb      	ldr	r3, [r7, #28]
20008fe0:	4413      	add	r3, r2
20008fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008fe6:	691a      	ldr	r2, [r3, #16]
20008fe8:	68bb      	ldr	r3, [r7, #8]
20008fea:	689b      	ldr	r3, [r3, #8]
20008fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
20008ff0:	69b9      	ldr	r1, [r7, #24]
20008ff2:	0148      	lsls	r0, r1, #5
20008ff4:	69f9      	ldr	r1, [r7, #28]
20008ff6:	4401      	add	r1, r0
20008ff8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20008ffc:	4313      	orrs	r3, r2
20008ffe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
20009000:	69bb      	ldr	r3, [r7, #24]
20009002:	015a      	lsls	r2, r3, #5
20009004:	69fb      	ldr	r3, [r7, #28]
20009006:	4413      	add	r3, r2
20009008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000900c:	691b      	ldr	r3, [r3, #16]
2000900e:	69ba      	ldr	r2, [r7, #24]
20009010:	0151      	lsls	r1, r2, #5
20009012:	69fa      	ldr	r2, [r7, #28]
20009014:	440a      	add	r2, r1
20009016:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000901a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000901e:	6113      	str	r3, [r2, #16]
20009020:	e037      	b.n	20009092 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
20009022:	68bb      	ldr	r3, [r7, #8]
20009024:	691a      	ldr	r2, [r3, #16]
20009026:	68bb      	ldr	r3, [r7, #8]
20009028:	689b      	ldr	r3, [r3, #8]
2000902a:	4413      	add	r3, r2
2000902c:	1e5a      	subs	r2, r3, #1
2000902e:	68bb      	ldr	r3, [r7, #8]
20009030:	689b      	ldr	r3, [r3, #8]
20009032:	fbb2 f3f3 	udiv	r3, r2, r3
20009036:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
20009038:	68bb      	ldr	r3, [r7, #8]
2000903a:	689b      	ldr	r3, [r3, #8]
2000903c:	8afa      	ldrh	r2, [r7, #22]
2000903e:	fb03 f202 	mul.w	r2, r3, r2
20009042:	68bb      	ldr	r3, [r7, #8]
20009044:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
20009046:	69bb      	ldr	r3, [r7, #24]
20009048:	015a      	lsls	r2, r3, #5
2000904a:	69fb      	ldr	r3, [r7, #28]
2000904c:	4413      	add	r3, r2
2000904e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009052:	691a      	ldr	r2, [r3, #16]
20009054:	8afb      	ldrh	r3, [r7, #22]
20009056:	04d9      	lsls	r1, r3, #19
20009058:	4b39      	ldr	r3, [pc, #228]	@ (20009140 <USB_EPStartXfer+0x544>)
2000905a:	400b      	ands	r3, r1
2000905c:	69b9      	ldr	r1, [r7, #24]
2000905e:	0148      	lsls	r0, r1, #5
20009060:	69f9      	ldr	r1, [r7, #28]
20009062:	4401      	add	r1, r0
20009064:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20009068:	4313      	orrs	r3, r2
2000906a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
2000906c:	69bb      	ldr	r3, [r7, #24]
2000906e:	015a      	lsls	r2, r3, #5
20009070:	69fb      	ldr	r3, [r7, #28]
20009072:	4413      	add	r3, r2
20009074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009078:	691a      	ldr	r2, [r3, #16]
2000907a:	68bb      	ldr	r3, [r7, #8]
2000907c:	6a1b      	ldr	r3, [r3, #32]
2000907e:	f3c3 0312 	ubfx	r3, r3, #0, #19
20009082:	69b9      	ldr	r1, [r7, #24]
20009084:	0148      	lsls	r0, r1, #5
20009086:	69f9      	ldr	r1, [r7, #28]
20009088:	4401      	add	r1, r0
2000908a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000908e:	4313      	orrs	r3, r2
20009090:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
20009092:	79fb      	ldrb	r3, [r7, #7]
20009094:	2b01      	cmp	r3, #1
20009096:	d10d      	bne.n	200090b4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
20009098:	68bb      	ldr	r3, [r7, #8]
2000909a:	68db      	ldr	r3, [r3, #12]
2000909c:	2b00      	cmp	r3, #0
2000909e:	d009      	beq.n	200090b4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
200090a0:	68bb      	ldr	r3, [r7, #8]
200090a2:	68d9      	ldr	r1, [r3, #12]
200090a4:	69bb      	ldr	r3, [r7, #24]
200090a6:	015a      	lsls	r2, r3, #5
200090a8:	69fb      	ldr	r3, [r7, #28]
200090aa:	4413      	add	r3, r2
200090ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200090b0:	460a      	mov	r2, r1
200090b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
200090b4:	68bb      	ldr	r3, [r7, #8]
200090b6:	791b      	ldrb	r3, [r3, #4]
200090b8:	2b01      	cmp	r3, #1
200090ba:	d128      	bne.n	2000910e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
200090bc:	69fb      	ldr	r3, [r7, #28]
200090be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200090c2:	689b      	ldr	r3, [r3, #8]
200090c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200090c8:	2b00      	cmp	r3, #0
200090ca:	d110      	bne.n	200090ee <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
200090cc:	69bb      	ldr	r3, [r7, #24]
200090ce:	015a      	lsls	r2, r3, #5
200090d0:	69fb      	ldr	r3, [r7, #28]
200090d2:	4413      	add	r3, r2
200090d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200090d8:	681b      	ldr	r3, [r3, #0]
200090da:	69ba      	ldr	r2, [r7, #24]
200090dc:	0151      	lsls	r1, r2, #5
200090de:	69fa      	ldr	r2, [r7, #28]
200090e0:	440a      	add	r2, r1
200090e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200090e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
200090ea:	6013      	str	r3, [r2, #0]
200090ec:	e00f      	b.n	2000910e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
200090ee:	69bb      	ldr	r3, [r7, #24]
200090f0:	015a      	lsls	r2, r3, #5
200090f2:	69fb      	ldr	r3, [r7, #28]
200090f4:	4413      	add	r3, r2
200090f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200090fa:	681b      	ldr	r3, [r3, #0]
200090fc:	69ba      	ldr	r2, [r7, #24]
200090fe:	0151      	lsls	r1, r2, #5
20009100:	69fa      	ldr	r2, [r7, #28]
20009102:	440a      	add	r2, r1
20009104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000910c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
2000910e:	69bb      	ldr	r3, [r7, #24]
20009110:	015a      	lsls	r2, r3, #5
20009112:	69fb      	ldr	r3, [r7, #28]
20009114:	4413      	add	r3, r2
20009116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000911a:	681b      	ldr	r3, [r3, #0]
2000911c:	69ba      	ldr	r2, [r7, #24]
2000911e:	0151      	lsls	r1, r2, #5
20009120:	69fa      	ldr	r2, [r7, #28]
20009122:	440a      	add	r2, r1
20009124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009128:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
2000912c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
2000912e:	2300      	movs	r3, #0
}
20009130:	4618      	mov	r0, r3
20009132:	3720      	adds	r7, #32
20009134:	46bd      	mov	sp, r7
20009136:	bd80      	pop	{r7, pc}
20009138:	fff80000 	.word	0xfff80000
2000913c:	e007ffff 	.word	0xe007ffff
20009140:	1ff80000 	.word	0x1ff80000

20009144 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
20009144:	b480      	push	{r7}
20009146:	b087      	sub	sp, #28
20009148:	af00      	add	r7, sp, #0
2000914a:	6078      	str	r0, [r7, #4]
2000914c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
2000914e:	2300      	movs	r3, #0
20009150:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
20009152:	2300      	movs	r3, #0
20009154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009156:	687b      	ldr	r3, [r7, #4]
20009158:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
2000915a:	683b      	ldr	r3, [r7, #0]
2000915c:	785b      	ldrb	r3, [r3, #1]
2000915e:	2b01      	cmp	r3, #1
20009160:	d14a      	bne.n	200091f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20009162:	683b      	ldr	r3, [r7, #0]
20009164:	781b      	ldrb	r3, [r3, #0]
20009166:	015a      	lsls	r2, r3, #5
20009168:	693b      	ldr	r3, [r7, #16]
2000916a:	4413      	add	r3, r2
2000916c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009170:	681b      	ldr	r3, [r3, #0]
20009172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009176:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000917a:	f040 8086 	bne.w	2000928a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
2000917e:	683b      	ldr	r3, [r7, #0]
20009180:	781b      	ldrb	r3, [r3, #0]
20009182:	015a      	lsls	r2, r3, #5
20009184:	693b      	ldr	r3, [r7, #16]
20009186:	4413      	add	r3, r2
20009188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000918c:	681b      	ldr	r3, [r3, #0]
2000918e:	683a      	ldr	r2, [r7, #0]
20009190:	7812      	ldrb	r2, [r2, #0]
20009192:	0151      	lsls	r1, r2, #5
20009194:	693a      	ldr	r2, [r7, #16]
20009196:	440a      	add	r2, r1
20009198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000919c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
200091a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
200091a2:	683b      	ldr	r3, [r7, #0]
200091a4:	781b      	ldrb	r3, [r3, #0]
200091a6:	015a      	lsls	r2, r3, #5
200091a8:	693b      	ldr	r3, [r7, #16]
200091aa:	4413      	add	r3, r2
200091ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200091b0:	681b      	ldr	r3, [r3, #0]
200091b2:	683a      	ldr	r2, [r7, #0]
200091b4:	7812      	ldrb	r2, [r2, #0]
200091b6:	0151      	lsls	r1, r2, #5
200091b8:	693a      	ldr	r2, [r7, #16]
200091ba:	440a      	add	r2, r1
200091bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200091c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
200091c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
200091c6:	68fb      	ldr	r3, [r7, #12]
200091c8:	3301      	adds	r3, #1
200091ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
200091cc:	68fb      	ldr	r3, [r7, #12]
200091ce:	f242 7210 	movw	r2, #10000	@ 0x2710
200091d2:	4293      	cmp	r3, r2
200091d4:	d902      	bls.n	200091dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
200091d6:	2301      	movs	r3, #1
200091d8:	75fb      	strb	r3, [r7, #23]
          break;
200091da:	e056      	b.n	2000928a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
200091dc:	683b      	ldr	r3, [r7, #0]
200091de:	781b      	ldrb	r3, [r3, #0]
200091e0:	015a      	lsls	r2, r3, #5
200091e2:	693b      	ldr	r3, [r7, #16]
200091e4:	4413      	add	r3, r2
200091e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200091ea:	681b      	ldr	r3, [r3, #0]
200091ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200091f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200091f4:	d0e7      	beq.n	200091c6 <USB_EPStopXfer+0x82>
200091f6:	e048      	b.n	2000928a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
200091f8:	683b      	ldr	r3, [r7, #0]
200091fa:	781b      	ldrb	r3, [r3, #0]
200091fc:	015a      	lsls	r2, r3, #5
200091fe:	693b      	ldr	r3, [r7, #16]
20009200:	4413      	add	r3, r2
20009202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009206:	681b      	ldr	r3, [r3, #0]
20009208:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000920c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20009210:	d13b      	bne.n	2000928a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
20009212:	683b      	ldr	r3, [r7, #0]
20009214:	781b      	ldrb	r3, [r3, #0]
20009216:	015a      	lsls	r2, r3, #5
20009218:	693b      	ldr	r3, [r7, #16]
2000921a:	4413      	add	r3, r2
2000921c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009220:	681b      	ldr	r3, [r3, #0]
20009222:	683a      	ldr	r2, [r7, #0]
20009224:	7812      	ldrb	r2, [r2, #0]
20009226:	0151      	lsls	r1, r2, #5
20009228:	693a      	ldr	r2, [r7, #16]
2000922a:	440a      	add	r2, r1
2000922c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009230:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20009234:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
20009236:	683b      	ldr	r3, [r7, #0]
20009238:	781b      	ldrb	r3, [r3, #0]
2000923a:	015a      	lsls	r2, r3, #5
2000923c:	693b      	ldr	r3, [r7, #16]
2000923e:	4413      	add	r3, r2
20009240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009244:	681b      	ldr	r3, [r3, #0]
20009246:	683a      	ldr	r2, [r7, #0]
20009248:	7812      	ldrb	r2, [r2, #0]
2000924a:	0151      	lsls	r1, r2, #5
2000924c:	693a      	ldr	r2, [r7, #16]
2000924e:	440a      	add	r2, r1
20009250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009254:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20009258:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
2000925a:	68fb      	ldr	r3, [r7, #12]
2000925c:	3301      	adds	r3, #1
2000925e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
20009260:	68fb      	ldr	r3, [r7, #12]
20009262:	f242 7210 	movw	r2, #10000	@ 0x2710
20009266:	4293      	cmp	r3, r2
20009268:	d902      	bls.n	20009270 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
2000926a:	2301      	movs	r3, #1
2000926c:	75fb      	strb	r3, [r7, #23]
          break;
2000926e:	e00c      	b.n	2000928a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
20009270:	683b      	ldr	r3, [r7, #0]
20009272:	781b      	ldrb	r3, [r3, #0]
20009274:	015a      	lsls	r2, r3, #5
20009276:	693b      	ldr	r3, [r7, #16]
20009278:	4413      	add	r3, r2
2000927a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000927e:	681b      	ldr	r3, [r3, #0]
20009280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20009288:	d0e7      	beq.n	2000925a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
2000928a:	7dfb      	ldrb	r3, [r7, #23]
}
2000928c:	4618      	mov	r0, r3
2000928e:	371c      	adds	r7, #28
20009290:	46bd      	mov	sp, r7
20009292:	f85d 7b04 	ldr.w	r7, [sp], #4
20009296:	4770      	bx	lr

20009298 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
20009298:	b480      	push	{r7}
2000929a:	b089      	sub	sp, #36	@ 0x24
2000929c:	af00      	add	r7, sp, #0
2000929e:	60f8      	str	r0, [r7, #12]
200092a0:	60b9      	str	r1, [r7, #8]
200092a2:	4611      	mov	r1, r2
200092a4:	461a      	mov	r2, r3
200092a6:	460b      	mov	r3, r1
200092a8:	71fb      	strb	r3, [r7, #7]
200092aa:	4613      	mov	r3, r2
200092ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200092ae:	68fb      	ldr	r3, [r7, #12]
200092b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
200092b2:	68bb      	ldr	r3, [r7, #8]
200092b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
200092b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
200092ba:	2b00      	cmp	r3, #0
200092bc:	d123      	bne.n	20009306 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
200092be:	88bb      	ldrh	r3, [r7, #4]
200092c0:	3303      	adds	r3, #3
200092c2:	089b      	lsrs	r3, r3, #2
200092c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
200092c6:	2300      	movs	r3, #0
200092c8:	61bb      	str	r3, [r7, #24]
200092ca:	e018      	b.n	200092fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
200092cc:	79fb      	ldrb	r3, [r7, #7]
200092ce:	031a      	lsls	r2, r3, #12
200092d0:	697b      	ldr	r3, [r7, #20]
200092d2:	4413      	add	r3, r2
200092d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200092d8:	461a      	mov	r2, r3
200092da:	69fb      	ldr	r3, [r7, #28]
200092dc:	681b      	ldr	r3, [r3, #0]
200092de:	6013      	str	r3, [r2, #0]
      pSrc++;
200092e0:	69fb      	ldr	r3, [r7, #28]
200092e2:	3301      	adds	r3, #1
200092e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
200092e6:	69fb      	ldr	r3, [r7, #28]
200092e8:	3301      	adds	r3, #1
200092ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
200092ec:	69fb      	ldr	r3, [r7, #28]
200092ee:	3301      	adds	r3, #1
200092f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
200092f2:	69fb      	ldr	r3, [r7, #28]
200092f4:	3301      	adds	r3, #1
200092f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
200092f8:	69bb      	ldr	r3, [r7, #24]
200092fa:	3301      	adds	r3, #1
200092fc:	61bb      	str	r3, [r7, #24]
200092fe:	69ba      	ldr	r2, [r7, #24]
20009300:	693b      	ldr	r3, [r7, #16]
20009302:	429a      	cmp	r2, r3
20009304:	d3e2      	bcc.n	200092cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
20009306:	2300      	movs	r3, #0
}
20009308:	4618      	mov	r0, r3
2000930a:	3724      	adds	r7, #36	@ 0x24
2000930c:	46bd      	mov	sp, r7
2000930e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009312:	4770      	bx	lr

20009314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
20009314:	b480      	push	{r7}
20009316:	b08b      	sub	sp, #44	@ 0x2c
20009318:	af00      	add	r7, sp, #0
2000931a:	60f8      	str	r0, [r7, #12]
2000931c:	60b9      	str	r1, [r7, #8]
2000931e:	4613      	mov	r3, r2
20009320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009322:	68fb      	ldr	r3, [r7, #12]
20009324:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
20009326:	68bb      	ldr	r3, [r7, #8]
20009328:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
2000932a:	88fb      	ldrh	r3, [r7, #6]
2000932c:	089b      	lsrs	r3, r3, #2
2000932e:	b29b      	uxth	r3, r3
20009330:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
20009332:	88fb      	ldrh	r3, [r7, #6]
20009334:	f003 0303 	and.w	r3, r3, #3
20009338:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
2000933a:	2300      	movs	r3, #0
2000933c:	623b      	str	r3, [r7, #32]
2000933e:	e014      	b.n	2000936a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
20009340:	69bb      	ldr	r3, [r7, #24]
20009342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20009346:	681a      	ldr	r2, [r3, #0]
20009348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000934a:	601a      	str	r2, [r3, #0]
    pDest++;
2000934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000934e:	3301      	adds	r3, #1
20009350:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20009352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20009354:	3301      	adds	r3, #1
20009356:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20009358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000935a:	3301      	adds	r3, #1
2000935c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
2000935e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20009360:	3301      	adds	r3, #1
20009362:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
20009364:	6a3b      	ldr	r3, [r7, #32]
20009366:	3301      	adds	r3, #1
20009368:	623b      	str	r3, [r7, #32]
2000936a:	6a3a      	ldr	r2, [r7, #32]
2000936c:	697b      	ldr	r3, [r7, #20]
2000936e:	429a      	cmp	r2, r3
20009370:	d3e6      	bcc.n	20009340 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
20009372:	8bfb      	ldrh	r3, [r7, #30]
20009374:	2b00      	cmp	r3, #0
20009376:	d01e      	beq.n	200093b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
20009378:	2300      	movs	r3, #0
2000937a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
2000937c:	69bb      	ldr	r3, [r7, #24]
2000937e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20009382:	461a      	mov	r2, r3
20009384:	f107 0310 	add.w	r3, r7, #16
20009388:	6812      	ldr	r2, [r2, #0]
2000938a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
2000938c:	693a      	ldr	r2, [r7, #16]
2000938e:	6a3b      	ldr	r3, [r7, #32]
20009390:	b2db      	uxtb	r3, r3
20009392:	00db      	lsls	r3, r3, #3
20009394:	fa22 f303 	lsr.w	r3, r2, r3
20009398:	b2da      	uxtb	r2, r3
2000939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000939c:	701a      	strb	r2, [r3, #0]
      i++;
2000939e:	6a3b      	ldr	r3, [r7, #32]
200093a0:	3301      	adds	r3, #1
200093a2:	623b      	str	r3, [r7, #32]
      pDest++;
200093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200093a6:	3301      	adds	r3, #1
200093a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
200093aa:	8bfb      	ldrh	r3, [r7, #30]
200093ac:	3b01      	subs	r3, #1
200093ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
200093b0:	8bfb      	ldrh	r3, [r7, #30]
200093b2:	2b00      	cmp	r3, #0
200093b4:	d1ea      	bne.n	2000938c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
200093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
200093b8:	4618      	mov	r0, r3
200093ba:	372c      	adds	r7, #44	@ 0x2c
200093bc:	46bd      	mov	sp, r7
200093be:	f85d 7b04 	ldr.w	r7, [sp], #4
200093c2:	4770      	bx	lr

200093c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
200093c4:	b480      	push	{r7}
200093c6:	b085      	sub	sp, #20
200093c8:	af00      	add	r7, sp, #0
200093ca:	6078      	str	r0, [r7, #4]
200093cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
200093ce:	687b      	ldr	r3, [r7, #4]
200093d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
200093d2:	683b      	ldr	r3, [r7, #0]
200093d4:	781b      	ldrb	r3, [r3, #0]
200093d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
200093d8:	683b      	ldr	r3, [r7, #0]
200093da:	785b      	ldrb	r3, [r3, #1]
200093dc:	2b01      	cmp	r3, #1
200093de:	d12c      	bne.n	2000943a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
200093e0:	68bb      	ldr	r3, [r7, #8]
200093e2:	015a      	lsls	r2, r3, #5
200093e4:	68fb      	ldr	r3, [r7, #12]
200093e6:	4413      	add	r3, r2
200093e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200093ec:	681b      	ldr	r3, [r3, #0]
200093ee:	2b00      	cmp	r3, #0
200093f0:	db12      	blt.n	20009418 <USB_EPSetStall+0x54>
200093f2:	68bb      	ldr	r3, [r7, #8]
200093f4:	2b00      	cmp	r3, #0
200093f6:	d00f      	beq.n	20009418 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
200093f8:	68bb      	ldr	r3, [r7, #8]
200093fa:	015a      	lsls	r2, r3, #5
200093fc:	68fb      	ldr	r3, [r7, #12]
200093fe:	4413      	add	r3, r2
20009400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009404:	681b      	ldr	r3, [r3, #0]
20009406:	68ba      	ldr	r2, [r7, #8]
20009408:	0151      	lsls	r1, r2, #5
2000940a:	68fa      	ldr	r2, [r7, #12]
2000940c:	440a      	add	r2, r1
2000940e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009412:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
20009416:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
20009418:	68bb      	ldr	r3, [r7, #8]
2000941a:	015a      	lsls	r2, r3, #5
2000941c:	68fb      	ldr	r3, [r7, #12]
2000941e:	4413      	add	r3, r2
20009420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009424:	681b      	ldr	r3, [r3, #0]
20009426:	68ba      	ldr	r2, [r7, #8]
20009428:	0151      	lsls	r1, r2, #5
2000942a:	68fa      	ldr	r2, [r7, #12]
2000942c:	440a      	add	r2, r1
2000942e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009432:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
20009436:	6013      	str	r3, [r2, #0]
20009438:	e02b      	b.n	20009492 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
2000943a:	68bb      	ldr	r3, [r7, #8]
2000943c:	015a      	lsls	r2, r3, #5
2000943e:	68fb      	ldr	r3, [r7, #12]
20009440:	4413      	add	r3, r2
20009442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009446:	681b      	ldr	r3, [r3, #0]
20009448:	2b00      	cmp	r3, #0
2000944a:	db12      	blt.n	20009472 <USB_EPSetStall+0xae>
2000944c:	68bb      	ldr	r3, [r7, #8]
2000944e:	2b00      	cmp	r3, #0
20009450:	d00f      	beq.n	20009472 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
20009452:	68bb      	ldr	r3, [r7, #8]
20009454:	015a      	lsls	r2, r3, #5
20009456:	68fb      	ldr	r3, [r7, #12]
20009458:	4413      	add	r3, r2
2000945a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000945e:	681b      	ldr	r3, [r3, #0]
20009460:	68ba      	ldr	r2, [r7, #8]
20009462:	0151      	lsls	r1, r2, #5
20009464:	68fa      	ldr	r2, [r7, #12]
20009466:	440a      	add	r2, r1
20009468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000946c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
20009470:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
20009472:	68bb      	ldr	r3, [r7, #8]
20009474:	015a      	lsls	r2, r3, #5
20009476:	68fb      	ldr	r3, [r7, #12]
20009478:	4413      	add	r3, r2
2000947a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000947e:	681b      	ldr	r3, [r3, #0]
20009480:	68ba      	ldr	r2, [r7, #8]
20009482:	0151      	lsls	r1, r2, #5
20009484:	68fa      	ldr	r2, [r7, #12]
20009486:	440a      	add	r2, r1
20009488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000948c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
20009490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
20009492:	2300      	movs	r3, #0
}
20009494:	4618      	mov	r0, r3
20009496:	3714      	adds	r7, #20
20009498:	46bd      	mov	sp, r7
2000949a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000949e:	4770      	bx	lr

200094a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
200094a0:	b480      	push	{r7}
200094a2:	b085      	sub	sp, #20
200094a4:	af00      	add	r7, sp, #0
200094a6:	6078      	str	r0, [r7, #4]
200094a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
200094aa:	687b      	ldr	r3, [r7, #4]
200094ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
200094ae:	683b      	ldr	r3, [r7, #0]
200094b0:	781b      	ldrb	r3, [r3, #0]
200094b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
200094b4:	683b      	ldr	r3, [r7, #0]
200094b6:	785b      	ldrb	r3, [r3, #1]
200094b8:	2b01      	cmp	r3, #1
200094ba:	d128      	bne.n	2000950e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
200094bc:	68bb      	ldr	r3, [r7, #8]
200094be:	015a      	lsls	r2, r3, #5
200094c0:	68fb      	ldr	r3, [r7, #12]
200094c2:	4413      	add	r3, r2
200094c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200094c8:	681b      	ldr	r3, [r3, #0]
200094ca:	68ba      	ldr	r2, [r7, #8]
200094cc:	0151      	lsls	r1, r2, #5
200094ce:	68fa      	ldr	r2, [r7, #12]
200094d0:	440a      	add	r2, r1
200094d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200094d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
200094da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
200094dc:	683b      	ldr	r3, [r7, #0]
200094de:	791b      	ldrb	r3, [r3, #4]
200094e0:	2b03      	cmp	r3, #3
200094e2:	d003      	beq.n	200094ec <USB_EPClearStall+0x4c>
200094e4:	683b      	ldr	r3, [r7, #0]
200094e6:	791b      	ldrb	r3, [r3, #4]
200094e8:	2b02      	cmp	r3, #2
200094ea:	d138      	bne.n	2000955e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
200094ec:	68bb      	ldr	r3, [r7, #8]
200094ee:	015a      	lsls	r2, r3, #5
200094f0:	68fb      	ldr	r3, [r7, #12]
200094f2:	4413      	add	r3, r2
200094f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200094f8:	681b      	ldr	r3, [r3, #0]
200094fa:	68ba      	ldr	r2, [r7, #8]
200094fc:	0151      	lsls	r1, r2, #5
200094fe:	68fa      	ldr	r2, [r7, #12]
20009500:	440a      	add	r2, r1
20009502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000950a:	6013      	str	r3, [r2, #0]
2000950c:	e027      	b.n	2000955e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
2000950e:	68bb      	ldr	r3, [r7, #8]
20009510:	015a      	lsls	r2, r3, #5
20009512:	68fb      	ldr	r3, [r7, #12]
20009514:	4413      	add	r3, r2
20009516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000951a:	681b      	ldr	r3, [r3, #0]
2000951c:	68ba      	ldr	r2, [r7, #8]
2000951e:	0151      	lsls	r1, r2, #5
20009520:	68fa      	ldr	r2, [r7, #12]
20009522:	440a      	add	r2, r1
20009524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009528:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000952c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
2000952e:	683b      	ldr	r3, [r7, #0]
20009530:	791b      	ldrb	r3, [r3, #4]
20009532:	2b03      	cmp	r3, #3
20009534:	d003      	beq.n	2000953e <USB_EPClearStall+0x9e>
20009536:	683b      	ldr	r3, [r7, #0]
20009538:	791b      	ldrb	r3, [r3, #4]
2000953a:	2b02      	cmp	r3, #2
2000953c:	d10f      	bne.n	2000955e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
2000953e:	68bb      	ldr	r3, [r7, #8]
20009540:	015a      	lsls	r2, r3, #5
20009542:	68fb      	ldr	r3, [r7, #12]
20009544:	4413      	add	r3, r2
20009546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000954a:	681b      	ldr	r3, [r3, #0]
2000954c:	68ba      	ldr	r2, [r7, #8]
2000954e:	0151      	lsls	r1, r2, #5
20009550:	68fa      	ldr	r2, [r7, #12]
20009552:	440a      	add	r2, r1
20009554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000955c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
2000955e:	2300      	movs	r3, #0
}
20009560:	4618      	mov	r0, r3
20009562:	3714      	adds	r7, #20
20009564:	46bd      	mov	sp, r7
20009566:	f85d 7b04 	ldr.w	r7, [sp], #4
2000956a:	4770      	bx	lr

2000956c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
2000956c:	b480      	push	{r7}
2000956e:	b085      	sub	sp, #20
20009570:	af00      	add	r7, sp, #0
20009572:	6078      	str	r0, [r7, #4]
20009574:	460b      	mov	r3, r1
20009576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009578:	687b      	ldr	r3, [r7, #4]
2000957a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
2000957c:	68fb      	ldr	r3, [r7, #12]
2000957e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009582:	681b      	ldr	r3, [r3, #0]
20009584:	68fa      	ldr	r2, [r7, #12]
20009586:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000958a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
2000958e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
20009590:	68fb      	ldr	r3, [r7, #12]
20009592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009596:	681a      	ldr	r2, [r3, #0]
20009598:	78fb      	ldrb	r3, [r7, #3]
2000959a:	011b      	lsls	r3, r3, #4
2000959c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
200095a0:	68f9      	ldr	r1, [r7, #12]
200095a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200095a6:	4313      	orrs	r3, r2
200095a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
200095aa:	2300      	movs	r3, #0
}
200095ac:	4618      	mov	r0, r3
200095ae:	3714      	adds	r7, #20
200095b0:	46bd      	mov	sp, r7
200095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200095b6:	4770      	bx	lr

200095b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
200095b8:	b480      	push	{r7}
200095ba:	b085      	sub	sp, #20
200095bc:	af00      	add	r7, sp, #0
200095be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200095c0:	687b      	ldr	r3, [r7, #4]
200095c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
200095c4:	68fb      	ldr	r3, [r7, #12]
200095c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
200095ca:	681b      	ldr	r3, [r3, #0]
200095cc:	68fa      	ldr	r2, [r7, #12]
200095ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
200095d2:	f023 0303 	bic.w	r3, r3, #3
200095d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
200095d8:	68fb      	ldr	r3, [r7, #12]
200095da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200095de:	685b      	ldr	r3, [r3, #4]
200095e0:	68fa      	ldr	r2, [r7, #12]
200095e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200095e6:	f023 0302 	bic.w	r3, r3, #2
200095ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
200095ec:	2300      	movs	r3, #0
}
200095ee:	4618      	mov	r0, r3
200095f0:	3714      	adds	r7, #20
200095f2:	46bd      	mov	sp, r7
200095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200095f8:	4770      	bx	lr

200095fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
200095fa:	b480      	push	{r7}
200095fc:	b085      	sub	sp, #20
200095fe:	af00      	add	r7, sp, #0
20009600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009602:	687b      	ldr	r3, [r7, #4]
20009604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
20009606:	68fb      	ldr	r3, [r7, #12]
20009608:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000960c:	681b      	ldr	r3, [r3, #0]
2000960e:	68fa      	ldr	r2, [r7, #12]
20009610:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
20009614:	f023 0303 	bic.w	r3, r3, #3
20009618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
2000961a:	68fb      	ldr	r3, [r7, #12]
2000961c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009620:	685b      	ldr	r3, [r3, #4]
20009622:	68fa      	ldr	r2, [r7, #12]
20009624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009628:	f043 0302 	orr.w	r3, r3, #2
2000962c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000962e:	2300      	movs	r3, #0
}
20009630:	4618      	mov	r0, r3
20009632:	3714      	adds	r7, #20
20009634:	46bd      	mov	sp, r7
20009636:	f85d 7b04 	ldr.w	r7, [sp], #4
2000963a:	4770      	bx	lr

2000963c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
2000963c:	b480      	push	{r7}
2000963e:	b085      	sub	sp, #20
20009640:	af00      	add	r7, sp, #0
20009642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
20009644:	687b      	ldr	r3, [r7, #4]
20009646:	695b      	ldr	r3, [r3, #20]
20009648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
2000964a:	687b      	ldr	r3, [r7, #4]
2000964c:	699b      	ldr	r3, [r3, #24]
2000964e:	68fa      	ldr	r2, [r7, #12]
20009650:	4013      	ands	r3, r2
20009652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
20009654:	68fb      	ldr	r3, [r7, #12]
}
20009656:	4618      	mov	r0, r3
20009658:	3714      	adds	r7, #20
2000965a:	46bd      	mov	sp, r7
2000965c:	f85d 7b04 	ldr.w	r7, [sp], #4
20009660:	4770      	bx	lr

20009662 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
20009662:	b480      	push	{r7}
20009664:	b085      	sub	sp, #20
20009666:	af00      	add	r7, sp, #0
20009668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000966a:	687b      	ldr	r3, [r7, #4]
2000966c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
2000966e:	68fb      	ldr	r3, [r7, #12]
20009670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009674:	699b      	ldr	r3, [r3, #24]
20009676:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
20009678:	68fb      	ldr	r3, [r7, #12]
2000967a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000967e:	69db      	ldr	r3, [r3, #28]
20009680:	68ba      	ldr	r2, [r7, #8]
20009682:	4013      	ands	r3, r2
20009684:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
20009686:	68bb      	ldr	r3, [r7, #8]
20009688:	0c1b      	lsrs	r3, r3, #16
}
2000968a:	4618      	mov	r0, r3
2000968c:	3714      	adds	r7, #20
2000968e:	46bd      	mov	sp, r7
20009690:	f85d 7b04 	ldr.w	r7, [sp], #4
20009694:	4770      	bx	lr

20009696 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
20009696:	b480      	push	{r7}
20009698:	b085      	sub	sp, #20
2000969a:	af00      	add	r7, sp, #0
2000969c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000969e:	687b      	ldr	r3, [r7, #4]
200096a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
200096a2:	68fb      	ldr	r3, [r7, #12]
200096a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200096a8:	699b      	ldr	r3, [r3, #24]
200096aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
200096ac:	68fb      	ldr	r3, [r7, #12]
200096ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200096b2:	69db      	ldr	r3, [r3, #28]
200096b4:	68ba      	ldr	r2, [r7, #8]
200096b6:	4013      	ands	r3, r2
200096b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
200096ba:	68bb      	ldr	r3, [r7, #8]
200096bc:	b29b      	uxth	r3, r3
}
200096be:	4618      	mov	r0, r3
200096c0:	3714      	adds	r7, #20
200096c2:	46bd      	mov	sp, r7
200096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200096c8:	4770      	bx	lr

200096ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
200096ca:	b480      	push	{r7}
200096cc:	b085      	sub	sp, #20
200096ce:	af00      	add	r7, sp, #0
200096d0:	6078      	str	r0, [r7, #4]
200096d2:	460b      	mov	r3, r1
200096d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
200096d6:	687b      	ldr	r3, [r7, #4]
200096d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
200096da:	78fb      	ldrb	r3, [r7, #3]
200096dc:	015a      	lsls	r2, r3, #5
200096de:	68fb      	ldr	r3, [r7, #12]
200096e0:	4413      	add	r3, r2
200096e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200096e6:	689b      	ldr	r3, [r3, #8]
200096e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
200096ea:	68fb      	ldr	r3, [r7, #12]
200096ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200096f0:	695b      	ldr	r3, [r3, #20]
200096f2:	68ba      	ldr	r2, [r7, #8]
200096f4:	4013      	ands	r3, r2
200096f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
200096f8:	68bb      	ldr	r3, [r7, #8]
}
200096fa:	4618      	mov	r0, r3
200096fc:	3714      	adds	r7, #20
200096fe:	46bd      	mov	sp, r7
20009700:	f85d 7b04 	ldr.w	r7, [sp], #4
20009704:	4770      	bx	lr

20009706 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
20009706:	b480      	push	{r7}
20009708:	b087      	sub	sp, #28
2000970a:	af00      	add	r7, sp, #0
2000970c:	6078      	str	r0, [r7, #4]
2000970e:	460b      	mov	r3, r1
20009710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009712:	687b      	ldr	r3, [r7, #4]
20009714:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
20009716:	697b      	ldr	r3, [r7, #20]
20009718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000971c:	691b      	ldr	r3, [r3, #16]
2000971e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
20009720:	697b      	ldr	r3, [r7, #20]
20009722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20009728:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
2000972a:	78fb      	ldrb	r3, [r7, #3]
2000972c:	f003 030f 	and.w	r3, r3, #15
20009730:	68fa      	ldr	r2, [r7, #12]
20009732:	fa22 f303 	lsr.w	r3, r2, r3
20009736:	01db      	lsls	r3, r3, #7
20009738:	b2db      	uxtb	r3, r3
2000973a:	693a      	ldr	r2, [r7, #16]
2000973c:	4313      	orrs	r3, r2
2000973e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
20009740:	78fb      	ldrb	r3, [r7, #3]
20009742:	015a      	lsls	r2, r3, #5
20009744:	697b      	ldr	r3, [r7, #20]
20009746:	4413      	add	r3, r2
20009748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000974c:	689b      	ldr	r3, [r3, #8]
2000974e:	693a      	ldr	r2, [r7, #16]
20009750:	4013      	ands	r3, r2
20009752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
20009754:	68bb      	ldr	r3, [r7, #8]
}
20009756:	4618      	mov	r0, r3
20009758:	371c      	adds	r7, #28
2000975a:	46bd      	mov	sp, r7
2000975c:	f85d 7b04 	ldr.w	r7, [sp], #4
20009760:	4770      	bx	lr

20009762 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
20009762:	b480      	push	{r7}
20009764:	b083      	sub	sp, #12
20009766:	af00      	add	r7, sp, #0
20009768:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
2000976a:	687b      	ldr	r3, [r7, #4]
2000976c:	695b      	ldr	r3, [r3, #20]
2000976e:	f003 0301 	and.w	r3, r3, #1
}
20009772:	4618      	mov	r0, r3
20009774:	370c      	adds	r7, #12
20009776:	46bd      	mov	sp, r7
20009778:	f85d 7b04 	ldr.w	r7, [sp], #4
2000977c:	4770      	bx	lr
	...

20009780 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
20009780:	b480      	push	{r7}
20009782:	b085      	sub	sp, #20
20009784:	af00      	add	r7, sp, #0
20009786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009788:	687b      	ldr	r3, [r7, #4]
2000978a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
2000978c:	68fb      	ldr	r3, [r7, #12]
2000978e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009792:	681a      	ldr	r2, [r3, #0]
20009794:	68fb      	ldr	r3, [r7, #12]
20009796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000979a:	4619      	mov	r1, r3
2000979c:	4b09      	ldr	r3, [pc, #36]	@ (200097c4 <USB_ActivateSetup+0x44>)
2000979e:	4013      	ands	r3, r2
200097a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
200097a2:	68fb      	ldr	r3, [r7, #12]
200097a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200097a8:	685b      	ldr	r3, [r3, #4]
200097aa:	68fa      	ldr	r2, [r7, #12]
200097ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200097b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200097b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
200097b6:	2300      	movs	r3, #0
}
200097b8:	4618      	mov	r0, r3
200097ba:	3714      	adds	r7, #20
200097bc:	46bd      	mov	sp, r7
200097be:	f85d 7b04 	ldr.w	r7, [sp], #4
200097c2:	4770      	bx	lr
200097c4:	fffff800 	.word	0xfffff800

200097c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
200097c8:	b480      	push	{r7}
200097ca:	b087      	sub	sp, #28
200097cc:	af00      	add	r7, sp, #0
200097ce:	60f8      	str	r0, [r7, #12]
200097d0:	460b      	mov	r3, r1
200097d2:	607a      	str	r2, [r7, #4]
200097d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
200097d6:	68fb      	ldr	r3, [r7, #12]
200097d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
200097da:	68fb      	ldr	r3, [r7, #12]
200097dc:	333c      	adds	r3, #60	@ 0x3c
200097de:	3304      	adds	r3, #4
200097e0:	681b      	ldr	r3, [r3, #0]
200097e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
200097e4:	693b      	ldr	r3, [r7, #16]
200097e6:	4a26      	ldr	r2, [pc, #152]	@ (20009880 <USB_EP0_OutStart+0xb8>)
200097e8:	4293      	cmp	r3, r2
200097ea:	d90a      	bls.n	20009802 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
200097ec:	697b      	ldr	r3, [r7, #20]
200097ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200097f2:	681b      	ldr	r3, [r3, #0]
200097f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200097f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200097fc:	d101      	bne.n	20009802 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
200097fe:	2300      	movs	r3, #0
20009800:	e037      	b.n	20009872 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
20009802:	697b      	ldr	r3, [r7, #20]
20009804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009808:	461a      	mov	r2, r3
2000980a:	2300      	movs	r3, #0
2000980c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000980e:	697b      	ldr	r3, [r7, #20]
20009810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009814:	691b      	ldr	r3, [r3, #16]
20009816:	697a      	ldr	r2, [r7, #20]
20009818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000981c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20009820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
20009822:	697b      	ldr	r3, [r7, #20]
20009824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009828:	691b      	ldr	r3, [r3, #16]
2000982a:	697a      	ldr	r2, [r7, #20]
2000982c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009830:	f043 0318 	orr.w	r3, r3, #24
20009834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
20009836:	697b      	ldr	r3, [r7, #20]
20009838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000983c:	691b      	ldr	r3, [r3, #16]
2000983e:	697a      	ldr	r2, [r7, #20]
20009840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009844:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
20009848:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
2000984a:	7afb      	ldrb	r3, [r7, #11]
2000984c:	2b01      	cmp	r3, #1
2000984e:	d10f      	bne.n	20009870 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
20009850:	697b      	ldr	r3, [r7, #20]
20009852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009856:	461a      	mov	r2, r3
20009858:	687b      	ldr	r3, [r7, #4]
2000985a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
2000985c:	697b      	ldr	r3, [r7, #20]
2000985e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009862:	681b      	ldr	r3, [r3, #0]
20009864:	697a      	ldr	r2, [r7, #20]
20009866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000986a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
2000986e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
20009870:	2300      	movs	r3, #0
}
20009872:	4618      	mov	r0, r3
20009874:	371c      	adds	r7, #28
20009876:	46bd      	mov	sp, r7
20009878:	f85d 7b04 	ldr.w	r7, [sp], #4
2000987c:	4770      	bx	lr
2000987e:	bf00      	nop
20009880:	4f54300a 	.word	0x4f54300a

20009884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
20009884:	b480      	push	{r7}
20009886:	b085      	sub	sp, #20
20009888:	af00      	add	r7, sp, #0
2000988a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
2000988c:	2300      	movs	r3, #0
2000988e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20009890:	68fb      	ldr	r3, [r7, #12]
20009892:	3301      	adds	r3, #1
20009894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20009896:	68fb      	ldr	r3, [r7, #12]
20009898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000989c:	d901      	bls.n	200098a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
2000989e:	2303      	movs	r3, #3
200098a0:	e022      	b.n	200098e8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
200098a2:	687b      	ldr	r3, [r7, #4]
200098a4:	691b      	ldr	r3, [r3, #16]
200098a6:	2b00      	cmp	r3, #0
200098a8:	daf2      	bge.n	20009890 <USB_CoreReset+0xc>

  count = 10U;
200098aa:	230a      	movs	r3, #10
200098ac:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
200098ae:	e002      	b.n	200098b6 <USB_CoreReset+0x32>
  {
    count--;
200098b0:	68fb      	ldr	r3, [r7, #12]
200098b2:	3b01      	subs	r3, #1
200098b4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
200098b6:	68fb      	ldr	r3, [r7, #12]
200098b8:	2b00      	cmp	r3, #0
200098ba:	d1f9      	bne.n	200098b0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
200098bc:	687b      	ldr	r3, [r7, #4]
200098be:	691b      	ldr	r3, [r3, #16]
200098c0:	f043 0201 	orr.w	r2, r3, #1
200098c4:	687b      	ldr	r3, [r7, #4]
200098c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
200098c8:	68fb      	ldr	r3, [r7, #12]
200098ca:	3301      	adds	r3, #1
200098cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
200098ce:	68fb      	ldr	r3, [r7, #12]
200098d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200098d4:	d901      	bls.n	200098da <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
200098d6:	2303      	movs	r3, #3
200098d8:	e006      	b.n	200098e8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
200098da:	687b      	ldr	r3, [r7, #4]
200098dc:	691b      	ldr	r3, [r3, #16]
200098de:	f003 0301 	and.w	r3, r3, #1
200098e2:	2b01      	cmp	r3, #1
200098e4:	d0f0      	beq.n	200098c8 <USB_CoreReset+0x44>

  return HAL_OK;
200098e6:	2300      	movs	r3, #0
}
200098e8:	4618      	mov	r0, r3
200098ea:	3714      	adds	r7, #20
200098ec:	46bd      	mov	sp, r7
200098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200098f2:	4770      	bx	lr

200098f4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
200098f4:	b580      	push	{r7, lr}
200098f6:	b084      	sub	sp, #16
200098f8:	af00      	add	r7, sp, #0
200098fa:	6078      	str	r0, [r7, #4]
200098fc:	460b      	mov	r3, r1
200098fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
20009900:	2054      	movs	r0, #84	@ 0x54
20009902:	f002 fc25 	bl	2000c150 <malloc>
20009906:	4603      	mov	r3, r0
20009908:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
2000990a:	68fb      	ldr	r3, [r7, #12]
2000990c:	2b00      	cmp	r3, #0
2000990e:	d109      	bne.n	20009924 <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
20009910:	687b      	ldr	r3, [r7, #4]
20009912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009916:	687b      	ldr	r3, [r7, #4]
20009918:	32b0      	adds	r2, #176	@ 0xb0
2000991a:	2100      	movs	r1, #0
2000991c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
20009920:	2302      	movs	r3, #2
20009922:	e08b      	b.n	20009a3c <USBD_CUSTOM_HID_Init+0x148>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
20009924:	687b      	ldr	r3, [r7, #4]
20009926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000992a:	687b      	ldr	r3, [r7, #4]
2000992c:	32b0      	adds	r2, #176	@ 0xb0
2000992e:	68f9      	ldr	r1, [r7, #12]
20009930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
20009934:	687b      	ldr	r3, [r7, #4]
20009936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000993a:	687b      	ldr	r3, [r7, #4]
2000993c:	32b0      	adds	r2, #176	@ 0xb0
2000993e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
20009942:	687b      	ldr	r3, [r7, #4]
20009944:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
20009948:	687b      	ldr	r3, [r7, #4]
2000994a:	7c1b      	ldrb	r3, [r3, #16]
2000994c:	2b00      	cmp	r3, #0
2000994e:	d11b      	bne.n	20009988 <USBD_CUSTOM_HID_Init+0x94>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
20009950:	4b3c      	ldr	r3, [pc, #240]	@ (20009a44 <USBD_CUSTOM_HID_Init+0x150>)
20009952:	781b      	ldrb	r3, [r3, #0]
20009954:	f003 020f 	and.w	r2, r3, #15
20009958:	6879      	ldr	r1, [r7, #4]
2000995a:	4613      	mov	r3, r2
2000995c:	009b      	lsls	r3, r3, #2
2000995e:	4413      	add	r3, r2
20009960:	009b      	lsls	r3, r3, #2
20009962:	440b      	add	r3, r1
20009964:	331c      	adds	r3, #28
20009966:	2205      	movs	r2, #5
20009968:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
2000996a:	4b37      	ldr	r3, [pc, #220]	@ (20009a48 <USBD_CUSTOM_HID_Init+0x154>)
2000996c:	781b      	ldrb	r3, [r3, #0]
2000996e:	f003 020f 	and.w	r2, r3, #15
20009972:	6879      	ldr	r1, [r7, #4]
20009974:	4613      	mov	r3, r2
20009976:	009b      	lsls	r3, r3, #2
20009978:	4413      	add	r3, r2
2000997a:	009b      	lsls	r3, r3, #2
2000997c:	440b      	add	r3, r1
2000997e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
20009982:	2205      	movs	r2, #5
20009984:	601a      	str	r2, [r3, #0]
20009986:	e01a      	b.n	200099be <USBD_CUSTOM_HID_Init+0xca>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
20009988:	4b2e      	ldr	r3, [pc, #184]	@ (20009a44 <USBD_CUSTOM_HID_Init+0x150>)
2000998a:	781b      	ldrb	r3, [r3, #0]
2000998c:	f003 020f 	and.w	r2, r3, #15
20009990:	6879      	ldr	r1, [r7, #4]
20009992:	4613      	mov	r3, r2
20009994:	009b      	lsls	r3, r3, #2
20009996:	4413      	add	r3, r2
20009998:	009b      	lsls	r3, r3, #2
2000999a:	440b      	add	r3, r1
2000999c:	331c      	adds	r3, #28
2000999e:	2205      	movs	r2, #5
200099a0:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
200099a2:	4b29      	ldr	r3, [pc, #164]	@ (20009a48 <USBD_CUSTOM_HID_Init+0x154>)
200099a4:	781b      	ldrb	r3, [r3, #0]
200099a6:	f003 020f 	and.w	r2, r3, #15
200099aa:	6879      	ldr	r1, [r7, #4]
200099ac:	4613      	mov	r3, r2
200099ae:	009b      	lsls	r3, r3, #2
200099b0:	4413      	add	r3, r2
200099b2:	009b      	lsls	r3, r3, #2
200099b4:	440b      	add	r3, r1
200099b6:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
200099ba:	2205      	movs	r2, #5
200099bc:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
200099be:	4b21      	ldr	r3, [pc, #132]	@ (20009a44 <USBD_CUSTOM_HID_Init+0x150>)
200099c0:	7819      	ldrb	r1, [r3, #0]
200099c2:	2340      	movs	r3, #64	@ 0x40
200099c4:	2203      	movs	r2, #3
200099c6:	6878      	ldr	r0, [r7, #4]
200099c8:	f002 fa1f 	bl	2000be0a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
200099cc:	4b1d      	ldr	r3, [pc, #116]	@ (20009a44 <USBD_CUSTOM_HID_Init+0x150>)
200099ce:	781b      	ldrb	r3, [r3, #0]
200099d0:	f003 020f 	and.w	r2, r3, #15
200099d4:	6879      	ldr	r1, [r7, #4]
200099d6:	4613      	mov	r3, r2
200099d8:	009b      	lsls	r3, r3, #2
200099da:	4413      	add	r3, r2
200099dc:	009b      	lsls	r3, r3, #2
200099de:	440b      	add	r3, r1
200099e0:	3323      	adds	r3, #35	@ 0x23
200099e2:	2201      	movs	r2, #1
200099e4:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
200099e6:	4b18      	ldr	r3, [pc, #96]	@ (20009a48 <USBD_CUSTOM_HID_Init+0x154>)
200099e8:	7819      	ldrb	r1, [r3, #0]
200099ea:	2340      	movs	r3, #64	@ 0x40
200099ec:	2203      	movs	r2, #3
200099ee:	6878      	ldr	r0, [r7, #4]
200099f0:	f002 fa0b 	bl	2000be0a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
200099f4:	4b14      	ldr	r3, [pc, #80]	@ (20009a48 <USBD_CUSTOM_HID_Init+0x154>)
200099f6:	781b      	ldrb	r3, [r3, #0]
200099f8:	f003 020f 	and.w	r2, r3, #15
200099fc:	6879      	ldr	r1, [r7, #4]
200099fe:	4613      	mov	r3, r2
20009a00:	009b      	lsls	r3, r3, #2
20009a02:	4413      	add	r3, r2
20009a04:	009b      	lsls	r3, r3, #2
20009a06:	440b      	add	r3, r1
20009a08:	f203 1363 	addw	r3, r3, #355	@ 0x163
20009a0c:	2201      	movs	r2, #1
20009a0e:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
20009a10:	68fb      	ldr	r3, [r7, #12]
20009a12:	2200      	movs	r2, #0
20009a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
20009a18:	687b      	ldr	r3, [r7, #4]
20009a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009a1e:	687a      	ldr	r2, [r7, #4]
20009a20:	33b0      	adds	r3, #176	@ 0xb0
20009a22:	009b      	lsls	r3, r3, #2
20009a24:	4413      	add	r3, r2
20009a26:	685b      	ldr	r3, [r3, #4]
20009a28:	685b      	ldr	r3, [r3, #4]
20009a2a:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
20009a2c:	4b06      	ldr	r3, [pc, #24]	@ (20009a48 <USBD_CUSTOM_HID_Init+0x154>)
20009a2e:	7819      	ldrb	r1, [r3, #0]
20009a30:	68fa      	ldr	r2, [r7, #12]
20009a32:	2340      	movs	r3, #64	@ 0x40
20009a34:	6878      	ldr	r0, [r7, #4]
20009a36:	f002 fad7 	bl	2000bfe8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
20009a3a:	2300      	movs	r3, #0
}
20009a3c:	4618      	mov	r0, r3
20009a3e:	3710      	adds	r7, #16
20009a40:	46bd      	mov	sp, r7
20009a42:	bd80      	pop	{r7, pc}
20009a44:	2000c512 	.word	0x2000c512
20009a48:	2000c513 	.word	0x2000c513

20009a4c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
20009a4c:	b580      	push	{r7, lr}
20009a4e:	b082      	sub	sp, #8
20009a50:	af00      	add	r7, sp, #0
20009a52:	6078      	str	r0, [r7, #4]
20009a54:	460b      	mov	r3, r1
20009a56:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
20009a58:	4b37      	ldr	r3, [pc, #220]	@ (20009b38 <USBD_CUSTOM_HID_DeInit+0xec>)
20009a5a:	781b      	ldrb	r3, [r3, #0]
20009a5c:	4619      	mov	r1, r3
20009a5e:	6878      	ldr	r0, [r7, #4]
20009a60:	f002 f9f9 	bl	2000be56 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
20009a64:	4b34      	ldr	r3, [pc, #208]	@ (20009b38 <USBD_CUSTOM_HID_DeInit+0xec>)
20009a66:	781b      	ldrb	r3, [r3, #0]
20009a68:	f003 020f 	and.w	r2, r3, #15
20009a6c:	6879      	ldr	r1, [r7, #4]
20009a6e:	4613      	mov	r3, r2
20009a70:	009b      	lsls	r3, r3, #2
20009a72:	4413      	add	r3, r2
20009a74:	009b      	lsls	r3, r3, #2
20009a76:	440b      	add	r3, r1
20009a78:	3323      	adds	r3, #35	@ 0x23
20009a7a:	2200      	movs	r2, #0
20009a7c:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
20009a7e:	4b2e      	ldr	r3, [pc, #184]	@ (20009b38 <USBD_CUSTOM_HID_DeInit+0xec>)
20009a80:	781b      	ldrb	r3, [r3, #0]
20009a82:	f003 020f 	and.w	r2, r3, #15
20009a86:	6879      	ldr	r1, [r7, #4]
20009a88:	4613      	mov	r3, r2
20009a8a:	009b      	lsls	r3, r3, #2
20009a8c:	4413      	add	r3, r2
20009a8e:	009b      	lsls	r3, r3, #2
20009a90:	440b      	add	r3, r1
20009a92:	331c      	adds	r3, #28
20009a94:	2200      	movs	r2, #0
20009a96:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
20009a98:	4b28      	ldr	r3, [pc, #160]	@ (20009b3c <USBD_CUSTOM_HID_DeInit+0xf0>)
20009a9a:	781b      	ldrb	r3, [r3, #0]
20009a9c:	4619      	mov	r1, r3
20009a9e:	6878      	ldr	r0, [r7, #4]
20009aa0:	f002 f9d9 	bl	2000be56 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
20009aa4:	4b25      	ldr	r3, [pc, #148]	@ (20009b3c <USBD_CUSTOM_HID_DeInit+0xf0>)
20009aa6:	781b      	ldrb	r3, [r3, #0]
20009aa8:	f003 020f 	and.w	r2, r3, #15
20009aac:	6879      	ldr	r1, [r7, #4]
20009aae:	4613      	mov	r3, r2
20009ab0:	009b      	lsls	r3, r3, #2
20009ab2:	4413      	add	r3, r2
20009ab4:	009b      	lsls	r3, r3, #2
20009ab6:	440b      	add	r3, r1
20009ab8:	f203 1363 	addw	r3, r3, #355	@ 0x163
20009abc:	2200      	movs	r2, #0
20009abe:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
20009ac0:	4b1e      	ldr	r3, [pc, #120]	@ (20009b3c <USBD_CUSTOM_HID_DeInit+0xf0>)
20009ac2:	781b      	ldrb	r3, [r3, #0]
20009ac4:	f003 020f 	and.w	r2, r3, #15
20009ac8:	6879      	ldr	r1, [r7, #4]
20009aca:	4613      	mov	r3, r2
20009acc:	009b      	lsls	r3, r3, #2
20009ace:	4413      	add	r3, r2
20009ad0:	009b      	lsls	r3, r3, #2
20009ad2:	440b      	add	r3, r1
20009ad4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
20009ad8:	2200      	movs	r2, #0
20009ada:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
20009adc:	687b      	ldr	r3, [r7, #4]
20009ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009ae2:	687b      	ldr	r3, [r7, #4]
20009ae4:	32b0      	adds	r2, #176	@ 0xb0
20009ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009aea:	2b00      	cmp	r3, #0
20009aec:	d01f      	beq.n	20009b2e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
20009aee:	687b      	ldr	r3, [r7, #4]
20009af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009af4:	687a      	ldr	r2, [r7, #4]
20009af6:	33b0      	adds	r3, #176	@ 0xb0
20009af8:	009b      	lsls	r3, r3, #2
20009afa:	4413      	add	r3, r2
20009afc:	685b      	ldr	r3, [r3, #4]
20009afe:	689b      	ldr	r3, [r3, #8]
20009b00:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
20009b02:	687b      	ldr	r3, [r7, #4]
20009b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009b08:	687b      	ldr	r3, [r7, #4]
20009b0a:	32b0      	adds	r2, #176	@ 0xb0
20009b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009b10:	4618      	mov	r0, r3
20009b12:	f002 fb25 	bl	2000c160 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
20009b16:	687b      	ldr	r3, [r7, #4]
20009b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009b1c:	687b      	ldr	r3, [r7, #4]
20009b1e:	32b0      	adds	r2, #176	@ 0xb0
20009b20:	2100      	movs	r1, #0
20009b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
20009b26:	687b      	ldr	r3, [r7, #4]
20009b28:	2200      	movs	r2, #0
20009b2a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
20009b2e:	2300      	movs	r3, #0
}
20009b30:	4618      	mov	r0, r3
20009b32:	3708      	adds	r7, #8
20009b34:	46bd      	mov	sp, r7
20009b36:	bd80      	pop	{r7, pc}
20009b38:	2000c512 	.word	0x2000c512
20009b3c:	2000c513 	.word	0x2000c513

20009b40 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
20009b40:	b580      	push	{r7, lr}
20009b42:	b088      	sub	sp, #32
20009b44:	af00      	add	r7, sp, #0
20009b46:	6078      	str	r0, [r7, #4]
20009b48:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009b4a:	687b      	ldr	r3, [r7, #4]
20009b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009b50:	687b      	ldr	r3, [r7, #4]
20009b52:	32b0      	adds	r2, #176	@ 0xb0
20009b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009b58:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
20009b5a:	2300      	movs	r3, #0
20009b5c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
20009b5e:	2300      	movs	r3, #0
20009b60:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
20009b62:	2300      	movs	r3, #0
20009b64:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
20009b66:	2300      	movs	r3, #0
20009b68:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
20009b6a:	693b      	ldr	r3, [r7, #16]
20009b6c:	2b00      	cmp	r3, #0
20009b6e:	d101      	bne.n	20009b74 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
20009b70:	2303      	movs	r3, #3
20009b72:	e108      	b.n	20009d86 <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
20009b74:	683b      	ldr	r3, [r7, #0]
20009b76:	781b      	ldrb	r3, [r3, #0]
20009b78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
20009b7c:	2b00      	cmp	r3, #0
20009b7e:	d05c      	beq.n	20009c3a <USBD_CUSTOM_HID_Setup+0xfa>
20009b80:	2b20      	cmp	r3, #32
20009b82:	f040 80f8 	bne.w	20009d76 <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
20009b86:	683b      	ldr	r3, [r7, #0]
20009b88:	785b      	ldrb	r3, [r3, #1]
20009b8a:	3b02      	subs	r3, #2
20009b8c:	2b09      	cmp	r3, #9
20009b8e:	d84c      	bhi.n	20009c2a <USBD_CUSTOM_HID_Setup+0xea>
20009b90:	a201      	add	r2, pc, #4	@ (adr r2, 20009b98 <USBD_CUSTOM_HID_Setup+0x58>)
20009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20009b96:	bf00      	nop
20009b98:	20009bf1 	.word	0x20009bf1
20009b9c:	20009bcf 	.word	0x20009bcf
20009ba0:	20009c2b 	.word	0x20009c2b
20009ba4:	20009c2b 	.word	0x20009c2b
20009ba8:	20009c2b 	.word	0x20009c2b
20009bac:	20009c2b 	.word	0x20009c2b
20009bb0:	20009c2b 	.word	0x20009c2b
20009bb4:	20009c01 	.word	0x20009c01
20009bb8:	20009bdf 	.word	0x20009bdf
20009bbc:	20009bc1 	.word	0x20009bc1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
20009bc0:	683b      	ldr	r3, [r7, #0]
20009bc2:	885b      	ldrh	r3, [r3, #2]
20009bc4:	b2db      	uxtb	r3, r3
20009bc6:	461a      	mov	r2, r3
20009bc8:	693b      	ldr	r3, [r7, #16]
20009bca:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
20009bcc:	e034      	b.n	20009c38 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
20009bce:	693b      	ldr	r3, [r7, #16]
20009bd0:	3340      	adds	r3, #64	@ 0x40
20009bd2:	2201      	movs	r2, #1
20009bd4:	4619      	mov	r1, r3
20009bd6:	6878      	ldr	r0, [r7, #4]
20009bd8:	f001 fd3a 	bl	2000b650 <USBD_CtlSendData>
          break;
20009bdc:	e02c      	b.n	20009c38 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
20009bde:	683b      	ldr	r3, [r7, #0]
20009be0:	885b      	ldrh	r3, [r3, #2]
20009be2:	0a1b      	lsrs	r3, r3, #8
20009be4:	b29b      	uxth	r3, r3
20009be6:	b2db      	uxtb	r3, r3
20009be8:	461a      	mov	r2, r3
20009bea:	693b      	ldr	r3, [r7, #16]
20009bec:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
20009bee:	e023      	b.n	20009c38 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
20009bf0:	693b      	ldr	r3, [r7, #16]
20009bf2:	3344      	adds	r3, #68	@ 0x44
20009bf4:	2201      	movs	r2, #1
20009bf6:	4619      	mov	r1, r3
20009bf8:	6878      	ldr	r0, [r7, #4]
20009bfa:	f001 fd29 	bl	2000b650 <USBD_CtlSendData>
          break;
20009bfe:	e01b      	b.n	20009c38 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
20009c00:	683b      	ldr	r3, [r7, #0]
20009c02:	88db      	ldrh	r3, [r3, #6]
20009c04:	2b40      	cmp	r3, #64	@ 0x40
20009c06:	d905      	bls.n	20009c14 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
20009c08:	6839      	ldr	r1, [r7, #0]
20009c0a:	6878      	ldr	r0, [r7, #4]
20009c0c:	f001 fca3 	bl	2000b556 <USBD_CtlError>
            return USBD_FAIL;
20009c10:	2303      	movs	r3, #3
20009c12:	e0b8      	b.n	20009d86 <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
20009c14:	693b      	ldr	r3, [r7, #16]
20009c16:	2201      	movs	r2, #1
20009c18:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
20009c1a:	6939      	ldr	r1, [r7, #16]
20009c1c:	683b      	ldr	r3, [r7, #0]
20009c1e:	88db      	ldrh	r3, [r3, #6]
20009c20:	461a      	mov	r2, r3
20009c22:	6878      	ldr	r0, [r7, #4]
20009c24:	f001 fd43 	bl	2000b6ae <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
20009c28:	e006      	b.n	20009c38 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
20009c2a:	6839      	ldr	r1, [r7, #0]
20009c2c:	6878      	ldr	r0, [r7, #4]
20009c2e:	f001 fc92 	bl	2000b556 <USBD_CtlError>
          ret = USBD_FAIL;
20009c32:	2303      	movs	r3, #3
20009c34:	75fb      	strb	r3, [r7, #23]
          break;
20009c36:	bf00      	nop
      }
      break;
20009c38:	e0a4      	b.n	20009d84 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
20009c3a:	683b      	ldr	r3, [r7, #0]
20009c3c:	785b      	ldrb	r3, [r3, #1]
20009c3e:	2b0b      	cmp	r3, #11
20009c40:	f200 8090 	bhi.w	20009d64 <USBD_CUSTOM_HID_Setup+0x224>
20009c44:	a201      	add	r2, pc, #4	@ (adr r2, 20009c4c <USBD_CUSTOM_HID_Setup+0x10c>)
20009c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20009c4a:	bf00      	nop
20009c4c:	20009c7d 	.word	0x20009c7d
20009c50:	20009d73 	.word	0x20009d73
20009c54:	20009d65 	.word	0x20009d65
20009c58:	20009d65 	.word	0x20009d65
20009c5c:	20009d65 	.word	0x20009d65
20009c60:	20009d65 	.word	0x20009d65
20009c64:	20009ca7 	.word	0x20009ca7
20009c68:	20009d65 	.word	0x20009d65
20009c6c:	20009d65 	.word	0x20009d65
20009c70:	20009d65 	.word	0x20009d65
20009c74:	20009d13 	.word	0x20009d13
20009c78:	20009d3d 	.word	0x20009d3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
20009c7c:	687b      	ldr	r3, [r7, #4]
20009c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20009c82:	b2db      	uxtb	r3, r3
20009c84:	2b03      	cmp	r3, #3
20009c86:	d107      	bne.n	20009c98 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
20009c88:	f107 030e 	add.w	r3, r7, #14
20009c8c:	2202      	movs	r2, #2
20009c8e:	4619      	mov	r1, r3
20009c90:	6878      	ldr	r0, [r7, #4]
20009c92:	f001 fcdd 	bl	2000b650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
20009c96:	e06d      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
20009c98:	6839      	ldr	r1, [r7, #0]
20009c9a:	6878      	ldr	r0, [r7, #4]
20009c9c:	f001 fc5b 	bl	2000b556 <USBD_CtlError>
            ret = USBD_FAIL;
20009ca0:	2303      	movs	r3, #3
20009ca2:	75fb      	strb	r3, [r7, #23]
          break;
20009ca4:	e066      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
20009ca6:	683b      	ldr	r3, [r7, #0]
20009ca8:	885b      	ldrh	r3, [r3, #2]
20009caa:	0a1b      	lsrs	r3, r3, #8
20009cac:	b29b      	uxth	r3, r3
20009cae:	2b22      	cmp	r3, #34	@ 0x22
20009cb0:	d110      	bne.n	20009cd4 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
20009cb2:	683b      	ldr	r3, [r7, #0]
20009cb4:	88db      	ldrh	r3, [r3, #6]
20009cb6:	2b40      	cmp	r3, #64	@ 0x40
20009cb8:	bf28      	it	cs
20009cba:	2340      	movcs	r3, #64	@ 0x40
20009cbc:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
20009cbe:	687b      	ldr	r3, [r7, #4]
20009cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009cc4:	687a      	ldr	r2, [r7, #4]
20009cc6:	33b0      	adds	r3, #176	@ 0xb0
20009cc8:	009b      	lsls	r3, r3, #2
20009cca:	4413      	add	r3, r2
20009ccc:	685b      	ldr	r3, [r3, #4]
20009cce:	681b      	ldr	r3, [r3, #0]
20009cd0:	61bb      	str	r3, [r7, #24]
20009cd2:	e00d      	b.n	20009cf0 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
20009cd4:	683b      	ldr	r3, [r7, #0]
20009cd6:	885b      	ldrh	r3, [r3, #2]
20009cd8:	0a1b      	lsrs	r3, r3, #8
20009cda:	b29b      	uxth	r3, r3
20009cdc:	2b21      	cmp	r3, #33	@ 0x21
20009cde:	d107      	bne.n	20009cf0 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
20009ce0:	4b2b      	ldr	r3, [pc, #172]	@ (20009d90 <USBD_CUSTOM_HID_Setup+0x250>)
20009ce2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
20009ce4:	683b      	ldr	r3, [r7, #0]
20009ce6:	88db      	ldrh	r3, [r3, #6]
20009ce8:	2b09      	cmp	r3, #9
20009cea:	bf28      	it	cs
20009cec:	2309      	movcs	r3, #9
20009cee:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
20009cf0:	69bb      	ldr	r3, [r7, #24]
20009cf2:	2b00      	cmp	r3, #0
20009cf4:	d006      	beq.n	20009d04 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
20009cf6:	8bfb      	ldrh	r3, [r7, #30]
20009cf8:	461a      	mov	r2, r3
20009cfa:	69b9      	ldr	r1, [r7, #24]
20009cfc:	6878      	ldr	r0, [r7, #4]
20009cfe:	f001 fca7 	bl	2000b650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
20009d02:	e037      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
20009d04:	6839      	ldr	r1, [r7, #0]
20009d06:	6878      	ldr	r0, [r7, #4]
20009d08:	f001 fc25 	bl	2000b556 <USBD_CtlError>
            ret = USBD_FAIL;
20009d0c:	2303      	movs	r3, #3
20009d0e:	75fb      	strb	r3, [r7, #23]
          break;
20009d10:	e030      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
20009d12:	687b      	ldr	r3, [r7, #4]
20009d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20009d18:	b2db      	uxtb	r3, r3
20009d1a:	2b03      	cmp	r3, #3
20009d1c:	d107      	bne.n	20009d2e <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
20009d1e:	693b      	ldr	r3, [r7, #16]
20009d20:	3348      	adds	r3, #72	@ 0x48
20009d22:	2201      	movs	r2, #1
20009d24:	4619      	mov	r1, r3
20009d26:	6878      	ldr	r0, [r7, #4]
20009d28:	f001 fc92 	bl	2000b650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
20009d2c:	e022      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
20009d2e:	6839      	ldr	r1, [r7, #0]
20009d30:	6878      	ldr	r0, [r7, #4]
20009d32:	f001 fc10 	bl	2000b556 <USBD_CtlError>
            ret = USBD_FAIL;
20009d36:	2303      	movs	r3, #3
20009d38:	75fb      	strb	r3, [r7, #23]
          break;
20009d3a:	e01b      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
20009d3c:	687b      	ldr	r3, [r7, #4]
20009d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20009d42:	b2db      	uxtb	r3, r3
20009d44:	2b03      	cmp	r3, #3
20009d46:	d106      	bne.n	20009d56 <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
20009d48:	683b      	ldr	r3, [r7, #0]
20009d4a:	885b      	ldrh	r3, [r3, #2]
20009d4c:	b2db      	uxtb	r3, r3
20009d4e:	461a      	mov	r2, r3
20009d50:	693b      	ldr	r3, [r7, #16]
20009d52:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
20009d54:	e00e      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
20009d56:	6839      	ldr	r1, [r7, #0]
20009d58:	6878      	ldr	r0, [r7, #4]
20009d5a:	f001 fbfc 	bl	2000b556 <USBD_CtlError>
            ret = USBD_FAIL;
20009d5e:	2303      	movs	r3, #3
20009d60:	75fb      	strb	r3, [r7, #23]
          break;
20009d62:	e007      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
20009d64:	6839      	ldr	r1, [r7, #0]
20009d66:	6878      	ldr	r0, [r7, #4]
20009d68:	f001 fbf5 	bl	2000b556 <USBD_CtlError>
          ret = USBD_FAIL;
20009d6c:	2303      	movs	r3, #3
20009d6e:	75fb      	strb	r3, [r7, #23]
          break;
20009d70:	e000      	b.n	20009d74 <USBD_CUSTOM_HID_Setup+0x234>
          break;
20009d72:	bf00      	nop
      }
      break;
20009d74:	e006      	b.n	20009d84 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
20009d76:	6839      	ldr	r1, [r7, #0]
20009d78:	6878      	ldr	r0, [r7, #4]
20009d7a:	f001 fbec 	bl	2000b556 <USBD_CtlError>
      ret = USBD_FAIL;
20009d7e:	2303      	movs	r3, #3
20009d80:	75fb      	strb	r3, [r7, #23]
      break;
20009d82:	bf00      	nop
  }
  return (uint8_t)ret;
20009d84:	7dfb      	ldrb	r3, [r7, #23]
}
20009d86:	4618      	mov	r0, r3
20009d88:	3720      	adds	r7, #32
20009d8a:	46bd      	mov	sp, r7
20009d8c:	bd80      	pop	{r7, pc}
20009d8e:	bf00      	nop
20009d90:	2000c4fc 	.word	0x2000c4fc

20009d94 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
20009d94:	b580      	push	{r7, lr}
20009d96:	b086      	sub	sp, #24
20009d98:	af00      	add	r7, sp, #0
20009d9a:	60f8      	str	r0, [r7, #12]
20009d9c:	60b9      	str	r1, [r7, #8]
20009d9e:	4613      	mov	r3, r2
20009da0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009da2:	68fb      	ldr	r3, [r7, #12]
20009da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009da8:	68fb      	ldr	r3, [r7, #12]
20009daa:	32b0      	adds	r2, #176	@ 0xb0
20009dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009db0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
20009db2:	697b      	ldr	r3, [r7, #20]
20009db4:	2b00      	cmp	r3, #0
20009db6:	d101      	bne.n	20009dbc <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
20009db8:	2303      	movs	r3, #3
20009dba:	e019      	b.n	20009df0 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
20009dbc:	68fb      	ldr	r3, [r7, #12]
20009dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20009dc2:	b2db      	uxtb	r3, r3
20009dc4:	2b03      	cmp	r3, #3
20009dc6:	d112      	bne.n	20009dee <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
20009dc8:	697b      	ldr	r3, [r7, #20]
20009dca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20009dce:	2b00      	cmp	r3, #0
20009dd0:	d10b      	bne.n	20009dea <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
20009dd2:	697b      	ldr	r3, [r7, #20]
20009dd4:	2201      	movs	r2, #1
20009dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
20009dda:	4b07      	ldr	r3, [pc, #28]	@ (20009df8 <USBD_CUSTOM_HID_SendReport+0x64>)
20009ddc:	7819      	ldrb	r1, [r3, #0]
20009dde:	88fb      	ldrh	r3, [r7, #6]
20009de0:	68ba      	ldr	r2, [r7, #8]
20009de2:	68f8      	ldr	r0, [r7, #12]
20009de4:	f002 f8df 	bl	2000bfa6 <USBD_LL_Transmit>
20009de8:	e001      	b.n	20009dee <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
20009dea:	2301      	movs	r3, #1
20009dec:	e000      	b.n	20009df0 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
20009dee:	2300      	movs	r3, #0
}
20009df0:	4618      	mov	r0, r3
20009df2:	3718      	adds	r7, #24
20009df4:	46bd      	mov	sp, r7
20009df6:	bd80      	pop	{r7, pc}
20009df8:	2000c512 	.word	0x2000c512

20009dfc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
20009dfc:	b580      	push	{r7, lr}
20009dfe:	b084      	sub	sp, #16
20009e00:	af00      	add	r7, sp, #0
20009e02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20009e04:	2181      	movs	r1, #129	@ 0x81
20009e06:	4815      	ldr	r0, [pc, #84]	@ (20009e5c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
20009e08:	f000 fd44 	bl	2000a894 <USBD_GetEpDesc>
20009e0c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
20009e0e:	2101      	movs	r1, #1
20009e10:	4812      	ldr	r0, [pc, #72]	@ (20009e5c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
20009e12:	f000 fd3f 	bl	2000a894 <USBD_GetEpDesc>
20009e16:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
20009e18:	68fb      	ldr	r3, [r7, #12]
20009e1a:	2b00      	cmp	r3, #0
20009e1c:	d009      	beq.n	20009e32 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
20009e1e:	68fb      	ldr	r3, [r7, #12]
20009e20:	2200      	movs	r2, #0
20009e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009e26:	711a      	strb	r2, [r3, #4]
20009e28:	2200      	movs	r2, #0
20009e2a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009e2c:	68fb      	ldr	r3, [r7, #12]
20009e2e:	2205      	movs	r2, #5
20009e30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
20009e32:	68bb      	ldr	r3, [r7, #8]
20009e34:	2b00      	cmp	r3, #0
20009e36:	d009      	beq.n	20009e4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
20009e38:	68bb      	ldr	r3, [r7, #8]
20009e3a:	2200      	movs	r2, #0
20009e3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009e40:	711a      	strb	r2, [r3, #4]
20009e42:	2200      	movs	r2, #0
20009e44:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009e46:	68bb      	ldr	r3, [r7, #8]
20009e48:	2205      	movs	r2, #5
20009e4a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20009e4c:	687b      	ldr	r3, [r7, #4]
20009e4e:	2229      	movs	r2, #41	@ 0x29
20009e50:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20009e52:	4b02      	ldr	r3, [pc, #8]	@ (20009e5c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
20009e54:	4618      	mov	r0, r3
20009e56:	3710      	adds	r7, #16
20009e58:	46bd      	mov	sp, r7
20009e5a:	bd80      	pop	{r7, pc}
20009e5c:	2000c4d0 	.word	0x2000c4d0

20009e60 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
20009e60:	b580      	push	{r7, lr}
20009e62:	b084      	sub	sp, #16
20009e64:	af00      	add	r7, sp, #0
20009e66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20009e68:	2181      	movs	r1, #129	@ 0x81
20009e6a:	4815      	ldr	r0, [pc, #84]	@ (20009ec0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
20009e6c:	f000 fd12 	bl	2000a894 <USBD_GetEpDesc>
20009e70:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
20009e72:	2101      	movs	r1, #1
20009e74:	4812      	ldr	r0, [pc, #72]	@ (20009ec0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
20009e76:	f000 fd0d 	bl	2000a894 <USBD_GetEpDesc>
20009e7a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
20009e7c:	68fb      	ldr	r3, [r7, #12]
20009e7e:	2b00      	cmp	r3, #0
20009e80:	d009      	beq.n	20009e96 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
20009e82:	68fb      	ldr	r3, [r7, #12]
20009e84:	2200      	movs	r2, #0
20009e86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009e8a:	711a      	strb	r2, [r3, #4]
20009e8c:	2200      	movs	r2, #0
20009e8e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
20009e90:	68fb      	ldr	r3, [r7, #12]
20009e92:	2205      	movs	r2, #5
20009e94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
20009e96:	68bb      	ldr	r3, [r7, #8]
20009e98:	2b00      	cmp	r3, #0
20009e9a:	d009      	beq.n	20009eb0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
20009e9c:	68bb      	ldr	r3, [r7, #8]
20009e9e:	2200      	movs	r2, #0
20009ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009ea4:	711a      	strb	r2, [r3, #4]
20009ea6:	2200      	movs	r2, #0
20009ea8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
20009eaa:	68bb      	ldr	r3, [r7, #8]
20009eac:	2205      	movs	r2, #5
20009eae:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20009eb0:	687b      	ldr	r3, [r7, #4]
20009eb2:	2229      	movs	r2, #41	@ 0x29
20009eb4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20009eb6:	4b02      	ldr	r3, [pc, #8]	@ (20009ec0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
20009eb8:	4618      	mov	r0, r3
20009eba:	3710      	adds	r7, #16
20009ebc:	46bd      	mov	sp, r7
20009ebe:	bd80      	pop	{r7, pc}
20009ec0:	2000c4d0 	.word	0x2000c4d0

20009ec4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
20009ec4:	b580      	push	{r7, lr}
20009ec6:	b084      	sub	sp, #16
20009ec8:	af00      	add	r7, sp, #0
20009eca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20009ecc:	2181      	movs	r1, #129	@ 0x81
20009ece:	4815      	ldr	r0, [pc, #84]	@ (20009f24 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
20009ed0:	f000 fce0 	bl	2000a894 <USBD_GetEpDesc>
20009ed4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
20009ed6:	2101      	movs	r1, #1
20009ed8:	4812      	ldr	r0, [pc, #72]	@ (20009f24 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
20009eda:	f000 fcdb 	bl	2000a894 <USBD_GetEpDesc>
20009ede:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
20009ee0:	68fb      	ldr	r3, [r7, #12]
20009ee2:	2b00      	cmp	r3, #0
20009ee4:	d009      	beq.n	20009efa <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
20009ee6:	68fb      	ldr	r3, [r7, #12]
20009ee8:	2200      	movs	r2, #0
20009eea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009eee:	711a      	strb	r2, [r3, #4]
20009ef0:	2200      	movs	r2, #0
20009ef2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009ef4:	68fb      	ldr	r3, [r7, #12]
20009ef6:	2205      	movs	r2, #5
20009ef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
20009efa:	68bb      	ldr	r3, [r7, #8]
20009efc:	2b00      	cmp	r3, #0
20009efe:	d009      	beq.n	20009f14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
20009f00:	68bb      	ldr	r3, [r7, #8]
20009f02:	2200      	movs	r2, #0
20009f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009f08:	711a      	strb	r2, [r3, #4]
20009f0a:	2200      	movs	r2, #0
20009f0c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009f0e:	68bb      	ldr	r3, [r7, #8]
20009f10:	2205      	movs	r2, #5
20009f12:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20009f14:	687b      	ldr	r3, [r7, #4]
20009f16:	2229      	movs	r2, #41	@ 0x29
20009f18:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20009f1a:	4b02      	ldr	r3, [pc, #8]	@ (20009f24 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
20009f1c:	4618      	mov	r0, r3
20009f1e:	3710      	adds	r7, #16
20009f20:	46bd      	mov	sp, r7
20009f22:	bd80      	pop	{r7, pc}
20009f24:	2000c4d0 	.word	0x2000c4d0

20009f28 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
20009f28:	b480      	push	{r7}
20009f2a:	b083      	sub	sp, #12
20009f2c:	af00      	add	r7, sp, #0
20009f2e:	6078      	str	r0, [r7, #4]
20009f30:	460b      	mov	r3, r1
20009f32:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
20009f34:	687b      	ldr	r3, [r7, #4]
20009f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009f3a:	687b      	ldr	r3, [r7, #4]
20009f3c:	32b0      	adds	r2, #176	@ 0xb0
20009f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009f42:	2200      	movs	r2, #0
20009f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
20009f48:	2300      	movs	r3, #0
}
20009f4a:	4618      	mov	r0, r3
20009f4c:	370c      	adds	r7, #12
20009f4e:	46bd      	mov	sp, r7
20009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
20009f54:	4770      	bx	lr

20009f56 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
20009f56:	b580      	push	{r7, lr}
20009f58:	b084      	sub	sp, #16
20009f5a:	af00      	add	r7, sp, #0
20009f5c:	6078      	str	r0, [r7, #4]
20009f5e:	460b      	mov	r3, r1
20009f60:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
20009f62:	687b      	ldr	r3, [r7, #4]
20009f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009f68:	687b      	ldr	r3, [r7, #4]
20009f6a:	32b0      	adds	r2, #176	@ 0xb0
20009f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009f70:	2b00      	cmp	r3, #0
20009f72:	d101      	bne.n	20009f78 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
20009f74:	2303      	movs	r3, #3
20009f76:	e017      	b.n	20009fa8 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009f78:	687b      	ldr	r3, [r7, #4]
20009f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009f7e:	687b      	ldr	r3, [r7, #4]
20009f80:	32b0      	adds	r2, #176	@ 0xb0
20009f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009f86:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
20009f88:	687b      	ldr	r3, [r7, #4]
20009f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009f8e:	687a      	ldr	r2, [r7, #4]
20009f90:	33b0      	adds	r3, #176	@ 0xb0
20009f92:	009b      	lsls	r3, r3, #2
20009f94:	4413      	add	r3, r2
20009f96:	685b      	ldr	r3, [r3, #4]
20009f98:	68db      	ldr	r3, [r3, #12]
20009f9a:	68fa      	ldr	r2, [r7, #12]
20009f9c:	7810      	ldrb	r0, [r2, #0]
20009f9e:	68fa      	ldr	r2, [r7, #12]
20009fa0:	7852      	ldrb	r2, [r2, #1]
20009fa2:	4611      	mov	r1, r2
20009fa4:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
20009fa6:	2300      	movs	r3, #0
}
20009fa8:	4618      	mov	r0, r3
20009faa:	3710      	adds	r7, #16
20009fac:	46bd      	mov	sp, r7
20009fae:	bd80      	pop	{r7, pc}

20009fb0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
20009fb0:	b580      	push	{r7, lr}
20009fb2:	b084      	sub	sp, #16
20009fb4:	af00      	add	r7, sp, #0
20009fb6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;
  uint8_t len;

  len = USBD_LL_GetRxDataSize(pdev, CUSTOMHIDOutEpAdd);
20009fb8:	4b17      	ldr	r3, [pc, #92]	@ (2000a018 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
20009fba:	781b      	ldrb	r3, [r3, #0]
20009fbc:	4619      	mov	r1, r3
20009fbe:	6878      	ldr	r0, [r7, #4]
20009fc0:	f002 f833 	bl	2000c02a <USBD_LL_GetRxDataSize>
20009fc4:	4603      	mov	r3, r0
20009fc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
20009fc8:	687b      	ldr	r3, [r7, #4]
20009fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009fce:	687b      	ldr	r3, [r7, #4]
20009fd0:	32b0      	adds	r2, #176	@ 0xb0
20009fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009fd6:	2b00      	cmp	r3, #0
20009fd8:	d101      	bne.n	20009fde <USBD_CUSTOM_HID_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
20009fda:	2303      	movs	r3, #3
20009fdc:	e018      	b.n	2000a010 <USBD_CUSTOM_HID_ReceivePacket+0x60>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009fde:	687b      	ldr	r3, [r7, #4]
20009fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009fe4:	687b      	ldr	r3, [r7, #4]
20009fe6:	32b0      	adds	r2, #176	@ 0xb0
20009fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009fec:	60bb      	str	r3, [r7, #8]

  memcpy(rdBuff, hhid->Report_buf, len);
20009fee:	68bb      	ldr	r3, [r7, #8]
20009ff0:	7bfa      	ldrb	r2, [r7, #15]
20009ff2:	4619      	mov	r1, r3
20009ff4:	4809      	ldr	r0, [pc, #36]	@ (2000a01c <USBD_CUSTOM_HID_ReceivePacket+0x6c>)
20009ff6:	f002 f9ad 	bl	2000c354 <memcpy>
  msgAvailable = 1;
20009ffa:	4b09      	ldr	r3, [pc, #36]	@ (2000a020 <USBD_CUSTOM_HID_ReceivePacket+0x70>)
20009ffc:	2201      	movs	r2, #1
20009ffe:	601a      	str	r2, [r3, #0]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
2000a000:	4b05      	ldr	r3, [pc, #20]	@ (2000a018 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
2000a002:	7819      	ldrb	r1, [r3, #0]
2000a004:	68ba      	ldr	r2, [r7, #8]
2000a006:	2340      	movs	r3, #64	@ 0x40
2000a008:	6878      	ldr	r0, [r7, #4]
2000a00a:	f001 ffed 	bl	2000bfe8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);



  return (uint8_t)USBD_OK;
2000a00e:	2300      	movs	r3, #0
}
2000a010:	4618      	mov	r0, r3
2000a012:	3710      	adds	r7, #16
2000a014:	46bd      	mov	sp, r7
2000a016:	bd80      	pop	{r7, pc}
2000a018:	2000c513 	.word	0x2000c513
2000a01c:	2000da74 	.word	0x2000da74
2000a020:	2000daf8 	.word	0x2000daf8

2000a024 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
2000a024:	b580      	push	{r7, lr}
2000a026:	b084      	sub	sp, #16
2000a028:	af00      	add	r7, sp, #0
2000a02a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000a02c:	687b      	ldr	r3, [r7, #4]
2000a02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a032:	687b      	ldr	r3, [r7, #4]
2000a034:	32b0      	adds	r2, #176	@ 0xb0
2000a036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a03a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
2000a03c:	68fb      	ldr	r3, [r7, #12]
2000a03e:	2b00      	cmp	r3, #0
2000a040:	d101      	bne.n	2000a046 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
2000a042:	2303      	movs	r3, #3
2000a044:	e016      	b.n	2000a074 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
2000a046:	68fb      	ldr	r3, [r7, #12]
2000a048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000a04a:	2b01      	cmp	r3, #1
2000a04c:	d111      	bne.n	2000a072 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
2000a04e:	687b      	ldr	r3, [r7, #4]
2000a050:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000a054:	687a      	ldr	r2, [r7, #4]
2000a056:	33b0      	adds	r3, #176	@ 0xb0
2000a058:	009b      	lsls	r3, r3, #2
2000a05a:	4413      	add	r3, r2
2000a05c:	685b      	ldr	r3, [r3, #4]
2000a05e:	68db      	ldr	r3, [r3, #12]
2000a060:	68fa      	ldr	r2, [r7, #12]
2000a062:	7810      	ldrb	r0, [r2, #0]
2000a064:	68fa      	ldr	r2, [r7, #12]
2000a066:	7852      	ldrb	r2, [r2, #1]
2000a068:	4611      	mov	r1, r2
2000a06a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
2000a06c:	68fb      	ldr	r3, [r7, #12]
2000a06e:	2200      	movs	r2, #0
2000a070:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
2000a072:	2300      	movs	r3, #0
}
2000a074:	4618      	mov	r0, r3
2000a076:	3710      	adds	r7, #16
2000a078:	46bd      	mov	sp, r7
2000a07a:	bd80      	pop	{r7, pc}

2000a07c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
2000a07c:	b480      	push	{r7}
2000a07e:	b083      	sub	sp, #12
2000a080:	af00      	add	r7, sp, #0
2000a082:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
2000a084:	687b      	ldr	r3, [r7, #4]
2000a086:	220a      	movs	r2, #10
2000a088:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
2000a08a:	4b03      	ldr	r3, [pc, #12]	@ (2000a098 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
2000a08c:	4618      	mov	r0, r3
2000a08e:	370c      	adds	r7, #12
2000a090:	46bd      	mov	sp, r7
2000a092:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a096:	4770      	bx	lr
2000a098:	2000c508 	.word	0x2000c508

2000a09c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
2000a09c:	b480      	push	{r7}
2000a09e:	b083      	sub	sp, #12
2000a0a0:	af00      	add	r7, sp, #0
2000a0a2:	6078      	str	r0, [r7, #4]
2000a0a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
2000a0a6:	683b      	ldr	r3, [r7, #0]
2000a0a8:	2b00      	cmp	r3, #0
2000a0aa:	d101      	bne.n	2000a0b0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
2000a0ac:	2303      	movs	r3, #3
2000a0ae:	e009      	b.n	2000a0c4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
2000a0b0:	687b      	ldr	r3, [r7, #4]
2000a0b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000a0b6:	687a      	ldr	r2, [r7, #4]
2000a0b8:	33b0      	adds	r3, #176	@ 0xb0
2000a0ba:	009b      	lsls	r3, r3, #2
2000a0bc:	4413      	add	r3, r2
2000a0be:	683a      	ldr	r2, [r7, #0]
2000a0c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
2000a0c2:	2300      	movs	r3, #0
}
2000a0c4:	4618      	mov	r0, r3
2000a0c6:	370c      	adds	r7, #12
2000a0c8:	46bd      	mov	sp, r7
2000a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a0ce:	4770      	bx	lr

2000a0d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
2000a0d0:	b580      	push	{r7, lr}
2000a0d2:	b086      	sub	sp, #24
2000a0d4:	af00      	add	r7, sp, #0
2000a0d6:	60f8      	str	r0, [r7, #12]
2000a0d8:	60b9      	str	r1, [r7, #8]
2000a0da:	4613      	mov	r3, r2
2000a0dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
2000a0de:	68fb      	ldr	r3, [r7, #12]
2000a0e0:	2b00      	cmp	r3, #0
2000a0e2:	d101      	bne.n	2000a0e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
2000a0e4:	2303      	movs	r3, #3
2000a0e6:	e01f      	b.n	2000a128 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
2000a0e8:	68fb      	ldr	r3, [r7, #12]
2000a0ea:	2200      	movs	r2, #0
2000a0ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
2000a0f0:	68fb      	ldr	r3, [r7, #12]
2000a0f2:	2200      	movs	r2, #0
2000a0f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
2000a0f8:	68fb      	ldr	r3, [r7, #12]
2000a0fa:	2200      	movs	r2, #0
2000a0fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
2000a100:	68bb      	ldr	r3, [r7, #8]
2000a102:	2b00      	cmp	r3, #0
2000a104:	d003      	beq.n	2000a10e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
2000a106:	68fb      	ldr	r3, [r7, #12]
2000a108:	68ba      	ldr	r2, [r7, #8]
2000a10a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000a10e:	68fb      	ldr	r3, [r7, #12]
2000a110:	2201      	movs	r2, #1
2000a112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
2000a116:	68fb      	ldr	r3, [r7, #12]
2000a118:	79fa      	ldrb	r2, [r7, #7]
2000a11a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
2000a11c:	68f8      	ldr	r0, [r7, #12]
2000a11e:	f001 fe0d 	bl	2000bd3c <USBD_LL_Init>
2000a122:	4603      	mov	r3, r0
2000a124:	75fb      	strb	r3, [r7, #23]

  return ret;
2000a126:	7dfb      	ldrb	r3, [r7, #23]
}
2000a128:	4618      	mov	r0, r3
2000a12a:	3718      	adds	r7, #24
2000a12c:	46bd      	mov	sp, r7
2000a12e:	bd80      	pop	{r7, pc}

2000a130 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
2000a130:	b580      	push	{r7, lr}
2000a132:	b084      	sub	sp, #16
2000a134:	af00      	add	r7, sp, #0
2000a136:	6078      	str	r0, [r7, #4]
2000a138:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000a13a:	2300      	movs	r3, #0
2000a13c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
2000a13e:	683b      	ldr	r3, [r7, #0]
2000a140:	2b00      	cmp	r3, #0
2000a142:	d101      	bne.n	2000a148 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
2000a144:	2303      	movs	r3, #3
2000a146:	e025      	b.n	2000a194 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
2000a148:	687b      	ldr	r3, [r7, #4]
2000a14a:	683a      	ldr	r2, [r7, #0]
2000a14c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
2000a150:	687b      	ldr	r3, [r7, #4]
2000a152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a156:	687b      	ldr	r3, [r7, #4]
2000a158:	32ae      	adds	r2, #174	@ 0xae
2000a15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000a160:	2b00      	cmp	r3, #0
2000a162:	d00f      	beq.n	2000a184 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
2000a164:	687b      	ldr	r3, [r7, #4]
2000a166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a16a:	687b      	ldr	r3, [r7, #4]
2000a16c:	32ae      	adds	r2, #174	@ 0xae
2000a16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000a174:	f107 020e 	add.w	r2, r7, #14
2000a178:	4610      	mov	r0, r2
2000a17a:	4798      	blx	r3
2000a17c:	4602      	mov	r2, r0
2000a17e:	687b      	ldr	r3, [r7, #4]
2000a180:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
2000a184:	687b      	ldr	r3, [r7, #4]
2000a186:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
2000a18a:	1c5a      	adds	r2, r3, #1
2000a18c:	687b      	ldr	r3, [r7, #4]
2000a18e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
2000a192:	2300      	movs	r3, #0
}
2000a194:	4618      	mov	r0, r3
2000a196:	3710      	adds	r7, #16
2000a198:	46bd      	mov	sp, r7
2000a19a:	bd80      	pop	{r7, pc}

2000a19c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
2000a19c:	b580      	push	{r7, lr}
2000a19e:	b082      	sub	sp, #8
2000a1a0:	af00      	add	r7, sp, #0
2000a1a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
2000a1a4:	6878      	ldr	r0, [r7, #4]
2000a1a6:	f001 fe15 	bl	2000bdd4 <USBD_LL_Start>
2000a1aa:	4603      	mov	r3, r0
}
2000a1ac:	4618      	mov	r0, r3
2000a1ae:	3708      	adds	r7, #8
2000a1b0:	46bd      	mov	sp, r7
2000a1b2:	bd80      	pop	{r7, pc}

2000a1b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
2000a1b4:	b480      	push	{r7}
2000a1b6:	b083      	sub	sp, #12
2000a1b8:	af00      	add	r7, sp, #0
2000a1ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
2000a1bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
2000a1be:	4618      	mov	r0, r3
2000a1c0:	370c      	adds	r7, #12
2000a1c2:	46bd      	mov	sp, r7
2000a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a1c8:	4770      	bx	lr

2000a1ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000a1ca:	b580      	push	{r7, lr}
2000a1cc:	b084      	sub	sp, #16
2000a1ce:	af00      	add	r7, sp, #0
2000a1d0:	6078      	str	r0, [r7, #4]
2000a1d2:	460b      	mov	r3, r1
2000a1d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
2000a1d6:	2300      	movs	r3, #0
2000a1d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
2000a1da:	687b      	ldr	r3, [r7, #4]
2000a1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a1e0:	2b00      	cmp	r3, #0
2000a1e2:	d009      	beq.n	2000a1f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
2000a1e4:	687b      	ldr	r3, [r7, #4]
2000a1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a1ea:	681b      	ldr	r3, [r3, #0]
2000a1ec:	78fa      	ldrb	r2, [r7, #3]
2000a1ee:	4611      	mov	r1, r2
2000a1f0:	6878      	ldr	r0, [r7, #4]
2000a1f2:	4798      	blx	r3
2000a1f4:	4603      	mov	r3, r0
2000a1f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
2000a1fa:	4618      	mov	r0, r3
2000a1fc:	3710      	adds	r7, #16
2000a1fe:	46bd      	mov	sp, r7
2000a200:	bd80      	pop	{r7, pc}

2000a202 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000a202:	b580      	push	{r7, lr}
2000a204:	b084      	sub	sp, #16
2000a206:	af00      	add	r7, sp, #0
2000a208:	6078      	str	r0, [r7, #4]
2000a20a:	460b      	mov	r3, r1
2000a20c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
2000a20e:	2300      	movs	r3, #0
2000a210:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
2000a212:	687b      	ldr	r3, [r7, #4]
2000a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a218:	685b      	ldr	r3, [r3, #4]
2000a21a:	78fa      	ldrb	r2, [r7, #3]
2000a21c:	4611      	mov	r1, r2
2000a21e:	6878      	ldr	r0, [r7, #4]
2000a220:	4798      	blx	r3
2000a222:	4603      	mov	r3, r0
2000a224:	2b00      	cmp	r3, #0
2000a226:	d001      	beq.n	2000a22c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
2000a228:	2303      	movs	r3, #3
2000a22a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000a22c:	7bfb      	ldrb	r3, [r7, #15]
}
2000a22e:	4618      	mov	r0, r3
2000a230:	3710      	adds	r7, #16
2000a232:	46bd      	mov	sp, r7
2000a234:	bd80      	pop	{r7, pc}

2000a236 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
2000a236:	b580      	push	{r7, lr}
2000a238:	b084      	sub	sp, #16
2000a23a:	af00      	add	r7, sp, #0
2000a23c:	6078      	str	r0, [r7, #4]
2000a23e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
2000a240:	687b      	ldr	r3, [r7, #4]
2000a242:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000a246:	6839      	ldr	r1, [r7, #0]
2000a248:	4618      	mov	r0, r3
2000a24a:	f001 f94a 	bl	2000b4e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
2000a24e:	687b      	ldr	r3, [r7, #4]
2000a250:	2201      	movs	r2, #1
2000a252:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
2000a256:	687b      	ldr	r3, [r7, #4]
2000a258:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
2000a25c:	461a      	mov	r2, r3
2000a25e:	687b      	ldr	r3, [r7, #4]
2000a260:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
2000a264:	687b      	ldr	r3, [r7, #4]
2000a266:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000a26a:	f003 031f 	and.w	r3, r3, #31
2000a26e:	2b02      	cmp	r3, #2
2000a270:	d01a      	beq.n	2000a2a8 <USBD_LL_SetupStage+0x72>
2000a272:	2b02      	cmp	r3, #2
2000a274:	d822      	bhi.n	2000a2bc <USBD_LL_SetupStage+0x86>
2000a276:	2b00      	cmp	r3, #0
2000a278:	d002      	beq.n	2000a280 <USBD_LL_SetupStage+0x4a>
2000a27a:	2b01      	cmp	r3, #1
2000a27c:	d00a      	beq.n	2000a294 <USBD_LL_SetupStage+0x5e>
2000a27e:	e01d      	b.n	2000a2bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
2000a280:	687b      	ldr	r3, [r7, #4]
2000a282:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000a286:	4619      	mov	r1, r3
2000a288:	6878      	ldr	r0, [r7, #4]
2000a28a:	f000 fb75 	bl	2000a978 <USBD_StdDevReq>
2000a28e:	4603      	mov	r3, r0
2000a290:	73fb      	strb	r3, [r7, #15]
      break;
2000a292:	e020      	b.n	2000a2d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
2000a294:	687b      	ldr	r3, [r7, #4]
2000a296:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000a29a:	4619      	mov	r1, r3
2000a29c:	6878      	ldr	r0, [r7, #4]
2000a29e:	f000 fbdd 	bl	2000aa5c <USBD_StdItfReq>
2000a2a2:	4603      	mov	r3, r0
2000a2a4:	73fb      	strb	r3, [r7, #15]
      break;
2000a2a6:	e016      	b.n	2000a2d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
2000a2a8:	687b      	ldr	r3, [r7, #4]
2000a2aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000a2ae:	4619      	mov	r1, r3
2000a2b0:	6878      	ldr	r0, [r7, #4]
2000a2b2:	f000 fc3f 	bl	2000ab34 <USBD_StdEPReq>
2000a2b6:	4603      	mov	r3, r0
2000a2b8:	73fb      	strb	r3, [r7, #15]
      break;
2000a2ba:	e00c      	b.n	2000a2d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
2000a2bc:	687b      	ldr	r3, [r7, #4]
2000a2be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000a2c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
2000a2c6:	b2db      	uxtb	r3, r3
2000a2c8:	4619      	mov	r1, r3
2000a2ca:	6878      	ldr	r0, [r7, #4]
2000a2cc:	f001 fde2 	bl	2000be94 <USBD_LL_StallEP>
2000a2d0:	4603      	mov	r3, r0
2000a2d2:	73fb      	strb	r3, [r7, #15]
      break;
2000a2d4:	bf00      	nop
  }

  return ret;
2000a2d6:	7bfb      	ldrb	r3, [r7, #15]
}
2000a2d8:	4618      	mov	r0, r3
2000a2da:	3710      	adds	r7, #16
2000a2dc:	46bd      	mov	sp, r7
2000a2de:	bd80      	pop	{r7, pc}

2000a2e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
2000a2e0:	b580      	push	{r7, lr}
2000a2e2:	b086      	sub	sp, #24
2000a2e4:	af00      	add	r7, sp, #0
2000a2e6:	60f8      	str	r0, [r7, #12]
2000a2e8:	460b      	mov	r3, r1
2000a2ea:	607a      	str	r2, [r7, #4]
2000a2ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
2000a2ee:	2300      	movs	r3, #0
2000a2f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
2000a2f2:	7afb      	ldrb	r3, [r7, #11]
2000a2f4:	2b00      	cmp	r3, #0
2000a2f6:	d177      	bne.n	2000a3e8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
2000a2f8:	68fb      	ldr	r3, [r7, #12]
2000a2fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
2000a2fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
2000a300:	68fb      	ldr	r3, [r7, #12]
2000a302:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
2000a306:	2b03      	cmp	r3, #3
2000a308:	f040 80a1 	bne.w	2000a44e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
2000a30c:	693b      	ldr	r3, [r7, #16]
2000a30e:	685b      	ldr	r3, [r3, #4]
2000a310:	693a      	ldr	r2, [r7, #16]
2000a312:	8992      	ldrh	r2, [r2, #12]
2000a314:	4293      	cmp	r3, r2
2000a316:	d91c      	bls.n	2000a352 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
2000a318:	693b      	ldr	r3, [r7, #16]
2000a31a:	685b      	ldr	r3, [r3, #4]
2000a31c:	693a      	ldr	r2, [r7, #16]
2000a31e:	8992      	ldrh	r2, [r2, #12]
2000a320:	1a9a      	subs	r2, r3, r2
2000a322:	693b      	ldr	r3, [r7, #16]
2000a324:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
2000a326:	693b      	ldr	r3, [r7, #16]
2000a328:	691b      	ldr	r3, [r3, #16]
2000a32a:	693a      	ldr	r2, [r7, #16]
2000a32c:	8992      	ldrh	r2, [r2, #12]
2000a32e:	441a      	add	r2, r3
2000a330:	693b      	ldr	r3, [r7, #16]
2000a332:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
2000a334:	693b      	ldr	r3, [r7, #16]
2000a336:	6919      	ldr	r1, [r3, #16]
2000a338:	693b      	ldr	r3, [r7, #16]
2000a33a:	899b      	ldrh	r3, [r3, #12]
2000a33c:	461a      	mov	r2, r3
2000a33e:	693b      	ldr	r3, [r7, #16]
2000a340:	685b      	ldr	r3, [r3, #4]
2000a342:	4293      	cmp	r3, r2
2000a344:	bf38      	it	cc
2000a346:	4613      	movcc	r3, r2
2000a348:	461a      	mov	r2, r3
2000a34a:	68f8      	ldr	r0, [r7, #12]
2000a34c:	f001 f9d0 	bl	2000b6f0 <USBD_CtlContinueRx>
2000a350:	e07d      	b.n	2000a44e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
2000a352:	68fb      	ldr	r3, [r7, #12]
2000a354:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000a358:	f003 031f 	and.w	r3, r3, #31
2000a35c:	2b02      	cmp	r3, #2
2000a35e:	d014      	beq.n	2000a38a <USBD_LL_DataOutStage+0xaa>
2000a360:	2b02      	cmp	r3, #2
2000a362:	d81d      	bhi.n	2000a3a0 <USBD_LL_DataOutStage+0xc0>
2000a364:	2b00      	cmp	r3, #0
2000a366:	d002      	beq.n	2000a36e <USBD_LL_DataOutStage+0x8e>
2000a368:	2b01      	cmp	r3, #1
2000a36a:	d003      	beq.n	2000a374 <USBD_LL_DataOutStage+0x94>
2000a36c:	e018      	b.n	2000a3a0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
2000a36e:	2300      	movs	r3, #0
2000a370:	75bb      	strb	r3, [r7, #22]
            break;
2000a372:	e018      	b.n	2000a3a6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
2000a374:	68fb      	ldr	r3, [r7, #12]
2000a376:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
2000a37a:	b2db      	uxtb	r3, r3
2000a37c:	4619      	mov	r1, r3
2000a37e:	68f8      	ldr	r0, [r7, #12]
2000a380:	f000 fa6e 	bl	2000a860 <USBD_CoreFindIF>
2000a384:	4603      	mov	r3, r0
2000a386:	75bb      	strb	r3, [r7, #22]
            break;
2000a388:	e00d      	b.n	2000a3a6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
2000a38a:	68fb      	ldr	r3, [r7, #12]
2000a38c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
2000a390:	b2db      	uxtb	r3, r3
2000a392:	4619      	mov	r1, r3
2000a394:	68f8      	ldr	r0, [r7, #12]
2000a396:	f000 fa70 	bl	2000a87a <USBD_CoreFindEP>
2000a39a:	4603      	mov	r3, r0
2000a39c:	75bb      	strb	r3, [r7, #22]
            break;
2000a39e:	e002      	b.n	2000a3a6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
2000a3a0:	2300      	movs	r3, #0
2000a3a2:	75bb      	strb	r3, [r7, #22]
            break;
2000a3a4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
2000a3a6:	7dbb      	ldrb	r3, [r7, #22]
2000a3a8:	2b00      	cmp	r3, #0
2000a3aa:	d119      	bne.n	2000a3e0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a3ac:	68fb      	ldr	r3, [r7, #12]
2000a3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a3b2:	b2db      	uxtb	r3, r3
2000a3b4:	2b03      	cmp	r3, #3
2000a3b6:	d113      	bne.n	2000a3e0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
2000a3b8:	7dba      	ldrb	r2, [r7, #22]
2000a3ba:	68fb      	ldr	r3, [r7, #12]
2000a3bc:	32ae      	adds	r2, #174	@ 0xae
2000a3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a3c2:	691b      	ldr	r3, [r3, #16]
2000a3c4:	2b00      	cmp	r3, #0
2000a3c6:	d00b      	beq.n	2000a3e0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
2000a3c8:	7dba      	ldrb	r2, [r7, #22]
2000a3ca:	68fb      	ldr	r3, [r7, #12]
2000a3cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
2000a3d0:	7dba      	ldrb	r2, [r7, #22]
2000a3d2:	68fb      	ldr	r3, [r7, #12]
2000a3d4:	32ae      	adds	r2, #174	@ 0xae
2000a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a3da:	691b      	ldr	r3, [r3, #16]
2000a3dc:	68f8      	ldr	r0, [r7, #12]
2000a3de:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
2000a3e0:	68f8      	ldr	r0, [r7, #12]
2000a3e2:	f001 f996 	bl	2000b712 <USBD_CtlSendStatus>
2000a3e6:	e032      	b.n	2000a44e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
2000a3e8:	7afb      	ldrb	r3, [r7, #11]
2000a3ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000a3ee:	b2db      	uxtb	r3, r3
2000a3f0:	4619      	mov	r1, r3
2000a3f2:	68f8      	ldr	r0, [r7, #12]
2000a3f4:	f000 fa41 	bl	2000a87a <USBD_CoreFindEP>
2000a3f8:	4603      	mov	r3, r0
2000a3fa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000a3fc:	7dbb      	ldrb	r3, [r7, #22]
2000a3fe:	2bff      	cmp	r3, #255	@ 0xff
2000a400:	d025      	beq.n	2000a44e <USBD_LL_DataOutStage+0x16e>
2000a402:	7dbb      	ldrb	r3, [r7, #22]
2000a404:	2b00      	cmp	r3, #0
2000a406:	d122      	bne.n	2000a44e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a408:	68fb      	ldr	r3, [r7, #12]
2000a40a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a40e:	b2db      	uxtb	r3, r3
2000a410:	2b03      	cmp	r3, #3
2000a412:	d117      	bne.n	2000a444 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
2000a414:	7dba      	ldrb	r2, [r7, #22]
2000a416:	68fb      	ldr	r3, [r7, #12]
2000a418:	32ae      	adds	r2, #174	@ 0xae
2000a41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a41e:	699b      	ldr	r3, [r3, #24]
2000a420:	2b00      	cmp	r3, #0
2000a422:	d00f      	beq.n	2000a444 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
2000a424:	7dba      	ldrb	r2, [r7, #22]
2000a426:	68fb      	ldr	r3, [r7, #12]
2000a428:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
2000a42c:	7dba      	ldrb	r2, [r7, #22]
2000a42e:	68fb      	ldr	r3, [r7, #12]
2000a430:	32ae      	adds	r2, #174	@ 0xae
2000a432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a436:	699b      	ldr	r3, [r3, #24]
2000a438:	7afa      	ldrb	r2, [r7, #11]
2000a43a:	4611      	mov	r1, r2
2000a43c:	68f8      	ldr	r0, [r7, #12]
2000a43e:	4798      	blx	r3
2000a440:	4603      	mov	r3, r0
2000a442:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
2000a444:	7dfb      	ldrb	r3, [r7, #23]
2000a446:	2b00      	cmp	r3, #0
2000a448:	d001      	beq.n	2000a44e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
2000a44a:	7dfb      	ldrb	r3, [r7, #23]
2000a44c:	e000      	b.n	2000a450 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
2000a44e:	2300      	movs	r3, #0
}
2000a450:	4618      	mov	r0, r3
2000a452:	3718      	adds	r7, #24
2000a454:	46bd      	mov	sp, r7
2000a456:	bd80      	pop	{r7, pc}

2000a458 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
2000a458:	b580      	push	{r7, lr}
2000a45a:	b086      	sub	sp, #24
2000a45c:	af00      	add	r7, sp, #0
2000a45e:	60f8      	str	r0, [r7, #12]
2000a460:	460b      	mov	r3, r1
2000a462:	607a      	str	r2, [r7, #4]
2000a464:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
2000a466:	7afb      	ldrb	r3, [r7, #11]
2000a468:	2b00      	cmp	r3, #0
2000a46a:	d178      	bne.n	2000a55e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
2000a46c:	68fb      	ldr	r3, [r7, #12]
2000a46e:	3314      	adds	r3, #20
2000a470:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
2000a472:	68fb      	ldr	r3, [r7, #12]
2000a474:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
2000a478:	2b02      	cmp	r3, #2
2000a47a:	d163      	bne.n	2000a544 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
2000a47c:	693b      	ldr	r3, [r7, #16]
2000a47e:	685b      	ldr	r3, [r3, #4]
2000a480:	693a      	ldr	r2, [r7, #16]
2000a482:	8992      	ldrh	r2, [r2, #12]
2000a484:	4293      	cmp	r3, r2
2000a486:	d91c      	bls.n	2000a4c2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
2000a488:	693b      	ldr	r3, [r7, #16]
2000a48a:	685b      	ldr	r3, [r3, #4]
2000a48c:	693a      	ldr	r2, [r7, #16]
2000a48e:	8992      	ldrh	r2, [r2, #12]
2000a490:	1a9a      	subs	r2, r3, r2
2000a492:	693b      	ldr	r3, [r7, #16]
2000a494:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
2000a496:	693b      	ldr	r3, [r7, #16]
2000a498:	691b      	ldr	r3, [r3, #16]
2000a49a:	693a      	ldr	r2, [r7, #16]
2000a49c:	8992      	ldrh	r2, [r2, #12]
2000a49e:	441a      	add	r2, r3
2000a4a0:	693b      	ldr	r3, [r7, #16]
2000a4a2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
2000a4a4:	693b      	ldr	r3, [r7, #16]
2000a4a6:	6919      	ldr	r1, [r3, #16]
2000a4a8:	693b      	ldr	r3, [r7, #16]
2000a4aa:	685b      	ldr	r3, [r3, #4]
2000a4ac:	461a      	mov	r2, r3
2000a4ae:	68f8      	ldr	r0, [r7, #12]
2000a4b0:	f001 f8ec 	bl	2000b68c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000a4b4:	2300      	movs	r3, #0
2000a4b6:	2200      	movs	r2, #0
2000a4b8:	2100      	movs	r1, #0
2000a4ba:	68f8      	ldr	r0, [r7, #12]
2000a4bc:	f001 fd94 	bl	2000bfe8 <USBD_LL_PrepareReceive>
2000a4c0:	e040      	b.n	2000a544 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
2000a4c2:	693b      	ldr	r3, [r7, #16]
2000a4c4:	899b      	ldrh	r3, [r3, #12]
2000a4c6:	461a      	mov	r2, r3
2000a4c8:	693b      	ldr	r3, [r7, #16]
2000a4ca:	685b      	ldr	r3, [r3, #4]
2000a4cc:	429a      	cmp	r2, r3
2000a4ce:	d11c      	bne.n	2000a50a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
2000a4d0:	693b      	ldr	r3, [r7, #16]
2000a4d2:	681b      	ldr	r3, [r3, #0]
2000a4d4:	693a      	ldr	r2, [r7, #16]
2000a4d6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
2000a4d8:	4293      	cmp	r3, r2
2000a4da:	d316      	bcc.n	2000a50a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
2000a4dc:	693b      	ldr	r3, [r7, #16]
2000a4de:	681a      	ldr	r2, [r3, #0]
2000a4e0:	68fb      	ldr	r3, [r7, #12]
2000a4e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
2000a4e6:	429a      	cmp	r2, r3
2000a4e8:	d20f      	bcs.n	2000a50a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
2000a4ea:	2200      	movs	r2, #0
2000a4ec:	2100      	movs	r1, #0
2000a4ee:	68f8      	ldr	r0, [r7, #12]
2000a4f0:	f001 f8cc 	bl	2000b68c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
2000a4f4:	68fb      	ldr	r3, [r7, #12]
2000a4f6:	2200      	movs	r2, #0
2000a4f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000a4fc:	2300      	movs	r3, #0
2000a4fe:	2200      	movs	r2, #0
2000a500:	2100      	movs	r1, #0
2000a502:	68f8      	ldr	r0, [r7, #12]
2000a504:	f001 fd70 	bl	2000bfe8 <USBD_LL_PrepareReceive>
2000a508:	e01c      	b.n	2000a544 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a50a:	68fb      	ldr	r3, [r7, #12]
2000a50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a510:	b2db      	uxtb	r3, r3
2000a512:	2b03      	cmp	r3, #3
2000a514:	d10f      	bne.n	2000a536 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
2000a516:	68fb      	ldr	r3, [r7, #12]
2000a518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a51c:	68db      	ldr	r3, [r3, #12]
2000a51e:	2b00      	cmp	r3, #0
2000a520:	d009      	beq.n	2000a536 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
2000a522:	68fb      	ldr	r3, [r7, #12]
2000a524:	2200      	movs	r2, #0
2000a526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
2000a52a:	68fb      	ldr	r3, [r7, #12]
2000a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a530:	68db      	ldr	r3, [r3, #12]
2000a532:	68f8      	ldr	r0, [r7, #12]
2000a534:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
2000a536:	2180      	movs	r1, #128	@ 0x80
2000a538:	68f8      	ldr	r0, [r7, #12]
2000a53a:	f001 fcab 	bl	2000be94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
2000a53e:	68f8      	ldr	r0, [r7, #12]
2000a540:	f001 f8fa 	bl	2000b738 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
2000a544:	68fb      	ldr	r3, [r7, #12]
2000a546:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
2000a54a:	2b00      	cmp	r3, #0
2000a54c:	d03a      	beq.n	2000a5c4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
2000a54e:	68f8      	ldr	r0, [r7, #12]
2000a550:	f7ff fe30 	bl	2000a1b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
2000a554:	68fb      	ldr	r3, [r7, #12]
2000a556:	2200      	movs	r2, #0
2000a558:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
2000a55c:	e032      	b.n	2000a5c4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
2000a55e:	7afb      	ldrb	r3, [r7, #11]
2000a560:	f063 037f 	orn	r3, r3, #127	@ 0x7f
2000a564:	b2db      	uxtb	r3, r3
2000a566:	4619      	mov	r1, r3
2000a568:	68f8      	ldr	r0, [r7, #12]
2000a56a:	f000 f986 	bl	2000a87a <USBD_CoreFindEP>
2000a56e:	4603      	mov	r3, r0
2000a570:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000a572:	7dfb      	ldrb	r3, [r7, #23]
2000a574:	2bff      	cmp	r3, #255	@ 0xff
2000a576:	d025      	beq.n	2000a5c4 <USBD_LL_DataInStage+0x16c>
2000a578:	7dfb      	ldrb	r3, [r7, #23]
2000a57a:	2b00      	cmp	r3, #0
2000a57c:	d122      	bne.n	2000a5c4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a57e:	68fb      	ldr	r3, [r7, #12]
2000a580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a584:	b2db      	uxtb	r3, r3
2000a586:	2b03      	cmp	r3, #3
2000a588:	d11c      	bne.n	2000a5c4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
2000a58a:	7dfa      	ldrb	r2, [r7, #23]
2000a58c:	68fb      	ldr	r3, [r7, #12]
2000a58e:	32ae      	adds	r2, #174	@ 0xae
2000a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a594:	695b      	ldr	r3, [r3, #20]
2000a596:	2b00      	cmp	r3, #0
2000a598:	d014      	beq.n	2000a5c4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
2000a59a:	7dfa      	ldrb	r2, [r7, #23]
2000a59c:	68fb      	ldr	r3, [r7, #12]
2000a59e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
2000a5a2:	7dfa      	ldrb	r2, [r7, #23]
2000a5a4:	68fb      	ldr	r3, [r7, #12]
2000a5a6:	32ae      	adds	r2, #174	@ 0xae
2000a5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a5ac:	695b      	ldr	r3, [r3, #20]
2000a5ae:	7afa      	ldrb	r2, [r7, #11]
2000a5b0:	4611      	mov	r1, r2
2000a5b2:	68f8      	ldr	r0, [r7, #12]
2000a5b4:	4798      	blx	r3
2000a5b6:	4603      	mov	r3, r0
2000a5b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
2000a5ba:	7dbb      	ldrb	r3, [r7, #22]
2000a5bc:	2b00      	cmp	r3, #0
2000a5be:	d001      	beq.n	2000a5c4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
2000a5c0:	7dbb      	ldrb	r3, [r7, #22]
2000a5c2:	e000      	b.n	2000a5c6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
2000a5c4:	2300      	movs	r3, #0
}
2000a5c6:	4618      	mov	r0, r3
2000a5c8:	3718      	adds	r7, #24
2000a5ca:	46bd      	mov	sp, r7
2000a5cc:	bd80      	pop	{r7, pc}

2000a5ce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
2000a5ce:	b580      	push	{r7, lr}
2000a5d0:	b084      	sub	sp, #16
2000a5d2:	af00      	add	r7, sp, #0
2000a5d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
2000a5d6:	2300      	movs	r3, #0
2000a5d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000a5da:	687b      	ldr	r3, [r7, #4]
2000a5dc:	2201      	movs	r2, #1
2000a5de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
2000a5e2:	687b      	ldr	r3, [r7, #4]
2000a5e4:	2200      	movs	r2, #0
2000a5e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
2000a5ea:	687b      	ldr	r3, [r7, #4]
2000a5ec:	2200      	movs	r2, #0
2000a5ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
2000a5f0:	687b      	ldr	r3, [r7, #4]
2000a5f2:	2200      	movs	r2, #0
2000a5f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
2000a5f8:	687b      	ldr	r3, [r7, #4]
2000a5fa:	2200      	movs	r2, #0
2000a5fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
2000a600:	687b      	ldr	r3, [r7, #4]
2000a602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a606:	2b00      	cmp	r3, #0
2000a608:	d014      	beq.n	2000a634 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
2000a60a:	687b      	ldr	r3, [r7, #4]
2000a60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a610:	685b      	ldr	r3, [r3, #4]
2000a612:	2b00      	cmp	r3, #0
2000a614:	d00e      	beq.n	2000a634 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
2000a616:	687b      	ldr	r3, [r7, #4]
2000a618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a61c:	685b      	ldr	r3, [r3, #4]
2000a61e:	687a      	ldr	r2, [r7, #4]
2000a620:	6852      	ldr	r2, [r2, #4]
2000a622:	b2d2      	uxtb	r2, r2
2000a624:	4611      	mov	r1, r2
2000a626:	6878      	ldr	r0, [r7, #4]
2000a628:	4798      	blx	r3
2000a62a:	4603      	mov	r3, r0
2000a62c:	2b00      	cmp	r3, #0
2000a62e:	d001      	beq.n	2000a634 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
2000a630:	2303      	movs	r3, #3
2000a632:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000a634:	2340      	movs	r3, #64	@ 0x40
2000a636:	2200      	movs	r2, #0
2000a638:	2100      	movs	r1, #0
2000a63a:	6878      	ldr	r0, [r7, #4]
2000a63c:	f001 fbe5 	bl	2000be0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
2000a640:	687b      	ldr	r3, [r7, #4]
2000a642:	2201      	movs	r2, #1
2000a644:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
2000a648:	687b      	ldr	r3, [r7, #4]
2000a64a:	2240      	movs	r2, #64	@ 0x40
2000a64c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000a650:	2340      	movs	r3, #64	@ 0x40
2000a652:	2200      	movs	r2, #0
2000a654:	2180      	movs	r1, #128	@ 0x80
2000a656:	6878      	ldr	r0, [r7, #4]
2000a658:	f001 fbd7 	bl	2000be0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
2000a65c:	687b      	ldr	r3, [r7, #4]
2000a65e:	2201      	movs	r2, #1
2000a660:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
2000a664:	687b      	ldr	r3, [r7, #4]
2000a666:	2240      	movs	r2, #64	@ 0x40
2000a668:	841a      	strh	r2, [r3, #32]

  return ret;
2000a66a:	7bfb      	ldrb	r3, [r7, #15]
}
2000a66c:	4618      	mov	r0, r3
2000a66e:	3710      	adds	r7, #16
2000a670:	46bd      	mov	sp, r7
2000a672:	bd80      	pop	{r7, pc}

2000a674 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
2000a674:	b480      	push	{r7}
2000a676:	b083      	sub	sp, #12
2000a678:	af00      	add	r7, sp, #0
2000a67a:	6078      	str	r0, [r7, #4]
2000a67c:	460b      	mov	r3, r1
2000a67e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
2000a680:	687b      	ldr	r3, [r7, #4]
2000a682:	78fa      	ldrb	r2, [r7, #3]
2000a684:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
2000a686:	2300      	movs	r3, #0
}
2000a688:	4618      	mov	r0, r3
2000a68a:	370c      	adds	r7, #12
2000a68c:	46bd      	mov	sp, r7
2000a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a692:	4770      	bx	lr

2000a694 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
2000a694:	b480      	push	{r7}
2000a696:	b083      	sub	sp, #12
2000a698:	af00      	add	r7, sp, #0
2000a69a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
2000a69c:	687b      	ldr	r3, [r7, #4]
2000a69e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a6a2:	b2db      	uxtb	r3, r3
2000a6a4:	2b04      	cmp	r3, #4
2000a6a6:	d006      	beq.n	2000a6b6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
2000a6a8:	687b      	ldr	r3, [r7, #4]
2000a6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a6ae:	b2da      	uxtb	r2, r3
2000a6b0:	687b      	ldr	r3, [r7, #4]
2000a6b2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
2000a6b6:	687b      	ldr	r3, [r7, #4]
2000a6b8:	2204      	movs	r2, #4
2000a6ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
2000a6be:	2300      	movs	r3, #0
}
2000a6c0:	4618      	mov	r0, r3
2000a6c2:	370c      	adds	r7, #12
2000a6c4:	46bd      	mov	sp, r7
2000a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a6ca:	4770      	bx	lr

2000a6cc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
2000a6cc:	b480      	push	{r7}
2000a6ce:	b083      	sub	sp, #12
2000a6d0:	af00      	add	r7, sp, #0
2000a6d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
2000a6d4:	687b      	ldr	r3, [r7, #4]
2000a6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a6da:	b2db      	uxtb	r3, r3
2000a6dc:	2b04      	cmp	r3, #4
2000a6de:	d106      	bne.n	2000a6ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
2000a6e0:	687b      	ldr	r3, [r7, #4]
2000a6e2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
2000a6e6:	b2da      	uxtb	r2, r3
2000a6e8:	687b      	ldr	r3, [r7, #4]
2000a6ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
2000a6ee:	2300      	movs	r3, #0
}
2000a6f0:	4618      	mov	r0, r3
2000a6f2:	370c      	adds	r7, #12
2000a6f4:	46bd      	mov	sp, r7
2000a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a6fa:	4770      	bx	lr

2000a6fc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
2000a6fc:	b580      	push	{r7, lr}
2000a6fe:	b082      	sub	sp, #8
2000a700:	af00      	add	r7, sp, #0
2000a702:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a704:	687b      	ldr	r3, [r7, #4]
2000a706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a70a:	b2db      	uxtb	r3, r3
2000a70c:	2b03      	cmp	r3, #3
2000a70e:	d110      	bne.n	2000a732 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
2000a710:	687b      	ldr	r3, [r7, #4]
2000a712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a716:	2b00      	cmp	r3, #0
2000a718:	d00b      	beq.n	2000a732 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
2000a71a:	687b      	ldr	r3, [r7, #4]
2000a71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a720:	69db      	ldr	r3, [r3, #28]
2000a722:	2b00      	cmp	r3, #0
2000a724:	d005      	beq.n	2000a732 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
2000a726:	687b      	ldr	r3, [r7, #4]
2000a728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a72c:	69db      	ldr	r3, [r3, #28]
2000a72e:	6878      	ldr	r0, [r7, #4]
2000a730:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
2000a732:	2300      	movs	r3, #0
}
2000a734:	4618      	mov	r0, r3
2000a736:	3708      	adds	r7, #8
2000a738:	46bd      	mov	sp, r7
2000a73a:	bd80      	pop	{r7, pc}

2000a73c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
2000a73c:	b580      	push	{r7, lr}
2000a73e:	b082      	sub	sp, #8
2000a740:	af00      	add	r7, sp, #0
2000a742:	6078      	str	r0, [r7, #4]
2000a744:	460b      	mov	r3, r1
2000a746:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000a748:	687b      	ldr	r3, [r7, #4]
2000a74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a74e:	687b      	ldr	r3, [r7, #4]
2000a750:	32ae      	adds	r2, #174	@ 0xae
2000a752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a756:	2b00      	cmp	r3, #0
2000a758:	d101      	bne.n	2000a75e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
2000a75a:	2303      	movs	r3, #3
2000a75c:	e01c      	b.n	2000a798 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a75e:	687b      	ldr	r3, [r7, #4]
2000a760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a764:	b2db      	uxtb	r3, r3
2000a766:	2b03      	cmp	r3, #3
2000a768:	d115      	bne.n	2000a796 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
2000a76a:	687b      	ldr	r3, [r7, #4]
2000a76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a770:	687b      	ldr	r3, [r7, #4]
2000a772:	32ae      	adds	r2, #174	@ 0xae
2000a774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a778:	6a1b      	ldr	r3, [r3, #32]
2000a77a:	2b00      	cmp	r3, #0
2000a77c:	d00b      	beq.n	2000a796 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
2000a77e:	687b      	ldr	r3, [r7, #4]
2000a780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a784:	687b      	ldr	r3, [r7, #4]
2000a786:	32ae      	adds	r2, #174	@ 0xae
2000a788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a78c:	6a1b      	ldr	r3, [r3, #32]
2000a78e:	78fa      	ldrb	r2, [r7, #3]
2000a790:	4611      	mov	r1, r2
2000a792:	6878      	ldr	r0, [r7, #4]
2000a794:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000a796:	2300      	movs	r3, #0
}
2000a798:	4618      	mov	r0, r3
2000a79a:	3708      	adds	r7, #8
2000a79c:	46bd      	mov	sp, r7
2000a79e:	bd80      	pop	{r7, pc}

2000a7a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
2000a7a0:	b580      	push	{r7, lr}
2000a7a2:	b082      	sub	sp, #8
2000a7a4:	af00      	add	r7, sp, #0
2000a7a6:	6078      	str	r0, [r7, #4]
2000a7a8:	460b      	mov	r3, r1
2000a7aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000a7ac:	687b      	ldr	r3, [r7, #4]
2000a7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a7b2:	687b      	ldr	r3, [r7, #4]
2000a7b4:	32ae      	adds	r2, #174	@ 0xae
2000a7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a7ba:	2b00      	cmp	r3, #0
2000a7bc:	d101      	bne.n	2000a7c2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
2000a7be:	2303      	movs	r3, #3
2000a7c0:	e01c      	b.n	2000a7fc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a7c2:	687b      	ldr	r3, [r7, #4]
2000a7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a7c8:	b2db      	uxtb	r3, r3
2000a7ca:	2b03      	cmp	r3, #3
2000a7cc:	d115      	bne.n	2000a7fa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
2000a7ce:	687b      	ldr	r3, [r7, #4]
2000a7d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a7d4:	687b      	ldr	r3, [r7, #4]
2000a7d6:	32ae      	adds	r2, #174	@ 0xae
2000a7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a7de:	2b00      	cmp	r3, #0
2000a7e0:	d00b      	beq.n	2000a7fa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
2000a7e2:	687b      	ldr	r3, [r7, #4]
2000a7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a7e8:	687b      	ldr	r3, [r7, #4]
2000a7ea:	32ae      	adds	r2, #174	@ 0xae
2000a7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a7f2:	78fa      	ldrb	r2, [r7, #3]
2000a7f4:	4611      	mov	r1, r2
2000a7f6:	6878      	ldr	r0, [r7, #4]
2000a7f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000a7fa:	2300      	movs	r3, #0
}
2000a7fc:	4618      	mov	r0, r3
2000a7fe:	3708      	adds	r7, #8
2000a800:	46bd      	mov	sp, r7
2000a802:	bd80      	pop	{r7, pc}

2000a804 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
2000a804:	b480      	push	{r7}
2000a806:	b083      	sub	sp, #12
2000a808:	af00      	add	r7, sp, #0
2000a80a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
2000a80c:	2300      	movs	r3, #0
}
2000a80e:	4618      	mov	r0, r3
2000a810:	370c      	adds	r7, #12
2000a812:	46bd      	mov	sp, r7
2000a814:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a818:	4770      	bx	lr

2000a81a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
2000a81a:	b580      	push	{r7, lr}
2000a81c:	b084      	sub	sp, #16
2000a81e:	af00      	add	r7, sp, #0
2000a820:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
2000a822:	2300      	movs	r3, #0
2000a824:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000a826:	687b      	ldr	r3, [r7, #4]
2000a828:	2201      	movs	r2, #1
2000a82a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
2000a82e:	687b      	ldr	r3, [r7, #4]
2000a830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a834:	2b00      	cmp	r3, #0
2000a836:	d00e      	beq.n	2000a856 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
2000a838:	687b      	ldr	r3, [r7, #4]
2000a83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a83e:	685b      	ldr	r3, [r3, #4]
2000a840:	687a      	ldr	r2, [r7, #4]
2000a842:	6852      	ldr	r2, [r2, #4]
2000a844:	b2d2      	uxtb	r2, r2
2000a846:	4611      	mov	r1, r2
2000a848:	6878      	ldr	r0, [r7, #4]
2000a84a:	4798      	blx	r3
2000a84c:	4603      	mov	r3, r0
2000a84e:	2b00      	cmp	r3, #0
2000a850:	d001      	beq.n	2000a856 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
2000a852:	2303      	movs	r3, #3
2000a854:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000a856:	7bfb      	ldrb	r3, [r7, #15]
}
2000a858:	4618      	mov	r0, r3
2000a85a:	3710      	adds	r7, #16
2000a85c:	46bd      	mov	sp, r7
2000a85e:	bd80      	pop	{r7, pc}

2000a860 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000a860:	b480      	push	{r7}
2000a862:	b083      	sub	sp, #12
2000a864:	af00      	add	r7, sp, #0
2000a866:	6078      	str	r0, [r7, #4]
2000a868:	460b      	mov	r3, r1
2000a86a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000a86c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000a86e:	4618      	mov	r0, r3
2000a870:	370c      	adds	r7, #12
2000a872:	46bd      	mov	sp, r7
2000a874:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a878:	4770      	bx	lr

2000a87a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000a87a:	b480      	push	{r7}
2000a87c:	b083      	sub	sp, #12
2000a87e:	af00      	add	r7, sp, #0
2000a880:	6078      	str	r0, [r7, #4]
2000a882:	460b      	mov	r3, r1
2000a884:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000a886:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000a888:	4618      	mov	r0, r3
2000a88a:	370c      	adds	r7, #12
2000a88c:	46bd      	mov	sp, r7
2000a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a892:	4770      	bx	lr

2000a894 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
2000a894:	b580      	push	{r7, lr}
2000a896:	b086      	sub	sp, #24
2000a898:	af00      	add	r7, sp, #0
2000a89a:	6078      	str	r0, [r7, #4]
2000a89c:	460b      	mov	r3, r1
2000a89e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
2000a8a0:	687b      	ldr	r3, [r7, #4]
2000a8a2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
2000a8a4:	687b      	ldr	r3, [r7, #4]
2000a8a6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
2000a8a8:	2300      	movs	r3, #0
2000a8aa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
2000a8ac:	68fb      	ldr	r3, [r7, #12]
2000a8ae:	885b      	ldrh	r3, [r3, #2]
2000a8b0:	b29b      	uxth	r3, r3
2000a8b2:	68fa      	ldr	r2, [r7, #12]
2000a8b4:	7812      	ldrb	r2, [r2, #0]
2000a8b6:	4293      	cmp	r3, r2
2000a8b8:	d91f      	bls.n	2000a8fa <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
2000a8ba:	68fb      	ldr	r3, [r7, #12]
2000a8bc:	781b      	ldrb	r3, [r3, #0]
2000a8be:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
2000a8c0:	e013      	b.n	2000a8ea <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
2000a8c2:	f107 030a 	add.w	r3, r7, #10
2000a8c6:	4619      	mov	r1, r3
2000a8c8:	6978      	ldr	r0, [r7, #20]
2000a8ca:	f000 f81b 	bl	2000a904 <USBD_GetNextDesc>
2000a8ce:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
2000a8d0:	697b      	ldr	r3, [r7, #20]
2000a8d2:	785b      	ldrb	r3, [r3, #1]
2000a8d4:	2b05      	cmp	r3, #5
2000a8d6:	d108      	bne.n	2000a8ea <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
2000a8d8:	697b      	ldr	r3, [r7, #20]
2000a8da:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
2000a8dc:	693b      	ldr	r3, [r7, #16]
2000a8de:	789b      	ldrb	r3, [r3, #2]
2000a8e0:	78fa      	ldrb	r2, [r7, #3]
2000a8e2:	429a      	cmp	r2, r3
2000a8e4:	d008      	beq.n	2000a8f8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
2000a8e6:	2300      	movs	r3, #0
2000a8e8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
2000a8ea:	68fb      	ldr	r3, [r7, #12]
2000a8ec:	885b      	ldrh	r3, [r3, #2]
2000a8ee:	b29a      	uxth	r2, r3
2000a8f0:	897b      	ldrh	r3, [r7, #10]
2000a8f2:	429a      	cmp	r2, r3
2000a8f4:	d8e5      	bhi.n	2000a8c2 <USBD_GetEpDesc+0x2e>
2000a8f6:	e000      	b.n	2000a8fa <USBD_GetEpDesc+0x66>
          break;
2000a8f8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
2000a8fa:	693b      	ldr	r3, [r7, #16]
}
2000a8fc:	4618      	mov	r0, r3
2000a8fe:	3718      	adds	r7, #24
2000a900:	46bd      	mov	sp, r7
2000a902:	bd80      	pop	{r7, pc}

2000a904 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
2000a904:	b480      	push	{r7}
2000a906:	b085      	sub	sp, #20
2000a908:	af00      	add	r7, sp, #0
2000a90a:	6078      	str	r0, [r7, #4]
2000a90c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
2000a90e:	687b      	ldr	r3, [r7, #4]
2000a910:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
2000a912:	683b      	ldr	r3, [r7, #0]
2000a914:	881b      	ldrh	r3, [r3, #0]
2000a916:	68fa      	ldr	r2, [r7, #12]
2000a918:	7812      	ldrb	r2, [r2, #0]
2000a91a:	4413      	add	r3, r2
2000a91c:	b29a      	uxth	r2, r3
2000a91e:	683b      	ldr	r3, [r7, #0]
2000a920:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
2000a922:	68fb      	ldr	r3, [r7, #12]
2000a924:	781b      	ldrb	r3, [r3, #0]
2000a926:	461a      	mov	r2, r3
2000a928:	687b      	ldr	r3, [r7, #4]
2000a92a:	4413      	add	r3, r2
2000a92c:	60fb      	str	r3, [r7, #12]

  return (pnext);
2000a92e:	68fb      	ldr	r3, [r7, #12]
}
2000a930:	4618      	mov	r0, r3
2000a932:	3714      	adds	r7, #20
2000a934:	46bd      	mov	sp, r7
2000a936:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a93a:	4770      	bx	lr

2000a93c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
2000a93c:	b480      	push	{r7}
2000a93e:	b087      	sub	sp, #28
2000a940:	af00      	add	r7, sp, #0
2000a942:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
2000a944:	687b      	ldr	r3, [r7, #4]
2000a946:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
2000a948:	697b      	ldr	r3, [r7, #20]
2000a94a:	781b      	ldrb	r3, [r3, #0]
2000a94c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
2000a94e:	697b      	ldr	r3, [r7, #20]
2000a950:	3301      	adds	r3, #1
2000a952:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
2000a954:	697b      	ldr	r3, [r7, #20]
2000a956:	781b      	ldrb	r3, [r3, #0]
2000a958:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
2000a95a:	8a3b      	ldrh	r3, [r7, #16]
2000a95c:	021b      	lsls	r3, r3, #8
2000a95e:	b21a      	sxth	r2, r3
2000a960:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
2000a964:	4313      	orrs	r3, r2
2000a966:	b21b      	sxth	r3, r3
2000a968:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
2000a96a:	89fb      	ldrh	r3, [r7, #14]
}
2000a96c:	4618      	mov	r0, r3
2000a96e:	371c      	adds	r7, #28
2000a970:	46bd      	mov	sp, r7
2000a972:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a976:	4770      	bx	lr

2000a978 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000a978:	b580      	push	{r7, lr}
2000a97a:	b084      	sub	sp, #16
2000a97c:	af00      	add	r7, sp, #0
2000a97e:	6078      	str	r0, [r7, #4]
2000a980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000a982:	2300      	movs	r3, #0
2000a984:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000a986:	683b      	ldr	r3, [r7, #0]
2000a988:	781b      	ldrb	r3, [r3, #0]
2000a98a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000a98e:	2b40      	cmp	r3, #64	@ 0x40
2000a990:	d005      	beq.n	2000a99e <USBD_StdDevReq+0x26>
2000a992:	2b40      	cmp	r3, #64	@ 0x40
2000a994:	d857      	bhi.n	2000aa46 <USBD_StdDevReq+0xce>
2000a996:	2b00      	cmp	r3, #0
2000a998:	d00f      	beq.n	2000a9ba <USBD_StdDevReq+0x42>
2000a99a:	2b20      	cmp	r3, #32
2000a99c:	d153      	bne.n	2000aa46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
2000a99e:	687b      	ldr	r3, [r7, #4]
2000a9a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a9a4:	687b      	ldr	r3, [r7, #4]
2000a9a6:	32ae      	adds	r2, #174	@ 0xae
2000a9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a9ac:	689b      	ldr	r3, [r3, #8]
2000a9ae:	6839      	ldr	r1, [r7, #0]
2000a9b0:	6878      	ldr	r0, [r7, #4]
2000a9b2:	4798      	blx	r3
2000a9b4:	4603      	mov	r3, r0
2000a9b6:	73fb      	strb	r3, [r7, #15]
      break;
2000a9b8:	e04a      	b.n	2000aa50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000a9ba:	683b      	ldr	r3, [r7, #0]
2000a9bc:	785b      	ldrb	r3, [r3, #1]
2000a9be:	2b09      	cmp	r3, #9
2000a9c0:	d83b      	bhi.n	2000aa3a <USBD_StdDevReq+0xc2>
2000a9c2:	a201      	add	r2, pc, #4	@ (adr r2, 2000a9c8 <USBD_StdDevReq+0x50>)
2000a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000a9c8:	2000aa1d 	.word	0x2000aa1d
2000a9cc:	2000aa31 	.word	0x2000aa31
2000a9d0:	2000aa3b 	.word	0x2000aa3b
2000a9d4:	2000aa27 	.word	0x2000aa27
2000a9d8:	2000aa3b 	.word	0x2000aa3b
2000a9dc:	2000a9fb 	.word	0x2000a9fb
2000a9e0:	2000a9f1 	.word	0x2000a9f1
2000a9e4:	2000aa3b 	.word	0x2000aa3b
2000a9e8:	2000aa13 	.word	0x2000aa13
2000a9ec:	2000aa05 	.word	0x2000aa05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
2000a9f0:	6839      	ldr	r1, [r7, #0]
2000a9f2:	6878      	ldr	r0, [r7, #4]
2000a9f4:	f000 fa3e 	bl	2000ae74 <USBD_GetDescriptor>
          break;
2000a9f8:	e024      	b.n	2000aa44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
2000a9fa:	6839      	ldr	r1, [r7, #0]
2000a9fc:	6878      	ldr	r0, [r7, #4]
2000a9fe:	f000 fbcd 	bl	2000b19c <USBD_SetAddress>
          break;
2000aa02:	e01f      	b.n	2000aa44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
2000aa04:	6839      	ldr	r1, [r7, #0]
2000aa06:	6878      	ldr	r0, [r7, #4]
2000aa08:	f000 fc0c 	bl	2000b224 <USBD_SetConfig>
2000aa0c:	4603      	mov	r3, r0
2000aa0e:	73fb      	strb	r3, [r7, #15]
          break;
2000aa10:	e018      	b.n	2000aa44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
2000aa12:	6839      	ldr	r1, [r7, #0]
2000aa14:	6878      	ldr	r0, [r7, #4]
2000aa16:	f000 fcaf 	bl	2000b378 <USBD_GetConfig>
          break;
2000aa1a:	e013      	b.n	2000aa44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
2000aa1c:	6839      	ldr	r1, [r7, #0]
2000aa1e:	6878      	ldr	r0, [r7, #4]
2000aa20:	f000 fce0 	bl	2000b3e4 <USBD_GetStatus>
          break;
2000aa24:	e00e      	b.n	2000aa44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
2000aa26:	6839      	ldr	r1, [r7, #0]
2000aa28:	6878      	ldr	r0, [r7, #4]
2000aa2a:	f000 fd0f 	bl	2000b44c <USBD_SetFeature>
          break;
2000aa2e:	e009      	b.n	2000aa44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
2000aa30:	6839      	ldr	r1, [r7, #0]
2000aa32:	6878      	ldr	r0, [r7, #4]
2000aa34:	f000 fd33 	bl	2000b49e <USBD_ClrFeature>
          break;
2000aa38:	e004      	b.n	2000aa44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
2000aa3a:	6839      	ldr	r1, [r7, #0]
2000aa3c:	6878      	ldr	r0, [r7, #4]
2000aa3e:	f000 fd8a 	bl	2000b556 <USBD_CtlError>
          break;
2000aa42:	bf00      	nop
      }
      break;
2000aa44:	e004      	b.n	2000aa50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
2000aa46:	6839      	ldr	r1, [r7, #0]
2000aa48:	6878      	ldr	r0, [r7, #4]
2000aa4a:	f000 fd84 	bl	2000b556 <USBD_CtlError>
      break;
2000aa4e:	bf00      	nop
  }

  return ret;
2000aa50:	7bfb      	ldrb	r3, [r7, #15]
}
2000aa52:	4618      	mov	r0, r3
2000aa54:	3710      	adds	r7, #16
2000aa56:	46bd      	mov	sp, r7
2000aa58:	bd80      	pop	{r7, pc}
2000aa5a:	bf00      	nop

2000aa5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000aa5c:	b580      	push	{r7, lr}
2000aa5e:	b084      	sub	sp, #16
2000aa60:	af00      	add	r7, sp, #0
2000aa62:	6078      	str	r0, [r7, #4]
2000aa64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000aa66:	2300      	movs	r3, #0
2000aa68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000aa6a:	683b      	ldr	r3, [r7, #0]
2000aa6c:	781b      	ldrb	r3, [r3, #0]
2000aa6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000aa72:	2b40      	cmp	r3, #64	@ 0x40
2000aa74:	d005      	beq.n	2000aa82 <USBD_StdItfReq+0x26>
2000aa76:	2b40      	cmp	r3, #64	@ 0x40
2000aa78:	d852      	bhi.n	2000ab20 <USBD_StdItfReq+0xc4>
2000aa7a:	2b00      	cmp	r3, #0
2000aa7c:	d001      	beq.n	2000aa82 <USBD_StdItfReq+0x26>
2000aa7e:	2b20      	cmp	r3, #32
2000aa80:	d14e      	bne.n	2000ab20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
2000aa82:	687b      	ldr	r3, [r7, #4]
2000aa84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000aa88:	b2db      	uxtb	r3, r3
2000aa8a:	3b01      	subs	r3, #1
2000aa8c:	2b02      	cmp	r3, #2
2000aa8e:	d840      	bhi.n	2000ab12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
2000aa90:	683b      	ldr	r3, [r7, #0]
2000aa92:	889b      	ldrh	r3, [r3, #4]
2000aa94:	b2db      	uxtb	r3, r3
2000aa96:	2b01      	cmp	r3, #1
2000aa98:	d836      	bhi.n	2000ab08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
2000aa9a:	683b      	ldr	r3, [r7, #0]
2000aa9c:	889b      	ldrh	r3, [r3, #4]
2000aa9e:	b2db      	uxtb	r3, r3
2000aaa0:	4619      	mov	r1, r3
2000aaa2:	6878      	ldr	r0, [r7, #4]
2000aaa4:	f7ff fedc 	bl	2000a860 <USBD_CoreFindIF>
2000aaa8:	4603      	mov	r3, r0
2000aaaa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000aaac:	7bbb      	ldrb	r3, [r7, #14]
2000aaae:	2bff      	cmp	r3, #255	@ 0xff
2000aab0:	d01d      	beq.n	2000aaee <USBD_StdItfReq+0x92>
2000aab2:	7bbb      	ldrb	r3, [r7, #14]
2000aab4:	2b00      	cmp	r3, #0
2000aab6:	d11a      	bne.n	2000aaee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
2000aab8:	7bba      	ldrb	r2, [r7, #14]
2000aaba:	687b      	ldr	r3, [r7, #4]
2000aabc:	32ae      	adds	r2, #174	@ 0xae
2000aabe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000aac2:	689b      	ldr	r3, [r3, #8]
2000aac4:	2b00      	cmp	r3, #0
2000aac6:	d00f      	beq.n	2000aae8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
2000aac8:	7bba      	ldrb	r2, [r7, #14]
2000aaca:	687b      	ldr	r3, [r7, #4]
2000aacc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000aad0:	7bba      	ldrb	r2, [r7, #14]
2000aad2:	687b      	ldr	r3, [r7, #4]
2000aad4:	32ae      	adds	r2, #174	@ 0xae
2000aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000aada:	689b      	ldr	r3, [r3, #8]
2000aadc:	6839      	ldr	r1, [r7, #0]
2000aade:	6878      	ldr	r0, [r7, #4]
2000aae0:	4798      	blx	r3
2000aae2:	4603      	mov	r3, r0
2000aae4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000aae6:	e004      	b.n	2000aaf2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
2000aae8:	2303      	movs	r3, #3
2000aaea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000aaec:	e001      	b.n	2000aaf2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
2000aaee:	2303      	movs	r3, #3
2000aaf0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
2000aaf2:	683b      	ldr	r3, [r7, #0]
2000aaf4:	88db      	ldrh	r3, [r3, #6]
2000aaf6:	2b00      	cmp	r3, #0
2000aaf8:	d110      	bne.n	2000ab1c <USBD_StdItfReq+0xc0>
2000aafa:	7bfb      	ldrb	r3, [r7, #15]
2000aafc:	2b00      	cmp	r3, #0
2000aafe:	d10d      	bne.n	2000ab1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
2000ab00:	6878      	ldr	r0, [r7, #4]
2000ab02:	f000 fe06 	bl	2000b712 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
2000ab06:	e009      	b.n	2000ab1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
2000ab08:	6839      	ldr	r1, [r7, #0]
2000ab0a:	6878      	ldr	r0, [r7, #4]
2000ab0c:	f000 fd23 	bl	2000b556 <USBD_CtlError>
          break;
2000ab10:	e004      	b.n	2000ab1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
2000ab12:	6839      	ldr	r1, [r7, #0]
2000ab14:	6878      	ldr	r0, [r7, #4]
2000ab16:	f000 fd1e 	bl	2000b556 <USBD_CtlError>
          break;
2000ab1a:	e000      	b.n	2000ab1e <USBD_StdItfReq+0xc2>
          break;
2000ab1c:	bf00      	nop
      }
      break;
2000ab1e:	e004      	b.n	2000ab2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
2000ab20:	6839      	ldr	r1, [r7, #0]
2000ab22:	6878      	ldr	r0, [r7, #4]
2000ab24:	f000 fd17 	bl	2000b556 <USBD_CtlError>
      break;
2000ab28:	bf00      	nop
  }

  return ret;
2000ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
2000ab2c:	4618      	mov	r0, r3
2000ab2e:	3710      	adds	r7, #16
2000ab30:	46bd      	mov	sp, r7
2000ab32:	bd80      	pop	{r7, pc}

2000ab34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000ab34:	b580      	push	{r7, lr}
2000ab36:	b084      	sub	sp, #16
2000ab38:	af00      	add	r7, sp, #0
2000ab3a:	6078      	str	r0, [r7, #4]
2000ab3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
2000ab3e:	2300      	movs	r3, #0
2000ab40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
2000ab42:	683b      	ldr	r3, [r7, #0]
2000ab44:	889b      	ldrh	r3, [r3, #4]
2000ab46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000ab48:	683b      	ldr	r3, [r7, #0]
2000ab4a:	781b      	ldrb	r3, [r3, #0]
2000ab4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000ab50:	2b40      	cmp	r3, #64	@ 0x40
2000ab52:	d007      	beq.n	2000ab64 <USBD_StdEPReq+0x30>
2000ab54:	2b40      	cmp	r3, #64	@ 0x40
2000ab56:	f200 8181 	bhi.w	2000ae5c <USBD_StdEPReq+0x328>
2000ab5a:	2b00      	cmp	r3, #0
2000ab5c:	d02a      	beq.n	2000abb4 <USBD_StdEPReq+0x80>
2000ab5e:	2b20      	cmp	r3, #32
2000ab60:	f040 817c 	bne.w	2000ae5c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
2000ab64:	7bbb      	ldrb	r3, [r7, #14]
2000ab66:	4619      	mov	r1, r3
2000ab68:	6878      	ldr	r0, [r7, #4]
2000ab6a:	f7ff fe86 	bl	2000a87a <USBD_CoreFindEP>
2000ab6e:	4603      	mov	r3, r0
2000ab70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000ab72:	7b7b      	ldrb	r3, [r7, #13]
2000ab74:	2bff      	cmp	r3, #255	@ 0xff
2000ab76:	f000 8176 	beq.w	2000ae66 <USBD_StdEPReq+0x332>
2000ab7a:	7b7b      	ldrb	r3, [r7, #13]
2000ab7c:	2b00      	cmp	r3, #0
2000ab7e:	f040 8172 	bne.w	2000ae66 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
2000ab82:	7b7a      	ldrb	r2, [r7, #13]
2000ab84:	687b      	ldr	r3, [r7, #4]
2000ab86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
2000ab8a:	7b7a      	ldrb	r2, [r7, #13]
2000ab8c:	687b      	ldr	r3, [r7, #4]
2000ab8e:	32ae      	adds	r2, #174	@ 0xae
2000ab90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ab94:	689b      	ldr	r3, [r3, #8]
2000ab96:	2b00      	cmp	r3, #0
2000ab98:	f000 8165 	beq.w	2000ae66 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
2000ab9c:	7b7a      	ldrb	r2, [r7, #13]
2000ab9e:	687b      	ldr	r3, [r7, #4]
2000aba0:	32ae      	adds	r2, #174	@ 0xae
2000aba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000aba6:	689b      	ldr	r3, [r3, #8]
2000aba8:	6839      	ldr	r1, [r7, #0]
2000abaa:	6878      	ldr	r0, [r7, #4]
2000abac:	4798      	blx	r3
2000abae:	4603      	mov	r3, r0
2000abb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
2000abb2:	e158      	b.n	2000ae66 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000abb4:	683b      	ldr	r3, [r7, #0]
2000abb6:	785b      	ldrb	r3, [r3, #1]
2000abb8:	2b03      	cmp	r3, #3
2000abba:	d008      	beq.n	2000abce <USBD_StdEPReq+0x9a>
2000abbc:	2b03      	cmp	r3, #3
2000abbe:	f300 8147 	bgt.w	2000ae50 <USBD_StdEPReq+0x31c>
2000abc2:	2b00      	cmp	r3, #0
2000abc4:	f000 809b 	beq.w	2000acfe <USBD_StdEPReq+0x1ca>
2000abc8:	2b01      	cmp	r3, #1
2000abca:	d03c      	beq.n	2000ac46 <USBD_StdEPReq+0x112>
2000abcc:	e140      	b.n	2000ae50 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
2000abce:	687b      	ldr	r3, [r7, #4]
2000abd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000abd4:	b2db      	uxtb	r3, r3
2000abd6:	2b02      	cmp	r3, #2
2000abd8:	d002      	beq.n	2000abe0 <USBD_StdEPReq+0xac>
2000abda:	2b03      	cmp	r3, #3
2000abdc:	d016      	beq.n	2000ac0c <USBD_StdEPReq+0xd8>
2000abde:	e02c      	b.n	2000ac3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000abe0:	7bbb      	ldrb	r3, [r7, #14]
2000abe2:	2b00      	cmp	r3, #0
2000abe4:	d00d      	beq.n	2000ac02 <USBD_StdEPReq+0xce>
2000abe6:	7bbb      	ldrb	r3, [r7, #14]
2000abe8:	2b80      	cmp	r3, #128	@ 0x80
2000abea:	d00a      	beq.n	2000ac02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000abec:	7bbb      	ldrb	r3, [r7, #14]
2000abee:	4619      	mov	r1, r3
2000abf0:	6878      	ldr	r0, [r7, #4]
2000abf2:	f001 f94f 	bl	2000be94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000abf6:	2180      	movs	r1, #128	@ 0x80
2000abf8:	6878      	ldr	r0, [r7, #4]
2000abfa:	f001 f94b 	bl	2000be94 <USBD_LL_StallEP>
2000abfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000ac00:	e020      	b.n	2000ac44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
2000ac02:	6839      	ldr	r1, [r7, #0]
2000ac04:	6878      	ldr	r0, [r7, #4]
2000ac06:	f000 fca6 	bl	2000b556 <USBD_CtlError>
              break;
2000ac0a:	e01b      	b.n	2000ac44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000ac0c:	683b      	ldr	r3, [r7, #0]
2000ac0e:	885b      	ldrh	r3, [r3, #2]
2000ac10:	2b00      	cmp	r3, #0
2000ac12:	d10e      	bne.n	2000ac32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
2000ac14:	7bbb      	ldrb	r3, [r7, #14]
2000ac16:	2b00      	cmp	r3, #0
2000ac18:	d00b      	beq.n	2000ac32 <USBD_StdEPReq+0xfe>
2000ac1a:	7bbb      	ldrb	r3, [r7, #14]
2000ac1c:	2b80      	cmp	r3, #128	@ 0x80
2000ac1e:	d008      	beq.n	2000ac32 <USBD_StdEPReq+0xfe>
2000ac20:	683b      	ldr	r3, [r7, #0]
2000ac22:	88db      	ldrh	r3, [r3, #6]
2000ac24:	2b00      	cmp	r3, #0
2000ac26:	d104      	bne.n	2000ac32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
2000ac28:	7bbb      	ldrb	r3, [r7, #14]
2000ac2a:	4619      	mov	r1, r3
2000ac2c:	6878      	ldr	r0, [r7, #4]
2000ac2e:	f001 f931 	bl	2000be94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
2000ac32:	6878      	ldr	r0, [r7, #4]
2000ac34:	f000 fd6d 	bl	2000b712 <USBD_CtlSendStatus>

              break;
2000ac38:	e004      	b.n	2000ac44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
2000ac3a:	6839      	ldr	r1, [r7, #0]
2000ac3c:	6878      	ldr	r0, [r7, #4]
2000ac3e:	f000 fc8a 	bl	2000b556 <USBD_CtlError>
              break;
2000ac42:	bf00      	nop
          }
          break;
2000ac44:	e109      	b.n	2000ae5a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
2000ac46:	687b      	ldr	r3, [r7, #4]
2000ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000ac4c:	b2db      	uxtb	r3, r3
2000ac4e:	2b02      	cmp	r3, #2
2000ac50:	d002      	beq.n	2000ac58 <USBD_StdEPReq+0x124>
2000ac52:	2b03      	cmp	r3, #3
2000ac54:	d016      	beq.n	2000ac84 <USBD_StdEPReq+0x150>
2000ac56:	e04b      	b.n	2000acf0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000ac58:	7bbb      	ldrb	r3, [r7, #14]
2000ac5a:	2b00      	cmp	r3, #0
2000ac5c:	d00d      	beq.n	2000ac7a <USBD_StdEPReq+0x146>
2000ac5e:	7bbb      	ldrb	r3, [r7, #14]
2000ac60:	2b80      	cmp	r3, #128	@ 0x80
2000ac62:	d00a      	beq.n	2000ac7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000ac64:	7bbb      	ldrb	r3, [r7, #14]
2000ac66:	4619      	mov	r1, r3
2000ac68:	6878      	ldr	r0, [r7, #4]
2000ac6a:	f001 f913 	bl	2000be94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000ac6e:	2180      	movs	r1, #128	@ 0x80
2000ac70:	6878      	ldr	r0, [r7, #4]
2000ac72:	f001 f90f 	bl	2000be94 <USBD_LL_StallEP>
2000ac76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000ac78:	e040      	b.n	2000acfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
2000ac7a:	6839      	ldr	r1, [r7, #0]
2000ac7c:	6878      	ldr	r0, [r7, #4]
2000ac7e:	f000 fc6a 	bl	2000b556 <USBD_CtlError>
              break;
2000ac82:	e03b      	b.n	2000acfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000ac84:	683b      	ldr	r3, [r7, #0]
2000ac86:	885b      	ldrh	r3, [r3, #2]
2000ac88:	2b00      	cmp	r3, #0
2000ac8a:	d136      	bne.n	2000acfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
2000ac8c:	7bbb      	ldrb	r3, [r7, #14]
2000ac8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000ac92:	2b00      	cmp	r3, #0
2000ac94:	d004      	beq.n	2000aca0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
2000ac96:	7bbb      	ldrb	r3, [r7, #14]
2000ac98:	4619      	mov	r1, r3
2000ac9a:	6878      	ldr	r0, [r7, #4]
2000ac9c:	f001 f919 	bl	2000bed2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
2000aca0:	6878      	ldr	r0, [r7, #4]
2000aca2:	f000 fd36 	bl	2000b712 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
2000aca6:	7bbb      	ldrb	r3, [r7, #14]
2000aca8:	4619      	mov	r1, r3
2000acaa:	6878      	ldr	r0, [r7, #4]
2000acac:	f7ff fde5 	bl	2000a87a <USBD_CoreFindEP>
2000acb0:	4603      	mov	r3, r0
2000acb2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000acb4:	7b7b      	ldrb	r3, [r7, #13]
2000acb6:	2bff      	cmp	r3, #255	@ 0xff
2000acb8:	d01f      	beq.n	2000acfa <USBD_StdEPReq+0x1c6>
2000acba:	7b7b      	ldrb	r3, [r7, #13]
2000acbc:	2b00      	cmp	r3, #0
2000acbe:	d11c      	bne.n	2000acfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
2000acc0:	7b7a      	ldrb	r2, [r7, #13]
2000acc2:	687b      	ldr	r3, [r7, #4]
2000acc4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
2000acc8:	7b7a      	ldrb	r2, [r7, #13]
2000acca:	687b      	ldr	r3, [r7, #4]
2000accc:	32ae      	adds	r2, #174	@ 0xae
2000acce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000acd2:	689b      	ldr	r3, [r3, #8]
2000acd4:	2b00      	cmp	r3, #0
2000acd6:	d010      	beq.n	2000acfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000acd8:	7b7a      	ldrb	r2, [r7, #13]
2000acda:	687b      	ldr	r3, [r7, #4]
2000acdc:	32ae      	adds	r2, #174	@ 0xae
2000acde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ace2:	689b      	ldr	r3, [r3, #8]
2000ace4:	6839      	ldr	r1, [r7, #0]
2000ace6:	6878      	ldr	r0, [r7, #4]
2000ace8:	4798      	blx	r3
2000acea:	4603      	mov	r3, r0
2000acec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
2000acee:	e004      	b.n	2000acfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
2000acf0:	6839      	ldr	r1, [r7, #0]
2000acf2:	6878      	ldr	r0, [r7, #4]
2000acf4:	f000 fc2f 	bl	2000b556 <USBD_CtlError>
              break;
2000acf8:	e000      	b.n	2000acfc <USBD_StdEPReq+0x1c8>
              break;
2000acfa:	bf00      	nop
          }
          break;
2000acfc:	e0ad      	b.n	2000ae5a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
2000acfe:	687b      	ldr	r3, [r7, #4]
2000ad00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000ad04:	b2db      	uxtb	r3, r3
2000ad06:	2b02      	cmp	r3, #2
2000ad08:	d002      	beq.n	2000ad10 <USBD_StdEPReq+0x1dc>
2000ad0a:	2b03      	cmp	r3, #3
2000ad0c:	d033      	beq.n	2000ad76 <USBD_StdEPReq+0x242>
2000ad0e:	e099      	b.n	2000ae44 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000ad10:	7bbb      	ldrb	r3, [r7, #14]
2000ad12:	2b00      	cmp	r3, #0
2000ad14:	d007      	beq.n	2000ad26 <USBD_StdEPReq+0x1f2>
2000ad16:	7bbb      	ldrb	r3, [r7, #14]
2000ad18:	2b80      	cmp	r3, #128	@ 0x80
2000ad1a:	d004      	beq.n	2000ad26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
2000ad1c:	6839      	ldr	r1, [r7, #0]
2000ad1e:	6878      	ldr	r0, [r7, #4]
2000ad20:	f000 fc19 	bl	2000b556 <USBD_CtlError>
                break;
2000ad24:	e093      	b.n	2000ae4e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000ad26:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000ad2a:	2b00      	cmp	r3, #0
2000ad2c:	da0b      	bge.n	2000ad46 <USBD_StdEPReq+0x212>
2000ad2e:	7bbb      	ldrb	r3, [r7, #14]
2000ad30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000ad34:	4613      	mov	r3, r2
2000ad36:	009b      	lsls	r3, r3, #2
2000ad38:	4413      	add	r3, r2
2000ad3a:	009b      	lsls	r3, r3, #2
2000ad3c:	3310      	adds	r3, #16
2000ad3e:	687a      	ldr	r2, [r7, #4]
2000ad40:	4413      	add	r3, r2
2000ad42:	3304      	adds	r3, #4
2000ad44:	e00b      	b.n	2000ad5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000ad46:	7bbb      	ldrb	r3, [r7, #14]
2000ad48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000ad4c:	4613      	mov	r3, r2
2000ad4e:	009b      	lsls	r3, r3, #2
2000ad50:	4413      	add	r3, r2
2000ad52:	009b      	lsls	r3, r3, #2
2000ad54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000ad58:	687a      	ldr	r2, [r7, #4]
2000ad5a:	4413      	add	r3, r2
2000ad5c:	3304      	adds	r3, #4
2000ad5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
2000ad60:	68bb      	ldr	r3, [r7, #8]
2000ad62:	2200      	movs	r2, #0
2000ad64:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000ad66:	68bb      	ldr	r3, [r7, #8]
2000ad68:	330e      	adds	r3, #14
2000ad6a:	2202      	movs	r2, #2
2000ad6c:	4619      	mov	r1, r3
2000ad6e:	6878      	ldr	r0, [r7, #4]
2000ad70:	f000 fc6e 	bl	2000b650 <USBD_CtlSendData>
              break;
2000ad74:	e06b      	b.n	2000ae4e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
2000ad76:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000ad7a:	2b00      	cmp	r3, #0
2000ad7c:	da11      	bge.n	2000ada2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
2000ad7e:	7bbb      	ldrb	r3, [r7, #14]
2000ad80:	f003 020f 	and.w	r2, r3, #15
2000ad84:	6879      	ldr	r1, [r7, #4]
2000ad86:	4613      	mov	r3, r2
2000ad88:	009b      	lsls	r3, r3, #2
2000ad8a:	4413      	add	r3, r2
2000ad8c:	009b      	lsls	r3, r3, #2
2000ad8e:	440b      	add	r3, r1
2000ad90:	3323      	adds	r3, #35	@ 0x23
2000ad92:	781b      	ldrb	r3, [r3, #0]
2000ad94:	2b00      	cmp	r3, #0
2000ad96:	d117      	bne.n	2000adc8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000ad98:	6839      	ldr	r1, [r7, #0]
2000ad9a:	6878      	ldr	r0, [r7, #4]
2000ad9c:	f000 fbdb 	bl	2000b556 <USBD_CtlError>
                  break;
2000ada0:	e055      	b.n	2000ae4e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
2000ada2:	7bbb      	ldrb	r3, [r7, #14]
2000ada4:	f003 020f 	and.w	r2, r3, #15
2000ada8:	6879      	ldr	r1, [r7, #4]
2000adaa:	4613      	mov	r3, r2
2000adac:	009b      	lsls	r3, r3, #2
2000adae:	4413      	add	r3, r2
2000adb0:	009b      	lsls	r3, r3, #2
2000adb2:	440b      	add	r3, r1
2000adb4:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000adb8:	781b      	ldrb	r3, [r3, #0]
2000adba:	2b00      	cmp	r3, #0
2000adbc:	d104      	bne.n	2000adc8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000adbe:	6839      	ldr	r1, [r7, #0]
2000adc0:	6878      	ldr	r0, [r7, #4]
2000adc2:	f000 fbc8 	bl	2000b556 <USBD_CtlError>
                  break;
2000adc6:	e042      	b.n	2000ae4e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000adc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000adcc:	2b00      	cmp	r3, #0
2000adce:	da0b      	bge.n	2000ade8 <USBD_StdEPReq+0x2b4>
2000add0:	7bbb      	ldrb	r3, [r7, #14]
2000add2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000add6:	4613      	mov	r3, r2
2000add8:	009b      	lsls	r3, r3, #2
2000adda:	4413      	add	r3, r2
2000addc:	009b      	lsls	r3, r3, #2
2000adde:	3310      	adds	r3, #16
2000ade0:	687a      	ldr	r2, [r7, #4]
2000ade2:	4413      	add	r3, r2
2000ade4:	3304      	adds	r3, #4
2000ade6:	e00b      	b.n	2000ae00 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000ade8:	7bbb      	ldrb	r3, [r7, #14]
2000adea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000adee:	4613      	mov	r3, r2
2000adf0:	009b      	lsls	r3, r3, #2
2000adf2:	4413      	add	r3, r2
2000adf4:	009b      	lsls	r3, r3, #2
2000adf6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000adfa:	687a      	ldr	r2, [r7, #4]
2000adfc:	4413      	add	r3, r2
2000adfe:	3304      	adds	r3, #4
2000ae00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
2000ae02:	7bbb      	ldrb	r3, [r7, #14]
2000ae04:	2b00      	cmp	r3, #0
2000ae06:	d002      	beq.n	2000ae0e <USBD_StdEPReq+0x2da>
2000ae08:	7bbb      	ldrb	r3, [r7, #14]
2000ae0a:	2b80      	cmp	r3, #128	@ 0x80
2000ae0c:	d103      	bne.n	2000ae16 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
2000ae0e:	68bb      	ldr	r3, [r7, #8]
2000ae10:	2200      	movs	r2, #0
2000ae12:	739a      	strb	r2, [r3, #14]
2000ae14:	e00e      	b.n	2000ae34 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
2000ae16:	7bbb      	ldrb	r3, [r7, #14]
2000ae18:	4619      	mov	r1, r3
2000ae1a:	6878      	ldr	r0, [r7, #4]
2000ae1c:	f001 f878 	bl	2000bf10 <USBD_LL_IsStallEP>
2000ae20:	4603      	mov	r3, r0
2000ae22:	2b00      	cmp	r3, #0
2000ae24:	d003      	beq.n	2000ae2e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
2000ae26:	68bb      	ldr	r3, [r7, #8]
2000ae28:	2201      	movs	r2, #1
2000ae2a:	739a      	strb	r2, [r3, #14]
2000ae2c:	e002      	b.n	2000ae34 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
2000ae2e:	68bb      	ldr	r3, [r7, #8]
2000ae30:	2200      	movs	r2, #0
2000ae32:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000ae34:	68bb      	ldr	r3, [r7, #8]
2000ae36:	330e      	adds	r3, #14
2000ae38:	2202      	movs	r2, #2
2000ae3a:	4619      	mov	r1, r3
2000ae3c:	6878      	ldr	r0, [r7, #4]
2000ae3e:	f000 fc07 	bl	2000b650 <USBD_CtlSendData>
              break;
2000ae42:	e004      	b.n	2000ae4e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
2000ae44:	6839      	ldr	r1, [r7, #0]
2000ae46:	6878      	ldr	r0, [r7, #4]
2000ae48:	f000 fb85 	bl	2000b556 <USBD_CtlError>
              break;
2000ae4c:	bf00      	nop
          }
          break;
2000ae4e:	e004      	b.n	2000ae5a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
2000ae50:	6839      	ldr	r1, [r7, #0]
2000ae52:	6878      	ldr	r0, [r7, #4]
2000ae54:	f000 fb7f 	bl	2000b556 <USBD_CtlError>
          break;
2000ae58:	bf00      	nop
      }
      break;
2000ae5a:	e005      	b.n	2000ae68 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
2000ae5c:	6839      	ldr	r1, [r7, #0]
2000ae5e:	6878      	ldr	r0, [r7, #4]
2000ae60:	f000 fb79 	bl	2000b556 <USBD_CtlError>
      break;
2000ae64:	e000      	b.n	2000ae68 <USBD_StdEPReq+0x334>
      break;
2000ae66:	bf00      	nop
  }

  return ret;
2000ae68:	7bfb      	ldrb	r3, [r7, #15]
}
2000ae6a:	4618      	mov	r0, r3
2000ae6c:	3710      	adds	r7, #16
2000ae6e:	46bd      	mov	sp, r7
2000ae70:	bd80      	pop	{r7, pc}
	...

2000ae74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000ae74:	b580      	push	{r7, lr}
2000ae76:	b084      	sub	sp, #16
2000ae78:	af00      	add	r7, sp, #0
2000ae7a:	6078      	str	r0, [r7, #4]
2000ae7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000ae7e:	2300      	movs	r3, #0
2000ae80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
2000ae82:	2300      	movs	r3, #0
2000ae84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
2000ae86:	2300      	movs	r3, #0
2000ae88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
2000ae8a:	683b      	ldr	r3, [r7, #0]
2000ae8c:	885b      	ldrh	r3, [r3, #2]
2000ae8e:	0a1b      	lsrs	r3, r3, #8
2000ae90:	b29b      	uxth	r3, r3
2000ae92:	3b01      	subs	r3, #1
2000ae94:	2b0e      	cmp	r3, #14
2000ae96:	f200 8152 	bhi.w	2000b13e <USBD_GetDescriptor+0x2ca>
2000ae9a:	a201      	add	r2, pc, #4	@ (adr r2, 2000aea0 <USBD_GetDescriptor+0x2c>)
2000ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000aea0:	2000af11 	.word	0x2000af11
2000aea4:	2000af29 	.word	0x2000af29
2000aea8:	2000af69 	.word	0x2000af69
2000aeac:	2000b13f 	.word	0x2000b13f
2000aeb0:	2000b13f 	.word	0x2000b13f
2000aeb4:	2000b0df 	.word	0x2000b0df
2000aeb8:	2000b10b 	.word	0x2000b10b
2000aebc:	2000b13f 	.word	0x2000b13f
2000aec0:	2000b13f 	.word	0x2000b13f
2000aec4:	2000b13f 	.word	0x2000b13f
2000aec8:	2000b13f 	.word	0x2000b13f
2000aecc:	2000b13f 	.word	0x2000b13f
2000aed0:	2000b13f 	.word	0x2000b13f
2000aed4:	2000b13f 	.word	0x2000b13f
2000aed8:	2000aedd 	.word	0x2000aedd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
2000aedc:	687b      	ldr	r3, [r7, #4]
2000aede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000aee2:	69db      	ldr	r3, [r3, #28]
2000aee4:	2b00      	cmp	r3, #0
2000aee6:	d00b      	beq.n	2000af00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
2000aee8:	687b      	ldr	r3, [r7, #4]
2000aeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000aeee:	69db      	ldr	r3, [r3, #28]
2000aef0:	687a      	ldr	r2, [r7, #4]
2000aef2:	7c12      	ldrb	r2, [r2, #16]
2000aef4:	f107 0108 	add.w	r1, r7, #8
2000aef8:	4610      	mov	r0, r2
2000aefa:	4798      	blx	r3
2000aefc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000aefe:	e126      	b.n	2000b14e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000af00:	6839      	ldr	r1, [r7, #0]
2000af02:	6878      	ldr	r0, [r7, #4]
2000af04:	f000 fb27 	bl	2000b556 <USBD_CtlError>
        err++;
2000af08:	7afb      	ldrb	r3, [r7, #11]
2000af0a:	3301      	adds	r3, #1
2000af0c:	72fb      	strb	r3, [r7, #11]
      break;
2000af0e:	e11e      	b.n	2000b14e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
2000af10:	687b      	ldr	r3, [r7, #4]
2000af12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000af16:	681b      	ldr	r3, [r3, #0]
2000af18:	687a      	ldr	r2, [r7, #4]
2000af1a:	7c12      	ldrb	r2, [r2, #16]
2000af1c:	f107 0108 	add.w	r1, r7, #8
2000af20:	4610      	mov	r0, r2
2000af22:	4798      	blx	r3
2000af24:	60f8      	str	r0, [r7, #12]
      break;
2000af26:	e112      	b.n	2000b14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000af28:	687b      	ldr	r3, [r7, #4]
2000af2a:	7c1b      	ldrb	r3, [r3, #16]
2000af2c:	2b00      	cmp	r3, #0
2000af2e:	d10d      	bne.n	2000af4c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
2000af30:	687b      	ldr	r3, [r7, #4]
2000af32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000af36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000af38:	f107 0208 	add.w	r2, r7, #8
2000af3c:	4610      	mov	r0, r2
2000af3e:	4798      	blx	r3
2000af40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000af42:	68fb      	ldr	r3, [r7, #12]
2000af44:	3301      	adds	r3, #1
2000af46:	2202      	movs	r2, #2
2000af48:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
2000af4a:	e100      	b.n	2000b14e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
2000af4c:	687b      	ldr	r3, [r7, #4]
2000af4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000af52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000af54:	f107 0208 	add.w	r2, r7, #8
2000af58:	4610      	mov	r0, r2
2000af5a:	4798      	blx	r3
2000af5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000af5e:	68fb      	ldr	r3, [r7, #12]
2000af60:	3301      	adds	r3, #1
2000af62:	2202      	movs	r2, #2
2000af64:	701a      	strb	r2, [r3, #0]
      break;
2000af66:	e0f2      	b.n	2000b14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
2000af68:	683b      	ldr	r3, [r7, #0]
2000af6a:	885b      	ldrh	r3, [r3, #2]
2000af6c:	b2db      	uxtb	r3, r3
2000af6e:	2b05      	cmp	r3, #5
2000af70:	f200 80ac 	bhi.w	2000b0cc <USBD_GetDescriptor+0x258>
2000af74:	a201      	add	r2, pc, #4	@ (adr r2, 2000af7c <USBD_GetDescriptor+0x108>)
2000af76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000af7a:	bf00      	nop
2000af7c:	2000af95 	.word	0x2000af95
2000af80:	2000afc9 	.word	0x2000afc9
2000af84:	2000affd 	.word	0x2000affd
2000af88:	2000b031 	.word	0x2000b031
2000af8c:	2000b065 	.word	0x2000b065
2000af90:	2000b099 	.word	0x2000b099
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
2000af94:	687b      	ldr	r3, [r7, #4]
2000af96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000af9a:	685b      	ldr	r3, [r3, #4]
2000af9c:	2b00      	cmp	r3, #0
2000af9e:	d00b      	beq.n	2000afb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
2000afa0:	687b      	ldr	r3, [r7, #4]
2000afa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000afa6:	685b      	ldr	r3, [r3, #4]
2000afa8:	687a      	ldr	r2, [r7, #4]
2000afaa:	7c12      	ldrb	r2, [r2, #16]
2000afac:	f107 0108 	add.w	r1, r7, #8
2000afb0:	4610      	mov	r0, r2
2000afb2:	4798      	blx	r3
2000afb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000afb6:	e091      	b.n	2000b0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000afb8:	6839      	ldr	r1, [r7, #0]
2000afba:	6878      	ldr	r0, [r7, #4]
2000afbc:	f000 facb 	bl	2000b556 <USBD_CtlError>
            err++;
2000afc0:	7afb      	ldrb	r3, [r7, #11]
2000afc2:	3301      	adds	r3, #1
2000afc4:	72fb      	strb	r3, [r7, #11]
          break;
2000afc6:	e089      	b.n	2000b0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
2000afc8:	687b      	ldr	r3, [r7, #4]
2000afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000afce:	689b      	ldr	r3, [r3, #8]
2000afd0:	2b00      	cmp	r3, #0
2000afd2:	d00b      	beq.n	2000afec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
2000afd4:	687b      	ldr	r3, [r7, #4]
2000afd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000afda:	689b      	ldr	r3, [r3, #8]
2000afdc:	687a      	ldr	r2, [r7, #4]
2000afde:	7c12      	ldrb	r2, [r2, #16]
2000afe0:	f107 0108 	add.w	r1, r7, #8
2000afe4:	4610      	mov	r0, r2
2000afe6:	4798      	blx	r3
2000afe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000afea:	e077      	b.n	2000b0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000afec:	6839      	ldr	r1, [r7, #0]
2000afee:	6878      	ldr	r0, [r7, #4]
2000aff0:	f000 fab1 	bl	2000b556 <USBD_CtlError>
            err++;
2000aff4:	7afb      	ldrb	r3, [r7, #11]
2000aff6:	3301      	adds	r3, #1
2000aff8:	72fb      	strb	r3, [r7, #11]
          break;
2000affa:	e06f      	b.n	2000b0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
2000affc:	687b      	ldr	r3, [r7, #4]
2000affe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b002:	68db      	ldr	r3, [r3, #12]
2000b004:	2b00      	cmp	r3, #0
2000b006:	d00b      	beq.n	2000b020 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
2000b008:	687b      	ldr	r3, [r7, #4]
2000b00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b00e:	68db      	ldr	r3, [r3, #12]
2000b010:	687a      	ldr	r2, [r7, #4]
2000b012:	7c12      	ldrb	r2, [r2, #16]
2000b014:	f107 0108 	add.w	r1, r7, #8
2000b018:	4610      	mov	r0, r2
2000b01a:	4798      	blx	r3
2000b01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000b01e:	e05d      	b.n	2000b0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000b020:	6839      	ldr	r1, [r7, #0]
2000b022:	6878      	ldr	r0, [r7, #4]
2000b024:	f000 fa97 	bl	2000b556 <USBD_CtlError>
            err++;
2000b028:	7afb      	ldrb	r3, [r7, #11]
2000b02a:	3301      	adds	r3, #1
2000b02c:	72fb      	strb	r3, [r7, #11]
          break;
2000b02e:	e055      	b.n	2000b0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
2000b030:	687b      	ldr	r3, [r7, #4]
2000b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b036:	691b      	ldr	r3, [r3, #16]
2000b038:	2b00      	cmp	r3, #0
2000b03a:	d00b      	beq.n	2000b054 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
2000b03c:	687b      	ldr	r3, [r7, #4]
2000b03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b042:	691b      	ldr	r3, [r3, #16]
2000b044:	687a      	ldr	r2, [r7, #4]
2000b046:	7c12      	ldrb	r2, [r2, #16]
2000b048:	f107 0108 	add.w	r1, r7, #8
2000b04c:	4610      	mov	r0, r2
2000b04e:	4798      	blx	r3
2000b050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000b052:	e043      	b.n	2000b0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000b054:	6839      	ldr	r1, [r7, #0]
2000b056:	6878      	ldr	r0, [r7, #4]
2000b058:	f000 fa7d 	bl	2000b556 <USBD_CtlError>
            err++;
2000b05c:	7afb      	ldrb	r3, [r7, #11]
2000b05e:	3301      	adds	r3, #1
2000b060:	72fb      	strb	r3, [r7, #11]
          break;
2000b062:	e03b      	b.n	2000b0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
2000b064:	687b      	ldr	r3, [r7, #4]
2000b066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b06a:	695b      	ldr	r3, [r3, #20]
2000b06c:	2b00      	cmp	r3, #0
2000b06e:	d00b      	beq.n	2000b088 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
2000b070:	687b      	ldr	r3, [r7, #4]
2000b072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b076:	695b      	ldr	r3, [r3, #20]
2000b078:	687a      	ldr	r2, [r7, #4]
2000b07a:	7c12      	ldrb	r2, [r2, #16]
2000b07c:	f107 0108 	add.w	r1, r7, #8
2000b080:	4610      	mov	r0, r2
2000b082:	4798      	blx	r3
2000b084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000b086:	e029      	b.n	2000b0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000b088:	6839      	ldr	r1, [r7, #0]
2000b08a:	6878      	ldr	r0, [r7, #4]
2000b08c:	f000 fa63 	bl	2000b556 <USBD_CtlError>
            err++;
2000b090:	7afb      	ldrb	r3, [r7, #11]
2000b092:	3301      	adds	r3, #1
2000b094:	72fb      	strb	r3, [r7, #11]
          break;
2000b096:	e021      	b.n	2000b0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
2000b098:	687b      	ldr	r3, [r7, #4]
2000b09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b09e:	699b      	ldr	r3, [r3, #24]
2000b0a0:	2b00      	cmp	r3, #0
2000b0a2:	d00b      	beq.n	2000b0bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
2000b0a4:	687b      	ldr	r3, [r7, #4]
2000b0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000b0aa:	699b      	ldr	r3, [r3, #24]
2000b0ac:	687a      	ldr	r2, [r7, #4]
2000b0ae:	7c12      	ldrb	r2, [r2, #16]
2000b0b0:	f107 0108 	add.w	r1, r7, #8
2000b0b4:	4610      	mov	r0, r2
2000b0b6:	4798      	blx	r3
2000b0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000b0ba:	e00f      	b.n	2000b0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000b0bc:	6839      	ldr	r1, [r7, #0]
2000b0be:	6878      	ldr	r0, [r7, #4]
2000b0c0:	f000 fa49 	bl	2000b556 <USBD_CtlError>
            err++;
2000b0c4:	7afb      	ldrb	r3, [r7, #11]
2000b0c6:	3301      	adds	r3, #1
2000b0c8:	72fb      	strb	r3, [r7, #11]
          break;
2000b0ca:	e007      	b.n	2000b0dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
2000b0cc:	6839      	ldr	r1, [r7, #0]
2000b0ce:	6878      	ldr	r0, [r7, #4]
2000b0d0:	f000 fa41 	bl	2000b556 <USBD_CtlError>
          err++;
2000b0d4:	7afb      	ldrb	r3, [r7, #11]
2000b0d6:	3301      	adds	r3, #1
2000b0d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
2000b0da:	bf00      	nop
      }
      break;
2000b0dc:	e037      	b.n	2000b14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000b0de:	687b      	ldr	r3, [r7, #4]
2000b0e0:	7c1b      	ldrb	r3, [r3, #16]
2000b0e2:	2b00      	cmp	r3, #0
2000b0e4:	d109      	bne.n	2000b0fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
2000b0e6:	687b      	ldr	r3, [r7, #4]
2000b0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000b0ee:	f107 0208 	add.w	r2, r7, #8
2000b0f2:	4610      	mov	r0, r2
2000b0f4:	4798      	blx	r3
2000b0f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000b0f8:	e029      	b.n	2000b14e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000b0fa:	6839      	ldr	r1, [r7, #0]
2000b0fc:	6878      	ldr	r0, [r7, #4]
2000b0fe:	f000 fa2a 	bl	2000b556 <USBD_CtlError>
        err++;
2000b102:	7afb      	ldrb	r3, [r7, #11]
2000b104:	3301      	adds	r3, #1
2000b106:	72fb      	strb	r3, [r7, #11]
      break;
2000b108:	e021      	b.n	2000b14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000b10a:	687b      	ldr	r3, [r7, #4]
2000b10c:	7c1b      	ldrb	r3, [r3, #16]
2000b10e:	2b00      	cmp	r3, #0
2000b110:	d10d      	bne.n	2000b12e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
2000b112:	687b      	ldr	r3, [r7, #4]
2000b114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000b11a:	f107 0208 	add.w	r2, r7, #8
2000b11e:	4610      	mov	r0, r2
2000b120:	4798      	blx	r3
2000b122:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
2000b124:	68fb      	ldr	r3, [r7, #12]
2000b126:	3301      	adds	r3, #1
2000b128:	2207      	movs	r2, #7
2000b12a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000b12c:	e00f      	b.n	2000b14e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000b12e:	6839      	ldr	r1, [r7, #0]
2000b130:	6878      	ldr	r0, [r7, #4]
2000b132:	f000 fa10 	bl	2000b556 <USBD_CtlError>
        err++;
2000b136:	7afb      	ldrb	r3, [r7, #11]
2000b138:	3301      	adds	r3, #1
2000b13a:	72fb      	strb	r3, [r7, #11]
      break;
2000b13c:	e007      	b.n	2000b14e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
2000b13e:	6839      	ldr	r1, [r7, #0]
2000b140:	6878      	ldr	r0, [r7, #4]
2000b142:	f000 fa08 	bl	2000b556 <USBD_CtlError>
      err++;
2000b146:	7afb      	ldrb	r3, [r7, #11]
2000b148:	3301      	adds	r3, #1
2000b14a:	72fb      	strb	r3, [r7, #11]
      break;
2000b14c:	bf00      	nop
  }

  if (err != 0U)
2000b14e:	7afb      	ldrb	r3, [r7, #11]
2000b150:	2b00      	cmp	r3, #0
2000b152:	d11e      	bne.n	2000b192 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
2000b154:	683b      	ldr	r3, [r7, #0]
2000b156:	88db      	ldrh	r3, [r3, #6]
2000b158:	2b00      	cmp	r3, #0
2000b15a:	d016      	beq.n	2000b18a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
2000b15c:	893b      	ldrh	r3, [r7, #8]
2000b15e:	2b00      	cmp	r3, #0
2000b160:	d00e      	beq.n	2000b180 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
2000b162:	683b      	ldr	r3, [r7, #0]
2000b164:	88da      	ldrh	r2, [r3, #6]
2000b166:	893b      	ldrh	r3, [r7, #8]
2000b168:	4293      	cmp	r3, r2
2000b16a:	bf28      	it	cs
2000b16c:	4613      	movcs	r3, r2
2000b16e:	b29b      	uxth	r3, r3
2000b170:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
2000b172:	893b      	ldrh	r3, [r7, #8]
2000b174:	461a      	mov	r2, r3
2000b176:	68f9      	ldr	r1, [r7, #12]
2000b178:	6878      	ldr	r0, [r7, #4]
2000b17a:	f000 fa69 	bl	2000b650 <USBD_CtlSendData>
2000b17e:	e009      	b.n	2000b194 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
2000b180:	6839      	ldr	r1, [r7, #0]
2000b182:	6878      	ldr	r0, [r7, #4]
2000b184:	f000 f9e7 	bl	2000b556 <USBD_CtlError>
2000b188:	e004      	b.n	2000b194 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
2000b18a:	6878      	ldr	r0, [r7, #4]
2000b18c:	f000 fac1 	bl	2000b712 <USBD_CtlSendStatus>
2000b190:	e000      	b.n	2000b194 <USBD_GetDescriptor+0x320>
    return;
2000b192:	bf00      	nop
  }
}
2000b194:	3710      	adds	r7, #16
2000b196:	46bd      	mov	sp, r7
2000b198:	bd80      	pop	{r7, pc}
2000b19a:	bf00      	nop

2000b19c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b19c:	b580      	push	{r7, lr}
2000b19e:	b084      	sub	sp, #16
2000b1a0:	af00      	add	r7, sp, #0
2000b1a2:	6078      	str	r0, [r7, #4]
2000b1a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
2000b1a6:	683b      	ldr	r3, [r7, #0]
2000b1a8:	889b      	ldrh	r3, [r3, #4]
2000b1aa:	2b00      	cmp	r3, #0
2000b1ac:	d131      	bne.n	2000b212 <USBD_SetAddress+0x76>
2000b1ae:	683b      	ldr	r3, [r7, #0]
2000b1b0:	88db      	ldrh	r3, [r3, #6]
2000b1b2:	2b00      	cmp	r3, #0
2000b1b4:	d12d      	bne.n	2000b212 <USBD_SetAddress+0x76>
2000b1b6:	683b      	ldr	r3, [r7, #0]
2000b1b8:	885b      	ldrh	r3, [r3, #2]
2000b1ba:	2b7f      	cmp	r3, #127	@ 0x7f
2000b1bc:	d829      	bhi.n	2000b212 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
2000b1be:	683b      	ldr	r3, [r7, #0]
2000b1c0:	885b      	ldrh	r3, [r3, #2]
2000b1c2:	b2db      	uxtb	r3, r3
2000b1c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000b1c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b1ca:	687b      	ldr	r3, [r7, #4]
2000b1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b1d0:	b2db      	uxtb	r3, r3
2000b1d2:	2b03      	cmp	r3, #3
2000b1d4:	d104      	bne.n	2000b1e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
2000b1d6:	6839      	ldr	r1, [r7, #0]
2000b1d8:	6878      	ldr	r0, [r7, #4]
2000b1da:	f000 f9bc 	bl	2000b556 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b1de:	e01d      	b.n	2000b21c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
2000b1e0:	687b      	ldr	r3, [r7, #4]
2000b1e2:	7bfa      	ldrb	r2, [r7, #15]
2000b1e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
2000b1e8:	7bfb      	ldrb	r3, [r7, #15]
2000b1ea:	4619      	mov	r1, r3
2000b1ec:	6878      	ldr	r0, [r7, #4]
2000b1ee:	f000 febb 	bl	2000bf68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
2000b1f2:	6878      	ldr	r0, [r7, #4]
2000b1f4:	f000 fa8d 	bl	2000b712 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
2000b1f8:	7bfb      	ldrb	r3, [r7, #15]
2000b1fa:	2b00      	cmp	r3, #0
2000b1fc:	d004      	beq.n	2000b208 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000b1fe:	687b      	ldr	r3, [r7, #4]
2000b200:	2202      	movs	r2, #2
2000b202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b206:	e009      	b.n	2000b21c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
2000b208:	687b      	ldr	r3, [r7, #4]
2000b20a:	2201      	movs	r2, #1
2000b20c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b210:	e004      	b.n	2000b21c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
2000b212:	6839      	ldr	r1, [r7, #0]
2000b214:	6878      	ldr	r0, [r7, #4]
2000b216:	f000 f99e 	bl	2000b556 <USBD_CtlError>
  }
}
2000b21a:	bf00      	nop
2000b21c:	bf00      	nop
2000b21e:	3710      	adds	r7, #16
2000b220:	46bd      	mov	sp, r7
2000b222:	bd80      	pop	{r7, pc}

2000b224 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b224:	b580      	push	{r7, lr}
2000b226:	b084      	sub	sp, #16
2000b228:	af00      	add	r7, sp, #0
2000b22a:	6078      	str	r0, [r7, #4]
2000b22c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000b22e:	2300      	movs	r3, #0
2000b230:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
2000b232:	683b      	ldr	r3, [r7, #0]
2000b234:	885b      	ldrh	r3, [r3, #2]
2000b236:	b2da      	uxtb	r2, r3
2000b238:	4b4e      	ldr	r3, [pc, #312]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b23a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
2000b23c:	4b4d      	ldr	r3, [pc, #308]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b23e:	781b      	ldrb	r3, [r3, #0]
2000b240:	2b01      	cmp	r3, #1
2000b242:	d905      	bls.n	2000b250 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
2000b244:	6839      	ldr	r1, [r7, #0]
2000b246:	6878      	ldr	r0, [r7, #4]
2000b248:	f000 f985 	bl	2000b556 <USBD_CtlError>
    return USBD_FAIL;
2000b24c:	2303      	movs	r3, #3
2000b24e:	e08c      	b.n	2000b36a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
2000b250:	687b      	ldr	r3, [r7, #4]
2000b252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b256:	b2db      	uxtb	r3, r3
2000b258:	2b02      	cmp	r3, #2
2000b25a:	d002      	beq.n	2000b262 <USBD_SetConfig+0x3e>
2000b25c:	2b03      	cmp	r3, #3
2000b25e:	d029      	beq.n	2000b2b4 <USBD_SetConfig+0x90>
2000b260:	e075      	b.n	2000b34e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
2000b262:	4b44      	ldr	r3, [pc, #272]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b264:	781b      	ldrb	r3, [r3, #0]
2000b266:	2b00      	cmp	r3, #0
2000b268:	d020      	beq.n	2000b2ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
2000b26a:	4b42      	ldr	r3, [pc, #264]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b26c:	781b      	ldrb	r3, [r3, #0]
2000b26e:	461a      	mov	r2, r3
2000b270:	687b      	ldr	r3, [r7, #4]
2000b272:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
2000b274:	4b3f      	ldr	r3, [pc, #252]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b276:	781b      	ldrb	r3, [r3, #0]
2000b278:	4619      	mov	r1, r3
2000b27a:	6878      	ldr	r0, [r7, #4]
2000b27c:	f7fe ffa5 	bl	2000a1ca <USBD_SetClassConfig>
2000b280:	4603      	mov	r3, r0
2000b282:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
2000b284:	7bfb      	ldrb	r3, [r7, #15]
2000b286:	2b00      	cmp	r3, #0
2000b288:	d008      	beq.n	2000b29c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
2000b28a:	6839      	ldr	r1, [r7, #0]
2000b28c:	6878      	ldr	r0, [r7, #4]
2000b28e:	f000 f962 	bl	2000b556 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000b292:	687b      	ldr	r3, [r7, #4]
2000b294:	2202      	movs	r2, #2
2000b296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000b29a:	e065      	b.n	2000b368 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000b29c:	6878      	ldr	r0, [r7, #4]
2000b29e:	f000 fa38 	bl	2000b712 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
2000b2a2:	687b      	ldr	r3, [r7, #4]
2000b2a4:	2203      	movs	r2, #3
2000b2a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000b2aa:	e05d      	b.n	2000b368 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000b2ac:	6878      	ldr	r0, [r7, #4]
2000b2ae:	f000 fa30 	bl	2000b712 <USBD_CtlSendStatus>
      break;
2000b2b2:	e059      	b.n	2000b368 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
2000b2b4:	4b2f      	ldr	r3, [pc, #188]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b2b6:	781b      	ldrb	r3, [r3, #0]
2000b2b8:	2b00      	cmp	r3, #0
2000b2ba:	d112      	bne.n	2000b2e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000b2bc:	687b      	ldr	r3, [r7, #4]
2000b2be:	2202      	movs	r2, #2
2000b2c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
2000b2c4:	4b2b      	ldr	r3, [pc, #172]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b2c6:	781b      	ldrb	r3, [r3, #0]
2000b2c8:	461a      	mov	r2, r3
2000b2ca:	687b      	ldr	r3, [r7, #4]
2000b2cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
2000b2ce:	4b29      	ldr	r3, [pc, #164]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b2d0:	781b      	ldrb	r3, [r3, #0]
2000b2d2:	4619      	mov	r1, r3
2000b2d4:	6878      	ldr	r0, [r7, #4]
2000b2d6:	f7fe ff94 	bl	2000a202 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
2000b2da:	6878      	ldr	r0, [r7, #4]
2000b2dc:	f000 fa19 	bl	2000b712 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000b2e0:	e042      	b.n	2000b368 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
2000b2e2:	4b24      	ldr	r3, [pc, #144]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b2e4:	781b      	ldrb	r3, [r3, #0]
2000b2e6:	461a      	mov	r2, r3
2000b2e8:	687b      	ldr	r3, [r7, #4]
2000b2ea:	685b      	ldr	r3, [r3, #4]
2000b2ec:	429a      	cmp	r2, r3
2000b2ee:	d02a      	beq.n	2000b346 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000b2f0:	687b      	ldr	r3, [r7, #4]
2000b2f2:	685b      	ldr	r3, [r3, #4]
2000b2f4:	b2db      	uxtb	r3, r3
2000b2f6:	4619      	mov	r1, r3
2000b2f8:	6878      	ldr	r0, [r7, #4]
2000b2fa:	f7fe ff82 	bl	2000a202 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
2000b2fe:	4b1d      	ldr	r3, [pc, #116]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b300:	781b      	ldrb	r3, [r3, #0]
2000b302:	461a      	mov	r2, r3
2000b304:	687b      	ldr	r3, [r7, #4]
2000b306:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
2000b308:	4b1a      	ldr	r3, [pc, #104]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b30a:	781b      	ldrb	r3, [r3, #0]
2000b30c:	4619      	mov	r1, r3
2000b30e:	6878      	ldr	r0, [r7, #4]
2000b310:	f7fe ff5b 	bl	2000a1ca <USBD_SetClassConfig>
2000b314:	4603      	mov	r3, r0
2000b316:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
2000b318:	7bfb      	ldrb	r3, [r7, #15]
2000b31a:	2b00      	cmp	r3, #0
2000b31c:	d00f      	beq.n	2000b33e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
2000b31e:	6839      	ldr	r1, [r7, #0]
2000b320:	6878      	ldr	r0, [r7, #4]
2000b322:	f000 f918 	bl	2000b556 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000b326:	687b      	ldr	r3, [r7, #4]
2000b328:	685b      	ldr	r3, [r3, #4]
2000b32a:	b2db      	uxtb	r3, r3
2000b32c:	4619      	mov	r1, r3
2000b32e:	6878      	ldr	r0, [r7, #4]
2000b330:	f7fe ff67 	bl	2000a202 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000b334:	687b      	ldr	r3, [r7, #4]
2000b336:	2202      	movs	r2, #2
2000b338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000b33c:	e014      	b.n	2000b368 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000b33e:	6878      	ldr	r0, [r7, #4]
2000b340:	f000 f9e7 	bl	2000b712 <USBD_CtlSendStatus>
      break;
2000b344:	e010      	b.n	2000b368 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000b346:	6878      	ldr	r0, [r7, #4]
2000b348:	f000 f9e3 	bl	2000b712 <USBD_CtlSendStatus>
      break;
2000b34c:	e00c      	b.n	2000b368 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
2000b34e:	6839      	ldr	r1, [r7, #0]
2000b350:	6878      	ldr	r0, [r7, #4]
2000b352:	f000 f900 	bl	2000b556 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
2000b356:	4b07      	ldr	r3, [pc, #28]	@ (2000b374 <USBD_SetConfig+0x150>)
2000b358:	781b      	ldrb	r3, [r3, #0]
2000b35a:	4619      	mov	r1, r3
2000b35c:	6878      	ldr	r0, [r7, #4]
2000b35e:	f7fe ff50 	bl	2000a202 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
2000b362:	2303      	movs	r3, #3
2000b364:	73fb      	strb	r3, [r7, #15]
      break;
2000b366:	bf00      	nop
  }

  return ret;
2000b368:	7bfb      	ldrb	r3, [r7, #15]
}
2000b36a:	4618      	mov	r0, r3
2000b36c:	3710      	adds	r7, #16
2000b36e:	46bd      	mov	sp, r7
2000b370:	bd80      	pop	{r7, pc}
2000b372:	bf00      	nop
2000b374:	2000db1c 	.word	0x2000db1c

2000b378 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b378:	b580      	push	{r7, lr}
2000b37a:	b082      	sub	sp, #8
2000b37c:	af00      	add	r7, sp, #0
2000b37e:	6078      	str	r0, [r7, #4]
2000b380:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
2000b382:	683b      	ldr	r3, [r7, #0]
2000b384:	88db      	ldrh	r3, [r3, #6]
2000b386:	2b01      	cmp	r3, #1
2000b388:	d004      	beq.n	2000b394 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
2000b38a:	6839      	ldr	r1, [r7, #0]
2000b38c:	6878      	ldr	r0, [r7, #4]
2000b38e:	f000 f8e2 	bl	2000b556 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
2000b392:	e023      	b.n	2000b3dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
2000b394:	687b      	ldr	r3, [r7, #4]
2000b396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b39a:	b2db      	uxtb	r3, r3
2000b39c:	2b02      	cmp	r3, #2
2000b39e:	dc02      	bgt.n	2000b3a6 <USBD_GetConfig+0x2e>
2000b3a0:	2b00      	cmp	r3, #0
2000b3a2:	dc03      	bgt.n	2000b3ac <USBD_GetConfig+0x34>
2000b3a4:	e015      	b.n	2000b3d2 <USBD_GetConfig+0x5a>
2000b3a6:	2b03      	cmp	r3, #3
2000b3a8:	d00b      	beq.n	2000b3c2 <USBD_GetConfig+0x4a>
2000b3aa:	e012      	b.n	2000b3d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
2000b3ac:	687b      	ldr	r3, [r7, #4]
2000b3ae:	2200      	movs	r2, #0
2000b3b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
2000b3b2:	687b      	ldr	r3, [r7, #4]
2000b3b4:	3308      	adds	r3, #8
2000b3b6:	2201      	movs	r2, #1
2000b3b8:	4619      	mov	r1, r3
2000b3ba:	6878      	ldr	r0, [r7, #4]
2000b3bc:	f000 f948 	bl	2000b650 <USBD_CtlSendData>
        break;
2000b3c0:	e00c      	b.n	2000b3dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
2000b3c2:	687b      	ldr	r3, [r7, #4]
2000b3c4:	3304      	adds	r3, #4
2000b3c6:	2201      	movs	r2, #1
2000b3c8:	4619      	mov	r1, r3
2000b3ca:	6878      	ldr	r0, [r7, #4]
2000b3cc:	f000 f940 	bl	2000b650 <USBD_CtlSendData>
        break;
2000b3d0:	e004      	b.n	2000b3dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
2000b3d2:	6839      	ldr	r1, [r7, #0]
2000b3d4:	6878      	ldr	r0, [r7, #4]
2000b3d6:	f000 f8be 	bl	2000b556 <USBD_CtlError>
        break;
2000b3da:	bf00      	nop
}
2000b3dc:	bf00      	nop
2000b3de:	3708      	adds	r7, #8
2000b3e0:	46bd      	mov	sp, r7
2000b3e2:	bd80      	pop	{r7, pc}

2000b3e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b3e4:	b580      	push	{r7, lr}
2000b3e6:	b082      	sub	sp, #8
2000b3e8:	af00      	add	r7, sp, #0
2000b3ea:	6078      	str	r0, [r7, #4]
2000b3ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000b3ee:	687b      	ldr	r3, [r7, #4]
2000b3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b3f4:	b2db      	uxtb	r3, r3
2000b3f6:	3b01      	subs	r3, #1
2000b3f8:	2b02      	cmp	r3, #2
2000b3fa:	d81e      	bhi.n	2000b43a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
2000b3fc:	683b      	ldr	r3, [r7, #0]
2000b3fe:	88db      	ldrh	r3, [r3, #6]
2000b400:	2b02      	cmp	r3, #2
2000b402:	d004      	beq.n	2000b40e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
2000b404:	6839      	ldr	r1, [r7, #0]
2000b406:	6878      	ldr	r0, [r7, #4]
2000b408:	f000 f8a5 	bl	2000b556 <USBD_CtlError>
        break;
2000b40c:	e01a      	b.n	2000b444 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
2000b40e:	687b      	ldr	r3, [r7, #4]
2000b410:	2201      	movs	r2, #1
2000b412:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
2000b414:	687b      	ldr	r3, [r7, #4]
2000b416:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
2000b41a:	2b00      	cmp	r3, #0
2000b41c:	d005      	beq.n	2000b42a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
2000b41e:	687b      	ldr	r3, [r7, #4]
2000b420:	68db      	ldr	r3, [r3, #12]
2000b422:	f043 0202 	orr.w	r2, r3, #2
2000b426:	687b      	ldr	r3, [r7, #4]
2000b428:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
2000b42a:	687b      	ldr	r3, [r7, #4]
2000b42c:	330c      	adds	r3, #12
2000b42e:	2202      	movs	r2, #2
2000b430:	4619      	mov	r1, r3
2000b432:	6878      	ldr	r0, [r7, #4]
2000b434:	f000 f90c 	bl	2000b650 <USBD_CtlSendData>
      break;
2000b438:	e004      	b.n	2000b444 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
2000b43a:	6839      	ldr	r1, [r7, #0]
2000b43c:	6878      	ldr	r0, [r7, #4]
2000b43e:	f000 f88a 	bl	2000b556 <USBD_CtlError>
      break;
2000b442:	bf00      	nop
  }
}
2000b444:	bf00      	nop
2000b446:	3708      	adds	r7, #8
2000b448:	46bd      	mov	sp, r7
2000b44a:	bd80      	pop	{r7, pc}

2000b44c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b44c:	b580      	push	{r7, lr}
2000b44e:	b082      	sub	sp, #8
2000b450:	af00      	add	r7, sp, #0
2000b452:	6078      	str	r0, [r7, #4]
2000b454:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000b456:	683b      	ldr	r3, [r7, #0]
2000b458:	885b      	ldrh	r3, [r3, #2]
2000b45a:	2b01      	cmp	r3, #1
2000b45c:	d107      	bne.n	2000b46e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
2000b45e:	687b      	ldr	r3, [r7, #4]
2000b460:	2201      	movs	r2, #1
2000b462:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
2000b466:	6878      	ldr	r0, [r7, #4]
2000b468:	f000 f953 	bl	2000b712 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
2000b46c:	e013      	b.n	2000b496 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
2000b46e:	683b      	ldr	r3, [r7, #0]
2000b470:	885b      	ldrh	r3, [r3, #2]
2000b472:	2b02      	cmp	r3, #2
2000b474:	d10b      	bne.n	2000b48e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
2000b476:	683b      	ldr	r3, [r7, #0]
2000b478:	889b      	ldrh	r3, [r3, #4]
2000b47a:	0a1b      	lsrs	r3, r3, #8
2000b47c:	b29b      	uxth	r3, r3
2000b47e:	b2da      	uxtb	r2, r3
2000b480:	687b      	ldr	r3, [r7, #4]
2000b482:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
2000b486:	6878      	ldr	r0, [r7, #4]
2000b488:	f000 f943 	bl	2000b712 <USBD_CtlSendStatus>
}
2000b48c:	e003      	b.n	2000b496 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
2000b48e:	6839      	ldr	r1, [r7, #0]
2000b490:	6878      	ldr	r0, [r7, #4]
2000b492:	f000 f860 	bl	2000b556 <USBD_CtlError>
}
2000b496:	bf00      	nop
2000b498:	3708      	adds	r7, #8
2000b49a:	46bd      	mov	sp, r7
2000b49c:	bd80      	pop	{r7, pc}

2000b49e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b49e:	b580      	push	{r7, lr}
2000b4a0:	b082      	sub	sp, #8
2000b4a2:	af00      	add	r7, sp, #0
2000b4a4:	6078      	str	r0, [r7, #4]
2000b4a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000b4a8:	687b      	ldr	r3, [r7, #4]
2000b4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b4ae:	b2db      	uxtb	r3, r3
2000b4b0:	3b01      	subs	r3, #1
2000b4b2:	2b02      	cmp	r3, #2
2000b4b4:	d80b      	bhi.n	2000b4ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000b4b6:	683b      	ldr	r3, [r7, #0]
2000b4b8:	885b      	ldrh	r3, [r3, #2]
2000b4ba:	2b01      	cmp	r3, #1
2000b4bc:	d10c      	bne.n	2000b4d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
2000b4be:	687b      	ldr	r3, [r7, #4]
2000b4c0:	2200      	movs	r2, #0
2000b4c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
2000b4c6:	6878      	ldr	r0, [r7, #4]
2000b4c8:	f000 f923 	bl	2000b712 <USBD_CtlSendStatus>
      }
      break;
2000b4cc:	e004      	b.n	2000b4d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
2000b4ce:	6839      	ldr	r1, [r7, #0]
2000b4d0:	6878      	ldr	r0, [r7, #4]
2000b4d2:	f000 f840 	bl	2000b556 <USBD_CtlError>
      break;
2000b4d6:	e000      	b.n	2000b4da <USBD_ClrFeature+0x3c>
      break;
2000b4d8:	bf00      	nop
  }
}
2000b4da:	bf00      	nop
2000b4dc:	3708      	adds	r7, #8
2000b4de:	46bd      	mov	sp, r7
2000b4e0:	bd80      	pop	{r7, pc}

2000b4e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
2000b4e2:	b580      	push	{r7, lr}
2000b4e4:	b084      	sub	sp, #16
2000b4e6:	af00      	add	r7, sp, #0
2000b4e8:	6078      	str	r0, [r7, #4]
2000b4ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
2000b4ec:	683b      	ldr	r3, [r7, #0]
2000b4ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
2000b4f0:	68fb      	ldr	r3, [r7, #12]
2000b4f2:	781a      	ldrb	r2, [r3, #0]
2000b4f4:	687b      	ldr	r3, [r7, #4]
2000b4f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
2000b4f8:	68fb      	ldr	r3, [r7, #12]
2000b4fa:	3301      	adds	r3, #1
2000b4fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
2000b4fe:	68fb      	ldr	r3, [r7, #12]
2000b500:	781a      	ldrb	r2, [r3, #0]
2000b502:	687b      	ldr	r3, [r7, #4]
2000b504:	705a      	strb	r2, [r3, #1]

  pbuff++;
2000b506:	68fb      	ldr	r3, [r7, #12]
2000b508:	3301      	adds	r3, #1
2000b50a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
2000b50c:	68f8      	ldr	r0, [r7, #12]
2000b50e:	f7ff fa15 	bl	2000a93c <SWAPBYTE>
2000b512:	4603      	mov	r3, r0
2000b514:	461a      	mov	r2, r3
2000b516:	687b      	ldr	r3, [r7, #4]
2000b518:	805a      	strh	r2, [r3, #2]

  pbuff++;
2000b51a:	68fb      	ldr	r3, [r7, #12]
2000b51c:	3301      	adds	r3, #1
2000b51e:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000b520:	68fb      	ldr	r3, [r7, #12]
2000b522:	3301      	adds	r3, #1
2000b524:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
2000b526:	68f8      	ldr	r0, [r7, #12]
2000b528:	f7ff fa08 	bl	2000a93c <SWAPBYTE>
2000b52c:	4603      	mov	r3, r0
2000b52e:	461a      	mov	r2, r3
2000b530:	687b      	ldr	r3, [r7, #4]
2000b532:	809a      	strh	r2, [r3, #4]

  pbuff++;
2000b534:	68fb      	ldr	r3, [r7, #12]
2000b536:	3301      	adds	r3, #1
2000b538:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000b53a:	68fb      	ldr	r3, [r7, #12]
2000b53c:	3301      	adds	r3, #1
2000b53e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
2000b540:	68f8      	ldr	r0, [r7, #12]
2000b542:	f7ff f9fb 	bl	2000a93c <SWAPBYTE>
2000b546:	4603      	mov	r3, r0
2000b548:	461a      	mov	r2, r3
2000b54a:	687b      	ldr	r3, [r7, #4]
2000b54c:	80da      	strh	r2, [r3, #6]
}
2000b54e:	bf00      	nop
2000b550:	3710      	adds	r7, #16
2000b552:	46bd      	mov	sp, r7
2000b554:	bd80      	pop	{r7, pc}

2000b556 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b556:	b580      	push	{r7, lr}
2000b558:	b082      	sub	sp, #8
2000b55a:	af00      	add	r7, sp, #0
2000b55c:	6078      	str	r0, [r7, #4]
2000b55e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
2000b560:	2180      	movs	r1, #128	@ 0x80
2000b562:	6878      	ldr	r0, [r7, #4]
2000b564:	f000 fc96 	bl	2000be94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
2000b568:	2100      	movs	r1, #0
2000b56a:	6878      	ldr	r0, [r7, #4]
2000b56c:	f000 fc92 	bl	2000be94 <USBD_LL_StallEP>
}
2000b570:	bf00      	nop
2000b572:	3708      	adds	r7, #8
2000b574:	46bd      	mov	sp, r7
2000b576:	bd80      	pop	{r7, pc}

2000b578 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
2000b578:	b580      	push	{r7, lr}
2000b57a:	b086      	sub	sp, #24
2000b57c:	af00      	add	r7, sp, #0
2000b57e:	60f8      	str	r0, [r7, #12]
2000b580:	60b9      	str	r1, [r7, #8]
2000b582:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
2000b584:	2300      	movs	r3, #0
2000b586:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
2000b588:	68fb      	ldr	r3, [r7, #12]
2000b58a:	2b00      	cmp	r3, #0
2000b58c:	d042      	beq.n	2000b614 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
2000b58e:	68fb      	ldr	r3, [r7, #12]
2000b590:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
2000b592:	6938      	ldr	r0, [r7, #16]
2000b594:	f000 f842 	bl	2000b61c <USBD_GetLen>
2000b598:	4603      	mov	r3, r0
2000b59a:	3301      	adds	r3, #1
2000b59c:	005b      	lsls	r3, r3, #1
2000b59e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2000b5a2:	d808      	bhi.n	2000b5b6 <USBD_GetString+0x3e>
2000b5a4:	6938      	ldr	r0, [r7, #16]
2000b5a6:	f000 f839 	bl	2000b61c <USBD_GetLen>
2000b5aa:	4603      	mov	r3, r0
2000b5ac:	3301      	adds	r3, #1
2000b5ae:	b29b      	uxth	r3, r3
2000b5b0:	005b      	lsls	r3, r3, #1
2000b5b2:	b29a      	uxth	r2, r3
2000b5b4:	e001      	b.n	2000b5ba <USBD_GetString+0x42>
2000b5b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000b5ba:	687b      	ldr	r3, [r7, #4]
2000b5bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
2000b5be:	7dfb      	ldrb	r3, [r7, #23]
2000b5c0:	68ba      	ldr	r2, [r7, #8]
2000b5c2:	4413      	add	r3, r2
2000b5c4:	687a      	ldr	r2, [r7, #4]
2000b5c6:	7812      	ldrb	r2, [r2, #0]
2000b5c8:	701a      	strb	r2, [r3, #0]
  idx++;
2000b5ca:	7dfb      	ldrb	r3, [r7, #23]
2000b5cc:	3301      	adds	r3, #1
2000b5ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
2000b5d0:	7dfb      	ldrb	r3, [r7, #23]
2000b5d2:	68ba      	ldr	r2, [r7, #8]
2000b5d4:	4413      	add	r3, r2
2000b5d6:	2203      	movs	r2, #3
2000b5d8:	701a      	strb	r2, [r3, #0]
  idx++;
2000b5da:	7dfb      	ldrb	r3, [r7, #23]
2000b5dc:	3301      	adds	r3, #1
2000b5de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
2000b5e0:	e013      	b.n	2000b60a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
2000b5e2:	7dfb      	ldrb	r3, [r7, #23]
2000b5e4:	68ba      	ldr	r2, [r7, #8]
2000b5e6:	4413      	add	r3, r2
2000b5e8:	693a      	ldr	r2, [r7, #16]
2000b5ea:	7812      	ldrb	r2, [r2, #0]
2000b5ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
2000b5ee:	693b      	ldr	r3, [r7, #16]
2000b5f0:	3301      	adds	r3, #1
2000b5f2:	613b      	str	r3, [r7, #16]
    idx++;
2000b5f4:	7dfb      	ldrb	r3, [r7, #23]
2000b5f6:	3301      	adds	r3, #1
2000b5f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
2000b5fa:	7dfb      	ldrb	r3, [r7, #23]
2000b5fc:	68ba      	ldr	r2, [r7, #8]
2000b5fe:	4413      	add	r3, r2
2000b600:	2200      	movs	r2, #0
2000b602:	701a      	strb	r2, [r3, #0]
    idx++;
2000b604:	7dfb      	ldrb	r3, [r7, #23]
2000b606:	3301      	adds	r3, #1
2000b608:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
2000b60a:	693b      	ldr	r3, [r7, #16]
2000b60c:	781b      	ldrb	r3, [r3, #0]
2000b60e:	2b00      	cmp	r3, #0
2000b610:	d1e7      	bne.n	2000b5e2 <USBD_GetString+0x6a>
2000b612:	e000      	b.n	2000b616 <USBD_GetString+0x9e>
    return;
2000b614:	bf00      	nop
  }
}
2000b616:	3718      	adds	r7, #24
2000b618:	46bd      	mov	sp, r7
2000b61a:	bd80      	pop	{r7, pc}

2000b61c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
2000b61c:	b480      	push	{r7}
2000b61e:	b085      	sub	sp, #20
2000b620:	af00      	add	r7, sp, #0
2000b622:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
2000b624:	2300      	movs	r3, #0
2000b626:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
2000b628:	687b      	ldr	r3, [r7, #4]
2000b62a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
2000b62c:	e005      	b.n	2000b63a <USBD_GetLen+0x1e>
  {
    len++;
2000b62e:	7bfb      	ldrb	r3, [r7, #15]
2000b630:	3301      	adds	r3, #1
2000b632:	73fb      	strb	r3, [r7, #15]
    pbuff++;
2000b634:	68bb      	ldr	r3, [r7, #8]
2000b636:	3301      	adds	r3, #1
2000b638:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
2000b63a:	68bb      	ldr	r3, [r7, #8]
2000b63c:	781b      	ldrb	r3, [r3, #0]
2000b63e:	2b00      	cmp	r3, #0
2000b640:	d1f5      	bne.n	2000b62e <USBD_GetLen+0x12>
  }

  return len;
2000b642:	7bfb      	ldrb	r3, [r7, #15]
}
2000b644:	4618      	mov	r0, r3
2000b646:	3714      	adds	r7, #20
2000b648:	46bd      	mov	sp, r7
2000b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b64e:	4770      	bx	lr

2000b650 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
2000b650:	b580      	push	{r7, lr}
2000b652:	b084      	sub	sp, #16
2000b654:	af00      	add	r7, sp, #0
2000b656:	60f8      	str	r0, [r7, #12]
2000b658:	60b9      	str	r1, [r7, #8]
2000b65a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
2000b65c:	68fb      	ldr	r3, [r7, #12]
2000b65e:	2202      	movs	r2, #2
2000b660:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
2000b664:	68fb      	ldr	r3, [r7, #12]
2000b666:	687a      	ldr	r2, [r7, #4]
2000b668:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
2000b66a:	68fb      	ldr	r3, [r7, #12]
2000b66c:	68ba      	ldr	r2, [r7, #8]
2000b66e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
2000b670:	68fb      	ldr	r3, [r7, #12]
2000b672:	687a      	ldr	r2, [r7, #4]
2000b674:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000b676:	687b      	ldr	r3, [r7, #4]
2000b678:	68ba      	ldr	r2, [r7, #8]
2000b67a:	2100      	movs	r1, #0
2000b67c:	68f8      	ldr	r0, [r7, #12]
2000b67e:	f000 fc92 	bl	2000bfa6 <USBD_LL_Transmit>

  return USBD_OK;
2000b682:	2300      	movs	r3, #0
}
2000b684:	4618      	mov	r0, r3
2000b686:	3710      	adds	r7, #16
2000b688:	46bd      	mov	sp, r7
2000b68a:	bd80      	pop	{r7, pc}

2000b68c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
2000b68c:	b580      	push	{r7, lr}
2000b68e:	b084      	sub	sp, #16
2000b690:	af00      	add	r7, sp, #0
2000b692:	60f8      	str	r0, [r7, #12]
2000b694:	60b9      	str	r1, [r7, #8]
2000b696:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000b698:	687b      	ldr	r3, [r7, #4]
2000b69a:	68ba      	ldr	r2, [r7, #8]
2000b69c:	2100      	movs	r1, #0
2000b69e:	68f8      	ldr	r0, [r7, #12]
2000b6a0:	f000 fc81 	bl	2000bfa6 <USBD_LL_Transmit>

  return USBD_OK;
2000b6a4:	2300      	movs	r3, #0
}
2000b6a6:	4618      	mov	r0, r3
2000b6a8:	3710      	adds	r7, #16
2000b6aa:	46bd      	mov	sp, r7
2000b6ac:	bd80      	pop	{r7, pc}

2000b6ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
2000b6ae:	b580      	push	{r7, lr}
2000b6b0:	b084      	sub	sp, #16
2000b6b2:	af00      	add	r7, sp, #0
2000b6b4:	60f8      	str	r0, [r7, #12]
2000b6b6:	60b9      	str	r1, [r7, #8]
2000b6b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
2000b6ba:	68fb      	ldr	r3, [r7, #12]
2000b6bc:	2203      	movs	r2, #3
2000b6be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
2000b6c2:	68fb      	ldr	r3, [r7, #12]
2000b6c4:	687a      	ldr	r2, [r7, #4]
2000b6c6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
2000b6ca:	68fb      	ldr	r3, [r7, #12]
2000b6cc:	68ba      	ldr	r2, [r7, #8]
2000b6ce:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
2000b6d2:	68fb      	ldr	r3, [r7, #12]
2000b6d4:	687a      	ldr	r2, [r7, #4]
2000b6d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000b6da:	687b      	ldr	r3, [r7, #4]
2000b6dc:	68ba      	ldr	r2, [r7, #8]
2000b6de:	2100      	movs	r1, #0
2000b6e0:	68f8      	ldr	r0, [r7, #12]
2000b6e2:	f000 fc81 	bl	2000bfe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000b6e6:	2300      	movs	r3, #0
}
2000b6e8:	4618      	mov	r0, r3
2000b6ea:	3710      	adds	r7, #16
2000b6ec:	46bd      	mov	sp, r7
2000b6ee:	bd80      	pop	{r7, pc}

2000b6f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
2000b6f0:	b580      	push	{r7, lr}
2000b6f2:	b084      	sub	sp, #16
2000b6f4:	af00      	add	r7, sp, #0
2000b6f6:	60f8      	str	r0, [r7, #12]
2000b6f8:	60b9      	str	r1, [r7, #8]
2000b6fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000b6fc:	687b      	ldr	r3, [r7, #4]
2000b6fe:	68ba      	ldr	r2, [r7, #8]
2000b700:	2100      	movs	r1, #0
2000b702:	68f8      	ldr	r0, [r7, #12]
2000b704:	f000 fc70 	bl	2000bfe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000b708:	2300      	movs	r3, #0
}
2000b70a:	4618      	mov	r0, r3
2000b70c:	3710      	adds	r7, #16
2000b70e:	46bd      	mov	sp, r7
2000b710:	bd80      	pop	{r7, pc}

2000b712 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
2000b712:	b580      	push	{r7, lr}
2000b714:	b082      	sub	sp, #8
2000b716:	af00      	add	r7, sp, #0
2000b718:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
2000b71a:	687b      	ldr	r3, [r7, #4]
2000b71c:	2204      	movs	r2, #4
2000b71e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
2000b722:	2300      	movs	r3, #0
2000b724:	2200      	movs	r2, #0
2000b726:	2100      	movs	r1, #0
2000b728:	6878      	ldr	r0, [r7, #4]
2000b72a:	f000 fc3c 	bl	2000bfa6 <USBD_LL_Transmit>

  return USBD_OK;
2000b72e:	2300      	movs	r3, #0
}
2000b730:	4618      	mov	r0, r3
2000b732:	3708      	adds	r7, #8
2000b734:	46bd      	mov	sp, r7
2000b736:	bd80      	pop	{r7, pc}

2000b738 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
2000b738:	b580      	push	{r7, lr}
2000b73a:	b082      	sub	sp, #8
2000b73c:	af00      	add	r7, sp, #0
2000b73e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
2000b740:	687b      	ldr	r3, [r7, #4]
2000b742:	2205      	movs	r2, #5
2000b744:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000b748:	2300      	movs	r3, #0
2000b74a:	2200      	movs	r2, #0
2000b74c:	2100      	movs	r1, #0
2000b74e:	6878      	ldr	r0, [r7, #4]
2000b750:	f000 fc4a 	bl	2000bfe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000b754:	2300      	movs	r3, #0
}
2000b756:	4618      	mov	r0, r3
2000b758:	3708      	adds	r7, #8
2000b75a:	46bd      	mov	sp, r7
2000b75c:	bd80      	pop	{r7, pc}
	...

2000b760 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
2000b760:	b580      	push	{r7, lr}
2000b762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
2000b764:	2200      	movs	r2, #0
2000b766:	4912      	ldr	r1, [pc, #72]	@ (2000b7b0 <MX_USB_DEVICE_Init+0x50>)
2000b768:	4812      	ldr	r0, [pc, #72]	@ (2000b7b4 <MX_USB_DEVICE_Init+0x54>)
2000b76a:	f7fe fcb1 	bl	2000a0d0 <USBD_Init>
2000b76e:	4603      	mov	r3, r0
2000b770:	2b00      	cmp	r3, #0
2000b772:	d001      	beq.n	2000b778 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
2000b774:	f7f8 fb64 	bl	20003e40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
2000b778:	490f      	ldr	r1, [pc, #60]	@ (2000b7b8 <MX_USB_DEVICE_Init+0x58>)
2000b77a:	480e      	ldr	r0, [pc, #56]	@ (2000b7b4 <MX_USB_DEVICE_Init+0x54>)
2000b77c:	f7fe fcd8 	bl	2000a130 <USBD_RegisterClass>
2000b780:	4603      	mov	r3, r0
2000b782:	2b00      	cmp	r3, #0
2000b784:	d001      	beq.n	2000b78a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
2000b786:	f7f8 fb5b 	bl	20003e40 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
2000b78a:	490c      	ldr	r1, [pc, #48]	@ (2000b7bc <MX_USB_DEVICE_Init+0x5c>)
2000b78c:	4809      	ldr	r0, [pc, #36]	@ (2000b7b4 <MX_USB_DEVICE_Init+0x54>)
2000b78e:	f7fe fc85 	bl	2000a09c <USBD_CUSTOM_HID_RegisterInterface>
2000b792:	4603      	mov	r3, r0
2000b794:	2b00      	cmp	r3, #0
2000b796:	d001      	beq.n	2000b79c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
2000b798:	f7f8 fb52 	bl	20003e40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
2000b79c:	4805      	ldr	r0, [pc, #20]	@ (2000b7b4 <MX_USB_DEVICE_Init+0x54>)
2000b79e:	f7fe fcfd 	bl	2000a19c <USBD_Start>
2000b7a2:	4603      	mov	r3, r0
2000b7a4:	2b00      	cmp	r3, #0
2000b7a6:	d001      	beq.n	2000b7ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
2000b7a8:	f7f8 fb4a 	bl	20003e40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
2000b7ac:	bf00      	nop
2000b7ae:	bd80      	pop	{r7, pc}
2000b7b0:	2000c564 	.word	0x2000c564
2000b7b4:	2000db20 	.word	0x2000db20
2000b7b8:	2000c498 	.word	0x2000c498
2000b7bc:	2000c554 	.word	0x2000c554

2000b7c0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
2000b7c0:	b480      	push	{r7}
2000b7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
2000b7c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
2000b7c6:	4618      	mov	r0, r3
2000b7c8:	46bd      	mov	sp, r7
2000b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b7ce:	4770      	bx	lr

2000b7d0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
2000b7d0:	b480      	push	{r7}
2000b7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
2000b7d4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
2000b7d6:	4618      	mov	r0, r3
2000b7d8:	46bd      	mov	sp, r7
2000b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b7de:	4770      	bx	lr

2000b7e0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
2000b7e0:	b580      	push	{r7, lr}
2000b7e2:	b082      	sub	sp, #8
2000b7e4:	af00      	add	r7, sp, #0
2000b7e6:	4603      	mov	r3, r0
2000b7e8:	460a      	mov	r2, r1
2000b7ea:	71fb      	strb	r3, [r7, #7]
2000b7ec:	4613      	mov	r3, r2
2000b7ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
2000b7f0:	4806      	ldr	r0, [pc, #24]	@ (2000b80c <CUSTOM_HID_OutEvent_FS+0x2c>)
2000b7f2:	f7fe fbdd 	bl	20009fb0 <USBD_CUSTOM_HID_ReceivePacket>
2000b7f6:	4603      	mov	r3, r0
2000b7f8:	2b00      	cmp	r3, #0
2000b7fa:	d002      	beq.n	2000b802 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
2000b7fc:	f04f 33ff 	mov.w	r3, #4294967295
2000b800:	e000      	b.n	2000b804 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
2000b802:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
2000b804:	4618      	mov	r0, r3
2000b806:	3708      	adds	r7, #8
2000b808:	46bd      	mov	sp, r7
2000b80a:	bd80      	pop	{r7, pc}
2000b80c:	2000db20 	.word	0x2000db20

2000b810 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b810:	b480      	push	{r7}
2000b812:	b083      	sub	sp, #12
2000b814:	af00      	add	r7, sp, #0
2000b816:	4603      	mov	r3, r0
2000b818:	6039      	str	r1, [r7, #0]
2000b81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
2000b81c:	683b      	ldr	r3, [r7, #0]
2000b81e:	2212      	movs	r2, #18
2000b820:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
2000b822:	4b03      	ldr	r3, [pc, #12]	@ (2000b830 <USBD_FS_DeviceDescriptor+0x20>)
}
2000b824:	4618      	mov	r0, r3
2000b826:	370c      	adds	r7, #12
2000b828:	46bd      	mov	sp, r7
2000b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b82e:	4770      	bx	lr
2000b830:	2000c584 	.word	0x2000c584

2000b834 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b834:	b480      	push	{r7}
2000b836:	b083      	sub	sp, #12
2000b838:	af00      	add	r7, sp, #0
2000b83a:	4603      	mov	r3, r0
2000b83c:	6039      	str	r1, [r7, #0]
2000b83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
2000b840:	683b      	ldr	r3, [r7, #0]
2000b842:	2204      	movs	r2, #4
2000b844:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
2000b846:	4b03      	ldr	r3, [pc, #12]	@ (2000b854 <USBD_FS_LangIDStrDescriptor+0x20>)
}
2000b848:	4618      	mov	r0, r3
2000b84a:	370c      	adds	r7, #12
2000b84c:	46bd      	mov	sp, r7
2000b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b852:	4770      	bx	lr
2000b854:	2000c5a4 	.word	0x2000c5a4

2000b858 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b858:	b580      	push	{r7, lr}
2000b85a:	b082      	sub	sp, #8
2000b85c:	af00      	add	r7, sp, #0
2000b85e:	4603      	mov	r3, r0
2000b860:	6039      	str	r1, [r7, #0]
2000b862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000b864:	79fb      	ldrb	r3, [r7, #7]
2000b866:	2b00      	cmp	r3, #0
2000b868:	d105      	bne.n	2000b876 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000b86a:	683a      	ldr	r2, [r7, #0]
2000b86c:	4907      	ldr	r1, [pc, #28]	@ (2000b88c <USBD_FS_ProductStrDescriptor+0x34>)
2000b86e:	4808      	ldr	r0, [pc, #32]	@ (2000b890 <USBD_FS_ProductStrDescriptor+0x38>)
2000b870:	f7ff fe82 	bl	2000b578 <USBD_GetString>
2000b874:	e004      	b.n	2000b880 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000b876:	683a      	ldr	r2, [r7, #0]
2000b878:	4904      	ldr	r1, [pc, #16]	@ (2000b88c <USBD_FS_ProductStrDescriptor+0x34>)
2000b87a:	4805      	ldr	r0, [pc, #20]	@ (2000b890 <USBD_FS_ProductStrDescriptor+0x38>)
2000b87c:	f7ff fe7c 	bl	2000b578 <USBD_GetString>
  }
  return USBD_StrDesc;
2000b880:	4b02      	ldr	r3, [pc, #8]	@ (2000b88c <USBD_FS_ProductStrDescriptor+0x34>)
}
2000b882:	4618      	mov	r0, r3
2000b884:	3708      	adds	r7, #8
2000b886:	46bd      	mov	sp, r7
2000b888:	bd80      	pop	{r7, pc}
2000b88a:	bf00      	nop
2000b88c:	2000ddfc 	.word	0x2000ddfc
2000b890:	2000c41c 	.word	0x2000c41c

2000b894 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b894:	b580      	push	{r7, lr}
2000b896:	b082      	sub	sp, #8
2000b898:	af00      	add	r7, sp, #0
2000b89a:	4603      	mov	r3, r0
2000b89c:	6039      	str	r1, [r7, #0]
2000b89e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
2000b8a0:	683a      	ldr	r2, [r7, #0]
2000b8a2:	4904      	ldr	r1, [pc, #16]	@ (2000b8b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
2000b8a4:	4804      	ldr	r0, [pc, #16]	@ (2000b8b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
2000b8a6:	f7ff fe67 	bl	2000b578 <USBD_GetString>
  return USBD_StrDesc;
2000b8aa:	4b02      	ldr	r3, [pc, #8]	@ (2000b8b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
2000b8ac:	4618      	mov	r0, r3
2000b8ae:	3708      	adds	r7, #8
2000b8b0:	46bd      	mov	sp, r7
2000b8b2:	bd80      	pop	{r7, pc}
2000b8b4:	2000ddfc 	.word	0x2000ddfc
2000b8b8:	2000c430 	.word	0x2000c430

2000b8bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b8bc:	b580      	push	{r7, lr}
2000b8be:	b082      	sub	sp, #8
2000b8c0:	af00      	add	r7, sp, #0
2000b8c2:	4603      	mov	r3, r0
2000b8c4:	6039      	str	r1, [r7, #0]
2000b8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
2000b8c8:	683b      	ldr	r3, [r7, #0]
2000b8ca:	221a      	movs	r2, #26
2000b8cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
2000b8ce:	f000 f855 	bl	2000b97c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
2000b8d2:	4b02      	ldr	r3, [pc, #8]	@ (2000b8dc <USBD_FS_SerialStrDescriptor+0x20>)
}
2000b8d4:	4618      	mov	r0, r3
2000b8d6:	3708      	adds	r7, #8
2000b8d8:	46bd      	mov	sp, r7
2000b8da:	bd80      	pop	{r7, pc}
2000b8dc:	2000c5a8 	.word	0x2000c5a8

2000b8e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b8e0:	b580      	push	{r7, lr}
2000b8e2:	b082      	sub	sp, #8
2000b8e4:	af00      	add	r7, sp, #0
2000b8e6:	4603      	mov	r3, r0
2000b8e8:	6039      	str	r1, [r7, #0]
2000b8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
2000b8ec:	79fb      	ldrb	r3, [r7, #7]
2000b8ee:	2b00      	cmp	r3, #0
2000b8f0:	d105      	bne.n	2000b8fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000b8f2:	683a      	ldr	r2, [r7, #0]
2000b8f4:	4907      	ldr	r1, [pc, #28]	@ (2000b914 <USBD_FS_ConfigStrDescriptor+0x34>)
2000b8f6:	4808      	ldr	r0, [pc, #32]	@ (2000b918 <USBD_FS_ConfigStrDescriptor+0x38>)
2000b8f8:	f7ff fe3e 	bl	2000b578 <USBD_GetString>
2000b8fc:	e004      	b.n	2000b908 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000b8fe:	683a      	ldr	r2, [r7, #0]
2000b900:	4904      	ldr	r1, [pc, #16]	@ (2000b914 <USBD_FS_ConfigStrDescriptor+0x34>)
2000b902:	4805      	ldr	r0, [pc, #20]	@ (2000b918 <USBD_FS_ConfigStrDescriptor+0x38>)
2000b904:	f7ff fe38 	bl	2000b578 <USBD_GetString>
  }
  return USBD_StrDesc;
2000b908:	4b02      	ldr	r3, [pc, #8]	@ (2000b914 <USBD_FS_ConfigStrDescriptor+0x34>)
}
2000b90a:	4618      	mov	r0, r3
2000b90c:	3708      	adds	r7, #8
2000b90e:	46bd      	mov	sp, r7
2000b910:	bd80      	pop	{r7, pc}
2000b912:	bf00      	nop
2000b914:	2000ddfc 	.word	0x2000ddfc
2000b918:	2000c444 	.word	0x2000c444

2000b91c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b91c:	b580      	push	{r7, lr}
2000b91e:	b082      	sub	sp, #8
2000b920:	af00      	add	r7, sp, #0
2000b922:	4603      	mov	r3, r0
2000b924:	6039      	str	r1, [r7, #0]
2000b926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000b928:	79fb      	ldrb	r3, [r7, #7]
2000b92a:	2b00      	cmp	r3, #0
2000b92c:	d105      	bne.n	2000b93a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000b92e:	683a      	ldr	r2, [r7, #0]
2000b930:	4907      	ldr	r1, [pc, #28]	@ (2000b950 <USBD_FS_InterfaceStrDescriptor+0x34>)
2000b932:	4808      	ldr	r0, [pc, #32]	@ (2000b954 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000b934:	f7ff fe20 	bl	2000b578 <USBD_GetString>
2000b938:	e004      	b.n	2000b944 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000b93a:	683a      	ldr	r2, [r7, #0]
2000b93c:	4904      	ldr	r1, [pc, #16]	@ (2000b950 <USBD_FS_InterfaceStrDescriptor+0x34>)
2000b93e:	4805      	ldr	r0, [pc, #20]	@ (2000b954 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000b940:	f7ff fe1a 	bl	2000b578 <USBD_GetString>
  }
  return USBD_StrDesc;
2000b944:	4b02      	ldr	r3, [pc, #8]	@ (2000b950 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
2000b946:	4618      	mov	r0, r3
2000b948:	3708      	adds	r7, #8
2000b94a:	46bd      	mov	sp, r7
2000b94c:	bd80      	pop	{r7, pc}
2000b94e:	bf00      	nop
2000b950:	2000ddfc 	.word	0x2000ddfc
2000b954:	2000c444 	.word	0x2000c444

2000b958 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b958:	b480      	push	{r7}
2000b95a:	b083      	sub	sp, #12
2000b95c:	af00      	add	r7, sp, #0
2000b95e:	4603      	mov	r3, r0
2000b960:	6039      	str	r1, [r7, #0]
2000b962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
2000b964:	683b      	ldr	r3, [r7, #0]
2000b966:	220c      	movs	r2, #12
2000b968:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
2000b96a:	4b03      	ldr	r3, [pc, #12]	@ (2000b978 <USBD_FS_USR_BOSDescriptor+0x20>)
}
2000b96c:	4618      	mov	r0, r3
2000b96e:	370c      	adds	r7, #12
2000b970:	46bd      	mov	sp, r7
2000b972:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b976:	4770      	bx	lr
2000b978:	2000c598 	.word	0x2000c598

2000b97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
2000b97c:	b580      	push	{r7, lr}
2000b97e:	b084      	sub	sp, #16
2000b980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
2000b982:	4b0f      	ldr	r3, [pc, #60]	@ (2000b9c0 <Get_SerialNum+0x44>)
2000b984:	681b      	ldr	r3, [r3, #0]
2000b986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
2000b988:	4b0e      	ldr	r3, [pc, #56]	@ (2000b9c4 <Get_SerialNum+0x48>)
2000b98a:	681b      	ldr	r3, [r3, #0]
2000b98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
2000b98e:	4b0e      	ldr	r3, [pc, #56]	@ (2000b9c8 <Get_SerialNum+0x4c>)
2000b990:	681b      	ldr	r3, [r3, #0]
2000b992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
2000b994:	68fa      	ldr	r2, [r7, #12]
2000b996:	687b      	ldr	r3, [r7, #4]
2000b998:	4413      	add	r3, r2
2000b99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
2000b99c:	68fb      	ldr	r3, [r7, #12]
2000b99e:	2b00      	cmp	r3, #0
2000b9a0:	d009      	beq.n	2000b9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
2000b9a2:	2208      	movs	r2, #8
2000b9a4:	4909      	ldr	r1, [pc, #36]	@ (2000b9cc <Get_SerialNum+0x50>)
2000b9a6:	68f8      	ldr	r0, [r7, #12]
2000b9a8:	f000 f814 	bl	2000b9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
2000b9ac:	2204      	movs	r2, #4
2000b9ae:	4908      	ldr	r1, [pc, #32]	@ (2000b9d0 <Get_SerialNum+0x54>)
2000b9b0:	68b8      	ldr	r0, [r7, #8]
2000b9b2:	f000 f80f 	bl	2000b9d4 <IntToUnicode>
  }
}
2000b9b6:	bf00      	nop
2000b9b8:	3710      	adds	r7, #16
2000b9ba:	46bd      	mov	sp, r7
2000b9bc:	bd80      	pop	{r7, pc}
2000b9be:	bf00      	nop
2000b9c0:	1ff0f420 	.word	0x1ff0f420
2000b9c4:	1ff0f424 	.word	0x1ff0f424
2000b9c8:	1ff0f428 	.word	0x1ff0f428
2000b9cc:	2000c5aa 	.word	0x2000c5aa
2000b9d0:	2000c5ba 	.word	0x2000c5ba

2000b9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
2000b9d4:	b480      	push	{r7}
2000b9d6:	b087      	sub	sp, #28
2000b9d8:	af00      	add	r7, sp, #0
2000b9da:	60f8      	str	r0, [r7, #12]
2000b9dc:	60b9      	str	r1, [r7, #8]
2000b9de:	4613      	mov	r3, r2
2000b9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
2000b9e2:	2300      	movs	r3, #0
2000b9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
2000b9e6:	2300      	movs	r3, #0
2000b9e8:	75fb      	strb	r3, [r7, #23]
2000b9ea:	e027      	b.n	2000ba3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
2000b9ec:	68fb      	ldr	r3, [r7, #12]
2000b9ee:	0f1b      	lsrs	r3, r3, #28
2000b9f0:	2b09      	cmp	r3, #9
2000b9f2:	d80b      	bhi.n	2000ba0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
2000b9f4:	68fb      	ldr	r3, [r7, #12]
2000b9f6:	0f1b      	lsrs	r3, r3, #28
2000b9f8:	b2da      	uxtb	r2, r3
2000b9fa:	7dfb      	ldrb	r3, [r7, #23]
2000b9fc:	005b      	lsls	r3, r3, #1
2000b9fe:	4619      	mov	r1, r3
2000ba00:	68bb      	ldr	r3, [r7, #8]
2000ba02:	440b      	add	r3, r1
2000ba04:	3230      	adds	r2, #48	@ 0x30
2000ba06:	b2d2      	uxtb	r2, r2
2000ba08:	701a      	strb	r2, [r3, #0]
2000ba0a:	e00a      	b.n	2000ba22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
2000ba0c:	68fb      	ldr	r3, [r7, #12]
2000ba0e:	0f1b      	lsrs	r3, r3, #28
2000ba10:	b2da      	uxtb	r2, r3
2000ba12:	7dfb      	ldrb	r3, [r7, #23]
2000ba14:	005b      	lsls	r3, r3, #1
2000ba16:	4619      	mov	r1, r3
2000ba18:	68bb      	ldr	r3, [r7, #8]
2000ba1a:	440b      	add	r3, r1
2000ba1c:	3237      	adds	r2, #55	@ 0x37
2000ba1e:	b2d2      	uxtb	r2, r2
2000ba20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
2000ba22:	68fb      	ldr	r3, [r7, #12]
2000ba24:	011b      	lsls	r3, r3, #4
2000ba26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
2000ba28:	7dfb      	ldrb	r3, [r7, #23]
2000ba2a:	005b      	lsls	r3, r3, #1
2000ba2c:	3301      	adds	r3, #1
2000ba2e:	68ba      	ldr	r2, [r7, #8]
2000ba30:	4413      	add	r3, r2
2000ba32:	2200      	movs	r2, #0
2000ba34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
2000ba36:	7dfb      	ldrb	r3, [r7, #23]
2000ba38:	3301      	adds	r3, #1
2000ba3a:	75fb      	strb	r3, [r7, #23]
2000ba3c:	7dfa      	ldrb	r2, [r7, #23]
2000ba3e:	79fb      	ldrb	r3, [r7, #7]
2000ba40:	429a      	cmp	r2, r3
2000ba42:	d3d3      	bcc.n	2000b9ec <IntToUnicode+0x18>
  }
}
2000ba44:	bf00      	nop
2000ba46:	bf00      	nop
2000ba48:	371c      	adds	r7, #28
2000ba4a:	46bd      	mov	sp, r7
2000ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ba50:	4770      	bx	lr
	...

2000ba54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
2000ba54:	b580      	push	{r7, lr}
2000ba56:	b0ac      	sub	sp, #176	@ 0xb0
2000ba58:	af00      	add	r7, sp, #0
2000ba5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000ba5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000ba60:	2200      	movs	r2, #0
2000ba62:	601a      	str	r2, [r3, #0]
2000ba64:	605a      	str	r2, [r3, #4]
2000ba66:	609a      	str	r2, [r3, #8]
2000ba68:	60da      	str	r2, [r3, #12]
2000ba6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2000ba6c:	f107 0318 	add.w	r3, r7, #24
2000ba70:	2284      	movs	r2, #132	@ 0x84
2000ba72:	2100      	movs	r1, #0
2000ba74:	4618      	mov	r0, r3
2000ba76:	f000 fc29 	bl	2000c2cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
2000ba7a:	687b      	ldr	r3, [r7, #4]
2000ba7c:	681b      	ldr	r3, [r3, #0]
2000ba7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2000ba82:	d161      	bne.n	2000bb48 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
2000ba84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000ba88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
2000ba8a:	2300      	movs	r3, #0
2000ba8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2000ba90:	f107 0318 	add.w	r3, r7, #24
2000ba94:	4618      	mov	r0, r3
2000ba96:	f7fb facf 	bl	20007038 <HAL_RCCEx_PeriphCLKConfig>
2000ba9a:	4603      	mov	r3, r0
2000ba9c:	2b00      	cmp	r3, #0
2000ba9e:	d001      	beq.n	2000baa4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
2000baa0:	f7f8 f9ce 	bl	20003e40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000baa4:	4b2a      	ldr	r3, [pc, #168]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000baa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000baa8:	4a29      	ldr	r2, [pc, #164]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000baaa:	f043 0301 	orr.w	r3, r3, #1
2000baae:	6313      	str	r3, [r2, #48]	@ 0x30
2000bab0:	4b27      	ldr	r3, [pc, #156]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000bab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000bab4:	f003 0301 	and.w	r3, r3, #1
2000bab8:	617b      	str	r3, [r7, #20]
2000baba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
2000babc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
2000bac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000bac4:	2302      	movs	r3, #2
2000bac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000baca:	2300      	movs	r3, #0
2000bacc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000bad0:	2303      	movs	r3, #3
2000bad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
2000bad6:	230a      	movs	r3, #10
2000bad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000badc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000bae0:	4619      	mov	r1, r3
2000bae2:	481c      	ldr	r0, [pc, #112]	@ (2000bb54 <HAL_PCD_MspInit+0x100>)
2000bae4:	f7f9 f914 	bl	20004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
2000bae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
2000baec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
2000baf0:	2300      	movs	r3, #0
2000baf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000baf6:	2300      	movs	r3, #0
2000baf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
2000bafc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000bb00:	4619      	mov	r1, r3
2000bb02:	4814      	ldr	r0, [pc, #80]	@ (2000bb54 <HAL_PCD_MspInit+0x100>)
2000bb04:	f7f9 f904 	bl	20004d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
2000bb08:	4b11      	ldr	r3, [pc, #68]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000bb0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000bb0c:	4a10      	ldr	r2, [pc, #64]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000bb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2000bb12:	6353      	str	r3, [r2, #52]	@ 0x34
2000bb14:	4b0e      	ldr	r3, [pc, #56]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000bb16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000bb18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000bb1c:	613b      	str	r3, [r7, #16]
2000bb1e:	693b      	ldr	r3, [r7, #16]
2000bb20:	4b0b      	ldr	r3, [pc, #44]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000bb22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000bb24:	4a0a      	ldr	r2, [pc, #40]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000bb26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2000bb2a:	6453      	str	r3, [r2, #68]	@ 0x44
2000bb2c:	4b08      	ldr	r3, [pc, #32]	@ (2000bb50 <HAL_PCD_MspInit+0xfc>)
2000bb2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000bb30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000bb34:	60fb      	str	r3, [r7, #12]
2000bb36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
2000bb38:	2200      	movs	r2, #0
2000bb3a:	2100      	movs	r1, #0
2000bb3c:	2043      	movs	r0, #67	@ 0x43
2000bb3e:	f7f8 fd62 	bl	20004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
2000bb42:	2043      	movs	r0, #67	@ 0x43
2000bb44:	f7f8 fd7b 	bl	2000463e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
2000bb48:	bf00      	nop
2000bb4a:	37b0      	adds	r7, #176	@ 0xb0
2000bb4c:	46bd      	mov	sp, r7
2000bb4e:	bd80      	pop	{r7, pc}
2000bb50:	40023800 	.word	0x40023800
2000bb54:	40020000 	.word	0x40020000

2000bb58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bb58:	b580      	push	{r7, lr}
2000bb5a:	b082      	sub	sp, #8
2000bb5c:	af00      	add	r7, sp, #0
2000bb5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
2000bb60:	687b      	ldr	r3, [r7, #4]
2000bb62:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
2000bb66:	687b      	ldr	r3, [r7, #4]
2000bb68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000bb6c:	4619      	mov	r1, r3
2000bb6e:	4610      	mov	r0, r2
2000bb70:	f7fe fb61 	bl	2000a236 <USBD_LL_SetupStage>
}
2000bb74:	bf00      	nop
2000bb76:	3708      	adds	r7, #8
2000bb78:	46bd      	mov	sp, r7
2000bb7a:	bd80      	pop	{r7, pc}

2000bb7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bb7c:	b580      	push	{r7, lr}
2000bb7e:	b082      	sub	sp, #8
2000bb80:	af00      	add	r7, sp, #0
2000bb82:	6078      	str	r0, [r7, #4]
2000bb84:	460b      	mov	r3, r1
2000bb86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
2000bb88:	687b      	ldr	r3, [r7, #4]
2000bb8a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000bb8e:	78fa      	ldrb	r2, [r7, #3]
2000bb90:	6879      	ldr	r1, [r7, #4]
2000bb92:	4613      	mov	r3, r2
2000bb94:	00db      	lsls	r3, r3, #3
2000bb96:	4413      	add	r3, r2
2000bb98:	009b      	lsls	r3, r3, #2
2000bb9a:	440b      	add	r3, r1
2000bb9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
2000bba0:	681a      	ldr	r2, [r3, #0]
2000bba2:	78fb      	ldrb	r3, [r7, #3]
2000bba4:	4619      	mov	r1, r3
2000bba6:	f7fe fb9b 	bl	2000a2e0 <USBD_LL_DataOutStage>
}
2000bbaa:	bf00      	nop
2000bbac:	3708      	adds	r7, #8
2000bbae:	46bd      	mov	sp, r7
2000bbb0:	bd80      	pop	{r7, pc}

2000bbb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bbb2:	b580      	push	{r7, lr}
2000bbb4:	b082      	sub	sp, #8
2000bbb6:	af00      	add	r7, sp, #0
2000bbb8:	6078      	str	r0, [r7, #4]
2000bbba:	460b      	mov	r3, r1
2000bbbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
2000bbbe:	687b      	ldr	r3, [r7, #4]
2000bbc0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000bbc4:	78fa      	ldrb	r2, [r7, #3]
2000bbc6:	6879      	ldr	r1, [r7, #4]
2000bbc8:	4613      	mov	r3, r2
2000bbca:	00db      	lsls	r3, r3, #3
2000bbcc:	4413      	add	r3, r2
2000bbce:	009b      	lsls	r3, r3, #2
2000bbd0:	440b      	add	r3, r1
2000bbd2:	3320      	adds	r3, #32
2000bbd4:	681a      	ldr	r2, [r3, #0]
2000bbd6:	78fb      	ldrb	r3, [r7, #3]
2000bbd8:	4619      	mov	r1, r3
2000bbda:	f7fe fc3d 	bl	2000a458 <USBD_LL_DataInStage>
}
2000bbde:	bf00      	nop
2000bbe0:	3708      	adds	r7, #8
2000bbe2:	46bd      	mov	sp, r7
2000bbe4:	bd80      	pop	{r7, pc}

2000bbe6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bbe6:	b580      	push	{r7, lr}
2000bbe8:	b082      	sub	sp, #8
2000bbea:	af00      	add	r7, sp, #0
2000bbec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
2000bbee:	687b      	ldr	r3, [r7, #4]
2000bbf0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bbf4:	4618      	mov	r0, r3
2000bbf6:	f7fe fd81 	bl	2000a6fc <USBD_LL_SOF>
}
2000bbfa:	bf00      	nop
2000bbfc:	3708      	adds	r7, #8
2000bbfe:	46bd      	mov	sp, r7
2000bc00:	bd80      	pop	{r7, pc}

2000bc02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bc02:	b580      	push	{r7, lr}
2000bc04:	b084      	sub	sp, #16
2000bc06:	af00      	add	r7, sp, #0
2000bc08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
2000bc0a:	2301      	movs	r3, #1
2000bc0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
2000bc0e:	687b      	ldr	r3, [r7, #4]
2000bc10:	79db      	ldrb	r3, [r3, #7]
2000bc12:	2b00      	cmp	r3, #0
2000bc14:	d102      	bne.n	2000bc1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
2000bc16:	2300      	movs	r3, #0
2000bc18:	73fb      	strb	r3, [r7, #15]
2000bc1a:	e008      	b.n	2000bc2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
2000bc1c:	687b      	ldr	r3, [r7, #4]
2000bc1e:	79db      	ldrb	r3, [r3, #7]
2000bc20:	2b02      	cmp	r3, #2
2000bc22:	d102      	bne.n	2000bc2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
2000bc24:	2301      	movs	r3, #1
2000bc26:	73fb      	strb	r3, [r7, #15]
2000bc28:	e001      	b.n	2000bc2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
2000bc2a:	f7f8 f909 	bl	20003e40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
2000bc2e:	687b      	ldr	r3, [r7, #4]
2000bc30:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bc34:	7bfa      	ldrb	r2, [r7, #15]
2000bc36:	4611      	mov	r1, r2
2000bc38:	4618      	mov	r0, r3
2000bc3a:	f7fe fd1b 	bl	2000a674 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
2000bc3e:	687b      	ldr	r3, [r7, #4]
2000bc40:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bc44:	4618      	mov	r0, r3
2000bc46:	f7fe fcc2 	bl	2000a5ce <USBD_LL_Reset>
}
2000bc4a:	bf00      	nop
2000bc4c:	3710      	adds	r7, #16
2000bc4e:	46bd      	mov	sp, r7
2000bc50:	bd80      	pop	{r7, pc}
	...

2000bc54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bc54:	b580      	push	{r7, lr}
2000bc56:	b082      	sub	sp, #8
2000bc58:	af00      	add	r7, sp, #0
2000bc5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
2000bc5c:	687b      	ldr	r3, [r7, #4]
2000bc5e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bc62:	4618      	mov	r0, r3
2000bc64:	f7fe fd16 	bl	2000a694 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000bc68:	687b      	ldr	r3, [r7, #4]
2000bc6a:	681b      	ldr	r3, [r3, #0]
2000bc6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000bc70:	681b      	ldr	r3, [r3, #0]
2000bc72:	687a      	ldr	r2, [r7, #4]
2000bc74:	6812      	ldr	r2, [r2, #0]
2000bc76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000bc7a:	f043 0301 	orr.w	r3, r3, #1
2000bc7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
2000bc80:	687b      	ldr	r3, [r7, #4]
2000bc82:	7adb      	ldrb	r3, [r3, #11]
2000bc84:	2b00      	cmp	r3, #0
2000bc86:	d005      	beq.n	2000bc94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000bc88:	4b04      	ldr	r3, [pc, #16]	@ (2000bc9c <HAL_PCD_SuspendCallback+0x48>)
2000bc8a:	691b      	ldr	r3, [r3, #16]
2000bc8c:	4a03      	ldr	r2, [pc, #12]	@ (2000bc9c <HAL_PCD_SuspendCallback+0x48>)
2000bc8e:	f043 0306 	orr.w	r3, r3, #6
2000bc92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
2000bc94:	bf00      	nop
2000bc96:	3708      	adds	r7, #8
2000bc98:	46bd      	mov	sp, r7
2000bc9a:	bd80      	pop	{r7, pc}
2000bc9c:	e000ed00 	.word	0xe000ed00

2000bca0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bca0:	b580      	push	{r7, lr}
2000bca2:	b082      	sub	sp, #8
2000bca4:	af00      	add	r7, sp, #0
2000bca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
2000bca8:	687b      	ldr	r3, [r7, #4]
2000bcaa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bcae:	4618      	mov	r0, r3
2000bcb0:	f7fe fd0c 	bl	2000a6cc <USBD_LL_Resume>
}
2000bcb4:	bf00      	nop
2000bcb6:	3708      	adds	r7, #8
2000bcb8:	46bd      	mov	sp, r7
2000bcba:	bd80      	pop	{r7, pc}

2000bcbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bcbc:	b580      	push	{r7, lr}
2000bcbe:	b082      	sub	sp, #8
2000bcc0:	af00      	add	r7, sp, #0
2000bcc2:	6078      	str	r0, [r7, #4]
2000bcc4:	460b      	mov	r3, r1
2000bcc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000bcc8:	687b      	ldr	r3, [r7, #4]
2000bcca:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bcce:	78fa      	ldrb	r2, [r7, #3]
2000bcd0:	4611      	mov	r1, r2
2000bcd2:	4618      	mov	r0, r3
2000bcd4:	f7fe fd64 	bl	2000a7a0 <USBD_LL_IsoOUTIncomplete>
}
2000bcd8:	bf00      	nop
2000bcda:	3708      	adds	r7, #8
2000bcdc:	46bd      	mov	sp, r7
2000bcde:	bd80      	pop	{r7, pc}

2000bce0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bce0:	b580      	push	{r7, lr}
2000bce2:	b082      	sub	sp, #8
2000bce4:	af00      	add	r7, sp, #0
2000bce6:	6078      	str	r0, [r7, #4]
2000bce8:	460b      	mov	r3, r1
2000bcea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000bcec:	687b      	ldr	r3, [r7, #4]
2000bcee:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bcf2:	78fa      	ldrb	r2, [r7, #3]
2000bcf4:	4611      	mov	r1, r2
2000bcf6:	4618      	mov	r0, r3
2000bcf8:	f7fe fd20 	bl	2000a73c <USBD_LL_IsoINIncomplete>
}
2000bcfc:	bf00      	nop
2000bcfe:	3708      	adds	r7, #8
2000bd00:	46bd      	mov	sp, r7
2000bd02:	bd80      	pop	{r7, pc}

2000bd04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bd04:	b580      	push	{r7, lr}
2000bd06:	b082      	sub	sp, #8
2000bd08:	af00      	add	r7, sp, #0
2000bd0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
2000bd0c:	687b      	ldr	r3, [r7, #4]
2000bd0e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bd12:	4618      	mov	r0, r3
2000bd14:	f7fe fd76 	bl	2000a804 <USBD_LL_DevConnected>
}
2000bd18:	bf00      	nop
2000bd1a:	3708      	adds	r7, #8
2000bd1c:	46bd      	mov	sp, r7
2000bd1e:	bd80      	pop	{r7, pc}

2000bd20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000bd20:	b580      	push	{r7, lr}
2000bd22:	b082      	sub	sp, #8
2000bd24:	af00      	add	r7, sp, #0
2000bd26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
2000bd28:	687b      	ldr	r3, [r7, #4]
2000bd2a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bd2e:	4618      	mov	r0, r3
2000bd30:	f7fe fd73 	bl	2000a81a <USBD_LL_DevDisconnected>
}
2000bd34:	bf00      	nop
2000bd36:	3708      	adds	r7, #8
2000bd38:	46bd      	mov	sp, r7
2000bd3a:	bd80      	pop	{r7, pc}

2000bd3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
2000bd3c:	b580      	push	{r7, lr}
2000bd3e:	b082      	sub	sp, #8
2000bd40:	af00      	add	r7, sp, #0
2000bd42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
2000bd44:	687b      	ldr	r3, [r7, #4]
2000bd46:	781b      	ldrb	r3, [r3, #0]
2000bd48:	2b00      	cmp	r3, #0
2000bd4a:	d13c      	bne.n	2000bdc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
2000bd4c:	4a20      	ldr	r2, [pc, #128]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd4e:	687b      	ldr	r3, [r7, #4]
2000bd50:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
2000bd54:	687b      	ldr	r3, [r7, #4]
2000bd56:	4a1e      	ldr	r2, [pc, #120]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
2000bd5c:	4b1c      	ldr	r3, [pc, #112]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
2000bd62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
2000bd64:	4b1a      	ldr	r3, [pc, #104]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd66:	2206      	movs	r2, #6
2000bd68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
2000bd6a:	4b19      	ldr	r3, [pc, #100]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd6c:	2202      	movs	r2, #2
2000bd6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
2000bd70:	4b17      	ldr	r3, [pc, #92]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd72:	2200      	movs	r2, #0
2000bd74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
2000bd76:	4b16      	ldr	r3, [pc, #88]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd78:	2202      	movs	r2, #2
2000bd7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
2000bd7c:	4b14      	ldr	r3, [pc, #80]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd7e:	2201      	movs	r2, #1
2000bd80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
2000bd82:	4b13      	ldr	r3, [pc, #76]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd84:	2200      	movs	r2, #0
2000bd86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
2000bd88:	4b11      	ldr	r3, [pc, #68]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd8a:	2200      	movs	r2, #0
2000bd8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
2000bd8e:	4b10      	ldr	r3, [pc, #64]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd90:	2201      	movs	r2, #1
2000bd92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
2000bd94:	4b0e      	ldr	r3, [pc, #56]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd96:	2200      	movs	r2, #0
2000bd98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
2000bd9a:	480d      	ldr	r0, [pc, #52]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bd9c:	f7f9 f997 	bl	200050ce <HAL_PCD_Init>
2000bda0:	4603      	mov	r3, r0
2000bda2:	2b00      	cmp	r3, #0
2000bda4:	d001      	beq.n	2000bdaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
2000bda6:	f7f8 f84b 	bl	20003e40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
2000bdaa:	2180      	movs	r1, #128	@ 0x80
2000bdac:	4808      	ldr	r0, [pc, #32]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bdae:	f7fa fbe4 	bl	2000657a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
2000bdb2:	2240      	movs	r2, #64	@ 0x40
2000bdb4:	2100      	movs	r1, #0
2000bdb6:	4806      	ldr	r0, [pc, #24]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bdb8:	f7fa fb98 	bl	200064ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
2000bdbc:	2280      	movs	r2, #128	@ 0x80
2000bdbe:	2101      	movs	r1, #1
2000bdc0:	4803      	ldr	r0, [pc, #12]	@ (2000bdd0 <USBD_LL_Init+0x94>)
2000bdc2:	f7fa fb93 	bl	200064ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
2000bdc6:	2300      	movs	r3, #0
}
2000bdc8:	4618      	mov	r0, r3
2000bdca:	3708      	adds	r7, #8
2000bdcc:	46bd      	mov	sp, r7
2000bdce:	bd80      	pop	{r7, pc}
2000bdd0:	2000dffc 	.word	0x2000dffc

2000bdd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
2000bdd4:	b580      	push	{r7, lr}
2000bdd6:	b084      	sub	sp, #16
2000bdd8:	af00      	add	r7, sp, #0
2000bdda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bddc:	2300      	movs	r3, #0
2000bdde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bde0:	2300      	movs	r3, #0
2000bde2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
2000bde4:	687b      	ldr	r3, [r7, #4]
2000bde6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bdea:	4618      	mov	r0, r3
2000bdec:	f7f9 fa85 	bl	200052fa <HAL_PCD_Start>
2000bdf0:	4603      	mov	r3, r0
2000bdf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bdf4:	7bfb      	ldrb	r3, [r7, #15]
2000bdf6:	4618      	mov	r0, r3
2000bdf8:	f000 f97e 	bl	2000c0f8 <USBD_Get_USB_Status>
2000bdfc:	4603      	mov	r3, r0
2000bdfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000be00:	7bbb      	ldrb	r3, [r7, #14]
}
2000be02:	4618      	mov	r0, r3
2000be04:	3710      	adds	r7, #16
2000be06:	46bd      	mov	sp, r7
2000be08:	bd80      	pop	{r7, pc}

2000be0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
2000be0a:	b580      	push	{r7, lr}
2000be0c:	b084      	sub	sp, #16
2000be0e:	af00      	add	r7, sp, #0
2000be10:	6078      	str	r0, [r7, #4]
2000be12:	4608      	mov	r0, r1
2000be14:	4611      	mov	r1, r2
2000be16:	461a      	mov	r2, r3
2000be18:	4603      	mov	r3, r0
2000be1a:	70fb      	strb	r3, [r7, #3]
2000be1c:	460b      	mov	r3, r1
2000be1e:	70bb      	strb	r3, [r7, #2]
2000be20:	4613      	mov	r3, r2
2000be22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000be24:	2300      	movs	r3, #0
2000be26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000be28:	2300      	movs	r3, #0
2000be2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
2000be2c:	687b      	ldr	r3, [r7, #4]
2000be2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000be32:	78bb      	ldrb	r3, [r7, #2]
2000be34:	883a      	ldrh	r2, [r7, #0]
2000be36:	78f9      	ldrb	r1, [r7, #3]
2000be38:	f7f9 ff73 	bl	20005d22 <HAL_PCD_EP_Open>
2000be3c:	4603      	mov	r3, r0
2000be3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000be40:	7bfb      	ldrb	r3, [r7, #15]
2000be42:	4618      	mov	r0, r3
2000be44:	f000 f958 	bl	2000c0f8 <USBD_Get_USB_Status>
2000be48:	4603      	mov	r3, r0
2000be4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000be4c:	7bbb      	ldrb	r3, [r7, #14]
}
2000be4e:	4618      	mov	r0, r3
2000be50:	3710      	adds	r7, #16
2000be52:	46bd      	mov	sp, r7
2000be54:	bd80      	pop	{r7, pc}

2000be56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000be56:	b580      	push	{r7, lr}
2000be58:	b084      	sub	sp, #16
2000be5a:	af00      	add	r7, sp, #0
2000be5c:	6078      	str	r0, [r7, #4]
2000be5e:	460b      	mov	r3, r1
2000be60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000be62:	2300      	movs	r3, #0
2000be64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000be66:	2300      	movs	r3, #0
2000be68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
2000be6a:	687b      	ldr	r3, [r7, #4]
2000be6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000be70:	78fa      	ldrb	r2, [r7, #3]
2000be72:	4611      	mov	r1, r2
2000be74:	4618      	mov	r0, r3
2000be76:	f7f9 ffbe 	bl	20005df6 <HAL_PCD_EP_Close>
2000be7a:	4603      	mov	r3, r0
2000be7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000be7e:	7bfb      	ldrb	r3, [r7, #15]
2000be80:	4618      	mov	r0, r3
2000be82:	f000 f939 	bl	2000c0f8 <USBD_Get_USB_Status>
2000be86:	4603      	mov	r3, r0
2000be88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000be8a:	7bbb      	ldrb	r3, [r7, #14]
}
2000be8c:	4618      	mov	r0, r3
2000be8e:	3710      	adds	r7, #16
2000be90:	46bd      	mov	sp, r7
2000be92:	bd80      	pop	{r7, pc}

2000be94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000be94:	b580      	push	{r7, lr}
2000be96:	b084      	sub	sp, #16
2000be98:	af00      	add	r7, sp, #0
2000be9a:	6078      	str	r0, [r7, #4]
2000be9c:	460b      	mov	r3, r1
2000be9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bea0:	2300      	movs	r3, #0
2000bea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bea4:	2300      	movs	r3, #0
2000bea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
2000bea8:	687b      	ldr	r3, [r7, #4]
2000beaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000beae:	78fa      	ldrb	r2, [r7, #3]
2000beb0:	4611      	mov	r1, r2
2000beb2:	4618      	mov	r0, r3
2000beb4:	f7fa f876 	bl	20005fa4 <HAL_PCD_EP_SetStall>
2000beb8:	4603      	mov	r3, r0
2000beba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bebc:	7bfb      	ldrb	r3, [r7, #15]
2000bebe:	4618      	mov	r0, r3
2000bec0:	f000 f91a 	bl	2000c0f8 <USBD_Get_USB_Status>
2000bec4:	4603      	mov	r3, r0
2000bec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000bec8:	7bbb      	ldrb	r3, [r7, #14]
}
2000beca:	4618      	mov	r0, r3
2000becc:	3710      	adds	r7, #16
2000bece:	46bd      	mov	sp, r7
2000bed0:	bd80      	pop	{r7, pc}

2000bed2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000bed2:	b580      	push	{r7, lr}
2000bed4:	b084      	sub	sp, #16
2000bed6:	af00      	add	r7, sp, #0
2000bed8:	6078      	str	r0, [r7, #4]
2000beda:	460b      	mov	r3, r1
2000bedc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bede:	2300      	movs	r3, #0
2000bee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bee2:	2300      	movs	r3, #0
2000bee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
2000bee6:	687b      	ldr	r3, [r7, #4]
2000bee8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000beec:	78fa      	ldrb	r2, [r7, #3]
2000beee:	4611      	mov	r1, r2
2000bef0:	4618      	mov	r0, r3
2000bef2:	f7fa f8ba 	bl	2000606a <HAL_PCD_EP_ClrStall>
2000bef6:	4603      	mov	r3, r0
2000bef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000befa:	7bfb      	ldrb	r3, [r7, #15]
2000befc:	4618      	mov	r0, r3
2000befe:	f000 f8fb 	bl	2000c0f8 <USBD_Get_USB_Status>
2000bf02:	4603      	mov	r3, r0
2000bf04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000bf06:	7bbb      	ldrb	r3, [r7, #14]
}
2000bf08:	4618      	mov	r0, r3
2000bf0a:	3710      	adds	r7, #16
2000bf0c:	46bd      	mov	sp, r7
2000bf0e:	bd80      	pop	{r7, pc}

2000bf10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000bf10:	b480      	push	{r7}
2000bf12:	b085      	sub	sp, #20
2000bf14:	af00      	add	r7, sp, #0
2000bf16:	6078      	str	r0, [r7, #4]
2000bf18:	460b      	mov	r3, r1
2000bf1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
2000bf1c:	687b      	ldr	r3, [r7, #4]
2000bf1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bf22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
2000bf24:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000bf28:	2b00      	cmp	r3, #0
2000bf2a:	da0b      	bge.n	2000bf44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
2000bf2c:	78fb      	ldrb	r3, [r7, #3]
2000bf2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000bf32:	68f9      	ldr	r1, [r7, #12]
2000bf34:	4613      	mov	r3, r2
2000bf36:	00db      	lsls	r3, r3, #3
2000bf38:	4413      	add	r3, r2
2000bf3a:	009b      	lsls	r3, r3, #2
2000bf3c:	440b      	add	r3, r1
2000bf3e:	3316      	adds	r3, #22
2000bf40:	781b      	ldrb	r3, [r3, #0]
2000bf42:	e00b      	b.n	2000bf5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
2000bf44:	78fb      	ldrb	r3, [r7, #3]
2000bf46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000bf4a:	68f9      	ldr	r1, [r7, #12]
2000bf4c:	4613      	mov	r3, r2
2000bf4e:	00db      	lsls	r3, r3, #3
2000bf50:	4413      	add	r3, r2
2000bf52:	009b      	lsls	r3, r3, #2
2000bf54:	440b      	add	r3, r1
2000bf56:	f203 2356 	addw	r3, r3, #598	@ 0x256
2000bf5a:	781b      	ldrb	r3, [r3, #0]
  }
}
2000bf5c:	4618      	mov	r0, r3
2000bf5e:	3714      	adds	r7, #20
2000bf60:	46bd      	mov	sp, r7
2000bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
2000bf66:	4770      	bx	lr

2000bf68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
2000bf68:	b580      	push	{r7, lr}
2000bf6a:	b084      	sub	sp, #16
2000bf6c:	af00      	add	r7, sp, #0
2000bf6e:	6078      	str	r0, [r7, #4]
2000bf70:	460b      	mov	r3, r1
2000bf72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bf74:	2300      	movs	r3, #0
2000bf76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bf78:	2300      	movs	r3, #0
2000bf7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
2000bf7c:	687b      	ldr	r3, [r7, #4]
2000bf7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bf82:	78fa      	ldrb	r2, [r7, #3]
2000bf84:	4611      	mov	r1, r2
2000bf86:	4618      	mov	r0, r3
2000bf88:	f7f9 fea7 	bl	20005cda <HAL_PCD_SetAddress>
2000bf8c:	4603      	mov	r3, r0
2000bf8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bf90:	7bfb      	ldrb	r3, [r7, #15]
2000bf92:	4618      	mov	r0, r3
2000bf94:	f000 f8b0 	bl	2000c0f8 <USBD_Get_USB_Status>
2000bf98:	4603      	mov	r3, r0
2000bf9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000bf9c:	7bbb      	ldrb	r3, [r7, #14]
}
2000bf9e:	4618      	mov	r0, r3
2000bfa0:	3710      	adds	r7, #16
2000bfa2:	46bd      	mov	sp, r7
2000bfa4:	bd80      	pop	{r7, pc}

2000bfa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000bfa6:	b580      	push	{r7, lr}
2000bfa8:	b086      	sub	sp, #24
2000bfaa:	af00      	add	r7, sp, #0
2000bfac:	60f8      	str	r0, [r7, #12]
2000bfae:	607a      	str	r2, [r7, #4]
2000bfb0:	603b      	str	r3, [r7, #0]
2000bfb2:	460b      	mov	r3, r1
2000bfb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bfb6:	2300      	movs	r3, #0
2000bfb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bfba:	2300      	movs	r3, #0
2000bfbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
2000bfbe:	68fb      	ldr	r3, [r7, #12]
2000bfc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000bfc4:	7af9      	ldrb	r1, [r7, #11]
2000bfc6:	683b      	ldr	r3, [r7, #0]
2000bfc8:	687a      	ldr	r2, [r7, #4]
2000bfca:	f7f9 ffb1 	bl	20005f30 <HAL_PCD_EP_Transmit>
2000bfce:	4603      	mov	r3, r0
2000bfd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bfd2:	7dfb      	ldrb	r3, [r7, #23]
2000bfd4:	4618      	mov	r0, r3
2000bfd6:	f000 f88f 	bl	2000c0f8 <USBD_Get_USB_Status>
2000bfda:	4603      	mov	r3, r0
2000bfdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000bfde:	7dbb      	ldrb	r3, [r7, #22]
}
2000bfe0:	4618      	mov	r0, r3
2000bfe2:	3718      	adds	r7, #24
2000bfe4:	46bd      	mov	sp, r7
2000bfe6:	bd80      	pop	{r7, pc}

2000bfe8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000bfe8:	b580      	push	{r7, lr}
2000bfea:	b086      	sub	sp, #24
2000bfec:	af00      	add	r7, sp, #0
2000bfee:	60f8      	str	r0, [r7, #12]
2000bff0:	607a      	str	r2, [r7, #4]
2000bff2:	603b      	str	r3, [r7, #0]
2000bff4:	460b      	mov	r3, r1
2000bff6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bff8:	2300      	movs	r3, #0
2000bffa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bffc:	2300      	movs	r3, #0
2000bffe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
2000c000:	68fb      	ldr	r3, [r7, #12]
2000c002:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000c006:	7af9      	ldrb	r1, [r7, #11]
2000c008:	683b      	ldr	r3, [r7, #0]
2000c00a:	687a      	ldr	r2, [r7, #4]
2000c00c:	f7f9 ff3d 	bl	20005e8a <HAL_PCD_EP_Receive>
2000c010:	4603      	mov	r3, r0
2000c012:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000c014:	7dfb      	ldrb	r3, [r7, #23]
2000c016:	4618      	mov	r0, r3
2000c018:	f000 f86e 	bl	2000c0f8 <USBD_Get_USB_Status>
2000c01c:	4603      	mov	r3, r0
2000c01e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000c020:	7dbb      	ldrb	r3, [r7, #22]
}
2000c022:	4618      	mov	r0, r3
2000c024:	3718      	adds	r7, #24
2000c026:	46bd      	mov	sp, r7
2000c028:	bd80      	pop	{r7, pc}

2000c02a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000c02a:	b580      	push	{r7, lr}
2000c02c:	b082      	sub	sp, #8
2000c02e:	af00      	add	r7, sp, #0
2000c030:	6078      	str	r0, [r7, #4]
2000c032:	460b      	mov	r3, r1
2000c034:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
2000c036:	687b      	ldr	r3, [r7, #4]
2000c038:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000c03c:	78fa      	ldrb	r2, [r7, #3]
2000c03e:	4611      	mov	r1, r2
2000c040:	4618      	mov	r0, r3
2000c042:	f7f9 ff5d 	bl	20005f00 <HAL_PCD_EP_GetRxCount>
2000c046:	4603      	mov	r3, r0
}
2000c048:	4618      	mov	r0, r3
2000c04a:	3708      	adds	r7, #8
2000c04c:	46bd      	mov	sp, r7
2000c04e:	bd80      	pop	{r7, pc}

2000c050 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
2000c050:	b580      	push	{r7, lr}
2000c052:	b082      	sub	sp, #8
2000c054:	af00      	add	r7, sp, #0
2000c056:	6078      	str	r0, [r7, #4]
2000c058:	460b      	mov	r3, r1
2000c05a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
2000c05c:	78fb      	ldrb	r3, [r7, #3]
2000c05e:	2b00      	cmp	r3, #0
2000c060:	d002      	beq.n	2000c068 <HAL_PCDEx_LPM_Callback+0x18>
2000c062:	2b01      	cmp	r3, #1
2000c064:	d01f      	beq.n	2000c0a6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
2000c066:	e03b      	b.n	2000c0e0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
2000c068:	687b      	ldr	r3, [r7, #4]
2000c06a:	7adb      	ldrb	r3, [r3, #11]
2000c06c:	2b00      	cmp	r3, #0
2000c06e:	d007      	beq.n	2000c080 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
2000c070:	f000 f83c 	bl	2000c0ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000c074:	4b1c      	ldr	r3, [pc, #112]	@ (2000c0e8 <HAL_PCDEx_LPM_Callback+0x98>)
2000c076:	691b      	ldr	r3, [r3, #16]
2000c078:	4a1b      	ldr	r2, [pc, #108]	@ (2000c0e8 <HAL_PCDEx_LPM_Callback+0x98>)
2000c07a:	f023 0306 	bic.w	r3, r3, #6
2000c07e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
2000c080:	687b      	ldr	r3, [r7, #4]
2000c082:	681b      	ldr	r3, [r3, #0]
2000c084:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000c088:	681b      	ldr	r3, [r3, #0]
2000c08a:	687a      	ldr	r2, [r7, #4]
2000c08c:	6812      	ldr	r2, [r2, #0]
2000c08e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000c092:	f023 0301 	bic.w	r3, r3, #1
2000c096:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
2000c098:	687b      	ldr	r3, [r7, #4]
2000c09a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000c09e:	4618      	mov	r0, r3
2000c0a0:	f7fe fb14 	bl	2000a6cc <USBD_LL_Resume>
    break;
2000c0a4:	e01c      	b.n	2000c0e0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000c0a6:	687b      	ldr	r3, [r7, #4]
2000c0a8:	681b      	ldr	r3, [r3, #0]
2000c0aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000c0ae:	681b      	ldr	r3, [r3, #0]
2000c0b0:	687a      	ldr	r2, [r7, #4]
2000c0b2:	6812      	ldr	r2, [r2, #0]
2000c0b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000c0b8:	f043 0301 	orr.w	r3, r3, #1
2000c0bc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
2000c0be:	687b      	ldr	r3, [r7, #4]
2000c0c0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000c0c4:	4618      	mov	r0, r3
2000c0c6:	f7fe fae5 	bl	2000a694 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
2000c0ca:	687b      	ldr	r3, [r7, #4]
2000c0cc:	7adb      	ldrb	r3, [r3, #11]
2000c0ce:	2b00      	cmp	r3, #0
2000c0d0:	d005      	beq.n	2000c0de <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000c0d2:	4b05      	ldr	r3, [pc, #20]	@ (2000c0e8 <HAL_PCDEx_LPM_Callback+0x98>)
2000c0d4:	691b      	ldr	r3, [r3, #16]
2000c0d6:	4a04      	ldr	r2, [pc, #16]	@ (2000c0e8 <HAL_PCDEx_LPM_Callback+0x98>)
2000c0d8:	f043 0306 	orr.w	r3, r3, #6
2000c0dc:	6113      	str	r3, [r2, #16]
    break;
2000c0de:	bf00      	nop
}
2000c0e0:	bf00      	nop
2000c0e2:	3708      	adds	r7, #8
2000c0e4:	46bd      	mov	sp, r7
2000c0e6:	bd80      	pop	{r7, pc}
2000c0e8:	e000ed00 	.word	0xe000ed00

2000c0ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
2000c0ec:	b580      	push	{r7, lr}
2000c0ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
2000c0f0:	f7f7 fb5a 	bl	200037a8 <SystemClock_Config>
}
2000c0f4:	bf00      	nop
2000c0f6:	bd80      	pop	{r7, pc}

2000c0f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
2000c0f8:	b480      	push	{r7}
2000c0fa:	b085      	sub	sp, #20
2000c0fc:	af00      	add	r7, sp, #0
2000c0fe:	4603      	mov	r3, r0
2000c100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000c102:	2300      	movs	r3, #0
2000c104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
2000c106:	79fb      	ldrb	r3, [r7, #7]
2000c108:	2b03      	cmp	r3, #3
2000c10a:	d817      	bhi.n	2000c13c <USBD_Get_USB_Status+0x44>
2000c10c:	a201      	add	r2, pc, #4	@ (adr r2, 2000c114 <USBD_Get_USB_Status+0x1c>)
2000c10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000c112:	bf00      	nop
2000c114:	2000c125 	.word	0x2000c125
2000c118:	2000c12b 	.word	0x2000c12b
2000c11c:	2000c131 	.word	0x2000c131
2000c120:	2000c137 	.word	0x2000c137
  {
    case HAL_OK :
      usb_status = USBD_OK;
2000c124:	2300      	movs	r3, #0
2000c126:	73fb      	strb	r3, [r7, #15]
    break;
2000c128:	e00b      	b.n	2000c142 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
2000c12a:	2303      	movs	r3, #3
2000c12c:	73fb      	strb	r3, [r7, #15]
    break;
2000c12e:	e008      	b.n	2000c142 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
2000c130:	2301      	movs	r3, #1
2000c132:	73fb      	strb	r3, [r7, #15]
    break;
2000c134:	e005      	b.n	2000c142 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
2000c136:	2303      	movs	r3, #3
2000c138:	73fb      	strb	r3, [r7, #15]
    break;
2000c13a:	e002      	b.n	2000c142 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
2000c13c:	2303      	movs	r3, #3
2000c13e:	73fb      	strb	r3, [r7, #15]
    break;
2000c140:	bf00      	nop
  }
  return usb_status;
2000c142:	7bfb      	ldrb	r3, [r7, #15]
}
2000c144:	4618      	mov	r0, r3
2000c146:	3714      	adds	r7, #20
2000c148:	46bd      	mov	sp, r7
2000c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c14e:	4770      	bx	lr

2000c150 <malloc>:
2000c150:	4b02      	ldr	r3, [pc, #8]	@ (2000c15c <malloc+0xc>)
2000c152:	4601      	mov	r1, r0
2000c154:	6818      	ldr	r0, [r3, #0]
2000c156:	f000 b82d 	b.w	2000c1b4 <_malloc_r>
2000c15a:	bf00      	nop
2000c15c:	2000c5c4 	.word	0x2000c5c4

2000c160 <free>:
2000c160:	4b02      	ldr	r3, [pc, #8]	@ (2000c16c <free+0xc>)
2000c162:	4601      	mov	r1, r0
2000c164:	6818      	ldr	r0, [r3, #0]
2000c166:	f000 b903 	b.w	2000c370 <_free_r>
2000c16a:	bf00      	nop
2000c16c:	2000c5c4 	.word	0x2000c5c4

2000c170 <sbrk_aligned>:
2000c170:	b570      	push	{r4, r5, r6, lr}
2000c172:	4e0f      	ldr	r6, [pc, #60]	@ (2000c1b0 <sbrk_aligned+0x40>)
2000c174:	460c      	mov	r4, r1
2000c176:	6831      	ldr	r1, [r6, #0]
2000c178:	4605      	mov	r5, r0
2000c17a:	b911      	cbnz	r1, 2000c182 <sbrk_aligned+0x12>
2000c17c:	f000 f8ae 	bl	2000c2dc <_sbrk_r>
2000c180:	6030      	str	r0, [r6, #0]
2000c182:	4621      	mov	r1, r4
2000c184:	4628      	mov	r0, r5
2000c186:	f000 f8a9 	bl	2000c2dc <_sbrk_r>
2000c18a:	1c43      	adds	r3, r0, #1
2000c18c:	d103      	bne.n	2000c196 <sbrk_aligned+0x26>
2000c18e:	f04f 34ff 	mov.w	r4, #4294967295
2000c192:	4620      	mov	r0, r4
2000c194:	bd70      	pop	{r4, r5, r6, pc}
2000c196:	1cc4      	adds	r4, r0, #3
2000c198:	f024 0403 	bic.w	r4, r4, #3
2000c19c:	42a0      	cmp	r0, r4
2000c19e:	d0f8      	beq.n	2000c192 <sbrk_aligned+0x22>
2000c1a0:	1a21      	subs	r1, r4, r0
2000c1a2:	4628      	mov	r0, r5
2000c1a4:	f000 f89a 	bl	2000c2dc <_sbrk_r>
2000c1a8:	3001      	adds	r0, #1
2000c1aa:	d1f2      	bne.n	2000c192 <sbrk_aligned+0x22>
2000c1ac:	e7ef      	b.n	2000c18e <sbrk_aligned+0x1e>
2000c1ae:	bf00      	nop
2000c1b0:	2000e4dc 	.word	0x2000e4dc

2000c1b4 <_malloc_r>:
2000c1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000c1b8:	1ccd      	adds	r5, r1, #3
2000c1ba:	f025 0503 	bic.w	r5, r5, #3
2000c1be:	3508      	adds	r5, #8
2000c1c0:	2d0c      	cmp	r5, #12
2000c1c2:	bf38      	it	cc
2000c1c4:	250c      	movcc	r5, #12
2000c1c6:	2d00      	cmp	r5, #0
2000c1c8:	4606      	mov	r6, r0
2000c1ca:	db01      	blt.n	2000c1d0 <_malloc_r+0x1c>
2000c1cc:	42a9      	cmp	r1, r5
2000c1ce:	d904      	bls.n	2000c1da <_malloc_r+0x26>
2000c1d0:	230c      	movs	r3, #12
2000c1d2:	6033      	str	r3, [r6, #0]
2000c1d4:	2000      	movs	r0, #0
2000c1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000c1da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2000c2b0 <_malloc_r+0xfc>
2000c1de:	f000 f869 	bl	2000c2b4 <__malloc_lock>
2000c1e2:	f8d8 3000 	ldr.w	r3, [r8]
2000c1e6:	461c      	mov	r4, r3
2000c1e8:	bb44      	cbnz	r4, 2000c23c <_malloc_r+0x88>
2000c1ea:	4629      	mov	r1, r5
2000c1ec:	4630      	mov	r0, r6
2000c1ee:	f7ff ffbf 	bl	2000c170 <sbrk_aligned>
2000c1f2:	1c43      	adds	r3, r0, #1
2000c1f4:	4604      	mov	r4, r0
2000c1f6:	d158      	bne.n	2000c2aa <_malloc_r+0xf6>
2000c1f8:	f8d8 4000 	ldr.w	r4, [r8]
2000c1fc:	4627      	mov	r7, r4
2000c1fe:	2f00      	cmp	r7, #0
2000c200:	d143      	bne.n	2000c28a <_malloc_r+0xd6>
2000c202:	2c00      	cmp	r4, #0
2000c204:	d04b      	beq.n	2000c29e <_malloc_r+0xea>
2000c206:	6823      	ldr	r3, [r4, #0]
2000c208:	4639      	mov	r1, r7
2000c20a:	4630      	mov	r0, r6
2000c20c:	eb04 0903 	add.w	r9, r4, r3
2000c210:	f000 f864 	bl	2000c2dc <_sbrk_r>
2000c214:	4581      	cmp	r9, r0
2000c216:	d142      	bne.n	2000c29e <_malloc_r+0xea>
2000c218:	6821      	ldr	r1, [r4, #0]
2000c21a:	1a6d      	subs	r5, r5, r1
2000c21c:	4629      	mov	r1, r5
2000c21e:	4630      	mov	r0, r6
2000c220:	f7ff ffa6 	bl	2000c170 <sbrk_aligned>
2000c224:	3001      	adds	r0, #1
2000c226:	d03a      	beq.n	2000c29e <_malloc_r+0xea>
2000c228:	6823      	ldr	r3, [r4, #0]
2000c22a:	442b      	add	r3, r5
2000c22c:	6023      	str	r3, [r4, #0]
2000c22e:	f8d8 3000 	ldr.w	r3, [r8]
2000c232:	685a      	ldr	r2, [r3, #4]
2000c234:	bb62      	cbnz	r2, 2000c290 <_malloc_r+0xdc>
2000c236:	f8c8 7000 	str.w	r7, [r8]
2000c23a:	e00f      	b.n	2000c25c <_malloc_r+0xa8>
2000c23c:	6822      	ldr	r2, [r4, #0]
2000c23e:	1b52      	subs	r2, r2, r5
2000c240:	d420      	bmi.n	2000c284 <_malloc_r+0xd0>
2000c242:	2a0b      	cmp	r2, #11
2000c244:	d917      	bls.n	2000c276 <_malloc_r+0xc2>
2000c246:	1961      	adds	r1, r4, r5
2000c248:	42a3      	cmp	r3, r4
2000c24a:	6025      	str	r5, [r4, #0]
2000c24c:	bf18      	it	ne
2000c24e:	6059      	strne	r1, [r3, #4]
2000c250:	6863      	ldr	r3, [r4, #4]
2000c252:	bf08      	it	eq
2000c254:	f8c8 1000 	streq.w	r1, [r8]
2000c258:	5162      	str	r2, [r4, r5]
2000c25a:	604b      	str	r3, [r1, #4]
2000c25c:	4630      	mov	r0, r6
2000c25e:	f000 f82f 	bl	2000c2c0 <__malloc_unlock>
2000c262:	f104 000b 	add.w	r0, r4, #11
2000c266:	1d23      	adds	r3, r4, #4
2000c268:	f020 0007 	bic.w	r0, r0, #7
2000c26c:	1ac2      	subs	r2, r0, r3
2000c26e:	bf1c      	itt	ne
2000c270:	1a1b      	subne	r3, r3, r0
2000c272:	50a3      	strne	r3, [r4, r2]
2000c274:	e7af      	b.n	2000c1d6 <_malloc_r+0x22>
2000c276:	6862      	ldr	r2, [r4, #4]
2000c278:	42a3      	cmp	r3, r4
2000c27a:	bf0c      	ite	eq
2000c27c:	f8c8 2000 	streq.w	r2, [r8]
2000c280:	605a      	strne	r2, [r3, #4]
2000c282:	e7eb      	b.n	2000c25c <_malloc_r+0xa8>
2000c284:	4623      	mov	r3, r4
2000c286:	6864      	ldr	r4, [r4, #4]
2000c288:	e7ae      	b.n	2000c1e8 <_malloc_r+0x34>
2000c28a:	463c      	mov	r4, r7
2000c28c:	687f      	ldr	r7, [r7, #4]
2000c28e:	e7b6      	b.n	2000c1fe <_malloc_r+0x4a>
2000c290:	461a      	mov	r2, r3
2000c292:	685b      	ldr	r3, [r3, #4]
2000c294:	42a3      	cmp	r3, r4
2000c296:	d1fb      	bne.n	2000c290 <_malloc_r+0xdc>
2000c298:	2300      	movs	r3, #0
2000c29a:	6053      	str	r3, [r2, #4]
2000c29c:	e7de      	b.n	2000c25c <_malloc_r+0xa8>
2000c29e:	230c      	movs	r3, #12
2000c2a0:	6033      	str	r3, [r6, #0]
2000c2a2:	4630      	mov	r0, r6
2000c2a4:	f000 f80c 	bl	2000c2c0 <__malloc_unlock>
2000c2a8:	e794      	b.n	2000c1d4 <_malloc_r+0x20>
2000c2aa:	6005      	str	r5, [r0, #0]
2000c2ac:	e7d6      	b.n	2000c25c <_malloc_r+0xa8>
2000c2ae:	bf00      	nop
2000c2b0:	2000e4e0 	.word	0x2000e4e0

2000c2b4 <__malloc_lock>:
2000c2b4:	4801      	ldr	r0, [pc, #4]	@ (2000c2bc <__malloc_lock+0x8>)
2000c2b6:	f000 b84b 	b.w	2000c350 <__retarget_lock_acquire_recursive>
2000c2ba:	bf00      	nop
2000c2bc:	2000e620 	.word	0x2000e620

2000c2c0 <__malloc_unlock>:
2000c2c0:	4801      	ldr	r0, [pc, #4]	@ (2000c2c8 <__malloc_unlock+0x8>)
2000c2c2:	f000 b846 	b.w	2000c352 <__retarget_lock_release_recursive>
2000c2c6:	bf00      	nop
2000c2c8:	2000e620 	.word	0x2000e620

2000c2cc <memset>:
2000c2cc:	4402      	add	r2, r0
2000c2ce:	4603      	mov	r3, r0
2000c2d0:	4293      	cmp	r3, r2
2000c2d2:	d100      	bne.n	2000c2d6 <memset+0xa>
2000c2d4:	4770      	bx	lr
2000c2d6:	f803 1b01 	strb.w	r1, [r3], #1
2000c2da:	e7f9      	b.n	2000c2d0 <memset+0x4>

2000c2dc <_sbrk_r>:
2000c2dc:	b538      	push	{r3, r4, r5, lr}
2000c2de:	4d06      	ldr	r5, [pc, #24]	@ (2000c2f8 <_sbrk_r+0x1c>)
2000c2e0:	2300      	movs	r3, #0
2000c2e2:	4604      	mov	r4, r0
2000c2e4:	4608      	mov	r0, r1
2000c2e6:	602b      	str	r3, [r5, #0]
2000c2e8:	f7f7 ffc0 	bl	2000426c <_sbrk>
2000c2ec:	1c43      	adds	r3, r0, #1
2000c2ee:	d102      	bne.n	2000c2f6 <_sbrk_r+0x1a>
2000c2f0:	682b      	ldr	r3, [r5, #0]
2000c2f2:	b103      	cbz	r3, 2000c2f6 <_sbrk_r+0x1a>
2000c2f4:	6023      	str	r3, [r4, #0]
2000c2f6:	bd38      	pop	{r3, r4, r5, pc}
2000c2f8:	2000e61c 	.word	0x2000e61c

2000c2fc <__errno>:
2000c2fc:	4b01      	ldr	r3, [pc, #4]	@ (2000c304 <__errno+0x8>)
2000c2fe:	6818      	ldr	r0, [r3, #0]
2000c300:	4770      	bx	lr
2000c302:	bf00      	nop
2000c304:	2000c5c4 	.word	0x2000c5c4

2000c308 <__libc_init_array>:
2000c308:	b570      	push	{r4, r5, r6, lr}
2000c30a:	4d0d      	ldr	r5, [pc, #52]	@ (2000c340 <__libc_init_array+0x38>)
2000c30c:	4c0d      	ldr	r4, [pc, #52]	@ (2000c344 <__libc_init_array+0x3c>)
2000c30e:	1b64      	subs	r4, r4, r5
2000c310:	10a4      	asrs	r4, r4, #2
2000c312:	2600      	movs	r6, #0
2000c314:	42a6      	cmp	r6, r4
2000c316:	d109      	bne.n	2000c32c <__libc_init_array+0x24>
2000c318:	4d0b      	ldr	r5, [pc, #44]	@ (2000c348 <__libc_init_array+0x40>)
2000c31a:	4c0c      	ldr	r4, [pc, #48]	@ (2000c34c <__libc_init_array+0x44>)
2000c31c:	f000 f872 	bl	2000c404 <_init>
2000c320:	1b64      	subs	r4, r4, r5
2000c322:	10a4      	asrs	r4, r4, #2
2000c324:	2600      	movs	r6, #0
2000c326:	42a6      	cmp	r6, r4
2000c328:	d105      	bne.n	2000c336 <__libc_init_array+0x2e>
2000c32a:	bd70      	pop	{r4, r5, r6, pc}
2000c32c:	f855 3b04 	ldr.w	r3, [r5], #4
2000c330:	4798      	blx	r3
2000c332:	3601      	adds	r6, #1
2000c334:	e7ee      	b.n	2000c314 <__libc_init_array+0xc>
2000c336:	f855 3b04 	ldr.w	r3, [r5], #4
2000c33a:	4798      	blx	r3
2000c33c:	3601      	adds	r6, #1
2000c33e:	e7f2      	b.n	2000c326 <__libc_init_array+0x1e>
2000c340:	2000c484 	.word	0x2000c484
2000c344:	2000c484 	.word	0x2000c484
2000c348:	2000c484 	.word	0x2000c484
2000c34c:	2000c488 	.word	0x2000c488

2000c350 <__retarget_lock_acquire_recursive>:
2000c350:	4770      	bx	lr

2000c352 <__retarget_lock_release_recursive>:
2000c352:	4770      	bx	lr

2000c354 <memcpy>:
2000c354:	440a      	add	r2, r1
2000c356:	4291      	cmp	r1, r2
2000c358:	f100 33ff 	add.w	r3, r0, #4294967295
2000c35c:	d100      	bne.n	2000c360 <memcpy+0xc>
2000c35e:	4770      	bx	lr
2000c360:	b510      	push	{r4, lr}
2000c362:	f811 4b01 	ldrb.w	r4, [r1], #1
2000c366:	f803 4f01 	strb.w	r4, [r3, #1]!
2000c36a:	4291      	cmp	r1, r2
2000c36c:	d1f9      	bne.n	2000c362 <memcpy+0xe>
2000c36e:	bd10      	pop	{r4, pc}

2000c370 <_free_r>:
2000c370:	b538      	push	{r3, r4, r5, lr}
2000c372:	4605      	mov	r5, r0
2000c374:	2900      	cmp	r1, #0
2000c376:	d041      	beq.n	2000c3fc <_free_r+0x8c>
2000c378:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000c37c:	1f0c      	subs	r4, r1, #4
2000c37e:	2b00      	cmp	r3, #0
2000c380:	bfb8      	it	lt
2000c382:	18e4      	addlt	r4, r4, r3
2000c384:	f7ff ff96 	bl	2000c2b4 <__malloc_lock>
2000c388:	4a1d      	ldr	r2, [pc, #116]	@ (2000c400 <_free_r+0x90>)
2000c38a:	6813      	ldr	r3, [r2, #0]
2000c38c:	b933      	cbnz	r3, 2000c39c <_free_r+0x2c>
2000c38e:	6063      	str	r3, [r4, #4]
2000c390:	6014      	str	r4, [r2, #0]
2000c392:	4628      	mov	r0, r5
2000c394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000c398:	f7ff bf92 	b.w	2000c2c0 <__malloc_unlock>
2000c39c:	42a3      	cmp	r3, r4
2000c39e:	d908      	bls.n	2000c3b2 <_free_r+0x42>
2000c3a0:	6820      	ldr	r0, [r4, #0]
2000c3a2:	1821      	adds	r1, r4, r0
2000c3a4:	428b      	cmp	r3, r1
2000c3a6:	bf01      	itttt	eq
2000c3a8:	6819      	ldreq	r1, [r3, #0]
2000c3aa:	685b      	ldreq	r3, [r3, #4]
2000c3ac:	1809      	addeq	r1, r1, r0
2000c3ae:	6021      	streq	r1, [r4, #0]
2000c3b0:	e7ed      	b.n	2000c38e <_free_r+0x1e>
2000c3b2:	461a      	mov	r2, r3
2000c3b4:	685b      	ldr	r3, [r3, #4]
2000c3b6:	b10b      	cbz	r3, 2000c3bc <_free_r+0x4c>
2000c3b8:	42a3      	cmp	r3, r4
2000c3ba:	d9fa      	bls.n	2000c3b2 <_free_r+0x42>
2000c3bc:	6811      	ldr	r1, [r2, #0]
2000c3be:	1850      	adds	r0, r2, r1
2000c3c0:	42a0      	cmp	r0, r4
2000c3c2:	d10b      	bne.n	2000c3dc <_free_r+0x6c>
2000c3c4:	6820      	ldr	r0, [r4, #0]
2000c3c6:	4401      	add	r1, r0
2000c3c8:	1850      	adds	r0, r2, r1
2000c3ca:	4283      	cmp	r3, r0
2000c3cc:	6011      	str	r1, [r2, #0]
2000c3ce:	d1e0      	bne.n	2000c392 <_free_r+0x22>
2000c3d0:	6818      	ldr	r0, [r3, #0]
2000c3d2:	685b      	ldr	r3, [r3, #4]
2000c3d4:	6053      	str	r3, [r2, #4]
2000c3d6:	4408      	add	r0, r1
2000c3d8:	6010      	str	r0, [r2, #0]
2000c3da:	e7da      	b.n	2000c392 <_free_r+0x22>
2000c3dc:	d902      	bls.n	2000c3e4 <_free_r+0x74>
2000c3de:	230c      	movs	r3, #12
2000c3e0:	602b      	str	r3, [r5, #0]
2000c3e2:	e7d6      	b.n	2000c392 <_free_r+0x22>
2000c3e4:	6820      	ldr	r0, [r4, #0]
2000c3e6:	1821      	adds	r1, r4, r0
2000c3e8:	428b      	cmp	r3, r1
2000c3ea:	bf04      	itt	eq
2000c3ec:	6819      	ldreq	r1, [r3, #0]
2000c3ee:	685b      	ldreq	r3, [r3, #4]
2000c3f0:	6063      	str	r3, [r4, #4]
2000c3f2:	bf04      	itt	eq
2000c3f4:	1809      	addeq	r1, r1, r0
2000c3f6:	6021      	streq	r1, [r4, #0]
2000c3f8:	6054      	str	r4, [r2, #4]
2000c3fa:	e7ca      	b.n	2000c392 <_free_r+0x22>
2000c3fc:	bd38      	pop	{r3, r4, r5, pc}
2000c3fe:	bf00      	nop
2000c400:	2000e4e0 	.word	0x2000e4e0

2000c404 <_init>:
2000c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000c406:	bf00      	nop
2000c408:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000c40a:	bc08      	pop	{r3}
2000c40c:	469e      	mov	lr, r3
2000c40e:	4770      	bx	lr

2000c410 <_fini>:
2000c410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000c412:	bf00      	nop
2000c414:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000c416:	bc08      	pop	{r3}
2000c418:	469e      	mov	lr, r3
2000c41a:	4770      	bx	lr
