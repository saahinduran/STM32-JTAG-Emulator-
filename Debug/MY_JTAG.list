
MY_JTAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  200001c8  200001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  20004e88  20004e88  00005e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20004ea0  20004ea0  00005ffc  2**0
                  CONTENTS
  4 .ARM          00000008  20004ea0  20004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20004ea8  20004ffc  00005ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20004ea8  20004ea8  00005ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  20004eac  20004eac  00005eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20004eb0  20004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20004ebc  20004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20004f5c  20004f5c  00005f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000074c  20004ffc  20004ffc  00005ffc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005748  20005748  00005ffc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00005ffc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000141b6  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ae1  00000000  00000000  0001a1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001028  00000000  00000000  0001ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c7e  00000000  00000000  0001dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027603  00000000  00000000  0001e96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013dee  00000000  00000000  00045f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f10b3  00000000  00000000  00059d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014ae12  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000043d8  00000000  00000000  0014ae58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  0014f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c8 <__do_global_dtors_aux>:
200001c8:	b510      	push	{r4, lr}
200001ca:	4c05      	ldr	r4, [pc, #20]	@ (200001e0 <__do_global_dtors_aux+0x18>)
200001cc:	7823      	ldrb	r3, [r4, #0]
200001ce:	b933      	cbnz	r3, 200001de <__do_global_dtors_aux+0x16>
200001d0:	4b04      	ldr	r3, [pc, #16]	@ (200001e4 <__do_global_dtors_aux+0x1c>)
200001d2:	b113      	cbz	r3, 200001da <__do_global_dtors_aux+0x12>
200001d4:	4804      	ldr	r0, [pc, #16]	@ (200001e8 <__do_global_dtors_aux+0x20>)
200001d6:	f3af 8000 	nop.w
200001da:	2301      	movs	r3, #1
200001dc:	7023      	strb	r3, [r4, #0]
200001de:	bd10      	pop	{r4, pc}
200001e0:	20004ffc 	.word	0x20004ffc
200001e4:	00000000 	.word	0x00000000
200001e8:	20004e70 	.word	0x20004e70

200001ec <frame_dummy>:
200001ec:	b508      	push	{r3, lr}
200001ee:	4b03      	ldr	r3, [pc, #12]	@ (200001fc <frame_dummy+0x10>)
200001f0:	b11b      	cbz	r3, 200001fa <frame_dummy+0xe>
200001f2:	4903      	ldr	r1, [pc, #12]	@ (20000200 <frame_dummy+0x14>)
200001f4:	4803      	ldr	r0, [pc, #12]	@ (20000204 <frame_dummy+0x18>)
200001f6:	f3af 8000 	nop.w
200001fa:	bd08      	pop	{r3, pc}
200001fc:	00000000 	.word	0x00000000
20000200:	20005000 	.word	0x20005000
20000204:	20004e70 	.word	0x20004e70

20000208 <__aeabi_uldivmod>:
20000208:	b953      	cbnz	r3, 20000220 <__aeabi_uldivmod+0x18>
2000020a:	b94a      	cbnz	r2, 20000220 <__aeabi_uldivmod+0x18>
2000020c:	2900      	cmp	r1, #0
2000020e:	bf08      	it	eq
20000210:	2800      	cmpeq	r0, #0
20000212:	bf1c      	itt	ne
20000214:	f04f 31ff 	movne.w	r1, #4294967295
20000218:	f04f 30ff 	movne.w	r0, #4294967295
2000021c:	f000 b96a 	b.w	200004f4 <__aeabi_idiv0>
20000220:	f1ad 0c08 	sub.w	ip, sp, #8
20000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000228:	f000 f806 	bl	20000238 <__udivmoddi4>
2000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
20000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000234:	b004      	add	sp, #16
20000236:	4770      	bx	lr

20000238 <__udivmoddi4>:
20000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000023c:	9d08      	ldr	r5, [sp, #32]
2000023e:	460c      	mov	r4, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14e      	bne.n	200002e2 <__udivmoddi4+0xaa>
20000244:	4694      	mov	ip, r2
20000246:	458c      	cmp	ip, r1
20000248:	4686      	mov	lr, r0
2000024a:	fab2 f282 	clz	r2, r2
2000024e:	d962      	bls.n	20000316 <__udivmoddi4+0xde>
20000250:	b14a      	cbz	r2, 20000266 <__udivmoddi4+0x2e>
20000252:	f1c2 0320 	rsb	r3, r2, #32
20000256:	4091      	lsls	r1, r2
20000258:	fa20 f303 	lsr.w	r3, r0, r3
2000025c:	fa0c fc02 	lsl.w	ip, ip, r2
20000260:	4319      	orrs	r1, r3
20000262:	fa00 fe02 	lsl.w	lr, r0, r2
20000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000026a:	fa1f f68c 	uxth.w	r6, ip
2000026e:	fbb1 f4f7 	udiv	r4, r1, r7
20000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000276:	fb07 1114 	mls	r1, r7, r4, r1
2000027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000027e:	fb04 f106 	mul.w	r1, r4, r6
20000282:	4299      	cmp	r1, r3
20000284:	d90a      	bls.n	2000029c <__udivmoddi4+0x64>
20000286:	eb1c 0303 	adds.w	r3, ip, r3
2000028a:	f104 30ff 	add.w	r0, r4, #4294967295
2000028e:	f080 8112 	bcs.w	200004b6 <__udivmoddi4+0x27e>
20000292:	4299      	cmp	r1, r3
20000294:	f240 810f 	bls.w	200004b6 <__udivmoddi4+0x27e>
20000298:	3c02      	subs	r4, #2
2000029a:	4463      	add	r3, ip
2000029c:	1a59      	subs	r1, r3, r1
2000029e:	fa1f f38e 	uxth.w	r3, lr
200002a2:	fbb1 f0f7 	udiv	r0, r1, r7
200002a6:	fb07 1110 	mls	r1, r7, r0, r1
200002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200002ae:	fb00 f606 	mul.w	r6, r0, r6
200002b2:	429e      	cmp	r6, r3
200002b4:	d90a      	bls.n	200002cc <__udivmoddi4+0x94>
200002b6:	eb1c 0303 	adds.w	r3, ip, r3
200002ba:	f100 31ff 	add.w	r1, r0, #4294967295
200002be:	f080 80fc 	bcs.w	200004ba <__udivmoddi4+0x282>
200002c2:	429e      	cmp	r6, r3
200002c4:	f240 80f9 	bls.w	200004ba <__udivmoddi4+0x282>
200002c8:	4463      	add	r3, ip
200002ca:	3802      	subs	r0, #2
200002cc:	1b9b      	subs	r3, r3, r6
200002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200002d2:	2100      	movs	r1, #0
200002d4:	b11d      	cbz	r5, 200002de <__udivmoddi4+0xa6>
200002d6:	40d3      	lsrs	r3, r2
200002d8:	2200      	movs	r2, #0
200002da:	e9c5 3200 	strd	r3, r2, [r5]
200002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002e2:	428b      	cmp	r3, r1
200002e4:	d905      	bls.n	200002f2 <__udivmoddi4+0xba>
200002e6:	b10d      	cbz	r5, 200002ec <__udivmoddi4+0xb4>
200002e8:	e9c5 0100 	strd	r0, r1, [r5]
200002ec:	2100      	movs	r1, #0
200002ee:	4608      	mov	r0, r1
200002f0:	e7f5      	b.n	200002de <__udivmoddi4+0xa6>
200002f2:	fab3 f183 	clz	r1, r3
200002f6:	2900      	cmp	r1, #0
200002f8:	d146      	bne.n	20000388 <__udivmoddi4+0x150>
200002fa:	42a3      	cmp	r3, r4
200002fc:	d302      	bcc.n	20000304 <__udivmoddi4+0xcc>
200002fe:	4290      	cmp	r0, r2
20000300:	f0c0 80f0 	bcc.w	200004e4 <__udivmoddi4+0x2ac>
20000304:	1a86      	subs	r6, r0, r2
20000306:	eb64 0303 	sbc.w	r3, r4, r3
2000030a:	2001      	movs	r0, #1
2000030c:	2d00      	cmp	r5, #0
2000030e:	d0e6      	beq.n	200002de <__udivmoddi4+0xa6>
20000310:	e9c5 6300 	strd	r6, r3, [r5]
20000314:	e7e3      	b.n	200002de <__udivmoddi4+0xa6>
20000316:	2a00      	cmp	r2, #0
20000318:	f040 8090 	bne.w	2000043c <__udivmoddi4+0x204>
2000031c:	eba1 040c 	sub.w	r4, r1, ip
20000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000324:	fa1f f78c 	uxth.w	r7, ip
20000328:	2101      	movs	r1, #1
2000032a:	fbb4 f6f8 	udiv	r6, r4, r8
2000032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000332:	fb08 4416 	mls	r4, r8, r6, r4
20000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000033a:	fb07 f006 	mul.w	r0, r7, r6
2000033e:	4298      	cmp	r0, r3
20000340:	d908      	bls.n	20000354 <__udivmoddi4+0x11c>
20000342:	eb1c 0303 	adds.w	r3, ip, r3
20000346:	f106 34ff 	add.w	r4, r6, #4294967295
2000034a:	d202      	bcs.n	20000352 <__udivmoddi4+0x11a>
2000034c:	4298      	cmp	r0, r3
2000034e:	f200 80cd 	bhi.w	200004ec <__udivmoddi4+0x2b4>
20000352:	4626      	mov	r6, r4
20000354:	1a1c      	subs	r4, r3, r0
20000356:	fa1f f38e 	uxth.w	r3, lr
2000035a:	fbb4 f0f8 	udiv	r0, r4, r8
2000035e:	fb08 4410 	mls	r4, r8, r0, r4
20000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000366:	fb00 f707 	mul.w	r7, r0, r7
2000036a:	429f      	cmp	r7, r3
2000036c:	d908      	bls.n	20000380 <__udivmoddi4+0x148>
2000036e:	eb1c 0303 	adds.w	r3, ip, r3
20000372:	f100 34ff 	add.w	r4, r0, #4294967295
20000376:	d202      	bcs.n	2000037e <__udivmoddi4+0x146>
20000378:	429f      	cmp	r7, r3
2000037a:	f200 80b0 	bhi.w	200004de <__udivmoddi4+0x2a6>
2000037e:	4620      	mov	r0, r4
20000380:	1bdb      	subs	r3, r3, r7
20000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000386:	e7a5      	b.n	200002d4 <__udivmoddi4+0x9c>
20000388:	f1c1 0620 	rsb	r6, r1, #32
2000038c:	408b      	lsls	r3, r1
2000038e:	fa22 f706 	lsr.w	r7, r2, r6
20000392:	431f      	orrs	r7, r3
20000394:	fa20 fc06 	lsr.w	ip, r0, r6
20000398:	fa04 f301 	lsl.w	r3, r4, r1
2000039c:	ea43 030c 	orr.w	r3, r3, ip
200003a0:	40f4      	lsrs	r4, r6
200003a2:	fa00 f801 	lsl.w	r8, r0, r1
200003a6:	0c38      	lsrs	r0, r7, #16
200003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
200003ac:	fbb4 fef0 	udiv	lr, r4, r0
200003b0:	fa1f fc87 	uxth.w	ip, r7
200003b4:	fb00 441e 	mls	r4, r0, lr, r4
200003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003bc:	fb0e f90c 	mul.w	r9, lr, ip
200003c0:	45a1      	cmp	r9, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	d90a      	bls.n	200003de <__udivmoddi4+0x1a6>
200003c8:	193c      	adds	r4, r7, r4
200003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
200003ce:	f080 8084 	bcs.w	200004da <__udivmoddi4+0x2a2>
200003d2:	45a1      	cmp	r9, r4
200003d4:	f240 8081 	bls.w	200004da <__udivmoddi4+0x2a2>
200003d8:	f1ae 0e02 	sub.w	lr, lr, #2
200003dc:	443c      	add	r4, r7
200003de:	eba4 0409 	sub.w	r4, r4, r9
200003e2:	fa1f f983 	uxth.w	r9, r3
200003e6:	fbb4 f3f0 	udiv	r3, r4, r0
200003ea:	fb00 4413 	mls	r4, r0, r3, r4
200003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003f2:	fb03 fc0c 	mul.w	ip, r3, ip
200003f6:	45a4      	cmp	ip, r4
200003f8:	d907      	bls.n	2000040a <__udivmoddi4+0x1d2>
200003fa:	193c      	adds	r4, r7, r4
200003fc:	f103 30ff 	add.w	r0, r3, #4294967295
20000400:	d267      	bcs.n	200004d2 <__udivmoddi4+0x29a>
20000402:	45a4      	cmp	ip, r4
20000404:	d965      	bls.n	200004d2 <__udivmoddi4+0x29a>
20000406:	3b02      	subs	r3, #2
20000408:	443c      	add	r4, r7
2000040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
2000040e:	fba0 9302 	umull	r9, r3, r0, r2
20000412:	eba4 040c 	sub.w	r4, r4, ip
20000416:	429c      	cmp	r4, r3
20000418:	46ce      	mov	lr, r9
2000041a:	469c      	mov	ip, r3
2000041c:	d351      	bcc.n	200004c2 <__udivmoddi4+0x28a>
2000041e:	d04e      	beq.n	200004be <__udivmoddi4+0x286>
20000420:	b155      	cbz	r5, 20000438 <__udivmoddi4+0x200>
20000422:	ebb8 030e 	subs.w	r3, r8, lr
20000426:	eb64 040c 	sbc.w	r4, r4, ip
2000042a:	fa04 f606 	lsl.w	r6, r4, r6
2000042e:	40cb      	lsrs	r3, r1
20000430:	431e      	orrs	r6, r3
20000432:	40cc      	lsrs	r4, r1
20000434:	e9c5 6400 	strd	r6, r4, [r5]
20000438:	2100      	movs	r1, #0
2000043a:	e750      	b.n	200002de <__udivmoddi4+0xa6>
2000043c:	f1c2 0320 	rsb	r3, r2, #32
20000440:	fa20 f103 	lsr.w	r1, r0, r3
20000444:	fa0c fc02 	lsl.w	ip, ip, r2
20000448:	fa24 f303 	lsr.w	r3, r4, r3
2000044c:	4094      	lsls	r4, r2
2000044e:	430c      	orrs	r4, r1
20000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000454:	fa00 fe02 	lsl.w	lr, r0, r2
20000458:	fa1f f78c 	uxth.w	r7, ip
2000045c:	fbb3 f0f8 	udiv	r0, r3, r8
20000460:	fb08 3110 	mls	r1, r8, r0, r3
20000464:	0c23      	lsrs	r3, r4, #16
20000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000046a:	fb00 f107 	mul.w	r1, r0, r7
2000046e:	4299      	cmp	r1, r3
20000470:	d908      	bls.n	20000484 <__udivmoddi4+0x24c>
20000472:	eb1c 0303 	adds.w	r3, ip, r3
20000476:	f100 36ff 	add.w	r6, r0, #4294967295
2000047a:	d22c      	bcs.n	200004d6 <__udivmoddi4+0x29e>
2000047c:	4299      	cmp	r1, r3
2000047e:	d92a      	bls.n	200004d6 <__udivmoddi4+0x29e>
20000480:	3802      	subs	r0, #2
20000482:	4463      	add	r3, ip
20000484:	1a5b      	subs	r3, r3, r1
20000486:	b2a4      	uxth	r4, r4
20000488:	fbb3 f1f8 	udiv	r1, r3, r8
2000048c:	fb08 3311 	mls	r3, r8, r1, r3
20000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000494:	fb01 f307 	mul.w	r3, r1, r7
20000498:	42a3      	cmp	r3, r4
2000049a:	d908      	bls.n	200004ae <__udivmoddi4+0x276>
2000049c:	eb1c 0404 	adds.w	r4, ip, r4
200004a0:	f101 36ff 	add.w	r6, r1, #4294967295
200004a4:	d213      	bcs.n	200004ce <__udivmoddi4+0x296>
200004a6:	42a3      	cmp	r3, r4
200004a8:	d911      	bls.n	200004ce <__udivmoddi4+0x296>
200004aa:	3902      	subs	r1, #2
200004ac:	4464      	add	r4, ip
200004ae:	1ae4      	subs	r4, r4, r3
200004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
200004b4:	e739      	b.n	2000032a <__udivmoddi4+0xf2>
200004b6:	4604      	mov	r4, r0
200004b8:	e6f0      	b.n	2000029c <__udivmoddi4+0x64>
200004ba:	4608      	mov	r0, r1
200004bc:	e706      	b.n	200002cc <__udivmoddi4+0x94>
200004be:	45c8      	cmp	r8, r9
200004c0:	d2ae      	bcs.n	20000420 <__udivmoddi4+0x1e8>
200004c2:	ebb9 0e02 	subs.w	lr, r9, r2
200004c6:	eb63 0c07 	sbc.w	ip, r3, r7
200004ca:	3801      	subs	r0, #1
200004cc:	e7a8      	b.n	20000420 <__udivmoddi4+0x1e8>
200004ce:	4631      	mov	r1, r6
200004d0:	e7ed      	b.n	200004ae <__udivmoddi4+0x276>
200004d2:	4603      	mov	r3, r0
200004d4:	e799      	b.n	2000040a <__udivmoddi4+0x1d2>
200004d6:	4630      	mov	r0, r6
200004d8:	e7d4      	b.n	20000484 <__udivmoddi4+0x24c>
200004da:	46d6      	mov	lr, sl
200004dc:	e77f      	b.n	200003de <__udivmoddi4+0x1a6>
200004de:	4463      	add	r3, ip
200004e0:	3802      	subs	r0, #2
200004e2:	e74d      	b.n	20000380 <__udivmoddi4+0x148>
200004e4:	4606      	mov	r6, r0
200004e6:	4623      	mov	r3, r4
200004e8:	4608      	mov	r0, r1
200004ea:	e70f      	b.n	2000030c <__udivmoddi4+0xd4>
200004ec:	3e02      	subs	r6, #2
200004ee:	4463      	add	r3, ip
200004f0:	e730      	b.n	20000354 <__udivmoddi4+0x11c>
200004f2:	bf00      	nop

200004f4 <__aeabi_idiv0>:
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <DPACC>:


}

uint32_t DPACC (uint32_t data_out, uint32_t *data_in, uint32_t dp_reg ,uint32_t read)
{
200004f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200004fc:	b09a      	sub	sp, #104	@ 0x68
200004fe:	af00      	add	r7, sp, #0
20000500:	64f8      	str	r0, [r7, #76]	@ 0x4c
20000502:	64b9      	str	r1, [r7, #72]	@ 0x48
20000504:	647a      	str	r2, [r7, #68]	@ 0x44
20000506:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t retval = 0;
20000508:	2300      	movs	r3, #0
2000050a:	667b      	str	r3, [r7, #100]	@ 0x64
	uint64_t tempWriteVal = 0;
2000050c:	f04f 0200 	mov.w	r2, #0
20000510:	f04f 0300 	mov.w	r3, #0
20000514:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	uint64_t data_in_temp;

	tempWriteVal |= read & 0x1;
20000518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000051a:	2200      	movs	r2, #0
2000051c:	63bb      	str	r3, [r7, #56]	@ 0x38
2000051e:	63fa      	str	r2, [r7, #60]	@ 0x3c
20000520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000522:	f003 0401 	and.w	r4, r3, #1
20000526:	2500      	movs	r5, #0
20000528:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
2000052c:	ea42 0104 	orr.w	r1, r2, r4
20000530:	6139      	str	r1, [r7, #16]
20000532:	432b      	orrs	r3, r5
20000534:	617b      	str	r3, [r7, #20]
20000536:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
2000053a:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (dp_reg & 0x3) << 1;
2000053e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000540:	005b      	lsls	r3, r3, #1
20000542:	2200      	movs	r2, #0
20000544:	633b      	str	r3, [r7, #48]	@ 0x30
20000546:	637a      	str	r2, [r7, #52]	@ 0x34
20000548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000054a:	f003 0a06 	and.w	sl, r3, #6
2000054e:	f04f 0b00 	mov.w	fp, #0
20000552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20000556:	ea42 010a 	orr.w	r1, r2, sl
2000055a:	60b9      	str	r1, [r7, #8]
2000055c:	ea43 030b 	orr.w	r3, r3, fp
20000560:	60fb      	str	r3, [r7, #12]
20000562:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
20000566:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (uint64_t)data_out << 3;
2000056a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000056c:	2200      	movs	r2, #0
2000056e:	62bb      	str	r3, [r7, #40]	@ 0x28
20000570:	62fa      	str	r2, [r7, #44]	@ 0x2c
20000572:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
20000576:	460b      	mov	r3, r1
20000578:	ea4f 7953 	mov.w	r9, r3, lsr #29
2000057c:	460b      	mov	r3, r1
2000057e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
20000582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20000586:	ea42 0108 	orr.w	r1, r2, r8
2000058a:	6039      	str	r1, [r7, #0]
2000058c:	ea43 0309 	orr.w	r3, r3, r9
20000590:	607b      	str	r3, [r7, #4]
20000592:	e9d7 3400 	ldrd	r3, r4, [r7]
20000596:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	// Direct DP access (e.g., CTRLSTAT, IDCODE, ABORT)
	JTAG_ShiftIRSPI(0b1010, CM3_JTAG_IR_LENGTH);
2000059a:	2104      	movs	r1, #4
2000059c:	200a      	movs	r0, #10
2000059e:	f000 f927 	bl	200007f0 <JTAG_ShiftIRSPI>

	JTAG_ShiftDR_SPI(tempWriteVal, 35, &data_in_temp);
200005a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200005a6:	2223      	movs	r2, #35	@ 0x23
200005a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
200005ac:	f000 fa4c 	bl	20000a48 <JTAG_ShiftDR_SPI>


	if(read)
200005b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200005b2:	2b00      	cmp	r3, #0
200005b4:	d028      	beq.n	20000608 <DPACC+0x110>
	{

		//JTAG_ShiftDR(data_out, 35, &data_in_temp);
		JTAG_ShiftDR_SPI(data_out, 35, &data_in_temp);
200005b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200005b8:	2200      	movs	r2, #0
200005ba:	623b      	str	r3, [r7, #32]
200005bc:	627a      	str	r2, [r7, #36]	@ 0x24
200005be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200005c2:	2223      	movs	r2, #35	@ 0x23
200005c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
200005c8:	f000 fa3e 	bl	20000a48 <JTAG_ShiftDR_SPI>

		if( (data_in_temp & 0x7) == 0b010) // 0b010 = OK/FAULT
200005cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
200005d0:	f002 0307 	and.w	r3, r2, #7
200005d4:	61bb      	str	r3, [r7, #24]
200005d6:	2300      	movs	r3, #0
200005d8:	61fb      	str	r3, [r7, #28]
200005da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
200005de:	460b      	mov	r3, r1
200005e0:	3b02      	subs	r3, #2
200005e2:	4313      	orrs	r3, r2
200005e4:	d10e      	bne.n	20000604 <DPACC+0x10c>
		{
			retval = 1;
200005e6:	2301      	movs	r3, #1
200005e8:	667b      	str	r3, [r7, #100]	@ 0x64
			*data_in = ( (uint64_t)data_in_temp >> 3) & 0xFFFFFFFF;
200005ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
200005ee:	f04f 0200 	mov.w	r2, #0
200005f2:	f04f 0300 	mov.w	r3, #0
200005f6:	08c2      	lsrs	r2, r0, #3
200005f8:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
200005fc:	08cb      	lsrs	r3, r1, #3
200005fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000600:	601a      	str	r2, [r3, #0]
20000602:	e001      	b.n	20000608 <DPACC+0x110>
		}
		else  // 0b001 = WAIT
		{
			retval = 0;
20000604:	2300      	movs	r3, #0
20000606:	667b      	str	r3, [r7, #100]	@ 0x64
		}


	}

    return retval;
20000608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
2000060a:	4618      	mov	r0, r3
2000060c:	3768      	adds	r7, #104	@ 0x68
2000060e:	46bd      	mov	sp, r7
20000610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

20000614 <APACC>:

uint32_t APACC (uint32_t data_out, uint32_t *data_in, uint32_t dp_reg ,uint32_t read)
{
20000614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20000618:	b09a      	sub	sp, #104	@ 0x68
2000061a:	af00      	add	r7, sp, #0
2000061c:	64f8      	str	r0, [r7, #76]	@ 0x4c
2000061e:	64b9      	str	r1, [r7, #72]	@ 0x48
20000620:	647a      	str	r2, [r7, #68]	@ 0x44
20000622:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t retval = 0;
20000624:	2300      	movs	r3, #0
20000626:	667b      	str	r3, [r7, #100]	@ 0x64
	uint64_t tempWriteVal = 0;
20000628:	f04f 0200 	mov.w	r2, #0
2000062c:	f04f 0300 	mov.w	r3, #0
20000630:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	uint64_t data_in_temp;

	tempWriteVal |= read & 0x1;
20000634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000636:	2200      	movs	r2, #0
20000638:	63bb      	str	r3, [r7, #56]	@ 0x38
2000063a:	63fa      	str	r2, [r7, #60]	@ 0x3c
2000063c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000063e:	f003 0401 	and.w	r4, r3, #1
20000642:	2500      	movs	r5, #0
20000644:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20000648:	ea42 0104 	orr.w	r1, r2, r4
2000064c:	6139      	str	r1, [r7, #16]
2000064e:	432b      	orrs	r3, r5
20000650:	617b      	str	r3, [r7, #20]
20000652:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
20000656:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (dp_reg & 0x3) << 1;
2000065a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000065c:	005b      	lsls	r3, r3, #1
2000065e:	2200      	movs	r2, #0
20000660:	633b      	str	r3, [r7, #48]	@ 0x30
20000662:	637a      	str	r2, [r7, #52]	@ 0x34
20000664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000666:	f003 0a06 	and.w	sl, r3, #6
2000066a:	f04f 0b00 	mov.w	fp, #0
2000066e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20000672:	ea42 010a 	orr.w	r1, r2, sl
20000676:	60b9      	str	r1, [r7, #8]
20000678:	ea43 030b 	orr.w	r3, r3, fp
2000067c:	60fb      	str	r3, [r7, #12]
2000067e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
20000682:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (uint64_t)data_out << 3;
20000686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000688:	2200      	movs	r2, #0
2000068a:	62bb      	str	r3, [r7, #40]	@ 0x28
2000068c:	62fa      	str	r2, [r7, #44]	@ 0x2c
2000068e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
20000692:	460b      	mov	r3, r1
20000694:	ea4f 7953 	mov.w	r9, r3, lsr #29
20000698:	460b      	mov	r3, r1
2000069a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
2000069e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
200006a2:	ea42 0108 	orr.w	r1, r2, r8
200006a6:	6039      	str	r1, [r7, #0]
200006a8:	ea43 0309 	orr.w	r3, r3, r9
200006ac:	607b      	str	r3, [r7, #4]
200006ae:	e9d7 3400 	ldrd	r3, r4, [r7]
200006b2:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	// Direct DP access (e.g., CTRLSTAT, IDCODE, ABORT)
	JTAG_ShiftIRSPI(0b1011, CM3_JTAG_IR_LENGTH);
200006b6:	2104      	movs	r1, #4
200006b8:	200b      	movs	r0, #11
200006ba:	f000 f899 	bl	200007f0 <JTAG_ShiftIRSPI>

	JTAG_ShiftDR_SPI(tempWriteVal, 35, &data_in_temp);
200006be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200006c2:	2223      	movs	r2, #35	@ 0x23
200006c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
200006c8:	f000 f9be 	bl	20000a48 <JTAG_ShiftDR_SPI>


	if(read)
200006cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200006ce:	2b00      	cmp	r3, #0
200006d0:	d028      	beq.n	20000724 <APACC+0x110>
	{

		//JTAG_ShiftDR(data_out, 35, &data_in_temp);
		JTAG_ShiftDR_SPI(data_out, 35, &data_in_temp);
200006d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200006d4:	2200      	movs	r2, #0
200006d6:	623b      	str	r3, [r7, #32]
200006d8:	627a      	str	r2, [r7, #36]	@ 0x24
200006da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200006de:	2223      	movs	r2, #35	@ 0x23
200006e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
200006e4:	f000 f9b0 	bl	20000a48 <JTAG_ShiftDR_SPI>

		if( (data_in_temp & 0x7) == 0b010) // 0b010 = OK/FAULT
200006e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
200006ec:	f002 0307 	and.w	r3, r2, #7
200006f0:	61bb      	str	r3, [r7, #24]
200006f2:	2300      	movs	r3, #0
200006f4:	61fb      	str	r3, [r7, #28]
200006f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
200006fa:	460b      	mov	r3, r1
200006fc:	3b02      	subs	r3, #2
200006fe:	4313      	orrs	r3, r2
20000700:	d10e      	bne.n	20000720 <APACC+0x10c>
		{
			retval = 1;
20000702:	2301      	movs	r3, #1
20000704:	667b      	str	r3, [r7, #100]	@ 0x64
			*data_in = ( (uint64_t)data_in_temp >> 3) & 0xFFFFFFFF;
20000706:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
2000070a:	f04f 0200 	mov.w	r2, #0
2000070e:	f04f 0300 	mov.w	r3, #0
20000712:	08c2      	lsrs	r2, r0, #3
20000714:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
20000718:	08cb      	lsrs	r3, r1, #3
2000071a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2000071c:	601a      	str	r2, [r3, #0]
2000071e:	e001      	b.n	20000724 <APACC+0x110>
		}
		else  // 0b001 = WAIT
		{
			retval = 0;
20000720:	2300      	movs	r3, #0
20000722:	667b      	str	r3, [r7, #100]	@ 0x64
		}


	}

    return retval;
20000724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
20000726:	4618      	mov	r0, r3
20000728:	3768      	adds	r7, #104	@ 0x68
2000072a:	46bd      	mov	sp, r7
2000072c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

20000730 <JTAG_GPIO_Write>:
 * @brief Sets the state of a GPIO pin.
 * @param port GPIO_TypeDef* The GPIO port (e.g., GPIOA, GPIOB).
 * @param pin uint16_t The pin number (e.g., GPIO_PIN_5).
 * @param state GPIO_PinState The desired state (GPIO_PIN_SET or GPIO_PIN_RESET).
 */
void JTAG_GPIO_Write(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state) {
20000730:	b580      	push	{r7, lr}
20000732:	b082      	sub	sp, #8
20000734:	af00      	add	r7, sp, #0
20000736:	6078      	str	r0, [r7, #4]
20000738:	460b      	mov	r3, r1
2000073a:	807b      	strh	r3, [r7, #2]
2000073c:	4613      	mov	r3, r2
2000073e:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(port, pin, state); // Using STM32 HAL library function
20000740:	787a      	ldrb	r2, [r7, #1]
20000742:	887b      	ldrh	r3, [r7, #2]
20000744:	4619      	mov	r1, r3
20000746:	6878      	ldr	r0, [r7, #4]
20000748:	f002 f8da 	bl	20002900 <HAL_GPIO_WritePin>
}
2000074c:	bf00      	nop
2000074e:	3708      	adds	r7, #8
20000750:	46bd      	mov	sp, r7
20000752:	bd80      	pop	{r7, pc}

20000754 <JTAG_Reset_Target>:

void JTAG_Reset_Target(void)
{
20000754:	b580      	push	{r7, lr}
20000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_RESET);
20000758:	2200      	movs	r2, #0
2000075a:	2104      	movs	r1, #4
2000075c:	4806      	ldr	r0, [pc, #24]	@ (20000778 <JTAG_Reset_Target+0x24>)
2000075e:	f002 f8cf 	bl	20002900 <HAL_GPIO_WritePin>
	HAL_Delay(50);
20000762:	2032      	movs	r0, #50	@ 0x32
20000764:	f001 fac8 	bl	20001cf8 <HAL_Delay>
	HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_SET);
20000768:	2201      	movs	r2, #1
2000076a:	2104      	movs	r1, #4
2000076c:	4802      	ldr	r0, [pc, #8]	@ (20000778 <JTAG_Reset_Target+0x24>)
2000076e:	f002 f8c7 	bl	20002900 <HAL_GPIO_WritePin>

}
20000772:	bf00      	nop
20000774:	bd80      	pop	{r7, pc}
20000776:	bf00      	nop
20000778:	40020c00 	.word	0x40020c00

2000077c <JTAG_Delay_ns>:

/**
 * @brief Introduces a small delay. Crucial for JTAG timing.
 * This needs to be carefully tuned. A simple loop or a timer-based delay.
 */
void JTAG_Delay_ns(uint32_t nanoseconds) {
2000077c:	b580      	push	{r7, lr}
2000077e:	b082      	sub	sp, #8
20000780:	af00      	add	r7, sp, #0
20000782:	6078      	str	r0, [r7, #4]
    // For bit-banging, even a few clock cycles can matter.
    // Consider using a DWT (Data Watchpoint and Trace) cycle counter for very precise delays,
    // or a TIM (Timer) in one-shot mode. A simple NOP loop might be too slow or imprecise.
    // Example (very rough):
    //for (volatile uint32_t i = 0; i < (nanoseconds / 10); i++); // Adjust divisor based on CPU freq
	HAL_Delay(nanoseconds);
20000784:	6878      	ldr	r0, [r7, #4]
20000786:	f001 fab7 	bl	20001cf8 <HAL_Delay>
}
2000078a:	bf00      	nop
2000078c:	3708      	adds	r7, #8
2000078e:	46bd      	mov	sp, r7
20000790:	bd80      	pop	{r7, pc}

20000792 <JTAG_Init>:

/**
 * @brief Initializes JTAG GPIOs.
 * Call this once at the start of your program.
 */
void JTAG_Init(void) {
20000792:	b580      	push	{r7, lr}
20000794:	b084      	sub	sp, #16
20000796:	af02      	add	r7, sp, #8
	uint32_t dummyInVal;

    JTAG_Reset();
20000798:	f000 f812 	bl	200007c0 <JTAG_Reset>

    // Go to run-test/idle state
    SPI_TMS_Transfer(0x001f, 16);
2000079c:	2110      	movs	r1, #16
2000079e:	201f      	movs	r0, #31
200007a0:	f000 ff3c 	bl	2000161c <SPI_TMS_Transfer>
    SPI_Transfer(&dummyInVal, 0, 16);
200007a4:	1d39      	adds	r1, r7, #4
200007a6:	2310      	movs	r3, #16
200007a8:	9300      	str	r3, [sp, #0]
200007aa:	f04f 0200 	mov.w	r2, #0
200007ae:	f04f 0300 	mov.w	r3, #0
200007b2:	4608      	mov	r0, r1
200007b4:	f000 ff5c 	bl	20001670 <SPI_Transfer>
}
200007b8:	bf00      	nop
200007ba:	3708      	adds	r7, #8
200007bc:	46bd      	mov	sp, r7
200007be:	bd80      	pop	{r7, pc}

200007c0 <JTAG_Reset>:

/**
 * @brief Resets the JTAG state machine to Test-Logic-Reset.
 * Can use TRST if available, or sequence TMS.
 */
void JTAG_Reset(void) {
200007c0:	b580      	push	{r7, lr}
200007c2:	af00      	add	r7, sp, #0
    #ifdef JTAG_TRST_PORT
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_RESET); // Assert TRST
200007c4:	2200      	movs	r2, #0
200007c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
200007ca:	4808      	ldr	r0, [pc, #32]	@ (200007ec <JTAG_Reset+0x2c>)
200007cc:	f7ff ffb0 	bl	20000730 <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS); // Hold for a short period
200007d0:	2001      	movs	r0, #1
200007d2:	f7ff ffd3 	bl	2000077c <JTAG_Delay_ns>
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_SET);   // De-assert TRST
200007d6:	2201      	movs	r2, #1
200007d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
200007dc:	4803      	ldr	r0, [pc, #12]	@ (200007ec <JTAG_Reset+0x2c>)
200007de:	f7ff ffa7 	bl	20000730 <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS);
200007e2:	2001      	movs	r0, #1
200007e4:	f7ff ffca 	bl	2000077c <JTAG_Delay_ns>
    #else
    // Go to run-test/idle state
    SPI_TMS_Transfer(0x001f, 16);
    SPI_Transfer(&dummyInVal, 0, 16);
	#endif
}
200007e8:	bf00      	nop
200007ea:	bd80      	pop	{r7, pc}
200007ec:	40020800 	.word	0x40020800

200007f0 <JTAG_ShiftIRSPI>:
 * Assumes JTAG is in Run-Test/Idle state before call.
 * @param instruction The instruction value to shift in.
 * @param bits The number of bits in the instruction.
 * @return The data shifted out from TDO during the IR shift.
 */
uint32_t JTAG_ShiftIRSPI(uint32_t instruction, uint8_t bits) {
200007f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200007f4:	b09f      	sub	sp, #124	@ 0x7c
200007f6:	af02      	add	r7, sp, #8
200007f8:	64f8      	str	r0, [r7, #76]	@ 0x4c
200007fa:	460b      	mov	r3, r1
200007fc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    uint64_t dummyInVal = 0;
20000800:	f04f 0200 	mov.w	r2, #0
20000804:	f04f 0300 	mov.w	r3, #0
20000808:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    uint32_t remaining_bits = bits;
2000080c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
20000810:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t read_data = 0;
20000812:	2300      	movs	r3, #0
20000814:	66bb      	str	r3, [r7, #104]	@ 0x68
    //TODO: handle bits more than 32 bits!!!

    /* move to shift ir */
    uint16_t next_path = 0x3000;
20000816:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
2000081a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	SPI_TMS_Transfer(next_path, 16);
2000081e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
20000822:	2110      	movs	r1, #16
20000824:	4618      	mov	r0, r3
20000826:	f000 fef9 	bl	2000161c <SPI_TMS_Transfer>
	SPI_Transfer(&dummyInVal, 0, 16);
2000082a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
2000082e:	2310      	movs	r3, #16
20000830:	9300      	str	r3, [sp, #0]
20000832:	f04f 0200 	mov.w	r2, #0
20000836:	f04f 0300 	mov.w	r3, #0
2000083a:	4608      	mov	r0, r1
2000083c:	f000 ff18 	bl	20001670 <SPI_Transfer>


	int i = 0;
20000840:	2300      	movs	r3, #0
20000842:	667b      	str	r3, [r7, #100]	@ 0x64

	while(remaining_bits)
20000844:	e0f6      	b.n	20000a34 <JTAG_ShiftIRSPI+0x244>
	{
		uint16_t tms_bit_pos = remaining_bits -1;
20000846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20000848:	b29b      	uxth	r3, r3
2000084a:	3b01      	subs	r3, #1
2000084c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

		uint16_t tms_seq = 0x03 << tms_bit_pos;
20000850:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
20000854:	2303      	movs	r3, #3
20000856:	4093      	lsls	r3, r2
20000858:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		SPI_TMS_Transfer(tms_seq, 16);
2000085c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
20000860:	2110      	movs	r1, #16
20000862:	4618      	mov	r0, r3
20000864:	f000 feda 	bl	2000161c <SPI_TMS_Transfer>
		SPI_Transfer(&dummyInVal, instruction, 16);
20000868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000086a:	2200      	movs	r2, #0
2000086c:	60bb      	str	r3, [r7, #8]
2000086e:	60fa      	str	r2, [r7, #12]
20000870:	f107 0150 	add.w	r1, r7, #80	@ 0x50
20000874:	2310      	movs	r3, #16
20000876:	9300      	str	r3, [sp, #0]
20000878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
2000087c:	4608      	mov	r0, r1
2000087e:	f000 fef7 	bl	20001670 <SPI_Transfer>

		if(remaining_bits > 16)
20000882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20000884:	2b10      	cmp	r3, #16
20000886:	d91f      	bls.n	200008c8 <JTAG_ShiftIRSPI+0xd8>
		{
			remaining_bits -= 16;
20000888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000088a:	3b10      	subs	r3, #16
2000088c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			instruction >>= 16;
2000088e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000890:	0c1b      	lsrs	r3, r3, #16
20000892:	64fb      	str	r3, [r7, #76]	@ 0x4c
			read_data |= (dummyInVal << (16 *i) );
20000894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
20000898:	6e79      	ldr	r1, [r7, #100]	@ 0x64
2000089a:	010c      	lsls	r4, r1, #4
2000089c:	f1a4 0120 	sub.w	r1, r4, #32
200008a0:	f1c4 0020 	rsb	r0, r4, #32
200008a4:	fa03 f604 	lsl.w	r6, r3, r4
200008a8:	fa02 f101 	lsl.w	r1, r2, r1
200008ac:	430e      	orrs	r6, r1
200008ae:	fa22 f000 	lsr.w	r0, r2, r0
200008b2:	4306      	orrs	r6, r0
200008b4:	fa02 f504 	lsl.w	r5, r2, r4
200008b8:	462a      	mov	r2, r5
200008ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
200008bc:	4313      	orrs	r3, r2
200008be:	66bb      	str	r3, [r7, #104]	@ 0x68
			i++;
200008c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
200008c2:	3301      	adds	r3, #1
200008c4:	667b      	str	r3, [r7, #100]	@ 0x64
200008c6:	e0b5      	b.n	20000a34 <JTAG_ShiftIRSPI+0x244>
		}
		else if(16 == remaining_bits)
200008c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200008ca:	2b10      	cmp	r3, #16
200008cc:	d144      	bne.n	20000958 <JTAG_ShiftIRSPI+0x168>
		{

			read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
200008ce:	2201      	movs	r2, #1
200008d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200008d2:	fa02 f303 	lsl.w	r3, r2, r3
200008d6:	3b01      	subs	r3, #1
200008d8:	17da      	asrs	r2, r3, #31
200008da:	623b      	str	r3, [r7, #32]
200008dc:	627a      	str	r2, [r7, #36]	@ 0x24
200008de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
200008e2:	6a39      	ldr	r1, [r7, #32]
200008e4:	4011      	ands	r1, r2
200008e6:	6339      	str	r1, [r7, #48]	@ 0x30
200008e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200008ea:	400b      	ands	r3, r1
200008ec:	637b      	str	r3, [r7, #52]	@ 0x34
200008ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
200008f0:	0119      	lsls	r1, r3, #4
200008f2:	f1a1 0320 	sub.w	r3, r1, #32
200008f6:	f1c1 0220 	rsb	r2, r1, #32
200008fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
200008fc:	4088      	lsls	r0, r1
200008fe:	6478      	str	r0, [r7, #68]	@ 0x44
20000900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000902:	fa00 f303 	lsl.w	r3, r0, r3
20000906:	6c78      	ldr	r0, [r7, #68]	@ 0x44
20000908:	4318      	orrs	r0, r3
2000090a:	6478      	str	r0, [r7, #68]	@ 0x44
2000090c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000090e:	fa23 f202 	lsr.w	r2, r3, r2
20000912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000914:	4313      	orrs	r3, r2
20000916:	647b      	str	r3, [r7, #68]	@ 0x44
20000918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000091a:	408b      	lsls	r3, r1
2000091c:	643b      	str	r3, [r7, #64]	@ 0x40
2000091e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
20000920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20000922:	4313      	orrs	r3, r2
20000924:	66bb      	str	r3, [r7, #104]	@ 0x68
			tms_seq = 0x01;
20000926:	2301      	movs	r3, #1
20000928:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
			SPI_TMS_Transfer(tms_seq, 16);
2000092c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
20000930:	2110      	movs	r1, #16
20000932:	4618      	mov	r0, r3
20000934:	f000 fe72 	bl	2000161c <SPI_TMS_Transfer>
			SPI_Transfer(&dummyInVal, instruction, 16);
20000938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000093a:	2200      	movs	r2, #0
2000093c:	603b      	str	r3, [r7, #0]
2000093e:	607a      	str	r2, [r7, #4]
20000940:	f107 0150 	add.w	r1, r7, #80	@ 0x50
20000944:	2310      	movs	r3, #16
20000946:	9300      	str	r3, [sp, #0]
20000948:	e9d7 2300 	ldrd	r2, r3, [r7]
2000094c:	4608      	mov	r0, r1
2000094e:	f000 fe8f 	bl	20001670 <SPI_Transfer>

			remaining_bits = 0;
20000952:	2300      	movs	r3, #0
20000954:	66fb      	str	r3, [r7, #108]	@ 0x6c
20000956:	e06d      	b.n	20000a34 <JTAG_ShiftIRSPI+0x244>
		}
		else if(15 == remaining_bits)
20000958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000095a:	2b0f      	cmp	r3, #15
2000095c:	d142      	bne.n	200009e4 <JTAG_ShiftIRSPI+0x1f4>
		{
			read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
2000095e:	2201      	movs	r2, #1
20000960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20000962:	fa02 f303 	lsl.w	r3, r2, r3
20000966:	3b01      	subs	r3, #1
20000968:	17da      	asrs	r2, r3, #31
2000096a:	61bb      	str	r3, [r7, #24]
2000096c:	61fa      	str	r2, [r7, #28]
2000096e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
20000972:	69b9      	ldr	r1, [r7, #24]
20000974:	4011      	ands	r1, r2
20000976:	62b9      	str	r1, [r7, #40]	@ 0x28
20000978:	69f9      	ldr	r1, [r7, #28]
2000097a:	400b      	ands	r3, r1
2000097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000097e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20000980:	0119      	lsls	r1, r3, #4
20000982:	f1a1 0320 	sub.w	r3, r1, #32
20000986:	f1c1 0220 	rsb	r2, r1, #32
2000098a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
2000098c:	4088      	lsls	r0, r1
2000098e:	63f8      	str	r0, [r7, #60]	@ 0x3c
20000990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000992:	fa00 f303 	lsl.w	r3, r0, r3
20000996:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
20000998:	4318      	orrs	r0, r3
2000099a:	63f8      	str	r0, [r7, #60]	@ 0x3c
2000099c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000099e:	fa23 f202 	lsr.w	r2, r3, r2
200009a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200009a4:	4313      	orrs	r3, r2
200009a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
200009a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200009aa:	408b      	lsls	r3, r1
200009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
200009ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
200009b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
200009b2:	4313      	orrs	r3, r2
200009b4:	66bb      	str	r3, [r7, #104]	@ 0x68

			tms_seq = 0x0;
200009b6:	2300      	movs	r3, #0
200009b8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
			SPI_TMS_Transfer(tms_seq, 16);
200009bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
200009c0:	2110      	movs	r1, #16
200009c2:	4618      	mov	r0, r3
200009c4:	f000 fe2a 	bl	2000161c <SPI_TMS_Transfer>
			SPI_Transfer(&dummyInVal, 0, 16);
200009c8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
200009cc:	2310      	movs	r3, #16
200009ce:	9300      	str	r3, [sp, #0]
200009d0:	f04f 0200 	mov.w	r2, #0
200009d4:	f04f 0300 	mov.w	r3, #0
200009d8:	4608      	mov	r0, r1
200009da:	f000 fe49 	bl	20001670 <SPI_Transfer>

			remaining_bits = 0;
200009de:	2300      	movs	r3, #0
200009e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
200009e2:	e027      	b.n	20000a34 <JTAG_ShiftIRSPI+0x244>

		}
		else
		{
			read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
200009e4:	2201      	movs	r2, #1
200009e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200009e8:	fa02 f303 	lsl.w	r3, r2, r3
200009ec:	3b01      	subs	r3, #1
200009ee:	17da      	asrs	r2, r3, #31
200009f0:	613b      	str	r3, [r7, #16]
200009f2:	617a      	str	r2, [r7, #20]
200009f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
200009f8:	6939      	ldr	r1, [r7, #16]
200009fa:	ea01 0a02 	and.w	sl, r1, r2
200009fe:	6979      	ldr	r1, [r7, #20]
20000a00:	ea01 0b03 	and.w	fp, r1, r3
20000a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20000a06:	0119      	lsls	r1, r3, #4
20000a08:	f1a1 0320 	sub.w	r3, r1, #32
20000a0c:	f1c1 0220 	rsb	r2, r1, #32
20000a10:	fa0b f901 	lsl.w	r9, fp, r1
20000a14:	fa0a f303 	lsl.w	r3, sl, r3
20000a18:	ea49 0903 	orr.w	r9, r9, r3
20000a1c:	fa2a f202 	lsr.w	r2, sl, r2
20000a20:	ea49 0902 	orr.w	r9, r9, r2
20000a24:	fa0a f801 	lsl.w	r8, sl, r1
20000a28:	4642      	mov	r2, r8
20000a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20000a2c:	4313      	orrs	r3, r2
20000a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
			remaining_bits = 0;
20000a30:	2300      	movs	r3, #0
20000a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
	while(remaining_bits)
20000a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20000a36:	2b00      	cmp	r3, #0
20000a38:	f47f af05 	bne.w	20000846 <JTAG_ShiftIRSPI+0x56>


    return dummyInVal;

#endif
    return read_data;
20000a3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
20000a3e:	4618      	mov	r0, r3
20000a40:	3774      	adds	r7, #116	@ 0x74
20000a42:	46bd      	mov	sp, r7
20000a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

20000a48 <JTAG_ShiftDR_SPI>:
 * Assumes JTAG is in Run-Test/Idle state before call.
 * @param data_out The data value to shift out.
 * @param bits The number of bits in the data register.
 * @param data_in Pointer to store the data shifted in from TDO. Can be NULL if not needed.
 */
void JTAG_ShiftDR_SPI(uint64_t data_out, uint8_t bits, uint64_t* data_in) {
20000a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20000a4c:	b0a7      	sub	sp, #156	@ 0x9c
20000a4e:	af02      	add	r7, sp, #8
20000a50:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
20000a54:	65bb      	str	r3, [r7, #88]	@ 0x58
20000a56:	4613      	mov	r3, r2
20000a58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		uint64_t dummyInVal = 0;
20000a5c:	f04f 0200 	mov.w	r2, #0
20000a60:	f04f 0300 	mov.w	r3, #0
20000a64:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    uint32_t remaining_bits = bits;
20000a68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
20000a6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	    uint64_t read_data = 0;
20000a70:	f04f 0200 	mov.w	r2, #0
20000a74:	f04f 0300 	mov.w	r3, #0
20000a78:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	    //TODO: handle bits more than 64 bits!!!

	    /* move to shift dr */
	    uint16_t next_path = 0x2000;
20000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20000a80:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

		SPI_TMS_Transfer(next_path, 16);
20000a84:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
20000a88:	2110      	movs	r1, #16
20000a8a:	4618      	mov	r0, r3
20000a8c:	f000 fdc6 	bl	2000161c <SPI_TMS_Transfer>
		SPI_Transfer(&dummyInVal, 0, 16);
20000a90:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000a94:	2310      	movs	r3, #16
20000a96:	9300      	str	r3, [sp, #0]
20000a98:	f04f 0200 	mov.w	r2, #0
20000a9c:	f04f 0300 	mov.w	r3, #0
20000aa0:	4608      	mov	r0, r1
20000aa2:	f000 fde5 	bl	20001670 <SPI_Transfer>


		int i = 0;
20000aa6:	2300      	movs	r3, #0
20000aa8:	67fb      	str	r3, [r7, #124]	@ 0x7c

		while(remaining_bits)
20000aaa:	e124      	b.n	20000cf6 <JTAG_ShiftDR_SPI+0x2ae>
		{
			uint16_t tms_bit_pos = remaining_bits -1;
20000aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000ab0:	b29b      	uxth	r3, r3
20000ab2:	3b01      	subs	r3, #1
20000ab4:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

			uint16_t tms_seq = 0x03 << tms_bit_pos;
20000ab8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
20000abc:	2303      	movs	r3, #3
20000abe:	4093      	lsls	r3, r2
20000ac0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			SPI_TMS_Transfer(tms_seq, 16);
20000ac4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000ac8:	2110      	movs	r1, #16
20000aca:	4618      	mov	r0, r3
20000acc:	f000 fda6 	bl	2000161c <SPI_TMS_Transfer>
			SPI_Transfer(&dummyInVal, data_out, 16);
20000ad0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000ad4:	2310      	movs	r3, #16
20000ad6:	9300      	str	r3, [sp, #0]
20000ad8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
20000adc:	4608      	mov	r0, r1
20000ade:	f000 fdc7 	bl	20001670 <SPI_Transfer>

			if(remaining_bits > 16)
20000ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000ae6:	2b10      	cmp	r3, #16
20000ae8:	d934      	bls.n	20000b54 <JTAG_ShiftDR_SPI+0x10c>
			{
				remaining_bits -= 16;
20000aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000aee:	3b10      	subs	r3, #16
20000af0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				data_out >>= 16;
20000af4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
20000af8:	f04f 0000 	mov.w	r0, #0
20000afc:	f04f 0100 	mov.w	r1, #0
20000b00:	0c10      	lsrs	r0, r2, #16
20000b02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
20000b06:	0c19      	lsrs	r1, r3, #16
20000b08:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				read_data |= (dummyInVal << (16 *i) );
20000b0c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000b10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
20000b12:	010c      	lsls	r4, r1, #4
20000b14:	f1a4 0120 	sub.w	r1, r4, #32
20000b18:	f1c4 0020 	rsb	r0, r4, #32
20000b1c:	fa03 fb04 	lsl.w	fp, r3, r4
20000b20:	fa02 f101 	lsl.w	r1, r2, r1
20000b24:	ea4b 0b01 	orr.w	fp, fp, r1
20000b28:	fa22 f000 	lsr.w	r0, r2, r0
20000b2c:	ea4b 0b00 	orr.w	fp, fp, r0
20000b30:	fa02 fa04 	lsl.w	sl, r2, r4
20000b34:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000b38:	ea42 010a 	orr.w	r1, r2, sl
20000b3c:	61b9      	str	r1, [r7, #24]
20000b3e:	ea43 030b 	orr.w	r3, r3, fp
20000b42:	61fb      	str	r3, [r7, #28]
20000b44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
20000b48:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
				i++;
20000b4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000b4e:	3301      	adds	r3, #1
20000b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
20000b52:	e0d0      	b.n	20000cf6 <JTAG_ShiftDR_SPI+0x2ae>
			}
			else if(16 == remaining_bits)
20000b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000b58:	2b10      	cmp	r3, #16
20000b5a:	d145      	bne.n	20000be8 <JTAG_ShiftDR_SPI+0x1a0>
			{

				read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
20000b5c:	2201      	movs	r2, #1
20000b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000b62:	fa02 f303 	lsl.w	r3, r2, r3
20000b66:	3b01      	subs	r3, #1
20000b68:	17da      	asrs	r2, r3, #31
20000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
20000b6c:	637a      	str	r2, [r7, #52]	@ 0x34
20000b6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000b72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20000b74:	4011      	ands	r1, r2
20000b76:	64b9      	str	r1, [r7, #72]	@ 0x48
20000b78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
20000b7a:	400b      	ands	r3, r1
20000b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
20000b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000b80:	0119      	lsls	r1, r3, #4
20000b82:	f1a1 0320 	sub.w	r3, r1, #32
20000b86:	f1c1 0220 	rsb	r2, r1, #32
20000b8a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
20000b8c:	fa00 f601 	lsl.w	r6, r0, r1
20000b90:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
20000b92:	fa00 f303 	lsl.w	r3, r0, r3
20000b96:	431e      	orrs	r6, r3
20000b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000b9a:	fa23 f202 	lsr.w	r2, r3, r2
20000b9e:	4316      	orrs	r6, r2
20000ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000ba2:	fa03 f501 	lsl.w	r5, r3, r1
20000ba6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000baa:	ea42 0105 	orr.w	r1, r2, r5
20000bae:	6139      	str	r1, [r7, #16]
20000bb0:	4333      	orrs	r3, r6
20000bb2:	617b      	str	r3, [r7, #20]
20000bb4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
20000bb8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
				tms_seq = 0x01;
20000bbc:	2301      	movs	r3, #1
20000bbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
				SPI_TMS_Transfer(tms_seq, 16);
20000bc2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000bc6:	2110      	movs	r1, #16
20000bc8:	4618      	mov	r0, r3
20000bca:	f000 fd27 	bl	2000161c <SPI_TMS_Transfer>
				SPI_Transfer(&dummyInVal, data_out, 16);
20000bce:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000bd2:	2310      	movs	r3, #16
20000bd4:	9300      	str	r3, [sp, #0]
20000bd6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
20000bda:	4608      	mov	r0, r1
20000bdc:	f000 fd48 	bl	20001670 <SPI_Transfer>

				remaining_bits = 0;
20000be0:	2300      	movs	r3, #0
20000be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
20000be6:	e086      	b.n	20000cf6 <JTAG_ShiftDR_SPI+0x2ae>
			}
			else if(15 == remaining_bits)
20000be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000bec:	2b0f      	cmp	r3, #15
20000bee:	d14c      	bne.n	20000c8a <JTAG_ShiftDR_SPI+0x242>
			{
				read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
20000bf0:	2201      	movs	r2, #1
20000bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000bf6:	fa02 f303 	lsl.w	r3, r2, r3
20000bfa:	3b01      	subs	r3, #1
20000bfc:	17da      	asrs	r2, r3, #31
20000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
20000c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
20000c02:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000c06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
20000c08:	4011      	ands	r1, r2
20000c0a:	6439      	str	r1, [r7, #64]	@ 0x40
20000c0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
20000c0e:	400b      	ands	r3, r1
20000c10:	647b      	str	r3, [r7, #68]	@ 0x44
20000c12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000c14:	0119      	lsls	r1, r3, #4
20000c16:	f1a1 0320 	sub.w	r3, r1, #32
20000c1a:	f1c1 0220 	rsb	r2, r1, #32
20000c1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
20000c20:	4088      	lsls	r0, r1
20000c22:	6578      	str	r0, [r7, #84]	@ 0x54
20000c24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
20000c26:	fa00 f303 	lsl.w	r3, r0, r3
20000c2a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c2c:	4318      	orrs	r0, r3
20000c2e:	6578      	str	r0, [r7, #84]	@ 0x54
20000c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000c32:	fa23 f202 	lsr.w	r2, r3, r2
20000c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c38:	4313      	orrs	r3, r2
20000c3a:	657b      	str	r3, [r7, #84]	@ 0x54
20000c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000c3e:	408b      	lsls	r3, r1
20000c40:	653b      	str	r3, [r7, #80]	@ 0x50
20000c42:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000c46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
20000c48:	4311      	orrs	r1, r2
20000c4a:	60b9      	str	r1, [r7, #8]
20000c4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
20000c4e:	430b      	orrs	r3, r1
20000c50:	60fb      	str	r3, [r7, #12]
20000c52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
20000c56:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80

				tms_seq = 0x0;
20000c5a:	2300      	movs	r3, #0
20000c5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
				SPI_TMS_Transfer(tms_seq, 16);
20000c60:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000c64:	2110      	movs	r1, #16
20000c66:	4618      	mov	r0, r3
20000c68:	f000 fcd8 	bl	2000161c <SPI_TMS_Transfer>
				SPI_Transfer(&dummyInVal, 0, 16);
20000c6c:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000c70:	2310      	movs	r3, #16
20000c72:	9300      	str	r3, [sp, #0]
20000c74:	f04f 0200 	mov.w	r2, #0
20000c78:	f04f 0300 	mov.w	r3, #0
20000c7c:	4608      	mov	r0, r1
20000c7e:	f000 fcf7 	bl	20001670 <SPI_Transfer>

				remaining_bits = 0;
20000c82:	2300      	movs	r3, #0
20000c84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
20000c88:	e035      	b.n	20000cf6 <JTAG_ShiftDR_SPI+0x2ae>

			}
			else
			{
				read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
20000c8a:	2201      	movs	r2, #1
20000c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000c90:	fa02 f303 	lsl.w	r3, r2, r3
20000c94:	3b01      	subs	r3, #1
20000c96:	17da      	asrs	r2, r3, #31
20000c98:	623b      	str	r3, [r7, #32]
20000c9a:	627a      	str	r2, [r7, #36]	@ 0x24
20000c9c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000ca0:	6a39      	ldr	r1, [r7, #32]
20000ca2:	4011      	ands	r1, r2
20000ca4:	63b9      	str	r1, [r7, #56]	@ 0x38
20000ca6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20000ca8:	400b      	ands	r3, r1
20000caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
20000cac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000cae:	0119      	lsls	r1, r3, #4
20000cb0:	f1a1 0320 	sub.w	r3, r1, #32
20000cb4:	f1c1 0220 	rsb	r2, r1, #32
20000cb8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
20000cba:	fa00 f901 	lsl.w	r9, r0, r1
20000cbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
20000cc0:	fa00 f303 	lsl.w	r3, r0, r3
20000cc4:	ea49 0903 	orr.w	r9, r9, r3
20000cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000cca:	fa23 f202 	lsr.w	r2, r3, r2
20000cce:	ea49 0902 	orr.w	r9, r9, r2
20000cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000cd4:	fa03 f801 	lsl.w	r8, r3, r1
20000cd8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000cdc:	ea42 0108 	orr.w	r1, r2, r8
20000ce0:	6039      	str	r1, [r7, #0]
20000ce2:	ea43 0309 	orr.w	r3, r3, r9
20000ce6:	607b      	str	r3, [r7, #4]
20000ce8:	e9d7 3400 	ldrd	r3, r4, [r7]
20000cec:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
				remaining_bits = 0;
20000cf0:	2300      	movs	r3, #0
20000cf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		while(remaining_bits)
20000cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000cfa:	2b00      	cmp	r3, #0
20000cfc:	f47f aed6 	bne.w	20000aac <JTAG_ShiftDR_SPI+0x64>
        received_data |= (dummyInVal & remaining_bit_mask) << (bits - remaining_bits);

        *data_in = received_data;

#endif
        *data_in = read_data;
20000d00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
20000d02:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000d06:	e9c1 2300 	strd	r2, r3, [r1]
        return;
20000d0a:	bf00      	nop

}
20000d0c:	3794      	adds	r7, #148	@ 0x94
20000d0e:	46bd      	mov	sp, r7
20000d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

20000d14 <JTAG_ReadIDCODE>:

/**
 * @brief Reads a specific JTAG IDCODE from the target device.
 * @return The IDCODE value. Returns 0 if read fails or JTAG not initialized.
 */
uint32_t JTAG_ReadIDCODE(void) {
20000d14:	b580      	push	{r7, lr}
20000d16:	b084      	sub	sp, #16
20000d18:	af00      	add	r7, sp, #0
    uint32_t idcode = 0;
20000d1a:	2300      	movs	r3, #0
20000d1c:	60fb      	str	r3, [r7, #12]
    // Assume JTAG is in Run-Test/Idle

    // 1. Shift in the IDCODE instruction (typically 0x01 for ARM/standard JTAG devices)
    // The instruction length is device-specific. Common is 5-bit for ARM.
    // You need to know the target device's IR length.
    uint8_t ir_length = 4; // Example for ARM
20000d1e:	2304      	movs	r3, #4
20000d20:	72fb      	strb	r3, [r7, #11]
    JTAG_ShiftIRSPI(0xE, ir_length);
20000d22:	7afb      	ldrb	r3, [r7, #11]
20000d24:	4619      	mov	r1, r3
20000d26:	200e      	movs	r0, #14
20000d28:	f7ff fd62 	bl	200007f0 <JTAG_ShiftIRSPI>
    //JTAG_ShiftIRSPI(0xF, ir_length);

    // 2. Shift out the 32-bit IDCODE data register
    uint64_t read_idcode = 0;
20000d2c:	f04f 0200 	mov.w	r2, #0
20000d30:	f04f 0300 	mov.w	r3, #0
20000d34:	e9c7 2300 	strd	r2, r3, [r7]
    //JTAG_ShiftDR(0x00000000, 32, &read_idcode); // TDI doesn't matter, shifting in 0s
    JTAG_ShiftDR_SPI(0x80000001, 32, &read_idcode); // TDI doesn't matter, shifting in 0s
20000d38:	463b      	mov	r3, r7
20000d3a:	2220      	movs	r2, #32
20000d3c:	4806      	ldr	r0, [pc, #24]	@ (20000d58 <JTAG_ReadIDCODE+0x44>)
20000d3e:	f04f 0100 	mov.w	r1, #0
20000d42:	f7ff fe81 	bl	20000a48 <JTAG_ShiftDR_SPI>

    idcode = (uint32_t)read_idcode;
20000d46:	e9d7 2300 	ldrd	r2, r3, [r7]
20000d4a:	4613      	mov	r3, r2
20000d4c:	60fb      	str	r3, [r7, #12]
    return idcode;
20000d4e:	68fb      	ldr	r3, [r7, #12]
}
20000d50:	4618      	mov	r0, r3
20000d52:	3710      	adds	r7, #16
20000d54:	46bd      	mov	sp, r7
20000d56:	bd80      	pop	{r7, pc}
20000d58:	80000001 	.word	0x80000001

20000d5c <JTAG_MeasureIRLength>:
 * It assumes the device is in the Run-Test/Idle state before the call.
 * @return The measured IR length, or 0 if measurement fails or an unexpected TDO pattern is observed.
 * A return value of 0 might indicate an issue with JTAG communication or a non-standard device.
 */
uint8_t JTAG_MeasureIRLength(void)
{
20000d5c:	b580      	push	{r7, lr}
20000d5e:	b086      	sub	sp, #24
20000d60:	af00      	add	r7, sp, #0
	//TODO: handle IRlen try more than 32 bit.
	uint32_t return_bits;
	int ir_len = 1;
20000d62:	2301      	movs	r3, #1
20000d64:	613b      	str	r3, [r7, #16]
	int i;
	const uint32_t bit_pattern = 0xDEADBEEF;
20000d66:	4b18      	ldr	r3, [pc, #96]	@ (20000dc8 <JTAG_MeasureIRLength+0x6c>)
20000d68:	607b      	str	r3, [r7, #4]
	uint32_t try_bit_cnt = 32;
20000d6a:	2320      	movs	r3, #32
20000d6c:	60bb      	str	r3, [r7, #8]

	return_bits = JTAG_ShiftIRSPI(bit_pattern, try_bit_cnt);
20000d6e:	68bb      	ldr	r3, [r7, #8]
20000d70:	b2db      	uxtb	r3, r3
20000d72:	4619      	mov	r1, r3
20000d74:	6878      	ldr	r0, [r7, #4]
20000d76:	f7ff fd3b 	bl	200007f0 <JTAG_ShiftIRSPI>
20000d7a:	6178      	str	r0, [r7, #20]

	for(i = 0; i < try_bit_cnt; i++)
20000d7c:	2300      	movs	r3, #0
20000d7e:	60fb      	str	r3, [r7, #12]
20000d80:	e018      	b.n	20000db4 <JTAG_MeasureIRLength+0x58>
	{
		uint32_t mask = (1 << try_bit_cnt) - 1;
20000d82:	2201      	movs	r2, #1
20000d84:	68bb      	ldr	r3, [r7, #8]
20000d86:	fa02 f303 	lsl.w	r3, r2, r3
20000d8a:	3b01      	subs	r3, #1
20000d8c:	603b      	str	r3, [r7, #0]
		if( (return_bits & mask) == (bit_pattern & mask) )
20000d8e:	697a      	ldr	r2, [r7, #20]
20000d90:	687b      	ldr	r3, [r7, #4]
20000d92:	405a      	eors	r2, r3
20000d94:	683b      	ldr	r3, [r7, #0]
20000d96:	4013      	ands	r3, r2
20000d98:	2b00      	cmp	r3, #0
20000d9a:	d102      	bne.n	20000da2 <JTAG_MeasureIRLength+0x46>
		{
			ir_len = i;
20000d9c:	68fb      	ldr	r3, [r7, #12]
20000d9e:	613b      	str	r3, [r7, #16]
			break;
20000da0:	e00c      	b.n	20000dbc <JTAG_MeasureIRLength+0x60>
		}
		else
		{
			return_bits >>= 1;
20000da2:	697b      	ldr	r3, [r7, #20]
20000da4:	085b      	lsrs	r3, r3, #1
20000da6:	617b      	str	r3, [r7, #20]
			try_bit_cnt--;
20000da8:	68bb      	ldr	r3, [r7, #8]
20000daa:	3b01      	subs	r3, #1
20000dac:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < try_bit_cnt; i++)
20000dae:	68fb      	ldr	r3, [r7, #12]
20000db0:	3301      	adds	r3, #1
20000db2:	60fb      	str	r3, [r7, #12]
20000db4:	68fb      	ldr	r3, [r7, #12]
20000db6:	68ba      	ldr	r2, [r7, #8]
20000db8:	429a      	cmp	r2, r3
20000dba:	d8e2      	bhi.n	20000d82 <JTAG_MeasureIRLength+0x26>

		}
	}


    return ir_len;
20000dbc:	693b      	ldr	r3, [r7, #16]
20000dbe:	b2db      	uxtb	r3, r3
}
20000dc0:	4618      	mov	r0, r3
20000dc2:	3718      	adds	r7, #24
20000dc4:	46bd      	mov	sp, r7
20000dc6:	bd80      	pop	{r7, pc}
20000dc8:	deadbeef 	.word	0xdeadbeef

20000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000dcc:	b580      	push	{r7, lr}
20000dce:	b08e      	sub	sp, #56	@ 0x38
20000dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000dd2:	f000 ff34 	bl	20001c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20000dd6:	f000 f90b 	bl	20000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000dda:	f000 fa9b 	bl	20001314 <MX_GPIO_Init>
  MX_ETH_Init();
20000dde:	f000 f975 	bl	200010cc <MX_ETH_Init>
  MX_USART3_UART_Init();
20000de2:	f000 fa39 	bl	20001258 <MX_USART3_UART_Init>
  MX_SPI1_Init();
20000de6:	f000 f9bf 	bl	20001168 <MX_SPI1_Init>
  MX_SPI4_Init();
20000dea:	f000 f9fb 	bl	200011e4 <MX_SPI4_Init>
  MX_USB_OTG_FS_PCD_Init();
20000dee:	f000 fa63 	bl	200012b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  RCC->APB1ENR |= (1 << 15);
20000df2:	4b74      	ldr	r3, [pc, #464]	@ (20000fc4 <main+0x1f8>)
20000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000df6:	4a73      	ldr	r2, [pc, #460]	@ (20000fc4 <main+0x1f8>)
20000df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20000dfc:	6413      	str	r3, [r2, #64]	@ 0x40

  Switch_SPI();
20000dfe:	f000 fb91 	bl	20001524 <Switch_SPI>
  SPI4->CR1 |= (1 << 6);
20000e02:	4b71      	ldr	r3, [pc, #452]	@ (20000fc8 <main+0x1fc>)
20000e04:	681b      	ldr	r3, [r3, #0]
20000e06:	4a70      	ldr	r2, [pc, #448]	@ (20000fc8 <main+0x1fc>)
20000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20000e0c:	6013      	str	r3, [r2, #0]

  uint8_t wrBuff[16] = {0};
20000e0e:	2300      	movs	r3, #0
20000e10:	623b      	str	r3, [r7, #32]
20000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20000e16:	2200      	movs	r2, #0
20000e18:	601a      	str	r2, [r3, #0]
20000e1a:	605a      	str	r2, [r3, #4]
20000e1c:	609a      	str	r2, [r3, #8]
  uint8_t rdBuff[16] = {0};
20000e1e:	2300      	movs	r3, #0
20000e20:	613b      	str	r3, [r7, #16]
20000e22:	f107 0314 	add.w	r3, r7, #20
20000e26:	2200      	movs	r2, #0
20000e28:	601a      	str	r2, [r3, #0]
20000e2a:	605a      	str	r2, [r3, #4]
20000e2c:	609a      	str	r2, [r3, #8]


  JTAG_Reset_Target();
20000e2e:	f7ff fc91 	bl	20000754 <JTAG_Reset_Target>

  JTAG_Init();
20000e32:	f7ff fcae 	bl	20000792 <JTAG_Init>
  uint32_t idCode = JTAG_ReadIDCODE();
20000e36:	f7ff ff6d 	bl	20000d14 <JTAG_ReadIDCODE>
20000e3a:	4603      	mov	r3, r0
20000e3c:	60fb      	str	r3, [r7, #12]
  //idCode = JTAG_ReadIDCODE();

  //JTAG_ShiftIRSPI(0xe0dead, 24);
  //JTAG_ShiftDR_SPI(0, 32, &idCode);

  JTAG_ShiftIRSPI(0xe0a0dbad, 32);
20000e3e:	2120      	movs	r1, #32
20000e40:	4862      	ldr	r0, [pc, #392]	@ (20000fcc <main+0x200>)
20000e42:	f7ff fcd5 	bl	200007f0 <JTAG_ShiftIRSPI>
  JTAG_ShiftDR_SPI(0, 32, &idCode);
20000e46:	f107 030c 	add.w	r3, r7, #12
20000e4a:	461a      	mov	r2, r3
20000e4c:	2120      	movs	r1, #32
20000e4e:	2000      	movs	r0, #0
20000e50:	f7ff fdfa 	bl	20000a48 <JTAG_ShiftDR_SPI>

  JTAG_ShiftIRSPI(0x70A0DBAD, 31);
20000e54:	211f      	movs	r1, #31
20000e56:	485e      	ldr	r0, [pc, #376]	@ (20000fd0 <main+0x204>)
20000e58:	f7ff fcca 	bl	200007f0 <JTAG_ShiftIRSPI>
  JTAG_ShiftDR_SPI(0, 32, &idCode);
20000e5c:	f107 030c 	add.w	r3, r7, #12
20000e60:	461a      	mov	r2, r3
20000e62:	2120      	movs	r1, #32
20000e64:	2000      	movs	r0, #0
20000e66:	f7ff fdef 	bl	20000a48 <JTAG_ShiftDR_SPI>

  JTAG_ShiftIRSPI(0x38A0DBAD, 30);
20000e6a:	211e      	movs	r1, #30
20000e6c:	4859      	ldr	r0, [pc, #356]	@ (20000fd4 <main+0x208>)
20000e6e:	f7ff fcbf 	bl	200007f0 <JTAG_ShiftIRSPI>
  JTAG_ShiftDR_SPI(0, 32, &idCode);
20000e72:	f107 030c 	add.w	r3, r7, #12
20000e76:	461a      	mov	r2, r3
20000e78:	2120      	movs	r1, #32
20000e7a:	2000      	movs	r0, #0
20000e7c:	f7ff fde4 	bl	20000a48 <JTAG_ShiftDR_SPI>

  uint8_t irLen;
  irLen = JTAG_MeasureIRLength();
20000e80:	f7ff ff6c 	bl	20000d5c <JTAG_MeasureIRLength>
20000e84:	4603      	mov	r3, r0
20000e86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t apacc_reg;

  uint32_t writeVal;


  writeVal = (1 << 30) | (1 << 28) | (1 << 5);
20000e8a:	4b53      	ldr	r3, [pc, #332]	@ (20000fd8 <main+0x20c>)
20000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  //writeVal = 0xFFffFFff;

  DPACC(writeVal, &dpacc_reg, 1, WRITE);
20000e8e:	f107 0108 	add.w	r1, r7, #8
20000e92:	2300      	movs	r3, #0
20000e94:	2201      	movs	r2, #1
20000e96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000e98:	f7ff fb2e 	bl	200004f8 <DPACC>

  DPACC(writeVal, &dpacc_reg, 1, READ);
20000e9c:	f107 0108 	add.w	r1, r7, #8
20000ea0:	2301      	movs	r3, #1
20000ea2:	2201      	movs	r2, #1
20000ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000ea6:	f7ff fb27 	bl	200004f8 <DPACC>

  idCode = JTAG_ReadIDCODE();
20000eaa:	f7ff ff33 	bl	20000d14 <JTAG_ReadIDCODE>
20000eae:	4603      	mov	r3, r0
20000eb0:	60fb      	str	r3, [r7, #12]



  /* read normal data */
  writeVal = 0x00;
20000eb2:	2300      	movs	r3, #0
20000eb4:	633b      	str	r3, [r7, #48]	@ 0x30

  DPACC(writeVal, &dpacc_reg, 2, WRITE);
20000eb6:	f107 0108 	add.w	r1, r7, #8
20000eba:	2300      	movs	r3, #0
20000ebc:	2202      	movs	r2, #2
20000ebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000ec0:	f7ff fb1a 	bl	200004f8 <DPACC>

  APACC(0x00000002, &apacc_reg, 0,READ);
20000ec4:	1d39      	adds	r1, r7, #4
20000ec6:	2301      	movs	r3, #1
20000ec8:	2200      	movs	r2, #0
20000eca:	2002      	movs	r0, #2
20000ecc:	f7ff fba2 	bl	20000614 <APACC>

  APACC( (0x2 | 1 << 29 | 1 << 25) , &apacc_reg, 0,WRITE);
20000ed0:	1d39      	adds	r1, r7, #4
20000ed2:	2300      	movs	r3, #0
20000ed4:	2200      	movs	r2, #0
20000ed6:	4841      	ldr	r0, [pc, #260]	@ (20000fdc <main+0x210>)
20000ed8:	f7ff fb9c 	bl	20000614 <APACC>

  APACC(0x00000002, &apacc_reg, 0,READ);
20000edc:	1d39      	adds	r1, r7, #4
20000ede:	2301      	movs	r3, #1
20000ee0:	2200      	movs	r2, #0
20000ee2:	2002      	movs	r0, #2
20000ee4:	f7ff fb96 	bl	20000614 <APACC>


  APACC(0xE000EDF0, &apacc_reg, 1,WRITE);
20000ee8:	1d39      	adds	r1, r7, #4
20000eea:	2300      	movs	r3, #0
20000eec:	2201      	movs	r2, #1
20000eee:	483c      	ldr	r0, [pc, #240]	@ (20000fe0 <main+0x214>)
20000ef0:	f7ff fb90 	bl	20000614 <APACC>

  APACC(DUMMY_WRITE_VAL, &apacc_reg, 1,READ);
20000ef4:	1d39      	adds	r1, r7, #4
20000ef6:	2301      	movs	r3, #1
20000ef8:	2201      	movs	r2, #1
20000efa:	2001      	movs	r0, #1
20000efc:	f7ff fb8a 	bl	20000614 <APACC>

  /* this command halts the core */
  APACC(0xA05F0003, &apacc_reg, 3,WRITE);
20000f00:	1d39      	adds	r1, r7, #4
20000f02:	2300      	movs	r3, #0
20000f04:	2203      	movs	r2, #3
20000f06:	4837      	ldr	r0, [pc, #220]	@ (20000fe4 <main+0x218>)
20000f08:	f7ff fb84 	bl	20000614 <APACC>


  APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000f0c:	1d39      	adds	r1, r7, #4
20000f0e:	2301      	movs	r3, #1
20000f10:	2203      	movs	r2, #3
20000f12:	4835      	ldr	r0, [pc, #212]	@ (20000fe8 <main+0x21c>)
20000f14:	f7ff fb7e 	bl	20000614 <APACC>

  DPACC(writeVal, &dpacc_reg, 1, READ);
20000f18:	f107 0108 	add.w	r1, r7, #8
20000f1c:	2301      	movs	r3, #1
20000f1e:	2201      	movs	r2, #1
20000f20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000f22:	f7ff fae9 	bl	200004f8 <DPACC>

  APACC(0xDEADBEEF, &apacc_reg, 3,WRITE);
20000f26:	1d39      	adds	r1, r7, #4
20000f28:	2300      	movs	r3, #0
20000f2a:	2203      	movs	r2, #3
20000f2c:	482f      	ldr	r0, [pc, #188]	@ (20000fec <main+0x220>)
20000f2e:	f7ff fb71 	bl	20000614 <APACC>

  APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000f32:	1d39      	adds	r1, r7, #4
20000f34:	2301      	movs	r3, #1
20000f36:	2203      	movs	r2, #3
20000f38:	482b      	ldr	r0, [pc, #172]	@ (20000fe8 <main+0x21c>)
20000f3a:	f7ff fb6b 	bl	20000614 <APACC>

  DPACC(writeVal, &dpacc_reg, 1, READ);
20000f3e:	f107 0108 	add.w	r1, r7, #8
20000f42:	2301      	movs	r3, #1
20000f44:	2201      	movs	r2, #1
20000f46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000f48:	f7ff fad6 	bl	200004f8 <DPACC>

  /* read banked data */
  writeVal = 0x10;
20000f4c:	2310      	movs	r3, #16
20000f4e:	633b      	str	r3, [r7, #48]	@ 0x30

  DPACC(writeVal, &dpacc_reg, 2, WRITE);
20000f50:	f107 0108 	add.w	r1, r7, #8
20000f54:	2300      	movs	r3, #0
20000f56:	2202      	movs	r2, #2
20000f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000f5a:	f7ff facd 	bl	200004f8 <DPACC>

  APACC(0xAA55AA55, &apacc_reg, 0,READ);
20000f5e:	1d39      	adds	r1, r7, #4
20000f60:	2301      	movs	r3, #1
20000f62:	2200      	movs	r2, #0
20000f64:	4820      	ldr	r0, [pc, #128]	@ (20000fe8 <main+0x21c>)
20000f66:	f7ff fb55 	bl	20000614 <APACC>

  APACC(0xAA55AA55, &apacc_reg, 1,READ);
20000f6a:	1d39      	adds	r1, r7, #4
20000f6c:	2301      	movs	r3, #1
20000f6e:	2201      	movs	r2, #1
20000f70:	481d      	ldr	r0, [pc, #116]	@ (20000fe8 <main+0x21c>)
20000f72:	f7ff fb4f 	bl	20000614 <APACC>

  APACC(0xAA55AA55, &apacc_reg, 2,READ);
20000f76:	1d39      	adds	r1, r7, #4
20000f78:	2301      	movs	r3, #1
20000f7a:	2202      	movs	r2, #2
20000f7c:	481a      	ldr	r0, [pc, #104]	@ (20000fe8 <main+0x21c>)
20000f7e:	f7ff fb49 	bl	20000614 <APACC>

  APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000f82:	1d39      	adds	r1, r7, #4
20000f84:	2301      	movs	r3, #1
20000f86:	2203      	movs	r2, #3
20000f88:	4817      	ldr	r0, [pc, #92]	@ (20000fe8 <main+0x21c>)
20000f8a:	f7ff fb43 	bl	20000614 <APACC>


  /* read ID */

  writeVal = 0xf0;
20000f8e:	23f0      	movs	r3, #240	@ 0xf0
20000f90:	633b      	str	r3, [r7, #48]	@ 0x30

  DPACC(writeVal, &dpacc_reg, 2, WRITE);
20000f92:	f107 0108 	add.w	r1, r7, #8
20000f96:	2300      	movs	r3, #0
20000f98:	2202      	movs	r2, #2
20000f9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
20000f9c:	f7ff faac 	bl	200004f8 <DPACC>

  APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000fa0:	1d39      	adds	r1, r7, #4
20000fa2:	2301      	movs	r3, #1
20000fa4:	2203      	movs	r2, #3
20000fa6:	4810      	ldr	r0, [pc, #64]	@ (20000fe8 <main+0x21c>)
20000fa8:	f7ff fb34 	bl	20000614 <APACC>

  APACC(0xAA55AA55, &apacc_reg, 2,READ);
20000fac:	1d39      	adds	r1, r7, #4
20000fae:	2301      	movs	r3, #1
20000fb0:	2202      	movs	r2, #2
20000fb2:	480d      	ldr	r0, [pc, #52]	@ (20000fe8 <main+0x21c>)
20000fb4:	f7ff fb2e 	bl	20000614 <APACC>





  idCode = JTAG_ReadIDCODE();
20000fb8:	f7ff feac 	bl	20000d14 <JTAG_ReadIDCODE>
20000fbc:	4603      	mov	r3, r0
20000fbe:	60fb      	str	r3, [r7, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20000fc0:	bf00      	nop
20000fc2:	e7fd      	b.n	20000fc0 <main+0x1f4>
20000fc4:	40023800 	.word	0x40023800
20000fc8:	40013400 	.word	0x40013400
20000fcc:	e0a0dbad 	.word	0xe0a0dbad
20000fd0:	70a0dbad 	.word	0x70a0dbad
20000fd4:	38a0dbad 	.word	0x38a0dbad
20000fd8:	50000020 	.word	0x50000020
20000fdc:	22000002 	.word	0x22000002
20000fe0:	e000edf0 	.word	0xe000edf0
20000fe4:	a05f0003 	.word	0xa05f0003
20000fe8:	aa55aa55 	.word	0xaa55aa55
20000fec:	deadbeef 	.word	0xdeadbeef

20000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20000ff0:	b580      	push	{r7, lr}
20000ff2:	b094      	sub	sp, #80	@ 0x50
20000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000ff6:	f107 0320 	add.w	r3, r7, #32
20000ffa:	2230      	movs	r2, #48	@ 0x30
20000ffc:	2100      	movs	r1, #0
20000ffe:	4618      	mov	r0, r3
20001000:	f003 ff0a 	bl	20004e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20001004:	f107 030c 	add.w	r3, r7, #12
20001008:	2200      	movs	r2, #0
2000100a:	601a      	str	r2, [r3, #0]
2000100c:	605a      	str	r2, [r3, #4]
2000100e:	609a      	str	r2, [r3, #8]
20001010:	60da      	str	r2, [r3, #12]
20001012:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
20001014:	f001 fdc8 	bl	20002ba8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20001018:	4b2a      	ldr	r3, [pc, #168]	@ (200010c4 <SystemClock_Config+0xd4>)
2000101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000101c:	4a29      	ldr	r2, [pc, #164]	@ (200010c4 <SystemClock_Config+0xd4>)
2000101e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20001022:	6413      	str	r3, [r2, #64]	@ 0x40
20001024:	4b27      	ldr	r3, [pc, #156]	@ (200010c4 <SystemClock_Config+0xd4>)
20001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20001028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000102c:	60bb      	str	r3, [r7, #8]
2000102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20001030:	4b25      	ldr	r3, [pc, #148]	@ (200010c8 <SystemClock_Config+0xd8>)
20001032:	681b      	ldr	r3, [r3, #0]
20001034:	4a24      	ldr	r2, [pc, #144]	@ (200010c8 <SystemClock_Config+0xd8>)
20001036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
2000103a:	6013      	str	r3, [r2, #0]
2000103c:	4b22      	ldr	r3, [pc, #136]	@ (200010c8 <SystemClock_Config+0xd8>)
2000103e:	681b      	ldr	r3, [r3, #0]
20001040:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20001044:	607b      	str	r3, [r7, #4]
20001046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20001048:	2301      	movs	r3, #1
2000104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
2000104c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
20001050:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20001052:	2302      	movs	r3, #2
20001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20001056:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
2000105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
2000105c:	2304      	movs	r3, #4
2000105e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
20001060:	23d8      	movs	r3, #216	@ 0xd8
20001062:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20001064:	2302      	movs	r3, #2
20001066:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
20001068:	2309      	movs	r3, #9
2000106a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000106c:	f107 0320 	add.w	r3, r7, #32
20001070:	4618      	mov	r0, r3
20001072:	f001 fdf9 	bl	20002c68 <HAL_RCC_OscConfig>
20001076:	4603      	mov	r3, r0
20001078:	2b00      	cmp	r3, #0
2000107a:	d001      	beq.n	20001080 <SystemClock_Config+0x90>
  {
    Error_Handler();
2000107c:	f000 fb23 	bl	200016c6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20001080:	f001 fda2 	bl	20002bc8 <HAL_PWREx_EnableOverDrive>
20001084:	4603      	mov	r3, r0
20001086:	2b00      	cmp	r3, #0
20001088:	d001      	beq.n	2000108e <SystemClock_Config+0x9e>
  {
    Error_Handler();
2000108a:	f000 fb1c 	bl	200016c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000108e:	230f      	movs	r3, #15
20001090:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20001092:	2302      	movs	r3, #2
20001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20001096:	2300      	movs	r3, #0
20001098:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000109a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
2000109e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
200010a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200010a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
200010a6:	f107 030c 	add.w	r3, r7, #12
200010aa:	2107      	movs	r1, #7
200010ac:	4618      	mov	r0, r3
200010ae:	f002 f87f 	bl	200031b0 <HAL_RCC_ClockConfig>
200010b2:	4603      	mov	r3, r0
200010b4:	2b00      	cmp	r3, #0
200010b6:	d001      	beq.n	200010bc <SystemClock_Config+0xcc>
  {
    Error_Handler();
200010b8:	f000 fb05 	bl	200016c6 <Error_Handler>
  }
}
200010bc:	bf00      	nop
200010be:	3750      	adds	r7, #80	@ 0x50
200010c0:	46bd      	mov	sp, r7
200010c2:	bd80      	pop	{r7, pc}
200010c4:	40023800 	.word	0x40023800
200010c8:	40007000 	.word	0x40007000

200010cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
200010cc:	b580      	push	{r7, lr}
200010ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
200010d0:	4b1f      	ldr	r3, [pc, #124]	@ (20001150 <MX_ETH_Init+0x84>)
200010d2:	4a20      	ldr	r2, [pc, #128]	@ (20001154 <MX_ETH_Init+0x88>)
200010d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
200010d6:	4b20      	ldr	r3, [pc, #128]	@ (20001158 <MX_ETH_Init+0x8c>)
200010d8:	2200      	movs	r2, #0
200010da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
200010dc:	4b1e      	ldr	r3, [pc, #120]	@ (20001158 <MX_ETH_Init+0x8c>)
200010de:	2280      	movs	r2, #128	@ 0x80
200010e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
200010e2:	4b1d      	ldr	r3, [pc, #116]	@ (20001158 <MX_ETH_Init+0x8c>)
200010e4:	22e1      	movs	r2, #225	@ 0xe1
200010e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
200010e8:	4b1b      	ldr	r3, [pc, #108]	@ (20001158 <MX_ETH_Init+0x8c>)
200010ea:	2200      	movs	r2, #0
200010ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
200010ee:	4b1a      	ldr	r3, [pc, #104]	@ (20001158 <MX_ETH_Init+0x8c>)
200010f0:	2200      	movs	r2, #0
200010f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
200010f4:	4b18      	ldr	r3, [pc, #96]	@ (20001158 <MX_ETH_Init+0x8c>)
200010f6:	2200      	movs	r2, #0
200010f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
200010fa:	4b15      	ldr	r3, [pc, #84]	@ (20001150 <MX_ETH_Init+0x84>)
200010fc:	4a16      	ldr	r2, [pc, #88]	@ (20001158 <MX_ETH_Init+0x8c>)
200010fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
20001100:	4b13      	ldr	r3, [pc, #76]	@ (20001150 <MX_ETH_Init+0x84>)
20001102:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
20001106:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
20001108:	4b11      	ldr	r3, [pc, #68]	@ (20001150 <MX_ETH_Init+0x84>)
2000110a:	4a14      	ldr	r2, [pc, #80]	@ (2000115c <MX_ETH_Init+0x90>)
2000110c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
2000110e:	4b10      	ldr	r3, [pc, #64]	@ (20001150 <MX_ETH_Init+0x84>)
20001110:	4a13      	ldr	r2, [pc, #76]	@ (20001160 <MX_ETH_Init+0x94>)
20001112:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
20001114:	4b0e      	ldr	r3, [pc, #56]	@ (20001150 <MX_ETH_Init+0x84>)
20001116:	f240 52f4 	movw	r2, #1524	@ 0x5f4
2000111a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
2000111c:	480c      	ldr	r0, [pc, #48]	@ (20001150 <MX_ETH_Init+0x84>)
2000111e:	f000 fef5 	bl	20001f0c <HAL_ETH_Init>
20001122:	4603      	mov	r3, r0
20001124:	2b00      	cmp	r3, #0
20001126:	d001      	beq.n	2000112c <MX_ETH_Init+0x60>
  {
    Error_Handler();
20001128:	f000 facd 	bl	200016c6 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
2000112c:	2238      	movs	r2, #56	@ 0x38
2000112e:	2100      	movs	r1, #0
20001130:	480c      	ldr	r0, [pc, #48]	@ (20001164 <MX_ETH_Init+0x98>)
20001132:	f003 fe71 	bl	20004e18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
20001136:	4b0b      	ldr	r3, [pc, #44]	@ (20001164 <MX_ETH_Init+0x98>)
20001138:	2221      	movs	r2, #33	@ 0x21
2000113a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
2000113c:	4b09      	ldr	r3, [pc, #36]	@ (20001164 <MX_ETH_Init+0x98>)
2000113e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
20001142:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
20001144:	4b07      	ldr	r3, [pc, #28]	@ (20001164 <MX_ETH_Init+0x98>)
20001146:	2200      	movs	r2, #0
20001148:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
2000114a:	bf00      	nop
2000114c:	bd80      	pop	{r7, pc}
2000114e:	bf00      	nop
20001150:	20005050 	.word	0x20005050
20001154:	40028000 	.word	0x40028000
20001158:	2000573c 	.word	0x2000573c
2000115c:	20004f5c 	.word	0x20004f5c
20001160:	20004ebc 	.word	0x20004ebc
20001164:	20005018 	.word	0x20005018

20001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
20001168:	b580      	push	{r7, lr}
2000116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
2000116c:	4b1b      	ldr	r3, [pc, #108]	@ (200011dc <MX_SPI1_Init+0x74>)
2000116e:	4a1c      	ldr	r2, [pc, #112]	@ (200011e0 <MX_SPI1_Init+0x78>)
20001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
20001172:	4b1a      	ldr	r3, [pc, #104]	@ (200011dc <MX_SPI1_Init+0x74>)
20001174:	f44f 7282 	mov.w	r2, #260	@ 0x104
20001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
2000117a:	4b18      	ldr	r3, [pc, #96]	@ (200011dc <MX_SPI1_Init+0x74>)
2000117c:	2200      	movs	r2, #0
2000117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
20001180:	4b16      	ldr	r3, [pc, #88]	@ (200011dc <MX_SPI1_Init+0x74>)
20001182:	f44f 7240 	mov.w	r2, #768	@ 0x300
20001186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
20001188:	4b14      	ldr	r3, [pc, #80]	@ (200011dc <MX_SPI1_Init+0x74>)
2000118a:	2200      	movs	r2, #0
2000118c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
2000118e:	4b13      	ldr	r3, [pc, #76]	@ (200011dc <MX_SPI1_Init+0x74>)
20001190:	2200      	movs	r2, #0
20001192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
20001194:	4b11      	ldr	r3, [pc, #68]	@ (200011dc <MX_SPI1_Init+0x74>)
20001196:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000119a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
2000119c:	4b0f      	ldr	r3, [pc, #60]	@ (200011dc <MX_SPI1_Init+0x74>)
2000119e:	2238      	movs	r2, #56	@ 0x38
200011a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
200011a2:	4b0e      	ldr	r3, [pc, #56]	@ (200011dc <MX_SPI1_Init+0x74>)
200011a4:	2280      	movs	r2, #128	@ 0x80
200011a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
200011a8:	4b0c      	ldr	r3, [pc, #48]	@ (200011dc <MX_SPI1_Init+0x74>)
200011aa:	2200      	movs	r2, #0
200011ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200011ae:	4b0b      	ldr	r3, [pc, #44]	@ (200011dc <MX_SPI1_Init+0x74>)
200011b0:	2200      	movs	r2, #0
200011b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
200011b4:	4b09      	ldr	r3, [pc, #36]	@ (200011dc <MX_SPI1_Init+0x74>)
200011b6:	2207      	movs	r2, #7
200011b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
200011ba:	4b08      	ldr	r3, [pc, #32]	@ (200011dc <MX_SPI1_Init+0x74>)
200011bc:	2200      	movs	r2, #0
200011be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
200011c0:	4b06      	ldr	r3, [pc, #24]	@ (200011dc <MX_SPI1_Init+0x74>)
200011c2:	2208      	movs	r2, #8
200011c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
200011c6:	4805      	ldr	r0, [pc, #20]	@ (200011dc <MX_SPI1_Init+0x74>)
200011c8:	f002 fe08 	bl	20003ddc <HAL_SPI_Init>
200011cc:	4603      	mov	r3, r0
200011ce:	2b00      	cmp	r3, #0
200011d0:	d001      	beq.n	200011d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
200011d2:	f000 fa78 	bl	200016c6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
200011d6:	bf00      	nop
200011d8:	bd80      	pop	{r7, pc}
200011da:	bf00      	nop
200011dc:	20005100 	.word	0x20005100
200011e0:	40013000 	.word	0x40013000

200011e4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
200011e4:	b580      	push	{r7, lr}
200011e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
200011e8:	4b19      	ldr	r3, [pc, #100]	@ (20001250 <MX_SPI4_Init+0x6c>)
200011ea:	4a1a      	ldr	r2, [pc, #104]	@ (20001254 <MX_SPI4_Init+0x70>)
200011ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
200011ee:	4b18      	ldr	r3, [pc, #96]	@ (20001250 <MX_SPI4_Init+0x6c>)
200011f0:	2200      	movs	r2, #0
200011f2:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
200011f4:	4b16      	ldr	r3, [pc, #88]	@ (20001250 <MX_SPI4_Init+0x6c>)
200011f6:	2200      	movs	r2, #0
200011f8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
200011fa:	4b15      	ldr	r3, [pc, #84]	@ (20001250 <MX_SPI4_Init+0x6c>)
200011fc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
20001200:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
20001202:	4b13      	ldr	r3, [pc, #76]	@ (20001250 <MX_SPI4_Init+0x6c>)
20001204:	2200      	movs	r2, #0
20001206:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
20001208:	4b11      	ldr	r3, [pc, #68]	@ (20001250 <MX_SPI4_Init+0x6c>)
2000120a:	2200      	movs	r2, #0
2000120c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
2000120e:	4b10      	ldr	r3, [pc, #64]	@ (20001250 <MX_SPI4_Init+0x6c>)
20001210:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001214:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_LSB;
20001216:	4b0e      	ldr	r3, [pc, #56]	@ (20001250 <MX_SPI4_Init+0x6c>)
20001218:	2280      	movs	r2, #128	@ 0x80
2000121a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
2000121c:	4b0c      	ldr	r3, [pc, #48]	@ (20001250 <MX_SPI4_Init+0x6c>)
2000121e:	2200      	movs	r2, #0
20001220:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20001222:	4b0b      	ldr	r3, [pc, #44]	@ (20001250 <MX_SPI4_Init+0x6c>)
20001224:	2200      	movs	r2, #0
20001226:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
20001228:	4b09      	ldr	r3, [pc, #36]	@ (20001250 <MX_SPI4_Init+0x6c>)
2000122a:	2207      	movs	r2, #7
2000122c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
2000122e:	4b08      	ldr	r3, [pc, #32]	@ (20001250 <MX_SPI4_Init+0x6c>)
20001230:	2200      	movs	r2, #0
20001232:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
20001234:	4b06      	ldr	r3, [pc, #24]	@ (20001250 <MX_SPI4_Init+0x6c>)
20001236:	2200      	movs	r2, #0
20001238:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
2000123a:	4805      	ldr	r0, [pc, #20]	@ (20001250 <MX_SPI4_Init+0x6c>)
2000123c:	f002 fdce 	bl	20003ddc <HAL_SPI_Init>
20001240:	4603      	mov	r3, r0
20001242:	2b00      	cmp	r3, #0
20001244:	d001      	beq.n	2000124a <MX_SPI4_Init+0x66>
  {
    Error_Handler();
20001246:	f000 fa3e 	bl	200016c6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
2000124a:	bf00      	nop
2000124c:	bd80      	pop	{r7, pc}
2000124e:	bf00      	nop
20001250:	20005164 	.word	0x20005164
20001254:	40013400 	.word	0x40013400

20001258 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
20001258:	b580      	push	{r7, lr}
2000125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
2000125c:	4b14      	ldr	r3, [pc, #80]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
2000125e:	4a15      	ldr	r2, [pc, #84]	@ (200012b4 <MX_USART3_UART_Init+0x5c>)
20001260:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
20001262:	4b13      	ldr	r3, [pc, #76]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
20001264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
20001268:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
2000126a:	4b11      	ldr	r3, [pc, #68]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
2000126c:	2200      	movs	r2, #0
2000126e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
20001270:	4b0f      	ldr	r3, [pc, #60]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
20001272:	2200      	movs	r2, #0
20001274:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
20001276:	4b0e      	ldr	r3, [pc, #56]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
20001278:	2200      	movs	r2, #0
2000127a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
2000127c:	4b0c      	ldr	r3, [pc, #48]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
2000127e:	220c      	movs	r2, #12
20001280:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
20001282:	4b0b      	ldr	r3, [pc, #44]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
20001284:	2200      	movs	r2, #0
20001286:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
20001288:	4b09      	ldr	r3, [pc, #36]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
2000128a:	2200      	movs	r2, #0
2000128c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
2000128e:	4b08      	ldr	r3, [pc, #32]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
20001290:	2200      	movs	r2, #0
20001292:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
20001294:	4b06      	ldr	r3, [pc, #24]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
20001296:	2200      	movs	r2, #0
20001298:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
2000129a:	4805      	ldr	r0, [pc, #20]	@ (200012b0 <MX_USART3_UART_Init+0x58>)
2000129c:	f002 fe49 	bl	20003f32 <HAL_UART_Init>
200012a0:	4603      	mov	r3, r0
200012a2:	2b00      	cmp	r3, #0
200012a4:	d001      	beq.n	200012aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
200012a6:	f000 fa0e 	bl	200016c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
200012aa:	bf00      	nop
200012ac:	bd80      	pop	{r7, pc}
200012ae:	bf00      	nop
200012b0:	200051c8 	.word	0x200051c8
200012b4:	40004800 	.word	0x40004800

200012b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
200012b8:	b580      	push	{r7, lr}
200012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
200012bc:	4b14      	ldr	r3, [pc, #80]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
200012c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
200012c4:	4b12      	ldr	r3, [pc, #72]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012c6:	2206      	movs	r2, #6
200012c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
200012ca:	4b11      	ldr	r3, [pc, #68]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012cc:	2202      	movs	r2, #2
200012ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
200012d0:	4b0f      	ldr	r3, [pc, #60]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012d2:	2200      	movs	r2, #0
200012d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
200012d6:	4b0e      	ldr	r3, [pc, #56]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012d8:	2202      	movs	r2, #2
200012da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
200012dc:	4b0c      	ldr	r3, [pc, #48]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012de:	2201      	movs	r2, #1
200012e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
200012e2:	4b0b      	ldr	r3, [pc, #44]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012e4:	2200      	movs	r2, #0
200012e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
200012e8:	4b09      	ldr	r3, [pc, #36]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012ea:	2200      	movs	r2, #0
200012ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
200012ee:	4b08      	ldr	r3, [pc, #32]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012f0:	2201      	movs	r2, #1
200012f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
200012f4:	4b06      	ldr	r3, [pc, #24]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012f6:	2200      	movs	r2, #0
200012f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
200012fa:	4805      	ldr	r0, [pc, #20]	@ (20001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
200012fc:	f001 fb19 	bl	20002932 <HAL_PCD_Init>
20001300:	4603      	mov	r3, r0
20001302:	2b00      	cmp	r3, #0
20001304:	d001      	beq.n	2000130a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
20001306:	f000 f9de 	bl	200016c6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
2000130a:	bf00      	nop
2000130c:	bd80      	pop	{r7, pc}
2000130e:	bf00      	nop
20001310:	20005250 	.word	0x20005250

20001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
20001314:	b580      	push	{r7, lr}
20001316:	b08c      	sub	sp, #48	@ 0x30
20001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000131a:	f107 031c 	add.w	r3, r7, #28
2000131e:	2200      	movs	r2, #0
20001320:	601a      	str	r2, [r3, #0]
20001322:	605a      	str	r2, [r3, #4]
20001324:	609a      	str	r2, [r3, #8]
20001326:	60da      	str	r2, [r3, #12]
20001328:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
2000132a:	4b79      	ldr	r3, [pc, #484]	@ (20001510 <MX_GPIO_Init+0x1fc>)
2000132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000132e:	4a78      	ldr	r2, [pc, #480]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001330:	f043 0310 	orr.w	r3, r3, #16
20001334:	6313      	str	r3, [r2, #48]	@ 0x30
20001336:	4b76      	ldr	r3, [pc, #472]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000133a:	f003 0310 	and.w	r3, r3, #16
2000133e:	61bb      	str	r3, [r7, #24]
20001340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20001342:	4b73      	ldr	r3, [pc, #460]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001346:	4a72      	ldr	r2, [pc, #456]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001348:	f043 0304 	orr.w	r3, r3, #4
2000134c:	6313      	str	r3, [r2, #48]	@ 0x30
2000134e:	4b70      	ldr	r3, [pc, #448]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001352:	f003 0304 	and.w	r3, r3, #4
20001356:	617b      	str	r3, [r7, #20]
20001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000135a:	4b6d      	ldr	r3, [pc, #436]	@ (20001510 <MX_GPIO_Init+0x1fc>)
2000135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000135e:	4a6c      	ldr	r2, [pc, #432]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20001364:	6313      	str	r3, [r2, #48]	@ 0x30
20001366:	4b6a      	ldr	r3, [pc, #424]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000136e:	613b      	str	r3, [r7, #16]
20001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20001372:	4b67      	ldr	r3, [pc, #412]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001376:	4a66      	ldr	r2, [pc, #408]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001378:	f043 0301 	orr.w	r3, r3, #1
2000137c:	6313      	str	r3, [r2, #48]	@ 0x30
2000137e:	4b64      	ldr	r3, [pc, #400]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001382:	f003 0301 	and.w	r3, r3, #1
20001386:	60fb      	str	r3, [r7, #12]
20001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000138a:	4b61      	ldr	r3, [pc, #388]	@ (20001510 <MX_GPIO_Init+0x1fc>)
2000138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000138e:	4a60      	ldr	r2, [pc, #384]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001390:	f043 0302 	orr.w	r3, r3, #2
20001394:	6313      	str	r3, [r2, #48]	@ 0x30
20001396:	4b5e      	ldr	r3, [pc, #376]	@ (20001510 <MX_GPIO_Init+0x1fc>)
20001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000139a:	f003 0302 	and.w	r3, r3, #2
2000139e:	60bb      	str	r3, [r7, #8]
200013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
200013a2:	4b5b      	ldr	r3, [pc, #364]	@ (20001510 <MX_GPIO_Init+0x1fc>)
200013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200013a6:	4a5a      	ldr	r2, [pc, #360]	@ (20001510 <MX_GPIO_Init+0x1fc>)
200013a8:	f043 0308 	orr.w	r3, r3, #8
200013ac:	6313      	str	r3, [r2, #48]	@ 0x30
200013ae:	4b58      	ldr	r3, [pc, #352]	@ (20001510 <MX_GPIO_Init+0x1fc>)
200013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200013b2:	f003 0308 	and.w	r3, r3, #8
200013b6:	607b      	str	r3, [r7, #4]
200013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
200013ba:	4b55      	ldr	r3, [pc, #340]	@ (20001510 <MX_GPIO_Init+0x1fc>)
200013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200013be:	4a54      	ldr	r2, [pc, #336]	@ (20001510 <MX_GPIO_Init+0x1fc>)
200013c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200013c4:	6313      	str	r3, [r2, #48]	@ 0x30
200013c6:	4b52      	ldr	r3, [pc, #328]	@ (20001510 <MX_GPIO_Init+0x1fc>)
200013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200013ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200013ce:	603b      	str	r3, [r7, #0]
200013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
200013d2:	2200      	movs	r2, #0
200013d4:	f244 0181 	movw	r1, #16513	@ 0x4081
200013d8:	484e      	ldr	r0, [pc, #312]	@ (20001514 <MX_GPIO_Init+0x200>)
200013da:	f001 fa91 	bl	20002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
200013de:	2200      	movs	r2, #0
200013e0:	2140      	movs	r1, #64	@ 0x40
200013e2:	484d      	ldr	r0, [pc, #308]	@ (20001518 <MX_GPIO_Init+0x204>)
200013e4:	f001 fa8c 	bl	20002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TRST_Pin|JTAG_TDI_Pin, GPIO_PIN_SET);
200013e8:	2201      	movs	r2, #1
200013ea:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
200013ee:	484b      	ldr	r0, [pc, #300]	@ (2000151c <MX_GPIO_Init+0x208>)
200013f0:	f001 fa86 	bl	20002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TMS_Pin|JTAG_TCK_Pin, GPIO_PIN_RESET);
200013f4:	2200      	movs	r2, #0
200013f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
200013fa:	4848      	ldr	r0, [pc, #288]	@ (2000151c <MX_GPIO_Init+0x208>)
200013fc:	f001 fa80 	bl	20002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JTAG_SRST_GPIO_Port, JTAG_SRST_Pin, GPIO_PIN_SET);
20001400:	2201      	movs	r2, #1
20001402:	2104      	movs	r1, #4
20001404:	4846      	ldr	r0, [pc, #280]	@ (20001520 <MX_GPIO_Init+0x20c>)
20001406:	f001 fa7b 	bl	20002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
2000140a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
2000140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
20001410:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
20001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001416:	2300      	movs	r3, #0
20001418:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
2000141a:	f107 031c 	add.w	r3, r7, #28
2000141e:	4619      	mov	r1, r3
20001420:	483e      	ldr	r0, [pc, #248]	@ (2000151c <MX_GPIO_Init+0x208>)
20001422:	f001 f8c1 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
20001426:	f244 0381 	movw	r3, #16513	@ 0x4081
2000142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000142c:	2301      	movs	r3, #1
2000142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001430:	2300      	movs	r3, #0
20001432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001434:	2300      	movs	r3, #0
20001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001438:	f107 031c 	add.w	r3, r7, #28
2000143c:	4619      	mov	r1, r3
2000143e:	4835      	ldr	r0, [pc, #212]	@ (20001514 <MX_GPIO_Init+0x200>)
20001440:	f001 f8b2 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
20001444:	2340      	movs	r3, #64	@ 0x40
20001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001448:	2301      	movs	r3, #1
2000144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000144c:	2300      	movs	r3, #0
2000144e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001450:	2300      	movs	r3, #0
20001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
20001454:	f107 031c 	add.w	r3, r7, #28
20001458:	4619      	mov	r1, r3
2000145a:	482f      	ldr	r0, [pc, #188]	@ (20001518 <MX_GPIO_Init+0x204>)
2000145c:	f001 f8a4 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
20001460:	2380      	movs	r3, #128	@ 0x80
20001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20001464:	2300      	movs	r3, #0
20001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001468:	2300      	movs	r3, #0
2000146a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
2000146c:	f107 031c 	add.w	r3, r7, #28
20001470:	4619      	mov	r1, r3
20001472:	4829      	ldr	r0, [pc, #164]	@ (20001518 <MX_GPIO_Init+0x204>)
20001474:	f001 f898 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TRST_Pin */
  GPIO_InitStruct.Pin = JTAG_TRST_Pin;
20001478:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000147e:	2301      	movs	r3, #1
20001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001482:	2300      	movs	r3, #0
20001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001486:	2303      	movs	r3, #3
20001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TRST_GPIO_Port, &GPIO_InitStruct);
2000148a:	f107 031c 	add.w	r3, r7, #28
2000148e:	4619      	mov	r1, r3
20001490:	4822      	ldr	r0, [pc, #136]	@ (2000151c <MX_GPIO_Init+0x208>)
20001492:	f001 f889 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JTAG_TMS_Pin JTAG_TCK_Pin */
  GPIO_InitStruct.Pin = JTAG_TMS_Pin|JTAG_TCK_Pin;
20001496:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
2000149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000149c:	2301      	movs	r3, #1
2000149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
200014a0:	2302      	movs	r3, #2
200014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200014a4:	2303      	movs	r3, #3
200014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200014a8:	f107 031c 	add.w	r3, r7, #28
200014ac:	4619      	mov	r1, r3
200014ae:	481b      	ldr	r0, [pc, #108]	@ (2000151c <MX_GPIO_Init+0x208>)
200014b0:	f001 f87a 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDO_Pin */
  GPIO_InitStruct.Pin = JTAG_TDO_Pin;
200014b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
200014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
200014ba:	2300      	movs	r3, #0
200014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200014be:	2301      	movs	r3, #1
200014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JTAG_TDO_GPIO_Port, &GPIO_InitStruct);
200014c2:	f107 031c 	add.w	r3, r7, #28
200014c6:	4619      	mov	r1, r3
200014c8:	4814      	ldr	r0, [pc, #80]	@ (2000151c <MX_GPIO_Init+0x208>)
200014ca:	f001 f86d 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDI_Pin */
  GPIO_InitStruct.Pin = JTAG_TDI_Pin;
200014ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200014d4:	2301      	movs	r3, #1
200014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200014d8:	2301      	movs	r3, #1
200014da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200014dc:	2303      	movs	r3, #3
200014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TDI_GPIO_Port, &GPIO_InitStruct);
200014e0:	f107 031c 	add.w	r3, r7, #28
200014e4:	4619      	mov	r1, r3
200014e6:	480d      	ldr	r0, [pc, #52]	@ (2000151c <MX_GPIO_Init+0x208>)
200014e8:	f001 f85e 	bl	200025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_SRST_Pin */
  GPIO_InitStruct.Pin = JTAG_SRST_Pin;
200014ec:	2304      	movs	r3, #4
200014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200014f0:	2301      	movs	r3, #1
200014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200014f4:	2301      	movs	r3, #1
200014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200014f8:	2303      	movs	r3, #3
200014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_SRST_GPIO_Port, &GPIO_InitStruct);
200014fc:	f107 031c 	add.w	r3, r7, #28
20001500:	4619      	mov	r1, r3
20001502:	4807      	ldr	r0, [pc, #28]	@ (20001520 <MX_GPIO_Init+0x20c>)
20001504:	f001 f850 	bl	200025a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
20001508:	bf00      	nop
2000150a:	3730      	adds	r7, #48	@ 0x30
2000150c:	46bd      	mov	sp, r7
2000150e:	bd80      	pop	{r7, pc}
20001510:	40023800 	.word	0x40023800
20001514:	40020400 	.word	0x40020400
20001518:	40021800 	.word	0x40021800
2000151c:	40020800 	.word	0x40020800
20001520:	40020c00 	.word	0x40020c00

20001524 <Switch_SPI>:

/* USER CODE BEGIN 4 */

uint32_t pupdr, afr, moder;
void Switch_SPI(void)
{
20001524:	b480      	push	{r7}
20001526:	af00      	add	r7, sp, #0
	pupdr = GPIOC->PUPDR;
20001528:	4b0f      	ldr	r3, [pc, #60]	@ (20001568 <Switch_SPI+0x44>)
2000152a:	68db      	ldr	r3, [r3, #12]
2000152c:	4a0f      	ldr	r2, [pc, #60]	@ (2000156c <Switch_SPI+0x48>)
2000152e:	6013      	str	r3, [r2, #0]
	afr = GPIOC->AFR[1];
20001530:	4b0d      	ldr	r3, [pc, #52]	@ (20001568 <Switch_SPI+0x44>)
20001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20001534:	4a0e      	ldr	r2, [pc, #56]	@ (20001570 <Switch_SPI+0x4c>)
20001536:	6013      	str	r3, [r2, #0]
	moder = GPIOC->MODER;
20001538:	4b0b      	ldr	r3, [pc, #44]	@ (20001568 <Switch_SPI+0x44>)
2000153a:	681b      	ldr	r3, [r3, #0]
2000153c:	4a0d      	ldr	r2, [pc, #52]	@ (20001574 <Switch_SPI+0x50>)
2000153e:	6013      	str	r3, [r2, #0]

	GPIOC->PUPDR = (0x1 << 16);
20001540:	4b09      	ldr	r3, [pc, #36]	@ (20001568 <Switch_SPI+0x44>)
20001542:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20001546:	60da      	str	r2, [r3, #12]
	GPIOC->AFR[1] = (0x6 << 8) | (0x6 << 12) | (0x6 << 16);
20001548:	4b07      	ldr	r3, [pc, #28]	@ (20001568 <Switch_SPI+0x44>)
2000154a:	4a0b      	ldr	r2, [pc, #44]	@ (20001578 <Switch_SPI+0x54>)
2000154c:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOC->MODER = (1 << 16) | (0x1 << 18) | (0x2 << 20) | (0x2 << 22 )| (0x2 << 24);
2000154e:	4b06      	ldr	r3, [pc, #24]	@ (20001568 <Switch_SPI+0x44>)
20001550:	4a0a      	ldr	r2, [pc, #40]	@ (2000157c <Switch_SPI+0x58>)
20001552:	601a      	str	r2, [r3, #0]

	SPI3->CR1 = (0x1 << 8) | (0x1 << 9) |
20001554:	4b0a      	ldr	r3, [pc, #40]	@ (20001580 <Switch_SPI+0x5c>)
20001556:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
2000155a:	601a      	str	r2, [r3, #0]
			(1 << 2) | (0x7 << 3) | (0x1 << 7) |
			(0x1 << 6);


}
2000155c:	bf00      	nop
2000155e:	46bd      	mov	sp, r7
20001560:	f85d 7b04 	ldr.w	r7, [sp], #4
20001564:	4770      	bx	lr
20001566:	bf00      	nop
20001568:	40020800 	.word	0x40020800
2000156c:	20005730 	.word	0x20005730
20001570:	20005734 	.word	0x20005734
20001574:	20005738 	.word	0x20005738
20001578:	00066600 	.word	0x00066600
2000157c:	02a50000 	.word	0x02a50000
20001580:	40003c00 	.word	0x40003c00

20001584 <WaitForStart>:
	GPIOC->MODER = moder;

}

static inline void WaitForStart(void)
{
20001584:	b480      	push	{r7}
20001586:	af00      	add	r7, sp, #0
	while( !(SPI3->SR & (0x1 << 7) ) );
20001588:	bf00      	nop
2000158a:	4b06      	ldr	r3, [pc, #24]	@ (200015a4 <WaitForStart+0x20>)
2000158c:	689b      	ldr	r3, [r3, #8]
2000158e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001592:	2b00      	cmp	r3, #0
20001594:	d0f9      	beq.n	2000158a <WaitForStart+0x6>
}
20001596:	bf00      	nop
20001598:	bf00      	nop
2000159a:	46bd      	mov	sp, r7
2000159c:	f85d 7b04 	ldr.w	r7, [sp], #4
200015a0:	4770      	bx	lr
200015a2:	bf00      	nop
200015a4:	40003c00 	.word	0x40003c00

200015a8 <WaitForComplete>:

static inline void WaitForComplete(void)
{
200015a8:	b480      	push	{r7}
200015aa:	af00      	add	r7, sp, #0
	while( (SPI3->SR & (0x1 << 7) ) );
200015ac:	bf00      	nop
200015ae:	4b06      	ldr	r3, [pc, #24]	@ (200015c8 <WaitForComplete+0x20>)
200015b0:	689b      	ldr	r3, [r3, #8]
200015b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200015b6:	2b00      	cmp	r3, #0
200015b8:	d1f9      	bne.n	200015ae <WaitForComplete+0x6>
}
200015ba:	bf00      	nop
200015bc:	bf00      	nop
200015be:	46bd      	mov	sp, r7
200015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200015c4:	4770      	bx	lr
200015c6:	bf00      	nop
200015c8:	40003c00 	.word	0x40003c00

200015cc <xFer>:

static inline void xFer(uint32_t *rdData, uint32_t wrData, uint8_t bitSize)
{
200015cc:	b580      	push	{r7, lr}
200015ce:	b084      	sub	sp, #16
200015d0:	af00      	add	r7, sp, #0
200015d2:	60f8      	str	r0, [r7, #12]
200015d4:	60b9      	str	r1, [r7, #8]
200015d6:	4613      	mov	r3, r2
200015d8:	71fb      	strb	r3, [r7, #7]
	SPI3->CR2 = ( (bitSize -1) << 8);
200015da:	79fb      	ldrb	r3, [r7, #7]
200015dc:	3b01      	subs	r3, #1
200015de:	021a      	lsls	r2, r3, #8
200015e0:	4b0c      	ldr	r3, [pc, #48]	@ (20001614 <xFer+0x48>)
200015e2:	605a      	str	r2, [r3, #4]

	if(bitSize <= 8)
200015e4:	79fb      	ldrb	r3, [r7, #7]
200015e6:	2b08      	cmp	r3, #8
200015e8:	d804      	bhi.n	200015f4 <xFer+0x28>
	{
		*(uint8_t *)&SPI3->DR = wrData;
200015ea:	4b0b      	ldr	r3, [pc, #44]	@ (20001618 <xFer+0x4c>)
200015ec:	68ba      	ldr	r2, [r7, #8]
200015ee:	b2d2      	uxtb	r2, r2
200015f0:	701a      	strb	r2, [r3, #0]
200015f2:	e002      	b.n	200015fa <xFer+0x2e>
	}
	else
	{
		SPI3->DR = wrData;
200015f4:	4a07      	ldr	r2, [pc, #28]	@ (20001614 <xFer+0x48>)
200015f6:	68bb      	ldr	r3, [r7, #8]
200015f8:	60d3      	str	r3, [r2, #12]
	}


	WaitForStart();
200015fa:	f7ff ffc3 	bl	20001584 <WaitForStart>
	WaitForComplete();
200015fe:	f7ff ffd3 	bl	200015a8 <WaitForComplete>

	*rdData = SPI3->DR;
20001602:	4b04      	ldr	r3, [pc, #16]	@ (20001614 <xFer+0x48>)
20001604:	68da      	ldr	r2, [r3, #12]
20001606:	68fb      	ldr	r3, [r7, #12]
20001608:	601a      	str	r2, [r3, #0]
}
2000160a:	bf00      	nop
2000160c:	3710      	adds	r7, #16
2000160e:	46bd      	mov	sp, r7
20001610:	bd80      	pop	{r7, pc}
20001612:	bf00      	nop
20001614:	40003c00 	.word	0x40003c00
20001618:	40003c0c 	.word	0x40003c0c

2000161c <SPI_TMS_Transfer>:


void SPI_TMS_Transfer(uint32_t data, uint8_t bits)
{
2000161c:	b480      	push	{r7}
2000161e:	b085      	sub	sp, #20
20001620:	af00      	add	r7, sp, #0
20001622:	6078      	str	r0, [r7, #4]
20001624:	460b      	mov	r3, r1
20001626:	70fb      	strb	r3, [r7, #3]

	int a = 0, b = 0;
20001628:	2300      	movs	r3, #0
2000162a:	60bb      	str	r3, [r7, #8]
2000162c:	2300      	movs	r3, #0
2000162e:	60fb      	str	r3, [r7, #12]



	while( (SPI3->SR & (0x1 << 7) ) )
20001630:	e002      	b.n	20001638 <SPI_TMS_Transfer+0x1c>
	{
		b++;
20001632:	68fb      	ldr	r3, [r7, #12]
20001634:	3301      	adds	r3, #1
20001636:	60fb      	str	r3, [r7, #12]
	while( (SPI3->SR & (0x1 << 7) ) )
20001638:	4b0a      	ldr	r3, [pc, #40]	@ (20001664 <SPI_TMS_Transfer+0x48>)
2000163a:	689b      	ldr	r3, [r3, #8]
2000163c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001640:	2b00      	cmp	r3, #0
20001642:	d1f6      	bne.n	20001632 <SPI_TMS_Transfer+0x16>
	}


	*(uint16_t *)&SPI4->DR = data;
20001644:	4b08      	ldr	r3, [pc, #32]	@ (20001668 <SPI_TMS_Transfer+0x4c>)
20001646:	687a      	ldr	r2, [r7, #4]
20001648:	b292      	uxth	r2, r2
2000164a:	801a      	strh	r2, [r3, #0]

	SPI4->CR2 = ( (bits -1) << 8);
2000164c:	78fb      	ldrb	r3, [r7, #3]
2000164e:	3b01      	subs	r3, #1
20001650:	021a      	lsls	r2, r3, #8
20001652:	4b06      	ldr	r3, [pc, #24]	@ (2000166c <SPI_TMS_Transfer+0x50>)
20001654:	605a      	str	r2, [r3, #4]


}
20001656:	bf00      	nop
20001658:	3714      	adds	r7, #20
2000165a:	46bd      	mov	sp, r7
2000165c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001660:	4770      	bx	lr
20001662:	bf00      	nop
20001664:	40003c00 	.word	0x40003c00
20001668:	4001340c 	.word	0x4001340c
2000166c:	40013400 	.word	0x40013400

20001670 <SPI_Transfer>:

int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize)
{
20001670:	b5b0      	push	{r4, r5, r7, lr}
20001672:	b088      	sub	sp, #32
20001674:	af00      	add	r7, sp, #0
20001676:	60f8      	str	r0, [r7, #12]
20001678:	e9c7 2300 	strd	r2, r3, [r7]
	int retVal = -1;
2000167c:	f04f 33ff 	mov.w	r3, #4294967295
20001680:	61fb      	str	r3, [r7, #28]
	int i = 0;
20001682:	2300      	movs	r3, #0
20001684:	61bb      	str	r3, [r7, #24]


	int halfWordIterationCnt = (bitSize / 16) -1;
20001686:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
2000168a:	091b      	lsrs	r3, r3, #4
2000168c:	b2db      	uxtb	r3, r3
2000168e:	3b01      	subs	r3, #1
20001690:	617b      	str	r3, [r7, #20]
	uint32_t tempReadVal, tempWriteVal;

	*rdData = 0;
20001692:	68f9      	ldr	r1, [r7, #12]
20001694:	f04f 0200 	mov.w	r2, #0
20001698:	f04f 0300 	mov.w	r3, #0
2000169c:	e9c1 2300 	strd	r2, r3, [r1]
	xFer(&tempReadVal, wrData, 16);
200016a0:	6839      	ldr	r1, [r7, #0]
200016a2:	f107 0310 	add.w	r3, r7, #16
200016a6:	2210      	movs	r2, #16
200016a8:	4618      	mov	r0, r3
200016aa:	f7ff ff8f 	bl	200015cc <xFer>
	*rdData = tempReadVal;
200016ae:	693b      	ldr	r3, [r7, #16]
200016b0:	2200      	movs	r2, #0
200016b2:	461c      	mov	r4, r3
200016b4:	4615      	mov	r5, r2
200016b6:	68fb      	ldr	r3, [r7, #12]
200016b8:	e9c3 4500 	strd	r4, r5, [r3]
	}

	//Switch_GPIO();

#endif
}
200016bc:	bf00      	nop
200016be:	4618      	mov	r0, r3
200016c0:	3720      	adds	r7, #32
200016c2:	46bd      	mov	sp, r7
200016c4:	bdb0      	pop	{r4, r5, r7, pc}

200016c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
200016c6:	b480      	push	{r7}
200016c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
200016ca:	b672      	cpsid	i
}
200016cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
200016ce:	bf00      	nop
200016d0:	e7fd      	b.n	200016ce <Error_Handler+0x8>
	...

200016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
200016d4:	b480      	push	{r7}
200016d6:	b083      	sub	sp, #12
200016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
200016da:	4b0f      	ldr	r3, [pc, #60]	@ (20001718 <HAL_MspInit+0x44>)
200016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200016de:	4a0e      	ldr	r2, [pc, #56]	@ (20001718 <HAL_MspInit+0x44>)
200016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200016e4:	6413      	str	r3, [r2, #64]	@ 0x40
200016e6:	4b0c      	ldr	r3, [pc, #48]	@ (20001718 <HAL_MspInit+0x44>)
200016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200016ee:	607b      	str	r3, [r7, #4]
200016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200016f2:	4b09      	ldr	r3, [pc, #36]	@ (20001718 <HAL_MspInit+0x44>)
200016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200016f6:	4a08      	ldr	r2, [pc, #32]	@ (20001718 <HAL_MspInit+0x44>)
200016f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
200016fc:	6453      	str	r3, [r2, #68]	@ 0x44
200016fe:	4b06      	ldr	r3, [pc, #24]	@ (20001718 <HAL_MspInit+0x44>)
20001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20001706:	603b      	str	r3, [r7, #0]
20001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000170a:	bf00      	nop
2000170c:	370c      	adds	r7, #12
2000170e:	46bd      	mov	sp, r7
20001710:	f85d 7b04 	ldr.w	r7, [sp], #4
20001714:	4770      	bx	lr
20001716:	bf00      	nop
20001718:	40023800 	.word	0x40023800

2000171c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
2000171c:	b580      	push	{r7, lr}
2000171e:	b08e      	sub	sp, #56	@ 0x38
20001720:	af00      	add	r7, sp, #0
20001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001728:	2200      	movs	r2, #0
2000172a:	601a      	str	r2, [r3, #0]
2000172c:	605a      	str	r2, [r3, #4]
2000172e:	609a      	str	r2, [r3, #8]
20001730:	60da      	str	r2, [r3, #12]
20001732:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
20001734:	687b      	ldr	r3, [r7, #4]
20001736:	681b      	ldr	r3, [r3, #0]
20001738:	4a4e      	ldr	r2, [pc, #312]	@ (20001874 <HAL_ETH_MspInit+0x158>)
2000173a:	4293      	cmp	r3, r2
2000173c:	f040 8096 	bne.w	2000186c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
20001740:	4b4d      	ldr	r3, [pc, #308]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
20001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001744:	4a4c      	ldr	r2, [pc, #304]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
20001746:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
2000174a:	6313      	str	r3, [r2, #48]	@ 0x30
2000174c:	4b4a      	ldr	r3, [pc, #296]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
2000174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20001754:	623b      	str	r3, [r7, #32]
20001756:	6a3b      	ldr	r3, [r7, #32]
20001758:	4b47      	ldr	r3, [pc, #284]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
2000175a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000175c:	4a46      	ldr	r2, [pc, #280]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
2000175e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20001762:	6313      	str	r3, [r2, #48]	@ 0x30
20001764:	4b44      	ldr	r3, [pc, #272]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
20001766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001768:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
2000176c:	61fb      	str	r3, [r7, #28]
2000176e:	69fb      	ldr	r3, [r7, #28]
20001770:	4b41      	ldr	r3, [pc, #260]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
20001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001774:	4a40      	ldr	r2, [pc, #256]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
20001776:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000177a:	6313      	str	r3, [r2, #48]	@ 0x30
2000177c:	4b3e      	ldr	r3, [pc, #248]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
2000177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20001784:	61bb      	str	r3, [r7, #24]
20001786:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
20001788:	4b3b      	ldr	r3, [pc, #236]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
2000178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000178c:	4a3a      	ldr	r2, [pc, #232]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
2000178e:	f043 0304 	orr.w	r3, r3, #4
20001792:	6313      	str	r3, [r2, #48]	@ 0x30
20001794:	4b38      	ldr	r3, [pc, #224]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
20001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001798:	f003 0304 	and.w	r3, r3, #4
2000179c:	617b      	str	r3, [r7, #20]
2000179e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
200017a0:	4b35      	ldr	r3, [pc, #212]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017a4:	4a34      	ldr	r2, [pc, #208]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017a6:	f043 0301 	orr.w	r3, r3, #1
200017aa:	6313      	str	r3, [r2, #48]	@ 0x30
200017ac:	4b32      	ldr	r3, [pc, #200]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017b0:	f003 0301 	and.w	r3, r3, #1
200017b4:	613b      	str	r3, [r7, #16]
200017b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
200017b8:	4b2f      	ldr	r3, [pc, #188]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017bc:	4a2e      	ldr	r2, [pc, #184]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017be:	f043 0302 	orr.w	r3, r3, #2
200017c2:	6313      	str	r3, [r2, #48]	@ 0x30
200017c4:	4b2c      	ldr	r3, [pc, #176]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017c8:	f003 0302 	and.w	r3, r3, #2
200017cc:	60fb      	str	r3, [r7, #12]
200017ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
200017d0:	4b29      	ldr	r3, [pc, #164]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017d4:	4a28      	ldr	r2, [pc, #160]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200017da:	6313      	str	r3, [r2, #48]	@ 0x30
200017dc:	4b26      	ldr	r3, [pc, #152]	@ (20001878 <HAL_ETH_MspInit+0x15c>)
200017de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200017e4:	60bb      	str	r3, [r7, #8]
200017e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
200017e8:	2332      	movs	r3, #50	@ 0x32
200017ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200017ec:	2302      	movs	r3, #2
200017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200017f0:	2300      	movs	r3, #0
200017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200017f4:	2303      	movs	r3, #3
200017f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
200017f8:	230b      	movs	r3, #11
200017fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200017fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001800:	4619      	mov	r1, r3
20001802:	481e      	ldr	r0, [pc, #120]	@ (2000187c <HAL_ETH_MspInit+0x160>)
20001804:	f000 fed0 	bl	200025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
20001808:	2386      	movs	r3, #134	@ 0x86
2000180a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000180c:	2302      	movs	r3, #2
2000180e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001810:	2300      	movs	r3, #0
20001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001814:	2303      	movs	r3, #3
20001816:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20001818:	230b      	movs	r3, #11
2000181a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000181c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001820:	4619      	mov	r1, r3
20001822:	4817      	ldr	r0, [pc, #92]	@ (20001880 <HAL_ETH_MspInit+0x164>)
20001824:	f000 fec0 	bl	200025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
20001828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
2000182c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000182e:	2302      	movs	r3, #2
20001830:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001832:	2300      	movs	r3, #0
20001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001836:	2303      	movs	r3, #3
20001838:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
2000183a:	230b      	movs	r3, #11
2000183c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
2000183e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001842:	4619      	mov	r1, r3
20001844:	480f      	ldr	r0, [pc, #60]	@ (20001884 <HAL_ETH_MspInit+0x168>)
20001846:	f000 feaf 	bl	200025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
2000184a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
2000184e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001850:	2302      	movs	r3, #2
20001852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001854:	2300      	movs	r3, #0
20001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001858:	2303      	movs	r3, #3
2000185a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
2000185c:	230b      	movs	r3, #11
2000185e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
20001860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001864:	4619      	mov	r1, r3
20001866:	4808      	ldr	r0, [pc, #32]	@ (20001888 <HAL_ETH_MspInit+0x16c>)
20001868:	f000 fe9e 	bl	200025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
2000186c:	bf00      	nop
2000186e:	3738      	adds	r7, #56	@ 0x38
20001870:	46bd      	mov	sp, r7
20001872:	bd80      	pop	{r7, pc}
20001874:	40028000 	.word	0x40028000
20001878:	40023800 	.word	0x40023800
2000187c:	40020800 	.word	0x40020800
20001880:	40020000 	.word	0x40020000
20001884:	40020400 	.word	0x40020400
20001888:	40021800 	.word	0x40021800

2000188c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
2000188c:	b580      	push	{r7, lr}
2000188e:	b08c      	sub	sp, #48	@ 0x30
20001890:	af00      	add	r7, sp, #0
20001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001894:	f107 031c 	add.w	r3, r7, #28
20001898:	2200      	movs	r2, #0
2000189a:	601a      	str	r2, [r3, #0]
2000189c:	605a      	str	r2, [r3, #4]
2000189e:	609a      	str	r2, [r3, #8]
200018a0:	60da      	str	r2, [r3, #12]
200018a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
200018a4:	687b      	ldr	r3, [r7, #4]
200018a6:	681b      	ldr	r3, [r3, #0]
200018a8:	4a3c      	ldr	r2, [pc, #240]	@ (2000199c <HAL_SPI_MspInit+0x110>)
200018aa:	4293      	cmp	r3, r2
200018ac:	d144      	bne.n	20001938 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
200018ae:	4b3c      	ldr	r3, [pc, #240]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200018b2:	4a3b      	ldr	r2, [pc, #236]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
200018b8:	6453      	str	r3, [r2, #68]	@ 0x44
200018ba:	4b39      	ldr	r3, [pc, #228]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200018be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
200018c2:	61bb      	str	r3, [r7, #24]
200018c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
200018c6:	4b36      	ldr	r3, [pc, #216]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018ca:	4a35      	ldr	r2, [pc, #212]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018cc:	f043 0301 	orr.w	r3, r3, #1
200018d0:	6313      	str	r3, [r2, #48]	@ 0x30
200018d2:	4b33      	ldr	r3, [pc, #204]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018d6:	f003 0301 	and.w	r3, r3, #1
200018da:	617b      	str	r3, [r7, #20]
200018dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
200018de:	4b30      	ldr	r3, [pc, #192]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018e2:	4a2f      	ldr	r2, [pc, #188]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018e4:	f043 0302 	orr.w	r3, r3, #2
200018e8:	6313      	str	r3, [r2, #48]	@ 0x30
200018ea:	4b2d      	ldr	r3, [pc, #180]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
200018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018ee:	f003 0302 	and.w	r3, r3, #2
200018f2:	613b      	str	r3, [r7, #16]
200018f4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
200018f6:	2360      	movs	r3, #96	@ 0x60
200018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200018fa:	2302      	movs	r3, #2
200018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200018fe:	2300      	movs	r3, #0
20001900:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001902:	2303      	movs	r3, #3
20001904:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20001906:	2305      	movs	r3, #5
20001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000190a:	f107 031c 	add.w	r3, r7, #28
2000190e:	4619      	mov	r1, r3
20001910:	4824      	ldr	r0, [pc, #144]	@ (200019a4 <HAL_SPI_MspInit+0x118>)
20001912:	f000 fe49 	bl	200025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
20001916:	2320      	movs	r3, #32
20001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000191a:	2302      	movs	r3, #2
2000191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000191e:	2300      	movs	r3, #0
20001920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001922:	2303      	movs	r3, #3
20001924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20001926:	2305      	movs	r3, #5
20001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000192a:	f107 031c 	add.w	r3, r7, #28
2000192e:	4619      	mov	r1, r3
20001930:	481d      	ldr	r0, [pc, #116]	@ (200019a8 <HAL_SPI_MspInit+0x11c>)
20001932:	f000 fe39 	bl	200025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
20001936:	e02c      	b.n	20001992 <HAL_SPI_MspInit+0x106>
  else if(hspi->Instance==SPI4)
20001938:	687b      	ldr	r3, [r7, #4]
2000193a:	681b      	ldr	r3, [r3, #0]
2000193c:	4a1b      	ldr	r2, [pc, #108]	@ (200019ac <HAL_SPI_MspInit+0x120>)
2000193e:	4293      	cmp	r3, r2
20001940:	d127      	bne.n	20001992 <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
20001942:	4b17      	ldr	r3, [pc, #92]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
20001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001946:	4a16      	ldr	r2, [pc, #88]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
20001948:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
2000194c:	6453      	str	r3, [r2, #68]	@ 0x44
2000194e:	4b14      	ldr	r3, [pc, #80]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
20001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20001956:	60fb      	str	r3, [r7, #12]
20001958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
2000195a:	4b11      	ldr	r3, [pc, #68]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
2000195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000195e:	4a10      	ldr	r2, [pc, #64]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
20001960:	f043 0310 	orr.w	r3, r3, #16
20001964:	6313      	str	r3, [r2, #48]	@ 0x30
20001966:	4b0e      	ldr	r3, [pc, #56]	@ (200019a0 <HAL_SPI_MspInit+0x114>)
20001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000196a:	f003 0310 	and.w	r3, r3, #16
2000196e:	60bb      	str	r3, [r7, #8]
20001970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
20001972:	2364      	movs	r3, #100	@ 0x64
20001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001976:	2302      	movs	r3, #2
20001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000197a:	2300      	movs	r3, #0
2000197c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000197e:	2303      	movs	r3, #3
20001980:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
20001982:	2305      	movs	r3, #5
20001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
20001986:	f107 031c 	add.w	r3, r7, #28
2000198a:	4619      	mov	r1, r3
2000198c:	4808      	ldr	r0, [pc, #32]	@ (200019b0 <HAL_SPI_MspInit+0x124>)
2000198e:	f000 fe0b 	bl	200025a8 <HAL_GPIO_Init>
}
20001992:	bf00      	nop
20001994:	3730      	adds	r7, #48	@ 0x30
20001996:	46bd      	mov	sp, r7
20001998:	bd80      	pop	{r7, pc}
2000199a:	bf00      	nop
2000199c:	40013000 	.word	0x40013000
200019a0:	40023800 	.word	0x40023800
200019a4:	40020000 	.word	0x40020000
200019a8:	40020400 	.word	0x40020400
200019ac:	40013400 	.word	0x40013400
200019b0:	40021000 	.word	0x40021000

200019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
200019b4:	b580      	push	{r7, lr}
200019b6:	b0aa      	sub	sp, #168	@ 0xa8
200019b8:	af00      	add	r7, sp, #0
200019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200019bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
200019c0:	2200      	movs	r2, #0
200019c2:	601a      	str	r2, [r3, #0]
200019c4:	605a      	str	r2, [r3, #4]
200019c6:	609a      	str	r2, [r3, #8]
200019c8:	60da      	str	r2, [r3, #12]
200019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
200019cc:	f107 0310 	add.w	r3, r7, #16
200019d0:	2284      	movs	r2, #132	@ 0x84
200019d2:	2100      	movs	r1, #0
200019d4:	4618      	mov	r0, r3
200019d6:	f003 fa1f 	bl	20004e18 <memset>
  if(huart->Instance==USART3)
200019da:	687b      	ldr	r3, [r7, #4]
200019dc:	681b      	ldr	r3, [r3, #0]
200019de:	4a22      	ldr	r2, [pc, #136]	@ (20001a68 <HAL_UART_MspInit+0xb4>)
200019e0:	4293      	cmp	r3, r2
200019e2:	d13c      	bne.n	20001a5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
200019e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
200019e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
200019ea:	2300      	movs	r3, #0
200019ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
200019ee:	f107 0310 	add.w	r3, r7, #16
200019f2:	4618      	mov	r0, r3
200019f4:	f001 fe02 	bl	200035fc <HAL_RCCEx_PeriphCLKConfig>
200019f8:	4603      	mov	r3, r0
200019fa:	2b00      	cmp	r3, #0
200019fc:	d001      	beq.n	20001a02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
200019fe:	f7ff fe62 	bl	200016c6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
20001a02:	4b1a      	ldr	r3, [pc, #104]	@ (20001a6c <HAL_UART_MspInit+0xb8>)
20001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20001a06:	4a19      	ldr	r2, [pc, #100]	@ (20001a6c <HAL_UART_MspInit+0xb8>)
20001a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
20001a0e:	4b17      	ldr	r3, [pc, #92]	@ (20001a6c <HAL_UART_MspInit+0xb8>)
20001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20001a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20001a16:	60fb      	str	r3, [r7, #12]
20001a18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
20001a1a:	4b14      	ldr	r3, [pc, #80]	@ (20001a6c <HAL_UART_MspInit+0xb8>)
20001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001a1e:	4a13      	ldr	r2, [pc, #76]	@ (20001a6c <HAL_UART_MspInit+0xb8>)
20001a20:	f043 0308 	orr.w	r3, r3, #8
20001a24:	6313      	str	r3, [r2, #48]	@ 0x30
20001a26:	4b11      	ldr	r3, [pc, #68]	@ (20001a6c <HAL_UART_MspInit+0xb8>)
20001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001a2a:	f003 0308 	and.w	r3, r3, #8
20001a2e:	60bb      	str	r3, [r7, #8]
20001a30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
20001a32:	f44f 7340 	mov.w	r3, #768	@ 0x300
20001a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001a3a:	2302      	movs	r3, #2
20001a3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
20001a40:	2301      	movs	r3, #1
20001a42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001a46:	2303      	movs	r3, #3
20001a48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
20001a4c:	2307      	movs	r3, #7
20001a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20001a52:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20001a56:	4619      	mov	r1, r3
20001a58:	4805      	ldr	r0, [pc, #20]	@ (20001a70 <HAL_UART_MspInit+0xbc>)
20001a5a:	f000 fda5 	bl	200025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
20001a5e:	bf00      	nop
20001a60:	37a8      	adds	r7, #168	@ 0xa8
20001a62:	46bd      	mov	sp, r7
20001a64:	bd80      	pop	{r7, pc}
20001a66:	bf00      	nop
20001a68:	40004800 	.word	0x40004800
20001a6c:	40023800 	.word	0x40023800
20001a70:	40020c00 	.word	0x40020c00

20001a74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
20001a74:	b580      	push	{r7, lr}
20001a76:	b0ac      	sub	sp, #176	@ 0xb0
20001a78:	af00      	add	r7, sp, #0
20001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001a7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
20001a80:	2200      	movs	r2, #0
20001a82:	601a      	str	r2, [r3, #0]
20001a84:	605a      	str	r2, [r3, #4]
20001a86:	609a      	str	r2, [r3, #8]
20001a88:	60da      	str	r2, [r3, #12]
20001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
20001a8c:	f107 0318 	add.w	r3, r7, #24
20001a90:	2284      	movs	r2, #132	@ 0x84
20001a92:	2100      	movs	r1, #0
20001a94:	4618      	mov	r0, r3
20001a96:	f003 f9bf 	bl	20004e18 <memset>
  if(hpcd->Instance==USB_OTG_FS)
20001a9a:	687b      	ldr	r3, [r7, #4]
20001a9c:	681b      	ldr	r3, [r3, #0]
20001a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20001aa2:	d159      	bne.n	20001b58 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
20001aa4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20001aa8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
20001aaa:	2300      	movs	r3, #0
20001aac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
20001ab0:	f107 0318 	add.w	r3, r7, #24
20001ab4:	4618      	mov	r0, r3
20001ab6:	f001 fda1 	bl	200035fc <HAL_RCCEx_PeriphCLKConfig>
20001aba:	4603      	mov	r3, r0
20001abc:	2b00      	cmp	r3, #0
20001abe:	d001      	beq.n	20001ac4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
20001ac0:	f7ff fe01 	bl	200016c6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
20001ac4:	4b26      	ldr	r3, [pc, #152]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001ac8:	4a25      	ldr	r2, [pc, #148]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001aca:	f043 0301 	orr.w	r3, r3, #1
20001ace:	6313      	str	r3, [r2, #48]	@ 0x30
20001ad0:	4b23      	ldr	r3, [pc, #140]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001ad4:	f003 0301 	and.w	r3, r3, #1
20001ad8:	617b      	str	r3, [r7, #20]
20001ada:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
20001adc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
20001ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001ae4:	2302      	movs	r3, #2
20001ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001aea:	2300      	movs	r3, #0
20001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001af0:	2303      	movs	r3, #3
20001af2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
20001af6:	230a      	movs	r3, #10
20001af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20001afc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
20001b00:	4619      	mov	r1, r3
20001b02:	4818      	ldr	r0, [pc, #96]	@ (20001b64 <HAL_PCD_MspInit+0xf0>)
20001b04:	f000 fd50 	bl	200025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
20001b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
20001b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20001b10:	2300      	movs	r3, #0
20001b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001b16:	2300      	movs	r3, #0
20001b18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
20001b1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
20001b20:	4619      	mov	r1, r3
20001b22:	4810      	ldr	r0, [pc, #64]	@ (20001b64 <HAL_PCD_MspInit+0xf0>)
20001b24:	f000 fd40 	bl	200025a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
20001b28:	4b0d      	ldr	r3, [pc, #52]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20001b2c:	4a0c      	ldr	r2, [pc, #48]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20001b32:	6353      	str	r3, [r2, #52]	@ 0x34
20001b34:	4b0a      	ldr	r3, [pc, #40]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20001b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001b3c:	613b      	str	r3, [r7, #16]
20001b3e:	693b      	ldr	r3, [r7, #16]
20001b40:	4b07      	ldr	r3, [pc, #28]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001b44:	4a06      	ldr	r2, [pc, #24]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20001b4a:	6453      	str	r3, [r2, #68]	@ 0x44
20001b4c:	4b04      	ldr	r3, [pc, #16]	@ (20001b60 <HAL_PCD_MspInit+0xec>)
20001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20001b54:	60fb      	str	r3, [r7, #12]
20001b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
20001b58:	bf00      	nop
20001b5a:	37b0      	adds	r7, #176	@ 0xb0
20001b5c:	46bd      	mov	sp, r7
20001b5e:	bd80      	pop	{r7, pc}
20001b60:	40023800 	.word	0x40023800
20001b64:	40020000 	.word	0x40020000

20001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20001b68:	b480      	push	{r7}
20001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
20001b6c:	bf00      	nop
20001b6e:	e7fd      	b.n	20001b6c <NMI_Handler+0x4>

20001b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20001b70:	b480      	push	{r7}
20001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20001b74:	bf00      	nop
20001b76:	e7fd      	b.n	20001b74 <HardFault_Handler+0x4>

20001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20001b78:	b480      	push	{r7}
20001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20001b7c:	bf00      	nop
20001b7e:	e7fd      	b.n	20001b7c <MemManage_Handler+0x4>

20001b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20001b80:	b480      	push	{r7}
20001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20001b84:	bf00      	nop
20001b86:	e7fd      	b.n	20001b84 <BusFault_Handler+0x4>

20001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20001b88:	b480      	push	{r7}
20001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001b8c:	bf00      	nop
20001b8e:	e7fd      	b.n	20001b8c <UsageFault_Handler+0x4>

20001b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20001b90:	b480      	push	{r7}
20001b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
20001b94:	bf00      	nop
20001b96:	46bd      	mov	sp, r7
20001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b9c:	4770      	bx	lr

20001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20001b9e:	b480      	push	{r7}
20001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20001ba2:	bf00      	nop
20001ba4:	46bd      	mov	sp, r7
20001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001baa:	4770      	bx	lr

20001bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20001bac:	b480      	push	{r7}
20001bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20001bb0:	bf00      	nop
20001bb2:	46bd      	mov	sp, r7
20001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bb8:	4770      	bx	lr

20001bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20001bba:	b580      	push	{r7, lr}
20001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20001bbe:	f000 f87b 	bl	20001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20001bc2:	bf00      	nop
20001bc4:	bd80      	pop	{r7, pc}
	...

20001bc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001bc8:	b480      	push	{r7}
20001bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001bcc:	4b06      	ldr	r3, [pc, #24]	@ (20001be8 <SystemInit+0x20>)
20001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20001bd2:	4a05      	ldr	r2, [pc, #20]	@ (20001be8 <SystemInit+0x20>)
20001bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
20001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20001bdc:	bf00      	nop
20001bde:	46bd      	mov	sp, r7
20001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
20001be4:	4770      	bx	lr
20001be6:	bf00      	nop
20001be8:	e000ed00 	.word	0xe000ed00

20001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20001bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 20001c24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
20001bf0:	f7ff ffea 	bl	20001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001bf4:	480c      	ldr	r0, [pc, #48]	@ (20001c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
20001bf6:	490d      	ldr	r1, [pc, #52]	@ (20001c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
20001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (20001c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
20001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001bfc:	e002      	b.n	20001c04 <LoopCopyDataInit>

20001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001c02:	3304      	adds	r3, #4

20001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001c08:	d3f9      	bcc.n	20001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (20001c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
20001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (20001c38 <LoopFillZerobss+0x22>)
  movs r3, #0
20001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
20001c10:	e001      	b.n	20001c16 <LoopFillZerobss>

20001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001c14:	3204      	adds	r2, #4

20001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001c18:	d3fb      	bcc.n	20001c12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
20001c1a:	f003 f905 	bl	20004e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001c1e:	f7ff f8d5 	bl	20000dcc <main>
  bx  lr    
20001c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20001c24:	20050000 	.word	0x20050000
  ldr r0, =_sdata
20001c28:	20004eb0 	.word	0x20004eb0
  ldr r1, =_edata
20001c2c:	20004ebc 	.word	0x20004ebc
  ldr r2, =_sidata
20001c30:	20004eb0 	.word	0x20004eb0
  ldr r2, =_sbss
20001c34:	20004ffc 	.word	0x20004ffc
  ldr r4, =_ebss
20001c38:	20005748 	.word	0x20005748

20001c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001c3c:	e7fe      	b.n	20001c3c <ADC_IRQHandler>

20001c3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001c3e:	b580      	push	{r7, lr}
20001c40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001c42:	2003      	movs	r0, #3
20001c44:	f000 f92e 	bl	20001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001c48:	2000      	movs	r0, #0
20001c4a:	f000 f805 	bl	20001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001c4e:	f7ff fd41 	bl	200016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001c52:	2300      	movs	r3, #0
}
20001c54:	4618      	mov	r0, r3
20001c56:	bd80      	pop	{r7, pc}

20001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001c58:	b580      	push	{r7, lr}
20001c5a:	b082      	sub	sp, #8
20001c5c:	af00      	add	r7, sp, #0
20001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001c60:	4b12      	ldr	r3, [pc, #72]	@ (20001cac <HAL_InitTick+0x54>)
20001c62:	681a      	ldr	r2, [r3, #0]
20001c64:	4b12      	ldr	r3, [pc, #72]	@ (20001cb0 <HAL_InitTick+0x58>)
20001c66:	781b      	ldrb	r3, [r3, #0]
20001c68:	4619      	mov	r1, r3
20001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
20001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
20001c72:	fbb2 f3f3 	udiv	r3, r2, r3
20001c76:	4618      	mov	r0, r3
20001c78:	f000 f93b 	bl	20001ef2 <HAL_SYSTICK_Config>
20001c7c:	4603      	mov	r3, r0
20001c7e:	2b00      	cmp	r3, #0
20001c80:	d001      	beq.n	20001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20001c82:	2301      	movs	r3, #1
20001c84:	e00e      	b.n	20001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001c86:	687b      	ldr	r3, [r7, #4]
20001c88:	2b0f      	cmp	r3, #15
20001c8a:	d80a      	bhi.n	20001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001c8c:	2200      	movs	r2, #0
20001c8e:	6879      	ldr	r1, [r7, #4]
20001c90:	f04f 30ff 	mov.w	r0, #4294967295
20001c94:	f000 f911 	bl	20001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001c98:	4a06      	ldr	r2, [pc, #24]	@ (20001cb4 <HAL_InitTick+0x5c>)
20001c9a:	687b      	ldr	r3, [r7, #4]
20001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001c9e:	2300      	movs	r3, #0
20001ca0:	e000      	b.n	20001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20001ca2:	2301      	movs	r3, #1
}
20001ca4:	4618      	mov	r0, r3
20001ca6:	3708      	adds	r7, #8
20001ca8:	46bd      	mov	sp, r7
20001caa:	bd80      	pop	{r7, pc}
20001cac:	20004eb0 	.word	0x20004eb0
20001cb0:	20004eb8 	.word	0x20004eb8
20001cb4:	20004eb4 	.word	0x20004eb4

20001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001cb8:	b480      	push	{r7}
20001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001cbc:	4b06      	ldr	r3, [pc, #24]	@ (20001cd8 <HAL_IncTick+0x20>)
20001cbe:	781b      	ldrb	r3, [r3, #0]
20001cc0:	461a      	mov	r2, r3
20001cc2:	4b06      	ldr	r3, [pc, #24]	@ (20001cdc <HAL_IncTick+0x24>)
20001cc4:	681b      	ldr	r3, [r3, #0]
20001cc6:	4413      	add	r3, r2
20001cc8:	4a04      	ldr	r2, [pc, #16]	@ (20001cdc <HAL_IncTick+0x24>)
20001cca:	6013      	str	r3, [r2, #0]
}
20001ccc:	bf00      	nop
20001cce:	46bd      	mov	sp, r7
20001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cd4:	4770      	bx	lr
20001cd6:	bf00      	nop
20001cd8:	20004eb8 	.word	0x20004eb8
20001cdc:	20005744 	.word	0x20005744

20001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001ce0:	b480      	push	{r7}
20001ce2:	af00      	add	r7, sp, #0
  return uwTick;
20001ce4:	4b03      	ldr	r3, [pc, #12]	@ (20001cf4 <HAL_GetTick+0x14>)
20001ce6:	681b      	ldr	r3, [r3, #0]
}
20001ce8:	4618      	mov	r0, r3
20001cea:	46bd      	mov	sp, r7
20001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cf0:	4770      	bx	lr
20001cf2:	bf00      	nop
20001cf4:	20005744 	.word	0x20005744

20001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001cf8:	b580      	push	{r7, lr}
20001cfa:	b084      	sub	sp, #16
20001cfc:	af00      	add	r7, sp, #0
20001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001d00:	f7ff ffee 	bl	20001ce0 <HAL_GetTick>
20001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20001d06:	687b      	ldr	r3, [r7, #4]
20001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001d0a:	68fb      	ldr	r3, [r7, #12]
20001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001d10:	d005      	beq.n	20001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20001d12:	4b0a      	ldr	r3, [pc, #40]	@ (20001d3c <HAL_Delay+0x44>)
20001d14:	781b      	ldrb	r3, [r3, #0]
20001d16:	461a      	mov	r2, r3
20001d18:	68fb      	ldr	r3, [r7, #12]
20001d1a:	4413      	add	r3, r2
20001d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
20001d1e:	bf00      	nop
20001d20:	f7ff ffde 	bl	20001ce0 <HAL_GetTick>
20001d24:	4602      	mov	r2, r0
20001d26:	68bb      	ldr	r3, [r7, #8]
20001d28:	1ad3      	subs	r3, r2, r3
20001d2a:	68fa      	ldr	r2, [r7, #12]
20001d2c:	429a      	cmp	r2, r3
20001d2e:	d8f7      	bhi.n	20001d20 <HAL_Delay+0x28>
  {
  }
}
20001d30:	bf00      	nop
20001d32:	bf00      	nop
20001d34:	3710      	adds	r7, #16
20001d36:	46bd      	mov	sp, r7
20001d38:	bd80      	pop	{r7, pc}
20001d3a:	bf00      	nop
20001d3c:	20004eb8 	.word	0x20004eb8

20001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001d40:	b480      	push	{r7}
20001d42:	b085      	sub	sp, #20
20001d44:	af00      	add	r7, sp, #0
20001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20001d48:	687b      	ldr	r3, [r7, #4]
20001d4a:	f003 0307 	and.w	r3, r3, #7
20001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001d50:	4b0b      	ldr	r3, [pc, #44]	@ (20001d80 <__NVIC_SetPriorityGrouping+0x40>)
20001d52:	68db      	ldr	r3, [r3, #12]
20001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20001d56:	68ba      	ldr	r2, [r7, #8]
20001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
20001d5c:	4013      	ands	r3, r2
20001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001d60:	68fb      	ldr	r3, [r7, #12]
20001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20001d64:	68bb      	ldr	r3, [r7, #8]
20001d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
20001d68:	4b06      	ldr	r3, [pc, #24]	@ (20001d84 <__NVIC_SetPriorityGrouping+0x44>)
20001d6a:	4313      	orrs	r3, r2
20001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20001d6e:	4a04      	ldr	r2, [pc, #16]	@ (20001d80 <__NVIC_SetPriorityGrouping+0x40>)
20001d70:	68bb      	ldr	r3, [r7, #8]
20001d72:	60d3      	str	r3, [r2, #12]
}
20001d74:	bf00      	nop
20001d76:	3714      	adds	r7, #20
20001d78:	46bd      	mov	sp, r7
20001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d7e:	4770      	bx	lr
20001d80:	e000ed00 	.word	0xe000ed00
20001d84:	05fa0000 	.word	0x05fa0000

20001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20001d88:	b480      	push	{r7}
20001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20001d8c:	4b04      	ldr	r3, [pc, #16]	@ (20001da0 <__NVIC_GetPriorityGrouping+0x18>)
20001d8e:	68db      	ldr	r3, [r3, #12]
20001d90:	0a1b      	lsrs	r3, r3, #8
20001d92:	f003 0307 	and.w	r3, r3, #7
}
20001d96:	4618      	mov	r0, r3
20001d98:	46bd      	mov	sp, r7
20001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d9e:	4770      	bx	lr
20001da0:	e000ed00 	.word	0xe000ed00

20001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20001da4:	b480      	push	{r7}
20001da6:	b083      	sub	sp, #12
20001da8:	af00      	add	r7, sp, #0
20001daa:	4603      	mov	r3, r0
20001dac:	6039      	str	r1, [r7, #0]
20001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001db4:	2b00      	cmp	r3, #0
20001db6:	db0a      	blt.n	20001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001db8:	683b      	ldr	r3, [r7, #0]
20001dba:	b2da      	uxtb	r2, r3
20001dbc:	490c      	ldr	r1, [pc, #48]	@ (20001df0 <__NVIC_SetPriority+0x4c>)
20001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001dc2:	0112      	lsls	r2, r2, #4
20001dc4:	b2d2      	uxtb	r2, r2
20001dc6:	440b      	add	r3, r1
20001dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001dcc:	e00a      	b.n	20001de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001dce:	683b      	ldr	r3, [r7, #0]
20001dd0:	b2da      	uxtb	r2, r3
20001dd2:	4908      	ldr	r1, [pc, #32]	@ (20001df4 <__NVIC_SetPriority+0x50>)
20001dd4:	79fb      	ldrb	r3, [r7, #7]
20001dd6:	f003 030f 	and.w	r3, r3, #15
20001dda:	3b04      	subs	r3, #4
20001ddc:	0112      	lsls	r2, r2, #4
20001dde:	b2d2      	uxtb	r2, r2
20001de0:	440b      	add	r3, r1
20001de2:	761a      	strb	r2, [r3, #24]
}
20001de4:	bf00      	nop
20001de6:	370c      	adds	r7, #12
20001de8:	46bd      	mov	sp, r7
20001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
20001dee:	4770      	bx	lr
20001df0:	e000e100 	.word	0xe000e100
20001df4:	e000ed00 	.word	0xe000ed00

20001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20001df8:	b480      	push	{r7}
20001dfa:	b089      	sub	sp, #36	@ 0x24
20001dfc:	af00      	add	r7, sp, #0
20001dfe:	60f8      	str	r0, [r7, #12]
20001e00:	60b9      	str	r1, [r7, #8]
20001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20001e04:	68fb      	ldr	r3, [r7, #12]
20001e06:	f003 0307 	and.w	r3, r3, #7
20001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001e0c:	69fb      	ldr	r3, [r7, #28]
20001e0e:	f1c3 0307 	rsb	r3, r3, #7
20001e12:	2b04      	cmp	r3, #4
20001e14:	bf28      	it	cs
20001e16:	2304      	movcs	r3, #4
20001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001e1a:	69fb      	ldr	r3, [r7, #28]
20001e1c:	3304      	adds	r3, #4
20001e1e:	2b06      	cmp	r3, #6
20001e20:	d902      	bls.n	20001e28 <NVIC_EncodePriority+0x30>
20001e22:	69fb      	ldr	r3, [r7, #28]
20001e24:	3b03      	subs	r3, #3
20001e26:	e000      	b.n	20001e2a <NVIC_EncodePriority+0x32>
20001e28:	2300      	movs	r3, #0
20001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001e2c:	f04f 32ff 	mov.w	r2, #4294967295
20001e30:	69bb      	ldr	r3, [r7, #24]
20001e32:	fa02 f303 	lsl.w	r3, r2, r3
20001e36:	43da      	mvns	r2, r3
20001e38:	68bb      	ldr	r3, [r7, #8]
20001e3a:	401a      	ands	r2, r3
20001e3c:	697b      	ldr	r3, [r7, #20]
20001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20001e40:	f04f 31ff 	mov.w	r1, #4294967295
20001e44:	697b      	ldr	r3, [r7, #20]
20001e46:	fa01 f303 	lsl.w	r3, r1, r3
20001e4a:	43d9      	mvns	r1, r3
20001e4c:	687b      	ldr	r3, [r7, #4]
20001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001e50:	4313      	orrs	r3, r2
         );
}
20001e52:	4618      	mov	r0, r3
20001e54:	3724      	adds	r7, #36	@ 0x24
20001e56:	46bd      	mov	sp, r7
20001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e5c:	4770      	bx	lr
	...

20001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001e60:	b580      	push	{r7, lr}
20001e62:	b082      	sub	sp, #8
20001e64:	af00      	add	r7, sp, #0
20001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001e68:	687b      	ldr	r3, [r7, #4]
20001e6a:	3b01      	subs	r3, #1
20001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20001e70:	d301      	bcc.n	20001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20001e72:	2301      	movs	r3, #1
20001e74:	e00f      	b.n	20001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001e76:	4a0a      	ldr	r2, [pc, #40]	@ (20001ea0 <SysTick_Config+0x40>)
20001e78:	687b      	ldr	r3, [r7, #4]
20001e7a:	3b01      	subs	r3, #1
20001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001e7e:	210f      	movs	r1, #15
20001e80:	f04f 30ff 	mov.w	r0, #4294967295
20001e84:	f7ff ff8e 	bl	20001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001e88:	4b05      	ldr	r3, [pc, #20]	@ (20001ea0 <SysTick_Config+0x40>)
20001e8a:	2200      	movs	r2, #0
20001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001e8e:	4b04      	ldr	r3, [pc, #16]	@ (20001ea0 <SysTick_Config+0x40>)
20001e90:	2207      	movs	r2, #7
20001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001e94:	2300      	movs	r3, #0
}
20001e96:	4618      	mov	r0, r3
20001e98:	3708      	adds	r7, #8
20001e9a:	46bd      	mov	sp, r7
20001e9c:	bd80      	pop	{r7, pc}
20001e9e:	bf00      	nop
20001ea0:	e000e010 	.word	0xe000e010

20001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001ea4:	b580      	push	{r7, lr}
20001ea6:	b082      	sub	sp, #8
20001ea8:	af00      	add	r7, sp, #0
20001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20001eac:	6878      	ldr	r0, [r7, #4]
20001eae:	f7ff ff47 	bl	20001d40 <__NVIC_SetPriorityGrouping>
}
20001eb2:	bf00      	nop
20001eb4:	3708      	adds	r7, #8
20001eb6:	46bd      	mov	sp, r7
20001eb8:	bd80      	pop	{r7, pc}

20001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20001eba:	b580      	push	{r7, lr}
20001ebc:	b086      	sub	sp, #24
20001ebe:	af00      	add	r7, sp, #0
20001ec0:	4603      	mov	r3, r0
20001ec2:	60b9      	str	r1, [r7, #8]
20001ec4:	607a      	str	r2, [r7, #4]
20001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
20001ec8:	2300      	movs	r3, #0
20001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20001ecc:	f7ff ff5c 	bl	20001d88 <__NVIC_GetPriorityGrouping>
20001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20001ed2:	687a      	ldr	r2, [r7, #4]
20001ed4:	68b9      	ldr	r1, [r7, #8]
20001ed6:	6978      	ldr	r0, [r7, #20]
20001ed8:	f7ff ff8e 	bl	20001df8 <NVIC_EncodePriority>
20001edc:	4602      	mov	r2, r0
20001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001ee2:	4611      	mov	r1, r2
20001ee4:	4618      	mov	r0, r3
20001ee6:	f7ff ff5d 	bl	20001da4 <__NVIC_SetPriority>
}
20001eea:	bf00      	nop
20001eec:	3718      	adds	r7, #24
20001eee:	46bd      	mov	sp, r7
20001ef0:	bd80      	pop	{r7, pc}

20001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20001ef2:	b580      	push	{r7, lr}
20001ef4:	b082      	sub	sp, #8
20001ef6:	af00      	add	r7, sp, #0
20001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20001efa:	6878      	ldr	r0, [r7, #4]
20001efc:	f7ff ffb0 	bl	20001e60 <SysTick_Config>
20001f00:	4603      	mov	r3, r0
}
20001f02:	4618      	mov	r0, r3
20001f04:	3708      	adds	r7, #8
20001f06:	46bd      	mov	sp, r7
20001f08:	bd80      	pop	{r7, pc}
	...

20001f0c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
20001f0c:	b580      	push	{r7, lr}
20001f0e:	b084      	sub	sp, #16
20001f10:	af00      	add	r7, sp, #0
20001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
20001f14:	687b      	ldr	r3, [r7, #4]
20001f16:	2b00      	cmp	r3, #0
20001f18:	d101      	bne.n	20001f1e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
20001f1a:	2301      	movs	r3, #1
20001f1c:	e086      	b.n	2000202c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
20001f1e:	687b      	ldr	r3, [r7, #4]
20001f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20001f24:	2b00      	cmp	r3, #0
20001f26:	d106      	bne.n	20001f36 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
20001f28:	687b      	ldr	r3, [r7, #4]
20001f2a:	2220      	movs	r2, #32
20001f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
20001f30:	6878      	ldr	r0, [r7, #4]
20001f32:	f7ff fbf3 	bl	2000171c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20001f36:	4b3f      	ldr	r3, [pc, #252]	@ (20002034 <HAL_ETH_Init+0x128>)
20001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001f3a:	4a3e      	ldr	r2, [pc, #248]	@ (20002034 <HAL_ETH_Init+0x128>)
20001f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20001f40:	6453      	str	r3, [r2, #68]	@ 0x44
20001f42:	4b3c      	ldr	r3, [pc, #240]	@ (20002034 <HAL_ETH_Init+0x128>)
20001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20001f4a:	60bb      	str	r3, [r7, #8]
20001f4c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
20001f4e:	4b3a      	ldr	r3, [pc, #232]	@ (20002038 <HAL_ETH_Init+0x12c>)
20001f50:	685b      	ldr	r3, [r3, #4]
20001f52:	4a39      	ldr	r2, [pc, #228]	@ (20002038 <HAL_ETH_Init+0x12c>)
20001f54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
20001f58:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
20001f5a:	4b37      	ldr	r3, [pc, #220]	@ (20002038 <HAL_ETH_Init+0x12c>)
20001f5c:	685a      	ldr	r2, [r3, #4]
20001f5e:	687b      	ldr	r3, [r7, #4]
20001f60:	689b      	ldr	r3, [r3, #8]
20001f62:	4935      	ldr	r1, [pc, #212]	@ (20002038 <HAL_ETH_Init+0x12c>)
20001f64:	4313      	orrs	r3, r2
20001f66:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
20001f68:	4b33      	ldr	r3, [pc, #204]	@ (20002038 <HAL_ETH_Init+0x12c>)
20001f6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
20001f6c:	687b      	ldr	r3, [r7, #4]
20001f6e:	681b      	ldr	r3, [r3, #0]
20001f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20001f74:	681b      	ldr	r3, [r3, #0]
20001f76:	687a      	ldr	r2, [r7, #4]
20001f78:	6812      	ldr	r2, [r2, #0]
20001f7a:	f043 0301 	orr.w	r3, r3, #1
20001f7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
20001f82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20001f84:	f7ff feac 	bl	20001ce0 <HAL_GetTick>
20001f88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
20001f8a:	e011      	b.n	20001fb0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
20001f8c:	f7ff fea8 	bl	20001ce0 <HAL_GetTick>
20001f90:	4602      	mov	r2, r0
20001f92:	68fb      	ldr	r3, [r7, #12]
20001f94:	1ad3      	subs	r3, r2, r3
20001f96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
20001f9a:	d909      	bls.n	20001fb0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
20001f9c:	687b      	ldr	r3, [r7, #4]
20001f9e:	2204      	movs	r2, #4
20001fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
20001fa4:	687b      	ldr	r3, [r7, #4]
20001fa6:	22e0      	movs	r2, #224	@ 0xe0
20001fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
20001fac:	2301      	movs	r3, #1
20001fae:	e03d      	b.n	2000202c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
20001fb0:	687b      	ldr	r3, [r7, #4]
20001fb2:	681b      	ldr	r3, [r3, #0]
20001fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20001fb8:	681b      	ldr	r3, [r3, #0]
20001fba:	f003 0301 	and.w	r3, r3, #1
20001fbe:	2b00      	cmp	r3, #0
20001fc0:	d1e4      	bne.n	20001f8c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
20001fc2:	6878      	ldr	r0, [r7, #4]
20001fc4:	f000 f97a 	bl	200022bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
20001fc8:	6878      	ldr	r0, [r7, #4]
20001fca:	f000 fa25 	bl	20002418 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
20001fce:	6878      	ldr	r0, [r7, #4]
20001fd0:	f000 fa7b 	bl	200024ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	685b      	ldr	r3, [r3, #4]
20001fd8:	461a      	mov	r2, r3
20001fda:	2100      	movs	r1, #0
20001fdc:	6878      	ldr	r0, [r7, #4]
20001fde:	f000 f9e3 	bl	200023a8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
20001fe2:	687b      	ldr	r3, [r7, #4]
20001fe4:	681b      	ldr	r3, [r3, #0]
20001fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20001fe8:	687b      	ldr	r3, [r7, #4]
20001fea:	681b      	ldr	r3, [r3, #0]
20001fec:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
20001ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	681b      	ldr	r3, [r3, #0]
20001ff6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
20001ffa:	687b      	ldr	r3, [r7, #4]
20001ffc:	681a      	ldr	r2, [r3, #0]
20001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (2000203c <HAL_ETH_Init+0x130>)
20002000:	430b      	orrs	r3, r1
20002002:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
20002006:	687b      	ldr	r3, [r7, #4]
20002008:	681b      	ldr	r3, [r3, #0]
2000200a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
2000200e:	687b      	ldr	r3, [r7, #4]
20002010:	681b      	ldr	r3, [r3, #0]
20002012:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
20002016:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
2000201a:	687b      	ldr	r3, [r7, #4]
2000201c:	2200      	movs	r2, #0
2000201e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
20002022:	687b      	ldr	r3, [r7, #4]
20002024:	2210      	movs	r2, #16
20002026:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
2000202a:	2300      	movs	r3, #0
}
2000202c:	4618      	mov	r0, r3
2000202e:	3710      	adds	r7, #16
20002030:	46bd      	mov	sp, r7
20002032:	bd80      	pop	{r7, pc}
20002034:	40023800 	.word	0x40023800
20002038:	40013800 	.word	0x40013800
2000203c:	00020060 	.word	0x00020060

20002040 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
20002040:	b580      	push	{r7, lr}
20002042:	b084      	sub	sp, #16
20002044:	af00      	add	r7, sp, #0
20002046:	6078      	str	r0, [r7, #4]
20002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
2000204a:	687b      	ldr	r3, [r7, #4]
2000204c:	681b      	ldr	r3, [r3, #0]
2000204e:	681b      	ldr	r3, [r3, #0]
20002050:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
20002052:	68fa      	ldr	r2, [r7, #12]
20002054:	4b53      	ldr	r3, [pc, #332]	@ (200021a4 <ETH_SetMACConfig+0x164>)
20002056:	4013      	ands	r3, r2
20002058:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
2000205a:	683b      	ldr	r3, [r7, #0]
2000205c:	7b9b      	ldrb	r3, [r3, #14]
2000205e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20002060:	683a      	ldr	r2, [r7, #0]
20002062:	7c12      	ldrb	r2, [r2, #16]
20002064:	2a00      	cmp	r2, #0
20002066:	d102      	bne.n	2000206e <ETH_SetMACConfig+0x2e>
20002068:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
2000206c:	e000      	b.n	20002070 <ETH_SetMACConfig+0x30>
2000206e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20002070:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
20002072:	683a      	ldr	r2, [r7, #0]
20002074:	7c52      	ldrb	r2, [r2, #17]
20002076:	2a00      	cmp	r2, #0
20002078:	d102      	bne.n	20002080 <ETH_SetMACConfig+0x40>
2000207a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
2000207e:	e000      	b.n	20002082 <ETH_SetMACConfig+0x42>
20002080:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20002082:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
20002084:	683b      	ldr	r3, [r7, #0]
20002086:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
20002088:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
2000208a:	683b      	ldr	r3, [r7, #0]
2000208c:	7fdb      	ldrb	r3, [r3, #31]
2000208e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
20002090:	431a      	orrs	r2, r3
                        macconf->Speed |
20002092:	683b      	ldr	r3, [r7, #0]
20002094:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
20002096:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20002098:	683a      	ldr	r2, [r7, #0]
2000209a:	7f92      	ldrb	r2, [r2, #30]
2000209c:	2a00      	cmp	r2, #0
2000209e:	d102      	bne.n	200020a6 <ETH_SetMACConfig+0x66>
200020a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
200020a4:	e000      	b.n	200020a8 <ETH_SetMACConfig+0x68>
200020a6:	2200      	movs	r2, #0
                        macconf->Speed |
200020a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
200020aa:	683b      	ldr	r3, [r7, #0]
200020ac:	7f1b      	ldrb	r3, [r3, #28]
200020ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
200020b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
200020b2:	683b      	ldr	r3, [r7, #0]
200020b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
200020b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
200020b8:	683b      	ldr	r3, [r7, #0]
200020ba:	791b      	ldrb	r3, [r3, #4]
200020bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
200020be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
200020c0:	683a      	ldr	r2, [r7, #0]
200020c2:	f892 2020 	ldrb.w	r2, [r2, #32]
200020c6:	2a00      	cmp	r2, #0
200020c8:	d102      	bne.n	200020d0 <ETH_SetMACConfig+0x90>
200020ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
200020ce:	e000      	b.n	200020d2 <ETH_SetMACConfig+0x92>
200020d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
200020d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
200020d4:	683b      	ldr	r3, [r7, #0]
200020d6:	7bdb      	ldrb	r3, [r3, #15]
200020d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
200020da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
200020dc:	683b      	ldr	r3, [r7, #0]
200020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
200020e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
200020e2:	683b      	ldr	r3, [r7, #0]
200020e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
200020e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
200020ea:	4313      	orrs	r3, r2
200020ec:	68fa      	ldr	r2, [r7, #12]
200020ee:	4313      	orrs	r3, r2
200020f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
200020f2:	687b      	ldr	r3, [r7, #4]
200020f4:	681b      	ldr	r3, [r3, #0]
200020f6:	68fa      	ldr	r2, [r7, #12]
200020f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
200020fa:	687b      	ldr	r3, [r7, #4]
200020fc:	681b      	ldr	r3, [r3, #0]
200020fe:	681b      	ldr	r3, [r3, #0]
20002100:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20002102:	2001      	movs	r0, #1
20002104:	f7ff fdf8 	bl	20001cf8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
20002108:	687b      	ldr	r3, [r7, #4]
2000210a:	681b      	ldr	r3, [r3, #0]
2000210c:	68fa      	ldr	r2, [r7, #12]
2000210e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
20002110:	687b      	ldr	r3, [r7, #4]
20002112:	681b      	ldr	r3, [r3, #0]
20002114:	699b      	ldr	r3, [r3, #24]
20002116:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
20002118:	68fa      	ldr	r2, [r7, #12]
2000211a:	f64f 7341 	movw	r3, #65345	@ 0xff41
2000211e:	4013      	ands	r3, r2
20002120:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20002122:	683b      	ldr	r3, [r7, #0]
20002124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20002126:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
20002128:	683a      	ldr	r2, [r7, #0]
2000212a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
2000212e:	2a00      	cmp	r2, #0
20002130:	d101      	bne.n	20002136 <ETH_SetMACConfig+0xf6>
20002132:	2280      	movs	r2, #128	@ 0x80
20002134:	e000      	b.n	20002138 <ETH_SetMACConfig+0xf8>
20002136:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20002138:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
2000213a:	683b      	ldr	r3, [r7, #0]
2000213c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
2000213e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20002140:	683a      	ldr	r2, [r7, #0]
20002142:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
20002146:	2a01      	cmp	r2, #1
20002148:	d101      	bne.n	2000214e <ETH_SetMACConfig+0x10e>
2000214a:	2208      	movs	r2, #8
2000214c:	e000      	b.n	20002150 <ETH_SetMACConfig+0x110>
2000214e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
20002150:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
20002152:	683a      	ldr	r2, [r7, #0]
20002154:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
20002158:	2a01      	cmp	r2, #1
2000215a:	d101      	bne.n	20002160 <ETH_SetMACConfig+0x120>
2000215c:	2204      	movs	r2, #4
2000215e:	e000      	b.n	20002162 <ETH_SetMACConfig+0x122>
20002160:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20002162:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
20002164:	683a      	ldr	r2, [r7, #0]
20002166:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
2000216a:	2a01      	cmp	r2, #1
2000216c:	d101      	bne.n	20002172 <ETH_SetMACConfig+0x132>
2000216e:	2202      	movs	r2, #2
20002170:	e000      	b.n	20002174 <ETH_SetMACConfig+0x134>
20002172:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20002174:	4313      	orrs	r3, r2
20002176:	68fa      	ldr	r2, [r7, #12]
20002178:	4313      	orrs	r3, r2
2000217a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
2000217c:	687b      	ldr	r3, [r7, #4]
2000217e:	681b      	ldr	r3, [r3, #0]
20002180:	68fa      	ldr	r2, [r7, #12]
20002182:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
20002184:	687b      	ldr	r3, [r7, #4]
20002186:	681b      	ldr	r3, [r3, #0]
20002188:	699b      	ldr	r3, [r3, #24]
2000218a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
2000218c:	2001      	movs	r0, #1
2000218e:	f7ff fdb3 	bl	20001cf8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
20002192:	687b      	ldr	r3, [r7, #4]
20002194:	681b      	ldr	r3, [r3, #0]
20002196:	68fa      	ldr	r2, [r7, #12]
20002198:	619a      	str	r2, [r3, #24]
}
2000219a:	bf00      	nop
2000219c:	3710      	adds	r7, #16
2000219e:	46bd      	mov	sp, r7
200021a0:	bd80      	pop	{r7, pc}
200021a2:	bf00      	nop
200021a4:	fd20810f 	.word	0xfd20810f

200021a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
200021a8:	b580      	push	{r7, lr}
200021aa:	b084      	sub	sp, #16
200021ac:	af00      	add	r7, sp, #0
200021ae:	6078      	str	r0, [r7, #4]
200021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
200021b2:	687b      	ldr	r3, [r7, #4]
200021b4:	681b      	ldr	r3, [r3, #0]
200021b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200021ba:	699b      	ldr	r3, [r3, #24]
200021bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
200021be:	68fa      	ldr	r2, [r7, #12]
200021c0:	4b3d      	ldr	r3, [pc, #244]	@ (200022b8 <ETH_SetDMAConfig+0x110>)
200021c2:	4013      	ands	r3, r2
200021c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
200021c6:	683b      	ldr	r3, [r7, #0]
200021c8:	7b1b      	ldrb	r3, [r3, #12]
200021ca:	2b00      	cmp	r3, #0
200021cc:	d102      	bne.n	200021d4 <ETH_SetDMAConfig+0x2c>
200021ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
200021d2:	e000      	b.n	200021d6 <ETH_SetDMAConfig+0x2e>
200021d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
200021d6:	683b      	ldr	r3, [r7, #0]
200021d8:	7b5b      	ldrb	r3, [r3, #13]
200021da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
200021dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
200021de:	683a      	ldr	r2, [r7, #0]
200021e0:	7f52      	ldrb	r2, [r2, #29]
200021e2:	2a00      	cmp	r2, #0
200021e4:	d102      	bne.n	200021ec <ETH_SetDMAConfig+0x44>
200021e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
200021ea:	e000      	b.n	200021ee <ETH_SetDMAConfig+0x46>
200021ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
200021ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
200021f0:	683b      	ldr	r3, [r7, #0]
200021f2:	7b9b      	ldrb	r3, [r3, #14]
200021f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
200021f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
200021f8:	683b      	ldr	r3, [r7, #0]
200021fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
200021fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
200021fe:	683b      	ldr	r3, [r7, #0]
20002200:	7f1b      	ldrb	r3, [r3, #28]
20002202:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
20002204:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
20002206:	683b      	ldr	r3, [r7, #0]
20002208:	7f9b      	ldrb	r3, [r3, #30]
2000220a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
2000220c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
2000220e:	683b      	ldr	r3, [r7, #0]
20002210:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
20002212:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
20002214:	683b      	ldr	r3, [r7, #0]
20002216:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
2000221a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
2000221c:	4313      	orrs	r3, r2
2000221e:	68fa      	ldr	r2, [r7, #12]
20002220:	4313      	orrs	r3, r2
20002222:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
20002224:	687b      	ldr	r3, [r7, #4]
20002226:	681b      	ldr	r3, [r3, #0]
20002228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000222c:	461a      	mov	r2, r3
2000222e:	68fb      	ldr	r3, [r7, #12]
20002230:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
20002232:	687b      	ldr	r3, [r7, #4]
20002234:	681b      	ldr	r3, [r3, #0]
20002236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000223a:	699b      	ldr	r3, [r3, #24]
2000223c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
2000223e:	2001      	movs	r0, #1
20002240:	f7ff fd5a 	bl	20001cf8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
20002244:	687b      	ldr	r3, [r7, #4]
20002246:	681b      	ldr	r3, [r3, #0]
20002248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000224c:	461a      	mov	r2, r3
2000224e:	68fb      	ldr	r3, [r7, #12]
20002250:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20002252:	683b      	ldr	r3, [r7, #0]
20002254:	791b      	ldrb	r3, [r3, #4]
20002256:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
20002258:	683b      	ldr	r3, [r7, #0]
2000225a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
2000225c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
2000225e:	683b      	ldr	r3, [r7, #0]
20002260:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
20002262:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
20002264:	683b      	ldr	r3, [r7, #0]
20002266:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20002268:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
2000226a:	683b      	ldr	r3, [r7, #0]
2000226c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
20002270:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
20002272:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
20002274:	683b      	ldr	r3, [r7, #0]
20002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20002278:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
2000227a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
2000227c:	683b      	ldr	r3, [r7, #0]
2000227e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
20002280:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20002282:	687a      	ldr	r2, [r7, #4]
20002284:	6812      	ldr	r2, [r2, #0]
20002286:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
2000228a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
2000228e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
20002290:	687b      	ldr	r3, [r7, #4]
20002292:	681b      	ldr	r3, [r3, #0]
20002294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20002298:	681b      	ldr	r3, [r3, #0]
2000229a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
2000229c:	2001      	movs	r0, #1
2000229e:	f7ff fd2b 	bl	20001cf8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
200022a2:	687b      	ldr	r3, [r7, #4]
200022a4:	681b      	ldr	r3, [r3, #0]
200022a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200022aa:	461a      	mov	r2, r3
200022ac:	68fb      	ldr	r3, [r7, #12]
200022ae:	6013      	str	r3, [r2, #0]
}
200022b0:	bf00      	nop
200022b2:	3710      	adds	r7, #16
200022b4:	46bd      	mov	sp, r7
200022b6:	bd80      	pop	{r7, pc}
200022b8:	f8de3f23 	.word	0xf8de3f23

200022bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
200022bc:	b580      	push	{r7, lr}
200022be:	b0a6      	sub	sp, #152	@ 0x98
200022c0:	af00      	add	r7, sp, #0
200022c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
200022c4:	2301      	movs	r3, #1
200022c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
200022ca:	2301      	movs	r3, #1
200022cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
200022d0:	2300      	movs	r3, #0
200022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
200022d4:	2300      	movs	r3, #0
200022d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
200022da:	2301      	movs	r3, #1
200022dc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
200022e0:	2300      	movs	r3, #0
200022e2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
200022e6:	2301      	movs	r3, #1
200022e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
200022ec:	2301      	movs	r3, #1
200022ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
200022f2:	2300      	movs	r3, #0
200022f4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
200022f8:	2300      	movs	r3, #0
200022fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
200022fe:	2300      	movs	r3, #0
20002300:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
20002302:	2300      	movs	r3, #0
20002304:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
20002308:	2300      	movs	r3, #0
2000230a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
2000230c:	2300      	movs	r3, #0
2000230e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
20002312:	2300      	movs	r3, #0
20002314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
20002318:	2300      	movs	r3, #0
2000231a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
2000231e:	2300      	movs	r3, #0
20002320:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
20002324:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
20002328:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
2000232a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
2000232e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
20002330:	2300      	movs	r3, #0
20002332:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
20002336:	f107 0334 	add.w	r3, r7, #52	@ 0x34
2000233a:	4619      	mov	r1, r3
2000233c:	6878      	ldr	r0, [r7, #4]
2000233e:	f7ff fe7f 	bl	20002040 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
20002342:	2301      	movs	r3, #1
20002344:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
20002346:	2301      	movs	r3, #1
20002348:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
2000234a:	2301      	movs	r3, #1
2000234c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
20002350:	2301      	movs	r3, #1
20002352:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
20002354:	2300      	movs	r3, #0
20002356:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
20002358:	2300      	movs	r3, #0
2000235a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
2000235e:	2300      	movs	r3, #0
20002360:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
20002364:	2300      	movs	r3, #0
20002366:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
20002368:	2301      	movs	r3, #1
2000236a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
2000236e:	2301      	movs	r3, #1
20002370:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
20002372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20002376:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
20002378:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
2000237c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
2000237e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20002382:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
20002384:	2301      	movs	r3, #1
20002386:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
2000238a:	2300      	movs	r3, #0
2000238c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
2000238e:	2300      	movs	r3, #0
20002390:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
20002392:	f107 0308 	add.w	r3, r7, #8
20002396:	4619      	mov	r1, r3
20002398:	6878      	ldr	r0, [r7, #4]
2000239a:	f7ff ff05 	bl	200021a8 <ETH_SetDMAConfig>
}
2000239e:	bf00      	nop
200023a0:	3798      	adds	r7, #152	@ 0x98
200023a2:	46bd      	mov	sp, r7
200023a4:	bd80      	pop	{r7, pc}
	...

200023a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
200023a8:	b480      	push	{r7}
200023aa:	b087      	sub	sp, #28
200023ac:	af00      	add	r7, sp, #0
200023ae:	60f8      	str	r0, [r7, #12]
200023b0:	60b9      	str	r1, [r7, #8]
200023b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
200023b4:	687b      	ldr	r3, [r7, #4]
200023b6:	3305      	adds	r3, #5
200023b8:	781b      	ldrb	r3, [r3, #0]
200023ba:	021b      	lsls	r3, r3, #8
200023bc:	687a      	ldr	r2, [r7, #4]
200023be:	3204      	adds	r2, #4
200023c0:	7812      	ldrb	r2, [r2, #0]
200023c2:	4313      	orrs	r3, r2
200023c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
200023c6:	68ba      	ldr	r2, [r7, #8]
200023c8:	4b11      	ldr	r3, [pc, #68]	@ (20002410 <ETH_MACAddressConfig+0x68>)
200023ca:	4413      	add	r3, r2
200023cc:	461a      	mov	r2, r3
200023ce:	697b      	ldr	r3, [r7, #20]
200023d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
200023d2:	687b      	ldr	r3, [r7, #4]
200023d4:	3303      	adds	r3, #3
200023d6:	781b      	ldrb	r3, [r3, #0]
200023d8:	061a      	lsls	r2, r3, #24
200023da:	687b      	ldr	r3, [r7, #4]
200023dc:	3302      	adds	r3, #2
200023de:	781b      	ldrb	r3, [r3, #0]
200023e0:	041b      	lsls	r3, r3, #16
200023e2:	431a      	orrs	r2, r3
200023e4:	687b      	ldr	r3, [r7, #4]
200023e6:	3301      	adds	r3, #1
200023e8:	781b      	ldrb	r3, [r3, #0]
200023ea:	021b      	lsls	r3, r3, #8
200023ec:	4313      	orrs	r3, r2
200023ee:	687a      	ldr	r2, [r7, #4]
200023f0:	7812      	ldrb	r2, [r2, #0]
200023f2:	4313      	orrs	r3, r2
200023f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
200023f6:	68ba      	ldr	r2, [r7, #8]
200023f8:	4b06      	ldr	r3, [pc, #24]	@ (20002414 <ETH_MACAddressConfig+0x6c>)
200023fa:	4413      	add	r3, r2
200023fc:	461a      	mov	r2, r3
200023fe:	697b      	ldr	r3, [r7, #20]
20002400:	6013      	str	r3, [r2, #0]
}
20002402:	bf00      	nop
20002404:	371c      	adds	r7, #28
20002406:	46bd      	mov	sp, r7
20002408:	f85d 7b04 	ldr.w	r7, [sp], #4
2000240c:	4770      	bx	lr
2000240e:	bf00      	nop
20002410:	40028040 	.word	0x40028040
20002414:	40028044 	.word	0x40028044

20002418 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
20002418:	b480      	push	{r7}
2000241a:	b085      	sub	sp, #20
2000241c:	af00      	add	r7, sp, #0
2000241e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20002420:	2300      	movs	r3, #0
20002422:	60fb      	str	r3, [r7, #12]
20002424:	e03e      	b.n	200024a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
20002426:	687b      	ldr	r3, [r7, #4]
20002428:	68d9      	ldr	r1, [r3, #12]
2000242a:	68fa      	ldr	r2, [r7, #12]
2000242c:	4613      	mov	r3, r2
2000242e:	009b      	lsls	r3, r3, #2
20002430:	4413      	add	r3, r2
20002432:	00db      	lsls	r3, r3, #3
20002434:	440b      	add	r3, r1
20002436:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
20002438:	68bb      	ldr	r3, [r7, #8]
2000243a:	2200      	movs	r2, #0
2000243c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
2000243e:	68bb      	ldr	r3, [r7, #8]
20002440:	2200      	movs	r2, #0
20002442:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
20002444:	68bb      	ldr	r3, [r7, #8]
20002446:	2200      	movs	r2, #0
20002448:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
2000244a:	68bb      	ldr	r3, [r7, #8]
2000244c:	2200      	movs	r2, #0
2000244e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
20002450:	68b9      	ldr	r1, [r7, #8]
20002452:	687b      	ldr	r3, [r7, #4]
20002454:	68fa      	ldr	r2, [r7, #12]
20002456:	3206      	adds	r2, #6
20002458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
2000245c:	68bb      	ldr	r3, [r7, #8]
2000245e:	681b      	ldr	r3, [r3, #0]
20002460:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20002464:	68bb      	ldr	r3, [r7, #8]
20002466:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
20002468:	68fb      	ldr	r3, [r7, #12]
2000246a:	2b02      	cmp	r3, #2
2000246c:	d80c      	bhi.n	20002488 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
2000246e:	687b      	ldr	r3, [r7, #4]
20002470:	68d9      	ldr	r1, [r3, #12]
20002472:	68fb      	ldr	r3, [r7, #12]
20002474:	1c5a      	adds	r2, r3, #1
20002476:	4613      	mov	r3, r2
20002478:	009b      	lsls	r3, r3, #2
2000247a:	4413      	add	r3, r2
2000247c:	00db      	lsls	r3, r3, #3
2000247e:	440b      	add	r3, r1
20002480:	461a      	mov	r2, r3
20002482:	68bb      	ldr	r3, [r7, #8]
20002484:	60da      	str	r2, [r3, #12]
20002486:	e004      	b.n	20002492 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
20002488:	687b      	ldr	r3, [r7, #4]
2000248a:	68db      	ldr	r3, [r3, #12]
2000248c:	461a      	mov	r2, r3
2000248e:	68bb      	ldr	r3, [r7, #8]
20002490:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
20002492:	68bb      	ldr	r3, [r7, #8]
20002494:	681b      	ldr	r3, [r3, #0]
20002496:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
2000249a:	68bb      	ldr	r3, [r7, #8]
2000249c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
2000249e:	68fb      	ldr	r3, [r7, #12]
200024a0:	3301      	adds	r3, #1
200024a2:	60fb      	str	r3, [r7, #12]
200024a4:	68fb      	ldr	r3, [r7, #12]
200024a6:	2b03      	cmp	r3, #3
200024a8:	d9bd      	bls.n	20002426 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
200024aa:	687b      	ldr	r3, [r7, #4]
200024ac:	2200      	movs	r2, #0
200024ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
200024b0:	687b      	ldr	r3, [r7, #4]
200024b2:	68da      	ldr	r2, [r3, #12]
200024b4:	687b      	ldr	r3, [r7, #4]
200024b6:	681b      	ldr	r3, [r3, #0]
200024b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200024bc:	611a      	str	r2, [r3, #16]
}
200024be:	bf00      	nop
200024c0:	3714      	adds	r7, #20
200024c2:	46bd      	mov	sp, r7
200024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200024c8:	4770      	bx	lr

200024ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
200024ca:	b480      	push	{r7}
200024cc:	b085      	sub	sp, #20
200024ce:	af00      	add	r7, sp, #0
200024d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
200024d2:	2300      	movs	r3, #0
200024d4:	60fb      	str	r3, [r7, #12]
200024d6:	e048      	b.n	2000256a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
200024d8:	687b      	ldr	r3, [r7, #4]
200024da:	6919      	ldr	r1, [r3, #16]
200024dc:	68fa      	ldr	r2, [r7, #12]
200024de:	4613      	mov	r3, r2
200024e0:	009b      	lsls	r3, r3, #2
200024e2:	4413      	add	r3, r2
200024e4:	00db      	lsls	r3, r3, #3
200024e6:	440b      	add	r3, r1
200024e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
200024ea:	68bb      	ldr	r3, [r7, #8]
200024ec:	2200      	movs	r2, #0
200024ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
200024f0:	68bb      	ldr	r3, [r7, #8]
200024f2:	2200      	movs	r2, #0
200024f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
200024f6:	68bb      	ldr	r3, [r7, #8]
200024f8:	2200      	movs	r2, #0
200024fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
200024fc:	68bb      	ldr	r3, [r7, #8]
200024fe:	2200      	movs	r2, #0
20002500:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
20002502:	68bb      	ldr	r3, [r7, #8]
20002504:	2200      	movs	r2, #0
20002506:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
20002508:	68bb      	ldr	r3, [r7, #8]
2000250a:	2200      	movs	r2, #0
2000250c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
2000250e:	68bb      	ldr	r3, [r7, #8]
20002510:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
20002514:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
20002516:	687b      	ldr	r3, [r7, #4]
20002518:	695b      	ldr	r3, [r3, #20]
2000251a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
2000251e:	68bb      	ldr	r3, [r7, #8]
20002520:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
20002522:	68bb      	ldr	r3, [r7, #8]
20002524:	685b      	ldr	r3, [r3, #4]
20002526:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
2000252a:	68bb      	ldr	r3, [r7, #8]
2000252c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
2000252e:	68b9      	ldr	r1, [r7, #8]
20002530:	687b      	ldr	r3, [r7, #4]
20002532:	68fa      	ldr	r2, [r7, #12]
20002534:	3212      	adds	r2, #18
20002536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
2000253a:	68fb      	ldr	r3, [r7, #12]
2000253c:	2b02      	cmp	r3, #2
2000253e:	d80c      	bhi.n	2000255a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
20002540:	687b      	ldr	r3, [r7, #4]
20002542:	6919      	ldr	r1, [r3, #16]
20002544:	68fb      	ldr	r3, [r7, #12]
20002546:	1c5a      	adds	r2, r3, #1
20002548:	4613      	mov	r3, r2
2000254a:	009b      	lsls	r3, r3, #2
2000254c:	4413      	add	r3, r2
2000254e:	00db      	lsls	r3, r3, #3
20002550:	440b      	add	r3, r1
20002552:	461a      	mov	r2, r3
20002554:	68bb      	ldr	r3, [r7, #8]
20002556:	60da      	str	r2, [r3, #12]
20002558:	e004      	b.n	20002564 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
2000255a:	687b      	ldr	r3, [r7, #4]
2000255c:	691b      	ldr	r3, [r3, #16]
2000255e:	461a      	mov	r2, r3
20002560:	68bb      	ldr	r3, [r7, #8]
20002562:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20002564:	68fb      	ldr	r3, [r7, #12]
20002566:	3301      	adds	r3, #1
20002568:	60fb      	str	r3, [r7, #12]
2000256a:	68fb      	ldr	r3, [r7, #12]
2000256c:	2b03      	cmp	r3, #3
2000256e:	d9b3      	bls.n	200024d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
20002570:	687b      	ldr	r3, [r7, #4]
20002572:	2200      	movs	r2, #0
20002574:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
20002576:	687b      	ldr	r3, [r7, #4]
20002578:	2200      	movs	r2, #0
2000257a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
2000257c:	687b      	ldr	r3, [r7, #4]
2000257e:	2200      	movs	r2, #0
20002580:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
20002582:	687b      	ldr	r3, [r7, #4]
20002584:	2200      	movs	r2, #0
20002586:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
20002588:	687b      	ldr	r3, [r7, #4]
2000258a:	2200      	movs	r2, #0
2000258c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
2000258e:	687b      	ldr	r3, [r7, #4]
20002590:	691a      	ldr	r2, [r3, #16]
20002592:	687b      	ldr	r3, [r7, #4]
20002594:	681b      	ldr	r3, [r3, #0]
20002596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000259a:	60da      	str	r2, [r3, #12]
}
2000259c:	bf00      	nop
2000259e:	3714      	adds	r7, #20
200025a0:	46bd      	mov	sp, r7
200025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200025a6:	4770      	bx	lr

200025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
200025a8:	b480      	push	{r7}
200025aa:	b089      	sub	sp, #36	@ 0x24
200025ac:	af00      	add	r7, sp, #0
200025ae:	6078      	str	r0, [r7, #4]
200025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
200025b2:	2300      	movs	r3, #0
200025b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
200025b6:	2300      	movs	r3, #0
200025b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
200025ba:	2300      	movs	r3, #0
200025bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
200025be:	2300      	movs	r3, #0
200025c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
200025c2:	2300      	movs	r3, #0
200025c4:	61fb      	str	r3, [r7, #28]
200025c6:	e175      	b.n	200028b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
200025c8:	2201      	movs	r2, #1
200025ca:	69fb      	ldr	r3, [r7, #28]
200025cc:	fa02 f303 	lsl.w	r3, r2, r3
200025d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200025d2:	683b      	ldr	r3, [r7, #0]
200025d4:	681b      	ldr	r3, [r3, #0]
200025d6:	697a      	ldr	r2, [r7, #20]
200025d8:	4013      	ands	r3, r2
200025da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
200025dc:	693a      	ldr	r2, [r7, #16]
200025de:	697b      	ldr	r3, [r7, #20]
200025e0:	429a      	cmp	r2, r3
200025e2:	f040 8164 	bne.w	200028ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
200025e6:	683b      	ldr	r3, [r7, #0]
200025e8:	685b      	ldr	r3, [r3, #4]
200025ea:	f003 0303 	and.w	r3, r3, #3
200025ee:	2b01      	cmp	r3, #1
200025f0:	d005      	beq.n	200025fe <HAL_GPIO_Init+0x56>
200025f2:	683b      	ldr	r3, [r7, #0]
200025f4:	685b      	ldr	r3, [r3, #4]
200025f6:	f003 0303 	and.w	r3, r3, #3
200025fa:	2b02      	cmp	r3, #2
200025fc:	d130      	bne.n	20002660 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
200025fe:	687b      	ldr	r3, [r7, #4]
20002600:	689b      	ldr	r3, [r3, #8]
20002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
20002604:	69fb      	ldr	r3, [r7, #28]
20002606:	005b      	lsls	r3, r3, #1
20002608:	2203      	movs	r2, #3
2000260a:	fa02 f303 	lsl.w	r3, r2, r3
2000260e:	43db      	mvns	r3, r3
20002610:	69ba      	ldr	r2, [r7, #24]
20002612:	4013      	ands	r3, r2
20002614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
20002616:	683b      	ldr	r3, [r7, #0]
20002618:	68da      	ldr	r2, [r3, #12]
2000261a:	69fb      	ldr	r3, [r7, #28]
2000261c:	005b      	lsls	r3, r3, #1
2000261e:	fa02 f303 	lsl.w	r3, r2, r3
20002622:	69ba      	ldr	r2, [r7, #24]
20002624:	4313      	orrs	r3, r2
20002626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20002628:	687b      	ldr	r3, [r7, #4]
2000262a:	69ba      	ldr	r2, [r7, #24]
2000262c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000262e:	687b      	ldr	r3, [r7, #4]
20002630:	685b      	ldr	r3, [r3, #4]
20002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20002634:	2201      	movs	r2, #1
20002636:	69fb      	ldr	r3, [r7, #28]
20002638:	fa02 f303 	lsl.w	r3, r2, r3
2000263c:	43db      	mvns	r3, r3
2000263e:	69ba      	ldr	r2, [r7, #24]
20002640:	4013      	ands	r3, r2
20002642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20002644:	683b      	ldr	r3, [r7, #0]
20002646:	685b      	ldr	r3, [r3, #4]
20002648:	091b      	lsrs	r3, r3, #4
2000264a:	f003 0201 	and.w	r2, r3, #1
2000264e:	69fb      	ldr	r3, [r7, #28]
20002650:	fa02 f303 	lsl.w	r3, r2, r3
20002654:	69ba      	ldr	r2, [r7, #24]
20002656:	4313      	orrs	r3, r2
20002658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000265a:	687b      	ldr	r3, [r7, #4]
2000265c:	69ba      	ldr	r2, [r7, #24]
2000265e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20002660:	683b      	ldr	r3, [r7, #0]
20002662:	685b      	ldr	r3, [r3, #4]
20002664:	f003 0303 	and.w	r3, r3, #3
20002668:	2b03      	cmp	r3, #3
2000266a:	d017      	beq.n	2000269c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
2000266c:	687b      	ldr	r3, [r7, #4]
2000266e:	68db      	ldr	r3, [r3, #12]
20002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20002672:	69fb      	ldr	r3, [r7, #28]
20002674:	005b      	lsls	r3, r3, #1
20002676:	2203      	movs	r2, #3
20002678:	fa02 f303 	lsl.w	r3, r2, r3
2000267c:	43db      	mvns	r3, r3
2000267e:	69ba      	ldr	r2, [r7, #24]
20002680:	4013      	ands	r3, r2
20002682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
20002684:	683b      	ldr	r3, [r7, #0]
20002686:	689a      	ldr	r2, [r3, #8]
20002688:	69fb      	ldr	r3, [r7, #28]
2000268a:	005b      	lsls	r3, r3, #1
2000268c:	fa02 f303 	lsl.w	r3, r2, r3
20002690:	69ba      	ldr	r2, [r7, #24]
20002692:	4313      	orrs	r3, r2
20002694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20002696:	687b      	ldr	r3, [r7, #4]
20002698:	69ba      	ldr	r2, [r7, #24]
2000269a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000269c:	683b      	ldr	r3, [r7, #0]
2000269e:	685b      	ldr	r3, [r3, #4]
200026a0:	f003 0303 	and.w	r3, r3, #3
200026a4:	2b02      	cmp	r3, #2
200026a6:	d123      	bne.n	200026f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
200026a8:	69fb      	ldr	r3, [r7, #28]
200026aa:	08da      	lsrs	r2, r3, #3
200026ac:	687b      	ldr	r3, [r7, #4]
200026ae:	3208      	adds	r2, #8
200026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
200026b6:	69fb      	ldr	r3, [r7, #28]
200026b8:	f003 0307 	and.w	r3, r3, #7
200026bc:	009b      	lsls	r3, r3, #2
200026be:	220f      	movs	r2, #15
200026c0:	fa02 f303 	lsl.w	r3, r2, r3
200026c4:	43db      	mvns	r3, r3
200026c6:	69ba      	ldr	r2, [r7, #24]
200026c8:	4013      	ands	r3, r2
200026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
200026cc:	683b      	ldr	r3, [r7, #0]
200026ce:	691a      	ldr	r2, [r3, #16]
200026d0:	69fb      	ldr	r3, [r7, #28]
200026d2:	f003 0307 	and.w	r3, r3, #7
200026d6:	009b      	lsls	r3, r3, #2
200026d8:	fa02 f303 	lsl.w	r3, r2, r3
200026dc:	69ba      	ldr	r2, [r7, #24]
200026de:	4313      	orrs	r3, r2
200026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
200026e2:	69fb      	ldr	r3, [r7, #28]
200026e4:	08da      	lsrs	r2, r3, #3
200026e6:	687b      	ldr	r3, [r7, #4]
200026e8:	3208      	adds	r2, #8
200026ea:	69b9      	ldr	r1, [r7, #24]
200026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
200026f0:	687b      	ldr	r3, [r7, #4]
200026f2:	681b      	ldr	r3, [r3, #0]
200026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
200026f6:	69fb      	ldr	r3, [r7, #28]
200026f8:	005b      	lsls	r3, r3, #1
200026fa:	2203      	movs	r2, #3
200026fc:	fa02 f303 	lsl.w	r3, r2, r3
20002700:	43db      	mvns	r3, r3
20002702:	69ba      	ldr	r2, [r7, #24]
20002704:	4013      	ands	r3, r2
20002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20002708:	683b      	ldr	r3, [r7, #0]
2000270a:	685b      	ldr	r3, [r3, #4]
2000270c:	f003 0203 	and.w	r2, r3, #3
20002710:	69fb      	ldr	r3, [r7, #28]
20002712:	005b      	lsls	r3, r3, #1
20002714:	fa02 f303 	lsl.w	r3, r2, r3
20002718:	69ba      	ldr	r2, [r7, #24]
2000271a:	4313      	orrs	r3, r2
2000271c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000271e:	687b      	ldr	r3, [r7, #4]
20002720:	69ba      	ldr	r2, [r7, #24]
20002722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
20002724:	683b      	ldr	r3, [r7, #0]
20002726:	685b      	ldr	r3, [r3, #4]
20002728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
2000272c:	2b00      	cmp	r3, #0
2000272e:	f000 80be 	beq.w	200028ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20002732:	4b66      	ldr	r3, [pc, #408]	@ (200028cc <HAL_GPIO_Init+0x324>)
20002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20002736:	4a65      	ldr	r2, [pc, #404]	@ (200028cc <HAL_GPIO_Init+0x324>)
20002738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2000273c:	6453      	str	r3, [r2, #68]	@ 0x44
2000273e:	4b63      	ldr	r3, [pc, #396]	@ (200028cc <HAL_GPIO_Init+0x324>)
20002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20002742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20002746:	60fb      	str	r3, [r7, #12]
20002748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
2000274a:	4a61      	ldr	r2, [pc, #388]	@ (200028d0 <HAL_GPIO_Init+0x328>)
2000274c:	69fb      	ldr	r3, [r7, #28]
2000274e:	089b      	lsrs	r3, r3, #2
20002750:	3302      	adds	r3, #2
20002752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
20002758:	69fb      	ldr	r3, [r7, #28]
2000275a:	f003 0303 	and.w	r3, r3, #3
2000275e:	009b      	lsls	r3, r3, #2
20002760:	220f      	movs	r2, #15
20002762:	fa02 f303 	lsl.w	r3, r2, r3
20002766:	43db      	mvns	r3, r3
20002768:	69ba      	ldr	r2, [r7, #24]
2000276a:	4013      	ands	r3, r2
2000276c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
2000276e:	687b      	ldr	r3, [r7, #4]
20002770:	4a58      	ldr	r2, [pc, #352]	@ (200028d4 <HAL_GPIO_Init+0x32c>)
20002772:	4293      	cmp	r3, r2
20002774:	d037      	beq.n	200027e6 <HAL_GPIO_Init+0x23e>
20002776:	687b      	ldr	r3, [r7, #4]
20002778:	4a57      	ldr	r2, [pc, #348]	@ (200028d8 <HAL_GPIO_Init+0x330>)
2000277a:	4293      	cmp	r3, r2
2000277c:	d031      	beq.n	200027e2 <HAL_GPIO_Init+0x23a>
2000277e:	687b      	ldr	r3, [r7, #4]
20002780:	4a56      	ldr	r2, [pc, #344]	@ (200028dc <HAL_GPIO_Init+0x334>)
20002782:	4293      	cmp	r3, r2
20002784:	d02b      	beq.n	200027de <HAL_GPIO_Init+0x236>
20002786:	687b      	ldr	r3, [r7, #4]
20002788:	4a55      	ldr	r2, [pc, #340]	@ (200028e0 <HAL_GPIO_Init+0x338>)
2000278a:	4293      	cmp	r3, r2
2000278c:	d025      	beq.n	200027da <HAL_GPIO_Init+0x232>
2000278e:	687b      	ldr	r3, [r7, #4]
20002790:	4a54      	ldr	r2, [pc, #336]	@ (200028e4 <HAL_GPIO_Init+0x33c>)
20002792:	4293      	cmp	r3, r2
20002794:	d01f      	beq.n	200027d6 <HAL_GPIO_Init+0x22e>
20002796:	687b      	ldr	r3, [r7, #4]
20002798:	4a53      	ldr	r2, [pc, #332]	@ (200028e8 <HAL_GPIO_Init+0x340>)
2000279a:	4293      	cmp	r3, r2
2000279c:	d019      	beq.n	200027d2 <HAL_GPIO_Init+0x22a>
2000279e:	687b      	ldr	r3, [r7, #4]
200027a0:	4a52      	ldr	r2, [pc, #328]	@ (200028ec <HAL_GPIO_Init+0x344>)
200027a2:	4293      	cmp	r3, r2
200027a4:	d013      	beq.n	200027ce <HAL_GPIO_Init+0x226>
200027a6:	687b      	ldr	r3, [r7, #4]
200027a8:	4a51      	ldr	r2, [pc, #324]	@ (200028f0 <HAL_GPIO_Init+0x348>)
200027aa:	4293      	cmp	r3, r2
200027ac:	d00d      	beq.n	200027ca <HAL_GPIO_Init+0x222>
200027ae:	687b      	ldr	r3, [r7, #4]
200027b0:	4a50      	ldr	r2, [pc, #320]	@ (200028f4 <HAL_GPIO_Init+0x34c>)
200027b2:	4293      	cmp	r3, r2
200027b4:	d007      	beq.n	200027c6 <HAL_GPIO_Init+0x21e>
200027b6:	687b      	ldr	r3, [r7, #4]
200027b8:	4a4f      	ldr	r2, [pc, #316]	@ (200028f8 <HAL_GPIO_Init+0x350>)
200027ba:	4293      	cmp	r3, r2
200027bc:	d101      	bne.n	200027c2 <HAL_GPIO_Init+0x21a>
200027be:	2309      	movs	r3, #9
200027c0:	e012      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027c2:	230a      	movs	r3, #10
200027c4:	e010      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027c6:	2308      	movs	r3, #8
200027c8:	e00e      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027ca:	2307      	movs	r3, #7
200027cc:	e00c      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027ce:	2306      	movs	r3, #6
200027d0:	e00a      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027d2:	2305      	movs	r3, #5
200027d4:	e008      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027d6:	2304      	movs	r3, #4
200027d8:	e006      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027da:	2303      	movs	r3, #3
200027dc:	e004      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027de:	2302      	movs	r3, #2
200027e0:	e002      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027e2:	2301      	movs	r3, #1
200027e4:	e000      	b.n	200027e8 <HAL_GPIO_Init+0x240>
200027e6:	2300      	movs	r3, #0
200027e8:	69fa      	ldr	r2, [r7, #28]
200027ea:	f002 0203 	and.w	r2, r2, #3
200027ee:	0092      	lsls	r2, r2, #2
200027f0:	4093      	lsls	r3, r2
200027f2:	69ba      	ldr	r2, [r7, #24]
200027f4:	4313      	orrs	r3, r2
200027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
200027f8:	4935      	ldr	r1, [pc, #212]	@ (200028d0 <HAL_GPIO_Init+0x328>)
200027fa:	69fb      	ldr	r3, [r7, #28]
200027fc:	089b      	lsrs	r3, r3, #2
200027fe:	3302      	adds	r3, #2
20002800:	69ba      	ldr	r2, [r7, #24]
20002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20002806:	4b3d      	ldr	r3, [pc, #244]	@ (200028fc <HAL_GPIO_Init+0x354>)
20002808:	689b      	ldr	r3, [r3, #8]
2000280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000280c:	693b      	ldr	r3, [r7, #16]
2000280e:	43db      	mvns	r3, r3
20002810:	69ba      	ldr	r2, [r7, #24]
20002812:	4013      	ands	r3, r2
20002814:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
20002816:	683b      	ldr	r3, [r7, #0]
20002818:	685b      	ldr	r3, [r3, #4]
2000281a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2000281e:	2b00      	cmp	r3, #0
20002820:	d003      	beq.n	2000282a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
20002822:	69ba      	ldr	r2, [r7, #24]
20002824:	693b      	ldr	r3, [r7, #16]
20002826:	4313      	orrs	r3, r2
20002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000282a:	4a34      	ldr	r2, [pc, #208]	@ (200028fc <HAL_GPIO_Init+0x354>)
2000282c:	69bb      	ldr	r3, [r7, #24]
2000282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20002830:	4b32      	ldr	r3, [pc, #200]	@ (200028fc <HAL_GPIO_Init+0x354>)
20002832:	68db      	ldr	r3, [r3, #12]
20002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002836:	693b      	ldr	r3, [r7, #16]
20002838:	43db      	mvns	r3, r3
2000283a:	69ba      	ldr	r2, [r7, #24]
2000283c:	4013      	ands	r3, r2
2000283e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
20002840:	683b      	ldr	r3, [r7, #0]
20002842:	685b      	ldr	r3, [r3, #4]
20002844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20002848:	2b00      	cmp	r3, #0
2000284a:	d003      	beq.n	20002854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
2000284c:	69ba      	ldr	r2, [r7, #24]
2000284e:	693b      	ldr	r3, [r7, #16]
20002850:	4313      	orrs	r3, r2
20002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20002854:	4a29      	ldr	r2, [pc, #164]	@ (200028fc <HAL_GPIO_Init+0x354>)
20002856:	69bb      	ldr	r3, [r7, #24]
20002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
2000285a:	4b28      	ldr	r3, [pc, #160]	@ (200028fc <HAL_GPIO_Init+0x354>)
2000285c:	685b      	ldr	r3, [r3, #4]
2000285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002860:	693b      	ldr	r3, [r7, #16]
20002862:	43db      	mvns	r3, r3
20002864:	69ba      	ldr	r2, [r7, #24]
20002866:	4013      	ands	r3, r2
20002868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
2000286a:	683b      	ldr	r3, [r7, #0]
2000286c:	685b      	ldr	r3, [r3, #4]
2000286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002872:	2b00      	cmp	r3, #0
20002874:	d003      	beq.n	2000287e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
20002876:	69ba      	ldr	r2, [r7, #24]
20002878:	693b      	ldr	r3, [r7, #16]
2000287a:	4313      	orrs	r3, r2
2000287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000287e:	4a1f      	ldr	r2, [pc, #124]	@ (200028fc <HAL_GPIO_Init+0x354>)
20002880:	69bb      	ldr	r3, [r7, #24]
20002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20002884:	4b1d      	ldr	r3, [pc, #116]	@ (200028fc <HAL_GPIO_Init+0x354>)
20002886:	681b      	ldr	r3, [r3, #0]
20002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000288a:	693b      	ldr	r3, [r7, #16]
2000288c:	43db      	mvns	r3, r3
2000288e:	69ba      	ldr	r2, [r7, #24]
20002890:	4013      	ands	r3, r2
20002892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
20002894:	683b      	ldr	r3, [r7, #0]
20002896:	685b      	ldr	r3, [r3, #4]
20002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2000289c:	2b00      	cmp	r3, #0
2000289e:	d003      	beq.n	200028a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
200028a0:	69ba      	ldr	r2, [r7, #24]
200028a2:	693b      	ldr	r3, [r7, #16]
200028a4:	4313      	orrs	r3, r2
200028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
200028a8:	4a14      	ldr	r2, [pc, #80]	@ (200028fc <HAL_GPIO_Init+0x354>)
200028aa:	69bb      	ldr	r3, [r7, #24]
200028ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
200028ae:	69fb      	ldr	r3, [r7, #28]
200028b0:	3301      	adds	r3, #1
200028b2:	61fb      	str	r3, [r7, #28]
200028b4:	69fb      	ldr	r3, [r7, #28]
200028b6:	2b0f      	cmp	r3, #15
200028b8:	f67f ae86 	bls.w	200025c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
200028bc:	bf00      	nop
200028be:	bf00      	nop
200028c0:	3724      	adds	r7, #36	@ 0x24
200028c2:	46bd      	mov	sp, r7
200028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200028c8:	4770      	bx	lr
200028ca:	bf00      	nop
200028cc:	40023800 	.word	0x40023800
200028d0:	40013800 	.word	0x40013800
200028d4:	40020000 	.word	0x40020000
200028d8:	40020400 	.word	0x40020400
200028dc:	40020800 	.word	0x40020800
200028e0:	40020c00 	.word	0x40020c00
200028e4:	40021000 	.word	0x40021000
200028e8:	40021400 	.word	0x40021400
200028ec:	40021800 	.word	0x40021800
200028f0:	40021c00 	.word	0x40021c00
200028f4:	40022000 	.word	0x40022000
200028f8:	40022400 	.word	0x40022400
200028fc:	40013c00 	.word	0x40013c00

20002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20002900:	b480      	push	{r7}
20002902:	b083      	sub	sp, #12
20002904:	af00      	add	r7, sp, #0
20002906:	6078      	str	r0, [r7, #4]
20002908:	460b      	mov	r3, r1
2000290a:	807b      	strh	r3, [r7, #2]
2000290c:	4613      	mov	r3, r2
2000290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
20002910:	787b      	ldrb	r3, [r7, #1]
20002912:	2b00      	cmp	r3, #0
20002914:	d003      	beq.n	2000291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20002916:	887a      	ldrh	r2, [r7, #2]
20002918:	687b      	ldr	r3, [r7, #4]
2000291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
2000291c:	e003      	b.n	20002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
2000291e:	887b      	ldrh	r3, [r7, #2]
20002920:	041a      	lsls	r2, r3, #16
20002922:	687b      	ldr	r3, [r7, #4]
20002924:	619a      	str	r2, [r3, #24]
}
20002926:	bf00      	nop
20002928:	370c      	adds	r7, #12
2000292a:	46bd      	mov	sp, r7
2000292c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002930:	4770      	bx	lr

20002932 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
20002932:	b580      	push	{r7, lr}
20002934:	b086      	sub	sp, #24
20002936:	af02      	add	r7, sp, #8
20002938:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
2000293a:	687b      	ldr	r3, [r7, #4]
2000293c:	2b00      	cmp	r3, #0
2000293e:	d101      	bne.n	20002944 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
20002940:	2301      	movs	r3, #1
20002942:	e108      	b.n	20002b56 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
20002944:	687b      	ldr	r3, [r7, #4]
20002946:	681b      	ldr	r3, [r3, #0]
20002948:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
2000294a:	687b      	ldr	r3, [r7, #4]
2000294c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
20002950:	b2db      	uxtb	r3, r3
20002952:	2b00      	cmp	r3, #0
20002954:	d106      	bne.n	20002964 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
20002956:	687b      	ldr	r3, [r7, #4]
20002958:	2200      	movs	r2, #0
2000295a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
2000295e:	6878      	ldr	r0, [r7, #4]
20002960:	f7ff f888 	bl	20001a74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
20002964:	687b      	ldr	r3, [r7, #4]
20002966:	2203      	movs	r2, #3
20002968:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
2000296c:	68bb      	ldr	r3, [r7, #8]
2000296e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20002972:	d102      	bne.n	2000297a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
20002974:	687b      	ldr	r3, [r7, #4]
20002976:	2200      	movs	r2, #0
20002978:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
2000297a:	687b      	ldr	r3, [r7, #4]
2000297c:	681b      	ldr	r3, [r3, #0]
2000297e:	4618      	mov	r0, r3
20002980:	f001 ffae 	bl	200048e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20002984:	687b      	ldr	r3, [r7, #4]
20002986:	6818      	ldr	r0, [r3, #0]
20002988:	687b      	ldr	r3, [r7, #4]
2000298a:	7c1a      	ldrb	r2, [r3, #16]
2000298c:	f88d 2000 	strb.w	r2, [sp]
20002990:	3304      	adds	r3, #4
20002992:	cb0e      	ldmia	r3, {r1, r2, r3}
20002994:	f001 ff4a 	bl	2000482c <USB_CoreInit>
20002998:	4603      	mov	r3, r0
2000299a:	2b00      	cmp	r3, #0
2000299c:	d005      	beq.n	200029aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
2000299e:	687b      	ldr	r3, [r7, #4]
200029a0:	2202      	movs	r2, #2
200029a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
200029a6:	2301      	movs	r3, #1
200029a8:	e0d5      	b.n	20002b56 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
200029aa:	687b      	ldr	r3, [r7, #4]
200029ac:	681b      	ldr	r3, [r3, #0]
200029ae:	2100      	movs	r1, #0
200029b0:	4618      	mov	r0, r3
200029b2:	f001 ffa6 	bl	20004902 <USB_SetCurrentMode>
200029b6:	4603      	mov	r3, r0
200029b8:	2b00      	cmp	r3, #0
200029ba:	d005      	beq.n	200029c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
200029bc:	687b      	ldr	r3, [r7, #4]
200029be:	2202      	movs	r2, #2
200029c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
200029c4:	2301      	movs	r3, #1
200029c6:	e0c6      	b.n	20002b56 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200029c8:	2300      	movs	r3, #0
200029ca:	73fb      	strb	r3, [r7, #15]
200029cc:	e04a      	b.n	20002a64 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
200029ce:	7bfa      	ldrb	r2, [r7, #15]
200029d0:	6879      	ldr	r1, [r7, #4]
200029d2:	4613      	mov	r3, r2
200029d4:	00db      	lsls	r3, r3, #3
200029d6:	4413      	add	r3, r2
200029d8:	009b      	lsls	r3, r3, #2
200029da:	440b      	add	r3, r1
200029dc:	3315      	adds	r3, #21
200029de:	2201      	movs	r2, #1
200029e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
200029e2:	7bfa      	ldrb	r2, [r7, #15]
200029e4:	6879      	ldr	r1, [r7, #4]
200029e6:	4613      	mov	r3, r2
200029e8:	00db      	lsls	r3, r3, #3
200029ea:	4413      	add	r3, r2
200029ec:	009b      	lsls	r3, r3, #2
200029ee:	440b      	add	r3, r1
200029f0:	3314      	adds	r3, #20
200029f2:	7bfa      	ldrb	r2, [r7, #15]
200029f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
200029f6:	7bfa      	ldrb	r2, [r7, #15]
200029f8:	7bfb      	ldrb	r3, [r7, #15]
200029fa:	b298      	uxth	r0, r3
200029fc:	6879      	ldr	r1, [r7, #4]
200029fe:	4613      	mov	r3, r2
20002a00:	00db      	lsls	r3, r3, #3
20002a02:	4413      	add	r3, r2
20002a04:	009b      	lsls	r3, r3, #2
20002a06:	440b      	add	r3, r1
20002a08:	332e      	adds	r3, #46	@ 0x2e
20002a0a:	4602      	mov	r2, r0
20002a0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
20002a0e:	7bfa      	ldrb	r2, [r7, #15]
20002a10:	6879      	ldr	r1, [r7, #4]
20002a12:	4613      	mov	r3, r2
20002a14:	00db      	lsls	r3, r3, #3
20002a16:	4413      	add	r3, r2
20002a18:	009b      	lsls	r3, r3, #2
20002a1a:	440b      	add	r3, r1
20002a1c:	3318      	adds	r3, #24
20002a1e:	2200      	movs	r2, #0
20002a20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
20002a22:	7bfa      	ldrb	r2, [r7, #15]
20002a24:	6879      	ldr	r1, [r7, #4]
20002a26:	4613      	mov	r3, r2
20002a28:	00db      	lsls	r3, r3, #3
20002a2a:	4413      	add	r3, r2
20002a2c:	009b      	lsls	r3, r3, #2
20002a2e:	440b      	add	r3, r1
20002a30:	331c      	adds	r3, #28
20002a32:	2200      	movs	r2, #0
20002a34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
20002a36:	7bfa      	ldrb	r2, [r7, #15]
20002a38:	6879      	ldr	r1, [r7, #4]
20002a3a:	4613      	mov	r3, r2
20002a3c:	00db      	lsls	r3, r3, #3
20002a3e:	4413      	add	r3, r2
20002a40:	009b      	lsls	r3, r3, #2
20002a42:	440b      	add	r3, r1
20002a44:	3320      	adds	r3, #32
20002a46:	2200      	movs	r2, #0
20002a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
20002a4a:	7bfa      	ldrb	r2, [r7, #15]
20002a4c:	6879      	ldr	r1, [r7, #4]
20002a4e:	4613      	mov	r3, r2
20002a50:	00db      	lsls	r3, r3, #3
20002a52:	4413      	add	r3, r2
20002a54:	009b      	lsls	r3, r3, #2
20002a56:	440b      	add	r3, r1
20002a58:	3324      	adds	r3, #36	@ 0x24
20002a5a:	2200      	movs	r2, #0
20002a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20002a5e:	7bfb      	ldrb	r3, [r7, #15]
20002a60:	3301      	adds	r3, #1
20002a62:	73fb      	strb	r3, [r7, #15]
20002a64:	687b      	ldr	r3, [r7, #4]
20002a66:	791b      	ldrb	r3, [r3, #4]
20002a68:	7bfa      	ldrb	r2, [r7, #15]
20002a6a:	429a      	cmp	r2, r3
20002a6c:	d3af      	bcc.n	200029ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20002a6e:	2300      	movs	r3, #0
20002a70:	73fb      	strb	r3, [r7, #15]
20002a72:	e044      	b.n	20002afe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
20002a74:	7bfa      	ldrb	r2, [r7, #15]
20002a76:	6879      	ldr	r1, [r7, #4]
20002a78:	4613      	mov	r3, r2
20002a7a:	00db      	lsls	r3, r3, #3
20002a7c:	4413      	add	r3, r2
20002a7e:	009b      	lsls	r3, r3, #2
20002a80:	440b      	add	r3, r1
20002a82:	f203 2355 	addw	r3, r3, #597	@ 0x255
20002a86:	2200      	movs	r2, #0
20002a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
20002a8a:	7bfa      	ldrb	r2, [r7, #15]
20002a8c:	6879      	ldr	r1, [r7, #4]
20002a8e:	4613      	mov	r3, r2
20002a90:	00db      	lsls	r3, r3, #3
20002a92:	4413      	add	r3, r2
20002a94:	009b      	lsls	r3, r3, #2
20002a96:	440b      	add	r3, r1
20002a98:	f503 7315 	add.w	r3, r3, #596	@ 0x254
20002a9c:	7bfa      	ldrb	r2, [r7, #15]
20002a9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
20002aa0:	7bfa      	ldrb	r2, [r7, #15]
20002aa2:	6879      	ldr	r1, [r7, #4]
20002aa4:	4613      	mov	r3, r2
20002aa6:	00db      	lsls	r3, r3, #3
20002aa8:	4413      	add	r3, r2
20002aaa:	009b      	lsls	r3, r3, #2
20002aac:	440b      	add	r3, r1
20002aae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20002ab2:	2200      	movs	r2, #0
20002ab4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
20002ab6:	7bfa      	ldrb	r2, [r7, #15]
20002ab8:	6879      	ldr	r1, [r7, #4]
20002aba:	4613      	mov	r3, r2
20002abc:	00db      	lsls	r3, r3, #3
20002abe:	4413      	add	r3, r2
20002ac0:	009b      	lsls	r3, r3, #2
20002ac2:	440b      	add	r3, r1
20002ac4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
20002ac8:	2200      	movs	r2, #0
20002aca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
20002acc:	7bfa      	ldrb	r2, [r7, #15]
20002ace:	6879      	ldr	r1, [r7, #4]
20002ad0:	4613      	mov	r3, r2
20002ad2:	00db      	lsls	r3, r3, #3
20002ad4:	4413      	add	r3, r2
20002ad6:	009b      	lsls	r3, r3, #2
20002ad8:	440b      	add	r3, r1
20002ada:	f503 7318 	add.w	r3, r3, #608	@ 0x260
20002ade:	2200      	movs	r2, #0
20002ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
20002ae2:	7bfa      	ldrb	r2, [r7, #15]
20002ae4:	6879      	ldr	r1, [r7, #4]
20002ae6:	4613      	mov	r3, r2
20002ae8:	00db      	lsls	r3, r3, #3
20002aea:	4413      	add	r3, r2
20002aec:	009b      	lsls	r3, r3, #2
20002aee:	440b      	add	r3, r1
20002af0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20002af4:	2200      	movs	r2, #0
20002af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20002af8:	7bfb      	ldrb	r3, [r7, #15]
20002afa:	3301      	adds	r3, #1
20002afc:	73fb      	strb	r3, [r7, #15]
20002afe:	687b      	ldr	r3, [r7, #4]
20002b00:	791b      	ldrb	r3, [r3, #4]
20002b02:	7bfa      	ldrb	r2, [r7, #15]
20002b04:	429a      	cmp	r2, r3
20002b06:	d3b5      	bcc.n	20002a74 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20002b08:	687b      	ldr	r3, [r7, #4]
20002b0a:	6818      	ldr	r0, [r3, #0]
20002b0c:	687b      	ldr	r3, [r7, #4]
20002b0e:	7c1a      	ldrb	r2, [r3, #16]
20002b10:	f88d 2000 	strb.w	r2, [sp]
20002b14:	3304      	adds	r3, #4
20002b16:	cb0e      	ldmia	r3, {r1, r2, r3}
20002b18:	f001 ff40 	bl	2000499c <USB_DevInit>
20002b1c:	4603      	mov	r3, r0
20002b1e:	2b00      	cmp	r3, #0
20002b20:	d005      	beq.n	20002b2e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20002b22:	687b      	ldr	r3, [r7, #4]
20002b24:	2202      	movs	r2, #2
20002b26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20002b2a:	2301      	movs	r3, #1
20002b2c:	e013      	b.n	20002b56 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
20002b2e:	687b      	ldr	r3, [r7, #4]
20002b30:	2200      	movs	r2, #0
20002b32:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
20002b34:	687b      	ldr	r3, [r7, #4]
20002b36:	2201      	movs	r2, #1
20002b38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
20002b3c:	687b      	ldr	r3, [r7, #4]
20002b3e:	7b1b      	ldrb	r3, [r3, #12]
20002b40:	2b01      	cmp	r3, #1
20002b42:	d102      	bne.n	20002b4a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
20002b44:	6878      	ldr	r0, [r7, #4]
20002b46:	f000 f80b 	bl	20002b60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
20002b4a:	687b      	ldr	r3, [r7, #4]
20002b4c:	681b      	ldr	r3, [r3, #0]
20002b4e:	4618      	mov	r0, r3
20002b50:	f002 f8fb 	bl	20004d4a <USB_DevDisconnect>

  return HAL_OK;
20002b54:	2300      	movs	r3, #0
}
20002b56:	4618      	mov	r0, r3
20002b58:	3710      	adds	r7, #16
20002b5a:	46bd      	mov	sp, r7
20002b5c:	bd80      	pop	{r7, pc}
	...

20002b60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
20002b60:	b480      	push	{r7}
20002b62:	b085      	sub	sp, #20
20002b64:	af00      	add	r7, sp, #0
20002b66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20002b68:	687b      	ldr	r3, [r7, #4]
20002b6a:	681b      	ldr	r3, [r3, #0]
20002b6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
20002b6e:	687b      	ldr	r3, [r7, #4]
20002b70:	2201      	movs	r2, #1
20002b72:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
20002b76:	687b      	ldr	r3, [r7, #4]
20002b78:	2200      	movs	r2, #0
20002b7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
20002b7e:	68fb      	ldr	r3, [r7, #12]
20002b80:	699b      	ldr	r3, [r3, #24]
20002b82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
20002b86:	68fb      	ldr	r3, [r7, #12]
20002b88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
20002b8a:	68fb      	ldr	r3, [r7, #12]
20002b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
20002b8e:	4b05      	ldr	r3, [pc, #20]	@ (20002ba4 <HAL_PCDEx_ActivateLPM+0x44>)
20002b90:	4313      	orrs	r3, r2
20002b92:	68fa      	ldr	r2, [r7, #12]
20002b94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
20002b96:	2300      	movs	r3, #0
}
20002b98:	4618      	mov	r0, r3
20002b9a:	3714      	adds	r7, #20
20002b9c:	46bd      	mov	sp, r7
20002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ba2:	4770      	bx	lr
20002ba4:	10000003 	.word	0x10000003

20002ba8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20002ba8:	b480      	push	{r7}
20002baa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
20002bac:	4b05      	ldr	r3, [pc, #20]	@ (20002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
20002bae:	681b      	ldr	r3, [r3, #0]
20002bb0:	4a04      	ldr	r2, [pc, #16]	@ (20002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
20002bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20002bb6:	6013      	str	r3, [r2, #0]
}
20002bb8:	bf00      	nop
20002bba:	46bd      	mov	sp, r7
20002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20002bc0:	4770      	bx	lr
20002bc2:	bf00      	nop
20002bc4:	40007000 	.word	0x40007000

20002bc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20002bc8:	b580      	push	{r7, lr}
20002bca:	b082      	sub	sp, #8
20002bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
20002bce:	2300      	movs	r3, #0
20002bd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
20002bd2:	4b23      	ldr	r3, [pc, #140]	@ (20002c60 <HAL_PWREx_EnableOverDrive+0x98>)
20002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002bd6:	4a22      	ldr	r2, [pc, #136]	@ (20002c60 <HAL_PWREx_EnableOverDrive+0x98>)
20002bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20002bdc:	6413      	str	r3, [r2, #64]	@ 0x40
20002bde:	4b20      	ldr	r3, [pc, #128]	@ (20002c60 <HAL_PWREx_EnableOverDrive+0x98>)
20002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20002be6:	603b      	str	r3, [r7, #0]
20002be8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20002bea:	4b1e      	ldr	r3, [pc, #120]	@ (20002c64 <HAL_PWREx_EnableOverDrive+0x9c>)
20002bec:	681b      	ldr	r3, [r3, #0]
20002bee:	4a1d      	ldr	r2, [pc, #116]	@ (20002c64 <HAL_PWREx_EnableOverDrive+0x9c>)
20002bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20002bf4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20002bf6:	f7ff f873 	bl	20001ce0 <HAL_GetTick>
20002bfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20002bfc:	e009      	b.n	20002c12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20002bfe:	f7ff f86f 	bl	20001ce0 <HAL_GetTick>
20002c02:	4602      	mov	r2, r0
20002c04:	687b      	ldr	r3, [r7, #4]
20002c06:	1ad3      	subs	r3, r2, r3
20002c08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20002c0c:	d901      	bls.n	20002c12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
20002c0e:	2303      	movs	r3, #3
20002c10:	e022      	b.n	20002c58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20002c12:	4b14      	ldr	r3, [pc, #80]	@ (20002c64 <HAL_PWREx_EnableOverDrive+0x9c>)
20002c14:	685b      	ldr	r3, [r3, #4]
20002c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20002c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20002c1e:	d1ee      	bne.n	20002bfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20002c20:	4b10      	ldr	r3, [pc, #64]	@ (20002c64 <HAL_PWREx_EnableOverDrive+0x9c>)
20002c22:	681b      	ldr	r3, [r3, #0]
20002c24:	4a0f      	ldr	r2, [pc, #60]	@ (20002c64 <HAL_PWREx_EnableOverDrive+0x9c>)
20002c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20002c2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20002c2c:	f7ff f858 	bl	20001ce0 <HAL_GetTick>
20002c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20002c32:	e009      	b.n	20002c48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20002c34:	f7ff f854 	bl	20001ce0 <HAL_GetTick>
20002c38:	4602      	mov	r2, r0
20002c3a:	687b      	ldr	r3, [r7, #4]
20002c3c:	1ad3      	subs	r3, r2, r3
20002c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20002c42:	d901      	bls.n	20002c48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
20002c44:	2303      	movs	r3, #3
20002c46:	e007      	b.n	20002c58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20002c48:	4b06      	ldr	r3, [pc, #24]	@ (20002c64 <HAL_PWREx_EnableOverDrive+0x9c>)
20002c4a:	685b      	ldr	r3, [r3, #4]
20002c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20002c54:	d1ee      	bne.n	20002c34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
20002c56:	2300      	movs	r3, #0
}
20002c58:	4618      	mov	r0, r3
20002c5a:	3708      	adds	r7, #8
20002c5c:	46bd      	mov	sp, r7
20002c5e:	bd80      	pop	{r7, pc}
20002c60:	40023800 	.word	0x40023800
20002c64:	40007000 	.word	0x40007000

20002c68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20002c68:	b580      	push	{r7, lr}
20002c6a:	b086      	sub	sp, #24
20002c6c:	af00      	add	r7, sp, #0
20002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
20002c70:	2300      	movs	r3, #0
20002c72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20002c74:	687b      	ldr	r3, [r7, #4]
20002c76:	2b00      	cmp	r3, #0
20002c78:	d101      	bne.n	20002c7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
20002c7a:	2301      	movs	r3, #1
20002c7c:	e291      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20002c7e:	687b      	ldr	r3, [r7, #4]
20002c80:	681b      	ldr	r3, [r3, #0]
20002c82:	f003 0301 	and.w	r3, r3, #1
20002c86:	2b00      	cmp	r3, #0
20002c88:	f000 8087 	beq.w	20002d9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
20002c8c:	4b96      	ldr	r3, [pc, #600]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002c8e:	689b      	ldr	r3, [r3, #8]
20002c90:	f003 030c 	and.w	r3, r3, #12
20002c94:	2b04      	cmp	r3, #4
20002c96:	d00c      	beq.n	20002cb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20002c98:	4b93      	ldr	r3, [pc, #588]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002c9a:	689b      	ldr	r3, [r3, #8]
20002c9c:	f003 030c 	and.w	r3, r3, #12
20002ca0:	2b08      	cmp	r3, #8
20002ca2:	d112      	bne.n	20002cca <HAL_RCC_OscConfig+0x62>
20002ca4:	4b90      	ldr	r3, [pc, #576]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002ca6:	685b      	ldr	r3, [r3, #4]
20002ca8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20002cac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20002cb0:	d10b      	bne.n	20002cca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20002cb2:	4b8d      	ldr	r3, [pc, #564]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002cb4:	681b      	ldr	r3, [r3, #0]
20002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002cba:	2b00      	cmp	r3, #0
20002cbc:	d06c      	beq.n	20002d98 <HAL_RCC_OscConfig+0x130>
20002cbe:	687b      	ldr	r3, [r7, #4]
20002cc0:	685b      	ldr	r3, [r3, #4]
20002cc2:	2b00      	cmp	r3, #0
20002cc4:	d168      	bne.n	20002d98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
20002cc6:	2301      	movs	r3, #1
20002cc8:	e26b      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20002cca:	687b      	ldr	r3, [r7, #4]
20002ccc:	685b      	ldr	r3, [r3, #4]
20002cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20002cd2:	d106      	bne.n	20002ce2 <HAL_RCC_OscConfig+0x7a>
20002cd4:	4b84      	ldr	r3, [pc, #528]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002cd6:	681b      	ldr	r3, [r3, #0]
20002cd8:	4a83      	ldr	r2, [pc, #524]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20002cde:	6013      	str	r3, [r2, #0]
20002ce0:	e02e      	b.n	20002d40 <HAL_RCC_OscConfig+0xd8>
20002ce2:	687b      	ldr	r3, [r7, #4]
20002ce4:	685b      	ldr	r3, [r3, #4]
20002ce6:	2b00      	cmp	r3, #0
20002ce8:	d10c      	bne.n	20002d04 <HAL_RCC_OscConfig+0x9c>
20002cea:	4b7f      	ldr	r3, [pc, #508]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002cec:	681b      	ldr	r3, [r3, #0]
20002cee:	4a7e      	ldr	r2, [pc, #504]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20002cf4:	6013      	str	r3, [r2, #0]
20002cf6:	4b7c      	ldr	r3, [pc, #496]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002cf8:	681b      	ldr	r3, [r3, #0]
20002cfa:	4a7b      	ldr	r2, [pc, #492]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20002d00:	6013      	str	r3, [r2, #0]
20002d02:	e01d      	b.n	20002d40 <HAL_RCC_OscConfig+0xd8>
20002d04:	687b      	ldr	r3, [r7, #4]
20002d06:	685b      	ldr	r3, [r3, #4]
20002d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20002d0c:	d10c      	bne.n	20002d28 <HAL_RCC_OscConfig+0xc0>
20002d0e:	4b76      	ldr	r3, [pc, #472]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d10:	681b      	ldr	r3, [r3, #0]
20002d12:	4a75      	ldr	r2, [pc, #468]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20002d18:	6013      	str	r3, [r2, #0]
20002d1a:	4b73      	ldr	r3, [pc, #460]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d1c:	681b      	ldr	r3, [r3, #0]
20002d1e:	4a72      	ldr	r2, [pc, #456]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20002d24:	6013      	str	r3, [r2, #0]
20002d26:	e00b      	b.n	20002d40 <HAL_RCC_OscConfig+0xd8>
20002d28:	4b6f      	ldr	r3, [pc, #444]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d2a:	681b      	ldr	r3, [r3, #0]
20002d2c:	4a6e      	ldr	r2, [pc, #440]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20002d32:	6013      	str	r3, [r2, #0]
20002d34:	4b6c      	ldr	r3, [pc, #432]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d36:	681b      	ldr	r3, [r3, #0]
20002d38:	4a6b      	ldr	r2, [pc, #428]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20002d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
20002d40:	687b      	ldr	r3, [r7, #4]
20002d42:	685b      	ldr	r3, [r3, #4]
20002d44:	2b00      	cmp	r3, #0
20002d46:	d013      	beq.n	20002d70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002d48:	f7fe ffca 	bl	20001ce0 <HAL_GetTick>
20002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20002d4e:	e008      	b.n	20002d62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20002d50:	f7fe ffc6 	bl	20001ce0 <HAL_GetTick>
20002d54:	4602      	mov	r2, r0
20002d56:	693b      	ldr	r3, [r7, #16]
20002d58:	1ad3      	subs	r3, r2, r3
20002d5a:	2b64      	cmp	r3, #100	@ 0x64
20002d5c:	d901      	bls.n	20002d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20002d5e:	2303      	movs	r3, #3
20002d60:	e21f      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20002d62:	4b61      	ldr	r3, [pc, #388]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d64:	681b      	ldr	r3, [r3, #0]
20002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002d6a:	2b00      	cmp	r3, #0
20002d6c:	d0f0      	beq.n	20002d50 <HAL_RCC_OscConfig+0xe8>
20002d6e:	e014      	b.n	20002d9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002d70:	f7fe ffb6 	bl	20001ce0 <HAL_GetTick>
20002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20002d76:	e008      	b.n	20002d8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20002d78:	f7fe ffb2 	bl	20001ce0 <HAL_GetTick>
20002d7c:	4602      	mov	r2, r0
20002d7e:	693b      	ldr	r3, [r7, #16]
20002d80:	1ad3      	subs	r3, r2, r3
20002d82:	2b64      	cmp	r3, #100	@ 0x64
20002d84:	d901      	bls.n	20002d8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
20002d86:	2303      	movs	r3, #3
20002d88:	e20b      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20002d8a:	4b57      	ldr	r3, [pc, #348]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002d8c:	681b      	ldr	r3, [r3, #0]
20002d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002d92:	2b00      	cmp	r3, #0
20002d94:	d1f0      	bne.n	20002d78 <HAL_RCC_OscConfig+0x110>
20002d96:	e000      	b.n	20002d9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20002d9a:	687b      	ldr	r3, [r7, #4]
20002d9c:	681b      	ldr	r3, [r3, #0]
20002d9e:	f003 0302 	and.w	r3, r3, #2
20002da2:	2b00      	cmp	r3, #0
20002da4:	d069      	beq.n	20002e7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
20002da6:	4b50      	ldr	r3, [pc, #320]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002da8:	689b      	ldr	r3, [r3, #8]
20002daa:	f003 030c 	and.w	r3, r3, #12
20002dae:	2b00      	cmp	r3, #0
20002db0:	d00b      	beq.n	20002dca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20002db2:	4b4d      	ldr	r3, [pc, #308]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002db4:	689b      	ldr	r3, [r3, #8]
20002db6:	f003 030c 	and.w	r3, r3, #12
20002dba:	2b08      	cmp	r3, #8
20002dbc:	d11c      	bne.n	20002df8 <HAL_RCC_OscConfig+0x190>
20002dbe:	4b4a      	ldr	r3, [pc, #296]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002dc0:	685b      	ldr	r3, [r3, #4]
20002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20002dc6:	2b00      	cmp	r3, #0
20002dc8:	d116      	bne.n	20002df8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20002dca:	4b47      	ldr	r3, [pc, #284]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002dcc:	681b      	ldr	r3, [r3, #0]
20002dce:	f003 0302 	and.w	r3, r3, #2
20002dd2:	2b00      	cmp	r3, #0
20002dd4:	d005      	beq.n	20002de2 <HAL_RCC_OscConfig+0x17a>
20002dd6:	687b      	ldr	r3, [r7, #4]
20002dd8:	68db      	ldr	r3, [r3, #12]
20002dda:	2b01      	cmp	r3, #1
20002ddc:	d001      	beq.n	20002de2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
20002dde:	2301      	movs	r3, #1
20002de0:	e1df      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20002de2:	4b41      	ldr	r3, [pc, #260]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002de4:	681b      	ldr	r3, [r3, #0]
20002de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20002dea:	687b      	ldr	r3, [r7, #4]
20002dec:	691b      	ldr	r3, [r3, #16]
20002dee:	00db      	lsls	r3, r3, #3
20002df0:	493d      	ldr	r1, [pc, #244]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002df2:	4313      	orrs	r3, r2
20002df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20002df6:	e040      	b.n	20002e7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
20002df8:	687b      	ldr	r3, [r7, #4]
20002dfa:	68db      	ldr	r3, [r3, #12]
20002dfc:	2b00      	cmp	r3, #0
20002dfe:	d023      	beq.n	20002e48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20002e00:	4b39      	ldr	r3, [pc, #228]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e02:	681b      	ldr	r3, [r3, #0]
20002e04:	4a38      	ldr	r2, [pc, #224]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e06:	f043 0301 	orr.w	r3, r3, #1
20002e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002e0c:	f7fe ff68 	bl	20001ce0 <HAL_GetTick>
20002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002e12:	e008      	b.n	20002e26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20002e14:	f7fe ff64 	bl	20001ce0 <HAL_GetTick>
20002e18:	4602      	mov	r2, r0
20002e1a:	693b      	ldr	r3, [r7, #16]
20002e1c:	1ad3      	subs	r3, r2, r3
20002e1e:	2b02      	cmp	r3, #2
20002e20:	d901      	bls.n	20002e26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
20002e22:	2303      	movs	r3, #3
20002e24:	e1bd      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002e26:	4b30      	ldr	r3, [pc, #192]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e28:	681b      	ldr	r3, [r3, #0]
20002e2a:	f003 0302 	and.w	r3, r3, #2
20002e2e:	2b00      	cmp	r3, #0
20002e30:	d0f0      	beq.n	20002e14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20002e32:	4b2d      	ldr	r3, [pc, #180]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e34:	681b      	ldr	r3, [r3, #0]
20002e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20002e3a:	687b      	ldr	r3, [r7, #4]
20002e3c:	691b      	ldr	r3, [r3, #16]
20002e3e:	00db      	lsls	r3, r3, #3
20002e40:	4929      	ldr	r1, [pc, #164]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e42:	4313      	orrs	r3, r2
20002e44:	600b      	str	r3, [r1, #0]
20002e46:	e018      	b.n	20002e7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20002e48:	4b27      	ldr	r3, [pc, #156]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e4a:	681b      	ldr	r3, [r3, #0]
20002e4c:	4a26      	ldr	r2, [pc, #152]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e4e:	f023 0301 	bic.w	r3, r3, #1
20002e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002e54:	f7fe ff44 	bl	20001ce0 <HAL_GetTick>
20002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20002e5a:	e008      	b.n	20002e6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20002e5c:	f7fe ff40 	bl	20001ce0 <HAL_GetTick>
20002e60:	4602      	mov	r2, r0
20002e62:	693b      	ldr	r3, [r7, #16]
20002e64:	1ad3      	subs	r3, r2, r3
20002e66:	2b02      	cmp	r3, #2
20002e68:	d901      	bls.n	20002e6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
20002e6a:	2303      	movs	r3, #3
20002e6c:	e199      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20002e6e:	4b1e      	ldr	r3, [pc, #120]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e70:	681b      	ldr	r3, [r3, #0]
20002e72:	f003 0302 	and.w	r3, r3, #2
20002e76:	2b00      	cmp	r3, #0
20002e78:	d1f0      	bne.n	20002e5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20002e7a:	687b      	ldr	r3, [r7, #4]
20002e7c:	681b      	ldr	r3, [r3, #0]
20002e7e:	f003 0308 	and.w	r3, r3, #8
20002e82:	2b00      	cmp	r3, #0
20002e84:	d038      	beq.n	20002ef8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
20002e86:	687b      	ldr	r3, [r7, #4]
20002e88:	695b      	ldr	r3, [r3, #20]
20002e8a:	2b00      	cmp	r3, #0
20002e8c:	d019      	beq.n	20002ec2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20002e8e:	4b16      	ldr	r3, [pc, #88]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20002e92:	4a15      	ldr	r2, [pc, #84]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002e94:	f043 0301 	orr.w	r3, r3, #1
20002e98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20002e9a:	f7fe ff21 	bl	20001ce0 <HAL_GetTick>
20002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20002ea0:	e008      	b.n	20002eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20002ea2:	f7fe ff1d 	bl	20001ce0 <HAL_GetTick>
20002ea6:	4602      	mov	r2, r0
20002ea8:	693b      	ldr	r3, [r7, #16]
20002eaa:	1ad3      	subs	r3, r2, r3
20002eac:	2b02      	cmp	r3, #2
20002eae:	d901      	bls.n	20002eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20002eb0:	2303      	movs	r3, #3
20002eb2:	e176      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20002eb8:	f003 0302 	and.w	r3, r3, #2
20002ebc:	2b00      	cmp	r3, #0
20002ebe:	d0f0      	beq.n	20002ea2 <HAL_RCC_OscConfig+0x23a>
20002ec0:	e01a      	b.n	20002ef8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20002ec2:	4b09      	ldr	r3, [pc, #36]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20002ec6:	4a08      	ldr	r2, [pc, #32]	@ (20002ee8 <HAL_RCC_OscConfig+0x280>)
20002ec8:	f023 0301 	bic.w	r3, r3, #1
20002ecc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20002ece:	f7fe ff07 	bl	20001ce0 <HAL_GetTick>
20002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20002ed4:	e00a      	b.n	20002eec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20002ed6:	f7fe ff03 	bl	20001ce0 <HAL_GetTick>
20002eda:	4602      	mov	r2, r0
20002edc:	693b      	ldr	r3, [r7, #16]
20002ede:	1ad3      	subs	r3, r2, r3
20002ee0:	2b02      	cmp	r3, #2
20002ee2:	d903      	bls.n	20002eec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
20002ee4:	2303      	movs	r3, #3
20002ee6:	e15c      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
20002ee8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20002eec:	4b91      	ldr	r3, [pc, #580]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20002ef0:	f003 0302 	and.w	r3, r3, #2
20002ef4:	2b00      	cmp	r3, #0
20002ef6:	d1ee      	bne.n	20002ed6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20002ef8:	687b      	ldr	r3, [r7, #4]
20002efa:	681b      	ldr	r3, [r3, #0]
20002efc:	f003 0304 	and.w	r3, r3, #4
20002f00:	2b00      	cmp	r3, #0
20002f02:	f000 80a4 	beq.w	2000304e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
20002f06:	4b8b      	ldr	r3, [pc, #556]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20002f0e:	2b00      	cmp	r3, #0
20002f10:	d10d      	bne.n	20002f2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
20002f12:	4b88      	ldr	r3, [pc, #544]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002f16:	4a87      	ldr	r2, [pc, #540]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20002f1c:	6413      	str	r3, [r2, #64]	@ 0x40
20002f1e:	4b85      	ldr	r3, [pc, #532]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20002f26:	60bb      	str	r3, [r7, #8]
20002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20002f2a:	2301      	movs	r3, #1
20002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20002f2e:	4b82      	ldr	r3, [pc, #520]	@ (20003138 <HAL_RCC_OscConfig+0x4d0>)
20002f30:	681b      	ldr	r3, [r3, #0]
20002f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20002f36:	2b00      	cmp	r3, #0
20002f38:	d118      	bne.n	20002f6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
20002f3a:	4b7f      	ldr	r3, [pc, #508]	@ (20003138 <HAL_RCC_OscConfig+0x4d0>)
20002f3c:	681b      	ldr	r3, [r3, #0]
20002f3e:	4a7e      	ldr	r2, [pc, #504]	@ (20003138 <HAL_RCC_OscConfig+0x4d0>)
20002f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20002f46:	f7fe fecb 	bl	20001ce0 <HAL_GetTick>
20002f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20002f4c:	e008      	b.n	20002f60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20002f4e:	f7fe fec7 	bl	20001ce0 <HAL_GetTick>
20002f52:	4602      	mov	r2, r0
20002f54:	693b      	ldr	r3, [r7, #16]
20002f56:	1ad3      	subs	r3, r2, r3
20002f58:	2b64      	cmp	r3, #100	@ 0x64
20002f5a:	d901      	bls.n	20002f60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
20002f5c:	2303      	movs	r3, #3
20002f5e:	e120      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20002f60:	4b75      	ldr	r3, [pc, #468]	@ (20003138 <HAL_RCC_OscConfig+0x4d0>)
20002f62:	681b      	ldr	r3, [r3, #0]
20002f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20002f68:	2b00      	cmp	r3, #0
20002f6a:	d0f0      	beq.n	20002f4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20002f6c:	687b      	ldr	r3, [r7, #4]
20002f6e:	689b      	ldr	r3, [r3, #8]
20002f70:	2b01      	cmp	r3, #1
20002f72:	d106      	bne.n	20002f82 <HAL_RCC_OscConfig+0x31a>
20002f74:	4b6f      	ldr	r3, [pc, #444]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002f78:	4a6e      	ldr	r2, [pc, #440]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f7a:	f043 0301 	orr.w	r3, r3, #1
20002f7e:	6713      	str	r3, [r2, #112]	@ 0x70
20002f80:	e02d      	b.n	20002fde <HAL_RCC_OscConfig+0x376>
20002f82:	687b      	ldr	r3, [r7, #4]
20002f84:	689b      	ldr	r3, [r3, #8]
20002f86:	2b00      	cmp	r3, #0
20002f88:	d10c      	bne.n	20002fa4 <HAL_RCC_OscConfig+0x33c>
20002f8a:	4b6a      	ldr	r3, [pc, #424]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002f8e:	4a69      	ldr	r2, [pc, #420]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f90:	f023 0301 	bic.w	r3, r3, #1
20002f94:	6713      	str	r3, [r2, #112]	@ 0x70
20002f96:	4b67      	ldr	r3, [pc, #412]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002f9a:	4a66      	ldr	r2, [pc, #408]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002f9c:	f023 0304 	bic.w	r3, r3, #4
20002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
20002fa2:	e01c      	b.n	20002fde <HAL_RCC_OscConfig+0x376>
20002fa4:	687b      	ldr	r3, [r7, #4]
20002fa6:	689b      	ldr	r3, [r3, #8]
20002fa8:	2b05      	cmp	r3, #5
20002faa:	d10c      	bne.n	20002fc6 <HAL_RCC_OscConfig+0x35e>
20002fac:	4b61      	ldr	r3, [pc, #388]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002fb0:	4a60      	ldr	r2, [pc, #384]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fb2:	f043 0304 	orr.w	r3, r3, #4
20002fb6:	6713      	str	r3, [r2, #112]	@ 0x70
20002fb8:	4b5e      	ldr	r3, [pc, #376]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002fbc:	4a5d      	ldr	r2, [pc, #372]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fbe:	f043 0301 	orr.w	r3, r3, #1
20002fc2:	6713      	str	r3, [r2, #112]	@ 0x70
20002fc4:	e00b      	b.n	20002fde <HAL_RCC_OscConfig+0x376>
20002fc6:	4b5b      	ldr	r3, [pc, #364]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002fca:	4a5a      	ldr	r2, [pc, #360]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fcc:	f023 0301 	bic.w	r3, r3, #1
20002fd0:	6713      	str	r3, [r2, #112]	@ 0x70
20002fd2:	4b58      	ldr	r3, [pc, #352]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002fd6:	4a57      	ldr	r2, [pc, #348]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20002fd8:	f023 0304 	bic.w	r3, r3, #4
20002fdc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20002fde:	687b      	ldr	r3, [r7, #4]
20002fe0:	689b      	ldr	r3, [r3, #8]
20002fe2:	2b00      	cmp	r3, #0
20002fe4:	d015      	beq.n	20003012 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20002fe6:	f7fe fe7b 	bl	20001ce0 <HAL_GetTick>
20002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20002fec:	e00a      	b.n	20003004 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20002fee:	f7fe fe77 	bl	20001ce0 <HAL_GetTick>
20002ff2:	4602      	mov	r2, r0
20002ff4:	693b      	ldr	r3, [r7, #16]
20002ff6:	1ad3      	subs	r3, r2, r3
20002ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
20002ffc:	4293      	cmp	r3, r2
20002ffe:	d901      	bls.n	20003004 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
20003000:	2303      	movs	r3, #3
20003002:	e0ce      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20003004:	4b4b      	ldr	r3, [pc, #300]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20003008:	f003 0302 	and.w	r3, r3, #2
2000300c:	2b00      	cmp	r3, #0
2000300e:	d0ee      	beq.n	20002fee <HAL_RCC_OscConfig+0x386>
20003010:	e014      	b.n	2000303c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20003012:	f7fe fe65 	bl	20001ce0 <HAL_GetTick>
20003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20003018:	e00a      	b.n	20003030 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2000301a:	f7fe fe61 	bl	20001ce0 <HAL_GetTick>
2000301e:	4602      	mov	r2, r0
20003020:	693b      	ldr	r3, [r7, #16]
20003022:	1ad3      	subs	r3, r2, r3
20003024:	f241 3288 	movw	r2, #5000	@ 0x1388
20003028:	4293      	cmp	r3, r2
2000302a:	d901      	bls.n	20003030 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
2000302c:	2303      	movs	r3, #3
2000302e:	e0b8      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20003030:	4b40      	ldr	r3, [pc, #256]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20003034:	f003 0302 	and.w	r3, r3, #2
20003038:	2b00      	cmp	r3, #0
2000303a:	d1ee      	bne.n	2000301a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
2000303c:	7dfb      	ldrb	r3, [r7, #23]
2000303e:	2b01      	cmp	r3, #1
20003040:	d105      	bne.n	2000304e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20003042:	4b3c      	ldr	r3, [pc, #240]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003046:	4a3b      	ldr	r2, [pc, #236]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
2000304c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000304e:	687b      	ldr	r3, [r7, #4]
20003050:	699b      	ldr	r3, [r3, #24]
20003052:	2b00      	cmp	r3, #0
20003054:	f000 80a4 	beq.w	200031a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
20003058:	4b36      	ldr	r3, [pc, #216]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
2000305a:	689b      	ldr	r3, [r3, #8]
2000305c:	f003 030c 	and.w	r3, r3, #12
20003060:	2b08      	cmp	r3, #8
20003062:	d06b      	beq.n	2000313c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20003064:	687b      	ldr	r3, [r7, #4]
20003066:	699b      	ldr	r3, [r3, #24]
20003068:	2b02      	cmp	r3, #2
2000306a:	d149      	bne.n	20003100 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000306c:	4b31      	ldr	r3, [pc, #196]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
2000306e:	681b      	ldr	r3, [r3, #0]
20003070:	4a30      	ldr	r2, [pc, #192]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20003078:	f7fe fe32 	bl	20001ce0 <HAL_GetTick>
2000307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000307e:	e008      	b.n	20003092 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20003080:	f7fe fe2e 	bl	20001ce0 <HAL_GetTick>
20003084:	4602      	mov	r2, r0
20003086:	693b      	ldr	r3, [r7, #16]
20003088:	1ad3      	subs	r3, r2, r3
2000308a:	2b02      	cmp	r3, #2
2000308c:	d901      	bls.n	20003092 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
2000308e:	2303      	movs	r3, #3
20003090:	e087      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20003092:	4b28      	ldr	r3, [pc, #160]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003094:	681b      	ldr	r3, [r3, #0]
20003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000309a:	2b00      	cmp	r3, #0
2000309c:	d1f0      	bne.n	20003080 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2000309e:	687b      	ldr	r3, [r7, #4]
200030a0:	69da      	ldr	r2, [r3, #28]
200030a2:	687b      	ldr	r3, [r7, #4]
200030a4:	6a1b      	ldr	r3, [r3, #32]
200030a6:	431a      	orrs	r2, r3
200030a8:	687b      	ldr	r3, [r7, #4]
200030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200030ac:	019b      	lsls	r3, r3, #6
200030ae:	431a      	orrs	r2, r3
200030b0:	687b      	ldr	r3, [r7, #4]
200030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200030b4:	085b      	lsrs	r3, r3, #1
200030b6:	3b01      	subs	r3, #1
200030b8:	041b      	lsls	r3, r3, #16
200030ba:	431a      	orrs	r2, r3
200030bc:	687b      	ldr	r3, [r7, #4]
200030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200030c0:	061b      	lsls	r3, r3, #24
200030c2:	4313      	orrs	r3, r2
200030c4:	4a1b      	ldr	r2, [pc, #108]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
200030c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
200030ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200030cc:	4b19      	ldr	r3, [pc, #100]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
200030ce:	681b      	ldr	r3, [r3, #0]
200030d0:	4a18      	ldr	r2, [pc, #96]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
200030d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
200030d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200030d8:	f7fe fe02 	bl	20001ce0 <HAL_GetTick>
200030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200030de:	e008      	b.n	200030f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200030e0:	f7fe fdfe 	bl	20001ce0 <HAL_GetTick>
200030e4:	4602      	mov	r2, r0
200030e6:	693b      	ldr	r3, [r7, #16]
200030e8:	1ad3      	subs	r3, r2, r3
200030ea:	2b02      	cmp	r3, #2
200030ec:	d901      	bls.n	200030f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
200030ee:	2303      	movs	r3, #3
200030f0:	e057      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200030f2:	4b10      	ldr	r3, [pc, #64]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
200030f4:	681b      	ldr	r3, [r3, #0]
200030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200030fa:	2b00      	cmp	r3, #0
200030fc:	d0f0      	beq.n	200030e0 <HAL_RCC_OscConfig+0x478>
200030fe:	e04f      	b.n	200031a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20003100:	4b0c      	ldr	r3, [pc, #48]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003102:	681b      	ldr	r3, [r3, #0]
20003104:	4a0b      	ldr	r2, [pc, #44]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2000310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000310c:	f7fe fde8 	bl	20001ce0 <HAL_GetTick>
20003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20003112:	e008      	b.n	20003126 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20003114:	f7fe fde4 	bl	20001ce0 <HAL_GetTick>
20003118:	4602      	mov	r2, r0
2000311a:	693b      	ldr	r3, [r7, #16]
2000311c:	1ad3      	subs	r3, r2, r3
2000311e:	2b02      	cmp	r3, #2
20003120:	d901      	bls.n	20003126 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
20003122:	2303      	movs	r3, #3
20003124:	e03d      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20003126:	4b03      	ldr	r3, [pc, #12]	@ (20003134 <HAL_RCC_OscConfig+0x4cc>)
20003128:	681b      	ldr	r3, [r3, #0]
2000312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000312e:	2b00      	cmp	r3, #0
20003130:	d1f0      	bne.n	20003114 <HAL_RCC_OscConfig+0x4ac>
20003132:	e035      	b.n	200031a0 <HAL_RCC_OscConfig+0x538>
20003134:	40023800 	.word	0x40023800
20003138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
2000313c:	4b1b      	ldr	r3, [pc, #108]	@ (200031ac <HAL_RCC_OscConfig+0x544>)
2000313e:	685b      	ldr	r3, [r3, #4]
20003140:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20003142:	687b      	ldr	r3, [r7, #4]
20003144:	699b      	ldr	r3, [r3, #24]
20003146:	2b01      	cmp	r3, #1
20003148:	d028      	beq.n	2000319c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000314a:	68fb      	ldr	r3, [r7, #12]
2000314c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20003150:	687b      	ldr	r3, [r7, #4]
20003152:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20003154:	429a      	cmp	r2, r3
20003156:	d121      	bne.n	2000319c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20003158:	68fb      	ldr	r3, [r7, #12]
2000315a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
2000315e:	687b      	ldr	r3, [r7, #4]
20003160:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20003162:	429a      	cmp	r2, r3
20003164:	d11a      	bne.n	2000319c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20003166:	68fa      	ldr	r2, [r7, #12]
20003168:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
2000316c:	4013      	ands	r3, r2
2000316e:	687a      	ldr	r2, [r7, #4]
20003170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
20003172:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20003174:	4293      	cmp	r3, r2
20003176:	d111      	bne.n	2000319c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20003178:	68fb      	ldr	r3, [r7, #12]
2000317a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
2000317e:	687b      	ldr	r3, [r7, #4]
20003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20003182:	085b      	lsrs	r3, r3, #1
20003184:	3b01      	subs	r3, #1
20003186:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20003188:	429a      	cmp	r2, r3
2000318a:	d107      	bne.n	2000319c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
2000318c:	68fb      	ldr	r3, [r7, #12]
2000318e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
20003192:	687b      	ldr	r3, [r7, #4]
20003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20003196:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20003198:	429a      	cmp	r2, r3
2000319a:	d001      	beq.n	200031a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
2000319c:	2301      	movs	r3, #1
2000319e:	e000      	b.n	200031a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
200031a0:	2300      	movs	r3, #0
}
200031a2:	4618      	mov	r0, r3
200031a4:	3718      	adds	r7, #24
200031a6:	46bd      	mov	sp, r7
200031a8:	bd80      	pop	{r7, pc}
200031aa:	bf00      	nop
200031ac:	40023800 	.word	0x40023800

200031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
200031b0:	b580      	push	{r7, lr}
200031b2:	b084      	sub	sp, #16
200031b4:	af00      	add	r7, sp, #0
200031b6:	6078      	str	r0, [r7, #4]
200031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
200031ba:	2300      	movs	r3, #0
200031bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
200031be:	687b      	ldr	r3, [r7, #4]
200031c0:	2b00      	cmp	r3, #0
200031c2:	d101      	bne.n	200031c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
200031c4:	2301      	movs	r3, #1
200031c6:	e0d0      	b.n	2000336a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
200031c8:	4b6a      	ldr	r3, [pc, #424]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200031ca:	681b      	ldr	r3, [r3, #0]
200031cc:	f003 030f 	and.w	r3, r3, #15
200031d0:	683a      	ldr	r2, [r7, #0]
200031d2:	429a      	cmp	r2, r3
200031d4:	d910      	bls.n	200031f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200031d6:	4b67      	ldr	r3, [pc, #412]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200031d8:	681b      	ldr	r3, [r3, #0]
200031da:	f023 020f 	bic.w	r2, r3, #15
200031de:	4965      	ldr	r1, [pc, #404]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200031e0:	683b      	ldr	r3, [r7, #0]
200031e2:	4313      	orrs	r3, r2
200031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
200031e6:	4b63      	ldr	r3, [pc, #396]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200031e8:	681b      	ldr	r3, [r3, #0]
200031ea:	f003 030f 	and.w	r3, r3, #15
200031ee:	683a      	ldr	r2, [r7, #0]
200031f0:	429a      	cmp	r2, r3
200031f2:	d001      	beq.n	200031f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
200031f4:	2301      	movs	r3, #1
200031f6:	e0b8      	b.n	2000336a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200031f8:	687b      	ldr	r3, [r7, #4]
200031fa:	681b      	ldr	r3, [r3, #0]
200031fc:	f003 0302 	and.w	r3, r3, #2
20003200:	2b00      	cmp	r3, #0
20003202:	d020      	beq.n	20003246 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20003204:	687b      	ldr	r3, [r7, #4]
20003206:	681b      	ldr	r3, [r3, #0]
20003208:	f003 0304 	and.w	r3, r3, #4
2000320c:	2b00      	cmp	r3, #0
2000320e:	d005      	beq.n	2000321c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20003210:	4b59      	ldr	r3, [pc, #356]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003212:	689b      	ldr	r3, [r3, #8]
20003214:	4a58      	ldr	r2, [pc, #352]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003216:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
2000321a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000321c:	687b      	ldr	r3, [r7, #4]
2000321e:	681b      	ldr	r3, [r3, #0]
20003220:	f003 0308 	and.w	r3, r3, #8
20003224:	2b00      	cmp	r3, #0
20003226:	d005      	beq.n	20003234 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20003228:	4b53      	ldr	r3, [pc, #332]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
2000322a:	689b      	ldr	r3, [r3, #8]
2000322c:	4a52      	ldr	r2, [pc, #328]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
2000322e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
20003232:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20003234:	4b50      	ldr	r3, [pc, #320]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003236:	689b      	ldr	r3, [r3, #8]
20003238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
2000323c:	687b      	ldr	r3, [r7, #4]
2000323e:	689b      	ldr	r3, [r3, #8]
20003240:	494d      	ldr	r1, [pc, #308]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003242:	4313      	orrs	r3, r2
20003244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20003246:	687b      	ldr	r3, [r7, #4]
20003248:	681b      	ldr	r3, [r3, #0]
2000324a:	f003 0301 	and.w	r3, r3, #1
2000324e:	2b00      	cmp	r3, #0
20003250:	d040      	beq.n	200032d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20003252:	687b      	ldr	r3, [r7, #4]
20003254:	685b      	ldr	r3, [r3, #4]
20003256:	2b01      	cmp	r3, #1
20003258:	d107      	bne.n	2000326a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000325a:	4b47      	ldr	r3, [pc, #284]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
2000325c:	681b      	ldr	r3, [r3, #0]
2000325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20003262:	2b00      	cmp	r3, #0
20003264:	d115      	bne.n	20003292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20003266:	2301      	movs	r3, #1
20003268:	e07f      	b.n	2000336a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2000326a:	687b      	ldr	r3, [r7, #4]
2000326c:	685b      	ldr	r3, [r3, #4]
2000326e:	2b02      	cmp	r3, #2
20003270:	d107      	bne.n	20003282 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20003272:	4b41      	ldr	r3, [pc, #260]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003274:	681b      	ldr	r3, [r3, #0]
20003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000327a:	2b00      	cmp	r3, #0
2000327c:	d109      	bne.n	20003292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
2000327e:	2301      	movs	r3, #1
20003280:	e073      	b.n	2000336a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20003282:	4b3d      	ldr	r3, [pc, #244]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003284:	681b      	ldr	r3, [r3, #0]
20003286:	f003 0302 	and.w	r3, r3, #2
2000328a:	2b00      	cmp	r3, #0
2000328c:	d101      	bne.n	20003292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
2000328e:	2301      	movs	r3, #1
20003290:	e06b      	b.n	2000336a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20003292:	4b39      	ldr	r3, [pc, #228]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003294:	689b      	ldr	r3, [r3, #8]
20003296:	f023 0203 	bic.w	r2, r3, #3
2000329a:	687b      	ldr	r3, [r7, #4]
2000329c:	685b      	ldr	r3, [r3, #4]
2000329e:	4936      	ldr	r1, [pc, #216]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
200032a0:	4313      	orrs	r3, r2
200032a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200032a4:	f7fe fd1c 	bl	20001ce0 <HAL_GetTick>
200032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200032aa:	e00a      	b.n	200032c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
200032ac:	f7fe fd18 	bl	20001ce0 <HAL_GetTick>
200032b0:	4602      	mov	r2, r0
200032b2:	68fb      	ldr	r3, [r7, #12]
200032b4:	1ad3      	subs	r3, r2, r3
200032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
200032ba:	4293      	cmp	r3, r2
200032bc:	d901      	bls.n	200032c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
200032be:	2303      	movs	r3, #3
200032c0:	e053      	b.n	2000336a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200032c2:	4b2d      	ldr	r3, [pc, #180]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
200032c4:	689b      	ldr	r3, [r3, #8]
200032c6:	f003 020c 	and.w	r2, r3, #12
200032ca:	687b      	ldr	r3, [r7, #4]
200032cc:	685b      	ldr	r3, [r3, #4]
200032ce:	009b      	lsls	r3, r3, #2
200032d0:	429a      	cmp	r2, r3
200032d2:	d1eb      	bne.n	200032ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
200032d4:	4b27      	ldr	r3, [pc, #156]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200032d6:	681b      	ldr	r3, [r3, #0]
200032d8:	f003 030f 	and.w	r3, r3, #15
200032dc:	683a      	ldr	r2, [r7, #0]
200032de:	429a      	cmp	r2, r3
200032e0:	d210      	bcs.n	20003304 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200032e2:	4b24      	ldr	r3, [pc, #144]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200032e4:	681b      	ldr	r3, [r3, #0]
200032e6:	f023 020f 	bic.w	r2, r3, #15
200032ea:	4922      	ldr	r1, [pc, #136]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200032ec:	683b      	ldr	r3, [r7, #0]
200032ee:	4313      	orrs	r3, r2
200032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
200032f2:	4b20      	ldr	r3, [pc, #128]	@ (20003374 <HAL_RCC_ClockConfig+0x1c4>)
200032f4:	681b      	ldr	r3, [r3, #0]
200032f6:	f003 030f 	and.w	r3, r3, #15
200032fa:	683a      	ldr	r2, [r7, #0]
200032fc:	429a      	cmp	r2, r3
200032fe:	d001      	beq.n	20003304 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
20003300:	2301      	movs	r3, #1
20003302:	e032      	b.n	2000336a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20003304:	687b      	ldr	r3, [r7, #4]
20003306:	681b      	ldr	r3, [r3, #0]
20003308:	f003 0304 	and.w	r3, r3, #4
2000330c:	2b00      	cmp	r3, #0
2000330e:	d008      	beq.n	20003322 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20003310:	4b19      	ldr	r3, [pc, #100]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003312:	689b      	ldr	r3, [r3, #8]
20003314:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
20003318:	687b      	ldr	r3, [r7, #4]
2000331a:	68db      	ldr	r3, [r3, #12]
2000331c:	4916      	ldr	r1, [pc, #88]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
2000331e:	4313      	orrs	r3, r2
20003320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20003322:	687b      	ldr	r3, [r7, #4]
20003324:	681b      	ldr	r3, [r3, #0]
20003326:	f003 0308 	and.w	r3, r3, #8
2000332a:	2b00      	cmp	r3, #0
2000332c:	d009      	beq.n	20003342 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
2000332e:	4b12      	ldr	r3, [pc, #72]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
20003330:	689b      	ldr	r3, [r3, #8]
20003332:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
20003336:	687b      	ldr	r3, [r7, #4]
20003338:	691b      	ldr	r3, [r3, #16]
2000333a:	00db      	lsls	r3, r3, #3
2000333c:	490e      	ldr	r1, [pc, #56]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
2000333e:	4313      	orrs	r3, r2
20003340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
20003342:	f000 f821 	bl	20003388 <HAL_RCC_GetSysClockFreq>
20003346:	4602      	mov	r2, r0
20003348:	4b0b      	ldr	r3, [pc, #44]	@ (20003378 <HAL_RCC_ClockConfig+0x1c8>)
2000334a:	689b      	ldr	r3, [r3, #8]
2000334c:	091b      	lsrs	r3, r3, #4
2000334e:	f003 030f 	and.w	r3, r3, #15
20003352:	490a      	ldr	r1, [pc, #40]	@ (2000337c <HAL_RCC_ClockConfig+0x1cc>)
20003354:	5ccb      	ldrb	r3, [r1, r3]
20003356:	fa22 f303 	lsr.w	r3, r2, r3
2000335a:	4a09      	ldr	r2, [pc, #36]	@ (20003380 <HAL_RCC_ClockConfig+0x1d0>)
2000335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
2000335e:	4b09      	ldr	r3, [pc, #36]	@ (20003384 <HAL_RCC_ClockConfig+0x1d4>)
20003360:	681b      	ldr	r3, [r3, #0]
20003362:	4618      	mov	r0, r3
20003364:	f7fe fc78 	bl	20001c58 <HAL_InitTick>

  return HAL_OK;
20003368:	2300      	movs	r3, #0
}
2000336a:	4618      	mov	r0, r3
2000336c:	3710      	adds	r7, #16
2000336e:	46bd      	mov	sp, r7
20003370:	bd80      	pop	{r7, pc}
20003372:	bf00      	nop
20003374:	40023c00 	.word	0x40023c00
20003378:	40023800 	.word	0x40023800
2000337c:	20004e88 	.word	0x20004e88
20003380:	20004eb0 	.word	0x20004eb0
20003384:	20004eb4 	.word	0x20004eb4

20003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2000338c:	b094      	sub	sp, #80	@ 0x50
2000338e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
20003390:	2300      	movs	r3, #0
20003392:	647b      	str	r3, [r7, #68]	@ 0x44
20003394:	2300      	movs	r3, #0
20003396:	64fb      	str	r3, [r7, #76]	@ 0x4c
20003398:	2300      	movs	r3, #0
2000339a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
2000339c:	2300      	movs	r3, #0
2000339e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
200033a0:	4b79      	ldr	r3, [pc, #484]	@ (20003588 <HAL_RCC_GetSysClockFreq+0x200>)
200033a2:	689b      	ldr	r3, [r3, #8]
200033a4:	f003 030c 	and.w	r3, r3, #12
200033a8:	2b08      	cmp	r3, #8
200033aa:	d00d      	beq.n	200033c8 <HAL_RCC_GetSysClockFreq+0x40>
200033ac:	2b08      	cmp	r3, #8
200033ae:	f200 80e1 	bhi.w	20003574 <HAL_RCC_GetSysClockFreq+0x1ec>
200033b2:	2b00      	cmp	r3, #0
200033b4:	d002      	beq.n	200033bc <HAL_RCC_GetSysClockFreq+0x34>
200033b6:	2b04      	cmp	r3, #4
200033b8:	d003      	beq.n	200033c2 <HAL_RCC_GetSysClockFreq+0x3a>
200033ba:	e0db      	b.n	20003574 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
200033bc:	4b73      	ldr	r3, [pc, #460]	@ (2000358c <HAL_RCC_GetSysClockFreq+0x204>)
200033be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
200033c0:	e0db      	b.n	2000357a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
200033c2:	4b73      	ldr	r3, [pc, #460]	@ (20003590 <HAL_RCC_GetSysClockFreq+0x208>)
200033c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
200033c6:	e0d8      	b.n	2000357a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200033c8:	4b6f      	ldr	r3, [pc, #444]	@ (20003588 <HAL_RCC_GetSysClockFreq+0x200>)
200033ca:	685b      	ldr	r3, [r3, #4]
200033cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200033d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
200033d2:	4b6d      	ldr	r3, [pc, #436]	@ (20003588 <HAL_RCC_GetSysClockFreq+0x200>)
200033d4:	685b      	ldr	r3, [r3, #4]
200033d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200033da:	2b00      	cmp	r3, #0
200033dc:	d063      	beq.n	200034a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200033de:	4b6a      	ldr	r3, [pc, #424]	@ (20003588 <HAL_RCC_GetSysClockFreq+0x200>)
200033e0:	685b      	ldr	r3, [r3, #4]
200033e2:	099b      	lsrs	r3, r3, #6
200033e4:	2200      	movs	r2, #0
200033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
200033e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
200033ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
200033f0:	633b      	str	r3, [r7, #48]	@ 0x30
200033f2:	2300      	movs	r3, #0
200033f4:	637b      	str	r3, [r7, #52]	@ 0x34
200033f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
200033fa:	4622      	mov	r2, r4
200033fc:	462b      	mov	r3, r5
200033fe:	f04f 0000 	mov.w	r0, #0
20003402:	f04f 0100 	mov.w	r1, #0
20003406:	0159      	lsls	r1, r3, #5
20003408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
2000340c:	0150      	lsls	r0, r2, #5
2000340e:	4602      	mov	r2, r0
20003410:	460b      	mov	r3, r1
20003412:	4621      	mov	r1, r4
20003414:	1a51      	subs	r1, r2, r1
20003416:	6139      	str	r1, [r7, #16]
20003418:	4629      	mov	r1, r5
2000341a:	eb63 0301 	sbc.w	r3, r3, r1
2000341e:	617b      	str	r3, [r7, #20]
20003420:	f04f 0200 	mov.w	r2, #0
20003424:	f04f 0300 	mov.w	r3, #0
20003428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
2000342c:	4659      	mov	r1, fp
2000342e:	018b      	lsls	r3, r1, #6
20003430:	4651      	mov	r1, sl
20003432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20003436:	4651      	mov	r1, sl
20003438:	018a      	lsls	r2, r1, #6
2000343a:	4651      	mov	r1, sl
2000343c:	ebb2 0801 	subs.w	r8, r2, r1
20003440:	4659      	mov	r1, fp
20003442:	eb63 0901 	sbc.w	r9, r3, r1
20003446:	f04f 0200 	mov.w	r2, #0
2000344a:	f04f 0300 	mov.w	r3, #0
2000344e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20003452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20003456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
2000345a:	4690      	mov	r8, r2
2000345c:	4699      	mov	r9, r3
2000345e:	4623      	mov	r3, r4
20003460:	eb18 0303 	adds.w	r3, r8, r3
20003464:	60bb      	str	r3, [r7, #8]
20003466:	462b      	mov	r3, r5
20003468:	eb49 0303 	adc.w	r3, r9, r3
2000346c:	60fb      	str	r3, [r7, #12]
2000346e:	f04f 0200 	mov.w	r2, #0
20003472:	f04f 0300 	mov.w	r3, #0
20003476:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
2000347a:	4629      	mov	r1, r5
2000347c:	024b      	lsls	r3, r1, #9
2000347e:	4621      	mov	r1, r4
20003480:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20003484:	4621      	mov	r1, r4
20003486:	024a      	lsls	r2, r1, #9
20003488:	4610      	mov	r0, r2
2000348a:	4619      	mov	r1, r3
2000348c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000348e:	2200      	movs	r2, #0
20003490:	62bb      	str	r3, [r7, #40]	@ 0x28
20003492:	62fa      	str	r2, [r7, #44]	@ 0x2c
20003494:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
20003498:	f7fc feb6 	bl	20000208 <__aeabi_uldivmod>
2000349c:	4602      	mov	r2, r0
2000349e:	460b      	mov	r3, r1
200034a0:	4613      	mov	r3, r2
200034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
200034a4:	e058      	b.n	20003558 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200034a6:	4b38      	ldr	r3, [pc, #224]	@ (20003588 <HAL_RCC_GetSysClockFreq+0x200>)
200034a8:	685b      	ldr	r3, [r3, #4]
200034aa:	099b      	lsrs	r3, r3, #6
200034ac:	2200      	movs	r2, #0
200034ae:	4618      	mov	r0, r3
200034b0:	4611      	mov	r1, r2
200034b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
200034b6:	623b      	str	r3, [r7, #32]
200034b8:	2300      	movs	r3, #0
200034ba:	627b      	str	r3, [r7, #36]	@ 0x24
200034bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
200034c0:	4642      	mov	r2, r8
200034c2:	464b      	mov	r3, r9
200034c4:	f04f 0000 	mov.w	r0, #0
200034c8:	f04f 0100 	mov.w	r1, #0
200034cc:	0159      	lsls	r1, r3, #5
200034ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
200034d2:	0150      	lsls	r0, r2, #5
200034d4:	4602      	mov	r2, r0
200034d6:	460b      	mov	r3, r1
200034d8:	4641      	mov	r1, r8
200034da:	ebb2 0a01 	subs.w	sl, r2, r1
200034de:	4649      	mov	r1, r9
200034e0:	eb63 0b01 	sbc.w	fp, r3, r1
200034e4:	f04f 0200 	mov.w	r2, #0
200034e8:	f04f 0300 	mov.w	r3, #0
200034ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
200034f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
200034f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
200034f8:	ebb2 040a 	subs.w	r4, r2, sl
200034fc:	eb63 050b 	sbc.w	r5, r3, fp
20003500:	f04f 0200 	mov.w	r2, #0
20003504:	f04f 0300 	mov.w	r3, #0
20003508:	00eb      	lsls	r3, r5, #3
2000350a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
2000350e:	00e2      	lsls	r2, r4, #3
20003510:	4614      	mov	r4, r2
20003512:	461d      	mov	r5, r3
20003514:	4643      	mov	r3, r8
20003516:	18e3      	adds	r3, r4, r3
20003518:	603b      	str	r3, [r7, #0]
2000351a:	464b      	mov	r3, r9
2000351c:	eb45 0303 	adc.w	r3, r5, r3
20003520:	607b      	str	r3, [r7, #4]
20003522:	f04f 0200 	mov.w	r2, #0
20003526:	f04f 0300 	mov.w	r3, #0
2000352a:	e9d7 4500 	ldrd	r4, r5, [r7]
2000352e:	4629      	mov	r1, r5
20003530:	028b      	lsls	r3, r1, #10
20003532:	4621      	mov	r1, r4
20003534:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20003538:	4621      	mov	r1, r4
2000353a:	028a      	lsls	r2, r1, #10
2000353c:	4610      	mov	r0, r2
2000353e:	4619      	mov	r1, r3
20003540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003542:	2200      	movs	r2, #0
20003544:	61bb      	str	r3, [r7, #24]
20003546:	61fa      	str	r2, [r7, #28]
20003548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
2000354c:	f7fc fe5c 	bl	20000208 <__aeabi_uldivmod>
20003550:	4602      	mov	r2, r0
20003552:	460b      	mov	r3, r1
20003554:	4613      	mov	r3, r2
20003556:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
20003558:	4b0b      	ldr	r3, [pc, #44]	@ (20003588 <HAL_RCC_GetSysClockFreq+0x200>)
2000355a:	685b      	ldr	r3, [r3, #4]
2000355c:	0c1b      	lsrs	r3, r3, #16
2000355e:	f003 0303 	and.w	r3, r3, #3
20003562:	3301      	adds	r3, #1
20003564:	005b      	lsls	r3, r3, #1
20003566:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
20003568:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
2000356a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000356c:	fbb2 f3f3 	udiv	r3, r2, r3
20003570:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20003572:	e002      	b.n	2000357a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20003574:	4b05      	ldr	r3, [pc, #20]	@ (2000358c <HAL_RCC_GetSysClockFreq+0x204>)
20003576:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20003578:	bf00      	nop
    }
  }
  return sysclockfreq;
2000357a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
2000357c:	4618      	mov	r0, r3
2000357e:	3750      	adds	r7, #80	@ 0x50
20003580:	46bd      	mov	sp, r7
20003582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20003586:	bf00      	nop
20003588:	40023800 	.word	0x40023800
2000358c:	00f42400 	.word	0x00f42400
20003590:	007a1200 	.word	0x007a1200

20003594 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20003594:	b480      	push	{r7}
20003596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20003598:	4b03      	ldr	r3, [pc, #12]	@ (200035a8 <HAL_RCC_GetHCLKFreq+0x14>)
2000359a:	681b      	ldr	r3, [r3, #0]
}
2000359c:	4618      	mov	r0, r3
2000359e:	46bd      	mov	sp, r7
200035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200035a4:	4770      	bx	lr
200035a6:	bf00      	nop
200035a8:	20004eb0 	.word	0x20004eb0

200035ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
200035ac:	b580      	push	{r7, lr}
200035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
200035b0:	f7ff fff0 	bl	20003594 <HAL_RCC_GetHCLKFreq>
200035b4:	4602      	mov	r2, r0
200035b6:	4b05      	ldr	r3, [pc, #20]	@ (200035cc <HAL_RCC_GetPCLK1Freq+0x20>)
200035b8:	689b      	ldr	r3, [r3, #8]
200035ba:	0a9b      	lsrs	r3, r3, #10
200035bc:	f003 0307 	and.w	r3, r3, #7
200035c0:	4903      	ldr	r1, [pc, #12]	@ (200035d0 <HAL_RCC_GetPCLK1Freq+0x24>)
200035c2:	5ccb      	ldrb	r3, [r1, r3]
200035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
200035c8:	4618      	mov	r0, r3
200035ca:	bd80      	pop	{r7, pc}
200035cc:	40023800 	.word	0x40023800
200035d0:	20004e98 	.word	0x20004e98

200035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
200035d4:	b580      	push	{r7, lr}
200035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
200035d8:	f7ff ffdc 	bl	20003594 <HAL_RCC_GetHCLKFreq>
200035dc:	4602      	mov	r2, r0
200035de:	4b05      	ldr	r3, [pc, #20]	@ (200035f4 <HAL_RCC_GetPCLK2Freq+0x20>)
200035e0:	689b      	ldr	r3, [r3, #8]
200035e2:	0b5b      	lsrs	r3, r3, #13
200035e4:	f003 0307 	and.w	r3, r3, #7
200035e8:	4903      	ldr	r1, [pc, #12]	@ (200035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
200035ea:	5ccb      	ldrb	r3, [r1, r3]
200035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
200035f0:	4618      	mov	r0, r3
200035f2:	bd80      	pop	{r7, pc}
200035f4:	40023800 	.word	0x40023800
200035f8:	20004e98 	.word	0x20004e98

200035fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
200035fc:	b580      	push	{r7, lr}
200035fe:	b088      	sub	sp, #32
20003600:	af00      	add	r7, sp, #0
20003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
20003604:	2300      	movs	r3, #0
20003606:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
20003608:	2300      	movs	r3, #0
2000360a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
2000360c:	2300      	movs	r3, #0
2000360e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
20003610:	2300      	movs	r3, #0
20003612:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
20003614:	2300      	movs	r3, #0
20003616:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
20003618:	687b      	ldr	r3, [r7, #4]
2000361a:	681b      	ldr	r3, [r3, #0]
2000361c:	f003 0301 	and.w	r3, r3, #1
20003620:	2b00      	cmp	r3, #0
20003622:	d012      	beq.n	2000364a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20003624:	4b69      	ldr	r3, [pc, #420]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003626:	689b      	ldr	r3, [r3, #8]
20003628:	4a68      	ldr	r2, [pc, #416]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000362a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
2000362e:	6093      	str	r3, [r2, #8]
20003630:	4b66      	ldr	r3, [pc, #408]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003632:	689a      	ldr	r2, [r3, #8]
20003634:	687b      	ldr	r3, [r7, #4]
20003636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20003638:	4964      	ldr	r1, [pc, #400]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000363a:	4313      	orrs	r3, r2
2000363c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
2000363e:	687b      	ldr	r3, [r7, #4]
20003640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20003642:	2b00      	cmp	r3, #0
20003644:	d101      	bne.n	2000364a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
20003646:	2301      	movs	r3, #1
20003648:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
2000364a:	687b      	ldr	r3, [r7, #4]
2000364c:	681b      	ldr	r3, [r3, #0]
2000364e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20003652:	2b00      	cmp	r3, #0
20003654:	d017      	beq.n	20003686 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
20003656:	4b5d      	ldr	r3, [pc, #372]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
2000365c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20003660:	687b      	ldr	r3, [r7, #4]
20003662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20003664:	4959      	ldr	r1, [pc, #356]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003666:	4313      	orrs	r3, r2
20003668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
2000366c:	687b      	ldr	r3, [r7, #4]
2000366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20003670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20003674:	d101      	bne.n	2000367a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
20003676:	2301      	movs	r3, #1
20003678:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
2000367a:	687b      	ldr	r3, [r7, #4]
2000367c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000367e:	2b00      	cmp	r3, #0
20003680:	d101      	bne.n	20003686 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
20003682:	2301      	movs	r3, #1
20003684:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
20003686:	687b      	ldr	r3, [r7, #4]
20003688:	681b      	ldr	r3, [r3, #0]
2000368a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2000368e:	2b00      	cmp	r3, #0
20003690:	d017      	beq.n	200036c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
20003692:	4b4e      	ldr	r3, [pc, #312]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20003698:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
2000369c:	687b      	ldr	r3, [r7, #4]
2000369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200036a0:	494a      	ldr	r1, [pc, #296]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200036a2:	4313      	orrs	r3, r2
200036a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
200036a8:	687b      	ldr	r3, [r7, #4]
200036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200036ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200036b0:	d101      	bne.n	200036b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
200036b2:	2301      	movs	r3, #1
200036b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
200036b6:	687b      	ldr	r3, [r7, #4]
200036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200036ba:	2b00      	cmp	r3, #0
200036bc:	d101      	bne.n	200036c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
200036be:	2301      	movs	r3, #1
200036c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
200036c2:	687b      	ldr	r3, [r7, #4]
200036c4:	681b      	ldr	r3, [r3, #0]
200036c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
200036ca:	2b00      	cmp	r3, #0
200036cc:	d001      	beq.n	200036d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
200036ce:	2301      	movs	r3, #1
200036d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
200036d2:	687b      	ldr	r3, [r7, #4]
200036d4:	681b      	ldr	r3, [r3, #0]
200036d6:	f003 0320 	and.w	r3, r3, #32
200036da:	2b00      	cmp	r3, #0
200036dc:	f000 808b 	beq.w	200037f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
200036e0:	4b3a      	ldr	r3, [pc, #232]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200036e4:	4a39      	ldr	r2, [pc, #228]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200036e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200036ea:	6413      	str	r3, [r2, #64]	@ 0x40
200036ec:	4b37      	ldr	r3, [pc, #220]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200036f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200036f4:	60bb      	str	r3, [r7, #8]
200036f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
200036f8:	4b35      	ldr	r3, [pc, #212]	@ (200037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
200036fa:	681b      	ldr	r3, [r3, #0]
200036fc:	4a34      	ldr	r2, [pc, #208]	@ (200037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
200036fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20003702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20003704:	f7fe faec 	bl	20001ce0 <HAL_GetTick>
20003708:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000370a:	e008      	b.n	2000371e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000370c:	f7fe fae8 	bl	20001ce0 <HAL_GetTick>
20003710:	4602      	mov	r2, r0
20003712:	697b      	ldr	r3, [r7, #20]
20003714:	1ad3      	subs	r3, r2, r3
20003716:	2b64      	cmp	r3, #100	@ 0x64
20003718:	d901      	bls.n	2000371e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
2000371a:	2303      	movs	r3, #3
2000371c:	e357      	b.n	20003dce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000371e:	4b2c      	ldr	r3, [pc, #176]	@ (200037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20003720:	681b      	ldr	r3, [r3, #0]
20003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20003726:	2b00      	cmp	r3, #0
20003728:	d0f0      	beq.n	2000370c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2000372a:	4b28      	ldr	r3, [pc, #160]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000372e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20003732:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20003734:	693b      	ldr	r3, [r7, #16]
20003736:	2b00      	cmp	r3, #0
20003738:	d035      	beq.n	200037a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
2000373a:	687b      	ldr	r3, [r7, #4]
2000373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000373e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20003742:	693a      	ldr	r2, [r7, #16]
20003744:	429a      	cmp	r2, r3
20003746:	d02e      	beq.n	200037a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20003748:	4b20      	ldr	r3, [pc, #128]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000374c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20003750:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
20003752:	4b1e      	ldr	r3, [pc, #120]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20003756:	4a1d      	ldr	r2, [pc, #116]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000375c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
2000375e:	4b1b      	ldr	r3, [pc, #108]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20003762:	4a1a      	ldr	r2, [pc, #104]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20003768:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
2000376a:	4a18      	ldr	r2, [pc, #96]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000376c:	693b      	ldr	r3, [r7, #16]
2000376e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20003770:	4b16      	ldr	r3, [pc, #88]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20003774:	f003 0301 	and.w	r3, r3, #1
20003778:	2b01      	cmp	r3, #1
2000377a:	d114      	bne.n	200037a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000377c:	f7fe fab0 	bl	20001ce0 <HAL_GetTick>
20003780:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20003782:	e00a      	b.n	2000379a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20003784:	f7fe faac 	bl	20001ce0 <HAL_GetTick>
20003788:	4602      	mov	r2, r0
2000378a:	697b      	ldr	r3, [r7, #20]
2000378c:	1ad3      	subs	r3, r2, r3
2000378e:	f241 3288 	movw	r2, #5000	@ 0x1388
20003792:	4293      	cmp	r3, r2
20003794:	d901      	bls.n	2000379a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
20003796:	2303      	movs	r3, #3
20003798:	e319      	b.n	20003dce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000379a:	4b0c      	ldr	r3, [pc, #48]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000379e:	f003 0302 	and.w	r3, r3, #2
200037a2:	2b00      	cmp	r3, #0
200037a4:	d0ee      	beq.n	20003784 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
200037a6:	687b      	ldr	r3, [r7, #4]
200037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200037aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
200037ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200037b2:	d111      	bne.n	200037d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
200037b4:	4b05      	ldr	r3, [pc, #20]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200037b6:	689b      	ldr	r3, [r3, #8]
200037b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
200037bc:	687b      	ldr	r3, [r7, #4]
200037be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
200037c0:	4b04      	ldr	r3, [pc, #16]	@ (200037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
200037c2:	400b      	ands	r3, r1
200037c4:	4901      	ldr	r1, [pc, #4]	@ (200037cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200037c6:	4313      	orrs	r3, r2
200037c8:	608b      	str	r3, [r1, #8]
200037ca:	e00b      	b.n	200037e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
200037cc:	40023800 	.word	0x40023800
200037d0:	40007000 	.word	0x40007000
200037d4:	0ffffcff 	.word	0x0ffffcff
200037d8:	4baa      	ldr	r3, [pc, #680]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200037da:	689b      	ldr	r3, [r3, #8]
200037dc:	4aa9      	ldr	r2, [pc, #676]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200037de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
200037e2:	6093      	str	r3, [r2, #8]
200037e4:	4ba7      	ldr	r3, [pc, #668]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200037e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
200037e8:	687b      	ldr	r3, [r7, #4]
200037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
200037f0:	49a4      	ldr	r1, [pc, #656]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200037f2:	4313      	orrs	r3, r2
200037f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
200037f6:	687b      	ldr	r3, [r7, #4]
200037f8:	681b      	ldr	r3, [r3, #0]
200037fa:	f003 0310 	and.w	r3, r3, #16
200037fe:	2b00      	cmp	r3, #0
20003800:	d010      	beq.n	20003824 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
20003802:	4ba0      	ldr	r3, [pc, #640]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20003808:	4a9e      	ldr	r2, [pc, #632]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000380a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2000380e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
20003812:	4b9c      	ldr	r3, [pc, #624]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003814:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
20003818:	687b      	ldr	r3, [r7, #4]
2000381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000381c:	4999      	ldr	r1, [pc, #612]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000381e:	4313      	orrs	r3, r2
20003820:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
20003824:	687b      	ldr	r3, [r7, #4]
20003826:	681b      	ldr	r3, [r3, #0]
20003828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000382c:	2b00      	cmp	r3, #0
2000382e:	d00a      	beq.n	20003846 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
20003830:	4b94      	ldr	r3, [pc, #592]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003836:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
2000383a:	687b      	ldr	r3, [r7, #4]
2000383c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2000383e:	4991      	ldr	r1, [pc, #580]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003840:	4313      	orrs	r3, r2
20003842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
20003846:	687b      	ldr	r3, [r7, #4]
20003848:	681b      	ldr	r3, [r3, #0]
2000384a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000384e:	2b00      	cmp	r3, #0
20003850:	d00a      	beq.n	20003868 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
20003852:	4b8c      	ldr	r3, [pc, #560]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003858:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
2000385c:	687b      	ldr	r3, [r7, #4]
2000385e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20003860:	4988      	ldr	r1, [pc, #544]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003862:	4313      	orrs	r3, r2
20003864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
20003868:	687b      	ldr	r3, [r7, #4]
2000386a:	681b      	ldr	r3, [r3, #0]
2000386c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20003870:	2b00      	cmp	r3, #0
20003872:	d00a      	beq.n	2000388a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
20003874:	4b83      	ldr	r3, [pc, #524]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000387a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
2000387e:	687b      	ldr	r3, [r7, #4]
20003880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20003882:	4980      	ldr	r1, [pc, #512]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003884:	4313      	orrs	r3, r2
20003886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2000388a:	687b      	ldr	r3, [r7, #4]
2000388c:	681b      	ldr	r3, [r3, #0]
2000388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20003892:	2b00      	cmp	r3, #0
20003894:	d00a      	beq.n	200038ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
20003896:	4b7b      	ldr	r3, [pc, #492]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000389c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
200038a0:	687b      	ldr	r3, [r7, #4]
200038a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200038a4:	4977      	ldr	r1, [pc, #476]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200038a6:	4313      	orrs	r3, r2
200038a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
200038ac:	687b      	ldr	r3, [r7, #4]
200038ae:	681b      	ldr	r3, [r3, #0]
200038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200038b4:	2b00      	cmp	r3, #0
200038b6:	d00a      	beq.n	200038ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
200038b8:	4b72      	ldr	r3, [pc, #456]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200038be:	f023 0203 	bic.w	r2, r3, #3
200038c2:	687b      	ldr	r3, [r7, #4]
200038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200038c6:	496f      	ldr	r1, [pc, #444]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200038c8:	4313      	orrs	r3, r2
200038ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
200038ce:	687b      	ldr	r3, [r7, #4]
200038d0:	681b      	ldr	r3, [r3, #0]
200038d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200038d6:	2b00      	cmp	r3, #0
200038d8:	d00a      	beq.n	200038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
200038da:	4b6a      	ldr	r3, [pc, #424]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200038e0:	f023 020c 	bic.w	r2, r3, #12
200038e4:	687b      	ldr	r3, [r7, #4]
200038e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200038e8:	4966      	ldr	r1, [pc, #408]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200038ea:	4313      	orrs	r3, r2
200038ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
200038f0:	687b      	ldr	r3, [r7, #4]
200038f2:	681b      	ldr	r3, [r3, #0]
200038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200038f8:	2b00      	cmp	r3, #0
200038fa:	d00a      	beq.n	20003912 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
200038fc:	4b61      	ldr	r3, [pc, #388]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003902:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
20003906:	687b      	ldr	r3, [r7, #4]
20003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000390a:	495e      	ldr	r1, [pc, #376]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000390c:	4313      	orrs	r3, r2
2000390e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
20003912:	687b      	ldr	r3, [r7, #4]
20003914:	681b      	ldr	r3, [r3, #0]
20003916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2000391a:	2b00      	cmp	r3, #0
2000391c:	d00a      	beq.n	20003934 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
2000391e:	4b59      	ldr	r3, [pc, #356]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003924:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
20003928:	687b      	ldr	r3, [r7, #4]
2000392a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000392c:	4955      	ldr	r1, [pc, #340]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000392e:	4313      	orrs	r3, r2
20003930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
20003934:	687b      	ldr	r3, [r7, #4]
20003936:	681b      	ldr	r3, [r3, #0]
20003938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2000393c:	2b00      	cmp	r3, #0
2000393e:	d00a      	beq.n	20003956 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
20003940:	4b50      	ldr	r3, [pc, #320]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003946:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
2000394a:	687b      	ldr	r3, [r7, #4]
2000394c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000394e:	494d      	ldr	r1, [pc, #308]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003950:	4313      	orrs	r3, r2
20003952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
20003956:	687b      	ldr	r3, [r7, #4]
20003958:	681b      	ldr	r3, [r3, #0]
2000395a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
2000395e:	2b00      	cmp	r3, #0
20003960:	d00a      	beq.n	20003978 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
20003962:	4b48      	ldr	r3, [pc, #288]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003968:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
2000396c:	687b      	ldr	r3, [r7, #4]
2000396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20003970:	4944      	ldr	r1, [pc, #272]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003972:	4313      	orrs	r3, r2
20003974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
20003978:	687b      	ldr	r3, [r7, #4]
2000397a:	681b      	ldr	r3, [r3, #0]
2000397c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20003980:	2b00      	cmp	r3, #0
20003982:	d00a      	beq.n	2000399a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
20003984:	4b3f      	ldr	r3, [pc, #252]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000398a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
2000398e:	687b      	ldr	r3, [r7, #4]
20003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20003992:	493c      	ldr	r1, [pc, #240]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003994:	4313      	orrs	r3, r2
20003996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
2000399a:	687b      	ldr	r3, [r7, #4]
2000399c:	681b      	ldr	r3, [r3, #0]
2000399e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200039a2:	2b00      	cmp	r3, #0
200039a4:	d00a      	beq.n	200039bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
200039a6:	4b37      	ldr	r3, [pc, #220]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200039ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
200039b0:	687b      	ldr	r3, [r7, #4]
200039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200039b4:	4933      	ldr	r1, [pc, #204]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200039b6:	4313      	orrs	r3, r2
200039b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
200039bc:	687b      	ldr	r3, [r7, #4]
200039be:	681b      	ldr	r3, [r3, #0]
200039c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200039c4:	2b00      	cmp	r3, #0
200039c6:	d00a      	beq.n	200039de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
200039c8:	4b2e      	ldr	r3, [pc, #184]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200039ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
200039d2:	687b      	ldr	r3, [r7, #4]
200039d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
200039d6:	492b      	ldr	r1, [pc, #172]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200039d8:	4313      	orrs	r3, r2
200039da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
200039de:	687b      	ldr	r3, [r7, #4]
200039e0:	681b      	ldr	r3, [r3, #0]
200039e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200039e6:	2b00      	cmp	r3, #0
200039e8:	d011      	beq.n	20003a0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
200039ea:	4b26      	ldr	r3, [pc, #152]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200039f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
200039f4:	687b      	ldr	r3, [r7, #4]
200039f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200039f8:	4922      	ldr	r1, [pc, #136]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200039fa:	4313      	orrs	r3, r2
200039fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
20003a00:	687b      	ldr	r3, [r7, #4]
20003a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20003a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20003a08:	d101      	bne.n	20003a0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
20003a0a:	2301      	movs	r3, #1
20003a0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
20003a0e:	687b      	ldr	r3, [r7, #4]
20003a10:	681b      	ldr	r3, [r3, #0]
20003a12:	f003 0308 	and.w	r3, r3, #8
20003a16:	2b00      	cmp	r3, #0
20003a18:	d001      	beq.n	20003a1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
20003a1a:	2301      	movs	r3, #1
20003a1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
20003a1e:	687b      	ldr	r3, [r7, #4]
20003a20:	681b      	ldr	r3, [r3, #0]
20003a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20003a26:	2b00      	cmp	r3, #0
20003a28:	d00a      	beq.n	20003a40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
20003a2a:	4b16      	ldr	r3, [pc, #88]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003a30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
20003a34:	687b      	ldr	r3, [r7, #4]
20003a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20003a38:	4912      	ldr	r1, [pc, #72]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003a3a:	4313      	orrs	r3, r2
20003a3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
20003a40:	687b      	ldr	r3, [r7, #4]
20003a42:	681b      	ldr	r3, [r3, #0]
20003a44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
20003a48:	2b00      	cmp	r3, #0
20003a4a:	d00b      	beq.n	20003a64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
20003a4c:	4b0d      	ldr	r3, [pc, #52]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20003a52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
20003a56:	687b      	ldr	r3, [r7, #4]
20003a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20003a5c:	4909      	ldr	r1, [pc, #36]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003a5e:	4313      	orrs	r3, r2
20003a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20003a64:	69fb      	ldr	r3, [r7, #28]
20003a66:	2b01      	cmp	r3, #1
20003a68:	d006      	beq.n	20003a78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
20003a6a:	687b      	ldr	r3, [r7, #4]
20003a6c:	681b      	ldr	r3, [r3, #0]
20003a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20003a72:	2b00      	cmp	r3, #0
20003a74:	f000 80d9 	beq.w	20003c2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20003a78:	4b02      	ldr	r3, [pc, #8]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003a7a:	681b      	ldr	r3, [r3, #0]
20003a7c:	4a01      	ldr	r2, [pc, #4]	@ (20003a84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20003a7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
20003a82:	e001      	b.n	20003a88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
20003a84:	40023800 	.word	0x40023800
20003a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20003a8a:	f7fe f929 	bl	20001ce0 <HAL_GetTick>
20003a8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20003a90:	e008      	b.n	20003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20003a92:	f7fe f925 	bl	20001ce0 <HAL_GetTick>
20003a96:	4602      	mov	r2, r0
20003a98:	697b      	ldr	r3, [r7, #20]
20003a9a:	1ad3      	subs	r3, r2, r3
20003a9c:	2b64      	cmp	r3, #100	@ 0x64
20003a9e:	d901      	bls.n	20003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20003aa0:	2303      	movs	r3, #3
20003aa2:	e194      	b.n	20003dce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20003aa4:	4b6c      	ldr	r3, [pc, #432]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003aa6:	681b      	ldr	r3, [r3, #0]
20003aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20003aac:	2b00      	cmp	r3, #0
20003aae:	d1f0      	bne.n	20003a92 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
20003ab0:	687b      	ldr	r3, [r7, #4]
20003ab2:	681b      	ldr	r3, [r3, #0]
20003ab4:	f003 0301 	and.w	r3, r3, #1
20003ab8:	2b00      	cmp	r3, #0
20003aba:	d021      	beq.n	20003b00 <HAL_RCCEx_PeriphCLKConfig+0x504>
20003abc:	687b      	ldr	r3, [r7, #4]
20003abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20003ac0:	2b00      	cmp	r3, #0
20003ac2:	d11d      	bne.n	20003b00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20003ac4:	4b64      	ldr	r3, [pc, #400]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20003aca:	0c1b      	lsrs	r3, r3, #16
20003acc:	f003 0303 	and.w	r3, r3, #3
20003ad0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20003ad2:	4b61      	ldr	r3, [pc, #388]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20003ad8:	0e1b      	lsrs	r3, r3, #24
20003ada:	f003 030f 	and.w	r3, r3, #15
20003ade:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
20003ae0:	687b      	ldr	r3, [r7, #4]
20003ae2:	685b      	ldr	r3, [r3, #4]
20003ae4:	019a      	lsls	r2, r3, #6
20003ae6:	693b      	ldr	r3, [r7, #16]
20003ae8:	041b      	lsls	r3, r3, #16
20003aea:	431a      	orrs	r2, r3
20003aec:	68fb      	ldr	r3, [r7, #12]
20003aee:	061b      	lsls	r3, r3, #24
20003af0:	431a      	orrs	r2, r3
20003af2:	687b      	ldr	r3, [r7, #4]
20003af4:	689b      	ldr	r3, [r3, #8]
20003af6:	071b      	lsls	r3, r3, #28
20003af8:	4957      	ldr	r1, [pc, #348]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003afa:	4313      	orrs	r3, r2
20003afc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20003b00:	687b      	ldr	r3, [r7, #4]
20003b02:	681b      	ldr	r3, [r3, #0]
20003b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20003b08:	2b00      	cmp	r3, #0
20003b0a:	d004      	beq.n	20003b16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
20003b0c:	687b      	ldr	r3, [r7, #4]
20003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20003b10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20003b14:	d00a      	beq.n	20003b2c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20003b16:	687b      	ldr	r3, [r7, #4]
20003b18:	681b      	ldr	r3, [r3, #0]
20003b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20003b1e:	2b00      	cmp	r3, #0
20003b20:	d02e      	beq.n	20003b80 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20003b22:	687b      	ldr	r3, [r7, #4]
20003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20003b2a:	d129      	bne.n	20003b80 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20003b2c:	4b4a      	ldr	r3, [pc, #296]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20003b32:	0c1b      	lsrs	r3, r3, #16
20003b34:	f003 0303 	and.w	r3, r3, #3
20003b38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20003b3a:	4b47      	ldr	r3, [pc, #284]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20003b40:	0f1b      	lsrs	r3, r3, #28
20003b42:	f003 0307 	and.w	r3, r3, #7
20003b46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
20003b48:	687b      	ldr	r3, [r7, #4]
20003b4a:	685b      	ldr	r3, [r3, #4]
20003b4c:	019a      	lsls	r2, r3, #6
20003b4e:	693b      	ldr	r3, [r7, #16]
20003b50:	041b      	lsls	r3, r3, #16
20003b52:	431a      	orrs	r2, r3
20003b54:	687b      	ldr	r3, [r7, #4]
20003b56:	68db      	ldr	r3, [r3, #12]
20003b58:	061b      	lsls	r3, r3, #24
20003b5a:	431a      	orrs	r2, r3
20003b5c:	68fb      	ldr	r3, [r7, #12]
20003b5e:	071b      	lsls	r3, r3, #28
20003b60:	493d      	ldr	r1, [pc, #244]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003b62:	4313      	orrs	r3, r2
20003b64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
20003b68:	4b3b      	ldr	r3, [pc, #236]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20003b6e:	f023 021f 	bic.w	r2, r3, #31
20003b72:	687b      	ldr	r3, [r7, #4]
20003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003b76:	3b01      	subs	r3, #1
20003b78:	4937      	ldr	r1, [pc, #220]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003b7a:	4313      	orrs	r3, r2
20003b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20003b80:	687b      	ldr	r3, [r7, #4]
20003b82:	681b      	ldr	r3, [r3, #0]
20003b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20003b88:	2b00      	cmp	r3, #0
20003b8a:	d01d      	beq.n	20003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20003b8c:	4b32      	ldr	r3, [pc, #200]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20003b92:	0e1b      	lsrs	r3, r3, #24
20003b94:	f003 030f 	and.w	r3, r3, #15
20003b98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20003ba0:	0f1b      	lsrs	r3, r3, #28
20003ba2:	f003 0307 	and.w	r3, r3, #7
20003ba6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
20003ba8:	687b      	ldr	r3, [r7, #4]
20003baa:	685b      	ldr	r3, [r3, #4]
20003bac:	019a      	lsls	r2, r3, #6
20003bae:	687b      	ldr	r3, [r7, #4]
20003bb0:	691b      	ldr	r3, [r3, #16]
20003bb2:	041b      	lsls	r3, r3, #16
20003bb4:	431a      	orrs	r2, r3
20003bb6:	693b      	ldr	r3, [r7, #16]
20003bb8:	061b      	lsls	r3, r3, #24
20003bba:	431a      	orrs	r2, r3
20003bbc:	68fb      	ldr	r3, [r7, #12]
20003bbe:	071b      	lsls	r3, r3, #28
20003bc0:	4925      	ldr	r1, [pc, #148]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003bc2:	4313      	orrs	r3, r2
20003bc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
20003bc8:	687b      	ldr	r3, [r7, #4]
20003bca:	681b      	ldr	r3, [r3, #0]
20003bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20003bd0:	2b00      	cmp	r3, #0
20003bd2:	d011      	beq.n	20003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
20003bd4:	687b      	ldr	r3, [r7, #4]
20003bd6:	685b      	ldr	r3, [r3, #4]
20003bd8:	019a      	lsls	r2, r3, #6
20003bda:	687b      	ldr	r3, [r7, #4]
20003bdc:	691b      	ldr	r3, [r3, #16]
20003bde:	041b      	lsls	r3, r3, #16
20003be0:	431a      	orrs	r2, r3
20003be2:	687b      	ldr	r3, [r7, #4]
20003be4:	68db      	ldr	r3, [r3, #12]
20003be6:	061b      	lsls	r3, r3, #24
20003be8:	431a      	orrs	r2, r3
20003bea:	687b      	ldr	r3, [r7, #4]
20003bec:	689b      	ldr	r3, [r3, #8]
20003bee:	071b      	lsls	r3, r3, #28
20003bf0:	4919      	ldr	r1, [pc, #100]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003bf2:	4313      	orrs	r3, r2
20003bf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20003bf8:	4b17      	ldr	r3, [pc, #92]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003bfa:	681b      	ldr	r3, [r3, #0]
20003bfc:	4a16      	ldr	r2, [pc, #88]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003bfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20003c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20003c04:	f7fe f86c 	bl	20001ce0 <HAL_GetTick>
20003c08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20003c0a:	e008      	b.n	20003c1e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20003c0c:	f7fe f868 	bl	20001ce0 <HAL_GetTick>
20003c10:	4602      	mov	r2, r0
20003c12:	697b      	ldr	r3, [r7, #20]
20003c14:	1ad3      	subs	r3, r2, r3
20003c16:	2b64      	cmp	r3, #100	@ 0x64
20003c18:	d901      	bls.n	20003c1e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20003c1a:	2303      	movs	r3, #3
20003c1c:	e0d7      	b.n	20003dce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003c20:	681b      	ldr	r3, [r3, #0]
20003c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20003c26:	2b00      	cmp	r3, #0
20003c28:	d0f0      	beq.n	20003c0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
20003c2a:	69bb      	ldr	r3, [r7, #24]
20003c2c:	2b01      	cmp	r3, #1
20003c2e:	f040 80cd 	bne.w	20003dcc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
20003c32:	4b09      	ldr	r3, [pc, #36]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003c34:	681b      	ldr	r3, [r3, #0]
20003c36:	4a08      	ldr	r2, [pc, #32]	@ (20003c58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20003c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20003c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20003c3e:	f7fe f84f 	bl	20001ce0 <HAL_GetTick>
20003c42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20003c44:	e00a      	b.n	20003c5c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20003c46:	f7fe f84b 	bl	20001ce0 <HAL_GetTick>
20003c4a:	4602      	mov	r2, r0
20003c4c:	697b      	ldr	r3, [r7, #20]
20003c4e:	1ad3      	subs	r3, r2, r3
20003c50:	2b64      	cmp	r3, #100	@ 0x64
20003c52:	d903      	bls.n	20003c5c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20003c54:	2303      	movs	r3, #3
20003c56:	e0ba      	b.n	20003dce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
20003c58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20003c5c:	4b5e      	ldr	r3, [pc, #376]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003c5e:	681b      	ldr	r3, [r3, #0]
20003c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20003c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20003c68:	d0ed      	beq.n	20003c46 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20003c6a:	687b      	ldr	r3, [r7, #4]
20003c6c:	681b      	ldr	r3, [r3, #0]
20003c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20003c72:	2b00      	cmp	r3, #0
20003c74:	d003      	beq.n	20003c7e <HAL_RCCEx_PeriphCLKConfig+0x682>
20003c76:	687b      	ldr	r3, [r7, #4]
20003c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20003c7a:	2b00      	cmp	r3, #0
20003c7c:	d009      	beq.n	20003c92 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
20003c7e:	687b      	ldr	r3, [r7, #4]
20003c80:	681b      	ldr	r3, [r3, #0]
20003c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20003c86:	2b00      	cmp	r3, #0
20003c88:	d02e      	beq.n	20003ce8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
20003c8a:	687b      	ldr	r3, [r7, #4]
20003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003c8e:	2b00      	cmp	r3, #0
20003c90:	d12a      	bne.n	20003ce8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20003c92:	4b51      	ldr	r3, [pc, #324]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20003c98:	0c1b      	lsrs	r3, r3, #16
20003c9a:	f003 0303 	and.w	r3, r3, #3
20003c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20003ca0:	4b4d      	ldr	r3, [pc, #308]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20003ca6:	0f1b      	lsrs	r3, r3, #28
20003ca8:	f003 0307 	and.w	r3, r3, #7
20003cac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
20003cae:	687b      	ldr	r3, [r7, #4]
20003cb0:	695b      	ldr	r3, [r3, #20]
20003cb2:	019a      	lsls	r2, r3, #6
20003cb4:	693b      	ldr	r3, [r7, #16]
20003cb6:	041b      	lsls	r3, r3, #16
20003cb8:	431a      	orrs	r2, r3
20003cba:	687b      	ldr	r3, [r7, #4]
20003cbc:	699b      	ldr	r3, [r3, #24]
20003cbe:	061b      	lsls	r3, r3, #24
20003cc0:	431a      	orrs	r2, r3
20003cc2:	68fb      	ldr	r3, [r7, #12]
20003cc4:	071b      	lsls	r3, r3, #28
20003cc6:	4944      	ldr	r1, [pc, #272]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003cc8:	4313      	orrs	r3, r2
20003cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
20003cce:	4b42      	ldr	r3, [pc, #264]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20003cd4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
20003cd8:	687b      	ldr	r3, [r7, #4]
20003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20003cdc:	3b01      	subs	r3, #1
20003cde:	021b      	lsls	r3, r3, #8
20003ce0:	493d      	ldr	r1, [pc, #244]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003ce2:	4313      	orrs	r3, r2
20003ce4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
20003ce8:	687b      	ldr	r3, [r7, #4]
20003cea:	681b      	ldr	r3, [r3, #0]
20003cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20003cf0:	2b00      	cmp	r3, #0
20003cf2:	d022      	beq.n	20003d3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
20003cf4:	687b      	ldr	r3, [r7, #4]
20003cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20003cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20003cfc:	d11d      	bne.n	20003d3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20003cfe:	4b36      	ldr	r3, [pc, #216]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20003d04:	0e1b      	lsrs	r3, r3, #24
20003d06:	f003 030f 	and.w	r3, r3, #15
20003d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20003d0c:	4b32      	ldr	r3, [pc, #200]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20003d12:	0f1b      	lsrs	r3, r3, #28
20003d14:	f003 0307 	and.w	r3, r3, #7
20003d18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
20003d1a:	687b      	ldr	r3, [r7, #4]
20003d1c:	695b      	ldr	r3, [r3, #20]
20003d1e:	019a      	lsls	r2, r3, #6
20003d20:	687b      	ldr	r3, [r7, #4]
20003d22:	6a1b      	ldr	r3, [r3, #32]
20003d24:	041b      	lsls	r3, r3, #16
20003d26:	431a      	orrs	r2, r3
20003d28:	693b      	ldr	r3, [r7, #16]
20003d2a:	061b      	lsls	r3, r3, #24
20003d2c:	431a      	orrs	r2, r3
20003d2e:	68fb      	ldr	r3, [r7, #12]
20003d30:	071b      	lsls	r3, r3, #28
20003d32:	4929      	ldr	r1, [pc, #164]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d34:	4313      	orrs	r3, r2
20003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
20003d3a:	687b      	ldr	r3, [r7, #4]
20003d3c:	681b      	ldr	r3, [r3, #0]
20003d3e:	f003 0308 	and.w	r3, r3, #8
20003d42:	2b00      	cmp	r3, #0
20003d44:	d028      	beq.n	20003d98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20003d46:	4b24      	ldr	r3, [pc, #144]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20003d4c:	0e1b      	lsrs	r3, r3, #24
20003d4e:	f003 030f 	and.w	r3, r3, #15
20003d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20003d54:	4b20      	ldr	r3, [pc, #128]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20003d5a:	0c1b      	lsrs	r3, r3, #16
20003d5c:	f003 0303 	and.w	r3, r3, #3
20003d60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
20003d62:	687b      	ldr	r3, [r7, #4]
20003d64:	695b      	ldr	r3, [r3, #20]
20003d66:	019a      	lsls	r2, r3, #6
20003d68:	68fb      	ldr	r3, [r7, #12]
20003d6a:	041b      	lsls	r3, r3, #16
20003d6c:	431a      	orrs	r2, r3
20003d6e:	693b      	ldr	r3, [r7, #16]
20003d70:	061b      	lsls	r3, r3, #24
20003d72:	431a      	orrs	r2, r3
20003d74:	687b      	ldr	r3, [r7, #4]
20003d76:	69db      	ldr	r3, [r3, #28]
20003d78:	071b      	lsls	r3, r3, #28
20003d7a:	4917      	ldr	r1, [pc, #92]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d7c:	4313      	orrs	r3, r2
20003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
20003d82:	4b15      	ldr	r3, [pc, #84]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20003d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20003d8c:	687b      	ldr	r3, [r7, #4]
20003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20003d90:	4911      	ldr	r1, [pc, #68]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d92:	4313      	orrs	r3, r2
20003d94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
20003d98:	4b0f      	ldr	r3, [pc, #60]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d9a:	681b      	ldr	r3, [r3, #0]
20003d9c:	4a0e      	ldr	r2, [pc, #56]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20003da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20003da4:	f7fd ff9c 	bl	20001ce0 <HAL_GetTick>
20003da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20003daa:	e008      	b.n	20003dbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20003dac:	f7fd ff98 	bl	20001ce0 <HAL_GetTick>
20003db0:	4602      	mov	r2, r0
20003db2:	697b      	ldr	r3, [r7, #20]
20003db4:	1ad3      	subs	r3, r2, r3
20003db6:	2b64      	cmp	r3, #100	@ 0x64
20003db8:	d901      	bls.n	20003dbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20003dba:	2303      	movs	r3, #3
20003dbc:	e007      	b.n	20003dce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20003dbe:	4b06      	ldr	r3, [pc, #24]	@ (20003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20003dc0:	681b      	ldr	r3, [r3, #0]
20003dc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20003dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20003dca:	d1ef      	bne.n	20003dac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
20003dcc:	2300      	movs	r3, #0
}
20003dce:	4618      	mov	r0, r3
20003dd0:	3720      	adds	r7, #32
20003dd2:	46bd      	mov	sp, r7
20003dd4:	bd80      	pop	{r7, pc}
20003dd6:	bf00      	nop
20003dd8:	40023800 	.word	0x40023800

20003ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20003ddc:	b580      	push	{r7, lr}
20003dde:	b084      	sub	sp, #16
20003de0:	af00      	add	r7, sp, #0
20003de2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
20003de4:	687b      	ldr	r3, [r7, #4]
20003de6:	2b00      	cmp	r3, #0
20003de8:	d101      	bne.n	20003dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20003dea:	2301      	movs	r3, #1
20003dec:	e09d      	b.n	20003f2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20003dee:	687b      	ldr	r3, [r7, #4]
20003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003df2:	2b00      	cmp	r3, #0
20003df4:	d108      	bne.n	20003e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20003df6:	687b      	ldr	r3, [r7, #4]
20003df8:	685b      	ldr	r3, [r3, #4]
20003dfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20003dfe:	d009      	beq.n	20003e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20003e00:	687b      	ldr	r3, [r7, #4]
20003e02:	2200      	movs	r2, #0
20003e04:	61da      	str	r2, [r3, #28]
20003e06:	e005      	b.n	20003e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20003e08:	687b      	ldr	r3, [r7, #4]
20003e0a:	2200      	movs	r2, #0
20003e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20003e0e:	687b      	ldr	r3, [r7, #4]
20003e10:	2200      	movs	r2, #0
20003e12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20003e14:	687b      	ldr	r3, [r7, #4]
20003e16:	2200      	movs	r2, #0
20003e18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20003e1a:	687b      	ldr	r3, [r7, #4]
20003e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
20003e20:	b2db      	uxtb	r3, r3
20003e22:	2b00      	cmp	r3, #0
20003e24:	d106      	bne.n	20003e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20003e26:	687b      	ldr	r3, [r7, #4]
20003e28:	2200      	movs	r2, #0
20003e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20003e2e:	6878      	ldr	r0, [r7, #4]
20003e30:	f7fd fd2c 	bl	2000188c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20003e34:	687b      	ldr	r3, [r7, #4]
20003e36:	2202      	movs	r2, #2
20003e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20003e3c:	687b      	ldr	r3, [r7, #4]
20003e3e:	681b      	ldr	r3, [r3, #0]
20003e40:	681a      	ldr	r2, [r3, #0]
20003e42:	687b      	ldr	r3, [r7, #4]
20003e44:	681b      	ldr	r3, [r3, #0]
20003e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20003e4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20003e4c:	687b      	ldr	r3, [r7, #4]
20003e4e:	68db      	ldr	r3, [r3, #12]
20003e50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20003e54:	d902      	bls.n	20003e5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
20003e56:	2300      	movs	r3, #0
20003e58:	60fb      	str	r3, [r7, #12]
20003e5a:	e002      	b.n	20003e62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
20003e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20003e60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
20003e62:	687b      	ldr	r3, [r7, #4]
20003e64:	68db      	ldr	r3, [r3, #12]
20003e66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
20003e6a:	d007      	beq.n	20003e7c <HAL_SPI_Init+0xa0>
20003e6c:	687b      	ldr	r3, [r7, #4]
20003e6e:	68db      	ldr	r3, [r3, #12]
20003e70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20003e74:	d002      	beq.n	20003e7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20003e76:	687b      	ldr	r3, [r7, #4]
20003e78:	2200      	movs	r2, #0
20003e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20003e7c:	687b      	ldr	r3, [r7, #4]
20003e7e:	685b      	ldr	r3, [r3, #4]
20003e80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
20003e84:	687b      	ldr	r3, [r7, #4]
20003e86:	689b      	ldr	r3, [r3, #8]
20003e88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
20003e8c:	431a      	orrs	r2, r3
20003e8e:	687b      	ldr	r3, [r7, #4]
20003e90:	691b      	ldr	r3, [r3, #16]
20003e92:	f003 0302 	and.w	r3, r3, #2
20003e96:	431a      	orrs	r2, r3
20003e98:	687b      	ldr	r3, [r7, #4]
20003e9a:	695b      	ldr	r3, [r3, #20]
20003e9c:	f003 0301 	and.w	r3, r3, #1
20003ea0:	431a      	orrs	r2, r3
20003ea2:	687b      	ldr	r3, [r7, #4]
20003ea4:	699b      	ldr	r3, [r3, #24]
20003ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20003eaa:	431a      	orrs	r2, r3
20003eac:	687b      	ldr	r3, [r7, #4]
20003eae:	69db      	ldr	r3, [r3, #28]
20003eb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20003eb4:	431a      	orrs	r2, r3
20003eb6:	687b      	ldr	r3, [r7, #4]
20003eb8:	6a1b      	ldr	r3, [r3, #32]
20003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003ebe:	ea42 0103 	orr.w	r1, r2, r3
20003ec2:	687b      	ldr	r3, [r7, #4]
20003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20003ec6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
20003eca:	687b      	ldr	r3, [r7, #4]
20003ecc:	681b      	ldr	r3, [r3, #0]
20003ece:	430a      	orrs	r2, r1
20003ed0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
20003ed2:	687b      	ldr	r3, [r7, #4]
20003ed4:	699b      	ldr	r3, [r3, #24]
20003ed6:	0c1b      	lsrs	r3, r3, #16
20003ed8:	f003 0204 	and.w	r2, r3, #4
20003edc:	687b      	ldr	r3, [r7, #4]
20003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003ee0:	f003 0310 	and.w	r3, r3, #16
20003ee4:	431a      	orrs	r2, r3
20003ee6:	687b      	ldr	r3, [r7, #4]
20003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20003eea:	f003 0308 	and.w	r3, r3, #8
20003eee:	431a      	orrs	r2, r3
20003ef0:	687b      	ldr	r3, [r7, #4]
20003ef2:	68db      	ldr	r3, [r3, #12]
20003ef4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
20003ef8:	ea42 0103 	orr.w	r1, r2, r3
20003efc:	68fb      	ldr	r3, [r7, #12]
20003efe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
20003f02:	687b      	ldr	r3, [r7, #4]
20003f04:	681b      	ldr	r3, [r3, #0]
20003f06:	430a      	orrs	r2, r1
20003f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20003f0a:	687b      	ldr	r3, [r7, #4]
20003f0c:	681b      	ldr	r3, [r3, #0]
20003f0e:	69da      	ldr	r2, [r3, #28]
20003f10:	687b      	ldr	r3, [r7, #4]
20003f12:	681b      	ldr	r3, [r3, #0]
20003f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
20003f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20003f1a:	687b      	ldr	r3, [r7, #4]
20003f1c:	2200      	movs	r2, #0
20003f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
20003f20:	687b      	ldr	r3, [r7, #4]
20003f22:	2201      	movs	r2, #1
20003f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
20003f28:	2300      	movs	r3, #0
}
20003f2a:	4618      	mov	r0, r3
20003f2c:	3710      	adds	r7, #16
20003f2e:	46bd      	mov	sp, r7
20003f30:	bd80      	pop	{r7, pc}

20003f32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
20003f32:	b580      	push	{r7, lr}
20003f34:	b082      	sub	sp, #8
20003f36:	af00      	add	r7, sp, #0
20003f38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
20003f3a:	687b      	ldr	r3, [r7, #4]
20003f3c:	2b00      	cmp	r3, #0
20003f3e:	d101      	bne.n	20003f44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
20003f40:	2301      	movs	r3, #1
20003f42:	e040      	b.n	20003fc6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
20003f44:	687b      	ldr	r3, [r7, #4]
20003f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20003f48:	2b00      	cmp	r3, #0
20003f4a:	d106      	bne.n	20003f5a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
20003f4c:	687b      	ldr	r3, [r7, #4]
20003f4e:	2200      	movs	r2, #0
20003f50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
20003f54:	6878      	ldr	r0, [r7, #4]
20003f56:	f7fd fd2d 	bl	200019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
20003f5a:	687b      	ldr	r3, [r7, #4]
20003f5c:	2224      	movs	r2, #36	@ 0x24
20003f5e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
20003f60:	687b      	ldr	r3, [r7, #4]
20003f62:	681b      	ldr	r3, [r3, #0]
20003f64:	681a      	ldr	r2, [r3, #0]
20003f66:	687b      	ldr	r3, [r7, #4]
20003f68:	681b      	ldr	r3, [r3, #0]
20003f6a:	f022 0201 	bic.w	r2, r2, #1
20003f6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
20003f70:	687b      	ldr	r3, [r7, #4]
20003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003f74:	2b00      	cmp	r3, #0
20003f76:	d002      	beq.n	20003f7e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
20003f78:	6878      	ldr	r0, [r7, #4]
20003f7a:	f000 fa8d 	bl	20004498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
20003f7e:	6878      	ldr	r0, [r7, #4]
20003f80:	f000 f826 	bl	20003fd0 <UART_SetConfig>
20003f84:	4603      	mov	r3, r0
20003f86:	2b01      	cmp	r3, #1
20003f88:	d101      	bne.n	20003f8e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
20003f8a:	2301      	movs	r3, #1
20003f8c:	e01b      	b.n	20003fc6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
20003f8e:	687b      	ldr	r3, [r7, #4]
20003f90:	681b      	ldr	r3, [r3, #0]
20003f92:	685a      	ldr	r2, [r3, #4]
20003f94:	687b      	ldr	r3, [r7, #4]
20003f96:	681b      	ldr	r3, [r3, #0]
20003f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
20003f9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
20003f9e:	687b      	ldr	r3, [r7, #4]
20003fa0:	681b      	ldr	r3, [r3, #0]
20003fa2:	689a      	ldr	r2, [r3, #8]
20003fa4:	687b      	ldr	r3, [r7, #4]
20003fa6:	681b      	ldr	r3, [r3, #0]
20003fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
20003fac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
20003fae:	687b      	ldr	r3, [r7, #4]
20003fb0:	681b      	ldr	r3, [r3, #0]
20003fb2:	681a      	ldr	r2, [r3, #0]
20003fb4:	687b      	ldr	r3, [r7, #4]
20003fb6:	681b      	ldr	r3, [r3, #0]
20003fb8:	f042 0201 	orr.w	r2, r2, #1
20003fbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
20003fbe:	6878      	ldr	r0, [r7, #4]
20003fc0:	f000 fb0c 	bl	200045dc <UART_CheckIdleState>
20003fc4:	4603      	mov	r3, r0
}
20003fc6:	4618      	mov	r0, r3
20003fc8:	3708      	adds	r7, #8
20003fca:	46bd      	mov	sp, r7
20003fcc:	bd80      	pop	{r7, pc}
	...

20003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
20003fd0:	b580      	push	{r7, lr}
20003fd2:	b088      	sub	sp, #32
20003fd4:	af00      	add	r7, sp, #0
20003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
20003fd8:	2300      	movs	r3, #0
20003fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
20003fdc:	687b      	ldr	r3, [r7, #4]
20003fde:	689a      	ldr	r2, [r3, #8]
20003fe0:	687b      	ldr	r3, [r7, #4]
20003fe2:	691b      	ldr	r3, [r3, #16]
20003fe4:	431a      	orrs	r2, r3
20003fe6:	687b      	ldr	r3, [r7, #4]
20003fe8:	695b      	ldr	r3, [r3, #20]
20003fea:	431a      	orrs	r2, r3
20003fec:	687b      	ldr	r3, [r7, #4]
20003fee:	69db      	ldr	r3, [r3, #28]
20003ff0:	4313      	orrs	r3, r2
20003ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
20003ff4:	687b      	ldr	r3, [r7, #4]
20003ff6:	681b      	ldr	r3, [r3, #0]
20003ff8:	681a      	ldr	r2, [r3, #0]
20003ffa:	4ba6      	ldr	r3, [pc, #664]	@ (20004294 <UART_SetConfig+0x2c4>)
20003ffc:	4013      	ands	r3, r2
20003ffe:	687a      	ldr	r2, [r7, #4]
20004000:	6812      	ldr	r2, [r2, #0]
20004002:	6979      	ldr	r1, [r7, #20]
20004004:	430b      	orrs	r3, r1
20004006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
20004008:	687b      	ldr	r3, [r7, #4]
2000400a:	681b      	ldr	r3, [r3, #0]
2000400c:	685b      	ldr	r3, [r3, #4]
2000400e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
20004012:	687b      	ldr	r3, [r7, #4]
20004014:	68da      	ldr	r2, [r3, #12]
20004016:	687b      	ldr	r3, [r7, #4]
20004018:	681b      	ldr	r3, [r3, #0]
2000401a:	430a      	orrs	r2, r1
2000401c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
2000401e:	687b      	ldr	r3, [r7, #4]
20004020:	699b      	ldr	r3, [r3, #24]
20004022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
20004024:	687b      	ldr	r3, [r7, #4]
20004026:	6a1b      	ldr	r3, [r3, #32]
20004028:	697a      	ldr	r2, [r7, #20]
2000402a:	4313      	orrs	r3, r2
2000402c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
2000402e:	687b      	ldr	r3, [r7, #4]
20004030:	681b      	ldr	r3, [r3, #0]
20004032:	689b      	ldr	r3, [r3, #8]
20004034:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
20004038:	687b      	ldr	r3, [r7, #4]
2000403a:	681b      	ldr	r3, [r3, #0]
2000403c:	697a      	ldr	r2, [r7, #20]
2000403e:	430a      	orrs	r2, r1
20004040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
20004042:	687b      	ldr	r3, [r7, #4]
20004044:	681b      	ldr	r3, [r3, #0]
20004046:	4a94      	ldr	r2, [pc, #592]	@ (20004298 <UART_SetConfig+0x2c8>)
20004048:	4293      	cmp	r3, r2
2000404a:	d120      	bne.n	2000408e <UART_SetConfig+0xbe>
2000404c:	4b93      	ldr	r3, [pc, #588]	@ (2000429c <UART_SetConfig+0x2cc>)
2000404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004052:	f003 0303 	and.w	r3, r3, #3
20004056:	2b03      	cmp	r3, #3
20004058:	d816      	bhi.n	20004088 <UART_SetConfig+0xb8>
2000405a:	a201      	add	r2, pc, #4	@ (adr r2, 20004060 <UART_SetConfig+0x90>)
2000405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20004060:	20004071 	.word	0x20004071
20004064:	2000407d 	.word	0x2000407d
20004068:	20004077 	.word	0x20004077
2000406c:	20004083 	.word	0x20004083
20004070:	2301      	movs	r3, #1
20004072:	77fb      	strb	r3, [r7, #31]
20004074:	e150      	b.n	20004318 <UART_SetConfig+0x348>
20004076:	2302      	movs	r3, #2
20004078:	77fb      	strb	r3, [r7, #31]
2000407a:	e14d      	b.n	20004318 <UART_SetConfig+0x348>
2000407c:	2304      	movs	r3, #4
2000407e:	77fb      	strb	r3, [r7, #31]
20004080:	e14a      	b.n	20004318 <UART_SetConfig+0x348>
20004082:	2308      	movs	r3, #8
20004084:	77fb      	strb	r3, [r7, #31]
20004086:	e147      	b.n	20004318 <UART_SetConfig+0x348>
20004088:	2310      	movs	r3, #16
2000408a:	77fb      	strb	r3, [r7, #31]
2000408c:	e144      	b.n	20004318 <UART_SetConfig+0x348>
2000408e:	687b      	ldr	r3, [r7, #4]
20004090:	681b      	ldr	r3, [r3, #0]
20004092:	4a83      	ldr	r2, [pc, #524]	@ (200042a0 <UART_SetConfig+0x2d0>)
20004094:	4293      	cmp	r3, r2
20004096:	d132      	bne.n	200040fe <UART_SetConfig+0x12e>
20004098:	4b80      	ldr	r3, [pc, #512]	@ (2000429c <UART_SetConfig+0x2cc>)
2000409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000409e:	f003 030c 	and.w	r3, r3, #12
200040a2:	2b0c      	cmp	r3, #12
200040a4:	d828      	bhi.n	200040f8 <UART_SetConfig+0x128>
200040a6:	a201      	add	r2, pc, #4	@ (adr r2, 200040ac <UART_SetConfig+0xdc>)
200040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200040ac:	200040e1 	.word	0x200040e1
200040b0:	200040f9 	.word	0x200040f9
200040b4:	200040f9 	.word	0x200040f9
200040b8:	200040f9 	.word	0x200040f9
200040bc:	200040ed 	.word	0x200040ed
200040c0:	200040f9 	.word	0x200040f9
200040c4:	200040f9 	.word	0x200040f9
200040c8:	200040f9 	.word	0x200040f9
200040cc:	200040e7 	.word	0x200040e7
200040d0:	200040f9 	.word	0x200040f9
200040d4:	200040f9 	.word	0x200040f9
200040d8:	200040f9 	.word	0x200040f9
200040dc:	200040f3 	.word	0x200040f3
200040e0:	2300      	movs	r3, #0
200040e2:	77fb      	strb	r3, [r7, #31]
200040e4:	e118      	b.n	20004318 <UART_SetConfig+0x348>
200040e6:	2302      	movs	r3, #2
200040e8:	77fb      	strb	r3, [r7, #31]
200040ea:	e115      	b.n	20004318 <UART_SetConfig+0x348>
200040ec:	2304      	movs	r3, #4
200040ee:	77fb      	strb	r3, [r7, #31]
200040f0:	e112      	b.n	20004318 <UART_SetConfig+0x348>
200040f2:	2308      	movs	r3, #8
200040f4:	77fb      	strb	r3, [r7, #31]
200040f6:	e10f      	b.n	20004318 <UART_SetConfig+0x348>
200040f8:	2310      	movs	r3, #16
200040fa:	77fb      	strb	r3, [r7, #31]
200040fc:	e10c      	b.n	20004318 <UART_SetConfig+0x348>
200040fe:	687b      	ldr	r3, [r7, #4]
20004100:	681b      	ldr	r3, [r3, #0]
20004102:	4a68      	ldr	r2, [pc, #416]	@ (200042a4 <UART_SetConfig+0x2d4>)
20004104:	4293      	cmp	r3, r2
20004106:	d120      	bne.n	2000414a <UART_SetConfig+0x17a>
20004108:	4b64      	ldr	r3, [pc, #400]	@ (2000429c <UART_SetConfig+0x2cc>)
2000410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000410e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
20004112:	2b30      	cmp	r3, #48	@ 0x30
20004114:	d013      	beq.n	2000413e <UART_SetConfig+0x16e>
20004116:	2b30      	cmp	r3, #48	@ 0x30
20004118:	d814      	bhi.n	20004144 <UART_SetConfig+0x174>
2000411a:	2b20      	cmp	r3, #32
2000411c:	d009      	beq.n	20004132 <UART_SetConfig+0x162>
2000411e:	2b20      	cmp	r3, #32
20004120:	d810      	bhi.n	20004144 <UART_SetConfig+0x174>
20004122:	2b00      	cmp	r3, #0
20004124:	d002      	beq.n	2000412c <UART_SetConfig+0x15c>
20004126:	2b10      	cmp	r3, #16
20004128:	d006      	beq.n	20004138 <UART_SetConfig+0x168>
2000412a:	e00b      	b.n	20004144 <UART_SetConfig+0x174>
2000412c:	2300      	movs	r3, #0
2000412e:	77fb      	strb	r3, [r7, #31]
20004130:	e0f2      	b.n	20004318 <UART_SetConfig+0x348>
20004132:	2302      	movs	r3, #2
20004134:	77fb      	strb	r3, [r7, #31]
20004136:	e0ef      	b.n	20004318 <UART_SetConfig+0x348>
20004138:	2304      	movs	r3, #4
2000413a:	77fb      	strb	r3, [r7, #31]
2000413c:	e0ec      	b.n	20004318 <UART_SetConfig+0x348>
2000413e:	2308      	movs	r3, #8
20004140:	77fb      	strb	r3, [r7, #31]
20004142:	e0e9      	b.n	20004318 <UART_SetConfig+0x348>
20004144:	2310      	movs	r3, #16
20004146:	77fb      	strb	r3, [r7, #31]
20004148:	e0e6      	b.n	20004318 <UART_SetConfig+0x348>
2000414a:	687b      	ldr	r3, [r7, #4]
2000414c:	681b      	ldr	r3, [r3, #0]
2000414e:	4a56      	ldr	r2, [pc, #344]	@ (200042a8 <UART_SetConfig+0x2d8>)
20004150:	4293      	cmp	r3, r2
20004152:	d120      	bne.n	20004196 <UART_SetConfig+0x1c6>
20004154:	4b51      	ldr	r3, [pc, #324]	@ (2000429c <UART_SetConfig+0x2cc>)
20004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000415a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
2000415e:	2bc0      	cmp	r3, #192	@ 0xc0
20004160:	d013      	beq.n	2000418a <UART_SetConfig+0x1ba>
20004162:	2bc0      	cmp	r3, #192	@ 0xc0
20004164:	d814      	bhi.n	20004190 <UART_SetConfig+0x1c0>
20004166:	2b80      	cmp	r3, #128	@ 0x80
20004168:	d009      	beq.n	2000417e <UART_SetConfig+0x1ae>
2000416a:	2b80      	cmp	r3, #128	@ 0x80
2000416c:	d810      	bhi.n	20004190 <UART_SetConfig+0x1c0>
2000416e:	2b00      	cmp	r3, #0
20004170:	d002      	beq.n	20004178 <UART_SetConfig+0x1a8>
20004172:	2b40      	cmp	r3, #64	@ 0x40
20004174:	d006      	beq.n	20004184 <UART_SetConfig+0x1b4>
20004176:	e00b      	b.n	20004190 <UART_SetConfig+0x1c0>
20004178:	2300      	movs	r3, #0
2000417a:	77fb      	strb	r3, [r7, #31]
2000417c:	e0cc      	b.n	20004318 <UART_SetConfig+0x348>
2000417e:	2302      	movs	r3, #2
20004180:	77fb      	strb	r3, [r7, #31]
20004182:	e0c9      	b.n	20004318 <UART_SetConfig+0x348>
20004184:	2304      	movs	r3, #4
20004186:	77fb      	strb	r3, [r7, #31]
20004188:	e0c6      	b.n	20004318 <UART_SetConfig+0x348>
2000418a:	2308      	movs	r3, #8
2000418c:	77fb      	strb	r3, [r7, #31]
2000418e:	e0c3      	b.n	20004318 <UART_SetConfig+0x348>
20004190:	2310      	movs	r3, #16
20004192:	77fb      	strb	r3, [r7, #31]
20004194:	e0c0      	b.n	20004318 <UART_SetConfig+0x348>
20004196:	687b      	ldr	r3, [r7, #4]
20004198:	681b      	ldr	r3, [r3, #0]
2000419a:	4a44      	ldr	r2, [pc, #272]	@ (200042ac <UART_SetConfig+0x2dc>)
2000419c:	4293      	cmp	r3, r2
2000419e:	d125      	bne.n	200041ec <UART_SetConfig+0x21c>
200041a0:	4b3e      	ldr	r3, [pc, #248]	@ (2000429c <UART_SetConfig+0x2cc>)
200041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200041a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
200041aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200041ae:	d017      	beq.n	200041e0 <UART_SetConfig+0x210>
200041b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200041b4:	d817      	bhi.n	200041e6 <UART_SetConfig+0x216>
200041b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
200041ba:	d00b      	beq.n	200041d4 <UART_SetConfig+0x204>
200041bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
200041c0:	d811      	bhi.n	200041e6 <UART_SetConfig+0x216>
200041c2:	2b00      	cmp	r3, #0
200041c4:	d003      	beq.n	200041ce <UART_SetConfig+0x1fe>
200041c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200041ca:	d006      	beq.n	200041da <UART_SetConfig+0x20a>
200041cc:	e00b      	b.n	200041e6 <UART_SetConfig+0x216>
200041ce:	2300      	movs	r3, #0
200041d0:	77fb      	strb	r3, [r7, #31]
200041d2:	e0a1      	b.n	20004318 <UART_SetConfig+0x348>
200041d4:	2302      	movs	r3, #2
200041d6:	77fb      	strb	r3, [r7, #31]
200041d8:	e09e      	b.n	20004318 <UART_SetConfig+0x348>
200041da:	2304      	movs	r3, #4
200041dc:	77fb      	strb	r3, [r7, #31]
200041de:	e09b      	b.n	20004318 <UART_SetConfig+0x348>
200041e0:	2308      	movs	r3, #8
200041e2:	77fb      	strb	r3, [r7, #31]
200041e4:	e098      	b.n	20004318 <UART_SetConfig+0x348>
200041e6:	2310      	movs	r3, #16
200041e8:	77fb      	strb	r3, [r7, #31]
200041ea:	e095      	b.n	20004318 <UART_SetConfig+0x348>
200041ec:	687b      	ldr	r3, [r7, #4]
200041ee:	681b      	ldr	r3, [r3, #0]
200041f0:	4a2f      	ldr	r2, [pc, #188]	@ (200042b0 <UART_SetConfig+0x2e0>)
200041f2:	4293      	cmp	r3, r2
200041f4:	d125      	bne.n	20004242 <UART_SetConfig+0x272>
200041f6:	4b29      	ldr	r3, [pc, #164]	@ (2000429c <UART_SetConfig+0x2cc>)
200041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200041fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
20004200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20004204:	d017      	beq.n	20004236 <UART_SetConfig+0x266>
20004206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
2000420a:	d817      	bhi.n	2000423c <UART_SetConfig+0x26c>
2000420c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20004210:	d00b      	beq.n	2000422a <UART_SetConfig+0x25a>
20004212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20004216:	d811      	bhi.n	2000423c <UART_SetConfig+0x26c>
20004218:	2b00      	cmp	r3, #0
2000421a:	d003      	beq.n	20004224 <UART_SetConfig+0x254>
2000421c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20004220:	d006      	beq.n	20004230 <UART_SetConfig+0x260>
20004222:	e00b      	b.n	2000423c <UART_SetConfig+0x26c>
20004224:	2301      	movs	r3, #1
20004226:	77fb      	strb	r3, [r7, #31]
20004228:	e076      	b.n	20004318 <UART_SetConfig+0x348>
2000422a:	2302      	movs	r3, #2
2000422c:	77fb      	strb	r3, [r7, #31]
2000422e:	e073      	b.n	20004318 <UART_SetConfig+0x348>
20004230:	2304      	movs	r3, #4
20004232:	77fb      	strb	r3, [r7, #31]
20004234:	e070      	b.n	20004318 <UART_SetConfig+0x348>
20004236:	2308      	movs	r3, #8
20004238:	77fb      	strb	r3, [r7, #31]
2000423a:	e06d      	b.n	20004318 <UART_SetConfig+0x348>
2000423c:	2310      	movs	r3, #16
2000423e:	77fb      	strb	r3, [r7, #31]
20004240:	e06a      	b.n	20004318 <UART_SetConfig+0x348>
20004242:	687b      	ldr	r3, [r7, #4]
20004244:	681b      	ldr	r3, [r3, #0]
20004246:	4a1b      	ldr	r2, [pc, #108]	@ (200042b4 <UART_SetConfig+0x2e4>)
20004248:	4293      	cmp	r3, r2
2000424a:	d138      	bne.n	200042be <UART_SetConfig+0x2ee>
2000424c:	4b13      	ldr	r3, [pc, #76]	@ (2000429c <UART_SetConfig+0x2cc>)
2000424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004252:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
20004256:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
2000425a:	d017      	beq.n	2000428c <UART_SetConfig+0x2bc>
2000425c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20004260:	d82a      	bhi.n	200042b8 <UART_SetConfig+0x2e8>
20004262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20004266:	d00b      	beq.n	20004280 <UART_SetConfig+0x2b0>
20004268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2000426c:	d824      	bhi.n	200042b8 <UART_SetConfig+0x2e8>
2000426e:	2b00      	cmp	r3, #0
20004270:	d003      	beq.n	2000427a <UART_SetConfig+0x2aa>
20004272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20004276:	d006      	beq.n	20004286 <UART_SetConfig+0x2b6>
20004278:	e01e      	b.n	200042b8 <UART_SetConfig+0x2e8>
2000427a:	2300      	movs	r3, #0
2000427c:	77fb      	strb	r3, [r7, #31]
2000427e:	e04b      	b.n	20004318 <UART_SetConfig+0x348>
20004280:	2302      	movs	r3, #2
20004282:	77fb      	strb	r3, [r7, #31]
20004284:	e048      	b.n	20004318 <UART_SetConfig+0x348>
20004286:	2304      	movs	r3, #4
20004288:	77fb      	strb	r3, [r7, #31]
2000428a:	e045      	b.n	20004318 <UART_SetConfig+0x348>
2000428c:	2308      	movs	r3, #8
2000428e:	77fb      	strb	r3, [r7, #31]
20004290:	e042      	b.n	20004318 <UART_SetConfig+0x348>
20004292:	bf00      	nop
20004294:	efff69f3 	.word	0xefff69f3
20004298:	40011000 	.word	0x40011000
2000429c:	40023800 	.word	0x40023800
200042a0:	40004400 	.word	0x40004400
200042a4:	40004800 	.word	0x40004800
200042a8:	40004c00 	.word	0x40004c00
200042ac:	40005000 	.word	0x40005000
200042b0:	40011400 	.word	0x40011400
200042b4:	40007800 	.word	0x40007800
200042b8:	2310      	movs	r3, #16
200042ba:	77fb      	strb	r3, [r7, #31]
200042bc:	e02c      	b.n	20004318 <UART_SetConfig+0x348>
200042be:	687b      	ldr	r3, [r7, #4]
200042c0:	681b      	ldr	r3, [r3, #0]
200042c2:	4a72      	ldr	r2, [pc, #456]	@ (2000448c <UART_SetConfig+0x4bc>)
200042c4:	4293      	cmp	r3, r2
200042c6:	d125      	bne.n	20004314 <UART_SetConfig+0x344>
200042c8:	4b71      	ldr	r3, [pc, #452]	@ (20004490 <UART_SetConfig+0x4c0>)
200042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200042ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
200042d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
200042d6:	d017      	beq.n	20004308 <UART_SetConfig+0x338>
200042d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
200042dc:	d817      	bhi.n	2000430e <UART_SetConfig+0x33e>
200042de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
200042e2:	d00b      	beq.n	200042fc <UART_SetConfig+0x32c>
200042e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
200042e8:	d811      	bhi.n	2000430e <UART_SetConfig+0x33e>
200042ea:	2b00      	cmp	r3, #0
200042ec:	d003      	beq.n	200042f6 <UART_SetConfig+0x326>
200042ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
200042f2:	d006      	beq.n	20004302 <UART_SetConfig+0x332>
200042f4:	e00b      	b.n	2000430e <UART_SetConfig+0x33e>
200042f6:	2300      	movs	r3, #0
200042f8:	77fb      	strb	r3, [r7, #31]
200042fa:	e00d      	b.n	20004318 <UART_SetConfig+0x348>
200042fc:	2302      	movs	r3, #2
200042fe:	77fb      	strb	r3, [r7, #31]
20004300:	e00a      	b.n	20004318 <UART_SetConfig+0x348>
20004302:	2304      	movs	r3, #4
20004304:	77fb      	strb	r3, [r7, #31]
20004306:	e007      	b.n	20004318 <UART_SetConfig+0x348>
20004308:	2308      	movs	r3, #8
2000430a:	77fb      	strb	r3, [r7, #31]
2000430c:	e004      	b.n	20004318 <UART_SetConfig+0x348>
2000430e:	2310      	movs	r3, #16
20004310:	77fb      	strb	r3, [r7, #31]
20004312:	e001      	b.n	20004318 <UART_SetConfig+0x348>
20004314:	2310      	movs	r3, #16
20004316:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20004318:	687b      	ldr	r3, [r7, #4]
2000431a:	69db      	ldr	r3, [r3, #28]
2000431c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20004320:	d15b      	bne.n	200043da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
20004322:	7ffb      	ldrb	r3, [r7, #31]
20004324:	2b08      	cmp	r3, #8
20004326:	d828      	bhi.n	2000437a <UART_SetConfig+0x3aa>
20004328:	a201      	add	r2, pc, #4	@ (adr r2, 20004330 <UART_SetConfig+0x360>)
2000432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000432e:	bf00      	nop
20004330:	20004355 	.word	0x20004355
20004334:	2000435d 	.word	0x2000435d
20004338:	20004365 	.word	0x20004365
2000433c:	2000437b 	.word	0x2000437b
20004340:	2000436b 	.word	0x2000436b
20004344:	2000437b 	.word	0x2000437b
20004348:	2000437b 	.word	0x2000437b
2000434c:	2000437b 	.word	0x2000437b
20004350:	20004373 	.word	0x20004373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20004354:	f7ff f92a 	bl	200035ac <HAL_RCC_GetPCLK1Freq>
20004358:	61b8      	str	r0, [r7, #24]
        break;
2000435a:	e013      	b.n	20004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
2000435c:	f7ff f93a 	bl	200035d4 <HAL_RCC_GetPCLK2Freq>
20004360:	61b8      	str	r0, [r7, #24]
        break;
20004362:	e00f      	b.n	20004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20004364:	4b4b      	ldr	r3, [pc, #300]	@ (20004494 <UART_SetConfig+0x4c4>)
20004366:	61bb      	str	r3, [r7, #24]
        break;
20004368:	e00c      	b.n	20004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
2000436a:	f7ff f80d 	bl	20003388 <HAL_RCC_GetSysClockFreq>
2000436e:	61b8      	str	r0, [r7, #24]
        break;
20004370:	e008      	b.n	20004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20004372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20004376:	61bb      	str	r3, [r7, #24]
        break;
20004378:	e004      	b.n	20004384 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
2000437a:	2300      	movs	r3, #0
2000437c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
2000437e:	2301      	movs	r3, #1
20004380:	77bb      	strb	r3, [r7, #30]
        break;
20004382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
20004384:	69bb      	ldr	r3, [r7, #24]
20004386:	2b00      	cmp	r3, #0
20004388:	d074      	beq.n	20004474 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
2000438a:	69bb      	ldr	r3, [r7, #24]
2000438c:	005a      	lsls	r2, r3, #1
2000438e:	687b      	ldr	r3, [r7, #4]
20004390:	685b      	ldr	r3, [r3, #4]
20004392:	085b      	lsrs	r3, r3, #1
20004394:	441a      	add	r2, r3
20004396:	687b      	ldr	r3, [r7, #4]
20004398:	685b      	ldr	r3, [r3, #4]
2000439a:	fbb2 f3f3 	udiv	r3, r2, r3
2000439e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
200043a0:	693b      	ldr	r3, [r7, #16]
200043a2:	2b0f      	cmp	r3, #15
200043a4:	d916      	bls.n	200043d4 <UART_SetConfig+0x404>
200043a6:	693b      	ldr	r3, [r7, #16]
200043a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200043ac:	d212      	bcs.n	200043d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
200043ae:	693b      	ldr	r3, [r7, #16]
200043b0:	b29b      	uxth	r3, r3
200043b2:	f023 030f 	bic.w	r3, r3, #15
200043b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
200043b8:	693b      	ldr	r3, [r7, #16]
200043ba:	085b      	lsrs	r3, r3, #1
200043bc:	b29b      	uxth	r3, r3
200043be:	f003 0307 	and.w	r3, r3, #7
200043c2:	b29a      	uxth	r2, r3
200043c4:	89fb      	ldrh	r3, [r7, #14]
200043c6:	4313      	orrs	r3, r2
200043c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
200043ca:	687b      	ldr	r3, [r7, #4]
200043cc:	681b      	ldr	r3, [r3, #0]
200043ce:	89fa      	ldrh	r2, [r7, #14]
200043d0:	60da      	str	r2, [r3, #12]
200043d2:	e04f      	b.n	20004474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
200043d4:	2301      	movs	r3, #1
200043d6:	77bb      	strb	r3, [r7, #30]
200043d8:	e04c      	b.n	20004474 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
200043da:	7ffb      	ldrb	r3, [r7, #31]
200043dc:	2b08      	cmp	r3, #8
200043de:	d828      	bhi.n	20004432 <UART_SetConfig+0x462>
200043e0:	a201      	add	r2, pc, #4	@ (adr r2, 200043e8 <UART_SetConfig+0x418>)
200043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200043e6:	bf00      	nop
200043e8:	2000440d 	.word	0x2000440d
200043ec:	20004415 	.word	0x20004415
200043f0:	2000441d 	.word	0x2000441d
200043f4:	20004433 	.word	0x20004433
200043f8:	20004423 	.word	0x20004423
200043fc:	20004433 	.word	0x20004433
20004400:	20004433 	.word	0x20004433
20004404:	20004433 	.word	0x20004433
20004408:	2000442b 	.word	0x2000442b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
2000440c:	f7ff f8ce 	bl	200035ac <HAL_RCC_GetPCLK1Freq>
20004410:	61b8      	str	r0, [r7, #24]
        break;
20004412:	e013      	b.n	2000443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20004414:	f7ff f8de 	bl	200035d4 <HAL_RCC_GetPCLK2Freq>
20004418:	61b8      	str	r0, [r7, #24]
        break;
2000441a:	e00f      	b.n	2000443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
2000441c:	4b1d      	ldr	r3, [pc, #116]	@ (20004494 <UART_SetConfig+0x4c4>)
2000441e:	61bb      	str	r3, [r7, #24]
        break;
20004420:	e00c      	b.n	2000443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20004422:	f7fe ffb1 	bl	20003388 <HAL_RCC_GetSysClockFreq>
20004426:	61b8      	str	r0, [r7, #24]
        break;
20004428:	e008      	b.n	2000443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
2000442a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
2000442e:	61bb      	str	r3, [r7, #24]
        break;
20004430:	e004      	b.n	2000443c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
20004432:	2300      	movs	r3, #0
20004434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20004436:	2301      	movs	r3, #1
20004438:	77bb      	strb	r3, [r7, #30]
        break;
2000443a:	bf00      	nop
    }

    if (pclk != 0U)
2000443c:	69bb      	ldr	r3, [r7, #24]
2000443e:	2b00      	cmp	r3, #0
20004440:	d018      	beq.n	20004474 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
20004442:	687b      	ldr	r3, [r7, #4]
20004444:	685b      	ldr	r3, [r3, #4]
20004446:	085a      	lsrs	r2, r3, #1
20004448:	69bb      	ldr	r3, [r7, #24]
2000444a:	441a      	add	r2, r3
2000444c:	687b      	ldr	r3, [r7, #4]
2000444e:	685b      	ldr	r3, [r3, #4]
20004450:	fbb2 f3f3 	udiv	r3, r2, r3
20004454:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
20004456:	693b      	ldr	r3, [r7, #16]
20004458:	2b0f      	cmp	r3, #15
2000445a:	d909      	bls.n	20004470 <UART_SetConfig+0x4a0>
2000445c:	693b      	ldr	r3, [r7, #16]
2000445e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20004462:	d205      	bcs.n	20004470 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
20004464:	693b      	ldr	r3, [r7, #16]
20004466:	b29a      	uxth	r2, r3
20004468:	687b      	ldr	r3, [r7, #4]
2000446a:	681b      	ldr	r3, [r3, #0]
2000446c:	60da      	str	r2, [r3, #12]
2000446e:	e001      	b.n	20004474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20004470:	2301      	movs	r3, #1
20004472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
20004474:	687b      	ldr	r3, [r7, #4]
20004476:	2200      	movs	r2, #0
20004478:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
2000447a:	687b      	ldr	r3, [r7, #4]
2000447c:	2200      	movs	r2, #0
2000447e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
20004480:	7fbb      	ldrb	r3, [r7, #30]
}
20004482:	4618      	mov	r0, r3
20004484:	3720      	adds	r7, #32
20004486:	46bd      	mov	sp, r7
20004488:	bd80      	pop	{r7, pc}
2000448a:	bf00      	nop
2000448c:	40007c00 	.word	0x40007c00
20004490:	40023800 	.word	0x40023800
20004494:	00f42400 	.word	0x00f42400

20004498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
20004498:	b480      	push	{r7}
2000449a:	b083      	sub	sp, #12
2000449c:	af00      	add	r7, sp, #0
2000449e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
200044a0:	687b      	ldr	r3, [r7, #4]
200044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200044a4:	f003 0308 	and.w	r3, r3, #8
200044a8:	2b00      	cmp	r3, #0
200044aa:	d00a      	beq.n	200044c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
200044ac:	687b      	ldr	r3, [r7, #4]
200044ae:	681b      	ldr	r3, [r3, #0]
200044b0:	685b      	ldr	r3, [r3, #4]
200044b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
200044b6:	687b      	ldr	r3, [r7, #4]
200044b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
200044ba:	687b      	ldr	r3, [r7, #4]
200044bc:	681b      	ldr	r3, [r3, #0]
200044be:	430a      	orrs	r2, r1
200044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
200044c2:	687b      	ldr	r3, [r7, #4]
200044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200044c6:	f003 0301 	and.w	r3, r3, #1
200044ca:	2b00      	cmp	r3, #0
200044cc:	d00a      	beq.n	200044e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
200044ce:	687b      	ldr	r3, [r7, #4]
200044d0:	681b      	ldr	r3, [r3, #0]
200044d2:	685b      	ldr	r3, [r3, #4]
200044d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
200044d8:	687b      	ldr	r3, [r7, #4]
200044da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
200044dc:	687b      	ldr	r3, [r7, #4]
200044de:	681b      	ldr	r3, [r3, #0]
200044e0:	430a      	orrs	r2, r1
200044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
200044e4:	687b      	ldr	r3, [r7, #4]
200044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200044e8:	f003 0302 	and.w	r3, r3, #2
200044ec:	2b00      	cmp	r3, #0
200044ee:	d00a      	beq.n	20004506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
200044f0:	687b      	ldr	r3, [r7, #4]
200044f2:	681b      	ldr	r3, [r3, #0]
200044f4:	685b      	ldr	r3, [r3, #4]
200044f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
200044fa:	687b      	ldr	r3, [r7, #4]
200044fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
200044fe:	687b      	ldr	r3, [r7, #4]
20004500:	681b      	ldr	r3, [r3, #0]
20004502:	430a      	orrs	r2, r1
20004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
20004506:	687b      	ldr	r3, [r7, #4]
20004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000450a:	f003 0304 	and.w	r3, r3, #4
2000450e:	2b00      	cmp	r3, #0
20004510:	d00a      	beq.n	20004528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
20004512:	687b      	ldr	r3, [r7, #4]
20004514:	681b      	ldr	r3, [r3, #0]
20004516:	685b      	ldr	r3, [r3, #4]
20004518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
2000451c:	687b      	ldr	r3, [r7, #4]
2000451e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20004520:	687b      	ldr	r3, [r7, #4]
20004522:	681b      	ldr	r3, [r3, #0]
20004524:	430a      	orrs	r2, r1
20004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
20004528:	687b      	ldr	r3, [r7, #4]
2000452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000452c:	f003 0310 	and.w	r3, r3, #16
20004530:	2b00      	cmp	r3, #0
20004532:	d00a      	beq.n	2000454a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
20004534:	687b      	ldr	r3, [r7, #4]
20004536:	681b      	ldr	r3, [r3, #0]
20004538:	689b      	ldr	r3, [r3, #8]
2000453a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
2000453e:	687b      	ldr	r3, [r7, #4]
20004540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
20004542:	687b      	ldr	r3, [r7, #4]
20004544:	681b      	ldr	r3, [r3, #0]
20004546:	430a      	orrs	r2, r1
20004548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
2000454a:	687b      	ldr	r3, [r7, #4]
2000454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000454e:	f003 0320 	and.w	r3, r3, #32
20004552:	2b00      	cmp	r3, #0
20004554:	d00a      	beq.n	2000456c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
20004556:	687b      	ldr	r3, [r7, #4]
20004558:	681b      	ldr	r3, [r3, #0]
2000455a:	689b      	ldr	r3, [r3, #8]
2000455c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
20004560:	687b      	ldr	r3, [r7, #4]
20004562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20004564:	687b      	ldr	r3, [r7, #4]
20004566:	681b      	ldr	r3, [r3, #0]
20004568:	430a      	orrs	r2, r1
2000456a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
2000456c:	687b      	ldr	r3, [r7, #4]
2000456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20004574:	2b00      	cmp	r3, #0
20004576:	d01a      	beq.n	200045ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
20004578:	687b      	ldr	r3, [r7, #4]
2000457a:	681b      	ldr	r3, [r3, #0]
2000457c:	685b      	ldr	r3, [r3, #4]
2000457e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
20004582:	687b      	ldr	r3, [r7, #4]
20004584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
20004586:	687b      	ldr	r3, [r7, #4]
20004588:	681b      	ldr	r3, [r3, #0]
2000458a:	430a      	orrs	r2, r1
2000458c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
2000458e:	687b      	ldr	r3, [r7, #4]
20004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20004596:	d10a      	bne.n	200045ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
20004598:	687b      	ldr	r3, [r7, #4]
2000459a:	681b      	ldr	r3, [r3, #0]
2000459c:	685b      	ldr	r3, [r3, #4]
2000459e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
200045a2:	687b      	ldr	r3, [r7, #4]
200045a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
200045a6:	687b      	ldr	r3, [r7, #4]
200045a8:	681b      	ldr	r3, [r3, #0]
200045aa:	430a      	orrs	r2, r1
200045ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
200045ae:	687b      	ldr	r3, [r7, #4]
200045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200045b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200045b6:	2b00      	cmp	r3, #0
200045b8:	d00a      	beq.n	200045d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
200045ba:	687b      	ldr	r3, [r7, #4]
200045bc:	681b      	ldr	r3, [r3, #0]
200045be:	685b      	ldr	r3, [r3, #4]
200045c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
200045c4:	687b      	ldr	r3, [r7, #4]
200045c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
200045c8:	687b      	ldr	r3, [r7, #4]
200045ca:	681b      	ldr	r3, [r3, #0]
200045cc:	430a      	orrs	r2, r1
200045ce:	605a      	str	r2, [r3, #4]
  }
}
200045d0:	bf00      	nop
200045d2:	370c      	adds	r7, #12
200045d4:	46bd      	mov	sp, r7
200045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200045da:	4770      	bx	lr

200045dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
200045dc:	b580      	push	{r7, lr}
200045de:	b08c      	sub	sp, #48	@ 0x30
200045e0:	af02      	add	r7, sp, #8
200045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
200045e4:	687b      	ldr	r3, [r7, #4]
200045e6:	2200      	movs	r2, #0
200045e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
200045ec:	f7fd fb78 	bl	20001ce0 <HAL_GetTick>
200045f0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
200045f2:	687b      	ldr	r3, [r7, #4]
200045f4:	681b      	ldr	r3, [r3, #0]
200045f6:	681b      	ldr	r3, [r3, #0]
200045f8:	f003 0308 	and.w	r3, r3, #8
200045fc:	2b08      	cmp	r3, #8
200045fe:	d12e      	bne.n	2000465e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
20004600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
20004604:	9300      	str	r3, [sp, #0]
20004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20004608:	2200      	movs	r2, #0
2000460a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
2000460e:	6878      	ldr	r0, [r7, #4]
20004610:	f000 f83b 	bl	2000468a <UART_WaitOnFlagUntilTimeout>
20004614:	4603      	mov	r3, r0
20004616:	2b00      	cmp	r3, #0
20004618:	d021      	beq.n	2000465e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
2000461a:	687b      	ldr	r3, [r7, #4]
2000461c:	681b      	ldr	r3, [r3, #0]
2000461e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20004620:	693b      	ldr	r3, [r7, #16]
20004622:	e853 3f00 	ldrex	r3, [r3]
20004626:	60fb      	str	r3, [r7, #12]
   return(result);
20004628:	68fb      	ldr	r3, [r7, #12]
2000462a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2000462e:	623b      	str	r3, [r7, #32]
20004630:	687b      	ldr	r3, [r7, #4]
20004632:	681b      	ldr	r3, [r3, #0]
20004634:	461a      	mov	r2, r3
20004636:	6a3b      	ldr	r3, [r7, #32]
20004638:	61fb      	str	r3, [r7, #28]
2000463a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
2000463c:	69b9      	ldr	r1, [r7, #24]
2000463e:	69fa      	ldr	r2, [r7, #28]
20004640:	e841 2300 	strex	r3, r2, [r1]
20004644:	617b      	str	r3, [r7, #20]
   return(result);
20004646:	697b      	ldr	r3, [r7, #20]
20004648:	2b00      	cmp	r3, #0
2000464a:	d1e6      	bne.n	2000461a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
2000464c:	687b      	ldr	r3, [r7, #4]
2000464e:	2220      	movs	r2, #32
20004650:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
20004652:	687b      	ldr	r3, [r7, #4]
20004654:	2200      	movs	r2, #0
20004656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
2000465a:	2303      	movs	r3, #3
2000465c:	e011      	b.n	20004682 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
2000465e:	687b      	ldr	r3, [r7, #4]
20004660:	2220      	movs	r2, #32
20004662:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
20004664:	687b      	ldr	r3, [r7, #4]
20004666:	2220      	movs	r2, #32
20004668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
2000466c:	687b      	ldr	r3, [r7, #4]
2000466e:	2200      	movs	r2, #0
20004670:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
20004672:	687b      	ldr	r3, [r7, #4]
20004674:	2200      	movs	r2, #0
20004676:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
20004678:	687b      	ldr	r3, [r7, #4]
2000467a:	2200      	movs	r2, #0
2000467c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
20004680:	2300      	movs	r3, #0
}
20004682:	4618      	mov	r0, r3
20004684:	3728      	adds	r7, #40	@ 0x28
20004686:	46bd      	mov	sp, r7
20004688:	bd80      	pop	{r7, pc}

2000468a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
2000468a:	b580      	push	{r7, lr}
2000468c:	b084      	sub	sp, #16
2000468e:	af00      	add	r7, sp, #0
20004690:	60f8      	str	r0, [r7, #12]
20004692:	60b9      	str	r1, [r7, #8]
20004694:	603b      	str	r3, [r7, #0]
20004696:	4613      	mov	r3, r2
20004698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2000469a:	e04f      	b.n	2000473c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000469c:	69bb      	ldr	r3, [r7, #24]
2000469e:	f1b3 3fff 	cmp.w	r3, #4294967295
200046a2:	d04b      	beq.n	2000473c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200046a4:	f7fd fb1c 	bl	20001ce0 <HAL_GetTick>
200046a8:	4602      	mov	r2, r0
200046aa:	683b      	ldr	r3, [r7, #0]
200046ac:	1ad3      	subs	r3, r2, r3
200046ae:	69ba      	ldr	r2, [r7, #24]
200046b0:	429a      	cmp	r2, r3
200046b2:	d302      	bcc.n	200046ba <UART_WaitOnFlagUntilTimeout+0x30>
200046b4:	69bb      	ldr	r3, [r7, #24]
200046b6:	2b00      	cmp	r3, #0
200046b8:	d101      	bne.n	200046be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
200046ba:	2303      	movs	r3, #3
200046bc:	e04e      	b.n	2000475c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
200046be:	68fb      	ldr	r3, [r7, #12]
200046c0:	681b      	ldr	r3, [r3, #0]
200046c2:	681b      	ldr	r3, [r3, #0]
200046c4:	f003 0304 	and.w	r3, r3, #4
200046c8:	2b00      	cmp	r3, #0
200046ca:	d037      	beq.n	2000473c <UART_WaitOnFlagUntilTimeout+0xb2>
200046cc:	68bb      	ldr	r3, [r7, #8]
200046ce:	2b80      	cmp	r3, #128	@ 0x80
200046d0:	d034      	beq.n	2000473c <UART_WaitOnFlagUntilTimeout+0xb2>
200046d2:	68bb      	ldr	r3, [r7, #8]
200046d4:	2b40      	cmp	r3, #64	@ 0x40
200046d6:	d031      	beq.n	2000473c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
200046d8:	68fb      	ldr	r3, [r7, #12]
200046da:	681b      	ldr	r3, [r3, #0]
200046dc:	69db      	ldr	r3, [r3, #28]
200046de:	f003 0308 	and.w	r3, r3, #8
200046e2:	2b08      	cmp	r3, #8
200046e4:	d110      	bne.n	20004708 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
200046e6:	68fb      	ldr	r3, [r7, #12]
200046e8:	681b      	ldr	r3, [r3, #0]
200046ea:	2208      	movs	r2, #8
200046ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
200046ee:	68f8      	ldr	r0, [r7, #12]
200046f0:	f000 f838 	bl	20004764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
200046f4:	68fb      	ldr	r3, [r7, #12]
200046f6:	2208      	movs	r2, #8
200046f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
200046fc:	68fb      	ldr	r3, [r7, #12]
200046fe:	2200      	movs	r2, #0
20004700:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
20004704:	2301      	movs	r3, #1
20004706:	e029      	b.n	2000475c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
20004708:	68fb      	ldr	r3, [r7, #12]
2000470a:	681b      	ldr	r3, [r3, #0]
2000470c:	69db      	ldr	r3, [r3, #28]
2000470e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20004712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20004716:	d111      	bne.n	2000473c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
20004718:	68fb      	ldr	r3, [r7, #12]
2000471a:	681b      	ldr	r3, [r3, #0]
2000471c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20004720:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
20004722:	68f8      	ldr	r0, [r7, #12]
20004724:	f000 f81e 	bl	20004764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
20004728:	68fb      	ldr	r3, [r7, #12]
2000472a:	2220      	movs	r2, #32
2000472c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20004730:	68fb      	ldr	r3, [r7, #12]
20004732:	2200      	movs	r2, #0
20004734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
20004738:	2303      	movs	r3, #3
2000473a:	e00f      	b.n	2000475c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2000473c:	68fb      	ldr	r3, [r7, #12]
2000473e:	681b      	ldr	r3, [r3, #0]
20004740:	69da      	ldr	r2, [r3, #28]
20004742:	68bb      	ldr	r3, [r7, #8]
20004744:	4013      	ands	r3, r2
20004746:	68ba      	ldr	r2, [r7, #8]
20004748:	429a      	cmp	r2, r3
2000474a:	bf0c      	ite	eq
2000474c:	2301      	moveq	r3, #1
2000474e:	2300      	movne	r3, #0
20004750:	b2db      	uxtb	r3, r3
20004752:	461a      	mov	r2, r3
20004754:	79fb      	ldrb	r3, [r7, #7]
20004756:	429a      	cmp	r2, r3
20004758:	d0a0      	beq.n	2000469c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
2000475a:	2300      	movs	r3, #0
}
2000475c:	4618      	mov	r0, r3
2000475e:	3710      	adds	r7, #16
20004760:	46bd      	mov	sp, r7
20004762:	bd80      	pop	{r7, pc}

20004764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
20004764:	b480      	push	{r7}
20004766:	b095      	sub	sp, #84	@ 0x54
20004768:	af00      	add	r7, sp, #0
2000476a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2000476c:	687b      	ldr	r3, [r7, #4]
2000476e:	681b      	ldr	r3, [r3, #0]
20004770:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20004774:	e853 3f00 	ldrex	r3, [r3]
20004778:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
2000477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000477c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
20004780:	64fb      	str	r3, [r7, #76]	@ 0x4c
20004782:	687b      	ldr	r3, [r7, #4]
20004784:	681b      	ldr	r3, [r3, #0]
20004786:	461a      	mov	r2, r3
20004788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000478a:	643b      	str	r3, [r7, #64]	@ 0x40
2000478c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
2000478e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
20004790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
20004792:	e841 2300 	strex	r3, r2, [r1]
20004796:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
20004798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000479a:	2b00      	cmp	r3, #0
2000479c:	d1e6      	bne.n	2000476c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2000479e:	687b      	ldr	r3, [r7, #4]
200047a0:	681b      	ldr	r3, [r3, #0]
200047a2:	3308      	adds	r3, #8
200047a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200047a6:	6a3b      	ldr	r3, [r7, #32]
200047a8:	e853 3f00 	ldrex	r3, [r3]
200047ac:	61fb      	str	r3, [r7, #28]
   return(result);
200047ae:	69fb      	ldr	r3, [r7, #28]
200047b0:	f023 0301 	bic.w	r3, r3, #1
200047b4:	64bb      	str	r3, [r7, #72]	@ 0x48
200047b6:	687b      	ldr	r3, [r7, #4]
200047b8:	681b      	ldr	r3, [r3, #0]
200047ba:	3308      	adds	r3, #8
200047bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
200047be:	62fa      	str	r2, [r7, #44]	@ 0x2c
200047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200047c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
200047c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200047c6:	e841 2300 	strex	r3, r2, [r1]
200047ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
200047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200047ce:	2b00      	cmp	r3, #0
200047d0:	d1e5      	bne.n	2000479e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
200047d2:	687b      	ldr	r3, [r7, #4]
200047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200047d6:	2b01      	cmp	r3, #1
200047d8:	d118      	bne.n	2000480c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
200047da:	687b      	ldr	r3, [r7, #4]
200047dc:	681b      	ldr	r3, [r3, #0]
200047de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200047e0:	68fb      	ldr	r3, [r7, #12]
200047e2:	e853 3f00 	ldrex	r3, [r3]
200047e6:	60bb      	str	r3, [r7, #8]
   return(result);
200047e8:	68bb      	ldr	r3, [r7, #8]
200047ea:	f023 0310 	bic.w	r3, r3, #16
200047ee:	647b      	str	r3, [r7, #68]	@ 0x44
200047f0:	687b      	ldr	r3, [r7, #4]
200047f2:	681b      	ldr	r3, [r3, #0]
200047f4:	461a      	mov	r2, r3
200047f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200047f8:	61bb      	str	r3, [r7, #24]
200047fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200047fc:	6979      	ldr	r1, [r7, #20]
200047fe:	69ba      	ldr	r2, [r7, #24]
20004800:	e841 2300 	strex	r3, r2, [r1]
20004804:	613b      	str	r3, [r7, #16]
   return(result);
20004806:	693b      	ldr	r3, [r7, #16]
20004808:	2b00      	cmp	r3, #0
2000480a:	d1e6      	bne.n	200047da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
2000480c:	687b      	ldr	r3, [r7, #4]
2000480e:	2220      	movs	r2, #32
20004810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
20004814:	687b      	ldr	r3, [r7, #4]
20004816:	2200      	movs	r2, #0
20004818:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
2000481a:	687b      	ldr	r3, [r7, #4]
2000481c:	2200      	movs	r2, #0
2000481e:	669a      	str	r2, [r3, #104]	@ 0x68
}
20004820:	bf00      	nop
20004822:	3754      	adds	r7, #84	@ 0x54
20004824:	46bd      	mov	sp, r7
20004826:	f85d 7b04 	ldr.w	r7, [sp], #4
2000482a:	4770      	bx	lr

2000482c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
2000482c:	b084      	sub	sp, #16
2000482e:	b580      	push	{r7, lr}
20004830:	b084      	sub	sp, #16
20004832:	af00      	add	r7, sp, #0
20004834:	6078      	str	r0, [r7, #4]
20004836:	f107 001c 	add.w	r0, r7, #28
2000483a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
2000483e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20004842:	2b01      	cmp	r3, #1
20004844:	d121      	bne.n	2000488a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
20004846:	687b      	ldr	r3, [r7, #4]
20004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000484a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
2000484e:	687b      	ldr	r3, [r7, #4]
20004850:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
20004852:	687b      	ldr	r3, [r7, #4]
20004854:	68da      	ldr	r2, [r3, #12]
20004856:	4b21      	ldr	r3, [pc, #132]	@ (200048dc <USB_CoreInit+0xb0>)
20004858:	4013      	ands	r3, r2
2000485a:	687a      	ldr	r2, [r7, #4]
2000485c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
2000485e:	687b      	ldr	r3, [r7, #4]
20004860:	68db      	ldr	r3, [r3, #12]
20004862:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20004866:	687b      	ldr	r3, [r7, #4]
20004868:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
2000486a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
2000486e:	2b01      	cmp	r3, #1
20004870:	d105      	bne.n	2000487e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
20004872:	687b      	ldr	r3, [r7, #4]
20004874:	68db      	ldr	r3, [r3, #12]
20004876:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
2000487a:	687b      	ldr	r3, [r7, #4]
2000487c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
2000487e:	6878      	ldr	r0, [r7, #4]
20004880:	f000 fa92 	bl	20004da8 <USB_CoreReset>
20004884:	4603      	mov	r3, r0
20004886:	73fb      	strb	r3, [r7, #15]
20004888:	e010      	b.n	200048ac <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
2000488a:	687b      	ldr	r3, [r7, #4]
2000488c:	68db      	ldr	r3, [r3, #12]
2000488e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20004892:	687b      	ldr	r3, [r7, #4]
20004894:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
20004896:	6878      	ldr	r0, [r7, #4]
20004898:	f000 fa86 	bl	20004da8 <USB_CoreReset>
2000489c:	4603      	mov	r3, r0
2000489e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
200048a0:	687b      	ldr	r3, [r7, #4]
200048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200048a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
200048a8:	687b      	ldr	r3, [r7, #4]
200048aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
200048ac:	7fbb      	ldrb	r3, [r7, #30]
200048ae:	2b01      	cmp	r3, #1
200048b0:	d10b      	bne.n	200048ca <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
200048b2:	687b      	ldr	r3, [r7, #4]
200048b4:	689b      	ldr	r3, [r3, #8]
200048b6:	f043 0206 	orr.w	r2, r3, #6
200048ba:	687b      	ldr	r3, [r7, #4]
200048bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
200048be:	687b      	ldr	r3, [r7, #4]
200048c0:	689b      	ldr	r3, [r3, #8]
200048c2:	f043 0220 	orr.w	r2, r3, #32
200048c6:	687b      	ldr	r3, [r7, #4]
200048c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
200048ca:	7bfb      	ldrb	r3, [r7, #15]
}
200048cc:	4618      	mov	r0, r3
200048ce:	3710      	adds	r7, #16
200048d0:	46bd      	mov	sp, r7
200048d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
200048d6:	b004      	add	sp, #16
200048d8:	4770      	bx	lr
200048da:	bf00      	nop
200048dc:	ffbdffbf 	.word	0xffbdffbf

200048e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
200048e0:	b480      	push	{r7}
200048e2:	b083      	sub	sp, #12
200048e4:	af00      	add	r7, sp, #0
200048e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
200048e8:	687b      	ldr	r3, [r7, #4]
200048ea:	689b      	ldr	r3, [r3, #8]
200048ec:	f023 0201 	bic.w	r2, r3, #1
200048f0:	687b      	ldr	r3, [r7, #4]
200048f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
200048f4:	2300      	movs	r3, #0
}
200048f6:	4618      	mov	r0, r3
200048f8:	370c      	adds	r7, #12
200048fa:	46bd      	mov	sp, r7
200048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004900:	4770      	bx	lr

20004902 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
20004902:	b580      	push	{r7, lr}
20004904:	b084      	sub	sp, #16
20004906:	af00      	add	r7, sp, #0
20004908:	6078      	str	r0, [r7, #4]
2000490a:	460b      	mov	r3, r1
2000490c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
2000490e:	2300      	movs	r3, #0
20004910:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
20004912:	687b      	ldr	r3, [r7, #4]
20004914:	68db      	ldr	r3, [r3, #12]
20004916:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
2000491a:	687b      	ldr	r3, [r7, #4]
2000491c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
2000491e:	78fb      	ldrb	r3, [r7, #3]
20004920:	2b01      	cmp	r3, #1
20004922:	d115      	bne.n	20004950 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
20004924:	687b      	ldr	r3, [r7, #4]
20004926:	68db      	ldr	r3, [r3, #12]
20004928:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
2000492c:	687b      	ldr	r3, [r7, #4]
2000492e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20004930:	200a      	movs	r0, #10
20004932:	f7fd f9e1 	bl	20001cf8 <HAL_Delay>
      ms += 10U;
20004936:	68fb      	ldr	r3, [r7, #12]
20004938:	330a      	adds	r3, #10
2000493a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
2000493c:	6878      	ldr	r0, [r7, #4]
2000493e:	f000 fa25 	bl	20004d8c <USB_GetMode>
20004942:	4603      	mov	r3, r0
20004944:	2b01      	cmp	r3, #1
20004946:	d01e      	beq.n	20004986 <USB_SetCurrentMode+0x84>
20004948:	68fb      	ldr	r3, [r7, #12]
2000494a:	2bc7      	cmp	r3, #199	@ 0xc7
2000494c:	d9f0      	bls.n	20004930 <USB_SetCurrentMode+0x2e>
2000494e:	e01a      	b.n	20004986 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
20004950:	78fb      	ldrb	r3, [r7, #3]
20004952:	2b00      	cmp	r3, #0
20004954:	d115      	bne.n	20004982 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
20004956:	687b      	ldr	r3, [r7, #4]
20004958:	68db      	ldr	r3, [r3, #12]
2000495a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
2000495e:	687b      	ldr	r3, [r7, #4]
20004960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20004962:	200a      	movs	r0, #10
20004964:	f7fd f9c8 	bl	20001cf8 <HAL_Delay>
      ms += 10U;
20004968:	68fb      	ldr	r3, [r7, #12]
2000496a:	330a      	adds	r3, #10
2000496c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
2000496e:	6878      	ldr	r0, [r7, #4]
20004970:	f000 fa0c 	bl	20004d8c <USB_GetMode>
20004974:	4603      	mov	r3, r0
20004976:	2b00      	cmp	r3, #0
20004978:	d005      	beq.n	20004986 <USB_SetCurrentMode+0x84>
2000497a:	68fb      	ldr	r3, [r7, #12]
2000497c:	2bc7      	cmp	r3, #199	@ 0xc7
2000497e:	d9f0      	bls.n	20004962 <USB_SetCurrentMode+0x60>
20004980:	e001      	b.n	20004986 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
20004982:	2301      	movs	r3, #1
20004984:	e005      	b.n	20004992 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
20004986:	68fb      	ldr	r3, [r7, #12]
20004988:	2bc8      	cmp	r3, #200	@ 0xc8
2000498a:	d101      	bne.n	20004990 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
2000498c:	2301      	movs	r3, #1
2000498e:	e000      	b.n	20004992 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
20004990:	2300      	movs	r3, #0
}
20004992:	4618      	mov	r0, r3
20004994:	3710      	adds	r7, #16
20004996:	46bd      	mov	sp, r7
20004998:	bd80      	pop	{r7, pc}
	...

2000499c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
2000499c:	b084      	sub	sp, #16
2000499e:	b580      	push	{r7, lr}
200049a0:	b086      	sub	sp, #24
200049a2:	af00      	add	r7, sp, #0
200049a4:	6078      	str	r0, [r7, #4]
200049a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
200049aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
200049ae:	2300      	movs	r3, #0
200049b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
200049b2:	687b      	ldr	r3, [r7, #4]
200049b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
200049b6:	2300      	movs	r3, #0
200049b8:	613b      	str	r3, [r7, #16]
200049ba:	e009      	b.n	200049d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
200049bc:	687a      	ldr	r2, [r7, #4]
200049be:	693b      	ldr	r3, [r7, #16]
200049c0:	3340      	adds	r3, #64	@ 0x40
200049c2:	009b      	lsls	r3, r3, #2
200049c4:	4413      	add	r3, r2
200049c6:	2200      	movs	r2, #0
200049c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
200049ca:	693b      	ldr	r3, [r7, #16]
200049cc:	3301      	adds	r3, #1
200049ce:	613b      	str	r3, [r7, #16]
200049d0:	693b      	ldr	r3, [r7, #16]
200049d2:	2b0e      	cmp	r3, #14
200049d4:	d9f2      	bls.n	200049bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
200049d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
200049da:	2b00      	cmp	r3, #0
200049dc:	d11c      	bne.n	20004a18 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
200049de:	68fb      	ldr	r3, [r7, #12]
200049e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200049e4:	685b      	ldr	r3, [r3, #4]
200049e6:	68fa      	ldr	r2, [r7, #12]
200049e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200049ec:	f043 0302 	orr.w	r3, r3, #2
200049f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
200049f2:	687b      	ldr	r3, [r7, #4]
200049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200049f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
200049fa:	687b      	ldr	r3, [r7, #4]
200049fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
200049fe:	687b      	ldr	r3, [r7, #4]
20004a00:	681b      	ldr	r3, [r3, #0]
20004a02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20004a06:	687b      	ldr	r3, [r7, #4]
20004a08:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
20004a0a:	687b      	ldr	r3, [r7, #4]
20004a0c:	681b      	ldr	r3, [r3, #0]
20004a0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20004a12:	687b      	ldr	r3, [r7, #4]
20004a14:	601a      	str	r2, [r3, #0]
20004a16:	e005      	b.n	20004a24 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
20004a18:	687b      	ldr	r3, [r7, #4]
20004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20004a1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
20004a20:	687b      	ldr	r3, [r7, #4]
20004a22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
20004a24:	68fb      	ldr	r3, [r7, #12]
20004a26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
20004a2a:	461a      	mov	r2, r3
20004a2c:	2300      	movs	r3, #0
20004a2e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
20004a30:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
20004a34:	2b01      	cmp	r3, #1
20004a36:	d10d      	bne.n	20004a54 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
20004a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
20004a3c:	2b00      	cmp	r3, #0
20004a3e:	d104      	bne.n	20004a4a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
20004a40:	2100      	movs	r1, #0
20004a42:	6878      	ldr	r0, [r7, #4]
20004a44:	f000 f968 	bl	20004d18 <USB_SetDevSpeed>
20004a48:	e008      	b.n	20004a5c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
20004a4a:	2101      	movs	r1, #1
20004a4c:	6878      	ldr	r0, [r7, #4]
20004a4e:	f000 f963 	bl	20004d18 <USB_SetDevSpeed>
20004a52:	e003      	b.n	20004a5c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
20004a54:	2103      	movs	r1, #3
20004a56:	6878      	ldr	r0, [r7, #4]
20004a58:	f000 f95e 	bl	20004d18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
20004a5c:	2110      	movs	r1, #16
20004a5e:	6878      	ldr	r0, [r7, #4]
20004a60:	f000 f8fa 	bl	20004c58 <USB_FlushTxFifo>
20004a64:	4603      	mov	r3, r0
20004a66:	2b00      	cmp	r3, #0
20004a68:	d001      	beq.n	20004a6e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
20004a6a:	2301      	movs	r3, #1
20004a6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
20004a6e:	6878      	ldr	r0, [r7, #4]
20004a70:	f000 f924 	bl	20004cbc <USB_FlushRxFifo>
20004a74:	4603      	mov	r3, r0
20004a76:	2b00      	cmp	r3, #0
20004a78:	d001      	beq.n	20004a7e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
20004a7a:	2301      	movs	r3, #1
20004a7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
20004a7e:	68fb      	ldr	r3, [r7, #12]
20004a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20004a84:	461a      	mov	r2, r3
20004a86:	2300      	movs	r3, #0
20004a88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
20004a8a:	68fb      	ldr	r3, [r7, #12]
20004a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20004a90:	461a      	mov	r2, r3
20004a92:	2300      	movs	r3, #0
20004a94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
20004a96:	68fb      	ldr	r3, [r7, #12]
20004a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20004a9c:	461a      	mov	r2, r3
20004a9e:	2300      	movs	r3, #0
20004aa0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
20004aa2:	2300      	movs	r3, #0
20004aa4:	613b      	str	r3, [r7, #16]
20004aa6:	e043      	b.n	20004b30 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20004aa8:	693b      	ldr	r3, [r7, #16]
20004aaa:	015a      	lsls	r2, r3, #5
20004aac:	68fb      	ldr	r3, [r7, #12]
20004aae:	4413      	add	r3, r2
20004ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20004ab4:	681b      	ldr	r3, [r3, #0]
20004ab6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20004aba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20004abe:	d118      	bne.n	20004af2 <USB_DevInit+0x156>
    {
      if (i == 0U)
20004ac0:	693b      	ldr	r3, [r7, #16]
20004ac2:	2b00      	cmp	r3, #0
20004ac4:	d10a      	bne.n	20004adc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
20004ac6:	693b      	ldr	r3, [r7, #16]
20004ac8:	015a      	lsls	r2, r3, #5
20004aca:	68fb      	ldr	r3, [r7, #12]
20004acc:	4413      	add	r3, r2
20004ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20004ad2:	461a      	mov	r2, r3
20004ad4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20004ad8:	6013      	str	r3, [r2, #0]
20004ada:	e013      	b.n	20004b04 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
20004adc:	693b      	ldr	r3, [r7, #16]
20004ade:	015a      	lsls	r2, r3, #5
20004ae0:	68fb      	ldr	r3, [r7, #12]
20004ae2:	4413      	add	r3, r2
20004ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20004ae8:	461a      	mov	r2, r3
20004aea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20004aee:	6013      	str	r3, [r2, #0]
20004af0:	e008      	b.n	20004b04 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
20004af2:	693b      	ldr	r3, [r7, #16]
20004af4:	015a      	lsls	r2, r3, #5
20004af6:	68fb      	ldr	r3, [r7, #12]
20004af8:	4413      	add	r3, r2
20004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20004afe:	461a      	mov	r2, r3
20004b00:	2300      	movs	r3, #0
20004b02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
20004b04:	693b      	ldr	r3, [r7, #16]
20004b06:	015a      	lsls	r2, r3, #5
20004b08:	68fb      	ldr	r3, [r7, #12]
20004b0a:	4413      	add	r3, r2
20004b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20004b10:	461a      	mov	r2, r3
20004b12:	2300      	movs	r3, #0
20004b14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
20004b16:	693b      	ldr	r3, [r7, #16]
20004b18:	015a      	lsls	r2, r3, #5
20004b1a:	68fb      	ldr	r3, [r7, #12]
20004b1c:	4413      	add	r3, r2
20004b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20004b22:	461a      	mov	r2, r3
20004b24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20004b28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
20004b2a:	693b      	ldr	r3, [r7, #16]
20004b2c:	3301      	adds	r3, #1
20004b2e:	613b      	str	r3, [r7, #16]
20004b30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20004b34:	461a      	mov	r2, r3
20004b36:	693b      	ldr	r3, [r7, #16]
20004b38:	4293      	cmp	r3, r2
20004b3a:	d3b5      	bcc.n	20004aa8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
20004b3c:	2300      	movs	r3, #0
20004b3e:	613b      	str	r3, [r7, #16]
20004b40:	e043      	b.n	20004bca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20004b42:	693b      	ldr	r3, [r7, #16]
20004b44:	015a      	lsls	r2, r3, #5
20004b46:	68fb      	ldr	r3, [r7, #12]
20004b48:	4413      	add	r3, r2
20004b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20004b4e:	681b      	ldr	r3, [r3, #0]
20004b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20004b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20004b58:	d118      	bne.n	20004b8c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
20004b5a:	693b      	ldr	r3, [r7, #16]
20004b5c:	2b00      	cmp	r3, #0
20004b5e:	d10a      	bne.n	20004b76 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
20004b60:	693b      	ldr	r3, [r7, #16]
20004b62:	015a      	lsls	r2, r3, #5
20004b64:	68fb      	ldr	r3, [r7, #12]
20004b66:	4413      	add	r3, r2
20004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20004b6c:	461a      	mov	r2, r3
20004b6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20004b72:	6013      	str	r3, [r2, #0]
20004b74:	e013      	b.n	20004b9e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
20004b76:	693b      	ldr	r3, [r7, #16]
20004b78:	015a      	lsls	r2, r3, #5
20004b7a:	68fb      	ldr	r3, [r7, #12]
20004b7c:	4413      	add	r3, r2
20004b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20004b82:	461a      	mov	r2, r3
20004b84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20004b88:	6013      	str	r3, [r2, #0]
20004b8a:	e008      	b.n	20004b9e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
20004b8c:	693b      	ldr	r3, [r7, #16]
20004b8e:	015a      	lsls	r2, r3, #5
20004b90:	68fb      	ldr	r3, [r7, #12]
20004b92:	4413      	add	r3, r2
20004b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20004b98:	461a      	mov	r2, r3
20004b9a:	2300      	movs	r3, #0
20004b9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
20004b9e:	693b      	ldr	r3, [r7, #16]
20004ba0:	015a      	lsls	r2, r3, #5
20004ba2:	68fb      	ldr	r3, [r7, #12]
20004ba4:	4413      	add	r3, r2
20004ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20004baa:	461a      	mov	r2, r3
20004bac:	2300      	movs	r3, #0
20004bae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
20004bb0:	693b      	ldr	r3, [r7, #16]
20004bb2:	015a      	lsls	r2, r3, #5
20004bb4:	68fb      	ldr	r3, [r7, #12]
20004bb6:	4413      	add	r3, r2
20004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20004bbc:	461a      	mov	r2, r3
20004bbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20004bc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
20004bc4:	693b      	ldr	r3, [r7, #16]
20004bc6:	3301      	adds	r3, #1
20004bc8:	613b      	str	r3, [r7, #16]
20004bca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20004bce:	461a      	mov	r2, r3
20004bd0:	693b      	ldr	r3, [r7, #16]
20004bd2:	4293      	cmp	r3, r2
20004bd4:	d3b5      	bcc.n	20004b42 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
20004bd6:	68fb      	ldr	r3, [r7, #12]
20004bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20004bdc:	691b      	ldr	r3, [r3, #16]
20004bde:	68fa      	ldr	r2, [r7, #12]
20004be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20004be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
20004be8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
20004bea:	687b      	ldr	r3, [r7, #4]
20004bec:	2200      	movs	r2, #0
20004bee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
20004bf0:	687b      	ldr	r3, [r7, #4]
20004bf2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
20004bf6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
20004bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
20004bfc:	2b00      	cmp	r3, #0
20004bfe:	d105      	bne.n	20004c0c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
20004c00:	687b      	ldr	r3, [r7, #4]
20004c02:	699b      	ldr	r3, [r3, #24]
20004c04:	f043 0210 	orr.w	r2, r3, #16
20004c08:	687b      	ldr	r3, [r7, #4]
20004c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
20004c0c:	687b      	ldr	r3, [r7, #4]
20004c0e:	699a      	ldr	r2, [r3, #24]
20004c10:	4b0f      	ldr	r3, [pc, #60]	@ (20004c50 <USB_DevInit+0x2b4>)
20004c12:	4313      	orrs	r3, r2
20004c14:	687a      	ldr	r2, [r7, #4]
20004c16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
20004c18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
20004c1c:	2b00      	cmp	r3, #0
20004c1e:	d005      	beq.n	20004c2c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
20004c20:	687b      	ldr	r3, [r7, #4]
20004c22:	699b      	ldr	r3, [r3, #24]
20004c24:	f043 0208 	orr.w	r2, r3, #8
20004c28:	687b      	ldr	r3, [r7, #4]
20004c2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
20004c2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
20004c30:	2b01      	cmp	r3, #1
20004c32:	d105      	bne.n	20004c40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
20004c34:	687b      	ldr	r3, [r7, #4]
20004c36:	699a      	ldr	r2, [r3, #24]
20004c38:	4b06      	ldr	r3, [pc, #24]	@ (20004c54 <USB_DevInit+0x2b8>)
20004c3a:	4313      	orrs	r3, r2
20004c3c:	687a      	ldr	r2, [r7, #4]
20004c3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
20004c40:	7dfb      	ldrb	r3, [r7, #23]
}
20004c42:	4618      	mov	r0, r3
20004c44:	3718      	adds	r7, #24
20004c46:	46bd      	mov	sp, r7
20004c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20004c4c:	b004      	add	sp, #16
20004c4e:	4770      	bx	lr
20004c50:	803c3800 	.word	0x803c3800
20004c54:	40000004 	.word	0x40000004

20004c58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
20004c58:	b480      	push	{r7}
20004c5a:	b085      	sub	sp, #20
20004c5c:	af00      	add	r7, sp, #0
20004c5e:	6078      	str	r0, [r7, #4]
20004c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
20004c62:	2300      	movs	r3, #0
20004c64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20004c66:	68fb      	ldr	r3, [r7, #12]
20004c68:	3301      	adds	r3, #1
20004c6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20004c6c:	68fb      	ldr	r3, [r7, #12]
20004c6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20004c72:	d901      	bls.n	20004c78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
20004c74:	2303      	movs	r3, #3
20004c76:	e01b      	b.n	20004cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20004c78:	687b      	ldr	r3, [r7, #4]
20004c7a:	691b      	ldr	r3, [r3, #16]
20004c7c:	2b00      	cmp	r3, #0
20004c7e:	daf2      	bge.n	20004c66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
20004c80:	2300      	movs	r3, #0
20004c82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
20004c84:	683b      	ldr	r3, [r7, #0]
20004c86:	019b      	lsls	r3, r3, #6
20004c88:	f043 0220 	orr.w	r2, r3, #32
20004c8c:	687b      	ldr	r3, [r7, #4]
20004c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20004c90:	68fb      	ldr	r3, [r7, #12]
20004c92:	3301      	adds	r3, #1
20004c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20004c96:	68fb      	ldr	r3, [r7, #12]
20004c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20004c9c:	d901      	bls.n	20004ca2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
20004c9e:	2303      	movs	r3, #3
20004ca0:	e006      	b.n	20004cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
20004ca2:	687b      	ldr	r3, [r7, #4]
20004ca4:	691b      	ldr	r3, [r3, #16]
20004ca6:	f003 0320 	and.w	r3, r3, #32
20004caa:	2b20      	cmp	r3, #32
20004cac:	d0f0      	beq.n	20004c90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
20004cae:	2300      	movs	r3, #0
}
20004cb0:	4618      	mov	r0, r3
20004cb2:	3714      	adds	r7, #20
20004cb4:	46bd      	mov	sp, r7
20004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cba:	4770      	bx	lr

20004cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
20004cbc:	b480      	push	{r7}
20004cbe:	b085      	sub	sp, #20
20004cc0:	af00      	add	r7, sp, #0
20004cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
20004cc4:	2300      	movs	r3, #0
20004cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20004cc8:	68fb      	ldr	r3, [r7, #12]
20004cca:	3301      	adds	r3, #1
20004ccc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20004cce:	68fb      	ldr	r3, [r7, #12]
20004cd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20004cd4:	d901      	bls.n	20004cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
20004cd6:	2303      	movs	r3, #3
20004cd8:	e018      	b.n	20004d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20004cda:	687b      	ldr	r3, [r7, #4]
20004cdc:	691b      	ldr	r3, [r3, #16]
20004cde:	2b00      	cmp	r3, #0
20004ce0:	daf2      	bge.n	20004cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
20004ce2:	2300      	movs	r3, #0
20004ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
20004ce6:	687b      	ldr	r3, [r7, #4]
20004ce8:	2210      	movs	r2, #16
20004cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20004cec:	68fb      	ldr	r3, [r7, #12]
20004cee:	3301      	adds	r3, #1
20004cf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20004cf2:	68fb      	ldr	r3, [r7, #12]
20004cf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20004cf8:	d901      	bls.n	20004cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
20004cfa:	2303      	movs	r3, #3
20004cfc:	e006      	b.n	20004d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
20004cfe:	687b      	ldr	r3, [r7, #4]
20004d00:	691b      	ldr	r3, [r3, #16]
20004d02:	f003 0310 	and.w	r3, r3, #16
20004d06:	2b10      	cmp	r3, #16
20004d08:	d0f0      	beq.n	20004cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
20004d0a:	2300      	movs	r3, #0
}
20004d0c:	4618      	mov	r0, r3
20004d0e:	3714      	adds	r7, #20
20004d10:	46bd      	mov	sp, r7
20004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d16:	4770      	bx	lr

20004d18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
20004d18:	b480      	push	{r7}
20004d1a:	b085      	sub	sp, #20
20004d1c:	af00      	add	r7, sp, #0
20004d1e:	6078      	str	r0, [r7, #4]
20004d20:	460b      	mov	r3, r1
20004d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20004d24:	687b      	ldr	r3, [r7, #4]
20004d26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
20004d28:	68fb      	ldr	r3, [r7, #12]
20004d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20004d2e:	681a      	ldr	r2, [r3, #0]
20004d30:	78fb      	ldrb	r3, [r7, #3]
20004d32:	68f9      	ldr	r1, [r7, #12]
20004d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20004d38:	4313      	orrs	r3, r2
20004d3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
20004d3c:	2300      	movs	r3, #0
}
20004d3e:	4618      	mov	r0, r3
20004d40:	3714      	adds	r7, #20
20004d42:	46bd      	mov	sp, r7
20004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d48:	4770      	bx	lr

20004d4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
20004d4a:	b480      	push	{r7}
20004d4c:	b085      	sub	sp, #20
20004d4e:	af00      	add	r7, sp, #0
20004d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20004d52:	687b      	ldr	r3, [r7, #4]
20004d54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
20004d56:	68fb      	ldr	r3, [r7, #12]
20004d58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
20004d5c:	681b      	ldr	r3, [r3, #0]
20004d5e:	68fa      	ldr	r2, [r7, #12]
20004d60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
20004d64:	f023 0303 	bic.w	r3, r3, #3
20004d68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
20004d6a:	68fb      	ldr	r3, [r7, #12]
20004d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20004d70:	685b      	ldr	r3, [r3, #4]
20004d72:	68fa      	ldr	r2, [r7, #12]
20004d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20004d78:	f043 0302 	orr.w	r3, r3, #2
20004d7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
20004d7e:	2300      	movs	r3, #0
}
20004d80:	4618      	mov	r0, r3
20004d82:	3714      	adds	r7, #20
20004d84:	46bd      	mov	sp, r7
20004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d8a:	4770      	bx	lr

20004d8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
20004d8c:	b480      	push	{r7}
20004d8e:	b083      	sub	sp, #12
20004d90:	af00      	add	r7, sp, #0
20004d92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
20004d94:	687b      	ldr	r3, [r7, #4]
20004d96:	695b      	ldr	r3, [r3, #20]
20004d98:	f003 0301 	and.w	r3, r3, #1
}
20004d9c:	4618      	mov	r0, r3
20004d9e:	370c      	adds	r7, #12
20004da0:	46bd      	mov	sp, r7
20004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
20004da6:	4770      	bx	lr

20004da8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
20004da8:	b480      	push	{r7}
20004daa:	b085      	sub	sp, #20
20004dac:	af00      	add	r7, sp, #0
20004dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
20004db0:	2300      	movs	r3, #0
20004db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20004db4:	68fb      	ldr	r3, [r7, #12]
20004db6:	3301      	adds	r3, #1
20004db8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20004dba:	68fb      	ldr	r3, [r7, #12]
20004dbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20004dc0:	d901      	bls.n	20004dc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
20004dc2:	2303      	movs	r3, #3
20004dc4:	e022      	b.n	20004e0c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20004dc6:	687b      	ldr	r3, [r7, #4]
20004dc8:	691b      	ldr	r3, [r3, #16]
20004dca:	2b00      	cmp	r3, #0
20004dcc:	daf2      	bge.n	20004db4 <USB_CoreReset+0xc>

  count = 10U;
20004dce:	230a      	movs	r3, #10
20004dd0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
20004dd2:	e002      	b.n	20004dda <USB_CoreReset+0x32>
  {
    count--;
20004dd4:	68fb      	ldr	r3, [r7, #12]
20004dd6:	3b01      	subs	r3, #1
20004dd8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
20004dda:	68fb      	ldr	r3, [r7, #12]
20004ddc:	2b00      	cmp	r3, #0
20004dde:	d1f9      	bne.n	20004dd4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
20004de0:	687b      	ldr	r3, [r7, #4]
20004de2:	691b      	ldr	r3, [r3, #16]
20004de4:	f043 0201 	orr.w	r2, r3, #1
20004de8:	687b      	ldr	r3, [r7, #4]
20004dea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20004dec:	68fb      	ldr	r3, [r7, #12]
20004dee:	3301      	adds	r3, #1
20004df0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20004df2:	68fb      	ldr	r3, [r7, #12]
20004df4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20004df8:	d901      	bls.n	20004dfe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
20004dfa:	2303      	movs	r3, #3
20004dfc:	e006      	b.n	20004e0c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
20004dfe:	687b      	ldr	r3, [r7, #4]
20004e00:	691b      	ldr	r3, [r3, #16]
20004e02:	f003 0301 	and.w	r3, r3, #1
20004e06:	2b01      	cmp	r3, #1
20004e08:	d0f0      	beq.n	20004dec <USB_CoreReset+0x44>

  return HAL_OK;
20004e0a:	2300      	movs	r3, #0
}
20004e0c:	4618      	mov	r0, r3
20004e0e:	3714      	adds	r7, #20
20004e10:	46bd      	mov	sp, r7
20004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e16:	4770      	bx	lr

20004e18 <memset>:
20004e18:	4402      	add	r2, r0
20004e1a:	4603      	mov	r3, r0
20004e1c:	4293      	cmp	r3, r2
20004e1e:	d100      	bne.n	20004e22 <memset+0xa>
20004e20:	4770      	bx	lr
20004e22:	f803 1b01 	strb.w	r1, [r3], #1
20004e26:	e7f9      	b.n	20004e1c <memset+0x4>

20004e28 <__libc_init_array>:
20004e28:	b570      	push	{r4, r5, r6, lr}
20004e2a:	4d0d      	ldr	r5, [pc, #52]	@ (20004e60 <__libc_init_array+0x38>)
20004e2c:	4c0d      	ldr	r4, [pc, #52]	@ (20004e64 <__libc_init_array+0x3c>)
20004e2e:	1b64      	subs	r4, r4, r5
20004e30:	10a4      	asrs	r4, r4, #2
20004e32:	2600      	movs	r6, #0
20004e34:	42a6      	cmp	r6, r4
20004e36:	d109      	bne.n	20004e4c <__libc_init_array+0x24>
20004e38:	4d0b      	ldr	r5, [pc, #44]	@ (20004e68 <__libc_init_array+0x40>)
20004e3a:	4c0c      	ldr	r4, [pc, #48]	@ (20004e6c <__libc_init_array+0x44>)
20004e3c:	f000 f818 	bl	20004e70 <_init>
20004e40:	1b64      	subs	r4, r4, r5
20004e42:	10a4      	asrs	r4, r4, #2
20004e44:	2600      	movs	r6, #0
20004e46:	42a6      	cmp	r6, r4
20004e48:	d105      	bne.n	20004e56 <__libc_init_array+0x2e>
20004e4a:	bd70      	pop	{r4, r5, r6, pc}
20004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
20004e50:	4798      	blx	r3
20004e52:	3601      	adds	r6, #1
20004e54:	e7ee      	b.n	20004e34 <__libc_init_array+0xc>
20004e56:	f855 3b04 	ldr.w	r3, [r5], #4
20004e5a:	4798      	blx	r3
20004e5c:	3601      	adds	r6, #1
20004e5e:	e7f2      	b.n	20004e46 <__libc_init_array+0x1e>
20004e60:	20004ea8 	.word	0x20004ea8
20004e64:	20004ea8 	.word	0x20004ea8
20004e68:	20004ea8 	.word	0x20004ea8
20004e6c:	20004eac 	.word	0x20004eac

20004e70 <_init>:
20004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20004e72:	bf00      	nop
20004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
20004e76:	bc08      	pop	{r3}
20004e78:	469e      	mov	lr, r3
20004e7a:	4770      	bx	lr

20004e7c <_fini>:
20004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20004e7e:	bf00      	nop
20004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
20004e82:	bc08      	pop	{r3}
20004e84:	469e      	mov	lr, r3
20004e86:	4770      	bx	lr
