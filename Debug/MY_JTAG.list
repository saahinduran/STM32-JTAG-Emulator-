
MY_JTAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d318  200001c8  200001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  2000d4e0  2000d4e0  0000e4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000d540  2000d540  0000e818  2**0
                  CONTENTS
  4 .ARM          00000008  2000d540  2000d540  0000e540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000d548  2000d818  0000e818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000d548  2000d548  0000e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  2000d54c  2000d54c  0000e54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  2000d550  2000d550  0000e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000d6d8  2000d6d8  0000e6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000d778  2000d778  0000e778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001ee0  2000d818  2000d818  0000e818  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000f6f8  2000f6f8  0000e818  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e818  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e084  00000000  00000000  0000e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004858  00000000  00000000  0002c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001828  00000000  00000000  00031128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001260  00000000  00000000  00032950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a816  00000000  00000000  00033bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa26  00000000  00000000  0005e3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f56b9  00000000  00000000  0007ddec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001734a5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000674c  00000000  00000000  001734e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00179c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c8 <__do_global_dtors_aux>:
200001c8:	b510      	push	{r4, lr}
200001ca:	4c05      	ldr	r4, [pc, #20]	@ (200001e0 <__do_global_dtors_aux+0x18>)
200001cc:	7823      	ldrb	r3, [r4, #0]
200001ce:	b933      	cbnz	r3, 200001de <__do_global_dtors_aux+0x16>
200001d0:	4b04      	ldr	r3, [pc, #16]	@ (200001e4 <__do_global_dtors_aux+0x1c>)
200001d2:	b113      	cbz	r3, 200001da <__do_global_dtors_aux+0x12>
200001d4:	4804      	ldr	r0, [pc, #16]	@ (200001e8 <__do_global_dtors_aux+0x20>)
200001d6:	f3af 8000 	nop.w
200001da:	2301      	movs	r3, #1
200001dc:	7023      	strb	r3, [r4, #0]
200001de:	bd10      	pop	{r4, pc}
200001e0:	2000d818 	.word	0x2000d818
200001e4:	00000000 	.word	0x00000000
200001e8:	2000d4c8 	.word	0x2000d4c8

200001ec <frame_dummy>:
200001ec:	b508      	push	{r3, lr}
200001ee:	4b03      	ldr	r3, [pc, #12]	@ (200001fc <frame_dummy+0x10>)
200001f0:	b11b      	cbz	r3, 200001fa <frame_dummy+0xe>
200001f2:	4903      	ldr	r1, [pc, #12]	@ (20000200 <frame_dummy+0x14>)
200001f4:	4803      	ldr	r0, [pc, #12]	@ (20000204 <frame_dummy+0x18>)
200001f6:	f3af 8000 	nop.w
200001fa:	bd08      	pop	{r3, pc}
200001fc:	00000000 	.word	0x00000000
20000200:	2000d81c 	.word	0x2000d81c
20000204:	2000d4c8 	.word	0x2000d4c8

20000208 <__aeabi_uldivmod>:
20000208:	b953      	cbnz	r3, 20000220 <__aeabi_uldivmod+0x18>
2000020a:	b94a      	cbnz	r2, 20000220 <__aeabi_uldivmod+0x18>
2000020c:	2900      	cmp	r1, #0
2000020e:	bf08      	it	eq
20000210:	2800      	cmpeq	r0, #0
20000212:	bf1c      	itt	ne
20000214:	f04f 31ff 	movne.w	r1, #4294967295
20000218:	f04f 30ff 	movne.w	r0, #4294967295
2000021c:	f000 b96a 	b.w	200004f4 <__aeabi_idiv0>
20000220:	f1ad 0c08 	sub.w	ip, sp, #8
20000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000228:	f000 f806 	bl	20000238 <__udivmoddi4>
2000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
20000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000234:	b004      	add	sp, #16
20000236:	4770      	bx	lr

20000238 <__udivmoddi4>:
20000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000023c:	9d08      	ldr	r5, [sp, #32]
2000023e:	460c      	mov	r4, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14e      	bne.n	200002e2 <__udivmoddi4+0xaa>
20000244:	4694      	mov	ip, r2
20000246:	458c      	cmp	ip, r1
20000248:	4686      	mov	lr, r0
2000024a:	fab2 f282 	clz	r2, r2
2000024e:	d962      	bls.n	20000316 <__udivmoddi4+0xde>
20000250:	b14a      	cbz	r2, 20000266 <__udivmoddi4+0x2e>
20000252:	f1c2 0320 	rsb	r3, r2, #32
20000256:	4091      	lsls	r1, r2
20000258:	fa20 f303 	lsr.w	r3, r0, r3
2000025c:	fa0c fc02 	lsl.w	ip, ip, r2
20000260:	4319      	orrs	r1, r3
20000262:	fa00 fe02 	lsl.w	lr, r0, r2
20000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000026a:	fa1f f68c 	uxth.w	r6, ip
2000026e:	fbb1 f4f7 	udiv	r4, r1, r7
20000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000276:	fb07 1114 	mls	r1, r7, r4, r1
2000027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000027e:	fb04 f106 	mul.w	r1, r4, r6
20000282:	4299      	cmp	r1, r3
20000284:	d90a      	bls.n	2000029c <__udivmoddi4+0x64>
20000286:	eb1c 0303 	adds.w	r3, ip, r3
2000028a:	f104 30ff 	add.w	r0, r4, #4294967295
2000028e:	f080 8112 	bcs.w	200004b6 <__udivmoddi4+0x27e>
20000292:	4299      	cmp	r1, r3
20000294:	f240 810f 	bls.w	200004b6 <__udivmoddi4+0x27e>
20000298:	3c02      	subs	r4, #2
2000029a:	4463      	add	r3, ip
2000029c:	1a59      	subs	r1, r3, r1
2000029e:	fa1f f38e 	uxth.w	r3, lr
200002a2:	fbb1 f0f7 	udiv	r0, r1, r7
200002a6:	fb07 1110 	mls	r1, r7, r0, r1
200002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200002ae:	fb00 f606 	mul.w	r6, r0, r6
200002b2:	429e      	cmp	r6, r3
200002b4:	d90a      	bls.n	200002cc <__udivmoddi4+0x94>
200002b6:	eb1c 0303 	adds.w	r3, ip, r3
200002ba:	f100 31ff 	add.w	r1, r0, #4294967295
200002be:	f080 80fc 	bcs.w	200004ba <__udivmoddi4+0x282>
200002c2:	429e      	cmp	r6, r3
200002c4:	f240 80f9 	bls.w	200004ba <__udivmoddi4+0x282>
200002c8:	4463      	add	r3, ip
200002ca:	3802      	subs	r0, #2
200002cc:	1b9b      	subs	r3, r3, r6
200002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200002d2:	2100      	movs	r1, #0
200002d4:	b11d      	cbz	r5, 200002de <__udivmoddi4+0xa6>
200002d6:	40d3      	lsrs	r3, r2
200002d8:	2200      	movs	r2, #0
200002da:	e9c5 3200 	strd	r3, r2, [r5]
200002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002e2:	428b      	cmp	r3, r1
200002e4:	d905      	bls.n	200002f2 <__udivmoddi4+0xba>
200002e6:	b10d      	cbz	r5, 200002ec <__udivmoddi4+0xb4>
200002e8:	e9c5 0100 	strd	r0, r1, [r5]
200002ec:	2100      	movs	r1, #0
200002ee:	4608      	mov	r0, r1
200002f0:	e7f5      	b.n	200002de <__udivmoddi4+0xa6>
200002f2:	fab3 f183 	clz	r1, r3
200002f6:	2900      	cmp	r1, #0
200002f8:	d146      	bne.n	20000388 <__udivmoddi4+0x150>
200002fa:	42a3      	cmp	r3, r4
200002fc:	d302      	bcc.n	20000304 <__udivmoddi4+0xcc>
200002fe:	4290      	cmp	r0, r2
20000300:	f0c0 80f0 	bcc.w	200004e4 <__udivmoddi4+0x2ac>
20000304:	1a86      	subs	r6, r0, r2
20000306:	eb64 0303 	sbc.w	r3, r4, r3
2000030a:	2001      	movs	r0, #1
2000030c:	2d00      	cmp	r5, #0
2000030e:	d0e6      	beq.n	200002de <__udivmoddi4+0xa6>
20000310:	e9c5 6300 	strd	r6, r3, [r5]
20000314:	e7e3      	b.n	200002de <__udivmoddi4+0xa6>
20000316:	2a00      	cmp	r2, #0
20000318:	f040 8090 	bne.w	2000043c <__udivmoddi4+0x204>
2000031c:	eba1 040c 	sub.w	r4, r1, ip
20000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000324:	fa1f f78c 	uxth.w	r7, ip
20000328:	2101      	movs	r1, #1
2000032a:	fbb4 f6f8 	udiv	r6, r4, r8
2000032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000332:	fb08 4416 	mls	r4, r8, r6, r4
20000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000033a:	fb07 f006 	mul.w	r0, r7, r6
2000033e:	4298      	cmp	r0, r3
20000340:	d908      	bls.n	20000354 <__udivmoddi4+0x11c>
20000342:	eb1c 0303 	adds.w	r3, ip, r3
20000346:	f106 34ff 	add.w	r4, r6, #4294967295
2000034a:	d202      	bcs.n	20000352 <__udivmoddi4+0x11a>
2000034c:	4298      	cmp	r0, r3
2000034e:	f200 80cd 	bhi.w	200004ec <__udivmoddi4+0x2b4>
20000352:	4626      	mov	r6, r4
20000354:	1a1c      	subs	r4, r3, r0
20000356:	fa1f f38e 	uxth.w	r3, lr
2000035a:	fbb4 f0f8 	udiv	r0, r4, r8
2000035e:	fb08 4410 	mls	r4, r8, r0, r4
20000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000366:	fb00 f707 	mul.w	r7, r0, r7
2000036a:	429f      	cmp	r7, r3
2000036c:	d908      	bls.n	20000380 <__udivmoddi4+0x148>
2000036e:	eb1c 0303 	adds.w	r3, ip, r3
20000372:	f100 34ff 	add.w	r4, r0, #4294967295
20000376:	d202      	bcs.n	2000037e <__udivmoddi4+0x146>
20000378:	429f      	cmp	r7, r3
2000037a:	f200 80b0 	bhi.w	200004de <__udivmoddi4+0x2a6>
2000037e:	4620      	mov	r0, r4
20000380:	1bdb      	subs	r3, r3, r7
20000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000386:	e7a5      	b.n	200002d4 <__udivmoddi4+0x9c>
20000388:	f1c1 0620 	rsb	r6, r1, #32
2000038c:	408b      	lsls	r3, r1
2000038e:	fa22 f706 	lsr.w	r7, r2, r6
20000392:	431f      	orrs	r7, r3
20000394:	fa20 fc06 	lsr.w	ip, r0, r6
20000398:	fa04 f301 	lsl.w	r3, r4, r1
2000039c:	ea43 030c 	orr.w	r3, r3, ip
200003a0:	40f4      	lsrs	r4, r6
200003a2:	fa00 f801 	lsl.w	r8, r0, r1
200003a6:	0c38      	lsrs	r0, r7, #16
200003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
200003ac:	fbb4 fef0 	udiv	lr, r4, r0
200003b0:	fa1f fc87 	uxth.w	ip, r7
200003b4:	fb00 441e 	mls	r4, r0, lr, r4
200003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003bc:	fb0e f90c 	mul.w	r9, lr, ip
200003c0:	45a1      	cmp	r9, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	d90a      	bls.n	200003de <__udivmoddi4+0x1a6>
200003c8:	193c      	adds	r4, r7, r4
200003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
200003ce:	f080 8084 	bcs.w	200004da <__udivmoddi4+0x2a2>
200003d2:	45a1      	cmp	r9, r4
200003d4:	f240 8081 	bls.w	200004da <__udivmoddi4+0x2a2>
200003d8:	f1ae 0e02 	sub.w	lr, lr, #2
200003dc:	443c      	add	r4, r7
200003de:	eba4 0409 	sub.w	r4, r4, r9
200003e2:	fa1f f983 	uxth.w	r9, r3
200003e6:	fbb4 f3f0 	udiv	r3, r4, r0
200003ea:	fb00 4413 	mls	r4, r0, r3, r4
200003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003f2:	fb03 fc0c 	mul.w	ip, r3, ip
200003f6:	45a4      	cmp	ip, r4
200003f8:	d907      	bls.n	2000040a <__udivmoddi4+0x1d2>
200003fa:	193c      	adds	r4, r7, r4
200003fc:	f103 30ff 	add.w	r0, r3, #4294967295
20000400:	d267      	bcs.n	200004d2 <__udivmoddi4+0x29a>
20000402:	45a4      	cmp	ip, r4
20000404:	d965      	bls.n	200004d2 <__udivmoddi4+0x29a>
20000406:	3b02      	subs	r3, #2
20000408:	443c      	add	r4, r7
2000040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
2000040e:	fba0 9302 	umull	r9, r3, r0, r2
20000412:	eba4 040c 	sub.w	r4, r4, ip
20000416:	429c      	cmp	r4, r3
20000418:	46ce      	mov	lr, r9
2000041a:	469c      	mov	ip, r3
2000041c:	d351      	bcc.n	200004c2 <__udivmoddi4+0x28a>
2000041e:	d04e      	beq.n	200004be <__udivmoddi4+0x286>
20000420:	b155      	cbz	r5, 20000438 <__udivmoddi4+0x200>
20000422:	ebb8 030e 	subs.w	r3, r8, lr
20000426:	eb64 040c 	sbc.w	r4, r4, ip
2000042a:	fa04 f606 	lsl.w	r6, r4, r6
2000042e:	40cb      	lsrs	r3, r1
20000430:	431e      	orrs	r6, r3
20000432:	40cc      	lsrs	r4, r1
20000434:	e9c5 6400 	strd	r6, r4, [r5]
20000438:	2100      	movs	r1, #0
2000043a:	e750      	b.n	200002de <__udivmoddi4+0xa6>
2000043c:	f1c2 0320 	rsb	r3, r2, #32
20000440:	fa20 f103 	lsr.w	r1, r0, r3
20000444:	fa0c fc02 	lsl.w	ip, ip, r2
20000448:	fa24 f303 	lsr.w	r3, r4, r3
2000044c:	4094      	lsls	r4, r2
2000044e:	430c      	orrs	r4, r1
20000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000454:	fa00 fe02 	lsl.w	lr, r0, r2
20000458:	fa1f f78c 	uxth.w	r7, ip
2000045c:	fbb3 f0f8 	udiv	r0, r3, r8
20000460:	fb08 3110 	mls	r1, r8, r0, r3
20000464:	0c23      	lsrs	r3, r4, #16
20000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000046a:	fb00 f107 	mul.w	r1, r0, r7
2000046e:	4299      	cmp	r1, r3
20000470:	d908      	bls.n	20000484 <__udivmoddi4+0x24c>
20000472:	eb1c 0303 	adds.w	r3, ip, r3
20000476:	f100 36ff 	add.w	r6, r0, #4294967295
2000047a:	d22c      	bcs.n	200004d6 <__udivmoddi4+0x29e>
2000047c:	4299      	cmp	r1, r3
2000047e:	d92a      	bls.n	200004d6 <__udivmoddi4+0x29e>
20000480:	3802      	subs	r0, #2
20000482:	4463      	add	r3, ip
20000484:	1a5b      	subs	r3, r3, r1
20000486:	b2a4      	uxth	r4, r4
20000488:	fbb3 f1f8 	udiv	r1, r3, r8
2000048c:	fb08 3311 	mls	r3, r8, r1, r3
20000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000494:	fb01 f307 	mul.w	r3, r1, r7
20000498:	42a3      	cmp	r3, r4
2000049a:	d908      	bls.n	200004ae <__udivmoddi4+0x276>
2000049c:	eb1c 0404 	adds.w	r4, ip, r4
200004a0:	f101 36ff 	add.w	r6, r1, #4294967295
200004a4:	d213      	bcs.n	200004ce <__udivmoddi4+0x296>
200004a6:	42a3      	cmp	r3, r4
200004a8:	d911      	bls.n	200004ce <__udivmoddi4+0x296>
200004aa:	3902      	subs	r1, #2
200004ac:	4464      	add	r4, ip
200004ae:	1ae4      	subs	r4, r4, r3
200004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
200004b4:	e739      	b.n	2000032a <__udivmoddi4+0xf2>
200004b6:	4604      	mov	r4, r0
200004b8:	e6f0      	b.n	2000029c <__udivmoddi4+0x64>
200004ba:	4608      	mov	r0, r1
200004bc:	e706      	b.n	200002cc <__udivmoddi4+0x94>
200004be:	45c8      	cmp	r8, r9
200004c0:	d2ae      	bcs.n	20000420 <__udivmoddi4+0x1e8>
200004c2:	ebb9 0e02 	subs.w	lr, r9, r2
200004c6:	eb63 0c07 	sbc.w	ip, r3, r7
200004ca:	3801      	subs	r0, #1
200004cc:	e7a8      	b.n	20000420 <__udivmoddi4+0x1e8>
200004ce:	4631      	mov	r1, r6
200004d0:	e7ed      	b.n	200004ae <__udivmoddi4+0x276>
200004d2:	4603      	mov	r3, r0
200004d4:	e799      	b.n	2000040a <__udivmoddi4+0x1d2>
200004d6:	4630      	mov	r0, r6
200004d8:	e7d4      	b.n	20000484 <__udivmoddi4+0x24c>
200004da:	46d6      	mov	lr, sl
200004dc:	e77f      	b.n	200003de <__udivmoddi4+0x1a6>
200004de:	4463      	add	r3, ip
200004e0:	3802      	subs	r0, #2
200004e2:	e74d      	b.n	20000380 <__udivmoddi4+0x148>
200004e4:	4606      	mov	r6, r0
200004e6:	4623      	mov	r3, r4
200004e8:	4608      	mov	r0, r1
200004ea:	e70f      	b.n	2000030c <__udivmoddi4+0xd4>
200004ec:	3e02      	subs	r6, #2
200004ee:	4463      	add	r3, ip
200004f0:	e730      	b.n	20000354 <__udivmoddi4+0x11c>
200004f2:	bf00      	nop

200004f4 <__aeabi_idiv0>:
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <DAP_GetVendorString>:

/** Get Vendor Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetVendorString (char *str) {
200004f8:	b480      	push	{r7}
200004fa:	b083      	sub	sp, #12
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000500:	2300      	movs	r3, #0
}
20000502:	4618      	mov	r0, r3
20000504:	370c      	adds	r7, #12
20000506:	46bd      	mov	sp, r7
20000508:	f85d 7b04 	ldr.w	r7, [sp], #4
2000050c:	4770      	bx	lr

2000050e <DAP_GetProductString>:

/** Get Product Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductString (char *str) {
2000050e:	b480      	push	{r7}
20000510:	b083      	sub	sp, #12
20000512:	af00      	add	r7, sp, #0
20000514:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000516:	2300      	movs	r3, #0
}
20000518:	4618      	mov	r0, r3
2000051a:	370c      	adds	r7, #12
2000051c:	46bd      	mov	sp, r7
2000051e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000522:	4770      	bx	lr

20000524 <DAP_GetSerNumString>:

/** Get Serial Number string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetSerNumString (char *str) {
20000524:	b480      	push	{r7}
20000526:	b083      	sub	sp, #12
20000528:	af00      	add	r7, sp, #0
2000052a:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000052c:	2300      	movs	r3, #0
}
2000052e:	4618      	mov	r0, r3
20000530:	370c      	adds	r7, #12
20000532:	46bd      	mov	sp, r7
20000534:	f85d 7b04 	ldr.w	r7, [sp], #4
20000538:	4770      	bx	lr

2000053a <DAP_GetTargetDeviceVendorString>:

/** Get Target Device Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceVendorString (char *str) {
2000053a:	b480      	push	{r7}
2000053c:	b083      	sub	sp, #12
2000053e:	af00      	add	r7, sp, #0
20000540:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceVendor);
  len = (uint8_t)(strlen(TargetDeviceVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000542:	2300      	movs	r3, #0
#endif
}
20000544:	4618      	mov	r0, r3
20000546:	370c      	adds	r7, #12
20000548:	46bd      	mov	sp, r7
2000054a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000054e:	4770      	bx	lr

20000550 <DAP_GetTargetDeviceNameString>:

/** Get Target Device Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceNameString (char *str) {
20000550:	b480      	push	{r7}
20000552:	b083      	sub	sp, #12
20000554:	af00      	add	r7, sp, #0
20000556:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceName);
  len = (uint8_t)(strlen(TargetDeviceName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000558:	2300      	movs	r3, #0
#endif
}
2000055a:	4618      	mov	r0, r3
2000055c:	370c      	adds	r7, #12
2000055e:	46bd      	mov	sp, r7
20000560:	f85d 7b04 	ldr.w	r7, [sp], #4
20000564:	4770      	bx	lr

20000566 <DAP_GetTargetBoardVendorString>:

/** Get Target Board Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardVendorString (char *str) {
20000566:	b480      	push	{r7}
20000568:	b083      	sub	sp, #12
2000056a:	af00      	add	r7, sp, #0
2000056c:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardVendor);
  len = (uint8_t)(strlen(TargetBoardVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
2000056e:	2300      	movs	r3, #0
#endif
}
20000570:	4618      	mov	r0, r3
20000572:	370c      	adds	r7, #12
20000574:	46bd      	mov	sp, r7
20000576:	f85d 7b04 	ldr.w	r7, [sp], #4
2000057a:	4770      	bx	lr

2000057c <DAP_GetTargetBoardNameString>:

/** Get Target Board Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardNameString (char *str) {
2000057c:	b480      	push	{r7}
2000057e:	b083      	sub	sp, #12
20000580:	af00      	add	r7, sp, #0
20000582:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardName);
  len = (uint8_t)(strlen(TargetBoardName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000584:	2300      	movs	r3, #0
#endif
}
20000586:	4618      	mov	r0, r3
20000588:	370c      	adds	r7, #12
2000058a:	46bd      	mov	sp, r7
2000058c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000590:	4770      	bx	lr

20000592 <DAP_GetProductFirmwareVersionString>:

/** Get Product Firmware Version string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductFirmwareVersionString (char *str) {
20000592:	b480      	push	{r7}
20000594:	b083      	sub	sp, #12
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000059a:	2300      	movs	r3, #0
}
2000059c:	4618      	mov	r0, r3
2000059e:	370c      	adds	r7, #12
200005a0:	46bd      	mov	sp, r7
200005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200005a6:	4770      	bx	lr

200005a8 <PORT_JTAG_SETUP>:
/** Setup JTAG I/O pins: TCK, TMS, TDI, TDO, nTRST, and nRESET.
Configures the DAP Hardware I/O pins for JTAG mode:
 - TCK, TMS, TDI, nTRST, nRESET to output mode and set to high level.
 - TDO to input mode.
*/
__STATIC_INLINE void PORT_JTAG_SETUP (void) {
200005a8:	b480      	push	{r7}
200005aa:	af00      	add	r7, sp, #0
  ;
}
200005ac:	bf00      	nop
200005ae:	46bd      	mov	sp, r7
200005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005b4:	4770      	bx	lr

200005b6 <PORT_SWD_SETUP>:
/** Setup SWD I/O pins: SWCLK, SWDIO, and nRESET.
Configures the DAP Hardware I/O pins for Serial Wire Debug (SWD) mode:
 - SWCLK, SWDIO, nRESET to output mode and set to default high level.
 - TDI, nTRST to HighZ mode (pins are unused in SWD mode).
*/
__STATIC_INLINE void PORT_SWD_SETUP (void) {
200005b6:	b480      	push	{r7}
200005b8:	af00      	add	r7, sp, #0
  ;
}
200005ba:	bf00      	nop
200005bc:	46bd      	mov	sp, r7
200005be:	f85d 7b04 	ldr.w	r7, [sp], #4
200005c2:	4770      	bx	lr

200005c4 <PORT_OFF>:

/** Disable JTAG/SWD I/O Pins.
Disables the DAP Hardware I/O pins which configures:
 - TCK/SWCLK, TMS/SWDIO, TDI, TDO, nTRST, nRESET to High-Z mode.
*/
__STATIC_INLINE void PORT_OFF (void) {
200005c4:	b480      	push	{r7}
200005c6:	af00      	add	r7, sp, #0
  ;
}
200005c8:	bf00      	nop
200005ca:	46bd      	mov	sp, r7
200005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200005d0:	4770      	bx	lr

200005d2 <PIN_SWCLK_TCK_IN>:
// SWCLK/TCK I/O pin -------------------------------------

/** SWCLK/TCK I/O pin: Get Input.
\return Current status of the SWCLK/TCK DAP hardware I/O pin.
*/
static uint32_t PIN_SWCLK_TCK_IN  (void) {
200005d2:	b480      	push	{r7}
200005d4:	af00      	add	r7, sp, #0
  return (0U);
200005d6:	2300      	movs	r3, #0
}
200005d8:	4618      	mov	r0, r3
200005da:	46bd      	mov	sp, r7
200005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200005e0:	4770      	bx	lr

200005e2 <PIN_SWCLK_TCK_SET>:

/** SWCLK/TCK I/O pin: Set Output to High.
Set the SWCLK/TCK DAP hardware I/O pin to high level.
*/
static void     PIN_SWCLK_TCK_SET (void) {
200005e2:	b480      	push	{r7}
200005e4:	af00      	add	r7, sp, #0
  ;
}
200005e6:	bf00      	nop
200005e8:	46bd      	mov	sp, r7
200005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200005ee:	4770      	bx	lr

200005f0 <PIN_SWCLK_TCK_CLR>:

/** SWCLK/TCK I/O pin: Set Output to Low.
Set the SWCLK/TCK DAP hardware I/O pin to low level.
*/
static void     PIN_SWCLK_TCK_CLR (void) {
200005f0:	b480      	push	{r7}
200005f2:	af00      	add	r7, sp, #0
  ;
}
200005f4:	bf00      	nop
200005f6:	46bd      	mov	sp, r7
200005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200005fc:	4770      	bx	lr

200005fe <PIN_SWDIO_TMS_IN>:
// SWDIO/TMS Pin I/O --------------------------------------

/** SWDIO/TMS I/O pin: Get Input.
\return Current status of the SWDIO/TMS DAP hardware I/O pin.
*/
static uint32_t PIN_SWDIO_TMS_IN  (void) {
200005fe:	b480      	push	{r7}
20000600:	af00      	add	r7, sp, #0
  return (0U);
20000602:	2300      	movs	r3, #0
}
20000604:	4618      	mov	r0, r3
20000606:	46bd      	mov	sp, r7
20000608:	f85d 7b04 	ldr.w	r7, [sp], #4
2000060c:	4770      	bx	lr

2000060e <PIN_SWDIO_TMS_SET>:

/** SWDIO/TMS I/O pin: Set Output to High.
Set the SWDIO/TMS DAP hardware I/O pin to high level.
*/
static void     PIN_SWDIO_TMS_SET (void) {
2000060e:	b480      	push	{r7}
20000610:	af00      	add	r7, sp, #0

}
20000612:	bf00      	nop
20000614:	46bd      	mov	sp, r7
20000616:	f85d 7b04 	ldr.w	r7, [sp], #4
2000061a:	4770      	bx	lr

2000061c <PIN_SWDIO_TMS_CLR>:

/** SWDIO/TMS I/O pin: Set Output to Low.
Set the SWDIO/TMS DAP hardware I/O pin to low level.
*/
static void     PIN_SWDIO_TMS_CLR (void) {
2000061c:	b480      	push	{r7}
2000061e:	af00      	add	r7, sp, #0

}
20000620:	bf00      	nop
20000622:	46bd      	mov	sp, r7
20000624:	f85d 7b04 	ldr.w	r7, [sp], #4
20000628:	4770      	bx	lr

2000062a <PIN_SWDIO_OUT_ENABLE>:

/** SWDIO I/O pin: Switch to Output mode (used in SWD mode only).
Configure the SWDIO DAP hardware I/O pin to output mode. This function is
called prior \ref PIN_SWDIO_OUT function calls.
*/
static void     PIN_SWDIO_OUT_ENABLE  (void) {
2000062a:	b480      	push	{r7}
2000062c:	af00      	add	r7, sp, #0
  ;
}
2000062e:	bf00      	nop
20000630:	46bd      	mov	sp, r7
20000632:	f85d 7b04 	ldr.w	r7, [sp], #4
20000636:	4770      	bx	lr

20000638 <PIN_SWDIO_OUT_DISABLE>:

/** SWDIO I/O pin: Switch to Input mode (used in SWD mode only).
Configure the SWDIO DAP hardware I/O pin to input mode. This function is
called prior \ref PIN_SWDIO_IN function calls.
*/
static void     PIN_SWDIO_OUT_DISABLE (void) {
20000638:	b480      	push	{r7}
2000063a:	af00      	add	r7, sp, #0
  ;
}
2000063c:	bf00      	nop
2000063e:	46bd      	mov	sp, r7
20000640:	f85d 7b04 	ldr.w	r7, [sp], #4
20000644:	4770      	bx	lr

20000646 <PIN_TDI_IN>:
// TDI Pin I/O ---------------------------------------------

/** TDI I/O pin: Get Input.
\return Current status of the TDI DAP hardware I/O pin.
*/
static uint32_t PIN_TDI_IN  (void) {
20000646:	b480      	push	{r7}
20000648:	af00      	add	r7, sp, #0
  return (0U);
2000064a:	2300      	movs	r3, #0
}
2000064c:	4618      	mov	r0, r3
2000064e:	46bd      	mov	sp, r7
20000650:	f85d 7b04 	ldr.w	r7, [sp], #4
20000654:	4770      	bx	lr

20000656 <PIN_TDI_OUT>:

/** TDI I/O pin: Set Output.
\param bit Output value for the TDI DAP hardware I/O pin.
*/
static void     PIN_TDI_OUT (uint32_t bit) {
20000656:	b480      	push	{r7}
20000658:	b083      	sub	sp, #12
2000065a:	af00      	add	r7, sp, #0
2000065c:	6078      	str	r0, [r7, #4]
  ;
}
2000065e:	bf00      	nop
20000660:	370c      	adds	r7, #12
20000662:	46bd      	mov	sp, r7
20000664:	f85d 7b04 	ldr.w	r7, [sp], #4
20000668:	4770      	bx	lr

2000066a <PIN_TDO_IN>:
// TDO Pin I/O ---------------------------------------------

/** TDO I/O pin: Get Input.
\return Current status of the TDO DAP hardware I/O pin.
*/
static uint32_t PIN_TDO_IN  (void) {
2000066a:	b480      	push	{r7}
2000066c:	af00      	add	r7, sp, #0
  return (0U);
2000066e:	2300      	movs	r3, #0
}
20000670:	4618      	mov	r0, r3
20000672:	46bd      	mov	sp, r7
20000674:	f85d 7b04 	ldr.w	r7, [sp], #4
20000678:	4770      	bx	lr

2000067a <PIN_nTRST_IN>:
// nTRST Pin I/O -------------------------------------------

/** nTRST I/O pin: Get Input.
\return Current status of the nTRST DAP hardware I/O pin.
*/
static uint32_t PIN_nTRST_IN   (void) {
2000067a:	b480      	push	{r7}
2000067c:	af00      	add	r7, sp, #0
  return (0U);
2000067e:	2300      	movs	r3, #0
}
20000680:	4618      	mov	r0, r3
20000682:	46bd      	mov	sp, r7
20000684:	f85d 7b04 	ldr.w	r7, [sp], #4
20000688:	4770      	bx	lr

2000068a <PIN_nTRST_OUT>:
/** nTRST I/O pin: Set Output.
\param bit JTAG TRST Test Reset pin status:
           - 0: issue a JTAG TRST Test Reset.
           - 1: release JTAG TRST Test Reset.
*/
static void     PIN_nTRST_OUT  (uint32_t bit) {
2000068a:	b480      	push	{r7}
2000068c:	b083      	sub	sp, #12
2000068e:	af00      	add	r7, sp, #0
20000690:	6078      	str	r0, [r7, #4]
  ;
}
20000692:	bf00      	nop
20000694:	370c      	adds	r7, #12
20000696:	46bd      	mov	sp, r7
20000698:	f85d 7b04 	ldr.w	r7, [sp], #4
2000069c:	4770      	bx	lr
	...

200006a0 <PIN_nRESET_IN>:
\return Current status of the nRESET DAP hardware I/O pin.
*/
#define JTAG_SRST_PORT	 GPIOD
#define JTAG_SRST_PIN    GPIO_PIN_2 // Optional

static uint32_t PIN_nRESET_IN  (void) {
200006a0:	b580      	push	{r7, lr}
200006a2:	af00      	add	r7, sp, #0
  return (uint32_t)HAL_GPIO_ReadPin(JTAG_SRST_PORT, JTAG_SRST_PIN);
200006a4:	2104      	movs	r1, #4
200006a6:	4803      	ldr	r0, [pc, #12]	@ (200006b4 <PIN_nRESET_IN+0x14>)
200006a8:	f005 fd42 	bl	20006130 <HAL_GPIO_ReadPin>
200006ac:	4603      	mov	r3, r0
}
200006ae:	4618      	mov	r0, r3
200006b0:	bd80      	pop	{r7, pc}
200006b2:	bf00      	nop
200006b4:	40020c00 	.word	0x40020c00

200006b8 <PIN_nRESET_OUT>:
/** nRESET I/O pin: Set Output.
\param bit target device hardware reset pin status:
           - 0: issue a device hardware reset.
           - 1: release device hardware reset.
*/
static void     PIN_nRESET_OUT (uint32_t bit) {
200006b8:	b580      	push	{r7, lr}
200006ba:	b082      	sub	sp, #8
200006bc:	af00      	add	r7, sp, #0
200006be:	6078      	str	r0, [r7, #4]
	if(bit)
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	2b00      	cmp	r3, #0
200006c4:	d005      	beq.n	200006d2 <PIN_nRESET_OUT+0x1a>
	{
		HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_RESET);
200006c6:	2200      	movs	r2, #0
200006c8:	2104      	movs	r1, #4
200006ca:	4806      	ldr	r0, [pc, #24]	@ (200006e4 <PIN_nRESET_OUT+0x2c>)
200006cc:	f005 fd48 	bl	20006160 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_SET);
	}

}
200006d0:	e004      	b.n	200006dc <PIN_nRESET_OUT+0x24>
		HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_SET);
200006d2:	2201      	movs	r2, #1
200006d4:	2104      	movs	r1, #4
200006d6:	4803      	ldr	r0, [pc, #12]	@ (200006e4 <PIN_nRESET_OUT+0x2c>)
200006d8:	f005 fd42 	bl	20006160 <HAL_GPIO_WritePin>
}
200006dc:	bf00      	nop
200006de:	3708      	adds	r7, #8
200006e0:	46bd      	mov	sp, r7
200006e2:	bd80      	pop	{r7, pc}
200006e4:	40020c00 	.word	0x40020c00

200006e8 <LED_CONNECTED_OUT>:
\param bit status of the Connect LED.
           - 1: Connect LED ON: debugger is connected to CMSIS-DAP Debug Unit.
           - 0: Connect LED OFF: debugger is not connected to CMSIS-DAP Debug Unit.
*/
__STATIC_INLINE void LED_CONNECTED_OUT (uint32_t bit)
{
200006e8:	b580      	push	{r7, lr}
200006ea:	b082      	sub	sp, #8
200006ec:	af00      	add	r7, sp, #0
200006ee:	6078      	str	r0, [r7, #4]
	if(bit)
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	2b00      	cmp	r3, #0
200006f4:	d006      	beq.n	20000704 <LED_CONNECTED_OUT+0x1c>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
200006f6:	2201      	movs	r2, #1
200006f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
200006fc:	4806      	ldr	r0, [pc, #24]	@ (20000718 <LED_CONNECTED_OUT+0x30>)
200006fe:	f005 fd2f 	bl	20006160 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
	}

}
20000702:	e005      	b.n	20000710 <LED_CONNECTED_OUT+0x28>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
20000704:	2200      	movs	r2, #0
20000706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
2000070a:	4803      	ldr	r0, [pc, #12]	@ (20000718 <LED_CONNECTED_OUT+0x30>)
2000070c:	f005 fd28 	bl	20006160 <HAL_GPIO_WritePin>
}
20000710:	bf00      	nop
20000712:	3708      	adds	r7, #8
20000714:	46bd      	mov	sp, r7
20000716:	bd80      	pop	{r7, pc}
20000718:	40020400 	.word	0x40020400

2000071c <LED_RUNNING_OUT>:
\param bit status of the Target Running LED.
           - 1: Target Running LED ON: program execution in target started.
           - 0: Target Running LED OFF: program execution in target stopped.
*/
__STATIC_INLINE void LED_RUNNING_OUT (uint32_t bit)
{
2000071c:	b580      	push	{r7, lr}
2000071e:	b082      	sub	sp, #8
20000720:	af00      	add	r7, sp, #0
20000722:	6078      	str	r0, [r7, #4]
	if(bit)
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	2b00      	cmp	r3, #0
20000728:	d005      	beq.n	20000736 <LED_RUNNING_OUT+0x1a>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
2000072a:	2201      	movs	r2, #1
2000072c:	2101      	movs	r1, #1
2000072e:	4806      	ldr	r0, [pc, #24]	@ (20000748 <LED_RUNNING_OUT+0x2c>)
20000730:	f005 fd16 	bl	20006160 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
	}

}
20000734:	e004      	b.n	20000740 <LED_RUNNING_OUT+0x24>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
20000736:	2200      	movs	r2, #0
20000738:	2101      	movs	r1, #1
2000073a:	4803      	ldr	r0, [pc, #12]	@ (20000748 <LED_RUNNING_OUT+0x2c>)
2000073c:	f005 fd10 	bl	20006160 <HAL_GPIO_WritePin>
}
20000740:	bf00      	nop
20000742:	3708      	adds	r7, #8
20000744:	46bd      	mov	sp, r7
20000746:	bd80      	pop	{r7, pc}
20000748:	40020400 	.word	0x40020400

2000074c <TIMESTAMP_GET>:
*/

/** Get timestamp of Test Domain Timer.
\return Current timestamp value.
*/
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
2000074c:	b480      	push	{r7}
2000074e:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20000750:	4b03      	ldr	r3, [pc, #12]	@ (20000760 <TIMESTAMP_GET+0x14>)
20000752:	685b      	ldr	r3, [r3, #4]
}
20000754:	4618      	mov	r0, r3
20000756:	46bd      	mov	sp, r7
20000758:	f85d 7b04 	ldr.w	r7, [sp], #4
2000075c:	4770      	bx	lr
2000075e:	bf00      	nop
20000760:	e0001000 	.word	0xe0001000

20000764 <RESET_TARGET>:
It is called when the command \ref DAP_ResetTarget and is for example required
when a device needs a time-critical unlock sequence that enables the debug port.
\return 0 = no device specific reset sequence is implemented.\n
        1 = a device specific reset sequence is implemented.
*/
__STATIC_INLINE uint8_t RESET_TARGET (void) {
20000764:	b480      	push	{r7}
20000766:	af00      	add	r7, sp, #0
  return (1U);             // change to '1' when a device reset sequence is implemented
20000768:	2301      	movs	r3, #1
}
2000076a:	4618      	mov	r0, r3
2000076c:	46bd      	mov	sp, r7
2000076e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000772:	4770      	bx	lr

20000774 <Set_Clock_Delay>:
static const char DAP_FW_Ver [] = DAP_FW_VER;


// Common clock delay calculation routine
//   clock:    requested SWJ frequency in Hertz
static void Set_Clock_Delay(uint32_t clock) {
20000774:	b480      	push	{r7}
20000776:	b085      	sub	sp, #20
20000778:	af00      	add	r7, sp, #0
2000077a:	6078      	str	r0, [r7, #4]
  uint32_t delay;

  if (clock >= MAX_SWJ_CLOCK(DELAY_FAST_CYCLES)) {
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	4a16      	ldr	r2, [pc, #88]	@ (200007d8 <Set_Clock_Delay+0x64>)
20000780:	4293      	cmp	r3, r2
20000782:	d306      	bcc.n	20000792 <Set_Clock_Delay+0x1e>
    DAP_Data.fast_clock  = 1U;
20000784:	4b15      	ldr	r3, [pc, #84]	@ (200007dc <Set_Clock_Delay+0x68>)
20000786:	2201      	movs	r2, #1
20000788:	705a      	strb	r2, [r3, #1]
    DAP_Data.clock_delay = 1U;
2000078a:	4b14      	ldr	r3, [pc, #80]	@ (200007dc <Set_Clock_Delay+0x68>)
2000078c:	2201      	movs	r2, #1
2000078e:	605a      	str	r2, [r3, #4]
      delay  = 1U;
    }

    DAP_Data.clock_delay = delay;
  }
}
20000790:	e01c      	b.n	200007cc <Set_Clock_Delay+0x58>
    DAP_Data.fast_clock  = 0U;
20000792:	4b12      	ldr	r3, [pc, #72]	@ (200007dc <Set_Clock_Delay+0x68>)
20000794:	2200      	movs	r2, #0
20000796:	705a      	strb	r2, [r3, #1]
    delay = ((CPU_CLOCK/2U) + (clock - 1U)) / clock;
20000798:	687a      	ldr	r2, [r7, #4]
2000079a:	4b11      	ldr	r3, [pc, #68]	@ (200007e0 <Set_Clock_Delay+0x6c>)
2000079c:	4413      	add	r3, r2
2000079e:	687a      	ldr	r2, [r7, #4]
200007a0:	fbb3 f3f2 	udiv	r3, r3, r2
200007a4:	60fb      	str	r3, [r7, #12]
    if (delay > IO_PORT_WRITE_CYCLES) {
200007a6:	68fb      	ldr	r3, [r7, #12]
200007a8:	2b02      	cmp	r3, #2
200007aa:	d90a      	bls.n	200007c2 <Set_Clock_Delay+0x4e>
      delay -= IO_PORT_WRITE_CYCLES;
200007ac:	68fb      	ldr	r3, [r7, #12]
200007ae:	3b02      	subs	r3, #2
200007b0:	60fb      	str	r3, [r7, #12]
      delay  = (delay + (DELAY_SLOW_CYCLES - 1U)) / DELAY_SLOW_CYCLES;
200007b2:	68fb      	ldr	r3, [r7, #12]
200007b4:	3302      	adds	r3, #2
200007b6:	4a0b      	ldr	r2, [pc, #44]	@ (200007e4 <Set_Clock_Delay+0x70>)
200007b8:	fba2 2303 	umull	r2, r3, r2, r3
200007bc:	085b      	lsrs	r3, r3, #1
200007be:	60fb      	str	r3, [r7, #12]
200007c0:	e001      	b.n	200007c6 <Set_Clock_Delay+0x52>
      delay  = 1U;
200007c2:	2301      	movs	r3, #1
200007c4:	60fb      	str	r3, [r7, #12]
    DAP_Data.clock_delay = delay;
200007c6:	4a05      	ldr	r2, [pc, #20]	@ (200007dc <Set_Clock_Delay+0x68>)
200007c8:	68fb      	ldr	r3, [r7, #12]
200007ca:	6053      	str	r3, [r2, #4]
}
200007cc:	bf00      	nop
200007ce:	3714      	adds	r7, #20
200007d0:	46bd      	mov	sp, r7
200007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200007d6:	4770      	bx	lr
200007d8:	0337f980 	.word	0x0337f980
200007dc:	2000d834 	.word	0x2000d834
200007e0:	066ff2ff 	.word	0x066ff2ff
200007e4:	aaaaaaab 	.word	0xaaaaaaab

200007e8 <DAP_Info>:

// Get DAP Information
//   id:      info identifier
//   info:    pointer to info data
//   return:  number of bytes in info data
static uint8_t DAP_Info(uint8_t id, uint8_t *info) {
200007e8:	b580      	push	{r7, lr}
200007ea:	b084      	sub	sp, #16
200007ec:	af00      	add	r7, sp, #0
200007ee:	4603      	mov	r3, r0
200007f0:	6039      	str	r1, [r7, #0]
200007f2:	71fb      	strb	r3, [r7, #7]
  uint8_t length = 0U;
200007f4:	2300      	movs	r3, #0
200007f6:	73fb      	strb	r3, [r7, #15]

  switch (id) {
200007f8:	79fb      	ldrb	r3, [r7, #7]
200007fa:	2b09      	cmp	r3, #9
200007fc:	dc42      	bgt.n	20000884 <DAP_Info+0x9c>
200007fe:	2b00      	cmp	r3, #0
20000800:	dc28      	bgt.n	20000854 <DAP_Info+0x6c>
    case DAP_ID_PACKET_COUNT:
      info[0] = DAP_PACKET_COUNT;
      length = 1U;
      break;
    default:
      break;
20000802:	e0a9      	b.n	20000958 <DAP_Info+0x170>
  switch (id) {
20000804:	3bf0      	subs	r3, #240	@ 0xf0
20000806:	2b0f      	cmp	r3, #15
20000808:	f200 80a6 	bhi.w	20000958 <DAP_Info+0x170>
2000080c:	a201      	add	r2, pc, #4	@ (adr r2, 20000814 <DAP_Info+0x2c>)
2000080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000812:	bf00      	nop
20000814:	20000901 	.word	0x20000901
20000818:	20000915 	.word	0x20000915
2000081c:	20000959 	.word	0x20000959
20000820:	20000959 	.word	0x20000959
20000824:	20000959 	.word	0x20000959
20000828:	20000959 	.word	0x20000959
2000082c:	20000959 	.word	0x20000959
20000830:	20000959 	.word	0x20000959
20000834:	20000959 	.word	0x20000959
20000838:	20000959 	.word	0x20000959
2000083c:	20000959 	.word	0x20000959
20000840:	20000959 	.word	0x20000959
20000844:	20000959 	.word	0x20000959
20000848:	20000959 	.word	0x20000959
2000084c:	2000094d 	.word	0x2000094d
20000850:	20000939 	.word	0x20000939
20000854:	3b01      	subs	r3, #1
20000856:	2b08      	cmp	r3, #8
20000858:	d87e      	bhi.n	20000958 <DAP_Info+0x170>
2000085a:	a201      	add	r2, pc, #4	@ (adr r2, 20000860 <DAP_Info+0x78>)
2000085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000860:	2000088f 	.word	0x2000088f
20000864:	2000089b 	.word	0x2000089b
20000868:	200008a7 	.word	0x200008a7
2000086c:	200008b3 	.word	0x200008b3
20000870:	200008c5 	.word	0x200008c5
20000874:	200008d1 	.word	0x200008d1
20000878:	200008dd 	.word	0x200008dd
2000087c:	200008e9 	.word	0x200008e9
20000880:	200008f5 	.word	0x200008f5
20000884:	2bff      	cmp	r3, #255	@ 0xff
20000886:	dc67      	bgt.n	20000958 <DAP_Info+0x170>
20000888:	2bf0      	cmp	r3, #240	@ 0xf0
2000088a:	dabb      	bge.n	20000804 <DAP_Info+0x1c>
      break;
2000088c:	e064      	b.n	20000958 <DAP_Info+0x170>
      length = DAP_GetVendorString((char *)info);
2000088e:	6838      	ldr	r0, [r7, #0]
20000890:	f7ff fe32 	bl	200004f8 <DAP_GetVendorString>
20000894:	4603      	mov	r3, r0
20000896:	73fb      	strb	r3, [r7, #15]
      break;
20000898:	e05f      	b.n	2000095a <DAP_Info+0x172>
      length = DAP_GetProductString((char *)info);
2000089a:	6838      	ldr	r0, [r7, #0]
2000089c:	f7ff fe37 	bl	2000050e <DAP_GetProductString>
200008a0:	4603      	mov	r3, r0
200008a2:	73fb      	strb	r3, [r7, #15]
      break;
200008a4:	e059      	b.n	2000095a <DAP_Info+0x172>
      length = DAP_GetSerNumString((char *)info);
200008a6:	6838      	ldr	r0, [r7, #0]
200008a8:	f7ff fe3c 	bl	20000524 <DAP_GetSerNumString>
200008ac:	4603      	mov	r3, r0
200008ae:	73fb      	strb	r3, [r7, #15]
      break;
200008b0:	e053      	b.n	2000095a <DAP_Info+0x172>
      length = (uint8_t)sizeof(DAP_FW_Ver);
200008b2:	2306      	movs	r3, #6
200008b4:	73fb      	strb	r3, [r7, #15]
      memcpy(info, DAP_FW_Ver, length);
200008b6:	7bfb      	ldrb	r3, [r7, #15]
200008b8:	461a      	mov	r2, r3
200008ba:	492a      	ldr	r1, [pc, #168]	@ (20000964 <DAP_Info+0x17c>)
200008bc:	6838      	ldr	r0, [r7, #0]
200008be:	f00c fdab 	bl	2000d418 <memcpy>
      break;
200008c2:	e04a      	b.n	2000095a <DAP_Info+0x172>
      length = DAP_GetTargetDeviceVendorString((char *)info);
200008c4:	6838      	ldr	r0, [r7, #0]
200008c6:	f7ff fe38 	bl	2000053a <DAP_GetTargetDeviceVendorString>
200008ca:	4603      	mov	r3, r0
200008cc:	73fb      	strb	r3, [r7, #15]
      break;
200008ce:	e044      	b.n	2000095a <DAP_Info+0x172>
      length = DAP_GetTargetDeviceNameString((char *)info);
200008d0:	6838      	ldr	r0, [r7, #0]
200008d2:	f7ff fe3d 	bl	20000550 <DAP_GetTargetDeviceNameString>
200008d6:	4603      	mov	r3, r0
200008d8:	73fb      	strb	r3, [r7, #15]
      break;
200008da:	e03e      	b.n	2000095a <DAP_Info+0x172>
      length = DAP_GetTargetBoardVendorString((char *)info);
200008dc:	6838      	ldr	r0, [r7, #0]
200008de:	f7ff fe42 	bl	20000566 <DAP_GetTargetBoardVendorString>
200008e2:	4603      	mov	r3, r0
200008e4:	73fb      	strb	r3, [r7, #15]
      break;
200008e6:	e038      	b.n	2000095a <DAP_Info+0x172>
      length = DAP_GetTargetBoardNameString((char *)info);
200008e8:	6838      	ldr	r0, [r7, #0]
200008ea:	f7ff fe47 	bl	2000057c <DAP_GetTargetBoardNameString>
200008ee:	4603      	mov	r3, r0
200008f0:	73fb      	strb	r3, [r7, #15]
      break;
200008f2:	e032      	b.n	2000095a <DAP_Info+0x172>
      length = DAP_GetProductFirmwareVersionString((char *)info);
200008f4:	6838      	ldr	r0, [r7, #0]
200008f6:	f7ff fe4c 	bl	20000592 <DAP_GetProductFirmwareVersionString>
200008fa:	4603      	mov	r3, r0
200008fc:	73fb      	strb	r3, [r7, #15]
      break;
200008fe:	e02c      	b.n	2000095a <DAP_Info+0x172>
      info[0] = ((DAP_SWD  != 0)         ? (1U << 0) : 0U) |
20000900:	683b      	ldr	r3, [r7, #0]
20000902:	2233      	movs	r2, #51	@ 0x33
20000904:	701a      	strb	r2, [r3, #0]
      info[1] = ((DAP_UART_USB_COM_PORT != 0) ? (1U << 0) : 0U);
20000906:	683b      	ldr	r3, [r7, #0]
20000908:	3301      	adds	r3, #1
2000090a:	2201      	movs	r2, #1
2000090c:	701a      	strb	r2, [r3, #0]
      length = 2U;
2000090e:	2302      	movs	r3, #2
20000910:	73fb      	strb	r3, [r7, #15]
      break;
20000912:	e022      	b.n	2000095a <DAP_Info+0x172>
      info[0] = (uint8_t)(TIMESTAMP_CLOCK >>  0);
20000914:	683b      	ldr	r3, [r7, #0]
20000916:	2200      	movs	r2, #0
20000918:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(TIMESTAMP_CLOCK >>  8);
2000091a:	683b      	ldr	r3, [r7, #0]
2000091c:	3301      	adds	r3, #1
2000091e:	22e1      	movs	r2, #225	@ 0xe1
20000920:	701a      	strb	r2, [r3, #0]
      info[2] = (uint8_t)(TIMESTAMP_CLOCK >> 16);
20000922:	683b      	ldr	r3, [r7, #0]
20000924:	3302      	adds	r3, #2
20000926:	22f5      	movs	r2, #245	@ 0xf5
20000928:	701a      	strb	r2, [r3, #0]
      info[3] = (uint8_t)(TIMESTAMP_CLOCK >> 24);
2000092a:	683b      	ldr	r3, [r7, #0]
2000092c:	3303      	adds	r3, #3
2000092e:	2205      	movs	r2, #5
20000930:	701a      	strb	r2, [r3, #0]
      length = 4U;
20000932:	2304      	movs	r3, #4
20000934:	73fb      	strb	r3, [r7, #15]
      break;
20000936:	e010      	b.n	2000095a <DAP_Info+0x172>
      info[0] = (uint8_t)(DAP_PACKET_SIZE >> 0);
20000938:	683b      	ldr	r3, [r7, #0]
2000093a:	2240      	movs	r2, #64	@ 0x40
2000093c:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(DAP_PACKET_SIZE >> 8);
2000093e:	683b      	ldr	r3, [r7, #0]
20000940:	3301      	adds	r3, #1
20000942:	2200      	movs	r2, #0
20000944:	701a      	strb	r2, [r3, #0]
      length = 2U;
20000946:	2302      	movs	r3, #2
20000948:	73fb      	strb	r3, [r7, #15]
      break;
2000094a:	e006      	b.n	2000095a <DAP_Info+0x172>
      info[0] = DAP_PACKET_COUNT;
2000094c:	683b      	ldr	r3, [r7, #0]
2000094e:	2201      	movs	r2, #1
20000950:	701a      	strb	r2, [r3, #0]
      length = 1U;
20000952:	2301      	movs	r3, #1
20000954:	73fb      	strb	r3, [r7, #15]
      break;
20000956:	e000      	b.n	2000095a <DAP_Info+0x172>
      break;
20000958:	bf00      	nop
  }

  return (length);
2000095a:	7bfb      	ldrb	r3, [r7, #15]
}
2000095c:	4618      	mov	r0, r3
2000095e:	3710      	adds	r7, #16
20000960:	46bd      	mov	sp, r7
20000962:	bd80      	pop	{r7, pc}
20000964:	2000d520 	.word	0x2000d520

20000968 <DAP_Delay>:
// Process Delay command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Delay(const uint8_t *request, uint8_t *response) {
20000968:	b480      	push	{r7}
2000096a:	b085      	sub	sp, #20
2000096c:	af00      	add	r7, sp, #0
2000096e:	6078      	str	r0, [r7, #4]
20000970:	6039      	str	r1, [r7, #0]
  uint32_t delay;

  delay  = (uint32_t)(*(request+0)) |
20000972:	687b      	ldr	r3, [r7, #4]
20000974:	781b      	ldrb	r3, [r3, #0]
20000976:	461a      	mov	r2, r3
           (uint32_t)(*(request+1) << 8);
20000978:	687b      	ldr	r3, [r7, #4]
2000097a:	3301      	adds	r3, #1
2000097c:	781b      	ldrb	r3, [r3, #0]
2000097e:	021b      	lsls	r3, r3, #8
  delay  = (uint32_t)(*(request+0)) |
20000980:	4313      	orrs	r3, r2
20000982:	60fb      	str	r3, [r7, #12]
  delay *= ((CPU_CLOCK/1000000U) + (DELAY_SLOW_CYCLES-1U)) / DELAY_SLOW_CYCLES;
20000984:	68fa      	ldr	r2, [r7, #12]
20000986:	4613      	mov	r3, r2
20000988:	00db      	lsls	r3, r3, #3
2000098a:	4413      	add	r3, r2
2000098c:	00db      	lsls	r3, r3, #3
2000098e:	60fb      	str	r3, [r7, #12]
20000990:	68fb      	ldr	r3, [r7, #12]
20000992:	60bb      	str	r3, [r7, #8]
  uint32_t count = delay;
  while (--count);
}
#else
__STATIC_FORCEINLINE void PIN_DELAY_SLOW (uint32_t delay) {
  __ASM volatile (
20000994:	68bb      	ldr	r3, [r7, #8]
20000996:	3b01      	subs	r3, #1
20000998:	d1fd      	bne.n	20000996 <DAP_Delay+0x2e>
2000099a:	60bb      	str	r3, [r7, #8]
  "0:\n\t"
    "subs %0,%0,#1\n\t"
    "bne  0b\n"
  : "+l" (delay) : : "cc"
  );
}
2000099c:	bf00      	nop

  PIN_DELAY_SLOW(delay);

  *response = DAP_OK;
2000099e:	683b      	ldr	r3, [r7, #0]
200009a0:	2200      	movs	r2, #0
200009a2:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
200009a4:	4b03      	ldr	r3, [pc, #12]	@ (200009b4 <DAP_Delay+0x4c>)
}
200009a6:	4618      	mov	r0, r3
200009a8:	3714      	adds	r7, #20
200009aa:	46bd      	mov	sp, r7
200009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200009b0:	4770      	bx	lr
200009b2:	bf00      	nop
200009b4:	00020001 	.word	0x00020001

200009b8 <DAP_HostStatus>:
// Process Host Status command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_HostStatus(const uint8_t *request, uint8_t *response) {
200009b8:	b580      	push	{r7, lr}
200009ba:	b082      	sub	sp, #8
200009bc:	af00      	add	r7, sp, #0
200009be:	6078      	str	r0, [r7, #4]
200009c0:	6039      	str	r1, [r7, #0]

  switch (*request) {
200009c2:	687b      	ldr	r3, [r7, #4]
200009c4:	781b      	ldrb	r3, [r3, #0]
200009c6:	2b00      	cmp	r3, #0
200009c8:	d002      	beq.n	200009d0 <DAP_HostStatus+0x18>
200009ca:	2b01      	cmp	r3, #1
200009cc:	d009      	beq.n	200009e2 <DAP_HostStatus+0x2a>
200009ce:	e011      	b.n	200009f4 <DAP_HostStatus+0x3c>
    case DAP_DEBUGGER_CONNECTED:
      LED_CONNECTED_OUT((*(request+1) & 1U));
200009d0:	687b      	ldr	r3, [r7, #4]
200009d2:	3301      	adds	r3, #1
200009d4:	781b      	ldrb	r3, [r3, #0]
200009d6:	f003 0301 	and.w	r3, r3, #1
200009da:	4618      	mov	r0, r3
200009dc:	f7ff fe84 	bl	200006e8 <LED_CONNECTED_OUT>
      break;
200009e0:	e00d      	b.n	200009fe <DAP_HostStatus+0x46>
    case DAP_TARGET_RUNNING:
      LED_RUNNING_OUT((*(request+1) & 1U));
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	3301      	adds	r3, #1
200009e6:	781b      	ldrb	r3, [r3, #0]
200009e8:	f003 0301 	and.w	r3, r3, #1
200009ec:	4618      	mov	r0, r3
200009ee:	f7ff fe95 	bl	2000071c <LED_RUNNING_OUT>
      break;
200009f2:	e004      	b.n	200009fe <DAP_HostStatus+0x46>
    default:
      *response = DAP_ERROR;
200009f4:	683b      	ldr	r3, [r7, #0]
200009f6:	22ff      	movs	r2, #255	@ 0xff
200009f8:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) | 1U);
200009fa:	4b05      	ldr	r3, [pc, #20]	@ (20000a10 <DAP_HostStatus+0x58>)
200009fc:	e003      	b.n	20000a06 <DAP_HostStatus+0x4e>
  }

  *response = DAP_OK;
200009fe:	683b      	ldr	r3, [r7, #0]
20000a00:	2200      	movs	r2, #0
20000a02:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
20000a04:	4b02      	ldr	r3, [pc, #8]	@ (20000a10 <DAP_HostStatus+0x58>)
}
20000a06:	4618      	mov	r0, r3
20000a08:	3708      	adds	r7, #8
20000a0a:	46bd      	mov	sp, r7
20000a0c:	bd80      	pop	{r7, pc}
20000a0e:	bf00      	nop
20000a10:	00020001 	.word	0x00020001

20000a14 <DAP_Connect>:
// Process Connect command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Connect(const uint8_t *request, uint8_t *response) {
20000a14:	b580      	push	{r7, lr}
20000a16:	b084      	sub	sp, #16
20000a18:	af00      	add	r7, sp, #0
20000a1a:	6078      	str	r0, [r7, #4]
20000a1c:	6039      	str	r1, [r7, #0]
  uint32_t port;

  if (*request == DAP_PORT_AUTODETECT) {
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	781b      	ldrb	r3, [r3, #0]
20000a22:	2b00      	cmp	r3, #0
20000a24:	d102      	bne.n	20000a2c <DAP_Connect+0x18>
    port = DAP_DEFAULT_PORT;
20000a26:	2301      	movs	r3, #1
20000a28:	60fb      	str	r3, [r7, #12]
20000a2a:	e002      	b.n	20000a32 <DAP_Connect+0x1e>
  } else {
    port = *request;
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	781b      	ldrb	r3, [r3, #0]
20000a30:	60fb      	str	r3, [r7, #12]
  }

  switch (port) {
20000a32:	68fb      	ldr	r3, [r7, #12]
20000a34:	2b01      	cmp	r3, #1
20000a36:	d003      	beq.n	20000a40 <DAP_Connect+0x2c>
20000a38:	68fb      	ldr	r3, [r7, #12]
20000a3a:	2b02      	cmp	r3, #2
20000a3c:	d006      	beq.n	20000a4c <DAP_Connect+0x38>
20000a3e:	e00b      	b.n	20000a58 <DAP_Connect+0x44>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      DAP_Data.debug_port = DAP_PORT_SWD;
20000a40:	4b0c      	ldr	r3, [pc, #48]	@ (20000a74 <DAP_Connect+0x60>)
20000a42:	2201      	movs	r2, #1
20000a44:	701a      	strb	r2, [r3, #0]
      PORT_SWD_SETUP();
20000a46:	f7ff fdb6 	bl	200005b6 <PORT_SWD_SETUP>
      break;
20000a4a:	e008      	b.n	20000a5e <DAP_Connect+0x4a>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      DAP_Data.debug_port = DAP_PORT_JTAG;
20000a4c:	4b09      	ldr	r3, [pc, #36]	@ (20000a74 <DAP_Connect+0x60>)
20000a4e:	2202      	movs	r2, #2
20000a50:	701a      	strb	r2, [r3, #0]
      PORT_JTAG_SETUP();
20000a52:	f7ff fda9 	bl	200005a8 <PORT_JTAG_SETUP>
      break;
20000a56:	e002      	b.n	20000a5e <DAP_Connect+0x4a>
#endif
    default:
      port = DAP_PORT_DISABLED;
20000a58:	2300      	movs	r3, #0
20000a5a:	60fb      	str	r3, [r7, #12]
      break;
20000a5c:	bf00      	nop
  }

  *response = (uint8_t)port;
20000a5e:	68fb      	ldr	r3, [r7, #12]
20000a60:	b2da      	uxtb	r2, r3
20000a62:	683b      	ldr	r3, [r7, #0]
20000a64:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
20000a66:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000a6a:	4618      	mov	r0, r3
20000a6c:	3710      	adds	r7, #16
20000a6e:	46bd      	mov	sp, r7
20000a70:	bd80      	pop	{r7, pc}
20000a72:	bf00      	nop
20000a74:	2000d834 	.word	0x2000d834

20000a78 <DAP_Disconnect>:


// Process Disconnect command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_Disconnect(uint8_t *response) {
20000a78:	b580      	push	{r7, lr}
20000a7a:	b082      	sub	sp, #8
20000a7c:	af00      	add	r7, sp, #0
20000a7e:	6078      	str	r0, [r7, #4]

  DAP_Data.debug_port = DAP_PORT_DISABLED;
20000a80:	4b06      	ldr	r3, [pc, #24]	@ (20000a9c <DAP_Disconnect+0x24>)
20000a82:	2200      	movs	r2, #0
20000a84:	701a      	strb	r2, [r3, #0]
  PORT_OFF();
20000a86:	f7ff fd9d 	bl	200005c4 <PORT_OFF>

  *response = DAP_OK;
20000a8a:	687b      	ldr	r3, [r7, #4]
20000a8c:	2200      	movs	r2, #0
20000a8e:	701a      	strb	r2, [r3, #0]
  return (1U);
20000a90:	2301      	movs	r3, #1
}
20000a92:	4618      	mov	r0, r3
20000a94:	3708      	adds	r7, #8
20000a96:	46bd      	mov	sp, r7
20000a98:	bd80      	pop	{r7, pc}
20000a9a:	bf00      	nop
20000a9c:	2000d834 	.word	0x2000d834

20000aa0 <DAP_ResetTarget>:


// Process Reset Target command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_ResetTarget(uint8_t *response) {
20000aa0:	b590      	push	{r4, r7, lr}
20000aa2:	b083      	sub	sp, #12
20000aa4:	af00      	add	r7, sp, #0
20000aa6:	6078      	str	r0, [r7, #4]

  *(response+1) = RESET_TARGET();
20000aa8:	687b      	ldr	r3, [r7, #4]
20000aaa:	1c5c      	adds	r4, r3, #1
20000aac:	f7ff fe5a 	bl	20000764 <RESET_TARGET>
20000ab0:	4603      	mov	r3, r0
20000ab2:	7023      	strb	r3, [r4, #0]
  *(response+0) = DAP_OK;
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	2200      	movs	r2, #0
20000ab8:	701a      	strb	r2, [r3, #0]
  return (2U);
20000aba:	2302      	movs	r3, #2
}
20000abc:	4618      	mov	r0, r3
20000abe:	370c      	adds	r7, #12
20000ac0:	46bd      	mov	sp, r7
20000ac2:	bd90      	pop	{r4, r7, pc}

20000ac4 <DAP_SWJ_Pins>:
// Process SWJ Pins command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Pins(const uint8_t *request, uint8_t *response) {
20000ac4:	b590      	push	{r4, r7, lr}
20000ac6:	b087      	sub	sp, #28
20000ac8:	af00      	add	r7, sp, #0
20000aca:	6078      	str	r0, [r7, #4]
20000acc:	6039      	str	r1, [r7, #0]
  uint32_t value;
  uint32_t select;
  uint32_t wait;
  uint32_t timestamp;

  value  = (uint32_t) *(request+0);
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	781b      	ldrb	r3, [r3, #0]
20000ad2:	613b      	str	r3, [r7, #16]
  select = (uint32_t) *(request+1);
20000ad4:	687b      	ldr	r3, [r7, #4]
20000ad6:	3301      	adds	r3, #1
20000ad8:	781b      	ldrb	r3, [r3, #0]
20000ada:	60fb      	str	r3, [r7, #12]
  wait   = (uint32_t)(*(request+2) <<  0) |
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	3302      	adds	r3, #2
20000ae0:	781b      	ldrb	r3, [r3, #0]
20000ae2:	461a      	mov	r2, r3
           (uint32_t)(*(request+3) <<  8) |
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	3303      	adds	r3, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	021b      	lsls	r3, r3, #8
  wait   = (uint32_t)(*(request+2) <<  0) |
20000aec:	431a      	orrs	r2, r3
           (uint32_t)(*(request+4) << 16) |
20000aee:	687b      	ldr	r3, [r7, #4]
20000af0:	3304      	adds	r3, #4
20000af2:	781b      	ldrb	r3, [r3, #0]
20000af4:	041b      	lsls	r3, r3, #16
           (uint32_t)(*(request+3) <<  8) |
20000af6:	431a      	orrs	r2, r3
           (uint32_t)(*(request+5) << 24);
20000af8:	687b      	ldr	r3, [r7, #4]
20000afa:	3305      	adds	r3, #5
20000afc:	781b      	ldrb	r3, [r3, #0]
20000afe:	061b      	lsls	r3, r3, #24
  wait   = (uint32_t)(*(request+2) <<  0) |
20000b00:	4313      	orrs	r3, r2
20000b02:	617b      	str	r3, [r7, #20]

  if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000b04:	68fb      	ldr	r3, [r7, #12]
20000b06:	f003 0301 	and.w	r3, r3, #1
20000b0a:	2b00      	cmp	r3, #0
20000b0c:	d009      	beq.n	20000b22 <DAP_SWJ_Pins+0x5e>
    if ((value & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000b0e:	693b      	ldr	r3, [r7, #16]
20000b10:	f003 0301 	and.w	r3, r3, #1
20000b14:	2b00      	cmp	r3, #0
20000b16:	d002      	beq.n	20000b1e <DAP_SWJ_Pins+0x5a>
      PIN_SWCLK_TCK_SET();
20000b18:	f7ff fd63 	bl	200005e2 <PIN_SWCLK_TCK_SET>
20000b1c:	e001      	b.n	20000b22 <DAP_SWJ_Pins+0x5e>
    } else {
      PIN_SWCLK_TCK_CLR();
20000b1e:	f7ff fd67 	bl	200005f0 <PIN_SWCLK_TCK_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000b22:	68fb      	ldr	r3, [r7, #12]
20000b24:	f003 0302 	and.w	r3, r3, #2
20000b28:	2b00      	cmp	r3, #0
20000b2a:	d009      	beq.n	20000b40 <DAP_SWJ_Pins+0x7c>
    if ((value & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000b2c:	693b      	ldr	r3, [r7, #16]
20000b2e:	f003 0302 	and.w	r3, r3, #2
20000b32:	2b00      	cmp	r3, #0
20000b34:	d002      	beq.n	20000b3c <DAP_SWJ_Pins+0x78>
      PIN_SWDIO_TMS_SET();
20000b36:	f7ff fd6a 	bl	2000060e <PIN_SWDIO_TMS_SET>
20000b3a:	e001      	b.n	20000b40 <DAP_SWJ_Pins+0x7c>
    } else {
      PIN_SWDIO_TMS_CLR();
20000b3c:	f7ff fd6e 	bl	2000061c <PIN_SWDIO_TMS_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000b40:	68fb      	ldr	r3, [r7, #12]
20000b42:	f003 0304 	and.w	r3, r3, #4
20000b46:	2b00      	cmp	r3, #0
20000b48:	d004      	beq.n	20000b54 <DAP_SWJ_Pins+0x90>
    PIN_TDI_OUT(value >> DAP_SWJ_TDI);
20000b4a:	693b      	ldr	r3, [r7, #16]
20000b4c:	089b      	lsrs	r3, r3, #2
20000b4e:	4618      	mov	r0, r3
20000b50:	f7ff fd81 	bl	20000656 <PIN_TDI_OUT>
  }
  if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000b54:	68fb      	ldr	r3, [r7, #12]
20000b56:	f003 0320 	and.w	r3, r3, #32
20000b5a:	2b00      	cmp	r3, #0
20000b5c:	d004      	beq.n	20000b68 <DAP_SWJ_Pins+0xa4>
    PIN_nTRST_OUT(value >> DAP_SWJ_nTRST);
20000b5e:	693b      	ldr	r3, [r7, #16]
20000b60:	095b      	lsrs	r3, r3, #5
20000b62:	4618      	mov	r0, r3
20000b64:	f7ff fd91 	bl	2000068a <PIN_nTRST_OUT>
  }
  if ((select & (1U << DAP_SWJ_nRESET)) != 0U){
20000b68:	68fb      	ldr	r3, [r7, #12]
20000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000b6e:	2b00      	cmp	r3, #0
20000b70:	d004      	beq.n	20000b7c <DAP_SWJ_Pins+0xb8>
    PIN_nRESET_OUT(value >> DAP_SWJ_nRESET);
20000b72:	693b      	ldr	r3, [r7, #16]
20000b74:	09db      	lsrs	r3, r3, #7
20000b76:	4618      	mov	r0, r3
20000b78:	f7ff fd9e 	bl	200006b8 <PIN_nRESET_OUT>
  }

  if (wait != 0U) {
20000b7c:	697b      	ldr	r3, [r7, #20]
20000b7e:	2b00      	cmp	r3, #0
20000b80:	d05a      	beq.n	20000c38 <DAP_SWJ_Pins+0x174>
#if (TIMESTAMP_CLOCK != 0U)
    if (wait > 3000000U) {
20000b82:	697b      	ldr	r3, [r7, #20]
20000b84:	4a3f      	ldr	r2, [pc, #252]	@ (20000c84 <DAP_SWJ_Pins+0x1c0>)
20000b86:	4293      	cmp	r3, r2
20000b88:	d901      	bls.n	20000b8e <DAP_SWJ_Pins+0xca>
      wait = 3000000U;
20000b8a:	4b3e      	ldr	r3, [pc, #248]	@ (20000c84 <DAP_SWJ_Pins+0x1c0>)
20000b8c:	617b      	str	r3, [r7, #20]
    }
#if (TIMESTAMP_CLOCK >= 1000000U)
    wait *= TIMESTAMP_CLOCK / 1000000U;
20000b8e:	697b      	ldr	r3, [r7, #20]
20000b90:	2264      	movs	r2, #100	@ 0x64
20000b92:	fb02 f303 	mul.w	r3, r2, r3
20000b96:	617b      	str	r3, [r7, #20]
    wait /= 1000000U / TIMESTAMP_CLOCK;
#endif
#else
    wait  = 1U;
#endif
    timestamp = TIMESTAMP_GET();
20000b98:	f7ff fdd8 	bl	2000074c <TIMESTAMP_GET>
20000b9c:	60b8      	str	r0, [r7, #8]
    do {
      if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000b9e:	68fb      	ldr	r3, [r7, #12]
20000ba0:	f003 0301 	and.w	r3, r3, #1
20000ba4:	2b00      	cmp	r3, #0
20000ba6:	d005      	beq.n	20000bb4 <DAP_SWJ_Pins+0xf0>
        if ((value >> DAP_SWJ_SWCLK_TCK) ^ PIN_SWCLK_TCK_IN()) {
20000ba8:	f7ff fd13 	bl	200005d2 <PIN_SWCLK_TCK_IN>
20000bac:	4602      	mov	r2, r0
20000bae:	693b      	ldr	r3, [r7, #16]
20000bb0:	4293      	cmp	r3, r2
20000bb2:	d130      	bne.n	20000c16 <DAP_SWJ_Pins+0x152>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000bb4:	68fb      	ldr	r3, [r7, #12]
20000bb6:	f003 0302 	and.w	r3, r3, #2
20000bba:	2b00      	cmp	r3, #0
20000bbc:	d006      	beq.n	20000bcc <DAP_SWJ_Pins+0x108>
        if ((value >> DAP_SWJ_SWDIO_TMS) ^ PIN_SWDIO_TMS_IN()) {
20000bbe:	693b      	ldr	r3, [r7, #16]
20000bc0:	085c      	lsrs	r4, r3, #1
20000bc2:	f7ff fd1c 	bl	200005fe <PIN_SWDIO_TMS_IN>
20000bc6:	4603      	mov	r3, r0
20000bc8:	429c      	cmp	r4, r3
20000bca:	d126      	bne.n	20000c1a <DAP_SWJ_Pins+0x156>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000bcc:	68fb      	ldr	r3, [r7, #12]
20000bce:	f003 0304 	and.w	r3, r3, #4
20000bd2:	2b00      	cmp	r3, #0
20000bd4:	d006      	beq.n	20000be4 <DAP_SWJ_Pins+0x120>
        if ((value >> DAP_SWJ_TDI) ^ PIN_TDI_IN()) {
20000bd6:	693b      	ldr	r3, [r7, #16]
20000bd8:	089c      	lsrs	r4, r3, #2
20000bda:	f7ff fd34 	bl	20000646 <PIN_TDI_IN>
20000bde:	4603      	mov	r3, r0
20000be0:	429c      	cmp	r4, r3
20000be2:	d11c      	bne.n	20000c1e <DAP_SWJ_Pins+0x15a>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000be4:	68fb      	ldr	r3, [r7, #12]
20000be6:	f003 0320 	and.w	r3, r3, #32
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <DAP_SWJ_Pins+0x138>
        if ((value >> DAP_SWJ_nTRST) ^ PIN_nTRST_IN()) {
20000bee:	693b      	ldr	r3, [r7, #16]
20000bf0:	095c      	lsrs	r4, r3, #5
20000bf2:	f7ff fd42 	bl	2000067a <PIN_nTRST_IN>
20000bf6:	4603      	mov	r3, r0
20000bf8:	429c      	cmp	r4, r3
20000bfa:	d112      	bne.n	20000c22 <DAP_SWJ_Pins+0x15e>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nRESET)) != 0U) {
20000bfc:	68fb      	ldr	r3, [r7, #12]
20000bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000c02:	2b00      	cmp	r3, #0
20000c04:	d017      	beq.n	20000c36 <DAP_SWJ_Pins+0x172>
        if ((value >> DAP_SWJ_nRESET) ^ PIN_nRESET_IN()) {
20000c06:	693b      	ldr	r3, [r7, #16]
20000c08:	09dc      	lsrs	r4, r3, #7
20000c0a:	f7ff fd49 	bl	200006a0 <PIN_nRESET_IN>
20000c0e:	4603      	mov	r3, r0
20000c10:	429c      	cmp	r4, r3
20000c12:	d010      	beq.n	20000c36 <DAP_SWJ_Pins+0x172>
          continue;
20000c14:	e006      	b.n	20000c24 <DAP_SWJ_Pins+0x160>
          continue;
20000c16:	bf00      	nop
20000c18:	e004      	b.n	20000c24 <DAP_SWJ_Pins+0x160>
          continue;
20000c1a:	bf00      	nop
20000c1c:	e002      	b.n	20000c24 <DAP_SWJ_Pins+0x160>
          continue;
20000c1e:	bf00      	nop
20000c20:	e000      	b.n	20000c24 <DAP_SWJ_Pins+0x160>
          continue;
20000c22:	bf00      	nop
        }
      }
      break;
    } while ((TIMESTAMP_GET() - timestamp) < wait);
20000c24:	f7ff fd92 	bl	2000074c <TIMESTAMP_GET>
20000c28:	4602      	mov	r2, r0
20000c2a:	68bb      	ldr	r3, [r7, #8]
20000c2c:	1ad3      	subs	r3, r2, r3
20000c2e:	697a      	ldr	r2, [r7, #20]
20000c30:	429a      	cmp	r2, r3
20000c32:	d8b4      	bhi.n	20000b9e <DAP_SWJ_Pins+0xda>
20000c34:	e000      	b.n	20000c38 <DAP_SWJ_Pins+0x174>
      break;
20000c36:	bf00      	nop
  }

  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000c38:	f7ff fccb 	bl	200005d2 <PIN_SWCLK_TCK_IN>
20000c3c:	4604      	mov	r4, r0
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000c3e:	f7ff fcde 	bl	200005fe <PIN_SWDIO_TMS_IN>
20000c42:	4603      	mov	r3, r0
20000c44:	005b      	lsls	r3, r3, #1
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000c46:	431c      	orrs	r4, r3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000c48:	f7ff fcfd 	bl	20000646 <PIN_TDI_IN>
20000c4c:	4603      	mov	r3, r0
20000c4e:	009b      	lsls	r3, r3, #2
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000c50:	431c      	orrs	r4, r3
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000c52:	f7ff fd0a 	bl	2000066a <PIN_TDO_IN>
20000c56:	4603      	mov	r3, r0
20000c58:	00db      	lsls	r3, r3, #3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000c5a:	431c      	orrs	r4, r3
          (PIN_nTRST_IN()     << DAP_SWJ_nTRST)     |
20000c5c:	f7ff fd0d 	bl	2000067a <PIN_nTRST_IN>
20000c60:	4603      	mov	r3, r0
20000c62:	015b      	lsls	r3, r3, #5
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000c64:	431c      	orrs	r4, r3
          (PIN_nRESET_IN()    << DAP_SWJ_nRESET);
20000c66:	f7ff fd1b 	bl	200006a0 <PIN_nRESET_IN>
20000c6a:	4603      	mov	r3, r0
20000c6c:	01db      	lsls	r3, r3, #7
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000c6e:	4323      	orrs	r3, r4
20000c70:	613b      	str	r3, [r7, #16]

  *response = (uint8_t)value;
20000c72:	693b      	ldr	r3, [r7, #16]
20000c74:	b2da      	uxtb	r2, r3
20000c76:	683b      	ldr	r3, [r7, #0]
20000c78:	701a      	strb	r2, [r3, #0]
#else
  *response = 0U;
#endif

  return ((6U << 16) | 1U);
20000c7a:	4b03      	ldr	r3, [pc, #12]	@ (20000c88 <DAP_SWJ_Pins+0x1c4>)
}
20000c7c:	4618      	mov	r0, r3
20000c7e:	371c      	adds	r7, #28
20000c80:	46bd      	mov	sp, r7
20000c82:	bd90      	pop	{r4, r7, pc}
20000c84:	002dc6c0 	.word	0x002dc6c0
20000c88:	00060001 	.word	0x00060001

20000c8c <DAP_SWJ_Clock>:
// Process SWJ Clock command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Clock(const uint8_t *request, uint8_t *response) {
20000c8c:	b580      	push	{r7, lr}
20000c8e:	b084      	sub	sp, #16
20000c90:	af00      	add	r7, sp, #0
20000c92:	6078      	str	r0, [r7, #4]
20000c94:	6039      	str	r1, [r7, #0]
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  uint32_t clock;
  uint32_t delay;

  clock = (uint32_t)(*(request+0) <<  0) |
20000c96:	687b      	ldr	r3, [r7, #4]
20000c98:	781b      	ldrb	r3, [r3, #0]
20000c9a:	461a      	mov	r2, r3
          (uint32_t)(*(request+1) <<  8) |
20000c9c:	687b      	ldr	r3, [r7, #4]
20000c9e:	3301      	adds	r3, #1
20000ca0:	781b      	ldrb	r3, [r3, #0]
20000ca2:	021b      	lsls	r3, r3, #8
  clock = (uint32_t)(*(request+0) <<  0) |
20000ca4:	431a      	orrs	r2, r3
          (uint32_t)(*(request+2) << 16) |
20000ca6:	687b      	ldr	r3, [r7, #4]
20000ca8:	3302      	adds	r3, #2
20000caa:	781b      	ldrb	r3, [r3, #0]
20000cac:	041b      	lsls	r3, r3, #16
          (uint32_t)(*(request+1) <<  8) |
20000cae:	431a      	orrs	r2, r3
          (uint32_t)(*(request+3) << 24);
20000cb0:	687b      	ldr	r3, [r7, #4]
20000cb2:	3303      	adds	r3, #3
20000cb4:	781b      	ldrb	r3, [r3, #0]
20000cb6:	061b      	lsls	r3, r3, #24
  clock = (uint32_t)(*(request+0) <<  0) |
20000cb8:	4313      	orrs	r3, r2
20000cba:	60fb      	str	r3, [r7, #12]

  if (clock == 0U) {
20000cbc:	68fb      	ldr	r3, [r7, #12]
20000cbe:	2b00      	cmp	r3, #0
20000cc0:	d104      	bne.n	20000ccc <DAP_SWJ_Clock+0x40>
    *response = DAP_ERROR;
20000cc2:	683b      	ldr	r3, [r7, #0]
20000cc4:	22ff      	movs	r2, #255	@ 0xff
20000cc6:	701a      	strb	r2, [r3, #0]
    return ((4U << 16) | 1U);
20000cc8:	4b06      	ldr	r3, [pc, #24]	@ (20000ce4 <DAP_SWJ_Clock+0x58>)
20000cca:	e006      	b.n	20000cda <DAP_SWJ_Clock+0x4e>
  }

  Set_Clock_Delay(clock);
20000ccc:	68f8      	ldr	r0, [r7, #12]
20000cce:	f7ff fd51 	bl	20000774 <Set_Clock_Delay>

  *response = DAP_OK;
20000cd2:	683b      	ldr	r3, [r7, #0]
20000cd4:	2200      	movs	r2, #0
20000cd6:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  return ((4U << 16) | 1U);
20000cd8:	4b02      	ldr	r3, [pc, #8]	@ (20000ce4 <DAP_SWJ_Clock+0x58>)
}
20000cda:	4618      	mov	r0, r3
20000cdc:	3710      	adds	r7, #16
20000cde:	46bd      	mov	sp, r7
20000ce0:	bd80      	pop	{r7, pc}
20000ce2:	bf00      	nop
20000ce4:	00040001 	.word	0x00040001

20000ce8 <DAP_SWJ_Sequence>:
// Process SWJ Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Sequence(const uint8_t *request, uint8_t *response) {
20000ce8:	b580      	push	{r7, lr}
20000cea:	b084      	sub	sp, #16
20000cec:	af00      	add	r7, sp, #0
20000cee:	6078      	str	r0, [r7, #4]
20000cf0:	6039      	str	r1, [r7, #0]
  uint32_t count;

  count = *request++;
20000cf2:	687b      	ldr	r3, [r7, #4]
20000cf4:	1c5a      	adds	r2, r3, #1
20000cf6:	607a      	str	r2, [r7, #4]
20000cf8:	781b      	ldrb	r3, [r3, #0]
20000cfa:	60fb      	str	r3, [r7, #12]
  if (count == 0U) {
20000cfc:	68fb      	ldr	r3, [r7, #12]
20000cfe:	2b00      	cmp	r3, #0
20000d00:	d102      	bne.n	20000d08 <DAP_SWJ_Sequence+0x20>
    count = 256U;
20000d02:	f44f 7380 	mov.w	r3, #256	@ 0x100
20000d06:	60fb      	str	r3, [r7, #12]
  }

#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  SWJ_Sequence(count, request);
20000d08:	6879      	ldr	r1, [r7, #4]
20000d0a:	68f8      	ldr	r0, [r7, #12]
20000d0c:	f003 f90e 	bl	20003f2c <SWJ_Sequence>
  *response = DAP_OK;
20000d10:	683b      	ldr	r3, [r7, #0]
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  count = (count + 7U) >> 3;
20000d16:	68fb      	ldr	r3, [r7, #12]
20000d18:	3307      	adds	r3, #7
20000d1a:	08db      	lsrs	r3, r3, #3
20000d1c:	60fb      	str	r3, [r7, #12]

  return (((count + 1U) << 16) | 1U);
20000d1e:	68fb      	ldr	r3, [r7, #12]
20000d20:	3301      	adds	r3, #1
20000d22:	041b      	lsls	r3, r3, #16
20000d24:	f043 0301 	orr.w	r3, r3, #1
}
20000d28:	4618      	mov	r0, r3
20000d2a:	3710      	adds	r7, #16
20000d2c:	46bd      	mov	sp, r7
20000d2e:	bd80      	pop	{r7, pc}

20000d30 <DAP_SWD_Configure>:
// Process SWD Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Configure(const uint8_t *request, uint8_t *response) {
20000d30:	b480      	push	{r7}
20000d32:	b085      	sub	sp, #20
20000d34:	af00      	add	r7, sp, #0
20000d36:	6078      	str	r0, [r7, #4]
20000d38:	6039      	str	r1, [r7, #0]
#if (DAP_SWD != 0)
  uint8_t value;

  value = *request;
20000d3a:	687b      	ldr	r3, [r7, #4]
20000d3c:	781b      	ldrb	r3, [r3, #0]
20000d3e:	73fb      	strb	r3, [r7, #15]
  DAP_Data.swd_conf.turnaround = (value & 0x03U) + 1U;
20000d40:	7bfb      	ldrb	r3, [r7, #15]
20000d42:	f003 0303 	and.w	r3, r3, #3
20000d46:	b2db      	uxtb	r3, r3
20000d48:	3301      	adds	r3, #1
20000d4a:	b2da      	uxtb	r2, r3
20000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (20000d78 <DAP_SWD_Configure+0x48>)
20000d4e:	761a      	strb	r2, [r3, #24]
  DAP_Data.swd_conf.data_phase = (value & 0x04U) ? 1U : 0U;
20000d50:	7bfb      	ldrb	r3, [r7, #15]
20000d52:	089b      	lsrs	r3, r3, #2
20000d54:	b2db      	uxtb	r3, r3
20000d56:	f003 0301 	and.w	r3, r3, #1
20000d5a:	b2da      	uxtb	r2, r3
20000d5c:	4b06      	ldr	r3, [pc, #24]	@ (20000d78 <DAP_SWD_Configure+0x48>)
20000d5e:	765a      	strb	r2, [r3, #25]

  *response = DAP_OK;
20000d60:	683b      	ldr	r3, [r7, #0]
20000d62:	2200      	movs	r2, #0
20000d64:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  return ((1U << 16) | 1U);
20000d66:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000d6a:	4618      	mov	r0, r3
20000d6c:	3714      	adds	r7, #20
20000d6e:	46bd      	mov	sp, r7
20000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
20000d74:	4770      	bx	lr
20000d76:	bf00      	nop
20000d78:	2000d834 	.word	0x2000d834

20000d7c <DAP_SWD_Sequence>:
// Process SWD Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Sequence(const uint8_t *request, uint8_t *response) {
20000d7c:	b580      	push	{r7, lr}
20000d7e:	b088      	sub	sp, #32
20000d80:	af00      	add	r7, sp, #0
20000d82:	6078      	str	r0, [r7, #4]
20000d84:	6039      	str	r1, [r7, #0]
  uint32_t request_count;
  uint32_t response_count;
  uint32_t count;

#if (DAP_SWD != 0)
  *response++ = DAP_OK;
20000d86:	683b      	ldr	r3, [r7, #0]
20000d88:	1c5a      	adds	r2, r3, #1
20000d8a:	603a      	str	r2, [r7, #0]
20000d8c:	2200      	movs	r2, #0
20000d8e:	701a      	strb	r2, [r3, #0]
#else
  *response++ = DAP_ERROR;
#endif
  request_count  = 1U;
20000d90:	2301      	movs	r3, #1
20000d92:	61bb      	str	r3, [r7, #24]
  response_count = 1U;
20000d94:	2301      	movs	r3, #1
20000d96:	617b      	str	r3, [r7, #20]

  sequence_count = *request++;
20000d98:	687b      	ldr	r3, [r7, #4]
20000d9a:	1c5a      	adds	r2, r3, #1
20000d9c:	607a      	str	r2, [r7, #4]
20000d9e:	781b      	ldrb	r3, [r3, #0]
20000da0:	61fb      	str	r3, [r7, #28]
  while (sequence_count--) {
20000da2:	e03f      	b.n	20000e24 <DAP_SWD_Sequence+0xa8>
    sequence_info = *request++;
20000da4:	687b      	ldr	r3, [r7, #4]
20000da6:	1c5a      	adds	r2, r3, #1
20000da8:	607a      	str	r2, [r7, #4]
20000daa:	781b      	ldrb	r3, [r3, #0]
20000dac:	60fb      	str	r3, [r7, #12]
    count = sequence_info & SWD_SEQUENCE_CLK;
20000dae:	68fb      	ldr	r3, [r7, #12]
20000db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20000db4:	613b      	str	r3, [r7, #16]
    if (count == 0U) {
20000db6:	693b      	ldr	r3, [r7, #16]
20000db8:	2b00      	cmp	r3, #0
20000dba:	d101      	bne.n	20000dc0 <DAP_SWD_Sequence+0x44>
      count = 64U;
20000dbc:	2340      	movs	r3, #64	@ 0x40
20000dbe:	613b      	str	r3, [r7, #16]
    }
    count = (count + 7U) / 8U;
20000dc0:	693b      	ldr	r3, [r7, #16]
20000dc2:	3307      	adds	r3, #7
20000dc4:	08db      	lsrs	r3, r3, #3
20000dc6:	613b      	str	r3, [r7, #16]
#if (DAP_SWD != 0)
    if ((sequence_info & SWD_SEQUENCE_DIN) != 0U) {
20000dc8:	68fb      	ldr	r3, [r7, #12]
20000dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000dce:	2b00      	cmp	r3, #0
20000dd0:	d002      	beq.n	20000dd8 <DAP_SWD_Sequence+0x5c>
      PIN_SWDIO_OUT_DISABLE();
20000dd2:	f7ff fc31 	bl	20000638 <PIN_SWDIO_OUT_DISABLE>
20000dd6:	e001      	b.n	20000ddc <DAP_SWD_Sequence+0x60>
    } else {
      PIN_SWDIO_OUT_ENABLE();
20000dd8:	f7ff fc27 	bl	2000062a <PIN_SWDIO_OUT_ENABLE>
    }
    SWD_Sequence(sequence_info, request, response);
20000ddc:	683a      	ldr	r2, [r7, #0]
20000dde:	6879      	ldr	r1, [r7, #4]
20000de0:	68f8      	ldr	r0, [r7, #12]
20000de2:	f003 f961 	bl	200040a8 <SWD_Sequence>
    if (sequence_count == 0U) {
20000de6:	69fb      	ldr	r3, [r7, #28]
20000de8:	2b00      	cmp	r3, #0
20000dea:	d101      	bne.n	20000df0 <DAP_SWD_Sequence+0x74>
      PIN_SWDIO_OUT_ENABLE();
20000dec:	f7ff fc1d 	bl	2000062a <PIN_SWDIO_OUT_ENABLE>
    }
#endif
    if ((sequence_info & SWD_SEQUENCE_DIN) != 0U) {
20000df0:	68fb      	ldr	r3, [r7, #12]
20000df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000df6:	2b00      	cmp	r3, #0
20000df8:	d00b      	beq.n	20000e12 <DAP_SWD_Sequence+0x96>
      request_count++;
20000dfa:	69bb      	ldr	r3, [r7, #24]
20000dfc:	3301      	adds	r3, #1
20000dfe:	61bb      	str	r3, [r7, #24]
#if (DAP_SWD != 0)
      response += count;
20000e00:	683a      	ldr	r2, [r7, #0]
20000e02:	693b      	ldr	r3, [r7, #16]
20000e04:	4413      	add	r3, r2
20000e06:	603b      	str	r3, [r7, #0]
      response_count += count;
20000e08:	697a      	ldr	r2, [r7, #20]
20000e0a:	693b      	ldr	r3, [r7, #16]
20000e0c:	4413      	add	r3, r2
20000e0e:	617b      	str	r3, [r7, #20]
20000e10:	e008      	b.n	20000e24 <DAP_SWD_Sequence+0xa8>
#endif
    } else {
      request += count;
20000e12:	687a      	ldr	r2, [r7, #4]
20000e14:	693b      	ldr	r3, [r7, #16]
20000e16:	4413      	add	r3, r2
20000e18:	607b      	str	r3, [r7, #4]
      request_count += count + 1U;
20000e1a:	693a      	ldr	r2, [r7, #16]
20000e1c:	69bb      	ldr	r3, [r7, #24]
20000e1e:	4413      	add	r3, r2
20000e20:	3301      	adds	r3, #1
20000e22:	61bb      	str	r3, [r7, #24]
  while (sequence_count--) {
20000e24:	69fb      	ldr	r3, [r7, #28]
20000e26:	1e5a      	subs	r2, r3, #1
20000e28:	61fa      	str	r2, [r7, #28]
20000e2a:	2b00      	cmp	r3, #0
20000e2c:	d1ba      	bne.n	20000da4 <DAP_SWD_Sequence+0x28>
    }
  }

  return ((request_count << 16) | response_count);
20000e2e:	69bb      	ldr	r3, [r7, #24]
20000e30:	041a      	lsls	r2, r3, #16
20000e32:	697b      	ldr	r3, [r7, #20]
20000e34:	4313      	orrs	r3, r2
}
20000e36:	4618      	mov	r0, r3
20000e38:	3720      	adds	r7, #32
20000e3a:	46bd      	mov	sp, r7
20000e3c:	bd80      	pop	{r7, pc}

20000e3e <DAP_JTAG_Sequence>:
// Process JTAG Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Sequence(const uint8_t *request, uint8_t *response) {
20000e3e:	b580      	push	{r7, lr}
20000e40:	b086      	sub	sp, #24
20000e42:	af00      	add	r7, sp, #0
20000e44:	6078      	str	r0, [r7, #4]
20000e46:	6039      	str	r1, [r7, #0]
  uint32_t request_count;
  uint32_t response_count;
  uint32_t count;

#if (DAP_JTAG != 0)
  *response++ = DAP_OK;
20000e48:	683b      	ldr	r3, [r7, #0]
20000e4a:	1c5a      	adds	r2, r3, #1
20000e4c:	603a      	str	r2, [r7, #0]
20000e4e:	2200      	movs	r2, #0
20000e50:	701a      	strb	r2, [r3, #0]
#else
  *response++ = DAP_ERROR;
#endif
  request_count  = 1U;
20000e52:	2301      	movs	r3, #1
20000e54:	617b      	str	r3, [r7, #20]
  response_count = 1U;
20000e56:	2301      	movs	r3, #1
20000e58:	613b      	str	r3, [r7, #16]

  sequence_count = *request++;
20000e5a:	687b      	ldr	r3, [r7, #4]
20000e5c:	1c5a      	adds	r2, r3, #1
20000e5e:	607a      	str	r2, [r7, #4]
20000e60:	781b      	ldrb	r3, [r3, #0]
20000e62:	60fb      	str	r3, [r7, #12]

  response_count = JTAG_Sequence(sequence_count, request, response);
20000e64:	683a      	ldr	r2, [r7, #0]
20000e66:	6879      	ldr	r1, [r7, #4]
20000e68:	68f8      	ldr	r0, [r7, #12]
20000e6a:	f001 feaf 	bl	20002bcc <JTAG_Sequence>
20000e6e:	6138      	str	r0, [r7, #16]


  return ((request_count << 16) | response_count) +1;
20000e70:	697b      	ldr	r3, [r7, #20]
20000e72:	041a      	lsls	r2, r3, #16
20000e74:	693b      	ldr	r3, [r7, #16]
20000e76:	4313      	orrs	r3, r2
20000e78:	3301      	adds	r3, #1
}
20000e7a:	4618      	mov	r0, r3
20000e7c:	3718      	adds	r7, #24
20000e7e:	46bd      	mov	sp, r7
20000e80:	bd80      	pop	{r7, pc}
	...

20000e84 <DAP_JTAG_Configure>:
// Process JTAG Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Configure(const uint8_t *request, uint8_t *response) {
20000e84:	b480      	push	{r7}
20000e86:	b087      	sub	sp, #28
20000e88:	af00      	add	r7, sp, #0
20000e8a:	6078      	str	r0, [r7, #4]
20000e8c:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t length;
  uint32_t bits;
  uint32_t n;

  count = *request++;
20000e8e:	687b      	ldr	r3, [r7, #4]
20000e90:	1c5a      	adds	r2, r3, #1
20000e92:	607a      	str	r2, [r7, #4]
20000e94:	781b      	ldrb	r3, [r3, #0]
20000e96:	60fb      	str	r3, [r7, #12]
  DAP_Data.jtag_dev.count = (uint8_t)count;
20000e98:	68fb      	ldr	r3, [r7, #12]
20000e9a:	b2da      	uxtb	r2, r3
20000e9c:	4b28      	ldr	r3, [pc, #160]	@ (20000f40 <DAP_JTAG_Configure+0xbc>)
20000e9e:	769a      	strb	r2, [r3, #26]

  bits = 0U;
20000ea0:	2300      	movs	r3, #0
20000ea2:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000ea4:	2300      	movs	r3, #0
20000ea6:	613b      	str	r3, [r7, #16]
20000ea8:	e01c      	b.n	20000ee4 <DAP_JTAG_Configure+0x60>
    length = *request++;
20000eaa:	687b      	ldr	r3, [r7, #4]
20000eac:	1c5a      	adds	r2, r3, #1
20000eae:	607a      	str	r2, [r7, #4]
20000eb0:	781b      	ldrb	r3, [r3, #0]
20000eb2:	60bb      	str	r3, [r7, #8]
    DAP_Data.jtag_dev.ir_length[n] =  (uint8_t)length;
20000eb4:	68bb      	ldr	r3, [r7, #8]
20000eb6:	b2d9      	uxtb	r1, r3
20000eb8:	4a21      	ldr	r2, [pc, #132]	@ (20000f40 <DAP_JTAG_Configure+0xbc>)
20000eba:	693b      	ldr	r3, [r7, #16]
20000ebc:	4413      	add	r3, r2
20000ebe:	331c      	adds	r3, #28
20000ec0:	460a      	mov	r2, r1
20000ec2:	701a      	strb	r2, [r3, #0]
    DAP_Data.jtag_dev.ir_before[n] = (uint16_t)bits;
20000ec4:	697b      	ldr	r3, [r7, #20]
20000ec6:	b299      	uxth	r1, r3
20000ec8:	4a1d      	ldr	r2, [pc, #116]	@ (20000f40 <DAP_JTAG_Configure+0xbc>)
20000eca:	693b      	ldr	r3, [r7, #16]
20000ecc:	3310      	adds	r3, #16
20000ece:	005b      	lsls	r3, r3, #1
20000ed0:	4413      	add	r3, r2
20000ed2:	460a      	mov	r2, r1
20000ed4:	809a      	strh	r2, [r3, #4]
    bits += length;
20000ed6:	697a      	ldr	r2, [r7, #20]
20000ed8:	68bb      	ldr	r3, [r7, #8]
20000eda:	4413      	add	r3, r2
20000edc:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000ede:	693b      	ldr	r3, [r7, #16]
20000ee0:	3301      	adds	r3, #1
20000ee2:	613b      	str	r3, [r7, #16]
20000ee4:	693a      	ldr	r2, [r7, #16]
20000ee6:	68fb      	ldr	r3, [r7, #12]
20000ee8:	429a      	cmp	r2, r3
20000eea:	d3de      	bcc.n	20000eaa <DAP_JTAG_Configure+0x26>
  }
  for (n = 0U; n < count; n++) {
20000eec:	2300      	movs	r3, #0
20000eee:	613b      	str	r3, [r7, #16]
20000ef0:	e014      	b.n	20000f1c <DAP_JTAG_Configure+0x98>
    bits -= DAP_Data.jtag_dev.ir_length[n];
20000ef2:	4a13      	ldr	r2, [pc, #76]	@ (20000f40 <DAP_JTAG_Configure+0xbc>)
20000ef4:	693b      	ldr	r3, [r7, #16]
20000ef6:	4413      	add	r3, r2
20000ef8:	331c      	adds	r3, #28
20000efa:	781b      	ldrb	r3, [r3, #0]
20000efc:	461a      	mov	r2, r3
20000efe:	697b      	ldr	r3, [r7, #20]
20000f00:	1a9b      	subs	r3, r3, r2
20000f02:	617b      	str	r3, [r7, #20]
    DAP_Data.jtag_dev.ir_after[n] = (uint16_t)bits;
20000f04:	697b      	ldr	r3, [r7, #20]
20000f06:	b299      	uxth	r1, r3
20000f08:	4a0d      	ldr	r2, [pc, #52]	@ (20000f40 <DAP_JTAG_Configure+0xbc>)
20000f0a:	693b      	ldr	r3, [r7, #16]
20000f0c:	3318      	adds	r3, #24
20000f0e:	005b      	lsls	r3, r3, #1
20000f10:	4413      	add	r3, r2
20000f12:	460a      	mov	r2, r1
20000f14:	809a      	strh	r2, [r3, #4]
  for (n = 0U; n < count; n++) {
20000f16:	693b      	ldr	r3, [r7, #16]
20000f18:	3301      	adds	r3, #1
20000f1a:	613b      	str	r3, [r7, #16]
20000f1c:	693a      	ldr	r2, [r7, #16]
20000f1e:	68fb      	ldr	r3, [r7, #12]
20000f20:	429a      	cmp	r2, r3
20000f22:	d3e6      	bcc.n	20000ef2 <DAP_JTAG_Configure+0x6e>
  }

  *response = DAP_OK;
20000f24:	683b      	ldr	r3, [r7, #0]
20000f26:	2200      	movs	r2, #0
20000f28:	701a      	strb	r2, [r3, #0]
#else
  count = *request;
  *response = DAP_ERROR;
#endif

  return (((count + 1U) << 16) | 1U);
20000f2a:	68fb      	ldr	r3, [r7, #12]
20000f2c:	3301      	adds	r3, #1
20000f2e:	041b      	lsls	r3, r3, #16
20000f30:	f043 0301 	orr.w	r3, r3, #1
}
20000f34:	4618      	mov	r0, r3
20000f36:	371c      	adds	r7, #28
20000f38:	46bd      	mov	sp, r7
20000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f3e:	4770      	bx	lr
20000f40:	2000d834 	.word	0x2000d834

20000f44 <DAP_JTAG_IDCode>:
// Process JTAG IDCODE command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_IDCode(const uint8_t *request, uint8_t *response) {
20000f44:	b580      	push	{r7, lr}
20000f46:	b084      	sub	sp, #16
20000f48:	af00      	add	r7, sp, #0
20000f4a:	6078      	str	r0, [r7, #4]
20000f4c:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t data;

  if (DAP_Data.debug_port != DAP_PORT_JTAG) {
20000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (20000fc8 <DAP_JTAG_IDCode+0x84>)
20000f50:	781b      	ldrb	r3, [r3, #0]
20000f52:	2b02      	cmp	r3, #2
20000f54:	d12b      	bne.n	20000fae <DAP_JTAG_IDCode+0x6a>
    goto id_error;
  }

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
20000f56:	687b      	ldr	r3, [r7, #4]
20000f58:	781a      	ldrb	r2, [r3, #0]
20000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (20000fc8 <DAP_JTAG_IDCode+0x84>)
20000f5c:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (20000fc8 <DAP_JTAG_IDCode+0x84>)
20000f60:	7eda      	ldrb	r2, [r3, #27]
20000f62:	4b19      	ldr	r3, [pc, #100]	@ (20000fc8 <DAP_JTAG_IDCode+0x84>)
20000f64:	7e9b      	ldrb	r3, [r3, #26]
20000f66:	429a      	cmp	r2, r3
20000f68:	d223      	bcs.n	20000fb2 <DAP_JTAG_IDCode+0x6e>
    goto id_error;
  }

  // Select JTAG chain
  JTAG_IR(JTAG_IDCODE);
20000f6a:	200e      	movs	r0, #14
20000f6c:	f002 ff82 	bl	20003e74 <JTAG_IR>

  // Read IDCODE register
  data = JTAG_ReadIDCode();
20000f70:	f002 fd3e 	bl	200039f0 <JTAG_ReadIDCode>
20000f74:	60f8      	str	r0, [r7, #12]

  // Store Data
  *(response+0) =  DAP_OK;
20000f76:	683b      	ldr	r3, [r7, #0]
20000f78:	2200      	movs	r2, #0
20000f7a:	701a      	strb	r2, [r3, #0]
  *(response+1) = (uint8_t)(data >>  0);
20000f7c:	683b      	ldr	r3, [r7, #0]
20000f7e:	3301      	adds	r3, #1
20000f80:	68fa      	ldr	r2, [r7, #12]
20000f82:	b2d2      	uxtb	r2, r2
20000f84:	701a      	strb	r2, [r3, #0]
  *(response+2) = (uint8_t)(data >>  8);
20000f86:	68fb      	ldr	r3, [r7, #12]
20000f88:	0a1a      	lsrs	r2, r3, #8
20000f8a:	683b      	ldr	r3, [r7, #0]
20000f8c:	3302      	adds	r3, #2
20000f8e:	b2d2      	uxtb	r2, r2
20000f90:	701a      	strb	r2, [r3, #0]
  *(response+3) = (uint8_t)(data >> 16);
20000f92:	68fb      	ldr	r3, [r7, #12]
20000f94:	0c1a      	lsrs	r2, r3, #16
20000f96:	683b      	ldr	r3, [r7, #0]
20000f98:	3303      	adds	r3, #3
20000f9a:	b2d2      	uxtb	r2, r2
20000f9c:	701a      	strb	r2, [r3, #0]
  *(response+4) = (uint8_t)(data >> 24);
20000f9e:	68fb      	ldr	r3, [r7, #12]
20000fa0:	0e1a      	lsrs	r2, r3, #24
20000fa2:	683b      	ldr	r3, [r7, #0]
20000fa4:	3304      	adds	r3, #4
20000fa6:	b2d2      	uxtb	r2, r2
20000fa8:	701a      	strb	r2, [r3, #0]

  return ((1U << 16) | 5U);
20000faa:	4b08      	ldr	r3, [pc, #32]	@ (20000fcc <DAP_JTAG_IDCode+0x88>)
20000fac:	e007      	b.n	20000fbe <DAP_JTAG_IDCode+0x7a>
    goto id_error;
20000fae:	bf00      	nop
20000fb0:	e000      	b.n	20000fb4 <DAP_JTAG_IDCode+0x70>
    goto id_error;
20000fb2:	bf00      	nop

id_error:
#endif
  *response = DAP_ERROR;
20000fb4:	683b      	ldr	r3, [r7, #0]
20000fb6:	22ff      	movs	r2, #255	@ 0xff
20000fb8:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
20000fba:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000fbe:	4618      	mov	r0, r3
20000fc0:	3710      	adds	r7, #16
20000fc2:	46bd      	mov	sp, r7
20000fc4:	bd80      	pop	{r7, pc}
20000fc6:	bf00      	nop
20000fc8:	2000d834 	.word	0x2000d834
20000fcc:	00010005 	.word	0x00010005

20000fd0 <DAP_TransferConfigure>:
// Process Transfer Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferConfigure(const uint8_t *request, uint8_t *response) {
20000fd0:	b480      	push	{r7}
20000fd2:	b083      	sub	sp, #12
20000fd4:	af00      	add	r7, sp, #0
20000fd6:	6078      	str	r0, [r7, #4]
20000fd8:	6039      	str	r1, [r7, #0]

  DAP_Data.transfer.idle_cycles =            *(request+0);
20000fda:	687b      	ldr	r3, [r7, #4]
20000fdc:	781a      	ldrb	r2, [r3, #0]
20000fde:	4b13      	ldr	r3, [pc, #76]	@ (2000102c <DAP_TransferConfigure+0x5c>)
20000fe0:	731a      	strb	r2, [r3, #12]
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
20000fe2:	687b      	ldr	r3, [r7, #4]
20000fe4:	3301      	adds	r3, #1
20000fe6:	781b      	ldrb	r3, [r3, #0]
20000fe8:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+2) << 8);
20000fea:	687b      	ldr	r3, [r7, #4]
20000fec:	3302      	adds	r3, #2
20000fee:	781b      	ldrb	r3, [r3, #0]
20000ff0:	021b      	lsls	r3, r3, #8
20000ff2:	b29b      	uxth	r3, r3
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
20000ff4:	4313      	orrs	r3, r2
20000ff6:	b29a      	uxth	r2, r3
20000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (2000102c <DAP_TransferConfigure+0x5c>)
20000ffa:	821a      	strh	r2, [r3, #16]
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
20000ffc:	687b      	ldr	r3, [r7, #4]
20000ffe:	3303      	adds	r3, #3
20001000:	781b      	ldrb	r3, [r3, #0]
20001002:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+4) << 8);
20001004:	687b      	ldr	r3, [r7, #4]
20001006:	3304      	adds	r3, #4
20001008:	781b      	ldrb	r3, [r3, #0]
2000100a:	021b      	lsls	r3, r3, #8
2000100c:	b29b      	uxth	r3, r3
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
2000100e:	4313      	orrs	r3, r2
20001010:	b29a      	uxth	r2, r3
20001012:	4b06      	ldr	r3, [pc, #24]	@ (2000102c <DAP_TransferConfigure+0x5c>)
20001014:	825a      	strh	r2, [r3, #18]

  *response = DAP_OK;
20001016:	683b      	ldr	r3, [r7, #0]
20001018:	2200      	movs	r2, #0
2000101a:	701a      	strb	r2, [r3, #0]
  return ((5U << 16) | 1U);
2000101c:	4b04      	ldr	r3, [pc, #16]	@ (20001030 <DAP_TransferConfigure+0x60>)
}
2000101e:	4618      	mov	r0, r3
20001020:	370c      	adds	r7, #12
20001022:	46bd      	mov	sp, r7
20001024:	f85d 7b04 	ldr.w	r7, [sp], #4
20001028:	4770      	bx	lr
2000102a:	bf00      	nop
2000102c:	2000d834 	.word	0x2000d834
20001030:	00050001 	.word	0x00050001

20001034 <DAP_SWD_Transfer>:
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
#if (DAP_SWD != 0)
static uint32_t DAP_SWD_Transfer(const uint8_t *request, uint8_t *response) {
20001034:	b580      	push	{r7, lr}
20001036:	b090      	sub	sp, #64	@ 0x40
20001038:	af00      	add	r7, sp, #0
2000103a:	6078      	str	r0, [r7, #4]
2000103c:	6039      	str	r1, [r7, #0]
  uint32_t  data;
#if (TIMESTAMP_CLOCK != 0U)
  uint32_t  timestamp;
#endif

  request_head   = request;
2000103e:	687b      	ldr	r3, [r7, #4]
20001040:	623b      	str	r3, [r7, #32]

  response_count = 0U;
20001042:	2300      	movs	r3, #0
20001044:	63bb      	str	r3, [r7, #56]	@ 0x38
  response_value = 0U;
20001046:	2300      	movs	r3, #0
20001048:	637b      	str	r3, [r7, #52]	@ 0x34
  response_head  = response;
2000104a:	683b      	ldr	r3, [r7, #0]
2000104c:	61fb      	str	r3, [r7, #28]
  response      += 2;
2000104e:	683b      	ldr	r3, [r7, #0]
20001050:	3302      	adds	r3, #2
20001052:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001054:	4b8a      	ldr	r3, [pc, #552]	@ (20001280 <DAP_SWD_Transfer+0x24c>)
20001056:	2200      	movs	r2, #0
20001058:	701a      	strb	r2, [r3, #0]

  post_read   = 0U;
2000105a:	2300      	movs	r3, #0
2000105c:	633b      	str	r3, [r7, #48]	@ 0x30
  check_write = 0U;
2000105e:	2300      	movs	r3, #0
20001060:	62fb      	str	r3, [r7, #44]	@ 0x2c

  request++;            // Ignore DAP index
20001062:	687b      	ldr	r3, [r7, #4]
20001064:	3301      	adds	r3, #1
20001066:	607b      	str	r3, [r7, #4]

  request_count = *request++;
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	1c5a      	adds	r2, r3, #1
2000106c:	607a      	str	r2, [r7, #4]
2000106e:	781b      	ldrb	r3, [r3, #0]
20001070:	63fb      	str	r3, [r7, #60]	@ 0x3c

  while (request_count != 0) {
20001072:	e255      	b.n	20001520 <DAP_SWD_Transfer+0x4ec>
    request_count--;
20001074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001076:	3b01      	subs	r3, #1
20001078:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
2000107a:	687b      	ldr	r3, [r7, #4]
2000107c:	1c5a      	adds	r2, r3, #1
2000107e:	607a      	str	r2, [r7, #4]
20001080:	781b      	ldrb	r3, [r3, #0]
20001082:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001084:	69bb      	ldr	r3, [r7, #24]
20001086:	f003 0302 	and.w	r3, r3, #2
2000108a:	2b00      	cmp	r3, #0
2000108c:	f000 819f 	beq.w	200013ce <DAP_SWD_Transfer+0x39a>
      // Read register
      if (post_read) {
20001090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001092:	2b00      	cmp	r3, #0
20001094:	d079      	beq.n	2000118a <DAP_SWD_Transfer+0x156>
        // Read was posted before
        retry = DAP_Data.transfer.retry_count;
20001096:	4b7b      	ldr	r3, [pc, #492]	@ (20001284 <DAP_SWD_Transfer+0x250>)
20001098:	8a1b      	ldrh	r3, [r3, #16]
2000109a:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((request_value & (DAP_TRANSFER_APnDP | DAP_TRANSFER_MATCH_VALUE)) == DAP_TRANSFER_APnDP) {
2000109c:	69bb      	ldr	r3, [r7, #24]
2000109e:	f003 0311 	and.w	r3, r3, #17
200010a2:	2b01      	cmp	r3, #1
200010a4:	d115      	bne.n	200010d2 <DAP_SWD_Transfer+0x9e>
          // Read previous AP data and post next AP read
          do {
            response_value = SWD_Transfer(request_value, &data);
200010a6:	f107 030c 	add.w	r3, r7, #12
200010aa:	4619      	mov	r1, r3
200010ac:	69b8      	ldr	r0, [r7, #24]
200010ae:	f003 fac7 	bl	20004640 <SWD_Transfer>
200010b2:	4603      	mov	r3, r0
200010b4:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200010b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200010b8:	2b02      	cmp	r3, #2
200010ba:	d121      	bne.n	20001100 <DAP_SWD_Transfer+0xcc>
200010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200010be:	1e5a      	subs	r2, r3, #1
200010c0:	627a      	str	r2, [r7, #36]	@ 0x24
200010c2:	2b00      	cmp	r3, #0
200010c4:	d01c      	beq.n	20001100 <DAP_SWD_Transfer+0xcc>
200010c6:	4b6e      	ldr	r3, [pc, #440]	@ (20001280 <DAP_SWD_Transfer+0x24c>)
200010c8:	781b      	ldrb	r3, [r3, #0]
200010ca:	b2db      	uxtb	r3, r3
200010cc:	2b00      	cmp	r3, #0
200010ce:	d0ea      	beq.n	200010a6 <DAP_SWD_Transfer+0x72>
200010d0:	e016      	b.n	20001100 <DAP_SWD_Transfer+0xcc>
        } else {
          // Read previous AP data
          do {
            response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200010d2:	f107 030c 	add.w	r3, r7, #12
200010d6:	4619      	mov	r1, r3
200010d8:	200e      	movs	r0, #14
200010da:	f003 fab1 	bl	20004640 <SWD_Transfer>
200010de:	4603      	mov	r3, r0
200010e0:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200010e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200010e4:	2b02      	cmp	r3, #2
200010e6:	d109      	bne.n	200010fc <DAP_SWD_Transfer+0xc8>
200010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200010ea:	1e5a      	subs	r2, r3, #1
200010ec:	627a      	str	r2, [r7, #36]	@ 0x24
200010ee:	2b00      	cmp	r3, #0
200010f0:	d004      	beq.n	200010fc <DAP_SWD_Transfer+0xc8>
200010f2:	4b63      	ldr	r3, [pc, #396]	@ (20001280 <DAP_SWD_Transfer+0x24c>)
200010f4:	781b      	ldrb	r3, [r3, #0]
200010f6:	b2db      	uxtb	r3, r3
200010f8:	2b00      	cmp	r3, #0
200010fa:	d0ea      	beq.n	200010d2 <DAP_SWD_Transfer+0x9e>
          post_read = 0U;
200010fc:	2300      	movs	r3, #0
200010fe:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        if (response_value != DAP_TRANSFER_OK) {
20001100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001102:	2b01      	cmp	r3, #1
20001104:	f040 8211 	bne.w	2000152a <DAP_SWD_Transfer+0x4f6>
          break;
        }
        // Store previous AP data
        *response++ = (uint8_t) data;
20001108:	68f9      	ldr	r1, [r7, #12]
2000110a:	683b      	ldr	r3, [r7, #0]
2000110c:	1c5a      	adds	r2, r3, #1
2000110e:	603a      	str	r2, [r7, #0]
20001110:	b2ca      	uxtb	r2, r1
20001112:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001114:	68fb      	ldr	r3, [r7, #12]
20001116:	0a19      	lsrs	r1, r3, #8
20001118:	683b      	ldr	r3, [r7, #0]
2000111a:	1c5a      	adds	r2, r3, #1
2000111c:	603a      	str	r2, [r7, #0]
2000111e:	b2ca      	uxtb	r2, r1
20001120:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001122:	68fb      	ldr	r3, [r7, #12]
20001124:	0c19      	lsrs	r1, r3, #16
20001126:	683b      	ldr	r3, [r7, #0]
20001128:	1c5a      	adds	r2, r3, #1
2000112a:	603a      	str	r2, [r7, #0]
2000112c:	b2ca      	uxtb	r2, r1
2000112e:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001130:	68fb      	ldr	r3, [r7, #12]
20001132:	0e19      	lsrs	r1, r3, #24
20001134:	683b      	ldr	r3, [r7, #0]
20001136:	1c5a      	adds	r2, r3, #1
20001138:	603a      	str	r2, [r7, #0]
2000113a:	b2ca      	uxtb	r2, r1
2000113c:	701a      	strb	r2, [r3, #0]
#if (TIMESTAMP_CLOCK != 0U)
        if (post_read) {
2000113e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001140:	2b00      	cmp	r3, #0
20001142:	d022      	beq.n	2000118a <DAP_SWD_Transfer+0x156>
          // Store Timestamp of next AP read
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001144:	69bb      	ldr	r3, [r7, #24]
20001146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000114a:	2b00      	cmp	r3, #0
2000114c:	d01d      	beq.n	2000118a <DAP_SWD_Transfer+0x156>
            timestamp = DAP_Data.timestamp;
2000114e:	4b4d      	ldr	r3, [pc, #308]	@ (20001284 <DAP_SWD_Transfer+0x250>)
20001150:	689b      	ldr	r3, [r3, #8]
20001152:	617b      	str	r3, [r7, #20]
            *response++ = (uint8_t) timestamp;
20001154:	683b      	ldr	r3, [r7, #0]
20001156:	1c5a      	adds	r2, r3, #1
20001158:	603a      	str	r2, [r7, #0]
2000115a:	697a      	ldr	r2, [r7, #20]
2000115c:	b2d2      	uxtb	r2, r2
2000115e:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
20001160:	697b      	ldr	r3, [r7, #20]
20001162:	0a19      	lsrs	r1, r3, #8
20001164:	683b      	ldr	r3, [r7, #0]
20001166:	1c5a      	adds	r2, r3, #1
20001168:	603a      	str	r2, [r7, #0]
2000116a:	b2ca      	uxtb	r2, r1
2000116c:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
2000116e:	697b      	ldr	r3, [r7, #20]
20001170:	0c19      	lsrs	r1, r3, #16
20001172:	683b      	ldr	r3, [r7, #0]
20001174:	1c5a      	adds	r2, r3, #1
20001176:	603a      	str	r2, [r7, #0]
20001178:	b2ca      	uxtb	r2, r1
2000117a:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
2000117c:	697b      	ldr	r3, [r7, #20]
2000117e:	0e19      	lsrs	r1, r3, #24
20001180:	683b      	ldr	r3, [r7, #0]
20001182:	1c5a      	adds	r2, r3, #1
20001184:	603a      	str	r2, [r7, #0]
20001186:	b2ca      	uxtb	r2, r1
20001188:	701a      	strb	r2, [r3, #0]
          }
        }
#endif
      }
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
2000118a:	69bb      	ldr	r3, [r7, #24]
2000118c:	f003 0310 	and.w	r3, r3, #16
20001190:	2b00      	cmp	r3, #0
20001192:	d079      	beq.n	20001288 <DAP_SWD_Transfer+0x254>
        // Read with value match
        match_value = (uint32_t)(*(request+0) <<  0) |
20001194:	687b      	ldr	r3, [r7, #4]
20001196:	781b      	ldrb	r3, [r3, #0]
20001198:	461a      	mov	r2, r3
                      (uint32_t)(*(request+1) <<  8) |
2000119a:	687b      	ldr	r3, [r7, #4]
2000119c:	3301      	adds	r3, #1
2000119e:	781b      	ldrb	r3, [r3, #0]
200011a0:	021b      	lsls	r3, r3, #8
        match_value = (uint32_t)(*(request+0) <<  0) |
200011a2:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+2) << 16) |
200011a4:	687b      	ldr	r3, [r7, #4]
200011a6:	3302      	adds	r3, #2
200011a8:	781b      	ldrb	r3, [r3, #0]
200011aa:	041b      	lsls	r3, r3, #16
                      (uint32_t)(*(request+1) <<  8) |
200011ac:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+3) << 24);
200011ae:	687b      	ldr	r3, [r7, #4]
200011b0:	3303      	adds	r3, #3
200011b2:	781b      	ldrb	r3, [r3, #0]
200011b4:	061b      	lsls	r3, r3, #24
        match_value = (uint32_t)(*(request+0) <<  0) |
200011b6:	4313      	orrs	r3, r2
200011b8:	613b      	str	r3, [r7, #16]
        request += 4;
200011ba:	687b      	ldr	r3, [r7, #4]
200011bc:	3304      	adds	r3, #4
200011be:	607b      	str	r3, [r7, #4]
        match_retry = DAP_Data.transfer.match_retry;
200011c0:	4b30      	ldr	r3, [pc, #192]	@ (20001284 <DAP_SWD_Transfer+0x250>)
200011c2:	8a5b      	ldrh	r3, [r3, #18]
200011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((request_value & DAP_TRANSFER_APnDP) != 0U) {
200011c6:	69bb      	ldr	r3, [r7, #24]
200011c8:	f003 0301 	and.w	r3, r3, #1
200011cc:	2b00      	cmp	r3, #0
200011ce:	d019      	beq.n	20001204 <DAP_SWD_Transfer+0x1d0>
          // Post AP read
          retry = DAP_Data.transfer.retry_count;
200011d0:	4b2c      	ldr	r3, [pc, #176]	@ (20001284 <DAP_SWD_Transfer+0x250>)
200011d2:	8a1b      	ldrh	r3, [r3, #16]
200011d4:	627b      	str	r3, [r7, #36]	@ 0x24
          do {
            response_value = SWD_Transfer(request_value, NULL);
200011d6:	2100      	movs	r1, #0
200011d8:	69b8      	ldr	r0, [r7, #24]
200011da:	f003 fa31 	bl	20004640 <SWD_Transfer>
200011de:	4603      	mov	r3, r0
200011e0:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200011e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011e4:	2b02      	cmp	r3, #2
200011e6:	d109      	bne.n	200011fc <DAP_SWD_Transfer+0x1c8>
200011e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200011ea:	1e5a      	subs	r2, r3, #1
200011ec:	627a      	str	r2, [r7, #36]	@ 0x24
200011ee:	2b00      	cmp	r3, #0
200011f0:	d004      	beq.n	200011fc <DAP_SWD_Transfer+0x1c8>
200011f2:	4b23      	ldr	r3, [pc, #140]	@ (20001280 <DAP_SWD_Transfer+0x24c>)
200011f4:	781b      	ldrb	r3, [r3, #0]
200011f6:	b2db      	uxtb	r3, r3
200011f8:	2b00      	cmp	r3, #0
200011fa:	d0ec      	beq.n	200011d6 <DAP_SWD_Transfer+0x1a2>
          if (response_value != DAP_TRANSFER_OK) {
200011fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011fe:	2b01      	cmp	r3, #1
20001200:	f040 8195 	bne.w	2000152e <DAP_SWD_Transfer+0x4fa>
            break;
          }
        }
        do {
          // Read register until its value matches or retry counter expires
          retry = DAP_Data.transfer.retry_count;
20001204:	4b1f      	ldr	r3, [pc, #124]	@ (20001284 <DAP_SWD_Transfer+0x250>)
20001206:	8a1b      	ldrh	r3, [r3, #16]
20001208:	627b      	str	r3, [r7, #36]	@ 0x24
          do {
            response_value = SWD_Transfer(request_value, &data);
2000120a:	f107 030c 	add.w	r3, r7, #12
2000120e:	4619      	mov	r1, r3
20001210:	69b8      	ldr	r0, [r7, #24]
20001212:	f003 fa15 	bl	20004640 <SWD_Transfer>
20001216:	4603      	mov	r3, r0
20001218:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000121a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000121c:	2b02      	cmp	r3, #2
2000121e:	d109      	bne.n	20001234 <DAP_SWD_Transfer+0x200>
20001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001222:	1e5a      	subs	r2, r3, #1
20001224:	627a      	str	r2, [r7, #36]	@ 0x24
20001226:	2b00      	cmp	r3, #0
20001228:	d004      	beq.n	20001234 <DAP_SWD_Transfer+0x200>
2000122a:	4b15      	ldr	r3, [pc, #84]	@ (20001280 <DAP_SWD_Transfer+0x24c>)
2000122c:	781b      	ldrb	r3, [r3, #0]
2000122e:	b2db      	uxtb	r3, r3
20001230:	2b00      	cmp	r3, #0
20001232:	d0ea      	beq.n	2000120a <DAP_SWD_Transfer+0x1d6>
          if (response_value != DAP_TRANSFER_OK) {
20001234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001236:	2b01      	cmp	r3, #1
20001238:	d111      	bne.n	2000125e <DAP_SWD_Transfer+0x22a>
            break;
          }
        } while (((data & DAP_Data.transfer.match_mask) != match_value) && match_retry-- && !DAP_TransferAbort);
2000123a:	4b12      	ldr	r3, [pc, #72]	@ (20001284 <DAP_SWD_Transfer+0x250>)
2000123c:	695a      	ldr	r2, [r3, #20]
2000123e:	68fb      	ldr	r3, [r7, #12]
20001240:	4013      	ands	r3, r2
20001242:	693a      	ldr	r2, [r7, #16]
20001244:	429a      	cmp	r2, r3
20001246:	d00b      	beq.n	20001260 <DAP_SWD_Transfer+0x22c>
20001248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000124a:	1e5a      	subs	r2, r3, #1
2000124c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000124e:	2b00      	cmp	r3, #0
20001250:	d006      	beq.n	20001260 <DAP_SWD_Transfer+0x22c>
20001252:	4b0b      	ldr	r3, [pc, #44]	@ (20001280 <DAP_SWD_Transfer+0x24c>)
20001254:	781b      	ldrb	r3, [r3, #0]
20001256:	b2db      	uxtb	r3, r3
20001258:	2b00      	cmp	r3, #0
2000125a:	d0d3      	beq.n	20001204 <DAP_SWD_Transfer+0x1d0>
2000125c:	e000      	b.n	20001260 <DAP_SWD_Transfer+0x22c>
            break;
2000125e:	bf00      	nop
        if ((data & DAP_Data.transfer.match_mask) != match_value) {
20001260:	4b08      	ldr	r3, [pc, #32]	@ (20001284 <DAP_SWD_Transfer+0x250>)
20001262:	695a      	ldr	r2, [r3, #20]
20001264:	68fb      	ldr	r3, [r7, #12]
20001266:	4013      	ands	r3, r2
20001268:	693a      	ldr	r2, [r7, #16]
2000126a:	429a      	cmp	r2, r3
2000126c:	d003      	beq.n	20001276 <DAP_SWD_Transfer+0x242>
          response_value |= DAP_TRANSFER_MISMATCH;
2000126e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001270:	f043 0310 	orr.w	r3, r3, #16
20001274:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (response_value != DAP_TRANSFER_OK) {
20001276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001278:	2b01      	cmp	r3, #1
2000127a:	f000 80a5 	beq.w	200013c8 <DAP_SWD_Transfer+0x394>
          break;
2000127e:	e161      	b.n	20001544 <DAP_SWD_Transfer+0x510>
20001280:	2000d878 	.word	0x2000d878
20001284:	2000d834 	.word	0x2000d834
        }
      } else {
        // Normal read
        retry = DAP_Data.transfer.retry_count;
20001288:	4b7f      	ldr	r3, [pc, #508]	@ (20001488 <DAP_SWD_Transfer+0x454>)
2000128a:	8a1b      	ldrh	r3, [r3, #16]
2000128c:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((request_value & DAP_TRANSFER_APnDP) != 0U) {
2000128e:	69bb      	ldr	r3, [r7, #24]
20001290:	f003 0301 	and.w	r3, r3, #1
20001294:	2b00      	cmp	r3, #0
20001296:	d040      	beq.n	2000131a <DAP_SWD_Transfer+0x2e6>
          // Read AP register
          if (post_read == 0U) {
20001298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000129a:	2b00      	cmp	r3, #0
2000129c:	f040 8094 	bne.w	200013c8 <DAP_SWD_Transfer+0x394>
            // Post AP read
            do {
              response_value = SWD_Transfer(request_value, NULL);
200012a0:	2100      	movs	r1, #0
200012a2:	69b8      	ldr	r0, [r7, #24]
200012a4:	f003 f9cc 	bl	20004640 <SWD_Transfer>
200012a8:	4603      	mov	r3, r0
200012aa:	637b      	str	r3, [r7, #52]	@ 0x34
            } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200012ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200012ae:	2b02      	cmp	r3, #2
200012b0:	d109      	bne.n	200012c6 <DAP_SWD_Transfer+0x292>
200012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200012b4:	1e5a      	subs	r2, r3, #1
200012b6:	627a      	str	r2, [r7, #36]	@ 0x24
200012b8:	2b00      	cmp	r3, #0
200012ba:	d004      	beq.n	200012c6 <DAP_SWD_Transfer+0x292>
200012bc:	4b73      	ldr	r3, [pc, #460]	@ (2000148c <DAP_SWD_Transfer+0x458>)
200012be:	781b      	ldrb	r3, [r3, #0]
200012c0:	b2db      	uxtb	r3, r3
200012c2:	2b00      	cmp	r3, #0
200012c4:	d0ec      	beq.n	200012a0 <DAP_SWD_Transfer+0x26c>
            if (response_value != DAP_TRANSFER_OK) {
200012c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200012c8:	2b01      	cmp	r3, #1
200012ca:	f040 8132 	bne.w	20001532 <DAP_SWD_Transfer+0x4fe>
              break;
            }
#if (TIMESTAMP_CLOCK != 0U)
            // Store Timestamp
            if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200012ce:	69bb      	ldr	r3, [r7, #24]
200012d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200012d4:	2b00      	cmp	r3, #0
200012d6:	d01d      	beq.n	20001314 <DAP_SWD_Transfer+0x2e0>
              timestamp = DAP_Data.timestamp;
200012d8:	4b6b      	ldr	r3, [pc, #428]	@ (20001488 <DAP_SWD_Transfer+0x454>)
200012da:	689b      	ldr	r3, [r3, #8]
200012dc:	617b      	str	r3, [r7, #20]
              *response++ = (uint8_t) timestamp;
200012de:	683b      	ldr	r3, [r7, #0]
200012e0:	1c5a      	adds	r2, r3, #1
200012e2:	603a      	str	r2, [r7, #0]
200012e4:	697a      	ldr	r2, [r7, #20]
200012e6:	b2d2      	uxtb	r2, r2
200012e8:	701a      	strb	r2, [r3, #0]
              *response++ = (uint8_t)(timestamp >>  8);
200012ea:	697b      	ldr	r3, [r7, #20]
200012ec:	0a19      	lsrs	r1, r3, #8
200012ee:	683b      	ldr	r3, [r7, #0]
200012f0:	1c5a      	adds	r2, r3, #1
200012f2:	603a      	str	r2, [r7, #0]
200012f4:	b2ca      	uxtb	r2, r1
200012f6:	701a      	strb	r2, [r3, #0]
              *response++ = (uint8_t)(timestamp >> 16);
200012f8:	697b      	ldr	r3, [r7, #20]
200012fa:	0c19      	lsrs	r1, r3, #16
200012fc:	683b      	ldr	r3, [r7, #0]
200012fe:	1c5a      	adds	r2, r3, #1
20001300:	603a      	str	r2, [r7, #0]
20001302:	b2ca      	uxtb	r2, r1
20001304:	701a      	strb	r2, [r3, #0]
              *response++ = (uint8_t)(timestamp >> 24);
20001306:	697b      	ldr	r3, [r7, #20]
20001308:	0e19      	lsrs	r1, r3, #24
2000130a:	683b      	ldr	r3, [r7, #0]
2000130c:	1c5a      	adds	r2, r3, #1
2000130e:	603a      	str	r2, [r7, #0]
20001310:	b2ca      	uxtb	r2, r1
20001312:	701a      	strb	r2, [r3, #0]
            }
#endif
            post_read = 1U;
20001314:	2301      	movs	r3, #1
20001316:	633b      	str	r3, [r7, #48]	@ 0x30
20001318:	e056      	b.n	200013c8 <DAP_SWD_Transfer+0x394>
          }
        } else {
          // Read DP register
          do {
            response_value = SWD_Transfer(request_value, &data);
2000131a:	f107 030c 	add.w	r3, r7, #12
2000131e:	4619      	mov	r1, r3
20001320:	69b8      	ldr	r0, [r7, #24]
20001322:	f003 f98d 	bl	20004640 <SWD_Transfer>
20001326:	4603      	mov	r3, r0
20001328:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000132a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000132c:	2b02      	cmp	r3, #2
2000132e:	d109      	bne.n	20001344 <DAP_SWD_Transfer+0x310>
20001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001332:	1e5a      	subs	r2, r3, #1
20001334:	627a      	str	r2, [r7, #36]	@ 0x24
20001336:	2b00      	cmp	r3, #0
20001338:	d004      	beq.n	20001344 <DAP_SWD_Transfer+0x310>
2000133a:	4b54      	ldr	r3, [pc, #336]	@ (2000148c <DAP_SWD_Transfer+0x458>)
2000133c:	781b      	ldrb	r3, [r3, #0]
2000133e:	b2db      	uxtb	r3, r3
20001340:	2b00      	cmp	r3, #0
20001342:	d0ea      	beq.n	2000131a <DAP_SWD_Transfer+0x2e6>
          if (response_value != DAP_TRANSFER_OK) {
20001344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001346:	2b01      	cmp	r3, #1
20001348:	f040 80f5 	bne.w	20001536 <DAP_SWD_Transfer+0x502>
            break;
          }
#if (TIMESTAMP_CLOCK != 0U)
          // Store Timestamp
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
2000134c:	69bb      	ldr	r3, [r7, #24]
2000134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001352:	2b00      	cmp	r3, #0
20001354:	d01d      	beq.n	20001392 <DAP_SWD_Transfer+0x35e>
            timestamp = DAP_Data.timestamp;
20001356:	4b4c      	ldr	r3, [pc, #304]	@ (20001488 <DAP_SWD_Transfer+0x454>)
20001358:	689b      	ldr	r3, [r3, #8]
2000135a:	617b      	str	r3, [r7, #20]
            *response++ = (uint8_t) timestamp;
2000135c:	683b      	ldr	r3, [r7, #0]
2000135e:	1c5a      	adds	r2, r3, #1
20001360:	603a      	str	r2, [r7, #0]
20001362:	697a      	ldr	r2, [r7, #20]
20001364:	b2d2      	uxtb	r2, r2
20001366:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
20001368:	697b      	ldr	r3, [r7, #20]
2000136a:	0a19      	lsrs	r1, r3, #8
2000136c:	683b      	ldr	r3, [r7, #0]
2000136e:	1c5a      	adds	r2, r3, #1
20001370:	603a      	str	r2, [r7, #0]
20001372:	b2ca      	uxtb	r2, r1
20001374:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
20001376:	697b      	ldr	r3, [r7, #20]
20001378:	0c19      	lsrs	r1, r3, #16
2000137a:	683b      	ldr	r3, [r7, #0]
2000137c:	1c5a      	adds	r2, r3, #1
2000137e:	603a      	str	r2, [r7, #0]
20001380:	b2ca      	uxtb	r2, r1
20001382:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
20001384:	697b      	ldr	r3, [r7, #20]
20001386:	0e19      	lsrs	r1, r3, #24
20001388:	683b      	ldr	r3, [r7, #0]
2000138a:	1c5a      	adds	r2, r3, #1
2000138c:	603a      	str	r2, [r7, #0]
2000138e:	b2ca      	uxtb	r2, r1
20001390:	701a      	strb	r2, [r3, #0]
          }
#endif
          // Store data
          *response++ = (uint8_t) data;
20001392:	68f9      	ldr	r1, [r7, #12]
20001394:	683b      	ldr	r3, [r7, #0]
20001396:	1c5a      	adds	r2, r3, #1
20001398:	603a      	str	r2, [r7, #0]
2000139a:	b2ca      	uxtb	r2, r1
2000139c:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(data >>  8);
2000139e:	68fb      	ldr	r3, [r7, #12]
200013a0:	0a19      	lsrs	r1, r3, #8
200013a2:	683b      	ldr	r3, [r7, #0]
200013a4:	1c5a      	adds	r2, r3, #1
200013a6:	603a      	str	r2, [r7, #0]
200013a8:	b2ca      	uxtb	r2, r1
200013aa:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(data >> 16);
200013ac:	68fb      	ldr	r3, [r7, #12]
200013ae:	0c19      	lsrs	r1, r3, #16
200013b0:	683b      	ldr	r3, [r7, #0]
200013b2:	1c5a      	adds	r2, r3, #1
200013b4:	603a      	str	r2, [r7, #0]
200013b6:	b2ca      	uxtb	r2, r1
200013b8:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(data >> 24);
200013ba:	68fb      	ldr	r3, [r7, #12]
200013bc:	0e19      	lsrs	r1, r3, #24
200013be:	683b      	ldr	r3, [r7, #0]
200013c0:	1c5a      	adds	r2, r3, #1
200013c2:	603a      	str	r2, [r7, #0]
200013c4:	b2ca      	uxtb	r2, r1
200013c6:	701a      	strb	r2, [r3, #0]
        }
      }
      check_write = 0U;
200013c8:	2300      	movs	r3, #0
200013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
200013cc:	e0a0      	b.n	20001510 <DAP_SWD_Transfer+0x4dc>
    } else {
      // Write register
      if (post_read) {
200013ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200013d0:	2b00      	cmp	r3, #0
200013d2:	d038      	beq.n	20001446 <DAP_SWD_Transfer+0x412>
        // Read previous data
        retry = DAP_Data.transfer.retry_count;
200013d4:	4b2c      	ldr	r3, [pc, #176]	@ (20001488 <DAP_SWD_Transfer+0x454>)
200013d6:	8a1b      	ldrh	r3, [r3, #16]
200013d8:	627b      	str	r3, [r7, #36]	@ 0x24
        do {
          response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200013da:	f107 030c 	add.w	r3, r7, #12
200013de:	4619      	mov	r1, r3
200013e0:	200e      	movs	r0, #14
200013e2:	f003 f92d 	bl	20004640 <SWD_Transfer>
200013e6:	4603      	mov	r3, r0
200013e8:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200013ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200013ec:	2b02      	cmp	r3, #2
200013ee:	d109      	bne.n	20001404 <DAP_SWD_Transfer+0x3d0>
200013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200013f2:	1e5a      	subs	r2, r3, #1
200013f4:	627a      	str	r2, [r7, #36]	@ 0x24
200013f6:	2b00      	cmp	r3, #0
200013f8:	d004      	beq.n	20001404 <DAP_SWD_Transfer+0x3d0>
200013fa:	4b24      	ldr	r3, [pc, #144]	@ (2000148c <DAP_SWD_Transfer+0x458>)
200013fc:	781b      	ldrb	r3, [r3, #0]
200013fe:	b2db      	uxtb	r3, r3
20001400:	2b00      	cmp	r3, #0
20001402:	d0ea      	beq.n	200013da <DAP_SWD_Transfer+0x3a6>
        if (response_value != DAP_TRANSFER_OK) {
20001404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001406:	2b01      	cmp	r3, #1
20001408:	f040 8097 	bne.w	2000153a <DAP_SWD_Transfer+0x506>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
2000140c:	68f9      	ldr	r1, [r7, #12]
2000140e:	683b      	ldr	r3, [r7, #0]
20001410:	1c5a      	adds	r2, r3, #1
20001412:	603a      	str	r2, [r7, #0]
20001414:	b2ca      	uxtb	r2, r1
20001416:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001418:	68fb      	ldr	r3, [r7, #12]
2000141a:	0a19      	lsrs	r1, r3, #8
2000141c:	683b      	ldr	r3, [r7, #0]
2000141e:	1c5a      	adds	r2, r3, #1
20001420:	603a      	str	r2, [r7, #0]
20001422:	b2ca      	uxtb	r2, r1
20001424:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001426:	68fb      	ldr	r3, [r7, #12]
20001428:	0c19      	lsrs	r1, r3, #16
2000142a:	683b      	ldr	r3, [r7, #0]
2000142c:	1c5a      	adds	r2, r3, #1
2000142e:	603a      	str	r2, [r7, #0]
20001430:	b2ca      	uxtb	r2, r1
20001432:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001434:	68fb      	ldr	r3, [r7, #12]
20001436:	0e19      	lsrs	r1, r3, #24
20001438:	683b      	ldr	r3, [r7, #0]
2000143a:	1c5a      	adds	r2, r3, #1
2000143c:	603a      	str	r2, [r7, #0]
2000143e:	b2ca      	uxtb	r2, r1
20001440:	701a      	strb	r2, [r3, #0]
        post_read = 0U;
20001442:	2300      	movs	r3, #0
20001444:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001446:	687b      	ldr	r3, [r7, #4]
20001448:	781b      	ldrb	r3, [r3, #0]
2000144a:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	3301      	adds	r3, #1
20001450:	781b      	ldrb	r3, [r3, #0]
20001452:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001454:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001456:	687b      	ldr	r3, [r7, #4]
20001458:	3302      	adds	r3, #2
2000145a:	781b      	ldrb	r3, [r3, #0]
2000145c:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
2000145e:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
20001460:	687b      	ldr	r3, [r7, #4]
20001462:	3303      	adds	r3, #3
20001464:	781b      	ldrb	r3, [r3, #0]
20001466:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001468:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
2000146a:	60fb      	str	r3, [r7, #12]
      request += 4;
2000146c:	687b      	ldr	r3, [r7, #4]
2000146e:	3304      	adds	r3, #4
20001470:	607b      	str	r3, [r7, #4]
      if ((request_value & DAP_TRANSFER_MATCH_MASK) != 0U) {
20001472:	69bb      	ldr	r3, [r7, #24]
20001474:	f003 0320 	and.w	r3, r3, #32
20001478:	2b00      	cmp	r3, #0
2000147a:	d009      	beq.n	20001490 <DAP_SWD_Transfer+0x45c>
        // Write match mask
        DAP_Data.transfer.match_mask = data;
2000147c:	68fb      	ldr	r3, [r7, #12]
2000147e:	4a02      	ldr	r2, [pc, #8]	@ (20001488 <DAP_SWD_Transfer+0x454>)
20001480:	6153      	str	r3, [r2, #20]
        response_value = DAP_TRANSFER_OK;
20001482:	2301      	movs	r3, #1
20001484:	637b      	str	r3, [r7, #52]	@ 0x34
20001486:	e043      	b.n	20001510 <DAP_SWD_Transfer+0x4dc>
20001488:	2000d834 	.word	0x2000d834
2000148c:	2000d878 	.word	0x2000d878
      } else {
        // Write DP/AP register
        retry = DAP_Data.transfer.retry_count;
20001490:	4b72      	ldr	r3, [pc, #456]	@ (2000165c <DAP_SWD_Transfer+0x628>)
20001492:	8a1b      	ldrh	r3, [r3, #16]
20001494:	627b      	str	r3, [r7, #36]	@ 0x24
        do {
          response_value = SWD_Transfer(request_value, &data);
20001496:	f107 030c 	add.w	r3, r7, #12
2000149a:	4619      	mov	r1, r3
2000149c:	69b8      	ldr	r0, [r7, #24]
2000149e:	f003 f8cf 	bl	20004640 <SWD_Transfer>
200014a2:	4603      	mov	r3, r0
200014a4:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200014a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014a8:	2b02      	cmp	r3, #2
200014aa:	d109      	bne.n	200014c0 <DAP_SWD_Transfer+0x48c>
200014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200014ae:	1e5a      	subs	r2, r3, #1
200014b0:	627a      	str	r2, [r7, #36]	@ 0x24
200014b2:	2b00      	cmp	r3, #0
200014b4:	d004      	beq.n	200014c0 <DAP_SWD_Transfer+0x48c>
200014b6:	4b6a      	ldr	r3, [pc, #424]	@ (20001660 <DAP_SWD_Transfer+0x62c>)
200014b8:	781b      	ldrb	r3, [r3, #0]
200014ba:	b2db      	uxtb	r3, r3
200014bc:	2b00      	cmp	r3, #0
200014be:	d0ea      	beq.n	20001496 <DAP_SWD_Transfer+0x462>
        if (response_value != DAP_TRANSFER_OK) {
200014c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014c2:	2b01      	cmp	r3, #1
200014c4:	d13b      	bne.n	2000153e <DAP_SWD_Transfer+0x50a>
          break;
        }
#if (TIMESTAMP_CLOCK != 0U)
        // Store Timestamp
        if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200014c6:	69bb      	ldr	r3, [r7, #24]
200014c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200014cc:	2b00      	cmp	r3, #0
200014ce:	d01d      	beq.n	2000150c <DAP_SWD_Transfer+0x4d8>
          timestamp = DAP_Data.timestamp;
200014d0:	4b62      	ldr	r3, [pc, #392]	@ (2000165c <DAP_SWD_Transfer+0x628>)
200014d2:	689b      	ldr	r3, [r3, #8]
200014d4:	617b      	str	r3, [r7, #20]
          *response++ = (uint8_t) timestamp;
200014d6:	683b      	ldr	r3, [r7, #0]
200014d8:	1c5a      	adds	r2, r3, #1
200014da:	603a      	str	r2, [r7, #0]
200014dc:	697a      	ldr	r2, [r7, #20]
200014de:	b2d2      	uxtb	r2, r2
200014e0:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >>  8);
200014e2:	697b      	ldr	r3, [r7, #20]
200014e4:	0a19      	lsrs	r1, r3, #8
200014e6:	683b      	ldr	r3, [r7, #0]
200014e8:	1c5a      	adds	r2, r3, #1
200014ea:	603a      	str	r2, [r7, #0]
200014ec:	b2ca      	uxtb	r2, r1
200014ee:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 16);
200014f0:	697b      	ldr	r3, [r7, #20]
200014f2:	0c19      	lsrs	r1, r3, #16
200014f4:	683b      	ldr	r3, [r7, #0]
200014f6:	1c5a      	adds	r2, r3, #1
200014f8:	603a      	str	r2, [r7, #0]
200014fa:	b2ca      	uxtb	r2, r1
200014fc:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 24);
200014fe:	697b      	ldr	r3, [r7, #20]
20001500:	0e19      	lsrs	r1, r3, #24
20001502:	683b      	ldr	r3, [r7, #0]
20001504:	1c5a      	adds	r2, r3, #1
20001506:	603a      	str	r2, [r7, #0]
20001508:	b2ca      	uxtb	r2, r1
2000150a:	701a      	strb	r2, [r3, #0]
        }
#endif
        check_write = 1U;
2000150c:	2301      	movs	r3, #1
2000150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
    }
    response_count++;
20001510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001512:	3301      	adds	r3, #1
20001514:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (DAP_TransferAbort) {
20001516:	4b52      	ldr	r3, [pc, #328]	@ (20001660 <DAP_SWD_Transfer+0x62c>)
20001518:	781b      	ldrb	r3, [r3, #0]
2000151a:	b2db      	uxtb	r3, r3
2000151c:	2b00      	cmp	r3, #0
2000151e:	d110      	bne.n	20001542 <DAP_SWD_Transfer+0x50e>
  while (request_count != 0) {
20001520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001522:	2b00      	cmp	r3, #0
20001524:	f47f ada6 	bne.w	20001074 <DAP_SWD_Transfer+0x40>
20001528:	e026      	b.n	20001578 <DAP_SWD_Transfer+0x544>
          break;
2000152a:	bf00      	nop
2000152c:	e024      	b.n	20001578 <DAP_SWD_Transfer+0x544>
            break;
2000152e:	bf00      	nop
20001530:	e022      	b.n	20001578 <DAP_SWD_Transfer+0x544>
              break;
20001532:	bf00      	nop
20001534:	e020      	b.n	20001578 <DAP_SWD_Transfer+0x544>
            break;
20001536:	bf00      	nop
20001538:	e01e      	b.n	20001578 <DAP_SWD_Transfer+0x544>
          break;
2000153a:	bf00      	nop
2000153c:	e01c      	b.n	20001578 <DAP_SWD_Transfer+0x544>
          break;
2000153e:	bf00      	nop
20001540:	e01a      	b.n	20001578 <DAP_SWD_Transfer+0x544>
      break;
20001542:	bf00      	nop
    }
  }

  while (request_count != 0) {
20001544:	e018      	b.n	20001578 <DAP_SWD_Transfer+0x544>
    // Process canceled requests
    request_count--;
20001546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001548:	3b01      	subs	r3, #1
2000154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
2000154c:	687b      	ldr	r3, [r7, #4]
2000154e:	1c5a      	adds	r2, r3, #1
20001550:	607a      	str	r2, [r7, #4]
20001552:	781b      	ldrb	r3, [r3, #0]
20001554:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001556:	69bb      	ldr	r3, [r7, #24]
20001558:	f003 0302 	and.w	r3, r3, #2
2000155c:	2b00      	cmp	r3, #0
2000155e:	d008      	beq.n	20001572 <DAP_SWD_Transfer+0x53e>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
20001560:	69bb      	ldr	r3, [r7, #24]
20001562:	f003 0310 	and.w	r3, r3, #16
20001566:	2b00      	cmp	r3, #0
20001568:	d006      	beq.n	20001578 <DAP_SWD_Transfer+0x544>
        // Read with value match
        request += 4;
2000156a:	687b      	ldr	r3, [r7, #4]
2000156c:	3304      	adds	r3, #4
2000156e:	607b      	str	r3, [r7, #4]
20001570:	e002      	b.n	20001578 <DAP_SWD_Transfer+0x544>
      }
    } else {
      // Write register
      request += 4;
20001572:	687b      	ldr	r3, [r7, #4]
20001574:	3304      	adds	r3, #4
20001576:	607b      	str	r3, [r7, #4]
  while (request_count != 0) {
20001578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000157a:	2b00      	cmp	r3, #0
2000157c:	d1e3      	bne.n	20001546 <DAP_SWD_Transfer+0x512>
    }
  }

  if (response_value == DAP_TRANSFER_OK) {
2000157e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001580:	2b01      	cmp	r3, #1
20001582:	d152      	bne.n	2000162a <DAP_SWD_Transfer+0x5f6>
    if (post_read) {
20001584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001586:	2b00      	cmp	r3, #0
20001588:	d036      	beq.n	200015f8 <DAP_SWD_Transfer+0x5c4>
      // Read previous data
      retry = DAP_Data.transfer.retry_count;
2000158a:	4b34      	ldr	r3, [pc, #208]	@ (2000165c <DAP_SWD_Transfer+0x628>)
2000158c:	8a1b      	ldrh	r3, [r3, #16]
2000158e:	627b      	str	r3, [r7, #36]	@ 0x24
      do {
        response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
20001590:	f107 030c 	add.w	r3, r7, #12
20001594:	4619      	mov	r1, r3
20001596:	200e      	movs	r0, #14
20001598:	f003 f852 	bl	20004640 <SWD_Transfer>
2000159c:	4603      	mov	r3, r0
2000159e:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200015a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200015a2:	2b02      	cmp	r3, #2
200015a4:	d109      	bne.n	200015ba <DAP_SWD_Transfer+0x586>
200015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200015a8:	1e5a      	subs	r2, r3, #1
200015aa:	627a      	str	r2, [r7, #36]	@ 0x24
200015ac:	2b00      	cmp	r3, #0
200015ae:	d004      	beq.n	200015ba <DAP_SWD_Transfer+0x586>
200015b0:	4b2b      	ldr	r3, [pc, #172]	@ (20001660 <DAP_SWD_Transfer+0x62c>)
200015b2:	781b      	ldrb	r3, [r3, #0]
200015b4:	b2db      	uxtb	r3, r3
200015b6:	2b00      	cmp	r3, #0
200015b8:	d0ea      	beq.n	20001590 <DAP_SWD_Transfer+0x55c>
      if (response_value != DAP_TRANSFER_OK) {
200015ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200015bc:	2b01      	cmp	r3, #1
200015be:	d136      	bne.n	2000162e <DAP_SWD_Transfer+0x5fa>
        goto end;
      }
      // Store previous data
      *response++ = (uint8_t) data;
200015c0:	68f9      	ldr	r1, [r7, #12]
200015c2:	683b      	ldr	r3, [r7, #0]
200015c4:	1c5a      	adds	r2, r3, #1
200015c6:	603a      	str	r2, [r7, #0]
200015c8:	b2ca      	uxtb	r2, r1
200015ca:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
200015cc:	68fb      	ldr	r3, [r7, #12]
200015ce:	0a19      	lsrs	r1, r3, #8
200015d0:	683b      	ldr	r3, [r7, #0]
200015d2:	1c5a      	adds	r2, r3, #1
200015d4:	603a      	str	r2, [r7, #0]
200015d6:	b2ca      	uxtb	r2, r1
200015d8:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
200015da:	68fb      	ldr	r3, [r7, #12]
200015dc:	0c19      	lsrs	r1, r3, #16
200015de:	683b      	ldr	r3, [r7, #0]
200015e0:	1c5a      	adds	r2, r3, #1
200015e2:	603a      	str	r2, [r7, #0]
200015e4:	b2ca      	uxtb	r2, r1
200015e6:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
200015e8:	68fb      	ldr	r3, [r7, #12]
200015ea:	0e19      	lsrs	r1, r3, #24
200015ec:	683b      	ldr	r3, [r7, #0]
200015ee:	1c5a      	adds	r2, r3, #1
200015f0:	603a      	str	r2, [r7, #0]
200015f2:	b2ca      	uxtb	r2, r1
200015f4:	701a      	strb	r2, [r3, #0]
200015f6:	e01b      	b.n	20001630 <DAP_SWD_Transfer+0x5fc>
    } else if (check_write) {
200015f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200015fa:	2b00      	cmp	r3, #0
200015fc:	d015      	beq.n	2000162a <DAP_SWD_Transfer+0x5f6>
      // Check last write
      retry = DAP_Data.transfer.retry_count;
200015fe:	4b17      	ldr	r3, [pc, #92]	@ (2000165c <DAP_SWD_Transfer+0x628>)
20001600:	8a1b      	ldrh	r3, [r3, #16]
20001602:	627b      	str	r3, [r7, #36]	@ 0x24
      do {
        response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
20001604:	2100      	movs	r1, #0
20001606:	200e      	movs	r0, #14
20001608:	f003 f81a 	bl	20004640 <SWD_Transfer>
2000160c:	4603      	mov	r3, r0
2000160e:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001612:	2b02      	cmp	r3, #2
20001614:	d109      	bne.n	2000162a <DAP_SWD_Transfer+0x5f6>
20001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001618:	1e5a      	subs	r2, r3, #1
2000161a:	627a      	str	r2, [r7, #36]	@ 0x24
2000161c:	2b00      	cmp	r3, #0
2000161e:	d004      	beq.n	2000162a <DAP_SWD_Transfer+0x5f6>
20001620:	4b0f      	ldr	r3, [pc, #60]	@ (20001660 <DAP_SWD_Transfer+0x62c>)
20001622:	781b      	ldrb	r3, [r3, #0]
20001624:	b2db      	uxtb	r3, r3
20001626:	2b00      	cmp	r3, #0
20001628:	d0ec      	beq.n	20001604 <DAP_SWD_Transfer+0x5d0>
    }
  }

end:
2000162a:	bf00      	nop
2000162c:	e000      	b.n	20001630 <DAP_SWD_Transfer+0x5fc>
        goto end;
2000162e:	bf00      	nop
  *(response_head+0) = (uint8_t)response_count;
20001630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001632:	b2da      	uxtb	r2, r3
20001634:	69fb      	ldr	r3, [r7, #28]
20001636:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)response_value;
20001638:	69fb      	ldr	r3, [r7, #28]
2000163a:	3301      	adds	r3, #1
2000163c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
2000163e:	b2d2      	uxtb	r2, r2
20001640:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | (uint32_t)(response - response_head));
20001642:	687a      	ldr	r2, [r7, #4]
20001644:	6a3b      	ldr	r3, [r7, #32]
20001646:	1ad3      	subs	r3, r2, r3
20001648:	041b      	lsls	r3, r3, #16
2000164a:	6839      	ldr	r1, [r7, #0]
2000164c:	69fa      	ldr	r2, [r7, #28]
2000164e:	1a8a      	subs	r2, r1, r2
20001650:	4313      	orrs	r3, r2
}
20001652:	4618      	mov	r0, r3
20001654:	3740      	adds	r7, #64	@ 0x40
20001656:	46bd      	mov	sp, r7
20001658:	bd80      	pop	{r7, pc}
2000165a:	bf00      	nop
2000165c:	2000d834 	.word	0x2000d834
20001660:	2000d878 	.word	0x2000d878

20001664 <DAP_JTAG_Transfer>:
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_Transfer(const uint8_t *request, uint8_t *response) {
20001664:	b580      	push	{r7, lr}
20001666:	b090      	sub	sp, #64	@ 0x40
20001668:	af00      	add	r7, sp, #0
2000166a:	6078      	str	r0, [r7, #4]
2000166c:	6039      	str	r1, [r7, #0]
  uint32_t  ir;
#if (TIMESTAMP_CLOCK != 0U)
  uint32_t  timestamp;
#endif

  request_head   = request;
2000166e:	687b      	ldr	r3, [r7, #4]
20001670:	623b      	str	r3, [r7, #32]

  response_count = 0U;
20001672:	2300      	movs	r3, #0
20001674:	63bb      	str	r3, [r7, #56]	@ 0x38
  response_value = 0U;
20001676:	2300      	movs	r3, #0
20001678:	637b      	str	r3, [r7, #52]	@ 0x34
  response_head  = response;
2000167a:	683b      	ldr	r3, [r7, #0]
2000167c:	61fb      	str	r3, [r7, #28]
  response      += 2;
2000167e:	683b      	ldr	r3, [r7, #0]
20001680:	3302      	adds	r3, #2
20001682:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001684:	4b95      	ldr	r3, [pc, #596]	@ (200018dc <DAP_JTAG_Transfer+0x278>)
20001686:	2200      	movs	r2, #0
20001688:	701a      	strb	r2, [r3, #0]

  ir        = 0U;
2000168a:	2300      	movs	r3, #0
2000168c:	627b      	str	r3, [r7, #36]	@ 0x24
  post_read = 0U;
2000168e:	2300      	movs	r3, #0
20001690:	633b      	str	r3, [r7, #48]	@ 0x30

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	1c5a      	adds	r2, r3, #1
20001696:	607a      	str	r2, [r7, #4]
20001698:	781a      	ldrb	r2, [r3, #0]
2000169a:	4b91      	ldr	r3, [pc, #580]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
2000169c:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
2000169e:	4b90      	ldr	r3, [pc, #576]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
200016a0:	7eda      	ldrb	r2, [r3, #27]
200016a2:	4b8f      	ldr	r3, [pc, #572]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
200016a4:	7e9b      	ldrb	r3, [r3, #26]
200016a6:	429a      	cmp	r2, r3
200016a8:	f080 82bc 	bcs.w	20001c24 <DAP_JTAG_Transfer+0x5c0>
    goto end;
  }

  request_count = *request++;
200016ac:	687b      	ldr	r3, [r7, #4]
200016ae:	1c5a      	adds	r2, r3, #1
200016b0:	607a      	str	r2, [r7, #4]
200016b2:	781b      	ldrb	r3, [r3, #0]
200016b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  while (request_count != 0) {
200016b6:	e227      	b.n	20001b08 <DAP_JTAG_Transfer+0x4a4>
    request_count--;
200016b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200016ba:	3b01      	subs	r3, #1
200016bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
200016be:	687b      	ldr	r3, [r7, #4]
200016c0:	1c5a      	adds	r2, r3, #1
200016c2:	607a      	str	r2, [r7, #4]
200016c4:	781b      	ldrb	r3, [r3, #0]
200016c6:	61bb      	str	r3, [r7, #24]
    request_ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
200016c8:	69bb      	ldr	r3, [r7, #24]
200016ca:	f003 0301 	and.w	r3, r3, #1
200016ce:	2b00      	cmp	r3, #0
200016d0:	d001      	beq.n	200016d6 <DAP_JTAG_Transfer+0x72>
200016d2:	230b      	movs	r3, #11
200016d4:	e000      	b.n	200016d8 <DAP_JTAG_Transfer+0x74>
200016d6:	230a      	movs	r3, #10
200016d8:	617b      	str	r3, [r7, #20]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
200016da:	69bb      	ldr	r3, [r7, #24]
200016dc:	f003 0302 	and.w	r3, r3, #2
200016e0:	2b00      	cmp	r3, #0
200016e2:	f000 815d 	beq.w	200019a0 <DAP_JTAG_Transfer+0x33c>
      // Read register
      if (post_read) {
200016e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200016e8:	2b00      	cmp	r3, #0
200016ea:	f000 8088 	beq.w	200017fe <DAP_JTAG_Transfer+0x19a>
        // Read was posted before
        retry = DAP_Data.transfer.retry_count;
200016ee:	4b7c      	ldr	r3, [pc, #496]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
200016f0:	8a1b      	ldrh	r3, [r3, #16]
200016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
200016f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200016f6:	697b      	ldr	r3, [r7, #20]
200016f8:	429a      	cmp	r2, r3
200016fa:	d11a      	bne.n	20001732 <DAP_JTAG_Transfer+0xce>
200016fc:	69bb      	ldr	r3, [r7, #24]
200016fe:	f003 0310 	and.w	r3, r3, #16
20001702:	2b00      	cmp	r3, #0
20001704:	d115      	bne.n	20001732 <DAP_JTAG_Transfer+0xce>
          // Read previous data and post next read
          do {
            response_value = JTAG_Transfer(request_value, &data);
20001706:	f107 0308 	add.w	r3, r7, #8
2000170a:	4619      	mov	r1, r3
2000170c:	69b8      	ldr	r0, [r7, #24]
2000170e:	f002 fbc7 	bl	20003ea0 <JTAG_Transfer>
20001712:	4603      	mov	r3, r0
20001714:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001718:	2b02      	cmp	r3, #2
2000171a:	d12a      	bne.n	20001772 <DAP_JTAG_Transfer+0x10e>
2000171c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000171e:	1e5a      	subs	r2, r3, #1
20001720:	62ba      	str	r2, [r7, #40]	@ 0x28
20001722:	2b00      	cmp	r3, #0
20001724:	d025      	beq.n	20001772 <DAP_JTAG_Transfer+0x10e>
20001726:	4b6d      	ldr	r3, [pc, #436]	@ (200018dc <DAP_JTAG_Transfer+0x278>)
20001728:	781b      	ldrb	r3, [r3, #0]
2000172a:	b2db      	uxtb	r3, r3
2000172c:	2b00      	cmp	r3, #0
2000172e:	d0ea      	beq.n	20001706 <DAP_JTAG_Transfer+0xa2>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
20001730:	e01f      	b.n	20001772 <DAP_JTAG_Transfer+0x10e>
        } else {
          // Select JTAG chain
          if (ir != JTAG_DPACC) {
20001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001734:	2b0a      	cmp	r3, #10
20001736:	d004      	beq.n	20001742 <DAP_JTAG_Transfer+0xde>
            ir = JTAG_DPACC;
20001738:	230a      	movs	r3, #10
2000173a:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
2000173c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000173e:	f002 fb99 	bl	20003e74 <JTAG_IR>
          }
          // Read previous data
          do {
            response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
20001742:	f107 0308 	add.w	r3, r7, #8
20001746:	4619      	mov	r1, r3
20001748:	200e      	movs	r0, #14
2000174a:	f002 fba9 	bl	20003ea0 <JTAG_Transfer>
2000174e:	4603      	mov	r3, r0
20001750:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001754:	2b02      	cmp	r3, #2
20001756:	d109      	bne.n	2000176c <DAP_JTAG_Transfer+0x108>
20001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000175a:	1e5a      	subs	r2, r3, #1
2000175c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000175e:	2b00      	cmp	r3, #0
20001760:	d004      	beq.n	2000176c <DAP_JTAG_Transfer+0x108>
20001762:	4b5e      	ldr	r3, [pc, #376]	@ (200018dc <DAP_JTAG_Transfer+0x278>)
20001764:	781b      	ldrb	r3, [r3, #0]
20001766:	b2db      	uxtb	r3, r3
20001768:	2b00      	cmp	r3, #0
2000176a:	d0ea      	beq.n	20001742 <DAP_JTAG_Transfer+0xde>
          post_read = 0U;
2000176c:	2300      	movs	r3, #0
2000176e:	633b      	str	r3, [r7, #48]	@ 0x30
20001770:	e000      	b.n	20001774 <DAP_JTAG_Transfer+0x110>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
20001772:	bf00      	nop
        }
        if (response_value != DAP_TRANSFER_OK) {
20001774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001776:	2b01      	cmp	r3, #1
20001778:	f040 81cb 	bne.w	20001b12 <DAP_JTAG_Transfer+0x4ae>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
2000177c:	68b9      	ldr	r1, [r7, #8]
2000177e:	683b      	ldr	r3, [r7, #0]
20001780:	1c5a      	adds	r2, r3, #1
20001782:	603a      	str	r2, [r7, #0]
20001784:	b2ca      	uxtb	r2, r1
20001786:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001788:	68bb      	ldr	r3, [r7, #8]
2000178a:	0a19      	lsrs	r1, r3, #8
2000178c:	683b      	ldr	r3, [r7, #0]
2000178e:	1c5a      	adds	r2, r3, #1
20001790:	603a      	str	r2, [r7, #0]
20001792:	b2ca      	uxtb	r2, r1
20001794:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001796:	68bb      	ldr	r3, [r7, #8]
20001798:	0c19      	lsrs	r1, r3, #16
2000179a:	683b      	ldr	r3, [r7, #0]
2000179c:	1c5a      	adds	r2, r3, #1
2000179e:	603a      	str	r2, [r7, #0]
200017a0:	b2ca      	uxtb	r2, r1
200017a2:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
200017a4:	68bb      	ldr	r3, [r7, #8]
200017a6:	0e19      	lsrs	r1, r3, #24
200017a8:	683b      	ldr	r3, [r7, #0]
200017aa:	1c5a      	adds	r2, r3, #1
200017ac:	603a      	str	r2, [r7, #0]
200017ae:	b2ca      	uxtb	r2, r1
200017b0:	701a      	strb	r2, [r3, #0]
#if (TIMESTAMP_CLOCK != 0U)
        if (post_read) {
200017b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200017b4:	2b00      	cmp	r3, #0
200017b6:	d022      	beq.n	200017fe <DAP_JTAG_Transfer+0x19a>
          // Store Timestamp of next AP read
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200017b8:	69bb      	ldr	r3, [r7, #24]
200017ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200017be:	2b00      	cmp	r3, #0
200017c0:	d01d      	beq.n	200017fe <DAP_JTAG_Transfer+0x19a>
            timestamp = DAP_Data.timestamp;
200017c2:	4b47      	ldr	r3, [pc, #284]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
200017c4:	689b      	ldr	r3, [r3, #8]
200017c6:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
200017c8:	683b      	ldr	r3, [r7, #0]
200017ca:	1c5a      	adds	r2, r3, #1
200017cc:	603a      	str	r2, [r7, #0]
200017ce:	693a      	ldr	r2, [r7, #16]
200017d0:	b2d2      	uxtb	r2, r2
200017d2:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
200017d4:	693b      	ldr	r3, [r7, #16]
200017d6:	0a19      	lsrs	r1, r3, #8
200017d8:	683b      	ldr	r3, [r7, #0]
200017da:	1c5a      	adds	r2, r3, #1
200017dc:	603a      	str	r2, [r7, #0]
200017de:	b2ca      	uxtb	r2, r1
200017e0:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
200017e2:	693b      	ldr	r3, [r7, #16]
200017e4:	0c19      	lsrs	r1, r3, #16
200017e6:	683b      	ldr	r3, [r7, #0]
200017e8:	1c5a      	adds	r2, r3, #1
200017ea:	603a      	str	r2, [r7, #0]
200017ec:	b2ca      	uxtb	r2, r1
200017ee:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
200017f0:	693b      	ldr	r3, [r7, #16]
200017f2:	0e19      	lsrs	r1, r3, #24
200017f4:	683b      	ldr	r3, [r7, #0]
200017f6:	1c5a      	adds	r2, r3, #1
200017f8:	603a      	str	r2, [r7, #0]
200017fa:	b2ca      	uxtb	r2, r1
200017fc:	701a      	strb	r2, [r3, #0]
          }
        }
#endif
      }
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
200017fe:	69bb      	ldr	r3, [r7, #24]
20001800:	f003 0310 	and.w	r3, r3, #16
20001804:	2b00      	cmp	r3, #0
20001806:	d07e      	beq.n	20001906 <DAP_JTAG_Transfer+0x2a2>
        // Read with value match
        match_value = (uint32_t)(*(request+0) <<  0) |
20001808:	687b      	ldr	r3, [r7, #4]
2000180a:	781b      	ldrb	r3, [r3, #0]
2000180c:	461a      	mov	r2, r3
                      (uint32_t)(*(request+1) <<  8) |
2000180e:	687b      	ldr	r3, [r7, #4]
20001810:	3301      	adds	r3, #1
20001812:	781b      	ldrb	r3, [r3, #0]
20001814:	021b      	lsls	r3, r3, #8
        match_value = (uint32_t)(*(request+0) <<  0) |
20001816:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+2) << 16) |
20001818:	687b      	ldr	r3, [r7, #4]
2000181a:	3302      	adds	r3, #2
2000181c:	781b      	ldrb	r3, [r3, #0]
2000181e:	041b      	lsls	r3, r3, #16
                      (uint32_t)(*(request+1) <<  8) |
20001820:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+3) << 24);
20001822:	687b      	ldr	r3, [r7, #4]
20001824:	3303      	adds	r3, #3
20001826:	781b      	ldrb	r3, [r3, #0]
20001828:	061b      	lsls	r3, r3, #24
        match_value = (uint32_t)(*(request+0) <<  0) |
2000182a:	4313      	orrs	r3, r2
2000182c:	60fb      	str	r3, [r7, #12]
        request += 4;
2000182e:	687b      	ldr	r3, [r7, #4]
20001830:	3304      	adds	r3, #4
20001832:	607b      	str	r3, [r7, #4]
        match_retry  = DAP_Data.transfer.match_retry;
20001834:	4b2a      	ldr	r3, [pc, #168]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
20001836:	8a5b      	ldrh	r3, [r3, #18]
20001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // Select JTAG chain
        if (ir != request_ir) {
2000183a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000183c:	697b      	ldr	r3, [r7, #20]
2000183e:	429a      	cmp	r2, r3
20001840:	d004      	beq.n	2000184c <DAP_JTAG_Transfer+0x1e8>
          ir = request_ir;
20001842:	697b      	ldr	r3, [r7, #20]
20001844:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001846:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001848:	f002 fb14 	bl	20003e74 <JTAG_IR>
        }
        // Post DP/AP read
        retry = DAP_Data.transfer.retry_count;
2000184c:	4b24      	ldr	r3, [pc, #144]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
2000184e:	8a1b      	ldrh	r3, [r3, #16]
20001850:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, NULL);
20001852:	2100      	movs	r1, #0
20001854:	69b8      	ldr	r0, [r7, #24]
20001856:	f002 fb23 	bl	20003ea0 <JTAG_Transfer>
2000185a:	4603      	mov	r3, r0
2000185c:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000185e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001860:	2b02      	cmp	r3, #2
20001862:	d109      	bne.n	20001878 <DAP_JTAG_Transfer+0x214>
20001864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001866:	1e5a      	subs	r2, r3, #1
20001868:	62ba      	str	r2, [r7, #40]	@ 0x28
2000186a:	2b00      	cmp	r3, #0
2000186c:	d004      	beq.n	20001878 <DAP_JTAG_Transfer+0x214>
2000186e:	4b1b      	ldr	r3, [pc, #108]	@ (200018dc <DAP_JTAG_Transfer+0x278>)
20001870:	781b      	ldrb	r3, [r3, #0]
20001872:	b2db      	uxtb	r3, r3
20001874:	2b00      	cmp	r3, #0
20001876:	d0ec      	beq.n	20001852 <DAP_JTAG_Transfer+0x1ee>
        if (response_value != DAP_TRANSFER_OK) {
20001878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000187a:	2b01      	cmp	r3, #1
2000187c:	f040 814b 	bne.w	20001b16 <DAP_JTAG_Transfer+0x4b2>
          break;
        }
        do {
          // Read register until its value matches or retry counter expires
          retry = DAP_Data.transfer.retry_count;
20001880:	4b17      	ldr	r3, [pc, #92]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
20001882:	8a1b      	ldrh	r3, [r3, #16]
20001884:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, &data);
20001886:	f107 0308 	add.w	r3, r7, #8
2000188a:	4619      	mov	r1, r3
2000188c:	69b8      	ldr	r0, [r7, #24]
2000188e:	f002 fb07 	bl	20003ea0 <JTAG_Transfer>
20001892:	4603      	mov	r3, r0
20001894:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001898:	2b02      	cmp	r3, #2
2000189a:	d109      	bne.n	200018b0 <DAP_JTAG_Transfer+0x24c>
2000189c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000189e:	1e5a      	subs	r2, r3, #1
200018a0:	62ba      	str	r2, [r7, #40]	@ 0x28
200018a2:	2b00      	cmp	r3, #0
200018a4:	d004      	beq.n	200018b0 <DAP_JTAG_Transfer+0x24c>
200018a6:	4b0d      	ldr	r3, [pc, #52]	@ (200018dc <DAP_JTAG_Transfer+0x278>)
200018a8:	781b      	ldrb	r3, [r3, #0]
200018aa:	b2db      	uxtb	r3, r3
200018ac:	2b00      	cmp	r3, #0
200018ae:	d0ea      	beq.n	20001886 <DAP_JTAG_Transfer+0x222>
          if (response_value != DAP_TRANSFER_OK) {
200018b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200018b2:	2b01      	cmp	r3, #1
200018b4:	d116      	bne.n	200018e4 <DAP_JTAG_Transfer+0x280>
            break;
          }
        } while (((data & DAP_Data.transfer.match_mask) != match_value) && match_retry-- && !DAP_TransferAbort);
200018b6:	4b0a      	ldr	r3, [pc, #40]	@ (200018e0 <DAP_JTAG_Transfer+0x27c>)
200018b8:	695a      	ldr	r2, [r3, #20]
200018ba:	68bb      	ldr	r3, [r7, #8]
200018bc:	4013      	ands	r3, r2
200018be:	68fa      	ldr	r2, [r7, #12]
200018c0:	429a      	cmp	r2, r3
200018c2:	d010      	beq.n	200018e6 <DAP_JTAG_Transfer+0x282>
200018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200018c6:	1e5a      	subs	r2, r3, #1
200018c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
200018ca:	2b00      	cmp	r3, #0
200018cc:	d00b      	beq.n	200018e6 <DAP_JTAG_Transfer+0x282>
200018ce:	4b03      	ldr	r3, [pc, #12]	@ (200018dc <DAP_JTAG_Transfer+0x278>)
200018d0:	781b      	ldrb	r3, [r3, #0]
200018d2:	b2db      	uxtb	r3, r3
200018d4:	2b00      	cmp	r3, #0
200018d6:	d0d3      	beq.n	20001880 <DAP_JTAG_Transfer+0x21c>
200018d8:	e005      	b.n	200018e6 <DAP_JTAG_Transfer+0x282>
200018da:	bf00      	nop
200018dc:	2000d878 	.word	0x2000d878
200018e0:	2000d834 	.word	0x2000d834
            break;
200018e4:	bf00      	nop
        if ((data & DAP_Data.transfer.match_mask) != match_value) {
200018e6:	4b91      	ldr	r3, [pc, #580]	@ (20001b2c <DAP_JTAG_Transfer+0x4c8>)
200018e8:	695a      	ldr	r2, [r3, #20]
200018ea:	68bb      	ldr	r3, [r7, #8]
200018ec:	4013      	ands	r3, r2
200018ee:	68fa      	ldr	r2, [r7, #12]
200018f0:	429a      	cmp	r2, r3
200018f2:	d003      	beq.n	200018fc <DAP_JTAG_Transfer+0x298>
          response_value |= DAP_TRANSFER_MISMATCH;
200018f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200018f6:	f043 0310 	orr.w	r3, r3, #16
200018fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (response_value != DAP_TRANSFER_OK) {
200018fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200018fe:	2b01      	cmp	r3, #1
20001900:	f000 80fa 	beq.w	20001af8 <DAP_JTAG_Transfer+0x494>
          break;
20001904:	e110      	b.n	20001b28 <DAP_JTAG_Transfer+0x4c4>
        }
      } else {
        // Normal read
        if (post_read == 0U) {
20001906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001908:	2b00      	cmp	r3, #0
2000190a:	f040 80f5 	bne.w	20001af8 <DAP_JTAG_Transfer+0x494>
          // Select JTAG chain
          if (ir != request_ir) {
2000190e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001910:	697b      	ldr	r3, [r7, #20]
20001912:	429a      	cmp	r2, r3
20001914:	d004      	beq.n	20001920 <DAP_JTAG_Transfer+0x2bc>
            ir = request_ir;
20001916:	697b      	ldr	r3, [r7, #20]
20001918:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
2000191a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000191c:	f002 faaa 	bl	20003e74 <JTAG_IR>
          }
          // Post DP/AP read
          retry = DAP_Data.transfer.retry_count;
20001920:	4b82      	ldr	r3, [pc, #520]	@ (20001b2c <DAP_JTAG_Transfer+0x4c8>)
20001922:	8a1b      	ldrh	r3, [r3, #16]
20001924:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, NULL);
20001926:	2100      	movs	r1, #0
20001928:	69b8      	ldr	r0, [r7, #24]
2000192a:	f002 fab9 	bl	20003ea0 <JTAG_Transfer>
2000192e:	4603      	mov	r3, r0
20001930:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001934:	2b02      	cmp	r3, #2
20001936:	d109      	bne.n	2000194c <DAP_JTAG_Transfer+0x2e8>
20001938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000193a:	1e5a      	subs	r2, r3, #1
2000193c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000193e:	2b00      	cmp	r3, #0
20001940:	d004      	beq.n	2000194c <DAP_JTAG_Transfer+0x2e8>
20001942:	4b7b      	ldr	r3, [pc, #492]	@ (20001b30 <DAP_JTAG_Transfer+0x4cc>)
20001944:	781b      	ldrb	r3, [r3, #0]
20001946:	b2db      	uxtb	r3, r3
20001948:	2b00      	cmp	r3, #0
2000194a:	d0ec      	beq.n	20001926 <DAP_JTAG_Transfer+0x2c2>
          if (response_value != DAP_TRANSFER_OK) {
2000194c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000194e:	2b01      	cmp	r3, #1
20001950:	f040 80e3 	bne.w	20001b1a <DAP_JTAG_Transfer+0x4b6>
            break;
          }
#if (TIMESTAMP_CLOCK != 0U)
          // Store Timestamp
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001954:	69bb      	ldr	r3, [r7, #24]
20001956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000195a:	2b00      	cmp	r3, #0
2000195c:	d01d      	beq.n	2000199a <DAP_JTAG_Transfer+0x336>
            timestamp = DAP_Data.timestamp;
2000195e:	4b73      	ldr	r3, [pc, #460]	@ (20001b2c <DAP_JTAG_Transfer+0x4c8>)
20001960:	689b      	ldr	r3, [r3, #8]
20001962:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
20001964:	683b      	ldr	r3, [r7, #0]
20001966:	1c5a      	adds	r2, r3, #1
20001968:	603a      	str	r2, [r7, #0]
2000196a:	693a      	ldr	r2, [r7, #16]
2000196c:	b2d2      	uxtb	r2, r2
2000196e:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
20001970:	693b      	ldr	r3, [r7, #16]
20001972:	0a19      	lsrs	r1, r3, #8
20001974:	683b      	ldr	r3, [r7, #0]
20001976:	1c5a      	adds	r2, r3, #1
20001978:	603a      	str	r2, [r7, #0]
2000197a:	b2ca      	uxtb	r2, r1
2000197c:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
2000197e:	693b      	ldr	r3, [r7, #16]
20001980:	0c19      	lsrs	r1, r3, #16
20001982:	683b      	ldr	r3, [r7, #0]
20001984:	1c5a      	adds	r2, r3, #1
20001986:	603a      	str	r2, [r7, #0]
20001988:	b2ca      	uxtb	r2, r1
2000198a:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
2000198c:	693b      	ldr	r3, [r7, #16]
2000198e:	0e19      	lsrs	r1, r3, #24
20001990:	683b      	ldr	r3, [r7, #0]
20001992:	1c5a      	adds	r2, r3, #1
20001994:	603a      	str	r2, [r7, #0]
20001996:	b2ca      	uxtb	r2, r1
20001998:	701a      	strb	r2, [r3, #0]
          }
#endif
          post_read = 1U;
2000199a:	2301      	movs	r3, #1
2000199c:	633b      	str	r3, [r7, #48]	@ 0x30
2000199e:	e0ab      	b.n	20001af8 <DAP_JTAG_Transfer+0x494>
        }
      }
    } else {
      // Write register
      if (post_read) {
200019a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200019a2:	2b00      	cmp	r3, #0
200019a4:	d040      	beq.n	20001a28 <DAP_JTAG_Transfer+0x3c4>
        // Select JTAG chain
        if (ir != JTAG_DPACC) {
200019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200019a8:	2b0a      	cmp	r3, #10
200019aa:	d004      	beq.n	200019b6 <DAP_JTAG_Transfer+0x352>
          ir = JTAG_DPACC;
200019ac:	230a      	movs	r3, #10
200019ae:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
200019b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
200019b2:	f002 fa5f 	bl	20003e74 <JTAG_IR>
        }
        // Read previous data
        retry = DAP_Data.transfer.retry_count;
200019b6:	4b5d      	ldr	r3, [pc, #372]	@ (20001b2c <DAP_JTAG_Transfer+0x4c8>)
200019b8:	8a1b      	ldrh	r3, [r3, #16]
200019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200019bc:	f107 0308 	add.w	r3, r7, #8
200019c0:	4619      	mov	r1, r3
200019c2:	200e      	movs	r0, #14
200019c4:	f002 fa6c 	bl	20003ea0 <JTAG_Transfer>
200019c8:	4603      	mov	r3, r0
200019ca:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200019ce:	2b02      	cmp	r3, #2
200019d0:	d109      	bne.n	200019e6 <DAP_JTAG_Transfer+0x382>
200019d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200019d4:	1e5a      	subs	r2, r3, #1
200019d6:	62ba      	str	r2, [r7, #40]	@ 0x28
200019d8:	2b00      	cmp	r3, #0
200019da:	d004      	beq.n	200019e6 <DAP_JTAG_Transfer+0x382>
200019dc:	4b54      	ldr	r3, [pc, #336]	@ (20001b30 <DAP_JTAG_Transfer+0x4cc>)
200019de:	781b      	ldrb	r3, [r3, #0]
200019e0:	b2db      	uxtb	r3, r3
200019e2:	2b00      	cmp	r3, #0
200019e4:	d0ea      	beq.n	200019bc <DAP_JTAG_Transfer+0x358>
        if (response_value != DAP_TRANSFER_OK) {
200019e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200019e8:	2b01      	cmp	r3, #1
200019ea:	f040 8098 	bne.w	20001b1e <DAP_JTAG_Transfer+0x4ba>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
200019ee:	68b9      	ldr	r1, [r7, #8]
200019f0:	683b      	ldr	r3, [r7, #0]
200019f2:	1c5a      	adds	r2, r3, #1
200019f4:	603a      	str	r2, [r7, #0]
200019f6:	b2ca      	uxtb	r2, r1
200019f8:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
200019fa:	68bb      	ldr	r3, [r7, #8]
200019fc:	0a19      	lsrs	r1, r3, #8
200019fe:	683b      	ldr	r3, [r7, #0]
20001a00:	1c5a      	adds	r2, r3, #1
20001a02:	603a      	str	r2, [r7, #0]
20001a04:	b2ca      	uxtb	r2, r1
20001a06:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001a08:	68bb      	ldr	r3, [r7, #8]
20001a0a:	0c19      	lsrs	r1, r3, #16
20001a0c:	683b      	ldr	r3, [r7, #0]
20001a0e:	1c5a      	adds	r2, r3, #1
20001a10:	603a      	str	r2, [r7, #0]
20001a12:	b2ca      	uxtb	r2, r1
20001a14:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001a16:	68bb      	ldr	r3, [r7, #8]
20001a18:	0e19      	lsrs	r1, r3, #24
20001a1a:	683b      	ldr	r3, [r7, #0]
20001a1c:	1c5a      	adds	r2, r3, #1
20001a1e:	603a      	str	r2, [r7, #0]
20001a20:	b2ca      	uxtb	r2, r1
20001a22:	701a      	strb	r2, [r3, #0]
        post_read = 0U;
20001a24:	2300      	movs	r3, #0
20001a26:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001a28:	687b      	ldr	r3, [r7, #4]
20001a2a:	781b      	ldrb	r3, [r3, #0]
20001a2c:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
20001a2e:	687b      	ldr	r3, [r7, #4]
20001a30:	3301      	adds	r3, #1
20001a32:	781b      	ldrb	r3, [r3, #0]
20001a34:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001a36:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001a38:	687b      	ldr	r3, [r7, #4]
20001a3a:	3302      	adds	r3, #2
20001a3c:	781b      	ldrb	r3, [r3, #0]
20001a3e:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
20001a40:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
20001a42:	687b      	ldr	r3, [r7, #4]
20001a44:	3303      	adds	r3, #3
20001a46:	781b      	ldrb	r3, [r3, #0]
20001a48:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001a4a:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
20001a4c:	60bb      	str	r3, [r7, #8]
      request += 4;
20001a4e:	687b      	ldr	r3, [r7, #4]
20001a50:	3304      	adds	r3, #4
20001a52:	607b      	str	r3, [r7, #4]
      if ((request_value & DAP_TRANSFER_MATCH_MASK) != 0U) {
20001a54:	69bb      	ldr	r3, [r7, #24]
20001a56:	f003 0320 	and.w	r3, r3, #32
20001a5a:	2b00      	cmp	r3, #0
20001a5c:	d005      	beq.n	20001a6a <DAP_JTAG_Transfer+0x406>
        // Write match mask
        DAP_Data.transfer.match_mask = data;
20001a5e:	68bb      	ldr	r3, [r7, #8]
20001a60:	4a32      	ldr	r2, [pc, #200]	@ (20001b2c <DAP_JTAG_Transfer+0x4c8>)
20001a62:	6153      	str	r3, [r2, #20]
        response_value = DAP_TRANSFER_OK;
20001a64:	2301      	movs	r3, #1
20001a66:	637b      	str	r3, [r7, #52]	@ 0x34
20001a68:	e046      	b.n	20001af8 <DAP_JTAG_Transfer+0x494>
      } else {
        // Select JTAG chain
        if (ir != request_ir) {
20001a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001a6c:	697b      	ldr	r3, [r7, #20]
20001a6e:	429a      	cmp	r2, r3
20001a70:	d004      	beq.n	20001a7c <DAP_JTAG_Transfer+0x418>
          ir = request_ir;
20001a72:	697b      	ldr	r3, [r7, #20]
20001a74:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001a78:	f002 f9fc 	bl	20003e74 <JTAG_IR>
        }
        // Write DP/AP register
        retry = DAP_Data.transfer.retry_count;
20001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (20001b2c <DAP_JTAG_Transfer+0x4c8>)
20001a7e:	8a1b      	ldrh	r3, [r3, #16]
20001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, &data);
20001a82:	f107 0308 	add.w	r3, r7, #8
20001a86:	4619      	mov	r1, r3
20001a88:	69b8      	ldr	r0, [r7, #24]
20001a8a:	f002 fa09 	bl	20003ea0 <JTAG_Transfer>
20001a8e:	4603      	mov	r3, r0
20001a90:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001a94:	2b02      	cmp	r3, #2
20001a96:	d109      	bne.n	20001aac <DAP_JTAG_Transfer+0x448>
20001a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001a9a:	1e5a      	subs	r2, r3, #1
20001a9c:	62ba      	str	r2, [r7, #40]	@ 0x28
20001a9e:	2b00      	cmp	r3, #0
20001aa0:	d004      	beq.n	20001aac <DAP_JTAG_Transfer+0x448>
20001aa2:	4b23      	ldr	r3, [pc, #140]	@ (20001b30 <DAP_JTAG_Transfer+0x4cc>)
20001aa4:	781b      	ldrb	r3, [r3, #0]
20001aa6:	b2db      	uxtb	r3, r3
20001aa8:	2b00      	cmp	r3, #0
20001aaa:	d0ea      	beq.n	20001a82 <DAP_JTAG_Transfer+0x41e>
        if (response_value != DAP_TRANSFER_OK) {
20001aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001aae:	2b01      	cmp	r3, #1
20001ab0:	d137      	bne.n	20001b22 <DAP_JTAG_Transfer+0x4be>
          break;
        }
#if (TIMESTAMP_CLOCK != 0U)
        // Store Timestamp
        if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001ab2:	69bb      	ldr	r3, [r7, #24]
20001ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001ab8:	2b00      	cmp	r3, #0
20001aba:	d01d      	beq.n	20001af8 <DAP_JTAG_Transfer+0x494>
          timestamp = DAP_Data.timestamp;
20001abc:	4b1b      	ldr	r3, [pc, #108]	@ (20001b2c <DAP_JTAG_Transfer+0x4c8>)
20001abe:	689b      	ldr	r3, [r3, #8]
20001ac0:	613b      	str	r3, [r7, #16]
          *response++ = (uint8_t) timestamp;
20001ac2:	683b      	ldr	r3, [r7, #0]
20001ac4:	1c5a      	adds	r2, r3, #1
20001ac6:	603a      	str	r2, [r7, #0]
20001ac8:	693a      	ldr	r2, [r7, #16]
20001aca:	b2d2      	uxtb	r2, r2
20001acc:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >>  8);
20001ace:	693b      	ldr	r3, [r7, #16]
20001ad0:	0a19      	lsrs	r1, r3, #8
20001ad2:	683b      	ldr	r3, [r7, #0]
20001ad4:	1c5a      	adds	r2, r3, #1
20001ad6:	603a      	str	r2, [r7, #0]
20001ad8:	b2ca      	uxtb	r2, r1
20001ada:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 16);
20001adc:	693b      	ldr	r3, [r7, #16]
20001ade:	0c19      	lsrs	r1, r3, #16
20001ae0:	683b      	ldr	r3, [r7, #0]
20001ae2:	1c5a      	adds	r2, r3, #1
20001ae4:	603a      	str	r2, [r7, #0]
20001ae6:	b2ca      	uxtb	r2, r1
20001ae8:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 24);
20001aea:	693b      	ldr	r3, [r7, #16]
20001aec:	0e19      	lsrs	r1, r3, #24
20001aee:	683b      	ldr	r3, [r7, #0]
20001af0:	1c5a      	adds	r2, r3, #1
20001af2:	603a      	str	r2, [r7, #0]
20001af4:	b2ca      	uxtb	r2, r1
20001af6:	701a      	strb	r2, [r3, #0]
        }
#endif
      }
    }
    response_count++;
20001af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001afa:	3301      	adds	r3, #1
20001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (DAP_TransferAbort) {
20001afe:	4b0c      	ldr	r3, [pc, #48]	@ (20001b30 <DAP_JTAG_Transfer+0x4cc>)
20001b00:	781b      	ldrb	r3, [r3, #0]
20001b02:	b2db      	uxtb	r3, r3
20001b04:	2b00      	cmp	r3, #0
20001b06:	d10e      	bne.n	20001b26 <DAP_JTAG_Transfer+0x4c2>
  while (request_count != 0) {
20001b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001b0a:	2b00      	cmp	r3, #0
20001b0c:	f47f add4 	bne.w	200016b8 <DAP_JTAG_Transfer+0x54>
20001b10:	e029      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
          break;
20001b12:	bf00      	nop
20001b14:	e027      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
          break;
20001b16:	bf00      	nop
20001b18:	e025      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
            break;
20001b1a:	bf00      	nop
20001b1c:	e023      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
          break;
20001b1e:	bf00      	nop
20001b20:	e021      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
          break;
20001b22:	bf00      	nop
20001b24:	e01f      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
      break;
20001b26:	bf00      	nop
    }
  }

  while (request_count != 0) {
20001b28:	e01d      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
20001b2a:	bf00      	nop
20001b2c:	2000d834 	.word	0x2000d834
20001b30:	2000d878 	.word	0x2000d878
    // Process canceled requests
    request_count--;
20001b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001b36:	3b01      	subs	r3, #1
20001b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
20001b3a:	687b      	ldr	r3, [r7, #4]
20001b3c:	1c5a      	adds	r2, r3, #1
20001b3e:	607a      	str	r2, [r7, #4]
20001b40:	781b      	ldrb	r3, [r3, #0]
20001b42:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001b44:	69bb      	ldr	r3, [r7, #24]
20001b46:	f003 0302 	and.w	r3, r3, #2
20001b4a:	2b00      	cmp	r3, #0
20001b4c:	d008      	beq.n	20001b60 <DAP_JTAG_Transfer+0x4fc>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
20001b4e:	69bb      	ldr	r3, [r7, #24]
20001b50:	f003 0310 	and.w	r3, r3, #16
20001b54:	2b00      	cmp	r3, #0
20001b56:	d006      	beq.n	20001b66 <DAP_JTAG_Transfer+0x502>
        // Read with value match
        request += 4;
20001b58:	687b      	ldr	r3, [r7, #4]
20001b5a:	3304      	adds	r3, #4
20001b5c:	607b      	str	r3, [r7, #4]
20001b5e:	e002      	b.n	20001b66 <DAP_JTAG_Transfer+0x502>
      }
    } else {
      // Write register
      request += 4;
20001b60:	687b      	ldr	r3, [r7, #4]
20001b62:	3304      	adds	r3, #4
20001b64:	607b      	str	r3, [r7, #4]
  while (request_count != 0) {
20001b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001b68:	2b00      	cmp	r3, #0
20001b6a:	d1e3      	bne.n	20001b34 <DAP_JTAG_Transfer+0x4d0>
    }
  }

  if (response_value == DAP_TRANSFER_OK) {
20001b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001b6e:	2b01      	cmp	r3, #1
20001b70:	d15a      	bne.n	20001c28 <DAP_JTAG_Transfer+0x5c4>
    // Select JTAG chain
    if (ir != JTAG_DPACC) {
20001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001b74:	2b0a      	cmp	r3, #10
20001b76:	d004      	beq.n	20001b82 <DAP_JTAG_Transfer+0x51e>
      ir = JTAG_DPACC;
20001b78:	230a      	movs	r3, #10
20001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
      JTAG_IR(ir);
20001b7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001b7e:	f002 f979 	bl	20003e74 <JTAG_IR>
    }
    if (post_read) {
20001b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001b84:	2b00      	cmp	r3, #0
20001b86:	d036      	beq.n	20001bf6 <DAP_JTAG_Transfer+0x592>
      // Read previous data
      retry = DAP_Data.transfer.retry_count;
20001b88:	4b33      	ldr	r3, [pc, #204]	@ (20001c58 <DAP_JTAG_Transfer+0x5f4>)
20001b8a:	8a1b      	ldrh	r3, [r3, #16]
20001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
20001b8e:	f107 0308 	add.w	r3, r7, #8
20001b92:	4619      	mov	r1, r3
20001b94:	200e      	movs	r0, #14
20001b96:	f002 f983 	bl	20003ea0 <JTAG_Transfer>
20001b9a:	4603      	mov	r3, r0
20001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001ba0:	2b02      	cmp	r3, #2
20001ba2:	d109      	bne.n	20001bb8 <DAP_JTAG_Transfer+0x554>
20001ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001ba6:	1e5a      	subs	r2, r3, #1
20001ba8:	62ba      	str	r2, [r7, #40]	@ 0x28
20001baa:	2b00      	cmp	r3, #0
20001bac:	d004      	beq.n	20001bb8 <DAP_JTAG_Transfer+0x554>
20001bae:	4b2b      	ldr	r3, [pc, #172]	@ (20001c5c <DAP_JTAG_Transfer+0x5f8>)
20001bb0:	781b      	ldrb	r3, [r3, #0]
20001bb2:	b2db      	uxtb	r3, r3
20001bb4:	2b00      	cmp	r3, #0
20001bb6:	d0ea      	beq.n	20001b8e <DAP_JTAG_Transfer+0x52a>
      if (response_value != DAP_TRANSFER_OK) {
20001bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001bba:	2b01      	cmp	r3, #1
20001bbc:	d136      	bne.n	20001c2c <DAP_JTAG_Transfer+0x5c8>
        goto end;
      }
      // Store previous data
      *response++ = (uint8_t) data;
20001bbe:	68b9      	ldr	r1, [r7, #8]
20001bc0:	683b      	ldr	r3, [r7, #0]
20001bc2:	1c5a      	adds	r2, r3, #1
20001bc4:	603a      	str	r2, [r7, #0]
20001bc6:	b2ca      	uxtb	r2, r1
20001bc8:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
20001bca:	68bb      	ldr	r3, [r7, #8]
20001bcc:	0a19      	lsrs	r1, r3, #8
20001bce:	683b      	ldr	r3, [r7, #0]
20001bd0:	1c5a      	adds	r2, r3, #1
20001bd2:	603a      	str	r2, [r7, #0]
20001bd4:	b2ca      	uxtb	r2, r1
20001bd6:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
20001bd8:	68bb      	ldr	r3, [r7, #8]
20001bda:	0c19      	lsrs	r1, r3, #16
20001bdc:	683b      	ldr	r3, [r7, #0]
20001bde:	1c5a      	adds	r2, r3, #1
20001be0:	603a      	str	r2, [r7, #0]
20001be2:	b2ca      	uxtb	r2, r1
20001be4:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20001be6:	68bb      	ldr	r3, [r7, #8]
20001be8:	0e19      	lsrs	r1, r3, #24
20001bea:	683b      	ldr	r3, [r7, #0]
20001bec:	1c5a      	adds	r2, r3, #1
20001bee:	603a      	str	r2, [r7, #0]
20001bf0:	b2ca      	uxtb	r2, r1
20001bf2:	701a      	strb	r2, [r3, #0]
20001bf4:	e01b      	b.n	20001c2e <DAP_JTAG_Transfer+0x5ca>
    } else {
      // Check last write
      retry = DAP_Data.transfer.retry_count;
20001bf6:	4b18      	ldr	r3, [pc, #96]	@ (20001c58 <DAP_JTAG_Transfer+0x5f4>)
20001bf8:	8a1b      	ldrh	r3, [r3, #16]
20001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
20001bfc:	2100      	movs	r1, #0
20001bfe:	200e      	movs	r0, #14
20001c00:	f002 f94e 	bl	20003ea0 <JTAG_Transfer>
20001c04:	4603      	mov	r3, r0
20001c06:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001c0a:	2b02      	cmp	r3, #2
20001c0c:	d10c      	bne.n	20001c28 <DAP_JTAG_Transfer+0x5c4>
20001c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001c10:	1e5a      	subs	r2, r3, #1
20001c12:	62ba      	str	r2, [r7, #40]	@ 0x28
20001c14:	2b00      	cmp	r3, #0
20001c16:	d007      	beq.n	20001c28 <DAP_JTAG_Transfer+0x5c4>
20001c18:	4b10      	ldr	r3, [pc, #64]	@ (20001c5c <DAP_JTAG_Transfer+0x5f8>)
20001c1a:	781b      	ldrb	r3, [r3, #0]
20001c1c:	b2db      	uxtb	r3, r3
20001c1e:	2b00      	cmp	r3, #0
20001c20:	d0ec      	beq.n	20001bfc <DAP_JTAG_Transfer+0x598>
    }
  }

end:
20001c22:	e001      	b.n	20001c28 <DAP_JTAG_Transfer+0x5c4>
    goto end;
20001c24:	bf00      	nop
20001c26:	e002      	b.n	20001c2e <DAP_JTAG_Transfer+0x5ca>
end:
20001c28:	bf00      	nop
20001c2a:	e000      	b.n	20001c2e <DAP_JTAG_Transfer+0x5ca>
        goto end;
20001c2c:	bf00      	nop
  *(response_head+0) = (uint8_t)response_count;
20001c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001c30:	b2da      	uxtb	r2, r3
20001c32:	69fb      	ldr	r3, [r7, #28]
20001c34:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)response_value;
20001c36:	69fb      	ldr	r3, [r7, #28]
20001c38:	3301      	adds	r3, #1
20001c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20001c3c:	b2d2      	uxtb	r2, r2
20001c3e:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | (uint32_t)(response - response_head));
20001c40:	687a      	ldr	r2, [r7, #4]
20001c42:	6a3b      	ldr	r3, [r7, #32]
20001c44:	1ad3      	subs	r3, r2, r3
20001c46:	041b      	lsls	r3, r3, #16
20001c48:	6839      	ldr	r1, [r7, #0]
20001c4a:	69fa      	ldr	r2, [r7, #28]
20001c4c:	1a8a      	subs	r2, r1, r2
20001c4e:	4313      	orrs	r3, r2
}
20001c50:	4618      	mov	r0, r3
20001c52:	3740      	adds	r7, #64	@ 0x40
20001c54:	46bd      	mov	sp, r7
20001c56:	bd80      	pop	{r7, pc}
20001c58:	2000d834 	.word	0x2000d834
20001c5c:	2000d878 	.word	0x2000d878

20001c60 <DAP_Dummy_Transfer>:
// Process Dummy Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Dummy_Transfer(const uint8_t *request, uint8_t *response) {
20001c60:	b480      	push	{r7}
20001c62:	b087      	sub	sp, #28
20001c64:	af00      	add	r7, sp, #0
20001c66:	6078      	str	r0, [r7, #4]
20001c68:	6039      	str	r1, [r7, #0]
  const
  uint8_t  *request_head;
  uint32_t  request_count;
  uint32_t  request_value;

  request_head  =  request;
20001c6a:	687b      	ldr	r3, [r7, #4]
20001c6c:	613b      	str	r3, [r7, #16]

  request++;            // Ignore DAP index
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	3301      	adds	r3, #1
20001c72:	607b      	str	r3, [r7, #4]

  request_count = *request++;
20001c74:	687b      	ldr	r3, [r7, #4]
20001c76:	1c5a      	adds	r2, r3, #1
20001c78:	607a      	str	r2, [r7, #4]
20001c7a:	781b      	ldrb	r3, [r3, #0]
20001c7c:	617b      	str	r3, [r7, #20]

  for (; request_count != 0U; request_count--) {
20001c7e:	e018      	b.n	20001cb2 <DAP_Dummy_Transfer+0x52>
    // Process dummy requests
    request_value = *request++;
20001c80:	687b      	ldr	r3, [r7, #4]
20001c82:	1c5a      	adds	r2, r3, #1
20001c84:	607a      	str	r2, [r7, #4]
20001c86:	781b      	ldrb	r3, [r3, #0]
20001c88:	60fb      	str	r3, [r7, #12]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001c8a:	68fb      	ldr	r3, [r7, #12]
20001c8c:	f003 0302 	and.w	r3, r3, #2
20001c90:	2b00      	cmp	r3, #0
20001c92:	d008      	beq.n	20001ca6 <DAP_Dummy_Transfer+0x46>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
20001c94:	68fb      	ldr	r3, [r7, #12]
20001c96:	f003 0310 	and.w	r3, r3, #16
20001c9a:	2b00      	cmp	r3, #0
20001c9c:	d006      	beq.n	20001cac <DAP_Dummy_Transfer+0x4c>
        // Read with value match
        request += 4;
20001c9e:	687b      	ldr	r3, [r7, #4]
20001ca0:	3304      	adds	r3, #4
20001ca2:	607b      	str	r3, [r7, #4]
20001ca4:	e002      	b.n	20001cac <DAP_Dummy_Transfer+0x4c>
      }
    } else {
      // Write register
      request += 4;
20001ca6:	687b      	ldr	r3, [r7, #4]
20001ca8:	3304      	adds	r3, #4
20001caa:	607b      	str	r3, [r7, #4]
  for (; request_count != 0U; request_count--) {
20001cac:	697b      	ldr	r3, [r7, #20]
20001cae:	3b01      	subs	r3, #1
20001cb0:	617b      	str	r3, [r7, #20]
20001cb2:	697b      	ldr	r3, [r7, #20]
20001cb4:	2b00      	cmp	r3, #0
20001cb6:	d1e3      	bne.n	20001c80 <DAP_Dummy_Transfer+0x20>
    }
  }

  *(response+0) = 0U;   // Response count
20001cb8:	683b      	ldr	r3, [r7, #0]
20001cba:	2200      	movs	r2, #0
20001cbc:	701a      	strb	r2, [r3, #0]
  *(response+1) = 0U;   // Response value
20001cbe:	683b      	ldr	r3, [r7, #0]
20001cc0:	3301      	adds	r3, #1
20001cc2:	2200      	movs	r2, #0
20001cc4:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | 2U);
20001cc6:	687a      	ldr	r2, [r7, #4]
20001cc8:	693b      	ldr	r3, [r7, #16]
20001cca:	1ad3      	subs	r3, r2, r3
20001ccc:	041b      	lsls	r3, r3, #16
20001cce:	f043 0302 	orr.w	r3, r3, #2
}
20001cd2:	4618      	mov	r0, r3
20001cd4:	371c      	adds	r7, #28
20001cd6:	46bd      	mov	sp, r7
20001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cdc:	4770      	bx	lr
	...

20001ce0 <DAP_Transfer>:
// Process Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Transfer(const uint8_t *request, uint8_t *response) {
20001ce0:	b580      	push	{r7, lr}
20001ce2:	b084      	sub	sp, #16
20001ce4:	af00      	add	r7, sp, #0
20001ce6:	6078      	str	r0, [r7, #4]
20001ce8:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
20001cea:	4b0f      	ldr	r3, [pc, #60]	@ (20001d28 <DAP_Transfer+0x48>)
20001cec:	781b      	ldrb	r3, [r3, #0]
20001cee:	2b01      	cmp	r3, #1
20001cf0:	d002      	beq.n	20001cf8 <DAP_Transfer+0x18>
20001cf2:	2b02      	cmp	r3, #2
20001cf4:	d006      	beq.n	20001d04 <DAP_Transfer+0x24>
20001cf6:	e00b      	b.n	20001d10 <DAP_Transfer+0x30>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      num = DAP_SWD_Transfer(request, response);
20001cf8:	6839      	ldr	r1, [r7, #0]
20001cfa:	6878      	ldr	r0, [r7, #4]
20001cfc:	f7ff f99a 	bl	20001034 <DAP_SWD_Transfer>
20001d00:	60f8      	str	r0, [r7, #12]
      break;
20001d02:	e00b      	b.n	20001d1c <DAP_Transfer+0x3c>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_Transfer(request, response);
20001d04:	6839      	ldr	r1, [r7, #0]
20001d06:	6878      	ldr	r0, [r7, #4]
20001d08:	f7ff fcac 	bl	20001664 <DAP_JTAG_Transfer>
20001d0c:	60f8      	str	r0, [r7, #12]
      break;
20001d0e:	e005      	b.n	20001d1c <DAP_Transfer+0x3c>
#endif
    default:
      num = DAP_Dummy_Transfer(request, response);
20001d10:	6839      	ldr	r1, [r7, #0]
20001d12:	6878      	ldr	r0, [r7, #4]
20001d14:	f7ff ffa4 	bl	20001c60 <DAP_Dummy_Transfer>
20001d18:	60f8      	str	r0, [r7, #12]
      break;
20001d1a:	bf00      	nop
  }

  return (num);
20001d1c:	68fb      	ldr	r3, [r7, #12]
}
20001d1e:	4618      	mov	r0, r3
20001d20:	3710      	adds	r7, #16
20001d22:	46bd      	mov	sp, r7
20001d24:	bd80      	pop	{r7, pc}
20001d26:	bf00      	nop
20001d28:	2000d834 	.word	0x2000d834

20001d2c <DAP_SWD_TransferBlock>:
// Process SWD Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_SWD != 0)
static uint32_t DAP_SWD_TransferBlock(const uint8_t *request, uint8_t *response) {
20001d2c:	b580      	push	{r7, lr}
20001d2e:	b08a      	sub	sp, #40	@ 0x28
20001d30:	af00      	add	r7, sp, #0
20001d32:	6078      	str	r0, [r7, #4]
20001d34:	6039      	str	r1, [r7, #0]
  uint32_t  response_value;
  uint8_t  *response_head;
  uint32_t  retry;
  uint32_t  data;

  response_count = 0U;
20001d36:	2300      	movs	r3, #0
20001d38:	61fb      	str	r3, [r7, #28]
  response_value = 0U;
20001d3a:	2300      	movs	r3, #0
20001d3c:	61bb      	str	r3, [r7, #24]
  response_head  = response;
20001d3e:	683b      	ldr	r3, [r7, #0]
20001d40:	613b      	str	r3, [r7, #16]
  response      += 3;
20001d42:	683b      	ldr	r3, [r7, #0]
20001d44:	3303      	adds	r3, #3
20001d46:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001d48:	4b7c      	ldr	r3, [pc, #496]	@ (20001f3c <DAP_SWD_TransferBlock+0x210>)
20001d4a:	2200      	movs	r2, #0
20001d4c:	701a      	strb	r2, [r3, #0]

  request++;            // Ignore DAP index
20001d4e:	687b      	ldr	r3, [r7, #4]
20001d50:	3301      	adds	r3, #1
20001d52:	607b      	str	r3, [r7, #4]

  request_count = (uint32_t)(*(request+0) << 0) |
20001d54:	687b      	ldr	r3, [r7, #4]
20001d56:	781b      	ldrb	r3, [r3, #0]
20001d58:	461a      	mov	r2, r3
                  (uint32_t)(*(request+1) << 8);
20001d5a:	687b      	ldr	r3, [r7, #4]
20001d5c:	3301      	adds	r3, #1
20001d5e:	781b      	ldrb	r3, [r3, #0]
20001d60:	021b      	lsls	r3, r3, #8
  request_count = (uint32_t)(*(request+0) << 0) |
20001d62:	4313      	orrs	r3, r2
20001d64:	627b      	str	r3, [r7, #36]	@ 0x24
  request += 2;
20001d66:	687b      	ldr	r3, [r7, #4]
20001d68:	3302      	adds	r3, #2
20001d6a:	607b      	str	r3, [r7, #4]
  if (request_count == 0U) {
20001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001d6e:	2b00      	cmp	r3, #0
20001d70:	f000 80c4 	beq.w	20001efc <DAP_SWD_TransferBlock+0x1d0>
    goto end;
  }

  request_value = *request++;
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	1c5a      	adds	r2, r3, #1
20001d78:	607a      	str	r2, [r7, #4]
20001d7a:	781b      	ldrb	r3, [r3, #0]
20001d7c:	623b      	str	r3, [r7, #32]
  if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001d7e:	6a3b      	ldr	r3, [r7, #32]
20001d80:	f003 0302 	and.w	r3, r3, #2
20001d84:	2b00      	cmp	r3, #0
20001d86:	f000 809d 	beq.w	20001ec4 <DAP_SWD_TransferBlock+0x198>
    // Read register block
    if ((request_value & DAP_TRANSFER_APnDP) != 0U) {
20001d8a:	6a3b      	ldr	r3, [r7, #32]
20001d8c:	f003 0301 	and.w	r3, r3, #1
20001d90:	2b00      	cmp	r3, #0
20001d92:	d05d      	beq.n	20001e50 <DAP_SWD_TransferBlock+0x124>
      // Post AP read
      retry = DAP_Data.transfer.retry_count;
20001d94:	4b6a      	ldr	r3, [pc, #424]	@ (20001f40 <DAP_SWD_TransferBlock+0x214>)
20001d96:	8a1b      	ldrh	r3, [r3, #16]
20001d98:	617b      	str	r3, [r7, #20]
      do {
        response_value = SWD_Transfer(request_value, NULL);
20001d9a:	2100      	movs	r1, #0
20001d9c:	6a38      	ldr	r0, [r7, #32]
20001d9e:	f002 fc4f 	bl	20004640 <SWD_Transfer>
20001da2:	4603      	mov	r3, r0
20001da4:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001da6:	69bb      	ldr	r3, [r7, #24]
20001da8:	2b02      	cmp	r3, #2
20001daa:	d109      	bne.n	20001dc0 <DAP_SWD_TransferBlock+0x94>
20001dac:	697b      	ldr	r3, [r7, #20]
20001dae:	1e5a      	subs	r2, r3, #1
20001db0:	617a      	str	r2, [r7, #20]
20001db2:	2b00      	cmp	r3, #0
20001db4:	d004      	beq.n	20001dc0 <DAP_SWD_TransferBlock+0x94>
20001db6:	4b61      	ldr	r3, [pc, #388]	@ (20001f3c <DAP_SWD_TransferBlock+0x210>)
20001db8:	781b      	ldrb	r3, [r3, #0]
20001dba:	b2db      	uxtb	r3, r3
20001dbc:	2b00      	cmp	r3, #0
20001dbe:	d0ec      	beq.n	20001d9a <DAP_SWD_TransferBlock+0x6e>
      if (response_value != DAP_TRANSFER_OK) {
20001dc0:	69bb      	ldr	r3, [r7, #24]
20001dc2:	2b01      	cmp	r3, #1
20001dc4:	f040 809c 	bne.w	20001f00 <DAP_SWD_TransferBlock+0x1d4>
        goto end;
      }
    }
    while (request_count--) {
20001dc8:	e042      	b.n	20001e50 <DAP_SWD_TransferBlock+0x124>
      // Read DP/AP register
      if ((request_count == 0U) && ((request_value & DAP_TRANSFER_APnDP) != 0U)) {
20001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001dcc:	2b00      	cmp	r3, #0
20001dce:	d106      	bne.n	20001dde <DAP_SWD_TransferBlock+0xb2>
20001dd0:	6a3b      	ldr	r3, [r7, #32]
20001dd2:	f003 0301 	and.w	r3, r3, #1
20001dd6:	2b00      	cmp	r3, #0
20001dd8:	d001      	beq.n	20001dde <DAP_SWD_TransferBlock+0xb2>
        // Last AP read
        request_value = DP_RDBUFF | DAP_TRANSFER_RnW;
20001dda:	230e      	movs	r3, #14
20001ddc:	623b      	str	r3, [r7, #32]
      }
      retry = DAP_Data.transfer.retry_count;
20001dde:	4b58      	ldr	r3, [pc, #352]	@ (20001f40 <DAP_SWD_TransferBlock+0x214>)
20001de0:	8a1b      	ldrh	r3, [r3, #16]
20001de2:	617b      	str	r3, [r7, #20]
      do {
        response_value = SWD_Transfer(request_value, &data);
20001de4:	f107 030c 	add.w	r3, r7, #12
20001de8:	4619      	mov	r1, r3
20001dea:	6a38      	ldr	r0, [r7, #32]
20001dec:	f002 fc28 	bl	20004640 <SWD_Transfer>
20001df0:	4603      	mov	r3, r0
20001df2:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001df4:	69bb      	ldr	r3, [r7, #24]
20001df6:	2b02      	cmp	r3, #2
20001df8:	d109      	bne.n	20001e0e <DAP_SWD_TransferBlock+0xe2>
20001dfa:	697b      	ldr	r3, [r7, #20]
20001dfc:	1e5a      	subs	r2, r3, #1
20001dfe:	617a      	str	r2, [r7, #20]
20001e00:	2b00      	cmp	r3, #0
20001e02:	d004      	beq.n	20001e0e <DAP_SWD_TransferBlock+0xe2>
20001e04:	4b4d      	ldr	r3, [pc, #308]	@ (20001f3c <DAP_SWD_TransferBlock+0x210>)
20001e06:	781b      	ldrb	r3, [r3, #0]
20001e08:	b2db      	uxtb	r3, r3
20001e0a:	2b00      	cmp	r3, #0
20001e0c:	d0ea      	beq.n	20001de4 <DAP_SWD_TransferBlock+0xb8>
      if (response_value != DAP_TRANSFER_OK) {
20001e0e:	69bb      	ldr	r3, [r7, #24]
20001e10:	2b01      	cmp	r3, #1
20001e12:	d177      	bne.n	20001f04 <DAP_SWD_TransferBlock+0x1d8>
        goto end;
      }
      // Store data
      *response++ = (uint8_t) data;
20001e14:	68f9      	ldr	r1, [r7, #12]
20001e16:	683b      	ldr	r3, [r7, #0]
20001e18:	1c5a      	adds	r2, r3, #1
20001e1a:	603a      	str	r2, [r7, #0]
20001e1c:	b2ca      	uxtb	r2, r1
20001e1e:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
20001e20:	68fb      	ldr	r3, [r7, #12]
20001e22:	0a19      	lsrs	r1, r3, #8
20001e24:	683b      	ldr	r3, [r7, #0]
20001e26:	1c5a      	adds	r2, r3, #1
20001e28:	603a      	str	r2, [r7, #0]
20001e2a:	b2ca      	uxtb	r2, r1
20001e2c:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
20001e2e:	68fb      	ldr	r3, [r7, #12]
20001e30:	0c19      	lsrs	r1, r3, #16
20001e32:	683b      	ldr	r3, [r7, #0]
20001e34:	1c5a      	adds	r2, r3, #1
20001e36:	603a      	str	r2, [r7, #0]
20001e38:	b2ca      	uxtb	r2, r1
20001e3a:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20001e3c:	68fb      	ldr	r3, [r7, #12]
20001e3e:	0e19      	lsrs	r1, r3, #24
20001e40:	683b      	ldr	r3, [r7, #0]
20001e42:	1c5a      	adds	r2, r3, #1
20001e44:	603a      	str	r2, [r7, #0]
20001e46:	b2ca      	uxtb	r2, r1
20001e48:	701a      	strb	r2, [r3, #0]
      response_count++;
20001e4a:	69fb      	ldr	r3, [r7, #28]
20001e4c:	3301      	adds	r3, #1
20001e4e:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
20001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001e52:	1e5a      	subs	r2, r3, #1
20001e54:	627a      	str	r2, [r7, #36]	@ 0x24
20001e56:	2b00      	cmp	r3, #0
20001e58:	d1b7      	bne.n	20001dca <DAP_SWD_TransferBlock+0x9e>
20001e5a:	e058      	b.n	20001f0e <DAP_SWD_TransferBlock+0x1e2>
    }
  } else {
    // Write register block
    while (request_count--) {
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001e5c:	687b      	ldr	r3, [r7, #4]
20001e5e:	781b      	ldrb	r3, [r3, #0]
20001e60:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
20001e62:	687b      	ldr	r3, [r7, #4]
20001e64:	3301      	adds	r3, #1
20001e66:	781b      	ldrb	r3, [r3, #0]
20001e68:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001e6a:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001e6c:	687b      	ldr	r3, [r7, #4]
20001e6e:	3302      	adds	r3, #2
20001e70:	781b      	ldrb	r3, [r3, #0]
20001e72:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
20001e74:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
20001e76:	687b      	ldr	r3, [r7, #4]
20001e78:	3303      	adds	r3, #3
20001e7a:	781b      	ldrb	r3, [r3, #0]
20001e7c:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001e7e:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
20001e80:	60fb      	str	r3, [r7, #12]
      request += 4;
20001e82:	687b      	ldr	r3, [r7, #4]
20001e84:	3304      	adds	r3, #4
20001e86:	607b      	str	r3, [r7, #4]
      // Write DP/AP register
      retry = DAP_Data.transfer.retry_count;
20001e88:	4b2d      	ldr	r3, [pc, #180]	@ (20001f40 <DAP_SWD_TransferBlock+0x214>)
20001e8a:	8a1b      	ldrh	r3, [r3, #16]
20001e8c:	617b      	str	r3, [r7, #20]
      do {
        response_value = SWD_Transfer(request_value, &data);
20001e8e:	f107 030c 	add.w	r3, r7, #12
20001e92:	4619      	mov	r1, r3
20001e94:	6a38      	ldr	r0, [r7, #32]
20001e96:	f002 fbd3 	bl	20004640 <SWD_Transfer>
20001e9a:	4603      	mov	r3, r0
20001e9c:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001e9e:	69bb      	ldr	r3, [r7, #24]
20001ea0:	2b02      	cmp	r3, #2
20001ea2:	d109      	bne.n	20001eb8 <DAP_SWD_TransferBlock+0x18c>
20001ea4:	697b      	ldr	r3, [r7, #20]
20001ea6:	1e5a      	subs	r2, r3, #1
20001ea8:	617a      	str	r2, [r7, #20]
20001eaa:	2b00      	cmp	r3, #0
20001eac:	d004      	beq.n	20001eb8 <DAP_SWD_TransferBlock+0x18c>
20001eae:	4b23      	ldr	r3, [pc, #140]	@ (20001f3c <DAP_SWD_TransferBlock+0x210>)
20001eb0:	781b      	ldrb	r3, [r3, #0]
20001eb2:	b2db      	uxtb	r3, r3
20001eb4:	2b00      	cmp	r3, #0
20001eb6:	d0ea      	beq.n	20001e8e <DAP_SWD_TransferBlock+0x162>
      if (response_value != DAP_TRANSFER_OK) {
20001eb8:	69bb      	ldr	r3, [r7, #24]
20001eba:	2b01      	cmp	r3, #1
20001ebc:	d124      	bne.n	20001f08 <DAP_SWD_TransferBlock+0x1dc>
        goto end;
      }
      response_count++;
20001ebe:	69fb      	ldr	r3, [r7, #28]
20001ec0:	3301      	adds	r3, #1
20001ec2:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
20001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001ec6:	1e5a      	subs	r2, r3, #1
20001ec8:	627a      	str	r2, [r7, #36]	@ 0x24
20001eca:	2b00      	cmp	r3, #0
20001ecc:	d1c6      	bne.n	20001e5c <DAP_SWD_TransferBlock+0x130>
    }
    // Check last write
    retry = DAP_Data.transfer.retry_count;
20001ece:	4b1c      	ldr	r3, [pc, #112]	@ (20001f40 <DAP_SWD_TransferBlock+0x214>)
20001ed0:	8a1b      	ldrh	r3, [r3, #16]
20001ed2:	617b      	str	r3, [r7, #20]
    do {
      response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
20001ed4:	2100      	movs	r1, #0
20001ed6:	200e      	movs	r0, #14
20001ed8:	f002 fbb2 	bl	20004640 <SWD_Transfer>
20001edc:	4603      	mov	r3, r0
20001ede:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001ee0:	69bb      	ldr	r3, [r7, #24]
20001ee2:	2b02      	cmp	r3, #2
20001ee4:	d112      	bne.n	20001f0c <DAP_SWD_TransferBlock+0x1e0>
20001ee6:	697b      	ldr	r3, [r7, #20]
20001ee8:	1e5a      	subs	r2, r3, #1
20001eea:	617a      	str	r2, [r7, #20]
20001eec:	2b00      	cmp	r3, #0
20001eee:	d00d      	beq.n	20001f0c <DAP_SWD_TransferBlock+0x1e0>
20001ef0:	4b12      	ldr	r3, [pc, #72]	@ (20001f3c <DAP_SWD_TransferBlock+0x210>)
20001ef2:	781b      	ldrb	r3, [r3, #0]
20001ef4:	b2db      	uxtb	r3, r3
20001ef6:	2b00      	cmp	r3, #0
20001ef8:	d0ec      	beq.n	20001ed4 <DAP_SWD_TransferBlock+0x1a8>
  }

end:
20001efa:	e007      	b.n	20001f0c <DAP_SWD_TransferBlock+0x1e0>
    goto end;
20001efc:	bf00      	nop
20001efe:	e006      	b.n	20001f0e <DAP_SWD_TransferBlock+0x1e2>
        goto end;
20001f00:	bf00      	nop
20001f02:	e004      	b.n	20001f0e <DAP_SWD_TransferBlock+0x1e2>
        goto end;
20001f04:	bf00      	nop
20001f06:	e002      	b.n	20001f0e <DAP_SWD_TransferBlock+0x1e2>
        goto end;
20001f08:	bf00      	nop
20001f0a:	e000      	b.n	20001f0e <DAP_SWD_TransferBlock+0x1e2>
end:
20001f0c:	bf00      	nop
  *(response_head+0) = (uint8_t)(response_count >> 0);
20001f0e:	69fb      	ldr	r3, [r7, #28]
20001f10:	b2da      	uxtb	r2, r3
20001f12:	693b      	ldr	r3, [r7, #16]
20001f14:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)(response_count >> 8);
20001f16:	69fb      	ldr	r3, [r7, #28]
20001f18:	0a1a      	lsrs	r2, r3, #8
20001f1a:	693b      	ldr	r3, [r7, #16]
20001f1c:	3301      	adds	r3, #1
20001f1e:	b2d2      	uxtb	r2, r2
20001f20:	701a      	strb	r2, [r3, #0]
  *(response_head+2) = (uint8_t) response_value;
20001f22:	693b      	ldr	r3, [r7, #16]
20001f24:	3302      	adds	r3, #2
20001f26:	69ba      	ldr	r2, [r7, #24]
20001f28:	b2d2      	uxtb	r2, r2
20001f2a:	701a      	strb	r2, [r3, #0]

  return ((uint32_t)(response - response_head));
20001f2c:	683a      	ldr	r2, [r7, #0]
20001f2e:	693b      	ldr	r3, [r7, #16]
20001f30:	1ad3      	subs	r3, r2, r3
}
20001f32:	4618      	mov	r0, r3
20001f34:	3728      	adds	r7, #40	@ 0x28
20001f36:	46bd      	mov	sp, r7
20001f38:	bd80      	pop	{r7, pc}
20001f3a:	bf00      	nop
20001f3c:	2000d878 	.word	0x2000d878
20001f40:	2000d834 	.word	0x2000d834

20001f44 <DAP_JTAG_TransferBlock>:
// Process JTAG Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_TransferBlock(const uint8_t *request, uint8_t *response) {
20001f44:	b580      	push	{r7, lr}
20001f46:	b08a      	sub	sp, #40	@ 0x28
20001f48:	af00      	add	r7, sp, #0
20001f4a:	6078      	str	r0, [r7, #4]
20001f4c:	6039      	str	r1, [r7, #0]
  uint8_t  *response_head;
  uint32_t  retry;
  uint32_t  data;
  uint32_t  ir;

  response_count = 0U;
20001f4e:	2300      	movs	r3, #0
20001f50:	61fb      	str	r3, [r7, #28]
  response_value = 0U;
20001f52:	2300      	movs	r3, #0
20001f54:	61bb      	str	r3, [r7, #24]
  response_head  = response;
20001f56:	683b      	ldr	r3, [r7, #0]
20001f58:	613b      	str	r3, [r7, #16]
  response      += 3;
20001f5a:	683b      	ldr	r3, [r7, #0]
20001f5c:	3303      	adds	r3, #3
20001f5e:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001f60:	4b89      	ldr	r3, [pc, #548]	@ (20002188 <DAP_JTAG_TransferBlock+0x244>)
20001f62:	2200      	movs	r2, #0
20001f64:	701a      	strb	r2, [r3, #0]

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20001f66:	687b      	ldr	r3, [r7, #4]
20001f68:	1c5a      	adds	r2, r3, #1
20001f6a:	607a      	str	r2, [r7, #4]
20001f6c:	781a      	ldrb	r2, [r3, #0]
20001f6e:	4b87      	ldr	r3, [pc, #540]	@ (2000218c <DAP_JTAG_TransferBlock+0x248>)
20001f70:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20001f72:	4b86      	ldr	r3, [pc, #536]	@ (2000218c <DAP_JTAG_TransferBlock+0x248>)
20001f74:	7eda      	ldrb	r2, [r3, #27]
20001f76:	4b85      	ldr	r3, [pc, #532]	@ (2000218c <DAP_JTAG_TransferBlock+0x248>)
20001f78:	7e9b      	ldrb	r3, [r3, #26]
20001f7a:	429a      	cmp	r2, r3
20001f7c:	f080 80e2 	bcs.w	20002144 <DAP_JTAG_TransferBlock+0x200>
    goto end;
  }

  request_count = (uint32_t)(*(request+0) << 0) |
20001f80:	687b      	ldr	r3, [r7, #4]
20001f82:	781b      	ldrb	r3, [r3, #0]
20001f84:	461a      	mov	r2, r3
                  (uint32_t)(*(request+1) << 8);
20001f86:	687b      	ldr	r3, [r7, #4]
20001f88:	3301      	adds	r3, #1
20001f8a:	781b      	ldrb	r3, [r3, #0]
20001f8c:	021b      	lsls	r3, r3, #8
  request_count = (uint32_t)(*(request+0) << 0) |
20001f8e:	4313      	orrs	r3, r2
20001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  request += 2;
20001f92:	687b      	ldr	r3, [r7, #4]
20001f94:	3302      	adds	r3, #2
20001f96:	607b      	str	r3, [r7, #4]
  if (request_count == 0U) {
20001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001f9a:	2b00      	cmp	r3, #0
20001f9c:	f000 80d4 	beq.w	20002148 <DAP_JTAG_TransferBlock+0x204>
    goto end;
  }

  request_value = *request++;
20001fa0:	687b      	ldr	r3, [r7, #4]
20001fa2:	1c5a      	adds	r2, r3, #1
20001fa4:	607a      	str	r2, [r7, #4]
20001fa6:	781b      	ldrb	r3, [r3, #0]
20001fa8:	623b      	str	r3, [r7, #32]

  // Select JTAG chain
  ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
20001faa:	6a3b      	ldr	r3, [r7, #32]
20001fac:	f003 0301 	and.w	r3, r3, #1
20001fb0:	2b00      	cmp	r3, #0
20001fb2:	d001      	beq.n	20001fb8 <DAP_JTAG_TransferBlock+0x74>
20001fb4:	230b      	movs	r3, #11
20001fb6:	e000      	b.n	20001fba <DAP_JTAG_TransferBlock+0x76>
20001fb8:	230a      	movs	r3, #10
20001fba:	60fb      	str	r3, [r7, #12]
  JTAG_IR(ir);
20001fbc:	68f8      	ldr	r0, [r7, #12]
20001fbe:	f001 ff59 	bl	20003e74 <JTAG_IR>

  if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001fc2:	6a3b      	ldr	r3, [r7, #32]
20001fc4:	f003 0302 	and.w	r3, r3, #2
20001fc8:	2b00      	cmp	r3, #0
20001fca:	f000 8099 	beq.w	20002100 <DAP_JTAG_TransferBlock+0x1bc>
    // Post read
    retry = DAP_Data.transfer.retry_count;
20001fce:	4b6f      	ldr	r3, [pc, #444]	@ (2000218c <DAP_JTAG_TransferBlock+0x248>)
20001fd0:	8a1b      	ldrh	r3, [r3, #16]
20001fd2:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(request_value, NULL);
20001fd4:	2100      	movs	r1, #0
20001fd6:	6a38      	ldr	r0, [r7, #32]
20001fd8:	f001 ff62 	bl	20003ea0 <JTAG_Transfer>
20001fdc:	4603      	mov	r3, r0
20001fde:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001fe0:	69bb      	ldr	r3, [r7, #24]
20001fe2:	2b02      	cmp	r3, #2
20001fe4:	d109      	bne.n	20001ffa <DAP_JTAG_TransferBlock+0xb6>
20001fe6:	697b      	ldr	r3, [r7, #20]
20001fe8:	1e5a      	subs	r2, r3, #1
20001fea:	617a      	str	r2, [r7, #20]
20001fec:	2b00      	cmp	r3, #0
20001fee:	d004      	beq.n	20001ffa <DAP_JTAG_TransferBlock+0xb6>
20001ff0:	4b65      	ldr	r3, [pc, #404]	@ (20002188 <DAP_JTAG_TransferBlock+0x244>)
20001ff2:	781b      	ldrb	r3, [r3, #0]
20001ff4:	b2db      	uxtb	r3, r3
20001ff6:	2b00      	cmp	r3, #0
20001ff8:	d0ec      	beq.n	20001fd4 <DAP_JTAG_TransferBlock+0x90>
    if (response_value != DAP_TRANSFER_OK) {
20001ffa:	69bb      	ldr	r3, [r7, #24]
20001ffc:	2b01      	cmp	r3, #1
20001ffe:	f040 80a5 	bne.w	2000214c <DAP_JTAG_TransferBlock+0x208>
      goto end;
    }
    // Read register block
    while (request_count--) {
20002002:	e043      	b.n	2000208c <DAP_JTAG_TransferBlock+0x148>
      // Read DP/AP register
      if (request_count == 0U) {
20002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002006:	2b00      	cmp	r3, #0
20002008:	d107      	bne.n	2000201a <DAP_JTAG_TransferBlock+0xd6>
        // Last read
        if (ir != JTAG_DPACC) {
2000200a:	68fb      	ldr	r3, [r7, #12]
2000200c:	2b0a      	cmp	r3, #10
2000200e:	d002      	beq.n	20002016 <DAP_JTAG_TransferBlock+0xd2>
          JTAG_IR(JTAG_DPACC);
20002010:	200a      	movs	r0, #10
20002012:	f001 ff2f 	bl	20003e74 <JTAG_IR>
        }
        request_value = DP_RDBUFF | DAP_TRANSFER_RnW;
20002016:	230e      	movs	r3, #14
20002018:	623b      	str	r3, [r7, #32]
      }
      retry = DAP_Data.transfer.retry_count;
2000201a:	4b5c      	ldr	r3, [pc, #368]	@ (2000218c <DAP_JTAG_TransferBlock+0x248>)
2000201c:	8a1b      	ldrh	r3, [r3, #16]
2000201e:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
20002020:	f107 0308 	add.w	r3, r7, #8
20002024:	4619      	mov	r1, r3
20002026:	6a38      	ldr	r0, [r7, #32]
20002028:	f001 ff3a 	bl	20003ea0 <JTAG_Transfer>
2000202c:	4603      	mov	r3, r0
2000202e:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20002030:	69bb      	ldr	r3, [r7, #24]
20002032:	2b02      	cmp	r3, #2
20002034:	d109      	bne.n	2000204a <DAP_JTAG_TransferBlock+0x106>
20002036:	697b      	ldr	r3, [r7, #20]
20002038:	1e5a      	subs	r2, r3, #1
2000203a:	617a      	str	r2, [r7, #20]
2000203c:	2b00      	cmp	r3, #0
2000203e:	d004      	beq.n	2000204a <DAP_JTAG_TransferBlock+0x106>
20002040:	4b51      	ldr	r3, [pc, #324]	@ (20002188 <DAP_JTAG_TransferBlock+0x244>)
20002042:	781b      	ldrb	r3, [r3, #0]
20002044:	b2db      	uxtb	r3, r3
20002046:	2b00      	cmp	r3, #0
20002048:	d0ea      	beq.n	20002020 <DAP_JTAG_TransferBlock+0xdc>
      if (response_value != DAP_TRANSFER_OK) {
2000204a:	69bb      	ldr	r3, [r7, #24]
2000204c:	2b01      	cmp	r3, #1
2000204e:	d17f      	bne.n	20002150 <DAP_JTAG_TransferBlock+0x20c>
        goto end;
      }
      // Store data
      *response++ = (uint8_t) data;
20002050:	68b9      	ldr	r1, [r7, #8]
20002052:	683b      	ldr	r3, [r7, #0]
20002054:	1c5a      	adds	r2, r3, #1
20002056:	603a      	str	r2, [r7, #0]
20002058:	b2ca      	uxtb	r2, r1
2000205a:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
2000205c:	68bb      	ldr	r3, [r7, #8]
2000205e:	0a19      	lsrs	r1, r3, #8
20002060:	683b      	ldr	r3, [r7, #0]
20002062:	1c5a      	adds	r2, r3, #1
20002064:	603a      	str	r2, [r7, #0]
20002066:	b2ca      	uxtb	r2, r1
20002068:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
2000206a:	68bb      	ldr	r3, [r7, #8]
2000206c:	0c19      	lsrs	r1, r3, #16
2000206e:	683b      	ldr	r3, [r7, #0]
20002070:	1c5a      	adds	r2, r3, #1
20002072:	603a      	str	r2, [r7, #0]
20002074:	b2ca      	uxtb	r2, r1
20002076:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20002078:	68bb      	ldr	r3, [r7, #8]
2000207a:	0e19      	lsrs	r1, r3, #24
2000207c:	683b      	ldr	r3, [r7, #0]
2000207e:	1c5a      	adds	r2, r3, #1
20002080:	603a      	str	r2, [r7, #0]
20002082:	b2ca      	uxtb	r2, r1
20002084:	701a      	strb	r2, [r3, #0]
      response_count++;
20002086:	69fb      	ldr	r3, [r7, #28]
20002088:	3301      	adds	r3, #1
2000208a:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
2000208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000208e:	1e5a      	subs	r2, r3, #1
20002090:	627a      	str	r2, [r7, #36]	@ 0x24
20002092:	2b00      	cmp	r3, #0
20002094:	d1b6      	bne.n	20002004 <DAP_JTAG_TransferBlock+0xc0>
20002096:	e060      	b.n	2000215a <DAP_JTAG_TransferBlock+0x216>
    }
  } else {
    // Write register block
    while (request_count--) {
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20002098:	687b      	ldr	r3, [r7, #4]
2000209a:	781b      	ldrb	r3, [r3, #0]
2000209c:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000209e:	687b      	ldr	r3, [r7, #4]
200020a0:	3301      	adds	r3, #1
200020a2:	781b      	ldrb	r3, [r3, #0]
200020a4:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
200020a6:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
200020a8:	687b      	ldr	r3, [r7, #4]
200020aa:	3302      	adds	r3, #2
200020ac:	781b      	ldrb	r3, [r3, #0]
200020ae:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
200020b0:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
200020b2:	687b      	ldr	r3, [r7, #4]
200020b4:	3303      	adds	r3, #3
200020b6:	781b      	ldrb	r3, [r3, #0]
200020b8:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
200020ba:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
200020bc:	60bb      	str	r3, [r7, #8]
      request += 4;
200020be:	687b      	ldr	r3, [r7, #4]
200020c0:	3304      	adds	r3, #4
200020c2:	607b      	str	r3, [r7, #4]
      // Write DP/AP register
      retry = DAP_Data.transfer.retry_count;
200020c4:	4b31      	ldr	r3, [pc, #196]	@ (2000218c <DAP_JTAG_TransferBlock+0x248>)
200020c6:	8a1b      	ldrh	r3, [r3, #16]
200020c8:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
200020ca:	f107 0308 	add.w	r3, r7, #8
200020ce:	4619      	mov	r1, r3
200020d0:	6a38      	ldr	r0, [r7, #32]
200020d2:	f001 fee5 	bl	20003ea0 <JTAG_Transfer>
200020d6:	4603      	mov	r3, r0
200020d8:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200020da:	69bb      	ldr	r3, [r7, #24]
200020dc:	2b02      	cmp	r3, #2
200020de:	d109      	bne.n	200020f4 <DAP_JTAG_TransferBlock+0x1b0>
200020e0:	697b      	ldr	r3, [r7, #20]
200020e2:	1e5a      	subs	r2, r3, #1
200020e4:	617a      	str	r2, [r7, #20]
200020e6:	2b00      	cmp	r3, #0
200020e8:	d004      	beq.n	200020f4 <DAP_JTAG_TransferBlock+0x1b0>
200020ea:	4b27      	ldr	r3, [pc, #156]	@ (20002188 <DAP_JTAG_TransferBlock+0x244>)
200020ec:	781b      	ldrb	r3, [r3, #0]
200020ee:	b2db      	uxtb	r3, r3
200020f0:	2b00      	cmp	r3, #0
200020f2:	d0ea      	beq.n	200020ca <DAP_JTAG_TransferBlock+0x186>
      if (response_value != DAP_TRANSFER_OK) {
200020f4:	69bb      	ldr	r3, [r7, #24]
200020f6:	2b01      	cmp	r3, #1
200020f8:	d12c      	bne.n	20002154 <DAP_JTAG_TransferBlock+0x210>
        goto end;
      }
      response_count++;
200020fa:	69fb      	ldr	r3, [r7, #28]
200020fc:	3301      	adds	r3, #1
200020fe:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
20002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002102:	1e5a      	subs	r2, r3, #1
20002104:	627a      	str	r2, [r7, #36]	@ 0x24
20002106:	2b00      	cmp	r3, #0
20002108:	d1c6      	bne.n	20002098 <DAP_JTAG_TransferBlock+0x154>
    }
    // Check last write
    if (ir != JTAG_DPACC) {
2000210a:	68fb      	ldr	r3, [r7, #12]
2000210c:	2b0a      	cmp	r3, #10
2000210e:	d002      	beq.n	20002116 <DAP_JTAG_TransferBlock+0x1d2>
      JTAG_IR(JTAG_DPACC);
20002110:	200a      	movs	r0, #10
20002112:	f001 feaf 	bl	20003e74 <JTAG_IR>
    }
    retry = DAP_Data.transfer.retry_count;
20002116:	4b1d      	ldr	r3, [pc, #116]	@ (2000218c <DAP_JTAG_TransferBlock+0x248>)
20002118:	8a1b      	ldrh	r3, [r3, #16]
2000211a:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
2000211c:	2100      	movs	r1, #0
2000211e:	200e      	movs	r0, #14
20002120:	f001 febe 	bl	20003ea0 <JTAG_Transfer>
20002124:	4603      	mov	r3, r0
20002126:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20002128:	69bb      	ldr	r3, [r7, #24]
2000212a:	2b02      	cmp	r3, #2
2000212c:	d114      	bne.n	20002158 <DAP_JTAG_TransferBlock+0x214>
2000212e:	697b      	ldr	r3, [r7, #20]
20002130:	1e5a      	subs	r2, r3, #1
20002132:	617a      	str	r2, [r7, #20]
20002134:	2b00      	cmp	r3, #0
20002136:	d00f      	beq.n	20002158 <DAP_JTAG_TransferBlock+0x214>
20002138:	4b13      	ldr	r3, [pc, #76]	@ (20002188 <DAP_JTAG_TransferBlock+0x244>)
2000213a:	781b      	ldrb	r3, [r3, #0]
2000213c:	b2db      	uxtb	r3, r3
2000213e:	2b00      	cmp	r3, #0
20002140:	d0ec      	beq.n	2000211c <DAP_JTAG_TransferBlock+0x1d8>
  }

end:
20002142:	e009      	b.n	20002158 <DAP_JTAG_TransferBlock+0x214>
    goto end;
20002144:	bf00      	nop
20002146:	e008      	b.n	2000215a <DAP_JTAG_TransferBlock+0x216>
    goto end;
20002148:	bf00      	nop
2000214a:	e006      	b.n	2000215a <DAP_JTAG_TransferBlock+0x216>
      goto end;
2000214c:	bf00      	nop
2000214e:	e004      	b.n	2000215a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20002150:	bf00      	nop
20002152:	e002      	b.n	2000215a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20002154:	bf00      	nop
20002156:	e000      	b.n	2000215a <DAP_JTAG_TransferBlock+0x216>
end:
20002158:	bf00      	nop
  *(response_head+0) = (uint8_t)(response_count >> 0);
2000215a:	69fb      	ldr	r3, [r7, #28]
2000215c:	b2da      	uxtb	r2, r3
2000215e:	693b      	ldr	r3, [r7, #16]
20002160:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)(response_count >> 8);
20002162:	69fb      	ldr	r3, [r7, #28]
20002164:	0a1a      	lsrs	r2, r3, #8
20002166:	693b      	ldr	r3, [r7, #16]
20002168:	3301      	adds	r3, #1
2000216a:	b2d2      	uxtb	r2, r2
2000216c:	701a      	strb	r2, [r3, #0]
  *(response_head+2) = (uint8_t) response_value;
2000216e:	693b      	ldr	r3, [r7, #16]
20002170:	3302      	adds	r3, #2
20002172:	69ba      	ldr	r2, [r7, #24]
20002174:	b2d2      	uxtb	r2, r2
20002176:	701a      	strb	r2, [r3, #0]

  return ((uint32_t)(response - response_head));
20002178:	683a      	ldr	r2, [r7, #0]
2000217a:	693b      	ldr	r3, [r7, #16]
2000217c:	1ad3      	subs	r3, r2, r3
}
2000217e:	4618      	mov	r0, r3
20002180:	3728      	adds	r7, #40	@ 0x28
20002182:	46bd      	mov	sp, r7
20002184:	bd80      	pop	{r7, pc}
20002186:	bf00      	nop
20002188:	2000d878 	.word	0x2000d878
2000218c:	2000d834 	.word	0x2000d834

20002190 <DAP_TransferBlock>:
// Process Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferBlock(const uint8_t *request, uint8_t *response) {
20002190:	b580      	push	{r7, lr}
20002192:	b084      	sub	sp, #16
20002194:	af00      	add	r7, sp, #0
20002196:	6078      	str	r0, [r7, #4]
20002198:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
2000219a:	4b20      	ldr	r3, [pc, #128]	@ (2000221c <DAP_TransferBlock+0x8c>)
2000219c:	781b      	ldrb	r3, [r3, #0]
2000219e:	2b01      	cmp	r3, #1
200021a0:	d002      	beq.n	200021a8 <DAP_TransferBlock+0x18>
200021a2:	2b02      	cmp	r3, #2
200021a4:	d006      	beq.n	200021b4 <DAP_TransferBlock+0x24>
200021a6:	e00b      	b.n	200021c0 <DAP_TransferBlock+0x30>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      num = DAP_SWD_TransferBlock (request, response);
200021a8:	6839      	ldr	r1, [r7, #0]
200021aa:	6878      	ldr	r0, [r7, #4]
200021ac:	f7ff fdbe 	bl	20001d2c <DAP_SWD_TransferBlock>
200021b0:	60f8      	str	r0, [r7, #12]
      break;
200021b2:	e013      	b.n	200021dc <DAP_TransferBlock+0x4c>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_TransferBlock(request, response);
200021b4:	6839      	ldr	r1, [r7, #0]
200021b6:	6878      	ldr	r0, [r7, #4]
200021b8:	f7ff fec4 	bl	20001f44 <DAP_JTAG_TransferBlock>
200021bc:	60f8      	str	r0, [r7, #12]
      break;
200021be:	e00d      	b.n	200021dc <DAP_TransferBlock+0x4c>
#endif
    default:
      *(response+0) = 0U;       // Response count [7:0]
200021c0:	683b      	ldr	r3, [r7, #0]
200021c2:	2200      	movs	r2, #0
200021c4:	701a      	strb	r2, [r3, #0]
      *(response+1) = 0U;       // Response count[15:8]
200021c6:	683b      	ldr	r3, [r7, #0]
200021c8:	3301      	adds	r3, #1
200021ca:	2200      	movs	r2, #0
200021cc:	701a      	strb	r2, [r3, #0]
      *(response+2) = 0U;       // Response value
200021ce:	683b      	ldr	r3, [r7, #0]
200021d0:	3302      	adds	r3, #2
200021d2:	2200      	movs	r2, #0
200021d4:	701a      	strb	r2, [r3, #0]
      num = 3U;
200021d6:	2303      	movs	r3, #3
200021d8:	60fb      	str	r3, [r7, #12]
      break;
200021da:	bf00      	nop
  }

  if ((*(request+3) & DAP_TRANSFER_RnW) != 0U) {
200021dc:	687b      	ldr	r3, [r7, #4]
200021de:	3303      	adds	r3, #3
200021e0:	781b      	ldrb	r3, [r3, #0]
200021e2:	f003 0302 	and.w	r3, r3, #2
200021e6:	2b00      	cmp	r3, #0
200021e8:	d004      	beq.n	200021f4 <DAP_TransferBlock+0x64>
    // Read register block
    num |=  4U << 16;
200021ea:	68fb      	ldr	r3, [r7, #12]
200021ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200021f0:	60fb      	str	r3, [r7, #12]
200021f2:	e00e      	b.n	20002212 <DAP_TransferBlock+0x82>
  } else {
    // Write register block
    num |= (4U + (((uint32_t)(*(request+1)) | (uint32_t)(*(request+2) << 8)) * 4)) << 16;
200021f4:	687b      	ldr	r3, [r7, #4]
200021f6:	3301      	adds	r3, #1
200021f8:	781b      	ldrb	r3, [r3, #0]
200021fa:	461a      	mov	r2, r3
200021fc:	687b      	ldr	r3, [r7, #4]
200021fe:	3302      	adds	r3, #2
20002200:	781b      	ldrb	r3, [r3, #0]
20002202:	021b      	lsls	r3, r3, #8
20002204:	4313      	orrs	r3, r2
20002206:	3301      	adds	r3, #1
20002208:	009b      	lsls	r3, r3, #2
2000220a:	041b      	lsls	r3, r3, #16
2000220c:	68fa      	ldr	r2, [r7, #12]
2000220e:	4313      	orrs	r3, r2
20002210:	60fb      	str	r3, [r7, #12]
  }

  return (num);
20002212:	68fb      	ldr	r3, [r7, #12]
}
20002214:	4618      	mov	r0, r3
20002216:	3710      	adds	r7, #16
20002218:	46bd      	mov	sp, r7
2000221a:	bd80      	pop	{r7, pc}
2000221c:	2000d834 	.word	0x2000d834

20002220 <DAP_SWD_WriteAbort>:
// Process SWD Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_SWD != 0)
static uint32_t DAP_SWD_WriteAbort(const uint8_t *request, uint8_t *response) {
20002220:	b580      	push	{r7, lr}
20002222:	b084      	sub	sp, #16
20002224:	af00      	add	r7, sp, #0
20002226:	6078      	str	r0, [r7, #4]
20002228:	6039      	str	r1, [r7, #0]
  uint32_t data;

  // Load data (Ignore DAP index)
  data = (uint32_t)(*(request+1) <<  0) |
2000222a:	687b      	ldr	r3, [r7, #4]
2000222c:	3301      	adds	r3, #1
2000222e:	781b      	ldrb	r3, [r3, #0]
20002230:	461a      	mov	r2, r3
         (uint32_t)(*(request+2) <<  8) |
20002232:	687b      	ldr	r3, [r7, #4]
20002234:	3302      	adds	r3, #2
20002236:	781b      	ldrb	r3, [r3, #0]
20002238:	021b      	lsls	r3, r3, #8
  data = (uint32_t)(*(request+1) <<  0) |
2000223a:	431a      	orrs	r2, r3
         (uint32_t)(*(request+3) << 16) |
2000223c:	687b      	ldr	r3, [r7, #4]
2000223e:	3303      	adds	r3, #3
20002240:	781b      	ldrb	r3, [r3, #0]
20002242:	041b      	lsls	r3, r3, #16
         (uint32_t)(*(request+2) <<  8) |
20002244:	431a      	orrs	r2, r3
         (uint32_t)(*(request+4) << 24);
20002246:	687b      	ldr	r3, [r7, #4]
20002248:	3304      	adds	r3, #4
2000224a:	781b      	ldrb	r3, [r3, #0]
2000224c:	061b      	lsls	r3, r3, #24
         (uint32_t)(*(request+3) << 16) |
2000224e:	4313      	orrs	r3, r2
  data = (uint32_t)(*(request+1) <<  0) |
20002250:	60fb      	str	r3, [r7, #12]

  // Write Abort register
  SWD_Transfer(DP_ABORT, &data);
20002252:	f107 030c 	add.w	r3, r7, #12
20002256:	4619      	mov	r1, r3
20002258:	2000      	movs	r0, #0
2000225a:	f002 f9f1 	bl	20004640 <SWD_Transfer>

  *response = DAP_OK;
2000225e:	683b      	ldr	r3, [r7, #0]
20002260:	2200      	movs	r2, #0
20002262:	701a      	strb	r2, [r3, #0]
  return (1U);
20002264:	2301      	movs	r3, #1
}
20002266:	4618      	mov	r0, r3
20002268:	3710      	adds	r7, #16
2000226a:	46bd      	mov	sp, r7
2000226c:	bd80      	pop	{r7, pc}
	...

20002270 <DAP_JTAG_WriteAbort>:
// Process JTAG Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_WriteAbort(const uint8_t *request, uint8_t *response) {
20002270:	b580      	push	{r7, lr}
20002272:	b084      	sub	sp, #16
20002274:	af00      	add	r7, sp, #0
20002276:	6078      	str	r0, [r7, #4]
20002278:	6039      	str	r1, [r7, #0]
  uint32_t data;

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
2000227a:	687b      	ldr	r3, [r7, #4]
2000227c:	781a      	ldrb	r2, [r3, #0]
2000227e:	4b17      	ldr	r3, [pc, #92]	@ (200022dc <DAP_JTAG_WriteAbort+0x6c>)
20002280:	76da      	strb	r2, [r3, #27]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20002282:	4b16      	ldr	r3, [pc, #88]	@ (200022dc <DAP_JTAG_WriteAbort+0x6c>)
20002284:	7eda      	ldrb	r2, [r3, #27]
20002286:	4b15      	ldr	r3, [pc, #84]	@ (200022dc <DAP_JTAG_WriteAbort+0x6c>)
20002288:	7e9b      	ldrb	r3, [r3, #26]
2000228a:	429a      	cmp	r2, r3
2000228c:	d304      	bcc.n	20002298 <DAP_JTAG_WriteAbort+0x28>
    *response = DAP_ERROR;
2000228e:	683b      	ldr	r3, [r7, #0]
20002290:	22ff      	movs	r2, #255	@ 0xff
20002292:	701a      	strb	r2, [r3, #0]
    return (1U);
20002294:	2301      	movs	r3, #1
20002296:	e01d      	b.n	200022d4 <DAP_JTAG_WriteAbort+0x64>
  }

  // Select JTAG chain
  JTAG_IR(JTAG_ABORT);
20002298:	2008      	movs	r0, #8
2000229a:	f001 fdeb 	bl	20003e74 <JTAG_IR>

  // Load data
  data = (uint32_t)(*(request+1) <<  0) |
2000229e:	687b      	ldr	r3, [r7, #4]
200022a0:	3301      	adds	r3, #1
200022a2:	781b      	ldrb	r3, [r3, #0]
200022a4:	461a      	mov	r2, r3
         (uint32_t)(*(request+2) <<  8) |
200022a6:	687b      	ldr	r3, [r7, #4]
200022a8:	3302      	adds	r3, #2
200022aa:	781b      	ldrb	r3, [r3, #0]
200022ac:	021b      	lsls	r3, r3, #8
  data = (uint32_t)(*(request+1) <<  0) |
200022ae:	431a      	orrs	r2, r3
         (uint32_t)(*(request+3) << 16) |
200022b0:	687b      	ldr	r3, [r7, #4]
200022b2:	3303      	adds	r3, #3
200022b4:	781b      	ldrb	r3, [r3, #0]
200022b6:	041b      	lsls	r3, r3, #16
         (uint32_t)(*(request+2) <<  8) |
200022b8:	431a      	orrs	r2, r3
         (uint32_t)(*(request+4) << 24);
200022ba:	687b      	ldr	r3, [r7, #4]
200022bc:	3304      	adds	r3, #4
200022be:	781b      	ldrb	r3, [r3, #0]
200022c0:	061b      	lsls	r3, r3, #24
  data = (uint32_t)(*(request+1) <<  0) |
200022c2:	4313      	orrs	r3, r2
200022c4:	60fb      	str	r3, [r7, #12]

  // Write Abort register
  JTAG_WriteAbort(data);
200022c6:	68f8      	ldr	r0, [r7, #12]
200022c8:	f001 fc6c 	bl	20003ba4 <JTAG_WriteAbort>

  *response = DAP_OK;
200022cc:	683b      	ldr	r3, [r7, #0]
200022ce:	2200      	movs	r2, #0
200022d0:	701a      	strb	r2, [r3, #0]
  return (1U);
200022d2:	2301      	movs	r3, #1
}
200022d4:	4618      	mov	r0, r3
200022d6:	3710      	adds	r7, #16
200022d8:	46bd      	mov	sp, r7
200022da:	bd80      	pop	{r7, pc}
200022dc:	2000d834 	.word	0x2000d834

200022e0 <DAP_WriteAbort>:
// Process Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_WriteAbort(const uint8_t *request, uint8_t *response) {
200022e0:	b580      	push	{r7, lr}
200022e2:	b084      	sub	sp, #16
200022e4:	af00      	add	r7, sp, #0
200022e6:	6078      	str	r0, [r7, #4]
200022e8:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
200022ea:	4b10      	ldr	r3, [pc, #64]	@ (2000232c <DAP_WriteAbort+0x4c>)
200022ec:	781b      	ldrb	r3, [r3, #0]
200022ee:	2b01      	cmp	r3, #1
200022f0:	d002      	beq.n	200022f8 <DAP_WriteAbort+0x18>
200022f2:	2b02      	cmp	r3, #2
200022f4:	d006      	beq.n	20002304 <DAP_WriteAbort+0x24>
200022f6:	e00b      	b.n	20002310 <DAP_WriteAbort+0x30>
#if (DAP_SWD != 0)
    case DAP_PORT_SWD:
      num = DAP_SWD_WriteAbort (request, response);
200022f8:	6839      	ldr	r1, [r7, #0]
200022fa:	6878      	ldr	r0, [r7, #4]
200022fc:	f7ff ff90 	bl	20002220 <DAP_SWD_WriteAbort>
20002300:	60f8      	str	r0, [r7, #12]
      break;
20002302:	e00b      	b.n	2000231c <DAP_WriteAbort+0x3c>
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_WriteAbort(request, response);
20002304:	6839      	ldr	r1, [r7, #0]
20002306:	6878      	ldr	r0, [r7, #4]
20002308:	f7ff ffb2 	bl	20002270 <DAP_JTAG_WriteAbort>
2000230c:	60f8      	str	r0, [r7, #12]
      break;
2000230e:	e005      	b.n	2000231c <DAP_WriteAbort+0x3c>
#endif
    default:
      *response = DAP_ERROR;
20002310:	683b      	ldr	r3, [r7, #0]
20002312:	22ff      	movs	r2, #255	@ 0xff
20002314:	701a      	strb	r2, [r3, #0]
      num = 1U;
20002316:	2301      	movs	r3, #1
20002318:	60fb      	str	r3, [r7, #12]
      break;
2000231a:	bf00      	nop
  }
  return ((5U << 16) | num);
2000231c:	68fb      	ldr	r3, [r7, #12]
2000231e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
}
20002322:	4618      	mov	r0, r3
20002324:	3710      	adds	r7, #16
20002326:	46bd      	mov	sp, r7
20002328:	bd80      	pop	{r7, pc}
2000232a:	bf00      	nop
2000232c:	2000d834 	.word	0x2000d834

20002330 <DAP_ProcessCommand>:
// Process DAP command request and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
uint32_t DAP_ProcessCommand(const uint8_t *request, uint8_t *response) {
20002330:	b580      	push	{r7, lr}
20002332:	b084      	sub	sp, #16
20002334:	af00      	add	r7, sp, #0
20002336:	6078      	str	r0, [r7, #4]
20002338:	6039      	str	r1, [r7, #0]
  uint32_t num;

  if ((*request >= ID_DAP_Vendor0) && (*request <= ID_DAP_Vendor31)) {
2000233a:	687b      	ldr	r3, [r7, #4]
2000233c:	781b      	ldrb	r3, [r3, #0]
2000233e:	b25b      	sxtb	r3, r3
20002340:	2b00      	cmp	r3, #0
20002342:	da09      	bge.n	20002358 <DAP_ProcessCommand+0x28>
20002344:	687b      	ldr	r3, [r7, #4]
20002346:	781b      	ldrb	r3, [r3, #0]
20002348:	2b9f      	cmp	r3, #159	@ 0x9f
2000234a:	d805      	bhi.n	20002358 <DAP_ProcessCommand+0x28>
    return DAP_ProcessVendorCommand(request, response);
2000234c:	6839      	ldr	r1, [r7, #0]
2000234e:	6878      	ldr	r0, [r7, #4]
20002350:	f000 f8d2 	bl	200024f8 <DAP_ProcessVendorCommand>
20002354:	4603      	mov	r3, r0
20002356:	e0cb      	b.n	200024f0 <DAP_ProcessCommand+0x1c0>
  }

  *response++ = *request;
20002358:	683b      	ldr	r3, [r7, #0]
2000235a:	1c5a      	adds	r2, r3, #1
2000235c:	603a      	str	r2, [r7, #0]
2000235e:	687a      	ldr	r2, [r7, #4]
20002360:	7812      	ldrb	r2, [r2, #0]
20002362:	701a      	strb	r2, [r3, #0]

  switch (*request++) {
20002364:	687b      	ldr	r3, [r7, #4]
20002366:	1c5a      	adds	r2, r3, #1
20002368:	607a      	str	r2, [r7, #4]
2000236a:	781b      	ldrb	r3, [r3, #0]
2000236c:	2b1d      	cmp	r3, #29
2000236e:	f200 80b5 	bhi.w	200024dc <DAP_ProcessCommand+0x1ac>
20002372:	a201      	add	r2, pc, #4	@ (adr r2, 20002378 <DAP_ProcessCommand+0x48>)
20002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002378:	200023f1 	.word	0x200023f1
2000237c:	20002415 	.word	0x20002415
20002380:	20002421 	.word	0x20002421
20002384:	2000242d 	.word	0x2000242d
20002388:	200024ad 	.word	0x200024ad
2000238c:	200024b9 	.word	0x200024b9
20002390:	200024c5 	.word	0x200024c5
20002394:	200024dd 	.word	0x200024dd
20002398:	200024d1 	.word	0x200024d1
2000239c:	20002437 	.word	0x20002437
200023a0:	20002443 	.word	0x20002443
200023a4:	200024dd 	.word	0x200024dd
200023a8:	200024dd 	.word	0x200024dd
200023ac:	200024dd 	.word	0x200024dd
200023b0:	200024dd 	.word	0x200024dd
200023b4:	200024dd 	.word	0x200024dd
200023b8:	2000244d 	.word	0x2000244d
200023bc:	20002459 	.word	0x20002459
200023c0:	20002465 	.word	0x20002465
200023c4:	20002471 	.word	0x20002471
200023c8:	20002489 	.word	0x20002489
200023cc:	20002495 	.word	0x20002495
200023d0:	200024a1 	.word	0x200024a1
200023d4:	200024dd 	.word	0x200024dd
200023d8:	200024dd 	.word	0x200024dd
200023dc:	200024dd 	.word	0x200024dd
200023e0:	200024dd 	.word	0x200024dd
200023e4:	200024dd 	.word	0x200024dd
200023e8:	200024dd 	.word	0x200024dd
200023ec:	2000247d 	.word	0x2000247d
    case ID_DAP_Info:
      num = DAP_Info(*request, response+1);
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	781a      	ldrb	r2, [r3, #0]
200023f4:	683b      	ldr	r3, [r7, #0]
200023f6:	3301      	adds	r3, #1
200023f8:	4619      	mov	r1, r3
200023fa:	4610      	mov	r0, r2
200023fc:	f7fe f9f4 	bl	200007e8 <DAP_Info>
20002400:	4603      	mov	r3, r0
20002402:	60fb      	str	r3, [r7, #12]
      *response = (uint8_t)num;
20002404:	68fb      	ldr	r3, [r7, #12]
20002406:	b2da      	uxtb	r2, r3
20002408:	683b      	ldr	r3, [r7, #0]
2000240a:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) + 2U + num);
2000240c:	68fb      	ldr	r3, [r7, #12]
2000240e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
20002412:	e06d      	b.n	200024f0 <DAP_ProcessCommand+0x1c0>

    case ID_DAP_HostStatus:
      num = DAP_HostStatus(request, response);
20002414:	6839      	ldr	r1, [r7, #0]
20002416:	6878      	ldr	r0, [r7, #4]
20002418:	f7fe face 	bl	200009b8 <DAP_HostStatus>
2000241c:	60f8      	str	r0, [r7, #12]
      break;
2000241e:	e064      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Connect:
      num = DAP_Connect(request, response);
20002420:	6839      	ldr	r1, [r7, #0]
20002422:	6878      	ldr	r0, [r7, #4]
20002424:	f7fe faf6 	bl	20000a14 <DAP_Connect>
20002428:	60f8      	str	r0, [r7, #12]
      break;
2000242a:	e05e      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Disconnect:
      num = DAP_Disconnect(response);
2000242c:	6838      	ldr	r0, [r7, #0]
2000242e:	f7fe fb23 	bl	20000a78 <DAP_Disconnect>
20002432:	60f8      	str	r0, [r7, #12]
      break;
20002434:	e059      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Delay:
      num = DAP_Delay(request, response);
20002436:	6839      	ldr	r1, [r7, #0]
20002438:	6878      	ldr	r0, [r7, #4]
2000243a:	f7fe fa95 	bl	20000968 <DAP_Delay>
2000243e:	60f8      	str	r0, [r7, #12]
      break;
20002440:	e053      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_ResetTarget:
      num = DAP_ResetTarget(response);
20002442:	6838      	ldr	r0, [r7, #0]
20002444:	f7fe fb2c 	bl	20000aa0 <DAP_ResetTarget>
20002448:	60f8      	str	r0, [r7, #12]
      break;
2000244a:	e04e      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWJ_Pins:
      num = DAP_SWJ_Pins(request, response);
2000244c:	6839      	ldr	r1, [r7, #0]
2000244e:	6878      	ldr	r0, [r7, #4]
20002450:	f7fe fb38 	bl	20000ac4 <DAP_SWJ_Pins>
20002454:	60f8      	str	r0, [r7, #12]
      break;
20002456:	e048      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Clock:
      num = DAP_SWJ_Clock(request, response);
20002458:	6839      	ldr	r1, [r7, #0]
2000245a:	6878      	ldr	r0, [r7, #4]
2000245c:	f7fe fc16 	bl	20000c8c <DAP_SWJ_Clock>
20002460:	60f8      	str	r0, [r7, #12]
      break;
20002462:	e042      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Sequence:
      num = DAP_SWJ_Sequence(request, response);
20002464:	6839      	ldr	r1, [r7, #0]
20002466:	6878      	ldr	r0, [r7, #4]
20002468:	f7fe fc3e 	bl	20000ce8 <DAP_SWJ_Sequence>
2000246c:	60f8      	str	r0, [r7, #12]
      break;
2000246e:	e03c      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWD_Configure:
      num = DAP_SWD_Configure(request, response);
20002470:	6839      	ldr	r1, [r7, #0]
20002472:	6878      	ldr	r0, [r7, #4]
20002474:	f7fe fc5c 	bl	20000d30 <DAP_SWD_Configure>
20002478:	60f8      	str	r0, [r7, #12]
      break;
2000247a:	e036      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWD_Sequence:
      num = DAP_SWD_Sequence(request, response);
2000247c:	6839      	ldr	r1, [r7, #0]
2000247e:	6878      	ldr	r0, [r7, #4]
20002480:	f7fe fc7c 	bl	20000d7c <DAP_SWD_Sequence>
20002484:	60f8      	str	r0, [r7, #12]
      break;
20002486:	e030      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_JTAG_Sequence:
      num = DAP_JTAG_Sequence(request, response);
20002488:	6839      	ldr	r1, [r7, #0]
2000248a:	6878      	ldr	r0, [r7, #4]
2000248c:	f7fe fcd7 	bl	20000e3e <DAP_JTAG_Sequence>
20002490:	60f8      	str	r0, [r7, #12]
      break;
20002492:	e02a      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_Configure:
      num = DAP_JTAG_Configure(request, response);
20002494:	6839      	ldr	r1, [r7, #0]
20002496:	6878      	ldr	r0, [r7, #4]
20002498:	f7fe fcf4 	bl	20000e84 <DAP_JTAG_Configure>
2000249c:	60f8      	str	r0, [r7, #12]
      break;
2000249e:	e024      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_IDCODE:
      num = DAP_JTAG_IDCode(request, response);
200024a0:	6839      	ldr	r1, [r7, #0]
200024a2:	6878      	ldr	r0, [r7, #4]
200024a4:	f7fe fd4e 	bl	20000f44 <DAP_JTAG_IDCode>
200024a8:	60f8      	str	r0, [r7, #12]
      break;
200024aa:	e01e      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_TransferConfigure:
      num = DAP_TransferConfigure(request, response);
200024ac:	6839      	ldr	r1, [r7, #0]
200024ae:	6878      	ldr	r0, [r7, #4]
200024b0:	f7fe fd8e 	bl	20000fd0 <DAP_TransferConfigure>
200024b4:	60f8      	str	r0, [r7, #12]
      break;
200024b6:	e018      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Transfer:
      num = DAP_Transfer(request, response);
200024b8:	6839      	ldr	r1, [r7, #0]
200024ba:	6878      	ldr	r0, [r7, #4]
200024bc:	f7ff fc10 	bl	20001ce0 <DAP_Transfer>
200024c0:	60f8      	str	r0, [r7, #12]
      break;
200024c2:	e012      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
    case ID_DAP_TransferBlock:
      num = DAP_TransferBlock(request, response);
200024c4:	6839      	ldr	r1, [r7, #0]
200024c6:	6878      	ldr	r0, [r7, #4]
200024c8:	f7ff fe62 	bl	20002190 <DAP_TransferBlock>
200024cc:	60f8      	str	r0, [r7, #12]
      break;
200024ce:	e00c      	b.n	200024ea <DAP_ProcessCommand+0x1ba>

    case ID_DAP_WriteABORT:
      num = DAP_WriteAbort(request, response);
200024d0:	6839      	ldr	r1, [r7, #0]
200024d2:	6878      	ldr	r0, [r7, #4]
200024d4:	f7ff ff04 	bl	200022e0 <DAP_WriteAbort>
200024d8:	60f8      	str	r0, [r7, #12]
      break;
200024da:	e006      	b.n	200024ea <DAP_ProcessCommand+0x1ba>
      num = UART_Transfer(request, response);
      break;
#endif

    default:
      *(response-1) = ID_DAP_Invalid;
200024dc:	683b      	ldr	r3, [r7, #0]
200024de:	3b01      	subs	r3, #1
200024e0:	22ff      	movs	r2, #255	@ 0xff
200024e2:	701a      	strb	r2, [r3, #0]
      return ((1U << 16) | 1U);
200024e4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
200024e8:	e002      	b.n	200024f0 <DAP_ProcessCommand+0x1c0>
  }

  return ((1U << 16) + 1U + num);
200024ea:	68fb      	ldr	r3, [r7, #12]
200024ec:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
}
200024f0:	4618      	mov	r0, r3
200024f2:	3710      	adds	r7, #16
200024f4:	46bd      	mov	sp, r7
200024f6:	bd80      	pop	{r7, pc}

200024f8 <DAP_ProcessVendorCommand>:
\param request   pointer to request data
\param response  pointer to response data
\return          number of bytes in response (lower 16 bits)
                 number of bytes in request (upper 16 bits)
*/
uint32_t DAP_ProcessVendorCommand(const uint8_t *request, uint8_t *response) {
200024f8:	b480      	push	{r7}
200024fa:	b085      	sub	sp, #20
200024fc:	af00      	add	r7, sp, #0
200024fe:	6078      	str	r0, [r7, #4]
20002500:	6039      	str	r1, [r7, #0]
  uint32_t num = (1U << 16) | 1U;
20002502:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
20002506:	60fb      	str	r3, [r7, #12]

  *response++ = *request;        // copy Command ID
20002508:	683b      	ldr	r3, [r7, #0]
2000250a:	1c5a      	adds	r2, r3, #1
2000250c:	603a      	str	r2, [r7, #0]
2000250e:	687a      	ldr	r2, [r7, #4]
20002510:	7812      	ldrb	r2, [r2, #0]
20002512:	701a      	strb	r2, [r3, #0]

  switch (*request++) {          // first byte in request is Command ID
20002514:	687b      	ldr	r3, [r7, #4]
20002516:	1c5a      	adds	r2, r3, #1
20002518:	607a      	str	r2, [r7, #4]
2000251a:	781b      	ldrb	r3, [r3, #0]
2000251c:	3b80      	subs	r3, #128	@ 0x80
2000251e:	2b1f      	cmp	r3, #31
20002520:	d842      	bhi.n	200025a8 <DAP_ProcessVendorCommand+0xb0>
20002522:	a201      	add	r2, pc, #4	@ (adr r2, 20002528 <DAP_ProcessVendorCommand+0x30>)
20002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002528:	200025a9 	.word	0x200025a9
2000252c:	200025a9 	.word	0x200025a9
20002530:	200025a9 	.word	0x200025a9
20002534:	200025a9 	.word	0x200025a9
20002538:	200025a9 	.word	0x200025a9
2000253c:	200025a9 	.word	0x200025a9
20002540:	200025a9 	.word	0x200025a9
20002544:	200025a9 	.word	0x200025a9
20002548:	200025a9 	.word	0x200025a9
2000254c:	200025a9 	.word	0x200025a9
20002550:	200025a9 	.word	0x200025a9
20002554:	200025a9 	.word	0x200025a9
20002558:	200025a9 	.word	0x200025a9
2000255c:	200025a9 	.word	0x200025a9
20002560:	200025a9 	.word	0x200025a9
20002564:	200025a9 	.word	0x200025a9
20002568:	200025a9 	.word	0x200025a9
2000256c:	200025a9 	.word	0x200025a9
20002570:	200025a9 	.word	0x200025a9
20002574:	200025a9 	.word	0x200025a9
20002578:	200025a9 	.word	0x200025a9
2000257c:	200025a9 	.word	0x200025a9
20002580:	200025a9 	.word	0x200025a9
20002584:	200025a9 	.word	0x200025a9
20002588:	200025a9 	.word	0x200025a9
2000258c:	200025a9 	.word	0x200025a9
20002590:	200025a9 	.word	0x200025a9
20002594:	200025a9 	.word	0x200025a9
20002598:	200025a9 	.word	0x200025a9
2000259c:	200025a9 	.word	0x200025a9
200025a0:	200025a9 	.word	0x200025a9
200025a4:	200025a9 	.word	0x200025a9
    case ID_DAP_Vendor29: break;
    case ID_DAP_Vendor30: break;
    case ID_DAP_Vendor31: break;
  }

  return (num);
200025a8:	68fb      	ldr	r3, [r7, #12]
}
200025aa:	4618      	mov	r0, r3
200025ac:	3714      	adds	r7, #20
200025ae:	46bd      	mov	sp, r7
200025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200025b4:	4770      	bx	lr
200025b6:	bf00      	nop

200025b8 <PIN_SWCLK_TCK_SET>:
static void     PIN_SWCLK_TCK_SET (void) {
200025b8:	b480      	push	{r7}
200025ba:	af00      	add	r7, sp, #0
}
200025bc:	bf00      	nop
200025be:	46bd      	mov	sp, r7
200025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200025c4:	4770      	bx	lr

200025c6 <PIN_SWCLK_TCK_CLR>:
static void     PIN_SWCLK_TCK_CLR (void) {
200025c6:	b480      	push	{r7}
200025c8:	af00      	add	r7, sp, #0
}
200025ca:	bf00      	nop
200025cc:	46bd      	mov	sp, r7
200025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200025d2:	4770      	bx	lr

200025d4 <PIN_SWDIO_TMS_SET>:
static void     PIN_SWDIO_TMS_SET (void) {
200025d4:	b480      	push	{r7}
200025d6:	af00      	add	r7, sp, #0
}
200025d8:	bf00      	nop
200025da:	46bd      	mov	sp, r7
200025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200025e0:	4770      	bx	lr

200025e2 <PIN_SWDIO_TMS_CLR>:
static void     PIN_SWDIO_TMS_CLR (void) {
200025e2:	b480      	push	{r7}
200025e4:	af00      	add	r7, sp, #0
}
200025e6:	bf00      	nop
200025e8:	46bd      	mov	sp, r7
200025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200025ee:	4770      	bx	lr

200025f0 <PIN_TDI_OUT>:
static void     PIN_TDI_OUT (uint32_t bit) {
200025f0:	b480      	push	{r7}
200025f2:	b083      	sub	sp, #12
200025f4:	af00      	add	r7, sp, #0
200025f6:	6078      	str	r0, [r7, #4]
}
200025f8:	bf00      	nop
200025fa:	370c      	adds	r7, #12
200025fc:	46bd      	mov	sp, r7
200025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20002602:	4770      	bx	lr

20002604 <PIN_TDO_IN>:
static uint32_t PIN_TDO_IN  (void) {
20002604:	b480      	push	{r7}
20002606:	af00      	add	r7, sp, #0
  return (0U);
20002608:	2300      	movs	r3, #0
}
2000260a:	4618      	mov	r0, r3
2000260c:	46bd      	mov	sp, r7
2000260e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002612:	4770      	bx	lr

20002614 <TIMESTAMP_GET>:
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
20002614:	b480      	push	{r7}
20002616:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20002618:	4b03      	ldr	r3, [pc, #12]	@ (20002628 <TIMESTAMP_GET+0x14>)
2000261a:	685b      	ldr	r3, [r3, #4]
}
2000261c:	4618      	mov	r0, r3
2000261e:	46bd      	mov	sp, r7
20002620:	f85d 7b04 	ldr.w	r7, [sp], #4
20002624:	4770      	bx	lr
20002626:	bf00      	nop
20002628:	e0001000 	.word	0xe0001000

2000262c <copy_bits_lsb>:
void SPI_TMS_Transfer(uint64_t data, uint8_t bits);

void copy_bits_lsb(const uint8_t *src, uint32_t srcBitIndex,
                   uint32_t bitLen,
                   uint8_t *dst, uint32_t dstBitIndex)
{
2000262c:	b480      	push	{r7}
2000262e:	b08b      	sub	sp, #44	@ 0x2c
20002630:	af00      	add	r7, sp, #0
20002632:	60f8      	str	r0, [r7, #12]
20002634:	60b9      	str	r1, [r7, #8]
20002636:	607a      	str	r2, [r7, #4]
20002638:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < bitLen; i++)
2000263a:	2300      	movs	r3, #0
2000263c:	627b      	str	r3, [r7, #36]	@ 0x24
2000263e:	e046      	b.n	200026ce <copy_bits_lsb+0xa2>
    {
        // Locate the bit in the source
        uint32_t sByte = (srcBitIndex + i) / 8;
20002640:	68ba      	ldr	r2, [r7, #8]
20002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002644:	4413      	add	r3, r2
20002646:	08db      	lsrs	r3, r3, #3
20002648:	623b      	str	r3, [r7, #32]
        uint32_t sBit  = (srcBitIndex + i) % 8; // LSB-first
2000264a:	68ba      	ldr	r2, [r7, #8]
2000264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000264e:	4413      	add	r3, r2
20002650:	f003 0307 	and.w	r3, r3, #7
20002654:	61fb      	str	r3, [r7, #28]
        uint8_t  bit   = (src[sByte] >> sBit) & 1;
20002656:	68fa      	ldr	r2, [r7, #12]
20002658:	6a3b      	ldr	r3, [r7, #32]
2000265a:	4413      	add	r3, r2
2000265c:	781b      	ldrb	r3, [r3, #0]
2000265e:	461a      	mov	r2, r3
20002660:	69fb      	ldr	r3, [r7, #28]
20002662:	fa42 f303 	asr.w	r3, r2, r3
20002666:	b2db      	uxtb	r3, r3
20002668:	f003 0301 	and.w	r3, r3, #1
2000266c:	76fb      	strb	r3, [r7, #27]

        // Locate where to put it in the destination
        uint32_t dByte = (dstBitIndex + i) / 8;
2000266e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002672:	4413      	add	r3, r2
20002674:	08db      	lsrs	r3, r3, #3
20002676:	617b      	str	r3, [r7, #20]
        uint32_t dBit  = (dstBitIndex + i) % 8; // LSB-first
20002678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
2000267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000267c:	4413      	add	r3, r2
2000267e:	f003 0307 	and.w	r3, r3, #7
20002682:	613b      	str	r3, [r7, #16]

        // Clear and set the destination bit
        dst[dByte] &= ~(1U << dBit);
20002684:	683a      	ldr	r2, [r7, #0]
20002686:	697b      	ldr	r3, [r7, #20]
20002688:	4413      	add	r3, r2
2000268a:	7819      	ldrb	r1, [r3, #0]
2000268c:	2201      	movs	r2, #1
2000268e:	693b      	ldr	r3, [r7, #16]
20002690:	fa02 f303 	lsl.w	r3, r2, r3
20002694:	b2db      	uxtb	r3, r3
20002696:	43db      	mvns	r3, r3
20002698:	b2da      	uxtb	r2, r3
2000269a:	6838      	ldr	r0, [r7, #0]
2000269c:	697b      	ldr	r3, [r7, #20]
2000269e:	4403      	add	r3, r0
200026a0:	400a      	ands	r2, r1
200026a2:	b2d2      	uxtb	r2, r2
200026a4:	701a      	strb	r2, [r3, #0]
        dst[dByte] |=  (bit << dBit);
200026a6:	683a      	ldr	r2, [r7, #0]
200026a8:	697b      	ldr	r3, [r7, #20]
200026aa:	4413      	add	r3, r2
200026ac:	781b      	ldrb	r3, [r3, #0]
200026ae:	b25a      	sxtb	r2, r3
200026b0:	7ef9      	ldrb	r1, [r7, #27]
200026b2:	693b      	ldr	r3, [r7, #16]
200026b4:	fa01 f303 	lsl.w	r3, r1, r3
200026b8:	b25b      	sxtb	r3, r3
200026ba:	4313      	orrs	r3, r2
200026bc:	b259      	sxtb	r1, r3
200026be:	683a      	ldr	r2, [r7, #0]
200026c0:	697b      	ldr	r3, [r7, #20]
200026c2:	4413      	add	r3, r2
200026c4:	b2ca      	uxtb	r2, r1
200026c6:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < bitLen; i++)
200026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200026ca:	3301      	adds	r3, #1
200026cc:	627b      	str	r3, [r7, #36]	@ 0x24
200026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200026d0:	687b      	ldr	r3, [r7, #4]
200026d2:	429a      	cmp	r2, r3
200026d4:	d3b4      	bcc.n	20002640 <copy_bits_lsb+0x14>
    }
}
200026d6:	bf00      	nop
200026d8:	bf00      	nop
200026da:	372c      	adds	r7, #44	@ 0x2c
200026dc:	46bd      	mov	sp, r7
200026de:	f85d 7b04 	ldr.w	r7, [sp], #4
200026e2:	4770      	bx	lr

200026e4 <extract_nbits_lsb>:


// Extracts 8 bits from a uint8_t array (LSB-first), starting at `bit_index`
// Returns the extracted bits right-aligned
// Extract up to 16 bits from a bitstream (LSB-first)
uint16_t extract_nbits_lsb(const uint8_t *buf, size_t bit_offset, size_t n) {
200026e4:	b480      	push	{r7}
200026e6:	b089      	sub	sp, #36	@ 0x24
200026e8:	af00      	add	r7, sp, #0
200026ea:	60f8      	str	r0, [r7, #12]
200026ec:	60b9      	str	r1, [r7, #8]
200026ee:	607a      	str	r2, [r7, #4]
    if (n == 0 || n > 16) return 0;
200026f0:	687b      	ldr	r3, [r7, #4]
200026f2:	2b00      	cmp	r3, #0
200026f4:	d002      	beq.n	200026fc <extract_nbits_lsb+0x18>
200026f6:	687b      	ldr	r3, [r7, #4]
200026f8:	2b10      	cmp	r3, #16
200026fa:	d901      	bls.n	20002700 <extract_nbits_lsb+0x1c>
200026fc:	2300      	movs	r3, #0
200026fe:	e029      	b.n	20002754 <extract_nbits_lsb+0x70>

    size_t byte_offset = bit_offset / 8;
20002700:	68bb      	ldr	r3, [r7, #8]
20002702:	08db      	lsrs	r3, r3, #3
20002704:	61fb      	str	r3, [r7, #28]
    size_t bit_in_byte = bit_offset % 8;
20002706:	68bb      	ldr	r3, [r7, #8]
20002708:	f003 0307 	and.w	r3, r3, #7
2000270c:	61bb      	str	r3, [r7, #24]

    // Read 3 bytes to cover the worst case (bits span across 3 bytes)
    uint32_t temp = buf[byte_offset] |
2000270e:	68fa      	ldr	r2, [r7, #12]
20002710:	69fb      	ldr	r3, [r7, #28]
20002712:	4413      	add	r3, r2
20002714:	781b      	ldrb	r3, [r3, #0]
20002716:	4619      	mov	r1, r3
                   ((uint32_t)buf[byte_offset + 1] << 8) |
20002718:	69fb      	ldr	r3, [r7, #28]
2000271a:	3301      	adds	r3, #1
2000271c:	68fa      	ldr	r2, [r7, #12]
2000271e:	4413      	add	r3, r2
20002720:	781b      	ldrb	r3, [r3, #0]
20002722:	021b      	lsls	r3, r3, #8
    uint32_t temp = buf[byte_offset] |
20002724:	ea41 0203 	orr.w	r2, r1, r3
                   ((uint32_t)buf[byte_offset + 2] << 16);
20002728:	69fb      	ldr	r3, [r7, #28]
2000272a:	3302      	adds	r3, #2
2000272c:	68f9      	ldr	r1, [r7, #12]
2000272e:	440b      	add	r3, r1
20002730:	781b      	ldrb	r3, [r3, #0]
20002732:	041b      	lsls	r3, r3, #16
    uint32_t temp = buf[byte_offset] |
20002734:	4313      	orrs	r3, r2
20002736:	617b      	str	r3, [r7, #20]

    // Right shift to the relevant bit, then mask
    return (temp >> bit_in_byte) & ((1U << n) - 1);
20002738:	697a      	ldr	r2, [r7, #20]
2000273a:	69bb      	ldr	r3, [r7, #24]
2000273c:	fa22 f303 	lsr.w	r3, r2, r3
20002740:	b29a      	uxth	r2, r3
20002742:	2101      	movs	r1, #1
20002744:	687b      	ldr	r3, [r7, #4]
20002746:	fa01 f303 	lsl.w	r3, r1, r3
2000274a:	b29b      	uxth	r3, r3
2000274c:	3b01      	subs	r3, #1
2000274e:	b29b      	uxth	r3, r3
20002750:	4013      	ands	r3, r2
20002752:	b29b      	uxth	r3, r3
}
20002754:	4618      	mov	r0, r3
20002756:	3724      	adds	r7, #36	@ 0x24
20002758:	46bd      	mov	sp, r7
2000275a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000275e:	4770      	bx	lr

20002760 <write_nbits_lsb>:
    // Store back
    dst[byte_index] = window & 0xFF;
    dst[byte_index + 1] = (window >> 8) & 0xFF;
}
#endif
void write_nbits_lsb(uint8_t *buf, size_t bit_offset, size_t n, uint16_t value) {
20002760:	b480      	push	{r7}
20002762:	b089      	sub	sp, #36	@ 0x24
20002764:	af00      	add	r7, sp, #0
20002766:	60f8      	str	r0, [r7, #12]
20002768:	60b9      	str	r1, [r7, #8]
2000276a:	607a      	str	r2, [r7, #4]
2000276c:	807b      	strh	r3, [r7, #2]
    if (n == 0 || n > 16) return;
2000276e:	687b      	ldr	r3, [r7, #4]
20002770:	2b00      	cmp	r3, #0
20002772:	d04f      	beq.n	20002814 <write_nbits_lsb+0xb4>
20002774:	687b      	ldr	r3, [r7, #4]
20002776:	2b10      	cmp	r3, #16
20002778:	d84c      	bhi.n	20002814 <write_nbits_lsb+0xb4>

    size_t byte_offset = bit_offset / 8;
2000277a:	68bb      	ldr	r3, [r7, #8]
2000277c:	08db      	lsrs	r3, r3, #3
2000277e:	61fb      	str	r3, [r7, #28]
    size_t bit_in_byte = bit_offset % 8;
20002780:	68bb      	ldr	r3, [r7, #8]
20002782:	f003 0307 	and.w	r3, r3, #7
20002786:	61bb      	str	r3, [r7, #24]

    // Read 3 bytes to cover the worst case (spanning across 3 bytes)
    uint32_t temp = buf[byte_offset] |
20002788:	68fa      	ldr	r2, [r7, #12]
2000278a:	69fb      	ldr	r3, [r7, #28]
2000278c:	4413      	add	r3, r2
2000278e:	781b      	ldrb	r3, [r3, #0]
20002790:	4619      	mov	r1, r3
                   ((uint32_t)buf[byte_offset + 1] << 8) |
20002792:	69fb      	ldr	r3, [r7, #28]
20002794:	3301      	adds	r3, #1
20002796:	68fa      	ldr	r2, [r7, #12]
20002798:	4413      	add	r3, r2
2000279a:	781b      	ldrb	r3, [r3, #0]
2000279c:	021b      	lsls	r3, r3, #8
    uint32_t temp = buf[byte_offset] |
2000279e:	ea41 0203 	orr.w	r2, r1, r3
                   ((uint32_t)buf[byte_offset + 2] << 16);
200027a2:	69fb      	ldr	r3, [r7, #28]
200027a4:	3302      	adds	r3, #2
200027a6:	68f9      	ldr	r1, [r7, #12]
200027a8:	440b      	add	r3, r1
200027aa:	781b      	ldrb	r3, [r3, #0]
200027ac:	041b      	lsls	r3, r3, #16
    uint32_t temp = buf[byte_offset] |
200027ae:	4313      	orrs	r3, r2
200027b0:	617b      	str	r3, [r7, #20]

    // Mask and insert new value
    uint32_t mask = ((1U << n) - 1U) << bit_in_byte;
200027b2:	2201      	movs	r2, #1
200027b4:	687b      	ldr	r3, [r7, #4]
200027b6:	fa02 f303 	lsl.w	r3, r2, r3
200027ba:	1e5a      	subs	r2, r3, #1
200027bc:	69bb      	ldr	r3, [r7, #24]
200027be:	fa02 f303 	lsl.w	r3, r2, r3
200027c2:	613b      	str	r3, [r7, #16]
    temp = (temp & ~mask) | (((uint32_t)(value & ((1U << n) - 1))) << bit_in_byte);
200027c4:	693b      	ldr	r3, [r7, #16]
200027c6:	43da      	mvns	r2, r3
200027c8:	697b      	ldr	r3, [r7, #20]
200027ca:	401a      	ands	r2, r3
200027cc:	8879      	ldrh	r1, [r7, #2]
200027ce:	f04f 30ff 	mov.w	r0, #4294967295
200027d2:	687b      	ldr	r3, [r7, #4]
200027d4:	fa00 f303 	lsl.w	r3, r0, r3
200027d8:	43db      	mvns	r3, r3
200027da:	4019      	ands	r1, r3
200027dc:	69bb      	ldr	r3, [r7, #24]
200027de:	fa01 f303 	lsl.w	r3, r1, r3
200027e2:	4313      	orrs	r3, r2
200027e4:	617b      	str	r3, [r7, #20]

    // Write the result back
    buf[byte_offset]     = temp & 0xFF;
200027e6:	68fa      	ldr	r2, [r7, #12]
200027e8:	69fb      	ldr	r3, [r7, #28]
200027ea:	4413      	add	r3, r2
200027ec:	697a      	ldr	r2, [r7, #20]
200027ee:	b2d2      	uxtb	r2, r2
200027f0:	701a      	strb	r2, [r3, #0]
    buf[byte_offset + 1] = (temp >> 8) & 0xFF;
200027f2:	697b      	ldr	r3, [r7, #20]
200027f4:	0a19      	lsrs	r1, r3, #8
200027f6:	69fb      	ldr	r3, [r7, #28]
200027f8:	3301      	adds	r3, #1
200027fa:	68fa      	ldr	r2, [r7, #12]
200027fc:	4413      	add	r3, r2
200027fe:	b2ca      	uxtb	r2, r1
20002800:	701a      	strb	r2, [r3, #0]
    buf[byte_offset + 2] = (temp >> 16) & 0xFF;
20002802:	697b      	ldr	r3, [r7, #20]
20002804:	0c19      	lsrs	r1, r3, #16
20002806:	69fb      	ldr	r3, [r7, #28]
20002808:	3302      	adds	r3, #2
2000280a:	68fa      	ldr	r2, [r7, #12]
2000280c:	4413      	add	r3, r2
2000280e:	b2ca      	uxtb	r2, r1
20002810:	701a      	strb	r2, [r3, #0]
20002812:	e000      	b.n	20002816 <write_nbits_lsb+0xb6>
    if (n == 0 || n > 16) return;
20002814:	bf00      	nop
}
20002816:	3724      	adds	r7, #36	@ 0x24
20002818:	46bd      	mov	sp, r7
2000281a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000281e:	4770      	bx	lr

20002820 <fill_tms_buffer>:

void fill_tms_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t tms_val)
{
20002820:	b580      	push	{r7, lr}
20002822:	b084      	sub	sp, #16
20002824:	af00      	add	r7, sp, #0
20002826:	60f8      	str	r0, [r7, #12]
20002828:	60b9      	str	r1, [r7, #8]
2000282a:	4613      	mov	r3, r2
2000282c:	71fb      	strb	r3, [r7, #7]
	//TODO: optimize here!!
	while(n)
2000282e:	e01d      	b.n	2000286c <fill_tms_buffer+0x4c>
	{
		if(n > 8)
20002830:	68bb      	ldr	r3, [r7, #8]
20002832:	2b08      	cmp	r3, #8
20002834:	d912      	bls.n	2000285c <fill_tms_buffer+0x3c>
		{
			if(tms_val)
20002836:	79fb      	ldrb	r3, [r7, #7]
20002838:	2b00      	cmp	r3, #0
2000283a:	d00b      	beq.n	20002854 <fill_tms_buffer+0x34>
			{
				tms_val = 0xFF;
2000283c:	23ff      	movs	r3, #255	@ 0xff
2000283e:	71fb      	strb	r3, [r7, #7]
				write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, 8, tms_val);
20002840:	79fb      	ldrb	r3, [r7, #7]
20002842:	b29b      	uxth	r3, r3
20002844:	2208      	movs	r2, #8
20002846:	68f9      	ldr	r1, [r7, #12]
20002848:	480c      	ldr	r0, [pc, #48]	@ (2000287c <fill_tms_buffer+0x5c>)
2000284a:	f7ff ff89 	bl	20002760 <write_nbits_lsb>
				total_write_bit_cnt += 8;
2000284e:	68fb      	ldr	r3, [r7, #12]
20002850:	3308      	adds	r3, #8
20002852:	60fb      	str	r3, [r7, #12]
			}

			n -= 8;
20002854:	68bb      	ldr	r3, [r7, #8]
20002856:	3b08      	subs	r3, #8
20002858:	60bb      	str	r3, [r7, #8]
2000285a:	e007      	b.n	2000286c <fill_tms_buffer+0x4c>
		}
		else
		{
			write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, n, tms_val);
2000285c:	79fb      	ldrb	r3, [r7, #7]
2000285e:	b29b      	uxth	r3, r3
20002860:	68ba      	ldr	r2, [r7, #8]
20002862:	68f9      	ldr	r1, [r7, #12]
20002864:	4805      	ldr	r0, [pc, #20]	@ (2000287c <fill_tms_buffer+0x5c>)
20002866:	f7ff ff7b 	bl	20002760 <write_nbits_lsb>
			break;
2000286a:	e003      	b.n	20002874 <fill_tms_buffer+0x54>
	while(n)
2000286c:	68bb      	ldr	r3, [r7, #8]
2000286e:	2b00      	cmp	r3, #0
20002870:	d1de      	bne.n	20002830 <fill_tms_buffer+0x10>
		}

	}
}
20002872:	bf00      	nop
20002874:	bf00      	nop
20002876:	3710      	adds	r7, #16
20002878:	46bd      	mov	sp, r7
2000287a:	bd80      	pop	{r7, pc}
2000287c:	2000d87c 	.word	0x2000d87c

20002880 <fill_tdi_buffer>:

void fill_tdi_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t *tdi_val_ptr)
{
20002880:	b580      	push	{r7, lr}
20002882:	b084      	sub	sp, #16
20002884:	af00      	add	r7, sp, #0
20002886:	60f8      	str	r0, [r7, #12]
20002888:	60b9      	str	r1, [r7, #8]
2000288a:	607a      	str	r2, [r7, #4]
	//TODO: optimize here!!
	while(n)
2000288c:	e01b      	b.n	200028c6 <fill_tdi_buffer+0x46>
	{
		if(n > 8)
2000288e:	68bb      	ldr	r3, [r7, #8]
20002890:	2b08      	cmp	r3, #8
20002892:	d910      	bls.n	200028b6 <fill_tdi_buffer+0x36>
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, 8, *tdi_val_ptr);
20002894:	687b      	ldr	r3, [r7, #4]
20002896:	781b      	ldrb	r3, [r3, #0]
20002898:	2208      	movs	r2, #8
2000289a:	68f9      	ldr	r1, [r7, #12]
2000289c:	480e      	ldr	r0, [pc, #56]	@ (200028d8 <fill_tdi_buffer+0x58>)
2000289e:	f7ff ff5f 	bl	20002760 <write_nbits_lsb>
			n -= 8;
200028a2:	68bb      	ldr	r3, [r7, #8]
200028a4:	3b08      	subs	r3, #8
200028a6:	60bb      	str	r3, [r7, #8]
			tdi_val_ptr++;
200028a8:	687b      	ldr	r3, [r7, #4]
200028aa:	3301      	adds	r3, #1
200028ac:	607b      	str	r3, [r7, #4]
			total_write_bit_cnt += 8;
200028ae:	68fb      	ldr	r3, [r7, #12]
200028b0:	3308      	adds	r3, #8
200028b2:	60fb      	str	r3, [r7, #12]
200028b4:	e007      	b.n	200028c6 <fill_tdi_buffer+0x46>
		}
		else
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, n, *tdi_val_ptr);
200028b6:	687b      	ldr	r3, [r7, #4]
200028b8:	781b      	ldrb	r3, [r3, #0]
200028ba:	68ba      	ldr	r2, [r7, #8]
200028bc:	68f9      	ldr	r1, [r7, #12]
200028be:	4806      	ldr	r0, [pc, #24]	@ (200028d8 <fill_tdi_buffer+0x58>)
200028c0:	f7ff ff4e 	bl	20002760 <write_nbits_lsb>
			break;
200028c4:	e003      	b.n	200028ce <fill_tdi_buffer+0x4e>
	while(n)
200028c6:	68bb      	ldr	r3, [r7, #8]
200028c8:	2b00      	cmp	r3, #0
200028ca:	d1e0      	bne.n	2000288e <fill_tdi_buffer+0xe>
		}

	}
}
200028cc:	bf00      	nop
200028ce:	bf00      	nop
200028d0:	3710      	adds	r7, #16
200028d2:	46bd      	mov	sp, r7
200028d4:	bd80      	pop	{r7, pc}
200028d6:	bf00      	nop
200028d8:	2000dc7c 	.word	0x2000dc7c

200028dc <calculate_xfer_sizes>:

#define IDX_8_BIT 0
#define IDX_RM1_BIT 1
#define IDX_RM2_BIT 2
void calculate_xfer_sizes(uint16_t input_len, uint8_t *buff)
{
200028dc:	b480      	push	{r7}
200028de:	b085      	sub	sp, #20
200028e0:	af00      	add	r7, sp, #0
200028e2:	4603      	mov	r3, r0
200028e4:	6039      	str	r1, [r7, #0]
200028e6:	80fb      	strh	r3, [r7, #6]
	int isunAligned = input_len % 8 < 4 && input_len % 8 != 0;
200028e8:	88fb      	ldrh	r3, [r7, #6]
200028ea:	f003 0304 	and.w	r3, r3, #4
200028ee:	b29b      	uxth	r3, r3
200028f0:	2b00      	cmp	r3, #0
200028f2:	d107      	bne.n	20002904 <calculate_xfer_sizes+0x28>
200028f4:	88fb      	ldrh	r3, [r7, #6]
200028f6:	f003 0307 	and.w	r3, r3, #7
200028fa:	b29b      	uxth	r3, r3
200028fc:	2b00      	cmp	r3, #0
200028fe:	d001      	beq.n	20002904 <calculate_xfer_sizes+0x28>
20002900:	2301      	movs	r3, #1
20002902:	e000      	b.n	20002906 <calculate_xfer_sizes+0x2a>
20002904:	2300      	movs	r3, #0
20002906:	60fb      	str	r3, [r7, #12]
	int isGreaterThan8 = input_len > 8;
20002908:	88fb      	ldrh	r3, [r7, #6]
2000290a:	2b08      	cmp	r3, #8
2000290c:	bf8c      	ite	hi
2000290e:	2301      	movhi	r3, #1
20002910:	2300      	movls	r3, #0
20002912:	b2db      	uxtb	r3, r3
20002914:	60bb      	str	r3, [r7, #8]

	if(isunAligned && isGreaterThan8)
20002916:	68fb      	ldr	r3, [r7, #12]
20002918:	2b00      	cmp	r3, #0
2000291a:	d01f      	beq.n	2000295c <calculate_xfer_sizes+0x80>
2000291c:	68bb      	ldr	r3, [r7, #8]
2000291e:	2b00      	cmp	r3, #0
20002920:	d01c      	beq.n	2000295c <calculate_xfer_sizes+0x80>
	{
		buff[IDX_8_BIT] = input_len / 8 -2;
20002922:	88fb      	ldrh	r3, [r7, #6]
20002924:	08db      	lsrs	r3, r3, #3
20002926:	b29b      	uxth	r3, r3
20002928:	b2db      	uxtb	r3, r3
2000292a:	3b02      	subs	r3, #2
2000292c:	b2da      	uxtb	r2, r3
2000292e:	683b      	ldr	r3, [r7, #0]
20002930:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = 4;
20002932:	683b      	ldr	r3, [r7, #0]
20002934:	3301      	adds	r3, #1
20002936:	2204      	movs	r2, #4
20002938:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = input_len - buff[IDX_8_BIT]*8 - buff[IDX_RM1_BIT];
2000293a:	88fb      	ldrh	r3, [r7, #6]
2000293c:	b2da      	uxtb	r2, r3
2000293e:	683b      	ldr	r3, [r7, #0]
20002940:	781b      	ldrb	r3, [r3, #0]
20002942:	00db      	lsls	r3, r3, #3
20002944:	b2db      	uxtb	r3, r3
20002946:	1ad3      	subs	r3, r2, r3
20002948:	b2d9      	uxtb	r1, r3
2000294a:	683b      	ldr	r3, [r7, #0]
2000294c:	3301      	adds	r3, #1
2000294e:	781a      	ldrb	r2, [r3, #0]
20002950:	683b      	ldr	r3, [r7, #0]
20002952:	3302      	adds	r3, #2
20002954:	1a8a      	subs	r2, r1, r2
20002956:	b2d2      	uxtb	r2, r2
20002958:	701a      	strb	r2, [r3, #0]
		buff[IDX_8_BIT] = input_len /8;
		buff[IDX_RM1_BIT] = input_len % 8;
		buff[IDX_RM2_BIT] = 0;
	}

}
2000295a:	e024      	b.n	200029a6 <calculate_xfer_sizes+0xca>
	else if (input_len < 8)
2000295c:	88fb      	ldrh	r3, [r7, #6]
2000295e:	2b07      	cmp	r3, #7
20002960:	d80f      	bhi.n	20002982 <calculate_xfer_sizes+0xa6>
		buff[IDX_8_BIT] = 0;
20002962:	683b      	ldr	r3, [r7, #0]
20002964:	2200      	movs	r2, #0
20002966:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = input_len % 8;
20002968:	88fb      	ldrh	r3, [r7, #6]
2000296a:	b2da      	uxtb	r2, r3
2000296c:	683b      	ldr	r3, [r7, #0]
2000296e:	3301      	adds	r3, #1
20002970:	f002 0207 	and.w	r2, r2, #7
20002974:	b2d2      	uxtb	r2, r2
20002976:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = 0;
20002978:	683b      	ldr	r3, [r7, #0]
2000297a:	3302      	adds	r3, #2
2000297c:	2200      	movs	r2, #0
2000297e:	701a      	strb	r2, [r3, #0]
}
20002980:	e011      	b.n	200029a6 <calculate_xfer_sizes+0xca>
		buff[IDX_8_BIT] = input_len /8;
20002982:	88fb      	ldrh	r3, [r7, #6]
20002984:	08db      	lsrs	r3, r3, #3
20002986:	b29b      	uxth	r3, r3
20002988:	b2da      	uxtb	r2, r3
2000298a:	683b      	ldr	r3, [r7, #0]
2000298c:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM1_BIT] = input_len % 8;
2000298e:	88fb      	ldrh	r3, [r7, #6]
20002990:	b2da      	uxtb	r2, r3
20002992:	683b      	ldr	r3, [r7, #0]
20002994:	3301      	adds	r3, #1
20002996:	f002 0207 	and.w	r2, r2, #7
2000299a:	b2d2      	uxtb	r2, r2
2000299c:	701a      	strb	r2, [r3, #0]
		buff[IDX_RM2_BIT] = 0;
2000299e:	683b      	ldr	r3, [r7, #0]
200029a0:	3302      	adds	r3, #2
200029a2:	2200      	movs	r2, #0
200029a4:	701a      	strb	r2, [r3, #0]
}
200029a6:	bf00      	nop
200029a8:	3714      	adds	r7, #20
200029aa:	46bd      	mov	sp, r7
200029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200029b0:	4770      	bx	lr
	...

200029b4 <apply_jtag_xfer>:

void apply_jtag_xfer(const uint8_t *tdi, const uint8_t *tms, uint8_t *tdo, uint32_t cnt)
{
200029b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200029b8:	b09c      	sub	sp, #112	@ 0x70
200029ba:	af02      	add	r7, sp, #8
200029bc:	6278      	str	r0, [r7, #36]	@ 0x24
200029be:	6239      	str	r1, [r7, #32]
200029c0:	61fa      	str	r2, [r7, #28]
200029c2:	61bb      	str	r3, [r7, #24]
	uint8_t xFerSizes[3];

	uint8_t dummyVal = 0;
200029c4:	2300      	movs	r3, #0
200029c6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	calculate_xfer_sizes(cnt, xFerSizes);
200029ca:	69bb      	ldr	r3, [r7, #24]
200029cc:	b29a      	uxth	r2, r3
200029ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
200029d2:	4619      	mov	r1, r3
200029d4:	4610      	mov	r0, r2
200029d6:	f7ff ff81 	bl	200028dc <calculate_xfer_sizes>

	uint32_t currentBit = 0;
200029da:	2300      	movs	r3, #0
200029dc:	667b      	str	r3, [r7, #100]	@ 0x64

	uint8_t *tms_seq_arr = tms;
200029de:	6a3b      	ldr	r3, [r7, #32]
200029e0:	657b      	str	r3, [r7, #84]	@ 0x54

	uint8_t *tdi_seq_arr = tdi;
200029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200029e4:	653b      	str	r3, [r7, #80]	@ 0x50


	while(xFerSizes[IDX_8_BIT])
200029e6:	e040      	b.n	20002a6a <apply_jtag_xfer+0xb6>
	{
		uint8_t tms_val = *tms;
200029e8:	6a3b      	ldr	r3, [r7, #32]
200029ea:	781b      	ldrb	r3, [r3, #0]
200029ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		uint8_t tdi_val = *tdi;
200029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200029f2:	781b      	ldrb	r3, [r3, #0]
200029f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		uint64_t tdo_val;
		if(tms_val != 0 && currentBit != 0)
200029f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
200029fc:	2b00      	cmp	r3, #0
200029fe:	d005      	beq.n	20002a0c <apply_jtag_xfer+0x58>
20002a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002a02:	2b00      	cmp	r3, #0
20002a04:	d002      	beq.n	20002a0c <apply_jtag_xfer+0x58>
		{
			dummyVal = 1;
20002a06:	2301      	movs	r3, #1
20002a08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		}

		SPI_TMS_Transfer(tms_val, 8);
20002a0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
20002a10:	2200      	movs	r2, #0
20002a12:	461c      	mov	r4, r3
20002a14:	4615      	mov	r5, r2
20002a16:	2208      	movs	r2, #8
20002a18:	4620      	mov	r0, r4
20002a1a:	4629      	mov	r1, r5
20002a1c:	f002 f998 	bl	20004d50 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , 8);
20002a20:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
20002a24:	2200      	movs	r2, #0
20002a26:	4698      	mov	r8, r3
20002a28:	4691      	mov	r9, r2
20002a2a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
20002a2e:	2308      	movs	r3, #8
20002a30:	9300      	str	r3, [sp, #0]
20002a32:	4642      	mov	r2, r8
20002a34:	464b      	mov	r3, r9
20002a36:	4608      	mov	r0, r1
20002a38:	f002 fa3a 	bl	20004eb0 <SPI_Transfer>

		*tdo = (uint8_t)tdo_val;
20002a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20002a40:	b2d3      	uxtb	r3, r2
20002a42:	69fa      	ldr	r2, [r7, #28]
20002a44:	7013      	strb	r3, [r2, #0]

		tms++;
20002a46:	6a3b      	ldr	r3, [r7, #32]
20002a48:	3301      	adds	r3, #1
20002a4a:	623b      	str	r3, [r7, #32]
		tdi++;
20002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002a4e:	3301      	adds	r3, #1
20002a50:	627b      	str	r3, [r7, #36]	@ 0x24
		tdo++;
20002a52:	69fb      	ldr	r3, [r7, #28]
20002a54:	3301      	adds	r3, #1
20002a56:	61fb      	str	r3, [r7, #28]

		xFerSizes[IDX_8_BIT]--;
20002a58:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
20002a5c:	3b01      	subs	r3, #1
20002a5e:	b2db      	uxtb	r3, r3
20002a60:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

		currentBit+= 8;
20002a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002a66:	3308      	adds	r3, #8
20002a68:	667b      	str	r3, [r7, #100]	@ 0x64
	while(xFerSizes[IDX_8_BIT])
20002a6a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
20002a6e:	2b00      	cmp	r3, #0
20002a70:	d1ba      	bne.n	200029e8 <apply_jtag_xfer+0x34>
	}

	while(xFerSizes[IDX_RM1_BIT])
20002a72:	e04c      	b.n	20002b0e <apply_jtag_xfer+0x15a>
	{
		uint32_t delay_cnt = 2500;
20002a74:	f640 13c4 	movw	r3, #2500	@ 0x9c4
20002a78:	663b      	str	r3, [r7, #96]	@ 0x60

		while(delay_cnt--)
20002a7a:	e000      	b.n	20002a7e <apply_jtag_xfer+0xca>
	    {
		  __asm("nop");
20002a7c:	bf00      	nop
		while(delay_cnt--)
20002a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20002a80:	1e5a      	subs	r2, r3, #1
20002a82:	663a      	str	r2, [r7, #96]	@ 0x60
20002a84:	2b00      	cmp	r3, #0
20002a86:	d1f9      	bne.n	20002a7c <apply_jtag_xfer+0xc8>
	    }

		uint16_t tms_val = extract_nbits_lsb(tms_seq_arr, currentBit, xFerSizes[IDX_RM1_BIT]);
20002a88:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002a8c:	461a      	mov	r2, r3
20002a8e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002a90:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20002a92:	f7ff fe27 	bl	200026e4 <extract_nbits_lsb>
20002a96:	4603      	mov	r3, r0
20002a98:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		uint16_t tdi_val = extract_nbits_lsb(tdi_seq_arr, currentBit, xFerSizes[IDX_RM1_BIT]);;
20002a9c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002aa0:	461a      	mov	r2, r3
20002aa2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002aa4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
20002aa6:	f7ff fe1d 	bl	200026e4 <extract_nbits_lsb>
20002aaa:	4603      	mov	r3, r0
20002aac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		uint64_t tdo_val;

		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM1_BIT]);
20002ab0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
20002ab4:	2200      	movs	r2, #0
20002ab6:	613b      	str	r3, [r7, #16]
20002ab8:	617a      	str	r2, [r7, #20]
20002aba:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002abe:	461a      	mov	r2, r3
20002ac0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20002ac4:	f002 f944 	bl	20004d50 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , xFerSizes[IDX_RM1_BIT]);
20002ac8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
20002acc:	2200      	movs	r2, #0
20002ace:	60bb      	str	r3, [r7, #8]
20002ad0:	60fa      	str	r2, [r7, #12]
20002ad2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002ad6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
20002ada:	9300      	str	r3, [sp, #0]
20002adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20002ae0:	4608      	mov	r0, r1
20002ae2:	f002 f9e5 	bl	20004eb0 <SPI_Transfer>

		write_nbits_lsb(TDO_SEQ_ARR, currentBit, xFerSizes[IDX_RM1_BIT], tdo_val);
20002ae6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002aea:	4619      	mov	r1, r3
20002aec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
20002af0:	b293      	uxth	r3, r2
20002af2:	460a      	mov	r2, r1
20002af4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002af6:	4834      	ldr	r0, [pc, #208]	@ (20002bc8 <apply_jtag_xfer+0x214>)
20002af8:	f7ff fe32 	bl	20002760 <write_nbits_lsb>

		currentBit+= xFerSizes[IDX_RM1_BIT];
20002afc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002b00:	461a      	mov	r2, r3
20002b02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002b04:	4413      	add	r3, r2
20002b06:	667b      	str	r3, [r7, #100]	@ 0x64

		xFerSizes[IDX_RM1_BIT] = 0;
20002b08:	2300      	movs	r3, #0
20002b0a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	while(xFerSizes[IDX_RM1_BIT])
20002b0e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
20002b12:	2b00      	cmp	r3, #0
20002b14:	d1ae      	bne.n	20002a74 <apply_jtag_xfer+0xc0>

	}

	while(xFerSizes[IDX_RM2_BIT])
20002b16:	e04c      	b.n	20002bb2 <apply_jtag_xfer+0x1fe>
	{
		//TODO: extract bits!!
		uint32_t delay_cnt = 2000;
20002b18:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
20002b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c

		while(delay_cnt--)
20002b1e:	e000      	b.n	20002b22 <apply_jtag_xfer+0x16e>
		{
		  __asm("nop");
20002b20:	bf00      	nop
		while(delay_cnt--)
20002b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20002b24:	1e5a      	subs	r2, r3, #1
20002b26:	65fa      	str	r2, [r7, #92]	@ 0x5c
20002b28:	2b00      	cmp	r3, #0
20002b2a:	d1f9      	bne.n	20002b20 <apply_jtag_xfer+0x16c>
		}

		uint16_t tms_val = extract_nbits_lsb(tms_seq_arr, currentBit, xFerSizes[IDX_RM2_BIT]);
20002b2c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002b30:	461a      	mov	r2, r3
20002b32:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002b34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20002b36:	f7ff fdd5 	bl	200026e4 <extract_nbits_lsb>
20002b3a:	4603      	mov	r3, r0
20002b3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		uint16_t tdi_val = extract_nbits_lsb(tdi_seq_arr, currentBit, xFerSizes[IDX_RM2_BIT]);;
20002b40:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002b44:	461a      	mov	r2, r3
20002b46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002b48:	6d38      	ldr	r0, [r7, #80]	@ 0x50
20002b4a:	f7ff fdcb 	bl	200026e4 <extract_nbits_lsb>
20002b4e:	4603      	mov	r3, r0
20002b50:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		uint64_t tdo_val;

		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM2_BIT]);
20002b54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
20002b58:	2200      	movs	r2, #0
20002b5a:	469a      	mov	sl, r3
20002b5c:	4693      	mov	fp, r2
20002b5e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002b62:	461a      	mov	r2, r3
20002b64:	4650      	mov	r0, sl
20002b66:	4659      	mov	r1, fp
20002b68:	f002 f8f2 	bl	20004d50 <SPI_TMS_Transfer>
		SPI_Transfer(&tdo_val, tdi_val , xFerSizes[IDX_RM2_BIT]);
20002b6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
20002b70:	2200      	movs	r2, #0
20002b72:	603b      	str	r3, [r7, #0]
20002b74:	607a      	str	r2, [r7, #4]
20002b76:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002b7a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
20002b7e:	9300      	str	r3, [sp, #0]
20002b80:	e9d7 2300 	ldrd	r2, r3, [r7]
20002b84:	4608      	mov	r0, r1
20002b86:	f002 f993 	bl	20004eb0 <SPI_Transfer>

		write_nbits_lsb(TDO_SEQ_ARR, currentBit, xFerSizes[IDX_RM2_BIT], tdo_val);
20002b8a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002b8e:	4619      	mov	r1, r3
20002b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
20002b94:	b293      	uxth	r3, r2
20002b96:	460a      	mov	r2, r1
20002b98:	6e79      	ldr	r1, [r7, #100]	@ 0x64
20002b9a:	480b      	ldr	r0, [pc, #44]	@ (20002bc8 <apply_jtag_xfer+0x214>)
20002b9c:	f7ff fde0 	bl	20002760 <write_nbits_lsb>

		currentBit+= xFerSizes[IDX_RM2_BIT];
20002ba0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002ba4:	461a      	mov	r2, r3
20002ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002ba8:	4413      	add	r3, r2
20002baa:	667b      	str	r3, [r7, #100]	@ 0x64

		xFerSizes[IDX_RM2_BIT] = 0;
20002bac:	2300      	movs	r3, #0
20002bae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	while(xFerSizes[IDX_RM2_BIT])
20002bb2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
20002bb6:	2b00      	cmp	r3, #0
20002bb8:	d1ae      	bne.n	20002b18 <apply_jtag_xfer+0x164>

	}


}
20002bba:	bf00      	nop
20002bbc:	bf00      	nop
20002bbe:	3768      	adds	r7, #104	@ 0x68
20002bc0:	46bd      	mov	sp, r7
20002bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20002bc6:	bf00      	nop
20002bc8:	2000e07c 	.word	0x2000e07c

20002bcc <JTAG_Sequence>:
//   info:   sequence information
//   tdi:    pointer to TDI generated data
//   tdo:    pointer to TDO captured data
//   return: none
uint32_t JTAG_Sequence (uint32_t count, const uint8_t *request, uint8_t *response)
{
20002bcc:	b580      	push	{r7, lr}
20002bce:	b092      	sub	sp, #72	@ 0x48
20002bd0:	af02      	add	r7, sp, #8
20002bd2:	60f8      	str	r0, [r7, #12]
20002bd4:	60b9      	str	r1, [r7, #8]
20002bd6:	607a      	str	r2, [r7, #4]
	static volatile uint32_t elapsed_time;

	static volatile uint32_t memcpy_elapsed_time;
	static volatile uint32_t memcpy_first;

	firstTime = DWT->CYCCNT;
20002bd8:	4b69      	ldr	r3, [pc, #420]	@ (20002d80 <JTAG_Sequence+0x1b4>)
20002bda:	685b      	ldr	r3, [r3, #4]
20002bdc:	4a69      	ldr	r2, [pc, #420]	@ (20002d84 <JTAG_Sequence+0x1b8>)
20002bde:	6013      	str	r3, [r2, #0]


	static int cnt = 0;
	int dummyVal = 31;
20002be0:	231f      	movs	r3, #31
20002be2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t total_write_bit_cnt = 0;
20002be4:	2300      	movs	r3, #0
20002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t total_read_bit_cnt = 0;
20002be8:	2300      	movs	r3, #0
20002bea:	63bb      	str	r3, [r7, #56]	@ 0x38

  uint32_t total_write_word_cnt = 0;
20002bec:	2300      	movs	r3, #0
20002bee:	623b      	str	r3, [r7, #32]
  uint32_t total_read_word_cnt = 0;
20002bf0:	2300      	movs	r3, #0
20002bf2:	61fb      	str	r3, [r7, #28]

  uint32_t tdo_capture_index = 0;
20002bf4:	2300      	movs	r3, #0
20002bf6:	61bb      	str	r3, [r7, #24]

  uint32_t tms_seq_val = 0;
20002bf8:	2300      	movs	r3, #0
20002bfa:	617b      	str	r3, [r7, #20]

  uint32_t i;

  uint8_t *req_base = request;
20002bfc:	68bb      	ldr	r3, [r7, #8]
20002bfe:	633b      	str	r3, [r7, #48]	@ 0x30

  memset(TMS_SEQ_ARR, 0, 256);
20002c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002c04:	2100      	movs	r1, #0
20002c06:	4860      	ldr	r0, [pc, #384]	@ (20002d88 <JTAG_Sequence+0x1bc>)
20002c08:	f00a fbc2 	bl	2000d390 <memset>

  memset(TDI_SEQ_ARR, 0, 256);
20002c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002c10:	2100      	movs	r1, #0
20002c12:	485e      	ldr	r0, [pc, #376]	@ (20002d8c <JTAG_Sequence+0x1c0>)
20002c14:	f00a fbbc 	bl	2000d390 <memset>

  memset(TDO_SEQ_ARR, 0, 256);
20002c18:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002c1c:	2100      	movs	r1, #0
20002c1e:	485c      	ldr	r0, [pc, #368]	@ (20002d90 <JTAG_Sequence+0x1c4>)
20002c20:	f00a fbb6 	bl	2000d390 <memset>

  memset(TDO_PROCESSED_SEQ_ARR, 0, 256);
20002c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002c28:	2100      	movs	r1, #0
20002c2a:	485a      	ldr	r0, [pc, #360]	@ (20002d94 <JTAG_Sequence+0x1c8>)
20002c2c:	f00a fbb0 	bl	2000d390 <memset>


  cnt++;
20002c30:	4b59      	ldr	r3, [pc, #356]	@ (20002d98 <JTAG_Sequence+0x1cc>)
20002c32:	681b      	ldr	r3, [r3, #0]
20002c34:	3301      	adds	r3, #1
20002c36:	4a58      	ldr	r2, [pc, #352]	@ (20002d98 <JTAG_Sequence+0x1cc>)
20002c38:	6013      	str	r3, [r2, #0]


  for(i = 0; i < count; i++)
20002c3a:	2300      	movs	r3, #0
20002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
20002c3e:	e038      	b.n	20002cb2 <JTAG_Sequence+0xe6>
  {
	  uint32_t n;

	  uint8_t tms_val = (*request & JTAG_SEQUENCE_TMS) >> 6;
20002c40:	68bb      	ldr	r3, [r7, #8]
20002c42:	781b      	ldrb	r3, [r3, #0]
20002c44:	099b      	lsrs	r3, r3, #6
20002c46:	b2db      	uxtb	r3, r3
20002c48:	f003 0301 	and.w	r3, r3, #1
20002c4c:	74fb      	strb	r3, [r7, #19]

	  uint8_t tdi_val = *(request +1);
20002c4e:	68bb      	ldr	r3, [r7, #8]
20002c50:	3301      	adds	r3, #1
20002c52:	781b      	ldrb	r3, [r3, #0]
20002c54:	74bb      	strb	r3, [r7, #18]

	  n = *request & JTAG_SEQUENCE_TCK;
20002c56:	68bb      	ldr	r3, [r7, #8]
20002c58:	781b      	ldrb	r3, [r3, #0]
20002c5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20002c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  if (n == 0U)
20002c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002c62:	2b00      	cmp	r3, #0
20002c64:	d101      	bne.n	20002c6a <JTAG_Sequence+0x9e>
	  {
		  n = 64U;
20002c66:	2340      	movs	r3, #64	@ 0x40
20002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  }

	  fill_tms_buffer(total_write_bit_cnt, n, tms_val);
20002c6a:	7cfb      	ldrb	r3, [r7, #19]
20002c6c:	461a      	mov	r2, r3
20002c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
20002c70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
20002c72:	f7ff fdd5 	bl	20002820 <fill_tms_buffer>
	  fill_tdi_buffer(total_write_bit_cnt, n, (request +1));
20002c76:	68bb      	ldr	r3, [r7, #8]
20002c78:	3301      	adds	r3, #1
20002c7a:	461a      	mov	r2, r3
20002c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
20002c7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
20002c80:	f7ff fdfe 	bl	20002880 <fill_tdi_buffer>


	  total_write_bit_cnt += n;
20002c84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
20002c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002c88:	4413      	add	r3, r2
20002c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  if(*request & JTAG_SEQUENCE_TDO)
20002c8c:	68bb      	ldr	r3, [r7, #8]
20002c8e:	781b      	ldrb	r3, [r3, #0]
20002c90:	b25b      	sxtb	r3, r3
20002c92:	2b00      	cmp	r3, #0
20002c94:	da03      	bge.n	20002c9e <JTAG_Sequence+0xd2>
	  {
		  total_read_bit_cnt += n;
20002c96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
20002c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002c9a:	4413      	add	r3, r2
20002c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }


	  request += ( (n + 7U) /8U ) + 1;
20002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002ca0:	3307      	adds	r3, #7
20002ca2:	08db      	lsrs	r3, r3, #3
20002ca4:	3301      	adds	r3, #1
20002ca6:	68ba      	ldr	r2, [r7, #8]
20002ca8:	4413      	add	r3, r2
20002caa:	60bb      	str	r3, [r7, #8]
  for(i = 0; i < count; i++)
20002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002cae:	3301      	adds	r3, #1
20002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
20002cb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20002cb4:	68fb      	ldr	r3, [r7, #12]
20002cb6:	429a      	cmp	r2, r3
20002cb8:	d3c2      	bcc.n	20002c40 <JTAG_Sequence+0x74>

  }

  apply_jtag_xfer(TDI_SEQ_ARR, TMS_SEQ_ARR, TDO_SEQ_ARR, total_write_bit_cnt);
20002cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002cbc:	4a34      	ldr	r2, [pc, #208]	@ (20002d90 <JTAG_Sequence+0x1c4>)
20002cbe:	4932      	ldr	r1, [pc, #200]	@ (20002d88 <JTAG_Sequence+0x1bc>)
20002cc0:	4832      	ldr	r0, [pc, #200]	@ (20002d8c <JTAG_Sequence+0x1c0>)
20002cc2:	f7ff fe77 	bl	200029b4 <apply_jtag_xfer>

  total_write_bit_cnt = 0;
20002cc6:	2300      	movs	r3, #0
20002cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  total_read_bit_cnt = 0;
20002cca:	2300      	movs	r3, #0
20002ccc:	63bb      	str	r3, [r7, #56]	@ 0x38

  for(i = 0; i < count; i++)
20002cce:	2300      	movs	r3, #0
20002cd0:	637b      	str	r3, [r7, #52]	@ 0x34
20002cd2:	e032      	b.n	20002d3a <JTAG_Sequence+0x16e>
  {
	  uint32_t n;



	  n = *req_base & JTAG_SEQUENCE_TCK;
20002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002cd6:	781b      	ldrb	r3, [r3, #0]
20002cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28

	  if (n == 0U)
20002cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002ce0:	2b00      	cmp	r3, #0
20002ce2:	d101      	bne.n	20002ce8 <JTAG_Sequence+0x11c>
  	  {
  		  n = 64U;
20002ce4:	2340      	movs	r3, #64	@ 0x40
20002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  	  }



	  if(*req_base & JTAG_SEQUENCE_TDO)
20002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002cea:	781b      	ldrb	r3, [r3, #0]
20002cec:	b25b      	sxtb	r3, r3
20002cee:	2b00      	cmp	r3, #0
20002cf0:	da15      	bge.n	20002d1e <JTAG_Sequence+0x152>
	  {

		  copy_bits_lsb(TDO_SEQ_ARR, total_write_bit_cnt, n, TDO_PROCESSED_SEQ_ARR, total_read_bit_cnt);
20002cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002cf4:	9300      	str	r3, [sp, #0]
20002cf6:	4b27      	ldr	r3, [pc, #156]	@ (20002d94 <JTAG_Sequence+0x1c8>)
20002cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
20002cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
20002cfc:	4824      	ldr	r0, [pc, #144]	@ (20002d90 <JTAG_Sequence+0x1c4>)
20002cfe:	f7ff fc95 	bl	2000262c <copy_bits_lsb>
		  total_read_bit_cnt += n;
20002d02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
20002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002d06:	4413      	add	r3, r2
20002d08:	63bb      	str	r3, [r7, #56]	@ 0x38

		  if(total_read_bit_cnt % 8 )
20002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002d0c:	f003 0307 	and.w	r3, r3, #7
20002d10:	2b00      	cmp	r3, #0
20002d12:	d004      	beq.n	20002d1e <JTAG_Sequence+0x152>
		  {
			  total_read_bit_cnt = ( (total_read_bit_cnt / 8) +1) *8;
20002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002d16:	08db      	lsrs	r3, r3, #3
20002d18:	3301      	adds	r3, #1
20002d1a:	00db      	lsls	r3, r3, #3
20002d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
		  }


	  }

	  total_write_bit_cnt += n;
20002d1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
20002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002d22:	4413      	add	r3, r2
20002d24:	63fb      	str	r3, [r7, #60]	@ 0x3c


	  req_base += ( (n + 7U) /8U ) + 1;
20002d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002d28:	3307      	adds	r3, #7
20002d2a:	08db      	lsrs	r3, r3, #3
20002d2c:	3301      	adds	r3, #1
20002d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20002d30:	4413      	add	r3, r2
20002d32:	633b      	str	r3, [r7, #48]	@ 0x30
  for(i = 0; i < count; i++)
20002d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002d36:	3301      	adds	r3, #1
20002d38:	637b      	str	r3, [r7, #52]	@ 0x34
20002d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20002d3c:	68fb      	ldr	r3, [r7, #12]
20002d3e:	429a      	cmp	r2, r3
20002d40:	d3c8      	bcc.n	20002cd4 <JTAG_Sequence+0x108>
    }


  //shift_right_bitstream_lsb(TDO_SEQ_ARR, total_write_bit_cnt, total_write_bit_cnt - total_read_bit_cnt);

  memcpy_first = DWT->CYCCNT;
20002d42:	4b0f      	ldr	r3, [pc, #60]	@ (20002d80 <JTAG_Sequence+0x1b4>)
20002d44:	685b      	ldr	r3, [r3, #4]
20002d46:	4a15      	ldr	r2, [pc, #84]	@ (20002d9c <JTAG_Sequence+0x1d0>)
20002d48:	6013      	str	r3, [r2, #0]

  memcpy(response, TDO_PROCESSED_SEQ_ARR, total_read_bit_cnt /8);
20002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002d4c:	08db      	lsrs	r3, r3, #3
20002d4e:	461a      	mov	r2, r3
20002d50:	4910      	ldr	r1, [pc, #64]	@ (20002d94 <JTAG_Sequence+0x1c8>)
20002d52:	6878      	ldr	r0, [r7, #4]
20002d54:	f00a fb60 	bl	2000d418 <memcpy>

  memcpy_elapsed_time = DWT ->CYCCNT - memcpy_first;
20002d58:	4b09      	ldr	r3, [pc, #36]	@ (20002d80 <JTAG_Sequence+0x1b4>)
20002d5a:	685a      	ldr	r2, [r3, #4]
20002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (20002d9c <JTAG_Sequence+0x1d0>)
20002d5e:	681b      	ldr	r3, [r3, #0]
20002d60:	1ad3      	subs	r3, r2, r3
20002d62:	4a0f      	ldr	r2, [pc, #60]	@ (20002da0 <JTAG_Sequence+0x1d4>)
20002d64:	6013      	str	r3, [r2, #0]

  elapsed_time = DWT->CYCCNT - firstTime;
20002d66:	4b06      	ldr	r3, [pc, #24]	@ (20002d80 <JTAG_Sequence+0x1b4>)
20002d68:	685a      	ldr	r2, [r3, #4]
20002d6a:	4b06      	ldr	r3, [pc, #24]	@ (20002d84 <JTAG_Sequence+0x1b8>)
20002d6c:	681b      	ldr	r3, [r3, #0]
20002d6e:	1ad3      	subs	r3, r2, r3
20002d70:	4a0c      	ldr	r2, [pc, #48]	@ (20002da4 <JTAG_Sequence+0x1d8>)
20002d72:	6013      	str	r3, [r2, #0]

  return total_read_bit_cnt / 8;
20002d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002d76:	08db      	lsrs	r3, r3, #3

}
20002d78:	4618      	mov	r0, r3
20002d7a:	3740      	adds	r7, #64	@ 0x40
20002d7c:	46bd      	mov	sp, r7
20002d7e:	bd80      	pop	{r7, pc}
20002d80:	e0001000 	.word	0xe0001000
20002d84:	2000e87c 	.word	0x2000e87c
20002d88:	2000d87c 	.word	0x2000d87c
20002d8c:	2000dc7c 	.word	0x2000dc7c
20002d90:	2000e07c 	.word	0x2000e07c
20002d94:	2000e47c 	.word	0x2000e47c
20002d98:	2000e880 	.word	0x2000e880
20002d9c:	2000e884 	.word	0x2000e884
20002da0:	2000e888 	.word	0x2000e888
20002da4:	2000e88c 	.word	0x2000e88c

20002da8 <JTAG_IR_Fast>:
}


#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_FAST()
JTAG_IR_Function(Fast)
20002da8:	b580      	push	{r7, lr}
20002daa:	b084      	sub	sp, #16
20002dac:	af00      	add	r7, sp, #0
20002dae:	6078      	str	r0, [r7, #4]
20002db0:	f7ff fc10 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20002db4:	f7ff fc07 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
  __NOP();
#endif
#if (DELAY_FAST_CYCLES >= 3U)
  __NOP();
#endif
}
20002db8:	bf00      	nop
20002dba:	f7ff fbfd 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002dbe:	bf00      	nop
20002dc0:	f7ff fc01 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002dc4:	bf00      	nop
20002dc6:	f7ff fbf7 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002dca:	bf00      	nop
20002dcc:	f7ff fc09 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
20002dd0:	f7ff fbf9 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002dd4:	bf00      	nop
20002dd6:	f7ff fbef 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002dda:	bf00      	nop
20002ddc:	f7ff fbf3 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002de0:	bf00      	nop
20002de2:	f7ff fbe9 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002de6:	bf00      	nop
20002de8:	2001      	movs	r0, #1
20002dea:	f7ff fc01 	bl	200025f0 <PIN_TDI_OUT>
20002dee:	4b3f      	ldr	r3, [pc, #252]	@ (20002eec <JTAG_IR_Fast+0x144>)
20002df0:	7edb      	ldrb	r3, [r3, #27]
20002df2:	4a3e      	ldr	r2, [pc, #248]	@ (20002eec <JTAG_IR_Fast+0x144>)
20002df4:	3310      	adds	r3, #16
20002df6:	005b      	lsls	r3, r3, #1
20002df8:	4413      	add	r3, r2
20002dfa:	889b      	ldrh	r3, [r3, #4]
20002dfc:	60fb      	str	r3, [r7, #12]
20002dfe:	e008      	b.n	20002e12 <JTAG_IR_Fast+0x6a>
20002e00:	f7ff fbe1 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002e04:	bf00      	nop
20002e06:	f7ff fbd7 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002e0a:	bf00      	nop
20002e0c:	68fb      	ldr	r3, [r7, #12]
20002e0e:	3b01      	subs	r3, #1
20002e10:	60fb      	str	r3, [r7, #12]
20002e12:	68fb      	ldr	r3, [r7, #12]
20002e14:	2b00      	cmp	r3, #0
20002e16:	d1f3      	bne.n	20002e00 <JTAG_IR_Fast+0x58>
20002e18:	4b34      	ldr	r3, [pc, #208]	@ (20002eec <JTAG_IR_Fast+0x144>)
20002e1a:	7edb      	ldrb	r3, [r3, #27]
20002e1c:	461a      	mov	r2, r3
20002e1e:	4b33      	ldr	r3, [pc, #204]	@ (20002eec <JTAG_IR_Fast+0x144>)
20002e20:	4413      	add	r3, r2
20002e22:	7f1b      	ldrb	r3, [r3, #28]
20002e24:	3b01      	subs	r3, #1
20002e26:	60fb      	str	r3, [r7, #12]
20002e28:	e00e      	b.n	20002e48 <JTAG_IR_Fast+0xa0>
20002e2a:	6878      	ldr	r0, [r7, #4]
20002e2c:	f7ff fbe0 	bl	200025f0 <PIN_TDI_OUT>
20002e30:	f7ff fbc9 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002e34:	bf00      	nop
20002e36:	f7ff fbbf 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002e3a:	bf00      	nop
20002e3c:	687b      	ldr	r3, [r7, #4]
20002e3e:	085b      	lsrs	r3, r3, #1
20002e40:	607b      	str	r3, [r7, #4]
20002e42:	68fb      	ldr	r3, [r7, #12]
20002e44:	3b01      	subs	r3, #1
20002e46:	60fb      	str	r3, [r7, #12]
20002e48:	68fb      	ldr	r3, [r7, #12]
20002e4a:	2b00      	cmp	r3, #0
20002e4c:	d1ed      	bne.n	20002e2a <JTAG_IR_Fast+0x82>
20002e4e:	4b27      	ldr	r3, [pc, #156]	@ (20002eec <JTAG_IR_Fast+0x144>)
20002e50:	7edb      	ldrb	r3, [r3, #27]
20002e52:	4a26      	ldr	r2, [pc, #152]	@ (20002eec <JTAG_IR_Fast+0x144>)
20002e54:	3318      	adds	r3, #24
20002e56:	005b      	lsls	r3, r3, #1
20002e58:	4413      	add	r3, r2
20002e5a:	889b      	ldrh	r3, [r3, #4]
20002e5c:	60fb      	str	r3, [r7, #12]
20002e5e:	68fb      	ldr	r3, [r7, #12]
20002e60:	2b00      	cmp	r3, #0
20002e62:	d023      	beq.n	20002eac <JTAG_IR_Fast+0x104>
20002e64:	6878      	ldr	r0, [r7, #4]
20002e66:	f7ff fbc3 	bl	200025f0 <PIN_TDI_OUT>
20002e6a:	f7ff fbac 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002e6e:	bf00      	nop
20002e70:	f7ff fba2 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002e74:	bf00      	nop
20002e76:	2001      	movs	r0, #1
20002e78:	f7ff fbba 	bl	200025f0 <PIN_TDI_OUT>
20002e7c:	68fb      	ldr	r3, [r7, #12]
20002e7e:	3b01      	subs	r3, #1
20002e80:	60fb      	str	r3, [r7, #12]
20002e82:	e008      	b.n	20002e96 <JTAG_IR_Fast+0xee>
20002e84:	f7ff fb9f 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002e88:	bf00      	nop
20002e8a:	f7ff fb95 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002e8e:	bf00      	nop
20002e90:	68fb      	ldr	r3, [r7, #12]
20002e92:	3b01      	subs	r3, #1
20002e94:	60fb      	str	r3, [r7, #12]
20002e96:	68fb      	ldr	r3, [r7, #12]
20002e98:	2b00      	cmp	r3, #0
20002e9a:	d1f3      	bne.n	20002e84 <JTAG_IR_Fast+0xdc>
20002e9c:	f7ff fb9a 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20002ea0:	f7ff fb91 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002ea4:	bf00      	nop
20002ea6:	f7ff fb87 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002eaa:	e00a      	b.n	20002ec2 <JTAG_IR_Fast+0x11a>
20002eac:	f7ff fb92 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20002eb0:	6878      	ldr	r0, [r7, #4]
20002eb2:	f7ff fb9d 	bl	200025f0 <PIN_TDI_OUT>
20002eb6:	f7ff fb86 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002eba:	bf00      	nop
20002ebc:	f7ff fb7c 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002ec0:	bf00      	nop
20002ec2:	f7ff fb80 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002ec6:	bf00      	nop
20002ec8:	f7ff fb76 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002ecc:	bf00      	nop
20002ece:	f7ff fb88 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
20002ed2:	f7ff fb78 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002ed6:	bf00      	nop
20002ed8:	f7ff fb6e 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002edc:	bf00      	nop
20002ede:	2001      	movs	r0, #1
20002ee0:	f7ff fb86 	bl	200025f0 <PIN_TDI_OUT>
20002ee4:	3710      	adds	r7, #16
20002ee6:	46bd      	mov	sp, r7
20002ee8:	bd80      	pop	{r7, pc}
20002eea:	bf00      	nop
20002eec:	2000d834 	.word	0x2000d834

20002ef0 <JTAG_TransferFast>:
JTAG_TransferFunction(Fast)
20002ef0:	b580      	push	{r7, lr}
20002ef2:	b086      	sub	sp, #24
20002ef4:	af00      	add	r7, sp, #0
20002ef6:	6078      	str	r0, [r7, #4]
20002ef8:	6039      	str	r1, [r7, #0]
20002efa:	f7ff fb6b 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20002efe:	f7ff fb62 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002f02:	bf00      	nop
20002f04:	f7ff fb58 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002f08:	bf00      	nop
20002f0a:	f7ff fb6a 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
20002f0e:	f7ff fb5a 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002f12:	bf00      	nop
20002f14:	f7ff fb50 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002f18:	bf00      	nop
20002f1a:	f7ff fb54 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002f1e:	bf00      	nop
20002f20:	f7ff fb4a 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002f24:	bf00      	nop
20002f26:	4b9a      	ldr	r3, [pc, #616]	@ (20003190 <JTAG_TransferFast+0x2a0>)
20002f28:	7edb      	ldrb	r3, [r3, #27]
20002f2a:	60fb      	str	r3, [r7, #12]
20002f2c:	e008      	b.n	20002f40 <JTAG_TransferFast+0x50>
20002f2e:	f7ff fb4a 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002f32:	bf00      	nop
20002f34:	f7ff fb40 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002f38:	bf00      	nop
20002f3a:	68fb      	ldr	r3, [r7, #12]
20002f3c:	3b01      	subs	r3, #1
20002f3e:	60fb      	str	r3, [r7, #12]
20002f40:	68fb      	ldr	r3, [r7, #12]
20002f42:	2b00      	cmp	r3, #0
20002f44:	d1f3      	bne.n	20002f2e <JTAG_TransferFast+0x3e>
20002f46:	687b      	ldr	r3, [r7, #4]
20002f48:	085b      	lsrs	r3, r3, #1
20002f4a:	4618      	mov	r0, r3
20002f4c:	f7ff fb50 	bl	200025f0 <PIN_TDI_OUT>
20002f50:	f7ff fb39 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002f54:	bf00      	nop
20002f56:	f7ff fb55 	bl	20002604 <PIN_TDO_IN>
20002f5a:	6178      	str	r0, [r7, #20]
20002f5c:	f7ff fb2c 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002f60:	bf00      	nop
20002f62:	697b      	ldr	r3, [r7, #20]
20002f64:	005b      	lsls	r3, r3, #1
20002f66:	60bb      	str	r3, [r7, #8]
20002f68:	687b      	ldr	r3, [r7, #4]
20002f6a:	089b      	lsrs	r3, r3, #2
20002f6c:	4618      	mov	r0, r3
20002f6e:	f7ff fb3f 	bl	200025f0 <PIN_TDI_OUT>
20002f72:	f7ff fb28 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002f76:	bf00      	nop
20002f78:	f7ff fb44 	bl	20002604 <PIN_TDO_IN>
20002f7c:	6178      	str	r0, [r7, #20]
20002f7e:	f7ff fb1b 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002f82:	bf00      	nop
20002f84:	68ba      	ldr	r2, [r7, #8]
20002f86:	697b      	ldr	r3, [r7, #20]
20002f88:	4313      	orrs	r3, r2
20002f8a:	60bb      	str	r3, [r7, #8]
20002f8c:	687b      	ldr	r3, [r7, #4]
20002f8e:	08db      	lsrs	r3, r3, #3
20002f90:	4618      	mov	r0, r3
20002f92:	f7ff fb2d 	bl	200025f0 <PIN_TDI_OUT>
20002f96:	f7ff fb16 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002f9a:	bf00      	nop
20002f9c:	f7ff fb32 	bl	20002604 <PIN_TDO_IN>
20002fa0:	6178      	str	r0, [r7, #20]
20002fa2:	f7ff fb09 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002fa6:	bf00      	nop
20002fa8:	697b      	ldr	r3, [r7, #20]
20002faa:	009b      	lsls	r3, r3, #2
20002fac:	68ba      	ldr	r2, [r7, #8]
20002fae:	4313      	orrs	r3, r2
20002fb0:	60bb      	str	r3, [r7, #8]
20002fb2:	68bb      	ldr	r3, [r7, #8]
20002fb4:	2b01      	cmp	r3, #1
20002fb6:	d008      	beq.n	20002fca <JTAG_TransferFast+0xda>
20002fb8:	f7ff fb0c 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20002fbc:	f7ff fb03 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002fc0:	bf00      	nop
20002fc2:	f7ff faf9 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002fc6:	bf00      	nop
20002fc8:	e0b2      	b.n	20003130 <JTAG_TransferFast+0x240>
20002fca:	687b      	ldr	r3, [r7, #4]
20002fcc:	f003 0302 	and.w	r3, r3, #2
20002fd0:	2b00      	cmp	r3, #0
20002fd2:	d05e      	beq.n	20003092 <JTAG_TransferFast+0x1a2>
20002fd4:	2300      	movs	r3, #0
20002fd6:	613b      	str	r3, [r7, #16]
20002fd8:	231f      	movs	r3, #31
20002fda:	60fb      	str	r3, [r7, #12]
20002fdc:	e013      	b.n	20003006 <JTAG_TransferFast+0x116>
20002fde:	f7ff faf2 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20002fe2:	bf00      	nop
20002fe4:	f7ff fb0e 	bl	20002604 <PIN_TDO_IN>
20002fe8:	6178      	str	r0, [r7, #20]
20002fea:	f7ff fae5 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20002fee:	bf00      	nop
20002ff0:	697b      	ldr	r3, [r7, #20]
20002ff2:	07db      	lsls	r3, r3, #31
20002ff4:	693a      	ldr	r2, [r7, #16]
20002ff6:	4313      	orrs	r3, r2
20002ff8:	613b      	str	r3, [r7, #16]
20002ffa:	693b      	ldr	r3, [r7, #16]
20002ffc:	085b      	lsrs	r3, r3, #1
20002ffe:	613b      	str	r3, [r7, #16]
20003000:	68fb      	ldr	r3, [r7, #12]
20003002:	3b01      	subs	r3, #1
20003004:	60fb      	str	r3, [r7, #12]
20003006:	68fb      	ldr	r3, [r7, #12]
20003008:	2b00      	cmp	r3, #0
2000300a:	d1e8      	bne.n	20002fde <JTAG_TransferFast+0xee>
2000300c:	4b60      	ldr	r3, [pc, #384]	@ (20003190 <JTAG_TransferFast+0x2a0>)
2000300e:	7e9b      	ldrb	r3, [r3, #26]
20003010:	461a      	mov	r2, r3
20003012:	4b5f      	ldr	r3, [pc, #380]	@ (20003190 <JTAG_TransferFast+0x2a0>)
20003014:	7edb      	ldrb	r3, [r3, #27]
20003016:	1ad3      	subs	r3, r2, r3
20003018:	3b01      	subs	r3, #1
2000301a:	60fb      	str	r3, [r7, #12]
2000301c:	68fb      	ldr	r3, [r7, #12]
2000301e:	2b00      	cmp	r3, #0
20003020:	d020      	beq.n	20003064 <JTAG_TransferFast+0x174>
20003022:	f7ff fad0 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003026:	bf00      	nop
20003028:	f7ff faec 	bl	20002604 <PIN_TDO_IN>
2000302c:	6178      	str	r0, [r7, #20]
2000302e:	f7ff fac3 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003032:	bf00      	nop
20003034:	68fb      	ldr	r3, [r7, #12]
20003036:	3b01      	subs	r3, #1
20003038:	60fb      	str	r3, [r7, #12]
2000303a:	e008      	b.n	2000304e <JTAG_TransferFast+0x15e>
2000303c:	f7ff fac3 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003040:	bf00      	nop
20003042:	f7ff fab9 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003046:	bf00      	nop
20003048:	68fb      	ldr	r3, [r7, #12]
2000304a:	3b01      	subs	r3, #1
2000304c:	60fb      	str	r3, [r7, #12]
2000304e:	68fb      	ldr	r3, [r7, #12]
20003050:	2b00      	cmp	r3, #0
20003052:	d1f3      	bne.n	2000303c <JTAG_TransferFast+0x14c>
20003054:	f7ff fabe 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20003058:	f7ff fab5 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000305c:	bf00      	nop
2000305e:	f7ff faab 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003062:	e00a      	b.n	2000307a <JTAG_TransferFast+0x18a>
20003064:	f7ff fab6 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20003068:	f7ff faad 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000306c:	bf00      	nop
2000306e:	f7ff fac9 	bl	20002604 <PIN_TDO_IN>
20003072:	6178      	str	r0, [r7, #20]
20003074:	f7ff faa0 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003078:	bf00      	nop
2000307a:	697b      	ldr	r3, [r7, #20]
2000307c:	07db      	lsls	r3, r3, #31
2000307e:	693a      	ldr	r2, [r7, #16]
20003080:	4313      	orrs	r3, r2
20003082:	613b      	str	r3, [r7, #16]
20003084:	683b      	ldr	r3, [r7, #0]
20003086:	2b00      	cmp	r3, #0
20003088:	d052      	beq.n	20003130 <JTAG_TransferFast+0x240>
2000308a:	683b      	ldr	r3, [r7, #0]
2000308c:	693a      	ldr	r2, [r7, #16]
2000308e:	601a      	str	r2, [r3, #0]
20003090:	e04e      	b.n	20003130 <JTAG_TransferFast+0x240>
20003092:	683b      	ldr	r3, [r7, #0]
20003094:	681b      	ldr	r3, [r3, #0]
20003096:	613b      	str	r3, [r7, #16]
20003098:	231f      	movs	r3, #31
2000309a:	60fb      	str	r3, [r7, #12]
2000309c:	e00e      	b.n	200030bc <JTAG_TransferFast+0x1cc>
2000309e:	6938      	ldr	r0, [r7, #16]
200030a0:	f7ff faa6 	bl	200025f0 <PIN_TDI_OUT>
200030a4:	f7ff fa8f 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200030a8:	bf00      	nop
200030aa:	f7ff fa85 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200030ae:	bf00      	nop
200030b0:	693b      	ldr	r3, [r7, #16]
200030b2:	085b      	lsrs	r3, r3, #1
200030b4:	613b      	str	r3, [r7, #16]
200030b6:	68fb      	ldr	r3, [r7, #12]
200030b8:	3b01      	subs	r3, #1
200030ba:	60fb      	str	r3, [r7, #12]
200030bc:	68fb      	ldr	r3, [r7, #12]
200030be:	2b00      	cmp	r3, #0
200030c0:	d1ed      	bne.n	2000309e <JTAG_TransferFast+0x1ae>
200030c2:	4b33      	ldr	r3, [pc, #204]	@ (20003190 <JTAG_TransferFast+0x2a0>)
200030c4:	7e9b      	ldrb	r3, [r3, #26]
200030c6:	461a      	mov	r2, r3
200030c8:	4b31      	ldr	r3, [pc, #196]	@ (20003190 <JTAG_TransferFast+0x2a0>)
200030ca:	7edb      	ldrb	r3, [r3, #27]
200030cc:	1ad3      	subs	r3, r2, r3
200030ce:	3b01      	subs	r3, #1
200030d0:	60fb      	str	r3, [r7, #12]
200030d2:	68fb      	ldr	r3, [r7, #12]
200030d4:	2b00      	cmp	r3, #0
200030d6:	d020      	beq.n	2000311a <JTAG_TransferFast+0x22a>
200030d8:	6938      	ldr	r0, [r7, #16]
200030da:	f7ff fa89 	bl	200025f0 <PIN_TDI_OUT>
200030de:	f7ff fa72 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200030e2:	bf00      	nop
200030e4:	f7ff fa68 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200030e8:	bf00      	nop
200030ea:	68fb      	ldr	r3, [r7, #12]
200030ec:	3b01      	subs	r3, #1
200030ee:	60fb      	str	r3, [r7, #12]
200030f0:	e008      	b.n	20003104 <JTAG_TransferFast+0x214>
200030f2:	f7ff fa68 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200030f6:	bf00      	nop
200030f8:	f7ff fa5e 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200030fc:	bf00      	nop
200030fe:	68fb      	ldr	r3, [r7, #12]
20003100:	3b01      	subs	r3, #1
20003102:	60fb      	str	r3, [r7, #12]
20003104:	68fb      	ldr	r3, [r7, #12]
20003106:	2b00      	cmp	r3, #0
20003108:	d1f3      	bne.n	200030f2 <JTAG_TransferFast+0x202>
2000310a:	f7ff fa63 	bl	200025d4 <PIN_SWDIO_TMS_SET>
2000310e:	f7ff fa5a 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003112:	bf00      	nop
20003114:	f7ff fa50 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003118:	e00a      	b.n	20003130 <JTAG_TransferFast+0x240>
2000311a:	f7ff fa5b 	bl	200025d4 <PIN_SWDIO_TMS_SET>
2000311e:	6938      	ldr	r0, [r7, #16]
20003120:	f7ff fa66 	bl	200025f0 <PIN_TDI_OUT>
20003124:	f7ff fa4f 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003128:	bf00      	nop
2000312a:	f7ff fa45 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000312e:	bf00      	nop
20003130:	f7ff fa49 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003134:	bf00      	nop
20003136:	f7ff fa3f 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000313a:	bf00      	nop
2000313c:	f7ff fa51 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
20003140:	f7ff fa41 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003144:	bf00      	nop
20003146:	f7ff fa37 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000314a:	bf00      	nop
2000314c:	2001      	movs	r0, #1
2000314e:	f7ff fa4f 	bl	200025f0 <PIN_TDI_OUT>
20003152:	687b      	ldr	r3, [r7, #4]
20003154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003158:	2b00      	cmp	r3, #0
2000315a:	d004      	beq.n	20003166 <JTAG_TransferFast+0x276>
2000315c:	f7ff fa5a 	bl	20002614 <TIMESTAMP_GET>
20003160:	4603      	mov	r3, r0
20003162:	4a0b      	ldr	r2, [pc, #44]	@ (20003190 <JTAG_TransferFast+0x2a0>)
20003164:	6093      	str	r3, [r2, #8]
20003166:	4b0a      	ldr	r3, [pc, #40]	@ (20003190 <JTAG_TransferFast+0x2a0>)
20003168:	7b1b      	ldrb	r3, [r3, #12]
2000316a:	60fb      	str	r3, [r7, #12]
2000316c:	e005      	b.n	2000317a <JTAG_TransferFast+0x28a>
2000316e:	f7ff fa2a 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003172:	bf00      	nop
20003174:	f7ff fa20 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003178:	bf00      	nop
2000317a:	68fb      	ldr	r3, [r7, #12]
2000317c:	1e5a      	subs	r2, r3, #1
2000317e:	60fa      	str	r2, [r7, #12]
20003180:	2b00      	cmp	r3, #0
20003182:	d1f4      	bne.n	2000316e <JTAG_TransferFast+0x27e>
20003184:	68bb      	ldr	r3, [r7, #8]
20003186:	b2db      	uxtb	r3, r3
20003188:	4618      	mov	r0, r3
2000318a:	3718      	adds	r7, #24
2000318c:	46bd      	mov	sp, r7
2000318e:	bd80      	pop	{r7, pc}
20003190:	2000d834 	.word	0x2000d834

20003194 <JTAG_IR_Slow>:

#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_SLOW(DAP_Data.clock_delay)
JTAG_IR_Function(Slow)
20003194:	b580      	push	{r7, lr}
20003196:	b09c      	sub	sp, #112	@ 0x70
20003198:	af00      	add	r7, sp, #0
2000319a:	6078      	str	r0, [r7, #4]
2000319c:	f7ff fa1a 	bl	200025d4 <PIN_SWDIO_TMS_SET>
200031a0:	f7ff fa11 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200031a4:	4b63      	ldr	r3, [pc, #396]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200031a6:	685b      	ldr	r3, [r3, #4]
200031a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
200031aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200031ac:	3b01      	subs	r3, #1
200031ae:	d1fd      	bne.n	200031ac <JTAG_IR_Slow+0x18>
200031b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
200031b2:	bf00      	nop
200031b4:	f7ff fa00 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200031b8:	4b5e      	ldr	r3, [pc, #376]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200031ba:	685b      	ldr	r3, [r3, #4]
200031bc:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
200031be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200031c0:	3b01      	subs	r3, #1
200031c2:	d1fd      	bne.n	200031c0 <JTAG_IR_Slow+0x2c>
200031c4:	653b      	str	r3, [r7, #80]	@ 0x50
}
200031c6:	bf00      	nop
200031c8:	f7ff f9fd 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200031cc:	4b59      	ldr	r3, [pc, #356]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200031ce:	685b      	ldr	r3, [r3, #4]
200031d0:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
200031d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200031d4:	3b01      	subs	r3, #1
200031d6:	d1fd      	bne.n	200031d4 <JTAG_IR_Slow+0x40>
200031d8:	657b      	str	r3, [r7, #84]	@ 0x54
}
200031da:	bf00      	nop
200031dc:	f7ff f9ec 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200031e0:	4b54      	ldr	r3, [pc, #336]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200031e2:	685b      	ldr	r3, [r3, #4]
200031e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
200031e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
200031e8:	3b01      	subs	r3, #1
200031ea:	d1fd      	bne.n	200031e8 <JTAG_IR_Slow+0x54>
200031ec:	65bb      	str	r3, [r7, #88]	@ 0x58
}
200031ee:	bf00      	nop
200031f0:	f7ff f9f7 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
200031f4:	f7ff f9e7 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200031f8:	4b4e      	ldr	r3, [pc, #312]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200031fa:	685b      	ldr	r3, [r3, #4]
200031fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
200031fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20003200:	3b01      	subs	r3, #1
20003202:	d1fd      	bne.n	20003200 <JTAG_IR_Slow+0x6c>
20003204:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20003206:	bf00      	nop
20003208:	f7ff f9d6 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000320c:	4b49      	ldr	r3, [pc, #292]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
2000320e:	685b      	ldr	r3, [r3, #4]
20003210:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20003212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20003214:	3b01      	subs	r3, #1
20003216:	d1fd      	bne.n	20003214 <JTAG_IR_Slow+0x80>
20003218:	663b      	str	r3, [r7, #96]	@ 0x60
}
2000321a:	bf00      	nop
2000321c:	f7ff f9d3 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003220:	4b44      	ldr	r3, [pc, #272]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003222:	685b      	ldr	r3, [r3, #4]
20003224:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20003226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20003228:	3b01      	subs	r3, #1
2000322a:	d1fd      	bne.n	20003228 <JTAG_IR_Slow+0x94>
2000322c:	667b      	str	r3, [r7, #100]	@ 0x64
}
2000322e:	bf00      	nop
20003230:	f7ff f9c2 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003234:	4b3f      	ldr	r3, [pc, #252]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003236:	685b      	ldr	r3, [r3, #4]
20003238:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
2000323a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
2000323c:	3b01      	subs	r3, #1
2000323e:	d1fd      	bne.n	2000323c <JTAG_IR_Slow+0xa8>
20003240:	66bb      	str	r3, [r7, #104]	@ 0x68
}
20003242:	bf00      	nop
20003244:	2001      	movs	r0, #1
20003246:	f7ff f9d3 	bl	200025f0 <PIN_TDI_OUT>
2000324a:	4b3a      	ldr	r3, [pc, #232]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
2000324c:	7edb      	ldrb	r3, [r3, #27]
2000324e:	4a39      	ldr	r2, [pc, #228]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003250:	3310      	adds	r3, #16
20003252:	005b      	lsls	r3, r3, #1
20003254:	4413      	add	r3, r2
20003256:	889b      	ldrh	r3, [r3, #4]
20003258:	66fb      	str	r3, [r7, #108]	@ 0x6c
2000325a:	e016      	b.n	2000328a <JTAG_IR_Slow+0xf6>
2000325c:	f7ff f9b3 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003260:	4b34      	ldr	r3, [pc, #208]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003262:	685b      	ldr	r3, [r3, #4]
20003264:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20003266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003268:	3b01      	subs	r3, #1
2000326a:	d1fd      	bne.n	20003268 <JTAG_IR_Slow+0xd4>
2000326c:	647b      	str	r3, [r7, #68]	@ 0x44
}
2000326e:	bf00      	nop
20003270:	f7ff f9a2 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003274:	4b2f      	ldr	r3, [pc, #188]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003276:	685b      	ldr	r3, [r3, #4]
20003278:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
2000327a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2000327c:	3b01      	subs	r3, #1
2000327e:	d1fd      	bne.n	2000327c <JTAG_IR_Slow+0xe8>
20003280:	64bb      	str	r3, [r7, #72]	@ 0x48
}
20003282:	bf00      	nop
20003284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003286:	3b01      	subs	r3, #1
20003288:	66fb      	str	r3, [r7, #108]	@ 0x6c
2000328a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000328c:	2b00      	cmp	r3, #0
2000328e:	d1e5      	bne.n	2000325c <JTAG_IR_Slow+0xc8>
20003290:	4b28      	ldr	r3, [pc, #160]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003292:	7edb      	ldrb	r3, [r3, #27]
20003294:	461a      	mov	r2, r3
20003296:	4b27      	ldr	r3, [pc, #156]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003298:	4413      	add	r3, r2
2000329a:	7f1b      	ldrb	r3, [r3, #28]
2000329c:	3b01      	subs	r3, #1
2000329e:	66fb      	str	r3, [r7, #108]	@ 0x6c
200032a0:	e01c      	b.n	200032dc <JTAG_IR_Slow+0x148>
200032a2:	6878      	ldr	r0, [r7, #4]
200032a4:	f7ff f9a4 	bl	200025f0 <PIN_TDI_OUT>
200032a8:	f7ff f98d 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200032ac:	4b21      	ldr	r3, [pc, #132]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200032ae:	685b      	ldr	r3, [r3, #4]
200032b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
200032b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200032b4:	3b01      	subs	r3, #1
200032b6:	d1fd      	bne.n	200032b4 <JTAG_IR_Slow+0x120>
200032b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
200032ba:	bf00      	nop
200032bc:	f7ff f97c 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200032c0:	4b1c      	ldr	r3, [pc, #112]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200032c2:	685b      	ldr	r3, [r3, #4]
200032c4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
200032c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200032c8:	3b01      	subs	r3, #1
200032ca:	d1fd      	bne.n	200032c8 <JTAG_IR_Slow+0x134>
200032cc:	643b      	str	r3, [r7, #64]	@ 0x40
}
200032ce:	bf00      	nop
200032d0:	687b      	ldr	r3, [r7, #4]
200032d2:	085b      	lsrs	r3, r3, #1
200032d4:	607b      	str	r3, [r7, #4]
200032d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200032d8:	3b01      	subs	r3, #1
200032da:	66fb      	str	r3, [r7, #108]	@ 0x6c
200032dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200032de:	2b00      	cmp	r3, #0
200032e0:	d1df      	bne.n	200032a2 <JTAG_IR_Slow+0x10e>
200032e2:	4b14      	ldr	r3, [pc, #80]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200032e4:	7edb      	ldrb	r3, [r3, #27]
200032e6:	4a13      	ldr	r2, [pc, #76]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
200032e8:	3318      	adds	r3, #24
200032ea:	005b      	lsls	r3, r3, #1
200032ec:	4413      	add	r3, r2
200032ee:	889b      	ldrh	r3, [r3, #4]
200032f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
200032f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200032f4:	2b00      	cmp	r3, #0
200032f6:	d04f      	beq.n	20003398 <JTAG_IR_Slow+0x204>
200032f8:	6878      	ldr	r0, [r7, #4]
200032fa:	f7ff f979 	bl	200025f0 <PIN_TDI_OUT>
200032fe:	f7ff f962 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003302:	4b0c      	ldr	r3, [pc, #48]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003304:	685b      	ldr	r3, [r3, #4]
20003306:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000330a:	3b01      	subs	r3, #1
2000330c:	d1fd      	bne.n	2000330a <JTAG_IR_Slow+0x176>
2000330e:	637b      	str	r3, [r7, #52]	@ 0x34
}
20003310:	bf00      	nop
20003312:	f7ff f951 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003316:	4b07      	ldr	r3, [pc, #28]	@ (20003334 <JTAG_IR_Slow+0x1a0>)
20003318:	685b      	ldr	r3, [r3, #4]
2000331a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
2000331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000331e:	3b01      	subs	r3, #1
20003320:	d1fd      	bne.n	2000331e <JTAG_IR_Slow+0x18a>
20003322:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20003324:	bf00      	nop
20003326:	2001      	movs	r0, #1
20003328:	f7ff f962 	bl	200025f0 <PIN_TDI_OUT>
2000332c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000332e:	3b01      	subs	r3, #1
20003330:	66fb      	str	r3, [r7, #108]	@ 0x6c
20003332:	e018      	b.n	20003366 <JTAG_IR_Slow+0x1d2>
20003334:	2000d834 	.word	0x2000d834
20003338:	f7ff f945 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000333c:	4b3b      	ldr	r3, [pc, #236]	@ (2000342c <JTAG_IR_Slow+0x298>)
2000333e:	685b      	ldr	r3, [r3, #4]
20003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003344:	3b01      	subs	r3, #1
20003346:	d1fd      	bne.n	20003344 <JTAG_IR_Slow+0x1b0>
20003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
2000334a:	bf00      	nop
2000334c:	f7ff f934 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003350:	4b36      	ldr	r3, [pc, #216]	@ (2000342c <JTAG_IR_Slow+0x298>)
20003352:	685b      	ldr	r3, [r3, #4]
20003354:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20003356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20003358:	3b01      	subs	r3, #1
2000335a:	d1fd      	bne.n	20003358 <JTAG_IR_Slow+0x1c4>
2000335c:	633b      	str	r3, [r7, #48]	@ 0x30
}
2000335e:	bf00      	nop
20003360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003362:	3b01      	subs	r3, #1
20003364:	66fb      	str	r3, [r7, #108]	@ 0x6c
20003366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003368:	2b00      	cmp	r3, #0
2000336a:	d1e5      	bne.n	20003338 <JTAG_IR_Slow+0x1a4>
2000336c:	f7ff f932 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20003370:	f7ff f929 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003374:	4b2d      	ldr	r3, [pc, #180]	@ (2000342c <JTAG_IR_Slow+0x298>)
20003376:	685b      	ldr	r3, [r3, #4]
20003378:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
2000337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000337c:	3b01      	subs	r3, #1
2000337e:	d1fd      	bne.n	2000337c <JTAG_IR_Slow+0x1e8>
20003380:	627b      	str	r3, [r7, #36]	@ 0x24
}
20003382:	bf00      	nop
20003384:	f7ff f918 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003388:	4b28      	ldr	r3, [pc, #160]	@ (2000342c <JTAG_IR_Slow+0x298>)
2000338a:	685b      	ldr	r3, [r3, #4]
2000338c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
2000338e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20003390:	3b01      	subs	r3, #1
20003392:	d1fd      	bne.n	20003390 <JTAG_IR_Slow+0x1fc>
20003394:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20003396:	e018      	b.n	200033ca <JTAG_IR_Slow+0x236>
20003398:	f7ff f91c 	bl	200025d4 <PIN_SWDIO_TMS_SET>
2000339c:	6878      	ldr	r0, [r7, #4]
2000339e:	f7ff f927 	bl	200025f0 <PIN_TDI_OUT>
200033a2:	f7ff f910 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200033a6:	4b21      	ldr	r3, [pc, #132]	@ (2000342c <JTAG_IR_Slow+0x298>)
200033a8:	685b      	ldr	r3, [r3, #4]
200033aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
200033ac:	69fb      	ldr	r3, [r7, #28]
200033ae:	3b01      	subs	r3, #1
200033b0:	d1fd      	bne.n	200033ae <JTAG_IR_Slow+0x21a>
200033b2:	61fb      	str	r3, [r7, #28]
}
200033b4:	bf00      	nop
200033b6:	f7ff f8ff 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200033ba:	4b1c      	ldr	r3, [pc, #112]	@ (2000342c <JTAG_IR_Slow+0x298>)
200033bc:	685b      	ldr	r3, [r3, #4]
200033be:	623b      	str	r3, [r7, #32]
  __ASM volatile (
200033c0:	6a3b      	ldr	r3, [r7, #32]
200033c2:	3b01      	subs	r3, #1
200033c4:	d1fd      	bne.n	200033c2 <JTAG_IR_Slow+0x22e>
200033c6:	623b      	str	r3, [r7, #32]
}
200033c8:	bf00      	nop
200033ca:	f7ff f8fc 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200033ce:	4b17      	ldr	r3, [pc, #92]	@ (2000342c <JTAG_IR_Slow+0x298>)
200033d0:	685b      	ldr	r3, [r3, #4]
200033d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
200033d4:	68fb      	ldr	r3, [r7, #12]
200033d6:	3b01      	subs	r3, #1
200033d8:	d1fd      	bne.n	200033d6 <JTAG_IR_Slow+0x242>
200033da:	60fb      	str	r3, [r7, #12]
}
200033dc:	bf00      	nop
200033de:	f7ff f8eb 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200033e2:	4b12      	ldr	r3, [pc, #72]	@ (2000342c <JTAG_IR_Slow+0x298>)
200033e4:	685b      	ldr	r3, [r3, #4]
200033e6:	613b      	str	r3, [r7, #16]
  __ASM volatile (
200033e8:	693b      	ldr	r3, [r7, #16]
200033ea:	3b01      	subs	r3, #1
200033ec:	d1fd      	bne.n	200033ea <JTAG_IR_Slow+0x256>
200033ee:	613b      	str	r3, [r7, #16]
}
200033f0:	bf00      	nop
200033f2:	f7ff f8f6 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
200033f6:	f7ff f8e6 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200033fa:	4b0c      	ldr	r3, [pc, #48]	@ (2000342c <JTAG_IR_Slow+0x298>)
200033fc:	685b      	ldr	r3, [r3, #4]
200033fe:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003400:	697b      	ldr	r3, [r7, #20]
20003402:	3b01      	subs	r3, #1
20003404:	d1fd      	bne.n	20003402 <JTAG_IR_Slow+0x26e>
20003406:	617b      	str	r3, [r7, #20]
}
20003408:	bf00      	nop
2000340a:	f7ff f8d5 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000340e:	4b07      	ldr	r3, [pc, #28]	@ (2000342c <JTAG_IR_Slow+0x298>)
20003410:	685b      	ldr	r3, [r3, #4]
20003412:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003414:	69bb      	ldr	r3, [r7, #24]
20003416:	3b01      	subs	r3, #1
20003418:	d1fd      	bne.n	20003416 <JTAG_IR_Slow+0x282>
2000341a:	61bb      	str	r3, [r7, #24]
}
2000341c:	bf00      	nop
2000341e:	2001      	movs	r0, #1
20003420:	f7ff f8e6 	bl	200025f0 <PIN_TDI_OUT>
20003424:	3770      	adds	r7, #112	@ 0x70
20003426:	46bd      	mov	sp, r7
20003428:	bd80      	pop	{r7, pc}
2000342a:	bf00      	nop
2000342c:	2000d834 	.word	0x2000d834

20003430 <JTAG_TransferSlow>:
JTAG_TransferFunction(Slow)
20003430:	b580      	push	{r7, lr}
20003432:	b0b0      	sub	sp, #192	@ 0xc0
20003434:	af00      	add	r7, sp, #0
20003436:	6078      	str	r0, [r7, #4]
20003438:	6039      	str	r1, [r7, #0]
2000343a:	f7ff f8cb 	bl	200025d4 <PIN_SWDIO_TMS_SET>
2000343e:	f7ff f8c2 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003442:	4b8a      	ldr	r3, [pc, #552]	@ (2000366c <JTAG_TransferSlow+0x23c>)
20003444:	685b      	ldr	r3, [r3, #4]
20003446:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  __ASM volatile (
2000344a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
2000344e:	3b01      	subs	r3, #1
20003450:	d1fd      	bne.n	2000344e <JTAG_TransferSlow+0x1e>
20003452:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
20003456:	bf00      	nop
20003458:	f7ff f8ae 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000345c:	4b83      	ldr	r3, [pc, #524]	@ (2000366c <JTAG_TransferSlow+0x23c>)
2000345e:	685b      	ldr	r3, [r3, #4]
20003460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  __ASM volatile (
20003464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
20003468:	3b01      	subs	r3, #1
2000346a:	d1fd      	bne.n	20003468 <JTAG_TransferSlow+0x38>
2000346c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
20003470:	bf00      	nop
20003472:	f7ff f8b6 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
20003476:	f7ff f8a6 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000347a:	4b7c      	ldr	r3, [pc, #496]	@ (2000366c <JTAG_TransferSlow+0x23c>)
2000347c:	685b      	ldr	r3, [r3, #4]
2000347e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  __ASM volatile (
20003482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
20003486:	3b01      	subs	r3, #1
20003488:	d1fd      	bne.n	20003486 <JTAG_TransferSlow+0x56>
2000348a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
2000348e:	bf00      	nop
20003490:	f7ff f892 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003494:	4b75      	ldr	r3, [pc, #468]	@ (2000366c <JTAG_TransferSlow+0x23c>)
20003496:	685b      	ldr	r3, [r3, #4]
20003498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  __ASM volatile (
2000349c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
200034a0:	3b01      	subs	r3, #1
200034a2:	d1fd      	bne.n	200034a0 <JTAG_TransferSlow+0x70>
200034a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
}
200034a8:	bf00      	nop
200034aa:	f7ff f88c 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200034ae:	4b6f      	ldr	r3, [pc, #444]	@ (2000366c <JTAG_TransferSlow+0x23c>)
200034b0:	685b      	ldr	r3, [r3, #4]
200034b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  __ASM volatile (
200034b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
200034ba:	3b01      	subs	r3, #1
200034bc:	d1fd      	bne.n	200034ba <JTAG_TransferSlow+0x8a>
200034be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
}
200034c2:	bf00      	nop
200034c4:	f7ff f878 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200034c8:	4b68      	ldr	r3, [pc, #416]	@ (2000366c <JTAG_TransferSlow+0x23c>)
200034ca:	685b      	ldr	r3, [r3, #4]
200034cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  __ASM volatile (
200034d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
200034d4:	3b01      	subs	r3, #1
200034d6:	d1fd      	bne.n	200034d4 <JTAG_TransferSlow+0xa4>
200034d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
}
200034dc:	bf00      	nop
200034de:	4b63      	ldr	r3, [pc, #396]	@ (2000366c <JTAG_TransferSlow+0x23c>)
200034e0:	7edb      	ldrb	r3, [r3, #27]
200034e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200034e6:	e01e      	b.n	20003526 <JTAG_TransferSlow+0xf6>
200034e8:	f7ff f86d 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200034ec:	4b5f      	ldr	r3, [pc, #380]	@ (2000366c <JTAG_TransferSlow+0x23c>)
200034ee:	685b      	ldr	r3, [r3, #4]
200034f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile (
200034f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
200034f8:	3b01      	subs	r3, #1
200034fa:	d1fd      	bne.n	200034f8 <JTAG_TransferSlow+0xc8>
200034fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
}
20003500:	bf00      	nop
20003502:	f7ff f859 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003506:	4b59      	ldr	r3, [pc, #356]	@ (2000366c <JTAG_TransferSlow+0x23c>)
20003508:	685b      	ldr	r3, [r3, #4]
2000350a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  __ASM volatile (
2000350e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
20003512:	3b01      	subs	r3, #1
20003514:	d1fd      	bne.n	20003512 <JTAG_TransferSlow+0xe2>
20003516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
}
2000351a:	bf00      	nop
2000351c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003520:	3b01      	subs	r3, #1
20003522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000352a:	2b00      	cmp	r3, #0
2000352c:	d1dc      	bne.n	200034e8 <JTAG_TransferSlow+0xb8>
2000352e:	687b      	ldr	r3, [r7, #4]
20003530:	085b      	lsrs	r3, r3, #1
20003532:	4618      	mov	r0, r3
20003534:	f7ff f85c 	bl	200025f0 <PIN_TDI_OUT>
20003538:	f7ff f845 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000353c:	4b4b      	ldr	r3, [pc, #300]	@ (2000366c <JTAG_TransferSlow+0x23c>)
2000353e:	685b      	ldr	r3, [r3, #4]
20003540:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
20003542:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20003544:	3b01      	subs	r3, #1
20003546:	d1fd      	bne.n	20003544 <JTAG_TransferSlow+0x114>
20003548:	67bb      	str	r3, [r7, #120]	@ 0x78
}
2000354a:	bf00      	nop
2000354c:	f7ff f85a 	bl	20002604 <PIN_TDO_IN>
20003550:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20003554:	f7ff f830 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003558:	4b44      	ldr	r3, [pc, #272]	@ (2000366c <JTAG_TransferSlow+0x23c>)
2000355a:	685b      	ldr	r3, [r3, #4]
2000355c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile (
2000355e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003560:	3b01      	subs	r3, #1
20003562:	d1fd      	bne.n	20003560 <JTAG_TransferSlow+0x130>
20003564:	67fb      	str	r3, [r7, #124]	@ 0x7c
}
20003566:	bf00      	nop
20003568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
2000356c:	005b      	lsls	r3, r3, #1
2000356e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20003572:	687b      	ldr	r3, [r7, #4]
20003574:	089b      	lsrs	r3, r3, #2
20003576:	4618      	mov	r0, r3
20003578:	f7ff f83a 	bl	200025f0 <PIN_TDI_OUT>
2000357c:	f7ff f823 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003580:	4b3a      	ldr	r3, [pc, #232]	@ (2000366c <JTAG_TransferSlow+0x23c>)
20003582:	685b      	ldr	r3, [r3, #4]
20003584:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  __ASM volatile (
20003588:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
2000358c:	3b01      	subs	r3, #1
2000358e:	d1fd      	bne.n	2000358c <JTAG_TransferSlow+0x15c>
20003590:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
}
20003594:	bf00      	nop
20003596:	f7ff f835 	bl	20002604 <PIN_TDO_IN>
2000359a:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
2000359e:	f7ff f80b 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200035a2:	4b32      	ldr	r3, [pc, #200]	@ (2000366c <JTAG_TransferSlow+0x23c>)
200035a4:	685b      	ldr	r3, [r3, #4]
200035a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  __ASM volatile (
200035aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
200035ae:	3b01      	subs	r3, #1
200035b0:	d1fd      	bne.n	200035ae <JTAG_TransferSlow+0x17e>
200035b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
}
200035b6:	bf00      	nop
200035b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
200035bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
200035c0:	4313      	orrs	r3, r2
200035c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
200035c6:	687b      	ldr	r3, [r7, #4]
200035c8:	08db      	lsrs	r3, r3, #3
200035ca:	4618      	mov	r0, r3
200035cc:	f7ff f810 	bl	200025f0 <PIN_TDI_OUT>
200035d0:	f7fe fff9 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200035d4:	4b25      	ldr	r3, [pc, #148]	@ (2000366c <JTAG_TransferSlow+0x23c>)
200035d6:	685b      	ldr	r3, [r3, #4]
200035d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile (
200035dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
200035e0:	3b01      	subs	r3, #1
200035e2:	d1fd      	bne.n	200035e0 <JTAG_TransferSlow+0x1b0>
200035e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
}
200035e8:	bf00      	nop
200035ea:	f7ff f80b 	bl	20002604 <PIN_TDO_IN>
200035ee:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200035f2:	f7fe ffe1 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200035f6:	4b1d      	ldr	r3, [pc, #116]	@ (2000366c <JTAG_TransferSlow+0x23c>)
200035f8:	685b      	ldr	r3, [r3, #4]
200035fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  __ASM volatile (
200035fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20003602:	3b01      	subs	r3, #1
20003604:	d1fd      	bne.n	20003602 <JTAG_TransferSlow+0x1d2>
20003606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
}
2000360a:	bf00      	nop
2000360c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
20003610:	009b      	lsls	r3, r3, #2
20003612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
20003616:	4313      	orrs	r3, r2
20003618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
2000361c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
20003620:	2b01      	cmp	r3, #1
20003622:	d016      	beq.n	20003652 <JTAG_TransferSlow+0x222>
20003624:	f7fe ffd6 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20003628:	f7fe ffcd 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000362c:	4b0f      	ldr	r3, [pc, #60]	@ (2000366c <JTAG_TransferSlow+0x23c>)
2000362e:	685b      	ldr	r3, [r3, #4]
20003630:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
20003632:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
20003634:	3b01      	subs	r3, #1
20003636:	d1fd      	bne.n	20003634 <JTAG_TransferSlow+0x204>
20003638:	673b      	str	r3, [r7, #112]	@ 0x70
}
2000363a:	bf00      	nop
2000363c:	f7fe ffbc 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003640:	4b0a      	ldr	r3, [pc, #40]	@ (2000366c <JTAG_TransferSlow+0x23c>)
20003642:	685b      	ldr	r3, [r3, #4]
20003644:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
20003646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20003648:	3b01      	subs	r3, #1
2000364a:	d1fd      	bne.n	20003648 <JTAG_TransferSlow+0x218>
2000364c:	677b      	str	r3, [r7, #116]	@ 0x74
}
2000364e:	bf00      	nop
20003650:	e16d      	b.n	2000392e <JTAG_TransferSlow+0x4fe>
20003652:	687b      	ldr	r3, [r7, #4]
20003654:	f003 0302 	and.w	r3, r3, #2
20003658:	2b00      	cmp	r3, #0
2000365a:	f000 80c0 	beq.w	200037de <JTAG_TransferSlow+0x3ae>
2000365e:	2300      	movs	r3, #0
20003660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20003664:	231f      	movs	r3, #31
20003666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
2000366a:	e02b      	b.n	200036c4 <JTAG_TransferSlow+0x294>
2000366c:	2000d834 	.word	0x2000d834
20003670:	f7fe ffa9 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003674:	4b86      	ldr	r3, [pc, #536]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003676:	685b      	ldr	r3, [r3, #4]
20003678:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
2000367a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
2000367c:	3b01      	subs	r3, #1
2000367e:	d1fd      	bne.n	2000367c <JTAG_TransferSlow+0x24c>
20003680:	66bb      	str	r3, [r7, #104]	@ 0x68
}
20003682:	bf00      	nop
20003684:	f7fe ffbe 	bl	20002604 <PIN_TDO_IN>
20003688:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
2000368c:	f7fe ff94 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003690:	4b7f      	ldr	r3, [pc, #508]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003692:	685b      	ldr	r3, [r3, #4]
20003694:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
20003696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003698:	3b01      	subs	r3, #1
2000369a:	d1fd      	bne.n	20003698 <JTAG_TransferSlow+0x268>
2000369c:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
2000369e:	bf00      	nop
200036a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
200036a4:	07db      	lsls	r3, r3, #31
200036a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
200036aa:	4313      	orrs	r3, r2
200036ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200036b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
200036b4:	085b      	lsrs	r3, r3, #1
200036b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200036ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200036be:	3b01      	subs	r3, #1
200036c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200036c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200036c8:	2b00      	cmp	r3, #0
200036ca:	d1d1      	bne.n	20003670 <JTAG_TransferSlow+0x240>
200036cc:	4b70      	ldr	r3, [pc, #448]	@ (20003890 <JTAG_TransferSlow+0x460>)
200036ce:	7e9b      	ldrb	r3, [r3, #26]
200036d0:	461a      	mov	r2, r3
200036d2:	4b6f      	ldr	r3, [pc, #444]	@ (20003890 <JTAG_TransferSlow+0x460>)
200036d4:	7edb      	ldrb	r3, [r3, #27]
200036d6:	1ad3      	subs	r3, r2, r3
200036d8:	3b01      	subs	r3, #1
200036da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200036de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200036e2:	2b00      	cmp	r3, #0
200036e4:	d050      	beq.n	20003788 <JTAG_TransferSlow+0x358>
200036e6:	f7fe ff6e 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200036ea:	4b69      	ldr	r3, [pc, #420]	@ (20003890 <JTAG_TransferSlow+0x460>)
200036ec:	685b      	ldr	r3, [r3, #4]
200036ee:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
200036f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
200036f2:	3b01      	subs	r3, #1
200036f4:	d1fd      	bne.n	200036f2 <JTAG_TransferSlow+0x2c2>
200036f6:	663b      	str	r3, [r7, #96]	@ 0x60
}
200036f8:	bf00      	nop
200036fa:	f7fe ff83 	bl	20002604 <PIN_TDO_IN>
200036fe:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20003702:	f7fe ff59 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003706:	4b62      	ldr	r3, [pc, #392]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003708:	685b      	ldr	r3, [r3, #4]
2000370a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
2000370c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
2000370e:	3b01      	subs	r3, #1
20003710:	d1fd      	bne.n	2000370e <JTAG_TransferSlow+0x2de>
20003712:	667b      	str	r3, [r7, #100]	@ 0x64
}
20003714:	bf00      	nop
20003716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000371a:	3b01      	subs	r3, #1
2000371c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003720:	e018      	b.n	20003754 <JTAG_TransferSlow+0x324>
20003722:	f7fe ff50 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003726:	4b5a      	ldr	r3, [pc, #360]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003728:	685b      	ldr	r3, [r3, #4]
2000372a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
2000372c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
2000372e:	3b01      	subs	r3, #1
20003730:	d1fd      	bne.n	2000372e <JTAG_TransferSlow+0x2fe>
20003732:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20003734:	bf00      	nop
20003736:	f7fe ff3f 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000373a:	4b55      	ldr	r3, [pc, #340]	@ (20003890 <JTAG_TransferSlow+0x460>)
2000373c:	685b      	ldr	r3, [r3, #4]
2000373e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
20003740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20003742:	3b01      	subs	r3, #1
20003744:	d1fd      	bne.n	20003742 <JTAG_TransferSlow+0x312>
20003746:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20003748:	bf00      	nop
2000374a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000374e:	3b01      	subs	r3, #1
20003750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003758:	2b00      	cmp	r3, #0
2000375a:	d1e2      	bne.n	20003722 <JTAG_TransferSlow+0x2f2>
2000375c:	f7fe ff3a 	bl	200025d4 <PIN_SWDIO_TMS_SET>
20003760:	f7fe ff31 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003764:	4b4a      	ldr	r3, [pc, #296]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003766:	685b      	ldr	r3, [r3, #4]
20003768:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
2000376a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000376c:	3b01      	subs	r3, #1
2000376e:	d1fd      	bne.n	2000376c <JTAG_TransferSlow+0x33c>
20003770:	653b      	str	r3, [r7, #80]	@ 0x50
}
20003772:	bf00      	nop
20003774:	f7fe ff20 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003778:	4b45      	ldr	r3, [pc, #276]	@ (20003890 <JTAG_TransferSlow+0x460>)
2000377a:	685b      	ldr	r3, [r3, #4]
2000377c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
2000377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20003780:	3b01      	subs	r3, #1
20003782:	d1fd      	bne.n	20003780 <JTAG_TransferSlow+0x350>
20003784:	657b      	str	r3, [r7, #84]	@ 0x54
}
20003786:	e019      	b.n	200037bc <JTAG_TransferSlow+0x38c>
20003788:	f7fe ff24 	bl	200025d4 <PIN_SWDIO_TMS_SET>
2000378c:	f7fe ff1b 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003790:	4b3f      	ldr	r3, [pc, #252]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003792:	685b      	ldr	r3, [r3, #4]
20003794:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
20003796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003798:	3b01      	subs	r3, #1
2000379a:	d1fd      	bne.n	20003798 <JTAG_TransferSlow+0x368>
2000379c:	64bb      	str	r3, [r7, #72]	@ 0x48
}
2000379e:	bf00      	nop
200037a0:	f7fe ff30 	bl	20002604 <PIN_TDO_IN>
200037a4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200037a8:	f7fe ff06 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200037ac:	4b38      	ldr	r3, [pc, #224]	@ (20003890 <JTAG_TransferSlow+0x460>)
200037ae:	685b      	ldr	r3, [r3, #4]
200037b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
200037b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200037b4:	3b01      	subs	r3, #1
200037b6:	d1fd      	bne.n	200037b4 <JTAG_TransferSlow+0x384>
200037b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
200037ba:	bf00      	nop
200037bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
200037c0:	07db      	lsls	r3, r3, #31
200037c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
200037c6:	4313      	orrs	r3, r2
200037c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200037cc:	683b      	ldr	r3, [r7, #0]
200037ce:	2b00      	cmp	r3, #0
200037d0:	f000 80ad 	beq.w	2000392e <JTAG_TransferSlow+0x4fe>
200037d4:	683b      	ldr	r3, [r7, #0]
200037d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
200037da:	601a      	str	r2, [r3, #0]
200037dc:	e0a7      	b.n	2000392e <JTAG_TransferSlow+0x4fe>
200037de:	683b      	ldr	r3, [r7, #0]
200037e0:	681b      	ldr	r3, [r3, #0]
200037e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200037e6:	231f      	movs	r3, #31
200037e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200037ec:	e021      	b.n	20003832 <JTAG_TransferSlow+0x402>
200037ee:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
200037f2:	f7fe fefd 	bl	200025f0 <PIN_TDI_OUT>
200037f6:	f7fe fee6 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200037fa:	4b25      	ldr	r3, [pc, #148]	@ (20003890 <JTAG_TransferSlow+0x460>)
200037fc:	685b      	ldr	r3, [r3, #4]
200037fe:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20003800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20003802:	3b01      	subs	r3, #1
20003804:	d1fd      	bne.n	20003802 <JTAG_TransferSlow+0x3d2>
20003806:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003808:	bf00      	nop
2000380a:	f7fe fed5 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000380e:	4b20      	ldr	r3, [pc, #128]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003810:	685b      	ldr	r3, [r3, #4]
20003812:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20003814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003816:	3b01      	subs	r3, #1
20003818:	d1fd      	bne.n	20003816 <JTAG_TransferSlow+0x3e6>
2000381a:	647b      	str	r3, [r7, #68]	@ 0x44
}
2000381c:	bf00      	nop
2000381e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
20003822:	085b      	lsrs	r3, r3, #1
20003824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20003828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000382c:	3b01      	subs	r3, #1
2000382e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20003832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003836:	2b00      	cmp	r3, #0
20003838:	d1d9      	bne.n	200037ee <JTAG_TransferSlow+0x3be>
2000383a:	4b15      	ldr	r3, [pc, #84]	@ (20003890 <JTAG_TransferSlow+0x460>)
2000383c:	7e9b      	ldrb	r3, [r3, #26]
2000383e:	461a      	mov	r2, r3
20003840:	4b13      	ldr	r3, [pc, #76]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003842:	7edb      	ldrb	r3, [r3, #27]
20003844:	1ad3      	subs	r3, r2, r3
20003846:	3b01      	subs	r3, #1
20003848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
2000384c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003850:	2b00      	cmp	r3, #0
20003852:	d052      	beq.n	200038fa <JTAG_TransferSlow+0x4ca>
20003854:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20003858:	f7fe feca 	bl	200025f0 <PIN_TDI_OUT>
2000385c:	f7fe feb3 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003860:	4b0b      	ldr	r3, [pc, #44]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003862:	685b      	ldr	r3, [r3, #4]
20003864:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20003868:	3b01      	subs	r3, #1
2000386a:	d1fd      	bne.n	20003868 <JTAG_TransferSlow+0x438>
2000386c:	63bb      	str	r3, [r7, #56]	@ 0x38
}
2000386e:	bf00      	nop
20003870:	f7fe fea2 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003874:	4b06      	ldr	r3, [pc, #24]	@ (20003890 <JTAG_TransferSlow+0x460>)
20003876:	685b      	ldr	r3, [r3, #4]
20003878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
2000387a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000387c:	3b01      	subs	r3, #1
2000387e:	d1fd      	bne.n	2000387c <JTAG_TransferSlow+0x44c>
20003880:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003882:	bf00      	nop
20003884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20003888:	3b01      	subs	r3, #1
2000388a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
2000388e:	e01a      	b.n	200038c6 <JTAG_TransferSlow+0x496>
20003890:	2000d834 	.word	0x2000d834
20003894:	f7fe fe97 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003898:	4b54      	ldr	r3, [pc, #336]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
2000389a:	685b      	ldr	r3, [r3, #4]
2000389c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
2000389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200038a0:	3b01      	subs	r3, #1
200038a2:	d1fd      	bne.n	200038a0 <JTAG_TransferSlow+0x470>
200038a4:	633b      	str	r3, [r7, #48]	@ 0x30
}
200038a6:	bf00      	nop
200038a8:	f7fe fe86 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200038ac:	4b4f      	ldr	r3, [pc, #316]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
200038ae:	685b      	ldr	r3, [r3, #4]
200038b0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
200038b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200038b4:	3b01      	subs	r3, #1
200038b6:	d1fd      	bne.n	200038b4 <JTAG_TransferSlow+0x484>
200038b8:	637b      	str	r3, [r7, #52]	@ 0x34
}
200038ba:	bf00      	nop
200038bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200038c0:	3b01      	subs	r3, #1
200038c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200038c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200038ca:	2b00      	cmp	r3, #0
200038cc:	d1e2      	bne.n	20003894 <JTAG_TransferSlow+0x464>
200038ce:	f7fe fe81 	bl	200025d4 <PIN_SWDIO_TMS_SET>
200038d2:	f7fe fe78 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200038d6:	4b45      	ldr	r3, [pc, #276]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
200038d8:	685b      	ldr	r3, [r3, #4]
200038da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
200038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200038de:	3b01      	subs	r3, #1
200038e0:	d1fd      	bne.n	200038de <JTAG_TransferSlow+0x4ae>
200038e2:	62bb      	str	r3, [r7, #40]	@ 0x28
}
200038e4:	bf00      	nop
200038e6:	f7fe fe67 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200038ea:	4b40      	ldr	r3, [pc, #256]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
200038ec:	685b      	ldr	r3, [r3, #4]
200038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
200038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200038f2:	3b01      	subs	r3, #1
200038f4:	d1fd      	bne.n	200038f2 <JTAG_TransferSlow+0x4c2>
200038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
200038f8:	e019      	b.n	2000392e <JTAG_TransferSlow+0x4fe>
200038fa:	f7fe fe6b 	bl	200025d4 <PIN_SWDIO_TMS_SET>
200038fe:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20003902:	f7fe fe75 	bl	200025f0 <PIN_TDI_OUT>
20003906:	f7fe fe5e 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000390a:	4b38      	ldr	r3, [pc, #224]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
2000390c:	685b      	ldr	r3, [r3, #4]
2000390e:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003910:	6a3b      	ldr	r3, [r7, #32]
20003912:	3b01      	subs	r3, #1
20003914:	d1fd      	bne.n	20003912 <JTAG_TransferSlow+0x4e2>
20003916:	623b      	str	r3, [r7, #32]
}
20003918:	bf00      	nop
2000391a:	f7fe fe4d 	bl	200025b8 <PIN_SWCLK_TCK_SET>
2000391e:	4b33      	ldr	r3, [pc, #204]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
20003920:	685b      	ldr	r3, [r3, #4]
20003922:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003926:	3b01      	subs	r3, #1
20003928:	d1fd      	bne.n	20003926 <JTAG_TransferSlow+0x4f6>
2000392a:	627b      	str	r3, [r7, #36]	@ 0x24
}
2000392c:	bf00      	nop
2000392e:	f7fe fe4a 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003932:	4b2e      	ldr	r3, [pc, #184]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
20003934:	685b      	ldr	r3, [r3, #4]
20003936:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003938:	693b      	ldr	r3, [r7, #16]
2000393a:	3b01      	subs	r3, #1
2000393c:	d1fd      	bne.n	2000393a <JTAG_TransferSlow+0x50a>
2000393e:	613b      	str	r3, [r7, #16]
}
20003940:	bf00      	nop
20003942:	f7fe fe39 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003946:	4b29      	ldr	r3, [pc, #164]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
20003948:	685b      	ldr	r3, [r3, #4]
2000394a:	617b      	str	r3, [r7, #20]
  __ASM volatile (
2000394c:	697b      	ldr	r3, [r7, #20]
2000394e:	3b01      	subs	r3, #1
20003950:	d1fd      	bne.n	2000394e <JTAG_TransferSlow+0x51e>
20003952:	617b      	str	r3, [r7, #20]
}
20003954:	bf00      	nop
20003956:	f7fe fe44 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
2000395a:	f7fe fe34 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
2000395e:	4b23      	ldr	r3, [pc, #140]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
20003960:	685b      	ldr	r3, [r3, #4]
20003962:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003964:	69bb      	ldr	r3, [r7, #24]
20003966:	3b01      	subs	r3, #1
20003968:	d1fd      	bne.n	20003966 <JTAG_TransferSlow+0x536>
2000396a:	61bb      	str	r3, [r7, #24]
}
2000396c:	bf00      	nop
2000396e:	f7fe fe23 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003972:	4b1e      	ldr	r3, [pc, #120]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
20003974:	685b      	ldr	r3, [r3, #4]
20003976:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20003978:	69fb      	ldr	r3, [r7, #28]
2000397a:	3b01      	subs	r3, #1
2000397c:	d1fd      	bne.n	2000397a <JTAG_TransferSlow+0x54a>
2000397e:	61fb      	str	r3, [r7, #28]
}
20003980:	bf00      	nop
20003982:	2001      	movs	r0, #1
20003984:	f7fe fe34 	bl	200025f0 <PIN_TDI_OUT>
20003988:	687b      	ldr	r3, [r7, #4]
2000398a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000398e:	2b00      	cmp	r3, #0
20003990:	d004      	beq.n	2000399c <JTAG_TransferSlow+0x56c>
20003992:	f7fe fe3f 	bl	20002614 <TIMESTAMP_GET>
20003996:	4603      	mov	r3, r0
20003998:	4a14      	ldr	r2, [pc, #80]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
2000399a:	6093      	str	r3, [r2, #8]
2000399c:	4b13      	ldr	r3, [pc, #76]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
2000399e:	7b1b      	ldrb	r3, [r3, #12]
200039a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200039a4:	e013      	b.n	200039ce <JTAG_TransferSlow+0x59e>
200039a6:	f7fe fe0e 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200039aa:	4b10      	ldr	r3, [pc, #64]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
200039ac:	685b      	ldr	r3, [r3, #4]
200039ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
200039b0:	68bb      	ldr	r3, [r7, #8]
200039b2:	3b01      	subs	r3, #1
200039b4:	d1fd      	bne.n	200039b2 <JTAG_TransferSlow+0x582>
200039b6:	60bb      	str	r3, [r7, #8]
}
200039b8:	bf00      	nop
200039ba:	f7fe fdfd 	bl	200025b8 <PIN_SWCLK_TCK_SET>
200039be:	4b0b      	ldr	r3, [pc, #44]	@ (200039ec <JTAG_TransferSlow+0x5bc>)
200039c0:	685b      	ldr	r3, [r3, #4]
200039c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
200039c4:	68fb      	ldr	r3, [r7, #12]
200039c6:	3b01      	subs	r3, #1
200039c8:	d1fd      	bne.n	200039c6 <JTAG_TransferSlow+0x596>
200039ca:	60fb      	str	r3, [r7, #12]
}
200039cc:	bf00      	nop
200039ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
200039d2:	1e5a      	subs	r2, r3, #1
200039d4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
200039d8:	2b00      	cmp	r3, #0
200039da:	d1e4      	bne.n	200039a6 <JTAG_TransferSlow+0x576>
200039dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
200039e0:	b2db      	uxtb	r3, r3
200039e2:	4618      	mov	r0, r3
200039e4:	37c0      	adds	r7, #192	@ 0xc0
200039e6:	46bd      	mov	sp, r7
200039e8:	bd80      	pop	{r7, pc}
200039ea:	bf00      	nop
200039ec:	2000d834 	.word	0x2000d834

200039f0 <JTAG_ReadIDCode>:


// JTAG Read IDCODE register
//   return: value read
uint32_t JTAG_ReadIDCode (void) {
200039f0:	b580      	push	{r7, lr}
200039f2:	b094      	sub	sp, #80	@ 0x50
200039f4:	af00      	add	r7, sp, #0
  uint32_t bit;
  uint32_t val;
  uint32_t n;

  PIN_TMS_SET();
200039f6:	f7fe fded 	bl	200025d4 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
200039fa:	f7fe fde4 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
200039fe:	4b68      	ldr	r3, [pc, #416]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a00:	685b      	ldr	r3, [r3, #4]
20003a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003a06:	3b01      	subs	r3, #1
20003a08:	d1fd      	bne.n	20003a06 <JTAG_ReadIDCode+0x16>
20003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20003a0c:	bf00      	nop
20003a0e:	f7fe fdd3 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003a12:	4b63      	ldr	r3, [pc, #396]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a14:	685b      	ldr	r3, [r3, #4]
20003a16:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20003a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20003a1a:	3b01      	subs	r3, #1
20003a1c:	d1fd      	bne.n	20003a1a <JTAG_ReadIDCode+0x2a>
20003a1e:	633b      	str	r3, [r7, #48]	@ 0x30
}
20003a20:	bf00      	nop
  PIN_TMS_CLR();
20003a22:	f7fe fdde 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
20003a26:	f7fe fdce 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003a2a:	4b5d      	ldr	r3, [pc, #372]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a2c:	685b      	ldr	r3, [r3, #4]
20003a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003a32:	3b01      	subs	r3, #1
20003a34:	d1fd      	bne.n	20003a32 <JTAG_ReadIDCode+0x42>
20003a36:	637b      	str	r3, [r7, #52]	@ 0x34
}
20003a38:	bf00      	nop
20003a3a:	f7fe fdbd 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003a3e:	4b58      	ldr	r3, [pc, #352]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a40:	685b      	ldr	r3, [r3, #4]
20003a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20003a46:	3b01      	subs	r3, #1
20003a48:	d1fd      	bne.n	20003a46 <JTAG_ReadIDCode+0x56>
20003a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20003a4c:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
20003a4e:	f7fe fdba 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003a52:	4b53      	ldr	r3, [pc, #332]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a54:	685b      	ldr	r3, [r3, #4]
20003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20003a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20003a5a:	3b01      	subs	r3, #1
20003a5c:	d1fd      	bne.n	20003a5a <JTAG_ReadIDCode+0x6a>
20003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003a60:	bf00      	nop
20003a62:	f7fe fda9 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003a66:	4b4e      	ldr	r3, [pc, #312]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a68:	685b      	ldr	r3, [r3, #4]
20003a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20003a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20003a6e:	3b01      	subs	r3, #1
20003a70:	d1fd      	bne.n	20003a6e <JTAG_ReadIDCode+0x7e>
20003a72:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003a74:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003a76:	4b4a      	ldr	r3, [pc, #296]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a78:	7edb      	ldrb	r3, [r3, #27]
20003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
20003a7c:	e016      	b.n	20003aac <JTAG_ReadIDCode+0xbc>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
20003a7e:	f7fe fda2 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003a82:	4b47      	ldr	r3, [pc, #284]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a84:	685b      	ldr	r3, [r3, #4]
20003a86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003a8a:	3b01      	subs	r3, #1
20003a8c:	d1fd      	bne.n	20003a8a <JTAG_ReadIDCode+0x9a>
20003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
20003a90:	bf00      	nop
20003a92:	f7fe fd91 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003a96:	4b42      	ldr	r3, [pc, #264]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003a98:	685b      	ldr	r3, [r3, #4]
20003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20003a9e:	3b01      	subs	r3, #1
20003aa0:	d1fd      	bne.n	20003a9e <JTAG_ReadIDCode+0xae>
20003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20003aa4:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003aa8:	3b01      	subs	r3, #1
20003aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
20003aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003aae:	2b00      	cmp	r3, #0
20003ab0:	d1e5      	bne.n	20003a7e <JTAG_ReadIDCode+0x8e>
  }

  val = 0U;
20003ab2:	2300      	movs	r3, #0
20003ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
20003ab6:	231f      	movs	r3, #31
20003ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
20003aba:	e021      	b.n	20003b00 <JTAG_ReadIDCode+0x110>
    JTAG_CYCLE_TDO(bit);                    /* Get D0..D30 */
20003abc:	f7fe fd83 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003ac0:	4b37      	ldr	r3, [pc, #220]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003ac2:	685b      	ldr	r3, [r3, #4]
20003ac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20003ac6:	69fb      	ldr	r3, [r7, #28]
20003ac8:	3b01      	subs	r3, #1
20003aca:	d1fd      	bne.n	20003ac8 <JTAG_ReadIDCode+0xd8>
20003acc:	61fb      	str	r3, [r7, #28]
}
20003ace:	bf00      	nop
20003ad0:	f7fe fd98 	bl	20002604 <PIN_TDO_IN>
20003ad4:	6478      	str	r0, [r7, #68]	@ 0x44
20003ad6:	f7fe fd6f 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003ada:	4b31      	ldr	r3, [pc, #196]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003adc:	685b      	ldr	r3, [r3, #4]
20003ade:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003ae0:	6a3b      	ldr	r3, [r7, #32]
20003ae2:	3b01      	subs	r3, #1
20003ae4:	d1fd      	bne.n	20003ae2 <JTAG_ReadIDCode+0xf2>
20003ae6:	623b      	str	r3, [r7, #32]
}
20003ae8:	bf00      	nop
    val  |= bit << 31;
20003aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003aec:	07db      	lsls	r3, r3, #31
20003aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20003af0:	4313      	orrs	r3, r2
20003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    val >>= 1;
20003af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20003af6:	085b      	lsrs	r3, r3, #1
20003af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
20003afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003afc:	3b01      	subs	r3, #1
20003afe:	64bb      	str	r3, [r7, #72]	@ 0x48
20003b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003b02:	2b00      	cmp	r3, #0
20003b04:	d1da      	bne.n	20003abc <JTAG_ReadIDCode+0xcc>
  }
  PIN_TMS_SET();
20003b06:	f7fe fd65 	bl	200025d4 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TDO(bit);                      /* Get D31 & Exit1-DR */
20003b0a:	f7fe fd5c 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003b0e:	4b24      	ldr	r3, [pc, #144]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003b10:	685b      	ldr	r3, [r3, #4]
20003b12:	607b      	str	r3, [r7, #4]
  __ASM volatile (
20003b14:	687b      	ldr	r3, [r7, #4]
20003b16:	3b01      	subs	r3, #1
20003b18:	d1fd      	bne.n	20003b16 <JTAG_ReadIDCode+0x126>
20003b1a:	607b      	str	r3, [r7, #4]
}
20003b1c:	bf00      	nop
20003b1e:	f7fe fd71 	bl	20002604 <PIN_TDO_IN>
20003b22:	6478      	str	r0, [r7, #68]	@ 0x44
20003b24:	f7fe fd48 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003b28:	4b1d      	ldr	r3, [pc, #116]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003b2a:	685b      	ldr	r3, [r3, #4]
20003b2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
20003b2e:	68bb      	ldr	r3, [r7, #8]
20003b30:	3b01      	subs	r3, #1
20003b32:	d1fd      	bne.n	20003b30 <JTAG_ReadIDCode+0x140>
20003b34:	60bb      	str	r3, [r7, #8]
}
20003b36:	bf00      	nop
  val |= bit << 31;
20003b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003b3a:	07db      	lsls	r3, r3, #31
20003b3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20003b3e:	4313      	orrs	r3, r2
20003b40:	64fb      	str	r3, [r7, #76]	@ 0x4c

  JTAG_CYCLE_TCK();                         /* Update-DR */
20003b42:	f7fe fd40 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003b46:	4b16      	ldr	r3, [pc, #88]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003b48:	685b      	ldr	r3, [r3, #4]
20003b4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003b4c:	68fb      	ldr	r3, [r7, #12]
20003b4e:	3b01      	subs	r3, #1
20003b50:	d1fd      	bne.n	20003b4e <JTAG_ReadIDCode+0x15e>
20003b52:	60fb      	str	r3, [r7, #12]
}
20003b54:	bf00      	nop
20003b56:	f7fe fd2f 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003b5a:	4b11      	ldr	r3, [pc, #68]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003b5c:	685b      	ldr	r3, [r3, #4]
20003b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003b60:	693b      	ldr	r3, [r7, #16]
20003b62:	3b01      	subs	r3, #1
20003b64:	d1fd      	bne.n	20003b62 <JTAG_ReadIDCode+0x172>
20003b66:	613b      	str	r3, [r7, #16]
}
20003b68:	bf00      	nop
  PIN_TMS_CLR();
20003b6a:	f7fe fd3a 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
20003b6e:	f7fe fd2a 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003b72:	4b0b      	ldr	r3, [pc, #44]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003b74:	685b      	ldr	r3, [r3, #4]
20003b76:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003b78:	697b      	ldr	r3, [r7, #20]
20003b7a:	3b01      	subs	r3, #1
20003b7c:	d1fd      	bne.n	20003b7a <JTAG_ReadIDCode+0x18a>
20003b7e:	617b      	str	r3, [r7, #20]
}
20003b80:	bf00      	nop
20003b82:	f7fe fd19 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003b86:	4b06      	ldr	r3, [pc, #24]	@ (20003ba0 <JTAG_ReadIDCode+0x1b0>)
20003b88:	685b      	ldr	r3, [r3, #4]
20003b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003b8c:	69bb      	ldr	r3, [r7, #24]
20003b8e:	3b01      	subs	r3, #1
20003b90:	d1fd      	bne.n	20003b8e <JTAG_ReadIDCode+0x19e>
20003b92:	61bb      	str	r3, [r7, #24]
}
20003b94:	bf00      	nop

  return (val);
20003b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
20003b98:	4618      	mov	r0, r3
20003b9a:	3750      	adds	r7, #80	@ 0x50
20003b9c:	46bd      	mov	sp, r7
20003b9e:	bd80      	pop	{r7, pc}
20003ba0:	2000d834 	.word	0x2000d834

20003ba4 <JTAG_WriteAbort>:


// JTAG Write ABORT register
//   data:   value to write
//   return: none
void JTAG_WriteAbort (uint32_t data) {
20003ba4:	b580      	push	{r7, lr}
20003ba6:	b0a0      	sub	sp, #128	@ 0x80
20003ba8:	af00      	add	r7, sp, #0
20003baa:	6078      	str	r0, [r7, #4]
  uint32_t n;

  PIN_TMS_SET();
20003bac:	f7fe fd12 	bl	200025d4 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
20003bb0:	f7fe fd09 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003bb4:	4b70      	ldr	r3, [pc, #448]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003bb6:	685b      	ldr	r3, [r3, #4]
20003bb8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20003bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20003bbc:	3b01      	subs	r3, #1
20003bbe:	d1fd      	bne.n	20003bbc <JTAG_WriteAbort+0x18>
20003bc0:	667b      	str	r3, [r7, #100]	@ 0x64
}
20003bc2:	bf00      	nop
20003bc4:	f7fe fcf8 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003bc8:	4b6b      	ldr	r3, [pc, #428]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003bca:	685b      	ldr	r3, [r3, #4]
20003bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
20003bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20003bd0:	3b01      	subs	r3, #1
20003bd2:	d1fd      	bne.n	20003bd0 <JTAG_WriteAbort+0x2c>
20003bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
}
20003bd6:	bf00      	nop
  PIN_TMS_CLR();
20003bd8:	f7fe fd03 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
20003bdc:	f7fe fcf3 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003be0:	4b65      	ldr	r3, [pc, #404]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003be2:	685b      	ldr	r3, [r3, #4]
20003be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
20003be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20003be8:	3b01      	subs	r3, #1
20003bea:	d1fd      	bne.n	20003be8 <JTAG_WriteAbort+0x44>
20003bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
20003bee:	bf00      	nop
20003bf0:	f7fe fce2 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003bf4:	4b60      	ldr	r3, [pc, #384]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003bf6:	685b      	ldr	r3, [r3, #4]
20003bf8:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
20003bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
20003bfc:	3b01      	subs	r3, #1
20003bfe:	d1fd      	bne.n	20003bfc <JTAG_WriteAbort+0x58>
20003c00:	673b      	str	r3, [r7, #112]	@ 0x70
}
20003c02:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
20003c04:	f7fe fcdf 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003c08:	4b5b      	ldr	r3, [pc, #364]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c0a:	685b      	ldr	r3, [r3, #4]
20003c0c:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
20003c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20003c10:	3b01      	subs	r3, #1
20003c12:	d1fd      	bne.n	20003c10 <JTAG_WriteAbort+0x6c>
20003c14:	677b      	str	r3, [r7, #116]	@ 0x74
}
20003c16:	bf00      	nop
20003c18:	f7fe fcce 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003c1c:	4b56      	ldr	r3, [pc, #344]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c1e:	685b      	ldr	r3, [r3, #4]
20003c20:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
20003c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20003c24:	3b01      	subs	r3, #1
20003c26:	d1fd      	bne.n	20003c24 <JTAG_WriteAbort+0x80>
20003c28:	67bb      	str	r3, [r7, #120]	@ 0x78
}
20003c2a:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003c2c:	4b52      	ldr	r3, [pc, #328]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c2e:	7edb      	ldrb	r3, [r3, #27]
20003c30:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003c32:	e016      	b.n	20003c62 <JTAG_WriteAbort+0xbe>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
20003c34:	f7fe fcc7 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003c38:	4b4f      	ldr	r3, [pc, #316]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c3a:	685b      	ldr	r3, [r3, #4]
20003c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
20003c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20003c40:	3b01      	subs	r3, #1
20003c42:	d1fd      	bne.n	20003c40 <JTAG_WriteAbort+0x9c>
20003c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20003c46:	bf00      	nop
20003c48:	f7fe fcb6 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003c4c:	4b4a      	ldr	r3, [pc, #296]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c4e:	685b      	ldr	r3, [r3, #4]
20003c50:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20003c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20003c54:	3b01      	subs	r3, #1
20003c56:	d1fd      	bne.n	20003c54 <JTAG_WriteAbort+0xb0>
20003c58:	663b      	str	r3, [r7, #96]	@ 0x60
}
20003c5a:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
20003c5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003c5e:	3b01      	subs	r3, #1
20003c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003c62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003c64:	2b00      	cmp	r3, #0
20003c66:	d1e5      	bne.n	20003c34 <JTAG_WriteAbort+0x90>
  }

  PIN_TDI_OUT(0U);
20003c68:	2000      	movs	r0, #0
20003c6a:	f7fe fcc1 	bl	200025f0 <PIN_TDI_OUT>
  JTAG_CYCLE_TCK();                         /* Set RnW=0 (Write) */
20003c6e:	f7fe fcaa 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003c72:	4b41      	ldr	r3, [pc, #260]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c74:	685b      	ldr	r3, [r3, #4]
20003c76:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20003c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20003c7a:	3b01      	subs	r3, #1
20003c7c:	d1fd      	bne.n	20003c7a <JTAG_WriteAbort+0xd6>
20003c7e:	647b      	str	r3, [r7, #68]	@ 0x44
}
20003c80:	bf00      	nop
20003c82:	f7fe fc99 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003c86:	4b3c      	ldr	r3, [pc, #240]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c88:	685b      	ldr	r3, [r3, #4]
20003c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
20003c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20003c8e:	3b01      	subs	r3, #1
20003c90:	d1fd      	bne.n	20003c8e <JTAG_WriteAbort+0xea>
20003c92:	64bb      	str	r3, [r7, #72]	@ 0x48
}
20003c94:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A2=0 */
20003c96:	f7fe fc96 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003c9a:	4b37      	ldr	r3, [pc, #220]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003c9c:	685b      	ldr	r3, [r3, #4]
20003c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
20003ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20003ca2:	3b01      	subs	r3, #1
20003ca4:	d1fd      	bne.n	20003ca2 <JTAG_WriteAbort+0xfe>
20003ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
20003ca8:	bf00      	nop
20003caa:	f7fe fc85 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003cae:	4b32      	ldr	r3, [pc, #200]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003cb0:	685b      	ldr	r3, [r3, #4]
20003cb2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
20003cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20003cb6:	3b01      	subs	r3, #1
20003cb8:	d1fd      	bne.n	20003cb6 <JTAG_WriteAbort+0x112>
20003cba:	653b      	str	r3, [r7, #80]	@ 0x50
}
20003cbc:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A3=0 */
20003cbe:	f7fe fc82 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003cc2:	4b2d      	ldr	r3, [pc, #180]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003cc4:	685b      	ldr	r3, [r3, #4]
20003cc6:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
20003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20003cca:	3b01      	subs	r3, #1
20003ccc:	d1fd      	bne.n	20003cca <JTAG_WriteAbort+0x126>
20003cce:	657b      	str	r3, [r7, #84]	@ 0x54
}
20003cd0:	bf00      	nop
20003cd2:	f7fe fc71 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003cd6:	4b28      	ldr	r3, [pc, #160]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003cd8:	685b      	ldr	r3, [r3, #4]
20003cda:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20003cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20003cde:	3b01      	subs	r3, #1
20003ce0:	d1fd      	bne.n	20003cde <JTAG_WriteAbort+0x13a>
20003ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20003ce4:	bf00      	nop

  for (n = 31U; n; n--) {
20003ce6:	231f      	movs	r3, #31
20003ce8:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003cea:	e01c      	b.n	20003d26 <JTAG_WriteAbort+0x182>
    JTAG_CYCLE_TDI(data);                   /* Set D0..D30 */
20003cec:	6878      	ldr	r0, [r7, #4]
20003cee:	f7fe fc7f 	bl	200025f0 <PIN_TDI_OUT>
20003cf2:	f7fe fc68 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003cf6:	4b20      	ldr	r3, [pc, #128]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003cf8:	685b      	ldr	r3, [r3, #4]
20003cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20003cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20003cfe:	3b01      	subs	r3, #1
20003d00:	d1fd      	bne.n	20003cfe <JTAG_WriteAbort+0x15a>
20003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003d04:	bf00      	nop
20003d06:	f7fe fc57 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003d0a:	4b1b      	ldr	r3, [pc, #108]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003d0c:	685b      	ldr	r3, [r3, #4]
20003d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20003d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20003d12:	3b01      	subs	r3, #1
20003d14:	d1fd      	bne.n	20003d12 <JTAG_WriteAbort+0x16e>
20003d16:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003d18:	bf00      	nop
    data >>= 1;
20003d1a:	687b      	ldr	r3, [r7, #4]
20003d1c:	085b      	lsrs	r3, r3, #1
20003d1e:	607b      	str	r3, [r7, #4]
  for (n = 31U; n; n--) {
20003d20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003d22:	3b01      	subs	r3, #1
20003d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003d28:	2b00      	cmp	r3, #0
20003d2a:	d1df      	bne.n	20003cec <JTAG_WriteAbort+0x148>
  }
  n = DAP_Data.jtag_dev.count - DAP_Data.jtag_dev.index - 1U;
20003d2c:	4b12      	ldr	r3, [pc, #72]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003d2e:	7e9b      	ldrb	r3, [r3, #26]
20003d30:	461a      	mov	r2, r3
20003d32:	4b11      	ldr	r3, [pc, #68]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003d34:	7edb      	ldrb	r3, [r3, #27]
20003d36:	1ad3      	subs	r3, r2, r3
20003d38:	3b01      	subs	r3, #1
20003d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (n) {
20003d3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003d3e:	2b00      	cmp	r3, #0
20003d40:	d04c      	beq.n	20003ddc <JTAG_WriteAbort+0x238>
    JTAG_CYCLE_TDI(data);                   /* Set D31 */
20003d42:	6878      	ldr	r0, [r7, #4]
20003d44:	f7fe fc54 	bl	200025f0 <PIN_TDI_OUT>
20003d48:	f7fe fc3d 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003d4c:	4b0a      	ldr	r3, [pc, #40]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003d4e:	685b      	ldr	r3, [r3, #4]
20003d50:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20003d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003d54:	3b01      	subs	r3, #1
20003d56:	d1fd      	bne.n	20003d54 <JTAG_WriteAbort+0x1b0>
20003d58:	637b      	str	r3, [r7, #52]	@ 0x34
}
20003d5a:	bf00      	nop
20003d5c:	f7fe fc2c 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003d60:	4b05      	ldr	r3, [pc, #20]	@ (20003d78 <JTAG_WriteAbort+0x1d4>)
20003d62:	685b      	ldr	r3, [r3, #4]
20003d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20003d68:	3b01      	subs	r3, #1
20003d6a:	d1fd      	bne.n	20003d68 <JTAG_WriteAbort+0x1c4>
20003d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20003d6e:	bf00      	nop
    for (--n; n; n--) {
20003d70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003d72:	3b01      	subs	r3, #1
20003d74:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003d76:	e018      	b.n	20003daa <JTAG_WriteAbort+0x206>
20003d78:	2000d834 	.word	0x2000d834
      JTAG_CYCLE_TCK();                     /* Bypass after data */
20003d7c:	f7fe fc23 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003d80:	4b3b      	ldr	r3, [pc, #236]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003d82:	685b      	ldr	r3, [r3, #4]
20003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003d88:	3b01      	subs	r3, #1
20003d8a:	d1fd      	bne.n	20003d88 <JTAG_WriteAbort+0x1e4>
20003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20003d8e:	bf00      	nop
20003d90:	f7fe fc12 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003d94:	4b36      	ldr	r3, [pc, #216]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003d96:	685b      	ldr	r3, [r3, #4]
20003d98:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20003d9c:	3b01      	subs	r3, #1
20003d9e:	d1fd      	bne.n	20003d9c <JTAG_WriteAbort+0x1f8>
20003da0:	633b      	str	r3, [r7, #48]	@ 0x30
}
20003da2:	bf00      	nop
    for (--n; n; n--) {
20003da4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003da6:	3b01      	subs	r3, #1
20003da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003daa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003dac:	2b00      	cmp	r3, #0
20003dae:	d1e5      	bne.n	20003d7c <JTAG_WriteAbort+0x1d8>
    }
    PIN_TMS_SET();
20003db0:	f7fe fc10 	bl	200025d4 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TCK();                       /* Bypass & Exit1-DR */
20003db4:	f7fe fc07 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003db8:	4b2d      	ldr	r3, [pc, #180]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003dba:	685b      	ldr	r3, [r3, #4]
20003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003dc0:	3b01      	subs	r3, #1
20003dc2:	d1fd      	bne.n	20003dc0 <JTAG_WriteAbort+0x21c>
20003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
20003dc6:	bf00      	nop
20003dc8:	f7fe fbf6 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003dcc:	4b28      	ldr	r3, [pc, #160]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003dce:	685b      	ldr	r3, [r3, #4]
20003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20003dd4:	3b01      	subs	r3, #1
20003dd6:	d1fd      	bne.n	20003dd4 <JTAG_WriteAbort+0x230>
20003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20003dda:	e018      	b.n	20003e0e <JTAG_WriteAbort+0x26a>
  } else {
    PIN_TMS_SET();
20003ddc:	f7fe fbfa 	bl	200025d4 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TDI(data);                   /* Set D31 & Exit1-DR */
20003de0:	6878      	ldr	r0, [r7, #4]
20003de2:	f7fe fc05 	bl	200025f0 <PIN_TDI_OUT>
20003de6:	f7fe fbee 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003dea:	4b21      	ldr	r3, [pc, #132]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003dec:	685b      	ldr	r3, [r3, #4]
20003dee:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20003df0:	69fb      	ldr	r3, [r7, #28]
20003df2:	3b01      	subs	r3, #1
20003df4:	d1fd      	bne.n	20003df2 <JTAG_WriteAbort+0x24e>
20003df6:	61fb      	str	r3, [r7, #28]
}
20003df8:	bf00      	nop
20003dfa:	f7fe fbdd 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003dfe:	4b1c      	ldr	r3, [pc, #112]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003e00:	685b      	ldr	r3, [r3, #4]
20003e02:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003e04:	6a3b      	ldr	r3, [r7, #32]
20003e06:	3b01      	subs	r3, #1
20003e08:	d1fd      	bne.n	20003e06 <JTAG_WriteAbort+0x262>
20003e0a:	623b      	str	r3, [r7, #32]
}
20003e0c:	bf00      	nop
  }

  JTAG_CYCLE_TCK();                         /* Update-DR */
20003e0e:	f7fe fbda 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003e12:	4b17      	ldr	r3, [pc, #92]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003e14:	685b      	ldr	r3, [r3, #4]
20003e16:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003e18:	68fb      	ldr	r3, [r7, #12]
20003e1a:	3b01      	subs	r3, #1
20003e1c:	d1fd      	bne.n	20003e1a <JTAG_WriteAbort+0x276>
20003e1e:	60fb      	str	r3, [r7, #12]
}
20003e20:	bf00      	nop
20003e22:	f7fe fbc9 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003e26:	4b12      	ldr	r3, [pc, #72]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003e28:	685b      	ldr	r3, [r3, #4]
20003e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003e2c:	693b      	ldr	r3, [r7, #16]
20003e2e:	3b01      	subs	r3, #1
20003e30:	d1fd      	bne.n	20003e2e <JTAG_WriteAbort+0x28a>
20003e32:	613b      	str	r3, [r7, #16]
}
20003e34:	bf00      	nop
  PIN_TMS_CLR();
20003e36:	f7fe fbd4 	bl	200025e2 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
20003e3a:	f7fe fbc4 	bl	200025c6 <PIN_SWCLK_TCK_CLR>
20003e3e:	4b0c      	ldr	r3, [pc, #48]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003e40:	685b      	ldr	r3, [r3, #4]
20003e42:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003e44:	697b      	ldr	r3, [r7, #20]
20003e46:	3b01      	subs	r3, #1
20003e48:	d1fd      	bne.n	20003e46 <JTAG_WriteAbort+0x2a2>
20003e4a:	617b      	str	r3, [r7, #20]
}
20003e4c:	bf00      	nop
20003e4e:	f7fe fbb3 	bl	200025b8 <PIN_SWCLK_TCK_SET>
20003e52:	4b07      	ldr	r3, [pc, #28]	@ (20003e70 <JTAG_WriteAbort+0x2cc>)
20003e54:	685b      	ldr	r3, [r3, #4]
20003e56:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20003e58:	69bb      	ldr	r3, [r7, #24]
20003e5a:	3b01      	subs	r3, #1
20003e5c:	d1fd      	bne.n	20003e5a <JTAG_WriteAbort+0x2b6>
20003e5e:	61bb      	str	r3, [r7, #24]
}
20003e60:	bf00      	nop
  PIN_TDI_OUT(1U);
20003e62:	2001      	movs	r0, #1
20003e64:	f7fe fbc4 	bl	200025f0 <PIN_TDI_OUT>
}
20003e68:	bf00      	nop
20003e6a:	3780      	adds	r7, #128	@ 0x80
20003e6c:	46bd      	mov	sp, r7
20003e6e:	bd80      	pop	{r7, pc}
20003e70:	2000d834 	.word	0x2000d834

20003e74 <JTAG_IR>:


// JTAG Set IR
//   ir:     IR value
//   return: none
void JTAG_IR (uint32_t ir) {
20003e74:	b580      	push	{r7, lr}
20003e76:	b082      	sub	sp, #8
20003e78:	af00      	add	r7, sp, #0
20003e7a:	6078      	str	r0, [r7, #4]
  if (DAP_Data.fast_clock) {
20003e7c:	4b07      	ldr	r3, [pc, #28]	@ (20003e9c <JTAG_IR+0x28>)
20003e7e:	785b      	ldrb	r3, [r3, #1]
20003e80:	2b00      	cmp	r3, #0
20003e82:	d003      	beq.n	20003e8c <JTAG_IR+0x18>
    JTAG_IR_Fast(ir);
20003e84:	6878      	ldr	r0, [r7, #4]
20003e86:	f7fe ff8f 	bl	20002da8 <JTAG_IR_Fast>
  } else {
    JTAG_IR_Slow(ir);
  }
}
20003e8a:	e002      	b.n	20003e92 <JTAG_IR+0x1e>
    JTAG_IR_Slow(ir);
20003e8c:	6878      	ldr	r0, [r7, #4]
20003e8e:	f7ff f981 	bl	20003194 <JTAG_IR_Slow>
}
20003e92:	bf00      	nop
20003e94:	3708      	adds	r7, #8
20003e96:	46bd      	mov	sp, r7
20003e98:	bd80      	pop	{r7, pc}
20003e9a:	bf00      	nop
20003e9c:	2000d834 	.word	0x2000d834

20003ea0 <JTAG_Transfer>:

// JTAG Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
uint8_t  JTAG_Transfer(uint32_t request, uint32_t *data) {
20003ea0:	b580      	push	{r7, lr}
20003ea2:	b082      	sub	sp, #8
20003ea4:	af00      	add	r7, sp, #0
20003ea6:	6078      	str	r0, [r7, #4]
20003ea8:	6039      	str	r1, [r7, #0]
  if (DAP_Data.fast_clock) {
20003eaa:	4b09      	ldr	r3, [pc, #36]	@ (20003ed0 <JTAG_Transfer+0x30>)
20003eac:	785b      	ldrb	r3, [r3, #1]
20003eae:	2b00      	cmp	r3, #0
20003eb0:	d005      	beq.n	20003ebe <JTAG_Transfer+0x1e>
    return JTAG_TransferFast(request, data);
20003eb2:	6839      	ldr	r1, [r7, #0]
20003eb4:	6878      	ldr	r0, [r7, #4]
20003eb6:	f7ff f81b 	bl	20002ef0 <JTAG_TransferFast>
20003eba:	4603      	mov	r3, r0
20003ebc:	e004      	b.n	20003ec8 <JTAG_Transfer+0x28>
  } else {
    return JTAG_TransferSlow(request, data);
20003ebe:	6839      	ldr	r1, [r7, #0]
20003ec0:	6878      	ldr	r0, [r7, #4]
20003ec2:	f7ff fab5 	bl	20003430 <JTAG_TransferSlow>
20003ec6:	4603      	mov	r3, r0
  }
}
20003ec8:	4618      	mov	r0, r3
20003eca:	3708      	adds	r7, #8
20003ecc:	46bd      	mov	sp, r7
20003ece:	bd80      	pop	{r7, pc}
20003ed0:	2000d834 	.word	0x2000d834

20003ed4 <PIN_SWCLK_TCK_SET>:
static void     PIN_SWCLK_TCK_SET (void) {
20003ed4:	b480      	push	{r7}
20003ed6:	af00      	add	r7, sp, #0
}
20003ed8:	bf00      	nop
20003eda:	46bd      	mov	sp, r7
20003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
20003ee0:	4770      	bx	lr

20003ee2 <PIN_SWCLK_TCK_CLR>:
static void     PIN_SWCLK_TCK_CLR (void) {
20003ee2:	b480      	push	{r7}
20003ee4:	af00      	add	r7, sp, #0
}
20003ee6:	bf00      	nop
20003ee8:	46bd      	mov	sp, r7
20003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
20003eee:	4770      	bx	lr

20003ef0 <PIN_SWDIO_IN>:
static uint32_t PIN_SWDIO_IN      (void) {
20003ef0:	b480      	push	{r7}
20003ef2:	af00      	add	r7, sp, #0
  return (0U);
20003ef4:	2300      	movs	r3, #0
}
20003ef6:	4618      	mov	r0, r3
20003ef8:	46bd      	mov	sp, r7
20003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
20003efe:	4770      	bx	lr

20003f00 <PIN_SWDIO_OUT>:
static void     PIN_SWDIO_OUT     (uint32_t bit) {
20003f00:	b480      	push	{r7}
20003f02:	b083      	sub	sp, #12
20003f04:	af00      	add	r7, sp, #0
20003f06:	6078      	str	r0, [r7, #4]
}
20003f08:	bf00      	nop
20003f0a:	370c      	adds	r7, #12
20003f0c:	46bd      	mov	sp, r7
20003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003f12:	4770      	bx	lr

20003f14 <TIMESTAMP_GET>:
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
20003f14:	b480      	push	{r7}
20003f16:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20003f18:	4b03      	ldr	r3, [pc, #12]	@ (20003f28 <TIMESTAMP_GET+0x14>)
20003f1a:	685b      	ldr	r3, [r3, #4]
}
20003f1c:	4618      	mov	r0, r3
20003f1e:	46bd      	mov	sp, r7
20003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
20003f24:	4770      	bx	lr
20003f26:	bf00      	nop
20003f28:	e0001000 	.word	0xe0001000

20003f2c <SWJ_Sequence>:
// Generate SWJ Sequence
//   count:  sequence bit count
//   data:   pointer to sequence bit data
//   return: none
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
void SWJ_Sequence (uint32_t count, const uint8_t *data) {
20003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20003f30:	b090      	sub	sp, #64	@ 0x40
20003f32:	af02      	add	r7, sp, #8
20003f34:	6078      	str	r0, [r7, #4]
20003f36:	6039      	str	r1, [r7, #0]
  uint32_t val;
  uint32_t n;

  uint8_t xFerSizes[3];

  	uint8_t dummyVal = 0;
20003f38:	2300      	movs	r3, #0
20003f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  	calculate_xfer_sizes(count, xFerSizes);
20003f3e:	687b      	ldr	r3, [r7, #4]
20003f40:	b29b      	uxth	r3, r3
20003f42:	f107 0220 	add.w	r2, r7, #32
20003f46:	4611      	mov	r1, r2
20003f48:	4618      	mov	r0, r3
20003f4a:	f7fe fcc7 	bl	200028dc <calculate_xfer_sizes>

  	uint32_t currentBit = 0;
20003f4e:	2300      	movs	r3, #0
20003f50:	637b      	str	r3, [r7, #52]	@ 0x34



  	while(xFerSizes[IDX_8_BIT])
20003f52:	e02e      	b.n	20003fb2 <SWJ_Sequence+0x86>
  	{
  		uint8_t tms_val = *data;
20003f54:	683b      	ldr	r3, [r7, #0]
20003f56:	781b      	ldrb	r3, [r3, #0]
20003f58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  		uint64_t tdo_val;

  		if(tms_val != 0 && currentBit != 0)
20003f5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
20003f60:	2b00      	cmp	r3, #0
20003f62:	d005      	beq.n	20003f70 <SWJ_Sequence+0x44>
20003f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003f66:	2b00      	cmp	r3, #0
20003f68:	d002      	beq.n	20003f70 <SWJ_Sequence+0x44>
  		{
  			dummyVal = 1;
20003f6a:	2301      	movs	r3, #1
20003f6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  		}

  		SPI_TMS_Transfer(tms_val, 8);
20003f70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
20003f74:	2200      	movs	r2, #0
20003f76:	469a      	mov	sl, r3
20003f78:	4693      	mov	fp, r2
20003f7a:	2208      	movs	r2, #8
20003f7c:	4650      	mov	r0, sl
20003f7e:	4659      	mov	r1, fp
20003f80:	f000 fee6 	bl	20004d50 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , 8);
20003f84:	f107 0118 	add.w	r1, r7, #24
20003f88:	2308      	movs	r3, #8
20003f8a:	9300      	str	r3, [sp, #0]
20003f8c:	f04f 0200 	mov.w	r2, #0
20003f90:	f04f 0300 	mov.w	r3, #0
20003f94:	4608      	mov	r0, r1
20003f96:	f000 ff8b 	bl	20004eb0 <SPI_Transfer>

  		data++;
20003f9a:	683b      	ldr	r3, [r7, #0]
20003f9c:	3301      	adds	r3, #1
20003f9e:	603b      	str	r3, [r7, #0]
  		xFerSizes[IDX_8_BIT]--;
20003fa0:	f897 3020 	ldrb.w	r3, [r7, #32]
20003fa4:	3b01      	subs	r3, #1
20003fa6:	b2db      	uxtb	r3, r3
20003fa8:	f887 3020 	strb.w	r3, [r7, #32]
  		currentBit+= 8;
20003fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20003fae:	3308      	adds	r3, #8
20003fb0:	637b      	str	r3, [r7, #52]	@ 0x34
  	while(xFerSizes[IDX_8_BIT])
20003fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
20003fb6:	2b00      	cmp	r3, #0
20003fb8:	d1cc      	bne.n	20003f54 <SWJ_Sequence+0x28>
  	}

  	while(xFerSizes[IDX_RM1_BIT])
20003fba:	e032      	b.n	20004022 <SWJ_Sequence+0xf6>
  	{
  		uint32_t delay_cnt = 2500;
20003fbc:	f640 13c4 	movw	r3, #2500	@ 0x9c4
20003fc0:	633b      	str	r3, [r7, #48]	@ 0x30

  		while(delay_cnt--)
20003fc2:	e000      	b.n	20003fc6 <SWJ_Sequence+0x9a>
  	    {
  		  __asm("nop");
20003fc4:	bf00      	nop
  		while(delay_cnt--)
20003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20003fc8:	1e5a      	subs	r2, r3, #1
20003fca:	633a      	str	r2, [r7, #48]	@ 0x30
20003fcc:	2b00      	cmp	r3, #0
20003fce:	d1f9      	bne.n	20003fc4 <SWJ_Sequence+0x98>
  	    }

  		uint16_t tms_val = extract_nbits_lsb(data, currentBit, xFerSizes[IDX_RM1_BIT]);
20003fd0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20003fd4:	461a      	mov	r2, r3
20003fd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
20003fd8:	6838      	ldr	r0, [r7, #0]
20003fda:	f7fe fb83 	bl	200026e4 <extract_nbits_lsb>
20003fde:	4603      	mov	r3, r0
20003fe0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  		uint64_t tdo_val;

  		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM1_BIT]);
20003fe2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
20003fe4:	2200      	movs	r2, #0
20003fe6:	4698      	mov	r8, r3
20003fe8:	4691      	mov	r9, r2
20003fea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20003fee:	461a      	mov	r2, r3
20003ff0:	4640      	mov	r0, r8
20003ff2:	4649      	mov	r1, r9
20003ff4:	f000 feac 	bl	20004d50 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , xFerSizes[IDX_RM1_BIT]);
20003ff8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20003ffc:	f107 0110 	add.w	r1, r7, #16
20004000:	9300      	str	r3, [sp, #0]
20004002:	f04f 0200 	mov.w	r2, #0
20004006:	f04f 0300 	mov.w	r3, #0
2000400a:	4608      	mov	r0, r1
2000400c:	f000 ff50 	bl	20004eb0 <SPI_Transfer>


  		currentBit+= xFerSizes[IDX_RM1_BIT];
20004010:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20004014:	461a      	mov	r2, r3
20004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20004018:	4413      	add	r3, r2
2000401a:	637b      	str	r3, [r7, #52]	@ 0x34

  		xFerSizes[IDX_RM1_BIT] = 0;
2000401c:	2300      	movs	r3, #0
2000401e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  	while(xFerSizes[IDX_RM1_BIT])
20004022:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20004026:	2b00      	cmp	r3, #0
20004028:	d1c8      	bne.n	20003fbc <SWJ_Sequence+0x90>

  	}

  	while(xFerSizes[IDX_RM2_BIT])
2000402a:	e032      	b.n	20004092 <SWJ_Sequence+0x166>
  	{
  		//TODO: extract bits!!
  		uint32_t delay_cnt = 2000;
2000402c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
20004030:	62fb      	str	r3, [r7, #44]	@ 0x2c

  		while(delay_cnt--)
20004032:	e000      	b.n	20004036 <SWJ_Sequence+0x10a>
  		{
  		  __asm("nop");
20004034:	bf00      	nop
  		while(delay_cnt--)
20004036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20004038:	1e5a      	subs	r2, r3, #1
2000403a:	62fa      	str	r2, [r7, #44]	@ 0x2c
2000403c:	2b00      	cmp	r3, #0
2000403e:	d1f9      	bne.n	20004034 <SWJ_Sequence+0x108>
  		}

  		uint16_t tms_val = extract_nbits_lsb(data, currentBit, xFerSizes[IDX_RM2_BIT]);
20004040:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
20004044:	461a      	mov	r2, r3
20004046:	6b79      	ldr	r1, [r7, #52]	@ 0x34
20004048:	6838      	ldr	r0, [r7, #0]
2000404a:	f7fe fb4b 	bl	200026e4 <extract_nbits_lsb>
2000404e:	4603      	mov	r3, r0
20004050:	853b      	strh	r3, [r7, #40]	@ 0x28
  		uint64_t tdo_val;

  		SPI_TMS_Transfer(tms_val, xFerSizes[IDX_RM2_BIT]);
20004052:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
20004054:	2200      	movs	r2, #0
20004056:	461c      	mov	r4, r3
20004058:	4615      	mov	r5, r2
2000405a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
2000405e:	461a      	mov	r2, r3
20004060:	4620      	mov	r0, r4
20004062:	4629      	mov	r1, r5
20004064:	f000 fe74 	bl	20004d50 <SPI_TMS_Transfer>
  		SPI_Transfer(&tdo_val, 0 , xFerSizes[IDX_RM2_BIT]);
20004068:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
2000406c:	f107 0108 	add.w	r1, r7, #8
20004070:	9300      	str	r3, [sp, #0]
20004072:	f04f 0200 	mov.w	r2, #0
20004076:	f04f 0300 	mov.w	r3, #0
2000407a:	4608      	mov	r0, r1
2000407c:	f000 ff18 	bl	20004eb0 <SPI_Transfer>


  		currentBit+= xFerSizes[IDX_RM2_BIT];
20004080:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
20004084:	461a      	mov	r2, r3
20004086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20004088:	4413      	add	r3, r2
2000408a:	637b      	str	r3, [r7, #52]	@ 0x34

  		xFerSizes[IDX_RM2_BIT] = 0;
2000408c:	2300      	movs	r3, #0
2000408e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  	while(xFerSizes[IDX_RM2_BIT])
20004092:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
20004096:	2b00      	cmp	r3, #0
20004098:	d1c8      	bne.n	2000402c <SWJ_Sequence+0x100>

  	}

}
2000409a:	bf00      	nop
2000409c:	bf00      	nop
2000409e:	3738      	adds	r7, #56	@ 0x38
200040a0:	46bd      	mov	sp, r7
200040a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

200040a8 <SWD_Sequence>:
//   info:   sequence information
//   swdo:   pointer to SWDIO generated data
//   swdi:   pointer to SWDIO captured data
//   return: none
#if (DAP_SWD != 0)
void SWD_Sequence (uint32_t info, const uint8_t *swdo, uint8_t *swdi) {
200040a8:	b580      	push	{r7, lr}
200040aa:	b08c      	sub	sp, #48	@ 0x30
200040ac:	af00      	add	r7, sp, #0
200040ae:	60f8      	str	r0, [r7, #12]
200040b0:	60b9      	str	r1, [r7, #8]
200040b2:	607a      	str	r2, [r7, #4]
  uint32_t val;
  uint32_t bit;
  uint32_t n, k;

  n = info & SWD_SEQUENCE_CLK;
200040b4:	68fb      	ldr	r3, [r7, #12]
200040b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200040ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (n == 0U) {
200040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200040be:	2b00      	cmp	r3, #0
200040c0:	d101      	bne.n	200040c6 <SWD_Sequence+0x1e>
    n = 64U;
200040c2:	2340      	movs	r3, #64	@ 0x40
200040c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  if (info & SWD_SEQUENCE_DIN) {
200040c6:	68fb      	ldr	r3, [r7, #12]
200040c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200040cc:	2b00      	cmp	r3, #0
200040ce:	d06d      	beq.n	200041ac <SWD_Sequence+0x104>
    while (n) {
200040d0:	e03a      	b.n	20004148 <SWD_Sequence+0xa0>
      val = 0U;
200040d2:	2300      	movs	r3, #0
200040d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
200040d6:	2308      	movs	r3, #8
200040d8:	627b      	str	r3, [r7, #36]	@ 0x24
200040da:	e024      	b.n	20004126 <SWD_Sequence+0x7e>
        SW_READ_BIT(bit);
200040dc:	f7ff ff01 	bl	20003ee2 <PIN_SWCLK_TCK_CLR>
200040e0:	4b36      	ldr	r3, [pc, #216]	@ (200041bc <SWD_Sequence+0x114>)
200040e2:	685b      	ldr	r3, [r3, #4]
200040e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
200040e6:	69bb      	ldr	r3, [r7, #24]
200040e8:	3b01      	subs	r3, #1
200040ea:	d1fd      	bne.n	200040e8 <SWD_Sequence+0x40>
200040ec:	61bb      	str	r3, [r7, #24]
}
200040ee:	bf00      	nop
200040f0:	f7ff fefe 	bl	20003ef0 <PIN_SWDIO_IN>
200040f4:	6238      	str	r0, [r7, #32]
200040f6:	f7ff feed 	bl	20003ed4 <PIN_SWCLK_TCK_SET>
200040fa:	4b30      	ldr	r3, [pc, #192]	@ (200041bc <SWD_Sequence+0x114>)
200040fc:	685b      	ldr	r3, [r3, #4]
200040fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20004100:	69fb      	ldr	r3, [r7, #28]
20004102:	3b01      	subs	r3, #1
20004104:	d1fd      	bne.n	20004102 <SWD_Sequence+0x5a>
20004106:	61fb      	str	r3, [r7, #28]
}
20004108:	bf00      	nop
        val >>= 1;
2000410a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000410c:	085b      	lsrs	r3, r3, #1
2000410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        val  |= bit << 7;
20004110:	6a3b      	ldr	r3, [r7, #32]
20004112:	01db      	lsls	r3, r3, #7
20004114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20004116:	4313      	orrs	r3, r2
20004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
2000411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000411c:	3b01      	subs	r3, #1
2000411e:	627b      	str	r3, [r7, #36]	@ 0x24
20004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004122:	3b01      	subs	r3, #1
20004124:	62bb      	str	r3, [r7, #40]	@ 0x28
20004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20004128:	2b00      	cmp	r3, #0
2000412a:	d002      	beq.n	20004132 <SWD_Sequence+0x8a>
2000412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000412e:	2b00      	cmp	r3, #0
20004130:	d1d4      	bne.n	200040dc <SWD_Sequence+0x34>
      }
      val >>= k;
20004132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20004136:	fa22 f303 	lsr.w	r3, r2, r3
2000413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *swdi++ = (uint8_t)val;
2000413c:	687b      	ldr	r3, [r7, #4]
2000413e:	1c5a      	adds	r2, r3, #1
20004140:	607a      	str	r2, [r7, #4]
20004142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20004144:	b2d2      	uxtb	r2, r2
20004146:	701a      	strb	r2, [r3, #0]
    while (n) {
20004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000414a:	2b00      	cmp	r3, #0
2000414c:	d1c1      	bne.n	200040d2 <SWD_Sequence+0x2a>
        SW_WRITE_BIT(val);
        val >>= 1;
      }
    }
  }
}
2000414e:	e030      	b.n	200041b2 <SWD_Sequence+0x10a>
      val = *swdo++;
20004150:	68bb      	ldr	r3, [r7, #8]
20004152:	1c5a      	adds	r2, r3, #1
20004154:	60ba      	str	r2, [r7, #8]
20004156:	781b      	ldrb	r3, [r3, #0]
20004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
2000415a:	2308      	movs	r3, #8
2000415c:	627b      	str	r3, [r7, #36]	@ 0x24
2000415e:	e01f      	b.n	200041a0 <SWD_Sequence+0xf8>
        SW_WRITE_BIT(val);
20004160:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
20004162:	f7ff fecd 	bl	20003f00 <PIN_SWDIO_OUT>
20004166:	f7ff febc 	bl	20003ee2 <PIN_SWCLK_TCK_CLR>
2000416a:	4b14      	ldr	r3, [pc, #80]	@ (200041bc <SWD_Sequence+0x114>)
2000416c:	685b      	ldr	r3, [r3, #4]
2000416e:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20004170:	693b      	ldr	r3, [r7, #16]
20004172:	3b01      	subs	r3, #1
20004174:	d1fd      	bne.n	20004172 <SWD_Sequence+0xca>
20004176:	613b      	str	r3, [r7, #16]
}
20004178:	bf00      	nop
2000417a:	f7ff feab 	bl	20003ed4 <PIN_SWCLK_TCK_SET>
2000417e:	4b0f      	ldr	r3, [pc, #60]	@ (200041bc <SWD_Sequence+0x114>)
20004180:	685b      	ldr	r3, [r3, #4]
20004182:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20004184:	697b      	ldr	r3, [r7, #20]
20004186:	3b01      	subs	r3, #1
20004188:	d1fd      	bne.n	20004186 <SWD_Sequence+0xde>
2000418a:	617b      	str	r3, [r7, #20]
}
2000418c:	bf00      	nop
        val >>= 1;
2000418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20004190:	085b      	lsrs	r3, r3, #1
20004192:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for (k = 8U; k && n; k--, n--) {
20004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20004196:	3b01      	subs	r3, #1
20004198:	627b      	str	r3, [r7, #36]	@ 0x24
2000419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000419c:	3b01      	subs	r3, #1
2000419e:	62bb      	str	r3, [r7, #40]	@ 0x28
200041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200041a2:	2b00      	cmp	r3, #0
200041a4:	d002      	beq.n	200041ac <SWD_Sequence+0x104>
200041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200041a8:	2b00      	cmp	r3, #0
200041aa:	d1d9      	bne.n	20004160 <SWD_Sequence+0xb8>
    while (n) {
200041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200041ae:	2b00      	cmp	r3, #0
200041b0:	d1ce      	bne.n	20004150 <SWD_Sequence+0xa8>
}
200041b2:	bf00      	nop
200041b4:	3730      	adds	r7, #48	@ 0x30
200041b6:	46bd      	mov	sp, r7
200041b8:	bd80      	pop	{r7, pc}
200041ba:	bf00      	nop
200041bc:	2000d834 	.word	0x2000d834

200041c0 <generate_even_parity>:
int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize);

void SPI_TMS_Transfer(uint64_t data, uint8_t bits );

// Generate even parity bit for given data
uint8_t generate_even_parity(uint32_t data) {
200041c0:	b480      	push	{r7}
200041c2:	b085      	sub	sp, #20
200041c4:	af00      	add	r7, sp, #0
200041c6:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
200041c8:	2300      	movs	r3, #0
200041ca:	73fb      	strb	r3, [r7, #15]
    uint32_t temp = data;
200041cc:	687b      	ldr	r3, [r7, #4]
200041ce:	60bb      	str	r3, [r7, #8]

    // Count number of 1s
    while (temp) {
200041d0:	e00a      	b.n	200041e8 <generate_even_parity+0x28>
        count ^= (temp & 1);
200041d2:	68bb      	ldr	r3, [r7, #8]
200041d4:	b2db      	uxtb	r3, r3
200041d6:	f003 0301 	and.w	r3, r3, #1
200041da:	b2da      	uxtb	r2, r3
200041dc:	7bfb      	ldrb	r3, [r7, #15]
200041de:	4053      	eors	r3, r2
200041e0:	73fb      	strb	r3, [r7, #15]
        temp >>= 1;
200041e2:	68bb      	ldr	r3, [r7, #8]
200041e4:	085b      	lsrs	r3, r3, #1
200041e6:	60bb      	str	r3, [r7, #8]
    while (temp) {
200041e8:	68bb      	ldr	r3, [r7, #8]
200041ea:	2b00      	cmp	r3, #0
200041ec:	d1f1      	bne.n	200041d2 <generate_even_parity+0x12>
    }

    // For even parity: if count of 1s is odd, parity bit must be 1
    // if count is even, parity bit is 0
    return count; 
200041ee:	7bfb      	ldrb	r3, [r7, #15]
}
200041f0:	4618      	mov	r0, r3
200041f2:	3714      	adds	r7, #20
200041f4:	46bd      	mov	sp, r7
200041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200041fa:	4770      	bx	lr

200041fc <check_even_parity>:

// Check if data + parity bit satisfies even parity
uint8_t check_even_parity(uint32_t data, uint8_t parity) {
200041fc:	b480      	push	{r7}
200041fe:	b085      	sub	sp, #20
20004200:	af00      	add	r7, sp, #0
20004202:	6078      	str	r0, [r7, #4]
20004204:	460b      	mov	r3, r1
20004206:	70fb      	strb	r3, [r7, #3]
    uint8_t total_ones = parity;
20004208:	78fb      	ldrb	r3, [r7, #3]
2000420a:	73fb      	strb	r3, [r7, #15]
    uint32_t temp = data;
2000420c:	687b      	ldr	r3, [r7, #4]
2000420e:	60bb      	str	r3, [r7, #8]

    while (temp) {
20004210:	e00a      	b.n	20004228 <check_even_parity+0x2c>
        total_ones ^= (temp & 1);
20004212:	68bb      	ldr	r3, [r7, #8]
20004214:	b2db      	uxtb	r3, r3
20004216:	f003 0301 	and.w	r3, r3, #1
2000421a:	b2da      	uxtb	r2, r3
2000421c:	7bfb      	ldrb	r3, [r7, #15]
2000421e:	4053      	eors	r3, r2
20004220:	73fb      	strb	r3, [r7, #15]
        temp >>= 1;
20004222:	68bb      	ldr	r3, [r7, #8]
20004224:	085b      	lsrs	r3, r3, #1
20004226:	60bb      	str	r3, [r7, #8]
    while (temp) {
20004228:	68bb      	ldr	r3, [r7, #8]
2000422a:	2b00      	cmp	r3, #0
2000422c:	d1f1      	bne.n	20004212 <check_even_parity+0x16>
    }

    // If XOR result is 0, then even parity is satisfied
    return (total_ones == 0);
2000422e:	7bfb      	ldrb	r3, [r7, #15]
20004230:	2b00      	cmp	r3, #0
20004232:	bf0c      	ite	eq
20004234:	2301      	moveq	r3, #1
20004236:	2300      	movne	r3, #0
20004238:	b2db      	uxtb	r3, r3
}
2000423a:	4618      	mov	r0, r3
2000423c:	3714      	adds	r7, #20
2000423e:	46bd      	mov	sp, r7
20004240:	f85d 7b04 	ldr.w	r7, [sp], #4
20004244:	4770      	bx	lr
	...

20004248 <SWD_Transfer_LL>:
// SWD Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
                                 \
uint8_t SWD_Transfer_LL(uint32_t request, uint32_t *data) {
20004248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2000424c:	b090      	sub	sp, #64	@ 0x40
2000424e:	af02      	add	r7, sp, #8
20004250:	60f8      	str	r0, [r7, #12]
20004252:	60b9      	str	r1, [r7, #8]
  uint32_t ack;
  uint8_t writeReq = 1;
20004254:	2301      	movs	r3, #1
20004256:	77fb      	strb	r3, [r7, #31]
  uint32_t bit;

  uint64_t dummyRead;
                                                                                
  uint32_t n;
  uint32_t read_data = 0;
20004258:	2300      	movs	r3, #0
2000425a:	623b      	str	r3, [r7, #32]

  uint32_t write_data = 0;
2000425c:	2300      	movs	r3, #0
2000425e:	633b      	str	r3, [r7, #48]	@ 0x30
  write_nbits_lsb(&writeReq, 1, 4, request);
20004260:	68fb      	ldr	r3, [r7, #12]
20004262:	b29b      	uxth	r3, r3
20004264:	f107 001f 	add.w	r0, r7, #31
20004268:	2204      	movs	r2, #4
2000426a:	2101      	movs	r1, #1
2000426c:	f7fe fa78 	bl	20002760 <write_nbits_lsb>

  parity = generate_even_parity(request & 0xf);
20004270:	68fb      	ldr	r3, [r7, #12]
20004272:	f003 030f 	and.w	r3, r3, #15
20004276:	4618      	mov	r0, r3
20004278:	f7ff ffa2 	bl	200041c0 <generate_even_parity>
2000427c:	4603      	mov	r3, r0
2000427e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  write_nbits_lsb(&writeReq, 5, 1, parity);
20004282:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
20004286:	b29b      	uxth	r3, r3
20004288:	f107 001f 	add.w	r0, r7, #31
2000428c:	2201      	movs	r2, #1
2000428e:	2105      	movs	r1, #5
20004290:	f7fe fa66 	bl	20002760 <write_nbits_lsb>

  write_nbits_lsb(&writeReq, 7, 1, 1);
20004294:	f107 001f 	add.w	r0, r7, #31
20004298:	2301      	movs	r3, #1
2000429a:	2201      	movs	r2, #1
2000429c:	2107      	movs	r1, #7
2000429e:	f7fe fa5f 	bl	20002760 <write_nbits_lsb>

  SPI_SwitchPhaseToWrite();
200042a2:	f000 fddb 	bl	20004e5c <SPI_SwitchPhaseToWrite>
  SPI4->CR1 |= (0x1 << 6);
200042a6:	4bb1      	ldr	r3, [pc, #708]	@ (2000456c <SWD_Transfer_LL+0x324>)
200042a8:	681b      	ldr	r3, [r3, #0]
200042aa:	4ab0      	ldr	r2, [pc, #704]	@ (2000456c <SWD_Transfer_LL+0x324>)
200042ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200042b0:	6013      	str	r3, [r2, #0]

  SPI_TMS_Transfer(writeReq, 8);
200042b2:	7ffb      	ldrb	r3, [r7, #31]
200042b4:	b2db      	uxtb	r3, r3
200042b6:	2200      	movs	r2, #0
200042b8:	603b      	str	r3, [r7, #0]
200042ba:	607a      	str	r2, [r7, #4]
200042bc:	2208      	movs	r2, #8
200042be:	e9d7 0100 	ldrd	r0, r1, [r7]
200042c2:	f000 fd45 	bl	20004d50 <SPI_TMS_Transfer>
  SPI_Transfer(&dummyRead, 0, 8);
200042c6:	f107 0110 	add.w	r1, r7, #16
200042ca:	2308      	movs	r3, #8
200042cc:	9300      	str	r3, [sp, #0]
200042ce:	f04f 0200 	mov.w	r2, #0
200042d2:	f04f 0300 	mov.w	r3, #0
200042d6:	4608      	mov	r0, r1
200042d8:	f000 fdea 	bl	20004eb0 <SPI_Transfer>
  SPI_TMSRead(&dummyRead, 8);
200042dc:	f107 0310 	add.w	r3, r7, #16
200042e0:	2108      	movs	r1, #8
200042e2:	4618      	mov	r0, r3
200042e4:	f000 fd6e 	bl	20004dc4 <SPI_TMSRead>

  if (request & DAP_TRANSFER_RnW)
200042e8:	68fb      	ldr	r3, [r7, #12]
200042ea:	f003 0302 	and.w	r3, r3, #2
200042ee:	2b00      	cmp	r3, #0
200042f0:	f000 8094 	beq.w	2000441c <SWD_Transfer_LL+0x1d4>
  {
	  //TODO: correct the shiftin according to n variable...
	  SPI_SwitchPhaseToListen();
200042f4:	f000 fd88 	bl	20004e08 <SPI_SwitchPhaseToListen>
	  /* Turnaround */

	  n = DAP_Data.swd_conf.turnaround;
200042f8:	4b9d      	ldr	r3, [pc, #628]	@ (20004570 <SWD_Transfer_LL+0x328>)
200042fa:	7e1b      	ldrb	r3, [r3, #24]
200042fc:	62bb      	str	r3, [r7, #40]	@ 0x28

	  SPI4->CR2 = ( (16 -1) << 8);
200042fe:	4b9b      	ldr	r3, [pc, #620]	@ (2000456c <SWD_Transfer_LL+0x324>)
20004300:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
20004304:	605a      	str	r2, [r3, #4]
	  SPI_Transfer(&dummyRead, 0, 16);
20004306:	f107 0110 	add.w	r1, r7, #16
2000430a:	2310      	movs	r3, #16
2000430c:	9300      	str	r3, [sp, #0]
2000430e:	f04f 0200 	mov.w	r2, #0
20004312:	f04f 0300 	mov.w	r3, #0
20004316:	4608      	mov	r0, r1
20004318:	f000 fdca 	bl	20004eb0 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, 16);
2000431c:	f107 0310 	add.w	r3, r7, #16
20004320:	2110      	movs	r1, #16
20004322:	4618      	mov	r0, r3
20004324:	f000 fd4e 	bl	20004dc4 <SPI_TMSRead>

	  ack = dummyRead & 0x7;
20004328:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
2000432c:	4613      	mov	r3, r2
2000432e:	f003 0307 	and.w	r3, r3, #7
20004332:	627b      	str	r3, [r7, #36]	@ 0x24


	  read_data |= dummyRead >> 3;
20004334:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20004338:	f04f 0200 	mov.w	r2, #0
2000433c:	f04f 0300 	mov.w	r3, #0
20004340:	08c2      	lsrs	r2, r0, #3
20004342:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
20004346:	08cb      	lsrs	r3, r1, #3
20004348:	6a3b      	ldr	r3, [r7, #32]
2000434a:	4313      	orrs	r3, r2
2000434c:	623b      	str	r3, [r7, #32]

	  SPI4->CR2 = ( (16 -1) << 8);
2000434e:	4b87      	ldr	r3, [pc, #540]	@ (2000456c <SWD_Transfer_LL+0x324>)
20004350:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
20004354:	605a      	str	r2, [r3, #4]
	  SPI_Transfer(&dummyRead, 0, 16);
20004356:	f107 0110 	add.w	r1, r7, #16
2000435a:	2310      	movs	r3, #16
2000435c:	9300      	str	r3, [sp, #0]
2000435e:	f04f 0200 	mov.w	r2, #0
20004362:	f04f 0300 	mov.w	r3, #0
20004366:	4608      	mov	r0, r1
20004368:	f000 fda2 	bl	20004eb0 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, 16);
2000436c:	f107 0310 	add.w	r3, r7, #16
20004370:	2110      	movs	r1, #16
20004372:	4618      	mov	r0, r3
20004374:	f000 fd26 	bl	20004dc4 <SPI_TMSRead>

	  read_data |= (dummyRead) << 13;
20004378:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
2000437c:	4613      	mov	r3, r2
2000437e:	035b      	lsls	r3, r3, #13
20004380:	6a3a      	ldr	r2, [r7, #32]
20004382:	4313      	orrs	r3, r2
20004384:	623b      	str	r3, [r7, #32]

	  SPI4->CR2 = ( (5 + n -1) << 8);
20004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004388:	3304      	adds	r3, #4
2000438a:	4a78      	ldr	r2, [pc, #480]	@ (2000456c <SWD_Transfer_LL+0x324>)
2000438c:	021b      	lsls	r3, r3, #8
2000438e:	6053      	str	r3, [r2, #4]
	  SPI_Transfer(&dummyRead, 0, (5 + n) );
20004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004392:	b2db      	uxtb	r3, r3
20004394:	3305      	adds	r3, #5
20004396:	b2db      	uxtb	r3, r3
20004398:	f107 0110 	add.w	r1, r7, #16
2000439c:	9300      	str	r3, [sp, #0]
2000439e:	f04f 0200 	mov.w	r2, #0
200043a2:	f04f 0300 	mov.w	r3, #0
200043a6:	4608      	mov	r0, r1
200043a8:	f000 fd82 	bl	20004eb0 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, (5 + n) );
200043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200043ae:	b2db      	uxtb	r3, r3
200043b0:	3305      	adds	r3, #5
200043b2:	b2da      	uxtb	r2, r3
200043b4:	f107 0310 	add.w	r3, r7, #16
200043b8:	4611      	mov	r1, r2
200043ba:	4618      	mov	r0, r3
200043bc:	f000 fd02 	bl	20004dc4 <SPI_TMSRead>

	  read_data |= ( dummyRead & 0x7) << 29;
200043c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
200043c4:	4613      	mov	r3, r2
200043c6:	075b      	lsls	r3, r3, #29
200043c8:	6a3a      	ldr	r2, [r7, #32]
200043ca:	4313      	orrs	r3, r2
200043cc:	623b      	str	r3, [r7, #32]

	  parity = (dummyRead & 0x8) >> 3;
200043ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
200043d2:	f04f 0200 	mov.w	r2, #0
200043d6:	f04f 0300 	mov.w	r3, #0
200043da:	08c2      	lsrs	r2, r0, #3
200043dc:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
200043e0:	08cb      	lsrs	r3, r1, #3
200043e2:	b2d3      	uxtb	r3, r2
200043e4:	f003 0301 	and.w	r3, r3, #1
200043e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	  if( !check_even_parity(read_data, parity) && DAP_TRANSFER_OK == ack)
200043ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
200043f0:	4619      	mov	r1, r3
200043f2:	6a38      	ldr	r0, [r7, #32]
200043f4:	f7ff ff02 	bl	200041fc <check_even_parity>
200043f8:	4603      	mov	r3, r0
200043fa:	2b00      	cmp	r3, #0
200043fc:	d104      	bne.n	20004408 <SWD_Transfer_LL+0x1c0>
200043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20004400:	2b01      	cmp	r3, #1
20004402:	d101      	bne.n	20004408 <SWD_Transfer_LL+0x1c0>
	  {
		  ack = DAP_TRANSFER_ERROR;
20004404:	2308      	movs	r3, #8
20004406:	627b      	str	r3, [r7, #36]	@ 0x24
	  }

	  *data = read_data;
20004408:	68bb      	ldr	r3, [r7, #8]
2000440a:	6a3a      	ldr	r2, [r7, #32]
2000440c:	601a      	str	r2, [r3, #0]
	  SPI4->CR1 &= ~(0x1 << 6);
2000440e:	4b57      	ldr	r3, [pc, #348]	@ (2000456c <SWD_Transfer_LL+0x324>)
20004410:	681b      	ldr	r3, [r3, #0]
20004412:	4a56      	ldr	r2, [pc, #344]	@ (2000456c <SWD_Transfer_LL+0x324>)
20004414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
20004418:	6013      	str	r3, [r2, #0]
2000441a:	e0fc      	b.n	20004616 <SWD_Transfer_LL+0x3ce>


  }
  else
  {
	  SPI_SwitchPhaseToListen();
2000441c:	f000 fcf4 	bl	20004e08 <SPI_SwitchPhaseToListen>
	  /* Turnaround */

	  n = DAP_Data.swd_conf.turnaround;
20004420:	4b53      	ldr	r3, [pc, #332]	@ (20004570 <SWD_Transfer_LL+0x328>)
20004422:	7e1b      	ldrb	r3, [r3, #24]
20004424:	62bb      	str	r3, [r7, #40]	@ 0x28


	  SPI4->CR2 = ( ( 2*n +3 -1) << 8);
20004426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004428:	3301      	adds	r3, #1
2000442a:	005b      	lsls	r3, r3, #1
2000442c:	4a4f      	ldr	r2, [pc, #316]	@ (2000456c <SWD_Transfer_LL+0x324>)
2000442e:	021b      	lsls	r3, r3, #8
20004430:	6053      	str	r3, [r2, #4]
	  SPI_Transfer(&dummyRead, 0, 2*n+3);
20004432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004434:	b2db      	uxtb	r3, r3
20004436:	005b      	lsls	r3, r3, #1
20004438:	b2db      	uxtb	r3, r3
2000443a:	3303      	adds	r3, #3
2000443c:	b2db      	uxtb	r3, r3
2000443e:	f107 0110 	add.w	r1, r7, #16
20004442:	9300      	str	r3, [sp, #0]
20004444:	f04f 0200 	mov.w	r2, #0
20004448:	f04f 0300 	mov.w	r3, #0
2000444c:	4608      	mov	r0, r1
2000444e:	f000 fd2f 	bl	20004eb0 <SPI_Transfer>
	  SPI_TMSRead(&dummyRead, 2*n+3);
20004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20004454:	b2db      	uxtb	r3, r3
20004456:	005b      	lsls	r3, r3, #1
20004458:	b2db      	uxtb	r3, r3
2000445a:	3303      	adds	r3, #3
2000445c:	b2da      	uxtb	r2, r3
2000445e:	f107 0310 	add.w	r3, r7, #16
20004462:	4611      	mov	r1, r2
20004464:	4618      	mov	r0, r3
20004466:	f000 fcad 	bl	20004dc4 <SPI_TMSRead>

	  SPI_SwitchPhaseToWrite();
2000446a:	f000 fcf7 	bl	20004e5c <SPI_SwitchPhaseToWrite>
	  //SPI4->CR1 &= ~(0x1 << 6);


	  ack = (dummyRead & 0x7);
2000446e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20004472:	4613      	mov	r3, r2
20004474:	f003 0307 	and.w	r3, r3, #7
20004478:	627b      	str	r3, [r7, #36]	@ 0x24

	  if(DAP_TRANSFER_OK == ack)
2000447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000447c:	2b01      	cmp	r3, #1
2000447e:	d179      	bne.n	20004574 <SWD_Transfer_LL+0x32c>
	  {
		  parity = generate_even_parity(*data);
20004480:	68bb      	ldr	r3, [r7, #8]
20004482:	681b      	ldr	r3, [r3, #0]
20004484:	4618      	mov	r0, r3
20004486:	f7ff fe9b 	bl	200041c0 <generate_even_parity>
2000448a:	4603      	mov	r3, r0
2000448c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  write_data = *data;
20004490:	68bb      	ldr	r3, [r7, #8]
20004492:	681b      	ldr	r3, [r3, #0]
20004494:	633b      	str	r3, [r7, #48]	@ 0x30
		  SPI4->CR1 |= (0x1 << 6);
20004496:	4b35      	ldr	r3, [pc, #212]	@ (2000456c <SWD_Transfer_LL+0x324>)
20004498:	681b      	ldr	r3, [r3, #0]
2000449a:	4a34      	ldr	r2, [pc, #208]	@ (2000456c <SWD_Transfer_LL+0x324>)
2000449c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200044a0:	6013      	str	r3, [r2, #0]

		  SPI_TMS_Transfer(write_data, 16);
200044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200044a4:	2200      	movs	r2, #0
200044a6:	469a      	mov	sl, r3
200044a8:	4693      	mov	fp, r2
200044aa:	2210      	movs	r2, #16
200044ac:	4650      	mov	r0, sl
200044ae:	4659      	mov	r1, fp
200044b0:	f000 fc4e 	bl	20004d50 <SPI_TMS_Transfer>
		  SPI_Transfer(&dummyRead, 0, 16);
200044b4:	f107 0110 	add.w	r1, r7, #16
200044b8:	2310      	movs	r3, #16
200044ba:	9300      	str	r3, [sp, #0]
200044bc:	f04f 0200 	mov.w	r2, #0
200044c0:	f04f 0300 	mov.w	r3, #0
200044c4:	4608      	mov	r0, r1
200044c6:	f000 fcf3 	bl	20004eb0 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 16);
200044ca:	f107 0310 	add.w	r3, r7, #16
200044ce:	2110      	movs	r1, #16
200044d0:	4618      	mov	r0, r3
200044d2:	f000 fc77 	bl	20004dc4 <SPI_TMSRead>

		  write_data >>= 16;
200044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200044d8:	0c1b      	lsrs	r3, r3, #16
200044da:	633b      	str	r3, [r7, #48]	@ 0x30

		  SPI_TMS_Transfer(write_data, 8);
200044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200044de:	2200      	movs	r2, #0
200044e0:	4698      	mov	r8, r3
200044e2:	4691      	mov	r9, r2
200044e4:	2208      	movs	r2, #8
200044e6:	4640      	mov	r0, r8
200044e8:	4649      	mov	r1, r9
200044ea:	f000 fc31 	bl	20004d50 <SPI_TMS_Transfer>
		  SPI_Transfer(&dummyRead, 0, 8);
200044ee:	f107 0110 	add.w	r1, r7, #16
200044f2:	2308      	movs	r3, #8
200044f4:	9300      	str	r3, [sp, #0]
200044f6:	f04f 0200 	mov.w	r2, #0
200044fa:	f04f 0300 	mov.w	r3, #0
200044fe:	4608      	mov	r0, r1
20004500:	f000 fcd6 	bl	20004eb0 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 8);
20004504:	f107 0310 	add.w	r3, r7, #16
20004508:	2108      	movs	r1, #8
2000450a:	4618      	mov	r0, r3
2000450c:	f000 fc5a 	bl	20004dc4 <SPI_TMSRead>

		  uint32_t delay_cnt = 2000;
20004510:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
20004514:	637b      	str	r3, [r7, #52]	@ 0x34

		  while(delay_cnt--)
20004516:	e000      	b.n	2000451a <SWD_Transfer_LL+0x2d2>
		  {
			  __asm("nop");
20004518:	bf00      	nop
		  while(delay_cnt--)
2000451a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000451c:	1e5a      	subs	r2, r3, #1
2000451e:	637a      	str	r2, [r7, #52]	@ 0x34
20004520:	2b00      	cmp	r3, #0
20004522:	d1f9      	bne.n	20004518 <SWD_Transfer_LL+0x2d0>
		  }

		  write_data >>= 8;
20004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20004526:	0a1b      	lsrs	r3, r3, #8
20004528:	633b      	str	r3, [r7, #48]	@ 0x30

		  write_data |= parity << 8;
2000452a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
2000452e:	021b      	lsls	r3, r3, #8
20004530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20004532:	4313      	orrs	r3, r2
20004534:	633b      	str	r3, [r7, #48]	@ 0x30

		  SPI_TMS_Transfer(write_data, 16);
20004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20004538:	2200      	movs	r2, #0
2000453a:	461c      	mov	r4, r3
2000453c:	4615      	mov	r5, r2
2000453e:	2210      	movs	r2, #16
20004540:	4620      	mov	r0, r4
20004542:	4629      	mov	r1, r5
20004544:	f000 fc04 	bl	20004d50 <SPI_TMS_Transfer>
		  SPI_Transfer(&dummyRead, 0, 16);
20004548:	f107 0110 	add.w	r1, r7, #16
2000454c:	2310      	movs	r3, #16
2000454e:	9300      	str	r3, [sp, #0]
20004550:	f04f 0200 	mov.w	r2, #0
20004554:	f04f 0300 	mov.w	r3, #0
20004558:	4608      	mov	r0, r1
2000455a:	f000 fca9 	bl	20004eb0 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 16);
2000455e:	f107 0310 	add.w	r3, r7, #16
20004562:	2110      	movs	r1, #16
20004564:	4618      	mov	r0, r3
20004566:	f000 fc2d 	bl	20004dc4 <SPI_TMSRead>
2000456a:	e04e      	b.n	2000460a <SWD_Transfer_LL+0x3c2>
2000456c:	40013400 	.word	0x40013400
20004570:	2000d834 	.word	0x2000d834


	  }
	  else
	  {
		  SPI4->CR1 &= ~(0x1 << 6);
20004574:	4b30      	ldr	r3, [pc, #192]	@ (20004638 <SWD_Transfer_LL+0x3f0>)
20004576:	681b      	ldr	r3, [r3, #0]
20004578:	4a2f      	ldr	r2, [pc, #188]	@ (20004638 <SWD_Transfer_LL+0x3f0>)
2000457a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
2000457e:	6013      	str	r3, [r2, #0]
		  SPI_SwitchPhaseToListen();
20004580:	f000 fc42 	bl	20004e08 <SPI_SwitchPhaseToListen>
		  SPI4->CR1 |= (0x1 << 6);
20004584:	4b2c      	ldr	r3, [pc, #176]	@ (20004638 <SWD_Transfer_LL+0x3f0>)
20004586:	681b      	ldr	r3, [r3, #0]
20004588:	4a2b      	ldr	r2, [pc, #172]	@ (20004638 <SWD_Transfer_LL+0x3f0>)
2000458a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000458e:	6013      	str	r3, [r2, #0]

		  n = DAP_Data.swd_conf.turnaround;
20004590:	4b2a      	ldr	r3, [pc, #168]	@ (2000463c <SWD_Transfer_LL+0x3f4>)
20004592:	7e1b      	ldrb	r3, [r3, #24]
20004594:	62bb      	str	r3, [r7, #40]	@ 0x28

		  SPI_Transfer(&dummyRead, 0, 16);
20004596:	f107 0110 	add.w	r1, r7, #16
2000459a:	2310      	movs	r3, #16
2000459c:	9300      	str	r3, [sp, #0]
2000459e:	f04f 0200 	mov.w	r2, #0
200045a2:	f04f 0300 	mov.w	r3, #0
200045a6:	4608      	mov	r0, r1
200045a8:	f000 fc82 	bl	20004eb0 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 16);
200045ac:	f107 0310 	add.w	r3, r7, #16
200045b0:	2110      	movs	r1, #16
200045b2:	4618      	mov	r0, r3
200045b4:	f000 fc06 	bl	20004dc4 <SPI_TMSRead>

		  SPI_Transfer(&dummyRead, 0, 8);
200045b8:	f107 0110 	add.w	r1, r7, #16
200045bc:	2308      	movs	r3, #8
200045be:	9300      	str	r3, [sp, #0]
200045c0:	f04f 0200 	mov.w	r2, #0
200045c4:	f04f 0300 	mov.w	r3, #0
200045c8:	4608      	mov	r0, r1
200045ca:	f000 fc71 	bl	20004eb0 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 8);
200045ce:	f107 0310 	add.w	r3, r7, #16
200045d2:	2108      	movs	r1, #8
200045d4:	4618      	mov	r0, r3
200045d6:	f000 fbf5 	bl	20004dc4 <SPI_TMSRead>

		  SPI_Transfer(&dummyRead, 0, 33-24 +n);
200045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200045dc:	b2db      	uxtb	r3, r3
200045de:	3309      	adds	r3, #9
200045e0:	b2db      	uxtb	r3, r3
200045e2:	f107 0110 	add.w	r1, r7, #16
200045e6:	9300      	str	r3, [sp, #0]
200045e8:	f04f 0200 	mov.w	r2, #0
200045ec:	f04f 0300 	mov.w	r3, #0
200045f0:	4608      	mov	r0, r1
200045f2:	f000 fc5d 	bl	20004eb0 <SPI_Transfer>
		  SPI_TMSRead(&dummyRead, 33-24 +n);
200045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200045f8:	b2db      	uxtb	r3, r3
200045fa:	3309      	adds	r3, #9
200045fc:	b2da      	uxtb	r2, r3
200045fe:	f107 0310 	add.w	r3, r7, #16
20004602:	4611      	mov	r1, r2
20004604:	4618      	mov	r0, r3
20004606:	f000 fbdd 	bl	20004dc4 <SPI_TMSRead>

	  }

	  SPI4->CR1 &= ~(0x1 << 6);
2000460a:	4b0b      	ldr	r3, [pc, #44]	@ (20004638 <SWD_Transfer_LL+0x3f0>)
2000460c:	681b      	ldr	r3, [r3, #0]
2000460e:	4a0a      	ldr	r2, [pc, #40]	@ (20004638 <SWD_Transfer_LL+0x3f0>)
20004610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
20004614:	6013      	str	r3, [r2, #0]


  }

  /* Capture Timestamp */
      if (request & DAP_TRANSFER_TIMESTAMP) {
20004616:	68fb      	ldr	r3, [r7, #12]
20004618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000461c:	2b00      	cmp	r3, #0
2000461e:	d004      	beq.n	2000462a <SWD_Transfer_LL+0x3e2>
        DAP_Data.timestamp = TIMESTAMP_GET();
20004620:	f7ff fc78 	bl	20003f14 <TIMESTAMP_GET>
20004624:	4603      	mov	r3, r0
20004626:	4a05      	ldr	r2, [pc, #20]	@ (2000463c <SWD_Transfer_LL+0x3f4>)
20004628:	6093      	str	r3, [r2, #8]
      }

  return ((uint8_t)ack);
2000462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000462c:	b2db      	uxtb	r3, r3
    SW_CLOCK_CYCLE();                   /* Back off data phase */               
  }                                                                             
  PIN_SWDIO_OUT_ENABLE();                                                       
  PIN_SWDIO_OUT(1U);                                                            
  return ((uint8_t)ack);                                                        
}
2000462e:	4618      	mov	r0, r3
20004630:	3738      	adds	r7, #56	@ 0x38
20004632:	46bd      	mov	sp, r7
20004634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20004638:	40013400 	.word	0x40013400
2000463c:	2000d834 	.word	0x2000d834

20004640 <SWD_Transfer>:

// SWD Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
uint8_t  SWD_Transfer(uint32_t request, uint32_t *data) {
20004640:	b580      	push	{r7, lr}
20004642:	b082      	sub	sp, #8
20004644:	af00      	add	r7, sp, #0
20004646:	6078      	str	r0, [r7, #4]
20004648:	6039      	str	r1, [r7, #0]
  if (DAP_Data.fast_clock) {
2000464a:	4b09      	ldr	r3, [pc, #36]	@ (20004670 <SWD_Transfer+0x30>)
2000464c:	785b      	ldrb	r3, [r3, #1]
2000464e:	2b00      	cmp	r3, #0
20004650:	d005      	beq.n	2000465e <SWD_Transfer+0x1e>
    return SWD_Transfer_LL(request, data);
20004652:	6839      	ldr	r1, [r7, #0]
20004654:	6878      	ldr	r0, [r7, #4]
20004656:	f7ff fdf7 	bl	20004248 <SWD_Transfer_LL>
2000465a:	4603      	mov	r3, r0
2000465c:	e004      	b.n	20004668 <SWD_Transfer+0x28>
  } else {
    return SWD_Transfer_LL(request, data);
2000465e:	6839      	ldr	r1, [r7, #0]
20004660:	6878      	ldr	r0, [r7, #4]
20004662:	f7ff fdf1 	bl	20004248 <SWD_Transfer_LL>
20004666:	4603      	mov	r3, r0
  }
}
20004668:	4618      	mov	r0, r3
2000466a:	3708      	adds	r7, #8
2000466c:	46bd      	mov	sp, r7
2000466e:	bd80      	pop	{r7, pc}
20004670:	2000d834 	.word	0x2000d834

20004674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20004674:	b580      	push	{r7, lr}
20004676:	b084      	sub	sp, #16
20004678:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
2000467a:	f000 fecc 	bl	20005416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000467e:	f000 f881 	bl	20004784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20004682:	f000 f9e3 	bl	20004a4c <MX_GPIO_Init>
  MX_ETH_Init();
20004686:	f000 f8eb 	bl	20004860 <MX_ETH_Init>
  MX_USART3_UART_Init();
2000468a:	f000 f9af 	bl	200049ec <MX_USART3_UART_Init>
  MX_SPI1_Init();
2000468e:	f000 f935 	bl	200048fc <MX_SPI1_Init>
  MX_SPI4_Init();
20004692:	f000 f971 	bl	20004978 <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
20004696:	f008 f8c5 	bl	2000c824 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */

  RCC->APB1ENR |= (1 << 15);
2000469a:	4b2f      	ldr	r3, [pc, #188]	@ (20004758 <main+0xe4>)
2000469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000469e:	4a2e      	ldr	r2, [pc, #184]	@ (20004758 <main+0xe4>)
200046a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
200046a4:	6413      	str	r3, [r2, #64]	@ 0x40

  Switch_SPI();
200046a6:	f000 fad9 	bl	20004c5c <Switch_SPI>
  SPI4->CR1 |= (1 << 6);
200046aa:	4b2c      	ldr	r3, [pc, #176]	@ (2000475c <main+0xe8>)
200046ac:	681b      	ldr	r3, [r3, #0]
200046ae:	4a2b      	ldr	r2, [pc, #172]	@ (2000475c <main+0xe8>)
200046b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200046b4:	6013      	str	r3, [r2, #0]

  SPI3->CR1 &= ~0x38;
200046b6:	4b2a      	ldr	r3, [pc, #168]	@ (20004760 <main+0xec>)
200046b8:	681b      	ldr	r3, [r3, #0]
200046ba:	4a29      	ldr	r2, [pc, #164]	@ (20004760 <main+0xec>)
200046bc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
200046c0:	6013      	str	r3, [r2, #0]

  SPI3->CR1 |= (0x7 << 3);
200046c2:	4b27      	ldr	r3, [pc, #156]	@ (20004760 <main+0xec>)
200046c4:	681b      	ldr	r3, [r3, #0]
200046c6:	4a26      	ldr	r2, [pc, #152]	@ (20004760 <main+0xec>)
200046c8:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
200046cc:	6013      	str	r3, [r2, #0]

  SPI4->CR1 |= (1 << 15);
200046ce:	4b23      	ldr	r3, [pc, #140]	@ (2000475c <main+0xe8>)
200046d0:	681b      	ldr	r3, [r3, #0]
200046d2:	4a22      	ldr	r2, [pc, #136]	@ (2000475c <main+0xe8>)
200046d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
200046d8:	6013      	str	r3, [r2, #0]
  SPI4->CR1 |= (1 << 14);
200046da:	4b20      	ldr	r3, [pc, #128]	@ (2000475c <main+0xe8>)
200046dc:	681b      	ldr	r3, [r3, #0]
200046de:	4a1f      	ldr	r2, [pc, #124]	@ (2000475c <main+0xe8>)
200046e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
200046e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //__enable_irq();
  DWT->LAR = 0xC5ACCE55;
200046e6:	4b1f      	ldr	r3, [pc, #124]	@ (20004764 <main+0xf0>)
200046e8:	4a1f      	ldr	r2, [pc, #124]	@ (20004768 <main+0xf4>)
200046ea:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
200046ee:	4b1f      	ldr	r3, [pc, #124]	@ (2000476c <main+0xf8>)
200046f0:	68db      	ldr	r3, [r3, #12]
200046f2:	4a1e      	ldr	r2, [pc, #120]	@ (2000476c <main+0xf8>)
200046f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
200046f8:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
200046fa:	4b1a      	ldr	r3, [pc, #104]	@ (20004764 <main+0xf0>)
200046fc:	2200      	movs	r2, #0
200046fe:	605a      	str	r2, [r3, #4]
  DWT->CTRL  |= DWT_CTRL_CYCCNTENA_Msk;
20004700:	4b18      	ldr	r3, [pc, #96]	@ (20004764 <main+0xf0>)
20004702:	681b      	ldr	r3, [r3, #0]
20004704:	4a17      	ldr	r2, [pc, #92]	@ (20004764 <main+0xf0>)
20004706:	f043 0301 	orr.w	r3, r3, #1
2000470a:	6013      	str	r3, [r2, #0]
  while (1)
  {

	  uint32_t num;

	  if(msgAvailable)
2000470c:	4b18      	ldr	r3, [pc, #96]	@ (20004770 <main+0xfc>)
2000470e:	681b      	ldr	r3, [r3, #0]
20004710:	2b00      	cmp	r3, #0
20004712:	d0fb      	beq.n	2000470c <main+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
20004714:	b672      	cpsid	i
}
20004716:	bf00      	nop
	  {
		  uint32_t readLen, writeLen;
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		  __disable_irq();
		  num = DAP_ProcessCommand(rdBuff, wrBuff);
20004718:	4916      	ldr	r1, [pc, #88]	@ (20004774 <main+0x100>)
2000471a:	4817      	ldr	r0, [pc, #92]	@ (20004778 <main+0x104>)
2000471c:	f7fd fe08 	bl	20002330 <DAP_ProcessCommand>
20004720:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
20004722:	b662      	cpsie	i
}
20004724:	bf00      	nop
		  __enable_irq();
		  readLen = (num & 0xFFFF0000) >> 16;
20004726:	68fb      	ldr	r3, [r7, #12]
20004728:	0c1b      	lsrs	r3, r3, #16
2000472a:	60bb      	str	r3, [r7, #8]
		  wrIdx += readLen;
2000472c:	68bb      	ldr	r3, [r7, #8]
2000472e:	b2da      	uxtb	r2, r3
20004730:	4b12      	ldr	r3, [pc, #72]	@ (2000477c <main+0x108>)
20004732:	781b      	ldrb	r3, [r3, #0]
20004734:	4413      	add	r3, r2
20004736:	b2da      	uxtb	r2, r3
20004738:	4b10      	ldr	r3, [pc, #64]	@ (2000477c <main+0x108>)
2000473a:	701a      	strb	r2, [r3, #0]

		  writeLen = (num & 0xFFFF);
2000473c:	68fb      	ldr	r3, [r7, #12]
2000473e:	b29b      	uxth	r3, r3
20004740:	607b      	str	r3, [r7, #4]
		  //writeLen = 0x40;

		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
20004742:	687b      	ldr	r3, [r7, #4]
20004744:	b29b      	uxth	r3, r3
20004746:	461a      	mov	r2, r3
20004748:	490a      	ldr	r1, [pc, #40]	@ (20004774 <main+0x100>)
2000474a:	480d      	ldr	r0, [pc, #52]	@ (20004780 <main+0x10c>)
2000474c:	f006 fb84 	bl	2000ae58 <USBD_CUSTOM_HID_SendReport>
		  			  wrBuff, writeLen);

		  msgAvailable = 0;
20004750:	4b07      	ldr	r3, [pc, #28]	@ (20004770 <main+0xfc>)
20004752:	2200      	movs	r2, #0
20004754:	601a      	str	r2, [r3, #0]
  {
20004756:	e7d9      	b.n	2000470c <main+0x98>
20004758:	40023800 	.word	0x40023800
2000475c:	40013400 	.word	0x40013400
20004760:	40003c00 	.word	0x40003c00
20004764:	e0001000 	.word	0xe0001000
20004768:	c5acce55 	.word	0xc5acce55
2000476c:	e000edf0 	.word	0xe000edf0
20004770:	2000ebcc 	.word	0x2000ebcc
20004774:	2000eac8 	.word	0x2000eac8
20004778:	2000eb48 	.word	0x2000eb48
2000477c:	2000ebc8 	.word	0x2000ebc8
20004780:	2000ebf4 	.word	0x2000ebf4

20004784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20004784:	b580      	push	{r7, lr}
20004786:	b094      	sub	sp, #80	@ 0x50
20004788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000478a:	f107 0320 	add.w	r3, r7, #32
2000478e:	2230      	movs	r2, #48	@ 0x30
20004790:	2100      	movs	r1, #0
20004792:	4618      	mov	r0, r3
20004794:	f008 fdfc 	bl	2000d390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20004798:	f107 030c 	add.w	r3, r7, #12
2000479c:	2200      	movs	r2, #0
2000479e:	601a      	str	r2, [r3, #0]
200047a0:	605a      	str	r2, [r3, #4]
200047a2:	609a      	str	r2, [r3, #8]
200047a4:	60da      	str	r2, [r3, #12]
200047a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
200047a8:	f002 ff7e 	bl	200076a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
200047ac:	4b2a      	ldr	r3, [pc, #168]	@ (20004858 <SystemClock_Config+0xd4>)
200047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200047b0:	4a29      	ldr	r2, [pc, #164]	@ (20004858 <SystemClock_Config+0xd4>)
200047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200047b6:	6413      	str	r3, [r2, #64]	@ 0x40
200047b8:	4b27      	ldr	r3, [pc, #156]	@ (20004858 <SystemClock_Config+0xd4>)
200047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200047c0:	60bb      	str	r3, [r7, #8]
200047c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200047c4:	4b25      	ldr	r3, [pc, #148]	@ (2000485c <SystemClock_Config+0xd8>)
200047c6:	681b      	ldr	r3, [r3, #0]
200047c8:	4a24      	ldr	r2, [pc, #144]	@ (2000485c <SystemClock_Config+0xd8>)
200047ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
200047ce:	6013      	str	r3, [r2, #0]
200047d0:	4b22      	ldr	r3, [pc, #136]	@ (2000485c <SystemClock_Config+0xd8>)
200047d2:	681b      	ldr	r3, [r3, #0]
200047d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
200047d8:	607b      	str	r3, [r7, #4]
200047da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
200047dc:	2301      	movs	r3, #1
200047de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
200047e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
200047e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
200047e6:	2302      	movs	r3, #2
200047e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
200047ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
200047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
200047f0:	2304      	movs	r3, #4
200047f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
200047f4:	23d8      	movs	r3, #216	@ 0xd8
200047f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
200047f8:	2302      	movs	r3, #2
200047fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
200047fc:	2309      	movs	r3, #9
200047fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20004800:	f107 0320 	add.w	r3, r7, #32
20004804:	4618      	mov	r0, r3
20004806:	f002 ffaf 	bl	20007768 <HAL_RCC_OscConfig>
2000480a:	4603      	mov	r3, r0
2000480c:	2b00      	cmp	r3, #0
2000480e:	d001      	beq.n	20004814 <SystemClock_Config+0x90>
  {
    Error_Handler();
20004810:	f000 fb7a 	bl	20004f08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20004814:	f002 ff58 	bl	200076c8 <HAL_PWREx_EnableOverDrive>
20004818:	4603      	mov	r3, r0
2000481a:	2b00      	cmp	r3, #0
2000481c:	d001      	beq.n	20004822 <SystemClock_Config+0x9e>
  {
    Error_Handler();
2000481e:	f000 fb73 	bl	20004f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20004822:	230f      	movs	r3, #15
20004824:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20004826:	2302      	movs	r3, #2
20004828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000482a:	2300      	movs	r3, #0
2000482c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000482e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
20004832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20004834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20004838:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
2000483a:	f107 030c 	add.w	r3, r7, #12
2000483e:	2107      	movs	r1, #7
20004840:	4618      	mov	r0, r3
20004842:	f003 fa35 	bl	20007cb0 <HAL_RCC_ClockConfig>
20004846:	4603      	mov	r3, r0
20004848:	2b00      	cmp	r3, #0
2000484a:	d001      	beq.n	20004850 <SystemClock_Config+0xcc>
  {
    Error_Handler();
2000484c:	f000 fb5c 	bl	20004f08 <Error_Handler>
  }
}
20004850:	bf00      	nop
20004852:	3750      	adds	r7, #80	@ 0x50
20004854:	46bd      	mov	sp, r7
20004856:	bd80      	pop	{r7, pc}
20004858:	40023800 	.word	0x40023800
2000485c:	40007000 	.word	0x40007000

20004860 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
20004860:	b580      	push	{r7, lr}
20004862:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
20004864:	4b1f      	ldr	r3, [pc, #124]	@ (200048e4 <MX_ETH_Init+0x84>)
20004866:	4a20      	ldr	r2, [pc, #128]	@ (200048e8 <MX_ETH_Init+0x88>)
20004868:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
2000486a:	4b20      	ldr	r3, [pc, #128]	@ (200048ec <MX_ETH_Init+0x8c>)
2000486c:	2200      	movs	r2, #0
2000486e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
20004870:	4b1e      	ldr	r3, [pc, #120]	@ (200048ec <MX_ETH_Init+0x8c>)
20004872:	2280      	movs	r2, #128	@ 0x80
20004874:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
20004876:	4b1d      	ldr	r3, [pc, #116]	@ (200048ec <MX_ETH_Init+0x8c>)
20004878:	22e1      	movs	r2, #225	@ 0xe1
2000487a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
2000487c:	4b1b      	ldr	r3, [pc, #108]	@ (200048ec <MX_ETH_Init+0x8c>)
2000487e:	2200      	movs	r2, #0
20004880:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
20004882:	4b1a      	ldr	r3, [pc, #104]	@ (200048ec <MX_ETH_Init+0x8c>)
20004884:	2200      	movs	r2, #0
20004886:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
20004888:	4b18      	ldr	r3, [pc, #96]	@ (200048ec <MX_ETH_Init+0x8c>)
2000488a:	2200      	movs	r2, #0
2000488c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
2000488e:	4b15      	ldr	r3, [pc, #84]	@ (200048e4 <MX_ETH_Init+0x84>)
20004890:	4a16      	ldr	r2, [pc, #88]	@ (200048ec <MX_ETH_Init+0x8c>)
20004892:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
20004894:	4b13      	ldr	r3, [pc, #76]	@ (200048e4 <MX_ETH_Init+0x84>)
20004896:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
2000489a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
2000489c:	4b11      	ldr	r3, [pc, #68]	@ (200048e4 <MX_ETH_Init+0x84>)
2000489e:	4a14      	ldr	r2, [pc, #80]	@ (200048f0 <MX_ETH_Init+0x90>)
200048a0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
200048a2:	4b10      	ldr	r3, [pc, #64]	@ (200048e4 <MX_ETH_Init+0x84>)
200048a4:	4a13      	ldr	r2, [pc, #76]	@ (200048f4 <MX_ETH_Init+0x94>)
200048a6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
200048a8:	4b0e      	ldr	r3, [pc, #56]	@ (200048e4 <MX_ETH_Init+0x84>)
200048aa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
200048ae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
200048b0:	480c      	ldr	r0, [pc, #48]	@ (200048e4 <MX_ETH_Init+0x84>)
200048b2:	f000 ff43 	bl	2000573c <HAL_ETH_Init>
200048b6:	4603      	mov	r3, r0
200048b8:	2b00      	cmp	r3, #0
200048ba:	d001      	beq.n	200048c0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
200048bc:	f000 fb24 	bl	20004f08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
200048c0:	2238      	movs	r2, #56	@ 0x38
200048c2:	2100      	movs	r1, #0
200048c4:	480c      	ldr	r0, [pc, #48]	@ (200048f8 <MX_ETH_Init+0x98>)
200048c6:	f008 fd63 	bl	2000d390 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
200048ca:	4b0b      	ldr	r3, [pc, #44]	@ (200048f8 <MX_ETH_Init+0x98>)
200048cc:	2221      	movs	r2, #33	@ 0x21
200048ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
200048d0:	4b09      	ldr	r3, [pc, #36]	@ (200048f8 <MX_ETH_Init+0x98>)
200048d2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
200048d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
200048d8:	4b07      	ldr	r3, [pc, #28]	@ (200048f8 <MX_ETH_Init+0x98>)
200048da:	2200      	movs	r2, #0
200048dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
200048de:	bf00      	nop
200048e0:	bd80      	pop	{r7, pc}
200048e2:	bf00      	nop
200048e4:	2000e8c8 	.word	0x2000e8c8
200048e8:	40028000 	.word	0x40028000
200048ec:	2000ebdc 	.word	0x2000ebdc
200048f0:	2000d778 	.word	0x2000d778
200048f4:	2000d6d8 	.word	0x2000d6d8
200048f8:	2000e890 	.word	0x2000e890

200048fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
200048fc:	b580      	push	{r7, lr}
200048fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
20004900:	4b1b      	ldr	r3, [pc, #108]	@ (20004970 <MX_SPI1_Init+0x74>)
20004902:	4a1c      	ldr	r2, [pc, #112]	@ (20004974 <MX_SPI1_Init+0x78>)
20004904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
20004906:	4b1a      	ldr	r3, [pc, #104]	@ (20004970 <MX_SPI1_Init+0x74>)
20004908:	f44f 7282 	mov.w	r2, #260	@ 0x104
2000490c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
2000490e:	4b18      	ldr	r3, [pc, #96]	@ (20004970 <MX_SPI1_Init+0x74>)
20004910:	2200      	movs	r2, #0
20004912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
20004914:	4b16      	ldr	r3, [pc, #88]	@ (20004970 <MX_SPI1_Init+0x74>)
20004916:	f44f 7240 	mov.w	r2, #768	@ 0x300
2000491a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
2000491c:	4b14      	ldr	r3, [pc, #80]	@ (20004970 <MX_SPI1_Init+0x74>)
2000491e:	2200      	movs	r2, #0
20004920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
20004922:	4b13      	ldr	r3, [pc, #76]	@ (20004970 <MX_SPI1_Init+0x74>)
20004924:	2200      	movs	r2, #0
20004926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
20004928:	4b11      	ldr	r3, [pc, #68]	@ (20004970 <MX_SPI1_Init+0x74>)
2000492a:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000492e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
20004930:	4b0f      	ldr	r3, [pc, #60]	@ (20004970 <MX_SPI1_Init+0x74>)
20004932:	2238      	movs	r2, #56	@ 0x38
20004934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
20004936:	4b0e      	ldr	r3, [pc, #56]	@ (20004970 <MX_SPI1_Init+0x74>)
20004938:	2280      	movs	r2, #128	@ 0x80
2000493a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
2000493c:	4b0c      	ldr	r3, [pc, #48]	@ (20004970 <MX_SPI1_Init+0x74>)
2000493e:	2200      	movs	r2, #0
20004940:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20004942:	4b0b      	ldr	r3, [pc, #44]	@ (20004970 <MX_SPI1_Init+0x74>)
20004944:	2200      	movs	r2, #0
20004946:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
20004948:	4b09      	ldr	r3, [pc, #36]	@ (20004970 <MX_SPI1_Init+0x74>)
2000494a:	2207      	movs	r2, #7
2000494c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
2000494e:	4b08      	ldr	r3, [pc, #32]	@ (20004970 <MX_SPI1_Init+0x74>)
20004950:	2200      	movs	r2, #0
20004952:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
20004954:	4b06      	ldr	r3, [pc, #24]	@ (20004970 <MX_SPI1_Init+0x74>)
20004956:	2208      	movs	r2, #8
20004958:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
2000495a:	4805      	ldr	r0, [pc, #20]	@ (20004970 <MX_SPI1_Init+0x74>)
2000495c:	f003 ffbe 	bl	200088dc <HAL_SPI_Init>
20004960:	4603      	mov	r3, r0
20004962:	2b00      	cmp	r3, #0
20004964:	d001      	beq.n	2000496a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
20004966:	f000 facf 	bl	20004f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
2000496a:	bf00      	nop
2000496c:	bd80      	pop	{r7, pc}
2000496e:	bf00      	nop
20004970:	2000e978 	.word	0x2000e978
20004974:	40013000 	.word	0x40013000

20004978 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
20004978:	b580      	push	{r7, lr}
2000497a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
2000497c:	4b19      	ldr	r3, [pc, #100]	@ (200049e4 <MX_SPI4_Init+0x6c>)
2000497e:	4a1a      	ldr	r2, [pc, #104]	@ (200049e8 <MX_SPI4_Init+0x70>)
20004980:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
20004982:	4b18      	ldr	r3, [pc, #96]	@ (200049e4 <MX_SPI4_Init+0x6c>)
20004984:	2200      	movs	r2, #0
20004986:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
20004988:	4b16      	ldr	r3, [pc, #88]	@ (200049e4 <MX_SPI4_Init+0x6c>)
2000498a:	2200      	movs	r2, #0
2000498c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
2000498e:	4b15      	ldr	r3, [pc, #84]	@ (200049e4 <MX_SPI4_Init+0x6c>)
20004990:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
20004994:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
20004996:	4b13      	ldr	r3, [pc, #76]	@ (200049e4 <MX_SPI4_Init+0x6c>)
20004998:	2200      	movs	r2, #0
2000499a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
2000499c:	4b11      	ldr	r3, [pc, #68]	@ (200049e4 <MX_SPI4_Init+0x6c>)
2000499e:	2200      	movs	r2, #0
200049a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
200049a2:	4b10      	ldr	r3, [pc, #64]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
200049a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_LSB;
200049aa:	4b0e      	ldr	r3, [pc, #56]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049ac:	2280      	movs	r2, #128	@ 0x80
200049ae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
200049b0:	4b0c      	ldr	r3, [pc, #48]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049b2:	2200      	movs	r2, #0
200049b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200049b6:	4b0b      	ldr	r3, [pc, #44]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049b8:	2200      	movs	r2, #0
200049ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
200049bc:	4b09      	ldr	r3, [pc, #36]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049be:	2207      	movs	r2, #7
200049c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
200049c2:	4b08      	ldr	r3, [pc, #32]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049c4:	2200      	movs	r2, #0
200049c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
200049c8:	4b06      	ldr	r3, [pc, #24]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049ca:	2200      	movs	r2, #0
200049cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
200049ce:	4805      	ldr	r0, [pc, #20]	@ (200049e4 <MX_SPI4_Init+0x6c>)
200049d0:	f003 ff84 	bl	200088dc <HAL_SPI_Init>
200049d4:	4603      	mov	r3, r0
200049d6:	2b00      	cmp	r3, #0
200049d8:	d001      	beq.n	200049de <MX_SPI4_Init+0x66>
  {
    Error_Handler();
200049da:	f000 fa95 	bl	20004f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
200049de:	bf00      	nop
200049e0:	bd80      	pop	{r7, pc}
200049e2:	bf00      	nop
200049e4:	2000e9dc 	.word	0x2000e9dc
200049e8:	40013400 	.word	0x40013400

200049ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
200049ec:	b580      	push	{r7, lr}
200049ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
200049f0:	4b14      	ldr	r3, [pc, #80]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
200049f2:	4a15      	ldr	r2, [pc, #84]	@ (20004a48 <MX_USART3_UART_Init+0x5c>)
200049f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
200049f6:	4b13      	ldr	r3, [pc, #76]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
200049f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
200049fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
200049fe:	4b11      	ldr	r3, [pc, #68]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a00:	2200      	movs	r2, #0
20004a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
20004a04:	4b0f      	ldr	r3, [pc, #60]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a06:	2200      	movs	r2, #0
20004a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
20004a0a:	4b0e      	ldr	r3, [pc, #56]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a0c:	2200      	movs	r2, #0
20004a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
20004a10:	4b0c      	ldr	r3, [pc, #48]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a12:	220c      	movs	r2, #12
20004a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
20004a16:	4b0b      	ldr	r3, [pc, #44]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a18:	2200      	movs	r2, #0
20004a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
20004a1c:	4b09      	ldr	r3, [pc, #36]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a1e:	2200      	movs	r2, #0
20004a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
20004a22:	4b08      	ldr	r3, [pc, #32]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a24:	2200      	movs	r2, #0
20004a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
20004a28:	4b06      	ldr	r3, [pc, #24]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a2a:	2200      	movs	r2, #0
20004a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
20004a2e:	4805      	ldr	r0, [pc, #20]	@ (20004a44 <MX_USART3_UART_Init+0x58>)
20004a30:	f003 ffff 	bl	20008a32 <HAL_UART_Init>
20004a34:	4603      	mov	r3, r0
20004a36:	2b00      	cmp	r3, #0
20004a38:	d001      	beq.n	20004a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
20004a3a:	f000 fa65 	bl	20004f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
20004a3e:	bf00      	nop
20004a40:	bd80      	pop	{r7, pc}
20004a42:	bf00      	nop
20004a44:	2000ea40 	.word	0x2000ea40
20004a48:	40004800 	.word	0x40004800

20004a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
20004a4c:	b580      	push	{r7, lr}
20004a4e:	b08c      	sub	sp, #48	@ 0x30
20004a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20004a52:	f107 031c 	add.w	r3, r7, #28
20004a56:	2200      	movs	r2, #0
20004a58:	601a      	str	r2, [r3, #0]
20004a5a:	605a      	str	r2, [r3, #4]
20004a5c:	609a      	str	r2, [r3, #8]
20004a5e:	60da      	str	r2, [r3, #12]
20004a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
20004a62:	4b79      	ldr	r3, [pc, #484]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004a66:	4a78      	ldr	r2, [pc, #480]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a68:	f043 0310 	orr.w	r3, r3, #16
20004a6c:	6313      	str	r3, [r2, #48]	@ 0x30
20004a6e:	4b76      	ldr	r3, [pc, #472]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004a72:	f003 0310 	and.w	r3, r3, #16
20004a76:	61bb      	str	r3, [r7, #24]
20004a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20004a7a:	4b73      	ldr	r3, [pc, #460]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004a7e:	4a72      	ldr	r2, [pc, #456]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a80:	f043 0304 	orr.w	r3, r3, #4
20004a84:	6313      	str	r3, [r2, #48]	@ 0x30
20004a86:	4b70      	ldr	r3, [pc, #448]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004a8a:	f003 0304 	and.w	r3, r3, #4
20004a8e:	617b      	str	r3, [r7, #20]
20004a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
20004a92:	4b6d      	ldr	r3, [pc, #436]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004a96:	4a6c      	ldr	r2, [pc, #432]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20004a9c:	6313      	str	r3, [r2, #48]	@ 0x30
20004a9e:	4b6a      	ldr	r3, [pc, #424]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004aa6:	613b      	str	r3, [r7, #16]
20004aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20004aaa:	4b67      	ldr	r3, [pc, #412]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004aae:	4a66      	ldr	r2, [pc, #408]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004ab0:	f043 0301 	orr.w	r3, r3, #1
20004ab4:	6313      	str	r3, [r2, #48]	@ 0x30
20004ab6:	4b64      	ldr	r3, [pc, #400]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004aba:	f003 0301 	and.w	r3, r3, #1
20004abe:	60fb      	str	r3, [r7, #12]
20004ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20004ac2:	4b61      	ldr	r3, [pc, #388]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004ac6:	4a60      	ldr	r2, [pc, #384]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004ac8:	f043 0302 	orr.w	r3, r3, #2
20004acc:	6313      	str	r3, [r2, #48]	@ 0x30
20004ace:	4b5e      	ldr	r3, [pc, #376]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004ad2:	f003 0302 	and.w	r3, r3, #2
20004ad6:	60bb      	str	r3, [r7, #8]
20004ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
20004ada:	4b5b      	ldr	r3, [pc, #364]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004ade:	4a5a      	ldr	r2, [pc, #360]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004ae0:	f043 0308 	orr.w	r3, r3, #8
20004ae4:	6313      	str	r3, [r2, #48]	@ 0x30
20004ae6:	4b58      	ldr	r3, [pc, #352]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004aea:	f003 0308 	and.w	r3, r3, #8
20004aee:	607b      	str	r3, [r7, #4]
20004af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
20004af2:	4b55      	ldr	r3, [pc, #340]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004af6:	4a54      	ldr	r2, [pc, #336]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20004afc:	6313      	str	r3, [r2, #48]	@ 0x30
20004afe:	4b52      	ldr	r3, [pc, #328]	@ (20004c48 <MX_GPIO_Init+0x1fc>)
20004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20004b06:	603b      	str	r3, [r7, #0]
20004b08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
20004b0a:	2200      	movs	r2, #0
20004b0c:	f244 0181 	movw	r1, #16513	@ 0x4081
20004b10:	484e      	ldr	r0, [pc, #312]	@ (20004c4c <MX_GPIO_Init+0x200>)
20004b12:	f001 fb25 	bl	20006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
20004b16:	2200      	movs	r2, #0
20004b18:	2140      	movs	r1, #64	@ 0x40
20004b1a:	484d      	ldr	r0, [pc, #308]	@ (20004c50 <MX_GPIO_Init+0x204>)
20004b1c:	f001 fb20 	bl	20006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TRST_Pin|JTAG_TDI_Pin, GPIO_PIN_SET);
20004b20:	2201      	movs	r2, #1
20004b22:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
20004b26:	484b      	ldr	r0, [pc, #300]	@ (20004c54 <MX_GPIO_Init+0x208>)
20004b28:	f001 fb1a 	bl	20006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TMS_Pin|JTAG_TCK_Pin, GPIO_PIN_RESET);
20004b2c:	2200      	movs	r2, #0
20004b2e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
20004b32:	4848      	ldr	r0, [pc, #288]	@ (20004c54 <MX_GPIO_Init+0x208>)
20004b34:	f001 fb14 	bl	20006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JTAG_SRST_GPIO_Port, JTAG_SRST_Pin, GPIO_PIN_SET);
20004b38:	2201      	movs	r2, #1
20004b3a:	2104      	movs	r1, #4
20004b3c:	4846      	ldr	r0, [pc, #280]	@ (20004c58 <MX_GPIO_Init+0x20c>)
20004b3e:	f001 fb0f 	bl	20006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
20004b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20004b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
20004b48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
20004b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004b4e:	2300      	movs	r3, #0
20004b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
20004b52:	f107 031c 	add.w	r3, r7, #28
20004b56:	4619      	mov	r1, r3
20004b58:	483e      	ldr	r0, [pc, #248]	@ (20004c54 <MX_GPIO_Init+0x208>)
20004b5a:	f001 f93d 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
20004b5e:	f244 0381 	movw	r3, #16513	@ 0x4081
20004b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004b64:	2301      	movs	r3, #1
20004b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004b68:	2300      	movs	r3, #0
20004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20004b6c:	2300      	movs	r3, #0
20004b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20004b70:	f107 031c 	add.w	r3, r7, #28
20004b74:	4619      	mov	r1, r3
20004b76:	4835      	ldr	r0, [pc, #212]	@ (20004c4c <MX_GPIO_Init+0x200>)
20004b78:	f001 f92e 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
20004b7c:	2340      	movs	r3, #64	@ 0x40
20004b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004b80:	2301      	movs	r3, #1
20004b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004b84:	2300      	movs	r3, #0
20004b86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20004b88:	2300      	movs	r3, #0
20004b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
20004b8c:	f107 031c 	add.w	r3, r7, #28
20004b90:	4619      	mov	r1, r3
20004b92:	482f      	ldr	r0, [pc, #188]	@ (20004c50 <MX_GPIO_Init+0x204>)
20004b94:	f001 f920 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
20004b98:	2380      	movs	r3, #128	@ 0x80
20004b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20004b9c:	2300      	movs	r3, #0
20004b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004ba0:	2300      	movs	r3, #0
20004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
20004ba4:	f107 031c 	add.w	r3, r7, #28
20004ba8:	4619      	mov	r1, r3
20004baa:	4829      	ldr	r0, [pc, #164]	@ (20004c50 <MX_GPIO_Init+0x204>)
20004bac:	f001 f914 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TRST_Pin */
  GPIO_InitStruct.Pin = JTAG_TRST_Pin;
20004bb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004bb6:	2301      	movs	r3, #1
20004bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004bba:	2300      	movs	r3, #0
20004bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004bbe:	2303      	movs	r3, #3
20004bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TRST_GPIO_Port, &GPIO_InitStruct);
20004bc2:	f107 031c 	add.w	r3, r7, #28
20004bc6:	4619      	mov	r1, r3
20004bc8:	4822      	ldr	r0, [pc, #136]	@ (20004c54 <MX_GPIO_Init+0x208>)
20004bca:	f001 f905 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JTAG_TMS_Pin JTAG_TCK_Pin */
  GPIO_InitStruct.Pin = JTAG_TMS_Pin|JTAG_TCK_Pin;
20004bce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
20004bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004bd4:	2301      	movs	r3, #1
20004bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20004bd8:	2302      	movs	r3, #2
20004bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004bdc:	2303      	movs	r3, #3
20004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20004be0:	f107 031c 	add.w	r3, r7, #28
20004be4:	4619      	mov	r1, r3
20004be6:	481b      	ldr	r0, [pc, #108]	@ (20004c54 <MX_GPIO_Init+0x208>)
20004be8:	f001 f8f6 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDO_Pin */
  GPIO_InitStruct.Pin = JTAG_TDO_Pin;
20004bec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20004bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20004bf2:	2300      	movs	r3, #0
20004bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20004bf6:	2301      	movs	r3, #1
20004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JTAG_TDO_GPIO_Port, &GPIO_InitStruct);
20004bfa:	f107 031c 	add.w	r3, r7, #28
20004bfe:	4619      	mov	r1, r3
20004c00:	4814      	ldr	r0, [pc, #80]	@ (20004c54 <MX_GPIO_Init+0x208>)
20004c02:	f001 f8e9 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDI_Pin */
  GPIO_InitStruct.Pin = JTAG_TDI_Pin;
20004c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20004c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004c0c:	2301      	movs	r3, #1
20004c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20004c10:	2301      	movs	r3, #1
20004c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004c14:	2303      	movs	r3, #3
20004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TDI_GPIO_Port, &GPIO_InitStruct);
20004c18:	f107 031c 	add.w	r3, r7, #28
20004c1c:	4619      	mov	r1, r3
20004c1e:	480d      	ldr	r0, [pc, #52]	@ (20004c54 <MX_GPIO_Init+0x208>)
20004c20:	f001 f8da 	bl	20005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_SRST_Pin */
  GPIO_InitStruct.Pin = JTAG_SRST_Pin;
20004c24:	2304      	movs	r3, #4
20004c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004c28:	2301      	movs	r3, #1
20004c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
20004c2c:	2301      	movs	r3, #1
20004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004c30:	2303      	movs	r3, #3
20004c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_SRST_GPIO_Port, &GPIO_InitStruct);
20004c34:	f107 031c 	add.w	r3, r7, #28
20004c38:	4619      	mov	r1, r3
20004c3a:	4807      	ldr	r0, [pc, #28]	@ (20004c58 <MX_GPIO_Init+0x20c>)
20004c3c:	f001 f8cc 	bl	20005dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
20004c40:	bf00      	nop
20004c42:	3730      	adds	r7, #48	@ 0x30
20004c44:	46bd      	mov	sp, r7
20004c46:	bd80      	pop	{r7, pc}
20004c48:	40023800 	.word	0x40023800
20004c4c:	40020400 	.word	0x40020400
20004c50:	40021800 	.word	0x40021800
20004c54:	40020800 	.word	0x40020800
20004c58:	40020c00 	.word	0x40020c00

20004c5c <Switch_SPI>:

/* USER CODE BEGIN 4 */

uint32_t pupdr, afr, moder;
void Switch_SPI(void)
{
20004c5c:	b480      	push	{r7}
20004c5e:	af00      	add	r7, sp, #0
	pupdr = GPIOC->PUPDR;
20004c60:	4b0f      	ldr	r3, [pc, #60]	@ (20004ca0 <Switch_SPI+0x44>)
20004c62:	68db      	ldr	r3, [r3, #12]
20004c64:	4a0f      	ldr	r2, [pc, #60]	@ (20004ca4 <Switch_SPI+0x48>)
20004c66:	6013      	str	r3, [r2, #0]
	afr = GPIOC->AFR[1];
20004c68:	4b0d      	ldr	r3, [pc, #52]	@ (20004ca0 <Switch_SPI+0x44>)
20004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20004c6c:	4a0e      	ldr	r2, [pc, #56]	@ (20004ca8 <Switch_SPI+0x4c>)
20004c6e:	6013      	str	r3, [r2, #0]
	moder = GPIOC->MODER;
20004c70:	4b0b      	ldr	r3, [pc, #44]	@ (20004ca0 <Switch_SPI+0x44>)
20004c72:	681b      	ldr	r3, [r3, #0]
20004c74:	4a0d      	ldr	r2, [pc, #52]	@ (20004cac <Switch_SPI+0x50>)
20004c76:	6013      	str	r3, [r2, #0]

	GPIOC->PUPDR = (0x1 << 16);
20004c78:	4b09      	ldr	r3, [pc, #36]	@ (20004ca0 <Switch_SPI+0x44>)
20004c7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20004c7e:	60da      	str	r2, [r3, #12]
	GPIOC->AFR[1] = (0x6 << 8) | (0x6 << 12) | (0x6 << 16);
20004c80:	4b07      	ldr	r3, [pc, #28]	@ (20004ca0 <Switch_SPI+0x44>)
20004c82:	4a0b      	ldr	r2, [pc, #44]	@ (20004cb0 <Switch_SPI+0x54>)
20004c84:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOC->MODER = (1 << 16) | (0x1 << 18) | (0x2 << 20) | (0x2 << 22 )| (0x2 << 24);
20004c86:	4b06      	ldr	r3, [pc, #24]	@ (20004ca0 <Switch_SPI+0x44>)
20004c88:	4a0a      	ldr	r2, [pc, #40]	@ (20004cb4 <Switch_SPI+0x58>)
20004c8a:	601a      	str	r2, [r3, #0]

	SPI3->CR1 = (0x1 << 8) | (0x1 << 9) |
20004c8c:	4b0a      	ldr	r3, [pc, #40]	@ (20004cb8 <Switch_SPI+0x5c>)
20004c8e:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
20004c92:	601a      	str	r2, [r3, #0]
			(1 << 2) | (0x7 << 3) | (0x1 << 7) |
			(0x1 << 6);


}
20004c94:	bf00      	nop
20004c96:	46bd      	mov	sp, r7
20004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c9c:	4770      	bx	lr
20004c9e:	bf00      	nop
20004ca0:	40020800 	.word	0x40020800
20004ca4:	2000ebd0 	.word	0x2000ebd0
20004ca8:	2000ebd4 	.word	0x2000ebd4
20004cac:	2000ebd8 	.word	0x2000ebd8
20004cb0:	00066600 	.word	0x00066600
20004cb4:	02a50000 	.word	0x02a50000
20004cb8:	40003c00 	.word	0x40003c00

20004cbc <WaitForComplete>:
{
	while( !(SPI3->SR & (0x1 << 7) ) );
}

static inline void WaitForComplete(void)
{
20004cbc:	b480      	push	{r7}
20004cbe:	af00      	add	r7, sp, #0
	while( (SPI3->SR & (0x1 << 7) ) );
20004cc0:	bf00      	nop
20004cc2:	4b06      	ldr	r3, [pc, #24]	@ (20004cdc <WaitForComplete+0x20>)
20004cc4:	689b      	ldr	r3, [r3, #8]
20004cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004cca:	2b00      	cmp	r3, #0
20004ccc:	d1f9      	bne.n	20004cc2 <WaitForComplete+0x6>
}
20004cce:	bf00      	nop
20004cd0:	bf00      	nop
20004cd2:	46bd      	mov	sp, r7
20004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cd8:	4770      	bx	lr
20004cda:	bf00      	nop
20004cdc:	40003c00 	.word	0x40003c00

20004ce0 <xFer>:

static inline void xFer(uint32_t *rdData, uint32_t wrData, uint8_t bitSize)
{
20004ce0:	b580      	push	{r7, lr}
20004ce2:	b086      	sub	sp, #24
20004ce4:	af00      	add	r7, sp, #0
20004ce6:	60f8      	str	r0, [r7, #12]
20004ce8:	60b9      	str	r1, [r7, #8]
20004cea:	4613      	mov	r3, r2
20004cec:	71fb      	strb	r3, [r7, #7]

	WaitForComplete();
20004cee:	f7ff ffe5 	bl	20004cbc <WaitForComplete>
	uint8_t dummyStop = 1;
20004cf2:	2301      	movs	r3, #1
20004cf4:	75fb      	strb	r3, [r7, #23]



	SPI3->CR2 = ( (bitSize -1) << 8);
20004cf6:	79fb      	ldrb	r3, [r7, #7]
20004cf8:	3b01      	subs	r3, #1
20004cfa:	021a      	lsls	r2, r3, #8
20004cfc:	4b12      	ldr	r3, [pc, #72]	@ (20004d48 <xFer+0x68>)
20004cfe:	605a      	str	r2, [r3, #4]


	if(bitSize == 8)
20004d00:	79fb      	ldrb	r3, [r7, #7]
20004d02:	2b08      	cmp	r3, #8
20004d04:	d101      	bne.n	20004d0a <xFer+0x2a>
	{
		dummyStop = 0;
20004d06:	2300      	movs	r3, #0
20004d08:	75fb      	strb	r3, [r7, #23]
	}

	if(bitSize <= 8)
20004d0a:	79fb      	ldrb	r3, [r7, #7]
20004d0c:	2b08      	cmp	r3, #8
20004d0e:	d804      	bhi.n	20004d1a <xFer+0x3a>
	{
		*(uint8_t *)&SPI3->DR = wrData;
20004d10:	4b0e      	ldr	r3, [pc, #56]	@ (20004d4c <xFer+0x6c>)
20004d12:	68ba      	ldr	r2, [r7, #8]
20004d14:	b2d2      	uxtb	r2, r2
20004d16:	701a      	strb	r2, [r3, #0]
20004d18:	e002      	b.n	20004d20 <xFer+0x40>
	}
	else
	{
		SPI3->DR = wrData;
20004d1a:	4a0b      	ldr	r2, [pc, #44]	@ (20004d48 <xFer+0x68>)
20004d1c:	68bb      	ldr	r3, [r7, #8]
20004d1e:	60d3      	str	r3, [r2, #12]
	}




	WaitForComplete();
20004d20:	f7ff ffcc 	bl	20004cbc <WaitForComplete>

	if(bitSize <= 8)
20004d24:	79fb      	ldrb	r3, [r7, #7]
20004d26:	2b08      	cmp	r3, #8
20004d28:	d805      	bhi.n	20004d36 <xFer+0x56>
	{
		*rdData = *(uint8_t *)&SPI3->DR;
20004d2a:	4b08      	ldr	r3, [pc, #32]	@ (20004d4c <xFer+0x6c>)
20004d2c:	781b      	ldrb	r3, [r3, #0]
20004d2e:	461a      	mov	r2, r3
20004d30:	68fb      	ldr	r3, [r7, #12]
20004d32:	601a      	str	r2, [r3, #0]
	{
		*rdData = *(uint16_t *)&SPI3->DR;
	}


}
20004d34:	e004      	b.n	20004d40 <xFer+0x60>
		*rdData = *(uint16_t *)&SPI3->DR;
20004d36:	4b05      	ldr	r3, [pc, #20]	@ (20004d4c <xFer+0x6c>)
20004d38:	881b      	ldrh	r3, [r3, #0]
20004d3a:	461a      	mov	r2, r3
20004d3c:	68fb      	ldr	r3, [r7, #12]
20004d3e:	601a      	str	r2, [r3, #0]
}
20004d40:	bf00      	nop
20004d42:	3718      	adds	r7, #24
20004d44:	46bd      	mov	sp, r7
20004d46:	bd80      	pop	{r7, pc}
20004d48:	40003c00 	.word	0x40003c00
20004d4c:	40003c0c 	.word	0x40003c0c

20004d50 <SPI_TMS_Transfer>:


void SPI_TMS_Transfer(uint64_t data, uint8_t bits)
{
20004d50:	b480      	push	{r7}
20004d52:	b089      	sub	sp, #36	@ 0x24
20004d54:	af00      	add	r7, sp, #0
20004d56:	e9c7 0102 	strd	r0, r1, [r7, #8]
20004d5a:	4613      	mov	r3, r2
20004d5c:	71fb      	strb	r3, [r7, #7]

	int a = 0, b = 0;
20004d5e:	2300      	movs	r3, #0
20004d60:	61bb      	str	r3, [r7, #24]
20004d62:	2300      	movs	r3, #0
20004d64:	61fb      	str	r3, [r7, #28]

	SPI4->CR2 = ( (bits -1) << 8);
20004d66:	79fb      	ldrb	r3, [r7, #7]
20004d68:	3b01      	subs	r3, #1
20004d6a:	021a      	lsls	r2, r3, #8
20004d6c:	4b13      	ldr	r3, [pc, #76]	@ (20004dbc <SPI_TMS_Transfer+0x6c>)
20004d6e:	605a      	str	r2, [r3, #4]

	while( (SPI4->SR & (0x1 << 7) ) )
20004d70:	e002      	b.n	20004d78 <SPI_TMS_Transfer+0x28>
	{
		b++;
20004d72:	69fb      	ldr	r3, [r7, #28]
20004d74:	3301      	adds	r3, #1
20004d76:	61fb      	str	r3, [r7, #28]
	while( (SPI4->SR & (0x1 << 7) ) )
20004d78:	4b10      	ldr	r3, [pc, #64]	@ (20004dbc <SPI_TMS_Transfer+0x6c>)
20004d7a:	689b      	ldr	r3, [r3, #8]
20004d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004d80:	2b00      	cmp	r3, #0
20004d82:	d1f6      	bne.n	20004d72 <SPI_TMS_Transfer+0x22>
	}

	while( ( (SPI4->SR >> 11) & 0x3 ) != 0) ;
20004d84:	bf00      	nop
20004d86:	4b0d      	ldr	r3, [pc, #52]	@ (20004dbc <SPI_TMS_Transfer+0x6c>)
20004d88:	689b      	ldr	r3, [r3, #8]
20004d8a:	0adb      	lsrs	r3, r3, #11
20004d8c:	f003 0303 	and.w	r3, r3, #3
20004d90:	2b00      	cmp	r3, #0
20004d92:	d1f8      	bne.n	20004d86 <SPI_TMS_Transfer+0x36>


	uint32_t dummyRead = SPI4->DR;
20004d94:	4b09      	ldr	r3, [pc, #36]	@ (20004dbc <SPI_TMS_Transfer+0x6c>)
20004d96:	68db      	ldr	r3, [r3, #12]
20004d98:	617b      	str	r3, [r7, #20]


	if(bits <= 8)
20004d9a:	79fb      	ldrb	r3, [r7, #7]
20004d9c:	2b08      	cmp	r3, #8
20004d9e:	d803      	bhi.n	20004da8 <SPI_TMS_Transfer+0x58>
	{
		*(uint8_t *)&SPI4->DR = data;
20004da0:	4b07      	ldr	r3, [pc, #28]	@ (20004dc0 <SPI_TMS_Transfer+0x70>)
20004da2:	7a3a      	ldrb	r2, [r7, #8]
20004da4:	701a      	strb	r2, [r3, #0]
	else
	{
		*(uint16_t *)&SPI4->DR = data;
	}

}
20004da6:	e002      	b.n	20004dae <SPI_TMS_Transfer+0x5e>
		*(uint16_t *)&SPI4->DR = data;
20004da8:	4b05      	ldr	r3, [pc, #20]	@ (20004dc0 <SPI_TMS_Transfer+0x70>)
20004daa:	893a      	ldrh	r2, [r7, #8]
20004dac:	801a      	strh	r2, [r3, #0]
}
20004dae:	bf00      	nop
20004db0:	3724      	adds	r7, #36	@ 0x24
20004db2:	46bd      	mov	sp, r7
20004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004db8:	4770      	bx	lr
20004dba:	bf00      	nop
20004dbc:	40013400 	.word	0x40013400
20004dc0:	4001340c 	.word	0x4001340c

20004dc4 <SPI_TMSRead>:

void SPI_TMSRead(uint64_t *ptr, uint8_t bits)
{
20004dc4:	b4b0      	push	{r4, r5, r7}
20004dc6:	b083      	sub	sp, #12
20004dc8:	af00      	add	r7, sp, #0
20004dca:	6078      	str	r0, [r7, #4]
20004dcc:	70f9      	strb	r1, [r7, #3]
	if(bits <= 8)
20004dce:	78f9      	ldrb	r1, [r7, #3]
20004dd0:	2908      	cmp	r1, #8
20004dd2:	d809      	bhi.n	20004de8 <SPI_TMSRead+0x24>
	{
		*ptr = *(uint8_t *)&SPI4->DR;
20004dd4:	4b0b      	ldr	r3, [pc, #44]	@ (20004e04 <SPI_TMSRead+0x40>)
20004dd6:	781b      	ldrb	r3, [r3, #0]
20004dd8:	b2db      	uxtb	r3, r3
20004dda:	2200      	movs	r2, #0
20004ddc:	461c      	mov	r4, r3
20004dde:	4615      	mov	r5, r2
20004de0:	687b      	ldr	r3, [r7, #4]
20004de2:	e9c3 4500 	strd	r4, r5, [r3]
	else
	{
		*ptr = *(uint16_t *)&SPI4->DR;
	}

}
20004de6:	e008      	b.n	20004dfa <SPI_TMSRead+0x36>
		*ptr = *(uint16_t *)&SPI4->DR;
20004de8:	4906      	ldr	r1, [pc, #24]	@ (20004e04 <SPI_TMSRead+0x40>)
20004dea:	8809      	ldrh	r1, [r1, #0]
20004dec:	b289      	uxth	r1, r1
20004dee:	2000      	movs	r0, #0
20004df0:	460a      	mov	r2, r1
20004df2:	4603      	mov	r3, r0
20004df4:	6879      	ldr	r1, [r7, #4]
20004df6:	e9c1 2300 	strd	r2, r3, [r1]
}
20004dfa:	bf00      	nop
20004dfc:	370c      	adds	r7, #12
20004dfe:	46bd      	mov	sp, r7
20004e00:	bcb0      	pop	{r4, r5, r7}
20004e02:	4770      	bx	lr
20004e04:	4001340c 	.word	0x4001340c

20004e08 <SPI_SwitchPhaseToListen>:

void SPI_SwitchPhaseToListen(void)
{
20004e08:	b480      	push	{r7}
20004e0a:	af00      	add	r7, sp, #0
	SPI4->CR1 &= ~(0x1 << 6);
20004e0c:	4b11      	ldr	r3, [pc, #68]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e0e:	681b      	ldr	r3, [r3, #0]
20004e10:	4a10      	ldr	r2, [pc, #64]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
20004e16:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= 1;
20004e18:	4b0f      	ldr	r3, [pc, #60]	@ (20004e58 <SPI_SwitchPhaseToListen+0x50>)
20004e1a:	681b      	ldr	r3, [r3, #0]
20004e1c:	4a0e      	ldr	r2, [pc, #56]	@ (20004e58 <SPI_SwitchPhaseToListen+0x50>)
20004e1e:	f043 0301 	orr.w	r3, r3, #1
20004e22:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= 1;
20004e24:	4b0b      	ldr	r3, [pc, #44]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e26:	681b      	ldr	r3, [r3, #0]
20004e28:	4a0a      	ldr	r2, [pc, #40]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e2a:	f043 0301 	orr.w	r3, r3, #1
20004e2e:	6013      	str	r3, [r2, #0]

	SPI4->CR1 &= ~(1 << 14);
20004e30:	4b08      	ldr	r3, [pc, #32]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e32:	681b      	ldr	r3, [r3, #0]
20004e34:	4a07      	ldr	r2, [pc, #28]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
20004e3a:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= (0x1 << 6);
20004e3c:	4b05      	ldr	r3, [pc, #20]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e3e:	681b      	ldr	r3, [r3, #0]
20004e40:	4a04      	ldr	r2, [pc, #16]	@ (20004e54 <SPI_SwitchPhaseToListen+0x4c>)
20004e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20004e46:	6013      	str	r3, [r2, #0]

}
20004e48:	bf00      	nop
20004e4a:	46bd      	mov	sp, r7
20004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e50:	4770      	bx	lr
20004e52:	bf00      	nop
20004e54:	40013400 	.word	0x40013400
20004e58:	40003c00 	.word	0x40003c00

20004e5c <SPI_SwitchPhaseToWrite>:

void SPI_SwitchPhaseToWrite(void)
{
20004e5c:	b480      	push	{r7}
20004e5e:	af00      	add	r7, sp, #0
	SPI4->CR1 &= ~(0x1 << 6);
20004e60:	4b11      	ldr	r3, [pc, #68]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e62:	681b      	ldr	r3, [r3, #0]
20004e64:	4a10      	ldr	r2, [pc, #64]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
20004e6a:	6013      	str	r3, [r2, #0]
	SPI3->CR1 &= ~1uL;
20004e6c:	4b0f      	ldr	r3, [pc, #60]	@ (20004eac <SPI_SwitchPhaseToWrite+0x50>)
20004e6e:	681b      	ldr	r3, [r3, #0]
20004e70:	4a0e      	ldr	r2, [pc, #56]	@ (20004eac <SPI_SwitchPhaseToWrite+0x50>)
20004e72:	f023 0301 	bic.w	r3, r3, #1
20004e76:	6013      	str	r3, [r2, #0]
	SPI4->CR1 &= ~1uL;
20004e78:	4b0b      	ldr	r3, [pc, #44]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e7a:	681b      	ldr	r3, [r3, #0]
20004e7c:	4a0a      	ldr	r2, [pc, #40]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e7e:	f023 0301 	bic.w	r3, r3, #1
20004e82:	6013      	str	r3, [r2, #0]

	SPI4->CR1 |= (1uL << 14);
20004e84:	4b08      	ldr	r3, [pc, #32]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e86:	681b      	ldr	r3, [r3, #0]
20004e88:	4a07      	ldr	r2, [pc, #28]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20004e8e:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= (0x1 << 6);
20004e90:	4b05      	ldr	r3, [pc, #20]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e92:	681b      	ldr	r3, [r3, #0]
20004e94:	4a04      	ldr	r2, [pc, #16]	@ (20004ea8 <SPI_SwitchPhaseToWrite+0x4c>)
20004e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20004e9a:	6013      	str	r3, [r2, #0]

}
20004e9c:	bf00      	nop
20004e9e:	46bd      	mov	sp, r7
20004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ea4:	4770      	bx	lr
20004ea6:	bf00      	nop
20004ea8:	40013400 	.word	0x40013400
20004eac:	40003c00 	.word	0x40003c00

20004eb0 <SPI_Transfer>:

int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize)
{
20004eb0:	b5b0      	push	{r4, r5, r7, lr}
20004eb2:	b088      	sub	sp, #32
20004eb4:	af00      	add	r7, sp, #0
20004eb6:	60f8      	str	r0, [r7, #12]
20004eb8:	e9c7 2300 	strd	r2, r3, [r7]
	int retVal = -1;
20004ebc:	f04f 33ff 	mov.w	r3, #4294967295
20004ec0:	61fb      	str	r3, [r7, #28]
	int i = 0;
20004ec2:	2300      	movs	r3, #0
20004ec4:	61bb      	str	r3, [r7, #24]


	int halfWordIterationCnt = (bitSize / 16) -1;
20004ec6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
20004eca:	091b      	lsrs	r3, r3, #4
20004ecc:	b2db      	uxtb	r3, r3
20004ece:	3b01      	subs	r3, #1
20004ed0:	617b      	str	r3, [r7, #20]
	uint32_t tempReadVal, tempWriteVal;

	*rdData = 0;
20004ed2:	68f9      	ldr	r1, [r7, #12]
20004ed4:	f04f 0200 	mov.w	r2, #0
20004ed8:	f04f 0300 	mov.w	r3, #0
20004edc:	e9c1 2300 	strd	r2, r3, [r1]
	xFer(&tempReadVal, wrData, bitSize);
20004ee0:	6839      	ldr	r1, [r7, #0]
20004ee2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
20004ee6:	f107 0310 	add.w	r3, r7, #16
20004eea:	4618      	mov	r0, r3
20004eec:	f7ff fef8 	bl	20004ce0 <xFer>
	*rdData = tempReadVal;
20004ef0:	693b      	ldr	r3, [r7, #16]
20004ef2:	2200      	movs	r2, #0
20004ef4:	461c      	mov	r4, r3
20004ef6:	4615      	mov	r5, r2
20004ef8:	68fb      	ldr	r3, [r7, #12]
20004efa:	e9c3 4500 	strd	r4, r5, [r3]

}
20004efe:	bf00      	nop
20004f00:	4618      	mov	r0, r3
20004f02:	3720      	adds	r7, #32
20004f04:	46bd      	mov	sp, r7
20004f06:	bdb0      	pop	{r4, r5, r7, pc}

20004f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20004f08:	b480      	push	{r7}
20004f0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20004f0c:	b672      	cpsid	i
}
20004f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20004f10:	bf00      	nop
20004f12:	e7fd      	b.n	20004f10 <Error_Handler+0x8>

20004f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20004f14:	b480      	push	{r7}
20004f16:	b083      	sub	sp, #12
20004f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
20004f1a:	4b0f      	ldr	r3, [pc, #60]	@ (20004f58 <HAL_MspInit+0x44>)
20004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004f1e:	4a0e      	ldr	r2, [pc, #56]	@ (20004f58 <HAL_MspInit+0x44>)
20004f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20004f24:	6413      	str	r3, [r2, #64]	@ 0x40
20004f26:	4b0c      	ldr	r3, [pc, #48]	@ (20004f58 <HAL_MspInit+0x44>)
20004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20004f2e:	607b      	str	r3, [r7, #4]
20004f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
20004f32:	4b09      	ldr	r3, [pc, #36]	@ (20004f58 <HAL_MspInit+0x44>)
20004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004f36:	4a08      	ldr	r2, [pc, #32]	@ (20004f58 <HAL_MspInit+0x44>)
20004f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20004f3c:	6453      	str	r3, [r2, #68]	@ 0x44
20004f3e:	4b06      	ldr	r3, [pc, #24]	@ (20004f58 <HAL_MspInit+0x44>)
20004f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20004f46:	603b      	str	r3, [r7, #0]
20004f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20004f4a:	bf00      	nop
20004f4c:	370c      	adds	r7, #12
20004f4e:	46bd      	mov	sp, r7
20004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f54:	4770      	bx	lr
20004f56:	bf00      	nop
20004f58:	40023800 	.word	0x40023800

20004f5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
20004f5c:	b580      	push	{r7, lr}
20004f5e:	b08e      	sub	sp, #56	@ 0x38
20004f60:	af00      	add	r7, sp, #0
20004f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20004f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20004f68:	2200      	movs	r2, #0
20004f6a:	601a      	str	r2, [r3, #0]
20004f6c:	605a      	str	r2, [r3, #4]
20004f6e:	609a      	str	r2, [r3, #8]
20004f70:	60da      	str	r2, [r3, #12]
20004f72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
20004f74:	687b      	ldr	r3, [r7, #4]
20004f76:	681b      	ldr	r3, [r3, #0]
20004f78:	4a4e      	ldr	r2, [pc, #312]	@ (200050b4 <HAL_ETH_MspInit+0x158>)
20004f7a:	4293      	cmp	r3, r2
20004f7c:	f040 8096 	bne.w	200050ac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
20004f80:	4b4d      	ldr	r3, [pc, #308]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004f84:	4a4c      	ldr	r2, [pc, #304]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004f86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
20004f8a:	6313      	str	r3, [r2, #48]	@ 0x30
20004f8c:	4b4a      	ldr	r3, [pc, #296]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20004f94:	623b      	str	r3, [r7, #32]
20004f96:	6a3b      	ldr	r3, [r7, #32]
20004f98:	4b47      	ldr	r3, [pc, #284]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004f9c:	4a46      	ldr	r2, [pc, #280]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004f9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20004fa2:	6313      	str	r3, [r2, #48]	@ 0x30
20004fa4:	4b44      	ldr	r3, [pc, #272]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004fa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
20004fac:	61fb      	str	r3, [r7, #28]
20004fae:	69fb      	ldr	r3, [r7, #28]
20004fb0:	4b41      	ldr	r3, [pc, #260]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004fb4:	4a40      	ldr	r2, [pc, #256]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20004fba:	6313      	str	r3, [r2, #48]	@ 0x30
20004fbc:	4b3e      	ldr	r3, [pc, #248]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20004fc4:	61bb      	str	r3, [r7, #24]
20004fc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
20004fc8:	4b3b      	ldr	r3, [pc, #236]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004fcc:	4a3a      	ldr	r2, [pc, #232]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fce:	f043 0304 	orr.w	r3, r3, #4
20004fd2:	6313      	str	r3, [r2, #48]	@ 0x30
20004fd4:	4b38      	ldr	r3, [pc, #224]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004fd8:	f003 0304 	and.w	r3, r3, #4
20004fdc:	617b      	str	r3, [r7, #20]
20004fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
20004fe0:	4b35      	ldr	r3, [pc, #212]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004fe4:	4a34      	ldr	r2, [pc, #208]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fe6:	f043 0301 	orr.w	r3, r3, #1
20004fea:	6313      	str	r3, [r2, #48]	@ 0x30
20004fec:	4b32      	ldr	r3, [pc, #200]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004ff0:	f003 0301 	and.w	r3, r3, #1
20004ff4:	613b      	str	r3, [r7, #16]
20004ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20004ff8:	4b2f      	ldr	r3, [pc, #188]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004ffc:	4a2e      	ldr	r2, [pc, #184]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20004ffe:	f043 0302 	orr.w	r3, r3, #2
20005002:	6313      	str	r3, [r2, #48]	@ 0x30
20005004:	4b2c      	ldr	r3, [pc, #176]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005008:	f003 0302 	and.w	r3, r3, #2
2000500c:	60fb      	str	r3, [r7, #12]
2000500e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
20005010:	4b29      	ldr	r3, [pc, #164]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005014:	4a28      	ldr	r2, [pc, #160]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
20005016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000501a:	6313      	str	r3, [r2, #48]	@ 0x30
2000501c:	4b26      	ldr	r3, [pc, #152]	@ (200050b8 <HAL_ETH_MspInit+0x15c>)
2000501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20005024:	60bb      	str	r3, [r7, #8]
20005026:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
20005028:	2332      	movs	r3, #50	@ 0x32
2000502a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000502c:	2302      	movs	r3, #2
2000502e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005030:	2300      	movs	r3, #0
20005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20005034:	2303      	movs	r3, #3
20005036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20005038:	230b      	movs	r3, #11
2000503a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2000503c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20005040:	4619      	mov	r1, r3
20005042:	481e      	ldr	r0, [pc, #120]	@ (200050bc <HAL_ETH_MspInit+0x160>)
20005044:	f000 fec8 	bl	20005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
20005048:	2386      	movs	r3, #134	@ 0x86
2000504a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000504c:	2302      	movs	r3, #2
2000504e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005050:	2300      	movs	r3, #0
20005052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20005054:	2303      	movs	r3, #3
20005056:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20005058:	230b      	movs	r3, #11
2000505a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000505c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20005060:	4619      	mov	r1, r3
20005062:	4817      	ldr	r0, [pc, #92]	@ (200050c0 <HAL_ETH_MspInit+0x164>)
20005064:	f000 feb8 	bl	20005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
20005068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
2000506c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000506e:	2302      	movs	r3, #2
20005070:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005072:	2300      	movs	r3, #0
20005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20005076:	2303      	movs	r3, #3
20005078:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
2000507a:	230b      	movs	r3, #11
2000507c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
2000507e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20005082:	4619      	mov	r1, r3
20005084:	480f      	ldr	r0, [pc, #60]	@ (200050c4 <HAL_ETH_MspInit+0x168>)
20005086:	f000 fea7 	bl	20005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
2000508a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
2000508e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20005090:	2302      	movs	r3, #2
20005092:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20005094:	2300      	movs	r3, #0
20005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20005098:	2303      	movs	r3, #3
2000509a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
2000509c:	230b      	movs	r3, #11
2000509e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
200050a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
200050a4:	4619      	mov	r1, r3
200050a6:	4808      	ldr	r0, [pc, #32]	@ (200050c8 <HAL_ETH_MspInit+0x16c>)
200050a8:	f000 fe96 	bl	20005dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
200050ac:	bf00      	nop
200050ae:	3738      	adds	r7, #56	@ 0x38
200050b0:	46bd      	mov	sp, r7
200050b2:	bd80      	pop	{r7, pc}
200050b4:	40028000 	.word	0x40028000
200050b8:	40023800 	.word	0x40023800
200050bc:	40020800 	.word	0x40020800
200050c0:	40020000 	.word	0x40020000
200050c4:	40020400 	.word	0x40020400
200050c8:	40021800 	.word	0x40021800

200050cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
200050cc:	b580      	push	{r7, lr}
200050ce:	b08c      	sub	sp, #48	@ 0x30
200050d0:	af00      	add	r7, sp, #0
200050d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200050d4:	f107 031c 	add.w	r3, r7, #28
200050d8:	2200      	movs	r2, #0
200050da:	601a      	str	r2, [r3, #0]
200050dc:	605a      	str	r2, [r3, #4]
200050de:	609a      	str	r2, [r3, #8]
200050e0:	60da      	str	r2, [r3, #12]
200050e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
200050e4:	687b      	ldr	r3, [r7, #4]
200050e6:	681b      	ldr	r3, [r3, #0]
200050e8:	4a3c      	ldr	r2, [pc, #240]	@ (200051dc <HAL_SPI_MspInit+0x110>)
200050ea:	4293      	cmp	r3, r2
200050ec:	d144      	bne.n	20005178 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
200050ee:	4b3c      	ldr	r3, [pc, #240]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
200050f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200050f2:	4a3b      	ldr	r2, [pc, #236]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
200050f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
200050f8:	6453      	str	r3, [r2, #68]	@ 0x44
200050fa:	4b39      	ldr	r3, [pc, #228]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
200050fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200050fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20005102:	61bb      	str	r3, [r7, #24]
20005104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
20005106:	4b36      	ldr	r3, [pc, #216]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
20005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000510a:	4a35      	ldr	r2, [pc, #212]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
2000510c:	f043 0301 	orr.w	r3, r3, #1
20005110:	6313      	str	r3, [r2, #48]	@ 0x30
20005112:	4b33      	ldr	r3, [pc, #204]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
20005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005116:	f003 0301 	and.w	r3, r3, #1
2000511a:	617b      	str	r3, [r7, #20]
2000511c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2000511e:	4b30      	ldr	r3, [pc, #192]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
20005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20005122:	4a2f      	ldr	r2, [pc, #188]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
20005124:	f043 0302 	orr.w	r3, r3, #2
20005128:	6313      	str	r3, [r2, #48]	@ 0x30
2000512a:	4b2d      	ldr	r3, [pc, #180]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
2000512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000512e:	f003 0302 	and.w	r3, r3, #2
20005132:	613b      	str	r3, [r7, #16]
20005134:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
20005136:	2360      	movs	r3, #96	@ 0x60
20005138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000513a:	2302      	movs	r3, #2
2000513c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000513e:	2300      	movs	r3, #0
20005140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20005142:	2303      	movs	r3, #3
20005144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20005146:	2305      	movs	r3, #5
20005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000514a:	f107 031c 	add.w	r3, r7, #28
2000514e:	4619      	mov	r1, r3
20005150:	4824      	ldr	r0, [pc, #144]	@ (200051e4 <HAL_SPI_MspInit+0x118>)
20005152:	f000 fe41 	bl	20005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
20005156:	2320      	movs	r3, #32
20005158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000515a:	2302      	movs	r3, #2
2000515c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000515e:	2300      	movs	r3, #0
20005160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20005162:	2303      	movs	r3, #3
20005164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20005166:	2305      	movs	r3, #5
20005168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000516a:	f107 031c 	add.w	r3, r7, #28
2000516e:	4619      	mov	r1, r3
20005170:	481d      	ldr	r0, [pc, #116]	@ (200051e8 <HAL_SPI_MspInit+0x11c>)
20005172:	f000 fe31 	bl	20005dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
20005176:	e02c      	b.n	200051d2 <HAL_SPI_MspInit+0x106>
  else if(hspi->Instance==SPI4)
20005178:	687b      	ldr	r3, [r7, #4]
2000517a:	681b      	ldr	r3, [r3, #0]
2000517c:	4a1b      	ldr	r2, [pc, #108]	@ (200051ec <HAL_SPI_MspInit+0x120>)
2000517e:	4293      	cmp	r3, r2
20005180:	d127      	bne.n	200051d2 <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
20005182:	4b17      	ldr	r3, [pc, #92]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
20005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005186:	4a16      	ldr	r2, [pc, #88]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
20005188:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
2000518c:	6453      	str	r3, [r2, #68]	@ 0x44
2000518e:	4b14      	ldr	r3, [pc, #80]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
20005190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20005196:	60fb      	str	r3, [r7, #12]
20005198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
2000519a:	4b11      	ldr	r3, [pc, #68]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
2000519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000519e:	4a10      	ldr	r2, [pc, #64]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
200051a0:	f043 0310 	orr.w	r3, r3, #16
200051a4:	6313      	str	r3, [r2, #48]	@ 0x30
200051a6:	4b0e      	ldr	r3, [pc, #56]	@ (200051e0 <HAL_SPI_MspInit+0x114>)
200051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200051aa:	f003 0310 	and.w	r3, r3, #16
200051ae:	60bb      	str	r3, [r7, #8]
200051b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
200051b2:	2364      	movs	r3, #100	@ 0x64
200051b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200051b6:	2302      	movs	r3, #2
200051b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200051ba:	2300      	movs	r3, #0
200051bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200051be:	2303      	movs	r3, #3
200051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
200051c2:	2305      	movs	r3, #5
200051c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
200051c6:	f107 031c 	add.w	r3, r7, #28
200051ca:	4619      	mov	r1, r3
200051cc:	4808      	ldr	r0, [pc, #32]	@ (200051f0 <HAL_SPI_MspInit+0x124>)
200051ce:	f000 fe03 	bl	20005dd8 <HAL_GPIO_Init>
}
200051d2:	bf00      	nop
200051d4:	3730      	adds	r7, #48	@ 0x30
200051d6:	46bd      	mov	sp, r7
200051d8:	bd80      	pop	{r7, pc}
200051da:	bf00      	nop
200051dc:	40013000 	.word	0x40013000
200051e0:	40023800 	.word	0x40023800
200051e4:	40020000 	.word	0x40020000
200051e8:	40020400 	.word	0x40020400
200051ec:	40013400 	.word	0x40013400
200051f0:	40021000 	.word	0x40021000

200051f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
200051f4:	b580      	push	{r7, lr}
200051f6:	b0aa      	sub	sp, #168	@ 0xa8
200051f8:	af00      	add	r7, sp, #0
200051fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200051fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20005200:	2200      	movs	r2, #0
20005202:	601a      	str	r2, [r3, #0]
20005204:	605a      	str	r2, [r3, #4]
20005206:	609a      	str	r2, [r3, #8]
20005208:	60da      	str	r2, [r3, #12]
2000520a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2000520c:	f107 0310 	add.w	r3, r7, #16
20005210:	2284      	movs	r2, #132	@ 0x84
20005212:	2100      	movs	r1, #0
20005214:	4618      	mov	r0, r3
20005216:	f008 f8bb 	bl	2000d390 <memset>
  if(huart->Instance==USART3)
2000521a:	687b      	ldr	r3, [r7, #4]
2000521c:	681b      	ldr	r3, [r3, #0]
2000521e:	4a22      	ldr	r2, [pc, #136]	@ (200052a8 <HAL_UART_MspInit+0xb4>)
20005220:	4293      	cmp	r3, r2
20005222:	d13c      	bne.n	2000529e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
20005224:	f44f 7380 	mov.w	r3, #256	@ 0x100
20005228:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
2000522a:	2300      	movs	r3, #0
2000522c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2000522e:	f107 0310 	add.w	r3, r7, #16
20005232:	4618      	mov	r0, r3
20005234:	f002 ff62 	bl	200080fc <HAL_RCCEx_PeriphCLKConfig>
20005238:	4603      	mov	r3, r0
2000523a:	2b00      	cmp	r3, #0
2000523c:	d001      	beq.n	20005242 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
2000523e:	f7ff fe63 	bl	20004f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
20005242:	4b1a      	ldr	r3, [pc, #104]	@ (200052ac <HAL_UART_MspInit+0xb8>)
20005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005246:	4a19      	ldr	r2, [pc, #100]	@ (200052ac <HAL_UART_MspInit+0xb8>)
20005248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2000524c:	6413      	str	r3, [r2, #64]	@ 0x40
2000524e:	4b17      	ldr	r3, [pc, #92]	@ (200052ac <HAL_UART_MspInit+0xb8>)
20005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20005256:	60fb      	str	r3, [r7, #12]
20005258:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
2000525a:	4b14      	ldr	r3, [pc, #80]	@ (200052ac <HAL_UART_MspInit+0xb8>)
2000525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000525e:	4a13      	ldr	r2, [pc, #76]	@ (200052ac <HAL_UART_MspInit+0xb8>)
20005260:	f043 0308 	orr.w	r3, r3, #8
20005264:	6313      	str	r3, [r2, #48]	@ 0x30
20005266:	4b11      	ldr	r3, [pc, #68]	@ (200052ac <HAL_UART_MspInit+0xb8>)
20005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000526a:	f003 0308 	and.w	r3, r3, #8
2000526e:	60bb      	str	r3, [r7, #8]
20005270:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
20005272:	f44f 7340 	mov.w	r3, #768	@ 0x300
20005276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000527a:	2302      	movs	r3, #2
2000527c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
20005280:	2301      	movs	r3, #1
20005282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20005286:	2303      	movs	r3, #3
20005288:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
2000528c:	2307      	movs	r3, #7
2000528e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20005292:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20005296:	4619      	mov	r1, r3
20005298:	4805      	ldr	r0, [pc, #20]	@ (200052b0 <HAL_UART_MspInit+0xbc>)
2000529a:	f000 fd9d 	bl	20005dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
2000529e:	bf00      	nop
200052a0:	37a8      	adds	r7, #168	@ 0xa8
200052a2:	46bd      	mov	sp, r7
200052a4:	bd80      	pop	{r7, pc}
200052a6:	bf00      	nop
200052a8:	40004800 	.word	0x40004800
200052ac:	40023800 	.word	0x40023800
200052b0:	40020c00 	.word	0x40020c00

200052b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
200052b4:	b480      	push	{r7}
200052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
200052b8:	bf00      	nop
200052ba:	e7fd      	b.n	200052b8 <NMI_Handler+0x4>

200052bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
200052bc:	b480      	push	{r7}
200052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
200052c0:	bf00      	nop
200052c2:	e7fd      	b.n	200052c0 <HardFault_Handler+0x4>

200052c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
200052c4:	b480      	push	{r7}
200052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
200052c8:	bf00      	nop
200052ca:	e7fd      	b.n	200052c8 <MemManage_Handler+0x4>

200052cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
200052cc:	b480      	push	{r7}
200052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
200052d0:	bf00      	nop
200052d2:	e7fd      	b.n	200052d0 <BusFault_Handler+0x4>

200052d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
200052d4:	b480      	push	{r7}
200052d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
200052d8:	bf00      	nop
200052da:	e7fd      	b.n	200052d8 <UsageFault_Handler+0x4>

200052dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
200052dc:	b480      	push	{r7}
200052de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
200052e0:	bf00      	nop
200052e2:	46bd      	mov	sp, r7
200052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200052e8:	4770      	bx	lr

200052ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
200052ea:	b480      	push	{r7}
200052ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
200052ee:	bf00      	nop
200052f0:	46bd      	mov	sp, r7
200052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200052f6:	4770      	bx	lr

200052f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
200052f8:	b480      	push	{r7}
200052fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
200052fc:	bf00      	nop
200052fe:	46bd      	mov	sp, r7
20005300:	f85d 7b04 	ldr.w	r7, [sp], #4
20005304:	4770      	bx	lr

20005306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20005306:	b580      	push	{r7, lr}
20005308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000530a:	f000 f8c1 	bl	20005490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000530e:	bf00      	nop
20005310:	bd80      	pop	{r7, pc}
	...

20005314 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
20005314:	b580      	push	{r7, lr}
20005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	cnt++;
20005318:	4b04      	ldr	r3, [pc, #16]	@ (2000532c <OTG_FS_IRQHandler+0x18>)
2000531a:	681b      	ldr	r3, [r3, #0]
2000531c:	3301      	adds	r3, #1
2000531e:	4a03      	ldr	r2, [pc, #12]	@ (2000532c <OTG_FS_IRQHandler+0x18>)
20005320:	6013      	str	r3, [r2, #0]

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
20005322:	4803      	ldr	r0, [pc, #12]	@ (20005330 <OTG_FS_IRQHandler+0x1c>)
20005324:	f001 f86d 	bl	20006402 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
20005328:	bf00      	nop
2000532a:	bd80      	pop	{r7, pc}
2000532c:	2000ebe4 	.word	0x2000ebe4
20005330:	2000f0d0 	.word	0x2000f0d0

20005334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20005334:	b580      	push	{r7, lr}
20005336:	b086      	sub	sp, #24
20005338:	af00      	add	r7, sp, #0
2000533a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000533c:	4a14      	ldr	r2, [pc, #80]	@ (20005390 <_sbrk+0x5c>)
2000533e:	4b15      	ldr	r3, [pc, #84]	@ (20005394 <_sbrk+0x60>)
20005340:	1ad3      	subs	r3, r2, r3
20005342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20005344:	697b      	ldr	r3, [r7, #20]
20005346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20005348:	4b13      	ldr	r3, [pc, #76]	@ (20005398 <_sbrk+0x64>)
2000534a:	681b      	ldr	r3, [r3, #0]
2000534c:	2b00      	cmp	r3, #0
2000534e:	d102      	bne.n	20005356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20005350:	4b11      	ldr	r3, [pc, #68]	@ (20005398 <_sbrk+0x64>)
20005352:	4a12      	ldr	r2, [pc, #72]	@ (2000539c <_sbrk+0x68>)
20005354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20005356:	4b10      	ldr	r3, [pc, #64]	@ (20005398 <_sbrk+0x64>)
20005358:	681a      	ldr	r2, [r3, #0]
2000535a:	687b      	ldr	r3, [r7, #4]
2000535c:	4413      	add	r3, r2
2000535e:	693a      	ldr	r2, [r7, #16]
20005360:	429a      	cmp	r2, r3
20005362:	d207      	bcs.n	20005374 <_sbrk+0x40>
  {
    errno = ENOMEM;
20005364:	f008 f82c 	bl	2000d3c0 <__errno>
20005368:	4603      	mov	r3, r0
2000536a:	220c      	movs	r2, #12
2000536c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000536e:	f04f 33ff 	mov.w	r3, #4294967295
20005372:	e009      	b.n	20005388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20005374:	4b08      	ldr	r3, [pc, #32]	@ (20005398 <_sbrk+0x64>)
20005376:	681b      	ldr	r3, [r3, #0]
20005378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000537a:	4b07      	ldr	r3, [pc, #28]	@ (20005398 <_sbrk+0x64>)
2000537c:	681a      	ldr	r2, [r3, #0]
2000537e:	687b      	ldr	r3, [r7, #4]
20005380:	4413      	add	r3, r2
20005382:	4a05      	ldr	r2, [pc, #20]	@ (20005398 <_sbrk+0x64>)
20005384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20005386:	68fb      	ldr	r3, [r7, #12]
}
20005388:	4618      	mov	r0, r3
2000538a:	3718      	adds	r7, #24
2000538c:	46bd      	mov	sp, r7
2000538e:	bd80      	pop	{r7, pc}
20005390:	20050000 	.word	0x20050000
20005394:	00000400 	.word	0x00000400
20005398:	2000ebe8 	.word	0x2000ebe8
2000539c:	2000f6f8 	.word	0x2000f6f8

200053a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200053a0:	b480      	push	{r7}
200053a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200053a4:	4b06      	ldr	r3, [pc, #24]	@ (200053c0 <SystemInit+0x20>)
200053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200053aa:	4a05      	ldr	r2, [pc, #20]	@ (200053c0 <SystemInit+0x20>)
200053ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
200053b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
200053b4:	bf00      	nop
200053b6:	46bd      	mov	sp, r7
200053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200053bc:	4770      	bx	lr
200053be:	bf00      	nop
200053c0:	e000ed00 	.word	0xe000ed00

200053c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
200053c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 200053fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
200053c8:	f7ff ffea 	bl	200053a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
200053cc:	480c      	ldr	r0, [pc, #48]	@ (20005400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
200053ce:	490d      	ldr	r1, [pc, #52]	@ (20005404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
200053d0:	4a0d      	ldr	r2, [pc, #52]	@ (20005408 <LoopFillZerobss+0x1a>)
  movs r3, #0
200053d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
200053d4:	e002      	b.n	200053dc <LoopCopyDataInit>

200053d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
200053d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
200053d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
200053da:	3304      	adds	r3, #4

200053dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
200053dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
200053de:	428c      	cmp	r4, r1
  bcc CopyDataInit
200053e0:	d3f9      	bcc.n	200053d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
200053e2:	4a0a      	ldr	r2, [pc, #40]	@ (2000540c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
200053e4:	4c0a      	ldr	r4, [pc, #40]	@ (20005410 <LoopFillZerobss+0x22>)
  movs r3, #0
200053e6:	2300      	movs	r3, #0
  b LoopFillZerobss
200053e8:	e001      	b.n	200053ee <LoopFillZerobss>

200053ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
200053ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
200053ec:	3204      	adds	r2, #4

200053ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
200053ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
200053f0:	d3fb      	bcc.n	200053ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
200053f2:	f007 ffeb 	bl	2000d3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
200053f6:	f7ff f93d 	bl	20004674 <main>
  bx  lr    
200053fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
200053fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
20005400:	2000d550 	.word	0x2000d550
  ldr r1, =_edata
20005404:	2000d6d8 	.word	0x2000d6d8
  ldr r2, =_sidata
20005408:	2000d550 	.word	0x2000d550
  ldr r2, =_sbss
2000540c:	2000d818 	.word	0x2000d818
  ldr r4, =_ebss
20005410:	2000f6f8 	.word	0x2000f6f8

20005414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20005414:	e7fe      	b.n	20005414 <ADC_IRQHandler>

20005416 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20005416:	b580      	push	{r7, lr}
20005418:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000541a:	2003      	movs	r0, #3
2000541c:	f000 f94c 	bl	200056b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20005420:	2000      	movs	r0, #0
20005422:	f000 f805 	bl	20005430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20005426:	f7ff fd75 	bl	20004f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000542a:	2300      	movs	r3, #0
}
2000542c:	4618      	mov	r0, r3
2000542e:	bd80      	pop	{r7, pc}

20005430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20005430:	b580      	push	{r7, lr}
20005432:	b082      	sub	sp, #8
20005434:	af00      	add	r7, sp, #0
20005436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20005438:	4b12      	ldr	r3, [pc, #72]	@ (20005484 <HAL_InitTick+0x54>)
2000543a:	681a      	ldr	r2, [r3, #0]
2000543c:	4b12      	ldr	r3, [pc, #72]	@ (20005488 <HAL_InitTick+0x58>)
2000543e:	781b      	ldrb	r3, [r3, #0]
20005440:	4619      	mov	r1, r3
20005442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
20005446:	fbb3 f3f1 	udiv	r3, r3, r1
2000544a:	fbb2 f3f3 	udiv	r3, r2, r3
2000544e:	4618      	mov	r0, r3
20005450:	f000 f967 	bl	20005722 <HAL_SYSTICK_Config>
20005454:	4603      	mov	r3, r0
20005456:	2b00      	cmp	r3, #0
20005458:	d001      	beq.n	2000545e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000545a:	2301      	movs	r3, #1
2000545c:	e00e      	b.n	2000547c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000545e:	687b      	ldr	r3, [r7, #4]
20005460:	2b0f      	cmp	r3, #15
20005462:	d80a      	bhi.n	2000547a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20005464:	2200      	movs	r2, #0
20005466:	6879      	ldr	r1, [r7, #4]
20005468:	f04f 30ff 	mov.w	r0, #4294967295
2000546c:	f000 f92f 	bl	200056ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20005470:	4a06      	ldr	r2, [pc, #24]	@ (2000548c <HAL_InitTick+0x5c>)
20005472:	687b      	ldr	r3, [r7, #4]
20005474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20005476:	2300      	movs	r3, #0
20005478:	e000      	b.n	2000547c <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000547a:	2301      	movs	r3, #1
}
2000547c:	4618      	mov	r0, r3
2000547e:	3708      	adds	r7, #8
20005480:	46bd      	mov	sp, r7
20005482:	bd80      	pop	{r7, pc}
20005484:	2000d550 	.word	0x2000d550
20005488:	2000d558 	.word	0x2000d558
2000548c:	2000d554 	.word	0x2000d554

20005490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20005490:	b480      	push	{r7}
20005492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20005494:	4b06      	ldr	r3, [pc, #24]	@ (200054b0 <HAL_IncTick+0x20>)
20005496:	781b      	ldrb	r3, [r3, #0]
20005498:	461a      	mov	r2, r3
2000549a:	4b06      	ldr	r3, [pc, #24]	@ (200054b4 <HAL_IncTick+0x24>)
2000549c:	681b      	ldr	r3, [r3, #0]
2000549e:	4413      	add	r3, r2
200054a0:	4a04      	ldr	r2, [pc, #16]	@ (200054b4 <HAL_IncTick+0x24>)
200054a2:	6013      	str	r3, [r2, #0]
}
200054a4:	bf00      	nop
200054a6:	46bd      	mov	sp, r7
200054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200054ac:	4770      	bx	lr
200054ae:	bf00      	nop
200054b0:	2000d558 	.word	0x2000d558
200054b4:	2000ebec 	.word	0x2000ebec

200054b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
200054b8:	b480      	push	{r7}
200054ba:	af00      	add	r7, sp, #0
  return uwTick;
200054bc:	4b03      	ldr	r3, [pc, #12]	@ (200054cc <HAL_GetTick+0x14>)
200054be:	681b      	ldr	r3, [r3, #0]
}
200054c0:	4618      	mov	r0, r3
200054c2:	46bd      	mov	sp, r7
200054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200054c8:	4770      	bx	lr
200054ca:	bf00      	nop
200054cc:	2000ebec 	.word	0x2000ebec

200054d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
200054d0:	b580      	push	{r7, lr}
200054d2:	b084      	sub	sp, #16
200054d4:	af00      	add	r7, sp, #0
200054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
200054d8:	f7ff ffee 	bl	200054b8 <HAL_GetTick>
200054dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
200054de:	687b      	ldr	r3, [r7, #4]
200054e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
200054e2:	68fb      	ldr	r3, [r7, #12]
200054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
200054e8:	d005      	beq.n	200054f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
200054ea:	4b0a      	ldr	r3, [pc, #40]	@ (20005514 <HAL_Delay+0x44>)
200054ec:	781b      	ldrb	r3, [r3, #0]
200054ee:	461a      	mov	r2, r3
200054f0:	68fb      	ldr	r3, [r7, #12]
200054f2:	4413      	add	r3, r2
200054f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
200054f6:	bf00      	nop
200054f8:	f7ff ffde 	bl	200054b8 <HAL_GetTick>
200054fc:	4602      	mov	r2, r0
200054fe:	68bb      	ldr	r3, [r7, #8]
20005500:	1ad3      	subs	r3, r2, r3
20005502:	68fa      	ldr	r2, [r7, #12]
20005504:	429a      	cmp	r2, r3
20005506:	d8f7      	bhi.n	200054f8 <HAL_Delay+0x28>
  {
  }
}
20005508:	bf00      	nop
2000550a:	bf00      	nop
2000550c:	3710      	adds	r7, #16
2000550e:	46bd      	mov	sp, r7
20005510:	bd80      	pop	{r7, pc}
20005512:	bf00      	nop
20005514:	2000d558 	.word	0x2000d558

20005518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20005518:	b480      	push	{r7}
2000551a:	b085      	sub	sp, #20
2000551c:	af00      	add	r7, sp, #0
2000551e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20005520:	687b      	ldr	r3, [r7, #4]
20005522:	f003 0307 	and.w	r3, r3, #7
20005526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20005528:	4b0b      	ldr	r3, [pc, #44]	@ (20005558 <__NVIC_SetPriorityGrouping+0x40>)
2000552a:	68db      	ldr	r3, [r3, #12]
2000552c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000552e:	68ba      	ldr	r2, [r7, #8]
20005530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
20005534:	4013      	ands	r3, r2
20005536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20005538:	68fb      	ldr	r3, [r7, #12]
2000553a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000553c:	68bb      	ldr	r3, [r7, #8]
2000553e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
20005540:	4b06      	ldr	r3, [pc, #24]	@ (2000555c <__NVIC_SetPriorityGrouping+0x44>)
20005542:	4313      	orrs	r3, r2
20005544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20005546:	4a04      	ldr	r2, [pc, #16]	@ (20005558 <__NVIC_SetPriorityGrouping+0x40>)
20005548:	68bb      	ldr	r3, [r7, #8]
2000554a:	60d3      	str	r3, [r2, #12]
}
2000554c:	bf00      	nop
2000554e:	3714      	adds	r7, #20
20005550:	46bd      	mov	sp, r7
20005552:	f85d 7b04 	ldr.w	r7, [sp], #4
20005556:	4770      	bx	lr
20005558:	e000ed00 	.word	0xe000ed00
2000555c:	05fa0000 	.word	0x05fa0000

20005560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20005560:	b480      	push	{r7}
20005562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20005564:	4b04      	ldr	r3, [pc, #16]	@ (20005578 <__NVIC_GetPriorityGrouping+0x18>)
20005566:	68db      	ldr	r3, [r3, #12]
20005568:	0a1b      	lsrs	r3, r3, #8
2000556a:	f003 0307 	and.w	r3, r3, #7
}
2000556e:	4618      	mov	r0, r3
20005570:	46bd      	mov	sp, r7
20005572:	f85d 7b04 	ldr.w	r7, [sp], #4
20005576:	4770      	bx	lr
20005578:	e000ed00 	.word	0xe000ed00

2000557c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000557c:	b480      	push	{r7}
2000557e:	b083      	sub	sp, #12
20005580:	af00      	add	r7, sp, #0
20005582:	4603      	mov	r3, r0
20005584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000558a:	2b00      	cmp	r3, #0
2000558c:	db0b      	blt.n	200055a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000558e:	79fb      	ldrb	r3, [r7, #7]
20005590:	f003 021f 	and.w	r2, r3, #31
20005594:	4907      	ldr	r1, [pc, #28]	@ (200055b4 <__NVIC_EnableIRQ+0x38>)
20005596:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000559a:	095b      	lsrs	r3, r3, #5
2000559c:	2001      	movs	r0, #1
2000559e:	fa00 f202 	lsl.w	r2, r0, r2
200055a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200055a6:	bf00      	nop
200055a8:	370c      	adds	r7, #12
200055aa:	46bd      	mov	sp, r7
200055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200055b0:	4770      	bx	lr
200055b2:	bf00      	nop
200055b4:	e000e100 	.word	0xe000e100

200055b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200055b8:	b480      	push	{r7}
200055ba:	b083      	sub	sp, #12
200055bc:	af00      	add	r7, sp, #0
200055be:	4603      	mov	r3, r0
200055c0:	6039      	str	r1, [r7, #0]
200055c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200055c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
200055c8:	2b00      	cmp	r3, #0
200055ca:	db0a      	blt.n	200055e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200055cc:	683b      	ldr	r3, [r7, #0]
200055ce:	b2da      	uxtb	r2, r3
200055d0:	490c      	ldr	r1, [pc, #48]	@ (20005604 <__NVIC_SetPriority+0x4c>)
200055d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200055d6:	0112      	lsls	r2, r2, #4
200055d8:	b2d2      	uxtb	r2, r2
200055da:	440b      	add	r3, r1
200055dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
200055e0:	e00a      	b.n	200055f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200055e2:	683b      	ldr	r3, [r7, #0]
200055e4:	b2da      	uxtb	r2, r3
200055e6:	4908      	ldr	r1, [pc, #32]	@ (20005608 <__NVIC_SetPriority+0x50>)
200055e8:	79fb      	ldrb	r3, [r7, #7]
200055ea:	f003 030f 	and.w	r3, r3, #15
200055ee:	3b04      	subs	r3, #4
200055f0:	0112      	lsls	r2, r2, #4
200055f2:	b2d2      	uxtb	r2, r2
200055f4:	440b      	add	r3, r1
200055f6:	761a      	strb	r2, [r3, #24]
}
200055f8:	bf00      	nop
200055fa:	370c      	adds	r7, #12
200055fc:	46bd      	mov	sp, r7
200055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20005602:	4770      	bx	lr
20005604:	e000e100 	.word	0xe000e100
20005608:	e000ed00 	.word	0xe000ed00

2000560c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000560c:	b480      	push	{r7}
2000560e:	b089      	sub	sp, #36	@ 0x24
20005610:	af00      	add	r7, sp, #0
20005612:	60f8      	str	r0, [r7, #12]
20005614:	60b9      	str	r1, [r7, #8]
20005616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20005618:	68fb      	ldr	r3, [r7, #12]
2000561a:	f003 0307 	and.w	r3, r3, #7
2000561e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20005620:	69fb      	ldr	r3, [r7, #28]
20005622:	f1c3 0307 	rsb	r3, r3, #7
20005626:	2b04      	cmp	r3, #4
20005628:	bf28      	it	cs
2000562a:	2304      	movcs	r3, #4
2000562c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000562e:	69fb      	ldr	r3, [r7, #28]
20005630:	3304      	adds	r3, #4
20005632:	2b06      	cmp	r3, #6
20005634:	d902      	bls.n	2000563c <NVIC_EncodePriority+0x30>
20005636:	69fb      	ldr	r3, [r7, #28]
20005638:	3b03      	subs	r3, #3
2000563a:	e000      	b.n	2000563e <NVIC_EncodePriority+0x32>
2000563c:	2300      	movs	r3, #0
2000563e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20005640:	f04f 32ff 	mov.w	r2, #4294967295
20005644:	69bb      	ldr	r3, [r7, #24]
20005646:	fa02 f303 	lsl.w	r3, r2, r3
2000564a:	43da      	mvns	r2, r3
2000564c:	68bb      	ldr	r3, [r7, #8]
2000564e:	401a      	ands	r2, r3
20005650:	697b      	ldr	r3, [r7, #20]
20005652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20005654:	f04f 31ff 	mov.w	r1, #4294967295
20005658:	697b      	ldr	r3, [r7, #20]
2000565a:	fa01 f303 	lsl.w	r3, r1, r3
2000565e:	43d9      	mvns	r1, r3
20005660:	687b      	ldr	r3, [r7, #4]
20005662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20005664:	4313      	orrs	r3, r2
         );
}
20005666:	4618      	mov	r0, r3
20005668:	3724      	adds	r7, #36	@ 0x24
2000566a:	46bd      	mov	sp, r7
2000566c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005670:	4770      	bx	lr
	...

20005674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20005674:	b580      	push	{r7, lr}
20005676:	b082      	sub	sp, #8
20005678:	af00      	add	r7, sp, #0
2000567a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000567c:	687b      	ldr	r3, [r7, #4]
2000567e:	3b01      	subs	r3, #1
20005680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20005684:	d301      	bcc.n	2000568a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20005686:	2301      	movs	r3, #1
20005688:	e00f      	b.n	200056aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000568a:	4a0a      	ldr	r2, [pc, #40]	@ (200056b4 <SysTick_Config+0x40>)
2000568c:	687b      	ldr	r3, [r7, #4]
2000568e:	3b01      	subs	r3, #1
20005690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20005692:	210f      	movs	r1, #15
20005694:	f04f 30ff 	mov.w	r0, #4294967295
20005698:	f7ff ff8e 	bl	200055b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000569c:	4b05      	ldr	r3, [pc, #20]	@ (200056b4 <SysTick_Config+0x40>)
2000569e:	2200      	movs	r2, #0
200056a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200056a2:	4b04      	ldr	r3, [pc, #16]	@ (200056b4 <SysTick_Config+0x40>)
200056a4:	2207      	movs	r2, #7
200056a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200056a8:	2300      	movs	r3, #0
}
200056aa:	4618      	mov	r0, r3
200056ac:	3708      	adds	r7, #8
200056ae:	46bd      	mov	sp, r7
200056b0:	bd80      	pop	{r7, pc}
200056b2:	bf00      	nop
200056b4:	e000e010 	.word	0xe000e010

200056b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200056b8:	b580      	push	{r7, lr}
200056ba:	b082      	sub	sp, #8
200056bc:	af00      	add	r7, sp, #0
200056be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200056c0:	6878      	ldr	r0, [r7, #4]
200056c2:	f7ff ff29 	bl	20005518 <__NVIC_SetPriorityGrouping>
}
200056c6:	bf00      	nop
200056c8:	3708      	adds	r7, #8
200056ca:	46bd      	mov	sp, r7
200056cc:	bd80      	pop	{r7, pc}

200056ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200056ce:	b580      	push	{r7, lr}
200056d0:	b086      	sub	sp, #24
200056d2:	af00      	add	r7, sp, #0
200056d4:	4603      	mov	r3, r0
200056d6:	60b9      	str	r1, [r7, #8]
200056d8:	607a      	str	r2, [r7, #4]
200056da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
200056dc:	2300      	movs	r3, #0
200056de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
200056e0:	f7ff ff3e 	bl	20005560 <__NVIC_GetPriorityGrouping>
200056e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
200056e6:	687a      	ldr	r2, [r7, #4]
200056e8:	68b9      	ldr	r1, [r7, #8]
200056ea:	6978      	ldr	r0, [r7, #20]
200056ec:	f7ff ff8e 	bl	2000560c <NVIC_EncodePriority>
200056f0:	4602      	mov	r2, r0
200056f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
200056f6:	4611      	mov	r1, r2
200056f8:	4618      	mov	r0, r3
200056fa:	f7ff ff5d 	bl	200055b8 <__NVIC_SetPriority>
}
200056fe:	bf00      	nop
20005700:	3718      	adds	r7, #24
20005702:	46bd      	mov	sp, r7
20005704:	bd80      	pop	{r7, pc}

20005706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20005706:	b580      	push	{r7, lr}
20005708:	b082      	sub	sp, #8
2000570a:	af00      	add	r7, sp, #0
2000570c:	4603      	mov	r3, r0
2000570e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20005710:	f997 3007 	ldrsb.w	r3, [r7, #7]
20005714:	4618      	mov	r0, r3
20005716:	f7ff ff31 	bl	2000557c <__NVIC_EnableIRQ>
}
2000571a:	bf00      	nop
2000571c:	3708      	adds	r7, #8
2000571e:	46bd      	mov	sp, r7
20005720:	bd80      	pop	{r7, pc}

20005722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20005722:	b580      	push	{r7, lr}
20005724:	b082      	sub	sp, #8
20005726:	af00      	add	r7, sp, #0
20005728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000572a:	6878      	ldr	r0, [r7, #4]
2000572c:	f7ff ffa2 	bl	20005674 <SysTick_Config>
20005730:	4603      	mov	r3, r0
}
20005732:	4618      	mov	r0, r3
20005734:	3708      	adds	r7, #8
20005736:	46bd      	mov	sp, r7
20005738:	bd80      	pop	{r7, pc}
	...

2000573c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
2000573c:	b580      	push	{r7, lr}
2000573e:	b084      	sub	sp, #16
20005740:	af00      	add	r7, sp, #0
20005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
20005744:	687b      	ldr	r3, [r7, #4]
20005746:	2b00      	cmp	r3, #0
20005748:	d101      	bne.n	2000574e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
2000574a:	2301      	movs	r3, #1
2000574c:	e086      	b.n	2000585c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
2000574e:	687b      	ldr	r3, [r7, #4]
20005750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20005754:	2b00      	cmp	r3, #0
20005756:	d106      	bne.n	20005766 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
20005758:	687b      	ldr	r3, [r7, #4]
2000575a:	2220      	movs	r2, #32
2000575c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
20005760:	6878      	ldr	r0, [r7, #4]
20005762:	f7ff fbfb 	bl	20004f5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20005766:	4b3f      	ldr	r3, [pc, #252]	@ (20005864 <HAL_ETH_Init+0x128>)
20005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000576a:	4a3e      	ldr	r2, [pc, #248]	@ (20005864 <HAL_ETH_Init+0x128>)
2000576c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20005770:	6453      	str	r3, [r2, #68]	@ 0x44
20005772:	4b3c      	ldr	r3, [pc, #240]	@ (20005864 <HAL_ETH_Init+0x128>)
20005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000577a:	60bb      	str	r3, [r7, #8]
2000577c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
2000577e:	4b3a      	ldr	r3, [pc, #232]	@ (20005868 <HAL_ETH_Init+0x12c>)
20005780:	685b      	ldr	r3, [r3, #4]
20005782:	4a39      	ldr	r2, [pc, #228]	@ (20005868 <HAL_ETH_Init+0x12c>)
20005784:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
20005788:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
2000578a:	4b37      	ldr	r3, [pc, #220]	@ (20005868 <HAL_ETH_Init+0x12c>)
2000578c:	685a      	ldr	r2, [r3, #4]
2000578e:	687b      	ldr	r3, [r7, #4]
20005790:	689b      	ldr	r3, [r3, #8]
20005792:	4935      	ldr	r1, [pc, #212]	@ (20005868 <HAL_ETH_Init+0x12c>)
20005794:	4313      	orrs	r3, r2
20005796:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
20005798:	4b33      	ldr	r3, [pc, #204]	@ (20005868 <HAL_ETH_Init+0x12c>)
2000579a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
2000579c:	687b      	ldr	r3, [r7, #4]
2000579e:	681b      	ldr	r3, [r3, #0]
200057a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200057a4:	681b      	ldr	r3, [r3, #0]
200057a6:	687a      	ldr	r2, [r7, #4]
200057a8:	6812      	ldr	r2, [r2, #0]
200057aa:	f043 0301 	orr.w	r3, r3, #1
200057ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
200057b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200057b4:	f7ff fe80 	bl	200054b8 <HAL_GetTick>
200057b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
200057ba:	e011      	b.n	200057e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
200057bc:	f7ff fe7c 	bl	200054b8 <HAL_GetTick>
200057c0:	4602      	mov	r2, r0
200057c2:	68fb      	ldr	r3, [r7, #12]
200057c4:	1ad3      	subs	r3, r2, r3
200057c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
200057ca:	d909      	bls.n	200057e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
200057cc:	687b      	ldr	r3, [r7, #4]
200057ce:	2204      	movs	r2, #4
200057d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
200057d4:	687b      	ldr	r3, [r7, #4]
200057d6:	22e0      	movs	r2, #224	@ 0xe0
200057d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
200057dc:	2301      	movs	r3, #1
200057de:	e03d      	b.n	2000585c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
200057e0:	687b      	ldr	r3, [r7, #4]
200057e2:	681b      	ldr	r3, [r3, #0]
200057e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200057e8:	681b      	ldr	r3, [r3, #0]
200057ea:	f003 0301 	and.w	r3, r3, #1
200057ee:	2b00      	cmp	r3, #0
200057f0:	d1e4      	bne.n	200057bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
200057f2:	6878      	ldr	r0, [r7, #4]
200057f4:	f000 f97a 	bl	20005aec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
200057f8:	6878      	ldr	r0, [r7, #4]
200057fa:	f000 fa25 	bl	20005c48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
200057fe:	6878      	ldr	r0, [r7, #4]
20005800:	f000 fa7b 	bl	20005cfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
20005804:	687b      	ldr	r3, [r7, #4]
20005806:	685b      	ldr	r3, [r3, #4]
20005808:	461a      	mov	r2, r3
2000580a:	2100      	movs	r1, #0
2000580c:	6878      	ldr	r0, [r7, #4]
2000580e:	f000 f9e3 	bl	20005bd8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
20005812:	687b      	ldr	r3, [r7, #4]
20005814:	681b      	ldr	r3, [r3, #0]
20005816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20005818:	687b      	ldr	r3, [r7, #4]
2000581a:	681b      	ldr	r3, [r3, #0]
2000581c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
20005820:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
20005822:	687b      	ldr	r3, [r7, #4]
20005824:	681b      	ldr	r3, [r3, #0]
20005826:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
2000582a:	687b      	ldr	r3, [r7, #4]
2000582c:	681a      	ldr	r2, [r3, #0]
2000582e:	4b0f      	ldr	r3, [pc, #60]	@ (2000586c <HAL_ETH_Init+0x130>)
20005830:	430b      	orrs	r3, r1
20005832:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
20005836:	687b      	ldr	r3, [r7, #4]
20005838:	681b      	ldr	r3, [r3, #0]
2000583a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
2000583e:	687b      	ldr	r3, [r7, #4]
20005840:	681b      	ldr	r3, [r3, #0]
20005842:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
20005846:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
2000584a:	687b      	ldr	r3, [r7, #4]
2000584c:	2200      	movs	r2, #0
2000584e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
20005852:	687b      	ldr	r3, [r7, #4]
20005854:	2210      	movs	r2, #16
20005856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
2000585a:	2300      	movs	r3, #0
}
2000585c:	4618      	mov	r0, r3
2000585e:	3710      	adds	r7, #16
20005860:	46bd      	mov	sp, r7
20005862:	bd80      	pop	{r7, pc}
20005864:	40023800 	.word	0x40023800
20005868:	40013800 	.word	0x40013800
2000586c:	00020060 	.word	0x00020060

20005870 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
20005870:	b580      	push	{r7, lr}
20005872:	b084      	sub	sp, #16
20005874:	af00      	add	r7, sp, #0
20005876:	6078      	str	r0, [r7, #4]
20005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
2000587a:	687b      	ldr	r3, [r7, #4]
2000587c:	681b      	ldr	r3, [r3, #0]
2000587e:	681b      	ldr	r3, [r3, #0]
20005880:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
20005882:	68fa      	ldr	r2, [r7, #12]
20005884:	4b53      	ldr	r3, [pc, #332]	@ (200059d4 <ETH_SetMACConfig+0x164>)
20005886:	4013      	ands	r3, r2
20005888:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
2000588a:	683b      	ldr	r3, [r7, #0]
2000588c:	7b9b      	ldrb	r3, [r3, #14]
2000588e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20005890:	683a      	ldr	r2, [r7, #0]
20005892:	7c12      	ldrb	r2, [r2, #16]
20005894:	2a00      	cmp	r2, #0
20005896:	d102      	bne.n	2000589e <ETH_SetMACConfig+0x2e>
20005898:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
2000589c:	e000      	b.n	200058a0 <ETH_SetMACConfig+0x30>
2000589e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
200058a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
200058a2:	683a      	ldr	r2, [r7, #0]
200058a4:	7c52      	ldrb	r2, [r2, #17]
200058a6:	2a00      	cmp	r2, #0
200058a8:	d102      	bne.n	200058b0 <ETH_SetMACConfig+0x40>
200058aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
200058ae:	e000      	b.n	200058b2 <ETH_SetMACConfig+0x42>
200058b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
200058b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
200058b4:	683b      	ldr	r3, [r7, #0]
200058b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
200058b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
200058ba:	683b      	ldr	r3, [r7, #0]
200058bc:	7fdb      	ldrb	r3, [r3, #31]
200058be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
200058c0:	431a      	orrs	r2, r3
                        macconf->Speed |
200058c2:	683b      	ldr	r3, [r7, #0]
200058c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
200058c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
200058c8:	683a      	ldr	r2, [r7, #0]
200058ca:	7f92      	ldrb	r2, [r2, #30]
200058cc:	2a00      	cmp	r2, #0
200058ce:	d102      	bne.n	200058d6 <ETH_SetMACConfig+0x66>
200058d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
200058d4:	e000      	b.n	200058d8 <ETH_SetMACConfig+0x68>
200058d6:	2200      	movs	r2, #0
                        macconf->Speed |
200058d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
200058da:	683b      	ldr	r3, [r7, #0]
200058dc:	7f1b      	ldrb	r3, [r3, #28]
200058de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
200058e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
200058e2:	683b      	ldr	r3, [r7, #0]
200058e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
200058e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
200058e8:	683b      	ldr	r3, [r7, #0]
200058ea:	791b      	ldrb	r3, [r3, #4]
200058ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
200058ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
200058f0:	683a      	ldr	r2, [r7, #0]
200058f2:	f892 2020 	ldrb.w	r2, [r2, #32]
200058f6:	2a00      	cmp	r2, #0
200058f8:	d102      	bne.n	20005900 <ETH_SetMACConfig+0x90>
200058fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
200058fe:	e000      	b.n	20005902 <ETH_SetMACConfig+0x92>
20005900:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
20005902:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
20005904:	683b      	ldr	r3, [r7, #0]
20005906:	7bdb      	ldrb	r3, [r3, #15]
20005908:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
2000590a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
2000590c:	683b      	ldr	r3, [r7, #0]
2000590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
20005910:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
20005912:	683b      	ldr	r3, [r7, #0]
20005914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
20005918:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
2000591a:	4313      	orrs	r3, r2
2000591c:	68fa      	ldr	r2, [r7, #12]
2000591e:	4313      	orrs	r3, r2
20005920:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
20005922:	687b      	ldr	r3, [r7, #4]
20005924:	681b      	ldr	r3, [r3, #0]
20005926:	68fa      	ldr	r2, [r7, #12]
20005928:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
2000592a:	687b      	ldr	r3, [r7, #4]
2000592c:	681b      	ldr	r3, [r3, #0]
2000592e:	681b      	ldr	r3, [r3, #0]
20005930:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20005932:	2001      	movs	r0, #1
20005934:	f7ff fdcc 	bl	200054d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
20005938:	687b      	ldr	r3, [r7, #4]
2000593a:	681b      	ldr	r3, [r3, #0]
2000593c:	68fa      	ldr	r2, [r7, #12]
2000593e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
20005940:	687b      	ldr	r3, [r7, #4]
20005942:	681b      	ldr	r3, [r3, #0]
20005944:	699b      	ldr	r3, [r3, #24]
20005946:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
20005948:	68fa      	ldr	r2, [r7, #12]
2000594a:	f64f 7341 	movw	r3, #65345	@ 0xff41
2000594e:	4013      	ands	r3, r2
20005950:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20005952:	683b      	ldr	r3, [r7, #0]
20005954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20005956:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
20005958:	683a      	ldr	r2, [r7, #0]
2000595a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
2000595e:	2a00      	cmp	r2, #0
20005960:	d101      	bne.n	20005966 <ETH_SetMACConfig+0xf6>
20005962:	2280      	movs	r2, #128	@ 0x80
20005964:	e000      	b.n	20005968 <ETH_SetMACConfig+0xf8>
20005966:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20005968:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
2000596a:	683b      	ldr	r3, [r7, #0]
2000596c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
2000596e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20005970:	683a      	ldr	r2, [r7, #0]
20005972:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
20005976:	2a01      	cmp	r2, #1
20005978:	d101      	bne.n	2000597e <ETH_SetMACConfig+0x10e>
2000597a:	2208      	movs	r2, #8
2000597c:	e000      	b.n	20005980 <ETH_SetMACConfig+0x110>
2000597e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
20005980:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
20005982:	683a      	ldr	r2, [r7, #0]
20005984:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
20005988:	2a01      	cmp	r2, #1
2000598a:	d101      	bne.n	20005990 <ETH_SetMACConfig+0x120>
2000598c:	2204      	movs	r2, #4
2000598e:	e000      	b.n	20005992 <ETH_SetMACConfig+0x122>
20005990:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20005992:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
20005994:	683a      	ldr	r2, [r7, #0]
20005996:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
2000599a:	2a01      	cmp	r2, #1
2000599c:	d101      	bne.n	200059a2 <ETH_SetMACConfig+0x132>
2000599e:	2202      	movs	r2, #2
200059a0:	e000      	b.n	200059a4 <ETH_SetMACConfig+0x134>
200059a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
200059a4:	4313      	orrs	r3, r2
200059a6:	68fa      	ldr	r2, [r7, #12]
200059a8:	4313      	orrs	r3, r2
200059aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
200059ac:	687b      	ldr	r3, [r7, #4]
200059ae:	681b      	ldr	r3, [r3, #0]
200059b0:	68fa      	ldr	r2, [r7, #12]
200059b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
200059b4:	687b      	ldr	r3, [r7, #4]
200059b6:	681b      	ldr	r3, [r3, #0]
200059b8:	699b      	ldr	r3, [r3, #24]
200059ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
200059bc:	2001      	movs	r0, #1
200059be:	f7ff fd87 	bl	200054d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
200059c2:	687b      	ldr	r3, [r7, #4]
200059c4:	681b      	ldr	r3, [r3, #0]
200059c6:	68fa      	ldr	r2, [r7, #12]
200059c8:	619a      	str	r2, [r3, #24]
}
200059ca:	bf00      	nop
200059cc:	3710      	adds	r7, #16
200059ce:	46bd      	mov	sp, r7
200059d0:	bd80      	pop	{r7, pc}
200059d2:	bf00      	nop
200059d4:	fd20810f 	.word	0xfd20810f

200059d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
200059d8:	b580      	push	{r7, lr}
200059da:	b084      	sub	sp, #16
200059dc:	af00      	add	r7, sp, #0
200059de:	6078      	str	r0, [r7, #4]
200059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
200059e2:	687b      	ldr	r3, [r7, #4]
200059e4:	681b      	ldr	r3, [r3, #0]
200059e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200059ea:	699b      	ldr	r3, [r3, #24]
200059ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
200059ee:	68fa      	ldr	r2, [r7, #12]
200059f0:	4b3d      	ldr	r3, [pc, #244]	@ (20005ae8 <ETH_SetDMAConfig+0x110>)
200059f2:	4013      	ands	r3, r2
200059f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
200059f6:	683b      	ldr	r3, [r7, #0]
200059f8:	7b1b      	ldrb	r3, [r3, #12]
200059fa:	2b00      	cmp	r3, #0
200059fc:	d102      	bne.n	20005a04 <ETH_SetDMAConfig+0x2c>
200059fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
20005a02:	e000      	b.n	20005a06 <ETH_SetDMAConfig+0x2e>
20005a04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
20005a06:	683b      	ldr	r3, [r7, #0]
20005a08:	7b5b      	ldrb	r3, [r3, #13]
20005a0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
20005a0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
20005a0e:	683a      	ldr	r2, [r7, #0]
20005a10:	7f52      	ldrb	r2, [r2, #29]
20005a12:	2a00      	cmp	r2, #0
20005a14:	d102      	bne.n	20005a1c <ETH_SetDMAConfig+0x44>
20005a16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
20005a1a:	e000      	b.n	20005a1e <ETH_SetDMAConfig+0x46>
20005a1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
20005a1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
20005a20:	683b      	ldr	r3, [r7, #0]
20005a22:	7b9b      	ldrb	r3, [r3, #14]
20005a24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
20005a26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
20005a28:	683b      	ldr	r3, [r7, #0]
20005a2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
20005a2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
20005a2e:	683b      	ldr	r3, [r7, #0]
20005a30:	7f1b      	ldrb	r3, [r3, #28]
20005a32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
20005a34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
20005a36:	683b      	ldr	r3, [r7, #0]
20005a38:	7f9b      	ldrb	r3, [r3, #30]
20005a3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
20005a3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
20005a3e:	683b      	ldr	r3, [r7, #0]
20005a40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
20005a42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
20005a44:	683b      	ldr	r3, [r7, #0]
20005a46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
20005a4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
20005a4c:	4313      	orrs	r3, r2
20005a4e:	68fa      	ldr	r2, [r7, #12]
20005a50:	4313      	orrs	r3, r2
20005a52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
20005a54:	687b      	ldr	r3, [r7, #4]
20005a56:	681b      	ldr	r3, [r3, #0]
20005a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005a5c:	461a      	mov	r2, r3
20005a5e:	68fb      	ldr	r3, [r7, #12]
20005a60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
20005a62:	687b      	ldr	r3, [r7, #4]
20005a64:	681b      	ldr	r3, [r3, #0]
20005a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005a6a:	699b      	ldr	r3, [r3, #24]
20005a6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20005a6e:	2001      	movs	r0, #1
20005a70:	f7ff fd2e 	bl	200054d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
20005a74:	687b      	ldr	r3, [r7, #4]
20005a76:	681b      	ldr	r3, [r3, #0]
20005a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005a7c:	461a      	mov	r2, r3
20005a7e:	68fb      	ldr	r3, [r7, #12]
20005a80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20005a82:	683b      	ldr	r3, [r7, #0]
20005a84:	791b      	ldrb	r3, [r3, #4]
20005a86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
20005a88:	683b      	ldr	r3, [r7, #0]
20005a8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20005a8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20005a8e:	683b      	ldr	r3, [r7, #0]
20005a90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
20005a92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
20005a94:	683b      	ldr	r3, [r7, #0]
20005a96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20005a98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
20005a9a:	683b      	ldr	r3, [r7, #0]
20005a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
20005aa0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
20005aa2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
20005aa4:	683b      	ldr	r3, [r7, #0]
20005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20005aa8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
20005aaa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
20005aac:	683b      	ldr	r3, [r7, #0]
20005aae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
20005ab0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20005ab2:	687a      	ldr	r2, [r7, #4]
20005ab4:	6812      	ldr	r2, [r2, #0]
20005ab6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
20005aba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
20005abe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
20005ac0:	687b      	ldr	r3, [r7, #4]
20005ac2:	681b      	ldr	r3, [r3, #0]
20005ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005ac8:	681b      	ldr	r3, [r3, #0]
20005aca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20005acc:	2001      	movs	r0, #1
20005ace:	f7ff fcff 	bl	200054d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
20005ad2:	687b      	ldr	r3, [r7, #4]
20005ad4:	681b      	ldr	r3, [r3, #0]
20005ad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005ada:	461a      	mov	r2, r3
20005adc:	68fb      	ldr	r3, [r7, #12]
20005ade:	6013      	str	r3, [r2, #0]
}
20005ae0:	bf00      	nop
20005ae2:	3710      	adds	r7, #16
20005ae4:	46bd      	mov	sp, r7
20005ae6:	bd80      	pop	{r7, pc}
20005ae8:	f8de3f23 	.word	0xf8de3f23

20005aec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
20005aec:	b580      	push	{r7, lr}
20005aee:	b0a6      	sub	sp, #152	@ 0x98
20005af0:	af00      	add	r7, sp, #0
20005af2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
20005af4:	2301      	movs	r3, #1
20005af6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
20005afa:	2301      	movs	r3, #1
20005afc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
20005b00:	2300      	movs	r3, #0
20005b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
20005b04:	2300      	movs	r3, #0
20005b06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
20005b0a:	2301      	movs	r3, #1
20005b0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
20005b10:	2300      	movs	r3, #0
20005b12:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
20005b16:	2301      	movs	r3, #1
20005b18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
20005b1c:	2301      	movs	r3, #1
20005b1e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
20005b22:	2300      	movs	r3, #0
20005b24:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
20005b28:	2300      	movs	r3, #0
20005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
20005b2e:	2300      	movs	r3, #0
20005b30:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
20005b32:	2300      	movs	r3, #0
20005b34:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
20005b38:	2300      	movs	r3, #0
20005b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
20005b3c:	2300      	movs	r3, #0
20005b3e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
20005b42:	2300      	movs	r3, #0
20005b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
20005b48:	2300      	movs	r3, #0
20005b4a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
20005b4e:	2300      	movs	r3, #0
20005b50:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
20005b54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
20005b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
20005b5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20005b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
20005b60:	2300      	movs	r3, #0
20005b62:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
20005b66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
20005b6a:	4619      	mov	r1, r3
20005b6c:	6878      	ldr	r0, [r7, #4]
20005b6e:	f7ff fe7f 	bl	20005870 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
20005b72:	2301      	movs	r3, #1
20005b74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
20005b76:	2301      	movs	r3, #1
20005b78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
20005b7a:	2301      	movs	r3, #1
20005b7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
20005b80:	2301      	movs	r3, #1
20005b82:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
20005b84:	2300      	movs	r3, #0
20005b86:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
20005b88:	2300      	movs	r3, #0
20005b8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
20005b8e:	2300      	movs	r3, #0
20005b90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
20005b94:	2300      	movs	r3, #0
20005b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
20005b98:	2301      	movs	r3, #1
20005b9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
20005b9e:	2301      	movs	r3, #1
20005ba0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
20005ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20005ba6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
20005ba8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20005bac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
20005bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20005bb2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
20005bb4:	2301      	movs	r3, #1
20005bb6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
20005bba:	2300      	movs	r3, #0
20005bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
20005bbe:	2300      	movs	r3, #0
20005bc0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
20005bc2:	f107 0308 	add.w	r3, r7, #8
20005bc6:	4619      	mov	r1, r3
20005bc8:	6878      	ldr	r0, [r7, #4]
20005bca:	f7ff ff05 	bl	200059d8 <ETH_SetDMAConfig>
}
20005bce:	bf00      	nop
20005bd0:	3798      	adds	r7, #152	@ 0x98
20005bd2:	46bd      	mov	sp, r7
20005bd4:	bd80      	pop	{r7, pc}
	...

20005bd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
20005bd8:	b480      	push	{r7}
20005bda:	b087      	sub	sp, #28
20005bdc:	af00      	add	r7, sp, #0
20005bde:	60f8      	str	r0, [r7, #12]
20005be0:	60b9      	str	r1, [r7, #8]
20005be2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
20005be4:	687b      	ldr	r3, [r7, #4]
20005be6:	3305      	adds	r3, #5
20005be8:	781b      	ldrb	r3, [r3, #0]
20005bea:	021b      	lsls	r3, r3, #8
20005bec:	687a      	ldr	r2, [r7, #4]
20005bee:	3204      	adds	r2, #4
20005bf0:	7812      	ldrb	r2, [r2, #0]
20005bf2:	4313      	orrs	r3, r2
20005bf4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
20005bf6:	68ba      	ldr	r2, [r7, #8]
20005bf8:	4b11      	ldr	r3, [pc, #68]	@ (20005c40 <ETH_MACAddressConfig+0x68>)
20005bfa:	4413      	add	r3, r2
20005bfc:	461a      	mov	r2, r3
20005bfe:	697b      	ldr	r3, [r7, #20]
20005c00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
20005c02:	687b      	ldr	r3, [r7, #4]
20005c04:	3303      	adds	r3, #3
20005c06:	781b      	ldrb	r3, [r3, #0]
20005c08:	061a      	lsls	r2, r3, #24
20005c0a:	687b      	ldr	r3, [r7, #4]
20005c0c:	3302      	adds	r3, #2
20005c0e:	781b      	ldrb	r3, [r3, #0]
20005c10:	041b      	lsls	r3, r3, #16
20005c12:	431a      	orrs	r2, r3
20005c14:	687b      	ldr	r3, [r7, #4]
20005c16:	3301      	adds	r3, #1
20005c18:	781b      	ldrb	r3, [r3, #0]
20005c1a:	021b      	lsls	r3, r3, #8
20005c1c:	4313      	orrs	r3, r2
20005c1e:	687a      	ldr	r2, [r7, #4]
20005c20:	7812      	ldrb	r2, [r2, #0]
20005c22:	4313      	orrs	r3, r2
20005c24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
20005c26:	68ba      	ldr	r2, [r7, #8]
20005c28:	4b06      	ldr	r3, [pc, #24]	@ (20005c44 <ETH_MACAddressConfig+0x6c>)
20005c2a:	4413      	add	r3, r2
20005c2c:	461a      	mov	r2, r3
20005c2e:	697b      	ldr	r3, [r7, #20]
20005c30:	6013      	str	r3, [r2, #0]
}
20005c32:	bf00      	nop
20005c34:	371c      	adds	r7, #28
20005c36:	46bd      	mov	sp, r7
20005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c3c:	4770      	bx	lr
20005c3e:	bf00      	nop
20005c40:	40028040 	.word	0x40028040
20005c44:	40028044 	.word	0x40028044

20005c48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
20005c48:	b480      	push	{r7}
20005c4a:	b085      	sub	sp, #20
20005c4c:	af00      	add	r7, sp, #0
20005c4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20005c50:	2300      	movs	r3, #0
20005c52:	60fb      	str	r3, [r7, #12]
20005c54:	e03e      	b.n	20005cd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
20005c56:	687b      	ldr	r3, [r7, #4]
20005c58:	68d9      	ldr	r1, [r3, #12]
20005c5a:	68fa      	ldr	r2, [r7, #12]
20005c5c:	4613      	mov	r3, r2
20005c5e:	009b      	lsls	r3, r3, #2
20005c60:	4413      	add	r3, r2
20005c62:	00db      	lsls	r3, r3, #3
20005c64:	440b      	add	r3, r1
20005c66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
20005c68:	68bb      	ldr	r3, [r7, #8]
20005c6a:	2200      	movs	r2, #0
20005c6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
20005c6e:	68bb      	ldr	r3, [r7, #8]
20005c70:	2200      	movs	r2, #0
20005c72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
20005c74:	68bb      	ldr	r3, [r7, #8]
20005c76:	2200      	movs	r2, #0
20005c78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
20005c7a:	68bb      	ldr	r3, [r7, #8]
20005c7c:	2200      	movs	r2, #0
20005c7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
20005c80:	68b9      	ldr	r1, [r7, #8]
20005c82:	687b      	ldr	r3, [r7, #4]
20005c84:	68fa      	ldr	r2, [r7, #12]
20005c86:	3206      	adds	r2, #6
20005c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
20005c8c:	68bb      	ldr	r3, [r7, #8]
20005c8e:	681b      	ldr	r3, [r3, #0]
20005c90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20005c94:	68bb      	ldr	r3, [r7, #8]
20005c96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
20005c98:	68fb      	ldr	r3, [r7, #12]
20005c9a:	2b02      	cmp	r3, #2
20005c9c:	d80c      	bhi.n	20005cb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
20005c9e:	687b      	ldr	r3, [r7, #4]
20005ca0:	68d9      	ldr	r1, [r3, #12]
20005ca2:	68fb      	ldr	r3, [r7, #12]
20005ca4:	1c5a      	adds	r2, r3, #1
20005ca6:	4613      	mov	r3, r2
20005ca8:	009b      	lsls	r3, r3, #2
20005caa:	4413      	add	r3, r2
20005cac:	00db      	lsls	r3, r3, #3
20005cae:	440b      	add	r3, r1
20005cb0:	461a      	mov	r2, r3
20005cb2:	68bb      	ldr	r3, [r7, #8]
20005cb4:	60da      	str	r2, [r3, #12]
20005cb6:	e004      	b.n	20005cc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
20005cb8:	687b      	ldr	r3, [r7, #4]
20005cba:	68db      	ldr	r3, [r3, #12]
20005cbc:	461a      	mov	r2, r3
20005cbe:	68bb      	ldr	r3, [r7, #8]
20005cc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
20005cc2:	68bb      	ldr	r3, [r7, #8]
20005cc4:	681b      	ldr	r3, [r3, #0]
20005cc6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
20005cca:	68bb      	ldr	r3, [r7, #8]
20005ccc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20005cce:	68fb      	ldr	r3, [r7, #12]
20005cd0:	3301      	adds	r3, #1
20005cd2:	60fb      	str	r3, [r7, #12]
20005cd4:	68fb      	ldr	r3, [r7, #12]
20005cd6:	2b03      	cmp	r3, #3
20005cd8:	d9bd      	bls.n	20005c56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
20005cda:	687b      	ldr	r3, [r7, #4]
20005cdc:	2200      	movs	r2, #0
20005cde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
20005ce0:	687b      	ldr	r3, [r7, #4]
20005ce2:	68da      	ldr	r2, [r3, #12]
20005ce4:	687b      	ldr	r3, [r7, #4]
20005ce6:	681b      	ldr	r3, [r3, #0]
20005ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005cec:	611a      	str	r2, [r3, #16]
}
20005cee:	bf00      	nop
20005cf0:	3714      	adds	r7, #20
20005cf2:	46bd      	mov	sp, r7
20005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
20005cf8:	4770      	bx	lr

20005cfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
20005cfa:	b480      	push	{r7}
20005cfc:	b085      	sub	sp, #20
20005cfe:	af00      	add	r7, sp, #0
20005d00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20005d02:	2300      	movs	r3, #0
20005d04:	60fb      	str	r3, [r7, #12]
20005d06:	e048      	b.n	20005d9a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
20005d08:	687b      	ldr	r3, [r7, #4]
20005d0a:	6919      	ldr	r1, [r3, #16]
20005d0c:	68fa      	ldr	r2, [r7, #12]
20005d0e:	4613      	mov	r3, r2
20005d10:	009b      	lsls	r3, r3, #2
20005d12:	4413      	add	r3, r2
20005d14:	00db      	lsls	r3, r3, #3
20005d16:	440b      	add	r3, r1
20005d18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
20005d1a:	68bb      	ldr	r3, [r7, #8]
20005d1c:	2200      	movs	r2, #0
20005d1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
20005d20:	68bb      	ldr	r3, [r7, #8]
20005d22:	2200      	movs	r2, #0
20005d24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
20005d26:	68bb      	ldr	r3, [r7, #8]
20005d28:	2200      	movs	r2, #0
20005d2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
20005d2c:	68bb      	ldr	r3, [r7, #8]
20005d2e:	2200      	movs	r2, #0
20005d30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
20005d32:	68bb      	ldr	r3, [r7, #8]
20005d34:	2200      	movs	r2, #0
20005d36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
20005d38:	68bb      	ldr	r3, [r7, #8]
20005d3a:	2200      	movs	r2, #0
20005d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
20005d3e:	68bb      	ldr	r3, [r7, #8]
20005d40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
20005d44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
20005d46:	687b      	ldr	r3, [r7, #4]
20005d48:	695b      	ldr	r3, [r3, #20]
20005d4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
20005d4e:	68bb      	ldr	r3, [r7, #8]
20005d50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
20005d52:	68bb      	ldr	r3, [r7, #8]
20005d54:	685b      	ldr	r3, [r3, #4]
20005d56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
20005d5a:	68bb      	ldr	r3, [r7, #8]
20005d5c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
20005d5e:	68b9      	ldr	r1, [r7, #8]
20005d60:	687b      	ldr	r3, [r7, #4]
20005d62:	68fa      	ldr	r2, [r7, #12]
20005d64:	3212      	adds	r2, #18
20005d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
20005d6a:	68fb      	ldr	r3, [r7, #12]
20005d6c:	2b02      	cmp	r3, #2
20005d6e:	d80c      	bhi.n	20005d8a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
20005d70:	687b      	ldr	r3, [r7, #4]
20005d72:	6919      	ldr	r1, [r3, #16]
20005d74:	68fb      	ldr	r3, [r7, #12]
20005d76:	1c5a      	adds	r2, r3, #1
20005d78:	4613      	mov	r3, r2
20005d7a:	009b      	lsls	r3, r3, #2
20005d7c:	4413      	add	r3, r2
20005d7e:	00db      	lsls	r3, r3, #3
20005d80:	440b      	add	r3, r1
20005d82:	461a      	mov	r2, r3
20005d84:	68bb      	ldr	r3, [r7, #8]
20005d86:	60da      	str	r2, [r3, #12]
20005d88:	e004      	b.n	20005d94 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
20005d8a:	687b      	ldr	r3, [r7, #4]
20005d8c:	691b      	ldr	r3, [r3, #16]
20005d8e:	461a      	mov	r2, r3
20005d90:	68bb      	ldr	r3, [r7, #8]
20005d92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20005d94:	68fb      	ldr	r3, [r7, #12]
20005d96:	3301      	adds	r3, #1
20005d98:	60fb      	str	r3, [r7, #12]
20005d9a:	68fb      	ldr	r3, [r7, #12]
20005d9c:	2b03      	cmp	r3, #3
20005d9e:	d9b3      	bls.n	20005d08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
20005da0:	687b      	ldr	r3, [r7, #4]
20005da2:	2200      	movs	r2, #0
20005da4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
20005da6:	687b      	ldr	r3, [r7, #4]
20005da8:	2200      	movs	r2, #0
20005daa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
20005dac:	687b      	ldr	r3, [r7, #4]
20005dae:	2200      	movs	r2, #0
20005db0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
20005db2:	687b      	ldr	r3, [r7, #4]
20005db4:	2200      	movs	r2, #0
20005db6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
20005db8:	687b      	ldr	r3, [r7, #4]
20005dba:	2200      	movs	r2, #0
20005dbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
20005dbe:	687b      	ldr	r3, [r7, #4]
20005dc0:	691a      	ldr	r2, [r3, #16]
20005dc2:	687b      	ldr	r3, [r7, #4]
20005dc4:	681b      	ldr	r3, [r3, #0]
20005dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20005dca:	60da      	str	r2, [r3, #12]
}
20005dcc:	bf00      	nop
20005dce:	3714      	adds	r7, #20
20005dd0:	46bd      	mov	sp, r7
20005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dd6:	4770      	bx	lr

20005dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20005dd8:	b480      	push	{r7}
20005dda:	b089      	sub	sp, #36	@ 0x24
20005ddc:	af00      	add	r7, sp, #0
20005dde:	6078      	str	r0, [r7, #4]
20005de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
20005de2:	2300      	movs	r3, #0
20005de4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
20005de6:	2300      	movs	r3, #0
20005de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
20005dea:	2300      	movs	r3, #0
20005dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
20005dee:	2300      	movs	r3, #0
20005df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
20005df2:	2300      	movs	r3, #0
20005df4:	61fb      	str	r3, [r7, #28]
20005df6:	e175      	b.n	200060e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
20005df8:	2201      	movs	r2, #1
20005dfa:	69fb      	ldr	r3, [r7, #28]
20005dfc:	fa02 f303 	lsl.w	r3, r2, r3
20005e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20005e02:	683b      	ldr	r3, [r7, #0]
20005e04:	681b      	ldr	r3, [r3, #0]
20005e06:	697a      	ldr	r2, [r7, #20]
20005e08:	4013      	ands	r3, r2
20005e0a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
20005e0c:	693a      	ldr	r2, [r7, #16]
20005e0e:	697b      	ldr	r3, [r7, #20]
20005e10:	429a      	cmp	r2, r3
20005e12:	f040 8164 	bne.w	200060de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
20005e16:	683b      	ldr	r3, [r7, #0]
20005e18:	685b      	ldr	r3, [r3, #4]
20005e1a:	f003 0303 	and.w	r3, r3, #3
20005e1e:	2b01      	cmp	r3, #1
20005e20:	d005      	beq.n	20005e2e <HAL_GPIO_Init+0x56>
20005e22:	683b      	ldr	r3, [r7, #0]
20005e24:	685b      	ldr	r3, [r3, #4]
20005e26:	f003 0303 	and.w	r3, r3, #3
20005e2a:	2b02      	cmp	r3, #2
20005e2c:	d130      	bne.n	20005e90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
20005e2e:	687b      	ldr	r3, [r7, #4]
20005e30:	689b      	ldr	r3, [r3, #8]
20005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
20005e34:	69fb      	ldr	r3, [r7, #28]
20005e36:	005b      	lsls	r3, r3, #1
20005e38:	2203      	movs	r2, #3
20005e3a:	fa02 f303 	lsl.w	r3, r2, r3
20005e3e:	43db      	mvns	r3, r3
20005e40:	69ba      	ldr	r2, [r7, #24]
20005e42:	4013      	ands	r3, r2
20005e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
20005e46:	683b      	ldr	r3, [r7, #0]
20005e48:	68da      	ldr	r2, [r3, #12]
20005e4a:	69fb      	ldr	r3, [r7, #28]
20005e4c:	005b      	lsls	r3, r3, #1
20005e4e:	fa02 f303 	lsl.w	r3, r2, r3
20005e52:	69ba      	ldr	r2, [r7, #24]
20005e54:	4313      	orrs	r3, r2
20005e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20005e58:	687b      	ldr	r3, [r7, #4]
20005e5a:	69ba      	ldr	r2, [r7, #24]
20005e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20005e5e:	687b      	ldr	r3, [r7, #4]
20005e60:	685b      	ldr	r3, [r3, #4]
20005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20005e64:	2201      	movs	r2, #1
20005e66:	69fb      	ldr	r3, [r7, #28]
20005e68:	fa02 f303 	lsl.w	r3, r2, r3
20005e6c:	43db      	mvns	r3, r3
20005e6e:	69ba      	ldr	r2, [r7, #24]
20005e70:	4013      	ands	r3, r2
20005e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20005e74:	683b      	ldr	r3, [r7, #0]
20005e76:	685b      	ldr	r3, [r3, #4]
20005e78:	091b      	lsrs	r3, r3, #4
20005e7a:	f003 0201 	and.w	r2, r3, #1
20005e7e:	69fb      	ldr	r3, [r7, #28]
20005e80:	fa02 f303 	lsl.w	r3, r2, r3
20005e84:	69ba      	ldr	r2, [r7, #24]
20005e86:	4313      	orrs	r3, r2
20005e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20005e8a:	687b      	ldr	r3, [r7, #4]
20005e8c:	69ba      	ldr	r2, [r7, #24]
20005e8e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20005e90:	683b      	ldr	r3, [r7, #0]
20005e92:	685b      	ldr	r3, [r3, #4]
20005e94:	f003 0303 	and.w	r3, r3, #3
20005e98:	2b03      	cmp	r3, #3
20005e9a:	d017      	beq.n	20005ecc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20005e9c:	687b      	ldr	r3, [r7, #4]
20005e9e:	68db      	ldr	r3, [r3, #12]
20005ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20005ea2:	69fb      	ldr	r3, [r7, #28]
20005ea4:	005b      	lsls	r3, r3, #1
20005ea6:	2203      	movs	r2, #3
20005ea8:	fa02 f303 	lsl.w	r3, r2, r3
20005eac:	43db      	mvns	r3, r3
20005eae:	69ba      	ldr	r2, [r7, #24]
20005eb0:	4013      	ands	r3, r2
20005eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
20005eb4:	683b      	ldr	r3, [r7, #0]
20005eb6:	689a      	ldr	r2, [r3, #8]
20005eb8:	69fb      	ldr	r3, [r7, #28]
20005eba:	005b      	lsls	r3, r3, #1
20005ebc:	fa02 f303 	lsl.w	r3, r2, r3
20005ec0:	69ba      	ldr	r2, [r7, #24]
20005ec2:	4313      	orrs	r3, r2
20005ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20005ec6:	687b      	ldr	r3, [r7, #4]
20005ec8:	69ba      	ldr	r2, [r7, #24]
20005eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20005ecc:	683b      	ldr	r3, [r7, #0]
20005ece:	685b      	ldr	r3, [r3, #4]
20005ed0:	f003 0303 	and.w	r3, r3, #3
20005ed4:	2b02      	cmp	r3, #2
20005ed6:	d123      	bne.n	20005f20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
20005ed8:	69fb      	ldr	r3, [r7, #28]
20005eda:	08da      	lsrs	r2, r3, #3
20005edc:	687b      	ldr	r3, [r7, #4]
20005ede:	3208      	adds	r2, #8
20005ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20005ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20005ee6:	69fb      	ldr	r3, [r7, #28]
20005ee8:	f003 0307 	and.w	r3, r3, #7
20005eec:	009b      	lsls	r3, r3, #2
20005eee:	220f      	movs	r2, #15
20005ef0:	fa02 f303 	lsl.w	r3, r2, r3
20005ef4:	43db      	mvns	r3, r3
20005ef6:	69ba      	ldr	r2, [r7, #24]
20005ef8:	4013      	ands	r3, r2
20005efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
20005efc:	683b      	ldr	r3, [r7, #0]
20005efe:	691a      	ldr	r2, [r3, #16]
20005f00:	69fb      	ldr	r3, [r7, #28]
20005f02:	f003 0307 	and.w	r3, r3, #7
20005f06:	009b      	lsls	r3, r3, #2
20005f08:	fa02 f303 	lsl.w	r3, r2, r3
20005f0c:	69ba      	ldr	r2, [r7, #24]
20005f0e:	4313      	orrs	r3, r2
20005f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
20005f12:	69fb      	ldr	r3, [r7, #28]
20005f14:	08da      	lsrs	r2, r3, #3
20005f16:	687b      	ldr	r3, [r7, #4]
20005f18:	3208      	adds	r2, #8
20005f1a:	69b9      	ldr	r1, [r7, #24]
20005f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20005f20:	687b      	ldr	r3, [r7, #4]
20005f22:	681b      	ldr	r3, [r3, #0]
20005f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
20005f26:	69fb      	ldr	r3, [r7, #28]
20005f28:	005b      	lsls	r3, r3, #1
20005f2a:	2203      	movs	r2, #3
20005f2c:	fa02 f303 	lsl.w	r3, r2, r3
20005f30:	43db      	mvns	r3, r3
20005f32:	69ba      	ldr	r2, [r7, #24]
20005f34:	4013      	ands	r3, r2
20005f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20005f38:	683b      	ldr	r3, [r7, #0]
20005f3a:	685b      	ldr	r3, [r3, #4]
20005f3c:	f003 0203 	and.w	r2, r3, #3
20005f40:	69fb      	ldr	r3, [r7, #28]
20005f42:	005b      	lsls	r3, r3, #1
20005f44:	fa02 f303 	lsl.w	r3, r2, r3
20005f48:	69ba      	ldr	r2, [r7, #24]
20005f4a:	4313      	orrs	r3, r2
20005f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20005f4e:	687b      	ldr	r3, [r7, #4]
20005f50:	69ba      	ldr	r2, [r7, #24]
20005f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
20005f54:	683b      	ldr	r3, [r7, #0]
20005f56:	685b      	ldr	r3, [r3, #4]
20005f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20005f5c:	2b00      	cmp	r3, #0
20005f5e:	f000 80be 	beq.w	200060de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20005f62:	4b66      	ldr	r3, [pc, #408]	@ (200060fc <HAL_GPIO_Init+0x324>)
20005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005f66:	4a65      	ldr	r2, [pc, #404]	@ (200060fc <HAL_GPIO_Init+0x324>)
20005f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20005f6c:	6453      	str	r3, [r2, #68]	@ 0x44
20005f6e:	4b63      	ldr	r3, [pc, #396]	@ (200060fc <HAL_GPIO_Init+0x324>)
20005f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20005f76:	60fb      	str	r3, [r7, #12]
20005f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
20005f7a:	4a61      	ldr	r2, [pc, #388]	@ (20006100 <HAL_GPIO_Init+0x328>)
20005f7c:	69fb      	ldr	r3, [r7, #28]
20005f7e:	089b      	lsrs	r3, r3, #2
20005f80:	3302      	adds	r3, #2
20005f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
20005f88:	69fb      	ldr	r3, [r7, #28]
20005f8a:	f003 0303 	and.w	r3, r3, #3
20005f8e:	009b      	lsls	r3, r3, #2
20005f90:	220f      	movs	r2, #15
20005f92:	fa02 f303 	lsl.w	r3, r2, r3
20005f96:	43db      	mvns	r3, r3
20005f98:	69ba      	ldr	r2, [r7, #24]
20005f9a:	4013      	ands	r3, r2
20005f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
20005f9e:	687b      	ldr	r3, [r7, #4]
20005fa0:	4a58      	ldr	r2, [pc, #352]	@ (20006104 <HAL_GPIO_Init+0x32c>)
20005fa2:	4293      	cmp	r3, r2
20005fa4:	d037      	beq.n	20006016 <HAL_GPIO_Init+0x23e>
20005fa6:	687b      	ldr	r3, [r7, #4]
20005fa8:	4a57      	ldr	r2, [pc, #348]	@ (20006108 <HAL_GPIO_Init+0x330>)
20005faa:	4293      	cmp	r3, r2
20005fac:	d031      	beq.n	20006012 <HAL_GPIO_Init+0x23a>
20005fae:	687b      	ldr	r3, [r7, #4]
20005fb0:	4a56      	ldr	r2, [pc, #344]	@ (2000610c <HAL_GPIO_Init+0x334>)
20005fb2:	4293      	cmp	r3, r2
20005fb4:	d02b      	beq.n	2000600e <HAL_GPIO_Init+0x236>
20005fb6:	687b      	ldr	r3, [r7, #4]
20005fb8:	4a55      	ldr	r2, [pc, #340]	@ (20006110 <HAL_GPIO_Init+0x338>)
20005fba:	4293      	cmp	r3, r2
20005fbc:	d025      	beq.n	2000600a <HAL_GPIO_Init+0x232>
20005fbe:	687b      	ldr	r3, [r7, #4]
20005fc0:	4a54      	ldr	r2, [pc, #336]	@ (20006114 <HAL_GPIO_Init+0x33c>)
20005fc2:	4293      	cmp	r3, r2
20005fc4:	d01f      	beq.n	20006006 <HAL_GPIO_Init+0x22e>
20005fc6:	687b      	ldr	r3, [r7, #4]
20005fc8:	4a53      	ldr	r2, [pc, #332]	@ (20006118 <HAL_GPIO_Init+0x340>)
20005fca:	4293      	cmp	r3, r2
20005fcc:	d019      	beq.n	20006002 <HAL_GPIO_Init+0x22a>
20005fce:	687b      	ldr	r3, [r7, #4]
20005fd0:	4a52      	ldr	r2, [pc, #328]	@ (2000611c <HAL_GPIO_Init+0x344>)
20005fd2:	4293      	cmp	r3, r2
20005fd4:	d013      	beq.n	20005ffe <HAL_GPIO_Init+0x226>
20005fd6:	687b      	ldr	r3, [r7, #4]
20005fd8:	4a51      	ldr	r2, [pc, #324]	@ (20006120 <HAL_GPIO_Init+0x348>)
20005fda:	4293      	cmp	r3, r2
20005fdc:	d00d      	beq.n	20005ffa <HAL_GPIO_Init+0x222>
20005fde:	687b      	ldr	r3, [r7, #4]
20005fe0:	4a50      	ldr	r2, [pc, #320]	@ (20006124 <HAL_GPIO_Init+0x34c>)
20005fe2:	4293      	cmp	r3, r2
20005fe4:	d007      	beq.n	20005ff6 <HAL_GPIO_Init+0x21e>
20005fe6:	687b      	ldr	r3, [r7, #4]
20005fe8:	4a4f      	ldr	r2, [pc, #316]	@ (20006128 <HAL_GPIO_Init+0x350>)
20005fea:	4293      	cmp	r3, r2
20005fec:	d101      	bne.n	20005ff2 <HAL_GPIO_Init+0x21a>
20005fee:	2309      	movs	r3, #9
20005ff0:	e012      	b.n	20006018 <HAL_GPIO_Init+0x240>
20005ff2:	230a      	movs	r3, #10
20005ff4:	e010      	b.n	20006018 <HAL_GPIO_Init+0x240>
20005ff6:	2308      	movs	r3, #8
20005ff8:	e00e      	b.n	20006018 <HAL_GPIO_Init+0x240>
20005ffa:	2307      	movs	r3, #7
20005ffc:	e00c      	b.n	20006018 <HAL_GPIO_Init+0x240>
20005ffe:	2306      	movs	r3, #6
20006000:	e00a      	b.n	20006018 <HAL_GPIO_Init+0x240>
20006002:	2305      	movs	r3, #5
20006004:	e008      	b.n	20006018 <HAL_GPIO_Init+0x240>
20006006:	2304      	movs	r3, #4
20006008:	e006      	b.n	20006018 <HAL_GPIO_Init+0x240>
2000600a:	2303      	movs	r3, #3
2000600c:	e004      	b.n	20006018 <HAL_GPIO_Init+0x240>
2000600e:	2302      	movs	r3, #2
20006010:	e002      	b.n	20006018 <HAL_GPIO_Init+0x240>
20006012:	2301      	movs	r3, #1
20006014:	e000      	b.n	20006018 <HAL_GPIO_Init+0x240>
20006016:	2300      	movs	r3, #0
20006018:	69fa      	ldr	r2, [r7, #28]
2000601a:	f002 0203 	and.w	r2, r2, #3
2000601e:	0092      	lsls	r2, r2, #2
20006020:	4093      	lsls	r3, r2
20006022:	69ba      	ldr	r2, [r7, #24]
20006024:	4313      	orrs	r3, r2
20006026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
20006028:	4935      	ldr	r1, [pc, #212]	@ (20006100 <HAL_GPIO_Init+0x328>)
2000602a:	69fb      	ldr	r3, [r7, #28]
2000602c:	089b      	lsrs	r3, r3, #2
2000602e:	3302      	adds	r3, #2
20006030:	69ba      	ldr	r2, [r7, #24]
20006032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20006036:	4b3d      	ldr	r3, [pc, #244]	@ (2000612c <HAL_GPIO_Init+0x354>)
20006038:	689b      	ldr	r3, [r3, #8]
2000603a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000603c:	693b      	ldr	r3, [r7, #16]
2000603e:	43db      	mvns	r3, r3
20006040:	69ba      	ldr	r2, [r7, #24]
20006042:	4013      	ands	r3, r2
20006044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
20006046:	683b      	ldr	r3, [r7, #0]
20006048:	685b      	ldr	r3, [r3, #4]
2000604a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2000604e:	2b00      	cmp	r3, #0
20006050:	d003      	beq.n	2000605a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
20006052:	69ba      	ldr	r2, [r7, #24]
20006054:	693b      	ldr	r3, [r7, #16]
20006056:	4313      	orrs	r3, r2
20006058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000605a:	4a34      	ldr	r2, [pc, #208]	@ (2000612c <HAL_GPIO_Init+0x354>)
2000605c:	69bb      	ldr	r3, [r7, #24]
2000605e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20006060:	4b32      	ldr	r3, [pc, #200]	@ (2000612c <HAL_GPIO_Init+0x354>)
20006062:	68db      	ldr	r3, [r3, #12]
20006064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20006066:	693b      	ldr	r3, [r7, #16]
20006068:	43db      	mvns	r3, r3
2000606a:	69ba      	ldr	r2, [r7, #24]
2000606c:	4013      	ands	r3, r2
2000606e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
20006070:	683b      	ldr	r3, [r7, #0]
20006072:	685b      	ldr	r3, [r3, #4]
20006074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20006078:	2b00      	cmp	r3, #0
2000607a:	d003      	beq.n	20006084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
2000607c:	69ba      	ldr	r2, [r7, #24]
2000607e:	693b      	ldr	r3, [r7, #16]
20006080:	4313      	orrs	r3, r2
20006082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20006084:	4a29      	ldr	r2, [pc, #164]	@ (2000612c <HAL_GPIO_Init+0x354>)
20006086:	69bb      	ldr	r3, [r7, #24]
20006088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
2000608a:	4b28      	ldr	r3, [pc, #160]	@ (2000612c <HAL_GPIO_Init+0x354>)
2000608c:	685b      	ldr	r3, [r3, #4]
2000608e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20006090:	693b      	ldr	r3, [r7, #16]
20006092:	43db      	mvns	r3, r3
20006094:	69ba      	ldr	r2, [r7, #24]
20006096:	4013      	ands	r3, r2
20006098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
2000609a:	683b      	ldr	r3, [r7, #0]
2000609c:	685b      	ldr	r3, [r3, #4]
2000609e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200060a2:	2b00      	cmp	r3, #0
200060a4:	d003      	beq.n	200060ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
200060a6:	69ba      	ldr	r2, [r7, #24]
200060a8:	693b      	ldr	r3, [r7, #16]
200060aa:	4313      	orrs	r3, r2
200060ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
200060ae:	4a1f      	ldr	r2, [pc, #124]	@ (2000612c <HAL_GPIO_Init+0x354>)
200060b0:	69bb      	ldr	r3, [r7, #24]
200060b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200060b4:	4b1d      	ldr	r3, [pc, #116]	@ (2000612c <HAL_GPIO_Init+0x354>)
200060b6:	681b      	ldr	r3, [r3, #0]
200060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200060ba:	693b      	ldr	r3, [r7, #16]
200060bc:	43db      	mvns	r3, r3
200060be:	69ba      	ldr	r2, [r7, #24]
200060c0:	4013      	ands	r3, r2
200060c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
200060c4:	683b      	ldr	r3, [r7, #0]
200060c6:	685b      	ldr	r3, [r3, #4]
200060c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200060cc:	2b00      	cmp	r3, #0
200060ce:	d003      	beq.n	200060d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
200060d0:	69ba      	ldr	r2, [r7, #24]
200060d2:	693b      	ldr	r3, [r7, #16]
200060d4:	4313      	orrs	r3, r2
200060d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
200060d8:	4a14      	ldr	r2, [pc, #80]	@ (2000612c <HAL_GPIO_Init+0x354>)
200060da:	69bb      	ldr	r3, [r7, #24]
200060dc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
200060de:	69fb      	ldr	r3, [r7, #28]
200060e0:	3301      	adds	r3, #1
200060e2:	61fb      	str	r3, [r7, #28]
200060e4:	69fb      	ldr	r3, [r7, #28]
200060e6:	2b0f      	cmp	r3, #15
200060e8:	f67f ae86 	bls.w	20005df8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
200060ec:	bf00      	nop
200060ee:	bf00      	nop
200060f0:	3724      	adds	r7, #36	@ 0x24
200060f2:	46bd      	mov	sp, r7
200060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200060f8:	4770      	bx	lr
200060fa:	bf00      	nop
200060fc:	40023800 	.word	0x40023800
20006100:	40013800 	.word	0x40013800
20006104:	40020000 	.word	0x40020000
20006108:	40020400 	.word	0x40020400
2000610c:	40020800 	.word	0x40020800
20006110:	40020c00 	.word	0x40020c00
20006114:	40021000 	.word	0x40021000
20006118:	40021400 	.word	0x40021400
2000611c:	40021800 	.word	0x40021800
20006120:	40021c00 	.word	0x40021c00
20006124:	40022000 	.word	0x40022000
20006128:	40022400 	.word	0x40022400
2000612c:	40013c00 	.word	0x40013c00

20006130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
20006130:	b480      	push	{r7}
20006132:	b085      	sub	sp, #20
20006134:	af00      	add	r7, sp, #0
20006136:	6078      	str	r0, [r7, #4]
20006138:	460b      	mov	r3, r1
2000613a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
2000613c:	687b      	ldr	r3, [r7, #4]
2000613e:	691a      	ldr	r2, [r3, #16]
20006140:	887b      	ldrh	r3, [r7, #2]
20006142:	4013      	ands	r3, r2
20006144:	2b00      	cmp	r3, #0
20006146:	d002      	beq.n	2000614e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20006148:	2301      	movs	r3, #1
2000614a:	73fb      	strb	r3, [r7, #15]
2000614c:	e001      	b.n	20006152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2000614e:	2300      	movs	r3, #0
20006150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20006152:	7bfb      	ldrb	r3, [r7, #15]
}
20006154:	4618      	mov	r0, r3
20006156:	3714      	adds	r7, #20
20006158:	46bd      	mov	sp, r7
2000615a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000615e:	4770      	bx	lr

20006160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20006160:	b480      	push	{r7}
20006162:	b083      	sub	sp, #12
20006164:	af00      	add	r7, sp, #0
20006166:	6078      	str	r0, [r7, #4]
20006168:	460b      	mov	r3, r1
2000616a:	807b      	strh	r3, [r7, #2]
2000616c:	4613      	mov	r3, r2
2000616e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
20006170:	787b      	ldrb	r3, [r7, #1]
20006172:	2b00      	cmp	r3, #0
20006174:	d003      	beq.n	2000617e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20006176:	887a      	ldrh	r2, [r7, #2]
20006178:	687b      	ldr	r3, [r7, #4]
2000617a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
2000617c:	e003      	b.n	20006186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
2000617e:	887b      	ldrh	r3, [r7, #2]
20006180:	041a      	lsls	r2, r3, #16
20006182:	687b      	ldr	r3, [r7, #4]
20006184:	619a      	str	r2, [r3, #24]
}
20006186:	bf00      	nop
20006188:	370c      	adds	r7, #12
2000618a:	46bd      	mov	sp, r7
2000618c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006190:	4770      	bx	lr

20006192 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
20006192:	b580      	push	{r7, lr}
20006194:	b086      	sub	sp, #24
20006196:	af02      	add	r7, sp, #8
20006198:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
2000619a:	687b      	ldr	r3, [r7, #4]
2000619c:	2b00      	cmp	r3, #0
2000619e:	d101      	bne.n	200061a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
200061a0:	2301      	movs	r3, #1
200061a2:	e108      	b.n	200063b6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
200061a4:	687b      	ldr	r3, [r7, #4]
200061a6:	681b      	ldr	r3, [r3, #0]
200061a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
200061aa:	687b      	ldr	r3, [r7, #4]
200061ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
200061b0:	b2db      	uxtb	r3, r3
200061b2:	2b00      	cmp	r3, #0
200061b4:	d106      	bne.n	200061c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
200061b6:	687b      	ldr	r3, [r7, #4]
200061b8:	2200      	movs	r2, #0
200061ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
200061be:	6878      	ldr	r0, [r7, #4]
200061c0:	f006 fcaa 	bl	2000cb18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
200061c4:	687b      	ldr	r3, [r7, #4]
200061c6:	2203      	movs	r2, #3
200061c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
200061cc:	68bb      	ldr	r3, [r7, #8]
200061ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
200061d2:	d102      	bne.n	200061da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
200061d4:	687b      	ldr	r3, [r7, #4]
200061d6:	2200      	movs	r2, #0
200061d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
200061da:	687b      	ldr	r3, [r7, #4]
200061dc:	681b      	ldr	r3, [r3, #0]
200061de:	4618      	mov	r0, r3
200061e0:	f003 f9b1 	bl	20009546 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
200061e4:	687b      	ldr	r3, [r7, #4]
200061e6:	6818      	ldr	r0, [r3, #0]
200061e8:	687b      	ldr	r3, [r7, #4]
200061ea:	7c1a      	ldrb	r2, [r3, #16]
200061ec:	f88d 2000 	strb.w	r2, [sp]
200061f0:	3304      	adds	r3, #4
200061f2:	cb0e      	ldmia	r3, {r1, r2, r3}
200061f4:	f003 f89a 	bl	2000932c <USB_CoreInit>
200061f8:	4603      	mov	r3, r0
200061fa:	2b00      	cmp	r3, #0
200061fc:	d005      	beq.n	2000620a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
200061fe:	687b      	ldr	r3, [r7, #4]
20006200:	2202      	movs	r2, #2
20006202:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20006206:	2301      	movs	r3, #1
20006208:	e0d5      	b.n	200063b6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
2000620a:	687b      	ldr	r3, [r7, #4]
2000620c:	681b      	ldr	r3, [r3, #0]
2000620e:	2100      	movs	r1, #0
20006210:	4618      	mov	r0, r3
20006212:	f003 f9a9 	bl	20009568 <USB_SetCurrentMode>
20006216:	4603      	mov	r3, r0
20006218:	2b00      	cmp	r3, #0
2000621a:	d005      	beq.n	20006228 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
2000621c:	687b      	ldr	r3, [r7, #4]
2000621e:	2202      	movs	r2, #2
20006220:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20006224:	2301      	movs	r3, #1
20006226:	e0c6      	b.n	200063b6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20006228:	2300      	movs	r3, #0
2000622a:	73fb      	strb	r3, [r7, #15]
2000622c:	e04a      	b.n	200062c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
2000622e:	7bfa      	ldrb	r2, [r7, #15]
20006230:	6879      	ldr	r1, [r7, #4]
20006232:	4613      	mov	r3, r2
20006234:	00db      	lsls	r3, r3, #3
20006236:	4413      	add	r3, r2
20006238:	009b      	lsls	r3, r3, #2
2000623a:	440b      	add	r3, r1
2000623c:	3315      	adds	r3, #21
2000623e:	2201      	movs	r2, #1
20006240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
20006242:	7bfa      	ldrb	r2, [r7, #15]
20006244:	6879      	ldr	r1, [r7, #4]
20006246:	4613      	mov	r3, r2
20006248:	00db      	lsls	r3, r3, #3
2000624a:	4413      	add	r3, r2
2000624c:	009b      	lsls	r3, r3, #2
2000624e:	440b      	add	r3, r1
20006250:	3314      	adds	r3, #20
20006252:	7bfa      	ldrb	r2, [r7, #15]
20006254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
20006256:	7bfa      	ldrb	r2, [r7, #15]
20006258:	7bfb      	ldrb	r3, [r7, #15]
2000625a:	b298      	uxth	r0, r3
2000625c:	6879      	ldr	r1, [r7, #4]
2000625e:	4613      	mov	r3, r2
20006260:	00db      	lsls	r3, r3, #3
20006262:	4413      	add	r3, r2
20006264:	009b      	lsls	r3, r3, #2
20006266:	440b      	add	r3, r1
20006268:	332e      	adds	r3, #46	@ 0x2e
2000626a:	4602      	mov	r2, r0
2000626c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
2000626e:	7bfa      	ldrb	r2, [r7, #15]
20006270:	6879      	ldr	r1, [r7, #4]
20006272:	4613      	mov	r3, r2
20006274:	00db      	lsls	r3, r3, #3
20006276:	4413      	add	r3, r2
20006278:	009b      	lsls	r3, r3, #2
2000627a:	440b      	add	r3, r1
2000627c:	3318      	adds	r3, #24
2000627e:	2200      	movs	r2, #0
20006280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
20006282:	7bfa      	ldrb	r2, [r7, #15]
20006284:	6879      	ldr	r1, [r7, #4]
20006286:	4613      	mov	r3, r2
20006288:	00db      	lsls	r3, r3, #3
2000628a:	4413      	add	r3, r2
2000628c:	009b      	lsls	r3, r3, #2
2000628e:	440b      	add	r3, r1
20006290:	331c      	adds	r3, #28
20006292:	2200      	movs	r2, #0
20006294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
20006296:	7bfa      	ldrb	r2, [r7, #15]
20006298:	6879      	ldr	r1, [r7, #4]
2000629a:	4613      	mov	r3, r2
2000629c:	00db      	lsls	r3, r3, #3
2000629e:	4413      	add	r3, r2
200062a0:	009b      	lsls	r3, r3, #2
200062a2:	440b      	add	r3, r1
200062a4:	3320      	adds	r3, #32
200062a6:	2200      	movs	r2, #0
200062a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
200062aa:	7bfa      	ldrb	r2, [r7, #15]
200062ac:	6879      	ldr	r1, [r7, #4]
200062ae:	4613      	mov	r3, r2
200062b0:	00db      	lsls	r3, r3, #3
200062b2:	4413      	add	r3, r2
200062b4:	009b      	lsls	r3, r3, #2
200062b6:	440b      	add	r3, r1
200062b8:	3324      	adds	r3, #36	@ 0x24
200062ba:	2200      	movs	r2, #0
200062bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200062be:	7bfb      	ldrb	r3, [r7, #15]
200062c0:	3301      	adds	r3, #1
200062c2:	73fb      	strb	r3, [r7, #15]
200062c4:	687b      	ldr	r3, [r7, #4]
200062c6:	791b      	ldrb	r3, [r3, #4]
200062c8:	7bfa      	ldrb	r2, [r7, #15]
200062ca:	429a      	cmp	r2, r3
200062cc:	d3af      	bcc.n	2000622e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200062ce:	2300      	movs	r3, #0
200062d0:	73fb      	strb	r3, [r7, #15]
200062d2:	e044      	b.n	2000635e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
200062d4:	7bfa      	ldrb	r2, [r7, #15]
200062d6:	6879      	ldr	r1, [r7, #4]
200062d8:	4613      	mov	r3, r2
200062da:	00db      	lsls	r3, r3, #3
200062dc:	4413      	add	r3, r2
200062de:	009b      	lsls	r3, r3, #2
200062e0:	440b      	add	r3, r1
200062e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
200062e6:	2200      	movs	r2, #0
200062e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
200062ea:	7bfa      	ldrb	r2, [r7, #15]
200062ec:	6879      	ldr	r1, [r7, #4]
200062ee:	4613      	mov	r3, r2
200062f0:	00db      	lsls	r3, r3, #3
200062f2:	4413      	add	r3, r2
200062f4:	009b      	lsls	r3, r3, #2
200062f6:	440b      	add	r3, r1
200062f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
200062fc:	7bfa      	ldrb	r2, [r7, #15]
200062fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
20006300:	7bfa      	ldrb	r2, [r7, #15]
20006302:	6879      	ldr	r1, [r7, #4]
20006304:	4613      	mov	r3, r2
20006306:	00db      	lsls	r3, r3, #3
20006308:	4413      	add	r3, r2
2000630a:	009b      	lsls	r3, r3, #2
2000630c:	440b      	add	r3, r1
2000630e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20006312:	2200      	movs	r2, #0
20006314:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
20006316:	7bfa      	ldrb	r2, [r7, #15]
20006318:	6879      	ldr	r1, [r7, #4]
2000631a:	4613      	mov	r3, r2
2000631c:	00db      	lsls	r3, r3, #3
2000631e:	4413      	add	r3, r2
20006320:	009b      	lsls	r3, r3, #2
20006322:	440b      	add	r3, r1
20006324:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
20006328:	2200      	movs	r2, #0
2000632a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
2000632c:	7bfa      	ldrb	r2, [r7, #15]
2000632e:	6879      	ldr	r1, [r7, #4]
20006330:	4613      	mov	r3, r2
20006332:	00db      	lsls	r3, r3, #3
20006334:	4413      	add	r3, r2
20006336:	009b      	lsls	r3, r3, #2
20006338:	440b      	add	r3, r1
2000633a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
2000633e:	2200      	movs	r2, #0
20006340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
20006342:	7bfa      	ldrb	r2, [r7, #15]
20006344:	6879      	ldr	r1, [r7, #4]
20006346:	4613      	mov	r3, r2
20006348:	00db      	lsls	r3, r3, #3
2000634a:	4413      	add	r3, r2
2000634c:	009b      	lsls	r3, r3, #2
2000634e:	440b      	add	r3, r1
20006350:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20006354:	2200      	movs	r2, #0
20006356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20006358:	7bfb      	ldrb	r3, [r7, #15]
2000635a:	3301      	adds	r3, #1
2000635c:	73fb      	strb	r3, [r7, #15]
2000635e:	687b      	ldr	r3, [r7, #4]
20006360:	791b      	ldrb	r3, [r3, #4]
20006362:	7bfa      	ldrb	r2, [r7, #15]
20006364:	429a      	cmp	r2, r3
20006366:	d3b5      	bcc.n	200062d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20006368:	687b      	ldr	r3, [r7, #4]
2000636a:	6818      	ldr	r0, [r3, #0]
2000636c:	687b      	ldr	r3, [r7, #4]
2000636e:	7c1a      	ldrb	r2, [r3, #16]
20006370:	f88d 2000 	strb.w	r2, [sp]
20006374:	3304      	adds	r3, #4
20006376:	cb0e      	ldmia	r3, {r1, r2, r3}
20006378:	f003 f942 	bl	20009600 <USB_DevInit>
2000637c:	4603      	mov	r3, r0
2000637e:	2b00      	cmp	r3, #0
20006380:	d005      	beq.n	2000638e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20006382:	687b      	ldr	r3, [r7, #4]
20006384:	2202      	movs	r2, #2
20006386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
2000638a:	2301      	movs	r3, #1
2000638c:	e013      	b.n	200063b6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
2000638e:	687b      	ldr	r3, [r7, #4]
20006390:	2200      	movs	r2, #0
20006392:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
20006394:	687b      	ldr	r3, [r7, #4]
20006396:	2201      	movs	r2, #1
20006398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
2000639c:	687b      	ldr	r3, [r7, #4]
2000639e:	7b1b      	ldrb	r3, [r3, #12]
200063a0:	2b01      	cmp	r3, #1
200063a2:	d102      	bne.n	200063aa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
200063a4:	6878      	ldr	r0, [r7, #4]
200063a6:	f001 f95b 	bl	20007660 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
200063aa:	687b      	ldr	r3, [r7, #4]
200063ac:	681b      	ldr	r3, [r3, #0]
200063ae:	4618      	mov	r0, r3
200063b0:	f004 f985 	bl	2000a6be <USB_DevDisconnect>

  return HAL_OK;
200063b4:	2300      	movs	r3, #0
}
200063b6:	4618      	mov	r0, r3
200063b8:	3710      	adds	r7, #16
200063ba:	46bd      	mov	sp, r7
200063bc:	bd80      	pop	{r7, pc}

200063be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
200063be:	b580      	push	{r7, lr}
200063c0:	b082      	sub	sp, #8
200063c2:	af00      	add	r7, sp, #0
200063c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
200063c6:	687b      	ldr	r3, [r7, #4]
200063c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200063cc:	2b01      	cmp	r3, #1
200063ce:	d101      	bne.n	200063d4 <HAL_PCD_Start+0x16>
200063d0:	2302      	movs	r3, #2
200063d2:	e012      	b.n	200063fa <HAL_PCD_Start+0x3c>
200063d4:	687b      	ldr	r3, [r7, #4]
200063d6:	2201      	movs	r2, #1
200063d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
200063dc:	687b      	ldr	r3, [r7, #4]
200063de:	681b      	ldr	r3, [r3, #0]
200063e0:	4618      	mov	r0, r3
200063e2:	f003 f89f 	bl	20009524 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
200063e6:	687b      	ldr	r3, [r7, #4]
200063e8:	681b      	ldr	r3, [r3, #0]
200063ea:	4618      	mov	r0, r3
200063ec:	f004 f946 	bl	2000a67c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
200063f0:	687b      	ldr	r3, [r7, #4]
200063f2:	2200      	movs	r2, #0
200063f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
200063f8:	2300      	movs	r3, #0
}
200063fa:	4618      	mov	r0, r3
200063fc:	3708      	adds	r7, #8
200063fe:	46bd      	mov	sp, r7
20006400:	bd80      	pop	{r7, pc}

20006402 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
20006402:	b590      	push	{r4, r7, lr}
20006404:	b08d      	sub	sp, #52	@ 0x34
20006406:	af00      	add	r7, sp, #0
20006408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
2000640a:	687b      	ldr	r3, [r7, #4]
2000640c:	681b      	ldr	r3, [r3, #0]
2000640e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006410:	6a3b      	ldr	r3, [r7, #32]
20006412:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
20006414:	687b      	ldr	r3, [r7, #4]
20006416:	681b      	ldr	r3, [r3, #0]
20006418:	4618      	mov	r0, r3
2000641a:	f004 fa04 	bl	2000a826 <USB_GetMode>
2000641e:	4603      	mov	r3, r0
20006420:	2b00      	cmp	r3, #0
20006422:	f040 84b9 	bne.w	20006d98 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
20006426:	687b      	ldr	r3, [r7, #4]
20006428:	681b      	ldr	r3, [r3, #0]
2000642a:	4618      	mov	r0, r3
2000642c:	f004 f968 	bl	2000a700 <USB_ReadInterrupts>
20006430:	4603      	mov	r3, r0
20006432:	2b00      	cmp	r3, #0
20006434:	f000 84af 	beq.w	20006d96 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
20006438:	69fb      	ldr	r3, [r7, #28]
2000643a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000643e:	689b      	ldr	r3, [r3, #8]
20006440:	0a1b      	lsrs	r3, r3, #8
20006442:	f3c3 020d 	ubfx	r2, r3, #0, #14
20006446:	687b      	ldr	r3, [r7, #4]
20006448:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
2000644c:	687b      	ldr	r3, [r7, #4]
2000644e:	681b      	ldr	r3, [r3, #0]
20006450:	4618      	mov	r0, r3
20006452:	f004 f955 	bl	2000a700 <USB_ReadInterrupts>
20006456:	4603      	mov	r3, r0
20006458:	f003 0302 	and.w	r3, r3, #2
2000645c:	2b02      	cmp	r3, #2
2000645e:	d107      	bne.n	20006470 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
20006460:	687b      	ldr	r3, [r7, #4]
20006462:	681b      	ldr	r3, [r3, #0]
20006464:	695a      	ldr	r2, [r3, #20]
20006466:	687b      	ldr	r3, [r7, #4]
20006468:	681b      	ldr	r3, [r3, #0]
2000646a:	f002 0202 	and.w	r2, r2, #2
2000646e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
20006470:	687b      	ldr	r3, [r7, #4]
20006472:	681b      	ldr	r3, [r3, #0]
20006474:	4618      	mov	r0, r3
20006476:	f004 f943 	bl	2000a700 <USB_ReadInterrupts>
2000647a:	4603      	mov	r3, r0
2000647c:	f003 0310 	and.w	r3, r3, #16
20006480:	2b10      	cmp	r3, #16
20006482:	d161      	bne.n	20006548 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
20006484:	687b      	ldr	r3, [r7, #4]
20006486:	681b      	ldr	r3, [r3, #0]
20006488:	699a      	ldr	r2, [r3, #24]
2000648a:	687b      	ldr	r3, [r7, #4]
2000648c:	681b      	ldr	r3, [r3, #0]
2000648e:	f022 0210 	bic.w	r2, r2, #16
20006492:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
20006494:	6a3b      	ldr	r3, [r7, #32]
20006496:	6a1b      	ldr	r3, [r3, #32]
20006498:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
2000649a:	69bb      	ldr	r3, [r7, #24]
2000649c:	f003 020f 	and.w	r2, r3, #15
200064a0:	4613      	mov	r3, r2
200064a2:	00db      	lsls	r3, r3, #3
200064a4:	4413      	add	r3, r2
200064a6:	009b      	lsls	r3, r3, #2
200064a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200064ac:	687a      	ldr	r2, [r7, #4]
200064ae:	4413      	add	r3, r2
200064b0:	3304      	adds	r3, #4
200064b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
200064b4:	69bb      	ldr	r3, [r7, #24]
200064b6:	0c5b      	lsrs	r3, r3, #17
200064b8:	f003 030f 	and.w	r3, r3, #15
200064bc:	2b02      	cmp	r3, #2
200064be:	d124      	bne.n	2000650a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
200064c0:	69ba      	ldr	r2, [r7, #24]
200064c2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
200064c6:	4013      	ands	r3, r2
200064c8:	2b00      	cmp	r3, #0
200064ca:	d035      	beq.n	20006538 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
200064cc:	697b      	ldr	r3, [r7, #20]
200064ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
200064d0:	69bb      	ldr	r3, [r7, #24]
200064d2:	091b      	lsrs	r3, r3, #4
200064d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
200064d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
200064da:	b29b      	uxth	r3, r3
200064dc:	461a      	mov	r2, r3
200064de:	6a38      	ldr	r0, [r7, #32]
200064e0:	f003 ff7a 	bl	2000a3d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
200064e4:	697b      	ldr	r3, [r7, #20]
200064e6:	68da      	ldr	r2, [r3, #12]
200064e8:	69bb      	ldr	r3, [r7, #24]
200064ea:	091b      	lsrs	r3, r3, #4
200064ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
200064f0:	441a      	add	r2, r3
200064f2:	697b      	ldr	r3, [r7, #20]
200064f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
200064f6:	697b      	ldr	r3, [r7, #20]
200064f8:	695a      	ldr	r2, [r3, #20]
200064fa:	69bb      	ldr	r3, [r7, #24]
200064fc:	091b      	lsrs	r3, r3, #4
200064fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
20006502:	441a      	add	r2, r3
20006504:	697b      	ldr	r3, [r7, #20]
20006506:	615a      	str	r2, [r3, #20]
20006508:	e016      	b.n	20006538 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
2000650a:	69bb      	ldr	r3, [r7, #24]
2000650c:	0c5b      	lsrs	r3, r3, #17
2000650e:	f003 030f 	and.w	r3, r3, #15
20006512:	2b06      	cmp	r3, #6
20006514:	d110      	bne.n	20006538 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
20006516:	687b      	ldr	r3, [r7, #4]
20006518:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000651c:	2208      	movs	r2, #8
2000651e:	4619      	mov	r1, r3
20006520:	6a38      	ldr	r0, [r7, #32]
20006522:	f003 ff59 	bl	2000a3d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20006526:	697b      	ldr	r3, [r7, #20]
20006528:	695a      	ldr	r2, [r3, #20]
2000652a:	69bb      	ldr	r3, [r7, #24]
2000652c:	091b      	lsrs	r3, r3, #4
2000652e:	f3c3 030a 	ubfx	r3, r3, #0, #11
20006532:	441a      	add	r2, r3
20006534:	697b      	ldr	r3, [r7, #20]
20006536:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
20006538:	687b      	ldr	r3, [r7, #4]
2000653a:	681b      	ldr	r3, [r3, #0]
2000653c:	699a      	ldr	r2, [r3, #24]
2000653e:	687b      	ldr	r3, [r7, #4]
20006540:	681b      	ldr	r3, [r3, #0]
20006542:	f042 0210 	orr.w	r2, r2, #16
20006546:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
20006548:	687b      	ldr	r3, [r7, #4]
2000654a:	681b      	ldr	r3, [r3, #0]
2000654c:	4618      	mov	r0, r3
2000654e:	f004 f8d7 	bl	2000a700 <USB_ReadInterrupts>
20006552:	4603      	mov	r3, r0
20006554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20006558:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
2000655c:	f040 80a7 	bne.w	200066ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
20006560:	2300      	movs	r3, #0
20006562:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
20006564:	687b      	ldr	r3, [r7, #4]
20006566:	681b      	ldr	r3, [r3, #0]
20006568:	4618      	mov	r0, r3
2000656a:	f004 f8dc 	bl	2000a726 <USB_ReadDevAllOutEpInterrupt>
2000656e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
20006570:	e099      	b.n	200066a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
20006572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20006574:	f003 0301 	and.w	r3, r3, #1
20006578:	2b00      	cmp	r3, #0
2000657a:	f000 808e 	beq.w	2000669a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
2000657e:	687b      	ldr	r3, [r7, #4]
20006580:	681b      	ldr	r3, [r3, #0]
20006582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006584:	b2d2      	uxtb	r2, r2
20006586:	4611      	mov	r1, r2
20006588:	4618      	mov	r0, r3
2000658a:	f004 f900 	bl	2000a78e <USB_ReadDevOutEPInterrupt>
2000658e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
20006590:	693b      	ldr	r3, [r7, #16]
20006592:	f003 0301 	and.w	r3, r3, #1
20006596:	2b00      	cmp	r3, #0
20006598:	d00c      	beq.n	200065b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
2000659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000659c:	015a      	lsls	r2, r3, #5
2000659e:	69fb      	ldr	r3, [r7, #28]
200065a0:	4413      	add	r3, r2
200065a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200065a6:	461a      	mov	r2, r3
200065a8:	2301      	movs	r3, #1
200065aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
200065ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200065ae:	6878      	ldr	r0, [r7, #4]
200065b0:	f000 fed0 	bl	20007354 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
200065b4:	693b      	ldr	r3, [r7, #16]
200065b6:	f003 0308 	and.w	r3, r3, #8
200065ba:	2b00      	cmp	r3, #0
200065bc:	d00c      	beq.n	200065d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
200065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200065c0:	015a      	lsls	r2, r3, #5
200065c2:	69fb      	ldr	r3, [r7, #28]
200065c4:	4413      	add	r3, r2
200065c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200065ca:	461a      	mov	r2, r3
200065cc:	2308      	movs	r3, #8
200065ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
200065d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200065d2:	6878      	ldr	r0, [r7, #4]
200065d4:	f000 ffa6 	bl	20007524 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
200065d8:	693b      	ldr	r3, [r7, #16]
200065da:	f003 0310 	and.w	r3, r3, #16
200065de:	2b00      	cmp	r3, #0
200065e0:	d008      	beq.n	200065f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
200065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200065e4:	015a      	lsls	r2, r3, #5
200065e6:	69fb      	ldr	r3, [r7, #28]
200065e8:	4413      	add	r3, r2
200065ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200065ee:	461a      	mov	r2, r3
200065f0:	2310      	movs	r3, #16
200065f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
200065f4:	693b      	ldr	r3, [r7, #16]
200065f6:	f003 0302 	and.w	r3, r3, #2
200065fa:	2b00      	cmp	r3, #0
200065fc:	d030      	beq.n	20006660 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
200065fe:	6a3b      	ldr	r3, [r7, #32]
20006600:	695b      	ldr	r3, [r3, #20]
20006602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006606:	2b80      	cmp	r3, #128	@ 0x80
20006608:	d109      	bne.n	2000661e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
2000660a:	69fb      	ldr	r3, [r7, #28]
2000660c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006610:	685b      	ldr	r3, [r3, #4]
20006612:	69fa      	ldr	r2, [r7, #28]
20006614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006618:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
2000661c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
2000661e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006620:	4613      	mov	r3, r2
20006622:	00db      	lsls	r3, r3, #3
20006624:	4413      	add	r3, r2
20006626:	009b      	lsls	r3, r3, #2
20006628:	f503 7314 	add.w	r3, r3, #592	@ 0x250
2000662c:	687a      	ldr	r2, [r7, #4]
2000662e:	4413      	add	r3, r2
20006630:	3304      	adds	r3, #4
20006632:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
20006634:	697b      	ldr	r3, [r7, #20]
20006636:	78db      	ldrb	r3, [r3, #3]
20006638:	2b01      	cmp	r3, #1
2000663a:	d108      	bne.n	2000664e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
2000663c:	697b      	ldr	r3, [r7, #20]
2000663e:	2200      	movs	r2, #0
20006640:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
20006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006644:	b2db      	uxtb	r3, r3
20006646:	4619      	mov	r1, r3
20006648:	6878      	ldr	r0, [r7, #4]
2000664a:	f006 fb99 	bl	2000cd80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
2000664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006650:	015a      	lsls	r2, r3, #5
20006652:	69fb      	ldr	r3, [r7, #28]
20006654:	4413      	add	r3, r2
20006656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000665a:	461a      	mov	r2, r3
2000665c:	2302      	movs	r3, #2
2000665e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
20006660:	693b      	ldr	r3, [r7, #16]
20006662:	f003 0320 	and.w	r3, r3, #32
20006666:	2b00      	cmp	r3, #0
20006668:	d008      	beq.n	2000667c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
2000666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000666c:	015a      	lsls	r2, r3, #5
2000666e:	69fb      	ldr	r3, [r7, #28]
20006670:	4413      	add	r3, r2
20006672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006676:	461a      	mov	r2, r3
20006678:	2320      	movs	r3, #32
2000667a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
2000667c:	693b      	ldr	r3, [r7, #16]
2000667e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20006682:	2b00      	cmp	r3, #0
20006684:	d009      	beq.n	2000669a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
20006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006688:	015a      	lsls	r2, r3, #5
2000668a:	69fb      	ldr	r3, [r7, #28]
2000668c:	4413      	add	r3, r2
2000668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006692:	461a      	mov	r2, r3
20006694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20006698:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
2000669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000669c:	3301      	adds	r3, #1
2000669e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
200066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200066a2:	085b      	lsrs	r3, r3, #1
200066a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
200066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200066a8:	2b00      	cmp	r3, #0
200066aa:	f47f af62 	bne.w	20006572 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
200066ae:	687b      	ldr	r3, [r7, #4]
200066b0:	681b      	ldr	r3, [r3, #0]
200066b2:	4618      	mov	r0, r3
200066b4:	f004 f824 	bl	2000a700 <USB_ReadInterrupts>
200066b8:	4603      	mov	r3, r0
200066ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
200066be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
200066c2:	f040 80db 	bne.w	2000687c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
200066c6:	687b      	ldr	r3, [r7, #4]
200066c8:	681b      	ldr	r3, [r3, #0]
200066ca:	4618      	mov	r0, r3
200066cc:	f004 f845 	bl	2000a75a <USB_ReadDevAllInEpInterrupt>
200066d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
200066d2:	2300      	movs	r3, #0
200066d4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
200066d6:	e0cd      	b.n	20006874 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
200066d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200066da:	f003 0301 	and.w	r3, r3, #1
200066de:	2b00      	cmp	r3, #0
200066e0:	f000 80c2 	beq.w	20006868 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
200066e4:	687b      	ldr	r3, [r7, #4]
200066e6:	681b      	ldr	r3, [r3, #0]
200066e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200066ea:	b2d2      	uxtb	r2, r2
200066ec:	4611      	mov	r1, r2
200066ee:	4618      	mov	r0, r3
200066f0:	f004 f86b 	bl	2000a7ca <USB_ReadDevInEPInterrupt>
200066f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
200066f6:	693b      	ldr	r3, [r7, #16]
200066f8:	f003 0301 	and.w	r3, r3, #1
200066fc:	2b00      	cmp	r3, #0
200066fe:	d057      	beq.n	200067b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
20006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006702:	f003 030f 	and.w	r3, r3, #15
20006706:	2201      	movs	r2, #1
20006708:	fa02 f303 	lsl.w	r3, r2, r3
2000670c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
2000670e:	69fb      	ldr	r3, [r7, #28]
20006710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20006716:	68fb      	ldr	r3, [r7, #12]
20006718:	43db      	mvns	r3, r3
2000671a:	69f9      	ldr	r1, [r7, #28]
2000671c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20006720:	4013      	ands	r3, r2
20006722:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
20006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006726:	015a      	lsls	r2, r3, #5
20006728:	69fb      	ldr	r3, [r7, #28]
2000672a:	4413      	add	r3, r2
2000672c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006730:	461a      	mov	r2, r3
20006732:	2301      	movs	r3, #1
20006734:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
20006736:	687b      	ldr	r3, [r7, #4]
20006738:	799b      	ldrb	r3, [r3, #6]
2000673a:	2b01      	cmp	r3, #1
2000673c:	d132      	bne.n	200067a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
2000673e:	6879      	ldr	r1, [r7, #4]
20006740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006742:	4613      	mov	r3, r2
20006744:	00db      	lsls	r3, r3, #3
20006746:	4413      	add	r3, r2
20006748:	009b      	lsls	r3, r3, #2
2000674a:	440b      	add	r3, r1
2000674c:	3320      	adds	r3, #32
2000674e:	6819      	ldr	r1, [r3, #0]
20006750:	6878      	ldr	r0, [r7, #4]
20006752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006754:	4613      	mov	r3, r2
20006756:	00db      	lsls	r3, r3, #3
20006758:	4413      	add	r3, r2
2000675a:	009b      	lsls	r3, r3, #2
2000675c:	4403      	add	r3, r0
2000675e:	331c      	adds	r3, #28
20006760:	681b      	ldr	r3, [r3, #0]
20006762:	4419      	add	r1, r3
20006764:	6878      	ldr	r0, [r7, #4]
20006766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006768:	4613      	mov	r3, r2
2000676a:	00db      	lsls	r3, r3, #3
2000676c:	4413      	add	r3, r2
2000676e:	009b      	lsls	r3, r3, #2
20006770:	4403      	add	r3, r0
20006772:	3320      	adds	r3, #32
20006774:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
20006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006778:	2b00      	cmp	r3, #0
2000677a:	d113      	bne.n	200067a4 <HAL_PCD_IRQHandler+0x3a2>
2000677c:	6879      	ldr	r1, [r7, #4]
2000677e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006780:	4613      	mov	r3, r2
20006782:	00db      	lsls	r3, r3, #3
20006784:	4413      	add	r3, r2
20006786:	009b      	lsls	r3, r3, #2
20006788:	440b      	add	r3, r1
2000678a:	3324      	adds	r3, #36	@ 0x24
2000678c:	681b      	ldr	r3, [r3, #0]
2000678e:	2b00      	cmp	r3, #0
20006790:	d108      	bne.n	200067a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
20006792:	687b      	ldr	r3, [r7, #4]
20006794:	6818      	ldr	r0, [r3, #0]
20006796:	687b      	ldr	r3, [r7, #4]
20006798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000679c:	461a      	mov	r2, r3
2000679e:	2101      	movs	r1, #1
200067a0:	f004 f874 	bl	2000a88c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
200067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200067a6:	b2db      	uxtb	r3, r3
200067a8:	4619      	mov	r1, r3
200067aa:	6878      	ldr	r0, [r7, #4]
200067ac:	f006 fa63 	bl	2000cc76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
200067b0:	693b      	ldr	r3, [r7, #16]
200067b2:	f003 0308 	and.w	r3, r3, #8
200067b6:	2b00      	cmp	r3, #0
200067b8:	d008      	beq.n	200067cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
200067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200067bc:	015a      	lsls	r2, r3, #5
200067be:	69fb      	ldr	r3, [r7, #28]
200067c0:	4413      	add	r3, r2
200067c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200067c6:	461a      	mov	r2, r3
200067c8:	2308      	movs	r3, #8
200067ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
200067cc:	693b      	ldr	r3, [r7, #16]
200067ce:	f003 0310 	and.w	r3, r3, #16
200067d2:	2b00      	cmp	r3, #0
200067d4:	d008      	beq.n	200067e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
200067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200067d8:	015a      	lsls	r2, r3, #5
200067da:	69fb      	ldr	r3, [r7, #28]
200067dc:	4413      	add	r3, r2
200067de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200067e2:	461a      	mov	r2, r3
200067e4:	2310      	movs	r3, #16
200067e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
200067e8:	693b      	ldr	r3, [r7, #16]
200067ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200067ee:	2b00      	cmp	r3, #0
200067f0:	d008      	beq.n	20006804 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
200067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200067f4:	015a      	lsls	r2, r3, #5
200067f6:	69fb      	ldr	r3, [r7, #28]
200067f8:	4413      	add	r3, r2
200067fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200067fe:	461a      	mov	r2, r3
20006800:	2340      	movs	r3, #64	@ 0x40
20006802:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
20006804:	693b      	ldr	r3, [r7, #16]
20006806:	f003 0302 	and.w	r3, r3, #2
2000680a:	2b00      	cmp	r3, #0
2000680c:	d023      	beq.n	20006856 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
2000680e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20006810:	6a38      	ldr	r0, [r7, #32]
20006812:	f003 f853 	bl	200098bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
20006816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006818:	4613      	mov	r3, r2
2000681a:	00db      	lsls	r3, r3, #3
2000681c:	4413      	add	r3, r2
2000681e:	009b      	lsls	r3, r3, #2
20006820:	3310      	adds	r3, #16
20006822:	687a      	ldr	r2, [r7, #4]
20006824:	4413      	add	r3, r2
20006826:	3304      	adds	r3, #4
20006828:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
2000682a:	697b      	ldr	r3, [r7, #20]
2000682c:	78db      	ldrb	r3, [r3, #3]
2000682e:	2b01      	cmp	r3, #1
20006830:	d108      	bne.n	20006844 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
20006832:	697b      	ldr	r3, [r7, #20]
20006834:	2200      	movs	r2, #0
20006836:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
20006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000683a:	b2db      	uxtb	r3, r3
2000683c:	4619      	mov	r1, r3
2000683e:	6878      	ldr	r0, [r7, #4]
20006840:	f006 fab0 	bl	2000cda4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
20006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006846:	015a      	lsls	r2, r3, #5
20006848:	69fb      	ldr	r3, [r7, #28]
2000684a:	4413      	add	r3, r2
2000684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006850:	461a      	mov	r2, r3
20006852:	2302      	movs	r3, #2
20006854:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
20006856:	693b      	ldr	r3, [r7, #16]
20006858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000685c:	2b00      	cmp	r3, #0
2000685e:	d003      	beq.n	20006868 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
20006860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20006862:	6878      	ldr	r0, [r7, #4]
20006864:	f000 fcea 	bl	2000723c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
20006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000686a:	3301      	adds	r3, #1
2000686c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
2000686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20006870:	085b      	lsrs	r3, r3, #1
20006872:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
20006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20006876:	2b00      	cmp	r3, #0
20006878:	f47f af2e 	bne.w	200066d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
2000687c:	687b      	ldr	r3, [r7, #4]
2000687e:	681b      	ldr	r3, [r3, #0]
20006880:	4618      	mov	r0, r3
20006882:	f003 ff3d 	bl	2000a700 <USB_ReadInterrupts>
20006886:	4603      	mov	r3, r0
20006888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000688c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20006890:	d122      	bne.n	200068d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
20006892:	69fb      	ldr	r3, [r7, #28]
20006894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006898:	685b      	ldr	r3, [r3, #4]
2000689a:	69fa      	ldr	r2, [r7, #28]
2000689c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200068a0:	f023 0301 	bic.w	r3, r3, #1
200068a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
200068a6:	687b      	ldr	r3, [r7, #4]
200068a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
200068ac:	2b01      	cmp	r3, #1
200068ae:	d108      	bne.n	200068c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
200068b0:	687b      	ldr	r3, [r7, #4]
200068b2:	2200      	movs	r2, #0
200068b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
200068b8:	2100      	movs	r1, #0
200068ba:	6878      	ldr	r0, [r7, #4]
200068bc:	f006 fc2a 	bl	2000d114 <HAL_PCDEx_LPM_Callback>
200068c0:	e002      	b.n	200068c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
200068c2:	6878      	ldr	r0, [r7, #4]
200068c4:	f006 fa4e 	bl	2000cd64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
200068c8:	687b      	ldr	r3, [r7, #4]
200068ca:	681b      	ldr	r3, [r3, #0]
200068cc:	695a      	ldr	r2, [r3, #20]
200068ce:	687b      	ldr	r3, [r7, #4]
200068d0:	681b      	ldr	r3, [r3, #0]
200068d2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
200068d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
200068d8:	687b      	ldr	r3, [r7, #4]
200068da:	681b      	ldr	r3, [r3, #0]
200068dc:	4618      	mov	r0, r3
200068de:	f003 ff0f 	bl	2000a700 <USB_ReadInterrupts>
200068e2:	4603      	mov	r3, r0
200068e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
200068e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
200068ec:	d112      	bne.n	20006914 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
200068ee:	69fb      	ldr	r3, [r7, #28]
200068f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200068f4:	689b      	ldr	r3, [r3, #8]
200068f6:	f003 0301 	and.w	r3, r3, #1
200068fa:	2b01      	cmp	r3, #1
200068fc:	d102      	bne.n	20006904 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
200068fe:	6878      	ldr	r0, [r7, #4]
20006900:	f006 fa0a 	bl	2000cd18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
20006904:	687b      	ldr	r3, [r7, #4]
20006906:	681b      	ldr	r3, [r3, #0]
20006908:	695a      	ldr	r2, [r3, #20]
2000690a:	687b      	ldr	r3, [r7, #4]
2000690c:	681b      	ldr	r3, [r3, #0]
2000690e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
20006912:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
20006914:	687b      	ldr	r3, [r7, #4]
20006916:	681b      	ldr	r3, [r3, #0]
20006918:	4618      	mov	r0, r3
2000691a:	f003 fef1 	bl	2000a700 <USB_ReadInterrupts>
2000691e:	4603      	mov	r3, r0
20006920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20006924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20006928:	d121      	bne.n	2000696e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
2000692a:	687b      	ldr	r3, [r7, #4]
2000692c:	681b      	ldr	r3, [r3, #0]
2000692e:	695a      	ldr	r2, [r3, #20]
20006930:	687b      	ldr	r3, [r7, #4]
20006932:	681b      	ldr	r3, [r3, #0]
20006934:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
20006938:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
2000693a:	687b      	ldr	r3, [r7, #4]
2000693c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
20006940:	2b00      	cmp	r3, #0
20006942:	d111      	bne.n	20006968 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
20006944:	687b      	ldr	r3, [r7, #4]
20006946:	2201      	movs	r2, #1
20006948:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
2000694c:	687b      	ldr	r3, [r7, #4]
2000694e:	681b      	ldr	r3, [r3, #0]
20006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20006952:	089b      	lsrs	r3, r3, #2
20006954:	f003 020f 	and.w	r2, r3, #15
20006958:	687b      	ldr	r3, [r7, #4]
2000695a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
2000695e:	2101      	movs	r1, #1
20006960:	6878      	ldr	r0, [r7, #4]
20006962:	f006 fbd7 	bl	2000d114 <HAL_PCDEx_LPM_Callback>
20006966:	e002      	b.n	2000696e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
20006968:	6878      	ldr	r0, [r7, #4]
2000696a:	f006 f9d5 	bl	2000cd18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
2000696e:	687b      	ldr	r3, [r7, #4]
20006970:	681b      	ldr	r3, [r3, #0]
20006972:	4618      	mov	r0, r3
20006974:	f003 fec4 	bl	2000a700 <USB_ReadInterrupts>
20006978:	4603      	mov	r3, r0
2000697a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
2000697e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20006982:	f040 80b7 	bne.w	20006af4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
20006986:	69fb      	ldr	r3, [r7, #28]
20006988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000698c:	685b      	ldr	r3, [r3, #4]
2000698e:	69fa      	ldr	r2, [r7, #28]
20006990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006994:	f023 0301 	bic.w	r3, r3, #1
20006998:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
2000699a:	687b      	ldr	r3, [r7, #4]
2000699c:	681b      	ldr	r3, [r3, #0]
2000699e:	2110      	movs	r1, #16
200069a0:	4618      	mov	r0, r3
200069a2:	f002 ff8b 	bl	200098bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200069a6:	2300      	movs	r3, #0
200069a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
200069aa:	e046      	b.n	20006a3a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
200069ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200069ae:	015a      	lsls	r2, r3, #5
200069b0:	69fb      	ldr	r3, [r7, #28]
200069b2:	4413      	add	r3, r2
200069b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200069b8:	461a      	mov	r2, r3
200069ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
200069be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
200069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200069c2:	015a      	lsls	r2, r3, #5
200069c4:	69fb      	ldr	r3, [r7, #28]
200069c6:	4413      	add	r3, r2
200069c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200069cc:	681b      	ldr	r3, [r3, #0]
200069ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200069d0:	0151      	lsls	r1, r2, #5
200069d2:	69fa      	ldr	r2, [r7, #28]
200069d4:	440a      	add	r2, r1
200069d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200069da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
200069de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
200069e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200069e2:	015a      	lsls	r2, r3, #5
200069e4:	69fb      	ldr	r3, [r7, #28]
200069e6:	4413      	add	r3, r2
200069e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200069ec:	461a      	mov	r2, r3
200069ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
200069f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
200069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200069f6:	015a      	lsls	r2, r3, #5
200069f8:	69fb      	ldr	r3, [r7, #28]
200069fa:	4413      	add	r3, r2
200069fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006a00:	681b      	ldr	r3, [r3, #0]
20006a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20006a04:	0151      	lsls	r1, r2, #5
20006a06:	69fa      	ldr	r2, [r7, #28]
20006a08:	440a      	add	r2, r1
20006a0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
20006a12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20006a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006a16:	015a      	lsls	r2, r3, #5
20006a18:	69fb      	ldr	r3, [r7, #28]
20006a1a:	4413      	add	r3, r2
20006a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006a20:	681b      	ldr	r3, [r3, #0]
20006a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20006a24:	0151      	lsls	r1, r2, #5
20006a26:	69fa      	ldr	r2, [r7, #28]
20006a28:	440a      	add	r2, r1
20006a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006a2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20006a32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20006a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006a36:	3301      	adds	r3, #1
20006a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
20006a3a:	687b      	ldr	r3, [r7, #4]
20006a3c:	791b      	ldrb	r3, [r3, #4]
20006a3e:	461a      	mov	r2, r3
20006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20006a42:	4293      	cmp	r3, r2
20006a44:	d3b2      	bcc.n	200069ac <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
20006a46:	69fb      	ldr	r3, [r7, #28]
20006a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006a4c:	69db      	ldr	r3, [r3, #28]
20006a4e:	69fa      	ldr	r2, [r7, #28]
20006a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006a54:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
20006a58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
20006a5a:	687b      	ldr	r3, [r7, #4]
20006a5c:	7bdb      	ldrb	r3, [r3, #15]
20006a5e:	2b00      	cmp	r3, #0
20006a60:	d016      	beq.n	20006a90 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
20006a62:	69fb      	ldr	r3, [r7, #28]
20006a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20006a6c:	69fa      	ldr	r2, [r7, #28]
20006a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006a72:	f043 030b 	orr.w	r3, r3, #11
20006a76:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
20006a7a:	69fb      	ldr	r3, [r7, #28]
20006a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20006a82:	69fa      	ldr	r2, [r7, #28]
20006a84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006a88:	f043 030b 	orr.w	r3, r3, #11
20006a8c:	6453      	str	r3, [r2, #68]	@ 0x44
20006a8e:	e015      	b.n	20006abc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
20006a90:	69fb      	ldr	r3, [r7, #28]
20006a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006a96:	695a      	ldr	r2, [r3, #20]
20006a98:	69fb      	ldr	r3, [r7, #28]
20006a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006a9e:	4619      	mov	r1, r3
20006aa0:	f242 032b 	movw	r3, #8235	@ 0x202b
20006aa4:	4313      	orrs	r3, r2
20006aa6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
20006aa8:	69fb      	ldr	r3, [r7, #28]
20006aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006aae:	691b      	ldr	r3, [r3, #16]
20006ab0:	69fa      	ldr	r2, [r7, #28]
20006ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006ab6:	f043 030b 	orr.w	r3, r3, #11
20006aba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
20006abc:	69fb      	ldr	r3, [r7, #28]
20006abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006ac2:	681b      	ldr	r3, [r3, #0]
20006ac4:	69fa      	ldr	r2, [r7, #28]
20006ac6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006aca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
20006ace:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20006ad0:	687b      	ldr	r3, [r7, #4]
20006ad2:	6818      	ldr	r0, [r3, #0]
20006ad4:	687b      	ldr	r3, [r7, #4]
20006ad6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
20006ad8:	687b      	ldr	r3, [r7, #4]
20006ada:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20006ade:	461a      	mov	r2, r3
20006ae0:	f003 fed4 	bl	2000a88c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
20006ae4:	687b      	ldr	r3, [r7, #4]
20006ae6:	681b      	ldr	r3, [r3, #0]
20006ae8:	695a      	ldr	r2, [r3, #20]
20006aea:	687b      	ldr	r3, [r7, #4]
20006aec:	681b      	ldr	r3, [r3, #0]
20006aee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
20006af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
20006af4:	687b      	ldr	r3, [r7, #4]
20006af6:	681b      	ldr	r3, [r3, #0]
20006af8:	4618      	mov	r0, r3
20006afa:	f003 fe01 	bl	2000a700 <USB_ReadInterrupts>
20006afe:	4603      	mov	r3, r0
20006b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20006b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20006b08:	d123      	bne.n	20006b52 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
20006b0a:	687b      	ldr	r3, [r7, #4]
20006b0c:	681b      	ldr	r3, [r3, #0]
20006b0e:	4618      	mov	r0, r3
20006b10:	f003 fe98 	bl	2000a844 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
20006b14:	687b      	ldr	r3, [r7, #4]
20006b16:	681b      	ldr	r3, [r3, #0]
20006b18:	4618      	mov	r0, r3
20006b1a:	f002 ff48 	bl	200099ae <USB_GetDevSpeed>
20006b1e:	4603      	mov	r3, r0
20006b20:	461a      	mov	r2, r3
20006b22:	687b      	ldr	r3, [r7, #4]
20006b24:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
20006b26:	687b      	ldr	r3, [r7, #4]
20006b28:	681c      	ldr	r4, [r3, #0]
20006b2a:	f001 fab3 	bl	20008094 <HAL_RCC_GetHCLKFreq>
20006b2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
20006b30:	687b      	ldr	r3, [r7, #4]
20006b32:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
20006b34:	461a      	mov	r2, r3
20006b36:	4620      	mov	r0, r4
20006b38:	f002 fc52 	bl	200093e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
20006b3c:	6878      	ldr	r0, [r7, #4]
20006b3e:	f006 f8c2 	bl	2000ccc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
20006b42:	687b      	ldr	r3, [r7, #4]
20006b44:	681b      	ldr	r3, [r3, #0]
20006b46:	695a      	ldr	r2, [r3, #20]
20006b48:	687b      	ldr	r3, [r7, #4]
20006b4a:	681b      	ldr	r3, [r3, #0]
20006b4c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
20006b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
20006b52:	687b      	ldr	r3, [r7, #4]
20006b54:	681b      	ldr	r3, [r3, #0]
20006b56:	4618      	mov	r0, r3
20006b58:	f003 fdd2 	bl	2000a700 <USB_ReadInterrupts>
20006b5c:	4603      	mov	r3, r0
20006b5e:	f003 0308 	and.w	r3, r3, #8
20006b62:	2b08      	cmp	r3, #8
20006b64:	d10a      	bne.n	20006b7c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
20006b66:	6878      	ldr	r0, [r7, #4]
20006b68:	f006 f89f 	bl	2000ccaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
20006b6c:	687b      	ldr	r3, [r7, #4]
20006b6e:	681b      	ldr	r3, [r3, #0]
20006b70:	695a      	ldr	r2, [r3, #20]
20006b72:	687b      	ldr	r3, [r7, #4]
20006b74:	681b      	ldr	r3, [r3, #0]
20006b76:	f002 0208 	and.w	r2, r2, #8
20006b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
20006b7c:	687b      	ldr	r3, [r7, #4]
20006b7e:	681b      	ldr	r3, [r3, #0]
20006b80:	4618      	mov	r0, r3
20006b82:	f003 fdbd 	bl	2000a700 <USB_ReadInterrupts>
20006b86:	4603      	mov	r3, r0
20006b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006b8c:	2b80      	cmp	r3, #128	@ 0x80
20006b8e:	d123      	bne.n	20006bd8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
20006b90:	6a3b      	ldr	r3, [r7, #32]
20006b92:	699b      	ldr	r3, [r3, #24]
20006b94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
20006b98:	6a3b      	ldr	r3, [r7, #32]
20006b9a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006b9c:	2301      	movs	r3, #1
20006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
20006ba0:	e014      	b.n	20006bcc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
20006ba2:	6879      	ldr	r1, [r7, #4]
20006ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006ba6:	4613      	mov	r3, r2
20006ba8:	00db      	lsls	r3, r3, #3
20006baa:	4413      	add	r3, r2
20006bac:	009b      	lsls	r3, r3, #2
20006bae:	440b      	add	r3, r1
20006bb0:	f203 2357 	addw	r3, r3, #599	@ 0x257
20006bb4:	781b      	ldrb	r3, [r3, #0]
20006bb6:	2b01      	cmp	r3, #1
20006bb8:	d105      	bne.n	20006bc6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
20006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006bbc:	b2db      	uxtb	r3, r3
20006bbe:	4619      	mov	r1, r3
20006bc0:	6878      	ldr	r0, [r7, #4]
20006bc2:	f000 fb0a 	bl	200071da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006bc8:	3301      	adds	r3, #1
20006bca:	627b      	str	r3, [r7, #36]	@ 0x24
20006bcc:	687b      	ldr	r3, [r7, #4]
20006bce:	791b      	ldrb	r3, [r3, #4]
20006bd0:	461a      	mov	r2, r3
20006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006bd4:	4293      	cmp	r3, r2
20006bd6:	d3e4      	bcc.n	20006ba2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
20006bd8:	687b      	ldr	r3, [r7, #4]
20006bda:	681b      	ldr	r3, [r3, #0]
20006bdc:	4618      	mov	r0, r3
20006bde:	f003 fd8f 	bl	2000a700 <USB_ReadInterrupts>
20006be2:	4603      	mov	r3, r0
20006be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20006be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20006bec:	d13c      	bne.n	20006c68 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006bee:	2301      	movs	r3, #1
20006bf0:	627b      	str	r3, [r7, #36]	@ 0x24
20006bf2:	e02b      	b.n	20006c4c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
20006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006bf6:	015a      	lsls	r2, r3, #5
20006bf8:	69fb      	ldr	r3, [r7, #28]
20006bfa:	4413      	add	r3, r2
20006bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006c00:	681b      	ldr	r3, [r3, #0]
20006c02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20006c04:	6879      	ldr	r1, [r7, #4]
20006c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006c08:	4613      	mov	r3, r2
20006c0a:	00db      	lsls	r3, r3, #3
20006c0c:	4413      	add	r3, r2
20006c0e:	009b      	lsls	r3, r3, #2
20006c10:	440b      	add	r3, r1
20006c12:	3318      	adds	r3, #24
20006c14:	781b      	ldrb	r3, [r3, #0]
20006c16:	2b01      	cmp	r3, #1
20006c18:	d115      	bne.n	20006c46 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
20006c1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20006c1c:	2b00      	cmp	r3, #0
20006c1e:	da12      	bge.n	20006c46 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
20006c20:	6879      	ldr	r1, [r7, #4]
20006c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006c24:	4613      	mov	r3, r2
20006c26:	00db      	lsls	r3, r3, #3
20006c28:	4413      	add	r3, r2
20006c2a:	009b      	lsls	r3, r3, #2
20006c2c:	440b      	add	r3, r1
20006c2e:	3317      	adds	r3, #23
20006c30:	2201      	movs	r2, #1
20006c32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
20006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006c36:	b2db      	uxtb	r3, r3
20006c38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
20006c3c:	b2db      	uxtb	r3, r3
20006c3e:	4619      	mov	r1, r3
20006c40:	6878      	ldr	r0, [r7, #4]
20006c42:	f000 faca 	bl	200071da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006c48:	3301      	adds	r3, #1
20006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
20006c4c:	687b      	ldr	r3, [r7, #4]
20006c4e:	791b      	ldrb	r3, [r3, #4]
20006c50:	461a      	mov	r2, r3
20006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006c54:	4293      	cmp	r3, r2
20006c56:	d3cd      	bcc.n	20006bf4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
20006c58:	687b      	ldr	r3, [r7, #4]
20006c5a:	681b      	ldr	r3, [r3, #0]
20006c5c:	695a      	ldr	r2, [r3, #20]
20006c5e:	687b      	ldr	r3, [r7, #4]
20006c60:	681b      	ldr	r3, [r3, #0]
20006c62:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
20006c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
20006c68:	687b      	ldr	r3, [r7, #4]
20006c6a:	681b      	ldr	r3, [r3, #0]
20006c6c:	4618      	mov	r0, r3
20006c6e:	f003 fd47 	bl	2000a700 <USB_ReadInterrupts>
20006c72:	4603      	mov	r3, r0
20006c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20006c78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20006c7c:	d156      	bne.n	20006d2c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006c7e:	2301      	movs	r3, #1
20006c80:	627b      	str	r3, [r7, #36]	@ 0x24
20006c82:	e045      	b.n	20006d10 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
20006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006c86:	015a      	lsls	r2, r3, #5
20006c88:	69fb      	ldr	r3, [r7, #28]
20006c8a:	4413      	add	r3, r2
20006c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006c90:	681b      	ldr	r3, [r3, #0]
20006c92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20006c94:	6879      	ldr	r1, [r7, #4]
20006c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006c98:	4613      	mov	r3, r2
20006c9a:	00db      	lsls	r3, r3, #3
20006c9c:	4413      	add	r3, r2
20006c9e:	009b      	lsls	r3, r3, #2
20006ca0:	440b      	add	r3, r1
20006ca2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20006ca6:	781b      	ldrb	r3, [r3, #0]
20006ca8:	2b01      	cmp	r3, #1
20006caa:	d12e      	bne.n	20006d0a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20006cac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20006cae:	2b00      	cmp	r3, #0
20006cb0:	da2b      	bge.n	20006d0a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
20006cb2:	69bb      	ldr	r3, [r7, #24]
20006cb4:	0c1a      	lsrs	r2, r3, #16
20006cb6:	687b      	ldr	r3, [r7, #4]
20006cb8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
20006cbc:	4053      	eors	r3, r2
20006cbe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20006cc2:	2b00      	cmp	r3, #0
20006cc4:	d121      	bne.n	20006d0a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
20006cc6:	6879      	ldr	r1, [r7, #4]
20006cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20006cca:	4613      	mov	r3, r2
20006ccc:	00db      	lsls	r3, r3, #3
20006cce:	4413      	add	r3, r2
20006cd0:	009b      	lsls	r3, r3, #2
20006cd2:	440b      	add	r3, r1
20006cd4:	f203 2357 	addw	r3, r3, #599	@ 0x257
20006cd8:	2201      	movs	r2, #1
20006cda:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
20006cdc:	6a3b      	ldr	r3, [r7, #32]
20006cde:	699b      	ldr	r3, [r3, #24]
20006ce0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20006ce4:	6a3b      	ldr	r3, [r7, #32]
20006ce6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
20006ce8:	6a3b      	ldr	r3, [r7, #32]
20006cea:	695b      	ldr	r3, [r3, #20]
20006cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006cf0:	2b00      	cmp	r3, #0
20006cf2:	d10a      	bne.n	20006d0a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
20006cf4:	69fb      	ldr	r3, [r7, #28]
20006cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006cfa:	685b      	ldr	r3, [r3, #4]
20006cfc:	69fa      	ldr	r2, [r7, #28]
20006cfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20006d06:	6053      	str	r3, [r2, #4]
            break;
20006d08:	e008      	b.n	20006d1c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006d0c:	3301      	adds	r3, #1
20006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
20006d10:	687b      	ldr	r3, [r7, #4]
20006d12:	791b      	ldrb	r3, [r3, #4]
20006d14:	461a      	mov	r2, r3
20006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006d18:	4293      	cmp	r3, r2
20006d1a:	d3b3      	bcc.n	20006c84 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
20006d1c:	687b      	ldr	r3, [r7, #4]
20006d1e:	681b      	ldr	r3, [r3, #0]
20006d20:	695a      	ldr	r2, [r3, #20]
20006d22:	687b      	ldr	r3, [r7, #4]
20006d24:	681b      	ldr	r3, [r3, #0]
20006d26:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
20006d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
20006d2c:	687b      	ldr	r3, [r7, #4]
20006d2e:	681b      	ldr	r3, [r3, #0]
20006d30:	4618      	mov	r0, r3
20006d32:	f003 fce5 	bl	2000a700 <USB_ReadInterrupts>
20006d36:	4603      	mov	r3, r0
20006d38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
20006d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20006d40:	d10a      	bne.n	20006d58 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
20006d42:	6878      	ldr	r0, [r7, #4]
20006d44:	f006 f840 	bl	2000cdc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
20006d48:	687b      	ldr	r3, [r7, #4]
20006d4a:	681b      	ldr	r3, [r3, #0]
20006d4c:	695a      	ldr	r2, [r3, #20]
20006d4e:	687b      	ldr	r3, [r7, #4]
20006d50:	681b      	ldr	r3, [r3, #0]
20006d52:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
20006d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
20006d58:	687b      	ldr	r3, [r7, #4]
20006d5a:	681b      	ldr	r3, [r3, #0]
20006d5c:	4618      	mov	r0, r3
20006d5e:	f003 fccf 	bl	2000a700 <USB_ReadInterrupts>
20006d62:	4603      	mov	r3, r0
20006d64:	f003 0304 	and.w	r3, r3, #4
20006d68:	2b04      	cmp	r3, #4
20006d6a:	d115      	bne.n	20006d98 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
20006d6c:	687b      	ldr	r3, [r7, #4]
20006d6e:	681b      	ldr	r3, [r3, #0]
20006d70:	685b      	ldr	r3, [r3, #4]
20006d72:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
20006d74:	69bb      	ldr	r3, [r7, #24]
20006d76:	f003 0304 	and.w	r3, r3, #4
20006d7a:	2b00      	cmp	r3, #0
20006d7c:	d002      	beq.n	20006d84 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
20006d7e:	6878      	ldr	r0, [r7, #4]
20006d80:	f006 f830 	bl	2000cde4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
20006d84:	687b      	ldr	r3, [r7, #4]
20006d86:	681b      	ldr	r3, [r3, #0]
20006d88:	6859      	ldr	r1, [r3, #4]
20006d8a:	687b      	ldr	r3, [r7, #4]
20006d8c:	681b      	ldr	r3, [r3, #0]
20006d8e:	69ba      	ldr	r2, [r7, #24]
20006d90:	430a      	orrs	r2, r1
20006d92:	605a      	str	r2, [r3, #4]
20006d94:	e000      	b.n	20006d98 <HAL_PCD_IRQHandler+0x996>
      return;
20006d96:	bf00      	nop
    }
  }
}
20006d98:	3734      	adds	r7, #52	@ 0x34
20006d9a:	46bd      	mov	sp, r7
20006d9c:	bd90      	pop	{r4, r7, pc}

20006d9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
20006d9e:	b580      	push	{r7, lr}
20006da0:	b082      	sub	sp, #8
20006da2:	af00      	add	r7, sp, #0
20006da4:	6078      	str	r0, [r7, #4]
20006da6:	460b      	mov	r3, r1
20006da8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
20006daa:	687b      	ldr	r3, [r7, #4]
20006dac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20006db0:	2b01      	cmp	r3, #1
20006db2:	d101      	bne.n	20006db8 <HAL_PCD_SetAddress+0x1a>
20006db4:	2302      	movs	r3, #2
20006db6:	e012      	b.n	20006dde <HAL_PCD_SetAddress+0x40>
20006db8:	687b      	ldr	r3, [r7, #4]
20006dba:	2201      	movs	r2, #1
20006dbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
20006dc0:	687b      	ldr	r3, [r7, #4]
20006dc2:	78fa      	ldrb	r2, [r7, #3]
20006dc4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
20006dc6:	687b      	ldr	r3, [r7, #4]
20006dc8:	681b      	ldr	r3, [r3, #0]
20006dca:	78fa      	ldrb	r2, [r7, #3]
20006dcc:	4611      	mov	r1, r2
20006dce:	4618      	mov	r0, r3
20006dd0:	f003 fc2e 	bl	2000a630 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
20006dd4:	687b      	ldr	r3, [r7, #4]
20006dd6:	2200      	movs	r2, #0
20006dd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20006ddc:	2300      	movs	r3, #0
}
20006dde:	4618      	mov	r0, r3
20006de0:	3708      	adds	r7, #8
20006de2:	46bd      	mov	sp, r7
20006de4:	bd80      	pop	{r7, pc}

20006de6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
20006de6:	b580      	push	{r7, lr}
20006de8:	b084      	sub	sp, #16
20006dea:	af00      	add	r7, sp, #0
20006dec:	6078      	str	r0, [r7, #4]
20006dee:	4608      	mov	r0, r1
20006df0:	4611      	mov	r1, r2
20006df2:	461a      	mov	r2, r3
20006df4:	4603      	mov	r3, r0
20006df6:	70fb      	strb	r3, [r7, #3]
20006df8:	460b      	mov	r3, r1
20006dfa:	803b      	strh	r3, [r7, #0]
20006dfc:	4613      	mov	r3, r2
20006dfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
20006e00:	2300      	movs	r3, #0
20006e02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
20006e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
20006e08:	2b00      	cmp	r3, #0
20006e0a:	da0f      	bge.n	20006e2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20006e0c:	78fb      	ldrb	r3, [r7, #3]
20006e0e:	f003 020f 	and.w	r2, r3, #15
20006e12:	4613      	mov	r3, r2
20006e14:	00db      	lsls	r3, r3, #3
20006e16:	4413      	add	r3, r2
20006e18:	009b      	lsls	r3, r3, #2
20006e1a:	3310      	adds	r3, #16
20006e1c:	687a      	ldr	r2, [r7, #4]
20006e1e:	4413      	add	r3, r2
20006e20:	3304      	adds	r3, #4
20006e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20006e24:	68fb      	ldr	r3, [r7, #12]
20006e26:	2201      	movs	r2, #1
20006e28:	705a      	strb	r2, [r3, #1]
20006e2a:	e00f      	b.n	20006e4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20006e2c:	78fb      	ldrb	r3, [r7, #3]
20006e2e:	f003 020f 	and.w	r2, r3, #15
20006e32:	4613      	mov	r3, r2
20006e34:	00db      	lsls	r3, r3, #3
20006e36:	4413      	add	r3, r2
20006e38:	009b      	lsls	r3, r3, #2
20006e3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20006e3e:	687a      	ldr	r2, [r7, #4]
20006e40:	4413      	add	r3, r2
20006e42:	3304      	adds	r3, #4
20006e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20006e46:	68fb      	ldr	r3, [r7, #12]
20006e48:	2200      	movs	r2, #0
20006e4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
20006e4c:	78fb      	ldrb	r3, [r7, #3]
20006e4e:	f003 030f 	and.w	r3, r3, #15
20006e52:	b2da      	uxtb	r2, r3
20006e54:	68fb      	ldr	r3, [r7, #12]
20006e56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
20006e58:	883b      	ldrh	r3, [r7, #0]
20006e5a:	f3c3 020a 	ubfx	r2, r3, #0, #11
20006e5e:	68fb      	ldr	r3, [r7, #12]
20006e60:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
20006e62:	68fb      	ldr	r3, [r7, #12]
20006e64:	78ba      	ldrb	r2, [r7, #2]
20006e66:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
20006e68:	68fb      	ldr	r3, [r7, #12]
20006e6a:	785b      	ldrb	r3, [r3, #1]
20006e6c:	2b00      	cmp	r3, #0
20006e6e:	d004      	beq.n	20006e7a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
20006e70:	68fb      	ldr	r3, [r7, #12]
20006e72:	781b      	ldrb	r3, [r3, #0]
20006e74:	461a      	mov	r2, r3
20006e76:	68fb      	ldr	r3, [r7, #12]
20006e78:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
20006e7a:	78bb      	ldrb	r3, [r7, #2]
20006e7c:	2b02      	cmp	r3, #2
20006e7e:	d102      	bne.n	20006e86 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
20006e80:	68fb      	ldr	r3, [r7, #12]
20006e82:	2200      	movs	r2, #0
20006e84:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
20006e86:	687b      	ldr	r3, [r7, #4]
20006e88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20006e8c:	2b01      	cmp	r3, #1
20006e8e:	d101      	bne.n	20006e94 <HAL_PCD_EP_Open+0xae>
20006e90:	2302      	movs	r3, #2
20006e92:	e00e      	b.n	20006eb2 <HAL_PCD_EP_Open+0xcc>
20006e94:	687b      	ldr	r3, [r7, #4]
20006e96:	2201      	movs	r2, #1
20006e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
20006e9c:	687b      	ldr	r3, [r7, #4]
20006e9e:	681b      	ldr	r3, [r3, #0]
20006ea0:	68f9      	ldr	r1, [r7, #12]
20006ea2:	4618      	mov	r0, r3
20006ea4:	f002 fda8 	bl	200099f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
20006ea8:	687b      	ldr	r3, [r7, #4]
20006eaa:	2200      	movs	r2, #0
20006eac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
20006eb0:	7afb      	ldrb	r3, [r7, #11]
}
20006eb2:	4618      	mov	r0, r3
20006eb4:	3710      	adds	r7, #16
20006eb6:	46bd      	mov	sp, r7
20006eb8:	bd80      	pop	{r7, pc}

20006eba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20006eba:	b580      	push	{r7, lr}
20006ebc:	b084      	sub	sp, #16
20006ebe:	af00      	add	r7, sp, #0
20006ec0:	6078      	str	r0, [r7, #4]
20006ec2:	460b      	mov	r3, r1
20006ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
20006ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
20006eca:	2b00      	cmp	r3, #0
20006ecc:	da0f      	bge.n	20006eee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20006ece:	78fb      	ldrb	r3, [r7, #3]
20006ed0:	f003 020f 	and.w	r2, r3, #15
20006ed4:	4613      	mov	r3, r2
20006ed6:	00db      	lsls	r3, r3, #3
20006ed8:	4413      	add	r3, r2
20006eda:	009b      	lsls	r3, r3, #2
20006edc:	3310      	adds	r3, #16
20006ede:	687a      	ldr	r2, [r7, #4]
20006ee0:	4413      	add	r3, r2
20006ee2:	3304      	adds	r3, #4
20006ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20006ee6:	68fb      	ldr	r3, [r7, #12]
20006ee8:	2201      	movs	r2, #1
20006eea:	705a      	strb	r2, [r3, #1]
20006eec:	e00f      	b.n	20006f0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20006eee:	78fb      	ldrb	r3, [r7, #3]
20006ef0:	f003 020f 	and.w	r2, r3, #15
20006ef4:	4613      	mov	r3, r2
20006ef6:	00db      	lsls	r3, r3, #3
20006ef8:	4413      	add	r3, r2
20006efa:	009b      	lsls	r3, r3, #2
20006efc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20006f00:	687a      	ldr	r2, [r7, #4]
20006f02:	4413      	add	r3, r2
20006f04:	3304      	adds	r3, #4
20006f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20006f08:	68fb      	ldr	r3, [r7, #12]
20006f0a:	2200      	movs	r2, #0
20006f0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
20006f0e:	78fb      	ldrb	r3, [r7, #3]
20006f10:	f003 030f 	and.w	r3, r3, #15
20006f14:	b2da      	uxtb	r2, r3
20006f16:	68fb      	ldr	r3, [r7, #12]
20006f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20006f1a:	687b      	ldr	r3, [r7, #4]
20006f1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20006f20:	2b01      	cmp	r3, #1
20006f22:	d101      	bne.n	20006f28 <HAL_PCD_EP_Close+0x6e>
20006f24:	2302      	movs	r3, #2
20006f26:	e00e      	b.n	20006f46 <HAL_PCD_EP_Close+0x8c>
20006f28:	687b      	ldr	r3, [r7, #4]
20006f2a:	2201      	movs	r2, #1
20006f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
20006f30:	687b      	ldr	r3, [r7, #4]
20006f32:	681b      	ldr	r3, [r3, #0]
20006f34:	68f9      	ldr	r1, [r7, #12]
20006f36:	4618      	mov	r0, r3
20006f38:	f002 fde6 	bl	20009b08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
20006f3c:	687b      	ldr	r3, [r7, #4]
20006f3e:	2200      	movs	r2, #0
20006f40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
20006f44:	2300      	movs	r3, #0
}
20006f46:	4618      	mov	r0, r3
20006f48:	3710      	adds	r7, #16
20006f4a:	46bd      	mov	sp, r7
20006f4c:	bd80      	pop	{r7, pc}

20006f4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20006f4e:	b580      	push	{r7, lr}
20006f50:	b086      	sub	sp, #24
20006f52:	af00      	add	r7, sp, #0
20006f54:	60f8      	str	r0, [r7, #12]
20006f56:	607a      	str	r2, [r7, #4]
20006f58:	603b      	str	r3, [r7, #0]
20006f5a:	460b      	mov	r3, r1
20006f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20006f5e:	7afb      	ldrb	r3, [r7, #11]
20006f60:	f003 020f 	and.w	r2, r3, #15
20006f64:	4613      	mov	r3, r2
20006f66:	00db      	lsls	r3, r3, #3
20006f68:	4413      	add	r3, r2
20006f6a:	009b      	lsls	r3, r3, #2
20006f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20006f70:	68fa      	ldr	r2, [r7, #12]
20006f72:	4413      	add	r3, r2
20006f74:	3304      	adds	r3, #4
20006f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20006f78:	697b      	ldr	r3, [r7, #20]
20006f7a:	687a      	ldr	r2, [r7, #4]
20006f7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20006f7e:	697b      	ldr	r3, [r7, #20]
20006f80:	683a      	ldr	r2, [r7, #0]
20006f82:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
20006f84:	697b      	ldr	r3, [r7, #20]
20006f86:	2200      	movs	r2, #0
20006f88:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
20006f8a:	697b      	ldr	r3, [r7, #20]
20006f8c:	2200      	movs	r2, #0
20006f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20006f90:	7afb      	ldrb	r3, [r7, #11]
20006f92:	f003 030f 	and.w	r3, r3, #15
20006f96:	b2da      	uxtb	r2, r3
20006f98:	697b      	ldr	r3, [r7, #20]
20006f9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20006f9c:	68fb      	ldr	r3, [r7, #12]
20006f9e:	799b      	ldrb	r3, [r3, #6]
20006fa0:	2b01      	cmp	r3, #1
20006fa2:	d102      	bne.n	20006faa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
20006fa4:	687a      	ldr	r2, [r7, #4]
20006fa6:	697b      	ldr	r3, [r7, #20]
20006fa8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
20006faa:	68fb      	ldr	r3, [r7, #12]
20006fac:	6818      	ldr	r0, [r3, #0]
20006fae:	68fb      	ldr	r3, [r7, #12]
20006fb0:	799b      	ldrb	r3, [r3, #6]
20006fb2:	461a      	mov	r2, r3
20006fb4:	6979      	ldr	r1, [r7, #20]
20006fb6:	f002 fe83 	bl	20009cc0 <USB_EPStartXfer>

  return HAL_OK;
20006fba:	2300      	movs	r3, #0
}
20006fbc:	4618      	mov	r0, r3
20006fbe:	3718      	adds	r7, #24
20006fc0:	46bd      	mov	sp, r7
20006fc2:	bd80      	pop	{r7, pc}

20006fc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
20006fc4:	b480      	push	{r7}
20006fc6:	b083      	sub	sp, #12
20006fc8:	af00      	add	r7, sp, #0
20006fca:	6078      	str	r0, [r7, #4]
20006fcc:	460b      	mov	r3, r1
20006fce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
20006fd0:	78fb      	ldrb	r3, [r7, #3]
20006fd2:	f003 020f 	and.w	r2, r3, #15
20006fd6:	6879      	ldr	r1, [r7, #4]
20006fd8:	4613      	mov	r3, r2
20006fda:	00db      	lsls	r3, r3, #3
20006fdc:	4413      	add	r3, r2
20006fde:	009b      	lsls	r3, r3, #2
20006fe0:	440b      	add	r3, r1
20006fe2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
20006fe6:	681b      	ldr	r3, [r3, #0]
}
20006fe8:	4618      	mov	r0, r3
20006fea:	370c      	adds	r7, #12
20006fec:	46bd      	mov	sp, r7
20006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
20006ff2:	4770      	bx	lr

20006ff4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20006ff4:	b580      	push	{r7, lr}
20006ff6:	b086      	sub	sp, #24
20006ff8:	af00      	add	r7, sp, #0
20006ffa:	60f8      	str	r0, [r7, #12]
20006ffc:	607a      	str	r2, [r7, #4]
20006ffe:	603b      	str	r3, [r7, #0]
20007000:	460b      	mov	r3, r1
20007002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20007004:	7afb      	ldrb	r3, [r7, #11]
20007006:	f003 020f 	and.w	r2, r3, #15
2000700a:	4613      	mov	r3, r2
2000700c:	00db      	lsls	r3, r3, #3
2000700e:	4413      	add	r3, r2
20007010:	009b      	lsls	r3, r3, #2
20007012:	3310      	adds	r3, #16
20007014:	68fa      	ldr	r2, [r7, #12]
20007016:	4413      	add	r3, r2
20007018:	3304      	adds	r3, #4
2000701a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
2000701c:	697b      	ldr	r3, [r7, #20]
2000701e:	687a      	ldr	r2, [r7, #4]
20007020:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20007022:	697b      	ldr	r3, [r7, #20]
20007024:	683a      	ldr	r2, [r7, #0]
20007026:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
20007028:	697b      	ldr	r3, [r7, #20]
2000702a:	2200      	movs	r2, #0
2000702c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
2000702e:	697b      	ldr	r3, [r7, #20]
20007030:	2201      	movs	r2, #1
20007032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20007034:	7afb      	ldrb	r3, [r7, #11]
20007036:	f003 030f 	and.w	r3, r3, #15
2000703a:	b2da      	uxtb	r2, r3
2000703c:	697b      	ldr	r3, [r7, #20]
2000703e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20007040:	68fb      	ldr	r3, [r7, #12]
20007042:	799b      	ldrb	r3, [r3, #6]
20007044:	2b01      	cmp	r3, #1
20007046:	d102      	bne.n	2000704e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
20007048:	687a      	ldr	r2, [r7, #4]
2000704a:	697b      	ldr	r3, [r7, #20]
2000704c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
2000704e:	68fb      	ldr	r3, [r7, #12]
20007050:	6818      	ldr	r0, [r3, #0]
20007052:	68fb      	ldr	r3, [r7, #12]
20007054:	799b      	ldrb	r3, [r3, #6]
20007056:	461a      	mov	r2, r3
20007058:	6979      	ldr	r1, [r7, #20]
2000705a:	f002 fe31 	bl	20009cc0 <USB_EPStartXfer>

  return HAL_OK;
2000705e:	2300      	movs	r3, #0
}
20007060:	4618      	mov	r0, r3
20007062:	3718      	adds	r7, #24
20007064:	46bd      	mov	sp, r7
20007066:	bd80      	pop	{r7, pc}

20007068 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20007068:	b580      	push	{r7, lr}
2000706a:	b084      	sub	sp, #16
2000706c:	af00      	add	r7, sp, #0
2000706e:	6078      	str	r0, [r7, #4]
20007070:	460b      	mov	r3, r1
20007072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
20007074:	78fb      	ldrb	r3, [r7, #3]
20007076:	f003 030f 	and.w	r3, r3, #15
2000707a:	687a      	ldr	r2, [r7, #4]
2000707c:	7912      	ldrb	r2, [r2, #4]
2000707e:	4293      	cmp	r3, r2
20007080:	d901      	bls.n	20007086 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
20007082:	2301      	movs	r3, #1
20007084:	e04f      	b.n	20007126 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
20007086:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000708a:	2b00      	cmp	r3, #0
2000708c:	da0f      	bge.n	200070ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
2000708e:	78fb      	ldrb	r3, [r7, #3]
20007090:	f003 020f 	and.w	r2, r3, #15
20007094:	4613      	mov	r3, r2
20007096:	00db      	lsls	r3, r3, #3
20007098:	4413      	add	r3, r2
2000709a:	009b      	lsls	r3, r3, #2
2000709c:	3310      	adds	r3, #16
2000709e:	687a      	ldr	r2, [r7, #4]
200070a0:	4413      	add	r3, r2
200070a2:	3304      	adds	r3, #4
200070a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
200070a6:	68fb      	ldr	r3, [r7, #12]
200070a8:	2201      	movs	r2, #1
200070aa:	705a      	strb	r2, [r3, #1]
200070ac:	e00d      	b.n	200070ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
200070ae:	78fa      	ldrb	r2, [r7, #3]
200070b0:	4613      	mov	r3, r2
200070b2:	00db      	lsls	r3, r3, #3
200070b4:	4413      	add	r3, r2
200070b6:	009b      	lsls	r3, r3, #2
200070b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200070bc:	687a      	ldr	r2, [r7, #4]
200070be:	4413      	add	r3, r2
200070c0:	3304      	adds	r3, #4
200070c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
200070c4:	68fb      	ldr	r3, [r7, #12]
200070c6:	2200      	movs	r2, #0
200070c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
200070ca:	68fb      	ldr	r3, [r7, #12]
200070cc:	2201      	movs	r2, #1
200070ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
200070d0:	78fb      	ldrb	r3, [r7, #3]
200070d2:	f003 030f 	and.w	r3, r3, #15
200070d6:	b2da      	uxtb	r2, r3
200070d8:	68fb      	ldr	r3, [r7, #12]
200070da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
200070dc:	687b      	ldr	r3, [r7, #4]
200070de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200070e2:	2b01      	cmp	r3, #1
200070e4:	d101      	bne.n	200070ea <HAL_PCD_EP_SetStall+0x82>
200070e6:	2302      	movs	r3, #2
200070e8:	e01d      	b.n	20007126 <HAL_PCD_EP_SetStall+0xbe>
200070ea:	687b      	ldr	r3, [r7, #4]
200070ec:	2201      	movs	r2, #1
200070ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
200070f2:	687b      	ldr	r3, [r7, #4]
200070f4:	681b      	ldr	r3, [r3, #0]
200070f6:	68f9      	ldr	r1, [r7, #12]
200070f8:	4618      	mov	r0, r3
200070fa:	f003 f9c5 	bl	2000a488 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
200070fe:	78fb      	ldrb	r3, [r7, #3]
20007100:	f003 030f 	and.w	r3, r3, #15
20007104:	2b00      	cmp	r3, #0
20007106:	d109      	bne.n	2000711c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
20007108:	687b      	ldr	r3, [r7, #4]
2000710a:	6818      	ldr	r0, [r3, #0]
2000710c:	687b      	ldr	r3, [r7, #4]
2000710e:	7999      	ldrb	r1, [r3, #6]
20007110:	687b      	ldr	r3, [r7, #4]
20007112:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20007116:	461a      	mov	r2, r3
20007118:	f003 fbb8 	bl	2000a88c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
2000711c:	687b      	ldr	r3, [r7, #4]
2000711e:	2200      	movs	r2, #0
20007120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20007124:	2300      	movs	r3, #0
}
20007126:	4618      	mov	r0, r3
20007128:	3710      	adds	r7, #16
2000712a:	46bd      	mov	sp, r7
2000712c:	bd80      	pop	{r7, pc}

2000712e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
2000712e:	b580      	push	{r7, lr}
20007130:	b084      	sub	sp, #16
20007132:	af00      	add	r7, sp, #0
20007134:	6078      	str	r0, [r7, #4]
20007136:	460b      	mov	r3, r1
20007138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
2000713a:	78fb      	ldrb	r3, [r7, #3]
2000713c:	f003 030f 	and.w	r3, r3, #15
20007140:	687a      	ldr	r2, [r7, #4]
20007142:	7912      	ldrb	r2, [r2, #4]
20007144:	4293      	cmp	r3, r2
20007146:	d901      	bls.n	2000714c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
20007148:	2301      	movs	r3, #1
2000714a:	e042      	b.n	200071d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
2000714c:	f997 3003 	ldrsb.w	r3, [r7, #3]
20007150:	2b00      	cmp	r3, #0
20007152:	da0f      	bge.n	20007174 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20007154:	78fb      	ldrb	r3, [r7, #3]
20007156:	f003 020f 	and.w	r2, r3, #15
2000715a:	4613      	mov	r3, r2
2000715c:	00db      	lsls	r3, r3, #3
2000715e:	4413      	add	r3, r2
20007160:	009b      	lsls	r3, r3, #2
20007162:	3310      	adds	r3, #16
20007164:	687a      	ldr	r2, [r7, #4]
20007166:	4413      	add	r3, r2
20007168:	3304      	adds	r3, #4
2000716a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
2000716c:	68fb      	ldr	r3, [r7, #12]
2000716e:	2201      	movs	r2, #1
20007170:	705a      	strb	r2, [r3, #1]
20007172:	e00f      	b.n	20007194 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20007174:	78fb      	ldrb	r3, [r7, #3]
20007176:	f003 020f 	and.w	r2, r3, #15
2000717a:	4613      	mov	r3, r2
2000717c:	00db      	lsls	r3, r3, #3
2000717e:	4413      	add	r3, r2
20007180:	009b      	lsls	r3, r3, #2
20007182:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20007186:	687a      	ldr	r2, [r7, #4]
20007188:	4413      	add	r3, r2
2000718a:	3304      	adds	r3, #4
2000718c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
2000718e:	68fb      	ldr	r3, [r7, #12]
20007190:	2200      	movs	r2, #0
20007192:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
20007194:	68fb      	ldr	r3, [r7, #12]
20007196:	2200      	movs	r2, #0
20007198:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
2000719a:	78fb      	ldrb	r3, [r7, #3]
2000719c:	f003 030f 	and.w	r3, r3, #15
200071a0:	b2da      	uxtb	r2, r3
200071a2:	68fb      	ldr	r3, [r7, #12]
200071a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
200071a6:	687b      	ldr	r3, [r7, #4]
200071a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200071ac:	2b01      	cmp	r3, #1
200071ae:	d101      	bne.n	200071b4 <HAL_PCD_EP_ClrStall+0x86>
200071b0:	2302      	movs	r3, #2
200071b2:	e00e      	b.n	200071d2 <HAL_PCD_EP_ClrStall+0xa4>
200071b4:	687b      	ldr	r3, [r7, #4]
200071b6:	2201      	movs	r2, #1
200071b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
200071bc:	687b      	ldr	r3, [r7, #4]
200071be:	681b      	ldr	r3, [r3, #0]
200071c0:	68f9      	ldr	r1, [r7, #12]
200071c2:	4618      	mov	r0, r3
200071c4:	f003 f9ce 	bl	2000a564 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
200071c8:	687b      	ldr	r3, [r7, #4]
200071ca:	2200      	movs	r2, #0
200071cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
200071d0:	2300      	movs	r3, #0
}
200071d2:	4618      	mov	r0, r3
200071d4:	3710      	adds	r7, #16
200071d6:	46bd      	mov	sp, r7
200071d8:	bd80      	pop	{r7, pc}

200071da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
200071da:	b580      	push	{r7, lr}
200071dc:	b084      	sub	sp, #16
200071de:	af00      	add	r7, sp, #0
200071e0:	6078      	str	r0, [r7, #4]
200071e2:	460b      	mov	r3, r1
200071e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
200071e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
200071ea:	2b00      	cmp	r3, #0
200071ec:	da0c      	bge.n	20007208 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
200071ee:	78fb      	ldrb	r3, [r7, #3]
200071f0:	f003 020f 	and.w	r2, r3, #15
200071f4:	4613      	mov	r3, r2
200071f6:	00db      	lsls	r3, r3, #3
200071f8:	4413      	add	r3, r2
200071fa:	009b      	lsls	r3, r3, #2
200071fc:	3310      	adds	r3, #16
200071fe:	687a      	ldr	r2, [r7, #4]
20007200:	4413      	add	r3, r2
20007202:	3304      	adds	r3, #4
20007204:	60fb      	str	r3, [r7, #12]
20007206:	e00c      	b.n	20007222 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20007208:	78fb      	ldrb	r3, [r7, #3]
2000720a:	f003 020f 	and.w	r2, r3, #15
2000720e:	4613      	mov	r3, r2
20007210:	00db      	lsls	r3, r3, #3
20007212:	4413      	add	r3, r2
20007214:	009b      	lsls	r3, r3, #2
20007216:	f503 7314 	add.w	r3, r3, #592	@ 0x250
2000721a:	687a      	ldr	r2, [r7, #4]
2000721c:	4413      	add	r3, r2
2000721e:	3304      	adds	r3, #4
20007220:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
20007222:	687b      	ldr	r3, [r7, #4]
20007224:	681b      	ldr	r3, [r3, #0]
20007226:	68f9      	ldr	r1, [r7, #12]
20007228:	4618      	mov	r0, r3
2000722a:	f002 ffed 	bl	2000a208 <USB_EPStopXfer>
2000722e:	4603      	mov	r3, r0
20007230:	72fb      	strb	r3, [r7, #11]

  return ret;
20007232:	7afb      	ldrb	r3, [r7, #11]
}
20007234:	4618      	mov	r0, r3
20007236:	3710      	adds	r7, #16
20007238:	46bd      	mov	sp, r7
2000723a:	bd80      	pop	{r7, pc}

2000723c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
2000723c:	b580      	push	{r7, lr}
2000723e:	b08a      	sub	sp, #40	@ 0x28
20007240:	af02      	add	r7, sp, #8
20007242:	6078      	str	r0, [r7, #4]
20007244:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20007246:	687b      	ldr	r3, [r7, #4]
20007248:	681b      	ldr	r3, [r3, #0]
2000724a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000724c:	697b      	ldr	r3, [r7, #20]
2000724e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
20007250:	683a      	ldr	r2, [r7, #0]
20007252:	4613      	mov	r3, r2
20007254:	00db      	lsls	r3, r3, #3
20007256:	4413      	add	r3, r2
20007258:	009b      	lsls	r3, r3, #2
2000725a:	3310      	adds	r3, #16
2000725c:	687a      	ldr	r2, [r7, #4]
2000725e:	4413      	add	r3, r2
20007260:	3304      	adds	r3, #4
20007262:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
20007264:	68fb      	ldr	r3, [r7, #12]
20007266:	695a      	ldr	r2, [r3, #20]
20007268:	68fb      	ldr	r3, [r7, #12]
2000726a:	691b      	ldr	r3, [r3, #16]
2000726c:	429a      	cmp	r2, r3
2000726e:	d901      	bls.n	20007274 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
20007270:	2301      	movs	r3, #1
20007272:	e06b      	b.n	2000734c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
20007274:	68fb      	ldr	r3, [r7, #12]
20007276:	691a      	ldr	r2, [r3, #16]
20007278:	68fb      	ldr	r3, [r7, #12]
2000727a:	695b      	ldr	r3, [r3, #20]
2000727c:	1ad3      	subs	r3, r2, r3
2000727e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
20007280:	68fb      	ldr	r3, [r7, #12]
20007282:	689b      	ldr	r3, [r3, #8]
20007284:	69fa      	ldr	r2, [r7, #28]
20007286:	429a      	cmp	r2, r3
20007288:	d902      	bls.n	20007290 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
2000728a:	68fb      	ldr	r3, [r7, #12]
2000728c:	689b      	ldr	r3, [r3, #8]
2000728e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
20007290:	69fb      	ldr	r3, [r7, #28]
20007292:	3303      	adds	r3, #3
20007294:	089b      	lsrs	r3, r3, #2
20007296:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20007298:	e02a      	b.n	200072f0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
2000729a:	68fb      	ldr	r3, [r7, #12]
2000729c:	691a      	ldr	r2, [r3, #16]
2000729e:	68fb      	ldr	r3, [r7, #12]
200072a0:	695b      	ldr	r3, [r3, #20]
200072a2:	1ad3      	subs	r3, r2, r3
200072a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
200072a6:	68fb      	ldr	r3, [r7, #12]
200072a8:	689b      	ldr	r3, [r3, #8]
200072aa:	69fa      	ldr	r2, [r7, #28]
200072ac:	429a      	cmp	r2, r3
200072ae:	d902      	bls.n	200072b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
200072b0:	68fb      	ldr	r3, [r7, #12]
200072b2:	689b      	ldr	r3, [r3, #8]
200072b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
200072b6:	69fb      	ldr	r3, [r7, #28]
200072b8:	3303      	adds	r3, #3
200072ba:	089b      	lsrs	r3, r3, #2
200072bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
200072be:	68fb      	ldr	r3, [r7, #12]
200072c0:	68d9      	ldr	r1, [r3, #12]
200072c2:	683b      	ldr	r3, [r7, #0]
200072c4:	b2da      	uxtb	r2, r3
200072c6:	69fb      	ldr	r3, [r7, #28]
200072c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
200072ca:	687b      	ldr	r3, [r7, #4]
200072cc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
200072ce:	9300      	str	r3, [sp, #0]
200072d0:	4603      	mov	r3, r0
200072d2:	6978      	ldr	r0, [r7, #20]
200072d4:	f003 f842 	bl	2000a35c <USB_WritePacket>

    ep->xfer_buff  += len;
200072d8:	68fb      	ldr	r3, [r7, #12]
200072da:	68da      	ldr	r2, [r3, #12]
200072dc:	69fb      	ldr	r3, [r7, #28]
200072de:	441a      	add	r2, r3
200072e0:	68fb      	ldr	r3, [r7, #12]
200072e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
200072e4:	68fb      	ldr	r3, [r7, #12]
200072e6:	695a      	ldr	r2, [r3, #20]
200072e8:	69fb      	ldr	r3, [r7, #28]
200072ea:	441a      	add	r2, r3
200072ec:	68fb      	ldr	r3, [r7, #12]
200072ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
200072f0:	683b      	ldr	r3, [r7, #0]
200072f2:	015a      	lsls	r2, r3, #5
200072f4:	693b      	ldr	r3, [r7, #16]
200072f6:	4413      	add	r3, r2
200072f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200072fc:	699b      	ldr	r3, [r3, #24]
200072fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
20007300:	69ba      	ldr	r2, [r7, #24]
20007302:	429a      	cmp	r2, r3
20007304:	d809      	bhi.n	2000731a <PCD_WriteEmptyTxFifo+0xde>
20007306:	68fb      	ldr	r3, [r7, #12]
20007308:	695a      	ldr	r2, [r3, #20]
2000730a:	68fb      	ldr	r3, [r7, #12]
2000730c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
2000730e:	429a      	cmp	r2, r3
20007310:	d203      	bcs.n	2000731a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
20007312:	68fb      	ldr	r3, [r7, #12]
20007314:	691b      	ldr	r3, [r3, #16]
20007316:	2b00      	cmp	r3, #0
20007318:	d1bf      	bne.n	2000729a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
2000731a:	68fb      	ldr	r3, [r7, #12]
2000731c:	691a      	ldr	r2, [r3, #16]
2000731e:	68fb      	ldr	r3, [r7, #12]
20007320:	695b      	ldr	r3, [r3, #20]
20007322:	429a      	cmp	r2, r3
20007324:	d811      	bhi.n	2000734a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
20007326:	683b      	ldr	r3, [r7, #0]
20007328:	f003 030f 	and.w	r3, r3, #15
2000732c:	2201      	movs	r2, #1
2000732e:	fa02 f303 	lsl.w	r3, r2, r3
20007332:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
20007334:	693b      	ldr	r3, [r7, #16]
20007336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000733a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2000733c:	68bb      	ldr	r3, [r7, #8]
2000733e:	43db      	mvns	r3, r3
20007340:	6939      	ldr	r1, [r7, #16]
20007342:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20007346:	4013      	ands	r3, r2
20007348:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
2000734a:	2300      	movs	r3, #0
}
2000734c:	4618      	mov	r0, r3
2000734e:	3720      	adds	r7, #32
20007350:	46bd      	mov	sp, r7
20007352:	bd80      	pop	{r7, pc}

20007354 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20007354:	b580      	push	{r7, lr}
20007356:	b088      	sub	sp, #32
20007358:	af00      	add	r7, sp, #0
2000735a:	6078      	str	r0, [r7, #4]
2000735c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
2000735e:	687b      	ldr	r3, [r7, #4]
20007360:	681b      	ldr	r3, [r3, #0]
20007362:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
20007364:	69fb      	ldr	r3, [r7, #28]
20007366:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20007368:	69fb      	ldr	r3, [r7, #28]
2000736a:	333c      	adds	r3, #60	@ 0x3c
2000736c:	3304      	adds	r3, #4
2000736e:	681b      	ldr	r3, [r3, #0]
20007370:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
20007372:	683b      	ldr	r3, [r7, #0]
20007374:	015a      	lsls	r2, r3, #5
20007376:	69bb      	ldr	r3, [r7, #24]
20007378:	4413      	add	r3, r2
2000737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000737e:	689b      	ldr	r3, [r3, #8]
20007380:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
20007382:	687b      	ldr	r3, [r7, #4]
20007384:	799b      	ldrb	r3, [r3, #6]
20007386:	2b01      	cmp	r3, #1
20007388:	d17b      	bne.n	20007482 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
2000738a:	693b      	ldr	r3, [r7, #16]
2000738c:	f003 0308 	and.w	r3, r3, #8
20007390:	2b00      	cmp	r3, #0
20007392:	d015      	beq.n	200073c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20007394:	697b      	ldr	r3, [r7, #20]
20007396:	4a61      	ldr	r2, [pc, #388]	@ (2000751c <PCD_EP_OutXfrComplete_int+0x1c8>)
20007398:	4293      	cmp	r3, r2
2000739a:	f240 80b9 	bls.w	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
2000739e:	693b      	ldr	r3, [r7, #16]
200073a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200073a4:	2b00      	cmp	r3, #0
200073a6:	f000 80b3 	beq.w	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
200073aa:	683b      	ldr	r3, [r7, #0]
200073ac:	015a      	lsls	r2, r3, #5
200073ae:	69bb      	ldr	r3, [r7, #24]
200073b0:	4413      	add	r3, r2
200073b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200073b6:	461a      	mov	r2, r3
200073b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200073bc:	6093      	str	r3, [r2, #8]
200073be:	e0a7      	b.n	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
200073c0:	693b      	ldr	r3, [r7, #16]
200073c2:	f003 0320 	and.w	r3, r3, #32
200073c6:	2b00      	cmp	r3, #0
200073c8:	d009      	beq.n	200073de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
200073ca:	683b      	ldr	r3, [r7, #0]
200073cc:	015a      	lsls	r2, r3, #5
200073ce:	69bb      	ldr	r3, [r7, #24]
200073d0:	4413      	add	r3, r2
200073d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200073d6:	461a      	mov	r2, r3
200073d8:	2320      	movs	r3, #32
200073da:	6093      	str	r3, [r2, #8]
200073dc:	e098      	b.n	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
200073de:	693b      	ldr	r3, [r7, #16]
200073e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
200073e4:	2b00      	cmp	r3, #0
200073e6:	f040 8093 	bne.w	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200073ea:	697b      	ldr	r3, [r7, #20]
200073ec:	4a4b      	ldr	r2, [pc, #300]	@ (2000751c <PCD_EP_OutXfrComplete_int+0x1c8>)
200073ee:	4293      	cmp	r3, r2
200073f0:	d90f      	bls.n	20007412 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
200073f2:	693b      	ldr	r3, [r7, #16]
200073f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200073f8:	2b00      	cmp	r3, #0
200073fa:	d00a      	beq.n	20007412 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
200073fc:	683b      	ldr	r3, [r7, #0]
200073fe:	015a      	lsls	r2, r3, #5
20007400:	69bb      	ldr	r3, [r7, #24]
20007402:	4413      	add	r3, r2
20007404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007408:	461a      	mov	r2, r3
2000740a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
2000740e:	6093      	str	r3, [r2, #8]
20007410:	e07e      	b.n	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
20007412:	683a      	ldr	r2, [r7, #0]
20007414:	4613      	mov	r3, r2
20007416:	00db      	lsls	r3, r3, #3
20007418:	4413      	add	r3, r2
2000741a:	009b      	lsls	r3, r3, #2
2000741c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20007420:	687a      	ldr	r2, [r7, #4]
20007422:	4413      	add	r3, r2
20007424:	3304      	adds	r3, #4
20007426:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
20007428:	68fb      	ldr	r3, [r7, #12]
2000742a:	6a1a      	ldr	r2, [r3, #32]
2000742c:	683b      	ldr	r3, [r7, #0]
2000742e:	0159      	lsls	r1, r3, #5
20007430:	69bb      	ldr	r3, [r7, #24]
20007432:	440b      	add	r3, r1
20007434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007438:	691b      	ldr	r3, [r3, #16]
2000743a:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000743e:	1ad2      	subs	r2, r2, r3
20007440:	68fb      	ldr	r3, [r7, #12]
20007442:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
20007444:	683b      	ldr	r3, [r7, #0]
20007446:	2b00      	cmp	r3, #0
20007448:	d114      	bne.n	20007474 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
2000744a:	68fb      	ldr	r3, [r7, #12]
2000744c:	691b      	ldr	r3, [r3, #16]
2000744e:	2b00      	cmp	r3, #0
20007450:	d109      	bne.n	20007466 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
20007452:	687b      	ldr	r3, [r7, #4]
20007454:	6818      	ldr	r0, [r3, #0]
20007456:	687b      	ldr	r3, [r7, #4]
20007458:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000745c:	461a      	mov	r2, r3
2000745e:	2101      	movs	r1, #1
20007460:	f003 fa14 	bl	2000a88c <USB_EP0_OutStart>
20007464:	e006      	b.n	20007474 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
20007466:	68fb      	ldr	r3, [r7, #12]
20007468:	68da      	ldr	r2, [r3, #12]
2000746a:	68fb      	ldr	r3, [r7, #12]
2000746c:	695b      	ldr	r3, [r3, #20]
2000746e:	441a      	add	r2, r3
20007470:	68fb      	ldr	r3, [r7, #12]
20007472:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20007474:	683b      	ldr	r3, [r7, #0]
20007476:	b2db      	uxtb	r3, r3
20007478:	4619      	mov	r1, r3
2000747a:	6878      	ldr	r0, [r7, #4]
2000747c:	f005 fbe0 	bl	2000cc40 <HAL_PCD_DataOutStageCallback>
20007480:	e046      	b.n	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
20007482:	697b      	ldr	r3, [r7, #20]
20007484:	4a26      	ldr	r2, [pc, #152]	@ (20007520 <PCD_EP_OutXfrComplete_int+0x1cc>)
20007486:	4293      	cmp	r3, r2
20007488:	d124      	bne.n	200074d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
2000748a:	693b      	ldr	r3, [r7, #16]
2000748c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20007490:	2b00      	cmp	r3, #0
20007492:	d00a      	beq.n	200074aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20007494:	683b      	ldr	r3, [r7, #0]
20007496:	015a      	lsls	r2, r3, #5
20007498:	69bb      	ldr	r3, [r7, #24]
2000749a:	4413      	add	r3, r2
2000749c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200074a0:	461a      	mov	r2, r3
200074a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200074a6:	6093      	str	r3, [r2, #8]
200074a8:	e032      	b.n	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
200074aa:	693b      	ldr	r3, [r7, #16]
200074ac:	f003 0320 	and.w	r3, r3, #32
200074b0:	2b00      	cmp	r3, #0
200074b2:	d008      	beq.n	200074c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
200074b4:	683b      	ldr	r3, [r7, #0]
200074b6:	015a      	lsls	r2, r3, #5
200074b8:	69bb      	ldr	r3, [r7, #24]
200074ba:	4413      	add	r3, r2
200074bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200074c0:	461a      	mov	r2, r3
200074c2:	2320      	movs	r3, #32
200074c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
200074c6:	683b      	ldr	r3, [r7, #0]
200074c8:	b2db      	uxtb	r3, r3
200074ca:	4619      	mov	r1, r3
200074cc:	6878      	ldr	r0, [r7, #4]
200074ce:	f005 fbb7 	bl	2000cc40 <HAL_PCD_DataOutStageCallback>
200074d2:	e01d      	b.n	20007510 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
200074d4:	683b      	ldr	r3, [r7, #0]
200074d6:	2b00      	cmp	r3, #0
200074d8:	d114      	bne.n	20007504 <PCD_EP_OutXfrComplete_int+0x1b0>
200074da:	6879      	ldr	r1, [r7, #4]
200074dc:	683a      	ldr	r2, [r7, #0]
200074de:	4613      	mov	r3, r2
200074e0:	00db      	lsls	r3, r3, #3
200074e2:	4413      	add	r3, r2
200074e4:	009b      	lsls	r3, r3, #2
200074e6:	440b      	add	r3, r1
200074e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
200074ec:	681b      	ldr	r3, [r3, #0]
200074ee:	2b00      	cmp	r3, #0
200074f0:	d108      	bne.n	20007504 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
200074f2:	687b      	ldr	r3, [r7, #4]
200074f4:	6818      	ldr	r0, [r3, #0]
200074f6:	687b      	ldr	r3, [r7, #4]
200074f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
200074fc:	461a      	mov	r2, r3
200074fe:	2100      	movs	r1, #0
20007500:	f003 f9c4 	bl	2000a88c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20007504:	683b      	ldr	r3, [r7, #0]
20007506:	b2db      	uxtb	r3, r3
20007508:	4619      	mov	r1, r3
2000750a:	6878      	ldr	r0, [r7, #4]
2000750c:	f005 fb98 	bl	2000cc40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
20007510:	2300      	movs	r3, #0
}
20007512:	4618      	mov	r0, r3
20007514:	3720      	adds	r7, #32
20007516:	46bd      	mov	sp, r7
20007518:	bd80      	pop	{r7, pc}
2000751a:	bf00      	nop
2000751c:	4f54300a 	.word	0x4f54300a
20007520:	4f54310a 	.word	0x4f54310a

20007524 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20007524:	b580      	push	{r7, lr}
20007526:	b086      	sub	sp, #24
20007528:	af00      	add	r7, sp, #0
2000752a:	6078      	str	r0, [r7, #4]
2000752c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
2000752e:	687b      	ldr	r3, [r7, #4]
20007530:	681b      	ldr	r3, [r3, #0]
20007532:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
20007534:	697b      	ldr	r3, [r7, #20]
20007536:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20007538:	697b      	ldr	r3, [r7, #20]
2000753a:	333c      	adds	r3, #60	@ 0x3c
2000753c:	3304      	adds	r3, #4
2000753e:	681b      	ldr	r3, [r3, #0]
20007540:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
20007542:	683b      	ldr	r3, [r7, #0]
20007544:	015a      	lsls	r2, r3, #5
20007546:	693b      	ldr	r3, [r7, #16]
20007548:	4413      	add	r3, r2
2000754a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000754e:	689b      	ldr	r3, [r3, #8]
20007550:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20007552:	68fb      	ldr	r3, [r7, #12]
20007554:	4a15      	ldr	r2, [pc, #84]	@ (200075ac <PCD_EP_OutSetupPacket_int+0x88>)
20007556:	4293      	cmp	r3, r2
20007558:	d90e      	bls.n	20007578 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
2000755a:	68bb      	ldr	r3, [r7, #8]
2000755c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20007560:	2b00      	cmp	r3, #0
20007562:	d009      	beq.n	20007578 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20007564:	683b      	ldr	r3, [r7, #0]
20007566:	015a      	lsls	r2, r3, #5
20007568:	693b      	ldr	r3, [r7, #16]
2000756a:	4413      	add	r3, r2
2000756c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007570:	461a      	mov	r2, r3
20007572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20007576:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
20007578:	6878      	ldr	r0, [r7, #4]
2000757a:	f005 fb4f 	bl	2000cc1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
2000757e:	68fb      	ldr	r3, [r7, #12]
20007580:	4a0a      	ldr	r2, [pc, #40]	@ (200075ac <PCD_EP_OutSetupPacket_int+0x88>)
20007582:	4293      	cmp	r3, r2
20007584:	d90c      	bls.n	200075a0 <PCD_EP_OutSetupPacket_int+0x7c>
20007586:	687b      	ldr	r3, [r7, #4]
20007588:	799b      	ldrb	r3, [r3, #6]
2000758a:	2b01      	cmp	r3, #1
2000758c:	d108      	bne.n	200075a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
2000758e:	687b      	ldr	r3, [r7, #4]
20007590:	6818      	ldr	r0, [r3, #0]
20007592:	687b      	ldr	r3, [r7, #4]
20007594:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20007598:	461a      	mov	r2, r3
2000759a:	2101      	movs	r1, #1
2000759c:	f003 f976 	bl	2000a88c <USB_EP0_OutStart>
  }

  return HAL_OK;
200075a0:	2300      	movs	r3, #0
}
200075a2:	4618      	mov	r0, r3
200075a4:	3718      	adds	r7, #24
200075a6:	46bd      	mov	sp, r7
200075a8:	bd80      	pop	{r7, pc}
200075aa:	bf00      	nop
200075ac:	4f54300a 	.word	0x4f54300a

200075b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
200075b0:	b480      	push	{r7}
200075b2:	b085      	sub	sp, #20
200075b4:	af00      	add	r7, sp, #0
200075b6:	6078      	str	r0, [r7, #4]
200075b8:	460b      	mov	r3, r1
200075ba:	70fb      	strb	r3, [r7, #3]
200075bc:	4613      	mov	r3, r2
200075be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
200075c0:	687b      	ldr	r3, [r7, #4]
200075c2:	681b      	ldr	r3, [r3, #0]
200075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200075c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
200075c8:	78fb      	ldrb	r3, [r7, #3]
200075ca:	2b00      	cmp	r3, #0
200075cc:	d107      	bne.n	200075de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
200075ce:	883b      	ldrh	r3, [r7, #0]
200075d0:	0419      	lsls	r1, r3, #16
200075d2:	687b      	ldr	r3, [r7, #4]
200075d4:	681b      	ldr	r3, [r3, #0]
200075d6:	68ba      	ldr	r2, [r7, #8]
200075d8:	430a      	orrs	r2, r1
200075da:	629a      	str	r2, [r3, #40]	@ 0x28
200075dc:	e028      	b.n	20007630 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
200075de:	687b      	ldr	r3, [r7, #4]
200075e0:	681b      	ldr	r3, [r3, #0]
200075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200075e4:	0c1b      	lsrs	r3, r3, #16
200075e6:	68ba      	ldr	r2, [r7, #8]
200075e8:	4413      	add	r3, r2
200075ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
200075ec:	2300      	movs	r3, #0
200075ee:	73fb      	strb	r3, [r7, #15]
200075f0:	e00d      	b.n	2000760e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
200075f2:	687b      	ldr	r3, [r7, #4]
200075f4:	681a      	ldr	r2, [r3, #0]
200075f6:	7bfb      	ldrb	r3, [r7, #15]
200075f8:	3340      	adds	r3, #64	@ 0x40
200075fa:	009b      	lsls	r3, r3, #2
200075fc:	4413      	add	r3, r2
200075fe:	685b      	ldr	r3, [r3, #4]
20007600:	0c1b      	lsrs	r3, r3, #16
20007602:	68ba      	ldr	r2, [r7, #8]
20007604:	4413      	add	r3, r2
20007606:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20007608:	7bfb      	ldrb	r3, [r7, #15]
2000760a:	3301      	adds	r3, #1
2000760c:	73fb      	strb	r3, [r7, #15]
2000760e:	7bfa      	ldrb	r2, [r7, #15]
20007610:	78fb      	ldrb	r3, [r7, #3]
20007612:	3b01      	subs	r3, #1
20007614:	429a      	cmp	r2, r3
20007616:	d3ec      	bcc.n	200075f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
20007618:	883b      	ldrh	r3, [r7, #0]
2000761a:	0418      	lsls	r0, r3, #16
2000761c:	687b      	ldr	r3, [r7, #4]
2000761e:	6819      	ldr	r1, [r3, #0]
20007620:	78fb      	ldrb	r3, [r7, #3]
20007622:	3b01      	subs	r3, #1
20007624:	68ba      	ldr	r2, [r7, #8]
20007626:	4302      	orrs	r2, r0
20007628:	3340      	adds	r3, #64	@ 0x40
2000762a:	009b      	lsls	r3, r3, #2
2000762c:	440b      	add	r3, r1
2000762e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
20007630:	2300      	movs	r3, #0
}
20007632:	4618      	mov	r0, r3
20007634:	3714      	adds	r7, #20
20007636:	46bd      	mov	sp, r7
20007638:	f85d 7b04 	ldr.w	r7, [sp], #4
2000763c:	4770      	bx	lr

2000763e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
2000763e:	b480      	push	{r7}
20007640:	b083      	sub	sp, #12
20007642:	af00      	add	r7, sp, #0
20007644:	6078      	str	r0, [r7, #4]
20007646:	460b      	mov	r3, r1
20007648:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
2000764a:	687b      	ldr	r3, [r7, #4]
2000764c:	681b      	ldr	r3, [r3, #0]
2000764e:	887a      	ldrh	r2, [r7, #2]
20007650:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
20007652:	2300      	movs	r3, #0
}
20007654:	4618      	mov	r0, r3
20007656:	370c      	adds	r7, #12
20007658:	46bd      	mov	sp, r7
2000765a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000765e:	4770      	bx	lr

20007660 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
20007660:	b480      	push	{r7}
20007662:	b085      	sub	sp, #20
20007664:	af00      	add	r7, sp, #0
20007666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20007668:	687b      	ldr	r3, [r7, #4]
2000766a:	681b      	ldr	r3, [r3, #0]
2000766c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
2000766e:	687b      	ldr	r3, [r7, #4]
20007670:	2201      	movs	r2, #1
20007672:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
20007676:	687b      	ldr	r3, [r7, #4]
20007678:	2200      	movs	r2, #0
2000767a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
2000767e:	68fb      	ldr	r3, [r7, #12]
20007680:	699b      	ldr	r3, [r3, #24]
20007682:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
20007686:	68fb      	ldr	r3, [r7, #12]
20007688:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
2000768a:	68fb      	ldr	r3, [r7, #12]
2000768c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
2000768e:	4b05      	ldr	r3, [pc, #20]	@ (200076a4 <HAL_PCDEx_ActivateLPM+0x44>)
20007690:	4313      	orrs	r3, r2
20007692:	68fa      	ldr	r2, [r7, #12]
20007694:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
20007696:	2300      	movs	r3, #0
}
20007698:	4618      	mov	r0, r3
2000769a:	3714      	adds	r7, #20
2000769c:	46bd      	mov	sp, r7
2000769e:	f85d 7b04 	ldr.w	r7, [sp], #4
200076a2:	4770      	bx	lr
200076a4:	10000003 	.word	0x10000003

200076a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
200076a8:	b480      	push	{r7}
200076aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
200076ac:	4b05      	ldr	r3, [pc, #20]	@ (200076c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
200076ae:	681b      	ldr	r3, [r3, #0]
200076b0:	4a04      	ldr	r2, [pc, #16]	@ (200076c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
200076b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200076b6:	6013      	str	r3, [r2, #0]
}
200076b8:	bf00      	nop
200076ba:	46bd      	mov	sp, r7
200076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200076c0:	4770      	bx	lr
200076c2:	bf00      	nop
200076c4:	40007000 	.word	0x40007000

200076c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
200076c8:	b580      	push	{r7, lr}
200076ca:	b082      	sub	sp, #8
200076cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
200076ce:	2300      	movs	r3, #0
200076d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
200076d2:	4b23      	ldr	r3, [pc, #140]	@ (20007760 <HAL_PWREx_EnableOverDrive+0x98>)
200076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200076d6:	4a22      	ldr	r2, [pc, #136]	@ (20007760 <HAL_PWREx_EnableOverDrive+0x98>)
200076d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200076dc:	6413      	str	r3, [r2, #64]	@ 0x40
200076de:	4b20      	ldr	r3, [pc, #128]	@ (20007760 <HAL_PWREx_EnableOverDrive+0x98>)
200076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200076e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200076e6:	603b      	str	r3, [r7, #0]
200076e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
200076ea:	4b1e      	ldr	r3, [pc, #120]	@ (20007764 <HAL_PWREx_EnableOverDrive+0x9c>)
200076ec:	681b      	ldr	r3, [r3, #0]
200076ee:	4a1d      	ldr	r2, [pc, #116]	@ (20007764 <HAL_PWREx_EnableOverDrive+0x9c>)
200076f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200076f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200076f6:	f7fd fedf 	bl	200054b8 <HAL_GetTick>
200076fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200076fc:	e009      	b.n	20007712 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
200076fe:	f7fd fedb 	bl	200054b8 <HAL_GetTick>
20007702:	4602      	mov	r2, r0
20007704:	687b      	ldr	r3, [r7, #4]
20007706:	1ad3      	subs	r3, r2, r3
20007708:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
2000770c:	d901      	bls.n	20007712 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
2000770e:	2303      	movs	r3, #3
20007710:	e022      	b.n	20007758 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007712:	4b14      	ldr	r3, [pc, #80]	@ (20007764 <HAL_PWREx_EnableOverDrive+0x9c>)
20007714:	685b      	ldr	r3, [r3, #4]
20007716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2000771a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2000771e:	d1ee      	bne.n	200076fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20007720:	4b10      	ldr	r3, [pc, #64]	@ (20007764 <HAL_PWREx_EnableOverDrive+0x9c>)
20007722:	681b      	ldr	r3, [r3, #0]
20007724:	4a0f      	ldr	r2, [pc, #60]	@ (20007764 <HAL_PWREx_EnableOverDrive+0x9c>)
20007726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2000772a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000772c:	f7fd fec4 	bl	200054b8 <HAL_GetTick>
20007730:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007732:	e009      	b.n	20007748 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20007734:	f7fd fec0 	bl	200054b8 <HAL_GetTick>
20007738:	4602      	mov	r2, r0
2000773a:	687b      	ldr	r3, [r7, #4]
2000773c:	1ad3      	subs	r3, r2, r3
2000773e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20007742:	d901      	bls.n	20007748 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
20007744:	2303      	movs	r3, #3
20007746:	e007      	b.n	20007758 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007748:	4b06      	ldr	r3, [pc, #24]	@ (20007764 <HAL_PWREx_EnableOverDrive+0x9c>)
2000774a:	685b      	ldr	r3, [r3, #4]
2000774c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20007750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20007754:	d1ee      	bne.n	20007734 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
20007756:	2300      	movs	r3, #0
}
20007758:	4618      	mov	r0, r3
2000775a:	3708      	adds	r7, #8
2000775c:	46bd      	mov	sp, r7
2000775e:	bd80      	pop	{r7, pc}
20007760:	40023800 	.word	0x40023800
20007764:	40007000 	.word	0x40007000

20007768 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20007768:	b580      	push	{r7, lr}
2000776a:	b086      	sub	sp, #24
2000776c:	af00      	add	r7, sp, #0
2000776e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
20007770:	2300      	movs	r3, #0
20007772:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20007774:	687b      	ldr	r3, [r7, #4]
20007776:	2b00      	cmp	r3, #0
20007778:	d101      	bne.n	2000777e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
2000777a:	2301      	movs	r3, #1
2000777c:	e291      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000777e:	687b      	ldr	r3, [r7, #4]
20007780:	681b      	ldr	r3, [r3, #0]
20007782:	f003 0301 	and.w	r3, r3, #1
20007786:	2b00      	cmp	r3, #0
20007788:	f000 8087 	beq.w	2000789a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
2000778c:	4b96      	ldr	r3, [pc, #600]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000778e:	689b      	ldr	r3, [r3, #8]
20007790:	f003 030c 	and.w	r3, r3, #12
20007794:	2b04      	cmp	r3, #4
20007796:	d00c      	beq.n	200077b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20007798:	4b93      	ldr	r3, [pc, #588]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000779a:	689b      	ldr	r3, [r3, #8]
2000779c:	f003 030c 	and.w	r3, r3, #12
200077a0:	2b08      	cmp	r3, #8
200077a2:	d112      	bne.n	200077ca <HAL_RCC_OscConfig+0x62>
200077a4:	4b90      	ldr	r3, [pc, #576]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077a6:	685b      	ldr	r3, [r3, #4]
200077a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200077ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200077b0:	d10b      	bne.n	200077ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200077b2:	4b8d      	ldr	r3, [pc, #564]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077b4:	681b      	ldr	r3, [r3, #0]
200077b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200077ba:	2b00      	cmp	r3, #0
200077bc:	d06c      	beq.n	20007898 <HAL_RCC_OscConfig+0x130>
200077be:	687b      	ldr	r3, [r7, #4]
200077c0:	685b      	ldr	r3, [r3, #4]
200077c2:	2b00      	cmp	r3, #0
200077c4:	d168      	bne.n	20007898 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
200077c6:	2301      	movs	r3, #1
200077c8:	e26b      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
200077ca:	687b      	ldr	r3, [r7, #4]
200077cc:	685b      	ldr	r3, [r3, #4]
200077ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200077d2:	d106      	bne.n	200077e2 <HAL_RCC_OscConfig+0x7a>
200077d4:	4b84      	ldr	r3, [pc, #528]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077d6:	681b      	ldr	r3, [r3, #0]
200077d8:	4a83      	ldr	r2, [pc, #524]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200077de:	6013      	str	r3, [r2, #0]
200077e0:	e02e      	b.n	20007840 <HAL_RCC_OscConfig+0xd8>
200077e2:	687b      	ldr	r3, [r7, #4]
200077e4:	685b      	ldr	r3, [r3, #4]
200077e6:	2b00      	cmp	r3, #0
200077e8:	d10c      	bne.n	20007804 <HAL_RCC_OscConfig+0x9c>
200077ea:	4b7f      	ldr	r3, [pc, #508]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077ec:	681b      	ldr	r3, [r3, #0]
200077ee:	4a7e      	ldr	r2, [pc, #504]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200077f4:	6013      	str	r3, [r2, #0]
200077f6:	4b7c      	ldr	r3, [pc, #496]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077f8:	681b      	ldr	r3, [r3, #0]
200077fa:	4a7b      	ldr	r2, [pc, #492]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200077fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20007800:	6013      	str	r3, [r2, #0]
20007802:	e01d      	b.n	20007840 <HAL_RCC_OscConfig+0xd8>
20007804:	687b      	ldr	r3, [r7, #4]
20007806:	685b      	ldr	r3, [r3, #4]
20007808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
2000780c:	d10c      	bne.n	20007828 <HAL_RCC_OscConfig+0xc0>
2000780e:	4b76      	ldr	r3, [pc, #472]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007810:	681b      	ldr	r3, [r3, #0]
20007812:	4a75      	ldr	r2, [pc, #468]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20007818:	6013      	str	r3, [r2, #0]
2000781a:	4b73      	ldr	r3, [pc, #460]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000781c:	681b      	ldr	r3, [r3, #0]
2000781e:	4a72      	ldr	r2, [pc, #456]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20007824:	6013      	str	r3, [r2, #0]
20007826:	e00b      	b.n	20007840 <HAL_RCC_OscConfig+0xd8>
20007828:	4b6f      	ldr	r3, [pc, #444]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000782a:	681b      	ldr	r3, [r3, #0]
2000782c:	4a6e      	ldr	r2, [pc, #440]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000782e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20007832:	6013      	str	r3, [r2, #0]
20007834:	4b6c      	ldr	r3, [pc, #432]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007836:	681b      	ldr	r3, [r3, #0]
20007838:	4a6b      	ldr	r2, [pc, #428]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000783a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2000783e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
20007840:	687b      	ldr	r3, [r7, #4]
20007842:	685b      	ldr	r3, [r3, #4]
20007844:	2b00      	cmp	r3, #0
20007846:	d013      	beq.n	20007870 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007848:	f7fd fe36 	bl	200054b8 <HAL_GetTick>
2000784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000784e:	e008      	b.n	20007862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20007850:	f7fd fe32 	bl	200054b8 <HAL_GetTick>
20007854:	4602      	mov	r2, r0
20007856:	693b      	ldr	r3, [r7, #16]
20007858:	1ad3      	subs	r3, r2, r3
2000785a:	2b64      	cmp	r3, #100	@ 0x64
2000785c:	d901      	bls.n	20007862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000785e:	2303      	movs	r3, #3
20007860:	e21f      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20007862:	4b61      	ldr	r3, [pc, #388]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007864:	681b      	ldr	r3, [r3, #0]
20007866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2000786a:	2b00      	cmp	r3, #0
2000786c:	d0f0      	beq.n	20007850 <HAL_RCC_OscConfig+0xe8>
2000786e:	e014      	b.n	2000789a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007870:	f7fd fe22 	bl	200054b8 <HAL_GetTick>
20007874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20007876:	e008      	b.n	2000788a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20007878:	f7fd fe1e 	bl	200054b8 <HAL_GetTick>
2000787c:	4602      	mov	r2, r0
2000787e:	693b      	ldr	r3, [r7, #16]
20007880:	1ad3      	subs	r3, r2, r3
20007882:	2b64      	cmp	r3, #100	@ 0x64
20007884:	d901      	bls.n	2000788a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
20007886:	2303      	movs	r3, #3
20007888:	e20b      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000788a:	4b57      	ldr	r3, [pc, #348]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000788c:	681b      	ldr	r3, [r3, #0]
2000788e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20007892:	2b00      	cmp	r3, #0
20007894:	d1f0      	bne.n	20007878 <HAL_RCC_OscConfig+0x110>
20007896:	e000      	b.n	2000789a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20007898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000789a:	687b      	ldr	r3, [r7, #4]
2000789c:	681b      	ldr	r3, [r3, #0]
2000789e:	f003 0302 	and.w	r3, r3, #2
200078a2:	2b00      	cmp	r3, #0
200078a4:	d069      	beq.n	2000797a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
200078a6:	4b50      	ldr	r3, [pc, #320]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200078a8:	689b      	ldr	r3, [r3, #8]
200078aa:	f003 030c 	and.w	r3, r3, #12
200078ae:	2b00      	cmp	r3, #0
200078b0:	d00b      	beq.n	200078ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200078b2:	4b4d      	ldr	r3, [pc, #308]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200078b4:	689b      	ldr	r3, [r3, #8]
200078b6:	f003 030c 	and.w	r3, r3, #12
200078ba:	2b08      	cmp	r3, #8
200078bc:	d11c      	bne.n	200078f8 <HAL_RCC_OscConfig+0x190>
200078be:	4b4a      	ldr	r3, [pc, #296]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200078c0:	685b      	ldr	r3, [r3, #4]
200078c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200078c6:	2b00      	cmp	r3, #0
200078c8:	d116      	bne.n	200078f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200078ca:	4b47      	ldr	r3, [pc, #284]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200078cc:	681b      	ldr	r3, [r3, #0]
200078ce:	f003 0302 	and.w	r3, r3, #2
200078d2:	2b00      	cmp	r3, #0
200078d4:	d005      	beq.n	200078e2 <HAL_RCC_OscConfig+0x17a>
200078d6:	687b      	ldr	r3, [r7, #4]
200078d8:	68db      	ldr	r3, [r3, #12]
200078da:	2b01      	cmp	r3, #1
200078dc:	d001      	beq.n	200078e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
200078de:	2301      	movs	r3, #1
200078e0:	e1df      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200078e2:	4b41      	ldr	r3, [pc, #260]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200078e4:	681b      	ldr	r3, [r3, #0]
200078e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
200078ea:	687b      	ldr	r3, [r7, #4]
200078ec:	691b      	ldr	r3, [r3, #16]
200078ee:	00db      	lsls	r3, r3, #3
200078f0:	493d      	ldr	r1, [pc, #244]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200078f2:	4313      	orrs	r3, r2
200078f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200078f6:	e040      	b.n	2000797a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
200078f8:	687b      	ldr	r3, [r7, #4]
200078fa:	68db      	ldr	r3, [r3, #12]
200078fc:	2b00      	cmp	r3, #0
200078fe:	d023      	beq.n	20007948 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20007900:	4b39      	ldr	r3, [pc, #228]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007902:	681b      	ldr	r3, [r3, #0]
20007904:	4a38      	ldr	r2, [pc, #224]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007906:	f043 0301 	orr.w	r3, r3, #1
2000790a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000790c:	f7fd fdd4 	bl	200054b8 <HAL_GetTick>
20007910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20007912:	e008      	b.n	20007926 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20007914:	f7fd fdd0 	bl	200054b8 <HAL_GetTick>
20007918:	4602      	mov	r2, r0
2000791a:	693b      	ldr	r3, [r7, #16]
2000791c:	1ad3      	subs	r3, r2, r3
2000791e:	2b02      	cmp	r3, #2
20007920:	d901      	bls.n	20007926 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
20007922:	2303      	movs	r3, #3
20007924:	e1bd      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20007926:	4b30      	ldr	r3, [pc, #192]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007928:	681b      	ldr	r3, [r3, #0]
2000792a:	f003 0302 	and.w	r3, r3, #2
2000792e:	2b00      	cmp	r3, #0
20007930:	d0f0      	beq.n	20007914 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20007932:	4b2d      	ldr	r3, [pc, #180]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007934:	681b      	ldr	r3, [r3, #0]
20007936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
2000793a:	687b      	ldr	r3, [r7, #4]
2000793c:	691b      	ldr	r3, [r3, #16]
2000793e:	00db      	lsls	r3, r3, #3
20007940:	4929      	ldr	r1, [pc, #164]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007942:	4313      	orrs	r3, r2
20007944:	600b      	str	r3, [r1, #0]
20007946:	e018      	b.n	2000797a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20007948:	4b27      	ldr	r3, [pc, #156]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000794a:	681b      	ldr	r3, [r3, #0]
2000794c:	4a26      	ldr	r2, [pc, #152]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
2000794e:	f023 0301 	bic.w	r3, r3, #1
20007952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007954:	f7fd fdb0 	bl	200054b8 <HAL_GetTick>
20007958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000795a:	e008      	b.n	2000796e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2000795c:	f7fd fdac 	bl	200054b8 <HAL_GetTick>
20007960:	4602      	mov	r2, r0
20007962:	693b      	ldr	r3, [r7, #16]
20007964:	1ad3      	subs	r3, r2, r3
20007966:	2b02      	cmp	r3, #2
20007968:	d901      	bls.n	2000796e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
2000796a:	2303      	movs	r3, #3
2000796c:	e199      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000796e:	4b1e      	ldr	r3, [pc, #120]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007970:	681b      	ldr	r3, [r3, #0]
20007972:	f003 0302 	and.w	r3, r3, #2
20007976:	2b00      	cmp	r3, #0
20007978:	d1f0      	bne.n	2000795c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000797a:	687b      	ldr	r3, [r7, #4]
2000797c:	681b      	ldr	r3, [r3, #0]
2000797e:	f003 0308 	and.w	r3, r3, #8
20007982:	2b00      	cmp	r3, #0
20007984:	d038      	beq.n	200079f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
20007986:	687b      	ldr	r3, [r7, #4]
20007988:	695b      	ldr	r3, [r3, #20]
2000798a:	2b00      	cmp	r3, #0
2000798c:	d019      	beq.n	200079c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000798e:	4b16      	ldr	r3, [pc, #88]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007992:	4a15      	ldr	r2, [pc, #84]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
20007994:	f043 0301 	orr.w	r3, r3, #1
20007998:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000799a:	f7fd fd8d 	bl	200054b8 <HAL_GetTick>
2000799e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200079a0:	e008      	b.n	200079b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
200079a2:	f7fd fd89 	bl	200054b8 <HAL_GetTick>
200079a6:	4602      	mov	r2, r0
200079a8:	693b      	ldr	r3, [r7, #16]
200079aa:	1ad3      	subs	r3, r2, r3
200079ac:	2b02      	cmp	r3, #2
200079ae:	d901      	bls.n	200079b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
200079b0:	2303      	movs	r3, #3
200079b2:	e176      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200079b4:	4b0c      	ldr	r3, [pc, #48]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200079b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200079b8:	f003 0302 	and.w	r3, r3, #2
200079bc:	2b00      	cmp	r3, #0
200079be:	d0f0      	beq.n	200079a2 <HAL_RCC_OscConfig+0x23a>
200079c0:	e01a      	b.n	200079f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200079c2:	4b09      	ldr	r3, [pc, #36]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200079c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200079c6:	4a08      	ldr	r2, [pc, #32]	@ (200079e8 <HAL_RCC_OscConfig+0x280>)
200079c8:	f023 0301 	bic.w	r3, r3, #1
200079cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200079ce:	f7fd fd73 	bl	200054b8 <HAL_GetTick>
200079d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200079d4:	e00a      	b.n	200079ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
200079d6:	f7fd fd6f 	bl	200054b8 <HAL_GetTick>
200079da:	4602      	mov	r2, r0
200079dc:	693b      	ldr	r3, [r7, #16]
200079de:	1ad3      	subs	r3, r2, r3
200079e0:	2b02      	cmp	r3, #2
200079e2:	d903      	bls.n	200079ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
200079e4:	2303      	movs	r3, #3
200079e6:	e15c      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
200079e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200079ec:	4b91      	ldr	r3, [pc, #580]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
200079ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200079f0:	f003 0302 	and.w	r3, r3, #2
200079f4:	2b00      	cmp	r3, #0
200079f6:	d1ee      	bne.n	200079d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
200079f8:	687b      	ldr	r3, [r7, #4]
200079fa:	681b      	ldr	r3, [r3, #0]
200079fc:	f003 0304 	and.w	r3, r3, #4
20007a00:	2b00      	cmp	r3, #0
20007a02:	f000 80a4 	beq.w	20007b4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
20007a06:	4b8b      	ldr	r3, [pc, #556]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20007a0e:	2b00      	cmp	r3, #0
20007a10:	d10d      	bne.n	20007a2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
20007a12:	4b88      	ldr	r3, [pc, #544]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007a16:	4a87      	ldr	r2, [pc, #540]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20007a1c:	6413      	str	r3, [r2, #64]	@ 0x40
20007a1e:	4b85      	ldr	r3, [pc, #532]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20007a26:	60bb      	str	r3, [r7, #8]
20007a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20007a2a:	2301      	movs	r3, #1
20007a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20007a2e:	4b82      	ldr	r3, [pc, #520]	@ (20007c38 <HAL_RCC_OscConfig+0x4d0>)
20007a30:	681b      	ldr	r3, [r3, #0]
20007a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20007a36:	2b00      	cmp	r3, #0
20007a38:	d118      	bne.n	20007a6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
20007a3a:	4b7f      	ldr	r3, [pc, #508]	@ (20007c38 <HAL_RCC_OscConfig+0x4d0>)
20007a3c:	681b      	ldr	r3, [r3, #0]
20007a3e:	4a7e      	ldr	r2, [pc, #504]	@ (20007c38 <HAL_RCC_OscConfig+0x4d0>)
20007a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20007a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20007a46:	f7fd fd37 	bl	200054b8 <HAL_GetTick>
20007a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20007a4c:	e008      	b.n	20007a60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20007a4e:	f7fd fd33 	bl	200054b8 <HAL_GetTick>
20007a52:	4602      	mov	r2, r0
20007a54:	693b      	ldr	r3, [r7, #16]
20007a56:	1ad3      	subs	r3, r2, r3
20007a58:	2b64      	cmp	r3, #100	@ 0x64
20007a5a:	d901      	bls.n	20007a60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
20007a5c:	2303      	movs	r3, #3
20007a5e:	e120      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20007a60:	4b75      	ldr	r3, [pc, #468]	@ (20007c38 <HAL_RCC_OscConfig+0x4d0>)
20007a62:	681b      	ldr	r3, [r3, #0]
20007a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20007a68:	2b00      	cmp	r3, #0
20007a6a:	d0f0      	beq.n	20007a4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20007a6c:	687b      	ldr	r3, [r7, #4]
20007a6e:	689b      	ldr	r3, [r3, #8]
20007a70:	2b01      	cmp	r3, #1
20007a72:	d106      	bne.n	20007a82 <HAL_RCC_OscConfig+0x31a>
20007a74:	4b6f      	ldr	r3, [pc, #444]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007a78:	4a6e      	ldr	r2, [pc, #440]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a7a:	f043 0301 	orr.w	r3, r3, #1
20007a7e:	6713      	str	r3, [r2, #112]	@ 0x70
20007a80:	e02d      	b.n	20007ade <HAL_RCC_OscConfig+0x376>
20007a82:	687b      	ldr	r3, [r7, #4]
20007a84:	689b      	ldr	r3, [r3, #8]
20007a86:	2b00      	cmp	r3, #0
20007a88:	d10c      	bne.n	20007aa4 <HAL_RCC_OscConfig+0x33c>
20007a8a:	4b6a      	ldr	r3, [pc, #424]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007a8e:	4a69      	ldr	r2, [pc, #420]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a90:	f023 0301 	bic.w	r3, r3, #1
20007a94:	6713      	str	r3, [r2, #112]	@ 0x70
20007a96:	4b67      	ldr	r3, [pc, #412]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007a9a:	4a66      	ldr	r2, [pc, #408]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007a9c:	f023 0304 	bic.w	r3, r3, #4
20007aa0:	6713      	str	r3, [r2, #112]	@ 0x70
20007aa2:	e01c      	b.n	20007ade <HAL_RCC_OscConfig+0x376>
20007aa4:	687b      	ldr	r3, [r7, #4]
20007aa6:	689b      	ldr	r3, [r3, #8]
20007aa8:	2b05      	cmp	r3, #5
20007aaa:	d10c      	bne.n	20007ac6 <HAL_RCC_OscConfig+0x35e>
20007aac:	4b61      	ldr	r3, [pc, #388]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007ab0:	4a60      	ldr	r2, [pc, #384]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007ab2:	f043 0304 	orr.w	r3, r3, #4
20007ab6:	6713      	str	r3, [r2, #112]	@ 0x70
20007ab8:	4b5e      	ldr	r3, [pc, #376]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007abc:	4a5d      	ldr	r2, [pc, #372]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007abe:	f043 0301 	orr.w	r3, r3, #1
20007ac2:	6713      	str	r3, [r2, #112]	@ 0x70
20007ac4:	e00b      	b.n	20007ade <HAL_RCC_OscConfig+0x376>
20007ac6:	4b5b      	ldr	r3, [pc, #364]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007aca:	4a5a      	ldr	r2, [pc, #360]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007acc:	f023 0301 	bic.w	r3, r3, #1
20007ad0:	6713      	str	r3, [r2, #112]	@ 0x70
20007ad2:	4b58      	ldr	r3, [pc, #352]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007ad6:	4a57      	ldr	r2, [pc, #348]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007ad8:	f023 0304 	bic.w	r3, r3, #4
20007adc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20007ade:	687b      	ldr	r3, [r7, #4]
20007ae0:	689b      	ldr	r3, [r3, #8]
20007ae2:	2b00      	cmp	r3, #0
20007ae4:	d015      	beq.n	20007b12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20007ae6:	f7fd fce7 	bl	200054b8 <HAL_GetTick>
20007aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20007aec:	e00a      	b.n	20007b04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20007aee:	f7fd fce3 	bl	200054b8 <HAL_GetTick>
20007af2:	4602      	mov	r2, r0
20007af4:	693b      	ldr	r3, [r7, #16]
20007af6:	1ad3      	subs	r3, r2, r3
20007af8:	f241 3288 	movw	r2, #5000	@ 0x1388
20007afc:	4293      	cmp	r3, r2
20007afe:	d901      	bls.n	20007b04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
20007b00:	2303      	movs	r3, #3
20007b02:	e0ce      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20007b04:	4b4b      	ldr	r3, [pc, #300]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007b08:	f003 0302 	and.w	r3, r3, #2
20007b0c:	2b00      	cmp	r3, #0
20007b0e:	d0ee      	beq.n	20007aee <HAL_RCC_OscConfig+0x386>
20007b10:	e014      	b.n	20007b3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20007b12:	f7fd fcd1 	bl	200054b8 <HAL_GetTick>
20007b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20007b18:	e00a      	b.n	20007b30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20007b1a:	f7fd fccd 	bl	200054b8 <HAL_GetTick>
20007b1e:	4602      	mov	r2, r0
20007b20:	693b      	ldr	r3, [r7, #16]
20007b22:	1ad3      	subs	r3, r2, r3
20007b24:	f241 3288 	movw	r2, #5000	@ 0x1388
20007b28:	4293      	cmp	r3, r2
20007b2a:	d901      	bls.n	20007b30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
20007b2c:	2303      	movs	r3, #3
20007b2e:	e0b8      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20007b30:	4b40      	ldr	r3, [pc, #256]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007b34:	f003 0302 	and.w	r3, r3, #2
20007b38:	2b00      	cmp	r3, #0
20007b3a:	d1ee      	bne.n	20007b1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
20007b3c:	7dfb      	ldrb	r3, [r7, #23]
20007b3e:	2b01      	cmp	r3, #1
20007b40:	d105      	bne.n	20007b4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20007b42:	4b3c      	ldr	r3, [pc, #240]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007b46:	4a3b      	ldr	r2, [pc, #236]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20007b4c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20007b4e:	687b      	ldr	r3, [r7, #4]
20007b50:	699b      	ldr	r3, [r3, #24]
20007b52:	2b00      	cmp	r3, #0
20007b54:	f000 80a4 	beq.w	20007ca0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
20007b58:	4b36      	ldr	r3, [pc, #216]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b5a:	689b      	ldr	r3, [r3, #8]
20007b5c:	f003 030c 	and.w	r3, r3, #12
20007b60:	2b08      	cmp	r3, #8
20007b62:	d06b      	beq.n	20007c3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20007b64:	687b      	ldr	r3, [r7, #4]
20007b66:	699b      	ldr	r3, [r3, #24]
20007b68:	2b02      	cmp	r3, #2
20007b6a:	d149      	bne.n	20007c00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20007b6c:	4b31      	ldr	r3, [pc, #196]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b6e:	681b      	ldr	r3, [r3, #0]
20007b70:	4a30      	ldr	r2, [pc, #192]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20007b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007b78:	f7fd fc9e 	bl	200054b8 <HAL_GetTick>
20007b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007b7e:	e008      	b.n	20007b92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20007b80:	f7fd fc9a 	bl	200054b8 <HAL_GetTick>
20007b84:	4602      	mov	r2, r0
20007b86:	693b      	ldr	r3, [r7, #16]
20007b88:	1ad3      	subs	r3, r2, r3
20007b8a:	2b02      	cmp	r3, #2
20007b8c:	d901      	bls.n	20007b92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
20007b8e:	2303      	movs	r3, #3
20007b90:	e087      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007b92:	4b28      	ldr	r3, [pc, #160]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007b94:	681b      	ldr	r3, [r3, #0]
20007b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007b9a:	2b00      	cmp	r3, #0
20007b9c:	d1f0      	bne.n	20007b80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
20007b9e:	687b      	ldr	r3, [r7, #4]
20007ba0:	69da      	ldr	r2, [r3, #28]
20007ba2:	687b      	ldr	r3, [r7, #4]
20007ba4:	6a1b      	ldr	r3, [r3, #32]
20007ba6:	431a      	orrs	r2, r3
20007ba8:	687b      	ldr	r3, [r7, #4]
20007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007bac:	019b      	lsls	r3, r3, #6
20007bae:	431a      	orrs	r2, r3
20007bb0:	687b      	ldr	r3, [r7, #4]
20007bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007bb4:	085b      	lsrs	r3, r3, #1
20007bb6:	3b01      	subs	r3, #1
20007bb8:	041b      	lsls	r3, r3, #16
20007bba:	431a      	orrs	r2, r3
20007bbc:	687b      	ldr	r3, [r7, #4]
20007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20007bc0:	061b      	lsls	r3, r3, #24
20007bc2:	4313      	orrs	r3, r2
20007bc4:	4a1b      	ldr	r2, [pc, #108]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007bc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20007bca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20007bcc:	4b19      	ldr	r3, [pc, #100]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007bce:	681b      	ldr	r3, [r3, #0]
20007bd0:	4a18      	ldr	r2, [pc, #96]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20007bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007bd8:	f7fd fc6e 	bl	200054b8 <HAL_GetTick>
20007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007bde:	e008      	b.n	20007bf2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20007be0:	f7fd fc6a 	bl	200054b8 <HAL_GetTick>
20007be4:	4602      	mov	r2, r0
20007be6:	693b      	ldr	r3, [r7, #16]
20007be8:	1ad3      	subs	r3, r2, r3
20007bea:	2b02      	cmp	r3, #2
20007bec:	d901      	bls.n	20007bf2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
20007bee:	2303      	movs	r3, #3
20007bf0:	e057      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007bf2:	4b10      	ldr	r3, [pc, #64]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007bf4:	681b      	ldr	r3, [r3, #0]
20007bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007bfa:	2b00      	cmp	r3, #0
20007bfc:	d0f0      	beq.n	20007be0 <HAL_RCC_OscConfig+0x478>
20007bfe:	e04f      	b.n	20007ca0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20007c00:	4b0c      	ldr	r3, [pc, #48]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007c02:	681b      	ldr	r3, [r3, #0]
20007c04:	4a0b      	ldr	r2, [pc, #44]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20007c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20007c0c:	f7fd fc54 	bl	200054b8 <HAL_GetTick>
20007c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007c12:	e008      	b.n	20007c26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20007c14:	f7fd fc50 	bl	200054b8 <HAL_GetTick>
20007c18:	4602      	mov	r2, r0
20007c1a:	693b      	ldr	r3, [r7, #16]
20007c1c:	1ad3      	subs	r3, r2, r3
20007c1e:	2b02      	cmp	r3, #2
20007c20:	d901      	bls.n	20007c26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
20007c22:	2303      	movs	r3, #3
20007c24:	e03d      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007c26:	4b03      	ldr	r3, [pc, #12]	@ (20007c34 <HAL_RCC_OscConfig+0x4cc>)
20007c28:	681b      	ldr	r3, [r3, #0]
20007c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007c2e:	2b00      	cmp	r3, #0
20007c30:	d1f0      	bne.n	20007c14 <HAL_RCC_OscConfig+0x4ac>
20007c32:	e035      	b.n	20007ca0 <HAL_RCC_OscConfig+0x538>
20007c34:	40023800 	.word	0x40023800
20007c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
20007c3c:	4b1b      	ldr	r3, [pc, #108]	@ (20007cac <HAL_RCC_OscConfig+0x544>)
20007c3e:	685b      	ldr	r3, [r3, #4]
20007c40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20007c42:	687b      	ldr	r3, [r7, #4]
20007c44:	699b      	ldr	r3, [r3, #24]
20007c46:	2b01      	cmp	r3, #1
20007c48:	d028      	beq.n	20007c9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20007c4a:	68fb      	ldr	r3, [r7, #12]
20007c4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20007c50:	687b      	ldr	r3, [r7, #4]
20007c52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20007c54:	429a      	cmp	r2, r3
20007c56:	d121      	bne.n	20007c9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20007c58:	68fb      	ldr	r3, [r7, #12]
20007c5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20007c5e:	687b      	ldr	r3, [r7, #4]
20007c60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20007c62:	429a      	cmp	r2, r3
20007c64:	d11a      	bne.n	20007c9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20007c66:	68fa      	ldr	r2, [r7, #12]
20007c68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
20007c6c:	4013      	ands	r3, r2
20007c6e:	687a      	ldr	r2, [r7, #4]
20007c70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
20007c72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20007c74:	4293      	cmp	r3, r2
20007c76:	d111      	bne.n	20007c9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20007c78:	68fb      	ldr	r3, [r7, #12]
20007c7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
20007c7e:	687b      	ldr	r3, [r7, #4]
20007c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007c82:	085b      	lsrs	r3, r3, #1
20007c84:	3b01      	subs	r3, #1
20007c86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20007c88:	429a      	cmp	r2, r3
20007c8a:	d107      	bne.n	20007c9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20007c8c:	68fb      	ldr	r3, [r7, #12]
20007c8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
20007c92:	687b      	ldr	r3, [r7, #4]
20007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20007c96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20007c98:	429a      	cmp	r2, r3
20007c9a:	d001      	beq.n	20007ca0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
20007c9c:	2301      	movs	r3, #1
20007c9e:	e000      	b.n	20007ca2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
20007ca0:	2300      	movs	r3, #0
}
20007ca2:	4618      	mov	r0, r3
20007ca4:	3718      	adds	r7, #24
20007ca6:	46bd      	mov	sp, r7
20007ca8:	bd80      	pop	{r7, pc}
20007caa:	bf00      	nop
20007cac:	40023800 	.word	0x40023800

20007cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20007cb0:	b580      	push	{r7, lr}
20007cb2:	b084      	sub	sp, #16
20007cb4:	af00      	add	r7, sp, #0
20007cb6:	6078      	str	r0, [r7, #4]
20007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
20007cba:	2300      	movs	r3, #0
20007cbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
20007cbe:	687b      	ldr	r3, [r7, #4]
20007cc0:	2b00      	cmp	r3, #0
20007cc2:	d101      	bne.n	20007cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
20007cc4:	2301      	movs	r3, #1
20007cc6:	e0d0      	b.n	20007e6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
20007cc8:	4b6a      	ldr	r3, [pc, #424]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007cca:	681b      	ldr	r3, [r3, #0]
20007ccc:	f003 030f 	and.w	r3, r3, #15
20007cd0:	683a      	ldr	r2, [r7, #0]
20007cd2:	429a      	cmp	r2, r3
20007cd4:	d910      	bls.n	20007cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20007cd6:	4b67      	ldr	r3, [pc, #412]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007cd8:	681b      	ldr	r3, [r3, #0]
20007cda:	f023 020f 	bic.w	r2, r3, #15
20007cde:	4965      	ldr	r1, [pc, #404]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007ce0:	683b      	ldr	r3, [r7, #0]
20007ce2:	4313      	orrs	r3, r2
20007ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20007ce6:	4b63      	ldr	r3, [pc, #396]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007ce8:	681b      	ldr	r3, [r3, #0]
20007cea:	f003 030f 	and.w	r3, r3, #15
20007cee:	683a      	ldr	r2, [r7, #0]
20007cf0:	429a      	cmp	r2, r3
20007cf2:	d001      	beq.n	20007cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
20007cf4:	2301      	movs	r3, #1
20007cf6:	e0b8      	b.n	20007e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20007cf8:	687b      	ldr	r3, [r7, #4]
20007cfa:	681b      	ldr	r3, [r3, #0]
20007cfc:	f003 0302 	and.w	r3, r3, #2
20007d00:	2b00      	cmp	r3, #0
20007d02:	d020      	beq.n	20007d46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20007d04:	687b      	ldr	r3, [r7, #4]
20007d06:	681b      	ldr	r3, [r3, #0]
20007d08:	f003 0304 	and.w	r3, r3, #4
20007d0c:	2b00      	cmp	r3, #0
20007d0e:	d005      	beq.n	20007d1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20007d10:	4b59      	ldr	r3, [pc, #356]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d12:	689b      	ldr	r3, [r3, #8]
20007d14:	4a58      	ldr	r2, [pc, #352]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
20007d1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20007d1c:	687b      	ldr	r3, [r7, #4]
20007d1e:	681b      	ldr	r3, [r3, #0]
20007d20:	f003 0308 	and.w	r3, r3, #8
20007d24:	2b00      	cmp	r3, #0
20007d26:	d005      	beq.n	20007d34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20007d28:	4b53      	ldr	r3, [pc, #332]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d2a:	689b      	ldr	r3, [r3, #8]
20007d2c:	4a52      	ldr	r2, [pc, #328]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
20007d32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20007d34:	4b50      	ldr	r3, [pc, #320]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d36:	689b      	ldr	r3, [r3, #8]
20007d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
20007d3c:	687b      	ldr	r3, [r7, #4]
20007d3e:	689b      	ldr	r3, [r3, #8]
20007d40:	494d      	ldr	r1, [pc, #308]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d42:	4313      	orrs	r3, r2
20007d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20007d46:	687b      	ldr	r3, [r7, #4]
20007d48:	681b      	ldr	r3, [r3, #0]
20007d4a:	f003 0301 	and.w	r3, r3, #1
20007d4e:	2b00      	cmp	r3, #0
20007d50:	d040      	beq.n	20007dd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20007d52:	687b      	ldr	r3, [r7, #4]
20007d54:	685b      	ldr	r3, [r3, #4]
20007d56:	2b01      	cmp	r3, #1
20007d58:	d107      	bne.n	20007d6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20007d5a:	4b47      	ldr	r3, [pc, #284]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d5c:	681b      	ldr	r3, [r3, #0]
20007d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20007d62:	2b00      	cmp	r3, #0
20007d64:	d115      	bne.n	20007d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20007d66:	2301      	movs	r3, #1
20007d68:	e07f      	b.n	20007e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
20007d6a:	687b      	ldr	r3, [r7, #4]
20007d6c:	685b      	ldr	r3, [r3, #4]
20007d6e:	2b02      	cmp	r3, #2
20007d70:	d107      	bne.n	20007d82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007d72:	4b41      	ldr	r3, [pc, #260]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d74:	681b      	ldr	r3, [r3, #0]
20007d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007d7a:	2b00      	cmp	r3, #0
20007d7c:	d109      	bne.n	20007d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20007d7e:	2301      	movs	r3, #1
20007d80:	e073      	b.n	20007e6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20007d82:	4b3d      	ldr	r3, [pc, #244]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d84:	681b      	ldr	r3, [r3, #0]
20007d86:	f003 0302 	and.w	r3, r3, #2
20007d8a:	2b00      	cmp	r3, #0
20007d8c:	d101      	bne.n	20007d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20007d8e:	2301      	movs	r3, #1
20007d90:	e06b      	b.n	20007e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20007d92:	4b39      	ldr	r3, [pc, #228]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007d94:	689b      	ldr	r3, [r3, #8]
20007d96:	f023 0203 	bic.w	r2, r3, #3
20007d9a:	687b      	ldr	r3, [r7, #4]
20007d9c:	685b      	ldr	r3, [r3, #4]
20007d9e:	4936      	ldr	r1, [pc, #216]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007da0:	4313      	orrs	r3, r2
20007da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20007da4:	f7fd fb88 	bl	200054b8 <HAL_GetTick>
20007da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20007daa:	e00a      	b.n	20007dc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20007dac:	f7fd fb84 	bl	200054b8 <HAL_GetTick>
20007db0:	4602      	mov	r2, r0
20007db2:	68fb      	ldr	r3, [r7, #12]
20007db4:	1ad3      	subs	r3, r2, r3
20007db6:	f241 3288 	movw	r2, #5000	@ 0x1388
20007dba:	4293      	cmp	r3, r2
20007dbc:	d901      	bls.n	20007dc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
20007dbe:	2303      	movs	r3, #3
20007dc0:	e053      	b.n	20007e6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20007dc2:	4b2d      	ldr	r3, [pc, #180]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007dc4:	689b      	ldr	r3, [r3, #8]
20007dc6:	f003 020c 	and.w	r2, r3, #12
20007dca:	687b      	ldr	r3, [r7, #4]
20007dcc:	685b      	ldr	r3, [r3, #4]
20007dce:	009b      	lsls	r3, r3, #2
20007dd0:	429a      	cmp	r2, r3
20007dd2:	d1eb      	bne.n	20007dac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20007dd4:	4b27      	ldr	r3, [pc, #156]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007dd6:	681b      	ldr	r3, [r3, #0]
20007dd8:	f003 030f 	and.w	r3, r3, #15
20007ddc:	683a      	ldr	r2, [r7, #0]
20007dde:	429a      	cmp	r2, r3
20007de0:	d210      	bcs.n	20007e04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20007de2:	4b24      	ldr	r3, [pc, #144]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007de4:	681b      	ldr	r3, [r3, #0]
20007de6:	f023 020f 	bic.w	r2, r3, #15
20007dea:	4922      	ldr	r1, [pc, #136]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007dec:	683b      	ldr	r3, [r7, #0]
20007dee:	4313      	orrs	r3, r2
20007df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20007df2:	4b20      	ldr	r3, [pc, #128]	@ (20007e74 <HAL_RCC_ClockConfig+0x1c4>)
20007df4:	681b      	ldr	r3, [r3, #0]
20007df6:	f003 030f 	and.w	r3, r3, #15
20007dfa:	683a      	ldr	r2, [r7, #0]
20007dfc:	429a      	cmp	r2, r3
20007dfe:	d001      	beq.n	20007e04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
20007e00:	2301      	movs	r3, #1
20007e02:	e032      	b.n	20007e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20007e04:	687b      	ldr	r3, [r7, #4]
20007e06:	681b      	ldr	r3, [r3, #0]
20007e08:	f003 0304 	and.w	r3, r3, #4
20007e0c:	2b00      	cmp	r3, #0
20007e0e:	d008      	beq.n	20007e22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20007e10:	4b19      	ldr	r3, [pc, #100]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007e12:	689b      	ldr	r3, [r3, #8]
20007e14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
20007e18:	687b      	ldr	r3, [r7, #4]
20007e1a:	68db      	ldr	r3, [r3, #12]
20007e1c:	4916      	ldr	r1, [pc, #88]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007e1e:	4313      	orrs	r3, r2
20007e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20007e22:	687b      	ldr	r3, [r7, #4]
20007e24:	681b      	ldr	r3, [r3, #0]
20007e26:	f003 0308 	and.w	r3, r3, #8
20007e2a:	2b00      	cmp	r3, #0
20007e2c:	d009      	beq.n	20007e42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
20007e2e:	4b12      	ldr	r3, [pc, #72]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007e30:	689b      	ldr	r3, [r3, #8]
20007e32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
20007e36:	687b      	ldr	r3, [r7, #4]
20007e38:	691b      	ldr	r3, [r3, #16]
20007e3a:	00db      	lsls	r3, r3, #3
20007e3c:	490e      	ldr	r1, [pc, #56]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007e3e:	4313      	orrs	r3, r2
20007e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
20007e42:	f000 f821 	bl	20007e88 <HAL_RCC_GetSysClockFreq>
20007e46:	4602      	mov	r2, r0
20007e48:	4b0b      	ldr	r3, [pc, #44]	@ (20007e78 <HAL_RCC_ClockConfig+0x1c8>)
20007e4a:	689b      	ldr	r3, [r3, #8]
20007e4c:	091b      	lsrs	r3, r3, #4
20007e4e:	f003 030f 	and.w	r3, r3, #15
20007e52:	490a      	ldr	r1, [pc, #40]	@ (20007e7c <HAL_RCC_ClockConfig+0x1cc>)
20007e54:	5ccb      	ldrb	r3, [r1, r3]
20007e56:	fa22 f303 	lsr.w	r3, r2, r3
20007e5a:	4a09      	ldr	r2, [pc, #36]	@ (20007e80 <HAL_RCC_ClockConfig+0x1d0>)
20007e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
20007e5e:	4b09      	ldr	r3, [pc, #36]	@ (20007e84 <HAL_RCC_ClockConfig+0x1d4>)
20007e60:	681b      	ldr	r3, [r3, #0]
20007e62:	4618      	mov	r0, r3
20007e64:	f7fd fae4 	bl	20005430 <HAL_InitTick>

  return HAL_OK;
20007e68:	2300      	movs	r3, #0
}
20007e6a:	4618      	mov	r0, r3
20007e6c:	3710      	adds	r7, #16
20007e6e:	46bd      	mov	sp, r7
20007e70:	bd80      	pop	{r7, pc}
20007e72:	bf00      	nop
20007e74:	40023c00 	.word	0x40023c00
20007e78:	40023800 	.word	0x40023800
20007e7c:	2000d528 	.word	0x2000d528
20007e80:	2000d550 	.word	0x2000d550
20007e84:	2000d554 	.word	0x2000d554

20007e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20007e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20007e8c:	b094      	sub	sp, #80	@ 0x50
20007e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
20007e90:	2300      	movs	r3, #0
20007e92:	647b      	str	r3, [r7, #68]	@ 0x44
20007e94:	2300      	movs	r3, #0
20007e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
20007e98:	2300      	movs	r3, #0
20007e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
20007e9c:	2300      	movs	r3, #0
20007e9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20007ea0:	4b79      	ldr	r3, [pc, #484]	@ (20008088 <HAL_RCC_GetSysClockFreq+0x200>)
20007ea2:	689b      	ldr	r3, [r3, #8]
20007ea4:	f003 030c 	and.w	r3, r3, #12
20007ea8:	2b08      	cmp	r3, #8
20007eaa:	d00d      	beq.n	20007ec8 <HAL_RCC_GetSysClockFreq+0x40>
20007eac:	2b08      	cmp	r3, #8
20007eae:	f200 80e1 	bhi.w	20008074 <HAL_RCC_GetSysClockFreq+0x1ec>
20007eb2:	2b00      	cmp	r3, #0
20007eb4:	d002      	beq.n	20007ebc <HAL_RCC_GetSysClockFreq+0x34>
20007eb6:	2b04      	cmp	r3, #4
20007eb8:	d003      	beq.n	20007ec2 <HAL_RCC_GetSysClockFreq+0x3a>
20007eba:	e0db      	b.n	20008074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20007ebc:	4b73      	ldr	r3, [pc, #460]	@ (2000808c <HAL_RCC_GetSysClockFreq+0x204>)
20007ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20007ec0:	e0db      	b.n	2000807a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20007ec2:	4b73      	ldr	r3, [pc, #460]	@ (20008090 <HAL_RCC_GetSysClockFreq+0x208>)
20007ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20007ec6:	e0d8      	b.n	2000807a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20007ec8:	4b6f      	ldr	r3, [pc, #444]	@ (20008088 <HAL_RCC_GetSysClockFreq+0x200>)
20007eca:	685b      	ldr	r3, [r3, #4]
20007ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20007ed0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
20007ed2:	4b6d      	ldr	r3, [pc, #436]	@ (20008088 <HAL_RCC_GetSysClockFreq+0x200>)
20007ed4:	685b      	ldr	r3, [r3, #4]
20007ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20007eda:	2b00      	cmp	r3, #0
20007edc:	d063      	beq.n	20007fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20007ede:	4b6a      	ldr	r3, [pc, #424]	@ (20008088 <HAL_RCC_GetSysClockFreq+0x200>)
20007ee0:	685b      	ldr	r3, [r3, #4]
20007ee2:	099b      	lsrs	r3, r3, #6
20007ee4:	2200      	movs	r2, #0
20007ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
20007ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
20007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20007eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
20007ef0:	633b      	str	r3, [r7, #48]	@ 0x30
20007ef2:	2300      	movs	r3, #0
20007ef4:	637b      	str	r3, [r7, #52]	@ 0x34
20007ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
20007efa:	4622      	mov	r2, r4
20007efc:	462b      	mov	r3, r5
20007efe:	f04f 0000 	mov.w	r0, #0
20007f02:	f04f 0100 	mov.w	r1, #0
20007f06:	0159      	lsls	r1, r3, #5
20007f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20007f0c:	0150      	lsls	r0, r2, #5
20007f0e:	4602      	mov	r2, r0
20007f10:	460b      	mov	r3, r1
20007f12:	4621      	mov	r1, r4
20007f14:	1a51      	subs	r1, r2, r1
20007f16:	6139      	str	r1, [r7, #16]
20007f18:	4629      	mov	r1, r5
20007f1a:	eb63 0301 	sbc.w	r3, r3, r1
20007f1e:	617b      	str	r3, [r7, #20]
20007f20:	f04f 0200 	mov.w	r2, #0
20007f24:	f04f 0300 	mov.w	r3, #0
20007f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20007f2c:	4659      	mov	r1, fp
20007f2e:	018b      	lsls	r3, r1, #6
20007f30:	4651      	mov	r1, sl
20007f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20007f36:	4651      	mov	r1, sl
20007f38:	018a      	lsls	r2, r1, #6
20007f3a:	4651      	mov	r1, sl
20007f3c:	ebb2 0801 	subs.w	r8, r2, r1
20007f40:	4659      	mov	r1, fp
20007f42:	eb63 0901 	sbc.w	r9, r3, r1
20007f46:	f04f 0200 	mov.w	r2, #0
20007f4a:	f04f 0300 	mov.w	r3, #0
20007f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20007f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20007f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20007f5a:	4690      	mov	r8, r2
20007f5c:	4699      	mov	r9, r3
20007f5e:	4623      	mov	r3, r4
20007f60:	eb18 0303 	adds.w	r3, r8, r3
20007f64:	60bb      	str	r3, [r7, #8]
20007f66:	462b      	mov	r3, r5
20007f68:	eb49 0303 	adc.w	r3, r9, r3
20007f6c:	60fb      	str	r3, [r7, #12]
20007f6e:	f04f 0200 	mov.w	r2, #0
20007f72:	f04f 0300 	mov.w	r3, #0
20007f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20007f7a:	4629      	mov	r1, r5
20007f7c:	024b      	lsls	r3, r1, #9
20007f7e:	4621      	mov	r1, r4
20007f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20007f84:	4621      	mov	r1, r4
20007f86:	024a      	lsls	r2, r1, #9
20007f88:	4610      	mov	r0, r2
20007f8a:	4619      	mov	r1, r3
20007f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20007f8e:	2200      	movs	r2, #0
20007f90:	62bb      	str	r3, [r7, #40]	@ 0x28
20007f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
20007f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
20007f98:	f7f8 f936 	bl	20000208 <__aeabi_uldivmod>
20007f9c:	4602      	mov	r2, r0
20007f9e:	460b      	mov	r3, r1
20007fa0:	4613      	mov	r3, r2
20007fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
20007fa4:	e058      	b.n	20008058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20007fa6:	4b38      	ldr	r3, [pc, #224]	@ (20008088 <HAL_RCC_GetSysClockFreq+0x200>)
20007fa8:	685b      	ldr	r3, [r3, #4]
20007faa:	099b      	lsrs	r3, r3, #6
20007fac:	2200      	movs	r2, #0
20007fae:	4618      	mov	r0, r3
20007fb0:	4611      	mov	r1, r2
20007fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
20007fb6:	623b      	str	r3, [r7, #32]
20007fb8:	2300      	movs	r3, #0
20007fba:	627b      	str	r3, [r7, #36]	@ 0x24
20007fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20007fc0:	4642      	mov	r2, r8
20007fc2:	464b      	mov	r3, r9
20007fc4:	f04f 0000 	mov.w	r0, #0
20007fc8:	f04f 0100 	mov.w	r1, #0
20007fcc:	0159      	lsls	r1, r3, #5
20007fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20007fd2:	0150      	lsls	r0, r2, #5
20007fd4:	4602      	mov	r2, r0
20007fd6:	460b      	mov	r3, r1
20007fd8:	4641      	mov	r1, r8
20007fda:	ebb2 0a01 	subs.w	sl, r2, r1
20007fde:	4649      	mov	r1, r9
20007fe0:	eb63 0b01 	sbc.w	fp, r3, r1
20007fe4:	f04f 0200 	mov.w	r2, #0
20007fe8:	f04f 0300 	mov.w	r3, #0
20007fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
20007ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20007ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
20007ff8:	ebb2 040a 	subs.w	r4, r2, sl
20007ffc:	eb63 050b 	sbc.w	r5, r3, fp
20008000:	f04f 0200 	mov.w	r2, #0
20008004:	f04f 0300 	mov.w	r3, #0
20008008:	00eb      	lsls	r3, r5, #3
2000800a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
2000800e:	00e2      	lsls	r2, r4, #3
20008010:	4614      	mov	r4, r2
20008012:	461d      	mov	r5, r3
20008014:	4643      	mov	r3, r8
20008016:	18e3      	adds	r3, r4, r3
20008018:	603b      	str	r3, [r7, #0]
2000801a:	464b      	mov	r3, r9
2000801c:	eb45 0303 	adc.w	r3, r5, r3
20008020:	607b      	str	r3, [r7, #4]
20008022:	f04f 0200 	mov.w	r2, #0
20008026:	f04f 0300 	mov.w	r3, #0
2000802a:	e9d7 4500 	ldrd	r4, r5, [r7]
2000802e:	4629      	mov	r1, r5
20008030:	028b      	lsls	r3, r1, #10
20008032:	4621      	mov	r1, r4
20008034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20008038:	4621      	mov	r1, r4
2000803a:	028a      	lsls	r2, r1, #10
2000803c:	4610      	mov	r0, r2
2000803e:	4619      	mov	r1, r3
20008040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20008042:	2200      	movs	r2, #0
20008044:	61bb      	str	r3, [r7, #24]
20008046:	61fa      	str	r2, [r7, #28]
20008048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
2000804c:	f7f8 f8dc 	bl	20000208 <__aeabi_uldivmod>
20008050:	4602      	mov	r2, r0
20008052:	460b      	mov	r3, r1
20008054:	4613      	mov	r3, r2
20008056:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
20008058:	4b0b      	ldr	r3, [pc, #44]	@ (20008088 <HAL_RCC_GetSysClockFreq+0x200>)
2000805a:	685b      	ldr	r3, [r3, #4]
2000805c:	0c1b      	lsrs	r3, r3, #16
2000805e:	f003 0303 	and.w	r3, r3, #3
20008062:	3301      	adds	r3, #1
20008064:	005b      	lsls	r3, r3, #1
20008066:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
20008068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
2000806a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000806c:	fbb2 f3f3 	udiv	r3, r2, r3
20008070:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20008072:	e002      	b.n	2000807a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20008074:	4b05      	ldr	r3, [pc, #20]	@ (2000808c <HAL_RCC_GetSysClockFreq+0x204>)
20008076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20008078:	bf00      	nop
    }
  }
  return sysclockfreq;
2000807a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
2000807c:	4618      	mov	r0, r3
2000807e:	3750      	adds	r7, #80	@ 0x50
20008080:	46bd      	mov	sp, r7
20008082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20008086:	bf00      	nop
20008088:	40023800 	.word	0x40023800
2000808c:	00f42400 	.word	0x00f42400
20008090:	007a1200 	.word	0x007a1200

20008094 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20008094:	b480      	push	{r7}
20008096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20008098:	4b03      	ldr	r3, [pc, #12]	@ (200080a8 <HAL_RCC_GetHCLKFreq+0x14>)
2000809a:	681b      	ldr	r3, [r3, #0]
}
2000809c:	4618      	mov	r0, r3
2000809e:	46bd      	mov	sp, r7
200080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200080a4:	4770      	bx	lr
200080a6:	bf00      	nop
200080a8:	2000d550 	.word	0x2000d550

200080ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
200080ac:	b580      	push	{r7, lr}
200080ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
200080b0:	f7ff fff0 	bl	20008094 <HAL_RCC_GetHCLKFreq>
200080b4:	4602      	mov	r2, r0
200080b6:	4b05      	ldr	r3, [pc, #20]	@ (200080cc <HAL_RCC_GetPCLK1Freq+0x20>)
200080b8:	689b      	ldr	r3, [r3, #8]
200080ba:	0a9b      	lsrs	r3, r3, #10
200080bc:	f003 0307 	and.w	r3, r3, #7
200080c0:	4903      	ldr	r1, [pc, #12]	@ (200080d0 <HAL_RCC_GetPCLK1Freq+0x24>)
200080c2:	5ccb      	ldrb	r3, [r1, r3]
200080c4:	fa22 f303 	lsr.w	r3, r2, r3
}
200080c8:	4618      	mov	r0, r3
200080ca:	bd80      	pop	{r7, pc}
200080cc:	40023800 	.word	0x40023800
200080d0:	2000d538 	.word	0x2000d538

200080d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
200080d4:	b580      	push	{r7, lr}
200080d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
200080d8:	f7ff ffdc 	bl	20008094 <HAL_RCC_GetHCLKFreq>
200080dc:	4602      	mov	r2, r0
200080de:	4b05      	ldr	r3, [pc, #20]	@ (200080f4 <HAL_RCC_GetPCLK2Freq+0x20>)
200080e0:	689b      	ldr	r3, [r3, #8]
200080e2:	0b5b      	lsrs	r3, r3, #13
200080e4:	f003 0307 	and.w	r3, r3, #7
200080e8:	4903      	ldr	r1, [pc, #12]	@ (200080f8 <HAL_RCC_GetPCLK2Freq+0x24>)
200080ea:	5ccb      	ldrb	r3, [r1, r3]
200080ec:	fa22 f303 	lsr.w	r3, r2, r3
}
200080f0:	4618      	mov	r0, r3
200080f2:	bd80      	pop	{r7, pc}
200080f4:	40023800 	.word	0x40023800
200080f8:	2000d538 	.word	0x2000d538

200080fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
200080fc:	b580      	push	{r7, lr}
200080fe:	b088      	sub	sp, #32
20008100:	af00      	add	r7, sp, #0
20008102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
20008104:	2300      	movs	r3, #0
20008106:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
20008108:	2300      	movs	r3, #0
2000810a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
2000810c:	2300      	movs	r3, #0
2000810e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
20008110:	2300      	movs	r3, #0
20008112:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
20008114:	2300      	movs	r3, #0
20008116:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
20008118:	687b      	ldr	r3, [r7, #4]
2000811a:	681b      	ldr	r3, [r3, #0]
2000811c:	f003 0301 	and.w	r3, r3, #1
20008120:	2b00      	cmp	r3, #0
20008122:	d012      	beq.n	2000814a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20008124:	4b69      	ldr	r3, [pc, #420]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008126:	689b      	ldr	r3, [r3, #8]
20008128:	4a68      	ldr	r2, [pc, #416]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000812a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
2000812e:	6093      	str	r3, [r2, #8]
20008130:	4b66      	ldr	r3, [pc, #408]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008132:	689a      	ldr	r2, [r3, #8]
20008134:	687b      	ldr	r3, [r7, #4]
20008136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20008138:	4964      	ldr	r1, [pc, #400]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000813a:	4313      	orrs	r3, r2
2000813c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
2000813e:	687b      	ldr	r3, [r7, #4]
20008140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20008142:	2b00      	cmp	r3, #0
20008144:	d101      	bne.n	2000814a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
20008146:	2301      	movs	r3, #1
20008148:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
2000814a:	687b      	ldr	r3, [r7, #4]
2000814c:	681b      	ldr	r3, [r3, #0]
2000814e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20008152:	2b00      	cmp	r3, #0
20008154:	d017      	beq.n	20008186 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
20008156:	4b5d      	ldr	r3, [pc, #372]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
2000815c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20008160:	687b      	ldr	r3, [r7, #4]
20008162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20008164:	4959      	ldr	r1, [pc, #356]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008166:	4313      	orrs	r3, r2
20008168:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
2000816c:	687b      	ldr	r3, [r7, #4]
2000816e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20008170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20008174:	d101      	bne.n	2000817a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
20008176:	2301      	movs	r3, #1
20008178:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
2000817a:	687b      	ldr	r3, [r7, #4]
2000817c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000817e:	2b00      	cmp	r3, #0
20008180:	d101      	bne.n	20008186 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
20008182:	2301      	movs	r3, #1
20008184:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
20008186:	687b      	ldr	r3, [r7, #4]
20008188:	681b      	ldr	r3, [r3, #0]
2000818a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2000818e:	2b00      	cmp	r3, #0
20008190:	d017      	beq.n	200081c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
20008192:	4b4e      	ldr	r3, [pc, #312]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20008198:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
2000819c:	687b      	ldr	r3, [r7, #4]
2000819e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200081a0:	494a      	ldr	r1, [pc, #296]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200081a2:	4313      	orrs	r3, r2
200081a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
200081a8:	687b      	ldr	r3, [r7, #4]
200081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200081ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200081b0:	d101      	bne.n	200081b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
200081b2:	2301      	movs	r3, #1
200081b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
200081b6:	687b      	ldr	r3, [r7, #4]
200081b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200081ba:	2b00      	cmp	r3, #0
200081bc:	d101      	bne.n	200081c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
200081be:	2301      	movs	r3, #1
200081c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
200081c2:	687b      	ldr	r3, [r7, #4]
200081c4:	681b      	ldr	r3, [r3, #0]
200081c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
200081ca:	2b00      	cmp	r3, #0
200081cc:	d001      	beq.n	200081d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
200081ce:	2301      	movs	r3, #1
200081d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
200081d2:	687b      	ldr	r3, [r7, #4]
200081d4:	681b      	ldr	r3, [r3, #0]
200081d6:	f003 0320 	and.w	r3, r3, #32
200081da:	2b00      	cmp	r3, #0
200081dc:	f000 808b 	beq.w	200082f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
200081e0:	4b3a      	ldr	r3, [pc, #232]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200081e4:	4a39      	ldr	r2, [pc, #228]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200081e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200081ea:	6413      	str	r3, [r2, #64]	@ 0x40
200081ec:	4b37      	ldr	r3, [pc, #220]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200081ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200081f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200081f4:	60bb      	str	r3, [r7, #8]
200081f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
200081f8:	4b35      	ldr	r3, [pc, #212]	@ (200082d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
200081fa:	681b      	ldr	r3, [r3, #0]
200081fc:	4a34      	ldr	r2, [pc, #208]	@ (200082d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
200081fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20008202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20008204:	f7fd f958 	bl	200054b8 <HAL_GetTick>
20008208:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000820a:	e008      	b.n	2000821e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000820c:	f7fd f954 	bl	200054b8 <HAL_GetTick>
20008210:	4602      	mov	r2, r0
20008212:	697b      	ldr	r3, [r7, #20]
20008214:	1ad3      	subs	r3, r2, r3
20008216:	2b64      	cmp	r3, #100	@ 0x64
20008218:	d901      	bls.n	2000821e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
2000821a:	2303      	movs	r3, #3
2000821c:	e357      	b.n	200088ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000821e:	4b2c      	ldr	r3, [pc, #176]	@ (200082d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20008220:	681b      	ldr	r3, [r3, #0]
20008222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008226:	2b00      	cmp	r3, #0
20008228:	d0f0      	beq.n	2000820c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2000822a:	4b28      	ldr	r3, [pc, #160]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000822e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20008232:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20008234:	693b      	ldr	r3, [r7, #16]
20008236:	2b00      	cmp	r3, #0
20008238:	d035      	beq.n	200082a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
2000823a:	687b      	ldr	r3, [r7, #4]
2000823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000823e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20008242:	693a      	ldr	r2, [r7, #16]
20008244:	429a      	cmp	r2, r3
20008246:	d02e      	beq.n	200082a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20008248:	4b20      	ldr	r3, [pc, #128]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000824a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000824c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20008250:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
20008252:	4b1e      	ldr	r3, [pc, #120]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20008256:	4a1d      	ldr	r2, [pc, #116]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000825c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
2000825e:	4b1b      	ldr	r3, [pc, #108]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20008262:	4a1a      	ldr	r2, [pc, #104]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20008268:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
2000826a:	4a18      	ldr	r2, [pc, #96]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000826c:	693b      	ldr	r3, [r7, #16]
2000826e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20008270:	4b16      	ldr	r3, [pc, #88]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20008272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20008274:	f003 0301 	and.w	r3, r3, #1
20008278:	2b01      	cmp	r3, #1
2000827a:	d114      	bne.n	200082a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000827c:	f7fd f91c 	bl	200054b8 <HAL_GetTick>
20008280:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20008282:	e00a      	b.n	2000829a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20008284:	f7fd f918 	bl	200054b8 <HAL_GetTick>
20008288:	4602      	mov	r2, r0
2000828a:	697b      	ldr	r3, [r7, #20]
2000828c:	1ad3      	subs	r3, r2, r3
2000828e:	f241 3288 	movw	r2, #5000	@ 0x1388
20008292:	4293      	cmp	r3, r2
20008294:	d901      	bls.n	2000829a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
20008296:	2303      	movs	r3, #3
20008298:	e319      	b.n	200088ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000829a:	4b0c      	ldr	r3, [pc, #48]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000829c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000829e:	f003 0302 	and.w	r3, r3, #2
200082a2:	2b00      	cmp	r3, #0
200082a4:	d0ee      	beq.n	20008284 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
200082a6:	687b      	ldr	r3, [r7, #4]
200082a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200082aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
200082ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200082b2:	d111      	bne.n	200082d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
200082b4:	4b05      	ldr	r3, [pc, #20]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200082b6:	689b      	ldr	r3, [r3, #8]
200082b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
200082bc:	687b      	ldr	r3, [r7, #4]
200082be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
200082c0:	4b04      	ldr	r3, [pc, #16]	@ (200082d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
200082c2:	400b      	ands	r3, r1
200082c4:	4901      	ldr	r1, [pc, #4]	@ (200082cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200082c6:	4313      	orrs	r3, r2
200082c8:	608b      	str	r3, [r1, #8]
200082ca:	e00b      	b.n	200082e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
200082cc:	40023800 	.word	0x40023800
200082d0:	40007000 	.word	0x40007000
200082d4:	0ffffcff 	.word	0x0ffffcff
200082d8:	4baa      	ldr	r3, [pc, #680]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200082da:	689b      	ldr	r3, [r3, #8]
200082dc:	4aa9      	ldr	r2, [pc, #676]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200082de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
200082e2:	6093      	str	r3, [r2, #8]
200082e4:	4ba7      	ldr	r3, [pc, #668]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200082e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
200082e8:	687b      	ldr	r3, [r7, #4]
200082ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200082ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
200082f0:	49a4      	ldr	r1, [pc, #656]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200082f2:	4313      	orrs	r3, r2
200082f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
200082f6:	687b      	ldr	r3, [r7, #4]
200082f8:	681b      	ldr	r3, [r3, #0]
200082fa:	f003 0310 	and.w	r3, r3, #16
200082fe:	2b00      	cmp	r3, #0
20008300:	d010      	beq.n	20008324 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
20008302:	4ba0      	ldr	r3, [pc, #640]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20008308:	4a9e      	ldr	r2, [pc, #632]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000830a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2000830e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
20008312:	4b9c      	ldr	r3, [pc, #624]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008314:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
20008318:	687b      	ldr	r3, [r7, #4]
2000831a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000831c:	4999      	ldr	r1, [pc, #612]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000831e:	4313      	orrs	r3, r2
20008320:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
20008324:	687b      	ldr	r3, [r7, #4]
20008326:	681b      	ldr	r3, [r3, #0]
20008328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000832c:	2b00      	cmp	r3, #0
2000832e:	d00a      	beq.n	20008346 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
20008330:	4b94      	ldr	r3, [pc, #592]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008336:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
2000833a:	687b      	ldr	r3, [r7, #4]
2000833c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2000833e:	4991      	ldr	r1, [pc, #580]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008340:	4313      	orrs	r3, r2
20008342:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
20008346:	687b      	ldr	r3, [r7, #4]
20008348:	681b      	ldr	r3, [r3, #0]
2000834a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000834e:	2b00      	cmp	r3, #0
20008350:	d00a      	beq.n	20008368 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
20008352:	4b8c      	ldr	r3, [pc, #560]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008358:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
2000835c:	687b      	ldr	r3, [r7, #4]
2000835e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20008360:	4988      	ldr	r1, [pc, #544]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008362:	4313      	orrs	r3, r2
20008364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
20008368:	687b      	ldr	r3, [r7, #4]
2000836a:	681b      	ldr	r3, [r3, #0]
2000836c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20008370:	2b00      	cmp	r3, #0
20008372:	d00a      	beq.n	2000838a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
20008374:	4b83      	ldr	r3, [pc, #524]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000837a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
2000837e:	687b      	ldr	r3, [r7, #4]
20008380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20008382:	4980      	ldr	r1, [pc, #512]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008384:	4313      	orrs	r3, r2
20008386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2000838a:	687b      	ldr	r3, [r7, #4]
2000838c:	681b      	ldr	r3, [r3, #0]
2000838e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20008392:	2b00      	cmp	r3, #0
20008394:	d00a      	beq.n	200083ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
20008396:	4b7b      	ldr	r3, [pc, #492]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000839c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
200083a0:	687b      	ldr	r3, [r7, #4]
200083a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200083a4:	4977      	ldr	r1, [pc, #476]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200083a6:	4313      	orrs	r3, r2
200083a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
200083ac:	687b      	ldr	r3, [r7, #4]
200083ae:	681b      	ldr	r3, [r3, #0]
200083b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200083b4:	2b00      	cmp	r3, #0
200083b6:	d00a      	beq.n	200083ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
200083b8:	4b72      	ldr	r3, [pc, #456]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200083be:	f023 0203 	bic.w	r2, r3, #3
200083c2:	687b      	ldr	r3, [r7, #4]
200083c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200083c6:	496f      	ldr	r1, [pc, #444]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200083c8:	4313      	orrs	r3, r2
200083ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
200083ce:	687b      	ldr	r3, [r7, #4]
200083d0:	681b      	ldr	r3, [r3, #0]
200083d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200083d6:	2b00      	cmp	r3, #0
200083d8:	d00a      	beq.n	200083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
200083da:	4b6a      	ldr	r3, [pc, #424]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200083e0:	f023 020c 	bic.w	r2, r3, #12
200083e4:	687b      	ldr	r3, [r7, #4]
200083e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200083e8:	4966      	ldr	r1, [pc, #408]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200083ea:	4313      	orrs	r3, r2
200083ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
200083f0:	687b      	ldr	r3, [r7, #4]
200083f2:	681b      	ldr	r3, [r3, #0]
200083f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200083f8:	2b00      	cmp	r3, #0
200083fa:	d00a      	beq.n	20008412 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
200083fc:	4b61      	ldr	r3, [pc, #388]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200083fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008402:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
20008406:	687b      	ldr	r3, [r7, #4]
20008408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000840a:	495e      	ldr	r1, [pc, #376]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000840c:	4313      	orrs	r3, r2
2000840e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
20008412:	687b      	ldr	r3, [r7, #4]
20008414:	681b      	ldr	r3, [r3, #0]
20008416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2000841a:	2b00      	cmp	r3, #0
2000841c:	d00a      	beq.n	20008434 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
2000841e:	4b59      	ldr	r3, [pc, #356]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008424:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
20008428:	687b      	ldr	r3, [r7, #4]
2000842a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000842c:	4955      	ldr	r1, [pc, #340]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000842e:	4313      	orrs	r3, r2
20008430:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
20008434:	687b      	ldr	r3, [r7, #4]
20008436:	681b      	ldr	r3, [r3, #0]
20008438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2000843c:	2b00      	cmp	r3, #0
2000843e:	d00a      	beq.n	20008456 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
20008440:	4b50      	ldr	r3, [pc, #320]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008446:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
2000844a:	687b      	ldr	r3, [r7, #4]
2000844c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000844e:	494d      	ldr	r1, [pc, #308]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008450:	4313      	orrs	r3, r2
20008452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
20008456:	687b      	ldr	r3, [r7, #4]
20008458:	681b      	ldr	r3, [r3, #0]
2000845a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
2000845e:	2b00      	cmp	r3, #0
20008460:	d00a      	beq.n	20008478 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
20008462:	4b48      	ldr	r3, [pc, #288]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008468:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
2000846c:	687b      	ldr	r3, [r7, #4]
2000846e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20008470:	4944      	ldr	r1, [pc, #272]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008472:	4313      	orrs	r3, r2
20008474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
20008478:	687b      	ldr	r3, [r7, #4]
2000847a:	681b      	ldr	r3, [r3, #0]
2000847c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20008480:	2b00      	cmp	r3, #0
20008482:	d00a      	beq.n	2000849a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
20008484:	4b3f      	ldr	r3, [pc, #252]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000848a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
2000848e:	687b      	ldr	r3, [r7, #4]
20008490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20008492:	493c      	ldr	r1, [pc, #240]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20008494:	4313      	orrs	r3, r2
20008496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
2000849a:	687b      	ldr	r3, [r7, #4]
2000849c:	681b      	ldr	r3, [r3, #0]
2000849e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200084a2:	2b00      	cmp	r3, #0
200084a4:	d00a      	beq.n	200084bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
200084a6:	4b37      	ldr	r3, [pc, #220]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200084ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
200084b0:	687b      	ldr	r3, [r7, #4]
200084b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200084b4:	4933      	ldr	r1, [pc, #204]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084b6:	4313      	orrs	r3, r2
200084b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
200084bc:	687b      	ldr	r3, [r7, #4]
200084be:	681b      	ldr	r3, [r3, #0]
200084c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200084c4:	2b00      	cmp	r3, #0
200084c6:	d00a      	beq.n	200084de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
200084c8:	4b2e      	ldr	r3, [pc, #184]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200084ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
200084d2:	687b      	ldr	r3, [r7, #4]
200084d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
200084d6:	492b      	ldr	r1, [pc, #172]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084d8:	4313      	orrs	r3, r2
200084da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
200084de:	687b      	ldr	r3, [r7, #4]
200084e0:	681b      	ldr	r3, [r3, #0]
200084e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200084e6:	2b00      	cmp	r3, #0
200084e8:	d011      	beq.n	2000850e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
200084ea:	4b26      	ldr	r3, [pc, #152]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200084f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
200084f4:	687b      	ldr	r3, [r7, #4]
200084f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200084f8:	4922      	ldr	r1, [pc, #136]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200084fa:	4313      	orrs	r3, r2
200084fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
20008500:	687b      	ldr	r3, [r7, #4]
20008502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20008504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20008508:	d101      	bne.n	2000850e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
2000850a:	2301      	movs	r3, #1
2000850c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2000850e:	687b      	ldr	r3, [r7, #4]
20008510:	681b      	ldr	r3, [r3, #0]
20008512:	f003 0308 	and.w	r3, r3, #8
20008516:	2b00      	cmp	r3, #0
20008518:	d001      	beq.n	2000851e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
2000851a:	2301      	movs	r3, #1
2000851c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2000851e:	687b      	ldr	r3, [r7, #4]
20008520:	681b      	ldr	r3, [r3, #0]
20008522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20008526:	2b00      	cmp	r3, #0
20008528:	d00a      	beq.n	20008540 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2000852a:	4b16      	ldr	r3, [pc, #88]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000852c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008530:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
20008534:	687b      	ldr	r3, [r7, #4]
20008536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20008538:	4912      	ldr	r1, [pc, #72]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000853a:	4313      	orrs	r3, r2
2000853c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
20008540:	687b      	ldr	r3, [r7, #4]
20008542:	681b      	ldr	r3, [r3, #0]
20008544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
20008548:	2b00      	cmp	r3, #0
2000854a:	d00b      	beq.n	20008564 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
2000854c:	4b0d      	ldr	r3, [pc, #52]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008552:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
20008556:	687b      	ldr	r3, [r7, #4]
20008558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
2000855c:	4909      	ldr	r1, [pc, #36]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000855e:	4313      	orrs	r3, r2
20008560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20008564:	69fb      	ldr	r3, [r7, #28]
20008566:	2b01      	cmp	r3, #1
20008568:	d006      	beq.n	20008578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
2000856a:	687b      	ldr	r3, [r7, #4]
2000856c:	681b      	ldr	r3, [r3, #0]
2000856e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20008572:	2b00      	cmp	r3, #0
20008574:	f000 80d9 	beq.w	2000872a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20008578:	4b02      	ldr	r3, [pc, #8]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000857a:	681b      	ldr	r3, [r3, #0]
2000857c:	4a01      	ldr	r2, [pc, #4]	@ (20008584 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000857e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
20008582:	e001      	b.n	20008588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
20008584:	40023800 	.word	0x40023800
20008588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000858a:	f7fc ff95 	bl	200054b8 <HAL_GetTick>
2000858e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20008590:	e008      	b.n	200085a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20008592:	f7fc ff91 	bl	200054b8 <HAL_GetTick>
20008596:	4602      	mov	r2, r0
20008598:	697b      	ldr	r3, [r7, #20]
2000859a:	1ad3      	subs	r3, r2, r3
2000859c:	2b64      	cmp	r3, #100	@ 0x64
2000859e:	d901      	bls.n	200085a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200085a0:	2303      	movs	r3, #3
200085a2:	e194      	b.n	200088ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200085a4:	4b6c      	ldr	r3, [pc, #432]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200085a6:	681b      	ldr	r3, [r3, #0]
200085a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200085ac:	2b00      	cmp	r3, #0
200085ae:	d1f0      	bne.n	20008592 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
200085b0:	687b      	ldr	r3, [r7, #4]
200085b2:	681b      	ldr	r3, [r3, #0]
200085b4:	f003 0301 	and.w	r3, r3, #1
200085b8:	2b00      	cmp	r3, #0
200085ba:	d021      	beq.n	20008600 <HAL_RCCEx_PeriphCLKConfig+0x504>
200085bc:	687b      	ldr	r3, [r7, #4]
200085be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200085c0:	2b00      	cmp	r3, #0
200085c2:	d11d      	bne.n	20008600 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
200085c4:	4b64      	ldr	r3, [pc, #400]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200085c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200085ca:	0c1b      	lsrs	r3, r3, #16
200085cc:	f003 0303 	and.w	r3, r3, #3
200085d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
200085d2:	4b61      	ldr	r3, [pc, #388]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200085d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200085d8:	0e1b      	lsrs	r3, r3, #24
200085da:	f003 030f 	and.w	r3, r3, #15
200085de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
200085e0:	687b      	ldr	r3, [r7, #4]
200085e2:	685b      	ldr	r3, [r3, #4]
200085e4:	019a      	lsls	r2, r3, #6
200085e6:	693b      	ldr	r3, [r7, #16]
200085e8:	041b      	lsls	r3, r3, #16
200085ea:	431a      	orrs	r2, r3
200085ec:	68fb      	ldr	r3, [r7, #12]
200085ee:	061b      	lsls	r3, r3, #24
200085f0:	431a      	orrs	r2, r3
200085f2:	687b      	ldr	r3, [r7, #4]
200085f4:	689b      	ldr	r3, [r3, #8]
200085f6:	071b      	lsls	r3, r3, #28
200085f8:	4957      	ldr	r1, [pc, #348]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200085fa:	4313      	orrs	r3, r2
200085fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20008600:	687b      	ldr	r3, [r7, #4]
20008602:	681b      	ldr	r3, [r3, #0]
20008604:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20008608:	2b00      	cmp	r3, #0
2000860a:	d004      	beq.n	20008616 <HAL_RCCEx_PeriphCLKConfig+0x51a>
2000860c:	687b      	ldr	r3, [r7, #4]
2000860e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20008610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20008614:	d00a      	beq.n	2000862c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20008616:	687b      	ldr	r3, [r7, #4]
20008618:	681b      	ldr	r3, [r3, #0]
2000861a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2000861e:	2b00      	cmp	r3, #0
20008620:	d02e      	beq.n	20008680 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20008622:	687b      	ldr	r3, [r7, #4]
20008624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20008626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
2000862a:	d129      	bne.n	20008680 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
2000862c:	4b4a      	ldr	r3, [pc, #296]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000862e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20008632:	0c1b      	lsrs	r3, r3, #16
20008634:	f003 0303 	and.w	r3, r3, #3
20008638:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2000863a:	4b47      	ldr	r3, [pc, #284]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000863c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20008640:	0f1b      	lsrs	r3, r3, #28
20008642:	f003 0307 	and.w	r3, r3, #7
20008646:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
20008648:	687b      	ldr	r3, [r7, #4]
2000864a:	685b      	ldr	r3, [r3, #4]
2000864c:	019a      	lsls	r2, r3, #6
2000864e:	693b      	ldr	r3, [r7, #16]
20008650:	041b      	lsls	r3, r3, #16
20008652:	431a      	orrs	r2, r3
20008654:	687b      	ldr	r3, [r7, #4]
20008656:	68db      	ldr	r3, [r3, #12]
20008658:	061b      	lsls	r3, r3, #24
2000865a:	431a      	orrs	r2, r3
2000865c:	68fb      	ldr	r3, [r7, #12]
2000865e:	071b      	lsls	r3, r3, #28
20008660:	493d      	ldr	r1, [pc, #244]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008662:	4313      	orrs	r3, r2
20008664:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
20008668:	4b3b      	ldr	r3, [pc, #236]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000866a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
2000866e:	f023 021f 	bic.w	r2, r3, #31
20008672:	687b      	ldr	r3, [r7, #4]
20008674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008676:	3b01      	subs	r3, #1
20008678:	4937      	ldr	r1, [pc, #220]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000867a:	4313      	orrs	r3, r2
2000867c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20008680:	687b      	ldr	r3, [r7, #4]
20008682:	681b      	ldr	r3, [r3, #0]
20008684:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20008688:	2b00      	cmp	r3, #0
2000868a:	d01d      	beq.n	200086c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
2000868c:	4b32      	ldr	r3, [pc, #200]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000868e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20008692:	0e1b      	lsrs	r3, r3, #24
20008694:	f003 030f 	and.w	r3, r3, #15
20008698:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2000869a:	4b2f      	ldr	r3, [pc, #188]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000869c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200086a0:	0f1b      	lsrs	r3, r3, #28
200086a2:	f003 0307 	and.w	r3, r3, #7
200086a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
200086a8:	687b      	ldr	r3, [r7, #4]
200086aa:	685b      	ldr	r3, [r3, #4]
200086ac:	019a      	lsls	r2, r3, #6
200086ae:	687b      	ldr	r3, [r7, #4]
200086b0:	691b      	ldr	r3, [r3, #16]
200086b2:	041b      	lsls	r3, r3, #16
200086b4:	431a      	orrs	r2, r3
200086b6:	693b      	ldr	r3, [r7, #16]
200086b8:	061b      	lsls	r3, r3, #24
200086ba:	431a      	orrs	r2, r3
200086bc:	68fb      	ldr	r3, [r7, #12]
200086be:	071b      	lsls	r3, r3, #28
200086c0:	4925      	ldr	r1, [pc, #148]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200086c2:	4313      	orrs	r3, r2
200086c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
200086c8:	687b      	ldr	r3, [r7, #4]
200086ca:	681b      	ldr	r3, [r3, #0]
200086cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200086d0:	2b00      	cmp	r3, #0
200086d2:	d011      	beq.n	200086f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
200086d4:	687b      	ldr	r3, [r7, #4]
200086d6:	685b      	ldr	r3, [r3, #4]
200086d8:	019a      	lsls	r2, r3, #6
200086da:	687b      	ldr	r3, [r7, #4]
200086dc:	691b      	ldr	r3, [r3, #16]
200086de:	041b      	lsls	r3, r3, #16
200086e0:	431a      	orrs	r2, r3
200086e2:	687b      	ldr	r3, [r7, #4]
200086e4:	68db      	ldr	r3, [r3, #12]
200086e6:	061b      	lsls	r3, r3, #24
200086e8:	431a      	orrs	r2, r3
200086ea:	687b      	ldr	r3, [r7, #4]
200086ec:	689b      	ldr	r3, [r3, #8]
200086ee:	071b      	lsls	r3, r3, #28
200086f0:	4919      	ldr	r1, [pc, #100]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200086f2:	4313      	orrs	r3, r2
200086f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
200086f8:	4b17      	ldr	r3, [pc, #92]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200086fa:	681b      	ldr	r3, [r3, #0]
200086fc:	4a16      	ldr	r2, [pc, #88]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200086fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20008702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20008704:	f7fc fed8 	bl	200054b8 <HAL_GetTick>
20008708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000870a:	e008      	b.n	2000871e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000870c:	f7fc fed4 	bl	200054b8 <HAL_GetTick>
20008710:	4602      	mov	r2, r0
20008712:	697b      	ldr	r3, [r7, #20]
20008714:	1ad3      	subs	r3, r2, r3
20008716:	2b64      	cmp	r3, #100	@ 0x64
20008718:	d901      	bls.n	2000871e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000871a:	2303      	movs	r3, #3
2000871c:	e0d7      	b.n	200088ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000871e:	4b0e      	ldr	r3, [pc, #56]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008720:	681b      	ldr	r3, [r3, #0]
20008722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20008726:	2b00      	cmp	r3, #0
20008728:	d0f0      	beq.n	2000870c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
2000872a:	69bb      	ldr	r3, [r7, #24]
2000872c:	2b01      	cmp	r3, #1
2000872e:	f040 80cd 	bne.w	200088cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
20008732:	4b09      	ldr	r3, [pc, #36]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008734:	681b      	ldr	r3, [r3, #0]
20008736:	4a08      	ldr	r2, [pc, #32]	@ (20008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20008738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
2000873c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000873e:	f7fc febb 	bl	200054b8 <HAL_GetTick>
20008742:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20008744:	e00a      	b.n	2000875c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20008746:	f7fc feb7 	bl	200054b8 <HAL_GetTick>
2000874a:	4602      	mov	r2, r0
2000874c:	697b      	ldr	r3, [r7, #20]
2000874e:	1ad3      	subs	r3, r2, r3
20008750:	2b64      	cmp	r3, #100	@ 0x64
20008752:	d903      	bls.n	2000875c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20008754:	2303      	movs	r3, #3
20008756:	e0ba      	b.n	200088ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
20008758:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000875c:	4b5e      	ldr	r3, [pc, #376]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000875e:	681b      	ldr	r3, [r3, #0]
20008760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20008764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20008768:	d0ed      	beq.n	20008746 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
2000876a:	687b      	ldr	r3, [r7, #4]
2000876c:	681b      	ldr	r3, [r3, #0]
2000876e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20008772:	2b00      	cmp	r3, #0
20008774:	d003      	beq.n	2000877e <HAL_RCCEx_PeriphCLKConfig+0x682>
20008776:	687b      	ldr	r3, [r7, #4]
20008778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000877a:	2b00      	cmp	r3, #0
2000877c:	d009      	beq.n	20008792 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
2000877e:	687b      	ldr	r3, [r7, #4]
20008780:	681b      	ldr	r3, [r3, #0]
20008782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20008786:	2b00      	cmp	r3, #0
20008788:	d02e      	beq.n	200087e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
2000878a:	687b      	ldr	r3, [r7, #4]
2000878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000878e:	2b00      	cmp	r3, #0
20008790:	d12a      	bne.n	200087e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20008792:	4b51      	ldr	r3, [pc, #324]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20008798:	0c1b      	lsrs	r3, r3, #16
2000879a:	f003 0303 	and.w	r3, r3, #3
2000879e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
200087a0:	4b4d      	ldr	r3, [pc, #308]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200087a6:	0f1b      	lsrs	r3, r3, #28
200087a8:	f003 0307 	and.w	r3, r3, #7
200087ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
200087ae:	687b      	ldr	r3, [r7, #4]
200087b0:	695b      	ldr	r3, [r3, #20]
200087b2:	019a      	lsls	r2, r3, #6
200087b4:	693b      	ldr	r3, [r7, #16]
200087b6:	041b      	lsls	r3, r3, #16
200087b8:	431a      	orrs	r2, r3
200087ba:	687b      	ldr	r3, [r7, #4]
200087bc:	699b      	ldr	r3, [r3, #24]
200087be:	061b      	lsls	r3, r3, #24
200087c0:	431a      	orrs	r2, r3
200087c2:	68fb      	ldr	r3, [r7, #12]
200087c4:	071b      	lsls	r3, r3, #28
200087c6:	4944      	ldr	r1, [pc, #272]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200087c8:	4313      	orrs	r3, r2
200087ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
200087ce:	4b42      	ldr	r3, [pc, #264]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200087d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200087d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
200087d8:	687b      	ldr	r3, [r7, #4]
200087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200087dc:	3b01      	subs	r3, #1
200087de:	021b      	lsls	r3, r3, #8
200087e0:	493d      	ldr	r1, [pc, #244]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200087e2:	4313      	orrs	r3, r2
200087e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
200087e8:	687b      	ldr	r3, [r7, #4]
200087ea:	681b      	ldr	r3, [r3, #0]
200087ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200087f0:	2b00      	cmp	r3, #0
200087f2:	d022      	beq.n	2000883a <HAL_RCCEx_PeriphCLKConfig+0x73e>
200087f4:	687b      	ldr	r3, [r7, #4]
200087f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200087f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
200087fc:	d11d      	bne.n	2000883a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
200087fe:	4b36      	ldr	r3, [pc, #216]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20008804:	0e1b      	lsrs	r3, r3, #24
20008806:	f003 030f 	and.w	r3, r3, #15
2000880a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
2000880c:	4b32      	ldr	r3, [pc, #200]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20008812:	0f1b      	lsrs	r3, r3, #28
20008814:	f003 0307 	and.w	r3, r3, #7
20008818:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
2000881a:	687b      	ldr	r3, [r7, #4]
2000881c:	695b      	ldr	r3, [r3, #20]
2000881e:	019a      	lsls	r2, r3, #6
20008820:	687b      	ldr	r3, [r7, #4]
20008822:	6a1b      	ldr	r3, [r3, #32]
20008824:	041b      	lsls	r3, r3, #16
20008826:	431a      	orrs	r2, r3
20008828:	693b      	ldr	r3, [r7, #16]
2000882a:	061b      	lsls	r3, r3, #24
2000882c:	431a      	orrs	r2, r3
2000882e:	68fb      	ldr	r3, [r7, #12]
20008830:	071b      	lsls	r3, r3, #28
20008832:	4929      	ldr	r1, [pc, #164]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008834:	4313      	orrs	r3, r2
20008836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
2000883a:	687b      	ldr	r3, [r7, #4]
2000883c:	681b      	ldr	r3, [r3, #0]
2000883e:	f003 0308 	and.w	r3, r3, #8
20008842:	2b00      	cmp	r3, #0
20008844:	d028      	beq.n	20008898 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20008846:	4b24      	ldr	r3, [pc, #144]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
2000884c:	0e1b      	lsrs	r3, r3, #24
2000884e:	f003 030f 	and.w	r3, r3, #15
20008852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20008854:	4b20      	ldr	r3, [pc, #128]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
2000885a:	0c1b      	lsrs	r3, r3, #16
2000885c:	f003 0303 	and.w	r3, r3, #3
20008860:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
20008862:	687b      	ldr	r3, [r7, #4]
20008864:	695b      	ldr	r3, [r3, #20]
20008866:	019a      	lsls	r2, r3, #6
20008868:	68fb      	ldr	r3, [r7, #12]
2000886a:	041b      	lsls	r3, r3, #16
2000886c:	431a      	orrs	r2, r3
2000886e:	693b      	ldr	r3, [r7, #16]
20008870:	061b      	lsls	r3, r3, #24
20008872:	431a      	orrs	r2, r3
20008874:	687b      	ldr	r3, [r7, #4]
20008876:	69db      	ldr	r3, [r3, #28]
20008878:	071b      	lsls	r3, r3, #28
2000887a:	4917      	ldr	r1, [pc, #92]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000887c:	4313      	orrs	r3, r2
2000887e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
20008882:	4b15      	ldr	r3, [pc, #84]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20008888:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
2000888c:	687b      	ldr	r3, [r7, #4]
2000888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20008890:	4911      	ldr	r1, [pc, #68]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20008892:	4313      	orrs	r3, r2
20008894:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
20008898:	4b0f      	ldr	r3, [pc, #60]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000889a:	681b      	ldr	r3, [r3, #0]
2000889c:	4a0e      	ldr	r2, [pc, #56]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000889e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200088a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200088a4:	f7fc fe08 	bl	200054b8 <HAL_GetTick>
200088a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
200088aa:	e008      	b.n	200088be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
200088ac:	f7fc fe04 	bl	200054b8 <HAL_GetTick>
200088b0:	4602      	mov	r2, r0
200088b2:	697b      	ldr	r3, [r7, #20]
200088b4:	1ad3      	subs	r3, r2, r3
200088b6:	2b64      	cmp	r3, #100	@ 0x64
200088b8:	d901      	bls.n	200088be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200088ba:	2303      	movs	r3, #3
200088bc:	e007      	b.n	200088ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
200088be:	4b06      	ldr	r3, [pc, #24]	@ (200088d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200088c0:	681b      	ldr	r3, [r3, #0]
200088c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
200088c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
200088ca:	d1ef      	bne.n	200088ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
200088cc:	2300      	movs	r3, #0
}
200088ce:	4618      	mov	r0, r3
200088d0:	3720      	adds	r7, #32
200088d2:	46bd      	mov	sp, r7
200088d4:	bd80      	pop	{r7, pc}
200088d6:	bf00      	nop
200088d8:	40023800 	.word	0x40023800

200088dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
200088dc:	b580      	push	{r7, lr}
200088de:	b084      	sub	sp, #16
200088e0:	af00      	add	r7, sp, #0
200088e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
200088e4:	687b      	ldr	r3, [r7, #4]
200088e6:	2b00      	cmp	r3, #0
200088e8:	d101      	bne.n	200088ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
200088ea:	2301      	movs	r3, #1
200088ec:	e09d      	b.n	20008a2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
200088ee:	687b      	ldr	r3, [r7, #4]
200088f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200088f2:	2b00      	cmp	r3, #0
200088f4:	d108      	bne.n	20008908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
200088f6:	687b      	ldr	r3, [r7, #4]
200088f8:	685b      	ldr	r3, [r3, #4]
200088fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
200088fe:	d009      	beq.n	20008914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20008900:	687b      	ldr	r3, [r7, #4]
20008902:	2200      	movs	r2, #0
20008904:	61da      	str	r2, [r3, #28]
20008906:	e005      	b.n	20008914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20008908:	687b      	ldr	r3, [r7, #4]
2000890a:	2200      	movs	r2, #0
2000890c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
2000890e:	687b      	ldr	r3, [r7, #4]
20008910:	2200      	movs	r2, #0
20008912:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20008914:	687b      	ldr	r3, [r7, #4]
20008916:	2200      	movs	r2, #0
20008918:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
2000891a:	687b      	ldr	r3, [r7, #4]
2000891c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
20008920:	b2db      	uxtb	r3, r3
20008922:	2b00      	cmp	r3, #0
20008924:	d106      	bne.n	20008934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20008926:	687b      	ldr	r3, [r7, #4]
20008928:	2200      	movs	r2, #0
2000892a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
2000892e:	6878      	ldr	r0, [r7, #4]
20008930:	f7fc fbcc 	bl	200050cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20008934:	687b      	ldr	r3, [r7, #4]
20008936:	2202      	movs	r2, #2
20008938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2000893c:	687b      	ldr	r3, [r7, #4]
2000893e:	681b      	ldr	r3, [r3, #0]
20008940:	681a      	ldr	r2, [r3, #0]
20008942:	687b      	ldr	r3, [r7, #4]
20008944:	681b      	ldr	r3, [r3, #0]
20008946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
2000894a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2000894c:	687b      	ldr	r3, [r7, #4]
2000894e:	68db      	ldr	r3, [r3, #12]
20008950:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20008954:	d902      	bls.n	2000895c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
20008956:	2300      	movs	r3, #0
20008958:	60fb      	str	r3, [r7, #12]
2000895a:	e002      	b.n	20008962 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
2000895c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20008960:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
20008962:	687b      	ldr	r3, [r7, #4]
20008964:	68db      	ldr	r3, [r3, #12]
20008966:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
2000896a:	d007      	beq.n	2000897c <HAL_SPI_Init+0xa0>
2000896c:	687b      	ldr	r3, [r7, #4]
2000896e:	68db      	ldr	r3, [r3, #12]
20008970:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20008974:	d002      	beq.n	2000897c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20008976:	687b      	ldr	r3, [r7, #4]
20008978:	2200      	movs	r2, #0
2000897a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
2000897c:	687b      	ldr	r3, [r7, #4]
2000897e:	685b      	ldr	r3, [r3, #4]
20008980:	f403 7282 	and.w	r2, r3, #260	@ 0x104
20008984:	687b      	ldr	r3, [r7, #4]
20008986:	689b      	ldr	r3, [r3, #8]
20008988:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
2000898c:	431a      	orrs	r2, r3
2000898e:	687b      	ldr	r3, [r7, #4]
20008990:	691b      	ldr	r3, [r3, #16]
20008992:	f003 0302 	and.w	r3, r3, #2
20008996:	431a      	orrs	r2, r3
20008998:	687b      	ldr	r3, [r7, #4]
2000899a:	695b      	ldr	r3, [r3, #20]
2000899c:	f003 0301 	and.w	r3, r3, #1
200089a0:	431a      	orrs	r2, r3
200089a2:	687b      	ldr	r3, [r7, #4]
200089a4:	699b      	ldr	r3, [r3, #24]
200089a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
200089aa:	431a      	orrs	r2, r3
200089ac:	687b      	ldr	r3, [r7, #4]
200089ae:	69db      	ldr	r3, [r3, #28]
200089b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
200089b4:	431a      	orrs	r2, r3
200089b6:	687b      	ldr	r3, [r7, #4]
200089b8:	6a1b      	ldr	r3, [r3, #32]
200089ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200089be:	ea42 0103 	orr.w	r1, r2, r3
200089c2:	687b      	ldr	r3, [r7, #4]
200089c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200089c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
200089ca:	687b      	ldr	r3, [r7, #4]
200089cc:	681b      	ldr	r3, [r3, #0]
200089ce:	430a      	orrs	r2, r1
200089d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
200089d2:	687b      	ldr	r3, [r7, #4]
200089d4:	699b      	ldr	r3, [r3, #24]
200089d6:	0c1b      	lsrs	r3, r3, #16
200089d8:	f003 0204 	and.w	r2, r3, #4
200089dc:	687b      	ldr	r3, [r7, #4]
200089de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200089e0:	f003 0310 	and.w	r3, r3, #16
200089e4:	431a      	orrs	r2, r3
200089e6:	687b      	ldr	r3, [r7, #4]
200089e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200089ea:	f003 0308 	and.w	r3, r3, #8
200089ee:	431a      	orrs	r2, r3
200089f0:	687b      	ldr	r3, [r7, #4]
200089f2:	68db      	ldr	r3, [r3, #12]
200089f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
200089f8:	ea42 0103 	orr.w	r1, r2, r3
200089fc:	68fb      	ldr	r3, [r7, #12]
200089fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
20008a02:	687b      	ldr	r3, [r7, #4]
20008a04:	681b      	ldr	r3, [r3, #0]
20008a06:	430a      	orrs	r2, r1
20008a08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20008a0a:	687b      	ldr	r3, [r7, #4]
20008a0c:	681b      	ldr	r3, [r3, #0]
20008a0e:	69da      	ldr	r2, [r3, #28]
20008a10:	687b      	ldr	r3, [r7, #4]
20008a12:	681b      	ldr	r3, [r3, #0]
20008a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
20008a18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008a1a:	687b      	ldr	r3, [r7, #4]
20008a1c:	2200      	movs	r2, #0
20008a1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
20008a20:	687b      	ldr	r3, [r7, #4]
20008a22:	2201      	movs	r2, #1
20008a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
20008a28:	2300      	movs	r3, #0
}
20008a2a:	4618      	mov	r0, r3
20008a2c:	3710      	adds	r7, #16
20008a2e:	46bd      	mov	sp, r7
20008a30:	bd80      	pop	{r7, pc}

20008a32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
20008a32:	b580      	push	{r7, lr}
20008a34:	b082      	sub	sp, #8
20008a36:	af00      	add	r7, sp, #0
20008a38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
20008a3a:	687b      	ldr	r3, [r7, #4]
20008a3c:	2b00      	cmp	r3, #0
20008a3e:	d101      	bne.n	20008a44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
20008a40:	2301      	movs	r3, #1
20008a42:	e040      	b.n	20008ac6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
20008a44:	687b      	ldr	r3, [r7, #4]
20008a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20008a48:	2b00      	cmp	r3, #0
20008a4a:	d106      	bne.n	20008a5a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
20008a4c:	687b      	ldr	r3, [r7, #4]
20008a4e:	2200      	movs	r2, #0
20008a50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
20008a54:	6878      	ldr	r0, [r7, #4]
20008a56:	f7fc fbcd 	bl	200051f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
20008a5a:	687b      	ldr	r3, [r7, #4]
20008a5c:	2224      	movs	r2, #36	@ 0x24
20008a5e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
20008a60:	687b      	ldr	r3, [r7, #4]
20008a62:	681b      	ldr	r3, [r3, #0]
20008a64:	681a      	ldr	r2, [r3, #0]
20008a66:	687b      	ldr	r3, [r7, #4]
20008a68:	681b      	ldr	r3, [r3, #0]
20008a6a:	f022 0201 	bic.w	r2, r2, #1
20008a6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
20008a70:	687b      	ldr	r3, [r7, #4]
20008a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008a74:	2b00      	cmp	r3, #0
20008a76:	d002      	beq.n	20008a7e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
20008a78:	6878      	ldr	r0, [r7, #4]
20008a7a:	f000 fa8d 	bl	20008f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
20008a7e:	6878      	ldr	r0, [r7, #4]
20008a80:	f000 f826 	bl	20008ad0 <UART_SetConfig>
20008a84:	4603      	mov	r3, r0
20008a86:	2b01      	cmp	r3, #1
20008a88:	d101      	bne.n	20008a8e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
20008a8a:	2301      	movs	r3, #1
20008a8c:	e01b      	b.n	20008ac6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
20008a8e:	687b      	ldr	r3, [r7, #4]
20008a90:	681b      	ldr	r3, [r3, #0]
20008a92:	685a      	ldr	r2, [r3, #4]
20008a94:	687b      	ldr	r3, [r7, #4]
20008a96:	681b      	ldr	r3, [r3, #0]
20008a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
20008a9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
20008a9e:	687b      	ldr	r3, [r7, #4]
20008aa0:	681b      	ldr	r3, [r3, #0]
20008aa2:	689a      	ldr	r2, [r3, #8]
20008aa4:	687b      	ldr	r3, [r7, #4]
20008aa6:	681b      	ldr	r3, [r3, #0]
20008aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
20008aac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
20008aae:	687b      	ldr	r3, [r7, #4]
20008ab0:	681b      	ldr	r3, [r3, #0]
20008ab2:	681a      	ldr	r2, [r3, #0]
20008ab4:	687b      	ldr	r3, [r7, #4]
20008ab6:	681b      	ldr	r3, [r3, #0]
20008ab8:	f042 0201 	orr.w	r2, r2, #1
20008abc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
20008abe:	6878      	ldr	r0, [r7, #4]
20008ac0:	f000 fb0c 	bl	200090dc <UART_CheckIdleState>
20008ac4:	4603      	mov	r3, r0
}
20008ac6:	4618      	mov	r0, r3
20008ac8:	3708      	adds	r7, #8
20008aca:	46bd      	mov	sp, r7
20008acc:	bd80      	pop	{r7, pc}
	...

20008ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
20008ad0:	b580      	push	{r7, lr}
20008ad2:	b088      	sub	sp, #32
20008ad4:	af00      	add	r7, sp, #0
20008ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
20008ad8:	2300      	movs	r3, #0
20008ada:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
20008adc:	687b      	ldr	r3, [r7, #4]
20008ade:	689a      	ldr	r2, [r3, #8]
20008ae0:	687b      	ldr	r3, [r7, #4]
20008ae2:	691b      	ldr	r3, [r3, #16]
20008ae4:	431a      	orrs	r2, r3
20008ae6:	687b      	ldr	r3, [r7, #4]
20008ae8:	695b      	ldr	r3, [r3, #20]
20008aea:	431a      	orrs	r2, r3
20008aec:	687b      	ldr	r3, [r7, #4]
20008aee:	69db      	ldr	r3, [r3, #28]
20008af0:	4313      	orrs	r3, r2
20008af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
20008af4:	687b      	ldr	r3, [r7, #4]
20008af6:	681b      	ldr	r3, [r3, #0]
20008af8:	681a      	ldr	r2, [r3, #0]
20008afa:	4ba6      	ldr	r3, [pc, #664]	@ (20008d94 <UART_SetConfig+0x2c4>)
20008afc:	4013      	ands	r3, r2
20008afe:	687a      	ldr	r2, [r7, #4]
20008b00:	6812      	ldr	r2, [r2, #0]
20008b02:	6979      	ldr	r1, [r7, #20]
20008b04:	430b      	orrs	r3, r1
20008b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
20008b08:	687b      	ldr	r3, [r7, #4]
20008b0a:	681b      	ldr	r3, [r3, #0]
20008b0c:	685b      	ldr	r3, [r3, #4]
20008b0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
20008b12:	687b      	ldr	r3, [r7, #4]
20008b14:	68da      	ldr	r2, [r3, #12]
20008b16:	687b      	ldr	r3, [r7, #4]
20008b18:	681b      	ldr	r3, [r3, #0]
20008b1a:	430a      	orrs	r2, r1
20008b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
20008b1e:	687b      	ldr	r3, [r7, #4]
20008b20:	699b      	ldr	r3, [r3, #24]
20008b22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
20008b24:	687b      	ldr	r3, [r7, #4]
20008b26:	6a1b      	ldr	r3, [r3, #32]
20008b28:	697a      	ldr	r2, [r7, #20]
20008b2a:	4313      	orrs	r3, r2
20008b2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
20008b2e:	687b      	ldr	r3, [r7, #4]
20008b30:	681b      	ldr	r3, [r3, #0]
20008b32:	689b      	ldr	r3, [r3, #8]
20008b34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
20008b38:	687b      	ldr	r3, [r7, #4]
20008b3a:	681b      	ldr	r3, [r3, #0]
20008b3c:	697a      	ldr	r2, [r7, #20]
20008b3e:	430a      	orrs	r2, r1
20008b40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
20008b42:	687b      	ldr	r3, [r7, #4]
20008b44:	681b      	ldr	r3, [r3, #0]
20008b46:	4a94      	ldr	r2, [pc, #592]	@ (20008d98 <UART_SetConfig+0x2c8>)
20008b48:	4293      	cmp	r3, r2
20008b4a:	d120      	bne.n	20008b8e <UART_SetConfig+0xbe>
20008b4c:	4b93      	ldr	r3, [pc, #588]	@ (20008d9c <UART_SetConfig+0x2cc>)
20008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008b52:	f003 0303 	and.w	r3, r3, #3
20008b56:	2b03      	cmp	r3, #3
20008b58:	d816      	bhi.n	20008b88 <UART_SetConfig+0xb8>
20008b5a:	a201      	add	r2, pc, #4	@ (adr r2, 20008b60 <UART_SetConfig+0x90>)
20008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20008b60:	20008b71 	.word	0x20008b71
20008b64:	20008b7d 	.word	0x20008b7d
20008b68:	20008b77 	.word	0x20008b77
20008b6c:	20008b83 	.word	0x20008b83
20008b70:	2301      	movs	r3, #1
20008b72:	77fb      	strb	r3, [r7, #31]
20008b74:	e150      	b.n	20008e18 <UART_SetConfig+0x348>
20008b76:	2302      	movs	r3, #2
20008b78:	77fb      	strb	r3, [r7, #31]
20008b7a:	e14d      	b.n	20008e18 <UART_SetConfig+0x348>
20008b7c:	2304      	movs	r3, #4
20008b7e:	77fb      	strb	r3, [r7, #31]
20008b80:	e14a      	b.n	20008e18 <UART_SetConfig+0x348>
20008b82:	2308      	movs	r3, #8
20008b84:	77fb      	strb	r3, [r7, #31]
20008b86:	e147      	b.n	20008e18 <UART_SetConfig+0x348>
20008b88:	2310      	movs	r3, #16
20008b8a:	77fb      	strb	r3, [r7, #31]
20008b8c:	e144      	b.n	20008e18 <UART_SetConfig+0x348>
20008b8e:	687b      	ldr	r3, [r7, #4]
20008b90:	681b      	ldr	r3, [r3, #0]
20008b92:	4a83      	ldr	r2, [pc, #524]	@ (20008da0 <UART_SetConfig+0x2d0>)
20008b94:	4293      	cmp	r3, r2
20008b96:	d132      	bne.n	20008bfe <UART_SetConfig+0x12e>
20008b98:	4b80      	ldr	r3, [pc, #512]	@ (20008d9c <UART_SetConfig+0x2cc>)
20008b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008b9e:	f003 030c 	and.w	r3, r3, #12
20008ba2:	2b0c      	cmp	r3, #12
20008ba4:	d828      	bhi.n	20008bf8 <UART_SetConfig+0x128>
20008ba6:	a201      	add	r2, pc, #4	@ (adr r2, 20008bac <UART_SetConfig+0xdc>)
20008ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20008bac:	20008be1 	.word	0x20008be1
20008bb0:	20008bf9 	.word	0x20008bf9
20008bb4:	20008bf9 	.word	0x20008bf9
20008bb8:	20008bf9 	.word	0x20008bf9
20008bbc:	20008bed 	.word	0x20008bed
20008bc0:	20008bf9 	.word	0x20008bf9
20008bc4:	20008bf9 	.word	0x20008bf9
20008bc8:	20008bf9 	.word	0x20008bf9
20008bcc:	20008be7 	.word	0x20008be7
20008bd0:	20008bf9 	.word	0x20008bf9
20008bd4:	20008bf9 	.word	0x20008bf9
20008bd8:	20008bf9 	.word	0x20008bf9
20008bdc:	20008bf3 	.word	0x20008bf3
20008be0:	2300      	movs	r3, #0
20008be2:	77fb      	strb	r3, [r7, #31]
20008be4:	e118      	b.n	20008e18 <UART_SetConfig+0x348>
20008be6:	2302      	movs	r3, #2
20008be8:	77fb      	strb	r3, [r7, #31]
20008bea:	e115      	b.n	20008e18 <UART_SetConfig+0x348>
20008bec:	2304      	movs	r3, #4
20008bee:	77fb      	strb	r3, [r7, #31]
20008bf0:	e112      	b.n	20008e18 <UART_SetConfig+0x348>
20008bf2:	2308      	movs	r3, #8
20008bf4:	77fb      	strb	r3, [r7, #31]
20008bf6:	e10f      	b.n	20008e18 <UART_SetConfig+0x348>
20008bf8:	2310      	movs	r3, #16
20008bfa:	77fb      	strb	r3, [r7, #31]
20008bfc:	e10c      	b.n	20008e18 <UART_SetConfig+0x348>
20008bfe:	687b      	ldr	r3, [r7, #4]
20008c00:	681b      	ldr	r3, [r3, #0]
20008c02:	4a68      	ldr	r2, [pc, #416]	@ (20008da4 <UART_SetConfig+0x2d4>)
20008c04:	4293      	cmp	r3, r2
20008c06:	d120      	bne.n	20008c4a <UART_SetConfig+0x17a>
20008c08:	4b64      	ldr	r3, [pc, #400]	@ (20008d9c <UART_SetConfig+0x2cc>)
20008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008c0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
20008c12:	2b30      	cmp	r3, #48	@ 0x30
20008c14:	d013      	beq.n	20008c3e <UART_SetConfig+0x16e>
20008c16:	2b30      	cmp	r3, #48	@ 0x30
20008c18:	d814      	bhi.n	20008c44 <UART_SetConfig+0x174>
20008c1a:	2b20      	cmp	r3, #32
20008c1c:	d009      	beq.n	20008c32 <UART_SetConfig+0x162>
20008c1e:	2b20      	cmp	r3, #32
20008c20:	d810      	bhi.n	20008c44 <UART_SetConfig+0x174>
20008c22:	2b00      	cmp	r3, #0
20008c24:	d002      	beq.n	20008c2c <UART_SetConfig+0x15c>
20008c26:	2b10      	cmp	r3, #16
20008c28:	d006      	beq.n	20008c38 <UART_SetConfig+0x168>
20008c2a:	e00b      	b.n	20008c44 <UART_SetConfig+0x174>
20008c2c:	2300      	movs	r3, #0
20008c2e:	77fb      	strb	r3, [r7, #31]
20008c30:	e0f2      	b.n	20008e18 <UART_SetConfig+0x348>
20008c32:	2302      	movs	r3, #2
20008c34:	77fb      	strb	r3, [r7, #31]
20008c36:	e0ef      	b.n	20008e18 <UART_SetConfig+0x348>
20008c38:	2304      	movs	r3, #4
20008c3a:	77fb      	strb	r3, [r7, #31]
20008c3c:	e0ec      	b.n	20008e18 <UART_SetConfig+0x348>
20008c3e:	2308      	movs	r3, #8
20008c40:	77fb      	strb	r3, [r7, #31]
20008c42:	e0e9      	b.n	20008e18 <UART_SetConfig+0x348>
20008c44:	2310      	movs	r3, #16
20008c46:	77fb      	strb	r3, [r7, #31]
20008c48:	e0e6      	b.n	20008e18 <UART_SetConfig+0x348>
20008c4a:	687b      	ldr	r3, [r7, #4]
20008c4c:	681b      	ldr	r3, [r3, #0]
20008c4e:	4a56      	ldr	r2, [pc, #344]	@ (20008da8 <UART_SetConfig+0x2d8>)
20008c50:	4293      	cmp	r3, r2
20008c52:	d120      	bne.n	20008c96 <UART_SetConfig+0x1c6>
20008c54:	4b51      	ldr	r3, [pc, #324]	@ (20008d9c <UART_SetConfig+0x2cc>)
20008c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008c5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
20008c5e:	2bc0      	cmp	r3, #192	@ 0xc0
20008c60:	d013      	beq.n	20008c8a <UART_SetConfig+0x1ba>
20008c62:	2bc0      	cmp	r3, #192	@ 0xc0
20008c64:	d814      	bhi.n	20008c90 <UART_SetConfig+0x1c0>
20008c66:	2b80      	cmp	r3, #128	@ 0x80
20008c68:	d009      	beq.n	20008c7e <UART_SetConfig+0x1ae>
20008c6a:	2b80      	cmp	r3, #128	@ 0x80
20008c6c:	d810      	bhi.n	20008c90 <UART_SetConfig+0x1c0>
20008c6e:	2b00      	cmp	r3, #0
20008c70:	d002      	beq.n	20008c78 <UART_SetConfig+0x1a8>
20008c72:	2b40      	cmp	r3, #64	@ 0x40
20008c74:	d006      	beq.n	20008c84 <UART_SetConfig+0x1b4>
20008c76:	e00b      	b.n	20008c90 <UART_SetConfig+0x1c0>
20008c78:	2300      	movs	r3, #0
20008c7a:	77fb      	strb	r3, [r7, #31]
20008c7c:	e0cc      	b.n	20008e18 <UART_SetConfig+0x348>
20008c7e:	2302      	movs	r3, #2
20008c80:	77fb      	strb	r3, [r7, #31]
20008c82:	e0c9      	b.n	20008e18 <UART_SetConfig+0x348>
20008c84:	2304      	movs	r3, #4
20008c86:	77fb      	strb	r3, [r7, #31]
20008c88:	e0c6      	b.n	20008e18 <UART_SetConfig+0x348>
20008c8a:	2308      	movs	r3, #8
20008c8c:	77fb      	strb	r3, [r7, #31]
20008c8e:	e0c3      	b.n	20008e18 <UART_SetConfig+0x348>
20008c90:	2310      	movs	r3, #16
20008c92:	77fb      	strb	r3, [r7, #31]
20008c94:	e0c0      	b.n	20008e18 <UART_SetConfig+0x348>
20008c96:	687b      	ldr	r3, [r7, #4]
20008c98:	681b      	ldr	r3, [r3, #0]
20008c9a:	4a44      	ldr	r2, [pc, #272]	@ (20008dac <UART_SetConfig+0x2dc>)
20008c9c:	4293      	cmp	r3, r2
20008c9e:	d125      	bne.n	20008cec <UART_SetConfig+0x21c>
20008ca0:	4b3e      	ldr	r3, [pc, #248]	@ (20008d9c <UART_SetConfig+0x2cc>)
20008ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20008caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20008cae:	d017      	beq.n	20008ce0 <UART_SetConfig+0x210>
20008cb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20008cb4:	d817      	bhi.n	20008ce6 <UART_SetConfig+0x216>
20008cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20008cba:	d00b      	beq.n	20008cd4 <UART_SetConfig+0x204>
20008cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20008cc0:	d811      	bhi.n	20008ce6 <UART_SetConfig+0x216>
20008cc2:	2b00      	cmp	r3, #0
20008cc4:	d003      	beq.n	20008cce <UART_SetConfig+0x1fe>
20008cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20008cca:	d006      	beq.n	20008cda <UART_SetConfig+0x20a>
20008ccc:	e00b      	b.n	20008ce6 <UART_SetConfig+0x216>
20008cce:	2300      	movs	r3, #0
20008cd0:	77fb      	strb	r3, [r7, #31]
20008cd2:	e0a1      	b.n	20008e18 <UART_SetConfig+0x348>
20008cd4:	2302      	movs	r3, #2
20008cd6:	77fb      	strb	r3, [r7, #31]
20008cd8:	e09e      	b.n	20008e18 <UART_SetConfig+0x348>
20008cda:	2304      	movs	r3, #4
20008cdc:	77fb      	strb	r3, [r7, #31]
20008cde:	e09b      	b.n	20008e18 <UART_SetConfig+0x348>
20008ce0:	2308      	movs	r3, #8
20008ce2:	77fb      	strb	r3, [r7, #31]
20008ce4:	e098      	b.n	20008e18 <UART_SetConfig+0x348>
20008ce6:	2310      	movs	r3, #16
20008ce8:	77fb      	strb	r3, [r7, #31]
20008cea:	e095      	b.n	20008e18 <UART_SetConfig+0x348>
20008cec:	687b      	ldr	r3, [r7, #4]
20008cee:	681b      	ldr	r3, [r3, #0]
20008cf0:	4a2f      	ldr	r2, [pc, #188]	@ (20008db0 <UART_SetConfig+0x2e0>)
20008cf2:	4293      	cmp	r3, r2
20008cf4:	d125      	bne.n	20008d42 <UART_SetConfig+0x272>
20008cf6:	4b29      	ldr	r3, [pc, #164]	@ (20008d9c <UART_SetConfig+0x2cc>)
20008cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008cfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
20008d00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20008d04:	d017      	beq.n	20008d36 <UART_SetConfig+0x266>
20008d06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20008d0a:	d817      	bhi.n	20008d3c <UART_SetConfig+0x26c>
20008d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20008d10:	d00b      	beq.n	20008d2a <UART_SetConfig+0x25a>
20008d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20008d16:	d811      	bhi.n	20008d3c <UART_SetConfig+0x26c>
20008d18:	2b00      	cmp	r3, #0
20008d1a:	d003      	beq.n	20008d24 <UART_SetConfig+0x254>
20008d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20008d20:	d006      	beq.n	20008d30 <UART_SetConfig+0x260>
20008d22:	e00b      	b.n	20008d3c <UART_SetConfig+0x26c>
20008d24:	2301      	movs	r3, #1
20008d26:	77fb      	strb	r3, [r7, #31]
20008d28:	e076      	b.n	20008e18 <UART_SetConfig+0x348>
20008d2a:	2302      	movs	r3, #2
20008d2c:	77fb      	strb	r3, [r7, #31]
20008d2e:	e073      	b.n	20008e18 <UART_SetConfig+0x348>
20008d30:	2304      	movs	r3, #4
20008d32:	77fb      	strb	r3, [r7, #31]
20008d34:	e070      	b.n	20008e18 <UART_SetConfig+0x348>
20008d36:	2308      	movs	r3, #8
20008d38:	77fb      	strb	r3, [r7, #31]
20008d3a:	e06d      	b.n	20008e18 <UART_SetConfig+0x348>
20008d3c:	2310      	movs	r3, #16
20008d3e:	77fb      	strb	r3, [r7, #31]
20008d40:	e06a      	b.n	20008e18 <UART_SetConfig+0x348>
20008d42:	687b      	ldr	r3, [r7, #4]
20008d44:	681b      	ldr	r3, [r3, #0]
20008d46:	4a1b      	ldr	r2, [pc, #108]	@ (20008db4 <UART_SetConfig+0x2e4>)
20008d48:	4293      	cmp	r3, r2
20008d4a:	d138      	bne.n	20008dbe <UART_SetConfig+0x2ee>
20008d4c:	4b13      	ldr	r3, [pc, #76]	@ (20008d9c <UART_SetConfig+0x2cc>)
20008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008d52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
20008d56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20008d5a:	d017      	beq.n	20008d8c <UART_SetConfig+0x2bc>
20008d5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20008d60:	d82a      	bhi.n	20008db8 <UART_SetConfig+0x2e8>
20008d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20008d66:	d00b      	beq.n	20008d80 <UART_SetConfig+0x2b0>
20008d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20008d6c:	d824      	bhi.n	20008db8 <UART_SetConfig+0x2e8>
20008d6e:	2b00      	cmp	r3, #0
20008d70:	d003      	beq.n	20008d7a <UART_SetConfig+0x2aa>
20008d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20008d76:	d006      	beq.n	20008d86 <UART_SetConfig+0x2b6>
20008d78:	e01e      	b.n	20008db8 <UART_SetConfig+0x2e8>
20008d7a:	2300      	movs	r3, #0
20008d7c:	77fb      	strb	r3, [r7, #31]
20008d7e:	e04b      	b.n	20008e18 <UART_SetConfig+0x348>
20008d80:	2302      	movs	r3, #2
20008d82:	77fb      	strb	r3, [r7, #31]
20008d84:	e048      	b.n	20008e18 <UART_SetConfig+0x348>
20008d86:	2304      	movs	r3, #4
20008d88:	77fb      	strb	r3, [r7, #31]
20008d8a:	e045      	b.n	20008e18 <UART_SetConfig+0x348>
20008d8c:	2308      	movs	r3, #8
20008d8e:	77fb      	strb	r3, [r7, #31]
20008d90:	e042      	b.n	20008e18 <UART_SetConfig+0x348>
20008d92:	bf00      	nop
20008d94:	efff69f3 	.word	0xefff69f3
20008d98:	40011000 	.word	0x40011000
20008d9c:	40023800 	.word	0x40023800
20008da0:	40004400 	.word	0x40004400
20008da4:	40004800 	.word	0x40004800
20008da8:	40004c00 	.word	0x40004c00
20008dac:	40005000 	.word	0x40005000
20008db0:	40011400 	.word	0x40011400
20008db4:	40007800 	.word	0x40007800
20008db8:	2310      	movs	r3, #16
20008dba:	77fb      	strb	r3, [r7, #31]
20008dbc:	e02c      	b.n	20008e18 <UART_SetConfig+0x348>
20008dbe:	687b      	ldr	r3, [r7, #4]
20008dc0:	681b      	ldr	r3, [r3, #0]
20008dc2:	4a72      	ldr	r2, [pc, #456]	@ (20008f8c <UART_SetConfig+0x4bc>)
20008dc4:	4293      	cmp	r3, r2
20008dc6:	d125      	bne.n	20008e14 <UART_SetConfig+0x344>
20008dc8:	4b71      	ldr	r3, [pc, #452]	@ (20008f90 <UART_SetConfig+0x4c0>)
20008dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20008dce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20008dd2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20008dd6:	d017      	beq.n	20008e08 <UART_SetConfig+0x338>
20008dd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20008ddc:	d817      	bhi.n	20008e0e <UART_SetConfig+0x33e>
20008dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20008de2:	d00b      	beq.n	20008dfc <UART_SetConfig+0x32c>
20008de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20008de8:	d811      	bhi.n	20008e0e <UART_SetConfig+0x33e>
20008dea:	2b00      	cmp	r3, #0
20008dec:	d003      	beq.n	20008df6 <UART_SetConfig+0x326>
20008dee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20008df2:	d006      	beq.n	20008e02 <UART_SetConfig+0x332>
20008df4:	e00b      	b.n	20008e0e <UART_SetConfig+0x33e>
20008df6:	2300      	movs	r3, #0
20008df8:	77fb      	strb	r3, [r7, #31]
20008dfa:	e00d      	b.n	20008e18 <UART_SetConfig+0x348>
20008dfc:	2302      	movs	r3, #2
20008dfe:	77fb      	strb	r3, [r7, #31]
20008e00:	e00a      	b.n	20008e18 <UART_SetConfig+0x348>
20008e02:	2304      	movs	r3, #4
20008e04:	77fb      	strb	r3, [r7, #31]
20008e06:	e007      	b.n	20008e18 <UART_SetConfig+0x348>
20008e08:	2308      	movs	r3, #8
20008e0a:	77fb      	strb	r3, [r7, #31]
20008e0c:	e004      	b.n	20008e18 <UART_SetConfig+0x348>
20008e0e:	2310      	movs	r3, #16
20008e10:	77fb      	strb	r3, [r7, #31]
20008e12:	e001      	b.n	20008e18 <UART_SetConfig+0x348>
20008e14:	2310      	movs	r3, #16
20008e16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20008e18:	687b      	ldr	r3, [r7, #4]
20008e1a:	69db      	ldr	r3, [r3, #28]
20008e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20008e20:	d15b      	bne.n	20008eda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
20008e22:	7ffb      	ldrb	r3, [r7, #31]
20008e24:	2b08      	cmp	r3, #8
20008e26:	d828      	bhi.n	20008e7a <UART_SetConfig+0x3aa>
20008e28:	a201      	add	r2, pc, #4	@ (adr r2, 20008e30 <UART_SetConfig+0x360>)
20008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20008e2e:	bf00      	nop
20008e30:	20008e55 	.word	0x20008e55
20008e34:	20008e5d 	.word	0x20008e5d
20008e38:	20008e65 	.word	0x20008e65
20008e3c:	20008e7b 	.word	0x20008e7b
20008e40:	20008e6b 	.word	0x20008e6b
20008e44:	20008e7b 	.word	0x20008e7b
20008e48:	20008e7b 	.word	0x20008e7b
20008e4c:	20008e7b 	.word	0x20008e7b
20008e50:	20008e73 	.word	0x20008e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20008e54:	f7ff f92a 	bl	200080ac <HAL_RCC_GetPCLK1Freq>
20008e58:	61b8      	str	r0, [r7, #24]
        break;
20008e5a:	e013      	b.n	20008e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20008e5c:	f7ff f93a 	bl	200080d4 <HAL_RCC_GetPCLK2Freq>
20008e60:	61b8      	str	r0, [r7, #24]
        break;
20008e62:	e00f      	b.n	20008e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20008e64:	4b4b      	ldr	r3, [pc, #300]	@ (20008f94 <UART_SetConfig+0x4c4>)
20008e66:	61bb      	str	r3, [r7, #24]
        break;
20008e68:	e00c      	b.n	20008e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20008e6a:	f7ff f80d 	bl	20007e88 <HAL_RCC_GetSysClockFreq>
20008e6e:	61b8      	str	r0, [r7, #24]
        break;
20008e70:	e008      	b.n	20008e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20008e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20008e76:	61bb      	str	r3, [r7, #24]
        break;
20008e78:	e004      	b.n	20008e84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
20008e7a:	2300      	movs	r3, #0
20008e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20008e7e:	2301      	movs	r3, #1
20008e80:	77bb      	strb	r3, [r7, #30]
        break;
20008e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
20008e84:	69bb      	ldr	r3, [r7, #24]
20008e86:	2b00      	cmp	r3, #0
20008e88:	d074      	beq.n	20008f74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
20008e8a:	69bb      	ldr	r3, [r7, #24]
20008e8c:	005a      	lsls	r2, r3, #1
20008e8e:	687b      	ldr	r3, [r7, #4]
20008e90:	685b      	ldr	r3, [r3, #4]
20008e92:	085b      	lsrs	r3, r3, #1
20008e94:	441a      	add	r2, r3
20008e96:	687b      	ldr	r3, [r7, #4]
20008e98:	685b      	ldr	r3, [r3, #4]
20008e9a:	fbb2 f3f3 	udiv	r3, r2, r3
20008e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
20008ea0:	693b      	ldr	r3, [r7, #16]
20008ea2:	2b0f      	cmp	r3, #15
20008ea4:	d916      	bls.n	20008ed4 <UART_SetConfig+0x404>
20008ea6:	693b      	ldr	r3, [r7, #16]
20008ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20008eac:	d212      	bcs.n	20008ed4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
20008eae:	693b      	ldr	r3, [r7, #16]
20008eb0:	b29b      	uxth	r3, r3
20008eb2:	f023 030f 	bic.w	r3, r3, #15
20008eb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
20008eb8:	693b      	ldr	r3, [r7, #16]
20008eba:	085b      	lsrs	r3, r3, #1
20008ebc:	b29b      	uxth	r3, r3
20008ebe:	f003 0307 	and.w	r3, r3, #7
20008ec2:	b29a      	uxth	r2, r3
20008ec4:	89fb      	ldrh	r3, [r7, #14]
20008ec6:	4313      	orrs	r3, r2
20008ec8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
20008eca:	687b      	ldr	r3, [r7, #4]
20008ecc:	681b      	ldr	r3, [r3, #0]
20008ece:	89fa      	ldrh	r2, [r7, #14]
20008ed0:	60da      	str	r2, [r3, #12]
20008ed2:	e04f      	b.n	20008f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20008ed4:	2301      	movs	r3, #1
20008ed6:	77bb      	strb	r3, [r7, #30]
20008ed8:	e04c      	b.n	20008f74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
20008eda:	7ffb      	ldrb	r3, [r7, #31]
20008edc:	2b08      	cmp	r3, #8
20008ede:	d828      	bhi.n	20008f32 <UART_SetConfig+0x462>
20008ee0:	a201      	add	r2, pc, #4	@ (adr r2, 20008ee8 <UART_SetConfig+0x418>)
20008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20008ee6:	bf00      	nop
20008ee8:	20008f0d 	.word	0x20008f0d
20008eec:	20008f15 	.word	0x20008f15
20008ef0:	20008f1d 	.word	0x20008f1d
20008ef4:	20008f33 	.word	0x20008f33
20008ef8:	20008f23 	.word	0x20008f23
20008efc:	20008f33 	.word	0x20008f33
20008f00:	20008f33 	.word	0x20008f33
20008f04:	20008f33 	.word	0x20008f33
20008f08:	20008f2b 	.word	0x20008f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20008f0c:	f7ff f8ce 	bl	200080ac <HAL_RCC_GetPCLK1Freq>
20008f10:	61b8      	str	r0, [r7, #24]
        break;
20008f12:	e013      	b.n	20008f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20008f14:	f7ff f8de 	bl	200080d4 <HAL_RCC_GetPCLK2Freq>
20008f18:	61b8      	str	r0, [r7, #24]
        break;
20008f1a:	e00f      	b.n	20008f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20008f1c:	4b1d      	ldr	r3, [pc, #116]	@ (20008f94 <UART_SetConfig+0x4c4>)
20008f1e:	61bb      	str	r3, [r7, #24]
        break;
20008f20:	e00c      	b.n	20008f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20008f22:	f7fe ffb1 	bl	20007e88 <HAL_RCC_GetSysClockFreq>
20008f26:	61b8      	str	r0, [r7, #24]
        break;
20008f28:	e008      	b.n	20008f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20008f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20008f2e:	61bb      	str	r3, [r7, #24]
        break;
20008f30:	e004      	b.n	20008f3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
20008f32:	2300      	movs	r3, #0
20008f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20008f36:	2301      	movs	r3, #1
20008f38:	77bb      	strb	r3, [r7, #30]
        break;
20008f3a:	bf00      	nop
    }

    if (pclk != 0U)
20008f3c:	69bb      	ldr	r3, [r7, #24]
20008f3e:	2b00      	cmp	r3, #0
20008f40:	d018      	beq.n	20008f74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
20008f42:	687b      	ldr	r3, [r7, #4]
20008f44:	685b      	ldr	r3, [r3, #4]
20008f46:	085a      	lsrs	r2, r3, #1
20008f48:	69bb      	ldr	r3, [r7, #24]
20008f4a:	441a      	add	r2, r3
20008f4c:	687b      	ldr	r3, [r7, #4]
20008f4e:	685b      	ldr	r3, [r3, #4]
20008f50:	fbb2 f3f3 	udiv	r3, r2, r3
20008f54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
20008f56:	693b      	ldr	r3, [r7, #16]
20008f58:	2b0f      	cmp	r3, #15
20008f5a:	d909      	bls.n	20008f70 <UART_SetConfig+0x4a0>
20008f5c:	693b      	ldr	r3, [r7, #16]
20008f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20008f62:	d205      	bcs.n	20008f70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
20008f64:	693b      	ldr	r3, [r7, #16]
20008f66:	b29a      	uxth	r2, r3
20008f68:	687b      	ldr	r3, [r7, #4]
20008f6a:	681b      	ldr	r3, [r3, #0]
20008f6c:	60da      	str	r2, [r3, #12]
20008f6e:	e001      	b.n	20008f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20008f70:	2301      	movs	r3, #1
20008f72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
20008f74:	687b      	ldr	r3, [r7, #4]
20008f76:	2200      	movs	r2, #0
20008f78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
20008f7a:	687b      	ldr	r3, [r7, #4]
20008f7c:	2200      	movs	r2, #0
20008f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
20008f80:	7fbb      	ldrb	r3, [r7, #30]
}
20008f82:	4618      	mov	r0, r3
20008f84:	3720      	adds	r7, #32
20008f86:	46bd      	mov	sp, r7
20008f88:	bd80      	pop	{r7, pc}
20008f8a:	bf00      	nop
20008f8c:	40007c00 	.word	0x40007c00
20008f90:	40023800 	.word	0x40023800
20008f94:	00f42400 	.word	0x00f42400

20008f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
20008f98:	b480      	push	{r7}
20008f9a:	b083      	sub	sp, #12
20008f9c:	af00      	add	r7, sp, #0
20008f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
20008fa0:	687b      	ldr	r3, [r7, #4]
20008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008fa4:	f003 0308 	and.w	r3, r3, #8
20008fa8:	2b00      	cmp	r3, #0
20008faa:	d00a      	beq.n	20008fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
20008fac:	687b      	ldr	r3, [r7, #4]
20008fae:	681b      	ldr	r3, [r3, #0]
20008fb0:	685b      	ldr	r3, [r3, #4]
20008fb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
20008fb6:	687b      	ldr	r3, [r7, #4]
20008fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20008fba:	687b      	ldr	r3, [r7, #4]
20008fbc:	681b      	ldr	r3, [r3, #0]
20008fbe:	430a      	orrs	r2, r1
20008fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
20008fc2:	687b      	ldr	r3, [r7, #4]
20008fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008fc6:	f003 0301 	and.w	r3, r3, #1
20008fca:	2b00      	cmp	r3, #0
20008fcc:	d00a      	beq.n	20008fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
20008fce:	687b      	ldr	r3, [r7, #4]
20008fd0:	681b      	ldr	r3, [r3, #0]
20008fd2:	685b      	ldr	r3, [r3, #4]
20008fd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
20008fd8:	687b      	ldr	r3, [r7, #4]
20008fda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20008fdc:	687b      	ldr	r3, [r7, #4]
20008fde:	681b      	ldr	r3, [r3, #0]
20008fe0:	430a      	orrs	r2, r1
20008fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
20008fe4:	687b      	ldr	r3, [r7, #4]
20008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008fe8:	f003 0302 	and.w	r3, r3, #2
20008fec:	2b00      	cmp	r3, #0
20008fee:	d00a      	beq.n	20009006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
20008ff0:	687b      	ldr	r3, [r7, #4]
20008ff2:	681b      	ldr	r3, [r3, #0]
20008ff4:	685b      	ldr	r3, [r3, #4]
20008ff6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
20008ffa:	687b      	ldr	r3, [r7, #4]
20008ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20008ffe:	687b      	ldr	r3, [r7, #4]
20009000:	681b      	ldr	r3, [r3, #0]
20009002:	430a      	orrs	r2, r1
20009004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
20009006:	687b      	ldr	r3, [r7, #4]
20009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000900a:	f003 0304 	and.w	r3, r3, #4
2000900e:	2b00      	cmp	r3, #0
20009010:	d00a      	beq.n	20009028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
20009012:	687b      	ldr	r3, [r7, #4]
20009014:	681b      	ldr	r3, [r3, #0]
20009016:	685b      	ldr	r3, [r3, #4]
20009018:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
2000901c:	687b      	ldr	r3, [r7, #4]
2000901e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20009020:	687b      	ldr	r3, [r7, #4]
20009022:	681b      	ldr	r3, [r3, #0]
20009024:	430a      	orrs	r2, r1
20009026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
20009028:	687b      	ldr	r3, [r7, #4]
2000902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000902c:	f003 0310 	and.w	r3, r3, #16
20009030:	2b00      	cmp	r3, #0
20009032:	d00a      	beq.n	2000904a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
20009034:	687b      	ldr	r3, [r7, #4]
20009036:	681b      	ldr	r3, [r3, #0]
20009038:	689b      	ldr	r3, [r3, #8]
2000903a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
2000903e:	687b      	ldr	r3, [r7, #4]
20009040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
20009042:	687b      	ldr	r3, [r7, #4]
20009044:	681b      	ldr	r3, [r3, #0]
20009046:	430a      	orrs	r2, r1
20009048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
2000904a:	687b      	ldr	r3, [r7, #4]
2000904c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000904e:	f003 0320 	and.w	r3, r3, #32
20009052:	2b00      	cmp	r3, #0
20009054:	d00a      	beq.n	2000906c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
20009056:	687b      	ldr	r3, [r7, #4]
20009058:	681b      	ldr	r3, [r3, #0]
2000905a:	689b      	ldr	r3, [r3, #8]
2000905c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
20009060:	687b      	ldr	r3, [r7, #4]
20009062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20009064:	687b      	ldr	r3, [r7, #4]
20009066:	681b      	ldr	r3, [r3, #0]
20009068:	430a      	orrs	r2, r1
2000906a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
2000906c:	687b      	ldr	r3, [r7, #4]
2000906e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20009070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20009074:	2b00      	cmp	r3, #0
20009076:	d01a      	beq.n	200090ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
20009078:	687b      	ldr	r3, [r7, #4]
2000907a:	681b      	ldr	r3, [r3, #0]
2000907c:	685b      	ldr	r3, [r3, #4]
2000907e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
20009082:	687b      	ldr	r3, [r7, #4]
20009084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
20009086:	687b      	ldr	r3, [r7, #4]
20009088:	681b      	ldr	r3, [r3, #0]
2000908a:	430a      	orrs	r2, r1
2000908c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
2000908e:	687b      	ldr	r3, [r7, #4]
20009090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20009092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20009096:	d10a      	bne.n	200090ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
20009098:	687b      	ldr	r3, [r7, #4]
2000909a:	681b      	ldr	r3, [r3, #0]
2000909c:	685b      	ldr	r3, [r3, #4]
2000909e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
200090a2:	687b      	ldr	r3, [r7, #4]
200090a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
200090a6:	687b      	ldr	r3, [r7, #4]
200090a8:	681b      	ldr	r3, [r3, #0]
200090aa:	430a      	orrs	r2, r1
200090ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
200090ae:	687b      	ldr	r3, [r7, #4]
200090b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200090b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200090b6:	2b00      	cmp	r3, #0
200090b8:	d00a      	beq.n	200090d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
200090ba:	687b      	ldr	r3, [r7, #4]
200090bc:	681b      	ldr	r3, [r3, #0]
200090be:	685b      	ldr	r3, [r3, #4]
200090c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
200090c4:	687b      	ldr	r3, [r7, #4]
200090c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
200090c8:	687b      	ldr	r3, [r7, #4]
200090ca:	681b      	ldr	r3, [r3, #0]
200090cc:	430a      	orrs	r2, r1
200090ce:	605a      	str	r2, [r3, #4]
  }
}
200090d0:	bf00      	nop
200090d2:	370c      	adds	r7, #12
200090d4:	46bd      	mov	sp, r7
200090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200090da:	4770      	bx	lr

200090dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
200090dc:	b580      	push	{r7, lr}
200090de:	b08c      	sub	sp, #48	@ 0x30
200090e0:	af02      	add	r7, sp, #8
200090e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
200090e4:	687b      	ldr	r3, [r7, #4]
200090e6:	2200      	movs	r2, #0
200090e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
200090ec:	f7fc f9e4 	bl	200054b8 <HAL_GetTick>
200090f0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
200090f2:	687b      	ldr	r3, [r7, #4]
200090f4:	681b      	ldr	r3, [r3, #0]
200090f6:	681b      	ldr	r3, [r3, #0]
200090f8:	f003 0308 	and.w	r3, r3, #8
200090fc:	2b08      	cmp	r3, #8
200090fe:	d12e      	bne.n	2000915e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
20009100:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
20009104:	9300      	str	r3, [sp, #0]
20009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20009108:	2200      	movs	r2, #0
2000910a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
2000910e:	6878      	ldr	r0, [r7, #4]
20009110:	f000 f83b 	bl	2000918a <UART_WaitOnFlagUntilTimeout>
20009114:	4603      	mov	r3, r0
20009116:	2b00      	cmp	r3, #0
20009118:	d021      	beq.n	2000915e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
2000911a:	687b      	ldr	r3, [r7, #4]
2000911c:	681b      	ldr	r3, [r3, #0]
2000911e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20009120:	693b      	ldr	r3, [r7, #16]
20009122:	e853 3f00 	ldrex	r3, [r3]
20009126:	60fb      	str	r3, [r7, #12]
   return(result);
20009128:	68fb      	ldr	r3, [r7, #12]
2000912a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2000912e:	623b      	str	r3, [r7, #32]
20009130:	687b      	ldr	r3, [r7, #4]
20009132:	681b      	ldr	r3, [r3, #0]
20009134:	461a      	mov	r2, r3
20009136:	6a3b      	ldr	r3, [r7, #32]
20009138:	61fb      	str	r3, [r7, #28]
2000913a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
2000913c:	69b9      	ldr	r1, [r7, #24]
2000913e:	69fa      	ldr	r2, [r7, #28]
20009140:	e841 2300 	strex	r3, r2, [r1]
20009144:	617b      	str	r3, [r7, #20]
   return(result);
20009146:	697b      	ldr	r3, [r7, #20]
20009148:	2b00      	cmp	r3, #0
2000914a:	d1e6      	bne.n	2000911a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
2000914c:	687b      	ldr	r3, [r7, #4]
2000914e:	2220      	movs	r2, #32
20009150:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
20009152:	687b      	ldr	r3, [r7, #4]
20009154:	2200      	movs	r2, #0
20009156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
2000915a:	2303      	movs	r3, #3
2000915c:	e011      	b.n	20009182 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
2000915e:	687b      	ldr	r3, [r7, #4]
20009160:	2220      	movs	r2, #32
20009162:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
20009164:	687b      	ldr	r3, [r7, #4]
20009166:	2220      	movs	r2, #32
20009168:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
2000916c:	687b      	ldr	r3, [r7, #4]
2000916e:	2200      	movs	r2, #0
20009170:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
20009172:	687b      	ldr	r3, [r7, #4]
20009174:	2200      	movs	r2, #0
20009176:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
20009178:	687b      	ldr	r3, [r7, #4]
2000917a:	2200      	movs	r2, #0
2000917c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
20009180:	2300      	movs	r3, #0
}
20009182:	4618      	mov	r0, r3
20009184:	3728      	adds	r7, #40	@ 0x28
20009186:	46bd      	mov	sp, r7
20009188:	bd80      	pop	{r7, pc}

2000918a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
2000918a:	b580      	push	{r7, lr}
2000918c:	b084      	sub	sp, #16
2000918e:	af00      	add	r7, sp, #0
20009190:	60f8      	str	r0, [r7, #12]
20009192:	60b9      	str	r1, [r7, #8]
20009194:	603b      	str	r3, [r7, #0]
20009196:	4613      	mov	r3, r2
20009198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2000919a:	e04f      	b.n	2000923c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000919c:	69bb      	ldr	r3, [r7, #24]
2000919e:	f1b3 3fff 	cmp.w	r3, #4294967295
200091a2:	d04b      	beq.n	2000923c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200091a4:	f7fc f988 	bl	200054b8 <HAL_GetTick>
200091a8:	4602      	mov	r2, r0
200091aa:	683b      	ldr	r3, [r7, #0]
200091ac:	1ad3      	subs	r3, r2, r3
200091ae:	69ba      	ldr	r2, [r7, #24]
200091b0:	429a      	cmp	r2, r3
200091b2:	d302      	bcc.n	200091ba <UART_WaitOnFlagUntilTimeout+0x30>
200091b4:	69bb      	ldr	r3, [r7, #24]
200091b6:	2b00      	cmp	r3, #0
200091b8:	d101      	bne.n	200091be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
200091ba:	2303      	movs	r3, #3
200091bc:	e04e      	b.n	2000925c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
200091be:	68fb      	ldr	r3, [r7, #12]
200091c0:	681b      	ldr	r3, [r3, #0]
200091c2:	681b      	ldr	r3, [r3, #0]
200091c4:	f003 0304 	and.w	r3, r3, #4
200091c8:	2b00      	cmp	r3, #0
200091ca:	d037      	beq.n	2000923c <UART_WaitOnFlagUntilTimeout+0xb2>
200091cc:	68bb      	ldr	r3, [r7, #8]
200091ce:	2b80      	cmp	r3, #128	@ 0x80
200091d0:	d034      	beq.n	2000923c <UART_WaitOnFlagUntilTimeout+0xb2>
200091d2:	68bb      	ldr	r3, [r7, #8]
200091d4:	2b40      	cmp	r3, #64	@ 0x40
200091d6:	d031      	beq.n	2000923c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
200091d8:	68fb      	ldr	r3, [r7, #12]
200091da:	681b      	ldr	r3, [r3, #0]
200091dc:	69db      	ldr	r3, [r3, #28]
200091de:	f003 0308 	and.w	r3, r3, #8
200091e2:	2b08      	cmp	r3, #8
200091e4:	d110      	bne.n	20009208 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
200091e6:	68fb      	ldr	r3, [r7, #12]
200091e8:	681b      	ldr	r3, [r3, #0]
200091ea:	2208      	movs	r2, #8
200091ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
200091ee:	68f8      	ldr	r0, [r7, #12]
200091f0:	f000 f838 	bl	20009264 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
200091f4:	68fb      	ldr	r3, [r7, #12]
200091f6:	2208      	movs	r2, #8
200091f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
200091fc:	68fb      	ldr	r3, [r7, #12]
200091fe:	2200      	movs	r2, #0
20009200:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
20009204:	2301      	movs	r3, #1
20009206:	e029      	b.n	2000925c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
20009208:	68fb      	ldr	r3, [r7, #12]
2000920a:	681b      	ldr	r3, [r3, #0]
2000920c:	69db      	ldr	r3, [r3, #28]
2000920e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20009212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20009216:	d111      	bne.n	2000923c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
20009218:	68fb      	ldr	r3, [r7, #12]
2000921a:	681b      	ldr	r3, [r3, #0]
2000921c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20009220:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
20009222:	68f8      	ldr	r0, [r7, #12]
20009224:	f000 f81e 	bl	20009264 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
20009228:	68fb      	ldr	r3, [r7, #12]
2000922a:	2220      	movs	r2, #32
2000922c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20009230:	68fb      	ldr	r3, [r7, #12]
20009232:	2200      	movs	r2, #0
20009234:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
20009238:	2303      	movs	r3, #3
2000923a:	e00f      	b.n	2000925c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2000923c:	68fb      	ldr	r3, [r7, #12]
2000923e:	681b      	ldr	r3, [r3, #0]
20009240:	69da      	ldr	r2, [r3, #28]
20009242:	68bb      	ldr	r3, [r7, #8]
20009244:	4013      	ands	r3, r2
20009246:	68ba      	ldr	r2, [r7, #8]
20009248:	429a      	cmp	r2, r3
2000924a:	bf0c      	ite	eq
2000924c:	2301      	moveq	r3, #1
2000924e:	2300      	movne	r3, #0
20009250:	b2db      	uxtb	r3, r3
20009252:	461a      	mov	r2, r3
20009254:	79fb      	ldrb	r3, [r7, #7]
20009256:	429a      	cmp	r2, r3
20009258:	d0a0      	beq.n	2000919c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
2000925a:	2300      	movs	r3, #0
}
2000925c:	4618      	mov	r0, r3
2000925e:	3710      	adds	r7, #16
20009260:	46bd      	mov	sp, r7
20009262:	bd80      	pop	{r7, pc}

20009264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
20009264:	b480      	push	{r7}
20009266:	b095      	sub	sp, #84	@ 0x54
20009268:	af00      	add	r7, sp, #0
2000926a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2000926c:	687b      	ldr	r3, [r7, #4]
2000926e:	681b      	ldr	r3, [r3, #0]
20009270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20009272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20009274:	e853 3f00 	ldrex	r3, [r3]
20009278:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
2000927a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000927c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
20009280:	64fb      	str	r3, [r7, #76]	@ 0x4c
20009282:	687b      	ldr	r3, [r7, #4]
20009284:	681b      	ldr	r3, [r3, #0]
20009286:	461a      	mov	r2, r3
20009288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000928a:	643b      	str	r3, [r7, #64]	@ 0x40
2000928c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
2000928e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
20009290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
20009292:	e841 2300 	strex	r3, r2, [r1]
20009296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
20009298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000929a:	2b00      	cmp	r3, #0
2000929c:	d1e6      	bne.n	2000926c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2000929e:	687b      	ldr	r3, [r7, #4]
200092a0:	681b      	ldr	r3, [r3, #0]
200092a2:	3308      	adds	r3, #8
200092a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200092a6:	6a3b      	ldr	r3, [r7, #32]
200092a8:	e853 3f00 	ldrex	r3, [r3]
200092ac:	61fb      	str	r3, [r7, #28]
   return(result);
200092ae:	69fb      	ldr	r3, [r7, #28]
200092b0:	f023 0301 	bic.w	r3, r3, #1
200092b4:	64bb      	str	r3, [r7, #72]	@ 0x48
200092b6:	687b      	ldr	r3, [r7, #4]
200092b8:	681b      	ldr	r3, [r3, #0]
200092ba:	3308      	adds	r3, #8
200092bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
200092be:	62fa      	str	r2, [r7, #44]	@ 0x2c
200092c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200092c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
200092c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200092c6:	e841 2300 	strex	r3, r2, [r1]
200092ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
200092cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200092ce:	2b00      	cmp	r3, #0
200092d0:	d1e5      	bne.n	2000929e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
200092d2:	687b      	ldr	r3, [r7, #4]
200092d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200092d6:	2b01      	cmp	r3, #1
200092d8:	d118      	bne.n	2000930c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
200092da:	687b      	ldr	r3, [r7, #4]
200092dc:	681b      	ldr	r3, [r3, #0]
200092de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200092e0:	68fb      	ldr	r3, [r7, #12]
200092e2:	e853 3f00 	ldrex	r3, [r3]
200092e6:	60bb      	str	r3, [r7, #8]
   return(result);
200092e8:	68bb      	ldr	r3, [r7, #8]
200092ea:	f023 0310 	bic.w	r3, r3, #16
200092ee:	647b      	str	r3, [r7, #68]	@ 0x44
200092f0:	687b      	ldr	r3, [r7, #4]
200092f2:	681b      	ldr	r3, [r3, #0]
200092f4:	461a      	mov	r2, r3
200092f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200092f8:	61bb      	str	r3, [r7, #24]
200092fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200092fc:	6979      	ldr	r1, [r7, #20]
200092fe:	69ba      	ldr	r2, [r7, #24]
20009300:	e841 2300 	strex	r3, r2, [r1]
20009304:	613b      	str	r3, [r7, #16]
   return(result);
20009306:	693b      	ldr	r3, [r7, #16]
20009308:	2b00      	cmp	r3, #0
2000930a:	d1e6      	bne.n	200092da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
2000930c:	687b      	ldr	r3, [r7, #4]
2000930e:	2220      	movs	r2, #32
20009310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
20009314:	687b      	ldr	r3, [r7, #4]
20009316:	2200      	movs	r2, #0
20009318:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
2000931a:	687b      	ldr	r3, [r7, #4]
2000931c:	2200      	movs	r2, #0
2000931e:	669a      	str	r2, [r3, #104]	@ 0x68
}
20009320:	bf00      	nop
20009322:	3754      	adds	r7, #84	@ 0x54
20009324:	46bd      	mov	sp, r7
20009326:	f85d 7b04 	ldr.w	r7, [sp], #4
2000932a:	4770      	bx	lr

2000932c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
2000932c:	b084      	sub	sp, #16
2000932e:	b580      	push	{r7, lr}
20009330:	b084      	sub	sp, #16
20009332:	af00      	add	r7, sp, #0
20009334:	6078      	str	r0, [r7, #4]
20009336:	f107 001c 	add.w	r0, r7, #28
2000933a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
2000933e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20009342:	2b01      	cmp	r3, #1
20009344:	d121      	bne.n	2000938a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
20009346:	687b      	ldr	r3, [r7, #4]
20009348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000934a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
2000934e:	687b      	ldr	r3, [r7, #4]
20009350:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
20009352:	687b      	ldr	r3, [r7, #4]
20009354:	68da      	ldr	r2, [r3, #12]
20009356:	4b21      	ldr	r3, [pc, #132]	@ (200093dc <USB_CoreInit+0xb0>)
20009358:	4013      	ands	r3, r2
2000935a:	687a      	ldr	r2, [r7, #4]
2000935c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
2000935e:	687b      	ldr	r3, [r7, #4]
20009360:	68db      	ldr	r3, [r3, #12]
20009362:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20009366:	687b      	ldr	r3, [r7, #4]
20009368:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
2000936a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
2000936e:	2b01      	cmp	r3, #1
20009370:	d105      	bne.n	2000937e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
20009372:	687b      	ldr	r3, [r7, #4]
20009374:	68db      	ldr	r3, [r3, #12]
20009376:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
2000937a:	687b      	ldr	r3, [r7, #4]
2000937c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
2000937e:	6878      	ldr	r0, [r7, #4]
20009380:	f001 fae2 	bl	2000a948 <USB_CoreReset>
20009384:	4603      	mov	r3, r0
20009386:	73fb      	strb	r3, [r7, #15]
20009388:	e010      	b.n	200093ac <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
2000938a:	687b      	ldr	r3, [r7, #4]
2000938c:	68db      	ldr	r3, [r3, #12]
2000938e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20009392:	687b      	ldr	r3, [r7, #4]
20009394:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
20009396:	6878      	ldr	r0, [r7, #4]
20009398:	f001 fad6 	bl	2000a948 <USB_CoreReset>
2000939c:	4603      	mov	r3, r0
2000939e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
200093a0:	687b      	ldr	r3, [r7, #4]
200093a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200093a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
200093a8:	687b      	ldr	r3, [r7, #4]
200093aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
200093ac:	7fbb      	ldrb	r3, [r7, #30]
200093ae:	2b01      	cmp	r3, #1
200093b0:	d10b      	bne.n	200093ca <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
200093b2:	687b      	ldr	r3, [r7, #4]
200093b4:	689b      	ldr	r3, [r3, #8]
200093b6:	f043 0206 	orr.w	r2, r3, #6
200093ba:	687b      	ldr	r3, [r7, #4]
200093bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
200093be:	687b      	ldr	r3, [r7, #4]
200093c0:	689b      	ldr	r3, [r3, #8]
200093c2:	f043 0220 	orr.w	r2, r3, #32
200093c6:	687b      	ldr	r3, [r7, #4]
200093c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
200093ca:	7bfb      	ldrb	r3, [r7, #15]
}
200093cc:	4618      	mov	r0, r3
200093ce:	3710      	adds	r7, #16
200093d0:	46bd      	mov	sp, r7
200093d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
200093d6:	b004      	add	sp, #16
200093d8:	4770      	bx	lr
200093da:	bf00      	nop
200093dc:	ffbdffbf 	.word	0xffbdffbf

200093e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
200093e0:	b480      	push	{r7}
200093e2:	b087      	sub	sp, #28
200093e4:	af00      	add	r7, sp, #0
200093e6:	60f8      	str	r0, [r7, #12]
200093e8:	60b9      	str	r1, [r7, #8]
200093ea:	4613      	mov	r3, r2
200093ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
200093ee:	79fb      	ldrb	r3, [r7, #7]
200093f0:	2b02      	cmp	r3, #2
200093f2:	d165      	bne.n	200094c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
200093f4:	68bb      	ldr	r3, [r7, #8]
200093f6:	4a41      	ldr	r2, [pc, #260]	@ (200094fc <USB_SetTurnaroundTime+0x11c>)
200093f8:	4293      	cmp	r3, r2
200093fa:	d906      	bls.n	2000940a <USB_SetTurnaroundTime+0x2a>
200093fc:	68bb      	ldr	r3, [r7, #8]
200093fe:	4a40      	ldr	r2, [pc, #256]	@ (20009500 <USB_SetTurnaroundTime+0x120>)
20009400:	4293      	cmp	r3, r2
20009402:	d202      	bcs.n	2000940a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
20009404:	230f      	movs	r3, #15
20009406:	617b      	str	r3, [r7, #20]
20009408:	e062      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
2000940a:	68bb      	ldr	r3, [r7, #8]
2000940c:	4a3c      	ldr	r2, [pc, #240]	@ (20009500 <USB_SetTurnaroundTime+0x120>)
2000940e:	4293      	cmp	r3, r2
20009410:	d306      	bcc.n	20009420 <USB_SetTurnaroundTime+0x40>
20009412:	68bb      	ldr	r3, [r7, #8]
20009414:	4a3b      	ldr	r2, [pc, #236]	@ (20009504 <USB_SetTurnaroundTime+0x124>)
20009416:	4293      	cmp	r3, r2
20009418:	d202      	bcs.n	20009420 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
2000941a:	230e      	movs	r3, #14
2000941c:	617b      	str	r3, [r7, #20]
2000941e:	e057      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
20009420:	68bb      	ldr	r3, [r7, #8]
20009422:	4a38      	ldr	r2, [pc, #224]	@ (20009504 <USB_SetTurnaroundTime+0x124>)
20009424:	4293      	cmp	r3, r2
20009426:	d306      	bcc.n	20009436 <USB_SetTurnaroundTime+0x56>
20009428:	68bb      	ldr	r3, [r7, #8]
2000942a:	4a37      	ldr	r2, [pc, #220]	@ (20009508 <USB_SetTurnaroundTime+0x128>)
2000942c:	4293      	cmp	r3, r2
2000942e:	d202      	bcs.n	20009436 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
20009430:	230d      	movs	r3, #13
20009432:	617b      	str	r3, [r7, #20]
20009434:	e04c      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
20009436:	68bb      	ldr	r3, [r7, #8]
20009438:	4a33      	ldr	r2, [pc, #204]	@ (20009508 <USB_SetTurnaroundTime+0x128>)
2000943a:	4293      	cmp	r3, r2
2000943c:	d306      	bcc.n	2000944c <USB_SetTurnaroundTime+0x6c>
2000943e:	68bb      	ldr	r3, [r7, #8]
20009440:	4a32      	ldr	r2, [pc, #200]	@ (2000950c <USB_SetTurnaroundTime+0x12c>)
20009442:	4293      	cmp	r3, r2
20009444:	d802      	bhi.n	2000944c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
20009446:	230c      	movs	r3, #12
20009448:	617b      	str	r3, [r7, #20]
2000944a:	e041      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
2000944c:	68bb      	ldr	r3, [r7, #8]
2000944e:	4a2f      	ldr	r2, [pc, #188]	@ (2000950c <USB_SetTurnaroundTime+0x12c>)
20009450:	4293      	cmp	r3, r2
20009452:	d906      	bls.n	20009462 <USB_SetTurnaroundTime+0x82>
20009454:	68bb      	ldr	r3, [r7, #8]
20009456:	4a2e      	ldr	r2, [pc, #184]	@ (20009510 <USB_SetTurnaroundTime+0x130>)
20009458:	4293      	cmp	r3, r2
2000945a:	d802      	bhi.n	20009462 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
2000945c:	230b      	movs	r3, #11
2000945e:	617b      	str	r3, [r7, #20]
20009460:	e036      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
20009462:	68bb      	ldr	r3, [r7, #8]
20009464:	4a2a      	ldr	r2, [pc, #168]	@ (20009510 <USB_SetTurnaroundTime+0x130>)
20009466:	4293      	cmp	r3, r2
20009468:	d906      	bls.n	20009478 <USB_SetTurnaroundTime+0x98>
2000946a:	68bb      	ldr	r3, [r7, #8]
2000946c:	4a29      	ldr	r2, [pc, #164]	@ (20009514 <USB_SetTurnaroundTime+0x134>)
2000946e:	4293      	cmp	r3, r2
20009470:	d802      	bhi.n	20009478 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
20009472:	230a      	movs	r3, #10
20009474:	617b      	str	r3, [r7, #20]
20009476:	e02b      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
20009478:	68bb      	ldr	r3, [r7, #8]
2000947a:	4a26      	ldr	r2, [pc, #152]	@ (20009514 <USB_SetTurnaroundTime+0x134>)
2000947c:	4293      	cmp	r3, r2
2000947e:	d906      	bls.n	2000948e <USB_SetTurnaroundTime+0xae>
20009480:	68bb      	ldr	r3, [r7, #8]
20009482:	4a25      	ldr	r2, [pc, #148]	@ (20009518 <USB_SetTurnaroundTime+0x138>)
20009484:	4293      	cmp	r3, r2
20009486:	d202      	bcs.n	2000948e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
20009488:	2309      	movs	r3, #9
2000948a:	617b      	str	r3, [r7, #20]
2000948c:	e020      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
2000948e:	68bb      	ldr	r3, [r7, #8]
20009490:	4a21      	ldr	r2, [pc, #132]	@ (20009518 <USB_SetTurnaroundTime+0x138>)
20009492:	4293      	cmp	r3, r2
20009494:	d306      	bcc.n	200094a4 <USB_SetTurnaroundTime+0xc4>
20009496:	68bb      	ldr	r3, [r7, #8]
20009498:	4a20      	ldr	r2, [pc, #128]	@ (2000951c <USB_SetTurnaroundTime+0x13c>)
2000949a:	4293      	cmp	r3, r2
2000949c:	d802      	bhi.n	200094a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
2000949e:	2308      	movs	r3, #8
200094a0:	617b      	str	r3, [r7, #20]
200094a2:	e015      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
200094a4:	68bb      	ldr	r3, [r7, #8]
200094a6:	4a1d      	ldr	r2, [pc, #116]	@ (2000951c <USB_SetTurnaroundTime+0x13c>)
200094a8:	4293      	cmp	r3, r2
200094aa:	d906      	bls.n	200094ba <USB_SetTurnaroundTime+0xda>
200094ac:	68bb      	ldr	r3, [r7, #8]
200094ae:	4a1c      	ldr	r2, [pc, #112]	@ (20009520 <USB_SetTurnaroundTime+0x140>)
200094b0:	4293      	cmp	r3, r2
200094b2:	d202      	bcs.n	200094ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
200094b4:	2307      	movs	r3, #7
200094b6:	617b      	str	r3, [r7, #20]
200094b8:	e00a      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
200094ba:	2306      	movs	r3, #6
200094bc:	617b      	str	r3, [r7, #20]
200094be:	e007      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
200094c0:	79fb      	ldrb	r3, [r7, #7]
200094c2:	2b00      	cmp	r3, #0
200094c4:	d102      	bne.n	200094cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
200094c6:	2309      	movs	r3, #9
200094c8:	617b      	str	r3, [r7, #20]
200094ca:	e001      	b.n	200094d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
200094cc:	2309      	movs	r3, #9
200094ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
200094d0:	68fb      	ldr	r3, [r7, #12]
200094d2:	68db      	ldr	r3, [r3, #12]
200094d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
200094d8:	68fb      	ldr	r3, [r7, #12]
200094da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
200094dc:	68fb      	ldr	r3, [r7, #12]
200094de:	68da      	ldr	r2, [r3, #12]
200094e0:	697b      	ldr	r3, [r7, #20]
200094e2:	029b      	lsls	r3, r3, #10
200094e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
200094e8:	431a      	orrs	r2, r3
200094ea:	68fb      	ldr	r3, [r7, #12]
200094ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
200094ee:	2300      	movs	r3, #0
}
200094f0:	4618      	mov	r0, r3
200094f2:	371c      	adds	r7, #28
200094f4:	46bd      	mov	sp, r7
200094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200094fa:	4770      	bx	lr
200094fc:	00d8acbf 	.word	0x00d8acbf
20009500:	00e4e1c0 	.word	0x00e4e1c0
20009504:	00f42400 	.word	0x00f42400
20009508:	01067380 	.word	0x01067380
2000950c:	011a499f 	.word	0x011a499f
20009510:	01312cff 	.word	0x01312cff
20009514:	014ca43f 	.word	0x014ca43f
20009518:	016e3600 	.word	0x016e3600
2000951c:	01a6ab1f 	.word	0x01a6ab1f
20009520:	01e84800 	.word	0x01e84800

20009524 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
20009524:	b480      	push	{r7}
20009526:	b083      	sub	sp, #12
20009528:	af00      	add	r7, sp, #0
2000952a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
2000952c:	687b      	ldr	r3, [r7, #4]
2000952e:	689b      	ldr	r3, [r3, #8]
20009530:	f043 0201 	orr.w	r2, r3, #1
20009534:	687b      	ldr	r3, [r7, #4]
20009536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
20009538:	2300      	movs	r3, #0
}
2000953a:	4618      	mov	r0, r3
2000953c:	370c      	adds	r7, #12
2000953e:	46bd      	mov	sp, r7
20009540:	f85d 7b04 	ldr.w	r7, [sp], #4
20009544:	4770      	bx	lr

20009546 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
20009546:	b480      	push	{r7}
20009548:	b083      	sub	sp, #12
2000954a:	af00      	add	r7, sp, #0
2000954c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
2000954e:	687b      	ldr	r3, [r7, #4]
20009550:	689b      	ldr	r3, [r3, #8]
20009552:	f023 0201 	bic.w	r2, r3, #1
20009556:	687b      	ldr	r3, [r7, #4]
20009558:	609a      	str	r2, [r3, #8]
  return HAL_OK;
2000955a:	2300      	movs	r3, #0
}
2000955c:	4618      	mov	r0, r3
2000955e:	370c      	adds	r7, #12
20009560:	46bd      	mov	sp, r7
20009562:	f85d 7b04 	ldr.w	r7, [sp], #4
20009566:	4770      	bx	lr

20009568 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
20009568:	b580      	push	{r7, lr}
2000956a:	b084      	sub	sp, #16
2000956c:	af00      	add	r7, sp, #0
2000956e:	6078      	str	r0, [r7, #4]
20009570:	460b      	mov	r3, r1
20009572:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
20009574:	2300      	movs	r3, #0
20009576:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
20009578:	687b      	ldr	r3, [r7, #4]
2000957a:	68db      	ldr	r3, [r3, #12]
2000957c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
20009580:	687b      	ldr	r3, [r7, #4]
20009582:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
20009584:	78fb      	ldrb	r3, [r7, #3]
20009586:	2b01      	cmp	r3, #1
20009588:	d115      	bne.n	200095b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
2000958a:	687b      	ldr	r3, [r7, #4]
2000958c:	68db      	ldr	r3, [r3, #12]
2000958e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
20009592:	687b      	ldr	r3, [r7, #4]
20009594:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20009596:	200a      	movs	r0, #10
20009598:	f7fb ff9a 	bl	200054d0 <HAL_Delay>
      ms += 10U;
2000959c:	68fb      	ldr	r3, [r7, #12]
2000959e:	330a      	adds	r3, #10
200095a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
200095a2:	6878      	ldr	r0, [r7, #4]
200095a4:	f001 f93f 	bl	2000a826 <USB_GetMode>
200095a8:	4603      	mov	r3, r0
200095aa:	2b01      	cmp	r3, #1
200095ac:	d01e      	beq.n	200095ec <USB_SetCurrentMode+0x84>
200095ae:	68fb      	ldr	r3, [r7, #12]
200095b0:	2bc7      	cmp	r3, #199	@ 0xc7
200095b2:	d9f0      	bls.n	20009596 <USB_SetCurrentMode+0x2e>
200095b4:	e01a      	b.n	200095ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
200095b6:	78fb      	ldrb	r3, [r7, #3]
200095b8:	2b00      	cmp	r3, #0
200095ba:	d115      	bne.n	200095e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
200095bc:	687b      	ldr	r3, [r7, #4]
200095be:	68db      	ldr	r3, [r3, #12]
200095c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
200095c4:	687b      	ldr	r3, [r7, #4]
200095c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
200095c8:	200a      	movs	r0, #10
200095ca:	f7fb ff81 	bl	200054d0 <HAL_Delay>
      ms += 10U;
200095ce:	68fb      	ldr	r3, [r7, #12]
200095d0:	330a      	adds	r3, #10
200095d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
200095d4:	6878      	ldr	r0, [r7, #4]
200095d6:	f001 f926 	bl	2000a826 <USB_GetMode>
200095da:	4603      	mov	r3, r0
200095dc:	2b00      	cmp	r3, #0
200095de:	d005      	beq.n	200095ec <USB_SetCurrentMode+0x84>
200095e0:	68fb      	ldr	r3, [r7, #12]
200095e2:	2bc7      	cmp	r3, #199	@ 0xc7
200095e4:	d9f0      	bls.n	200095c8 <USB_SetCurrentMode+0x60>
200095e6:	e001      	b.n	200095ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
200095e8:	2301      	movs	r3, #1
200095ea:	e005      	b.n	200095f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
200095ec:	68fb      	ldr	r3, [r7, #12]
200095ee:	2bc8      	cmp	r3, #200	@ 0xc8
200095f0:	d101      	bne.n	200095f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
200095f2:	2301      	movs	r3, #1
200095f4:	e000      	b.n	200095f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
200095f6:	2300      	movs	r3, #0
}
200095f8:	4618      	mov	r0, r3
200095fa:	3710      	adds	r7, #16
200095fc:	46bd      	mov	sp, r7
200095fe:	bd80      	pop	{r7, pc}

20009600 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
20009600:	b084      	sub	sp, #16
20009602:	b580      	push	{r7, lr}
20009604:	b086      	sub	sp, #24
20009606:	af00      	add	r7, sp, #0
20009608:	6078      	str	r0, [r7, #4]
2000960a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
2000960e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
20009612:	2300      	movs	r3, #0
20009614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009616:	687b      	ldr	r3, [r7, #4]
20009618:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
2000961a:	2300      	movs	r3, #0
2000961c:	613b      	str	r3, [r7, #16]
2000961e:	e009      	b.n	20009634 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
20009620:	687a      	ldr	r2, [r7, #4]
20009622:	693b      	ldr	r3, [r7, #16]
20009624:	3340      	adds	r3, #64	@ 0x40
20009626:	009b      	lsls	r3, r3, #2
20009628:	4413      	add	r3, r2
2000962a:	2200      	movs	r2, #0
2000962c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
2000962e:	693b      	ldr	r3, [r7, #16]
20009630:	3301      	adds	r3, #1
20009632:	613b      	str	r3, [r7, #16]
20009634:	693b      	ldr	r3, [r7, #16]
20009636:	2b0e      	cmp	r3, #14
20009638:	d9f2      	bls.n	20009620 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
2000963a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
2000963e:	2b00      	cmp	r3, #0
20009640:	d11c      	bne.n	2000967c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
20009642:	68fb      	ldr	r3, [r7, #12]
20009644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009648:	685b      	ldr	r3, [r3, #4]
2000964a:	68fa      	ldr	r2, [r7, #12]
2000964c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009650:	f043 0302 	orr.w	r3, r3, #2
20009654:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
20009656:	687b      	ldr	r3, [r7, #4]
20009658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000965a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
2000965e:	687b      	ldr	r3, [r7, #4]
20009660:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
20009662:	687b      	ldr	r3, [r7, #4]
20009664:	681b      	ldr	r3, [r3, #0]
20009666:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
2000966a:	687b      	ldr	r3, [r7, #4]
2000966c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
2000966e:	687b      	ldr	r3, [r7, #4]
20009670:	681b      	ldr	r3, [r3, #0]
20009672:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20009676:	687b      	ldr	r3, [r7, #4]
20009678:	601a      	str	r2, [r3, #0]
2000967a:	e005      	b.n	20009688 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
2000967c:	687b      	ldr	r3, [r7, #4]
2000967e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009680:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
20009684:	687b      	ldr	r3, [r7, #4]
20009686:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
20009688:	68fb      	ldr	r3, [r7, #12]
2000968a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000968e:	461a      	mov	r2, r3
20009690:	2300      	movs	r3, #0
20009692:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
20009694:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
20009698:	2b01      	cmp	r3, #1
2000969a:	d10d      	bne.n	200096b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
2000969c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
200096a0:	2b00      	cmp	r3, #0
200096a2:	d104      	bne.n	200096ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
200096a4:	2100      	movs	r1, #0
200096a6:	6878      	ldr	r0, [r7, #4]
200096a8:	f000 f968 	bl	2000997c <USB_SetDevSpeed>
200096ac:	e008      	b.n	200096c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
200096ae:	2101      	movs	r1, #1
200096b0:	6878      	ldr	r0, [r7, #4]
200096b2:	f000 f963 	bl	2000997c <USB_SetDevSpeed>
200096b6:	e003      	b.n	200096c0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
200096b8:	2103      	movs	r1, #3
200096ba:	6878      	ldr	r0, [r7, #4]
200096bc:	f000 f95e 	bl	2000997c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
200096c0:	2110      	movs	r1, #16
200096c2:	6878      	ldr	r0, [r7, #4]
200096c4:	f000 f8fa 	bl	200098bc <USB_FlushTxFifo>
200096c8:	4603      	mov	r3, r0
200096ca:	2b00      	cmp	r3, #0
200096cc:	d001      	beq.n	200096d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
200096ce:	2301      	movs	r3, #1
200096d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
200096d2:	6878      	ldr	r0, [r7, #4]
200096d4:	f000 f924 	bl	20009920 <USB_FlushRxFifo>
200096d8:	4603      	mov	r3, r0
200096da:	2b00      	cmp	r3, #0
200096dc:	d001      	beq.n	200096e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
200096de:	2301      	movs	r3, #1
200096e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
200096e2:	68fb      	ldr	r3, [r7, #12]
200096e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200096e8:	461a      	mov	r2, r3
200096ea:	2300      	movs	r3, #0
200096ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
200096ee:	68fb      	ldr	r3, [r7, #12]
200096f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200096f4:	461a      	mov	r2, r3
200096f6:	2300      	movs	r3, #0
200096f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
200096fa:	68fb      	ldr	r3, [r7, #12]
200096fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009700:	461a      	mov	r2, r3
20009702:	2300      	movs	r3, #0
20009704:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
20009706:	2300      	movs	r3, #0
20009708:	613b      	str	r3, [r7, #16]
2000970a:	e043      	b.n	20009794 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
2000970c:	693b      	ldr	r3, [r7, #16]
2000970e:	015a      	lsls	r2, r3, #5
20009710:	68fb      	ldr	r3, [r7, #12]
20009712:	4413      	add	r3, r2
20009714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009718:	681b      	ldr	r3, [r3, #0]
2000971a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000971e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20009722:	d118      	bne.n	20009756 <USB_DevInit+0x156>
    {
      if (i == 0U)
20009724:	693b      	ldr	r3, [r7, #16]
20009726:	2b00      	cmp	r3, #0
20009728:	d10a      	bne.n	20009740 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
2000972a:	693b      	ldr	r3, [r7, #16]
2000972c:	015a      	lsls	r2, r3, #5
2000972e:	68fb      	ldr	r3, [r7, #12]
20009730:	4413      	add	r3, r2
20009732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009736:	461a      	mov	r2, r3
20009738:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
2000973c:	6013      	str	r3, [r2, #0]
2000973e:	e013      	b.n	20009768 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
20009740:	693b      	ldr	r3, [r7, #16]
20009742:	015a      	lsls	r2, r3, #5
20009744:	68fb      	ldr	r3, [r7, #12]
20009746:	4413      	add	r3, r2
20009748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000974c:	461a      	mov	r2, r3
2000974e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20009752:	6013      	str	r3, [r2, #0]
20009754:	e008      	b.n	20009768 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
20009756:	693b      	ldr	r3, [r7, #16]
20009758:	015a      	lsls	r2, r3, #5
2000975a:	68fb      	ldr	r3, [r7, #12]
2000975c:	4413      	add	r3, r2
2000975e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009762:	461a      	mov	r2, r3
20009764:	2300      	movs	r3, #0
20009766:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
20009768:	693b      	ldr	r3, [r7, #16]
2000976a:	015a      	lsls	r2, r3, #5
2000976c:	68fb      	ldr	r3, [r7, #12]
2000976e:	4413      	add	r3, r2
20009770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009774:	461a      	mov	r2, r3
20009776:	2300      	movs	r3, #0
20009778:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
2000977a:	693b      	ldr	r3, [r7, #16]
2000977c:	015a      	lsls	r2, r3, #5
2000977e:	68fb      	ldr	r3, [r7, #12]
20009780:	4413      	add	r3, r2
20009782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009786:	461a      	mov	r2, r3
20009788:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
2000978c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
2000978e:	693b      	ldr	r3, [r7, #16]
20009790:	3301      	adds	r3, #1
20009792:	613b      	str	r3, [r7, #16]
20009794:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20009798:	461a      	mov	r2, r3
2000979a:	693b      	ldr	r3, [r7, #16]
2000979c:	4293      	cmp	r3, r2
2000979e:	d3b5      	bcc.n	2000970c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
200097a0:	2300      	movs	r3, #0
200097a2:	613b      	str	r3, [r7, #16]
200097a4:	e043      	b.n	2000982e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
200097a6:	693b      	ldr	r3, [r7, #16]
200097a8:	015a      	lsls	r2, r3, #5
200097aa:	68fb      	ldr	r3, [r7, #12]
200097ac:	4413      	add	r3, r2
200097ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200097b2:	681b      	ldr	r3, [r3, #0]
200097b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200097b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200097bc:	d118      	bne.n	200097f0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
200097be:	693b      	ldr	r3, [r7, #16]
200097c0:	2b00      	cmp	r3, #0
200097c2:	d10a      	bne.n	200097da <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
200097c4:	693b      	ldr	r3, [r7, #16]
200097c6:	015a      	lsls	r2, r3, #5
200097c8:	68fb      	ldr	r3, [r7, #12]
200097ca:	4413      	add	r3, r2
200097cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200097d0:	461a      	mov	r2, r3
200097d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
200097d6:	6013      	str	r3, [r2, #0]
200097d8:	e013      	b.n	20009802 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
200097da:	693b      	ldr	r3, [r7, #16]
200097dc:	015a      	lsls	r2, r3, #5
200097de:	68fb      	ldr	r3, [r7, #12]
200097e0:	4413      	add	r3, r2
200097e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200097e6:	461a      	mov	r2, r3
200097e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
200097ec:	6013      	str	r3, [r2, #0]
200097ee:	e008      	b.n	20009802 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
200097f0:	693b      	ldr	r3, [r7, #16]
200097f2:	015a      	lsls	r2, r3, #5
200097f4:	68fb      	ldr	r3, [r7, #12]
200097f6:	4413      	add	r3, r2
200097f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200097fc:	461a      	mov	r2, r3
200097fe:	2300      	movs	r3, #0
20009800:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
20009802:	693b      	ldr	r3, [r7, #16]
20009804:	015a      	lsls	r2, r3, #5
20009806:	68fb      	ldr	r3, [r7, #12]
20009808:	4413      	add	r3, r2
2000980a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000980e:	461a      	mov	r2, r3
20009810:	2300      	movs	r3, #0
20009812:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
20009814:	693b      	ldr	r3, [r7, #16]
20009816:	015a      	lsls	r2, r3, #5
20009818:	68fb      	ldr	r3, [r7, #12]
2000981a:	4413      	add	r3, r2
2000981c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009820:	461a      	mov	r2, r3
20009822:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20009826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
20009828:	693b      	ldr	r3, [r7, #16]
2000982a:	3301      	adds	r3, #1
2000982c:	613b      	str	r3, [r7, #16]
2000982e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20009832:	461a      	mov	r2, r3
20009834:	693b      	ldr	r3, [r7, #16]
20009836:	4293      	cmp	r3, r2
20009838:	d3b5      	bcc.n	200097a6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
2000983a:	68fb      	ldr	r3, [r7, #12]
2000983c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009840:	691b      	ldr	r3, [r3, #16]
20009842:	68fa      	ldr	r2, [r7, #12]
20009844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
2000984c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
2000984e:	687b      	ldr	r3, [r7, #4]
20009850:	2200      	movs	r2, #0
20009852:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
20009854:	687b      	ldr	r3, [r7, #4]
20009856:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
2000985a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
2000985c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
20009860:	2b00      	cmp	r3, #0
20009862:	d105      	bne.n	20009870 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
20009864:	687b      	ldr	r3, [r7, #4]
20009866:	699b      	ldr	r3, [r3, #24]
20009868:	f043 0210 	orr.w	r2, r3, #16
2000986c:	687b      	ldr	r3, [r7, #4]
2000986e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
20009870:	687b      	ldr	r3, [r7, #4]
20009872:	699a      	ldr	r2, [r3, #24]
20009874:	4b0f      	ldr	r3, [pc, #60]	@ (200098b4 <USB_DevInit+0x2b4>)
20009876:	4313      	orrs	r3, r2
20009878:	687a      	ldr	r2, [r7, #4]
2000987a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
2000987c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
20009880:	2b00      	cmp	r3, #0
20009882:	d005      	beq.n	20009890 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
20009884:	687b      	ldr	r3, [r7, #4]
20009886:	699b      	ldr	r3, [r3, #24]
20009888:	f043 0208 	orr.w	r2, r3, #8
2000988c:	687b      	ldr	r3, [r7, #4]
2000988e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
20009890:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
20009894:	2b01      	cmp	r3, #1
20009896:	d105      	bne.n	200098a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
20009898:	687b      	ldr	r3, [r7, #4]
2000989a:	699a      	ldr	r2, [r3, #24]
2000989c:	4b06      	ldr	r3, [pc, #24]	@ (200098b8 <USB_DevInit+0x2b8>)
2000989e:	4313      	orrs	r3, r2
200098a0:	687a      	ldr	r2, [r7, #4]
200098a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
200098a4:	7dfb      	ldrb	r3, [r7, #23]
}
200098a6:	4618      	mov	r0, r3
200098a8:	3718      	adds	r7, #24
200098aa:	46bd      	mov	sp, r7
200098ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
200098b0:	b004      	add	sp, #16
200098b2:	4770      	bx	lr
200098b4:	803c3800 	.word	0x803c3800
200098b8:	40000004 	.word	0x40000004

200098bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
200098bc:	b480      	push	{r7}
200098be:	b085      	sub	sp, #20
200098c0:	af00      	add	r7, sp, #0
200098c2:	6078      	str	r0, [r7, #4]
200098c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
200098c6:	2300      	movs	r3, #0
200098c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
200098ca:	68fb      	ldr	r3, [r7, #12]
200098cc:	3301      	adds	r3, #1
200098ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
200098d0:	68fb      	ldr	r3, [r7, #12]
200098d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200098d6:	d901      	bls.n	200098dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
200098d8:	2303      	movs	r3, #3
200098da:	e01b      	b.n	20009914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
200098dc:	687b      	ldr	r3, [r7, #4]
200098de:	691b      	ldr	r3, [r3, #16]
200098e0:	2b00      	cmp	r3, #0
200098e2:	daf2      	bge.n	200098ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
200098e4:	2300      	movs	r3, #0
200098e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
200098e8:	683b      	ldr	r3, [r7, #0]
200098ea:	019b      	lsls	r3, r3, #6
200098ec:	f043 0220 	orr.w	r2, r3, #32
200098f0:	687b      	ldr	r3, [r7, #4]
200098f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
200098f4:	68fb      	ldr	r3, [r7, #12]
200098f6:	3301      	adds	r3, #1
200098f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
200098fa:	68fb      	ldr	r3, [r7, #12]
200098fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20009900:	d901      	bls.n	20009906 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
20009902:	2303      	movs	r3, #3
20009904:	e006      	b.n	20009914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
20009906:	687b      	ldr	r3, [r7, #4]
20009908:	691b      	ldr	r3, [r3, #16]
2000990a:	f003 0320 	and.w	r3, r3, #32
2000990e:	2b20      	cmp	r3, #32
20009910:	d0f0      	beq.n	200098f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
20009912:	2300      	movs	r3, #0
}
20009914:	4618      	mov	r0, r3
20009916:	3714      	adds	r7, #20
20009918:	46bd      	mov	sp, r7
2000991a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000991e:	4770      	bx	lr

20009920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
20009920:	b480      	push	{r7}
20009922:	b085      	sub	sp, #20
20009924:	af00      	add	r7, sp, #0
20009926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
20009928:	2300      	movs	r3, #0
2000992a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
2000992c:	68fb      	ldr	r3, [r7, #12]
2000992e:	3301      	adds	r3, #1
20009930:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20009932:	68fb      	ldr	r3, [r7, #12]
20009934:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20009938:	d901      	bls.n	2000993e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
2000993a:	2303      	movs	r3, #3
2000993c:	e018      	b.n	20009970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
2000993e:	687b      	ldr	r3, [r7, #4]
20009940:	691b      	ldr	r3, [r3, #16]
20009942:	2b00      	cmp	r3, #0
20009944:	daf2      	bge.n	2000992c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
20009946:	2300      	movs	r3, #0
20009948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
2000994a:	687b      	ldr	r3, [r7, #4]
2000994c:	2210      	movs	r2, #16
2000994e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20009950:	68fb      	ldr	r3, [r7, #12]
20009952:	3301      	adds	r3, #1
20009954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20009956:	68fb      	ldr	r3, [r7, #12]
20009958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000995c:	d901      	bls.n	20009962 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
2000995e:	2303      	movs	r3, #3
20009960:	e006      	b.n	20009970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
20009962:	687b      	ldr	r3, [r7, #4]
20009964:	691b      	ldr	r3, [r3, #16]
20009966:	f003 0310 	and.w	r3, r3, #16
2000996a:	2b10      	cmp	r3, #16
2000996c:	d0f0      	beq.n	20009950 <USB_FlushRxFifo+0x30>

  return HAL_OK;
2000996e:	2300      	movs	r3, #0
}
20009970:	4618      	mov	r0, r3
20009972:	3714      	adds	r7, #20
20009974:	46bd      	mov	sp, r7
20009976:	f85d 7b04 	ldr.w	r7, [sp], #4
2000997a:	4770      	bx	lr

2000997c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
2000997c:	b480      	push	{r7}
2000997e:	b085      	sub	sp, #20
20009980:	af00      	add	r7, sp, #0
20009982:	6078      	str	r0, [r7, #4]
20009984:	460b      	mov	r3, r1
20009986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009988:	687b      	ldr	r3, [r7, #4]
2000998a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
2000998c:	68fb      	ldr	r3, [r7, #12]
2000998e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009992:	681a      	ldr	r2, [r3, #0]
20009994:	78fb      	ldrb	r3, [r7, #3]
20009996:	68f9      	ldr	r1, [r7, #12]
20009998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000999c:	4313      	orrs	r3, r2
2000999e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
200099a0:	2300      	movs	r3, #0
}
200099a2:	4618      	mov	r0, r3
200099a4:	3714      	adds	r7, #20
200099a6:	46bd      	mov	sp, r7
200099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200099ac:	4770      	bx	lr

200099ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
200099ae:	b480      	push	{r7}
200099b0:	b087      	sub	sp, #28
200099b2:	af00      	add	r7, sp, #0
200099b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200099b6:	687b      	ldr	r3, [r7, #4]
200099b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
200099ba:	693b      	ldr	r3, [r7, #16]
200099bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200099c0:	689b      	ldr	r3, [r3, #8]
200099c2:	f003 0306 	and.w	r3, r3, #6
200099c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
200099c8:	68fb      	ldr	r3, [r7, #12]
200099ca:	2b00      	cmp	r3, #0
200099cc:	d102      	bne.n	200099d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
200099ce:	2300      	movs	r3, #0
200099d0:	75fb      	strb	r3, [r7, #23]
200099d2:	e00a      	b.n	200099ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
200099d4:	68fb      	ldr	r3, [r7, #12]
200099d6:	2b02      	cmp	r3, #2
200099d8:	d002      	beq.n	200099e0 <USB_GetDevSpeed+0x32>
200099da:	68fb      	ldr	r3, [r7, #12]
200099dc:	2b06      	cmp	r3, #6
200099de:	d102      	bne.n	200099e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
200099e0:	2302      	movs	r3, #2
200099e2:	75fb      	strb	r3, [r7, #23]
200099e4:	e001      	b.n	200099ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
200099e6:	230f      	movs	r3, #15
200099e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
200099ea:	7dfb      	ldrb	r3, [r7, #23]
}
200099ec:	4618      	mov	r0, r3
200099ee:	371c      	adds	r7, #28
200099f0:	46bd      	mov	sp, r7
200099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200099f6:	4770      	bx	lr

200099f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
200099f8:	b480      	push	{r7}
200099fa:	b085      	sub	sp, #20
200099fc:	af00      	add	r7, sp, #0
200099fe:	6078      	str	r0, [r7, #4]
20009a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009a02:	687b      	ldr	r3, [r7, #4]
20009a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20009a06:	683b      	ldr	r3, [r7, #0]
20009a08:	781b      	ldrb	r3, [r3, #0]
20009a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20009a0c:	683b      	ldr	r3, [r7, #0]
20009a0e:	785b      	ldrb	r3, [r3, #1]
20009a10:	2b01      	cmp	r3, #1
20009a12:	d139      	bne.n	20009a88 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
20009a14:	68fb      	ldr	r3, [r7, #12]
20009a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009a1a:	69da      	ldr	r2, [r3, #28]
20009a1c:	683b      	ldr	r3, [r7, #0]
20009a1e:	781b      	ldrb	r3, [r3, #0]
20009a20:	f003 030f 	and.w	r3, r3, #15
20009a24:	2101      	movs	r1, #1
20009a26:	fa01 f303 	lsl.w	r3, r1, r3
20009a2a:	b29b      	uxth	r3, r3
20009a2c:	68f9      	ldr	r1, [r7, #12]
20009a2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009a32:	4313      	orrs	r3, r2
20009a34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
20009a36:	68bb      	ldr	r3, [r7, #8]
20009a38:	015a      	lsls	r2, r3, #5
20009a3a:	68fb      	ldr	r3, [r7, #12]
20009a3c:	4413      	add	r3, r2
20009a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009a42:	681b      	ldr	r3, [r3, #0]
20009a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20009a48:	2b00      	cmp	r3, #0
20009a4a:	d153      	bne.n	20009af4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20009a4c:	68bb      	ldr	r3, [r7, #8]
20009a4e:	015a      	lsls	r2, r3, #5
20009a50:	68fb      	ldr	r3, [r7, #12]
20009a52:	4413      	add	r3, r2
20009a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009a58:	681a      	ldr	r2, [r3, #0]
20009a5a:	683b      	ldr	r3, [r7, #0]
20009a5c:	689b      	ldr	r3, [r3, #8]
20009a5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
20009a62:	683b      	ldr	r3, [r7, #0]
20009a64:	791b      	ldrb	r3, [r3, #4]
20009a66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20009a68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
20009a6a:	68bb      	ldr	r3, [r7, #8]
20009a6c:	059b      	lsls	r3, r3, #22
20009a6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20009a70:	431a      	orrs	r2, r3
20009a72:	68bb      	ldr	r3, [r7, #8]
20009a74:	0159      	lsls	r1, r3, #5
20009a76:	68fb      	ldr	r3, [r7, #12]
20009a78:	440b      	add	r3, r1
20009a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009a7e:	4619      	mov	r1, r3
20009a80:	4b20      	ldr	r3, [pc, #128]	@ (20009b04 <USB_ActivateEndpoint+0x10c>)
20009a82:	4313      	orrs	r3, r2
20009a84:	600b      	str	r3, [r1, #0]
20009a86:	e035      	b.n	20009af4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
20009a88:	68fb      	ldr	r3, [r7, #12]
20009a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009a8e:	69da      	ldr	r2, [r3, #28]
20009a90:	683b      	ldr	r3, [r7, #0]
20009a92:	781b      	ldrb	r3, [r3, #0]
20009a94:	f003 030f 	and.w	r3, r3, #15
20009a98:	2101      	movs	r1, #1
20009a9a:	fa01 f303 	lsl.w	r3, r1, r3
20009a9e:	041b      	lsls	r3, r3, #16
20009aa0:	68f9      	ldr	r1, [r7, #12]
20009aa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009aa6:	4313      	orrs	r3, r2
20009aa8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
20009aaa:	68bb      	ldr	r3, [r7, #8]
20009aac:	015a      	lsls	r2, r3, #5
20009aae:	68fb      	ldr	r3, [r7, #12]
20009ab0:	4413      	add	r3, r2
20009ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009ab6:	681b      	ldr	r3, [r3, #0]
20009ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20009abc:	2b00      	cmp	r3, #0
20009abe:	d119      	bne.n	20009af4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20009ac0:	68bb      	ldr	r3, [r7, #8]
20009ac2:	015a      	lsls	r2, r3, #5
20009ac4:	68fb      	ldr	r3, [r7, #12]
20009ac6:	4413      	add	r3, r2
20009ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009acc:	681a      	ldr	r2, [r3, #0]
20009ace:	683b      	ldr	r3, [r7, #0]
20009ad0:	689b      	ldr	r3, [r3, #8]
20009ad2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
20009ad6:	683b      	ldr	r3, [r7, #0]
20009ad8:	791b      	ldrb	r3, [r3, #4]
20009ada:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20009adc:	430b      	orrs	r3, r1
20009ade:	431a      	orrs	r2, r3
20009ae0:	68bb      	ldr	r3, [r7, #8]
20009ae2:	0159      	lsls	r1, r3, #5
20009ae4:	68fb      	ldr	r3, [r7, #12]
20009ae6:	440b      	add	r3, r1
20009ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009aec:	4619      	mov	r1, r3
20009aee:	4b05      	ldr	r3, [pc, #20]	@ (20009b04 <USB_ActivateEndpoint+0x10c>)
20009af0:	4313      	orrs	r3, r2
20009af2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
20009af4:	2300      	movs	r3, #0
}
20009af6:	4618      	mov	r0, r3
20009af8:	3714      	adds	r7, #20
20009afa:	46bd      	mov	sp, r7
20009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
20009b00:	4770      	bx	lr
20009b02:	bf00      	nop
20009b04:	10008000 	.word	0x10008000

20009b08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20009b08:	b480      	push	{r7}
20009b0a:	b085      	sub	sp, #20
20009b0c:	af00      	add	r7, sp, #0
20009b0e:	6078      	str	r0, [r7, #4]
20009b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009b12:	687b      	ldr	r3, [r7, #4]
20009b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20009b16:	683b      	ldr	r3, [r7, #0]
20009b18:	781b      	ldrb	r3, [r3, #0]
20009b1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
20009b1c:	683b      	ldr	r3, [r7, #0]
20009b1e:	785b      	ldrb	r3, [r3, #1]
20009b20:	2b01      	cmp	r3, #1
20009b22:	d161      	bne.n	20009be8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20009b24:	68bb      	ldr	r3, [r7, #8]
20009b26:	015a      	lsls	r2, r3, #5
20009b28:	68fb      	ldr	r3, [r7, #12]
20009b2a:	4413      	add	r3, r2
20009b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009b30:	681b      	ldr	r3, [r3, #0]
20009b32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009b36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20009b3a:	d11f      	bne.n	20009b7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
20009b3c:	68bb      	ldr	r3, [r7, #8]
20009b3e:	015a      	lsls	r2, r3, #5
20009b40:	68fb      	ldr	r3, [r7, #12]
20009b42:	4413      	add	r3, r2
20009b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009b48:	681b      	ldr	r3, [r3, #0]
20009b4a:	68ba      	ldr	r2, [r7, #8]
20009b4c:	0151      	lsls	r1, r2, #5
20009b4e:	68fa      	ldr	r2, [r7, #12]
20009b50:	440a      	add	r2, r1
20009b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009b56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20009b5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
20009b5c:	68bb      	ldr	r3, [r7, #8]
20009b5e:	015a      	lsls	r2, r3, #5
20009b60:	68fb      	ldr	r3, [r7, #12]
20009b62:	4413      	add	r3, r2
20009b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009b68:	681b      	ldr	r3, [r3, #0]
20009b6a:	68ba      	ldr	r2, [r7, #8]
20009b6c:	0151      	lsls	r1, r2, #5
20009b6e:	68fa      	ldr	r2, [r7, #12]
20009b70:	440a      	add	r2, r1
20009b72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009b76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20009b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
20009b7c:	68fb      	ldr	r3, [r7, #12]
20009b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009b82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20009b84:	683b      	ldr	r3, [r7, #0]
20009b86:	781b      	ldrb	r3, [r3, #0]
20009b88:	f003 030f 	and.w	r3, r3, #15
20009b8c:	2101      	movs	r1, #1
20009b8e:	fa01 f303 	lsl.w	r3, r1, r3
20009b92:	b29b      	uxth	r3, r3
20009b94:	43db      	mvns	r3, r3
20009b96:	68f9      	ldr	r1, [r7, #12]
20009b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009b9c:	4013      	ands	r3, r2
20009b9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
20009ba0:	68fb      	ldr	r3, [r7, #12]
20009ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009ba6:	69da      	ldr	r2, [r3, #28]
20009ba8:	683b      	ldr	r3, [r7, #0]
20009baa:	781b      	ldrb	r3, [r3, #0]
20009bac:	f003 030f 	and.w	r3, r3, #15
20009bb0:	2101      	movs	r1, #1
20009bb2:	fa01 f303 	lsl.w	r3, r1, r3
20009bb6:	b29b      	uxth	r3, r3
20009bb8:	43db      	mvns	r3, r3
20009bba:	68f9      	ldr	r1, [r7, #12]
20009bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009bc0:	4013      	ands	r3, r2
20009bc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
20009bc4:	68bb      	ldr	r3, [r7, #8]
20009bc6:	015a      	lsls	r2, r3, #5
20009bc8:	68fb      	ldr	r3, [r7, #12]
20009bca:	4413      	add	r3, r2
20009bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009bd0:	681a      	ldr	r2, [r3, #0]
20009bd2:	68bb      	ldr	r3, [r7, #8]
20009bd4:	0159      	lsls	r1, r3, #5
20009bd6:	68fb      	ldr	r3, [r7, #12]
20009bd8:	440b      	add	r3, r1
20009bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009bde:	4619      	mov	r1, r3
20009be0:	4b35      	ldr	r3, [pc, #212]	@ (20009cb8 <USB_DeactivateEndpoint+0x1b0>)
20009be2:	4013      	ands	r3, r2
20009be4:	600b      	str	r3, [r1, #0]
20009be6:	e060      	b.n	20009caa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20009be8:	68bb      	ldr	r3, [r7, #8]
20009bea:	015a      	lsls	r2, r3, #5
20009bec:	68fb      	ldr	r3, [r7, #12]
20009bee:	4413      	add	r3, r2
20009bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009bf4:	681b      	ldr	r3, [r3, #0]
20009bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20009bfe:	d11f      	bne.n	20009c40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20009c00:	68bb      	ldr	r3, [r7, #8]
20009c02:	015a      	lsls	r2, r3, #5
20009c04:	68fb      	ldr	r3, [r7, #12]
20009c06:	4413      	add	r3, r2
20009c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009c0c:	681b      	ldr	r3, [r3, #0]
20009c0e:	68ba      	ldr	r2, [r7, #8]
20009c10:	0151      	lsls	r1, r2, #5
20009c12:	68fa      	ldr	r2, [r7, #12]
20009c14:	440a      	add	r2, r1
20009c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009c1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20009c1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
20009c20:	68bb      	ldr	r3, [r7, #8]
20009c22:	015a      	lsls	r2, r3, #5
20009c24:	68fb      	ldr	r3, [r7, #12]
20009c26:	4413      	add	r3, r2
20009c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009c2c:	681b      	ldr	r3, [r3, #0]
20009c2e:	68ba      	ldr	r2, [r7, #8]
20009c30:	0151      	lsls	r1, r2, #5
20009c32:	68fa      	ldr	r2, [r7, #12]
20009c34:	440a      	add	r2, r1
20009c36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009c3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20009c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20009c40:	68fb      	ldr	r3, [r7, #12]
20009c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20009c48:	683b      	ldr	r3, [r7, #0]
20009c4a:	781b      	ldrb	r3, [r3, #0]
20009c4c:	f003 030f 	and.w	r3, r3, #15
20009c50:	2101      	movs	r1, #1
20009c52:	fa01 f303 	lsl.w	r3, r1, r3
20009c56:	041b      	lsls	r3, r3, #16
20009c58:	43db      	mvns	r3, r3
20009c5a:	68f9      	ldr	r1, [r7, #12]
20009c5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009c60:	4013      	ands	r3, r2
20009c62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20009c64:	68fb      	ldr	r3, [r7, #12]
20009c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009c6a:	69da      	ldr	r2, [r3, #28]
20009c6c:	683b      	ldr	r3, [r7, #0]
20009c6e:	781b      	ldrb	r3, [r3, #0]
20009c70:	f003 030f 	and.w	r3, r3, #15
20009c74:	2101      	movs	r1, #1
20009c76:	fa01 f303 	lsl.w	r3, r1, r3
20009c7a:	041b      	lsls	r3, r3, #16
20009c7c:	43db      	mvns	r3, r3
20009c7e:	68f9      	ldr	r1, [r7, #12]
20009c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009c84:	4013      	ands	r3, r2
20009c86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
20009c88:	68bb      	ldr	r3, [r7, #8]
20009c8a:	015a      	lsls	r2, r3, #5
20009c8c:	68fb      	ldr	r3, [r7, #12]
20009c8e:	4413      	add	r3, r2
20009c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009c94:	681a      	ldr	r2, [r3, #0]
20009c96:	68bb      	ldr	r3, [r7, #8]
20009c98:	0159      	lsls	r1, r3, #5
20009c9a:	68fb      	ldr	r3, [r7, #12]
20009c9c:	440b      	add	r3, r1
20009c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009ca2:	4619      	mov	r1, r3
20009ca4:	4b05      	ldr	r3, [pc, #20]	@ (20009cbc <USB_DeactivateEndpoint+0x1b4>)
20009ca6:	4013      	ands	r3, r2
20009ca8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
20009caa:	2300      	movs	r3, #0
}
20009cac:	4618      	mov	r0, r3
20009cae:	3714      	adds	r7, #20
20009cb0:	46bd      	mov	sp, r7
20009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
20009cb6:	4770      	bx	lr
20009cb8:	ec337800 	.word	0xec337800
20009cbc:	eff37800 	.word	0xeff37800

20009cc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
20009cc0:	b580      	push	{r7, lr}
20009cc2:	b08a      	sub	sp, #40	@ 0x28
20009cc4:	af02      	add	r7, sp, #8
20009cc6:	60f8      	str	r0, [r7, #12]
20009cc8:	60b9      	str	r1, [r7, #8]
20009cca:	4613      	mov	r3, r2
20009ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009cce:	68fb      	ldr	r3, [r7, #12]
20009cd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
20009cd2:	68bb      	ldr	r3, [r7, #8]
20009cd4:	781b      	ldrb	r3, [r3, #0]
20009cd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
20009cd8:	68bb      	ldr	r3, [r7, #8]
20009cda:	785b      	ldrb	r3, [r3, #1]
20009cdc:	2b01      	cmp	r3, #1
20009cde:	f040 8185 	bne.w	20009fec <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
20009ce2:	68bb      	ldr	r3, [r7, #8]
20009ce4:	691b      	ldr	r3, [r3, #16]
20009ce6:	2b00      	cmp	r3, #0
20009ce8:	d132      	bne.n	20009d50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
20009cea:	69bb      	ldr	r3, [r7, #24]
20009cec:	015a      	lsls	r2, r3, #5
20009cee:	69fb      	ldr	r3, [r7, #28]
20009cf0:	4413      	add	r3, r2
20009cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009cf6:	691a      	ldr	r2, [r3, #16]
20009cf8:	69bb      	ldr	r3, [r7, #24]
20009cfa:	0159      	lsls	r1, r3, #5
20009cfc:	69fb      	ldr	r3, [r7, #28]
20009cfe:	440b      	add	r3, r1
20009d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d04:	4619      	mov	r1, r3
20009d06:	4ba7      	ldr	r3, [pc, #668]	@ (20009fa4 <USB_EPStartXfer+0x2e4>)
20009d08:	4013      	ands	r3, r2
20009d0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
20009d0c:	69bb      	ldr	r3, [r7, #24]
20009d0e:	015a      	lsls	r2, r3, #5
20009d10:	69fb      	ldr	r3, [r7, #28]
20009d12:	4413      	add	r3, r2
20009d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d18:	691b      	ldr	r3, [r3, #16]
20009d1a:	69ba      	ldr	r2, [r7, #24]
20009d1c:	0151      	lsls	r1, r2, #5
20009d1e:	69fa      	ldr	r2, [r7, #28]
20009d20:	440a      	add	r2, r1
20009d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009d26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20009d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20009d2c:	69bb      	ldr	r3, [r7, #24]
20009d2e:	015a      	lsls	r2, r3, #5
20009d30:	69fb      	ldr	r3, [r7, #28]
20009d32:	4413      	add	r3, r2
20009d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d38:	691a      	ldr	r2, [r3, #16]
20009d3a:	69bb      	ldr	r3, [r7, #24]
20009d3c:	0159      	lsls	r1, r3, #5
20009d3e:	69fb      	ldr	r3, [r7, #28]
20009d40:	440b      	add	r3, r1
20009d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d46:	4619      	mov	r1, r3
20009d48:	4b97      	ldr	r3, [pc, #604]	@ (20009fa8 <USB_EPStartXfer+0x2e8>)
20009d4a:	4013      	ands	r3, r2
20009d4c:	610b      	str	r3, [r1, #16]
20009d4e:	e097      	b.n	20009e80 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20009d50:	69bb      	ldr	r3, [r7, #24]
20009d52:	015a      	lsls	r2, r3, #5
20009d54:	69fb      	ldr	r3, [r7, #28]
20009d56:	4413      	add	r3, r2
20009d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d5c:	691a      	ldr	r2, [r3, #16]
20009d5e:	69bb      	ldr	r3, [r7, #24]
20009d60:	0159      	lsls	r1, r3, #5
20009d62:	69fb      	ldr	r3, [r7, #28]
20009d64:	440b      	add	r3, r1
20009d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d6a:	4619      	mov	r1, r3
20009d6c:	4b8e      	ldr	r3, [pc, #568]	@ (20009fa8 <USB_EPStartXfer+0x2e8>)
20009d6e:	4013      	ands	r3, r2
20009d70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
20009d72:	69bb      	ldr	r3, [r7, #24]
20009d74:	015a      	lsls	r2, r3, #5
20009d76:	69fb      	ldr	r3, [r7, #28]
20009d78:	4413      	add	r3, r2
20009d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d7e:	691a      	ldr	r2, [r3, #16]
20009d80:	69bb      	ldr	r3, [r7, #24]
20009d82:	0159      	lsls	r1, r3, #5
20009d84:	69fb      	ldr	r3, [r7, #28]
20009d86:	440b      	add	r3, r1
20009d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009d8c:	4619      	mov	r1, r3
20009d8e:	4b85      	ldr	r3, [pc, #532]	@ (20009fa4 <USB_EPStartXfer+0x2e4>)
20009d90:	4013      	ands	r3, r2
20009d92:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
20009d94:	69bb      	ldr	r3, [r7, #24]
20009d96:	2b00      	cmp	r3, #0
20009d98:	d11a      	bne.n	20009dd0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
20009d9a:	68bb      	ldr	r3, [r7, #8]
20009d9c:	691a      	ldr	r2, [r3, #16]
20009d9e:	68bb      	ldr	r3, [r7, #8]
20009da0:	689b      	ldr	r3, [r3, #8]
20009da2:	429a      	cmp	r2, r3
20009da4:	d903      	bls.n	20009dae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
20009da6:	68bb      	ldr	r3, [r7, #8]
20009da8:	689a      	ldr	r2, [r3, #8]
20009daa:	68bb      	ldr	r3, [r7, #8]
20009dac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
20009dae:	69bb      	ldr	r3, [r7, #24]
20009db0:	015a      	lsls	r2, r3, #5
20009db2:	69fb      	ldr	r3, [r7, #28]
20009db4:	4413      	add	r3, r2
20009db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009dba:	691b      	ldr	r3, [r3, #16]
20009dbc:	69ba      	ldr	r2, [r7, #24]
20009dbe:	0151      	lsls	r1, r2, #5
20009dc0:	69fa      	ldr	r2, [r7, #28]
20009dc2:	440a      	add	r2, r1
20009dc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009dc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20009dcc:	6113      	str	r3, [r2, #16]
20009dce:	e044      	b.n	20009e5a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
20009dd0:	68bb      	ldr	r3, [r7, #8]
20009dd2:	691a      	ldr	r2, [r3, #16]
20009dd4:	68bb      	ldr	r3, [r7, #8]
20009dd6:	689b      	ldr	r3, [r3, #8]
20009dd8:	4413      	add	r3, r2
20009dda:	1e5a      	subs	r2, r3, #1
20009ddc:	68bb      	ldr	r3, [r7, #8]
20009dde:	689b      	ldr	r3, [r3, #8]
20009de0:	fbb2 f3f3 	udiv	r3, r2, r3
20009de4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
20009de6:	69bb      	ldr	r3, [r7, #24]
20009de8:	015a      	lsls	r2, r3, #5
20009dea:	69fb      	ldr	r3, [r7, #28]
20009dec:	4413      	add	r3, r2
20009dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009df2:	691a      	ldr	r2, [r3, #16]
20009df4:	8afb      	ldrh	r3, [r7, #22]
20009df6:	04d9      	lsls	r1, r3, #19
20009df8:	4b6c      	ldr	r3, [pc, #432]	@ (20009fac <USB_EPStartXfer+0x2ec>)
20009dfa:	400b      	ands	r3, r1
20009dfc:	69b9      	ldr	r1, [r7, #24]
20009dfe:	0148      	lsls	r0, r1, #5
20009e00:	69f9      	ldr	r1, [r7, #28]
20009e02:	4401      	add	r1, r0
20009e04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
20009e08:	4313      	orrs	r3, r2
20009e0a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
20009e0c:	68bb      	ldr	r3, [r7, #8]
20009e0e:	791b      	ldrb	r3, [r3, #4]
20009e10:	2b01      	cmp	r3, #1
20009e12:	d122      	bne.n	20009e5a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
20009e14:	69bb      	ldr	r3, [r7, #24]
20009e16:	015a      	lsls	r2, r3, #5
20009e18:	69fb      	ldr	r3, [r7, #28]
20009e1a:	4413      	add	r3, r2
20009e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009e20:	691b      	ldr	r3, [r3, #16]
20009e22:	69ba      	ldr	r2, [r7, #24]
20009e24:	0151      	lsls	r1, r2, #5
20009e26:	69fa      	ldr	r2, [r7, #28]
20009e28:	440a      	add	r2, r1
20009e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009e2e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
20009e32:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
20009e34:	69bb      	ldr	r3, [r7, #24]
20009e36:	015a      	lsls	r2, r3, #5
20009e38:	69fb      	ldr	r3, [r7, #28]
20009e3a:	4413      	add	r3, r2
20009e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009e40:	691a      	ldr	r2, [r3, #16]
20009e42:	8afb      	ldrh	r3, [r7, #22]
20009e44:	075b      	lsls	r3, r3, #29
20009e46:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
20009e4a:	69b9      	ldr	r1, [r7, #24]
20009e4c:	0148      	lsls	r0, r1, #5
20009e4e:	69f9      	ldr	r1, [r7, #28]
20009e50:	4401      	add	r1, r0
20009e52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
20009e56:	4313      	orrs	r3, r2
20009e58:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
20009e5a:	69bb      	ldr	r3, [r7, #24]
20009e5c:	015a      	lsls	r2, r3, #5
20009e5e:	69fb      	ldr	r3, [r7, #28]
20009e60:	4413      	add	r3, r2
20009e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009e66:	691a      	ldr	r2, [r3, #16]
20009e68:	68bb      	ldr	r3, [r7, #8]
20009e6a:	691b      	ldr	r3, [r3, #16]
20009e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
20009e70:	69b9      	ldr	r1, [r7, #24]
20009e72:	0148      	lsls	r0, r1, #5
20009e74:	69f9      	ldr	r1, [r7, #28]
20009e76:	4401      	add	r1, r0
20009e78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
20009e7c:	4313      	orrs	r3, r2
20009e7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
20009e80:	79fb      	ldrb	r3, [r7, #7]
20009e82:	2b01      	cmp	r3, #1
20009e84:	d14b      	bne.n	20009f1e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
20009e86:	68bb      	ldr	r3, [r7, #8]
20009e88:	69db      	ldr	r3, [r3, #28]
20009e8a:	2b00      	cmp	r3, #0
20009e8c:	d009      	beq.n	20009ea2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
20009e8e:	69bb      	ldr	r3, [r7, #24]
20009e90:	015a      	lsls	r2, r3, #5
20009e92:	69fb      	ldr	r3, [r7, #28]
20009e94:	4413      	add	r3, r2
20009e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009e9a:	461a      	mov	r2, r3
20009e9c:	68bb      	ldr	r3, [r7, #8]
20009e9e:	69db      	ldr	r3, [r3, #28]
20009ea0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
20009ea2:	68bb      	ldr	r3, [r7, #8]
20009ea4:	791b      	ldrb	r3, [r3, #4]
20009ea6:	2b01      	cmp	r3, #1
20009ea8:	d128      	bne.n	20009efc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
20009eaa:	69fb      	ldr	r3, [r7, #28]
20009eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009eb0:	689b      	ldr	r3, [r3, #8]
20009eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20009eb6:	2b00      	cmp	r3, #0
20009eb8:	d110      	bne.n	20009edc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
20009eba:	69bb      	ldr	r3, [r7, #24]
20009ebc:	015a      	lsls	r2, r3, #5
20009ebe:	69fb      	ldr	r3, [r7, #28]
20009ec0:	4413      	add	r3, r2
20009ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009ec6:	681b      	ldr	r3, [r3, #0]
20009ec8:	69ba      	ldr	r2, [r7, #24]
20009eca:	0151      	lsls	r1, r2, #5
20009ecc:	69fa      	ldr	r2, [r7, #28]
20009ece:	440a      	add	r2, r1
20009ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20009ed8:	6013      	str	r3, [r2, #0]
20009eda:	e00f      	b.n	20009efc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
20009edc:	69bb      	ldr	r3, [r7, #24]
20009ede:	015a      	lsls	r2, r3, #5
20009ee0:	69fb      	ldr	r3, [r7, #28]
20009ee2:	4413      	add	r3, r2
20009ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009ee8:	681b      	ldr	r3, [r3, #0]
20009eea:	69ba      	ldr	r2, [r7, #24]
20009eec:	0151      	lsls	r1, r2, #5
20009eee:	69fa      	ldr	r2, [r7, #28]
20009ef0:	440a      	add	r2, r1
20009ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20009efa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20009efc:	69bb      	ldr	r3, [r7, #24]
20009efe:	015a      	lsls	r2, r3, #5
20009f00:	69fb      	ldr	r3, [r7, #28]
20009f02:	4413      	add	r3, r2
20009f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f08:	681b      	ldr	r3, [r3, #0]
20009f0a:	69ba      	ldr	r2, [r7, #24]
20009f0c:	0151      	lsls	r1, r2, #5
20009f0e:	69fa      	ldr	r2, [r7, #28]
20009f10:	440a      	add	r2, r1
20009f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009f16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20009f1a:	6013      	str	r3, [r2, #0]
20009f1c:	e169      	b.n	2000a1f2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20009f1e:	69bb      	ldr	r3, [r7, #24]
20009f20:	015a      	lsls	r2, r3, #5
20009f22:	69fb      	ldr	r3, [r7, #28]
20009f24:	4413      	add	r3, r2
20009f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f2a:	681b      	ldr	r3, [r3, #0]
20009f2c:	69ba      	ldr	r2, [r7, #24]
20009f2e:	0151      	lsls	r1, r2, #5
20009f30:	69fa      	ldr	r2, [r7, #28]
20009f32:	440a      	add	r2, r1
20009f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009f38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20009f3c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
20009f3e:	68bb      	ldr	r3, [r7, #8]
20009f40:	791b      	ldrb	r3, [r3, #4]
20009f42:	2b01      	cmp	r3, #1
20009f44:	d015      	beq.n	20009f72 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
20009f46:	68bb      	ldr	r3, [r7, #8]
20009f48:	691b      	ldr	r3, [r3, #16]
20009f4a:	2b00      	cmp	r3, #0
20009f4c:	f000 8151 	beq.w	2000a1f2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
20009f50:	69fb      	ldr	r3, [r7, #28]
20009f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20009f58:	68bb      	ldr	r3, [r7, #8]
20009f5a:	781b      	ldrb	r3, [r3, #0]
20009f5c:	f003 030f 	and.w	r3, r3, #15
20009f60:	2101      	movs	r1, #1
20009f62:	fa01 f303 	lsl.w	r3, r1, r3
20009f66:	69f9      	ldr	r1, [r7, #28]
20009f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009f6c:	4313      	orrs	r3, r2
20009f6e:	634b      	str	r3, [r1, #52]	@ 0x34
20009f70:	e13f      	b.n	2000a1f2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
20009f72:	69fb      	ldr	r3, [r7, #28]
20009f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009f78:	689b      	ldr	r3, [r3, #8]
20009f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20009f7e:	2b00      	cmp	r3, #0
20009f80:	d116      	bne.n	20009fb0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
20009f82:	69bb      	ldr	r3, [r7, #24]
20009f84:	015a      	lsls	r2, r3, #5
20009f86:	69fb      	ldr	r3, [r7, #28]
20009f88:	4413      	add	r3, r2
20009f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009f8e:	681b      	ldr	r3, [r3, #0]
20009f90:	69ba      	ldr	r2, [r7, #24]
20009f92:	0151      	lsls	r1, r2, #5
20009f94:	69fa      	ldr	r2, [r7, #28]
20009f96:	440a      	add	r2, r1
20009f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009f9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20009fa0:	6013      	str	r3, [r2, #0]
20009fa2:	e015      	b.n	20009fd0 <USB_EPStartXfer+0x310>
20009fa4:	e007ffff 	.word	0xe007ffff
20009fa8:	fff80000 	.word	0xfff80000
20009fac:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
20009fb0:	69bb      	ldr	r3, [r7, #24]
20009fb2:	015a      	lsls	r2, r3, #5
20009fb4:	69fb      	ldr	r3, [r7, #28]
20009fb6:	4413      	add	r3, r2
20009fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009fbc:	681b      	ldr	r3, [r3, #0]
20009fbe:	69ba      	ldr	r2, [r7, #24]
20009fc0:	0151      	lsls	r1, r2, #5
20009fc2:	69fa      	ldr	r2, [r7, #28]
20009fc4:	440a      	add	r2, r1
20009fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20009fce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
20009fd0:	68bb      	ldr	r3, [r7, #8]
20009fd2:	68d9      	ldr	r1, [r3, #12]
20009fd4:	68bb      	ldr	r3, [r7, #8]
20009fd6:	781a      	ldrb	r2, [r3, #0]
20009fd8:	68bb      	ldr	r3, [r7, #8]
20009fda:	691b      	ldr	r3, [r3, #16]
20009fdc:	b298      	uxth	r0, r3
20009fde:	79fb      	ldrb	r3, [r7, #7]
20009fe0:	9300      	str	r3, [sp, #0]
20009fe2:	4603      	mov	r3, r0
20009fe4:	68f8      	ldr	r0, [r7, #12]
20009fe6:	f000 f9b9 	bl	2000a35c <USB_WritePacket>
20009fea:	e102      	b.n	2000a1f2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
20009fec:	69bb      	ldr	r3, [r7, #24]
20009fee:	015a      	lsls	r2, r3, #5
20009ff0:	69fb      	ldr	r3, [r7, #28]
20009ff2:	4413      	add	r3, r2
20009ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009ff8:	691a      	ldr	r2, [r3, #16]
20009ffa:	69bb      	ldr	r3, [r7, #24]
20009ffc:	0159      	lsls	r1, r3, #5
20009ffe:	69fb      	ldr	r3, [r7, #28]
2000a000:	440b      	add	r3, r1
2000a002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a006:	4619      	mov	r1, r3
2000a008:	4b7c      	ldr	r3, [pc, #496]	@ (2000a1fc <USB_EPStartXfer+0x53c>)
2000a00a:	4013      	ands	r3, r2
2000a00c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
2000a00e:	69bb      	ldr	r3, [r7, #24]
2000a010:	015a      	lsls	r2, r3, #5
2000a012:	69fb      	ldr	r3, [r7, #28]
2000a014:	4413      	add	r3, r2
2000a016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a01a:	691a      	ldr	r2, [r3, #16]
2000a01c:	69bb      	ldr	r3, [r7, #24]
2000a01e:	0159      	lsls	r1, r3, #5
2000a020:	69fb      	ldr	r3, [r7, #28]
2000a022:	440b      	add	r3, r1
2000a024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a028:	4619      	mov	r1, r3
2000a02a:	4b75      	ldr	r3, [pc, #468]	@ (2000a200 <USB_EPStartXfer+0x540>)
2000a02c:	4013      	ands	r3, r2
2000a02e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
2000a030:	69bb      	ldr	r3, [r7, #24]
2000a032:	2b00      	cmp	r3, #0
2000a034:	d12f      	bne.n	2000a096 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
2000a036:	68bb      	ldr	r3, [r7, #8]
2000a038:	691b      	ldr	r3, [r3, #16]
2000a03a:	2b00      	cmp	r3, #0
2000a03c:	d003      	beq.n	2000a046 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
2000a03e:	68bb      	ldr	r3, [r7, #8]
2000a040:	689a      	ldr	r2, [r3, #8]
2000a042:	68bb      	ldr	r3, [r7, #8]
2000a044:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
2000a046:	68bb      	ldr	r3, [r7, #8]
2000a048:	689a      	ldr	r2, [r3, #8]
2000a04a:	68bb      	ldr	r3, [r7, #8]
2000a04c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
2000a04e:	69bb      	ldr	r3, [r7, #24]
2000a050:	015a      	lsls	r2, r3, #5
2000a052:	69fb      	ldr	r3, [r7, #28]
2000a054:	4413      	add	r3, r2
2000a056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a05a:	691a      	ldr	r2, [r3, #16]
2000a05c:	68bb      	ldr	r3, [r7, #8]
2000a05e:	6a1b      	ldr	r3, [r3, #32]
2000a060:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000a064:	69b9      	ldr	r1, [r7, #24]
2000a066:	0148      	lsls	r0, r1, #5
2000a068:	69f9      	ldr	r1, [r7, #28]
2000a06a:	4401      	add	r1, r0
2000a06c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a070:	4313      	orrs	r3, r2
2000a072:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000a074:	69bb      	ldr	r3, [r7, #24]
2000a076:	015a      	lsls	r2, r3, #5
2000a078:	69fb      	ldr	r3, [r7, #28]
2000a07a:	4413      	add	r3, r2
2000a07c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a080:	691b      	ldr	r3, [r3, #16]
2000a082:	69ba      	ldr	r2, [r7, #24]
2000a084:	0151      	lsls	r1, r2, #5
2000a086:	69fa      	ldr	r2, [r7, #28]
2000a088:	440a      	add	r2, r1
2000a08a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a08e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000a092:	6113      	str	r3, [r2, #16]
2000a094:	e05f      	b.n	2000a156 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
2000a096:	68bb      	ldr	r3, [r7, #8]
2000a098:	691b      	ldr	r3, [r3, #16]
2000a09a:	2b00      	cmp	r3, #0
2000a09c:	d123      	bne.n	2000a0e6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
2000a09e:	69bb      	ldr	r3, [r7, #24]
2000a0a0:	015a      	lsls	r2, r3, #5
2000a0a2:	69fb      	ldr	r3, [r7, #28]
2000a0a4:	4413      	add	r3, r2
2000a0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a0aa:	691a      	ldr	r2, [r3, #16]
2000a0ac:	68bb      	ldr	r3, [r7, #8]
2000a0ae:	689b      	ldr	r3, [r3, #8]
2000a0b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000a0b4:	69b9      	ldr	r1, [r7, #24]
2000a0b6:	0148      	lsls	r0, r1, #5
2000a0b8:	69f9      	ldr	r1, [r7, #28]
2000a0ba:	4401      	add	r1, r0
2000a0bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a0c0:	4313      	orrs	r3, r2
2000a0c2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000a0c4:	69bb      	ldr	r3, [r7, #24]
2000a0c6:	015a      	lsls	r2, r3, #5
2000a0c8:	69fb      	ldr	r3, [r7, #28]
2000a0ca:	4413      	add	r3, r2
2000a0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a0d0:	691b      	ldr	r3, [r3, #16]
2000a0d2:	69ba      	ldr	r2, [r7, #24]
2000a0d4:	0151      	lsls	r1, r2, #5
2000a0d6:	69fa      	ldr	r2, [r7, #28]
2000a0d8:	440a      	add	r2, r1
2000a0da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a0de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000a0e2:	6113      	str	r3, [r2, #16]
2000a0e4:	e037      	b.n	2000a156 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
2000a0e6:	68bb      	ldr	r3, [r7, #8]
2000a0e8:	691a      	ldr	r2, [r3, #16]
2000a0ea:	68bb      	ldr	r3, [r7, #8]
2000a0ec:	689b      	ldr	r3, [r3, #8]
2000a0ee:	4413      	add	r3, r2
2000a0f0:	1e5a      	subs	r2, r3, #1
2000a0f2:	68bb      	ldr	r3, [r7, #8]
2000a0f4:	689b      	ldr	r3, [r3, #8]
2000a0f6:	fbb2 f3f3 	udiv	r3, r2, r3
2000a0fa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
2000a0fc:	68bb      	ldr	r3, [r7, #8]
2000a0fe:	689b      	ldr	r3, [r3, #8]
2000a100:	8afa      	ldrh	r2, [r7, #22]
2000a102:	fb03 f202 	mul.w	r2, r3, r2
2000a106:	68bb      	ldr	r3, [r7, #8]
2000a108:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
2000a10a:	69bb      	ldr	r3, [r7, #24]
2000a10c:	015a      	lsls	r2, r3, #5
2000a10e:	69fb      	ldr	r3, [r7, #28]
2000a110:	4413      	add	r3, r2
2000a112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a116:	691a      	ldr	r2, [r3, #16]
2000a118:	8afb      	ldrh	r3, [r7, #22]
2000a11a:	04d9      	lsls	r1, r3, #19
2000a11c:	4b39      	ldr	r3, [pc, #228]	@ (2000a204 <USB_EPStartXfer+0x544>)
2000a11e:	400b      	ands	r3, r1
2000a120:	69b9      	ldr	r1, [r7, #24]
2000a122:	0148      	lsls	r0, r1, #5
2000a124:	69f9      	ldr	r1, [r7, #28]
2000a126:	4401      	add	r1, r0
2000a128:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a12c:	4313      	orrs	r3, r2
2000a12e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
2000a130:	69bb      	ldr	r3, [r7, #24]
2000a132:	015a      	lsls	r2, r3, #5
2000a134:	69fb      	ldr	r3, [r7, #28]
2000a136:	4413      	add	r3, r2
2000a138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a13c:	691a      	ldr	r2, [r3, #16]
2000a13e:	68bb      	ldr	r3, [r7, #8]
2000a140:	6a1b      	ldr	r3, [r3, #32]
2000a142:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000a146:	69b9      	ldr	r1, [r7, #24]
2000a148:	0148      	lsls	r0, r1, #5
2000a14a:	69f9      	ldr	r1, [r7, #28]
2000a14c:	4401      	add	r1, r0
2000a14e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
2000a152:	4313      	orrs	r3, r2
2000a154:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
2000a156:	79fb      	ldrb	r3, [r7, #7]
2000a158:	2b01      	cmp	r3, #1
2000a15a:	d10d      	bne.n	2000a178 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
2000a15c:	68bb      	ldr	r3, [r7, #8]
2000a15e:	68db      	ldr	r3, [r3, #12]
2000a160:	2b00      	cmp	r3, #0
2000a162:	d009      	beq.n	2000a178 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
2000a164:	68bb      	ldr	r3, [r7, #8]
2000a166:	68d9      	ldr	r1, [r3, #12]
2000a168:	69bb      	ldr	r3, [r7, #24]
2000a16a:	015a      	lsls	r2, r3, #5
2000a16c:	69fb      	ldr	r3, [r7, #28]
2000a16e:	4413      	add	r3, r2
2000a170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a174:	460a      	mov	r2, r1
2000a176:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
2000a178:	68bb      	ldr	r3, [r7, #8]
2000a17a:	791b      	ldrb	r3, [r3, #4]
2000a17c:	2b01      	cmp	r3, #1
2000a17e:	d128      	bne.n	2000a1d2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
2000a180:	69fb      	ldr	r3, [r7, #28]
2000a182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a186:	689b      	ldr	r3, [r3, #8]
2000a188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000a18c:	2b00      	cmp	r3, #0
2000a18e:	d110      	bne.n	2000a1b2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
2000a190:	69bb      	ldr	r3, [r7, #24]
2000a192:	015a      	lsls	r2, r3, #5
2000a194:	69fb      	ldr	r3, [r7, #28]
2000a196:	4413      	add	r3, r2
2000a198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a19c:	681b      	ldr	r3, [r3, #0]
2000a19e:	69ba      	ldr	r2, [r7, #24]
2000a1a0:	0151      	lsls	r1, r2, #5
2000a1a2:	69fa      	ldr	r2, [r7, #28]
2000a1a4:	440a      	add	r2, r1
2000a1a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a1aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
2000a1ae:	6013      	str	r3, [r2, #0]
2000a1b0:	e00f      	b.n	2000a1d2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
2000a1b2:	69bb      	ldr	r3, [r7, #24]
2000a1b4:	015a      	lsls	r2, r3, #5
2000a1b6:	69fb      	ldr	r3, [r7, #28]
2000a1b8:	4413      	add	r3, r2
2000a1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a1be:	681b      	ldr	r3, [r3, #0]
2000a1c0:	69ba      	ldr	r2, [r7, #24]
2000a1c2:	0151      	lsls	r1, r2, #5
2000a1c4:	69fa      	ldr	r2, [r7, #28]
2000a1c6:	440a      	add	r2, r1
2000a1c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a1cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a1d0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
2000a1d2:	69bb      	ldr	r3, [r7, #24]
2000a1d4:	015a      	lsls	r2, r3, #5
2000a1d6:	69fb      	ldr	r3, [r7, #28]
2000a1d8:	4413      	add	r3, r2
2000a1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a1de:	681b      	ldr	r3, [r3, #0]
2000a1e0:	69ba      	ldr	r2, [r7, #24]
2000a1e2:	0151      	lsls	r1, r2, #5
2000a1e4:	69fa      	ldr	r2, [r7, #28]
2000a1e6:	440a      	add	r2, r1
2000a1e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a1ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
2000a1f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
2000a1f2:	2300      	movs	r3, #0
}
2000a1f4:	4618      	mov	r0, r3
2000a1f6:	3720      	adds	r7, #32
2000a1f8:	46bd      	mov	sp, r7
2000a1fa:	bd80      	pop	{r7, pc}
2000a1fc:	fff80000 	.word	0xfff80000
2000a200:	e007ffff 	.word	0xe007ffff
2000a204:	1ff80000 	.word	0x1ff80000

2000a208 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
2000a208:	b480      	push	{r7}
2000a20a:	b087      	sub	sp, #28
2000a20c:	af00      	add	r7, sp, #0
2000a20e:	6078      	str	r0, [r7, #4]
2000a210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
2000a212:	2300      	movs	r3, #0
2000a214:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
2000a216:	2300      	movs	r3, #0
2000a218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a21a:	687b      	ldr	r3, [r7, #4]
2000a21c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
2000a21e:	683b      	ldr	r3, [r7, #0]
2000a220:	785b      	ldrb	r3, [r3, #1]
2000a222:	2b01      	cmp	r3, #1
2000a224:	d14a      	bne.n	2000a2bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
2000a226:	683b      	ldr	r3, [r7, #0]
2000a228:	781b      	ldrb	r3, [r3, #0]
2000a22a:	015a      	lsls	r2, r3, #5
2000a22c:	693b      	ldr	r3, [r7, #16]
2000a22e:	4413      	add	r3, r2
2000a230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a234:	681b      	ldr	r3, [r3, #0]
2000a236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a23a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a23e:	f040 8086 	bne.w	2000a34e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
2000a242:	683b      	ldr	r3, [r7, #0]
2000a244:	781b      	ldrb	r3, [r3, #0]
2000a246:	015a      	lsls	r2, r3, #5
2000a248:	693b      	ldr	r3, [r7, #16]
2000a24a:	4413      	add	r3, r2
2000a24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a250:	681b      	ldr	r3, [r3, #0]
2000a252:	683a      	ldr	r2, [r7, #0]
2000a254:	7812      	ldrb	r2, [r2, #0]
2000a256:	0151      	lsls	r1, r2, #5
2000a258:	693a      	ldr	r2, [r7, #16]
2000a25a:	440a      	add	r2, r1
2000a25c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a260:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000a264:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
2000a266:	683b      	ldr	r3, [r7, #0]
2000a268:	781b      	ldrb	r3, [r3, #0]
2000a26a:	015a      	lsls	r2, r3, #5
2000a26c:	693b      	ldr	r3, [r7, #16]
2000a26e:	4413      	add	r3, r2
2000a270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a274:	681b      	ldr	r3, [r3, #0]
2000a276:	683a      	ldr	r2, [r7, #0]
2000a278:	7812      	ldrb	r2, [r2, #0]
2000a27a:	0151      	lsls	r1, r2, #5
2000a27c:	693a      	ldr	r2, [r7, #16]
2000a27e:	440a      	add	r2, r1
2000a280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a284:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
2000a288:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
2000a28a:	68fb      	ldr	r3, [r7, #12]
2000a28c:	3301      	adds	r3, #1
2000a28e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
2000a290:	68fb      	ldr	r3, [r7, #12]
2000a292:	f242 7210 	movw	r2, #10000	@ 0x2710
2000a296:	4293      	cmp	r3, r2
2000a298:	d902      	bls.n	2000a2a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
2000a29a:	2301      	movs	r3, #1
2000a29c:	75fb      	strb	r3, [r7, #23]
          break;
2000a29e:	e056      	b.n	2000a34e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
2000a2a0:	683b      	ldr	r3, [r7, #0]
2000a2a2:	781b      	ldrb	r3, [r3, #0]
2000a2a4:	015a      	lsls	r2, r3, #5
2000a2a6:	693b      	ldr	r3, [r7, #16]
2000a2a8:	4413      	add	r3, r2
2000a2aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a2ae:	681b      	ldr	r3, [r3, #0]
2000a2b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a2b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a2b8:	d0e7      	beq.n	2000a28a <USB_EPStopXfer+0x82>
2000a2ba:	e048      	b.n	2000a34e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
2000a2bc:	683b      	ldr	r3, [r7, #0]
2000a2be:	781b      	ldrb	r3, [r3, #0]
2000a2c0:	015a      	lsls	r2, r3, #5
2000a2c2:	693b      	ldr	r3, [r7, #16]
2000a2c4:	4413      	add	r3, r2
2000a2c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a2ca:	681b      	ldr	r3, [r3, #0]
2000a2cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a2d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a2d4:	d13b      	bne.n	2000a34e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
2000a2d6:	683b      	ldr	r3, [r7, #0]
2000a2d8:	781b      	ldrb	r3, [r3, #0]
2000a2da:	015a      	lsls	r2, r3, #5
2000a2dc:	693b      	ldr	r3, [r7, #16]
2000a2de:	4413      	add	r3, r2
2000a2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a2e4:	681b      	ldr	r3, [r3, #0]
2000a2e6:	683a      	ldr	r2, [r7, #0]
2000a2e8:	7812      	ldrb	r2, [r2, #0]
2000a2ea:	0151      	lsls	r1, r2, #5
2000a2ec:	693a      	ldr	r2, [r7, #16]
2000a2ee:	440a      	add	r2, r1
2000a2f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a2f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000a2f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
2000a2fa:	683b      	ldr	r3, [r7, #0]
2000a2fc:	781b      	ldrb	r3, [r3, #0]
2000a2fe:	015a      	lsls	r2, r3, #5
2000a300:	693b      	ldr	r3, [r7, #16]
2000a302:	4413      	add	r3, r2
2000a304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a308:	681b      	ldr	r3, [r3, #0]
2000a30a:	683a      	ldr	r2, [r7, #0]
2000a30c:	7812      	ldrb	r2, [r2, #0]
2000a30e:	0151      	lsls	r1, r2, #5
2000a310:	693a      	ldr	r2, [r7, #16]
2000a312:	440a      	add	r2, r1
2000a314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
2000a31c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
2000a31e:	68fb      	ldr	r3, [r7, #12]
2000a320:	3301      	adds	r3, #1
2000a322:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
2000a324:	68fb      	ldr	r3, [r7, #12]
2000a326:	f242 7210 	movw	r2, #10000	@ 0x2710
2000a32a:	4293      	cmp	r3, r2
2000a32c:	d902      	bls.n	2000a334 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
2000a32e:	2301      	movs	r3, #1
2000a330:	75fb      	strb	r3, [r7, #23]
          break;
2000a332:	e00c      	b.n	2000a34e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
2000a334:	683b      	ldr	r3, [r7, #0]
2000a336:	781b      	ldrb	r3, [r3, #0]
2000a338:	015a      	lsls	r2, r3, #5
2000a33a:	693b      	ldr	r3, [r7, #16]
2000a33c:	4413      	add	r3, r2
2000a33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a342:	681b      	ldr	r3, [r3, #0]
2000a344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a34c:	d0e7      	beq.n	2000a31e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
2000a34e:	7dfb      	ldrb	r3, [r7, #23]
}
2000a350:	4618      	mov	r0, r3
2000a352:	371c      	adds	r7, #28
2000a354:	46bd      	mov	sp, r7
2000a356:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a35a:	4770      	bx	lr

2000a35c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
2000a35c:	b480      	push	{r7}
2000a35e:	b089      	sub	sp, #36	@ 0x24
2000a360:	af00      	add	r7, sp, #0
2000a362:	60f8      	str	r0, [r7, #12]
2000a364:	60b9      	str	r1, [r7, #8]
2000a366:	4611      	mov	r1, r2
2000a368:	461a      	mov	r2, r3
2000a36a:	460b      	mov	r3, r1
2000a36c:	71fb      	strb	r3, [r7, #7]
2000a36e:	4613      	mov	r3, r2
2000a370:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a372:	68fb      	ldr	r3, [r7, #12]
2000a374:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
2000a376:	68bb      	ldr	r3, [r7, #8]
2000a378:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
2000a37a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
2000a37e:	2b00      	cmp	r3, #0
2000a380:	d123      	bne.n	2000a3ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
2000a382:	88bb      	ldrh	r3, [r7, #4]
2000a384:	3303      	adds	r3, #3
2000a386:	089b      	lsrs	r3, r3, #2
2000a388:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
2000a38a:	2300      	movs	r3, #0
2000a38c:	61bb      	str	r3, [r7, #24]
2000a38e:	e018      	b.n	2000a3c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
2000a390:	79fb      	ldrb	r3, [r7, #7]
2000a392:	031a      	lsls	r2, r3, #12
2000a394:	697b      	ldr	r3, [r7, #20]
2000a396:	4413      	add	r3, r2
2000a398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000a39c:	461a      	mov	r2, r3
2000a39e:	69fb      	ldr	r3, [r7, #28]
2000a3a0:	681b      	ldr	r3, [r3, #0]
2000a3a2:	6013      	str	r3, [r2, #0]
      pSrc++;
2000a3a4:	69fb      	ldr	r3, [r7, #28]
2000a3a6:	3301      	adds	r3, #1
2000a3a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
2000a3aa:	69fb      	ldr	r3, [r7, #28]
2000a3ac:	3301      	adds	r3, #1
2000a3ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
2000a3b0:	69fb      	ldr	r3, [r7, #28]
2000a3b2:	3301      	adds	r3, #1
2000a3b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
2000a3b6:	69fb      	ldr	r3, [r7, #28]
2000a3b8:	3301      	adds	r3, #1
2000a3ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
2000a3bc:	69bb      	ldr	r3, [r7, #24]
2000a3be:	3301      	adds	r3, #1
2000a3c0:	61bb      	str	r3, [r7, #24]
2000a3c2:	69ba      	ldr	r2, [r7, #24]
2000a3c4:	693b      	ldr	r3, [r7, #16]
2000a3c6:	429a      	cmp	r2, r3
2000a3c8:	d3e2      	bcc.n	2000a390 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
2000a3ca:	2300      	movs	r3, #0
}
2000a3cc:	4618      	mov	r0, r3
2000a3ce:	3724      	adds	r7, #36	@ 0x24
2000a3d0:	46bd      	mov	sp, r7
2000a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a3d6:	4770      	bx	lr

2000a3d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
2000a3d8:	b480      	push	{r7}
2000a3da:	b08b      	sub	sp, #44	@ 0x2c
2000a3dc:	af00      	add	r7, sp, #0
2000a3de:	60f8      	str	r0, [r7, #12]
2000a3e0:	60b9      	str	r1, [r7, #8]
2000a3e2:	4613      	mov	r3, r2
2000a3e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a3e6:	68fb      	ldr	r3, [r7, #12]
2000a3e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
2000a3ea:	68bb      	ldr	r3, [r7, #8]
2000a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
2000a3ee:	88fb      	ldrh	r3, [r7, #6]
2000a3f0:	089b      	lsrs	r3, r3, #2
2000a3f2:	b29b      	uxth	r3, r3
2000a3f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
2000a3f6:	88fb      	ldrh	r3, [r7, #6]
2000a3f8:	f003 0303 	and.w	r3, r3, #3
2000a3fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
2000a3fe:	2300      	movs	r3, #0
2000a400:	623b      	str	r3, [r7, #32]
2000a402:	e014      	b.n	2000a42e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
2000a404:	69bb      	ldr	r3, [r7, #24]
2000a406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000a40a:	681a      	ldr	r2, [r3, #0]
2000a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a40e:	601a      	str	r2, [r3, #0]
    pDest++;
2000a410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a412:	3301      	adds	r3, #1
2000a414:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
2000a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a418:	3301      	adds	r3, #1
2000a41a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
2000a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a41e:	3301      	adds	r3, #1
2000a420:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
2000a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a424:	3301      	adds	r3, #1
2000a426:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
2000a428:	6a3b      	ldr	r3, [r7, #32]
2000a42a:	3301      	adds	r3, #1
2000a42c:	623b      	str	r3, [r7, #32]
2000a42e:	6a3a      	ldr	r2, [r7, #32]
2000a430:	697b      	ldr	r3, [r7, #20]
2000a432:	429a      	cmp	r2, r3
2000a434:	d3e6      	bcc.n	2000a404 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
2000a436:	8bfb      	ldrh	r3, [r7, #30]
2000a438:	2b00      	cmp	r3, #0
2000a43a:	d01e      	beq.n	2000a47a <USB_ReadPacket+0xa2>
  {
    i = 0U;
2000a43c:	2300      	movs	r3, #0
2000a43e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
2000a440:	69bb      	ldr	r3, [r7, #24]
2000a442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000a446:	461a      	mov	r2, r3
2000a448:	f107 0310 	add.w	r3, r7, #16
2000a44c:	6812      	ldr	r2, [r2, #0]
2000a44e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
2000a450:	693a      	ldr	r2, [r7, #16]
2000a452:	6a3b      	ldr	r3, [r7, #32]
2000a454:	b2db      	uxtb	r3, r3
2000a456:	00db      	lsls	r3, r3, #3
2000a458:	fa22 f303 	lsr.w	r3, r2, r3
2000a45c:	b2da      	uxtb	r2, r3
2000a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a460:	701a      	strb	r2, [r3, #0]
      i++;
2000a462:	6a3b      	ldr	r3, [r7, #32]
2000a464:	3301      	adds	r3, #1
2000a466:	623b      	str	r3, [r7, #32]
      pDest++;
2000a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000a46a:	3301      	adds	r3, #1
2000a46c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
2000a46e:	8bfb      	ldrh	r3, [r7, #30]
2000a470:	3b01      	subs	r3, #1
2000a472:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
2000a474:	8bfb      	ldrh	r3, [r7, #30]
2000a476:	2b00      	cmp	r3, #0
2000a478:	d1ea      	bne.n	2000a450 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
2000a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
2000a47c:	4618      	mov	r0, r3
2000a47e:	372c      	adds	r7, #44	@ 0x2c
2000a480:	46bd      	mov	sp, r7
2000a482:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a486:	4770      	bx	lr

2000a488 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
2000a488:	b480      	push	{r7}
2000a48a:	b085      	sub	sp, #20
2000a48c:	af00      	add	r7, sp, #0
2000a48e:	6078      	str	r0, [r7, #4]
2000a490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a492:	687b      	ldr	r3, [r7, #4]
2000a494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
2000a496:	683b      	ldr	r3, [r7, #0]
2000a498:	781b      	ldrb	r3, [r3, #0]
2000a49a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
2000a49c:	683b      	ldr	r3, [r7, #0]
2000a49e:	785b      	ldrb	r3, [r3, #1]
2000a4a0:	2b01      	cmp	r3, #1
2000a4a2:	d12c      	bne.n	2000a4fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
2000a4a4:	68bb      	ldr	r3, [r7, #8]
2000a4a6:	015a      	lsls	r2, r3, #5
2000a4a8:	68fb      	ldr	r3, [r7, #12]
2000a4aa:	4413      	add	r3, r2
2000a4ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a4b0:	681b      	ldr	r3, [r3, #0]
2000a4b2:	2b00      	cmp	r3, #0
2000a4b4:	db12      	blt.n	2000a4dc <USB_EPSetStall+0x54>
2000a4b6:	68bb      	ldr	r3, [r7, #8]
2000a4b8:	2b00      	cmp	r3, #0
2000a4ba:	d00f      	beq.n	2000a4dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
2000a4bc:	68bb      	ldr	r3, [r7, #8]
2000a4be:	015a      	lsls	r2, r3, #5
2000a4c0:	68fb      	ldr	r3, [r7, #12]
2000a4c2:	4413      	add	r3, r2
2000a4c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a4c8:	681b      	ldr	r3, [r3, #0]
2000a4ca:	68ba      	ldr	r2, [r7, #8]
2000a4cc:	0151      	lsls	r1, r2, #5
2000a4ce:	68fa      	ldr	r2, [r7, #12]
2000a4d0:	440a      	add	r2, r1
2000a4d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a4d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
2000a4da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
2000a4dc:	68bb      	ldr	r3, [r7, #8]
2000a4de:	015a      	lsls	r2, r3, #5
2000a4e0:	68fb      	ldr	r3, [r7, #12]
2000a4e2:	4413      	add	r3, r2
2000a4e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a4e8:	681b      	ldr	r3, [r3, #0]
2000a4ea:	68ba      	ldr	r2, [r7, #8]
2000a4ec:	0151      	lsls	r1, r2, #5
2000a4ee:	68fa      	ldr	r2, [r7, #12]
2000a4f0:	440a      	add	r2, r1
2000a4f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a4f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2000a4fa:	6013      	str	r3, [r2, #0]
2000a4fc:	e02b      	b.n	2000a556 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
2000a4fe:	68bb      	ldr	r3, [r7, #8]
2000a500:	015a      	lsls	r2, r3, #5
2000a502:	68fb      	ldr	r3, [r7, #12]
2000a504:	4413      	add	r3, r2
2000a506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a50a:	681b      	ldr	r3, [r3, #0]
2000a50c:	2b00      	cmp	r3, #0
2000a50e:	db12      	blt.n	2000a536 <USB_EPSetStall+0xae>
2000a510:	68bb      	ldr	r3, [r7, #8]
2000a512:	2b00      	cmp	r3, #0
2000a514:	d00f      	beq.n	2000a536 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
2000a516:	68bb      	ldr	r3, [r7, #8]
2000a518:	015a      	lsls	r2, r3, #5
2000a51a:	68fb      	ldr	r3, [r7, #12]
2000a51c:	4413      	add	r3, r2
2000a51e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a522:	681b      	ldr	r3, [r3, #0]
2000a524:	68ba      	ldr	r2, [r7, #8]
2000a526:	0151      	lsls	r1, r2, #5
2000a528:	68fa      	ldr	r2, [r7, #12]
2000a52a:	440a      	add	r2, r1
2000a52c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a530:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
2000a534:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
2000a536:	68bb      	ldr	r3, [r7, #8]
2000a538:	015a      	lsls	r2, r3, #5
2000a53a:	68fb      	ldr	r3, [r7, #12]
2000a53c:	4413      	add	r3, r2
2000a53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a542:	681b      	ldr	r3, [r3, #0]
2000a544:	68ba      	ldr	r2, [r7, #8]
2000a546:	0151      	lsls	r1, r2, #5
2000a548:	68fa      	ldr	r2, [r7, #12]
2000a54a:	440a      	add	r2, r1
2000a54c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a550:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2000a554:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
2000a556:	2300      	movs	r3, #0
}
2000a558:	4618      	mov	r0, r3
2000a55a:	3714      	adds	r7, #20
2000a55c:	46bd      	mov	sp, r7
2000a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a562:	4770      	bx	lr

2000a564 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
2000a564:	b480      	push	{r7}
2000a566:	b085      	sub	sp, #20
2000a568:	af00      	add	r7, sp, #0
2000a56a:	6078      	str	r0, [r7, #4]
2000a56c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a56e:	687b      	ldr	r3, [r7, #4]
2000a570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
2000a572:	683b      	ldr	r3, [r7, #0]
2000a574:	781b      	ldrb	r3, [r3, #0]
2000a576:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
2000a578:	683b      	ldr	r3, [r7, #0]
2000a57a:	785b      	ldrb	r3, [r3, #1]
2000a57c:	2b01      	cmp	r3, #1
2000a57e:	d128      	bne.n	2000a5d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
2000a580:	68bb      	ldr	r3, [r7, #8]
2000a582:	015a      	lsls	r2, r3, #5
2000a584:	68fb      	ldr	r3, [r7, #12]
2000a586:	4413      	add	r3, r2
2000a588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a58c:	681b      	ldr	r3, [r3, #0]
2000a58e:	68ba      	ldr	r2, [r7, #8]
2000a590:	0151      	lsls	r1, r2, #5
2000a592:	68fa      	ldr	r2, [r7, #12]
2000a594:	440a      	add	r2, r1
2000a596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a59a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000a59e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
2000a5a0:	683b      	ldr	r3, [r7, #0]
2000a5a2:	791b      	ldrb	r3, [r3, #4]
2000a5a4:	2b03      	cmp	r3, #3
2000a5a6:	d003      	beq.n	2000a5b0 <USB_EPClearStall+0x4c>
2000a5a8:	683b      	ldr	r3, [r7, #0]
2000a5aa:	791b      	ldrb	r3, [r3, #4]
2000a5ac:	2b02      	cmp	r3, #2
2000a5ae:	d138      	bne.n	2000a622 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
2000a5b0:	68bb      	ldr	r3, [r7, #8]
2000a5b2:	015a      	lsls	r2, r3, #5
2000a5b4:	68fb      	ldr	r3, [r7, #12]
2000a5b6:	4413      	add	r3, r2
2000a5b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a5bc:	681b      	ldr	r3, [r3, #0]
2000a5be:	68ba      	ldr	r2, [r7, #8]
2000a5c0:	0151      	lsls	r1, r2, #5
2000a5c2:	68fa      	ldr	r2, [r7, #12]
2000a5c4:	440a      	add	r2, r1
2000a5c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000a5ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a5ce:	6013      	str	r3, [r2, #0]
2000a5d0:	e027      	b.n	2000a622 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
2000a5d2:	68bb      	ldr	r3, [r7, #8]
2000a5d4:	015a      	lsls	r2, r3, #5
2000a5d6:	68fb      	ldr	r3, [r7, #12]
2000a5d8:	4413      	add	r3, r2
2000a5da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a5de:	681b      	ldr	r3, [r3, #0]
2000a5e0:	68ba      	ldr	r2, [r7, #8]
2000a5e2:	0151      	lsls	r1, r2, #5
2000a5e4:	68fa      	ldr	r2, [r7, #12]
2000a5e6:	440a      	add	r2, r1
2000a5e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a5ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000a5f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
2000a5f2:	683b      	ldr	r3, [r7, #0]
2000a5f4:	791b      	ldrb	r3, [r3, #4]
2000a5f6:	2b03      	cmp	r3, #3
2000a5f8:	d003      	beq.n	2000a602 <USB_EPClearStall+0x9e>
2000a5fa:	683b      	ldr	r3, [r7, #0]
2000a5fc:	791b      	ldrb	r3, [r3, #4]
2000a5fe:	2b02      	cmp	r3, #2
2000a600:	d10f      	bne.n	2000a622 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
2000a602:	68bb      	ldr	r3, [r7, #8]
2000a604:	015a      	lsls	r2, r3, #5
2000a606:	68fb      	ldr	r3, [r7, #12]
2000a608:	4413      	add	r3, r2
2000a60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a60e:	681b      	ldr	r3, [r3, #0]
2000a610:	68ba      	ldr	r2, [r7, #8]
2000a612:	0151      	lsls	r1, r2, #5
2000a614:	68fa      	ldr	r2, [r7, #12]
2000a616:	440a      	add	r2, r1
2000a618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a61c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a620:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
2000a622:	2300      	movs	r3, #0
}
2000a624:	4618      	mov	r0, r3
2000a626:	3714      	adds	r7, #20
2000a628:	46bd      	mov	sp, r7
2000a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a62e:	4770      	bx	lr

2000a630 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
2000a630:	b480      	push	{r7}
2000a632:	b085      	sub	sp, #20
2000a634:	af00      	add	r7, sp, #0
2000a636:	6078      	str	r0, [r7, #4]
2000a638:	460b      	mov	r3, r1
2000a63a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a63c:	687b      	ldr	r3, [r7, #4]
2000a63e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
2000a640:	68fb      	ldr	r3, [r7, #12]
2000a642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a646:	681b      	ldr	r3, [r3, #0]
2000a648:	68fa      	ldr	r2, [r7, #12]
2000a64a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000a64e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
2000a652:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
2000a654:	68fb      	ldr	r3, [r7, #12]
2000a656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a65a:	681a      	ldr	r2, [r3, #0]
2000a65c:	78fb      	ldrb	r3, [r7, #3]
2000a65e:	011b      	lsls	r3, r3, #4
2000a660:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
2000a664:	68f9      	ldr	r1, [r7, #12]
2000a666:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000a66a:	4313      	orrs	r3, r2
2000a66c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
2000a66e:	2300      	movs	r3, #0
}
2000a670:	4618      	mov	r0, r3
2000a672:	3714      	adds	r7, #20
2000a674:	46bd      	mov	sp, r7
2000a676:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a67a:	4770      	bx	lr

2000a67c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
2000a67c:	b480      	push	{r7}
2000a67e:	b085      	sub	sp, #20
2000a680:	af00      	add	r7, sp, #0
2000a682:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a684:	687b      	ldr	r3, [r7, #4]
2000a686:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
2000a688:	68fb      	ldr	r3, [r7, #12]
2000a68a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000a68e:	681b      	ldr	r3, [r3, #0]
2000a690:	68fa      	ldr	r2, [r7, #12]
2000a692:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000a696:	f023 0303 	bic.w	r3, r3, #3
2000a69a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
2000a69c:	68fb      	ldr	r3, [r7, #12]
2000a69e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a6a2:	685b      	ldr	r3, [r3, #4]
2000a6a4:	68fa      	ldr	r2, [r7, #12]
2000a6a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000a6aa:	f023 0302 	bic.w	r3, r3, #2
2000a6ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000a6b0:	2300      	movs	r3, #0
}
2000a6b2:	4618      	mov	r0, r3
2000a6b4:	3714      	adds	r7, #20
2000a6b6:	46bd      	mov	sp, r7
2000a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a6bc:	4770      	bx	lr

2000a6be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
2000a6be:	b480      	push	{r7}
2000a6c0:	b085      	sub	sp, #20
2000a6c2:	af00      	add	r7, sp, #0
2000a6c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a6c6:	687b      	ldr	r3, [r7, #4]
2000a6c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
2000a6ca:	68fb      	ldr	r3, [r7, #12]
2000a6cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000a6d0:	681b      	ldr	r3, [r3, #0]
2000a6d2:	68fa      	ldr	r2, [r7, #12]
2000a6d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000a6d8:	f023 0303 	bic.w	r3, r3, #3
2000a6dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
2000a6de:	68fb      	ldr	r3, [r7, #12]
2000a6e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a6e4:	685b      	ldr	r3, [r3, #4]
2000a6e6:	68fa      	ldr	r2, [r7, #12]
2000a6e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000a6ec:	f043 0302 	orr.w	r3, r3, #2
2000a6f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000a6f2:	2300      	movs	r3, #0
}
2000a6f4:	4618      	mov	r0, r3
2000a6f6:	3714      	adds	r7, #20
2000a6f8:	46bd      	mov	sp, r7
2000a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a6fe:	4770      	bx	lr

2000a700 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
2000a700:	b480      	push	{r7}
2000a702:	b085      	sub	sp, #20
2000a704:	af00      	add	r7, sp, #0
2000a706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
2000a708:	687b      	ldr	r3, [r7, #4]
2000a70a:	695b      	ldr	r3, [r3, #20]
2000a70c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
2000a70e:	687b      	ldr	r3, [r7, #4]
2000a710:	699b      	ldr	r3, [r3, #24]
2000a712:	68fa      	ldr	r2, [r7, #12]
2000a714:	4013      	ands	r3, r2
2000a716:	60fb      	str	r3, [r7, #12]

  return tmpreg;
2000a718:	68fb      	ldr	r3, [r7, #12]
}
2000a71a:	4618      	mov	r0, r3
2000a71c:	3714      	adds	r7, #20
2000a71e:	46bd      	mov	sp, r7
2000a720:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a724:	4770      	bx	lr

2000a726 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
2000a726:	b480      	push	{r7}
2000a728:	b085      	sub	sp, #20
2000a72a:	af00      	add	r7, sp, #0
2000a72c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a72e:	687b      	ldr	r3, [r7, #4]
2000a730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
2000a732:	68fb      	ldr	r3, [r7, #12]
2000a734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a738:	699b      	ldr	r3, [r3, #24]
2000a73a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
2000a73c:	68fb      	ldr	r3, [r7, #12]
2000a73e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a742:	69db      	ldr	r3, [r3, #28]
2000a744:	68ba      	ldr	r2, [r7, #8]
2000a746:	4013      	ands	r3, r2
2000a748:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
2000a74a:	68bb      	ldr	r3, [r7, #8]
2000a74c:	0c1b      	lsrs	r3, r3, #16
}
2000a74e:	4618      	mov	r0, r3
2000a750:	3714      	adds	r7, #20
2000a752:	46bd      	mov	sp, r7
2000a754:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a758:	4770      	bx	lr

2000a75a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
2000a75a:	b480      	push	{r7}
2000a75c:	b085      	sub	sp, #20
2000a75e:	af00      	add	r7, sp, #0
2000a760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a762:	687b      	ldr	r3, [r7, #4]
2000a764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
2000a766:	68fb      	ldr	r3, [r7, #12]
2000a768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a76c:	699b      	ldr	r3, [r3, #24]
2000a76e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
2000a770:	68fb      	ldr	r3, [r7, #12]
2000a772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a776:	69db      	ldr	r3, [r3, #28]
2000a778:	68ba      	ldr	r2, [r7, #8]
2000a77a:	4013      	ands	r3, r2
2000a77c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
2000a77e:	68bb      	ldr	r3, [r7, #8]
2000a780:	b29b      	uxth	r3, r3
}
2000a782:	4618      	mov	r0, r3
2000a784:	3714      	adds	r7, #20
2000a786:	46bd      	mov	sp, r7
2000a788:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a78c:	4770      	bx	lr

2000a78e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
2000a78e:	b480      	push	{r7}
2000a790:	b085      	sub	sp, #20
2000a792:	af00      	add	r7, sp, #0
2000a794:	6078      	str	r0, [r7, #4]
2000a796:	460b      	mov	r3, r1
2000a798:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a79a:	687b      	ldr	r3, [r7, #4]
2000a79c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
2000a79e:	78fb      	ldrb	r3, [r7, #3]
2000a7a0:	015a      	lsls	r2, r3, #5
2000a7a2:	68fb      	ldr	r3, [r7, #12]
2000a7a4:	4413      	add	r3, r2
2000a7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a7aa:	689b      	ldr	r3, [r3, #8]
2000a7ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
2000a7ae:	68fb      	ldr	r3, [r7, #12]
2000a7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a7b4:	695b      	ldr	r3, [r3, #20]
2000a7b6:	68ba      	ldr	r2, [r7, #8]
2000a7b8:	4013      	ands	r3, r2
2000a7ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
2000a7bc:	68bb      	ldr	r3, [r7, #8]
}
2000a7be:	4618      	mov	r0, r3
2000a7c0:	3714      	adds	r7, #20
2000a7c2:	46bd      	mov	sp, r7
2000a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a7c8:	4770      	bx	lr

2000a7ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
2000a7ca:	b480      	push	{r7}
2000a7cc:	b087      	sub	sp, #28
2000a7ce:	af00      	add	r7, sp, #0
2000a7d0:	6078      	str	r0, [r7, #4]
2000a7d2:	460b      	mov	r3, r1
2000a7d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a7d6:	687b      	ldr	r3, [r7, #4]
2000a7d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
2000a7da:	697b      	ldr	r3, [r7, #20]
2000a7dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a7e0:	691b      	ldr	r3, [r3, #16]
2000a7e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
2000a7e4:	697b      	ldr	r3, [r7, #20]
2000a7e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000a7ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
2000a7ee:	78fb      	ldrb	r3, [r7, #3]
2000a7f0:	f003 030f 	and.w	r3, r3, #15
2000a7f4:	68fa      	ldr	r2, [r7, #12]
2000a7f6:	fa22 f303 	lsr.w	r3, r2, r3
2000a7fa:	01db      	lsls	r3, r3, #7
2000a7fc:	b2db      	uxtb	r3, r3
2000a7fe:	693a      	ldr	r2, [r7, #16]
2000a800:	4313      	orrs	r3, r2
2000a802:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
2000a804:	78fb      	ldrb	r3, [r7, #3]
2000a806:	015a      	lsls	r2, r3, #5
2000a808:	697b      	ldr	r3, [r7, #20]
2000a80a:	4413      	add	r3, r2
2000a80c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a810:	689b      	ldr	r3, [r3, #8]
2000a812:	693a      	ldr	r2, [r7, #16]
2000a814:	4013      	ands	r3, r2
2000a816:	60bb      	str	r3, [r7, #8]

  return tmpreg;
2000a818:	68bb      	ldr	r3, [r7, #8]
}
2000a81a:	4618      	mov	r0, r3
2000a81c:	371c      	adds	r7, #28
2000a81e:	46bd      	mov	sp, r7
2000a820:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a824:	4770      	bx	lr

2000a826 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
2000a826:	b480      	push	{r7}
2000a828:	b083      	sub	sp, #12
2000a82a:	af00      	add	r7, sp, #0
2000a82c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
2000a82e:	687b      	ldr	r3, [r7, #4]
2000a830:	695b      	ldr	r3, [r3, #20]
2000a832:	f003 0301 	and.w	r3, r3, #1
}
2000a836:	4618      	mov	r0, r3
2000a838:	370c      	adds	r7, #12
2000a83a:	46bd      	mov	sp, r7
2000a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a840:	4770      	bx	lr
	...

2000a844 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
2000a844:	b480      	push	{r7}
2000a846:	b085      	sub	sp, #20
2000a848:	af00      	add	r7, sp, #0
2000a84a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a84c:	687b      	ldr	r3, [r7, #4]
2000a84e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
2000a850:	68fb      	ldr	r3, [r7, #12]
2000a852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a856:	681a      	ldr	r2, [r3, #0]
2000a858:	68fb      	ldr	r3, [r7, #12]
2000a85a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000a85e:	4619      	mov	r1, r3
2000a860:	4b09      	ldr	r3, [pc, #36]	@ (2000a888 <USB_ActivateSetup+0x44>)
2000a862:	4013      	ands	r3, r2
2000a864:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
2000a866:	68fb      	ldr	r3, [r7, #12]
2000a868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000a86c:	685b      	ldr	r3, [r3, #4]
2000a86e:	68fa      	ldr	r2, [r7, #12]
2000a870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000a874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2000a878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000a87a:	2300      	movs	r3, #0
}
2000a87c:	4618      	mov	r0, r3
2000a87e:	3714      	adds	r7, #20
2000a880:	46bd      	mov	sp, r7
2000a882:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a886:	4770      	bx	lr
2000a888:	fffff800 	.word	0xfffff800

2000a88c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
2000a88c:	b480      	push	{r7}
2000a88e:	b087      	sub	sp, #28
2000a890:	af00      	add	r7, sp, #0
2000a892:	60f8      	str	r0, [r7, #12]
2000a894:	460b      	mov	r3, r1
2000a896:	607a      	str	r2, [r7, #4]
2000a898:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000a89a:	68fb      	ldr	r3, [r7, #12]
2000a89c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
2000a89e:	68fb      	ldr	r3, [r7, #12]
2000a8a0:	333c      	adds	r3, #60	@ 0x3c
2000a8a2:	3304      	adds	r3, #4
2000a8a4:	681b      	ldr	r3, [r3, #0]
2000a8a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
2000a8a8:	693b      	ldr	r3, [r7, #16]
2000a8aa:	4a26      	ldr	r2, [pc, #152]	@ (2000a944 <USB_EP0_OutStart+0xb8>)
2000a8ac:	4293      	cmp	r3, r2
2000a8ae:	d90a      	bls.n	2000a8c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
2000a8b0:	697b      	ldr	r3, [r7, #20]
2000a8b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a8b6:	681b      	ldr	r3, [r3, #0]
2000a8b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000a8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000a8c0:	d101      	bne.n	2000a8c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
2000a8c2:	2300      	movs	r3, #0
2000a8c4:	e037      	b.n	2000a936 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
2000a8c6:	697b      	ldr	r3, [r7, #20]
2000a8c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a8cc:	461a      	mov	r2, r3
2000a8ce:	2300      	movs	r3, #0
2000a8d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000a8d2:	697b      	ldr	r3, [r7, #20]
2000a8d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a8d8:	691b      	ldr	r3, [r3, #16]
2000a8da:	697a      	ldr	r2, [r7, #20]
2000a8dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a8e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000a8e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
2000a8e6:	697b      	ldr	r3, [r7, #20]
2000a8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a8ec:	691b      	ldr	r3, [r3, #16]
2000a8ee:	697a      	ldr	r2, [r7, #20]
2000a8f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a8f4:	f043 0318 	orr.w	r3, r3, #24
2000a8f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
2000a8fa:	697b      	ldr	r3, [r7, #20]
2000a8fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a900:	691b      	ldr	r3, [r3, #16]
2000a902:	697a      	ldr	r2, [r7, #20]
2000a904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a908:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
2000a90c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
2000a90e:	7afb      	ldrb	r3, [r7, #11]
2000a910:	2b01      	cmp	r3, #1
2000a912:	d10f      	bne.n	2000a934 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
2000a914:	697b      	ldr	r3, [r7, #20]
2000a916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a91a:	461a      	mov	r2, r3
2000a91c:	687b      	ldr	r3, [r7, #4]
2000a91e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
2000a920:	697b      	ldr	r3, [r7, #20]
2000a922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000a926:	681b      	ldr	r3, [r3, #0]
2000a928:	697a      	ldr	r2, [r7, #20]
2000a92a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000a92e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
2000a932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
2000a934:	2300      	movs	r3, #0
}
2000a936:	4618      	mov	r0, r3
2000a938:	371c      	adds	r7, #28
2000a93a:	46bd      	mov	sp, r7
2000a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a940:	4770      	bx	lr
2000a942:	bf00      	nop
2000a944:	4f54300a 	.word	0x4f54300a

2000a948 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
2000a948:	b480      	push	{r7}
2000a94a:	b085      	sub	sp, #20
2000a94c:	af00      	add	r7, sp, #0
2000a94e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
2000a950:	2300      	movs	r3, #0
2000a952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
2000a954:	68fb      	ldr	r3, [r7, #12]
2000a956:	3301      	adds	r3, #1
2000a958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000a95a:	68fb      	ldr	r3, [r7, #12]
2000a95c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000a960:	d901      	bls.n	2000a966 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
2000a962:	2303      	movs	r3, #3
2000a964:	e022      	b.n	2000a9ac <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
2000a966:	687b      	ldr	r3, [r7, #4]
2000a968:	691b      	ldr	r3, [r3, #16]
2000a96a:	2b00      	cmp	r3, #0
2000a96c:	daf2      	bge.n	2000a954 <USB_CoreReset+0xc>

  count = 10U;
2000a96e:	230a      	movs	r3, #10
2000a970:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
2000a972:	e002      	b.n	2000a97a <USB_CoreReset+0x32>
  {
    count--;
2000a974:	68fb      	ldr	r3, [r7, #12]
2000a976:	3b01      	subs	r3, #1
2000a978:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
2000a97a:	68fb      	ldr	r3, [r7, #12]
2000a97c:	2b00      	cmp	r3, #0
2000a97e:	d1f9      	bne.n	2000a974 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
2000a980:	687b      	ldr	r3, [r7, #4]
2000a982:	691b      	ldr	r3, [r3, #16]
2000a984:	f043 0201 	orr.w	r2, r3, #1
2000a988:	687b      	ldr	r3, [r7, #4]
2000a98a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
2000a98c:	68fb      	ldr	r3, [r7, #12]
2000a98e:	3301      	adds	r3, #1
2000a990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000a992:	68fb      	ldr	r3, [r7, #12]
2000a994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000a998:	d901      	bls.n	2000a99e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
2000a99a:	2303      	movs	r3, #3
2000a99c:	e006      	b.n	2000a9ac <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
2000a99e:	687b      	ldr	r3, [r7, #4]
2000a9a0:	691b      	ldr	r3, [r3, #16]
2000a9a2:	f003 0301 	and.w	r3, r3, #1
2000a9a6:	2b01      	cmp	r3, #1
2000a9a8:	d0f0      	beq.n	2000a98c <USB_CoreReset+0x44>

  return HAL_OK;
2000a9aa:	2300      	movs	r3, #0
}
2000a9ac:	4618      	mov	r0, r3
2000a9ae:	3714      	adds	r7, #20
2000a9b0:	46bd      	mov	sp, r7
2000a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a9b6:	4770      	bx	lr

2000a9b8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000a9b8:	b580      	push	{r7, lr}
2000a9ba:	b084      	sub	sp, #16
2000a9bc:	af00      	add	r7, sp, #0
2000a9be:	6078      	str	r0, [r7, #4]
2000a9c0:	460b      	mov	r3, r1
2000a9c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
2000a9c4:	2054      	movs	r0, #84	@ 0x54
2000a9c6:	f002 fc25 	bl	2000d214 <malloc>
2000a9ca:	4603      	mov	r3, r0
2000a9cc:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
2000a9ce:	68fb      	ldr	r3, [r7, #12]
2000a9d0:	2b00      	cmp	r3, #0
2000a9d2:	d109      	bne.n	2000a9e8 <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
2000a9d4:	687b      	ldr	r3, [r7, #4]
2000a9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a9da:	687b      	ldr	r3, [r7, #4]
2000a9dc:	32b0      	adds	r2, #176	@ 0xb0
2000a9de:	2100      	movs	r1, #0
2000a9e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
2000a9e4:	2302      	movs	r3, #2
2000a9e6:	e08b      	b.n	2000ab00 <USBD_CUSTOM_HID_Init+0x148>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
2000a9e8:	687b      	ldr	r3, [r7, #4]
2000a9ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a9ee:	687b      	ldr	r3, [r7, #4]
2000a9f0:	32b0      	adds	r2, #176	@ 0xb0
2000a9f2:	68f9      	ldr	r1, [r7, #12]
2000a9f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
2000a9f8:	687b      	ldr	r3, [r7, #4]
2000a9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a9fe:	687b      	ldr	r3, [r7, #4]
2000aa00:	32b0      	adds	r2, #176	@ 0xb0
2000aa02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
2000aa06:	687b      	ldr	r3, [r7, #4]
2000aa08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
2000aa0c:	687b      	ldr	r3, [r7, #4]
2000aa0e:	7c1b      	ldrb	r3, [r3, #16]
2000aa10:	2b00      	cmp	r3, #0
2000aa12:	d11b      	bne.n	2000aa4c <USBD_CUSTOM_HID_Init+0x94>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
2000aa14:	4b3c      	ldr	r3, [pc, #240]	@ (2000ab08 <USBD_CUSTOM_HID_Init+0x150>)
2000aa16:	781b      	ldrb	r3, [r3, #0]
2000aa18:	f003 020f 	and.w	r2, r3, #15
2000aa1c:	6879      	ldr	r1, [r7, #4]
2000aa1e:	4613      	mov	r3, r2
2000aa20:	009b      	lsls	r3, r3, #2
2000aa22:	4413      	add	r3, r2
2000aa24:	009b      	lsls	r3, r3, #2
2000aa26:	440b      	add	r3, r1
2000aa28:	331c      	adds	r3, #28
2000aa2a:	2205      	movs	r2, #5
2000aa2c:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
2000aa2e:	4b37      	ldr	r3, [pc, #220]	@ (2000ab0c <USBD_CUSTOM_HID_Init+0x154>)
2000aa30:	781b      	ldrb	r3, [r3, #0]
2000aa32:	f003 020f 	and.w	r2, r3, #15
2000aa36:	6879      	ldr	r1, [r7, #4]
2000aa38:	4613      	mov	r3, r2
2000aa3a:	009b      	lsls	r3, r3, #2
2000aa3c:	4413      	add	r3, r2
2000aa3e:	009b      	lsls	r3, r3, #2
2000aa40:	440b      	add	r3, r1
2000aa42:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000aa46:	2205      	movs	r2, #5
2000aa48:	601a      	str	r2, [r3, #0]
2000aa4a:	e01a      	b.n	2000aa82 <USBD_CUSTOM_HID_Init+0xca>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
2000aa4c:	4b2e      	ldr	r3, [pc, #184]	@ (2000ab08 <USBD_CUSTOM_HID_Init+0x150>)
2000aa4e:	781b      	ldrb	r3, [r3, #0]
2000aa50:	f003 020f 	and.w	r2, r3, #15
2000aa54:	6879      	ldr	r1, [r7, #4]
2000aa56:	4613      	mov	r3, r2
2000aa58:	009b      	lsls	r3, r3, #2
2000aa5a:	4413      	add	r3, r2
2000aa5c:	009b      	lsls	r3, r3, #2
2000aa5e:	440b      	add	r3, r1
2000aa60:	331c      	adds	r3, #28
2000aa62:	2205      	movs	r2, #5
2000aa64:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
2000aa66:	4b29      	ldr	r3, [pc, #164]	@ (2000ab0c <USBD_CUSTOM_HID_Init+0x154>)
2000aa68:	781b      	ldrb	r3, [r3, #0]
2000aa6a:	f003 020f 	and.w	r2, r3, #15
2000aa6e:	6879      	ldr	r1, [r7, #4]
2000aa70:	4613      	mov	r3, r2
2000aa72:	009b      	lsls	r3, r3, #2
2000aa74:	4413      	add	r3, r2
2000aa76:	009b      	lsls	r3, r3, #2
2000aa78:	440b      	add	r3, r1
2000aa7a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000aa7e:	2205      	movs	r2, #5
2000aa80:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
2000aa82:	4b21      	ldr	r3, [pc, #132]	@ (2000ab08 <USBD_CUSTOM_HID_Init+0x150>)
2000aa84:	7819      	ldrb	r1, [r3, #0]
2000aa86:	2340      	movs	r3, #64	@ 0x40
2000aa88:	2203      	movs	r2, #3
2000aa8a:	6878      	ldr	r0, [r7, #4]
2000aa8c:	f002 fa1f 	bl	2000cece <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
2000aa90:	4b1d      	ldr	r3, [pc, #116]	@ (2000ab08 <USBD_CUSTOM_HID_Init+0x150>)
2000aa92:	781b      	ldrb	r3, [r3, #0]
2000aa94:	f003 020f 	and.w	r2, r3, #15
2000aa98:	6879      	ldr	r1, [r7, #4]
2000aa9a:	4613      	mov	r3, r2
2000aa9c:	009b      	lsls	r3, r3, #2
2000aa9e:	4413      	add	r3, r2
2000aaa0:	009b      	lsls	r3, r3, #2
2000aaa2:	440b      	add	r3, r1
2000aaa4:	3323      	adds	r3, #35	@ 0x23
2000aaa6:	2201      	movs	r2, #1
2000aaa8:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
2000aaaa:	4b18      	ldr	r3, [pc, #96]	@ (2000ab0c <USBD_CUSTOM_HID_Init+0x154>)
2000aaac:	7819      	ldrb	r1, [r3, #0]
2000aaae:	2340      	movs	r3, #64	@ 0x40
2000aab0:	2203      	movs	r2, #3
2000aab2:	6878      	ldr	r0, [r7, #4]
2000aab4:	f002 fa0b 	bl	2000cece <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
2000aab8:	4b14      	ldr	r3, [pc, #80]	@ (2000ab0c <USBD_CUSTOM_HID_Init+0x154>)
2000aaba:	781b      	ldrb	r3, [r3, #0]
2000aabc:	f003 020f 	and.w	r2, r3, #15
2000aac0:	6879      	ldr	r1, [r7, #4]
2000aac2:	4613      	mov	r3, r2
2000aac4:	009b      	lsls	r3, r3, #2
2000aac6:	4413      	add	r3, r2
2000aac8:	009b      	lsls	r3, r3, #2
2000aaca:	440b      	add	r3, r1
2000aacc:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000aad0:	2201      	movs	r2, #1
2000aad2:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
2000aad4:	68fb      	ldr	r3, [r7, #12]
2000aad6:	2200      	movs	r2, #0
2000aad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
2000aadc:	687b      	ldr	r3, [r7, #4]
2000aade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000aae2:	687a      	ldr	r2, [r7, #4]
2000aae4:	33b0      	adds	r3, #176	@ 0xb0
2000aae6:	009b      	lsls	r3, r3, #2
2000aae8:	4413      	add	r3, r2
2000aaea:	685b      	ldr	r3, [r3, #4]
2000aaec:	685b      	ldr	r3, [r3, #4]
2000aaee:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
2000aaf0:	4b06      	ldr	r3, [pc, #24]	@ (2000ab0c <USBD_CUSTOM_HID_Init+0x154>)
2000aaf2:	7819      	ldrb	r1, [r3, #0]
2000aaf4:	68fa      	ldr	r2, [r7, #12]
2000aaf6:	2340      	movs	r3, #64	@ 0x40
2000aaf8:	6878      	ldr	r0, [r7, #4]
2000aafa:	f002 fad7 	bl	2000d0ac <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
2000aafe:	2300      	movs	r3, #0
}
2000ab00:	4618      	mov	r0, r3
2000ab02:	3710      	adds	r7, #16
2000ab04:	46bd      	mov	sp, r7
2000ab06:	bd80      	pop	{r7, pc}
2000ab08:	2000d5d6 	.word	0x2000d5d6
2000ab0c:	2000d5d7 	.word	0x2000d5d7

2000ab10 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000ab10:	b580      	push	{r7, lr}
2000ab12:	b082      	sub	sp, #8
2000ab14:	af00      	add	r7, sp, #0
2000ab16:	6078      	str	r0, [r7, #4]
2000ab18:	460b      	mov	r3, r1
2000ab1a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
2000ab1c:	4b37      	ldr	r3, [pc, #220]	@ (2000abfc <USBD_CUSTOM_HID_DeInit+0xec>)
2000ab1e:	781b      	ldrb	r3, [r3, #0]
2000ab20:	4619      	mov	r1, r3
2000ab22:	6878      	ldr	r0, [r7, #4]
2000ab24:	f002 f9f9 	bl	2000cf1a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
2000ab28:	4b34      	ldr	r3, [pc, #208]	@ (2000abfc <USBD_CUSTOM_HID_DeInit+0xec>)
2000ab2a:	781b      	ldrb	r3, [r3, #0]
2000ab2c:	f003 020f 	and.w	r2, r3, #15
2000ab30:	6879      	ldr	r1, [r7, #4]
2000ab32:	4613      	mov	r3, r2
2000ab34:	009b      	lsls	r3, r3, #2
2000ab36:	4413      	add	r3, r2
2000ab38:	009b      	lsls	r3, r3, #2
2000ab3a:	440b      	add	r3, r1
2000ab3c:	3323      	adds	r3, #35	@ 0x23
2000ab3e:	2200      	movs	r2, #0
2000ab40:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
2000ab42:	4b2e      	ldr	r3, [pc, #184]	@ (2000abfc <USBD_CUSTOM_HID_DeInit+0xec>)
2000ab44:	781b      	ldrb	r3, [r3, #0]
2000ab46:	f003 020f 	and.w	r2, r3, #15
2000ab4a:	6879      	ldr	r1, [r7, #4]
2000ab4c:	4613      	mov	r3, r2
2000ab4e:	009b      	lsls	r3, r3, #2
2000ab50:	4413      	add	r3, r2
2000ab52:	009b      	lsls	r3, r3, #2
2000ab54:	440b      	add	r3, r1
2000ab56:	331c      	adds	r3, #28
2000ab58:	2200      	movs	r2, #0
2000ab5a:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
2000ab5c:	4b28      	ldr	r3, [pc, #160]	@ (2000ac00 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000ab5e:	781b      	ldrb	r3, [r3, #0]
2000ab60:	4619      	mov	r1, r3
2000ab62:	6878      	ldr	r0, [r7, #4]
2000ab64:	f002 f9d9 	bl	2000cf1a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
2000ab68:	4b25      	ldr	r3, [pc, #148]	@ (2000ac00 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000ab6a:	781b      	ldrb	r3, [r3, #0]
2000ab6c:	f003 020f 	and.w	r2, r3, #15
2000ab70:	6879      	ldr	r1, [r7, #4]
2000ab72:	4613      	mov	r3, r2
2000ab74:	009b      	lsls	r3, r3, #2
2000ab76:	4413      	add	r3, r2
2000ab78:	009b      	lsls	r3, r3, #2
2000ab7a:	440b      	add	r3, r1
2000ab7c:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000ab80:	2200      	movs	r2, #0
2000ab82:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
2000ab84:	4b1e      	ldr	r3, [pc, #120]	@ (2000ac00 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000ab86:	781b      	ldrb	r3, [r3, #0]
2000ab88:	f003 020f 	and.w	r2, r3, #15
2000ab8c:	6879      	ldr	r1, [r7, #4]
2000ab8e:	4613      	mov	r3, r2
2000ab90:	009b      	lsls	r3, r3, #2
2000ab92:	4413      	add	r3, r2
2000ab94:	009b      	lsls	r3, r3, #2
2000ab96:	440b      	add	r3, r1
2000ab98:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000ab9c:	2200      	movs	r2, #0
2000ab9e:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
2000aba0:	687b      	ldr	r3, [r7, #4]
2000aba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000aba6:	687b      	ldr	r3, [r7, #4]
2000aba8:	32b0      	adds	r2, #176	@ 0xb0
2000abaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000abae:	2b00      	cmp	r3, #0
2000abb0:	d01f      	beq.n	2000abf2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
2000abb2:	687b      	ldr	r3, [r7, #4]
2000abb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000abb8:	687a      	ldr	r2, [r7, #4]
2000abba:	33b0      	adds	r3, #176	@ 0xb0
2000abbc:	009b      	lsls	r3, r3, #2
2000abbe:	4413      	add	r3, r2
2000abc0:	685b      	ldr	r3, [r3, #4]
2000abc2:	689b      	ldr	r3, [r3, #8]
2000abc4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
2000abc6:	687b      	ldr	r3, [r7, #4]
2000abc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000abcc:	687b      	ldr	r3, [r7, #4]
2000abce:	32b0      	adds	r2, #176	@ 0xb0
2000abd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000abd4:	4618      	mov	r0, r3
2000abd6:	f002 fb25 	bl	2000d224 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
2000abda:	687b      	ldr	r3, [r7, #4]
2000abdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000abe0:	687b      	ldr	r3, [r7, #4]
2000abe2:	32b0      	adds	r2, #176	@ 0xb0
2000abe4:	2100      	movs	r1, #0
2000abe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
2000abea:	687b      	ldr	r3, [r7, #4]
2000abec:	2200      	movs	r2, #0
2000abee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
2000abf2:	2300      	movs	r3, #0
}
2000abf4:	4618      	mov	r0, r3
2000abf6:	3708      	adds	r7, #8
2000abf8:	46bd      	mov	sp, r7
2000abfa:	bd80      	pop	{r7, pc}
2000abfc:	2000d5d6 	.word	0x2000d5d6
2000ac00:	2000d5d7 	.word	0x2000d5d7

2000ac04 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
2000ac04:	b580      	push	{r7, lr}
2000ac06:	b088      	sub	sp, #32
2000ac08:	af00      	add	r7, sp, #0
2000ac0a:	6078      	str	r0, [r7, #4]
2000ac0c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000ac0e:	687b      	ldr	r3, [r7, #4]
2000ac10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ac14:	687b      	ldr	r3, [r7, #4]
2000ac16:	32b0      	adds	r2, #176	@ 0xb0
2000ac18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ac1c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
2000ac1e:	2300      	movs	r3, #0
2000ac20:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
2000ac22:	2300      	movs	r3, #0
2000ac24:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
2000ac26:	2300      	movs	r3, #0
2000ac28:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
2000ac2a:	2300      	movs	r3, #0
2000ac2c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
2000ac2e:	693b      	ldr	r3, [r7, #16]
2000ac30:	2b00      	cmp	r3, #0
2000ac32:	d101      	bne.n	2000ac38 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
2000ac34:	2303      	movs	r3, #3
2000ac36:	e108      	b.n	2000ae4a <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000ac38:	683b      	ldr	r3, [r7, #0]
2000ac3a:	781b      	ldrb	r3, [r3, #0]
2000ac3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000ac40:	2b00      	cmp	r3, #0
2000ac42:	d05c      	beq.n	2000acfe <USBD_CUSTOM_HID_Setup+0xfa>
2000ac44:	2b20      	cmp	r3, #32
2000ac46:	f040 80f8 	bne.w	2000ae3a <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
2000ac4a:	683b      	ldr	r3, [r7, #0]
2000ac4c:	785b      	ldrb	r3, [r3, #1]
2000ac4e:	3b02      	subs	r3, #2
2000ac50:	2b09      	cmp	r3, #9
2000ac52:	d84c      	bhi.n	2000acee <USBD_CUSTOM_HID_Setup+0xea>
2000ac54:	a201      	add	r2, pc, #4	@ (adr r2, 2000ac5c <USBD_CUSTOM_HID_Setup+0x58>)
2000ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000ac5a:	bf00      	nop
2000ac5c:	2000acb5 	.word	0x2000acb5
2000ac60:	2000ac93 	.word	0x2000ac93
2000ac64:	2000acef 	.word	0x2000acef
2000ac68:	2000acef 	.word	0x2000acef
2000ac6c:	2000acef 	.word	0x2000acef
2000ac70:	2000acef 	.word	0x2000acef
2000ac74:	2000acef 	.word	0x2000acef
2000ac78:	2000acc5 	.word	0x2000acc5
2000ac7c:	2000aca3 	.word	0x2000aca3
2000ac80:	2000ac85 	.word	0x2000ac85
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
2000ac84:	683b      	ldr	r3, [r7, #0]
2000ac86:	885b      	ldrh	r3, [r3, #2]
2000ac88:	b2db      	uxtb	r3, r3
2000ac8a:	461a      	mov	r2, r3
2000ac8c:	693b      	ldr	r3, [r7, #16]
2000ac8e:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
2000ac90:	e034      	b.n	2000acfc <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
2000ac92:	693b      	ldr	r3, [r7, #16]
2000ac94:	3340      	adds	r3, #64	@ 0x40
2000ac96:	2201      	movs	r2, #1
2000ac98:	4619      	mov	r1, r3
2000ac9a:	6878      	ldr	r0, [r7, #4]
2000ac9c:	f001 fd3a 	bl	2000c714 <USBD_CtlSendData>
          break;
2000aca0:	e02c      	b.n	2000acfc <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
2000aca2:	683b      	ldr	r3, [r7, #0]
2000aca4:	885b      	ldrh	r3, [r3, #2]
2000aca6:	0a1b      	lsrs	r3, r3, #8
2000aca8:	b29b      	uxth	r3, r3
2000acaa:	b2db      	uxtb	r3, r3
2000acac:	461a      	mov	r2, r3
2000acae:	693b      	ldr	r3, [r7, #16]
2000acb0:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
2000acb2:	e023      	b.n	2000acfc <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
2000acb4:	693b      	ldr	r3, [r7, #16]
2000acb6:	3344      	adds	r3, #68	@ 0x44
2000acb8:	2201      	movs	r2, #1
2000acba:	4619      	mov	r1, r3
2000acbc:	6878      	ldr	r0, [r7, #4]
2000acbe:	f001 fd29 	bl	2000c714 <USBD_CtlSendData>
          break;
2000acc2:	e01b      	b.n	2000acfc <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
2000acc4:	683b      	ldr	r3, [r7, #0]
2000acc6:	88db      	ldrh	r3, [r3, #6]
2000acc8:	2b40      	cmp	r3, #64	@ 0x40
2000acca:	d905      	bls.n	2000acd8 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
2000accc:	6839      	ldr	r1, [r7, #0]
2000acce:	6878      	ldr	r0, [r7, #4]
2000acd0:	f001 fca3 	bl	2000c61a <USBD_CtlError>
            return USBD_FAIL;
2000acd4:	2303      	movs	r3, #3
2000acd6:	e0b8      	b.n	2000ae4a <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
2000acd8:	693b      	ldr	r3, [r7, #16]
2000acda:	2201      	movs	r2, #1
2000acdc:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
2000acde:	6939      	ldr	r1, [r7, #16]
2000ace0:	683b      	ldr	r3, [r7, #0]
2000ace2:	88db      	ldrh	r3, [r3, #6]
2000ace4:	461a      	mov	r2, r3
2000ace6:	6878      	ldr	r0, [r7, #4]
2000ace8:	f001 fd43 	bl	2000c772 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
2000acec:	e006      	b.n	2000acfc <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
2000acee:	6839      	ldr	r1, [r7, #0]
2000acf0:	6878      	ldr	r0, [r7, #4]
2000acf2:	f001 fc92 	bl	2000c61a <USBD_CtlError>
          ret = USBD_FAIL;
2000acf6:	2303      	movs	r3, #3
2000acf8:	75fb      	strb	r3, [r7, #23]
          break;
2000acfa:	bf00      	nop
      }
      break;
2000acfc:	e0a4      	b.n	2000ae48 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000acfe:	683b      	ldr	r3, [r7, #0]
2000ad00:	785b      	ldrb	r3, [r3, #1]
2000ad02:	2b0b      	cmp	r3, #11
2000ad04:	f200 8090 	bhi.w	2000ae28 <USBD_CUSTOM_HID_Setup+0x224>
2000ad08:	a201      	add	r2, pc, #4	@ (adr r2, 2000ad10 <USBD_CUSTOM_HID_Setup+0x10c>)
2000ad0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000ad0e:	bf00      	nop
2000ad10:	2000ad41 	.word	0x2000ad41
2000ad14:	2000ae37 	.word	0x2000ae37
2000ad18:	2000ae29 	.word	0x2000ae29
2000ad1c:	2000ae29 	.word	0x2000ae29
2000ad20:	2000ae29 	.word	0x2000ae29
2000ad24:	2000ae29 	.word	0x2000ae29
2000ad28:	2000ad6b 	.word	0x2000ad6b
2000ad2c:	2000ae29 	.word	0x2000ae29
2000ad30:	2000ae29 	.word	0x2000ae29
2000ad34:	2000ae29 	.word	0x2000ae29
2000ad38:	2000add7 	.word	0x2000add7
2000ad3c:	2000ae01 	.word	0x2000ae01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ad40:	687b      	ldr	r3, [r7, #4]
2000ad42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000ad46:	b2db      	uxtb	r3, r3
2000ad48:	2b03      	cmp	r3, #3
2000ad4a:	d107      	bne.n	2000ad5c <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
2000ad4c:	f107 030e 	add.w	r3, r7, #14
2000ad50:	2202      	movs	r2, #2
2000ad52:	4619      	mov	r1, r3
2000ad54:	6878      	ldr	r0, [r7, #4]
2000ad56:	f001 fcdd 	bl	2000c714 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000ad5a:	e06d      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000ad5c:	6839      	ldr	r1, [r7, #0]
2000ad5e:	6878      	ldr	r0, [r7, #4]
2000ad60:	f001 fc5b 	bl	2000c61a <USBD_CtlError>
            ret = USBD_FAIL;
2000ad64:	2303      	movs	r3, #3
2000ad66:	75fb      	strb	r3, [r7, #23]
          break;
2000ad68:	e066      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
2000ad6a:	683b      	ldr	r3, [r7, #0]
2000ad6c:	885b      	ldrh	r3, [r3, #2]
2000ad6e:	0a1b      	lsrs	r3, r3, #8
2000ad70:	b29b      	uxth	r3, r3
2000ad72:	2b22      	cmp	r3, #34	@ 0x22
2000ad74:	d110      	bne.n	2000ad98 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
2000ad76:	683b      	ldr	r3, [r7, #0]
2000ad78:	88db      	ldrh	r3, [r3, #6]
2000ad7a:	2b40      	cmp	r3, #64	@ 0x40
2000ad7c:	bf28      	it	cs
2000ad7e:	2340      	movcs	r3, #64	@ 0x40
2000ad80:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
2000ad82:	687b      	ldr	r3, [r7, #4]
2000ad84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000ad88:	687a      	ldr	r2, [r7, #4]
2000ad8a:	33b0      	adds	r3, #176	@ 0xb0
2000ad8c:	009b      	lsls	r3, r3, #2
2000ad8e:	4413      	add	r3, r2
2000ad90:	685b      	ldr	r3, [r3, #4]
2000ad92:	681b      	ldr	r3, [r3, #0]
2000ad94:	61bb      	str	r3, [r7, #24]
2000ad96:	e00d      	b.n	2000adb4 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
2000ad98:	683b      	ldr	r3, [r7, #0]
2000ad9a:	885b      	ldrh	r3, [r3, #2]
2000ad9c:	0a1b      	lsrs	r3, r3, #8
2000ad9e:	b29b      	uxth	r3, r3
2000ada0:	2b21      	cmp	r3, #33	@ 0x21
2000ada2:	d107      	bne.n	2000adb4 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
2000ada4:	4b2b      	ldr	r3, [pc, #172]	@ (2000ae54 <USBD_CUSTOM_HID_Setup+0x250>)
2000ada6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
2000ada8:	683b      	ldr	r3, [r7, #0]
2000adaa:	88db      	ldrh	r3, [r3, #6]
2000adac:	2b09      	cmp	r3, #9
2000adae:	bf28      	it	cs
2000adb0:	2309      	movcs	r3, #9
2000adb2:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
2000adb4:	69bb      	ldr	r3, [r7, #24]
2000adb6:	2b00      	cmp	r3, #0
2000adb8:	d006      	beq.n	2000adc8 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
2000adba:	8bfb      	ldrh	r3, [r7, #30]
2000adbc:	461a      	mov	r2, r3
2000adbe:	69b9      	ldr	r1, [r7, #24]
2000adc0:	6878      	ldr	r0, [r7, #4]
2000adc2:	f001 fca7 	bl	2000c714 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000adc6:	e037      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000adc8:	6839      	ldr	r1, [r7, #0]
2000adca:	6878      	ldr	r0, [r7, #4]
2000adcc:	f001 fc25 	bl	2000c61a <USBD_CtlError>
            ret = USBD_FAIL;
2000add0:	2303      	movs	r3, #3
2000add2:	75fb      	strb	r3, [r7, #23]
          break;
2000add4:	e030      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000add6:	687b      	ldr	r3, [r7, #4]
2000add8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000addc:	b2db      	uxtb	r3, r3
2000adde:	2b03      	cmp	r3, #3
2000ade0:	d107      	bne.n	2000adf2 <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
2000ade2:	693b      	ldr	r3, [r7, #16]
2000ade4:	3348      	adds	r3, #72	@ 0x48
2000ade6:	2201      	movs	r2, #1
2000ade8:	4619      	mov	r1, r3
2000adea:	6878      	ldr	r0, [r7, #4]
2000adec:	f001 fc92 	bl	2000c714 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000adf0:	e022      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000adf2:	6839      	ldr	r1, [r7, #0]
2000adf4:	6878      	ldr	r0, [r7, #4]
2000adf6:	f001 fc10 	bl	2000c61a <USBD_CtlError>
            ret = USBD_FAIL;
2000adfa:	2303      	movs	r3, #3
2000adfc:	75fb      	strb	r3, [r7, #23]
          break;
2000adfe:	e01b      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ae00:	687b      	ldr	r3, [r7, #4]
2000ae02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000ae06:	b2db      	uxtb	r3, r3
2000ae08:	2b03      	cmp	r3, #3
2000ae0a:	d106      	bne.n	2000ae1a <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
2000ae0c:	683b      	ldr	r3, [r7, #0]
2000ae0e:	885b      	ldrh	r3, [r3, #2]
2000ae10:	b2db      	uxtb	r3, r3
2000ae12:	461a      	mov	r2, r3
2000ae14:	693b      	ldr	r3, [r7, #16]
2000ae16:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000ae18:	e00e      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000ae1a:	6839      	ldr	r1, [r7, #0]
2000ae1c:	6878      	ldr	r0, [r7, #4]
2000ae1e:	f001 fbfc 	bl	2000c61a <USBD_CtlError>
            ret = USBD_FAIL;
2000ae22:	2303      	movs	r3, #3
2000ae24:	75fb      	strb	r3, [r7, #23]
          break;
2000ae26:	e007      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
2000ae28:	6839      	ldr	r1, [r7, #0]
2000ae2a:	6878      	ldr	r0, [r7, #4]
2000ae2c:	f001 fbf5 	bl	2000c61a <USBD_CtlError>
          ret = USBD_FAIL;
2000ae30:	2303      	movs	r3, #3
2000ae32:	75fb      	strb	r3, [r7, #23]
          break;
2000ae34:	e000      	b.n	2000ae38 <USBD_CUSTOM_HID_Setup+0x234>
          break;
2000ae36:	bf00      	nop
      }
      break;
2000ae38:	e006      	b.n	2000ae48 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
2000ae3a:	6839      	ldr	r1, [r7, #0]
2000ae3c:	6878      	ldr	r0, [r7, #4]
2000ae3e:	f001 fbec 	bl	2000c61a <USBD_CtlError>
      ret = USBD_FAIL;
2000ae42:	2303      	movs	r3, #3
2000ae44:	75fb      	strb	r3, [r7, #23]
      break;
2000ae46:	bf00      	nop
  }
  return (uint8_t)ret;
2000ae48:	7dfb      	ldrb	r3, [r7, #23]
}
2000ae4a:	4618      	mov	r0, r3
2000ae4c:	3720      	adds	r7, #32
2000ae4e:	46bd      	mov	sp, r7
2000ae50:	bd80      	pop	{r7, pc}
2000ae52:	bf00      	nop
2000ae54:	2000d5c0 	.word	0x2000d5c0

2000ae58 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
2000ae58:	b580      	push	{r7, lr}
2000ae5a:	b086      	sub	sp, #24
2000ae5c:	af00      	add	r7, sp, #0
2000ae5e:	60f8      	str	r0, [r7, #12]
2000ae60:	60b9      	str	r1, [r7, #8]
2000ae62:	4613      	mov	r3, r2
2000ae64:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000ae66:	68fb      	ldr	r3, [r7, #12]
2000ae68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ae6c:	68fb      	ldr	r3, [r7, #12]
2000ae6e:	32b0      	adds	r2, #176	@ 0xb0
2000ae70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ae74:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
2000ae76:	697b      	ldr	r3, [r7, #20]
2000ae78:	2b00      	cmp	r3, #0
2000ae7a:	d101      	bne.n	2000ae80 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
2000ae7c:	2303      	movs	r3, #3
2000ae7e:	e019      	b.n	2000aeb4 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ae80:	68fb      	ldr	r3, [r7, #12]
2000ae82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000ae86:	b2db      	uxtb	r3, r3
2000ae88:	2b03      	cmp	r3, #3
2000ae8a:	d112      	bne.n	2000aeb2 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
2000ae8c:	697b      	ldr	r3, [r7, #20]
2000ae8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
2000ae92:	2b00      	cmp	r3, #0
2000ae94:	d10b      	bne.n	2000aeae <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
2000ae96:	697b      	ldr	r3, [r7, #20]
2000ae98:	2201      	movs	r2, #1
2000ae9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
2000ae9e:	4b07      	ldr	r3, [pc, #28]	@ (2000aebc <USBD_CUSTOM_HID_SendReport+0x64>)
2000aea0:	7819      	ldrb	r1, [r3, #0]
2000aea2:	88fb      	ldrh	r3, [r7, #6]
2000aea4:	68ba      	ldr	r2, [r7, #8]
2000aea6:	68f8      	ldr	r0, [r7, #12]
2000aea8:	f002 f8df 	bl	2000d06a <USBD_LL_Transmit>
2000aeac:	e001      	b.n	2000aeb2 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
2000aeae:	2301      	movs	r3, #1
2000aeb0:	e000      	b.n	2000aeb4 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
2000aeb2:	2300      	movs	r3, #0
}
2000aeb4:	4618      	mov	r0, r3
2000aeb6:	3718      	adds	r7, #24
2000aeb8:	46bd      	mov	sp, r7
2000aeba:	bd80      	pop	{r7, pc}
2000aebc:	2000d5d6 	.word	0x2000d5d6

2000aec0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
2000aec0:	b580      	push	{r7, lr}
2000aec2:	b084      	sub	sp, #16
2000aec4:	af00      	add	r7, sp, #0
2000aec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
2000aec8:	2181      	movs	r1, #129	@ 0x81
2000aeca:	4815      	ldr	r0, [pc, #84]	@ (2000af20 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
2000aecc:	f000 fd44 	bl	2000b958 <USBD_GetEpDesc>
2000aed0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
2000aed2:	2101      	movs	r1, #1
2000aed4:	4812      	ldr	r0, [pc, #72]	@ (2000af20 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
2000aed6:	f000 fd3f 	bl	2000b958 <USBD_GetEpDesc>
2000aeda:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
2000aedc:	68fb      	ldr	r3, [r7, #12]
2000aede:	2b00      	cmp	r3, #0
2000aee0:	d009      	beq.n	2000aef6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
2000aee2:	68fb      	ldr	r3, [r7, #12]
2000aee4:	2200      	movs	r2, #0
2000aee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000aeea:	711a      	strb	r2, [r3, #4]
2000aeec:	2200      	movs	r2, #0
2000aeee:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000aef0:	68fb      	ldr	r3, [r7, #12]
2000aef2:	2205      	movs	r2, #5
2000aef4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
2000aef6:	68bb      	ldr	r3, [r7, #8]
2000aef8:	2b00      	cmp	r3, #0
2000aefa:	d009      	beq.n	2000af10 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
2000aefc:	68bb      	ldr	r3, [r7, #8]
2000aefe:	2200      	movs	r2, #0
2000af00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000af04:	711a      	strb	r2, [r3, #4]
2000af06:	2200      	movs	r2, #0
2000af08:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000af0a:	68bb      	ldr	r3, [r7, #8]
2000af0c:	2205      	movs	r2, #5
2000af0e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
2000af10:	687b      	ldr	r3, [r7, #4]
2000af12:	2229      	movs	r2, #41	@ 0x29
2000af14:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
2000af16:	4b02      	ldr	r3, [pc, #8]	@ (2000af20 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
2000af18:	4618      	mov	r0, r3
2000af1a:	3710      	adds	r7, #16
2000af1c:	46bd      	mov	sp, r7
2000af1e:	bd80      	pop	{r7, pc}
2000af20:	2000d594 	.word	0x2000d594

2000af24 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
2000af24:	b580      	push	{r7, lr}
2000af26:	b084      	sub	sp, #16
2000af28:	af00      	add	r7, sp, #0
2000af2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
2000af2c:	2181      	movs	r1, #129	@ 0x81
2000af2e:	4815      	ldr	r0, [pc, #84]	@ (2000af84 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
2000af30:	f000 fd12 	bl	2000b958 <USBD_GetEpDesc>
2000af34:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
2000af36:	2101      	movs	r1, #1
2000af38:	4812      	ldr	r0, [pc, #72]	@ (2000af84 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
2000af3a:	f000 fd0d 	bl	2000b958 <USBD_GetEpDesc>
2000af3e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
2000af40:	68fb      	ldr	r3, [r7, #12]
2000af42:	2b00      	cmp	r3, #0
2000af44:	d009      	beq.n	2000af5a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
2000af46:	68fb      	ldr	r3, [r7, #12]
2000af48:	2200      	movs	r2, #0
2000af4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000af4e:	711a      	strb	r2, [r3, #4]
2000af50:	2200      	movs	r2, #0
2000af52:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
2000af54:	68fb      	ldr	r3, [r7, #12]
2000af56:	2205      	movs	r2, #5
2000af58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
2000af5a:	68bb      	ldr	r3, [r7, #8]
2000af5c:	2b00      	cmp	r3, #0
2000af5e:	d009      	beq.n	2000af74 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
2000af60:	68bb      	ldr	r3, [r7, #8]
2000af62:	2200      	movs	r2, #0
2000af64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000af68:	711a      	strb	r2, [r3, #4]
2000af6a:	2200      	movs	r2, #0
2000af6c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
2000af6e:	68bb      	ldr	r3, [r7, #8]
2000af70:	2205      	movs	r2, #5
2000af72:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
2000af74:	687b      	ldr	r3, [r7, #4]
2000af76:	2229      	movs	r2, #41	@ 0x29
2000af78:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
2000af7a:	4b02      	ldr	r3, [pc, #8]	@ (2000af84 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
2000af7c:	4618      	mov	r0, r3
2000af7e:	3710      	adds	r7, #16
2000af80:	46bd      	mov	sp, r7
2000af82:	bd80      	pop	{r7, pc}
2000af84:	2000d594 	.word	0x2000d594

2000af88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
2000af88:	b580      	push	{r7, lr}
2000af8a:	b084      	sub	sp, #16
2000af8c:	af00      	add	r7, sp, #0
2000af8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
2000af90:	2181      	movs	r1, #129	@ 0x81
2000af92:	4815      	ldr	r0, [pc, #84]	@ (2000afe8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
2000af94:	f000 fce0 	bl	2000b958 <USBD_GetEpDesc>
2000af98:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
2000af9a:	2101      	movs	r1, #1
2000af9c:	4812      	ldr	r0, [pc, #72]	@ (2000afe8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
2000af9e:	f000 fcdb 	bl	2000b958 <USBD_GetEpDesc>
2000afa2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
2000afa4:	68fb      	ldr	r3, [r7, #12]
2000afa6:	2b00      	cmp	r3, #0
2000afa8:	d009      	beq.n	2000afbe <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
2000afaa:	68fb      	ldr	r3, [r7, #12]
2000afac:	2200      	movs	r2, #0
2000afae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000afb2:	711a      	strb	r2, [r3, #4]
2000afb4:	2200      	movs	r2, #0
2000afb6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000afb8:	68fb      	ldr	r3, [r7, #12]
2000afba:	2205      	movs	r2, #5
2000afbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
2000afbe:	68bb      	ldr	r3, [r7, #8]
2000afc0:	2b00      	cmp	r3, #0
2000afc2:	d009      	beq.n	2000afd8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
2000afc4:	68bb      	ldr	r3, [r7, #8]
2000afc6:	2200      	movs	r2, #0
2000afc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000afcc:	711a      	strb	r2, [r3, #4]
2000afce:	2200      	movs	r2, #0
2000afd0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000afd2:	68bb      	ldr	r3, [r7, #8]
2000afd4:	2205      	movs	r2, #5
2000afd6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
2000afd8:	687b      	ldr	r3, [r7, #4]
2000afda:	2229      	movs	r2, #41	@ 0x29
2000afdc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
2000afde:	4b02      	ldr	r3, [pc, #8]	@ (2000afe8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
2000afe0:	4618      	mov	r0, r3
2000afe2:	3710      	adds	r7, #16
2000afe4:	46bd      	mov	sp, r7
2000afe6:	bd80      	pop	{r7, pc}
2000afe8:	2000d594 	.word	0x2000d594

2000afec <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
2000afec:	b480      	push	{r7}
2000afee:	b083      	sub	sp, #12
2000aff0:	af00      	add	r7, sp, #0
2000aff2:	6078      	str	r0, [r7, #4]
2000aff4:	460b      	mov	r3, r1
2000aff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
2000aff8:	687b      	ldr	r3, [r7, #4]
2000affa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000affe:	687b      	ldr	r3, [r7, #4]
2000b000:	32b0      	adds	r2, #176	@ 0xb0
2000b002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b006:	2200      	movs	r2, #0
2000b008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
2000b00c:	2300      	movs	r3, #0
}
2000b00e:	4618      	mov	r0, r3
2000b010:	370c      	adds	r7, #12
2000b012:	46bd      	mov	sp, r7
2000b014:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b018:	4770      	bx	lr

2000b01a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
2000b01a:	b580      	push	{r7, lr}
2000b01c:	b084      	sub	sp, #16
2000b01e:	af00      	add	r7, sp, #0
2000b020:	6078      	str	r0, [r7, #4]
2000b022:	460b      	mov	r3, r1
2000b024:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
2000b026:	687b      	ldr	r3, [r7, #4]
2000b028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b02c:	687b      	ldr	r3, [r7, #4]
2000b02e:	32b0      	adds	r2, #176	@ 0xb0
2000b030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b034:	2b00      	cmp	r3, #0
2000b036:	d101      	bne.n	2000b03c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
2000b038:	2303      	movs	r3, #3
2000b03a:	e017      	b.n	2000b06c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000b03c:	687b      	ldr	r3, [r7, #4]
2000b03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b042:	687b      	ldr	r3, [r7, #4]
2000b044:	32b0      	adds	r2, #176	@ 0xb0
2000b046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b04a:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
2000b04c:	687b      	ldr	r3, [r7, #4]
2000b04e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000b052:	687a      	ldr	r2, [r7, #4]
2000b054:	33b0      	adds	r3, #176	@ 0xb0
2000b056:	009b      	lsls	r3, r3, #2
2000b058:	4413      	add	r3, r2
2000b05a:	685b      	ldr	r3, [r3, #4]
2000b05c:	68db      	ldr	r3, [r3, #12]
2000b05e:	68fa      	ldr	r2, [r7, #12]
2000b060:	7810      	ldrb	r0, [r2, #0]
2000b062:	68fa      	ldr	r2, [r7, #12]
2000b064:	7852      	ldrb	r2, [r2, #1]
2000b066:	4611      	mov	r1, r2
2000b068:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
2000b06a:	2300      	movs	r3, #0
}
2000b06c:	4618      	mov	r0, r3
2000b06e:	3710      	adds	r7, #16
2000b070:	46bd      	mov	sp, r7
2000b072:	bd80      	pop	{r7, pc}

2000b074 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
2000b074:	b580      	push	{r7, lr}
2000b076:	b084      	sub	sp, #16
2000b078:	af00      	add	r7, sp, #0
2000b07a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;
  uint8_t len;

  len = USBD_LL_GetRxDataSize(pdev, CUSTOMHIDOutEpAdd);
2000b07c:	4b17      	ldr	r3, [pc, #92]	@ (2000b0dc <USBD_CUSTOM_HID_ReceivePacket+0x68>)
2000b07e:	781b      	ldrb	r3, [r3, #0]
2000b080:	4619      	mov	r1, r3
2000b082:	6878      	ldr	r0, [r7, #4]
2000b084:	f002 f833 	bl	2000d0ee <USBD_LL_GetRxDataSize>
2000b088:	4603      	mov	r3, r0
2000b08a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
2000b08c:	687b      	ldr	r3, [r7, #4]
2000b08e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b092:	687b      	ldr	r3, [r7, #4]
2000b094:	32b0      	adds	r2, #176	@ 0xb0
2000b096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b09a:	2b00      	cmp	r3, #0
2000b09c:	d101      	bne.n	2000b0a2 <USBD_CUSTOM_HID_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
2000b09e:	2303      	movs	r3, #3
2000b0a0:	e018      	b.n	2000b0d4 <USBD_CUSTOM_HID_ReceivePacket+0x60>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000b0a2:	687b      	ldr	r3, [r7, #4]
2000b0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b0a8:	687b      	ldr	r3, [r7, #4]
2000b0aa:	32b0      	adds	r2, #176	@ 0xb0
2000b0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b0b0:	60bb      	str	r3, [r7, #8]

  memcpy(rdBuff, hhid->Report_buf, len);
2000b0b2:	68bb      	ldr	r3, [r7, #8]
2000b0b4:	7bfa      	ldrb	r2, [r7, #15]
2000b0b6:	4619      	mov	r1, r3
2000b0b8:	4809      	ldr	r0, [pc, #36]	@ (2000b0e0 <USBD_CUSTOM_HID_ReceivePacket+0x6c>)
2000b0ba:	f002 f9ad 	bl	2000d418 <memcpy>
  msgAvailable = 1;
2000b0be:	4b09      	ldr	r3, [pc, #36]	@ (2000b0e4 <USBD_CUSTOM_HID_ReceivePacket+0x70>)
2000b0c0:	2201      	movs	r2, #1
2000b0c2:	601a      	str	r2, [r3, #0]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
2000b0c4:	4b05      	ldr	r3, [pc, #20]	@ (2000b0dc <USBD_CUSTOM_HID_ReceivePacket+0x68>)
2000b0c6:	7819      	ldrb	r1, [r3, #0]
2000b0c8:	68ba      	ldr	r2, [r7, #8]
2000b0ca:	2340      	movs	r3, #64	@ 0x40
2000b0cc:	6878      	ldr	r0, [r7, #4]
2000b0ce:	f001 ffed 	bl	2000d0ac <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);



  return (uint8_t)USBD_OK;
2000b0d2:	2300      	movs	r3, #0
}
2000b0d4:	4618      	mov	r0, r3
2000b0d6:	3710      	adds	r7, #16
2000b0d8:	46bd      	mov	sp, r7
2000b0da:	bd80      	pop	{r7, pc}
2000b0dc:	2000d5d7 	.word	0x2000d5d7
2000b0e0:	2000eb48 	.word	0x2000eb48
2000b0e4:	2000ebcc 	.word	0x2000ebcc

2000b0e8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
2000b0e8:	b580      	push	{r7, lr}
2000b0ea:	b084      	sub	sp, #16
2000b0ec:	af00      	add	r7, sp, #0
2000b0ee:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000b0f0:	687b      	ldr	r3, [r7, #4]
2000b0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b0f6:	687b      	ldr	r3, [r7, #4]
2000b0f8:	32b0      	adds	r2, #176	@ 0xb0
2000b0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b0fe:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
2000b100:	68fb      	ldr	r3, [r7, #12]
2000b102:	2b00      	cmp	r3, #0
2000b104:	d101      	bne.n	2000b10a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
2000b106:	2303      	movs	r3, #3
2000b108:	e016      	b.n	2000b138 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
2000b10a:	68fb      	ldr	r3, [r7, #12]
2000b10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000b10e:	2b01      	cmp	r3, #1
2000b110:	d111      	bne.n	2000b136 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
2000b112:	687b      	ldr	r3, [r7, #4]
2000b114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000b118:	687a      	ldr	r2, [r7, #4]
2000b11a:	33b0      	adds	r3, #176	@ 0xb0
2000b11c:	009b      	lsls	r3, r3, #2
2000b11e:	4413      	add	r3, r2
2000b120:	685b      	ldr	r3, [r3, #4]
2000b122:	68db      	ldr	r3, [r3, #12]
2000b124:	68fa      	ldr	r2, [r7, #12]
2000b126:	7810      	ldrb	r0, [r2, #0]
2000b128:	68fa      	ldr	r2, [r7, #12]
2000b12a:	7852      	ldrb	r2, [r2, #1]
2000b12c:	4611      	mov	r1, r2
2000b12e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
2000b130:	68fb      	ldr	r3, [r7, #12]
2000b132:	2200      	movs	r2, #0
2000b134:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
2000b136:	2300      	movs	r3, #0
}
2000b138:	4618      	mov	r0, r3
2000b13a:	3710      	adds	r7, #16
2000b13c:	46bd      	mov	sp, r7
2000b13e:	bd80      	pop	{r7, pc}

2000b140 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
2000b140:	b480      	push	{r7}
2000b142:	b083      	sub	sp, #12
2000b144:	af00      	add	r7, sp, #0
2000b146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
2000b148:	687b      	ldr	r3, [r7, #4]
2000b14a:	220a      	movs	r2, #10
2000b14c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
2000b14e:	4b03      	ldr	r3, [pc, #12]	@ (2000b15c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
2000b150:	4618      	mov	r0, r3
2000b152:	370c      	adds	r7, #12
2000b154:	46bd      	mov	sp, r7
2000b156:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b15a:	4770      	bx	lr
2000b15c:	2000d5cc 	.word	0x2000d5cc

2000b160 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
2000b160:	b480      	push	{r7}
2000b162:	b083      	sub	sp, #12
2000b164:	af00      	add	r7, sp, #0
2000b166:	6078      	str	r0, [r7, #4]
2000b168:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
2000b16a:	683b      	ldr	r3, [r7, #0]
2000b16c:	2b00      	cmp	r3, #0
2000b16e:	d101      	bne.n	2000b174 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
2000b170:	2303      	movs	r3, #3
2000b172:	e009      	b.n	2000b188 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
2000b174:	687b      	ldr	r3, [r7, #4]
2000b176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000b17a:	687a      	ldr	r2, [r7, #4]
2000b17c:	33b0      	adds	r3, #176	@ 0xb0
2000b17e:	009b      	lsls	r3, r3, #2
2000b180:	4413      	add	r3, r2
2000b182:	683a      	ldr	r2, [r7, #0]
2000b184:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
2000b186:	2300      	movs	r3, #0
}
2000b188:	4618      	mov	r0, r3
2000b18a:	370c      	adds	r7, #12
2000b18c:	46bd      	mov	sp, r7
2000b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b192:	4770      	bx	lr

2000b194 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
2000b194:	b580      	push	{r7, lr}
2000b196:	b086      	sub	sp, #24
2000b198:	af00      	add	r7, sp, #0
2000b19a:	60f8      	str	r0, [r7, #12]
2000b19c:	60b9      	str	r1, [r7, #8]
2000b19e:	4613      	mov	r3, r2
2000b1a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
2000b1a2:	68fb      	ldr	r3, [r7, #12]
2000b1a4:	2b00      	cmp	r3, #0
2000b1a6:	d101      	bne.n	2000b1ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
2000b1a8:	2303      	movs	r3, #3
2000b1aa:	e01f      	b.n	2000b1ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
2000b1ac:	68fb      	ldr	r3, [r7, #12]
2000b1ae:	2200      	movs	r2, #0
2000b1b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
2000b1b4:	68fb      	ldr	r3, [r7, #12]
2000b1b6:	2200      	movs	r2, #0
2000b1b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
2000b1bc:	68fb      	ldr	r3, [r7, #12]
2000b1be:	2200      	movs	r2, #0
2000b1c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
2000b1c4:	68bb      	ldr	r3, [r7, #8]
2000b1c6:	2b00      	cmp	r3, #0
2000b1c8:	d003      	beq.n	2000b1d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
2000b1ca:	68fb      	ldr	r3, [r7, #12]
2000b1cc:	68ba      	ldr	r2, [r7, #8]
2000b1ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000b1d2:	68fb      	ldr	r3, [r7, #12]
2000b1d4:	2201      	movs	r2, #1
2000b1d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
2000b1da:	68fb      	ldr	r3, [r7, #12]
2000b1dc:	79fa      	ldrb	r2, [r7, #7]
2000b1de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
2000b1e0:	68f8      	ldr	r0, [r7, #12]
2000b1e2:	f001 fe0d 	bl	2000ce00 <USBD_LL_Init>
2000b1e6:	4603      	mov	r3, r0
2000b1e8:	75fb      	strb	r3, [r7, #23]

  return ret;
2000b1ea:	7dfb      	ldrb	r3, [r7, #23]
}
2000b1ec:	4618      	mov	r0, r3
2000b1ee:	3718      	adds	r7, #24
2000b1f0:	46bd      	mov	sp, r7
2000b1f2:	bd80      	pop	{r7, pc}

2000b1f4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
2000b1f4:	b580      	push	{r7, lr}
2000b1f6:	b084      	sub	sp, #16
2000b1f8:	af00      	add	r7, sp, #0
2000b1fa:	6078      	str	r0, [r7, #4]
2000b1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000b1fe:	2300      	movs	r3, #0
2000b200:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
2000b202:	683b      	ldr	r3, [r7, #0]
2000b204:	2b00      	cmp	r3, #0
2000b206:	d101      	bne.n	2000b20c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
2000b208:	2303      	movs	r3, #3
2000b20a:	e025      	b.n	2000b258 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
2000b20c:	687b      	ldr	r3, [r7, #4]
2000b20e:	683a      	ldr	r2, [r7, #0]
2000b210:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
2000b214:	687b      	ldr	r3, [r7, #4]
2000b216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b21a:	687b      	ldr	r3, [r7, #4]
2000b21c:	32ae      	adds	r2, #174	@ 0xae
2000b21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000b224:	2b00      	cmp	r3, #0
2000b226:	d00f      	beq.n	2000b248 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
2000b228:	687b      	ldr	r3, [r7, #4]
2000b22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b22e:	687b      	ldr	r3, [r7, #4]
2000b230:	32ae      	adds	r2, #174	@ 0xae
2000b232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000b238:	f107 020e 	add.w	r2, r7, #14
2000b23c:	4610      	mov	r0, r2
2000b23e:	4798      	blx	r3
2000b240:	4602      	mov	r2, r0
2000b242:	687b      	ldr	r3, [r7, #4]
2000b244:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
2000b248:	687b      	ldr	r3, [r7, #4]
2000b24a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
2000b24e:	1c5a      	adds	r2, r3, #1
2000b250:	687b      	ldr	r3, [r7, #4]
2000b252:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
2000b256:	2300      	movs	r3, #0
}
2000b258:	4618      	mov	r0, r3
2000b25a:	3710      	adds	r7, #16
2000b25c:	46bd      	mov	sp, r7
2000b25e:	bd80      	pop	{r7, pc}

2000b260 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
2000b260:	b580      	push	{r7, lr}
2000b262:	b082      	sub	sp, #8
2000b264:	af00      	add	r7, sp, #0
2000b266:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
2000b268:	6878      	ldr	r0, [r7, #4]
2000b26a:	f001 fe15 	bl	2000ce98 <USBD_LL_Start>
2000b26e:	4603      	mov	r3, r0
}
2000b270:	4618      	mov	r0, r3
2000b272:	3708      	adds	r7, #8
2000b274:	46bd      	mov	sp, r7
2000b276:	bd80      	pop	{r7, pc}

2000b278 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
2000b278:	b480      	push	{r7}
2000b27a:	b083      	sub	sp, #12
2000b27c:	af00      	add	r7, sp, #0
2000b27e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
2000b280:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
2000b282:	4618      	mov	r0, r3
2000b284:	370c      	adds	r7, #12
2000b286:	46bd      	mov	sp, r7
2000b288:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b28c:	4770      	bx	lr

2000b28e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000b28e:	b580      	push	{r7, lr}
2000b290:	b084      	sub	sp, #16
2000b292:	af00      	add	r7, sp, #0
2000b294:	6078      	str	r0, [r7, #4]
2000b296:	460b      	mov	r3, r1
2000b298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
2000b29a:	2300      	movs	r3, #0
2000b29c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
2000b29e:	687b      	ldr	r3, [r7, #4]
2000b2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b2a4:	2b00      	cmp	r3, #0
2000b2a6:	d009      	beq.n	2000b2bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
2000b2a8:	687b      	ldr	r3, [r7, #4]
2000b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b2ae:	681b      	ldr	r3, [r3, #0]
2000b2b0:	78fa      	ldrb	r2, [r7, #3]
2000b2b2:	4611      	mov	r1, r2
2000b2b4:	6878      	ldr	r0, [r7, #4]
2000b2b6:	4798      	blx	r3
2000b2b8:	4603      	mov	r3, r0
2000b2ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
2000b2be:	4618      	mov	r0, r3
2000b2c0:	3710      	adds	r7, #16
2000b2c2:	46bd      	mov	sp, r7
2000b2c4:	bd80      	pop	{r7, pc}

2000b2c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
2000b2c6:	b580      	push	{r7, lr}
2000b2c8:	b084      	sub	sp, #16
2000b2ca:	af00      	add	r7, sp, #0
2000b2cc:	6078      	str	r0, [r7, #4]
2000b2ce:	460b      	mov	r3, r1
2000b2d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
2000b2d2:	2300      	movs	r3, #0
2000b2d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
2000b2d6:	687b      	ldr	r3, [r7, #4]
2000b2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b2dc:	685b      	ldr	r3, [r3, #4]
2000b2de:	78fa      	ldrb	r2, [r7, #3]
2000b2e0:	4611      	mov	r1, r2
2000b2e2:	6878      	ldr	r0, [r7, #4]
2000b2e4:	4798      	blx	r3
2000b2e6:	4603      	mov	r3, r0
2000b2e8:	2b00      	cmp	r3, #0
2000b2ea:	d001      	beq.n	2000b2f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
2000b2ec:	2303      	movs	r3, #3
2000b2ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
2000b2f2:	4618      	mov	r0, r3
2000b2f4:	3710      	adds	r7, #16
2000b2f6:	46bd      	mov	sp, r7
2000b2f8:	bd80      	pop	{r7, pc}

2000b2fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
2000b2fa:	b580      	push	{r7, lr}
2000b2fc:	b084      	sub	sp, #16
2000b2fe:	af00      	add	r7, sp, #0
2000b300:	6078      	str	r0, [r7, #4]
2000b302:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
2000b304:	687b      	ldr	r3, [r7, #4]
2000b306:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b30a:	6839      	ldr	r1, [r7, #0]
2000b30c:	4618      	mov	r0, r3
2000b30e:	f001 f94a 	bl	2000c5a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
2000b312:	687b      	ldr	r3, [r7, #4]
2000b314:	2201      	movs	r2, #1
2000b316:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
2000b31a:	687b      	ldr	r3, [r7, #4]
2000b31c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
2000b320:	461a      	mov	r2, r3
2000b322:	687b      	ldr	r3, [r7, #4]
2000b324:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
2000b328:	687b      	ldr	r3, [r7, #4]
2000b32a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000b32e:	f003 031f 	and.w	r3, r3, #31
2000b332:	2b02      	cmp	r3, #2
2000b334:	d01a      	beq.n	2000b36c <USBD_LL_SetupStage+0x72>
2000b336:	2b02      	cmp	r3, #2
2000b338:	d822      	bhi.n	2000b380 <USBD_LL_SetupStage+0x86>
2000b33a:	2b00      	cmp	r3, #0
2000b33c:	d002      	beq.n	2000b344 <USBD_LL_SetupStage+0x4a>
2000b33e:	2b01      	cmp	r3, #1
2000b340:	d00a      	beq.n	2000b358 <USBD_LL_SetupStage+0x5e>
2000b342:	e01d      	b.n	2000b380 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
2000b344:	687b      	ldr	r3, [r7, #4]
2000b346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b34a:	4619      	mov	r1, r3
2000b34c:	6878      	ldr	r0, [r7, #4]
2000b34e:	f000 fb75 	bl	2000ba3c <USBD_StdDevReq>
2000b352:	4603      	mov	r3, r0
2000b354:	73fb      	strb	r3, [r7, #15]
      break;
2000b356:	e020      	b.n	2000b39a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
2000b358:	687b      	ldr	r3, [r7, #4]
2000b35a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b35e:	4619      	mov	r1, r3
2000b360:	6878      	ldr	r0, [r7, #4]
2000b362:	f000 fbdd 	bl	2000bb20 <USBD_StdItfReq>
2000b366:	4603      	mov	r3, r0
2000b368:	73fb      	strb	r3, [r7, #15]
      break;
2000b36a:	e016      	b.n	2000b39a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
2000b36c:	687b      	ldr	r3, [r7, #4]
2000b36e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000b372:	4619      	mov	r1, r3
2000b374:	6878      	ldr	r0, [r7, #4]
2000b376:	f000 fc3f 	bl	2000bbf8 <USBD_StdEPReq>
2000b37a:	4603      	mov	r3, r0
2000b37c:	73fb      	strb	r3, [r7, #15]
      break;
2000b37e:	e00c      	b.n	2000b39a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
2000b380:	687b      	ldr	r3, [r7, #4]
2000b382:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000b386:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
2000b38a:	b2db      	uxtb	r3, r3
2000b38c:	4619      	mov	r1, r3
2000b38e:	6878      	ldr	r0, [r7, #4]
2000b390:	f001 fde2 	bl	2000cf58 <USBD_LL_StallEP>
2000b394:	4603      	mov	r3, r0
2000b396:	73fb      	strb	r3, [r7, #15]
      break;
2000b398:	bf00      	nop
  }

  return ret;
2000b39a:	7bfb      	ldrb	r3, [r7, #15]
}
2000b39c:	4618      	mov	r0, r3
2000b39e:	3710      	adds	r7, #16
2000b3a0:	46bd      	mov	sp, r7
2000b3a2:	bd80      	pop	{r7, pc}

2000b3a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
2000b3a4:	b580      	push	{r7, lr}
2000b3a6:	b086      	sub	sp, #24
2000b3a8:	af00      	add	r7, sp, #0
2000b3aa:	60f8      	str	r0, [r7, #12]
2000b3ac:	460b      	mov	r3, r1
2000b3ae:	607a      	str	r2, [r7, #4]
2000b3b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
2000b3b2:	2300      	movs	r3, #0
2000b3b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
2000b3b6:	7afb      	ldrb	r3, [r7, #11]
2000b3b8:	2b00      	cmp	r3, #0
2000b3ba:	d177      	bne.n	2000b4ac <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
2000b3bc:	68fb      	ldr	r3, [r7, #12]
2000b3be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
2000b3c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
2000b3c4:	68fb      	ldr	r3, [r7, #12]
2000b3c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
2000b3ca:	2b03      	cmp	r3, #3
2000b3cc:	f040 80a1 	bne.w	2000b512 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
2000b3d0:	693b      	ldr	r3, [r7, #16]
2000b3d2:	685b      	ldr	r3, [r3, #4]
2000b3d4:	693a      	ldr	r2, [r7, #16]
2000b3d6:	8992      	ldrh	r2, [r2, #12]
2000b3d8:	4293      	cmp	r3, r2
2000b3da:	d91c      	bls.n	2000b416 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
2000b3dc:	693b      	ldr	r3, [r7, #16]
2000b3de:	685b      	ldr	r3, [r3, #4]
2000b3e0:	693a      	ldr	r2, [r7, #16]
2000b3e2:	8992      	ldrh	r2, [r2, #12]
2000b3e4:	1a9a      	subs	r2, r3, r2
2000b3e6:	693b      	ldr	r3, [r7, #16]
2000b3e8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
2000b3ea:	693b      	ldr	r3, [r7, #16]
2000b3ec:	691b      	ldr	r3, [r3, #16]
2000b3ee:	693a      	ldr	r2, [r7, #16]
2000b3f0:	8992      	ldrh	r2, [r2, #12]
2000b3f2:	441a      	add	r2, r3
2000b3f4:	693b      	ldr	r3, [r7, #16]
2000b3f6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
2000b3f8:	693b      	ldr	r3, [r7, #16]
2000b3fa:	6919      	ldr	r1, [r3, #16]
2000b3fc:	693b      	ldr	r3, [r7, #16]
2000b3fe:	899b      	ldrh	r3, [r3, #12]
2000b400:	461a      	mov	r2, r3
2000b402:	693b      	ldr	r3, [r7, #16]
2000b404:	685b      	ldr	r3, [r3, #4]
2000b406:	4293      	cmp	r3, r2
2000b408:	bf38      	it	cc
2000b40a:	4613      	movcc	r3, r2
2000b40c:	461a      	mov	r2, r3
2000b40e:	68f8      	ldr	r0, [r7, #12]
2000b410:	f001 f9d0 	bl	2000c7b4 <USBD_CtlContinueRx>
2000b414:	e07d      	b.n	2000b512 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
2000b416:	68fb      	ldr	r3, [r7, #12]
2000b418:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000b41c:	f003 031f 	and.w	r3, r3, #31
2000b420:	2b02      	cmp	r3, #2
2000b422:	d014      	beq.n	2000b44e <USBD_LL_DataOutStage+0xaa>
2000b424:	2b02      	cmp	r3, #2
2000b426:	d81d      	bhi.n	2000b464 <USBD_LL_DataOutStage+0xc0>
2000b428:	2b00      	cmp	r3, #0
2000b42a:	d002      	beq.n	2000b432 <USBD_LL_DataOutStage+0x8e>
2000b42c:	2b01      	cmp	r3, #1
2000b42e:	d003      	beq.n	2000b438 <USBD_LL_DataOutStage+0x94>
2000b430:	e018      	b.n	2000b464 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
2000b432:	2300      	movs	r3, #0
2000b434:	75bb      	strb	r3, [r7, #22]
            break;
2000b436:	e018      	b.n	2000b46a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
2000b438:	68fb      	ldr	r3, [r7, #12]
2000b43a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
2000b43e:	b2db      	uxtb	r3, r3
2000b440:	4619      	mov	r1, r3
2000b442:	68f8      	ldr	r0, [r7, #12]
2000b444:	f000 fa6e 	bl	2000b924 <USBD_CoreFindIF>
2000b448:	4603      	mov	r3, r0
2000b44a:	75bb      	strb	r3, [r7, #22]
            break;
2000b44c:	e00d      	b.n	2000b46a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
2000b44e:	68fb      	ldr	r3, [r7, #12]
2000b450:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
2000b454:	b2db      	uxtb	r3, r3
2000b456:	4619      	mov	r1, r3
2000b458:	68f8      	ldr	r0, [r7, #12]
2000b45a:	f000 fa70 	bl	2000b93e <USBD_CoreFindEP>
2000b45e:	4603      	mov	r3, r0
2000b460:	75bb      	strb	r3, [r7, #22]
            break;
2000b462:	e002      	b.n	2000b46a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
2000b464:	2300      	movs	r3, #0
2000b466:	75bb      	strb	r3, [r7, #22]
            break;
2000b468:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
2000b46a:	7dbb      	ldrb	r3, [r7, #22]
2000b46c:	2b00      	cmp	r3, #0
2000b46e:	d119      	bne.n	2000b4a4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b470:	68fb      	ldr	r3, [r7, #12]
2000b472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b476:	b2db      	uxtb	r3, r3
2000b478:	2b03      	cmp	r3, #3
2000b47a:	d113      	bne.n	2000b4a4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
2000b47c:	7dba      	ldrb	r2, [r7, #22]
2000b47e:	68fb      	ldr	r3, [r7, #12]
2000b480:	32ae      	adds	r2, #174	@ 0xae
2000b482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b486:	691b      	ldr	r3, [r3, #16]
2000b488:	2b00      	cmp	r3, #0
2000b48a:	d00b      	beq.n	2000b4a4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
2000b48c:	7dba      	ldrb	r2, [r7, #22]
2000b48e:	68fb      	ldr	r3, [r7, #12]
2000b490:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
2000b494:	7dba      	ldrb	r2, [r7, #22]
2000b496:	68fb      	ldr	r3, [r7, #12]
2000b498:	32ae      	adds	r2, #174	@ 0xae
2000b49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b49e:	691b      	ldr	r3, [r3, #16]
2000b4a0:	68f8      	ldr	r0, [r7, #12]
2000b4a2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
2000b4a4:	68f8      	ldr	r0, [r7, #12]
2000b4a6:	f001 f996 	bl	2000c7d6 <USBD_CtlSendStatus>
2000b4aa:	e032      	b.n	2000b512 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
2000b4ac:	7afb      	ldrb	r3, [r7, #11]
2000b4ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000b4b2:	b2db      	uxtb	r3, r3
2000b4b4:	4619      	mov	r1, r3
2000b4b6:	68f8      	ldr	r0, [r7, #12]
2000b4b8:	f000 fa41 	bl	2000b93e <USBD_CoreFindEP>
2000b4bc:	4603      	mov	r3, r0
2000b4be:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000b4c0:	7dbb      	ldrb	r3, [r7, #22]
2000b4c2:	2bff      	cmp	r3, #255	@ 0xff
2000b4c4:	d025      	beq.n	2000b512 <USBD_LL_DataOutStage+0x16e>
2000b4c6:	7dbb      	ldrb	r3, [r7, #22]
2000b4c8:	2b00      	cmp	r3, #0
2000b4ca:	d122      	bne.n	2000b512 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b4cc:	68fb      	ldr	r3, [r7, #12]
2000b4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b4d2:	b2db      	uxtb	r3, r3
2000b4d4:	2b03      	cmp	r3, #3
2000b4d6:	d117      	bne.n	2000b508 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
2000b4d8:	7dba      	ldrb	r2, [r7, #22]
2000b4da:	68fb      	ldr	r3, [r7, #12]
2000b4dc:	32ae      	adds	r2, #174	@ 0xae
2000b4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b4e2:	699b      	ldr	r3, [r3, #24]
2000b4e4:	2b00      	cmp	r3, #0
2000b4e6:	d00f      	beq.n	2000b508 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
2000b4e8:	7dba      	ldrb	r2, [r7, #22]
2000b4ea:	68fb      	ldr	r3, [r7, #12]
2000b4ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
2000b4f0:	7dba      	ldrb	r2, [r7, #22]
2000b4f2:	68fb      	ldr	r3, [r7, #12]
2000b4f4:	32ae      	adds	r2, #174	@ 0xae
2000b4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b4fa:	699b      	ldr	r3, [r3, #24]
2000b4fc:	7afa      	ldrb	r2, [r7, #11]
2000b4fe:	4611      	mov	r1, r2
2000b500:	68f8      	ldr	r0, [r7, #12]
2000b502:	4798      	blx	r3
2000b504:	4603      	mov	r3, r0
2000b506:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
2000b508:	7dfb      	ldrb	r3, [r7, #23]
2000b50a:	2b00      	cmp	r3, #0
2000b50c:	d001      	beq.n	2000b512 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
2000b50e:	7dfb      	ldrb	r3, [r7, #23]
2000b510:	e000      	b.n	2000b514 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
2000b512:	2300      	movs	r3, #0
}
2000b514:	4618      	mov	r0, r3
2000b516:	3718      	adds	r7, #24
2000b518:	46bd      	mov	sp, r7
2000b51a:	bd80      	pop	{r7, pc}

2000b51c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
2000b51c:	b580      	push	{r7, lr}
2000b51e:	b086      	sub	sp, #24
2000b520:	af00      	add	r7, sp, #0
2000b522:	60f8      	str	r0, [r7, #12]
2000b524:	460b      	mov	r3, r1
2000b526:	607a      	str	r2, [r7, #4]
2000b528:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
2000b52a:	7afb      	ldrb	r3, [r7, #11]
2000b52c:	2b00      	cmp	r3, #0
2000b52e:	d178      	bne.n	2000b622 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
2000b530:	68fb      	ldr	r3, [r7, #12]
2000b532:	3314      	adds	r3, #20
2000b534:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
2000b536:	68fb      	ldr	r3, [r7, #12]
2000b538:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
2000b53c:	2b02      	cmp	r3, #2
2000b53e:	d163      	bne.n	2000b608 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
2000b540:	693b      	ldr	r3, [r7, #16]
2000b542:	685b      	ldr	r3, [r3, #4]
2000b544:	693a      	ldr	r2, [r7, #16]
2000b546:	8992      	ldrh	r2, [r2, #12]
2000b548:	4293      	cmp	r3, r2
2000b54a:	d91c      	bls.n	2000b586 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
2000b54c:	693b      	ldr	r3, [r7, #16]
2000b54e:	685b      	ldr	r3, [r3, #4]
2000b550:	693a      	ldr	r2, [r7, #16]
2000b552:	8992      	ldrh	r2, [r2, #12]
2000b554:	1a9a      	subs	r2, r3, r2
2000b556:	693b      	ldr	r3, [r7, #16]
2000b558:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
2000b55a:	693b      	ldr	r3, [r7, #16]
2000b55c:	691b      	ldr	r3, [r3, #16]
2000b55e:	693a      	ldr	r2, [r7, #16]
2000b560:	8992      	ldrh	r2, [r2, #12]
2000b562:	441a      	add	r2, r3
2000b564:	693b      	ldr	r3, [r7, #16]
2000b566:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
2000b568:	693b      	ldr	r3, [r7, #16]
2000b56a:	6919      	ldr	r1, [r3, #16]
2000b56c:	693b      	ldr	r3, [r7, #16]
2000b56e:	685b      	ldr	r3, [r3, #4]
2000b570:	461a      	mov	r2, r3
2000b572:	68f8      	ldr	r0, [r7, #12]
2000b574:	f001 f8ec 	bl	2000c750 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000b578:	2300      	movs	r3, #0
2000b57a:	2200      	movs	r2, #0
2000b57c:	2100      	movs	r1, #0
2000b57e:	68f8      	ldr	r0, [r7, #12]
2000b580:	f001 fd94 	bl	2000d0ac <USBD_LL_PrepareReceive>
2000b584:	e040      	b.n	2000b608 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
2000b586:	693b      	ldr	r3, [r7, #16]
2000b588:	899b      	ldrh	r3, [r3, #12]
2000b58a:	461a      	mov	r2, r3
2000b58c:	693b      	ldr	r3, [r7, #16]
2000b58e:	685b      	ldr	r3, [r3, #4]
2000b590:	429a      	cmp	r2, r3
2000b592:	d11c      	bne.n	2000b5ce <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
2000b594:	693b      	ldr	r3, [r7, #16]
2000b596:	681b      	ldr	r3, [r3, #0]
2000b598:	693a      	ldr	r2, [r7, #16]
2000b59a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
2000b59c:	4293      	cmp	r3, r2
2000b59e:	d316      	bcc.n	2000b5ce <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
2000b5a0:	693b      	ldr	r3, [r7, #16]
2000b5a2:	681a      	ldr	r2, [r3, #0]
2000b5a4:	68fb      	ldr	r3, [r7, #12]
2000b5a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
2000b5aa:	429a      	cmp	r2, r3
2000b5ac:	d20f      	bcs.n	2000b5ce <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
2000b5ae:	2200      	movs	r2, #0
2000b5b0:	2100      	movs	r1, #0
2000b5b2:	68f8      	ldr	r0, [r7, #12]
2000b5b4:	f001 f8cc 	bl	2000c750 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
2000b5b8:	68fb      	ldr	r3, [r7, #12]
2000b5ba:	2200      	movs	r2, #0
2000b5bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000b5c0:	2300      	movs	r3, #0
2000b5c2:	2200      	movs	r2, #0
2000b5c4:	2100      	movs	r1, #0
2000b5c6:	68f8      	ldr	r0, [r7, #12]
2000b5c8:	f001 fd70 	bl	2000d0ac <USBD_LL_PrepareReceive>
2000b5cc:	e01c      	b.n	2000b608 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b5ce:	68fb      	ldr	r3, [r7, #12]
2000b5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b5d4:	b2db      	uxtb	r3, r3
2000b5d6:	2b03      	cmp	r3, #3
2000b5d8:	d10f      	bne.n	2000b5fa <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
2000b5da:	68fb      	ldr	r3, [r7, #12]
2000b5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b5e0:	68db      	ldr	r3, [r3, #12]
2000b5e2:	2b00      	cmp	r3, #0
2000b5e4:	d009      	beq.n	2000b5fa <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
2000b5e6:	68fb      	ldr	r3, [r7, #12]
2000b5e8:	2200      	movs	r2, #0
2000b5ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
2000b5ee:	68fb      	ldr	r3, [r7, #12]
2000b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b5f4:	68db      	ldr	r3, [r3, #12]
2000b5f6:	68f8      	ldr	r0, [r7, #12]
2000b5f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
2000b5fa:	2180      	movs	r1, #128	@ 0x80
2000b5fc:	68f8      	ldr	r0, [r7, #12]
2000b5fe:	f001 fcab 	bl	2000cf58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
2000b602:	68f8      	ldr	r0, [r7, #12]
2000b604:	f001 f8fa 	bl	2000c7fc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
2000b608:	68fb      	ldr	r3, [r7, #12]
2000b60a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
2000b60e:	2b00      	cmp	r3, #0
2000b610:	d03a      	beq.n	2000b688 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
2000b612:	68f8      	ldr	r0, [r7, #12]
2000b614:	f7ff fe30 	bl	2000b278 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
2000b618:	68fb      	ldr	r3, [r7, #12]
2000b61a:	2200      	movs	r2, #0
2000b61c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
2000b620:	e032      	b.n	2000b688 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
2000b622:	7afb      	ldrb	r3, [r7, #11]
2000b624:	f063 037f 	orn	r3, r3, #127	@ 0x7f
2000b628:	b2db      	uxtb	r3, r3
2000b62a:	4619      	mov	r1, r3
2000b62c:	68f8      	ldr	r0, [r7, #12]
2000b62e:	f000 f986 	bl	2000b93e <USBD_CoreFindEP>
2000b632:	4603      	mov	r3, r0
2000b634:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000b636:	7dfb      	ldrb	r3, [r7, #23]
2000b638:	2bff      	cmp	r3, #255	@ 0xff
2000b63a:	d025      	beq.n	2000b688 <USBD_LL_DataInStage+0x16c>
2000b63c:	7dfb      	ldrb	r3, [r7, #23]
2000b63e:	2b00      	cmp	r3, #0
2000b640:	d122      	bne.n	2000b688 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b642:	68fb      	ldr	r3, [r7, #12]
2000b644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b648:	b2db      	uxtb	r3, r3
2000b64a:	2b03      	cmp	r3, #3
2000b64c:	d11c      	bne.n	2000b688 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
2000b64e:	7dfa      	ldrb	r2, [r7, #23]
2000b650:	68fb      	ldr	r3, [r7, #12]
2000b652:	32ae      	adds	r2, #174	@ 0xae
2000b654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b658:	695b      	ldr	r3, [r3, #20]
2000b65a:	2b00      	cmp	r3, #0
2000b65c:	d014      	beq.n	2000b688 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
2000b65e:	7dfa      	ldrb	r2, [r7, #23]
2000b660:	68fb      	ldr	r3, [r7, #12]
2000b662:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
2000b666:	7dfa      	ldrb	r2, [r7, #23]
2000b668:	68fb      	ldr	r3, [r7, #12]
2000b66a:	32ae      	adds	r2, #174	@ 0xae
2000b66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b670:	695b      	ldr	r3, [r3, #20]
2000b672:	7afa      	ldrb	r2, [r7, #11]
2000b674:	4611      	mov	r1, r2
2000b676:	68f8      	ldr	r0, [r7, #12]
2000b678:	4798      	blx	r3
2000b67a:	4603      	mov	r3, r0
2000b67c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
2000b67e:	7dbb      	ldrb	r3, [r7, #22]
2000b680:	2b00      	cmp	r3, #0
2000b682:	d001      	beq.n	2000b688 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
2000b684:	7dbb      	ldrb	r3, [r7, #22]
2000b686:	e000      	b.n	2000b68a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
2000b688:	2300      	movs	r3, #0
}
2000b68a:	4618      	mov	r0, r3
2000b68c:	3718      	adds	r7, #24
2000b68e:	46bd      	mov	sp, r7
2000b690:	bd80      	pop	{r7, pc}

2000b692 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
2000b692:	b580      	push	{r7, lr}
2000b694:	b084      	sub	sp, #16
2000b696:	af00      	add	r7, sp, #0
2000b698:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
2000b69a:	2300      	movs	r3, #0
2000b69c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000b69e:	687b      	ldr	r3, [r7, #4]
2000b6a0:	2201      	movs	r2, #1
2000b6a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
2000b6a6:	687b      	ldr	r3, [r7, #4]
2000b6a8:	2200      	movs	r2, #0
2000b6aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
2000b6ae:	687b      	ldr	r3, [r7, #4]
2000b6b0:	2200      	movs	r2, #0
2000b6b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
2000b6b4:	687b      	ldr	r3, [r7, #4]
2000b6b6:	2200      	movs	r2, #0
2000b6b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
2000b6bc:	687b      	ldr	r3, [r7, #4]
2000b6be:	2200      	movs	r2, #0
2000b6c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
2000b6c4:	687b      	ldr	r3, [r7, #4]
2000b6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b6ca:	2b00      	cmp	r3, #0
2000b6cc:	d014      	beq.n	2000b6f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
2000b6ce:	687b      	ldr	r3, [r7, #4]
2000b6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b6d4:	685b      	ldr	r3, [r3, #4]
2000b6d6:	2b00      	cmp	r3, #0
2000b6d8:	d00e      	beq.n	2000b6f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
2000b6da:	687b      	ldr	r3, [r7, #4]
2000b6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b6e0:	685b      	ldr	r3, [r3, #4]
2000b6e2:	687a      	ldr	r2, [r7, #4]
2000b6e4:	6852      	ldr	r2, [r2, #4]
2000b6e6:	b2d2      	uxtb	r2, r2
2000b6e8:	4611      	mov	r1, r2
2000b6ea:	6878      	ldr	r0, [r7, #4]
2000b6ec:	4798      	blx	r3
2000b6ee:	4603      	mov	r3, r0
2000b6f0:	2b00      	cmp	r3, #0
2000b6f2:	d001      	beq.n	2000b6f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
2000b6f4:	2303      	movs	r3, #3
2000b6f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000b6f8:	2340      	movs	r3, #64	@ 0x40
2000b6fa:	2200      	movs	r2, #0
2000b6fc:	2100      	movs	r1, #0
2000b6fe:	6878      	ldr	r0, [r7, #4]
2000b700:	f001 fbe5 	bl	2000cece <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
2000b704:	687b      	ldr	r3, [r7, #4]
2000b706:	2201      	movs	r2, #1
2000b708:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
2000b70c:	687b      	ldr	r3, [r7, #4]
2000b70e:	2240      	movs	r2, #64	@ 0x40
2000b710:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000b714:	2340      	movs	r3, #64	@ 0x40
2000b716:	2200      	movs	r2, #0
2000b718:	2180      	movs	r1, #128	@ 0x80
2000b71a:	6878      	ldr	r0, [r7, #4]
2000b71c:	f001 fbd7 	bl	2000cece <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
2000b720:	687b      	ldr	r3, [r7, #4]
2000b722:	2201      	movs	r2, #1
2000b724:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
2000b728:	687b      	ldr	r3, [r7, #4]
2000b72a:	2240      	movs	r2, #64	@ 0x40
2000b72c:	841a      	strh	r2, [r3, #32]

  return ret;
2000b72e:	7bfb      	ldrb	r3, [r7, #15]
}
2000b730:	4618      	mov	r0, r3
2000b732:	3710      	adds	r7, #16
2000b734:	46bd      	mov	sp, r7
2000b736:	bd80      	pop	{r7, pc}

2000b738 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
2000b738:	b480      	push	{r7}
2000b73a:	b083      	sub	sp, #12
2000b73c:	af00      	add	r7, sp, #0
2000b73e:	6078      	str	r0, [r7, #4]
2000b740:	460b      	mov	r3, r1
2000b742:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
2000b744:	687b      	ldr	r3, [r7, #4]
2000b746:	78fa      	ldrb	r2, [r7, #3]
2000b748:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
2000b74a:	2300      	movs	r3, #0
}
2000b74c:	4618      	mov	r0, r3
2000b74e:	370c      	adds	r7, #12
2000b750:	46bd      	mov	sp, r7
2000b752:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b756:	4770      	bx	lr

2000b758 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
2000b758:	b480      	push	{r7}
2000b75a:	b083      	sub	sp, #12
2000b75c:	af00      	add	r7, sp, #0
2000b75e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
2000b760:	687b      	ldr	r3, [r7, #4]
2000b762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b766:	b2db      	uxtb	r3, r3
2000b768:	2b04      	cmp	r3, #4
2000b76a:	d006      	beq.n	2000b77a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
2000b76c:	687b      	ldr	r3, [r7, #4]
2000b76e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b772:	b2da      	uxtb	r2, r3
2000b774:	687b      	ldr	r3, [r7, #4]
2000b776:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
2000b77a:	687b      	ldr	r3, [r7, #4]
2000b77c:	2204      	movs	r2, #4
2000b77e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
2000b782:	2300      	movs	r3, #0
}
2000b784:	4618      	mov	r0, r3
2000b786:	370c      	adds	r7, #12
2000b788:	46bd      	mov	sp, r7
2000b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b78e:	4770      	bx	lr

2000b790 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
2000b790:	b480      	push	{r7}
2000b792:	b083      	sub	sp, #12
2000b794:	af00      	add	r7, sp, #0
2000b796:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
2000b798:	687b      	ldr	r3, [r7, #4]
2000b79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b79e:	b2db      	uxtb	r3, r3
2000b7a0:	2b04      	cmp	r3, #4
2000b7a2:	d106      	bne.n	2000b7b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
2000b7a4:	687b      	ldr	r3, [r7, #4]
2000b7a6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
2000b7aa:	b2da      	uxtb	r2, r3
2000b7ac:	687b      	ldr	r3, [r7, #4]
2000b7ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
2000b7b2:	2300      	movs	r3, #0
}
2000b7b4:	4618      	mov	r0, r3
2000b7b6:	370c      	adds	r7, #12
2000b7b8:	46bd      	mov	sp, r7
2000b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b7be:	4770      	bx	lr

2000b7c0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
2000b7c0:	b580      	push	{r7, lr}
2000b7c2:	b082      	sub	sp, #8
2000b7c4:	af00      	add	r7, sp, #0
2000b7c6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b7c8:	687b      	ldr	r3, [r7, #4]
2000b7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b7ce:	b2db      	uxtb	r3, r3
2000b7d0:	2b03      	cmp	r3, #3
2000b7d2:	d110      	bne.n	2000b7f6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
2000b7d4:	687b      	ldr	r3, [r7, #4]
2000b7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b7da:	2b00      	cmp	r3, #0
2000b7dc:	d00b      	beq.n	2000b7f6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
2000b7de:	687b      	ldr	r3, [r7, #4]
2000b7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b7e4:	69db      	ldr	r3, [r3, #28]
2000b7e6:	2b00      	cmp	r3, #0
2000b7e8:	d005      	beq.n	2000b7f6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
2000b7ea:	687b      	ldr	r3, [r7, #4]
2000b7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b7f0:	69db      	ldr	r3, [r3, #28]
2000b7f2:	6878      	ldr	r0, [r7, #4]
2000b7f4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
2000b7f6:	2300      	movs	r3, #0
}
2000b7f8:	4618      	mov	r0, r3
2000b7fa:	3708      	adds	r7, #8
2000b7fc:	46bd      	mov	sp, r7
2000b7fe:	bd80      	pop	{r7, pc}

2000b800 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
2000b800:	b580      	push	{r7, lr}
2000b802:	b082      	sub	sp, #8
2000b804:	af00      	add	r7, sp, #0
2000b806:	6078      	str	r0, [r7, #4]
2000b808:	460b      	mov	r3, r1
2000b80a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000b80c:	687b      	ldr	r3, [r7, #4]
2000b80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b812:	687b      	ldr	r3, [r7, #4]
2000b814:	32ae      	adds	r2, #174	@ 0xae
2000b816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b81a:	2b00      	cmp	r3, #0
2000b81c:	d101      	bne.n	2000b822 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
2000b81e:	2303      	movs	r3, #3
2000b820:	e01c      	b.n	2000b85c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b822:	687b      	ldr	r3, [r7, #4]
2000b824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b828:	b2db      	uxtb	r3, r3
2000b82a:	2b03      	cmp	r3, #3
2000b82c:	d115      	bne.n	2000b85a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
2000b82e:	687b      	ldr	r3, [r7, #4]
2000b830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b834:	687b      	ldr	r3, [r7, #4]
2000b836:	32ae      	adds	r2, #174	@ 0xae
2000b838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b83c:	6a1b      	ldr	r3, [r3, #32]
2000b83e:	2b00      	cmp	r3, #0
2000b840:	d00b      	beq.n	2000b85a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
2000b842:	687b      	ldr	r3, [r7, #4]
2000b844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b848:	687b      	ldr	r3, [r7, #4]
2000b84a:	32ae      	adds	r2, #174	@ 0xae
2000b84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b850:	6a1b      	ldr	r3, [r3, #32]
2000b852:	78fa      	ldrb	r2, [r7, #3]
2000b854:	4611      	mov	r1, r2
2000b856:	6878      	ldr	r0, [r7, #4]
2000b858:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000b85a:	2300      	movs	r3, #0
}
2000b85c:	4618      	mov	r0, r3
2000b85e:	3708      	adds	r7, #8
2000b860:	46bd      	mov	sp, r7
2000b862:	bd80      	pop	{r7, pc}

2000b864 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
2000b864:	b580      	push	{r7, lr}
2000b866:	b082      	sub	sp, #8
2000b868:	af00      	add	r7, sp, #0
2000b86a:	6078      	str	r0, [r7, #4]
2000b86c:	460b      	mov	r3, r1
2000b86e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000b870:	687b      	ldr	r3, [r7, #4]
2000b872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b876:	687b      	ldr	r3, [r7, #4]
2000b878:	32ae      	adds	r2, #174	@ 0xae
2000b87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b87e:	2b00      	cmp	r3, #0
2000b880:	d101      	bne.n	2000b886 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
2000b882:	2303      	movs	r3, #3
2000b884:	e01c      	b.n	2000b8c0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000b886:	687b      	ldr	r3, [r7, #4]
2000b888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b88c:	b2db      	uxtb	r3, r3
2000b88e:	2b03      	cmp	r3, #3
2000b890:	d115      	bne.n	2000b8be <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
2000b892:	687b      	ldr	r3, [r7, #4]
2000b894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b898:	687b      	ldr	r3, [r7, #4]
2000b89a:	32ae      	adds	r2, #174	@ 0xae
2000b89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b8a2:	2b00      	cmp	r3, #0
2000b8a4:	d00b      	beq.n	2000b8be <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
2000b8a6:	687b      	ldr	r3, [r7, #4]
2000b8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000b8ac:	687b      	ldr	r3, [r7, #4]
2000b8ae:	32ae      	adds	r2, #174	@ 0xae
2000b8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000b8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b8b6:	78fa      	ldrb	r2, [r7, #3]
2000b8b8:	4611      	mov	r1, r2
2000b8ba:	6878      	ldr	r0, [r7, #4]
2000b8bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000b8be:	2300      	movs	r3, #0
}
2000b8c0:	4618      	mov	r0, r3
2000b8c2:	3708      	adds	r7, #8
2000b8c4:	46bd      	mov	sp, r7
2000b8c6:	bd80      	pop	{r7, pc}

2000b8c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
2000b8c8:	b480      	push	{r7}
2000b8ca:	b083      	sub	sp, #12
2000b8cc:	af00      	add	r7, sp, #0
2000b8ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
2000b8d0:	2300      	movs	r3, #0
}
2000b8d2:	4618      	mov	r0, r3
2000b8d4:	370c      	adds	r7, #12
2000b8d6:	46bd      	mov	sp, r7
2000b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b8dc:	4770      	bx	lr

2000b8de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
2000b8de:	b580      	push	{r7, lr}
2000b8e0:	b084      	sub	sp, #16
2000b8e2:	af00      	add	r7, sp, #0
2000b8e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
2000b8e6:	2300      	movs	r3, #0
2000b8e8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000b8ea:	687b      	ldr	r3, [r7, #4]
2000b8ec:	2201      	movs	r2, #1
2000b8ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
2000b8f2:	687b      	ldr	r3, [r7, #4]
2000b8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b8f8:	2b00      	cmp	r3, #0
2000b8fa:	d00e      	beq.n	2000b91a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
2000b8fc:	687b      	ldr	r3, [r7, #4]
2000b8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000b902:	685b      	ldr	r3, [r3, #4]
2000b904:	687a      	ldr	r2, [r7, #4]
2000b906:	6852      	ldr	r2, [r2, #4]
2000b908:	b2d2      	uxtb	r2, r2
2000b90a:	4611      	mov	r1, r2
2000b90c:	6878      	ldr	r0, [r7, #4]
2000b90e:	4798      	blx	r3
2000b910:	4603      	mov	r3, r0
2000b912:	2b00      	cmp	r3, #0
2000b914:	d001      	beq.n	2000b91a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
2000b916:	2303      	movs	r3, #3
2000b918:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000b91a:	7bfb      	ldrb	r3, [r7, #15]
}
2000b91c:	4618      	mov	r0, r3
2000b91e:	3710      	adds	r7, #16
2000b920:	46bd      	mov	sp, r7
2000b922:	bd80      	pop	{r7, pc}

2000b924 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000b924:	b480      	push	{r7}
2000b926:	b083      	sub	sp, #12
2000b928:	af00      	add	r7, sp, #0
2000b92a:	6078      	str	r0, [r7, #4]
2000b92c:	460b      	mov	r3, r1
2000b92e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000b930:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000b932:	4618      	mov	r0, r3
2000b934:	370c      	adds	r7, #12
2000b936:	46bd      	mov	sp, r7
2000b938:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b93c:	4770      	bx	lr

2000b93e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000b93e:	b480      	push	{r7}
2000b940:	b083      	sub	sp, #12
2000b942:	af00      	add	r7, sp, #0
2000b944:	6078      	str	r0, [r7, #4]
2000b946:	460b      	mov	r3, r1
2000b948:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000b94a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000b94c:	4618      	mov	r0, r3
2000b94e:	370c      	adds	r7, #12
2000b950:	46bd      	mov	sp, r7
2000b952:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b956:	4770      	bx	lr

2000b958 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
2000b958:	b580      	push	{r7, lr}
2000b95a:	b086      	sub	sp, #24
2000b95c:	af00      	add	r7, sp, #0
2000b95e:	6078      	str	r0, [r7, #4]
2000b960:	460b      	mov	r3, r1
2000b962:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
2000b964:	687b      	ldr	r3, [r7, #4]
2000b966:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
2000b968:	687b      	ldr	r3, [r7, #4]
2000b96a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
2000b96c:	2300      	movs	r3, #0
2000b96e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
2000b970:	68fb      	ldr	r3, [r7, #12]
2000b972:	885b      	ldrh	r3, [r3, #2]
2000b974:	b29b      	uxth	r3, r3
2000b976:	68fa      	ldr	r2, [r7, #12]
2000b978:	7812      	ldrb	r2, [r2, #0]
2000b97a:	4293      	cmp	r3, r2
2000b97c:	d91f      	bls.n	2000b9be <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
2000b97e:	68fb      	ldr	r3, [r7, #12]
2000b980:	781b      	ldrb	r3, [r3, #0]
2000b982:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
2000b984:	e013      	b.n	2000b9ae <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
2000b986:	f107 030a 	add.w	r3, r7, #10
2000b98a:	4619      	mov	r1, r3
2000b98c:	6978      	ldr	r0, [r7, #20]
2000b98e:	f000 f81b 	bl	2000b9c8 <USBD_GetNextDesc>
2000b992:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
2000b994:	697b      	ldr	r3, [r7, #20]
2000b996:	785b      	ldrb	r3, [r3, #1]
2000b998:	2b05      	cmp	r3, #5
2000b99a:	d108      	bne.n	2000b9ae <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
2000b99c:	697b      	ldr	r3, [r7, #20]
2000b99e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
2000b9a0:	693b      	ldr	r3, [r7, #16]
2000b9a2:	789b      	ldrb	r3, [r3, #2]
2000b9a4:	78fa      	ldrb	r2, [r7, #3]
2000b9a6:	429a      	cmp	r2, r3
2000b9a8:	d008      	beq.n	2000b9bc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
2000b9aa:	2300      	movs	r3, #0
2000b9ac:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
2000b9ae:	68fb      	ldr	r3, [r7, #12]
2000b9b0:	885b      	ldrh	r3, [r3, #2]
2000b9b2:	b29a      	uxth	r2, r3
2000b9b4:	897b      	ldrh	r3, [r7, #10]
2000b9b6:	429a      	cmp	r2, r3
2000b9b8:	d8e5      	bhi.n	2000b986 <USBD_GetEpDesc+0x2e>
2000b9ba:	e000      	b.n	2000b9be <USBD_GetEpDesc+0x66>
          break;
2000b9bc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
2000b9be:	693b      	ldr	r3, [r7, #16]
}
2000b9c0:	4618      	mov	r0, r3
2000b9c2:	3718      	adds	r7, #24
2000b9c4:	46bd      	mov	sp, r7
2000b9c6:	bd80      	pop	{r7, pc}

2000b9c8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
2000b9c8:	b480      	push	{r7}
2000b9ca:	b085      	sub	sp, #20
2000b9cc:	af00      	add	r7, sp, #0
2000b9ce:	6078      	str	r0, [r7, #4]
2000b9d0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
2000b9d2:	687b      	ldr	r3, [r7, #4]
2000b9d4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
2000b9d6:	683b      	ldr	r3, [r7, #0]
2000b9d8:	881b      	ldrh	r3, [r3, #0]
2000b9da:	68fa      	ldr	r2, [r7, #12]
2000b9dc:	7812      	ldrb	r2, [r2, #0]
2000b9de:	4413      	add	r3, r2
2000b9e0:	b29a      	uxth	r2, r3
2000b9e2:	683b      	ldr	r3, [r7, #0]
2000b9e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
2000b9e6:	68fb      	ldr	r3, [r7, #12]
2000b9e8:	781b      	ldrb	r3, [r3, #0]
2000b9ea:	461a      	mov	r2, r3
2000b9ec:	687b      	ldr	r3, [r7, #4]
2000b9ee:	4413      	add	r3, r2
2000b9f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
2000b9f2:	68fb      	ldr	r3, [r7, #12]
}
2000b9f4:	4618      	mov	r0, r3
2000b9f6:	3714      	adds	r7, #20
2000b9f8:	46bd      	mov	sp, r7
2000b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b9fe:	4770      	bx	lr

2000ba00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
2000ba00:	b480      	push	{r7}
2000ba02:	b087      	sub	sp, #28
2000ba04:	af00      	add	r7, sp, #0
2000ba06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
2000ba08:	687b      	ldr	r3, [r7, #4]
2000ba0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
2000ba0c:	697b      	ldr	r3, [r7, #20]
2000ba0e:	781b      	ldrb	r3, [r3, #0]
2000ba10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
2000ba12:	697b      	ldr	r3, [r7, #20]
2000ba14:	3301      	adds	r3, #1
2000ba16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
2000ba18:	697b      	ldr	r3, [r7, #20]
2000ba1a:	781b      	ldrb	r3, [r3, #0]
2000ba1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
2000ba1e:	8a3b      	ldrh	r3, [r7, #16]
2000ba20:	021b      	lsls	r3, r3, #8
2000ba22:	b21a      	sxth	r2, r3
2000ba24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
2000ba28:	4313      	orrs	r3, r2
2000ba2a:	b21b      	sxth	r3, r3
2000ba2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
2000ba2e:	89fb      	ldrh	r3, [r7, #14]
}
2000ba30:	4618      	mov	r0, r3
2000ba32:	371c      	adds	r7, #28
2000ba34:	46bd      	mov	sp, r7
2000ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ba3a:	4770      	bx	lr

2000ba3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000ba3c:	b580      	push	{r7, lr}
2000ba3e:	b084      	sub	sp, #16
2000ba40:	af00      	add	r7, sp, #0
2000ba42:	6078      	str	r0, [r7, #4]
2000ba44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000ba46:	2300      	movs	r3, #0
2000ba48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000ba4a:	683b      	ldr	r3, [r7, #0]
2000ba4c:	781b      	ldrb	r3, [r3, #0]
2000ba4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000ba52:	2b40      	cmp	r3, #64	@ 0x40
2000ba54:	d005      	beq.n	2000ba62 <USBD_StdDevReq+0x26>
2000ba56:	2b40      	cmp	r3, #64	@ 0x40
2000ba58:	d857      	bhi.n	2000bb0a <USBD_StdDevReq+0xce>
2000ba5a:	2b00      	cmp	r3, #0
2000ba5c:	d00f      	beq.n	2000ba7e <USBD_StdDevReq+0x42>
2000ba5e:	2b20      	cmp	r3, #32
2000ba60:	d153      	bne.n	2000bb0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
2000ba62:	687b      	ldr	r3, [r7, #4]
2000ba64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000ba68:	687b      	ldr	r3, [r7, #4]
2000ba6a:	32ae      	adds	r2, #174	@ 0xae
2000ba6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ba70:	689b      	ldr	r3, [r3, #8]
2000ba72:	6839      	ldr	r1, [r7, #0]
2000ba74:	6878      	ldr	r0, [r7, #4]
2000ba76:	4798      	blx	r3
2000ba78:	4603      	mov	r3, r0
2000ba7a:	73fb      	strb	r3, [r7, #15]
      break;
2000ba7c:	e04a      	b.n	2000bb14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000ba7e:	683b      	ldr	r3, [r7, #0]
2000ba80:	785b      	ldrb	r3, [r3, #1]
2000ba82:	2b09      	cmp	r3, #9
2000ba84:	d83b      	bhi.n	2000bafe <USBD_StdDevReq+0xc2>
2000ba86:	a201      	add	r2, pc, #4	@ (adr r2, 2000ba8c <USBD_StdDevReq+0x50>)
2000ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000ba8c:	2000bae1 	.word	0x2000bae1
2000ba90:	2000baf5 	.word	0x2000baf5
2000ba94:	2000baff 	.word	0x2000baff
2000ba98:	2000baeb 	.word	0x2000baeb
2000ba9c:	2000baff 	.word	0x2000baff
2000baa0:	2000babf 	.word	0x2000babf
2000baa4:	2000bab5 	.word	0x2000bab5
2000baa8:	2000baff 	.word	0x2000baff
2000baac:	2000bad7 	.word	0x2000bad7
2000bab0:	2000bac9 	.word	0x2000bac9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
2000bab4:	6839      	ldr	r1, [r7, #0]
2000bab6:	6878      	ldr	r0, [r7, #4]
2000bab8:	f000 fa3e 	bl	2000bf38 <USBD_GetDescriptor>
          break;
2000babc:	e024      	b.n	2000bb08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
2000babe:	6839      	ldr	r1, [r7, #0]
2000bac0:	6878      	ldr	r0, [r7, #4]
2000bac2:	f000 fbcd 	bl	2000c260 <USBD_SetAddress>
          break;
2000bac6:	e01f      	b.n	2000bb08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
2000bac8:	6839      	ldr	r1, [r7, #0]
2000baca:	6878      	ldr	r0, [r7, #4]
2000bacc:	f000 fc0c 	bl	2000c2e8 <USBD_SetConfig>
2000bad0:	4603      	mov	r3, r0
2000bad2:	73fb      	strb	r3, [r7, #15]
          break;
2000bad4:	e018      	b.n	2000bb08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
2000bad6:	6839      	ldr	r1, [r7, #0]
2000bad8:	6878      	ldr	r0, [r7, #4]
2000bada:	f000 fcaf 	bl	2000c43c <USBD_GetConfig>
          break;
2000bade:	e013      	b.n	2000bb08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
2000bae0:	6839      	ldr	r1, [r7, #0]
2000bae2:	6878      	ldr	r0, [r7, #4]
2000bae4:	f000 fce0 	bl	2000c4a8 <USBD_GetStatus>
          break;
2000bae8:	e00e      	b.n	2000bb08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
2000baea:	6839      	ldr	r1, [r7, #0]
2000baec:	6878      	ldr	r0, [r7, #4]
2000baee:	f000 fd0f 	bl	2000c510 <USBD_SetFeature>
          break;
2000baf2:	e009      	b.n	2000bb08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
2000baf4:	6839      	ldr	r1, [r7, #0]
2000baf6:	6878      	ldr	r0, [r7, #4]
2000baf8:	f000 fd33 	bl	2000c562 <USBD_ClrFeature>
          break;
2000bafc:	e004      	b.n	2000bb08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
2000bafe:	6839      	ldr	r1, [r7, #0]
2000bb00:	6878      	ldr	r0, [r7, #4]
2000bb02:	f000 fd8a 	bl	2000c61a <USBD_CtlError>
          break;
2000bb06:	bf00      	nop
      }
      break;
2000bb08:	e004      	b.n	2000bb14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
2000bb0a:	6839      	ldr	r1, [r7, #0]
2000bb0c:	6878      	ldr	r0, [r7, #4]
2000bb0e:	f000 fd84 	bl	2000c61a <USBD_CtlError>
      break;
2000bb12:	bf00      	nop
  }

  return ret;
2000bb14:	7bfb      	ldrb	r3, [r7, #15]
}
2000bb16:	4618      	mov	r0, r3
2000bb18:	3710      	adds	r7, #16
2000bb1a:	46bd      	mov	sp, r7
2000bb1c:	bd80      	pop	{r7, pc}
2000bb1e:	bf00      	nop

2000bb20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000bb20:	b580      	push	{r7, lr}
2000bb22:	b084      	sub	sp, #16
2000bb24:	af00      	add	r7, sp, #0
2000bb26:	6078      	str	r0, [r7, #4]
2000bb28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000bb2a:	2300      	movs	r3, #0
2000bb2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000bb2e:	683b      	ldr	r3, [r7, #0]
2000bb30:	781b      	ldrb	r3, [r3, #0]
2000bb32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000bb36:	2b40      	cmp	r3, #64	@ 0x40
2000bb38:	d005      	beq.n	2000bb46 <USBD_StdItfReq+0x26>
2000bb3a:	2b40      	cmp	r3, #64	@ 0x40
2000bb3c:	d852      	bhi.n	2000bbe4 <USBD_StdItfReq+0xc4>
2000bb3e:	2b00      	cmp	r3, #0
2000bb40:	d001      	beq.n	2000bb46 <USBD_StdItfReq+0x26>
2000bb42:	2b20      	cmp	r3, #32
2000bb44:	d14e      	bne.n	2000bbe4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
2000bb46:	687b      	ldr	r3, [r7, #4]
2000bb48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000bb4c:	b2db      	uxtb	r3, r3
2000bb4e:	3b01      	subs	r3, #1
2000bb50:	2b02      	cmp	r3, #2
2000bb52:	d840      	bhi.n	2000bbd6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
2000bb54:	683b      	ldr	r3, [r7, #0]
2000bb56:	889b      	ldrh	r3, [r3, #4]
2000bb58:	b2db      	uxtb	r3, r3
2000bb5a:	2b01      	cmp	r3, #1
2000bb5c:	d836      	bhi.n	2000bbcc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
2000bb5e:	683b      	ldr	r3, [r7, #0]
2000bb60:	889b      	ldrh	r3, [r3, #4]
2000bb62:	b2db      	uxtb	r3, r3
2000bb64:	4619      	mov	r1, r3
2000bb66:	6878      	ldr	r0, [r7, #4]
2000bb68:	f7ff fedc 	bl	2000b924 <USBD_CoreFindIF>
2000bb6c:	4603      	mov	r3, r0
2000bb6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000bb70:	7bbb      	ldrb	r3, [r7, #14]
2000bb72:	2bff      	cmp	r3, #255	@ 0xff
2000bb74:	d01d      	beq.n	2000bbb2 <USBD_StdItfReq+0x92>
2000bb76:	7bbb      	ldrb	r3, [r7, #14]
2000bb78:	2b00      	cmp	r3, #0
2000bb7a:	d11a      	bne.n	2000bbb2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
2000bb7c:	7bba      	ldrb	r2, [r7, #14]
2000bb7e:	687b      	ldr	r3, [r7, #4]
2000bb80:	32ae      	adds	r2, #174	@ 0xae
2000bb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bb86:	689b      	ldr	r3, [r3, #8]
2000bb88:	2b00      	cmp	r3, #0
2000bb8a:	d00f      	beq.n	2000bbac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
2000bb8c:	7bba      	ldrb	r2, [r7, #14]
2000bb8e:	687b      	ldr	r3, [r7, #4]
2000bb90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000bb94:	7bba      	ldrb	r2, [r7, #14]
2000bb96:	687b      	ldr	r3, [r7, #4]
2000bb98:	32ae      	adds	r2, #174	@ 0xae
2000bb9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bb9e:	689b      	ldr	r3, [r3, #8]
2000bba0:	6839      	ldr	r1, [r7, #0]
2000bba2:	6878      	ldr	r0, [r7, #4]
2000bba4:	4798      	blx	r3
2000bba6:	4603      	mov	r3, r0
2000bba8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000bbaa:	e004      	b.n	2000bbb6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
2000bbac:	2303      	movs	r3, #3
2000bbae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000bbb0:	e001      	b.n	2000bbb6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
2000bbb2:	2303      	movs	r3, #3
2000bbb4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
2000bbb6:	683b      	ldr	r3, [r7, #0]
2000bbb8:	88db      	ldrh	r3, [r3, #6]
2000bbba:	2b00      	cmp	r3, #0
2000bbbc:	d110      	bne.n	2000bbe0 <USBD_StdItfReq+0xc0>
2000bbbe:	7bfb      	ldrb	r3, [r7, #15]
2000bbc0:	2b00      	cmp	r3, #0
2000bbc2:	d10d      	bne.n	2000bbe0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
2000bbc4:	6878      	ldr	r0, [r7, #4]
2000bbc6:	f000 fe06 	bl	2000c7d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
2000bbca:	e009      	b.n	2000bbe0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
2000bbcc:	6839      	ldr	r1, [r7, #0]
2000bbce:	6878      	ldr	r0, [r7, #4]
2000bbd0:	f000 fd23 	bl	2000c61a <USBD_CtlError>
          break;
2000bbd4:	e004      	b.n	2000bbe0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
2000bbd6:	6839      	ldr	r1, [r7, #0]
2000bbd8:	6878      	ldr	r0, [r7, #4]
2000bbda:	f000 fd1e 	bl	2000c61a <USBD_CtlError>
          break;
2000bbde:	e000      	b.n	2000bbe2 <USBD_StdItfReq+0xc2>
          break;
2000bbe0:	bf00      	nop
      }
      break;
2000bbe2:	e004      	b.n	2000bbee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
2000bbe4:	6839      	ldr	r1, [r7, #0]
2000bbe6:	6878      	ldr	r0, [r7, #4]
2000bbe8:	f000 fd17 	bl	2000c61a <USBD_CtlError>
      break;
2000bbec:	bf00      	nop
  }

  return ret;
2000bbee:	7bfb      	ldrb	r3, [r7, #15]
}
2000bbf0:	4618      	mov	r0, r3
2000bbf2:	3710      	adds	r7, #16
2000bbf4:	46bd      	mov	sp, r7
2000bbf6:	bd80      	pop	{r7, pc}

2000bbf8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000bbf8:	b580      	push	{r7, lr}
2000bbfa:	b084      	sub	sp, #16
2000bbfc:	af00      	add	r7, sp, #0
2000bbfe:	6078      	str	r0, [r7, #4]
2000bc00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
2000bc02:	2300      	movs	r3, #0
2000bc04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
2000bc06:	683b      	ldr	r3, [r7, #0]
2000bc08:	889b      	ldrh	r3, [r3, #4]
2000bc0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000bc0c:	683b      	ldr	r3, [r7, #0]
2000bc0e:	781b      	ldrb	r3, [r3, #0]
2000bc10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000bc14:	2b40      	cmp	r3, #64	@ 0x40
2000bc16:	d007      	beq.n	2000bc28 <USBD_StdEPReq+0x30>
2000bc18:	2b40      	cmp	r3, #64	@ 0x40
2000bc1a:	f200 8181 	bhi.w	2000bf20 <USBD_StdEPReq+0x328>
2000bc1e:	2b00      	cmp	r3, #0
2000bc20:	d02a      	beq.n	2000bc78 <USBD_StdEPReq+0x80>
2000bc22:	2b20      	cmp	r3, #32
2000bc24:	f040 817c 	bne.w	2000bf20 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
2000bc28:	7bbb      	ldrb	r3, [r7, #14]
2000bc2a:	4619      	mov	r1, r3
2000bc2c:	6878      	ldr	r0, [r7, #4]
2000bc2e:	f7ff fe86 	bl	2000b93e <USBD_CoreFindEP>
2000bc32:	4603      	mov	r3, r0
2000bc34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000bc36:	7b7b      	ldrb	r3, [r7, #13]
2000bc38:	2bff      	cmp	r3, #255	@ 0xff
2000bc3a:	f000 8176 	beq.w	2000bf2a <USBD_StdEPReq+0x332>
2000bc3e:	7b7b      	ldrb	r3, [r7, #13]
2000bc40:	2b00      	cmp	r3, #0
2000bc42:	f040 8172 	bne.w	2000bf2a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
2000bc46:	7b7a      	ldrb	r2, [r7, #13]
2000bc48:	687b      	ldr	r3, [r7, #4]
2000bc4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
2000bc4e:	7b7a      	ldrb	r2, [r7, #13]
2000bc50:	687b      	ldr	r3, [r7, #4]
2000bc52:	32ae      	adds	r2, #174	@ 0xae
2000bc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bc58:	689b      	ldr	r3, [r3, #8]
2000bc5a:	2b00      	cmp	r3, #0
2000bc5c:	f000 8165 	beq.w	2000bf2a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
2000bc60:	7b7a      	ldrb	r2, [r7, #13]
2000bc62:	687b      	ldr	r3, [r7, #4]
2000bc64:	32ae      	adds	r2, #174	@ 0xae
2000bc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bc6a:	689b      	ldr	r3, [r3, #8]
2000bc6c:	6839      	ldr	r1, [r7, #0]
2000bc6e:	6878      	ldr	r0, [r7, #4]
2000bc70:	4798      	blx	r3
2000bc72:	4603      	mov	r3, r0
2000bc74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
2000bc76:	e158      	b.n	2000bf2a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000bc78:	683b      	ldr	r3, [r7, #0]
2000bc7a:	785b      	ldrb	r3, [r3, #1]
2000bc7c:	2b03      	cmp	r3, #3
2000bc7e:	d008      	beq.n	2000bc92 <USBD_StdEPReq+0x9a>
2000bc80:	2b03      	cmp	r3, #3
2000bc82:	f300 8147 	bgt.w	2000bf14 <USBD_StdEPReq+0x31c>
2000bc86:	2b00      	cmp	r3, #0
2000bc88:	f000 809b 	beq.w	2000bdc2 <USBD_StdEPReq+0x1ca>
2000bc8c:	2b01      	cmp	r3, #1
2000bc8e:	d03c      	beq.n	2000bd0a <USBD_StdEPReq+0x112>
2000bc90:	e140      	b.n	2000bf14 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
2000bc92:	687b      	ldr	r3, [r7, #4]
2000bc94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000bc98:	b2db      	uxtb	r3, r3
2000bc9a:	2b02      	cmp	r3, #2
2000bc9c:	d002      	beq.n	2000bca4 <USBD_StdEPReq+0xac>
2000bc9e:	2b03      	cmp	r3, #3
2000bca0:	d016      	beq.n	2000bcd0 <USBD_StdEPReq+0xd8>
2000bca2:	e02c      	b.n	2000bcfe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000bca4:	7bbb      	ldrb	r3, [r7, #14]
2000bca6:	2b00      	cmp	r3, #0
2000bca8:	d00d      	beq.n	2000bcc6 <USBD_StdEPReq+0xce>
2000bcaa:	7bbb      	ldrb	r3, [r7, #14]
2000bcac:	2b80      	cmp	r3, #128	@ 0x80
2000bcae:	d00a      	beq.n	2000bcc6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000bcb0:	7bbb      	ldrb	r3, [r7, #14]
2000bcb2:	4619      	mov	r1, r3
2000bcb4:	6878      	ldr	r0, [r7, #4]
2000bcb6:	f001 f94f 	bl	2000cf58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000bcba:	2180      	movs	r1, #128	@ 0x80
2000bcbc:	6878      	ldr	r0, [r7, #4]
2000bcbe:	f001 f94b 	bl	2000cf58 <USBD_LL_StallEP>
2000bcc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000bcc4:	e020      	b.n	2000bd08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
2000bcc6:	6839      	ldr	r1, [r7, #0]
2000bcc8:	6878      	ldr	r0, [r7, #4]
2000bcca:	f000 fca6 	bl	2000c61a <USBD_CtlError>
              break;
2000bcce:	e01b      	b.n	2000bd08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000bcd0:	683b      	ldr	r3, [r7, #0]
2000bcd2:	885b      	ldrh	r3, [r3, #2]
2000bcd4:	2b00      	cmp	r3, #0
2000bcd6:	d10e      	bne.n	2000bcf6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
2000bcd8:	7bbb      	ldrb	r3, [r7, #14]
2000bcda:	2b00      	cmp	r3, #0
2000bcdc:	d00b      	beq.n	2000bcf6 <USBD_StdEPReq+0xfe>
2000bcde:	7bbb      	ldrb	r3, [r7, #14]
2000bce0:	2b80      	cmp	r3, #128	@ 0x80
2000bce2:	d008      	beq.n	2000bcf6 <USBD_StdEPReq+0xfe>
2000bce4:	683b      	ldr	r3, [r7, #0]
2000bce6:	88db      	ldrh	r3, [r3, #6]
2000bce8:	2b00      	cmp	r3, #0
2000bcea:	d104      	bne.n	2000bcf6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
2000bcec:	7bbb      	ldrb	r3, [r7, #14]
2000bcee:	4619      	mov	r1, r3
2000bcf0:	6878      	ldr	r0, [r7, #4]
2000bcf2:	f001 f931 	bl	2000cf58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
2000bcf6:	6878      	ldr	r0, [r7, #4]
2000bcf8:	f000 fd6d 	bl	2000c7d6 <USBD_CtlSendStatus>

              break;
2000bcfc:	e004      	b.n	2000bd08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
2000bcfe:	6839      	ldr	r1, [r7, #0]
2000bd00:	6878      	ldr	r0, [r7, #4]
2000bd02:	f000 fc8a 	bl	2000c61a <USBD_CtlError>
              break;
2000bd06:	bf00      	nop
          }
          break;
2000bd08:	e109      	b.n	2000bf1e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
2000bd0a:	687b      	ldr	r3, [r7, #4]
2000bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000bd10:	b2db      	uxtb	r3, r3
2000bd12:	2b02      	cmp	r3, #2
2000bd14:	d002      	beq.n	2000bd1c <USBD_StdEPReq+0x124>
2000bd16:	2b03      	cmp	r3, #3
2000bd18:	d016      	beq.n	2000bd48 <USBD_StdEPReq+0x150>
2000bd1a:	e04b      	b.n	2000bdb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000bd1c:	7bbb      	ldrb	r3, [r7, #14]
2000bd1e:	2b00      	cmp	r3, #0
2000bd20:	d00d      	beq.n	2000bd3e <USBD_StdEPReq+0x146>
2000bd22:	7bbb      	ldrb	r3, [r7, #14]
2000bd24:	2b80      	cmp	r3, #128	@ 0x80
2000bd26:	d00a      	beq.n	2000bd3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000bd28:	7bbb      	ldrb	r3, [r7, #14]
2000bd2a:	4619      	mov	r1, r3
2000bd2c:	6878      	ldr	r0, [r7, #4]
2000bd2e:	f001 f913 	bl	2000cf58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000bd32:	2180      	movs	r1, #128	@ 0x80
2000bd34:	6878      	ldr	r0, [r7, #4]
2000bd36:	f001 f90f 	bl	2000cf58 <USBD_LL_StallEP>
2000bd3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000bd3c:	e040      	b.n	2000bdc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
2000bd3e:	6839      	ldr	r1, [r7, #0]
2000bd40:	6878      	ldr	r0, [r7, #4]
2000bd42:	f000 fc6a 	bl	2000c61a <USBD_CtlError>
              break;
2000bd46:	e03b      	b.n	2000bdc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000bd48:	683b      	ldr	r3, [r7, #0]
2000bd4a:	885b      	ldrh	r3, [r3, #2]
2000bd4c:	2b00      	cmp	r3, #0
2000bd4e:	d136      	bne.n	2000bdbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
2000bd50:	7bbb      	ldrb	r3, [r7, #14]
2000bd52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000bd56:	2b00      	cmp	r3, #0
2000bd58:	d004      	beq.n	2000bd64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
2000bd5a:	7bbb      	ldrb	r3, [r7, #14]
2000bd5c:	4619      	mov	r1, r3
2000bd5e:	6878      	ldr	r0, [r7, #4]
2000bd60:	f001 f919 	bl	2000cf96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
2000bd64:	6878      	ldr	r0, [r7, #4]
2000bd66:	f000 fd36 	bl	2000c7d6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
2000bd6a:	7bbb      	ldrb	r3, [r7, #14]
2000bd6c:	4619      	mov	r1, r3
2000bd6e:	6878      	ldr	r0, [r7, #4]
2000bd70:	f7ff fde5 	bl	2000b93e <USBD_CoreFindEP>
2000bd74:	4603      	mov	r3, r0
2000bd76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000bd78:	7b7b      	ldrb	r3, [r7, #13]
2000bd7a:	2bff      	cmp	r3, #255	@ 0xff
2000bd7c:	d01f      	beq.n	2000bdbe <USBD_StdEPReq+0x1c6>
2000bd7e:	7b7b      	ldrb	r3, [r7, #13]
2000bd80:	2b00      	cmp	r3, #0
2000bd82:	d11c      	bne.n	2000bdbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
2000bd84:	7b7a      	ldrb	r2, [r7, #13]
2000bd86:	687b      	ldr	r3, [r7, #4]
2000bd88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
2000bd8c:	7b7a      	ldrb	r2, [r7, #13]
2000bd8e:	687b      	ldr	r3, [r7, #4]
2000bd90:	32ae      	adds	r2, #174	@ 0xae
2000bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bd96:	689b      	ldr	r3, [r3, #8]
2000bd98:	2b00      	cmp	r3, #0
2000bd9a:	d010      	beq.n	2000bdbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000bd9c:	7b7a      	ldrb	r2, [r7, #13]
2000bd9e:	687b      	ldr	r3, [r7, #4]
2000bda0:	32ae      	adds	r2, #174	@ 0xae
2000bda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000bda6:	689b      	ldr	r3, [r3, #8]
2000bda8:	6839      	ldr	r1, [r7, #0]
2000bdaa:	6878      	ldr	r0, [r7, #4]
2000bdac:	4798      	blx	r3
2000bdae:	4603      	mov	r3, r0
2000bdb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
2000bdb2:	e004      	b.n	2000bdbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
2000bdb4:	6839      	ldr	r1, [r7, #0]
2000bdb6:	6878      	ldr	r0, [r7, #4]
2000bdb8:	f000 fc2f 	bl	2000c61a <USBD_CtlError>
              break;
2000bdbc:	e000      	b.n	2000bdc0 <USBD_StdEPReq+0x1c8>
              break;
2000bdbe:	bf00      	nop
          }
          break;
2000bdc0:	e0ad      	b.n	2000bf1e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
2000bdc2:	687b      	ldr	r3, [r7, #4]
2000bdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000bdc8:	b2db      	uxtb	r3, r3
2000bdca:	2b02      	cmp	r3, #2
2000bdcc:	d002      	beq.n	2000bdd4 <USBD_StdEPReq+0x1dc>
2000bdce:	2b03      	cmp	r3, #3
2000bdd0:	d033      	beq.n	2000be3a <USBD_StdEPReq+0x242>
2000bdd2:	e099      	b.n	2000bf08 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000bdd4:	7bbb      	ldrb	r3, [r7, #14]
2000bdd6:	2b00      	cmp	r3, #0
2000bdd8:	d007      	beq.n	2000bdea <USBD_StdEPReq+0x1f2>
2000bdda:	7bbb      	ldrb	r3, [r7, #14]
2000bddc:	2b80      	cmp	r3, #128	@ 0x80
2000bdde:	d004      	beq.n	2000bdea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
2000bde0:	6839      	ldr	r1, [r7, #0]
2000bde2:	6878      	ldr	r0, [r7, #4]
2000bde4:	f000 fc19 	bl	2000c61a <USBD_CtlError>
                break;
2000bde8:	e093      	b.n	2000bf12 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000bdea:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000bdee:	2b00      	cmp	r3, #0
2000bdf0:	da0b      	bge.n	2000be0a <USBD_StdEPReq+0x212>
2000bdf2:	7bbb      	ldrb	r3, [r7, #14]
2000bdf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000bdf8:	4613      	mov	r3, r2
2000bdfa:	009b      	lsls	r3, r3, #2
2000bdfc:	4413      	add	r3, r2
2000bdfe:	009b      	lsls	r3, r3, #2
2000be00:	3310      	adds	r3, #16
2000be02:	687a      	ldr	r2, [r7, #4]
2000be04:	4413      	add	r3, r2
2000be06:	3304      	adds	r3, #4
2000be08:	e00b      	b.n	2000be22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000be0a:	7bbb      	ldrb	r3, [r7, #14]
2000be0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000be10:	4613      	mov	r3, r2
2000be12:	009b      	lsls	r3, r3, #2
2000be14:	4413      	add	r3, r2
2000be16:	009b      	lsls	r3, r3, #2
2000be18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000be1c:	687a      	ldr	r2, [r7, #4]
2000be1e:	4413      	add	r3, r2
2000be20:	3304      	adds	r3, #4
2000be22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
2000be24:	68bb      	ldr	r3, [r7, #8]
2000be26:	2200      	movs	r2, #0
2000be28:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000be2a:	68bb      	ldr	r3, [r7, #8]
2000be2c:	330e      	adds	r3, #14
2000be2e:	2202      	movs	r2, #2
2000be30:	4619      	mov	r1, r3
2000be32:	6878      	ldr	r0, [r7, #4]
2000be34:	f000 fc6e 	bl	2000c714 <USBD_CtlSendData>
              break;
2000be38:	e06b      	b.n	2000bf12 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
2000be3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000be3e:	2b00      	cmp	r3, #0
2000be40:	da11      	bge.n	2000be66 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
2000be42:	7bbb      	ldrb	r3, [r7, #14]
2000be44:	f003 020f 	and.w	r2, r3, #15
2000be48:	6879      	ldr	r1, [r7, #4]
2000be4a:	4613      	mov	r3, r2
2000be4c:	009b      	lsls	r3, r3, #2
2000be4e:	4413      	add	r3, r2
2000be50:	009b      	lsls	r3, r3, #2
2000be52:	440b      	add	r3, r1
2000be54:	3323      	adds	r3, #35	@ 0x23
2000be56:	781b      	ldrb	r3, [r3, #0]
2000be58:	2b00      	cmp	r3, #0
2000be5a:	d117      	bne.n	2000be8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000be5c:	6839      	ldr	r1, [r7, #0]
2000be5e:	6878      	ldr	r0, [r7, #4]
2000be60:	f000 fbdb 	bl	2000c61a <USBD_CtlError>
                  break;
2000be64:	e055      	b.n	2000bf12 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
2000be66:	7bbb      	ldrb	r3, [r7, #14]
2000be68:	f003 020f 	and.w	r2, r3, #15
2000be6c:	6879      	ldr	r1, [r7, #4]
2000be6e:	4613      	mov	r3, r2
2000be70:	009b      	lsls	r3, r3, #2
2000be72:	4413      	add	r3, r2
2000be74:	009b      	lsls	r3, r3, #2
2000be76:	440b      	add	r3, r1
2000be78:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000be7c:	781b      	ldrb	r3, [r3, #0]
2000be7e:	2b00      	cmp	r3, #0
2000be80:	d104      	bne.n	2000be8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000be82:	6839      	ldr	r1, [r7, #0]
2000be84:	6878      	ldr	r0, [r7, #4]
2000be86:	f000 fbc8 	bl	2000c61a <USBD_CtlError>
                  break;
2000be8a:	e042      	b.n	2000bf12 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000be8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000be90:	2b00      	cmp	r3, #0
2000be92:	da0b      	bge.n	2000beac <USBD_StdEPReq+0x2b4>
2000be94:	7bbb      	ldrb	r3, [r7, #14]
2000be96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000be9a:	4613      	mov	r3, r2
2000be9c:	009b      	lsls	r3, r3, #2
2000be9e:	4413      	add	r3, r2
2000bea0:	009b      	lsls	r3, r3, #2
2000bea2:	3310      	adds	r3, #16
2000bea4:	687a      	ldr	r2, [r7, #4]
2000bea6:	4413      	add	r3, r2
2000bea8:	3304      	adds	r3, #4
2000beaa:	e00b      	b.n	2000bec4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000beac:	7bbb      	ldrb	r3, [r7, #14]
2000beae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000beb2:	4613      	mov	r3, r2
2000beb4:	009b      	lsls	r3, r3, #2
2000beb6:	4413      	add	r3, r2
2000beb8:	009b      	lsls	r3, r3, #2
2000beba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000bebe:	687a      	ldr	r2, [r7, #4]
2000bec0:	4413      	add	r3, r2
2000bec2:	3304      	adds	r3, #4
2000bec4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
2000bec6:	7bbb      	ldrb	r3, [r7, #14]
2000bec8:	2b00      	cmp	r3, #0
2000beca:	d002      	beq.n	2000bed2 <USBD_StdEPReq+0x2da>
2000becc:	7bbb      	ldrb	r3, [r7, #14]
2000bece:	2b80      	cmp	r3, #128	@ 0x80
2000bed0:	d103      	bne.n	2000beda <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
2000bed2:	68bb      	ldr	r3, [r7, #8]
2000bed4:	2200      	movs	r2, #0
2000bed6:	739a      	strb	r2, [r3, #14]
2000bed8:	e00e      	b.n	2000bef8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
2000beda:	7bbb      	ldrb	r3, [r7, #14]
2000bedc:	4619      	mov	r1, r3
2000bede:	6878      	ldr	r0, [r7, #4]
2000bee0:	f001 f878 	bl	2000cfd4 <USBD_LL_IsStallEP>
2000bee4:	4603      	mov	r3, r0
2000bee6:	2b00      	cmp	r3, #0
2000bee8:	d003      	beq.n	2000bef2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
2000beea:	68bb      	ldr	r3, [r7, #8]
2000beec:	2201      	movs	r2, #1
2000beee:	739a      	strb	r2, [r3, #14]
2000bef0:	e002      	b.n	2000bef8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
2000bef2:	68bb      	ldr	r3, [r7, #8]
2000bef4:	2200      	movs	r2, #0
2000bef6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000bef8:	68bb      	ldr	r3, [r7, #8]
2000befa:	330e      	adds	r3, #14
2000befc:	2202      	movs	r2, #2
2000befe:	4619      	mov	r1, r3
2000bf00:	6878      	ldr	r0, [r7, #4]
2000bf02:	f000 fc07 	bl	2000c714 <USBD_CtlSendData>
              break;
2000bf06:	e004      	b.n	2000bf12 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
2000bf08:	6839      	ldr	r1, [r7, #0]
2000bf0a:	6878      	ldr	r0, [r7, #4]
2000bf0c:	f000 fb85 	bl	2000c61a <USBD_CtlError>
              break;
2000bf10:	bf00      	nop
          }
          break;
2000bf12:	e004      	b.n	2000bf1e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
2000bf14:	6839      	ldr	r1, [r7, #0]
2000bf16:	6878      	ldr	r0, [r7, #4]
2000bf18:	f000 fb7f 	bl	2000c61a <USBD_CtlError>
          break;
2000bf1c:	bf00      	nop
      }
      break;
2000bf1e:	e005      	b.n	2000bf2c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
2000bf20:	6839      	ldr	r1, [r7, #0]
2000bf22:	6878      	ldr	r0, [r7, #4]
2000bf24:	f000 fb79 	bl	2000c61a <USBD_CtlError>
      break;
2000bf28:	e000      	b.n	2000bf2c <USBD_StdEPReq+0x334>
      break;
2000bf2a:	bf00      	nop
  }

  return ret;
2000bf2c:	7bfb      	ldrb	r3, [r7, #15]
}
2000bf2e:	4618      	mov	r0, r3
2000bf30:	3710      	adds	r7, #16
2000bf32:	46bd      	mov	sp, r7
2000bf34:	bd80      	pop	{r7, pc}
	...

2000bf38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000bf38:	b580      	push	{r7, lr}
2000bf3a:	b084      	sub	sp, #16
2000bf3c:	af00      	add	r7, sp, #0
2000bf3e:	6078      	str	r0, [r7, #4]
2000bf40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000bf42:	2300      	movs	r3, #0
2000bf44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
2000bf46:	2300      	movs	r3, #0
2000bf48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
2000bf4a:	2300      	movs	r3, #0
2000bf4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
2000bf4e:	683b      	ldr	r3, [r7, #0]
2000bf50:	885b      	ldrh	r3, [r3, #2]
2000bf52:	0a1b      	lsrs	r3, r3, #8
2000bf54:	b29b      	uxth	r3, r3
2000bf56:	3b01      	subs	r3, #1
2000bf58:	2b0e      	cmp	r3, #14
2000bf5a:	f200 8152 	bhi.w	2000c202 <USBD_GetDescriptor+0x2ca>
2000bf5e:	a201      	add	r2, pc, #4	@ (adr r2, 2000bf64 <USBD_GetDescriptor+0x2c>)
2000bf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000bf64:	2000bfd5 	.word	0x2000bfd5
2000bf68:	2000bfed 	.word	0x2000bfed
2000bf6c:	2000c02d 	.word	0x2000c02d
2000bf70:	2000c203 	.word	0x2000c203
2000bf74:	2000c203 	.word	0x2000c203
2000bf78:	2000c1a3 	.word	0x2000c1a3
2000bf7c:	2000c1cf 	.word	0x2000c1cf
2000bf80:	2000c203 	.word	0x2000c203
2000bf84:	2000c203 	.word	0x2000c203
2000bf88:	2000c203 	.word	0x2000c203
2000bf8c:	2000c203 	.word	0x2000c203
2000bf90:	2000c203 	.word	0x2000c203
2000bf94:	2000c203 	.word	0x2000c203
2000bf98:	2000c203 	.word	0x2000c203
2000bf9c:	2000bfa1 	.word	0x2000bfa1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
2000bfa0:	687b      	ldr	r3, [r7, #4]
2000bfa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000bfa6:	69db      	ldr	r3, [r3, #28]
2000bfa8:	2b00      	cmp	r3, #0
2000bfaa:	d00b      	beq.n	2000bfc4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
2000bfac:	687b      	ldr	r3, [r7, #4]
2000bfae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000bfb2:	69db      	ldr	r3, [r3, #28]
2000bfb4:	687a      	ldr	r2, [r7, #4]
2000bfb6:	7c12      	ldrb	r2, [r2, #16]
2000bfb8:	f107 0108 	add.w	r1, r7, #8
2000bfbc:	4610      	mov	r0, r2
2000bfbe:	4798      	blx	r3
2000bfc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000bfc2:	e126      	b.n	2000c212 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000bfc4:	6839      	ldr	r1, [r7, #0]
2000bfc6:	6878      	ldr	r0, [r7, #4]
2000bfc8:	f000 fb27 	bl	2000c61a <USBD_CtlError>
        err++;
2000bfcc:	7afb      	ldrb	r3, [r7, #11]
2000bfce:	3301      	adds	r3, #1
2000bfd0:	72fb      	strb	r3, [r7, #11]
      break;
2000bfd2:	e11e      	b.n	2000c212 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
2000bfd4:	687b      	ldr	r3, [r7, #4]
2000bfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000bfda:	681b      	ldr	r3, [r3, #0]
2000bfdc:	687a      	ldr	r2, [r7, #4]
2000bfde:	7c12      	ldrb	r2, [r2, #16]
2000bfe0:	f107 0108 	add.w	r1, r7, #8
2000bfe4:	4610      	mov	r0, r2
2000bfe6:	4798      	blx	r3
2000bfe8:	60f8      	str	r0, [r7, #12]
      break;
2000bfea:	e112      	b.n	2000c212 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000bfec:	687b      	ldr	r3, [r7, #4]
2000bfee:	7c1b      	ldrb	r3, [r3, #16]
2000bff0:	2b00      	cmp	r3, #0
2000bff2:	d10d      	bne.n	2000c010 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
2000bff4:	687b      	ldr	r3, [r7, #4]
2000bff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000bffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000bffc:	f107 0208 	add.w	r2, r7, #8
2000c000:	4610      	mov	r0, r2
2000c002:	4798      	blx	r3
2000c004:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000c006:	68fb      	ldr	r3, [r7, #12]
2000c008:	3301      	adds	r3, #1
2000c00a:	2202      	movs	r2, #2
2000c00c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
2000c00e:	e100      	b.n	2000c212 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
2000c010:	687b      	ldr	r3, [r7, #4]
2000c012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000c016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c018:	f107 0208 	add.w	r2, r7, #8
2000c01c:	4610      	mov	r0, r2
2000c01e:	4798      	blx	r3
2000c020:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000c022:	68fb      	ldr	r3, [r7, #12]
2000c024:	3301      	adds	r3, #1
2000c026:	2202      	movs	r2, #2
2000c028:	701a      	strb	r2, [r3, #0]
      break;
2000c02a:	e0f2      	b.n	2000c212 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
2000c02c:	683b      	ldr	r3, [r7, #0]
2000c02e:	885b      	ldrh	r3, [r3, #2]
2000c030:	b2db      	uxtb	r3, r3
2000c032:	2b05      	cmp	r3, #5
2000c034:	f200 80ac 	bhi.w	2000c190 <USBD_GetDescriptor+0x258>
2000c038:	a201      	add	r2, pc, #4	@ (adr r2, 2000c040 <USBD_GetDescriptor+0x108>)
2000c03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000c03e:	bf00      	nop
2000c040:	2000c059 	.word	0x2000c059
2000c044:	2000c08d 	.word	0x2000c08d
2000c048:	2000c0c1 	.word	0x2000c0c1
2000c04c:	2000c0f5 	.word	0x2000c0f5
2000c050:	2000c129 	.word	0x2000c129
2000c054:	2000c15d 	.word	0x2000c15d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
2000c058:	687b      	ldr	r3, [r7, #4]
2000c05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c05e:	685b      	ldr	r3, [r3, #4]
2000c060:	2b00      	cmp	r3, #0
2000c062:	d00b      	beq.n	2000c07c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
2000c064:	687b      	ldr	r3, [r7, #4]
2000c066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c06a:	685b      	ldr	r3, [r3, #4]
2000c06c:	687a      	ldr	r2, [r7, #4]
2000c06e:	7c12      	ldrb	r2, [r2, #16]
2000c070:	f107 0108 	add.w	r1, r7, #8
2000c074:	4610      	mov	r0, r2
2000c076:	4798      	blx	r3
2000c078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c07a:	e091      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c07c:	6839      	ldr	r1, [r7, #0]
2000c07e:	6878      	ldr	r0, [r7, #4]
2000c080:	f000 facb 	bl	2000c61a <USBD_CtlError>
            err++;
2000c084:	7afb      	ldrb	r3, [r7, #11]
2000c086:	3301      	adds	r3, #1
2000c088:	72fb      	strb	r3, [r7, #11]
          break;
2000c08a:	e089      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
2000c08c:	687b      	ldr	r3, [r7, #4]
2000c08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c092:	689b      	ldr	r3, [r3, #8]
2000c094:	2b00      	cmp	r3, #0
2000c096:	d00b      	beq.n	2000c0b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
2000c098:	687b      	ldr	r3, [r7, #4]
2000c09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c09e:	689b      	ldr	r3, [r3, #8]
2000c0a0:	687a      	ldr	r2, [r7, #4]
2000c0a2:	7c12      	ldrb	r2, [r2, #16]
2000c0a4:	f107 0108 	add.w	r1, r7, #8
2000c0a8:	4610      	mov	r0, r2
2000c0aa:	4798      	blx	r3
2000c0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c0ae:	e077      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c0b0:	6839      	ldr	r1, [r7, #0]
2000c0b2:	6878      	ldr	r0, [r7, #4]
2000c0b4:	f000 fab1 	bl	2000c61a <USBD_CtlError>
            err++;
2000c0b8:	7afb      	ldrb	r3, [r7, #11]
2000c0ba:	3301      	adds	r3, #1
2000c0bc:	72fb      	strb	r3, [r7, #11]
          break;
2000c0be:	e06f      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
2000c0c0:	687b      	ldr	r3, [r7, #4]
2000c0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c0c6:	68db      	ldr	r3, [r3, #12]
2000c0c8:	2b00      	cmp	r3, #0
2000c0ca:	d00b      	beq.n	2000c0e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
2000c0cc:	687b      	ldr	r3, [r7, #4]
2000c0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c0d2:	68db      	ldr	r3, [r3, #12]
2000c0d4:	687a      	ldr	r2, [r7, #4]
2000c0d6:	7c12      	ldrb	r2, [r2, #16]
2000c0d8:	f107 0108 	add.w	r1, r7, #8
2000c0dc:	4610      	mov	r0, r2
2000c0de:	4798      	blx	r3
2000c0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c0e2:	e05d      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c0e4:	6839      	ldr	r1, [r7, #0]
2000c0e6:	6878      	ldr	r0, [r7, #4]
2000c0e8:	f000 fa97 	bl	2000c61a <USBD_CtlError>
            err++;
2000c0ec:	7afb      	ldrb	r3, [r7, #11]
2000c0ee:	3301      	adds	r3, #1
2000c0f0:	72fb      	strb	r3, [r7, #11]
          break;
2000c0f2:	e055      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
2000c0f4:	687b      	ldr	r3, [r7, #4]
2000c0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c0fa:	691b      	ldr	r3, [r3, #16]
2000c0fc:	2b00      	cmp	r3, #0
2000c0fe:	d00b      	beq.n	2000c118 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
2000c100:	687b      	ldr	r3, [r7, #4]
2000c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c106:	691b      	ldr	r3, [r3, #16]
2000c108:	687a      	ldr	r2, [r7, #4]
2000c10a:	7c12      	ldrb	r2, [r2, #16]
2000c10c:	f107 0108 	add.w	r1, r7, #8
2000c110:	4610      	mov	r0, r2
2000c112:	4798      	blx	r3
2000c114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c116:	e043      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c118:	6839      	ldr	r1, [r7, #0]
2000c11a:	6878      	ldr	r0, [r7, #4]
2000c11c:	f000 fa7d 	bl	2000c61a <USBD_CtlError>
            err++;
2000c120:	7afb      	ldrb	r3, [r7, #11]
2000c122:	3301      	adds	r3, #1
2000c124:	72fb      	strb	r3, [r7, #11]
          break;
2000c126:	e03b      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
2000c128:	687b      	ldr	r3, [r7, #4]
2000c12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c12e:	695b      	ldr	r3, [r3, #20]
2000c130:	2b00      	cmp	r3, #0
2000c132:	d00b      	beq.n	2000c14c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
2000c134:	687b      	ldr	r3, [r7, #4]
2000c136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c13a:	695b      	ldr	r3, [r3, #20]
2000c13c:	687a      	ldr	r2, [r7, #4]
2000c13e:	7c12      	ldrb	r2, [r2, #16]
2000c140:	f107 0108 	add.w	r1, r7, #8
2000c144:	4610      	mov	r0, r2
2000c146:	4798      	blx	r3
2000c148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c14a:	e029      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c14c:	6839      	ldr	r1, [r7, #0]
2000c14e:	6878      	ldr	r0, [r7, #4]
2000c150:	f000 fa63 	bl	2000c61a <USBD_CtlError>
            err++;
2000c154:	7afb      	ldrb	r3, [r7, #11]
2000c156:	3301      	adds	r3, #1
2000c158:	72fb      	strb	r3, [r7, #11]
          break;
2000c15a:	e021      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
2000c15c:	687b      	ldr	r3, [r7, #4]
2000c15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c162:	699b      	ldr	r3, [r3, #24]
2000c164:	2b00      	cmp	r3, #0
2000c166:	d00b      	beq.n	2000c180 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
2000c168:	687b      	ldr	r3, [r7, #4]
2000c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000c16e:	699b      	ldr	r3, [r3, #24]
2000c170:	687a      	ldr	r2, [r7, #4]
2000c172:	7c12      	ldrb	r2, [r2, #16]
2000c174:	f107 0108 	add.w	r1, r7, #8
2000c178:	4610      	mov	r0, r2
2000c17a:	4798      	blx	r3
2000c17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000c17e:	e00f      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000c180:	6839      	ldr	r1, [r7, #0]
2000c182:	6878      	ldr	r0, [r7, #4]
2000c184:	f000 fa49 	bl	2000c61a <USBD_CtlError>
            err++;
2000c188:	7afb      	ldrb	r3, [r7, #11]
2000c18a:	3301      	adds	r3, #1
2000c18c:	72fb      	strb	r3, [r7, #11]
          break;
2000c18e:	e007      	b.n	2000c1a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
2000c190:	6839      	ldr	r1, [r7, #0]
2000c192:	6878      	ldr	r0, [r7, #4]
2000c194:	f000 fa41 	bl	2000c61a <USBD_CtlError>
          err++;
2000c198:	7afb      	ldrb	r3, [r7, #11]
2000c19a:	3301      	adds	r3, #1
2000c19c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
2000c19e:	bf00      	nop
      }
      break;
2000c1a0:	e037      	b.n	2000c212 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000c1a2:	687b      	ldr	r3, [r7, #4]
2000c1a4:	7c1b      	ldrb	r3, [r3, #16]
2000c1a6:	2b00      	cmp	r3, #0
2000c1a8:	d109      	bne.n	2000c1be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
2000c1aa:	687b      	ldr	r3, [r7, #4]
2000c1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000c1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000c1b2:	f107 0208 	add.w	r2, r7, #8
2000c1b6:	4610      	mov	r0, r2
2000c1b8:	4798      	blx	r3
2000c1ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000c1bc:	e029      	b.n	2000c212 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000c1be:	6839      	ldr	r1, [r7, #0]
2000c1c0:	6878      	ldr	r0, [r7, #4]
2000c1c2:	f000 fa2a 	bl	2000c61a <USBD_CtlError>
        err++;
2000c1c6:	7afb      	ldrb	r3, [r7, #11]
2000c1c8:	3301      	adds	r3, #1
2000c1ca:	72fb      	strb	r3, [r7, #11]
      break;
2000c1cc:	e021      	b.n	2000c212 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000c1ce:	687b      	ldr	r3, [r7, #4]
2000c1d0:	7c1b      	ldrb	r3, [r3, #16]
2000c1d2:	2b00      	cmp	r3, #0
2000c1d4:	d10d      	bne.n	2000c1f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
2000c1d6:	687b      	ldr	r3, [r7, #4]
2000c1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000c1dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000c1de:	f107 0208 	add.w	r2, r7, #8
2000c1e2:	4610      	mov	r0, r2
2000c1e4:	4798      	blx	r3
2000c1e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
2000c1e8:	68fb      	ldr	r3, [r7, #12]
2000c1ea:	3301      	adds	r3, #1
2000c1ec:	2207      	movs	r2, #7
2000c1ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000c1f0:	e00f      	b.n	2000c212 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000c1f2:	6839      	ldr	r1, [r7, #0]
2000c1f4:	6878      	ldr	r0, [r7, #4]
2000c1f6:	f000 fa10 	bl	2000c61a <USBD_CtlError>
        err++;
2000c1fa:	7afb      	ldrb	r3, [r7, #11]
2000c1fc:	3301      	adds	r3, #1
2000c1fe:	72fb      	strb	r3, [r7, #11]
      break;
2000c200:	e007      	b.n	2000c212 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
2000c202:	6839      	ldr	r1, [r7, #0]
2000c204:	6878      	ldr	r0, [r7, #4]
2000c206:	f000 fa08 	bl	2000c61a <USBD_CtlError>
      err++;
2000c20a:	7afb      	ldrb	r3, [r7, #11]
2000c20c:	3301      	adds	r3, #1
2000c20e:	72fb      	strb	r3, [r7, #11]
      break;
2000c210:	bf00      	nop
  }

  if (err != 0U)
2000c212:	7afb      	ldrb	r3, [r7, #11]
2000c214:	2b00      	cmp	r3, #0
2000c216:	d11e      	bne.n	2000c256 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
2000c218:	683b      	ldr	r3, [r7, #0]
2000c21a:	88db      	ldrh	r3, [r3, #6]
2000c21c:	2b00      	cmp	r3, #0
2000c21e:	d016      	beq.n	2000c24e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
2000c220:	893b      	ldrh	r3, [r7, #8]
2000c222:	2b00      	cmp	r3, #0
2000c224:	d00e      	beq.n	2000c244 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
2000c226:	683b      	ldr	r3, [r7, #0]
2000c228:	88da      	ldrh	r2, [r3, #6]
2000c22a:	893b      	ldrh	r3, [r7, #8]
2000c22c:	4293      	cmp	r3, r2
2000c22e:	bf28      	it	cs
2000c230:	4613      	movcs	r3, r2
2000c232:	b29b      	uxth	r3, r3
2000c234:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
2000c236:	893b      	ldrh	r3, [r7, #8]
2000c238:	461a      	mov	r2, r3
2000c23a:	68f9      	ldr	r1, [r7, #12]
2000c23c:	6878      	ldr	r0, [r7, #4]
2000c23e:	f000 fa69 	bl	2000c714 <USBD_CtlSendData>
2000c242:	e009      	b.n	2000c258 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
2000c244:	6839      	ldr	r1, [r7, #0]
2000c246:	6878      	ldr	r0, [r7, #4]
2000c248:	f000 f9e7 	bl	2000c61a <USBD_CtlError>
2000c24c:	e004      	b.n	2000c258 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
2000c24e:	6878      	ldr	r0, [r7, #4]
2000c250:	f000 fac1 	bl	2000c7d6 <USBD_CtlSendStatus>
2000c254:	e000      	b.n	2000c258 <USBD_GetDescriptor+0x320>
    return;
2000c256:	bf00      	nop
  }
}
2000c258:	3710      	adds	r7, #16
2000c25a:	46bd      	mov	sp, r7
2000c25c:	bd80      	pop	{r7, pc}
2000c25e:	bf00      	nop

2000c260 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c260:	b580      	push	{r7, lr}
2000c262:	b084      	sub	sp, #16
2000c264:	af00      	add	r7, sp, #0
2000c266:	6078      	str	r0, [r7, #4]
2000c268:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
2000c26a:	683b      	ldr	r3, [r7, #0]
2000c26c:	889b      	ldrh	r3, [r3, #4]
2000c26e:	2b00      	cmp	r3, #0
2000c270:	d131      	bne.n	2000c2d6 <USBD_SetAddress+0x76>
2000c272:	683b      	ldr	r3, [r7, #0]
2000c274:	88db      	ldrh	r3, [r3, #6]
2000c276:	2b00      	cmp	r3, #0
2000c278:	d12d      	bne.n	2000c2d6 <USBD_SetAddress+0x76>
2000c27a:	683b      	ldr	r3, [r7, #0]
2000c27c:	885b      	ldrh	r3, [r3, #2]
2000c27e:	2b7f      	cmp	r3, #127	@ 0x7f
2000c280:	d829      	bhi.n	2000c2d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
2000c282:	683b      	ldr	r3, [r7, #0]
2000c284:	885b      	ldrh	r3, [r3, #2]
2000c286:	b2db      	uxtb	r3, r3
2000c288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000c28c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c28e:	687b      	ldr	r3, [r7, #4]
2000c290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c294:	b2db      	uxtb	r3, r3
2000c296:	2b03      	cmp	r3, #3
2000c298:	d104      	bne.n	2000c2a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
2000c29a:	6839      	ldr	r1, [r7, #0]
2000c29c:	6878      	ldr	r0, [r7, #4]
2000c29e:	f000 f9bc 	bl	2000c61a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c2a2:	e01d      	b.n	2000c2e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
2000c2a4:	687b      	ldr	r3, [r7, #4]
2000c2a6:	7bfa      	ldrb	r2, [r7, #15]
2000c2a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
2000c2ac:	7bfb      	ldrb	r3, [r7, #15]
2000c2ae:	4619      	mov	r1, r3
2000c2b0:	6878      	ldr	r0, [r7, #4]
2000c2b2:	f000 febb 	bl	2000d02c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
2000c2b6:	6878      	ldr	r0, [r7, #4]
2000c2b8:	f000 fa8d 	bl	2000c7d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
2000c2bc:	7bfb      	ldrb	r3, [r7, #15]
2000c2be:	2b00      	cmp	r3, #0
2000c2c0:	d004      	beq.n	2000c2cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000c2c2:	687b      	ldr	r3, [r7, #4]
2000c2c4:	2202      	movs	r2, #2
2000c2c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c2ca:	e009      	b.n	2000c2e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
2000c2cc:	687b      	ldr	r3, [r7, #4]
2000c2ce:	2201      	movs	r2, #1
2000c2d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000c2d4:	e004      	b.n	2000c2e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
2000c2d6:	6839      	ldr	r1, [r7, #0]
2000c2d8:	6878      	ldr	r0, [r7, #4]
2000c2da:	f000 f99e 	bl	2000c61a <USBD_CtlError>
  }
}
2000c2de:	bf00      	nop
2000c2e0:	bf00      	nop
2000c2e2:	3710      	adds	r7, #16
2000c2e4:	46bd      	mov	sp, r7
2000c2e6:	bd80      	pop	{r7, pc}

2000c2e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c2e8:	b580      	push	{r7, lr}
2000c2ea:	b084      	sub	sp, #16
2000c2ec:	af00      	add	r7, sp, #0
2000c2ee:	6078      	str	r0, [r7, #4]
2000c2f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000c2f2:	2300      	movs	r3, #0
2000c2f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
2000c2f6:	683b      	ldr	r3, [r7, #0]
2000c2f8:	885b      	ldrh	r3, [r3, #2]
2000c2fa:	b2da      	uxtb	r2, r3
2000c2fc:	4b4e      	ldr	r3, [pc, #312]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c2fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
2000c300:	4b4d      	ldr	r3, [pc, #308]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c302:	781b      	ldrb	r3, [r3, #0]
2000c304:	2b01      	cmp	r3, #1
2000c306:	d905      	bls.n	2000c314 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
2000c308:	6839      	ldr	r1, [r7, #0]
2000c30a:	6878      	ldr	r0, [r7, #4]
2000c30c:	f000 f985 	bl	2000c61a <USBD_CtlError>
    return USBD_FAIL;
2000c310:	2303      	movs	r3, #3
2000c312:	e08c      	b.n	2000c42e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
2000c314:	687b      	ldr	r3, [r7, #4]
2000c316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c31a:	b2db      	uxtb	r3, r3
2000c31c:	2b02      	cmp	r3, #2
2000c31e:	d002      	beq.n	2000c326 <USBD_SetConfig+0x3e>
2000c320:	2b03      	cmp	r3, #3
2000c322:	d029      	beq.n	2000c378 <USBD_SetConfig+0x90>
2000c324:	e075      	b.n	2000c412 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
2000c326:	4b44      	ldr	r3, [pc, #272]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c328:	781b      	ldrb	r3, [r3, #0]
2000c32a:	2b00      	cmp	r3, #0
2000c32c:	d020      	beq.n	2000c370 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
2000c32e:	4b42      	ldr	r3, [pc, #264]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c330:	781b      	ldrb	r3, [r3, #0]
2000c332:	461a      	mov	r2, r3
2000c334:	687b      	ldr	r3, [r7, #4]
2000c336:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
2000c338:	4b3f      	ldr	r3, [pc, #252]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c33a:	781b      	ldrb	r3, [r3, #0]
2000c33c:	4619      	mov	r1, r3
2000c33e:	6878      	ldr	r0, [r7, #4]
2000c340:	f7fe ffa5 	bl	2000b28e <USBD_SetClassConfig>
2000c344:	4603      	mov	r3, r0
2000c346:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
2000c348:	7bfb      	ldrb	r3, [r7, #15]
2000c34a:	2b00      	cmp	r3, #0
2000c34c:	d008      	beq.n	2000c360 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
2000c34e:	6839      	ldr	r1, [r7, #0]
2000c350:	6878      	ldr	r0, [r7, #4]
2000c352:	f000 f962 	bl	2000c61a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000c356:	687b      	ldr	r3, [r7, #4]
2000c358:	2202      	movs	r2, #2
2000c35a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000c35e:	e065      	b.n	2000c42c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000c360:	6878      	ldr	r0, [r7, #4]
2000c362:	f000 fa38 	bl	2000c7d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
2000c366:	687b      	ldr	r3, [r7, #4]
2000c368:	2203      	movs	r2, #3
2000c36a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000c36e:	e05d      	b.n	2000c42c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000c370:	6878      	ldr	r0, [r7, #4]
2000c372:	f000 fa30 	bl	2000c7d6 <USBD_CtlSendStatus>
      break;
2000c376:	e059      	b.n	2000c42c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
2000c378:	4b2f      	ldr	r3, [pc, #188]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c37a:	781b      	ldrb	r3, [r3, #0]
2000c37c:	2b00      	cmp	r3, #0
2000c37e:	d112      	bne.n	2000c3a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000c380:	687b      	ldr	r3, [r7, #4]
2000c382:	2202      	movs	r2, #2
2000c384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
2000c388:	4b2b      	ldr	r3, [pc, #172]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c38a:	781b      	ldrb	r3, [r3, #0]
2000c38c:	461a      	mov	r2, r3
2000c38e:	687b      	ldr	r3, [r7, #4]
2000c390:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
2000c392:	4b29      	ldr	r3, [pc, #164]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c394:	781b      	ldrb	r3, [r3, #0]
2000c396:	4619      	mov	r1, r3
2000c398:	6878      	ldr	r0, [r7, #4]
2000c39a:	f7fe ff94 	bl	2000b2c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
2000c39e:	6878      	ldr	r0, [r7, #4]
2000c3a0:	f000 fa19 	bl	2000c7d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000c3a4:	e042      	b.n	2000c42c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
2000c3a6:	4b24      	ldr	r3, [pc, #144]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c3a8:	781b      	ldrb	r3, [r3, #0]
2000c3aa:	461a      	mov	r2, r3
2000c3ac:	687b      	ldr	r3, [r7, #4]
2000c3ae:	685b      	ldr	r3, [r3, #4]
2000c3b0:	429a      	cmp	r2, r3
2000c3b2:	d02a      	beq.n	2000c40a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000c3b4:	687b      	ldr	r3, [r7, #4]
2000c3b6:	685b      	ldr	r3, [r3, #4]
2000c3b8:	b2db      	uxtb	r3, r3
2000c3ba:	4619      	mov	r1, r3
2000c3bc:	6878      	ldr	r0, [r7, #4]
2000c3be:	f7fe ff82 	bl	2000b2c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
2000c3c2:	4b1d      	ldr	r3, [pc, #116]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c3c4:	781b      	ldrb	r3, [r3, #0]
2000c3c6:	461a      	mov	r2, r3
2000c3c8:	687b      	ldr	r3, [r7, #4]
2000c3ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
2000c3cc:	4b1a      	ldr	r3, [pc, #104]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c3ce:	781b      	ldrb	r3, [r3, #0]
2000c3d0:	4619      	mov	r1, r3
2000c3d2:	6878      	ldr	r0, [r7, #4]
2000c3d4:	f7fe ff5b 	bl	2000b28e <USBD_SetClassConfig>
2000c3d8:	4603      	mov	r3, r0
2000c3da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
2000c3dc:	7bfb      	ldrb	r3, [r7, #15]
2000c3de:	2b00      	cmp	r3, #0
2000c3e0:	d00f      	beq.n	2000c402 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
2000c3e2:	6839      	ldr	r1, [r7, #0]
2000c3e4:	6878      	ldr	r0, [r7, #4]
2000c3e6:	f000 f918 	bl	2000c61a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000c3ea:	687b      	ldr	r3, [r7, #4]
2000c3ec:	685b      	ldr	r3, [r3, #4]
2000c3ee:	b2db      	uxtb	r3, r3
2000c3f0:	4619      	mov	r1, r3
2000c3f2:	6878      	ldr	r0, [r7, #4]
2000c3f4:	f7fe ff67 	bl	2000b2c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000c3f8:	687b      	ldr	r3, [r7, #4]
2000c3fa:	2202      	movs	r2, #2
2000c3fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000c400:	e014      	b.n	2000c42c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000c402:	6878      	ldr	r0, [r7, #4]
2000c404:	f000 f9e7 	bl	2000c7d6 <USBD_CtlSendStatus>
      break;
2000c408:	e010      	b.n	2000c42c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000c40a:	6878      	ldr	r0, [r7, #4]
2000c40c:	f000 f9e3 	bl	2000c7d6 <USBD_CtlSendStatus>
      break;
2000c410:	e00c      	b.n	2000c42c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
2000c412:	6839      	ldr	r1, [r7, #0]
2000c414:	6878      	ldr	r0, [r7, #4]
2000c416:	f000 f900 	bl	2000c61a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
2000c41a:	4b07      	ldr	r3, [pc, #28]	@ (2000c438 <USBD_SetConfig+0x150>)
2000c41c:	781b      	ldrb	r3, [r3, #0]
2000c41e:	4619      	mov	r1, r3
2000c420:	6878      	ldr	r0, [r7, #4]
2000c422:	f7fe ff50 	bl	2000b2c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
2000c426:	2303      	movs	r3, #3
2000c428:	73fb      	strb	r3, [r7, #15]
      break;
2000c42a:	bf00      	nop
  }

  return ret;
2000c42c:	7bfb      	ldrb	r3, [r7, #15]
}
2000c42e:	4618      	mov	r0, r3
2000c430:	3710      	adds	r7, #16
2000c432:	46bd      	mov	sp, r7
2000c434:	bd80      	pop	{r7, pc}
2000c436:	bf00      	nop
2000c438:	2000ebf0 	.word	0x2000ebf0

2000c43c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c43c:	b580      	push	{r7, lr}
2000c43e:	b082      	sub	sp, #8
2000c440:	af00      	add	r7, sp, #0
2000c442:	6078      	str	r0, [r7, #4]
2000c444:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
2000c446:	683b      	ldr	r3, [r7, #0]
2000c448:	88db      	ldrh	r3, [r3, #6]
2000c44a:	2b01      	cmp	r3, #1
2000c44c:	d004      	beq.n	2000c458 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
2000c44e:	6839      	ldr	r1, [r7, #0]
2000c450:	6878      	ldr	r0, [r7, #4]
2000c452:	f000 f8e2 	bl	2000c61a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
2000c456:	e023      	b.n	2000c4a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
2000c458:	687b      	ldr	r3, [r7, #4]
2000c45a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c45e:	b2db      	uxtb	r3, r3
2000c460:	2b02      	cmp	r3, #2
2000c462:	dc02      	bgt.n	2000c46a <USBD_GetConfig+0x2e>
2000c464:	2b00      	cmp	r3, #0
2000c466:	dc03      	bgt.n	2000c470 <USBD_GetConfig+0x34>
2000c468:	e015      	b.n	2000c496 <USBD_GetConfig+0x5a>
2000c46a:	2b03      	cmp	r3, #3
2000c46c:	d00b      	beq.n	2000c486 <USBD_GetConfig+0x4a>
2000c46e:	e012      	b.n	2000c496 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
2000c470:	687b      	ldr	r3, [r7, #4]
2000c472:	2200      	movs	r2, #0
2000c474:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
2000c476:	687b      	ldr	r3, [r7, #4]
2000c478:	3308      	adds	r3, #8
2000c47a:	2201      	movs	r2, #1
2000c47c:	4619      	mov	r1, r3
2000c47e:	6878      	ldr	r0, [r7, #4]
2000c480:	f000 f948 	bl	2000c714 <USBD_CtlSendData>
        break;
2000c484:	e00c      	b.n	2000c4a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
2000c486:	687b      	ldr	r3, [r7, #4]
2000c488:	3304      	adds	r3, #4
2000c48a:	2201      	movs	r2, #1
2000c48c:	4619      	mov	r1, r3
2000c48e:	6878      	ldr	r0, [r7, #4]
2000c490:	f000 f940 	bl	2000c714 <USBD_CtlSendData>
        break;
2000c494:	e004      	b.n	2000c4a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
2000c496:	6839      	ldr	r1, [r7, #0]
2000c498:	6878      	ldr	r0, [r7, #4]
2000c49a:	f000 f8be 	bl	2000c61a <USBD_CtlError>
        break;
2000c49e:	bf00      	nop
}
2000c4a0:	bf00      	nop
2000c4a2:	3708      	adds	r7, #8
2000c4a4:	46bd      	mov	sp, r7
2000c4a6:	bd80      	pop	{r7, pc}

2000c4a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c4a8:	b580      	push	{r7, lr}
2000c4aa:	b082      	sub	sp, #8
2000c4ac:	af00      	add	r7, sp, #0
2000c4ae:	6078      	str	r0, [r7, #4]
2000c4b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000c4b2:	687b      	ldr	r3, [r7, #4]
2000c4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c4b8:	b2db      	uxtb	r3, r3
2000c4ba:	3b01      	subs	r3, #1
2000c4bc:	2b02      	cmp	r3, #2
2000c4be:	d81e      	bhi.n	2000c4fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
2000c4c0:	683b      	ldr	r3, [r7, #0]
2000c4c2:	88db      	ldrh	r3, [r3, #6]
2000c4c4:	2b02      	cmp	r3, #2
2000c4c6:	d004      	beq.n	2000c4d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
2000c4c8:	6839      	ldr	r1, [r7, #0]
2000c4ca:	6878      	ldr	r0, [r7, #4]
2000c4cc:	f000 f8a5 	bl	2000c61a <USBD_CtlError>
        break;
2000c4d0:	e01a      	b.n	2000c508 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
2000c4d2:	687b      	ldr	r3, [r7, #4]
2000c4d4:	2201      	movs	r2, #1
2000c4d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
2000c4d8:	687b      	ldr	r3, [r7, #4]
2000c4da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
2000c4de:	2b00      	cmp	r3, #0
2000c4e0:	d005      	beq.n	2000c4ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
2000c4e2:	687b      	ldr	r3, [r7, #4]
2000c4e4:	68db      	ldr	r3, [r3, #12]
2000c4e6:	f043 0202 	orr.w	r2, r3, #2
2000c4ea:	687b      	ldr	r3, [r7, #4]
2000c4ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
2000c4ee:	687b      	ldr	r3, [r7, #4]
2000c4f0:	330c      	adds	r3, #12
2000c4f2:	2202      	movs	r2, #2
2000c4f4:	4619      	mov	r1, r3
2000c4f6:	6878      	ldr	r0, [r7, #4]
2000c4f8:	f000 f90c 	bl	2000c714 <USBD_CtlSendData>
      break;
2000c4fc:	e004      	b.n	2000c508 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
2000c4fe:	6839      	ldr	r1, [r7, #0]
2000c500:	6878      	ldr	r0, [r7, #4]
2000c502:	f000 f88a 	bl	2000c61a <USBD_CtlError>
      break;
2000c506:	bf00      	nop
  }
}
2000c508:	bf00      	nop
2000c50a:	3708      	adds	r7, #8
2000c50c:	46bd      	mov	sp, r7
2000c50e:	bd80      	pop	{r7, pc}

2000c510 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c510:	b580      	push	{r7, lr}
2000c512:	b082      	sub	sp, #8
2000c514:	af00      	add	r7, sp, #0
2000c516:	6078      	str	r0, [r7, #4]
2000c518:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000c51a:	683b      	ldr	r3, [r7, #0]
2000c51c:	885b      	ldrh	r3, [r3, #2]
2000c51e:	2b01      	cmp	r3, #1
2000c520:	d107      	bne.n	2000c532 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
2000c522:	687b      	ldr	r3, [r7, #4]
2000c524:	2201      	movs	r2, #1
2000c526:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
2000c52a:	6878      	ldr	r0, [r7, #4]
2000c52c:	f000 f953 	bl	2000c7d6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
2000c530:	e013      	b.n	2000c55a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
2000c532:	683b      	ldr	r3, [r7, #0]
2000c534:	885b      	ldrh	r3, [r3, #2]
2000c536:	2b02      	cmp	r3, #2
2000c538:	d10b      	bne.n	2000c552 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
2000c53a:	683b      	ldr	r3, [r7, #0]
2000c53c:	889b      	ldrh	r3, [r3, #4]
2000c53e:	0a1b      	lsrs	r3, r3, #8
2000c540:	b29b      	uxth	r3, r3
2000c542:	b2da      	uxtb	r2, r3
2000c544:	687b      	ldr	r3, [r7, #4]
2000c546:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
2000c54a:	6878      	ldr	r0, [r7, #4]
2000c54c:	f000 f943 	bl	2000c7d6 <USBD_CtlSendStatus>
}
2000c550:	e003      	b.n	2000c55a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
2000c552:	6839      	ldr	r1, [r7, #0]
2000c554:	6878      	ldr	r0, [r7, #4]
2000c556:	f000 f860 	bl	2000c61a <USBD_CtlError>
}
2000c55a:	bf00      	nop
2000c55c:	3708      	adds	r7, #8
2000c55e:	46bd      	mov	sp, r7
2000c560:	bd80      	pop	{r7, pc}

2000c562 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c562:	b580      	push	{r7, lr}
2000c564:	b082      	sub	sp, #8
2000c566:	af00      	add	r7, sp, #0
2000c568:	6078      	str	r0, [r7, #4]
2000c56a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000c56c:	687b      	ldr	r3, [r7, #4]
2000c56e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000c572:	b2db      	uxtb	r3, r3
2000c574:	3b01      	subs	r3, #1
2000c576:	2b02      	cmp	r3, #2
2000c578:	d80b      	bhi.n	2000c592 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000c57a:	683b      	ldr	r3, [r7, #0]
2000c57c:	885b      	ldrh	r3, [r3, #2]
2000c57e:	2b01      	cmp	r3, #1
2000c580:	d10c      	bne.n	2000c59c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
2000c582:	687b      	ldr	r3, [r7, #4]
2000c584:	2200      	movs	r2, #0
2000c586:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
2000c58a:	6878      	ldr	r0, [r7, #4]
2000c58c:	f000 f923 	bl	2000c7d6 <USBD_CtlSendStatus>
      }
      break;
2000c590:	e004      	b.n	2000c59c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
2000c592:	6839      	ldr	r1, [r7, #0]
2000c594:	6878      	ldr	r0, [r7, #4]
2000c596:	f000 f840 	bl	2000c61a <USBD_CtlError>
      break;
2000c59a:	e000      	b.n	2000c59e <USBD_ClrFeature+0x3c>
      break;
2000c59c:	bf00      	nop
  }
}
2000c59e:	bf00      	nop
2000c5a0:	3708      	adds	r7, #8
2000c5a2:	46bd      	mov	sp, r7
2000c5a4:	bd80      	pop	{r7, pc}

2000c5a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
2000c5a6:	b580      	push	{r7, lr}
2000c5a8:	b084      	sub	sp, #16
2000c5aa:	af00      	add	r7, sp, #0
2000c5ac:	6078      	str	r0, [r7, #4]
2000c5ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
2000c5b0:	683b      	ldr	r3, [r7, #0]
2000c5b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
2000c5b4:	68fb      	ldr	r3, [r7, #12]
2000c5b6:	781a      	ldrb	r2, [r3, #0]
2000c5b8:	687b      	ldr	r3, [r7, #4]
2000c5ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
2000c5bc:	68fb      	ldr	r3, [r7, #12]
2000c5be:	3301      	adds	r3, #1
2000c5c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
2000c5c2:	68fb      	ldr	r3, [r7, #12]
2000c5c4:	781a      	ldrb	r2, [r3, #0]
2000c5c6:	687b      	ldr	r3, [r7, #4]
2000c5c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
2000c5ca:	68fb      	ldr	r3, [r7, #12]
2000c5cc:	3301      	adds	r3, #1
2000c5ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
2000c5d0:	68f8      	ldr	r0, [r7, #12]
2000c5d2:	f7ff fa15 	bl	2000ba00 <SWAPBYTE>
2000c5d6:	4603      	mov	r3, r0
2000c5d8:	461a      	mov	r2, r3
2000c5da:	687b      	ldr	r3, [r7, #4]
2000c5dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
2000c5de:	68fb      	ldr	r3, [r7, #12]
2000c5e0:	3301      	adds	r3, #1
2000c5e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000c5e4:	68fb      	ldr	r3, [r7, #12]
2000c5e6:	3301      	adds	r3, #1
2000c5e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
2000c5ea:	68f8      	ldr	r0, [r7, #12]
2000c5ec:	f7ff fa08 	bl	2000ba00 <SWAPBYTE>
2000c5f0:	4603      	mov	r3, r0
2000c5f2:	461a      	mov	r2, r3
2000c5f4:	687b      	ldr	r3, [r7, #4]
2000c5f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
2000c5f8:	68fb      	ldr	r3, [r7, #12]
2000c5fa:	3301      	adds	r3, #1
2000c5fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000c5fe:	68fb      	ldr	r3, [r7, #12]
2000c600:	3301      	adds	r3, #1
2000c602:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
2000c604:	68f8      	ldr	r0, [r7, #12]
2000c606:	f7ff f9fb 	bl	2000ba00 <SWAPBYTE>
2000c60a:	4603      	mov	r3, r0
2000c60c:	461a      	mov	r2, r3
2000c60e:	687b      	ldr	r3, [r7, #4]
2000c610:	80da      	strh	r2, [r3, #6]
}
2000c612:	bf00      	nop
2000c614:	3710      	adds	r7, #16
2000c616:	46bd      	mov	sp, r7
2000c618:	bd80      	pop	{r7, pc}

2000c61a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000c61a:	b580      	push	{r7, lr}
2000c61c:	b082      	sub	sp, #8
2000c61e:	af00      	add	r7, sp, #0
2000c620:	6078      	str	r0, [r7, #4]
2000c622:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
2000c624:	2180      	movs	r1, #128	@ 0x80
2000c626:	6878      	ldr	r0, [r7, #4]
2000c628:	f000 fc96 	bl	2000cf58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
2000c62c:	2100      	movs	r1, #0
2000c62e:	6878      	ldr	r0, [r7, #4]
2000c630:	f000 fc92 	bl	2000cf58 <USBD_LL_StallEP>
}
2000c634:	bf00      	nop
2000c636:	3708      	adds	r7, #8
2000c638:	46bd      	mov	sp, r7
2000c63a:	bd80      	pop	{r7, pc}

2000c63c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
2000c63c:	b580      	push	{r7, lr}
2000c63e:	b086      	sub	sp, #24
2000c640:	af00      	add	r7, sp, #0
2000c642:	60f8      	str	r0, [r7, #12]
2000c644:	60b9      	str	r1, [r7, #8]
2000c646:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
2000c648:	2300      	movs	r3, #0
2000c64a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
2000c64c:	68fb      	ldr	r3, [r7, #12]
2000c64e:	2b00      	cmp	r3, #0
2000c650:	d042      	beq.n	2000c6d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
2000c652:	68fb      	ldr	r3, [r7, #12]
2000c654:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
2000c656:	6938      	ldr	r0, [r7, #16]
2000c658:	f000 f842 	bl	2000c6e0 <USBD_GetLen>
2000c65c:	4603      	mov	r3, r0
2000c65e:	3301      	adds	r3, #1
2000c660:	005b      	lsls	r3, r3, #1
2000c662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2000c666:	d808      	bhi.n	2000c67a <USBD_GetString+0x3e>
2000c668:	6938      	ldr	r0, [r7, #16]
2000c66a:	f000 f839 	bl	2000c6e0 <USBD_GetLen>
2000c66e:	4603      	mov	r3, r0
2000c670:	3301      	adds	r3, #1
2000c672:	b29b      	uxth	r3, r3
2000c674:	005b      	lsls	r3, r3, #1
2000c676:	b29a      	uxth	r2, r3
2000c678:	e001      	b.n	2000c67e <USBD_GetString+0x42>
2000c67a:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000c67e:	687b      	ldr	r3, [r7, #4]
2000c680:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
2000c682:	7dfb      	ldrb	r3, [r7, #23]
2000c684:	68ba      	ldr	r2, [r7, #8]
2000c686:	4413      	add	r3, r2
2000c688:	687a      	ldr	r2, [r7, #4]
2000c68a:	7812      	ldrb	r2, [r2, #0]
2000c68c:	701a      	strb	r2, [r3, #0]
  idx++;
2000c68e:	7dfb      	ldrb	r3, [r7, #23]
2000c690:	3301      	adds	r3, #1
2000c692:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
2000c694:	7dfb      	ldrb	r3, [r7, #23]
2000c696:	68ba      	ldr	r2, [r7, #8]
2000c698:	4413      	add	r3, r2
2000c69a:	2203      	movs	r2, #3
2000c69c:	701a      	strb	r2, [r3, #0]
  idx++;
2000c69e:	7dfb      	ldrb	r3, [r7, #23]
2000c6a0:	3301      	adds	r3, #1
2000c6a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
2000c6a4:	e013      	b.n	2000c6ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
2000c6a6:	7dfb      	ldrb	r3, [r7, #23]
2000c6a8:	68ba      	ldr	r2, [r7, #8]
2000c6aa:	4413      	add	r3, r2
2000c6ac:	693a      	ldr	r2, [r7, #16]
2000c6ae:	7812      	ldrb	r2, [r2, #0]
2000c6b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
2000c6b2:	693b      	ldr	r3, [r7, #16]
2000c6b4:	3301      	adds	r3, #1
2000c6b6:	613b      	str	r3, [r7, #16]
    idx++;
2000c6b8:	7dfb      	ldrb	r3, [r7, #23]
2000c6ba:	3301      	adds	r3, #1
2000c6bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
2000c6be:	7dfb      	ldrb	r3, [r7, #23]
2000c6c0:	68ba      	ldr	r2, [r7, #8]
2000c6c2:	4413      	add	r3, r2
2000c6c4:	2200      	movs	r2, #0
2000c6c6:	701a      	strb	r2, [r3, #0]
    idx++;
2000c6c8:	7dfb      	ldrb	r3, [r7, #23]
2000c6ca:	3301      	adds	r3, #1
2000c6cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
2000c6ce:	693b      	ldr	r3, [r7, #16]
2000c6d0:	781b      	ldrb	r3, [r3, #0]
2000c6d2:	2b00      	cmp	r3, #0
2000c6d4:	d1e7      	bne.n	2000c6a6 <USBD_GetString+0x6a>
2000c6d6:	e000      	b.n	2000c6da <USBD_GetString+0x9e>
    return;
2000c6d8:	bf00      	nop
  }
}
2000c6da:	3718      	adds	r7, #24
2000c6dc:	46bd      	mov	sp, r7
2000c6de:	bd80      	pop	{r7, pc}

2000c6e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
2000c6e0:	b480      	push	{r7}
2000c6e2:	b085      	sub	sp, #20
2000c6e4:	af00      	add	r7, sp, #0
2000c6e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
2000c6e8:	2300      	movs	r3, #0
2000c6ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
2000c6ec:	687b      	ldr	r3, [r7, #4]
2000c6ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
2000c6f0:	e005      	b.n	2000c6fe <USBD_GetLen+0x1e>
  {
    len++;
2000c6f2:	7bfb      	ldrb	r3, [r7, #15]
2000c6f4:	3301      	adds	r3, #1
2000c6f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
2000c6f8:	68bb      	ldr	r3, [r7, #8]
2000c6fa:	3301      	adds	r3, #1
2000c6fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
2000c6fe:	68bb      	ldr	r3, [r7, #8]
2000c700:	781b      	ldrb	r3, [r3, #0]
2000c702:	2b00      	cmp	r3, #0
2000c704:	d1f5      	bne.n	2000c6f2 <USBD_GetLen+0x12>
  }

  return len;
2000c706:	7bfb      	ldrb	r3, [r7, #15]
}
2000c708:	4618      	mov	r0, r3
2000c70a:	3714      	adds	r7, #20
2000c70c:	46bd      	mov	sp, r7
2000c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c712:	4770      	bx	lr

2000c714 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
2000c714:	b580      	push	{r7, lr}
2000c716:	b084      	sub	sp, #16
2000c718:	af00      	add	r7, sp, #0
2000c71a:	60f8      	str	r0, [r7, #12]
2000c71c:	60b9      	str	r1, [r7, #8]
2000c71e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
2000c720:	68fb      	ldr	r3, [r7, #12]
2000c722:	2202      	movs	r2, #2
2000c724:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
2000c728:	68fb      	ldr	r3, [r7, #12]
2000c72a:	687a      	ldr	r2, [r7, #4]
2000c72c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
2000c72e:	68fb      	ldr	r3, [r7, #12]
2000c730:	68ba      	ldr	r2, [r7, #8]
2000c732:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
2000c734:	68fb      	ldr	r3, [r7, #12]
2000c736:	687a      	ldr	r2, [r7, #4]
2000c738:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000c73a:	687b      	ldr	r3, [r7, #4]
2000c73c:	68ba      	ldr	r2, [r7, #8]
2000c73e:	2100      	movs	r1, #0
2000c740:	68f8      	ldr	r0, [r7, #12]
2000c742:	f000 fc92 	bl	2000d06a <USBD_LL_Transmit>

  return USBD_OK;
2000c746:	2300      	movs	r3, #0
}
2000c748:	4618      	mov	r0, r3
2000c74a:	3710      	adds	r7, #16
2000c74c:	46bd      	mov	sp, r7
2000c74e:	bd80      	pop	{r7, pc}

2000c750 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
2000c750:	b580      	push	{r7, lr}
2000c752:	b084      	sub	sp, #16
2000c754:	af00      	add	r7, sp, #0
2000c756:	60f8      	str	r0, [r7, #12]
2000c758:	60b9      	str	r1, [r7, #8]
2000c75a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000c75c:	687b      	ldr	r3, [r7, #4]
2000c75e:	68ba      	ldr	r2, [r7, #8]
2000c760:	2100      	movs	r1, #0
2000c762:	68f8      	ldr	r0, [r7, #12]
2000c764:	f000 fc81 	bl	2000d06a <USBD_LL_Transmit>

  return USBD_OK;
2000c768:	2300      	movs	r3, #0
}
2000c76a:	4618      	mov	r0, r3
2000c76c:	3710      	adds	r7, #16
2000c76e:	46bd      	mov	sp, r7
2000c770:	bd80      	pop	{r7, pc}

2000c772 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
2000c772:	b580      	push	{r7, lr}
2000c774:	b084      	sub	sp, #16
2000c776:	af00      	add	r7, sp, #0
2000c778:	60f8      	str	r0, [r7, #12]
2000c77a:	60b9      	str	r1, [r7, #8]
2000c77c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
2000c77e:	68fb      	ldr	r3, [r7, #12]
2000c780:	2203      	movs	r2, #3
2000c782:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
2000c786:	68fb      	ldr	r3, [r7, #12]
2000c788:	687a      	ldr	r2, [r7, #4]
2000c78a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
2000c78e:	68fb      	ldr	r3, [r7, #12]
2000c790:	68ba      	ldr	r2, [r7, #8]
2000c792:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
2000c796:	68fb      	ldr	r3, [r7, #12]
2000c798:	687a      	ldr	r2, [r7, #4]
2000c79a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000c79e:	687b      	ldr	r3, [r7, #4]
2000c7a0:	68ba      	ldr	r2, [r7, #8]
2000c7a2:	2100      	movs	r1, #0
2000c7a4:	68f8      	ldr	r0, [r7, #12]
2000c7a6:	f000 fc81 	bl	2000d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
2000c7aa:	2300      	movs	r3, #0
}
2000c7ac:	4618      	mov	r0, r3
2000c7ae:	3710      	adds	r7, #16
2000c7b0:	46bd      	mov	sp, r7
2000c7b2:	bd80      	pop	{r7, pc}

2000c7b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
2000c7b4:	b580      	push	{r7, lr}
2000c7b6:	b084      	sub	sp, #16
2000c7b8:	af00      	add	r7, sp, #0
2000c7ba:	60f8      	str	r0, [r7, #12]
2000c7bc:	60b9      	str	r1, [r7, #8]
2000c7be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000c7c0:	687b      	ldr	r3, [r7, #4]
2000c7c2:	68ba      	ldr	r2, [r7, #8]
2000c7c4:	2100      	movs	r1, #0
2000c7c6:	68f8      	ldr	r0, [r7, #12]
2000c7c8:	f000 fc70 	bl	2000d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
2000c7cc:	2300      	movs	r3, #0
}
2000c7ce:	4618      	mov	r0, r3
2000c7d0:	3710      	adds	r7, #16
2000c7d2:	46bd      	mov	sp, r7
2000c7d4:	bd80      	pop	{r7, pc}

2000c7d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
2000c7d6:	b580      	push	{r7, lr}
2000c7d8:	b082      	sub	sp, #8
2000c7da:	af00      	add	r7, sp, #0
2000c7dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
2000c7de:	687b      	ldr	r3, [r7, #4]
2000c7e0:	2204      	movs	r2, #4
2000c7e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
2000c7e6:	2300      	movs	r3, #0
2000c7e8:	2200      	movs	r2, #0
2000c7ea:	2100      	movs	r1, #0
2000c7ec:	6878      	ldr	r0, [r7, #4]
2000c7ee:	f000 fc3c 	bl	2000d06a <USBD_LL_Transmit>

  return USBD_OK;
2000c7f2:	2300      	movs	r3, #0
}
2000c7f4:	4618      	mov	r0, r3
2000c7f6:	3708      	adds	r7, #8
2000c7f8:	46bd      	mov	sp, r7
2000c7fa:	bd80      	pop	{r7, pc}

2000c7fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
2000c7fc:	b580      	push	{r7, lr}
2000c7fe:	b082      	sub	sp, #8
2000c800:	af00      	add	r7, sp, #0
2000c802:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
2000c804:	687b      	ldr	r3, [r7, #4]
2000c806:	2205      	movs	r2, #5
2000c808:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000c80c:	2300      	movs	r3, #0
2000c80e:	2200      	movs	r2, #0
2000c810:	2100      	movs	r1, #0
2000c812:	6878      	ldr	r0, [r7, #4]
2000c814:	f000 fc4a 	bl	2000d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
2000c818:	2300      	movs	r3, #0
}
2000c81a:	4618      	mov	r0, r3
2000c81c:	3708      	adds	r7, #8
2000c81e:	46bd      	mov	sp, r7
2000c820:	bd80      	pop	{r7, pc}
	...

2000c824 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
2000c824:	b580      	push	{r7, lr}
2000c826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
2000c828:	2200      	movs	r2, #0
2000c82a:	4912      	ldr	r1, [pc, #72]	@ (2000c874 <MX_USB_DEVICE_Init+0x50>)
2000c82c:	4812      	ldr	r0, [pc, #72]	@ (2000c878 <MX_USB_DEVICE_Init+0x54>)
2000c82e:	f7fe fcb1 	bl	2000b194 <USBD_Init>
2000c832:	4603      	mov	r3, r0
2000c834:	2b00      	cmp	r3, #0
2000c836:	d001      	beq.n	2000c83c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
2000c838:	f7f8 fb66 	bl	20004f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
2000c83c:	490f      	ldr	r1, [pc, #60]	@ (2000c87c <MX_USB_DEVICE_Init+0x58>)
2000c83e:	480e      	ldr	r0, [pc, #56]	@ (2000c878 <MX_USB_DEVICE_Init+0x54>)
2000c840:	f7fe fcd8 	bl	2000b1f4 <USBD_RegisterClass>
2000c844:	4603      	mov	r3, r0
2000c846:	2b00      	cmp	r3, #0
2000c848:	d001      	beq.n	2000c84e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
2000c84a:	f7f8 fb5d 	bl	20004f08 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
2000c84e:	490c      	ldr	r1, [pc, #48]	@ (2000c880 <MX_USB_DEVICE_Init+0x5c>)
2000c850:	4809      	ldr	r0, [pc, #36]	@ (2000c878 <MX_USB_DEVICE_Init+0x54>)
2000c852:	f7fe fc85 	bl	2000b160 <USBD_CUSTOM_HID_RegisterInterface>
2000c856:	4603      	mov	r3, r0
2000c858:	2b00      	cmp	r3, #0
2000c85a:	d001      	beq.n	2000c860 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
2000c85c:	f7f8 fb54 	bl	20004f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
2000c860:	4805      	ldr	r0, [pc, #20]	@ (2000c878 <MX_USB_DEVICE_Init+0x54>)
2000c862:	f7fe fcfd 	bl	2000b260 <USBD_Start>
2000c866:	4603      	mov	r3, r0
2000c868:	2b00      	cmp	r3, #0
2000c86a:	d001      	beq.n	2000c870 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
2000c86c:	f7f8 fb4c 	bl	20004f08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
2000c870:	bf00      	nop
2000c872:	bd80      	pop	{r7, pc}
2000c874:	2000d628 	.word	0x2000d628
2000c878:	2000ebf4 	.word	0x2000ebf4
2000c87c:	2000d55c 	.word	0x2000d55c
2000c880:	2000d618 	.word	0x2000d618

2000c884 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
2000c884:	b480      	push	{r7}
2000c886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
2000c888:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
2000c88a:	4618      	mov	r0, r3
2000c88c:	46bd      	mov	sp, r7
2000c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c892:	4770      	bx	lr

2000c894 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
2000c894:	b480      	push	{r7}
2000c896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
2000c898:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
2000c89a:	4618      	mov	r0, r3
2000c89c:	46bd      	mov	sp, r7
2000c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c8a2:	4770      	bx	lr

2000c8a4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
2000c8a4:	b580      	push	{r7, lr}
2000c8a6:	b082      	sub	sp, #8
2000c8a8:	af00      	add	r7, sp, #0
2000c8aa:	4603      	mov	r3, r0
2000c8ac:	460a      	mov	r2, r1
2000c8ae:	71fb      	strb	r3, [r7, #7]
2000c8b0:	4613      	mov	r3, r2
2000c8b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
2000c8b4:	4806      	ldr	r0, [pc, #24]	@ (2000c8d0 <CUSTOM_HID_OutEvent_FS+0x2c>)
2000c8b6:	f7fe fbdd 	bl	2000b074 <USBD_CUSTOM_HID_ReceivePacket>
2000c8ba:	4603      	mov	r3, r0
2000c8bc:	2b00      	cmp	r3, #0
2000c8be:	d002      	beq.n	2000c8c6 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
2000c8c0:	f04f 33ff 	mov.w	r3, #4294967295
2000c8c4:	e000      	b.n	2000c8c8 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
2000c8c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
2000c8c8:	4618      	mov	r0, r3
2000c8ca:	3708      	adds	r7, #8
2000c8cc:	46bd      	mov	sp, r7
2000c8ce:	bd80      	pop	{r7, pc}
2000c8d0:	2000ebf4 	.word	0x2000ebf4

2000c8d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000c8d4:	b480      	push	{r7}
2000c8d6:	b083      	sub	sp, #12
2000c8d8:	af00      	add	r7, sp, #0
2000c8da:	4603      	mov	r3, r0
2000c8dc:	6039      	str	r1, [r7, #0]
2000c8de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
2000c8e0:	683b      	ldr	r3, [r7, #0]
2000c8e2:	2212      	movs	r2, #18
2000c8e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
2000c8e6:	4b03      	ldr	r3, [pc, #12]	@ (2000c8f4 <USBD_FS_DeviceDescriptor+0x20>)
}
2000c8e8:	4618      	mov	r0, r3
2000c8ea:	370c      	adds	r7, #12
2000c8ec:	46bd      	mov	sp, r7
2000c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c8f2:	4770      	bx	lr
2000c8f4:	2000d648 	.word	0x2000d648

2000c8f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000c8f8:	b480      	push	{r7}
2000c8fa:	b083      	sub	sp, #12
2000c8fc:	af00      	add	r7, sp, #0
2000c8fe:	4603      	mov	r3, r0
2000c900:	6039      	str	r1, [r7, #0]
2000c902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
2000c904:	683b      	ldr	r3, [r7, #0]
2000c906:	2204      	movs	r2, #4
2000c908:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
2000c90a:	4b03      	ldr	r3, [pc, #12]	@ (2000c918 <USBD_FS_LangIDStrDescriptor+0x20>)
}
2000c90c:	4618      	mov	r0, r3
2000c90e:	370c      	adds	r7, #12
2000c910:	46bd      	mov	sp, r7
2000c912:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c916:	4770      	bx	lr
2000c918:	2000d668 	.word	0x2000d668

2000c91c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000c91c:	b580      	push	{r7, lr}
2000c91e:	b082      	sub	sp, #8
2000c920:	af00      	add	r7, sp, #0
2000c922:	4603      	mov	r3, r0
2000c924:	6039      	str	r1, [r7, #0]
2000c926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000c928:	79fb      	ldrb	r3, [r7, #7]
2000c92a:	2b00      	cmp	r3, #0
2000c92c:	d105      	bne.n	2000c93a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000c92e:	683a      	ldr	r2, [r7, #0]
2000c930:	4907      	ldr	r1, [pc, #28]	@ (2000c950 <USBD_FS_ProductStrDescriptor+0x34>)
2000c932:	4808      	ldr	r0, [pc, #32]	@ (2000c954 <USBD_FS_ProductStrDescriptor+0x38>)
2000c934:	f7ff fe82 	bl	2000c63c <USBD_GetString>
2000c938:	e004      	b.n	2000c944 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000c93a:	683a      	ldr	r2, [r7, #0]
2000c93c:	4904      	ldr	r1, [pc, #16]	@ (2000c950 <USBD_FS_ProductStrDescriptor+0x34>)
2000c93e:	4805      	ldr	r0, [pc, #20]	@ (2000c954 <USBD_FS_ProductStrDescriptor+0x38>)
2000c940:	f7ff fe7c 	bl	2000c63c <USBD_GetString>
  }
  return USBD_StrDesc;
2000c944:	4b02      	ldr	r3, [pc, #8]	@ (2000c950 <USBD_FS_ProductStrDescriptor+0x34>)
}
2000c946:	4618      	mov	r0, r3
2000c948:	3708      	adds	r7, #8
2000c94a:	46bd      	mov	sp, r7
2000c94c:	bd80      	pop	{r7, pc}
2000c94e:	bf00      	nop
2000c950:	2000eed0 	.word	0x2000eed0
2000c954:	2000d4e0 	.word	0x2000d4e0

2000c958 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000c958:	b580      	push	{r7, lr}
2000c95a:	b082      	sub	sp, #8
2000c95c:	af00      	add	r7, sp, #0
2000c95e:	4603      	mov	r3, r0
2000c960:	6039      	str	r1, [r7, #0]
2000c962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
2000c964:	683a      	ldr	r2, [r7, #0]
2000c966:	4904      	ldr	r1, [pc, #16]	@ (2000c978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
2000c968:	4804      	ldr	r0, [pc, #16]	@ (2000c97c <USBD_FS_ManufacturerStrDescriptor+0x24>)
2000c96a:	f7ff fe67 	bl	2000c63c <USBD_GetString>
  return USBD_StrDesc;
2000c96e:	4b02      	ldr	r3, [pc, #8]	@ (2000c978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
2000c970:	4618      	mov	r0, r3
2000c972:	3708      	adds	r7, #8
2000c974:	46bd      	mov	sp, r7
2000c976:	bd80      	pop	{r7, pc}
2000c978:	2000eed0 	.word	0x2000eed0
2000c97c:	2000d4f4 	.word	0x2000d4f4

2000c980 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000c980:	b580      	push	{r7, lr}
2000c982:	b082      	sub	sp, #8
2000c984:	af00      	add	r7, sp, #0
2000c986:	4603      	mov	r3, r0
2000c988:	6039      	str	r1, [r7, #0]
2000c98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
2000c98c:	683b      	ldr	r3, [r7, #0]
2000c98e:	221a      	movs	r2, #26
2000c990:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
2000c992:	f000 f855 	bl	2000ca40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
2000c996:	4b02      	ldr	r3, [pc, #8]	@ (2000c9a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
2000c998:	4618      	mov	r0, r3
2000c99a:	3708      	adds	r7, #8
2000c99c:	46bd      	mov	sp, r7
2000c99e:	bd80      	pop	{r7, pc}
2000c9a0:	2000d66c 	.word	0x2000d66c

2000c9a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000c9a4:	b580      	push	{r7, lr}
2000c9a6:	b082      	sub	sp, #8
2000c9a8:	af00      	add	r7, sp, #0
2000c9aa:	4603      	mov	r3, r0
2000c9ac:	6039      	str	r1, [r7, #0]
2000c9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
2000c9b0:	79fb      	ldrb	r3, [r7, #7]
2000c9b2:	2b00      	cmp	r3, #0
2000c9b4:	d105      	bne.n	2000c9c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000c9b6:	683a      	ldr	r2, [r7, #0]
2000c9b8:	4907      	ldr	r1, [pc, #28]	@ (2000c9d8 <USBD_FS_ConfigStrDescriptor+0x34>)
2000c9ba:	4808      	ldr	r0, [pc, #32]	@ (2000c9dc <USBD_FS_ConfigStrDescriptor+0x38>)
2000c9bc:	f7ff fe3e 	bl	2000c63c <USBD_GetString>
2000c9c0:	e004      	b.n	2000c9cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000c9c2:	683a      	ldr	r2, [r7, #0]
2000c9c4:	4904      	ldr	r1, [pc, #16]	@ (2000c9d8 <USBD_FS_ConfigStrDescriptor+0x34>)
2000c9c6:	4805      	ldr	r0, [pc, #20]	@ (2000c9dc <USBD_FS_ConfigStrDescriptor+0x38>)
2000c9c8:	f7ff fe38 	bl	2000c63c <USBD_GetString>
  }
  return USBD_StrDesc;
2000c9cc:	4b02      	ldr	r3, [pc, #8]	@ (2000c9d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
2000c9ce:	4618      	mov	r0, r3
2000c9d0:	3708      	adds	r7, #8
2000c9d2:	46bd      	mov	sp, r7
2000c9d4:	bd80      	pop	{r7, pc}
2000c9d6:	bf00      	nop
2000c9d8:	2000eed0 	.word	0x2000eed0
2000c9dc:	2000d508 	.word	0x2000d508

2000c9e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000c9e0:	b580      	push	{r7, lr}
2000c9e2:	b082      	sub	sp, #8
2000c9e4:	af00      	add	r7, sp, #0
2000c9e6:	4603      	mov	r3, r0
2000c9e8:	6039      	str	r1, [r7, #0]
2000c9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000c9ec:	79fb      	ldrb	r3, [r7, #7]
2000c9ee:	2b00      	cmp	r3, #0
2000c9f0:	d105      	bne.n	2000c9fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000c9f2:	683a      	ldr	r2, [r7, #0]
2000c9f4:	4907      	ldr	r1, [pc, #28]	@ (2000ca14 <USBD_FS_InterfaceStrDescriptor+0x34>)
2000c9f6:	4808      	ldr	r0, [pc, #32]	@ (2000ca18 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000c9f8:	f7ff fe20 	bl	2000c63c <USBD_GetString>
2000c9fc:	e004      	b.n	2000ca08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000c9fe:	683a      	ldr	r2, [r7, #0]
2000ca00:	4904      	ldr	r1, [pc, #16]	@ (2000ca14 <USBD_FS_InterfaceStrDescriptor+0x34>)
2000ca02:	4805      	ldr	r0, [pc, #20]	@ (2000ca18 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000ca04:	f7ff fe1a 	bl	2000c63c <USBD_GetString>
  }
  return USBD_StrDesc;
2000ca08:	4b02      	ldr	r3, [pc, #8]	@ (2000ca14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
2000ca0a:	4618      	mov	r0, r3
2000ca0c:	3708      	adds	r7, #8
2000ca0e:	46bd      	mov	sp, r7
2000ca10:	bd80      	pop	{r7, pc}
2000ca12:	bf00      	nop
2000ca14:	2000eed0 	.word	0x2000eed0
2000ca18:	2000d508 	.word	0x2000d508

2000ca1c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000ca1c:	b480      	push	{r7}
2000ca1e:	b083      	sub	sp, #12
2000ca20:	af00      	add	r7, sp, #0
2000ca22:	4603      	mov	r3, r0
2000ca24:	6039      	str	r1, [r7, #0]
2000ca26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
2000ca28:	683b      	ldr	r3, [r7, #0]
2000ca2a:	220c      	movs	r2, #12
2000ca2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
2000ca2e:	4b03      	ldr	r3, [pc, #12]	@ (2000ca3c <USBD_FS_USR_BOSDescriptor+0x20>)
}
2000ca30:	4618      	mov	r0, r3
2000ca32:	370c      	adds	r7, #12
2000ca34:	46bd      	mov	sp, r7
2000ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ca3a:	4770      	bx	lr
2000ca3c:	2000d65c 	.word	0x2000d65c

2000ca40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
2000ca40:	b580      	push	{r7, lr}
2000ca42:	b084      	sub	sp, #16
2000ca44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
2000ca46:	4b0f      	ldr	r3, [pc, #60]	@ (2000ca84 <Get_SerialNum+0x44>)
2000ca48:	681b      	ldr	r3, [r3, #0]
2000ca4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
2000ca4c:	4b0e      	ldr	r3, [pc, #56]	@ (2000ca88 <Get_SerialNum+0x48>)
2000ca4e:	681b      	ldr	r3, [r3, #0]
2000ca50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
2000ca52:	4b0e      	ldr	r3, [pc, #56]	@ (2000ca8c <Get_SerialNum+0x4c>)
2000ca54:	681b      	ldr	r3, [r3, #0]
2000ca56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
2000ca58:	68fa      	ldr	r2, [r7, #12]
2000ca5a:	687b      	ldr	r3, [r7, #4]
2000ca5c:	4413      	add	r3, r2
2000ca5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
2000ca60:	68fb      	ldr	r3, [r7, #12]
2000ca62:	2b00      	cmp	r3, #0
2000ca64:	d009      	beq.n	2000ca7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
2000ca66:	2208      	movs	r2, #8
2000ca68:	4909      	ldr	r1, [pc, #36]	@ (2000ca90 <Get_SerialNum+0x50>)
2000ca6a:	68f8      	ldr	r0, [r7, #12]
2000ca6c:	f000 f814 	bl	2000ca98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
2000ca70:	2204      	movs	r2, #4
2000ca72:	4908      	ldr	r1, [pc, #32]	@ (2000ca94 <Get_SerialNum+0x54>)
2000ca74:	68b8      	ldr	r0, [r7, #8]
2000ca76:	f000 f80f 	bl	2000ca98 <IntToUnicode>
  }
}
2000ca7a:	bf00      	nop
2000ca7c:	3710      	adds	r7, #16
2000ca7e:	46bd      	mov	sp, r7
2000ca80:	bd80      	pop	{r7, pc}
2000ca82:	bf00      	nop
2000ca84:	1ff0f420 	.word	0x1ff0f420
2000ca88:	1ff0f424 	.word	0x1ff0f424
2000ca8c:	1ff0f428 	.word	0x1ff0f428
2000ca90:	2000d66e 	.word	0x2000d66e
2000ca94:	2000d67e 	.word	0x2000d67e

2000ca98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
2000ca98:	b480      	push	{r7}
2000ca9a:	b087      	sub	sp, #28
2000ca9c:	af00      	add	r7, sp, #0
2000ca9e:	60f8      	str	r0, [r7, #12]
2000caa0:	60b9      	str	r1, [r7, #8]
2000caa2:	4613      	mov	r3, r2
2000caa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
2000caa6:	2300      	movs	r3, #0
2000caa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
2000caaa:	2300      	movs	r3, #0
2000caac:	75fb      	strb	r3, [r7, #23]
2000caae:	e027      	b.n	2000cb00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
2000cab0:	68fb      	ldr	r3, [r7, #12]
2000cab2:	0f1b      	lsrs	r3, r3, #28
2000cab4:	2b09      	cmp	r3, #9
2000cab6:	d80b      	bhi.n	2000cad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
2000cab8:	68fb      	ldr	r3, [r7, #12]
2000caba:	0f1b      	lsrs	r3, r3, #28
2000cabc:	b2da      	uxtb	r2, r3
2000cabe:	7dfb      	ldrb	r3, [r7, #23]
2000cac0:	005b      	lsls	r3, r3, #1
2000cac2:	4619      	mov	r1, r3
2000cac4:	68bb      	ldr	r3, [r7, #8]
2000cac6:	440b      	add	r3, r1
2000cac8:	3230      	adds	r2, #48	@ 0x30
2000caca:	b2d2      	uxtb	r2, r2
2000cacc:	701a      	strb	r2, [r3, #0]
2000cace:	e00a      	b.n	2000cae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
2000cad0:	68fb      	ldr	r3, [r7, #12]
2000cad2:	0f1b      	lsrs	r3, r3, #28
2000cad4:	b2da      	uxtb	r2, r3
2000cad6:	7dfb      	ldrb	r3, [r7, #23]
2000cad8:	005b      	lsls	r3, r3, #1
2000cada:	4619      	mov	r1, r3
2000cadc:	68bb      	ldr	r3, [r7, #8]
2000cade:	440b      	add	r3, r1
2000cae0:	3237      	adds	r2, #55	@ 0x37
2000cae2:	b2d2      	uxtb	r2, r2
2000cae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
2000cae6:	68fb      	ldr	r3, [r7, #12]
2000cae8:	011b      	lsls	r3, r3, #4
2000caea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
2000caec:	7dfb      	ldrb	r3, [r7, #23]
2000caee:	005b      	lsls	r3, r3, #1
2000caf0:	3301      	adds	r3, #1
2000caf2:	68ba      	ldr	r2, [r7, #8]
2000caf4:	4413      	add	r3, r2
2000caf6:	2200      	movs	r2, #0
2000caf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
2000cafa:	7dfb      	ldrb	r3, [r7, #23]
2000cafc:	3301      	adds	r3, #1
2000cafe:	75fb      	strb	r3, [r7, #23]
2000cb00:	7dfa      	ldrb	r2, [r7, #23]
2000cb02:	79fb      	ldrb	r3, [r7, #7]
2000cb04:	429a      	cmp	r2, r3
2000cb06:	d3d3      	bcc.n	2000cab0 <IntToUnicode+0x18>
  }
}
2000cb08:	bf00      	nop
2000cb0a:	bf00      	nop
2000cb0c:	371c      	adds	r7, #28
2000cb0e:	46bd      	mov	sp, r7
2000cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
2000cb14:	4770      	bx	lr
	...

2000cb18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
2000cb18:	b580      	push	{r7, lr}
2000cb1a:	b0ac      	sub	sp, #176	@ 0xb0
2000cb1c:	af00      	add	r7, sp, #0
2000cb1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000cb20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000cb24:	2200      	movs	r2, #0
2000cb26:	601a      	str	r2, [r3, #0]
2000cb28:	605a      	str	r2, [r3, #4]
2000cb2a:	609a      	str	r2, [r3, #8]
2000cb2c:	60da      	str	r2, [r3, #12]
2000cb2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2000cb30:	f107 0318 	add.w	r3, r7, #24
2000cb34:	2284      	movs	r2, #132	@ 0x84
2000cb36:	2100      	movs	r1, #0
2000cb38:	4618      	mov	r0, r3
2000cb3a:	f000 fc29 	bl	2000d390 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
2000cb3e:	687b      	ldr	r3, [r7, #4]
2000cb40:	681b      	ldr	r3, [r3, #0]
2000cb42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2000cb46:	d161      	bne.n	2000cc0c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
2000cb48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000cb4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
2000cb4e:	2300      	movs	r3, #0
2000cb50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2000cb54:	f107 0318 	add.w	r3, r7, #24
2000cb58:	4618      	mov	r0, r3
2000cb5a:	f7fb facf 	bl	200080fc <HAL_RCCEx_PeriphCLKConfig>
2000cb5e:	4603      	mov	r3, r0
2000cb60:	2b00      	cmp	r3, #0
2000cb62:	d001      	beq.n	2000cb68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
2000cb64:	f7f8 f9d0 	bl	20004f08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000cb68:	4b2a      	ldr	r3, [pc, #168]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cb6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000cb6c:	4a29      	ldr	r2, [pc, #164]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cb6e:	f043 0301 	orr.w	r3, r3, #1
2000cb72:	6313      	str	r3, [r2, #48]	@ 0x30
2000cb74:	4b27      	ldr	r3, [pc, #156]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cb76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000cb78:	f003 0301 	and.w	r3, r3, #1
2000cb7c:	617b      	str	r3, [r7, #20]
2000cb7e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
2000cb80:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
2000cb84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000cb88:	2302      	movs	r3, #2
2000cb8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000cb8e:	2300      	movs	r3, #0
2000cb90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000cb94:	2303      	movs	r3, #3
2000cb96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
2000cb9a:	230a      	movs	r3, #10
2000cb9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000cba0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000cba4:	4619      	mov	r1, r3
2000cba6:	481c      	ldr	r0, [pc, #112]	@ (2000cc18 <HAL_PCD_MspInit+0x100>)
2000cba8:	f7f9 f916 	bl	20005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
2000cbac:	f44f 7300 	mov.w	r3, #512	@ 0x200
2000cbb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
2000cbb4:	2300      	movs	r3, #0
2000cbb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000cbba:	2300      	movs	r3, #0
2000cbbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
2000cbc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000cbc4:	4619      	mov	r1, r3
2000cbc6:	4814      	ldr	r0, [pc, #80]	@ (2000cc18 <HAL_PCD_MspInit+0x100>)
2000cbc8:	f7f9 f906 	bl	20005dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
2000cbcc:	4b11      	ldr	r3, [pc, #68]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cbce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000cbd0:	4a10      	ldr	r2, [pc, #64]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cbd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2000cbd6:	6353      	str	r3, [r2, #52]	@ 0x34
2000cbd8:	4b0e      	ldr	r3, [pc, #56]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cbda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000cbdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000cbe0:	613b      	str	r3, [r7, #16]
2000cbe2:	693b      	ldr	r3, [r7, #16]
2000cbe4:	4b0b      	ldr	r3, [pc, #44]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cbe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000cbe8:	4a0a      	ldr	r2, [pc, #40]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cbea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2000cbee:	6453      	str	r3, [r2, #68]	@ 0x44
2000cbf0:	4b08      	ldr	r3, [pc, #32]	@ (2000cc14 <HAL_PCD_MspInit+0xfc>)
2000cbf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000cbf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000cbf8:	60fb      	str	r3, [r7, #12]
2000cbfa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
2000cbfc:	2200      	movs	r2, #0
2000cbfe:	2100      	movs	r1, #0
2000cc00:	2043      	movs	r0, #67	@ 0x43
2000cc02:	f7f8 fd64 	bl	200056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
2000cc06:	2043      	movs	r0, #67	@ 0x43
2000cc08:	f7f8 fd7d 	bl	20005706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
2000cc0c:	bf00      	nop
2000cc0e:	37b0      	adds	r7, #176	@ 0xb0
2000cc10:	46bd      	mov	sp, r7
2000cc12:	bd80      	pop	{r7, pc}
2000cc14:	40023800 	.word	0x40023800
2000cc18:	40020000 	.word	0x40020000

2000cc1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cc1c:	b580      	push	{r7, lr}
2000cc1e:	b082      	sub	sp, #8
2000cc20:	af00      	add	r7, sp, #0
2000cc22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
2000cc24:	687b      	ldr	r3, [r7, #4]
2000cc26:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
2000cc2a:	687b      	ldr	r3, [r7, #4]
2000cc2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000cc30:	4619      	mov	r1, r3
2000cc32:	4610      	mov	r0, r2
2000cc34:	f7fe fb61 	bl	2000b2fa <USBD_LL_SetupStage>
}
2000cc38:	bf00      	nop
2000cc3a:	3708      	adds	r7, #8
2000cc3c:	46bd      	mov	sp, r7
2000cc3e:	bd80      	pop	{r7, pc}

2000cc40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cc40:	b580      	push	{r7, lr}
2000cc42:	b082      	sub	sp, #8
2000cc44:	af00      	add	r7, sp, #0
2000cc46:	6078      	str	r0, [r7, #4]
2000cc48:	460b      	mov	r3, r1
2000cc4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
2000cc4c:	687b      	ldr	r3, [r7, #4]
2000cc4e:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000cc52:	78fa      	ldrb	r2, [r7, #3]
2000cc54:	6879      	ldr	r1, [r7, #4]
2000cc56:	4613      	mov	r3, r2
2000cc58:	00db      	lsls	r3, r3, #3
2000cc5a:	4413      	add	r3, r2
2000cc5c:	009b      	lsls	r3, r3, #2
2000cc5e:	440b      	add	r3, r1
2000cc60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
2000cc64:	681a      	ldr	r2, [r3, #0]
2000cc66:	78fb      	ldrb	r3, [r7, #3]
2000cc68:	4619      	mov	r1, r3
2000cc6a:	f7fe fb9b 	bl	2000b3a4 <USBD_LL_DataOutStage>
}
2000cc6e:	bf00      	nop
2000cc70:	3708      	adds	r7, #8
2000cc72:	46bd      	mov	sp, r7
2000cc74:	bd80      	pop	{r7, pc}

2000cc76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cc76:	b580      	push	{r7, lr}
2000cc78:	b082      	sub	sp, #8
2000cc7a:	af00      	add	r7, sp, #0
2000cc7c:	6078      	str	r0, [r7, #4]
2000cc7e:	460b      	mov	r3, r1
2000cc80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
2000cc82:	687b      	ldr	r3, [r7, #4]
2000cc84:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000cc88:	78fa      	ldrb	r2, [r7, #3]
2000cc8a:	6879      	ldr	r1, [r7, #4]
2000cc8c:	4613      	mov	r3, r2
2000cc8e:	00db      	lsls	r3, r3, #3
2000cc90:	4413      	add	r3, r2
2000cc92:	009b      	lsls	r3, r3, #2
2000cc94:	440b      	add	r3, r1
2000cc96:	3320      	adds	r3, #32
2000cc98:	681a      	ldr	r2, [r3, #0]
2000cc9a:	78fb      	ldrb	r3, [r7, #3]
2000cc9c:	4619      	mov	r1, r3
2000cc9e:	f7fe fc3d 	bl	2000b51c <USBD_LL_DataInStage>
}
2000cca2:	bf00      	nop
2000cca4:	3708      	adds	r7, #8
2000cca6:	46bd      	mov	sp, r7
2000cca8:	bd80      	pop	{r7, pc}

2000ccaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000ccaa:	b580      	push	{r7, lr}
2000ccac:	b082      	sub	sp, #8
2000ccae:	af00      	add	r7, sp, #0
2000ccb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
2000ccb2:	687b      	ldr	r3, [r7, #4]
2000ccb4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000ccb8:	4618      	mov	r0, r3
2000ccba:	f7fe fd81 	bl	2000b7c0 <USBD_LL_SOF>
}
2000ccbe:	bf00      	nop
2000ccc0:	3708      	adds	r7, #8
2000ccc2:	46bd      	mov	sp, r7
2000ccc4:	bd80      	pop	{r7, pc}

2000ccc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000ccc6:	b580      	push	{r7, lr}
2000ccc8:	b084      	sub	sp, #16
2000ccca:	af00      	add	r7, sp, #0
2000cccc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
2000ccce:	2301      	movs	r3, #1
2000ccd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
2000ccd2:	687b      	ldr	r3, [r7, #4]
2000ccd4:	79db      	ldrb	r3, [r3, #7]
2000ccd6:	2b00      	cmp	r3, #0
2000ccd8:	d102      	bne.n	2000cce0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
2000ccda:	2300      	movs	r3, #0
2000ccdc:	73fb      	strb	r3, [r7, #15]
2000ccde:	e008      	b.n	2000ccf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
2000cce0:	687b      	ldr	r3, [r7, #4]
2000cce2:	79db      	ldrb	r3, [r3, #7]
2000cce4:	2b02      	cmp	r3, #2
2000cce6:	d102      	bne.n	2000ccee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
2000cce8:	2301      	movs	r3, #1
2000ccea:	73fb      	strb	r3, [r7, #15]
2000ccec:	e001      	b.n	2000ccf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
2000ccee:	f7f8 f90b 	bl	20004f08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
2000ccf2:	687b      	ldr	r3, [r7, #4]
2000ccf4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000ccf8:	7bfa      	ldrb	r2, [r7, #15]
2000ccfa:	4611      	mov	r1, r2
2000ccfc:	4618      	mov	r0, r3
2000ccfe:	f7fe fd1b 	bl	2000b738 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
2000cd02:	687b      	ldr	r3, [r7, #4]
2000cd04:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cd08:	4618      	mov	r0, r3
2000cd0a:	f7fe fcc2 	bl	2000b692 <USBD_LL_Reset>
}
2000cd0e:	bf00      	nop
2000cd10:	3710      	adds	r7, #16
2000cd12:	46bd      	mov	sp, r7
2000cd14:	bd80      	pop	{r7, pc}
	...

2000cd18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cd18:	b580      	push	{r7, lr}
2000cd1a:	b082      	sub	sp, #8
2000cd1c:	af00      	add	r7, sp, #0
2000cd1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
2000cd20:	687b      	ldr	r3, [r7, #4]
2000cd22:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cd26:	4618      	mov	r0, r3
2000cd28:	f7fe fd16 	bl	2000b758 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000cd2c:	687b      	ldr	r3, [r7, #4]
2000cd2e:	681b      	ldr	r3, [r3, #0]
2000cd30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000cd34:	681b      	ldr	r3, [r3, #0]
2000cd36:	687a      	ldr	r2, [r7, #4]
2000cd38:	6812      	ldr	r2, [r2, #0]
2000cd3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000cd3e:	f043 0301 	orr.w	r3, r3, #1
2000cd42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
2000cd44:	687b      	ldr	r3, [r7, #4]
2000cd46:	7adb      	ldrb	r3, [r3, #11]
2000cd48:	2b00      	cmp	r3, #0
2000cd4a:	d005      	beq.n	2000cd58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000cd4c:	4b04      	ldr	r3, [pc, #16]	@ (2000cd60 <HAL_PCD_SuspendCallback+0x48>)
2000cd4e:	691b      	ldr	r3, [r3, #16]
2000cd50:	4a03      	ldr	r2, [pc, #12]	@ (2000cd60 <HAL_PCD_SuspendCallback+0x48>)
2000cd52:	f043 0306 	orr.w	r3, r3, #6
2000cd56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
2000cd58:	bf00      	nop
2000cd5a:	3708      	adds	r7, #8
2000cd5c:	46bd      	mov	sp, r7
2000cd5e:	bd80      	pop	{r7, pc}
2000cd60:	e000ed00 	.word	0xe000ed00

2000cd64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cd64:	b580      	push	{r7, lr}
2000cd66:	b082      	sub	sp, #8
2000cd68:	af00      	add	r7, sp, #0
2000cd6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
2000cd6c:	687b      	ldr	r3, [r7, #4]
2000cd6e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cd72:	4618      	mov	r0, r3
2000cd74:	f7fe fd0c 	bl	2000b790 <USBD_LL_Resume>
}
2000cd78:	bf00      	nop
2000cd7a:	3708      	adds	r7, #8
2000cd7c:	46bd      	mov	sp, r7
2000cd7e:	bd80      	pop	{r7, pc}

2000cd80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cd80:	b580      	push	{r7, lr}
2000cd82:	b082      	sub	sp, #8
2000cd84:	af00      	add	r7, sp, #0
2000cd86:	6078      	str	r0, [r7, #4]
2000cd88:	460b      	mov	r3, r1
2000cd8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000cd8c:	687b      	ldr	r3, [r7, #4]
2000cd8e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cd92:	78fa      	ldrb	r2, [r7, #3]
2000cd94:	4611      	mov	r1, r2
2000cd96:	4618      	mov	r0, r3
2000cd98:	f7fe fd64 	bl	2000b864 <USBD_LL_IsoOUTIncomplete>
}
2000cd9c:	bf00      	nop
2000cd9e:	3708      	adds	r7, #8
2000cda0:	46bd      	mov	sp, r7
2000cda2:	bd80      	pop	{r7, pc}

2000cda4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cda4:	b580      	push	{r7, lr}
2000cda6:	b082      	sub	sp, #8
2000cda8:	af00      	add	r7, sp, #0
2000cdaa:	6078      	str	r0, [r7, #4]
2000cdac:	460b      	mov	r3, r1
2000cdae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000cdb0:	687b      	ldr	r3, [r7, #4]
2000cdb2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cdb6:	78fa      	ldrb	r2, [r7, #3]
2000cdb8:	4611      	mov	r1, r2
2000cdba:	4618      	mov	r0, r3
2000cdbc:	f7fe fd20 	bl	2000b800 <USBD_LL_IsoINIncomplete>
}
2000cdc0:	bf00      	nop
2000cdc2:	3708      	adds	r7, #8
2000cdc4:	46bd      	mov	sp, r7
2000cdc6:	bd80      	pop	{r7, pc}

2000cdc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cdc8:	b580      	push	{r7, lr}
2000cdca:	b082      	sub	sp, #8
2000cdcc:	af00      	add	r7, sp, #0
2000cdce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
2000cdd0:	687b      	ldr	r3, [r7, #4]
2000cdd2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cdd6:	4618      	mov	r0, r3
2000cdd8:	f7fe fd76 	bl	2000b8c8 <USBD_LL_DevConnected>
}
2000cddc:	bf00      	nop
2000cdde:	3708      	adds	r7, #8
2000cde0:	46bd      	mov	sp, r7
2000cde2:	bd80      	pop	{r7, pc}

2000cde4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000cde4:	b580      	push	{r7, lr}
2000cde6:	b082      	sub	sp, #8
2000cde8:	af00      	add	r7, sp, #0
2000cdea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
2000cdec:	687b      	ldr	r3, [r7, #4]
2000cdee:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000cdf2:	4618      	mov	r0, r3
2000cdf4:	f7fe fd73 	bl	2000b8de <USBD_LL_DevDisconnected>
}
2000cdf8:	bf00      	nop
2000cdfa:	3708      	adds	r7, #8
2000cdfc:	46bd      	mov	sp, r7
2000cdfe:	bd80      	pop	{r7, pc}

2000ce00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
2000ce00:	b580      	push	{r7, lr}
2000ce02:	b082      	sub	sp, #8
2000ce04:	af00      	add	r7, sp, #0
2000ce06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
2000ce08:	687b      	ldr	r3, [r7, #4]
2000ce0a:	781b      	ldrb	r3, [r3, #0]
2000ce0c:	2b00      	cmp	r3, #0
2000ce0e:	d13c      	bne.n	2000ce8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
2000ce10:	4a20      	ldr	r2, [pc, #128]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce12:	687b      	ldr	r3, [r7, #4]
2000ce14:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
2000ce18:	687b      	ldr	r3, [r7, #4]
2000ce1a:	4a1e      	ldr	r2, [pc, #120]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
2000ce20:	4b1c      	ldr	r3, [pc, #112]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
2000ce26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
2000ce28:	4b1a      	ldr	r3, [pc, #104]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce2a:	2206      	movs	r2, #6
2000ce2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
2000ce2e:	4b19      	ldr	r3, [pc, #100]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce30:	2202      	movs	r2, #2
2000ce32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
2000ce34:	4b17      	ldr	r3, [pc, #92]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce36:	2200      	movs	r2, #0
2000ce38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
2000ce3a:	4b16      	ldr	r3, [pc, #88]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce3c:	2202      	movs	r2, #2
2000ce3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
2000ce40:	4b14      	ldr	r3, [pc, #80]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce42:	2201      	movs	r2, #1
2000ce44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
2000ce46:	4b13      	ldr	r3, [pc, #76]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce48:	2200      	movs	r2, #0
2000ce4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
2000ce4c:	4b11      	ldr	r3, [pc, #68]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce4e:	2200      	movs	r2, #0
2000ce50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
2000ce52:	4b10      	ldr	r3, [pc, #64]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce54:	2201      	movs	r2, #1
2000ce56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
2000ce58:	4b0e      	ldr	r3, [pc, #56]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce5a:	2200      	movs	r2, #0
2000ce5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
2000ce5e:	480d      	ldr	r0, [pc, #52]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce60:	f7f9 f997 	bl	20006192 <HAL_PCD_Init>
2000ce64:	4603      	mov	r3, r0
2000ce66:	2b00      	cmp	r3, #0
2000ce68:	d001      	beq.n	2000ce6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
2000ce6a:	f7f8 f84d 	bl	20004f08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
2000ce6e:	2180      	movs	r1, #128	@ 0x80
2000ce70:	4808      	ldr	r0, [pc, #32]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce72:	f7fa fbe4 	bl	2000763e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
2000ce76:	2240      	movs	r2, #64	@ 0x40
2000ce78:	2100      	movs	r1, #0
2000ce7a:	4806      	ldr	r0, [pc, #24]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce7c:	f7fa fb98 	bl	200075b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
2000ce80:	2280      	movs	r2, #128	@ 0x80
2000ce82:	2101      	movs	r1, #1
2000ce84:	4803      	ldr	r0, [pc, #12]	@ (2000ce94 <USBD_LL_Init+0x94>)
2000ce86:	f7fa fb93 	bl	200075b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
2000ce8a:	2300      	movs	r3, #0
}
2000ce8c:	4618      	mov	r0, r3
2000ce8e:	3708      	adds	r7, #8
2000ce90:	46bd      	mov	sp, r7
2000ce92:	bd80      	pop	{r7, pc}
2000ce94:	2000f0d0 	.word	0x2000f0d0

2000ce98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
2000ce98:	b580      	push	{r7, lr}
2000ce9a:	b084      	sub	sp, #16
2000ce9c:	af00      	add	r7, sp, #0
2000ce9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000cea0:	2300      	movs	r3, #0
2000cea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000cea4:	2300      	movs	r3, #0
2000cea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
2000cea8:	687b      	ldr	r3, [r7, #4]
2000ceaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000ceae:	4618      	mov	r0, r3
2000ceb0:	f7f9 fa85 	bl	200063be <HAL_PCD_Start>
2000ceb4:	4603      	mov	r3, r0
2000ceb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000ceb8:	7bfb      	ldrb	r3, [r7, #15]
2000ceba:	4618      	mov	r0, r3
2000cebc:	f000 f97e 	bl	2000d1bc <USBD_Get_USB_Status>
2000cec0:	4603      	mov	r3, r0
2000cec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000cec4:	7bbb      	ldrb	r3, [r7, #14]
}
2000cec6:	4618      	mov	r0, r3
2000cec8:	3710      	adds	r7, #16
2000ceca:	46bd      	mov	sp, r7
2000cecc:	bd80      	pop	{r7, pc}

2000cece <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
2000cece:	b580      	push	{r7, lr}
2000ced0:	b084      	sub	sp, #16
2000ced2:	af00      	add	r7, sp, #0
2000ced4:	6078      	str	r0, [r7, #4]
2000ced6:	4608      	mov	r0, r1
2000ced8:	4611      	mov	r1, r2
2000ceda:	461a      	mov	r2, r3
2000cedc:	4603      	mov	r3, r0
2000cede:	70fb      	strb	r3, [r7, #3]
2000cee0:	460b      	mov	r3, r1
2000cee2:	70bb      	strb	r3, [r7, #2]
2000cee4:	4613      	mov	r3, r2
2000cee6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000cee8:	2300      	movs	r3, #0
2000ceea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000ceec:	2300      	movs	r3, #0
2000ceee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
2000cef0:	687b      	ldr	r3, [r7, #4]
2000cef2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000cef6:	78bb      	ldrb	r3, [r7, #2]
2000cef8:	883a      	ldrh	r2, [r7, #0]
2000cefa:	78f9      	ldrb	r1, [r7, #3]
2000cefc:	f7f9 ff73 	bl	20006de6 <HAL_PCD_EP_Open>
2000cf00:	4603      	mov	r3, r0
2000cf02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000cf04:	7bfb      	ldrb	r3, [r7, #15]
2000cf06:	4618      	mov	r0, r3
2000cf08:	f000 f958 	bl	2000d1bc <USBD_Get_USB_Status>
2000cf0c:	4603      	mov	r3, r0
2000cf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000cf10:	7bbb      	ldrb	r3, [r7, #14]
}
2000cf12:	4618      	mov	r0, r3
2000cf14:	3710      	adds	r7, #16
2000cf16:	46bd      	mov	sp, r7
2000cf18:	bd80      	pop	{r7, pc}

2000cf1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000cf1a:	b580      	push	{r7, lr}
2000cf1c:	b084      	sub	sp, #16
2000cf1e:	af00      	add	r7, sp, #0
2000cf20:	6078      	str	r0, [r7, #4]
2000cf22:	460b      	mov	r3, r1
2000cf24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000cf26:	2300      	movs	r3, #0
2000cf28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000cf2a:	2300      	movs	r3, #0
2000cf2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
2000cf2e:	687b      	ldr	r3, [r7, #4]
2000cf30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000cf34:	78fa      	ldrb	r2, [r7, #3]
2000cf36:	4611      	mov	r1, r2
2000cf38:	4618      	mov	r0, r3
2000cf3a:	f7f9 ffbe 	bl	20006eba <HAL_PCD_EP_Close>
2000cf3e:	4603      	mov	r3, r0
2000cf40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000cf42:	7bfb      	ldrb	r3, [r7, #15]
2000cf44:	4618      	mov	r0, r3
2000cf46:	f000 f939 	bl	2000d1bc <USBD_Get_USB_Status>
2000cf4a:	4603      	mov	r3, r0
2000cf4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000cf4e:	7bbb      	ldrb	r3, [r7, #14]
}
2000cf50:	4618      	mov	r0, r3
2000cf52:	3710      	adds	r7, #16
2000cf54:	46bd      	mov	sp, r7
2000cf56:	bd80      	pop	{r7, pc}

2000cf58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000cf58:	b580      	push	{r7, lr}
2000cf5a:	b084      	sub	sp, #16
2000cf5c:	af00      	add	r7, sp, #0
2000cf5e:	6078      	str	r0, [r7, #4]
2000cf60:	460b      	mov	r3, r1
2000cf62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000cf64:	2300      	movs	r3, #0
2000cf66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000cf68:	2300      	movs	r3, #0
2000cf6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
2000cf6c:	687b      	ldr	r3, [r7, #4]
2000cf6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000cf72:	78fa      	ldrb	r2, [r7, #3]
2000cf74:	4611      	mov	r1, r2
2000cf76:	4618      	mov	r0, r3
2000cf78:	f7fa f876 	bl	20007068 <HAL_PCD_EP_SetStall>
2000cf7c:	4603      	mov	r3, r0
2000cf7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000cf80:	7bfb      	ldrb	r3, [r7, #15]
2000cf82:	4618      	mov	r0, r3
2000cf84:	f000 f91a 	bl	2000d1bc <USBD_Get_USB_Status>
2000cf88:	4603      	mov	r3, r0
2000cf8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000cf8c:	7bbb      	ldrb	r3, [r7, #14]
}
2000cf8e:	4618      	mov	r0, r3
2000cf90:	3710      	adds	r7, #16
2000cf92:	46bd      	mov	sp, r7
2000cf94:	bd80      	pop	{r7, pc}

2000cf96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000cf96:	b580      	push	{r7, lr}
2000cf98:	b084      	sub	sp, #16
2000cf9a:	af00      	add	r7, sp, #0
2000cf9c:	6078      	str	r0, [r7, #4]
2000cf9e:	460b      	mov	r3, r1
2000cfa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000cfa2:	2300      	movs	r3, #0
2000cfa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000cfa6:	2300      	movs	r3, #0
2000cfa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
2000cfaa:	687b      	ldr	r3, [r7, #4]
2000cfac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000cfb0:	78fa      	ldrb	r2, [r7, #3]
2000cfb2:	4611      	mov	r1, r2
2000cfb4:	4618      	mov	r0, r3
2000cfb6:	f7fa f8ba 	bl	2000712e <HAL_PCD_EP_ClrStall>
2000cfba:	4603      	mov	r3, r0
2000cfbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000cfbe:	7bfb      	ldrb	r3, [r7, #15]
2000cfc0:	4618      	mov	r0, r3
2000cfc2:	f000 f8fb 	bl	2000d1bc <USBD_Get_USB_Status>
2000cfc6:	4603      	mov	r3, r0
2000cfc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000cfca:	7bbb      	ldrb	r3, [r7, #14]
}
2000cfcc:	4618      	mov	r0, r3
2000cfce:	3710      	adds	r7, #16
2000cfd0:	46bd      	mov	sp, r7
2000cfd2:	bd80      	pop	{r7, pc}

2000cfd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000cfd4:	b480      	push	{r7}
2000cfd6:	b085      	sub	sp, #20
2000cfd8:	af00      	add	r7, sp, #0
2000cfda:	6078      	str	r0, [r7, #4]
2000cfdc:	460b      	mov	r3, r1
2000cfde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
2000cfe0:	687b      	ldr	r3, [r7, #4]
2000cfe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000cfe6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
2000cfe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000cfec:	2b00      	cmp	r3, #0
2000cfee:	da0b      	bge.n	2000d008 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
2000cff0:	78fb      	ldrb	r3, [r7, #3]
2000cff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000cff6:	68f9      	ldr	r1, [r7, #12]
2000cff8:	4613      	mov	r3, r2
2000cffa:	00db      	lsls	r3, r3, #3
2000cffc:	4413      	add	r3, r2
2000cffe:	009b      	lsls	r3, r3, #2
2000d000:	440b      	add	r3, r1
2000d002:	3316      	adds	r3, #22
2000d004:	781b      	ldrb	r3, [r3, #0]
2000d006:	e00b      	b.n	2000d020 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
2000d008:	78fb      	ldrb	r3, [r7, #3]
2000d00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000d00e:	68f9      	ldr	r1, [r7, #12]
2000d010:	4613      	mov	r3, r2
2000d012:	00db      	lsls	r3, r3, #3
2000d014:	4413      	add	r3, r2
2000d016:	009b      	lsls	r3, r3, #2
2000d018:	440b      	add	r3, r1
2000d01a:	f203 2356 	addw	r3, r3, #598	@ 0x256
2000d01e:	781b      	ldrb	r3, [r3, #0]
  }
}
2000d020:	4618      	mov	r0, r3
2000d022:	3714      	adds	r7, #20
2000d024:	46bd      	mov	sp, r7
2000d026:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d02a:	4770      	bx	lr

2000d02c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
2000d02c:	b580      	push	{r7, lr}
2000d02e:	b084      	sub	sp, #16
2000d030:	af00      	add	r7, sp, #0
2000d032:	6078      	str	r0, [r7, #4]
2000d034:	460b      	mov	r3, r1
2000d036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d038:	2300      	movs	r3, #0
2000d03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d03c:	2300      	movs	r3, #0
2000d03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
2000d040:	687b      	ldr	r3, [r7, #4]
2000d042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d046:	78fa      	ldrb	r2, [r7, #3]
2000d048:	4611      	mov	r1, r2
2000d04a:	4618      	mov	r0, r3
2000d04c:	f7f9 fea7 	bl	20006d9e <HAL_PCD_SetAddress>
2000d050:	4603      	mov	r3, r0
2000d052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d054:	7bfb      	ldrb	r3, [r7, #15]
2000d056:	4618      	mov	r0, r3
2000d058:	f000 f8b0 	bl	2000d1bc <USBD_Get_USB_Status>
2000d05c:	4603      	mov	r3, r0
2000d05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000d060:	7bbb      	ldrb	r3, [r7, #14]
}
2000d062:	4618      	mov	r0, r3
2000d064:	3710      	adds	r7, #16
2000d066:	46bd      	mov	sp, r7
2000d068:	bd80      	pop	{r7, pc}

2000d06a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000d06a:	b580      	push	{r7, lr}
2000d06c:	b086      	sub	sp, #24
2000d06e:	af00      	add	r7, sp, #0
2000d070:	60f8      	str	r0, [r7, #12]
2000d072:	607a      	str	r2, [r7, #4]
2000d074:	603b      	str	r3, [r7, #0]
2000d076:	460b      	mov	r3, r1
2000d078:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d07a:	2300      	movs	r3, #0
2000d07c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d07e:	2300      	movs	r3, #0
2000d080:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
2000d082:	68fb      	ldr	r3, [r7, #12]
2000d084:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000d088:	7af9      	ldrb	r1, [r7, #11]
2000d08a:	683b      	ldr	r3, [r7, #0]
2000d08c:	687a      	ldr	r2, [r7, #4]
2000d08e:	f7f9 ffb1 	bl	20006ff4 <HAL_PCD_EP_Transmit>
2000d092:	4603      	mov	r3, r0
2000d094:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d096:	7dfb      	ldrb	r3, [r7, #23]
2000d098:	4618      	mov	r0, r3
2000d09a:	f000 f88f 	bl	2000d1bc <USBD_Get_USB_Status>
2000d09e:	4603      	mov	r3, r0
2000d0a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000d0a2:	7dbb      	ldrb	r3, [r7, #22]
}
2000d0a4:	4618      	mov	r0, r3
2000d0a6:	3718      	adds	r7, #24
2000d0a8:	46bd      	mov	sp, r7
2000d0aa:	bd80      	pop	{r7, pc}

2000d0ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000d0ac:	b580      	push	{r7, lr}
2000d0ae:	b086      	sub	sp, #24
2000d0b0:	af00      	add	r7, sp, #0
2000d0b2:	60f8      	str	r0, [r7, #12]
2000d0b4:	607a      	str	r2, [r7, #4]
2000d0b6:	603b      	str	r3, [r7, #0]
2000d0b8:	460b      	mov	r3, r1
2000d0ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000d0bc:	2300      	movs	r3, #0
2000d0be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d0c0:	2300      	movs	r3, #0
2000d0c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
2000d0c4:	68fb      	ldr	r3, [r7, #12]
2000d0c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000d0ca:	7af9      	ldrb	r1, [r7, #11]
2000d0cc:	683b      	ldr	r3, [r7, #0]
2000d0ce:	687a      	ldr	r2, [r7, #4]
2000d0d0:	f7f9 ff3d 	bl	20006f4e <HAL_PCD_EP_Receive>
2000d0d4:	4603      	mov	r3, r0
2000d0d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000d0d8:	7dfb      	ldrb	r3, [r7, #23]
2000d0da:	4618      	mov	r0, r3
2000d0dc:	f000 f86e 	bl	2000d1bc <USBD_Get_USB_Status>
2000d0e0:	4603      	mov	r3, r0
2000d0e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000d0e4:	7dbb      	ldrb	r3, [r7, #22]
}
2000d0e6:	4618      	mov	r0, r3
2000d0e8:	3718      	adds	r7, #24
2000d0ea:	46bd      	mov	sp, r7
2000d0ec:	bd80      	pop	{r7, pc}

2000d0ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000d0ee:	b580      	push	{r7, lr}
2000d0f0:	b082      	sub	sp, #8
2000d0f2:	af00      	add	r7, sp, #0
2000d0f4:	6078      	str	r0, [r7, #4]
2000d0f6:	460b      	mov	r3, r1
2000d0f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
2000d0fa:	687b      	ldr	r3, [r7, #4]
2000d0fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000d100:	78fa      	ldrb	r2, [r7, #3]
2000d102:	4611      	mov	r1, r2
2000d104:	4618      	mov	r0, r3
2000d106:	f7f9 ff5d 	bl	20006fc4 <HAL_PCD_EP_GetRxCount>
2000d10a:	4603      	mov	r3, r0
}
2000d10c:	4618      	mov	r0, r3
2000d10e:	3708      	adds	r7, #8
2000d110:	46bd      	mov	sp, r7
2000d112:	bd80      	pop	{r7, pc}

2000d114 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
2000d114:	b580      	push	{r7, lr}
2000d116:	b082      	sub	sp, #8
2000d118:	af00      	add	r7, sp, #0
2000d11a:	6078      	str	r0, [r7, #4]
2000d11c:	460b      	mov	r3, r1
2000d11e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
2000d120:	78fb      	ldrb	r3, [r7, #3]
2000d122:	2b00      	cmp	r3, #0
2000d124:	d002      	beq.n	2000d12c <HAL_PCDEx_LPM_Callback+0x18>
2000d126:	2b01      	cmp	r3, #1
2000d128:	d01f      	beq.n	2000d16a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
2000d12a:	e03b      	b.n	2000d1a4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
2000d12c:	687b      	ldr	r3, [r7, #4]
2000d12e:	7adb      	ldrb	r3, [r3, #11]
2000d130:	2b00      	cmp	r3, #0
2000d132:	d007      	beq.n	2000d144 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
2000d134:	f000 f83c 	bl	2000d1b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000d138:	4b1c      	ldr	r3, [pc, #112]	@ (2000d1ac <HAL_PCDEx_LPM_Callback+0x98>)
2000d13a:	691b      	ldr	r3, [r3, #16]
2000d13c:	4a1b      	ldr	r2, [pc, #108]	@ (2000d1ac <HAL_PCDEx_LPM_Callback+0x98>)
2000d13e:	f023 0306 	bic.w	r3, r3, #6
2000d142:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
2000d144:	687b      	ldr	r3, [r7, #4]
2000d146:	681b      	ldr	r3, [r3, #0]
2000d148:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000d14c:	681b      	ldr	r3, [r3, #0]
2000d14e:	687a      	ldr	r2, [r7, #4]
2000d150:	6812      	ldr	r2, [r2, #0]
2000d152:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000d156:	f023 0301 	bic.w	r3, r3, #1
2000d15a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
2000d15c:	687b      	ldr	r3, [r7, #4]
2000d15e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000d162:	4618      	mov	r0, r3
2000d164:	f7fe fb14 	bl	2000b790 <USBD_LL_Resume>
    break;
2000d168:	e01c      	b.n	2000d1a4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000d16a:	687b      	ldr	r3, [r7, #4]
2000d16c:	681b      	ldr	r3, [r3, #0]
2000d16e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000d172:	681b      	ldr	r3, [r3, #0]
2000d174:	687a      	ldr	r2, [r7, #4]
2000d176:	6812      	ldr	r2, [r2, #0]
2000d178:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000d17c:	f043 0301 	orr.w	r3, r3, #1
2000d180:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
2000d182:	687b      	ldr	r3, [r7, #4]
2000d184:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000d188:	4618      	mov	r0, r3
2000d18a:	f7fe fae5 	bl	2000b758 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
2000d18e:	687b      	ldr	r3, [r7, #4]
2000d190:	7adb      	ldrb	r3, [r3, #11]
2000d192:	2b00      	cmp	r3, #0
2000d194:	d005      	beq.n	2000d1a2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000d196:	4b05      	ldr	r3, [pc, #20]	@ (2000d1ac <HAL_PCDEx_LPM_Callback+0x98>)
2000d198:	691b      	ldr	r3, [r3, #16]
2000d19a:	4a04      	ldr	r2, [pc, #16]	@ (2000d1ac <HAL_PCDEx_LPM_Callback+0x98>)
2000d19c:	f043 0306 	orr.w	r3, r3, #6
2000d1a0:	6113      	str	r3, [r2, #16]
    break;
2000d1a2:	bf00      	nop
}
2000d1a4:	bf00      	nop
2000d1a6:	3708      	adds	r7, #8
2000d1a8:	46bd      	mov	sp, r7
2000d1aa:	bd80      	pop	{r7, pc}
2000d1ac:	e000ed00 	.word	0xe000ed00

2000d1b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
2000d1b0:	b580      	push	{r7, lr}
2000d1b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
2000d1b4:	f7f7 fae6 	bl	20004784 <SystemClock_Config>
}
2000d1b8:	bf00      	nop
2000d1ba:	bd80      	pop	{r7, pc}

2000d1bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
2000d1bc:	b480      	push	{r7}
2000d1be:	b085      	sub	sp, #20
2000d1c0:	af00      	add	r7, sp, #0
2000d1c2:	4603      	mov	r3, r0
2000d1c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000d1c6:	2300      	movs	r3, #0
2000d1c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
2000d1ca:	79fb      	ldrb	r3, [r7, #7]
2000d1cc:	2b03      	cmp	r3, #3
2000d1ce:	d817      	bhi.n	2000d200 <USBD_Get_USB_Status+0x44>
2000d1d0:	a201      	add	r2, pc, #4	@ (adr r2, 2000d1d8 <USBD_Get_USB_Status+0x1c>)
2000d1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000d1d6:	bf00      	nop
2000d1d8:	2000d1e9 	.word	0x2000d1e9
2000d1dc:	2000d1ef 	.word	0x2000d1ef
2000d1e0:	2000d1f5 	.word	0x2000d1f5
2000d1e4:	2000d1fb 	.word	0x2000d1fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
2000d1e8:	2300      	movs	r3, #0
2000d1ea:	73fb      	strb	r3, [r7, #15]
    break;
2000d1ec:	e00b      	b.n	2000d206 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
2000d1ee:	2303      	movs	r3, #3
2000d1f0:	73fb      	strb	r3, [r7, #15]
    break;
2000d1f2:	e008      	b.n	2000d206 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
2000d1f4:	2301      	movs	r3, #1
2000d1f6:	73fb      	strb	r3, [r7, #15]
    break;
2000d1f8:	e005      	b.n	2000d206 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
2000d1fa:	2303      	movs	r3, #3
2000d1fc:	73fb      	strb	r3, [r7, #15]
    break;
2000d1fe:	e002      	b.n	2000d206 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
2000d200:	2303      	movs	r3, #3
2000d202:	73fb      	strb	r3, [r7, #15]
    break;
2000d204:	bf00      	nop
  }
  return usb_status;
2000d206:	7bfb      	ldrb	r3, [r7, #15]
}
2000d208:	4618      	mov	r0, r3
2000d20a:	3714      	adds	r7, #20
2000d20c:	46bd      	mov	sp, r7
2000d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d212:	4770      	bx	lr

2000d214 <malloc>:
2000d214:	4b02      	ldr	r3, [pc, #8]	@ (2000d220 <malloc+0xc>)
2000d216:	4601      	mov	r1, r0
2000d218:	6818      	ldr	r0, [r3, #0]
2000d21a:	f000 b82d 	b.w	2000d278 <_malloc_r>
2000d21e:	bf00      	nop
2000d220:	2000d688 	.word	0x2000d688

2000d224 <free>:
2000d224:	4b02      	ldr	r3, [pc, #8]	@ (2000d230 <free+0xc>)
2000d226:	4601      	mov	r1, r0
2000d228:	6818      	ldr	r0, [r3, #0]
2000d22a:	f000 b903 	b.w	2000d434 <_free_r>
2000d22e:	bf00      	nop
2000d230:	2000d688 	.word	0x2000d688

2000d234 <sbrk_aligned>:
2000d234:	b570      	push	{r4, r5, r6, lr}
2000d236:	4e0f      	ldr	r6, [pc, #60]	@ (2000d274 <sbrk_aligned+0x40>)
2000d238:	460c      	mov	r4, r1
2000d23a:	6831      	ldr	r1, [r6, #0]
2000d23c:	4605      	mov	r5, r0
2000d23e:	b911      	cbnz	r1, 2000d246 <sbrk_aligned+0x12>
2000d240:	f000 f8ae 	bl	2000d3a0 <_sbrk_r>
2000d244:	6030      	str	r0, [r6, #0]
2000d246:	4621      	mov	r1, r4
2000d248:	4628      	mov	r0, r5
2000d24a:	f000 f8a9 	bl	2000d3a0 <_sbrk_r>
2000d24e:	1c43      	adds	r3, r0, #1
2000d250:	d103      	bne.n	2000d25a <sbrk_aligned+0x26>
2000d252:	f04f 34ff 	mov.w	r4, #4294967295
2000d256:	4620      	mov	r0, r4
2000d258:	bd70      	pop	{r4, r5, r6, pc}
2000d25a:	1cc4      	adds	r4, r0, #3
2000d25c:	f024 0403 	bic.w	r4, r4, #3
2000d260:	42a0      	cmp	r0, r4
2000d262:	d0f8      	beq.n	2000d256 <sbrk_aligned+0x22>
2000d264:	1a21      	subs	r1, r4, r0
2000d266:	4628      	mov	r0, r5
2000d268:	f000 f89a 	bl	2000d3a0 <_sbrk_r>
2000d26c:	3001      	adds	r0, #1
2000d26e:	d1f2      	bne.n	2000d256 <sbrk_aligned+0x22>
2000d270:	e7ef      	b.n	2000d252 <sbrk_aligned+0x1e>
2000d272:	bf00      	nop
2000d274:	2000f5b0 	.word	0x2000f5b0

2000d278 <_malloc_r>:
2000d278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000d27c:	1ccd      	adds	r5, r1, #3
2000d27e:	f025 0503 	bic.w	r5, r5, #3
2000d282:	3508      	adds	r5, #8
2000d284:	2d0c      	cmp	r5, #12
2000d286:	bf38      	it	cc
2000d288:	250c      	movcc	r5, #12
2000d28a:	2d00      	cmp	r5, #0
2000d28c:	4606      	mov	r6, r0
2000d28e:	db01      	blt.n	2000d294 <_malloc_r+0x1c>
2000d290:	42a9      	cmp	r1, r5
2000d292:	d904      	bls.n	2000d29e <_malloc_r+0x26>
2000d294:	230c      	movs	r3, #12
2000d296:	6033      	str	r3, [r6, #0]
2000d298:	2000      	movs	r0, #0
2000d29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000d29e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2000d374 <_malloc_r+0xfc>
2000d2a2:	f000 f869 	bl	2000d378 <__malloc_lock>
2000d2a6:	f8d8 3000 	ldr.w	r3, [r8]
2000d2aa:	461c      	mov	r4, r3
2000d2ac:	bb44      	cbnz	r4, 2000d300 <_malloc_r+0x88>
2000d2ae:	4629      	mov	r1, r5
2000d2b0:	4630      	mov	r0, r6
2000d2b2:	f7ff ffbf 	bl	2000d234 <sbrk_aligned>
2000d2b6:	1c43      	adds	r3, r0, #1
2000d2b8:	4604      	mov	r4, r0
2000d2ba:	d158      	bne.n	2000d36e <_malloc_r+0xf6>
2000d2bc:	f8d8 4000 	ldr.w	r4, [r8]
2000d2c0:	4627      	mov	r7, r4
2000d2c2:	2f00      	cmp	r7, #0
2000d2c4:	d143      	bne.n	2000d34e <_malloc_r+0xd6>
2000d2c6:	2c00      	cmp	r4, #0
2000d2c8:	d04b      	beq.n	2000d362 <_malloc_r+0xea>
2000d2ca:	6823      	ldr	r3, [r4, #0]
2000d2cc:	4639      	mov	r1, r7
2000d2ce:	4630      	mov	r0, r6
2000d2d0:	eb04 0903 	add.w	r9, r4, r3
2000d2d4:	f000 f864 	bl	2000d3a0 <_sbrk_r>
2000d2d8:	4581      	cmp	r9, r0
2000d2da:	d142      	bne.n	2000d362 <_malloc_r+0xea>
2000d2dc:	6821      	ldr	r1, [r4, #0]
2000d2de:	1a6d      	subs	r5, r5, r1
2000d2e0:	4629      	mov	r1, r5
2000d2e2:	4630      	mov	r0, r6
2000d2e4:	f7ff ffa6 	bl	2000d234 <sbrk_aligned>
2000d2e8:	3001      	adds	r0, #1
2000d2ea:	d03a      	beq.n	2000d362 <_malloc_r+0xea>
2000d2ec:	6823      	ldr	r3, [r4, #0]
2000d2ee:	442b      	add	r3, r5
2000d2f0:	6023      	str	r3, [r4, #0]
2000d2f2:	f8d8 3000 	ldr.w	r3, [r8]
2000d2f6:	685a      	ldr	r2, [r3, #4]
2000d2f8:	bb62      	cbnz	r2, 2000d354 <_malloc_r+0xdc>
2000d2fa:	f8c8 7000 	str.w	r7, [r8]
2000d2fe:	e00f      	b.n	2000d320 <_malloc_r+0xa8>
2000d300:	6822      	ldr	r2, [r4, #0]
2000d302:	1b52      	subs	r2, r2, r5
2000d304:	d420      	bmi.n	2000d348 <_malloc_r+0xd0>
2000d306:	2a0b      	cmp	r2, #11
2000d308:	d917      	bls.n	2000d33a <_malloc_r+0xc2>
2000d30a:	1961      	adds	r1, r4, r5
2000d30c:	42a3      	cmp	r3, r4
2000d30e:	6025      	str	r5, [r4, #0]
2000d310:	bf18      	it	ne
2000d312:	6059      	strne	r1, [r3, #4]
2000d314:	6863      	ldr	r3, [r4, #4]
2000d316:	bf08      	it	eq
2000d318:	f8c8 1000 	streq.w	r1, [r8]
2000d31c:	5162      	str	r2, [r4, r5]
2000d31e:	604b      	str	r3, [r1, #4]
2000d320:	4630      	mov	r0, r6
2000d322:	f000 f82f 	bl	2000d384 <__malloc_unlock>
2000d326:	f104 000b 	add.w	r0, r4, #11
2000d32a:	1d23      	adds	r3, r4, #4
2000d32c:	f020 0007 	bic.w	r0, r0, #7
2000d330:	1ac2      	subs	r2, r0, r3
2000d332:	bf1c      	itt	ne
2000d334:	1a1b      	subne	r3, r3, r0
2000d336:	50a3      	strne	r3, [r4, r2]
2000d338:	e7af      	b.n	2000d29a <_malloc_r+0x22>
2000d33a:	6862      	ldr	r2, [r4, #4]
2000d33c:	42a3      	cmp	r3, r4
2000d33e:	bf0c      	ite	eq
2000d340:	f8c8 2000 	streq.w	r2, [r8]
2000d344:	605a      	strne	r2, [r3, #4]
2000d346:	e7eb      	b.n	2000d320 <_malloc_r+0xa8>
2000d348:	4623      	mov	r3, r4
2000d34a:	6864      	ldr	r4, [r4, #4]
2000d34c:	e7ae      	b.n	2000d2ac <_malloc_r+0x34>
2000d34e:	463c      	mov	r4, r7
2000d350:	687f      	ldr	r7, [r7, #4]
2000d352:	e7b6      	b.n	2000d2c2 <_malloc_r+0x4a>
2000d354:	461a      	mov	r2, r3
2000d356:	685b      	ldr	r3, [r3, #4]
2000d358:	42a3      	cmp	r3, r4
2000d35a:	d1fb      	bne.n	2000d354 <_malloc_r+0xdc>
2000d35c:	2300      	movs	r3, #0
2000d35e:	6053      	str	r3, [r2, #4]
2000d360:	e7de      	b.n	2000d320 <_malloc_r+0xa8>
2000d362:	230c      	movs	r3, #12
2000d364:	6033      	str	r3, [r6, #0]
2000d366:	4630      	mov	r0, r6
2000d368:	f000 f80c 	bl	2000d384 <__malloc_unlock>
2000d36c:	e794      	b.n	2000d298 <_malloc_r+0x20>
2000d36e:	6005      	str	r5, [r0, #0]
2000d370:	e7d6      	b.n	2000d320 <_malloc_r+0xa8>
2000d372:	bf00      	nop
2000d374:	2000f5b4 	.word	0x2000f5b4

2000d378 <__malloc_lock>:
2000d378:	4801      	ldr	r0, [pc, #4]	@ (2000d380 <__malloc_lock+0x8>)
2000d37a:	f000 b84b 	b.w	2000d414 <__retarget_lock_acquire_recursive>
2000d37e:	bf00      	nop
2000d380:	2000f6f4 	.word	0x2000f6f4

2000d384 <__malloc_unlock>:
2000d384:	4801      	ldr	r0, [pc, #4]	@ (2000d38c <__malloc_unlock+0x8>)
2000d386:	f000 b846 	b.w	2000d416 <__retarget_lock_release_recursive>
2000d38a:	bf00      	nop
2000d38c:	2000f6f4 	.word	0x2000f6f4

2000d390 <memset>:
2000d390:	4402      	add	r2, r0
2000d392:	4603      	mov	r3, r0
2000d394:	4293      	cmp	r3, r2
2000d396:	d100      	bne.n	2000d39a <memset+0xa>
2000d398:	4770      	bx	lr
2000d39a:	f803 1b01 	strb.w	r1, [r3], #1
2000d39e:	e7f9      	b.n	2000d394 <memset+0x4>

2000d3a0 <_sbrk_r>:
2000d3a0:	b538      	push	{r3, r4, r5, lr}
2000d3a2:	4d06      	ldr	r5, [pc, #24]	@ (2000d3bc <_sbrk_r+0x1c>)
2000d3a4:	2300      	movs	r3, #0
2000d3a6:	4604      	mov	r4, r0
2000d3a8:	4608      	mov	r0, r1
2000d3aa:	602b      	str	r3, [r5, #0]
2000d3ac:	f7f7 ffc2 	bl	20005334 <_sbrk>
2000d3b0:	1c43      	adds	r3, r0, #1
2000d3b2:	d102      	bne.n	2000d3ba <_sbrk_r+0x1a>
2000d3b4:	682b      	ldr	r3, [r5, #0]
2000d3b6:	b103      	cbz	r3, 2000d3ba <_sbrk_r+0x1a>
2000d3b8:	6023      	str	r3, [r4, #0]
2000d3ba:	bd38      	pop	{r3, r4, r5, pc}
2000d3bc:	2000f6f0 	.word	0x2000f6f0

2000d3c0 <__errno>:
2000d3c0:	4b01      	ldr	r3, [pc, #4]	@ (2000d3c8 <__errno+0x8>)
2000d3c2:	6818      	ldr	r0, [r3, #0]
2000d3c4:	4770      	bx	lr
2000d3c6:	bf00      	nop
2000d3c8:	2000d688 	.word	0x2000d688

2000d3cc <__libc_init_array>:
2000d3cc:	b570      	push	{r4, r5, r6, lr}
2000d3ce:	4d0d      	ldr	r5, [pc, #52]	@ (2000d404 <__libc_init_array+0x38>)
2000d3d0:	4c0d      	ldr	r4, [pc, #52]	@ (2000d408 <__libc_init_array+0x3c>)
2000d3d2:	1b64      	subs	r4, r4, r5
2000d3d4:	10a4      	asrs	r4, r4, #2
2000d3d6:	2600      	movs	r6, #0
2000d3d8:	42a6      	cmp	r6, r4
2000d3da:	d109      	bne.n	2000d3f0 <__libc_init_array+0x24>
2000d3dc:	4d0b      	ldr	r5, [pc, #44]	@ (2000d40c <__libc_init_array+0x40>)
2000d3de:	4c0c      	ldr	r4, [pc, #48]	@ (2000d410 <__libc_init_array+0x44>)
2000d3e0:	f000 f872 	bl	2000d4c8 <_init>
2000d3e4:	1b64      	subs	r4, r4, r5
2000d3e6:	10a4      	asrs	r4, r4, #2
2000d3e8:	2600      	movs	r6, #0
2000d3ea:	42a6      	cmp	r6, r4
2000d3ec:	d105      	bne.n	2000d3fa <__libc_init_array+0x2e>
2000d3ee:	bd70      	pop	{r4, r5, r6, pc}
2000d3f0:	f855 3b04 	ldr.w	r3, [r5], #4
2000d3f4:	4798      	blx	r3
2000d3f6:	3601      	adds	r6, #1
2000d3f8:	e7ee      	b.n	2000d3d8 <__libc_init_array+0xc>
2000d3fa:	f855 3b04 	ldr.w	r3, [r5], #4
2000d3fe:	4798      	blx	r3
2000d400:	3601      	adds	r6, #1
2000d402:	e7f2      	b.n	2000d3ea <__libc_init_array+0x1e>
2000d404:	2000d548 	.word	0x2000d548
2000d408:	2000d548 	.word	0x2000d548
2000d40c:	2000d548 	.word	0x2000d548
2000d410:	2000d54c 	.word	0x2000d54c

2000d414 <__retarget_lock_acquire_recursive>:
2000d414:	4770      	bx	lr

2000d416 <__retarget_lock_release_recursive>:
2000d416:	4770      	bx	lr

2000d418 <memcpy>:
2000d418:	440a      	add	r2, r1
2000d41a:	4291      	cmp	r1, r2
2000d41c:	f100 33ff 	add.w	r3, r0, #4294967295
2000d420:	d100      	bne.n	2000d424 <memcpy+0xc>
2000d422:	4770      	bx	lr
2000d424:	b510      	push	{r4, lr}
2000d426:	f811 4b01 	ldrb.w	r4, [r1], #1
2000d42a:	f803 4f01 	strb.w	r4, [r3, #1]!
2000d42e:	4291      	cmp	r1, r2
2000d430:	d1f9      	bne.n	2000d426 <memcpy+0xe>
2000d432:	bd10      	pop	{r4, pc}

2000d434 <_free_r>:
2000d434:	b538      	push	{r3, r4, r5, lr}
2000d436:	4605      	mov	r5, r0
2000d438:	2900      	cmp	r1, #0
2000d43a:	d041      	beq.n	2000d4c0 <_free_r+0x8c>
2000d43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000d440:	1f0c      	subs	r4, r1, #4
2000d442:	2b00      	cmp	r3, #0
2000d444:	bfb8      	it	lt
2000d446:	18e4      	addlt	r4, r4, r3
2000d448:	f7ff ff96 	bl	2000d378 <__malloc_lock>
2000d44c:	4a1d      	ldr	r2, [pc, #116]	@ (2000d4c4 <_free_r+0x90>)
2000d44e:	6813      	ldr	r3, [r2, #0]
2000d450:	b933      	cbnz	r3, 2000d460 <_free_r+0x2c>
2000d452:	6063      	str	r3, [r4, #4]
2000d454:	6014      	str	r4, [r2, #0]
2000d456:	4628      	mov	r0, r5
2000d458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000d45c:	f7ff bf92 	b.w	2000d384 <__malloc_unlock>
2000d460:	42a3      	cmp	r3, r4
2000d462:	d908      	bls.n	2000d476 <_free_r+0x42>
2000d464:	6820      	ldr	r0, [r4, #0]
2000d466:	1821      	adds	r1, r4, r0
2000d468:	428b      	cmp	r3, r1
2000d46a:	bf01      	itttt	eq
2000d46c:	6819      	ldreq	r1, [r3, #0]
2000d46e:	685b      	ldreq	r3, [r3, #4]
2000d470:	1809      	addeq	r1, r1, r0
2000d472:	6021      	streq	r1, [r4, #0]
2000d474:	e7ed      	b.n	2000d452 <_free_r+0x1e>
2000d476:	461a      	mov	r2, r3
2000d478:	685b      	ldr	r3, [r3, #4]
2000d47a:	b10b      	cbz	r3, 2000d480 <_free_r+0x4c>
2000d47c:	42a3      	cmp	r3, r4
2000d47e:	d9fa      	bls.n	2000d476 <_free_r+0x42>
2000d480:	6811      	ldr	r1, [r2, #0]
2000d482:	1850      	adds	r0, r2, r1
2000d484:	42a0      	cmp	r0, r4
2000d486:	d10b      	bne.n	2000d4a0 <_free_r+0x6c>
2000d488:	6820      	ldr	r0, [r4, #0]
2000d48a:	4401      	add	r1, r0
2000d48c:	1850      	adds	r0, r2, r1
2000d48e:	4283      	cmp	r3, r0
2000d490:	6011      	str	r1, [r2, #0]
2000d492:	d1e0      	bne.n	2000d456 <_free_r+0x22>
2000d494:	6818      	ldr	r0, [r3, #0]
2000d496:	685b      	ldr	r3, [r3, #4]
2000d498:	6053      	str	r3, [r2, #4]
2000d49a:	4408      	add	r0, r1
2000d49c:	6010      	str	r0, [r2, #0]
2000d49e:	e7da      	b.n	2000d456 <_free_r+0x22>
2000d4a0:	d902      	bls.n	2000d4a8 <_free_r+0x74>
2000d4a2:	230c      	movs	r3, #12
2000d4a4:	602b      	str	r3, [r5, #0]
2000d4a6:	e7d6      	b.n	2000d456 <_free_r+0x22>
2000d4a8:	6820      	ldr	r0, [r4, #0]
2000d4aa:	1821      	adds	r1, r4, r0
2000d4ac:	428b      	cmp	r3, r1
2000d4ae:	bf04      	itt	eq
2000d4b0:	6819      	ldreq	r1, [r3, #0]
2000d4b2:	685b      	ldreq	r3, [r3, #4]
2000d4b4:	6063      	str	r3, [r4, #4]
2000d4b6:	bf04      	itt	eq
2000d4b8:	1809      	addeq	r1, r1, r0
2000d4ba:	6021      	streq	r1, [r4, #0]
2000d4bc:	6054      	str	r4, [r2, #4]
2000d4be:	e7ca      	b.n	2000d456 <_free_r+0x22>
2000d4c0:	bd38      	pop	{r3, r4, r5, pc}
2000d4c2:	bf00      	nop
2000d4c4:	2000f5b4 	.word	0x2000f5b4

2000d4c8 <_init>:
2000d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000d4ca:	bf00      	nop
2000d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000d4ce:	bc08      	pop	{r3}
2000d4d0:	469e      	mov	lr, r3
2000d4d2:	4770      	bx	lr

2000d4d4 <_fini>:
2000d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000d4d6:	bf00      	nop
2000d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000d4da:	bc08      	pop	{r3}
2000d4dc:	469e      	mov	lr, r3
2000d4de:	4770      	bx	lr
