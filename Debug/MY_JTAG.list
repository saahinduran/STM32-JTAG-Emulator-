
MY_JTAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beb4  200001c8  200001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  2000c07c  2000c07c  0000d07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000c0dc  2000c0dc  0000d3b4  2**0
                  CONTENTS
  4 .ARM          00000008  2000c0dc  2000c0dc  0000d0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000c0e4  2000c3b4  0000d3b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000c0e4  2000c0e4  0000d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  2000c0e8  2000c0e8  0000d0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  2000c0ec  2000c0ec  0000d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000c274  2000c274  0000d274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000c314  2000c314  0000d314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001acc  2000c3b4  2000c3b4  0000d3b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000de80  2000de80  0000d3b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000d3b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d698  00000000  00000000  0000d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004821  00000000  00000000  0002aa7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001818  00000000  00000000  0002f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000124c  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa27  00000000  00000000  00031d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f565  00000000  00000000  0005c72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f565c  00000000  00000000  0007bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001712ec  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000066a0  00000000  00000000  00171330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  001779d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c8 <__do_global_dtors_aux>:
200001c8:	b510      	push	{r4, lr}
200001ca:	4c05      	ldr	r4, [pc, #20]	@ (200001e0 <__do_global_dtors_aux+0x18>)
200001cc:	7823      	ldrb	r3, [r4, #0]
200001ce:	b933      	cbnz	r3, 200001de <__do_global_dtors_aux+0x16>
200001d0:	4b04      	ldr	r3, [pc, #16]	@ (200001e4 <__do_global_dtors_aux+0x1c>)
200001d2:	b113      	cbz	r3, 200001da <__do_global_dtors_aux+0x12>
200001d4:	4804      	ldr	r0, [pc, #16]	@ (200001e8 <__do_global_dtors_aux+0x20>)
200001d6:	f3af 8000 	nop.w
200001da:	2301      	movs	r3, #1
200001dc:	7023      	strb	r3, [r4, #0]
200001de:	bd10      	pop	{r4, pc}
200001e0:	2000c3b4 	.word	0x2000c3b4
200001e4:	00000000 	.word	0x00000000
200001e8:	2000c064 	.word	0x2000c064

200001ec <frame_dummy>:
200001ec:	b508      	push	{r3, lr}
200001ee:	4b03      	ldr	r3, [pc, #12]	@ (200001fc <frame_dummy+0x10>)
200001f0:	b11b      	cbz	r3, 200001fa <frame_dummy+0xe>
200001f2:	4903      	ldr	r1, [pc, #12]	@ (20000200 <frame_dummy+0x14>)
200001f4:	4803      	ldr	r0, [pc, #12]	@ (20000204 <frame_dummy+0x18>)
200001f6:	f3af 8000 	nop.w
200001fa:	bd08      	pop	{r3, pc}
200001fc:	00000000 	.word	0x00000000
20000200:	2000c3b8 	.word	0x2000c3b8
20000204:	2000c064 	.word	0x2000c064

20000208 <__aeabi_uldivmod>:
20000208:	b953      	cbnz	r3, 20000220 <__aeabi_uldivmod+0x18>
2000020a:	b94a      	cbnz	r2, 20000220 <__aeabi_uldivmod+0x18>
2000020c:	2900      	cmp	r1, #0
2000020e:	bf08      	it	eq
20000210:	2800      	cmpeq	r0, #0
20000212:	bf1c      	itt	ne
20000214:	f04f 31ff 	movne.w	r1, #4294967295
20000218:	f04f 30ff 	movne.w	r0, #4294967295
2000021c:	f000 b96a 	b.w	200004f4 <__aeabi_idiv0>
20000220:	f1ad 0c08 	sub.w	ip, sp, #8
20000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000228:	f000 f806 	bl	20000238 <__udivmoddi4>
2000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
20000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000234:	b004      	add	sp, #16
20000236:	4770      	bx	lr

20000238 <__udivmoddi4>:
20000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000023c:	9d08      	ldr	r5, [sp, #32]
2000023e:	460c      	mov	r4, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14e      	bne.n	200002e2 <__udivmoddi4+0xaa>
20000244:	4694      	mov	ip, r2
20000246:	458c      	cmp	ip, r1
20000248:	4686      	mov	lr, r0
2000024a:	fab2 f282 	clz	r2, r2
2000024e:	d962      	bls.n	20000316 <__udivmoddi4+0xde>
20000250:	b14a      	cbz	r2, 20000266 <__udivmoddi4+0x2e>
20000252:	f1c2 0320 	rsb	r3, r2, #32
20000256:	4091      	lsls	r1, r2
20000258:	fa20 f303 	lsr.w	r3, r0, r3
2000025c:	fa0c fc02 	lsl.w	ip, ip, r2
20000260:	4319      	orrs	r1, r3
20000262:	fa00 fe02 	lsl.w	lr, r0, r2
20000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000026a:	fa1f f68c 	uxth.w	r6, ip
2000026e:	fbb1 f4f7 	udiv	r4, r1, r7
20000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000276:	fb07 1114 	mls	r1, r7, r4, r1
2000027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000027e:	fb04 f106 	mul.w	r1, r4, r6
20000282:	4299      	cmp	r1, r3
20000284:	d90a      	bls.n	2000029c <__udivmoddi4+0x64>
20000286:	eb1c 0303 	adds.w	r3, ip, r3
2000028a:	f104 30ff 	add.w	r0, r4, #4294967295
2000028e:	f080 8112 	bcs.w	200004b6 <__udivmoddi4+0x27e>
20000292:	4299      	cmp	r1, r3
20000294:	f240 810f 	bls.w	200004b6 <__udivmoddi4+0x27e>
20000298:	3c02      	subs	r4, #2
2000029a:	4463      	add	r3, ip
2000029c:	1a59      	subs	r1, r3, r1
2000029e:	fa1f f38e 	uxth.w	r3, lr
200002a2:	fbb1 f0f7 	udiv	r0, r1, r7
200002a6:	fb07 1110 	mls	r1, r7, r0, r1
200002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200002ae:	fb00 f606 	mul.w	r6, r0, r6
200002b2:	429e      	cmp	r6, r3
200002b4:	d90a      	bls.n	200002cc <__udivmoddi4+0x94>
200002b6:	eb1c 0303 	adds.w	r3, ip, r3
200002ba:	f100 31ff 	add.w	r1, r0, #4294967295
200002be:	f080 80fc 	bcs.w	200004ba <__udivmoddi4+0x282>
200002c2:	429e      	cmp	r6, r3
200002c4:	f240 80f9 	bls.w	200004ba <__udivmoddi4+0x282>
200002c8:	4463      	add	r3, ip
200002ca:	3802      	subs	r0, #2
200002cc:	1b9b      	subs	r3, r3, r6
200002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200002d2:	2100      	movs	r1, #0
200002d4:	b11d      	cbz	r5, 200002de <__udivmoddi4+0xa6>
200002d6:	40d3      	lsrs	r3, r2
200002d8:	2200      	movs	r2, #0
200002da:	e9c5 3200 	strd	r3, r2, [r5]
200002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002e2:	428b      	cmp	r3, r1
200002e4:	d905      	bls.n	200002f2 <__udivmoddi4+0xba>
200002e6:	b10d      	cbz	r5, 200002ec <__udivmoddi4+0xb4>
200002e8:	e9c5 0100 	strd	r0, r1, [r5]
200002ec:	2100      	movs	r1, #0
200002ee:	4608      	mov	r0, r1
200002f0:	e7f5      	b.n	200002de <__udivmoddi4+0xa6>
200002f2:	fab3 f183 	clz	r1, r3
200002f6:	2900      	cmp	r1, #0
200002f8:	d146      	bne.n	20000388 <__udivmoddi4+0x150>
200002fa:	42a3      	cmp	r3, r4
200002fc:	d302      	bcc.n	20000304 <__udivmoddi4+0xcc>
200002fe:	4290      	cmp	r0, r2
20000300:	f0c0 80f0 	bcc.w	200004e4 <__udivmoddi4+0x2ac>
20000304:	1a86      	subs	r6, r0, r2
20000306:	eb64 0303 	sbc.w	r3, r4, r3
2000030a:	2001      	movs	r0, #1
2000030c:	2d00      	cmp	r5, #0
2000030e:	d0e6      	beq.n	200002de <__udivmoddi4+0xa6>
20000310:	e9c5 6300 	strd	r6, r3, [r5]
20000314:	e7e3      	b.n	200002de <__udivmoddi4+0xa6>
20000316:	2a00      	cmp	r2, #0
20000318:	f040 8090 	bne.w	2000043c <__udivmoddi4+0x204>
2000031c:	eba1 040c 	sub.w	r4, r1, ip
20000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000324:	fa1f f78c 	uxth.w	r7, ip
20000328:	2101      	movs	r1, #1
2000032a:	fbb4 f6f8 	udiv	r6, r4, r8
2000032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000332:	fb08 4416 	mls	r4, r8, r6, r4
20000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000033a:	fb07 f006 	mul.w	r0, r7, r6
2000033e:	4298      	cmp	r0, r3
20000340:	d908      	bls.n	20000354 <__udivmoddi4+0x11c>
20000342:	eb1c 0303 	adds.w	r3, ip, r3
20000346:	f106 34ff 	add.w	r4, r6, #4294967295
2000034a:	d202      	bcs.n	20000352 <__udivmoddi4+0x11a>
2000034c:	4298      	cmp	r0, r3
2000034e:	f200 80cd 	bhi.w	200004ec <__udivmoddi4+0x2b4>
20000352:	4626      	mov	r6, r4
20000354:	1a1c      	subs	r4, r3, r0
20000356:	fa1f f38e 	uxth.w	r3, lr
2000035a:	fbb4 f0f8 	udiv	r0, r4, r8
2000035e:	fb08 4410 	mls	r4, r8, r0, r4
20000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000366:	fb00 f707 	mul.w	r7, r0, r7
2000036a:	429f      	cmp	r7, r3
2000036c:	d908      	bls.n	20000380 <__udivmoddi4+0x148>
2000036e:	eb1c 0303 	adds.w	r3, ip, r3
20000372:	f100 34ff 	add.w	r4, r0, #4294967295
20000376:	d202      	bcs.n	2000037e <__udivmoddi4+0x146>
20000378:	429f      	cmp	r7, r3
2000037a:	f200 80b0 	bhi.w	200004de <__udivmoddi4+0x2a6>
2000037e:	4620      	mov	r0, r4
20000380:	1bdb      	subs	r3, r3, r7
20000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000386:	e7a5      	b.n	200002d4 <__udivmoddi4+0x9c>
20000388:	f1c1 0620 	rsb	r6, r1, #32
2000038c:	408b      	lsls	r3, r1
2000038e:	fa22 f706 	lsr.w	r7, r2, r6
20000392:	431f      	orrs	r7, r3
20000394:	fa20 fc06 	lsr.w	ip, r0, r6
20000398:	fa04 f301 	lsl.w	r3, r4, r1
2000039c:	ea43 030c 	orr.w	r3, r3, ip
200003a0:	40f4      	lsrs	r4, r6
200003a2:	fa00 f801 	lsl.w	r8, r0, r1
200003a6:	0c38      	lsrs	r0, r7, #16
200003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
200003ac:	fbb4 fef0 	udiv	lr, r4, r0
200003b0:	fa1f fc87 	uxth.w	ip, r7
200003b4:	fb00 441e 	mls	r4, r0, lr, r4
200003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003bc:	fb0e f90c 	mul.w	r9, lr, ip
200003c0:	45a1      	cmp	r9, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	d90a      	bls.n	200003de <__udivmoddi4+0x1a6>
200003c8:	193c      	adds	r4, r7, r4
200003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
200003ce:	f080 8084 	bcs.w	200004da <__udivmoddi4+0x2a2>
200003d2:	45a1      	cmp	r9, r4
200003d4:	f240 8081 	bls.w	200004da <__udivmoddi4+0x2a2>
200003d8:	f1ae 0e02 	sub.w	lr, lr, #2
200003dc:	443c      	add	r4, r7
200003de:	eba4 0409 	sub.w	r4, r4, r9
200003e2:	fa1f f983 	uxth.w	r9, r3
200003e6:	fbb4 f3f0 	udiv	r3, r4, r0
200003ea:	fb00 4413 	mls	r4, r0, r3, r4
200003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003f2:	fb03 fc0c 	mul.w	ip, r3, ip
200003f6:	45a4      	cmp	ip, r4
200003f8:	d907      	bls.n	2000040a <__udivmoddi4+0x1d2>
200003fa:	193c      	adds	r4, r7, r4
200003fc:	f103 30ff 	add.w	r0, r3, #4294967295
20000400:	d267      	bcs.n	200004d2 <__udivmoddi4+0x29a>
20000402:	45a4      	cmp	ip, r4
20000404:	d965      	bls.n	200004d2 <__udivmoddi4+0x29a>
20000406:	3b02      	subs	r3, #2
20000408:	443c      	add	r4, r7
2000040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
2000040e:	fba0 9302 	umull	r9, r3, r0, r2
20000412:	eba4 040c 	sub.w	r4, r4, ip
20000416:	429c      	cmp	r4, r3
20000418:	46ce      	mov	lr, r9
2000041a:	469c      	mov	ip, r3
2000041c:	d351      	bcc.n	200004c2 <__udivmoddi4+0x28a>
2000041e:	d04e      	beq.n	200004be <__udivmoddi4+0x286>
20000420:	b155      	cbz	r5, 20000438 <__udivmoddi4+0x200>
20000422:	ebb8 030e 	subs.w	r3, r8, lr
20000426:	eb64 040c 	sbc.w	r4, r4, ip
2000042a:	fa04 f606 	lsl.w	r6, r4, r6
2000042e:	40cb      	lsrs	r3, r1
20000430:	431e      	orrs	r6, r3
20000432:	40cc      	lsrs	r4, r1
20000434:	e9c5 6400 	strd	r6, r4, [r5]
20000438:	2100      	movs	r1, #0
2000043a:	e750      	b.n	200002de <__udivmoddi4+0xa6>
2000043c:	f1c2 0320 	rsb	r3, r2, #32
20000440:	fa20 f103 	lsr.w	r1, r0, r3
20000444:	fa0c fc02 	lsl.w	ip, ip, r2
20000448:	fa24 f303 	lsr.w	r3, r4, r3
2000044c:	4094      	lsls	r4, r2
2000044e:	430c      	orrs	r4, r1
20000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000454:	fa00 fe02 	lsl.w	lr, r0, r2
20000458:	fa1f f78c 	uxth.w	r7, ip
2000045c:	fbb3 f0f8 	udiv	r0, r3, r8
20000460:	fb08 3110 	mls	r1, r8, r0, r3
20000464:	0c23      	lsrs	r3, r4, #16
20000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000046a:	fb00 f107 	mul.w	r1, r0, r7
2000046e:	4299      	cmp	r1, r3
20000470:	d908      	bls.n	20000484 <__udivmoddi4+0x24c>
20000472:	eb1c 0303 	adds.w	r3, ip, r3
20000476:	f100 36ff 	add.w	r6, r0, #4294967295
2000047a:	d22c      	bcs.n	200004d6 <__udivmoddi4+0x29e>
2000047c:	4299      	cmp	r1, r3
2000047e:	d92a      	bls.n	200004d6 <__udivmoddi4+0x29e>
20000480:	3802      	subs	r0, #2
20000482:	4463      	add	r3, ip
20000484:	1a5b      	subs	r3, r3, r1
20000486:	b2a4      	uxth	r4, r4
20000488:	fbb3 f1f8 	udiv	r1, r3, r8
2000048c:	fb08 3311 	mls	r3, r8, r1, r3
20000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000494:	fb01 f307 	mul.w	r3, r1, r7
20000498:	42a3      	cmp	r3, r4
2000049a:	d908      	bls.n	200004ae <__udivmoddi4+0x276>
2000049c:	eb1c 0404 	adds.w	r4, ip, r4
200004a0:	f101 36ff 	add.w	r6, r1, #4294967295
200004a4:	d213      	bcs.n	200004ce <__udivmoddi4+0x296>
200004a6:	42a3      	cmp	r3, r4
200004a8:	d911      	bls.n	200004ce <__udivmoddi4+0x296>
200004aa:	3902      	subs	r1, #2
200004ac:	4464      	add	r4, ip
200004ae:	1ae4      	subs	r4, r4, r3
200004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
200004b4:	e739      	b.n	2000032a <__udivmoddi4+0xf2>
200004b6:	4604      	mov	r4, r0
200004b8:	e6f0      	b.n	2000029c <__udivmoddi4+0x64>
200004ba:	4608      	mov	r0, r1
200004bc:	e706      	b.n	200002cc <__udivmoddi4+0x94>
200004be:	45c8      	cmp	r8, r9
200004c0:	d2ae      	bcs.n	20000420 <__udivmoddi4+0x1e8>
200004c2:	ebb9 0e02 	subs.w	lr, r9, r2
200004c6:	eb63 0c07 	sbc.w	ip, r3, r7
200004ca:	3801      	subs	r0, #1
200004cc:	e7a8      	b.n	20000420 <__udivmoddi4+0x1e8>
200004ce:	4631      	mov	r1, r6
200004d0:	e7ed      	b.n	200004ae <__udivmoddi4+0x276>
200004d2:	4603      	mov	r3, r0
200004d4:	e799      	b.n	2000040a <__udivmoddi4+0x1d2>
200004d6:	4630      	mov	r0, r6
200004d8:	e7d4      	b.n	20000484 <__udivmoddi4+0x24c>
200004da:	46d6      	mov	lr, sl
200004dc:	e77f      	b.n	200003de <__udivmoddi4+0x1a6>
200004de:	4463      	add	r3, ip
200004e0:	3802      	subs	r0, #2
200004e2:	e74d      	b.n	20000380 <__udivmoddi4+0x148>
200004e4:	4606      	mov	r6, r0
200004e6:	4623      	mov	r3, r4
200004e8:	4608      	mov	r0, r1
200004ea:	e70f      	b.n	2000030c <__udivmoddi4+0xd4>
200004ec:	3e02      	subs	r6, #2
200004ee:	4463      	add	r3, ip
200004f0:	e730      	b.n	20000354 <__udivmoddi4+0x11c>
200004f2:	bf00      	nop

200004f4 <__aeabi_idiv0>:
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <DAP_GetVendorString>:

/** Get Vendor Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetVendorString (char *str) {
200004f8:	b480      	push	{r7}
200004fa:	b083      	sub	sp, #12
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000500:	2300      	movs	r3, #0
}
20000502:	4618      	mov	r0, r3
20000504:	370c      	adds	r7, #12
20000506:	46bd      	mov	sp, r7
20000508:	f85d 7b04 	ldr.w	r7, [sp], #4
2000050c:	4770      	bx	lr

2000050e <DAP_GetProductString>:

/** Get Product Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductString (char *str) {
2000050e:	b480      	push	{r7}
20000510:	b083      	sub	sp, #12
20000512:	af00      	add	r7, sp, #0
20000514:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
20000516:	2300      	movs	r3, #0
}
20000518:	4618      	mov	r0, r3
2000051a:	370c      	adds	r7, #12
2000051c:	46bd      	mov	sp, r7
2000051e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000522:	4770      	bx	lr

20000524 <DAP_GetSerNumString>:

/** Get Serial Number string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetSerNumString (char *str) {
20000524:	b480      	push	{r7}
20000526:	b083      	sub	sp, #12
20000528:	af00      	add	r7, sp, #0
2000052a:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000052c:	2300      	movs	r3, #0
}
2000052e:	4618      	mov	r0, r3
20000530:	370c      	adds	r7, #12
20000532:	46bd      	mov	sp, r7
20000534:	f85d 7b04 	ldr.w	r7, [sp], #4
20000538:	4770      	bx	lr

2000053a <DAP_GetTargetDeviceVendorString>:

/** Get Target Device Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceVendorString (char *str) {
2000053a:	b480      	push	{r7}
2000053c:	b083      	sub	sp, #12
2000053e:	af00      	add	r7, sp, #0
20000540:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceVendor);
  len = (uint8_t)(strlen(TargetDeviceVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000542:	2300      	movs	r3, #0
#endif
}
20000544:	4618      	mov	r0, r3
20000546:	370c      	adds	r7, #12
20000548:	46bd      	mov	sp, r7
2000054a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000054e:	4770      	bx	lr

20000550 <DAP_GetTargetDeviceNameString>:

/** Get Target Device Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetDeviceNameString (char *str) {
20000550:	b480      	push	{r7}
20000552:	b083      	sub	sp, #12
20000554:	af00      	add	r7, sp, #0
20000556:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetDeviceName);
  len = (uint8_t)(strlen(TargetDeviceName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000558:	2300      	movs	r3, #0
#endif
}
2000055a:	4618      	mov	r0, r3
2000055c:	370c      	adds	r7, #12
2000055e:	46bd      	mov	sp, r7
20000560:	f85d 7b04 	ldr.w	r7, [sp], #4
20000564:	4770      	bx	lr

20000566 <DAP_GetTargetBoardVendorString>:

/** Get Target Board Vendor string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardVendorString (char *str) {
20000566:	b480      	push	{r7}
20000568:	b083      	sub	sp, #12
2000056a:	af00      	add	r7, sp, #0
2000056c:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardVendor);
  len = (uint8_t)(strlen(TargetBoardVendor) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
2000056e:	2300      	movs	r3, #0
#endif
}
20000570:	4618      	mov	r0, r3
20000572:	370c      	adds	r7, #12
20000574:	46bd      	mov	sp, r7
20000576:	f85d 7b04 	ldr.w	r7, [sp], #4
2000057a:	4770      	bx	lr

2000057c <DAP_GetTargetBoardNameString>:

/** Get Target Board Name string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetTargetBoardNameString (char *str) {
2000057c:	b480      	push	{r7}
2000057e:	b083      	sub	sp, #12
20000580:	af00      	add	r7, sp, #0
20000582:	6078      	str	r0, [r7, #4]
  strcpy(str, TargetBoardName);
  len = (uint8_t)(strlen(TargetBoardName) + 1U);
  return (len);
#else
  (void)str;
  return (0U);
20000584:	2300      	movs	r3, #0
#endif
}
20000586:	4618      	mov	r0, r3
20000588:	370c      	adds	r7, #12
2000058a:	46bd      	mov	sp, r7
2000058c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000590:	4770      	bx	lr

20000592 <DAP_GetProductFirmwareVersionString>:

/** Get Product Firmware Version string.
\param str Pointer to buffer to store the string (max 60 characters).
\return String length (including terminating NULL character) or 0 (no string).
*/
__STATIC_INLINE uint8_t DAP_GetProductFirmwareVersionString (char *str) {
20000592:	b480      	push	{r7}
20000594:	b083      	sub	sp, #12
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
  (void)str;
  return (0U);
2000059a:	2300      	movs	r3, #0
}
2000059c:	4618      	mov	r0, r3
2000059e:	370c      	adds	r7, #12
200005a0:	46bd      	mov	sp, r7
200005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200005a6:	4770      	bx	lr

200005a8 <PORT_JTAG_SETUP>:
/** Setup JTAG I/O pins: TCK, TMS, TDI, TDO, nTRST, and nRESET.
Configures the DAP Hardware I/O pins for JTAG mode:
 - TCK, TMS, TDI, nTRST, nRESET to output mode and set to high level.
 - TDO to input mode.
*/
__STATIC_INLINE void PORT_JTAG_SETUP (void) {
200005a8:	b480      	push	{r7}
200005aa:	af00      	add	r7, sp, #0
  ;
}
200005ac:	bf00      	nop
200005ae:	46bd      	mov	sp, r7
200005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005b4:	4770      	bx	lr

200005b6 <PORT_OFF>:

/** Disable JTAG/SWD I/O Pins.
Disables the DAP Hardware I/O pins which configures:
 - TCK/SWCLK, TMS/SWDIO, TDI, TDO, nTRST, nRESET to High-Z mode.
*/
__STATIC_INLINE void PORT_OFF (void) {
200005b6:	b480      	push	{r7}
200005b8:	af00      	add	r7, sp, #0
  ;
}
200005ba:	bf00      	nop
200005bc:	46bd      	mov	sp, r7
200005be:	f85d 7b04 	ldr.w	r7, [sp], #4
200005c2:	4770      	bx	lr

200005c4 <PIN_SWCLK_TCK_IN>:
// SWCLK/TCK I/O pin -------------------------------------

/** SWCLK/TCK I/O pin: Get Input.
\return Current status of the SWCLK/TCK DAP hardware I/O pin.
*/
static uint32_t PIN_SWCLK_TCK_IN  (void) {
200005c4:	b480      	push	{r7}
200005c6:	af00      	add	r7, sp, #0
  return (0U);
200005c8:	2300      	movs	r3, #0
}
200005ca:	4618      	mov	r0, r3
200005cc:	46bd      	mov	sp, r7
200005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200005d2:	4770      	bx	lr

200005d4 <PIN_SWCLK_TCK_SET>:

/** SWCLK/TCK I/O pin: Set Output to High.
Set the SWCLK/TCK DAP hardware I/O pin to high level.
*/
static void     PIN_SWCLK_TCK_SET (void) {
200005d4:	b480      	push	{r7}
200005d6:	af00      	add	r7, sp, #0
  ;
}
200005d8:	bf00      	nop
200005da:	46bd      	mov	sp, r7
200005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200005e0:	4770      	bx	lr

200005e2 <PIN_SWCLK_TCK_CLR>:

/** SWCLK/TCK I/O pin: Set Output to Low.
Set the SWCLK/TCK DAP hardware I/O pin to low level.
*/
static void     PIN_SWCLK_TCK_CLR (void) {
200005e2:	b480      	push	{r7}
200005e4:	af00      	add	r7, sp, #0
  ;
}
200005e6:	bf00      	nop
200005e8:	46bd      	mov	sp, r7
200005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200005ee:	4770      	bx	lr

200005f0 <PIN_SWDIO_TMS_IN>:
// SWDIO/TMS Pin I/O --------------------------------------

/** SWDIO/TMS I/O pin: Get Input.
\return Current status of the SWDIO/TMS DAP hardware I/O pin.
*/
static uint32_t PIN_SWDIO_TMS_IN  (void) {
200005f0:	b580      	push	{r7, lr}
200005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
200005f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
200005f8:	4802      	ldr	r0, [pc, #8]	@ (20000604 <PIN_SWDIO_TMS_IN+0x14>)
200005fa:	f004 fb7e 	bl	20004cfa <HAL_GPIO_TogglePin>
  return (0U);
200005fe:	2300      	movs	r3, #0
}
20000600:	4618      	mov	r0, r3
20000602:	bd80      	pop	{r7, pc}
20000604:	40020400 	.word	0x40020400

20000608 <PIN_SWDIO_TMS_SET>:

/** SWDIO/TMS I/O pin: Set Output to High.
Set the SWDIO/TMS DAP hardware I/O pin to high level.
*/
static void     PIN_SWDIO_TMS_SET (void) {
20000608:	b580      	push	{r7, lr}
2000060a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
2000060c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20000610:	4802      	ldr	r0, [pc, #8]	@ (2000061c <PIN_SWDIO_TMS_SET+0x14>)
20000612:	f004 fb72 	bl	20004cfa <HAL_GPIO_TogglePin>
}
20000616:	bf00      	nop
20000618:	bd80      	pop	{r7, pc}
2000061a:	bf00      	nop
2000061c:	40020400 	.word	0x40020400

20000620 <PIN_SWDIO_TMS_CLR>:

/** SWDIO/TMS I/O pin: Set Output to Low.
Set the SWDIO/TMS DAP hardware I/O pin to low level.
*/
static void     PIN_SWDIO_TMS_CLR (void) {
20000620:	b580      	push	{r7, lr}
20000622:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20000624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20000628:	4802      	ldr	r0, [pc, #8]	@ (20000634 <PIN_SWDIO_TMS_CLR+0x14>)
2000062a:	f004 fb66 	bl	20004cfa <HAL_GPIO_TogglePin>
}
2000062e:	bf00      	nop
20000630:	bd80      	pop	{r7, pc}
20000632:	bf00      	nop
20000634:	40020400 	.word	0x40020400

20000638 <PIN_TDI_IN>:
// TDI Pin I/O ---------------------------------------------

/** TDI I/O pin: Get Input.
\return Current status of the TDI DAP hardware I/O pin.
*/
static uint32_t PIN_TDI_IN  (void) {
20000638:	b480      	push	{r7}
2000063a:	af00      	add	r7, sp, #0
  return (0U);
2000063c:	2300      	movs	r3, #0
}
2000063e:	4618      	mov	r0, r3
20000640:	46bd      	mov	sp, r7
20000642:	f85d 7b04 	ldr.w	r7, [sp], #4
20000646:	4770      	bx	lr

20000648 <PIN_TDI_OUT>:

/** TDI I/O pin: Set Output.
\param bit Output value for the TDI DAP hardware I/O pin.
*/
static void     PIN_TDI_OUT (uint32_t bit) {
20000648:	b480      	push	{r7}
2000064a:	b083      	sub	sp, #12
2000064c:	af00      	add	r7, sp, #0
2000064e:	6078      	str	r0, [r7, #4]
  ;
}
20000650:	bf00      	nop
20000652:	370c      	adds	r7, #12
20000654:	46bd      	mov	sp, r7
20000656:	f85d 7b04 	ldr.w	r7, [sp], #4
2000065a:	4770      	bx	lr

2000065c <PIN_TDO_IN>:
// TDO Pin I/O ---------------------------------------------

/** TDO I/O pin: Get Input.
\return Current status of the TDO DAP hardware I/O pin.
*/
static uint32_t PIN_TDO_IN  (void) {
2000065c:	b480      	push	{r7}
2000065e:	af00      	add	r7, sp, #0
  return (0U);
20000660:	2300      	movs	r3, #0
}
20000662:	4618      	mov	r0, r3
20000664:	46bd      	mov	sp, r7
20000666:	f85d 7b04 	ldr.w	r7, [sp], #4
2000066a:	4770      	bx	lr

2000066c <PIN_nTRST_IN>:
// nTRST Pin I/O -------------------------------------------

/** nTRST I/O pin: Get Input.
\return Current status of the nTRST DAP hardware I/O pin.
*/
static uint32_t PIN_nTRST_IN   (void) {
2000066c:	b480      	push	{r7}
2000066e:	af00      	add	r7, sp, #0
  return (0U);
20000670:	2300      	movs	r3, #0
}
20000672:	4618      	mov	r0, r3
20000674:	46bd      	mov	sp, r7
20000676:	f85d 7b04 	ldr.w	r7, [sp], #4
2000067a:	4770      	bx	lr

2000067c <PIN_nTRST_OUT>:
/** nTRST I/O pin: Set Output.
\param bit JTAG TRST Test Reset pin status:
           - 0: issue a JTAG TRST Test Reset.
           - 1: release JTAG TRST Test Reset.
*/
static void     PIN_nTRST_OUT  (uint32_t bit) {
2000067c:	b480      	push	{r7}
2000067e:	b083      	sub	sp, #12
20000680:	af00      	add	r7, sp, #0
20000682:	6078      	str	r0, [r7, #4]
  ;
}
20000684:	bf00      	nop
20000686:	370c      	adds	r7, #12
20000688:	46bd      	mov	sp, r7
2000068a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000068e:	4770      	bx	lr

20000690 <PIN_nRESET_IN>:
// nRESET Pin I/O------------------------------------------

/** nRESET I/O pin: Get Input.
\return Current status of the nRESET DAP hardware I/O pin.
*/
static uint32_t PIN_nRESET_IN  (void) {
20000690:	b480      	push	{r7}
20000692:	af00      	add	r7, sp, #0
  return (0U);
20000694:	2300      	movs	r3, #0
}
20000696:	4618      	mov	r0, r3
20000698:	46bd      	mov	sp, r7
2000069a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000069e:	4770      	bx	lr

200006a0 <PIN_nRESET_OUT>:
/** nRESET I/O pin: Set Output.
\param bit target device hardware reset pin status:
           - 0: issue a device hardware reset.
           - 1: release device hardware reset.
*/
static void     PIN_nRESET_OUT (uint32_t bit) {
200006a0:	b480      	push	{r7}
200006a2:	b083      	sub	sp, #12
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
  ;
}
200006a8:	bf00      	nop
200006aa:	370c      	adds	r7, #12
200006ac:	46bd      	mov	sp, r7
200006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200006b2:	4770      	bx	lr

200006b4 <LED_CONNECTED_OUT>:
/** Debug Unit: Set status of Connected LED.
\param bit status of the Connect LED.
           - 1: Connect LED ON: debugger is connected to CMSIS-DAP Debug Unit.
           - 0: Connect LED OFF: debugger is not connected to CMSIS-DAP Debug Unit.
*/
__STATIC_INLINE void LED_CONNECTED_OUT (uint32_t bit) {}
200006b4:	b480      	push	{r7}
200006b6:	b083      	sub	sp, #12
200006b8:	af00      	add	r7, sp, #0
200006ba:	6078      	str	r0, [r7, #4]
200006bc:	bf00      	nop
200006be:	370c      	adds	r7, #12
200006c0:	46bd      	mov	sp, r7
200006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200006c6:	4770      	bx	lr

200006c8 <LED_RUNNING_OUT>:
/** Debug Unit: Set status Target Running LED.
\param bit status of the Target Running LED.
           - 1: Target Running LED ON: program execution in target started.
           - 0: Target Running LED OFF: program execution in target stopped.
*/
__STATIC_INLINE void LED_RUNNING_OUT (uint32_t bit) {}
200006c8:	b480      	push	{r7}
200006ca:	b083      	sub	sp, #12
200006cc:	af00      	add	r7, sp, #0
200006ce:	6078      	str	r0, [r7, #4]
200006d0:	bf00      	nop
200006d2:	370c      	adds	r7, #12
200006d4:	46bd      	mov	sp, r7
200006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200006da:	4770      	bx	lr

200006dc <TIMESTAMP_GET>:
*/

/** Get timestamp of Test Domain Timer.
\return Current timestamp value.
*/
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
200006dc:	b480      	push	{r7}
200006de:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
200006e0:	4b03      	ldr	r3, [pc, #12]	@ (200006f0 <TIMESTAMP_GET+0x14>)
200006e2:	685b      	ldr	r3, [r3, #4]
}
200006e4:	4618      	mov	r0, r3
200006e6:	46bd      	mov	sp, r7
200006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200006ec:	4770      	bx	lr
200006ee:	bf00      	nop
200006f0:	e0001000 	.word	0xe0001000

200006f4 <RESET_TARGET>:
It is called when the command \ref DAP_ResetTarget and is for example required
when a device needs a time-critical unlock sequence that enables the debug port.
\return 0 = no device specific reset sequence is implemented.\n
        1 = a device specific reset sequence is implemented.
*/
__STATIC_INLINE uint8_t RESET_TARGET (void) {
200006f4:	b480      	push	{r7}
200006f6:	af00      	add	r7, sp, #0
  return (0U);             // change to '1' when a device reset sequence is implemented
200006f8:	2300      	movs	r3, #0
}
200006fa:	4618      	mov	r0, r3
200006fc:	46bd      	mov	sp, r7
200006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20000702:	4770      	bx	lr

20000704 <Set_Clock_Delay>:
static const char DAP_FW_Ver [] = DAP_FW_VER;


// Common clock delay calculation routine
//   clock:    requested SWJ frequency in Hertz
static void Set_Clock_Delay(uint32_t clock) {
20000704:	b480      	push	{r7}
20000706:	b085      	sub	sp, #20
20000708:	af00      	add	r7, sp, #0
2000070a:	6078      	str	r0, [r7, #4]
  uint32_t delay;

  if (clock >= MAX_SWJ_CLOCK(DELAY_FAST_CYCLES)) {
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	4a16      	ldr	r2, [pc, #88]	@ (20000768 <Set_Clock_Delay+0x64>)
20000710:	4293      	cmp	r3, r2
20000712:	d306      	bcc.n	20000722 <Set_Clock_Delay+0x1e>
    DAP_Data.fast_clock  = 1U;
20000714:	4b15      	ldr	r3, [pc, #84]	@ (2000076c <Set_Clock_Delay+0x68>)
20000716:	2201      	movs	r2, #1
20000718:	705a      	strb	r2, [r3, #1]
    DAP_Data.clock_delay = 1U;
2000071a:	4b14      	ldr	r3, [pc, #80]	@ (2000076c <Set_Clock_Delay+0x68>)
2000071c:	2201      	movs	r2, #1
2000071e:	605a      	str	r2, [r3, #4]
      delay  = 1U;
    }

    DAP_Data.clock_delay = delay;
  }
}
20000720:	e01c      	b.n	2000075c <Set_Clock_Delay+0x58>
    DAP_Data.fast_clock  = 0U;
20000722:	4b12      	ldr	r3, [pc, #72]	@ (2000076c <Set_Clock_Delay+0x68>)
20000724:	2200      	movs	r2, #0
20000726:	705a      	strb	r2, [r3, #1]
    delay = ((CPU_CLOCK/2U) + (clock - 1U)) / clock;
20000728:	687a      	ldr	r2, [r7, #4]
2000072a:	4b11      	ldr	r3, [pc, #68]	@ (20000770 <Set_Clock_Delay+0x6c>)
2000072c:	4413      	add	r3, r2
2000072e:	687a      	ldr	r2, [r7, #4]
20000730:	fbb3 f3f2 	udiv	r3, r3, r2
20000734:	60fb      	str	r3, [r7, #12]
    if (delay > IO_PORT_WRITE_CYCLES) {
20000736:	68fb      	ldr	r3, [r7, #12]
20000738:	2b02      	cmp	r3, #2
2000073a:	d90a      	bls.n	20000752 <Set_Clock_Delay+0x4e>
      delay -= IO_PORT_WRITE_CYCLES;
2000073c:	68fb      	ldr	r3, [r7, #12]
2000073e:	3b02      	subs	r3, #2
20000740:	60fb      	str	r3, [r7, #12]
      delay  = (delay + (DELAY_SLOW_CYCLES - 1U)) / DELAY_SLOW_CYCLES;
20000742:	68fb      	ldr	r3, [r7, #12]
20000744:	3302      	adds	r3, #2
20000746:	4a0b      	ldr	r2, [pc, #44]	@ (20000774 <Set_Clock_Delay+0x70>)
20000748:	fba2 2303 	umull	r2, r3, r2, r3
2000074c:	085b      	lsrs	r3, r3, #1
2000074e:	60fb      	str	r3, [r7, #12]
20000750:	e001      	b.n	20000756 <Set_Clock_Delay+0x52>
      delay  = 1U;
20000752:	2301      	movs	r3, #1
20000754:	60fb      	str	r3, [r7, #12]
    DAP_Data.clock_delay = delay;
20000756:	4a05      	ldr	r2, [pc, #20]	@ (2000076c <Set_Clock_Delay+0x68>)
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	6053      	str	r3, [r2, #4]
}
2000075c:	bf00      	nop
2000075e:	3714      	adds	r7, #20
20000760:	46bd      	mov	sp, r7
20000762:	f85d 7b04 	ldr.w	r7, [sp], #4
20000766:	4770      	bx	lr
20000768:	0337f980 	.word	0x0337f980
2000076c:	2000c3d0 	.word	0x2000c3d0
20000770:	066ff2ff 	.word	0x066ff2ff
20000774:	aaaaaaab 	.word	0xaaaaaaab

20000778 <DAP_Info>:

// Get DAP Information
//   id:      info identifier
//   info:    pointer to info data
//   return:  number of bytes in info data
static uint8_t DAP_Info(uint8_t id, uint8_t *info) {
20000778:	b580      	push	{r7, lr}
2000077a:	b084      	sub	sp, #16
2000077c:	af00      	add	r7, sp, #0
2000077e:	4603      	mov	r3, r0
20000780:	6039      	str	r1, [r7, #0]
20000782:	71fb      	strb	r3, [r7, #7]
  uint8_t length = 0U;
20000784:	2300      	movs	r3, #0
20000786:	73fb      	strb	r3, [r7, #15]

  switch (id) {
20000788:	79fb      	ldrb	r3, [r7, #7]
2000078a:	2b09      	cmp	r3, #9
2000078c:	dc42      	bgt.n	20000814 <DAP_Info+0x9c>
2000078e:	2b00      	cmp	r3, #0
20000790:	dc28      	bgt.n	200007e4 <DAP_Info+0x6c>
    case DAP_ID_PACKET_COUNT:
      info[0] = DAP_PACKET_COUNT;
      length = 1U;
      break;
    default:
      break;
20000792:	e0a9      	b.n	200008e8 <DAP_Info+0x170>
  switch (id) {
20000794:	3bf0      	subs	r3, #240	@ 0xf0
20000796:	2b0f      	cmp	r3, #15
20000798:	f200 80a6 	bhi.w	200008e8 <DAP_Info+0x170>
2000079c:	a201      	add	r2, pc, #4	@ (adr r2, 200007a4 <DAP_Info+0x2c>)
2000079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200007a2:	bf00      	nop
200007a4:	20000891 	.word	0x20000891
200007a8:	200008a5 	.word	0x200008a5
200007ac:	200008e9 	.word	0x200008e9
200007b0:	200008e9 	.word	0x200008e9
200007b4:	200008e9 	.word	0x200008e9
200007b8:	200008e9 	.word	0x200008e9
200007bc:	200008e9 	.word	0x200008e9
200007c0:	200008e9 	.word	0x200008e9
200007c4:	200008e9 	.word	0x200008e9
200007c8:	200008e9 	.word	0x200008e9
200007cc:	200008e9 	.word	0x200008e9
200007d0:	200008e9 	.word	0x200008e9
200007d4:	200008e9 	.word	0x200008e9
200007d8:	200008e9 	.word	0x200008e9
200007dc:	200008dd 	.word	0x200008dd
200007e0:	200008c9 	.word	0x200008c9
200007e4:	3b01      	subs	r3, #1
200007e6:	2b08      	cmp	r3, #8
200007e8:	d87e      	bhi.n	200008e8 <DAP_Info+0x170>
200007ea:	a201      	add	r2, pc, #4	@ (adr r2, 200007f0 <DAP_Info+0x78>)
200007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200007f0:	2000081f 	.word	0x2000081f
200007f4:	2000082b 	.word	0x2000082b
200007f8:	20000837 	.word	0x20000837
200007fc:	20000843 	.word	0x20000843
20000800:	20000855 	.word	0x20000855
20000804:	20000861 	.word	0x20000861
20000808:	2000086d 	.word	0x2000086d
2000080c:	20000879 	.word	0x20000879
20000810:	20000885 	.word	0x20000885
20000814:	2bff      	cmp	r3, #255	@ 0xff
20000816:	dc67      	bgt.n	200008e8 <DAP_Info+0x170>
20000818:	2bf0      	cmp	r3, #240	@ 0xf0
2000081a:	dabb      	bge.n	20000794 <DAP_Info+0x1c>
      break;
2000081c:	e064      	b.n	200008e8 <DAP_Info+0x170>
      length = DAP_GetVendorString((char *)info);
2000081e:	6838      	ldr	r0, [r7, #0]
20000820:	f7ff fe6a 	bl	200004f8 <DAP_GetVendorString>
20000824:	4603      	mov	r3, r0
20000826:	73fb      	strb	r3, [r7, #15]
      break;
20000828:	e05f      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetProductString((char *)info);
2000082a:	6838      	ldr	r0, [r7, #0]
2000082c:	f7ff fe6f 	bl	2000050e <DAP_GetProductString>
20000830:	4603      	mov	r3, r0
20000832:	73fb      	strb	r3, [r7, #15]
      break;
20000834:	e059      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetSerNumString((char *)info);
20000836:	6838      	ldr	r0, [r7, #0]
20000838:	f7ff fe74 	bl	20000524 <DAP_GetSerNumString>
2000083c:	4603      	mov	r3, r0
2000083e:	73fb      	strb	r3, [r7, #15]
      break;
20000840:	e053      	b.n	200008ea <DAP_Info+0x172>
      length = (uint8_t)sizeof(DAP_FW_Ver);
20000842:	2306      	movs	r3, #6
20000844:	73fb      	strb	r3, [r7, #15]
      memcpy(info, DAP_FW_Ver, length);
20000846:	7bfb      	ldrb	r3, [r7, #15]
20000848:	461a      	mov	r2, r3
2000084a:	492a      	ldr	r1, [pc, #168]	@ (200008f4 <DAP_Info+0x17c>)
2000084c:	6838      	ldr	r0, [r7, #0]
2000084e:	f00b fbb1 	bl	2000bfb4 <memcpy>
      break;
20000852:	e04a      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetDeviceVendorString((char *)info);
20000854:	6838      	ldr	r0, [r7, #0]
20000856:	f7ff fe70 	bl	2000053a <DAP_GetTargetDeviceVendorString>
2000085a:	4603      	mov	r3, r0
2000085c:	73fb      	strb	r3, [r7, #15]
      break;
2000085e:	e044      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetDeviceNameString((char *)info);
20000860:	6838      	ldr	r0, [r7, #0]
20000862:	f7ff fe75 	bl	20000550 <DAP_GetTargetDeviceNameString>
20000866:	4603      	mov	r3, r0
20000868:	73fb      	strb	r3, [r7, #15]
      break;
2000086a:	e03e      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetBoardVendorString((char *)info);
2000086c:	6838      	ldr	r0, [r7, #0]
2000086e:	f7ff fe7a 	bl	20000566 <DAP_GetTargetBoardVendorString>
20000872:	4603      	mov	r3, r0
20000874:	73fb      	strb	r3, [r7, #15]
      break;
20000876:	e038      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetTargetBoardNameString((char *)info);
20000878:	6838      	ldr	r0, [r7, #0]
2000087a:	f7ff fe7f 	bl	2000057c <DAP_GetTargetBoardNameString>
2000087e:	4603      	mov	r3, r0
20000880:	73fb      	strb	r3, [r7, #15]
      break;
20000882:	e032      	b.n	200008ea <DAP_Info+0x172>
      length = DAP_GetProductFirmwareVersionString((char *)info);
20000884:	6838      	ldr	r0, [r7, #0]
20000886:	f7ff fe84 	bl	20000592 <DAP_GetProductFirmwareVersionString>
2000088a:	4603      	mov	r3, r0
2000088c:	73fb      	strb	r3, [r7, #15]
      break;
2000088e:	e02c      	b.n	200008ea <DAP_Info+0x172>
      info[0] = ((DAP_SWD  != 0)         ? (1U << 0) : 0U) |
20000890:	683b      	ldr	r3, [r7, #0]
20000892:	2232      	movs	r2, #50	@ 0x32
20000894:	701a      	strb	r2, [r3, #0]
      info[1] = ((DAP_UART_USB_COM_PORT != 0) ? (1U << 0) : 0U);
20000896:	683b      	ldr	r3, [r7, #0]
20000898:	3301      	adds	r3, #1
2000089a:	2201      	movs	r2, #1
2000089c:	701a      	strb	r2, [r3, #0]
      length = 2U;
2000089e:	2302      	movs	r3, #2
200008a0:	73fb      	strb	r3, [r7, #15]
      break;
200008a2:	e022      	b.n	200008ea <DAP_Info+0x172>
      info[0] = (uint8_t)(TIMESTAMP_CLOCK >>  0);
200008a4:	683b      	ldr	r3, [r7, #0]
200008a6:	2200      	movs	r2, #0
200008a8:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(TIMESTAMP_CLOCK >>  8);
200008aa:	683b      	ldr	r3, [r7, #0]
200008ac:	3301      	adds	r3, #1
200008ae:	22e1      	movs	r2, #225	@ 0xe1
200008b0:	701a      	strb	r2, [r3, #0]
      info[2] = (uint8_t)(TIMESTAMP_CLOCK >> 16);
200008b2:	683b      	ldr	r3, [r7, #0]
200008b4:	3302      	adds	r3, #2
200008b6:	22f5      	movs	r2, #245	@ 0xf5
200008b8:	701a      	strb	r2, [r3, #0]
      info[3] = (uint8_t)(TIMESTAMP_CLOCK >> 24);
200008ba:	683b      	ldr	r3, [r7, #0]
200008bc:	3303      	adds	r3, #3
200008be:	2205      	movs	r2, #5
200008c0:	701a      	strb	r2, [r3, #0]
      length = 4U;
200008c2:	2304      	movs	r3, #4
200008c4:	73fb      	strb	r3, [r7, #15]
      break;
200008c6:	e010      	b.n	200008ea <DAP_Info+0x172>
      info[0] = (uint8_t)(DAP_PACKET_SIZE >> 0);
200008c8:	683b      	ldr	r3, [r7, #0]
200008ca:	2240      	movs	r2, #64	@ 0x40
200008cc:	701a      	strb	r2, [r3, #0]
      info[1] = (uint8_t)(DAP_PACKET_SIZE >> 8);
200008ce:	683b      	ldr	r3, [r7, #0]
200008d0:	3301      	adds	r3, #1
200008d2:	2200      	movs	r2, #0
200008d4:	701a      	strb	r2, [r3, #0]
      length = 2U;
200008d6:	2302      	movs	r3, #2
200008d8:	73fb      	strb	r3, [r7, #15]
      break;
200008da:	e006      	b.n	200008ea <DAP_Info+0x172>
      info[0] = DAP_PACKET_COUNT;
200008dc:	683b      	ldr	r3, [r7, #0]
200008de:	2201      	movs	r2, #1
200008e0:	701a      	strb	r2, [r3, #0]
      length = 1U;
200008e2:	2301      	movs	r3, #1
200008e4:	73fb      	strb	r3, [r7, #15]
      break;
200008e6:	e000      	b.n	200008ea <DAP_Info+0x172>
      break;
200008e8:	bf00      	nop
  }

  return (length);
200008ea:	7bfb      	ldrb	r3, [r7, #15]
}
200008ec:	4618      	mov	r0, r3
200008ee:	3710      	adds	r7, #16
200008f0:	46bd      	mov	sp, r7
200008f2:	bd80      	pop	{r7, pc}
200008f4:	2000c0bc 	.word	0x2000c0bc

200008f8 <DAP_Delay>:
// Process Delay command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Delay(const uint8_t *request, uint8_t *response) {
200008f8:	b480      	push	{r7}
200008fa:	b085      	sub	sp, #20
200008fc:	af00      	add	r7, sp, #0
200008fe:	6078      	str	r0, [r7, #4]
20000900:	6039      	str	r1, [r7, #0]
  uint32_t delay;

  delay  = (uint32_t)(*(request+0)) |
20000902:	687b      	ldr	r3, [r7, #4]
20000904:	781b      	ldrb	r3, [r3, #0]
20000906:	461a      	mov	r2, r3
           (uint32_t)(*(request+1) << 8);
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	3301      	adds	r3, #1
2000090c:	781b      	ldrb	r3, [r3, #0]
2000090e:	021b      	lsls	r3, r3, #8
  delay  = (uint32_t)(*(request+0)) |
20000910:	4313      	orrs	r3, r2
20000912:	60fb      	str	r3, [r7, #12]
  delay *= ((CPU_CLOCK/1000000U) + (DELAY_SLOW_CYCLES-1U)) / DELAY_SLOW_CYCLES;
20000914:	68fa      	ldr	r2, [r7, #12]
20000916:	4613      	mov	r3, r2
20000918:	00db      	lsls	r3, r3, #3
2000091a:	4413      	add	r3, r2
2000091c:	00db      	lsls	r3, r3, #3
2000091e:	60fb      	str	r3, [r7, #12]
20000920:	68fb      	ldr	r3, [r7, #12]
20000922:	60bb      	str	r3, [r7, #8]
  uint32_t count = delay;
  while (--count);
}
#else
__STATIC_FORCEINLINE void PIN_DELAY_SLOW (uint32_t delay) {
  __ASM volatile (
20000924:	68bb      	ldr	r3, [r7, #8]
20000926:	3b01      	subs	r3, #1
20000928:	d1fd      	bne.n	20000926 <DAP_Delay+0x2e>
2000092a:	60bb      	str	r3, [r7, #8]
  "0:\n\t"
    "subs %0,%0,#1\n\t"
    "bne  0b\n"
  : "+l" (delay) : : "cc"
  );
}
2000092c:	bf00      	nop

  PIN_DELAY_SLOW(delay);

  *response = DAP_OK;
2000092e:	683b      	ldr	r3, [r7, #0]
20000930:	2200      	movs	r2, #0
20000932:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
20000934:	4b03      	ldr	r3, [pc, #12]	@ (20000944 <DAP_Delay+0x4c>)
}
20000936:	4618      	mov	r0, r3
20000938:	3714      	adds	r7, #20
2000093a:	46bd      	mov	sp, r7
2000093c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000940:	4770      	bx	lr
20000942:	bf00      	nop
20000944:	00020001 	.word	0x00020001

20000948 <DAP_HostStatus>:
// Process Host Status command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_HostStatus(const uint8_t *request, uint8_t *response) {
20000948:	b580      	push	{r7, lr}
2000094a:	b082      	sub	sp, #8
2000094c:	af00      	add	r7, sp, #0
2000094e:	6078      	str	r0, [r7, #4]
20000950:	6039      	str	r1, [r7, #0]

  switch (*request) {
20000952:	687b      	ldr	r3, [r7, #4]
20000954:	781b      	ldrb	r3, [r3, #0]
20000956:	2b00      	cmp	r3, #0
20000958:	d002      	beq.n	20000960 <DAP_HostStatus+0x18>
2000095a:	2b01      	cmp	r3, #1
2000095c:	d009      	beq.n	20000972 <DAP_HostStatus+0x2a>
2000095e:	e011      	b.n	20000984 <DAP_HostStatus+0x3c>
    case DAP_DEBUGGER_CONNECTED:
      LED_CONNECTED_OUT((*(request+1) & 1U));
20000960:	687b      	ldr	r3, [r7, #4]
20000962:	3301      	adds	r3, #1
20000964:	781b      	ldrb	r3, [r3, #0]
20000966:	f003 0301 	and.w	r3, r3, #1
2000096a:	4618      	mov	r0, r3
2000096c:	f7ff fea2 	bl	200006b4 <LED_CONNECTED_OUT>
      break;
20000970:	e00d      	b.n	2000098e <DAP_HostStatus+0x46>
    case DAP_TARGET_RUNNING:
      LED_RUNNING_OUT((*(request+1) & 1U));
20000972:	687b      	ldr	r3, [r7, #4]
20000974:	3301      	adds	r3, #1
20000976:	781b      	ldrb	r3, [r3, #0]
20000978:	f003 0301 	and.w	r3, r3, #1
2000097c:	4618      	mov	r0, r3
2000097e:	f7ff fea3 	bl	200006c8 <LED_RUNNING_OUT>
      break;
20000982:	e004      	b.n	2000098e <DAP_HostStatus+0x46>
    default:
      *response = DAP_ERROR;
20000984:	683b      	ldr	r3, [r7, #0]
20000986:	22ff      	movs	r2, #255	@ 0xff
20000988:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) | 1U);
2000098a:	4b05      	ldr	r3, [pc, #20]	@ (200009a0 <DAP_HostStatus+0x58>)
2000098c:	e003      	b.n	20000996 <DAP_HostStatus+0x4e>
  }

  *response = DAP_OK;
2000098e:	683b      	ldr	r3, [r7, #0]
20000990:	2200      	movs	r2, #0
20000992:	701a      	strb	r2, [r3, #0]
  return ((2U << 16) | 1U);
20000994:	4b02      	ldr	r3, [pc, #8]	@ (200009a0 <DAP_HostStatus+0x58>)
}
20000996:	4618      	mov	r0, r3
20000998:	3708      	adds	r7, #8
2000099a:	46bd      	mov	sp, r7
2000099c:	bd80      	pop	{r7, pc}
2000099e:	bf00      	nop
200009a0:	00020001 	.word	0x00020001

200009a4 <DAP_Connect>:
// Process Connect command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Connect(const uint8_t *request, uint8_t *response) {
200009a4:	b580      	push	{r7, lr}
200009a6:	b084      	sub	sp, #16
200009a8:	af00      	add	r7, sp, #0
200009aa:	6078      	str	r0, [r7, #4]
200009ac:	6039      	str	r1, [r7, #0]
  uint32_t port;

  if (*request == DAP_PORT_AUTODETECT) {
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	781b      	ldrb	r3, [r3, #0]
200009b2:	2b00      	cmp	r3, #0
200009b4:	d102      	bne.n	200009bc <DAP_Connect+0x18>
    port = DAP_DEFAULT_PORT;
200009b6:	2301      	movs	r3, #1
200009b8:	60fb      	str	r3, [r7, #12]
200009ba:	e002      	b.n	200009c2 <DAP_Connect+0x1e>
  } else {
    port = *request;
200009bc:	687b      	ldr	r3, [r7, #4]
200009be:	781b      	ldrb	r3, [r3, #0]
200009c0:	60fb      	str	r3, [r7, #12]
  }

  switch (port) {
200009c2:	68fb      	ldr	r3, [r7, #12]
200009c4:	2b02      	cmp	r3, #2
200009c6:	d105      	bne.n	200009d4 <DAP_Connect+0x30>
      PORT_SWD_SETUP();
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      DAP_Data.debug_port = DAP_PORT_JTAG;
200009c8:	4b09      	ldr	r3, [pc, #36]	@ (200009f0 <DAP_Connect+0x4c>)
200009ca:	2202      	movs	r2, #2
200009cc:	701a      	strb	r2, [r3, #0]
      PORT_JTAG_SETUP();
200009ce:	f7ff fdeb 	bl	200005a8 <PORT_JTAG_SETUP>
      break;
200009d2:	e002      	b.n	200009da <DAP_Connect+0x36>
#endif
    default:
      port = DAP_PORT_DISABLED;
200009d4:	2300      	movs	r3, #0
200009d6:	60fb      	str	r3, [r7, #12]
      break;
200009d8:	bf00      	nop
  }

  *response = (uint8_t)port;
200009da:	68fb      	ldr	r3, [r7, #12]
200009dc:	b2da      	uxtb	r2, r3
200009de:	683b      	ldr	r3, [r7, #0]
200009e0:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
200009e2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
200009e6:	4618      	mov	r0, r3
200009e8:	3710      	adds	r7, #16
200009ea:	46bd      	mov	sp, r7
200009ec:	bd80      	pop	{r7, pc}
200009ee:	bf00      	nop
200009f0:	2000c3d0 	.word	0x2000c3d0

200009f4 <DAP_Disconnect>:


// Process Disconnect command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_Disconnect(uint8_t *response) {
200009f4:	b580      	push	{r7, lr}
200009f6:	b082      	sub	sp, #8
200009f8:	af00      	add	r7, sp, #0
200009fa:	6078      	str	r0, [r7, #4]

  DAP_Data.debug_port = DAP_PORT_DISABLED;
200009fc:	4b06      	ldr	r3, [pc, #24]	@ (20000a18 <DAP_Disconnect+0x24>)
200009fe:	2200      	movs	r2, #0
20000a00:	701a      	strb	r2, [r3, #0]
  PORT_OFF();
20000a02:	f7ff fdd8 	bl	200005b6 <PORT_OFF>

  *response = DAP_OK;
20000a06:	687b      	ldr	r3, [r7, #4]
20000a08:	2200      	movs	r2, #0
20000a0a:	701a      	strb	r2, [r3, #0]
  return (1U);
20000a0c:	2301      	movs	r3, #1
}
20000a0e:	4618      	mov	r0, r3
20000a10:	3708      	adds	r7, #8
20000a12:	46bd      	mov	sp, r7
20000a14:	bd80      	pop	{r7, pc}
20000a16:	bf00      	nop
20000a18:	2000c3d0 	.word	0x2000c3d0

20000a1c <DAP_ResetTarget>:


// Process Reset Target command and prepare response
//   response: pointer to response data
//   return:   number of bytes in response
static uint32_t DAP_ResetTarget(uint8_t *response) {
20000a1c:	b590      	push	{r4, r7, lr}
20000a1e:	b083      	sub	sp, #12
20000a20:	af00      	add	r7, sp, #0
20000a22:	6078      	str	r0, [r7, #4]

  *(response+1) = RESET_TARGET();
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	1c5c      	adds	r4, r3, #1
20000a28:	f7ff fe64 	bl	200006f4 <RESET_TARGET>
20000a2c:	4603      	mov	r3, r0
20000a2e:	7023      	strb	r3, [r4, #0]
  *(response+0) = DAP_OK;
20000a30:	687b      	ldr	r3, [r7, #4]
20000a32:	2200      	movs	r2, #0
20000a34:	701a      	strb	r2, [r3, #0]
  return (2U);
20000a36:	2302      	movs	r3, #2
}
20000a38:	4618      	mov	r0, r3
20000a3a:	370c      	adds	r7, #12
20000a3c:	46bd      	mov	sp, r7
20000a3e:	bd90      	pop	{r4, r7, pc}

20000a40 <DAP_SWJ_Pins>:
// Process SWJ Pins command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Pins(const uint8_t *request, uint8_t *response) {
20000a40:	b590      	push	{r4, r7, lr}
20000a42:	b087      	sub	sp, #28
20000a44:	af00      	add	r7, sp, #0
20000a46:	6078      	str	r0, [r7, #4]
20000a48:	6039      	str	r1, [r7, #0]
  uint32_t value;
  uint32_t select;
  uint32_t wait;
  uint32_t timestamp;

  value  = (uint32_t) *(request+0);
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	781b      	ldrb	r3, [r3, #0]
20000a4e:	613b      	str	r3, [r7, #16]
  select = (uint32_t) *(request+1);
20000a50:	687b      	ldr	r3, [r7, #4]
20000a52:	3301      	adds	r3, #1
20000a54:	781b      	ldrb	r3, [r3, #0]
20000a56:	60fb      	str	r3, [r7, #12]
  wait   = (uint32_t)(*(request+2) <<  0) |
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	3302      	adds	r3, #2
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	461a      	mov	r2, r3
           (uint32_t)(*(request+3) <<  8) |
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	3303      	adds	r3, #3
20000a64:	781b      	ldrb	r3, [r3, #0]
20000a66:	021b      	lsls	r3, r3, #8
  wait   = (uint32_t)(*(request+2) <<  0) |
20000a68:	431a      	orrs	r2, r3
           (uint32_t)(*(request+4) << 16) |
20000a6a:	687b      	ldr	r3, [r7, #4]
20000a6c:	3304      	adds	r3, #4
20000a6e:	781b      	ldrb	r3, [r3, #0]
20000a70:	041b      	lsls	r3, r3, #16
           (uint32_t)(*(request+3) <<  8) |
20000a72:	431a      	orrs	r2, r3
           (uint32_t)(*(request+5) << 24);
20000a74:	687b      	ldr	r3, [r7, #4]
20000a76:	3305      	adds	r3, #5
20000a78:	781b      	ldrb	r3, [r3, #0]
20000a7a:	061b      	lsls	r3, r3, #24
  wait   = (uint32_t)(*(request+2) <<  0) |
20000a7c:	4313      	orrs	r3, r2
20000a7e:	617b      	str	r3, [r7, #20]

  if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000a80:	68fb      	ldr	r3, [r7, #12]
20000a82:	f003 0301 	and.w	r3, r3, #1
20000a86:	2b00      	cmp	r3, #0
20000a88:	d009      	beq.n	20000a9e <DAP_SWJ_Pins+0x5e>
    if ((value & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000a8a:	693b      	ldr	r3, [r7, #16]
20000a8c:	f003 0301 	and.w	r3, r3, #1
20000a90:	2b00      	cmp	r3, #0
20000a92:	d002      	beq.n	20000a9a <DAP_SWJ_Pins+0x5a>
      PIN_SWCLK_TCK_SET();
20000a94:	f7ff fd9e 	bl	200005d4 <PIN_SWCLK_TCK_SET>
20000a98:	e001      	b.n	20000a9e <DAP_SWJ_Pins+0x5e>
    } else {
      PIN_SWCLK_TCK_CLR();
20000a9a:	f7ff fda2 	bl	200005e2 <PIN_SWCLK_TCK_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000a9e:	68fb      	ldr	r3, [r7, #12]
20000aa0:	f003 0302 	and.w	r3, r3, #2
20000aa4:	2b00      	cmp	r3, #0
20000aa6:	d009      	beq.n	20000abc <DAP_SWJ_Pins+0x7c>
    if ((value & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000aa8:	693b      	ldr	r3, [r7, #16]
20000aaa:	f003 0302 	and.w	r3, r3, #2
20000aae:	2b00      	cmp	r3, #0
20000ab0:	d002      	beq.n	20000ab8 <DAP_SWJ_Pins+0x78>
      PIN_SWDIO_TMS_SET();
20000ab2:	f7ff fda9 	bl	20000608 <PIN_SWDIO_TMS_SET>
20000ab6:	e001      	b.n	20000abc <DAP_SWJ_Pins+0x7c>
    } else {
      PIN_SWDIO_TMS_CLR();
20000ab8:	f7ff fdb2 	bl	20000620 <PIN_SWDIO_TMS_CLR>
    }
  }
  if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000abc:	68fb      	ldr	r3, [r7, #12]
20000abe:	f003 0304 	and.w	r3, r3, #4
20000ac2:	2b00      	cmp	r3, #0
20000ac4:	d004      	beq.n	20000ad0 <DAP_SWJ_Pins+0x90>
    PIN_TDI_OUT(value >> DAP_SWJ_TDI);
20000ac6:	693b      	ldr	r3, [r7, #16]
20000ac8:	089b      	lsrs	r3, r3, #2
20000aca:	4618      	mov	r0, r3
20000acc:	f7ff fdbc 	bl	20000648 <PIN_TDI_OUT>
  }
  if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000ad0:	68fb      	ldr	r3, [r7, #12]
20000ad2:	f003 0320 	and.w	r3, r3, #32
20000ad6:	2b00      	cmp	r3, #0
20000ad8:	d004      	beq.n	20000ae4 <DAP_SWJ_Pins+0xa4>
    PIN_nTRST_OUT(value >> DAP_SWJ_nTRST);
20000ada:	693b      	ldr	r3, [r7, #16]
20000adc:	095b      	lsrs	r3, r3, #5
20000ade:	4618      	mov	r0, r3
20000ae0:	f7ff fdcc 	bl	2000067c <PIN_nTRST_OUT>
  }
  if ((select & (1U << DAP_SWJ_nRESET)) != 0U){
20000ae4:	68fb      	ldr	r3, [r7, #12]
20000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000aea:	2b00      	cmp	r3, #0
20000aec:	d004      	beq.n	20000af8 <DAP_SWJ_Pins+0xb8>
    PIN_nRESET_OUT(value >> DAP_SWJ_nRESET);
20000aee:	693b      	ldr	r3, [r7, #16]
20000af0:	09db      	lsrs	r3, r3, #7
20000af2:	4618      	mov	r0, r3
20000af4:	f7ff fdd4 	bl	200006a0 <PIN_nRESET_OUT>
  }

  if (wait != 0U) {
20000af8:	697b      	ldr	r3, [r7, #20]
20000afa:	2b00      	cmp	r3, #0
20000afc:	d05a      	beq.n	20000bb4 <DAP_SWJ_Pins+0x174>
#if (TIMESTAMP_CLOCK != 0U)
    if (wait > 3000000U) {
20000afe:	697b      	ldr	r3, [r7, #20]
20000b00:	4a3f      	ldr	r2, [pc, #252]	@ (20000c00 <DAP_SWJ_Pins+0x1c0>)
20000b02:	4293      	cmp	r3, r2
20000b04:	d901      	bls.n	20000b0a <DAP_SWJ_Pins+0xca>
      wait = 3000000U;
20000b06:	4b3e      	ldr	r3, [pc, #248]	@ (20000c00 <DAP_SWJ_Pins+0x1c0>)
20000b08:	617b      	str	r3, [r7, #20]
    }
#if (TIMESTAMP_CLOCK >= 1000000U)
    wait *= TIMESTAMP_CLOCK / 1000000U;
20000b0a:	697b      	ldr	r3, [r7, #20]
20000b0c:	2264      	movs	r2, #100	@ 0x64
20000b0e:	fb02 f303 	mul.w	r3, r2, r3
20000b12:	617b      	str	r3, [r7, #20]
    wait /= 1000000U / TIMESTAMP_CLOCK;
#endif
#else
    wait  = 1U;
#endif
    timestamp = TIMESTAMP_GET();
20000b14:	f7ff fde2 	bl	200006dc <TIMESTAMP_GET>
20000b18:	60b8      	str	r0, [r7, #8]
    do {
      if ((select & (1U << DAP_SWJ_SWCLK_TCK)) != 0U) {
20000b1a:	68fb      	ldr	r3, [r7, #12]
20000b1c:	f003 0301 	and.w	r3, r3, #1
20000b20:	2b00      	cmp	r3, #0
20000b22:	d005      	beq.n	20000b30 <DAP_SWJ_Pins+0xf0>
        if ((value >> DAP_SWJ_SWCLK_TCK) ^ PIN_SWCLK_TCK_IN()) {
20000b24:	f7ff fd4e 	bl	200005c4 <PIN_SWCLK_TCK_IN>
20000b28:	4602      	mov	r2, r0
20000b2a:	693b      	ldr	r3, [r7, #16]
20000b2c:	4293      	cmp	r3, r2
20000b2e:	d130      	bne.n	20000b92 <DAP_SWJ_Pins+0x152>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_SWDIO_TMS)) != 0U) {
20000b30:	68fb      	ldr	r3, [r7, #12]
20000b32:	f003 0302 	and.w	r3, r3, #2
20000b36:	2b00      	cmp	r3, #0
20000b38:	d006      	beq.n	20000b48 <DAP_SWJ_Pins+0x108>
        if ((value >> DAP_SWJ_SWDIO_TMS) ^ PIN_SWDIO_TMS_IN()) {
20000b3a:	693b      	ldr	r3, [r7, #16]
20000b3c:	085c      	lsrs	r4, r3, #1
20000b3e:	f7ff fd57 	bl	200005f0 <PIN_SWDIO_TMS_IN>
20000b42:	4603      	mov	r3, r0
20000b44:	429c      	cmp	r4, r3
20000b46:	d126      	bne.n	20000b96 <DAP_SWJ_Pins+0x156>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_TDI)) != 0U) {
20000b48:	68fb      	ldr	r3, [r7, #12]
20000b4a:	f003 0304 	and.w	r3, r3, #4
20000b4e:	2b00      	cmp	r3, #0
20000b50:	d006      	beq.n	20000b60 <DAP_SWJ_Pins+0x120>
        if ((value >> DAP_SWJ_TDI) ^ PIN_TDI_IN()) {
20000b52:	693b      	ldr	r3, [r7, #16]
20000b54:	089c      	lsrs	r4, r3, #2
20000b56:	f7ff fd6f 	bl	20000638 <PIN_TDI_IN>
20000b5a:	4603      	mov	r3, r0
20000b5c:	429c      	cmp	r4, r3
20000b5e:	d11c      	bne.n	20000b9a <DAP_SWJ_Pins+0x15a>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nTRST)) != 0U) {
20000b60:	68fb      	ldr	r3, [r7, #12]
20000b62:	f003 0320 	and.w	r3, r3, #32
20000b66:	2b00      	cmp	r3, #0
20000b68:	d006      	beq.n	20000b78 <DAP_SWJ_Pins+0x138>
        if ((value >> DAP_SWJ_nTRST) ^ PIN_nTRST_IN()) {
20000b6a:	693b      	ldr	r3, [r7, #16]
20000b6c:	095c      	lsrs	r4, r3, #5
20000b6e:	f7ff fd7d 	bl	2000066c <PIN_nTRST_IN>
20000b72:	4603      	mov	r3, r0
20000b74:	429c      	cmp	r4, r3
20000b76:	d112      	bne.n	20000b9e <DAP_SWJ_Pins+0x15e>
          continue;
        }
      }
      if ((select & (1U << DAP_SWJ_nRESET)) != 0U) {
20000b78:	68fb      	ldr	r3, [r7, #12]
20000b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000b7e:	2b00      	cmp	r3, #0
20000b80:	d017      	beq.n	20000bb2 <DAP_SWJ_Pins+0x172>
        if ((value >> DAP_SWJ_nRESET) ^ PIN_nRESET_IN()) {
20000b82:	693b      	ldr	r3, [r7, #16]
20000b84:	09dc      	lsrs	r4, r3, #7
20000b86:	f7ff fd83 	bl	20000690 <PIN_nRESET_IN>
20000b8a:	4603      	mov	r3, r0
20000b8c:	429c      	cmp	r4, r3
20000b8e:	d010      	beq.n	20000bb2 <DAP_SWJ_Pins+0x172>
          continue;
20000b90:	e006      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b92:	bf00      	nop
20000b94:	e004      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b96:	bf00      	nop
20000b98:	e002      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b9a:	bf00      	nop
20000b9c:	e000      	b.n	20000ba0 <DAP_SWJ_Pins+0x160>
          continue;
20000b9e:	bf00      	nop
        }
      }
      break;
    } while ((TIMESTAMP_GET() - timestamp) < wait);
20000ba0:	f7ff fd9c 	bl	200006dc <TIMESTAMP_GET>
20000ba4:	4602      	mov	r2, r0
20000ba6:	68bb      	ldr	r3, [r7, #8]
20000ba8:	1ad3      	subs	r3, r2, r3
20000baa:	697a      	ldr	r2, [r7, #20]
20000bac:	429a      	cmp	r2, r3
20000bae:	d8b4      	bhi.n	20000b1a <DAP_SWJ_Pins+0xda>
20000bb0:	e000      	b.n	20000bb4 <DAP_SWJ_Pins+0x174>
      break;
20000bb2:	bf00      	nop
  }

  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000bb4:	f7ff fd06 	bl	200005c4 <PIN_SWCLK_TCK_IN>
20000bb8:	4604      	mov	r4, r0
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000bba:	f7ff fd19 	bl	200005f0 <PIN_SWDIO_TMS_IN>
20000bbe:	4603      	mov	r3, r0
20000bc0:	005b      	lsls	r3, r3, #1
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000bc2:	431c      	orrs	r4, r3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000bc4:	f7ff fd38 	bl	20000638 <PIN_TDI_IN>
20000bc8:	4603      	mov	r3, r0
20000bca:	009b      	lsls	r3, r3, #2
          (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
20000bcc:	431c      	orrs	r4, r3
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000bce:	f7ff fd45 	bl	2000065c <PIN_TDO_IN>
20000bd2:	4603      	mov	r3, r0
20000bd4:	00db      	lsls	r3, r3, #3
          (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
20000bd6:	431c      	orrs	r4, r3
          (PIN_nTRST_IN()     << DAP_SWJ_nTRST)     |
20000bd8:	f7ff fd48 	bl	2000066c <PIN_nTRST_IN>
20000bdc:	4603      	mov	r3, r0
20000bde:	015b      	lsls	r3, r3, #5
          (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
20000be0:	431c      	orrs	r4, r3
          (PIN_nRESET_IN()    << DAP_SWJ_nRESET);
20000be2:	f7ff fd55 	bl	20000690 <PIN_nRESET_IN>
20000be6:	4603      	mov	r3, r0
20000be8:	01db      	lsls	r3, r3, #7
  value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
20000bea:	4323      	orrs	r3, r4
20000bec:	613b      	str	r3, [r7, #16]

  *response = (uint8_t)value;
20000bee:	693b      	ldr	r3, [r7, #16]
20000bf0:	b2da      	uxtb	r2, r3
20000bf2:	683b      	ldr	r3, [r7, #0]
20000bf4:	701a      	strb	r2, [r3, #0]
#else
  *response = 0U;
#endif

  return ((6U << 16) | 1U);
20000bf6:	4b03      	ldr	r3, [pc, #12]	@ (20000c04 <DAP_SWJ_Pins+0x1c4>)
}
20000bf8:	4618      	mov	r0, r3
20000bfa:	371c      	adds	r7, #28
20000bfc:	46bd      	mov	sp, r7
20000bfe:	bd90      	pop	{r4, r7, pc}
20000c00:	002dc6c0 	.word	0x002dc6c0
20000c04:	00060001 	.word	0x00060001

20000c08 <DAP_SWJ_Clock>:
// Process SWJ Clock command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Clock(const uint8_t *request, uint8_t *response) {
20000c08:	b580      	push	{r7, lr}
20000c0a:	b084      	sub	sp, #16
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	6078      	str	r0, [r7, #4]
20000c10:	6039      	str	r1, [r7, #0]
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  uint32_t clock;
  uint32_t delay;

  clock = (uint32_t)(*(request+0) <<  0) |
20000c12:	687b      	ldr	r3, [r7, #4]
20000c14:	781b      	ldrb	r3, [r3, #0]
20000c16:	461a      	mov	r2, r3
          (uint32_t)(*(request+1) <<  8) |
20000c18:	687b      	ldr	r3, [r7, #4]
20000c1a:	3301      	adds	r3, #1
20000c1c:	781b      	ldrb	r3, [r3, #0]
20000c1e:	021b      	lsls	r3, r3, #8
  clock = (uint32_t)(*(request+0) <<  0) |
20000c20:	431a      	orrs	r2, r3
          (uint32_t)(*(request+2) << 16) |
20000c22:	687b      	ldr	r3, [r7, #4]
20000c24:	3302      	adds	r3, #2
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	041b      	lsls	r3, r3, #16
          (uint32_t)(*(request+1) <<  8) |
20000c2a:	431a      	orrs	r2, r3
          (uint32_t)(*(request+3) << 24);
20000c2c:	687b      	ldr	r3, [r7, #4]
20000c2e:	3303      	adds	r3, #3
20000c30:	781b      	ldrb	r3, [r3, #0]
20000c32:	061b      	lsls	r3, r3, #24
  clock = (uint32_t)(*(request+0) <<  0) |
20000c34:	4313      	orrs	r3, r2
20000c36:	60fb      	str	r3, [r7, #12]

  if (clock == 0U) {
20000c38:	68fb      	ldr	r3, [r7, #12]
20000c3a:	2b00      	cmp	r3, #0
20000c3c:	d104      	bne.n	20000c48 <DAP_SWJ_Clock+0x40>
    *response = DAP_ERROR;
20000c3e:	683b      	ldr	r3, [r7, #0]
20000c40:	22ff      	movs	r2, #255	@ 0xff
20000c42:	701a      	strb	r2, [r3, #0]
    return ((4U << 16) | 1U);
20000c44:	4b06      	ldr	r3, [pc, #24]	@ (20000c60 <DAP_SWJ_Clock+0x58>)
20000c46:	e006      	b.n	20000c56 <DAP_SWJ_Clock+0x4e>
  }

  Set_Clock_Delay(clock);
20000c48:	68f8      	ldr	r0, [r7, #12]
20000c4a:	f7ff fd5b 	bl	20000704 <Set_Clock_Delay>

  *response = DAP_OK;
20000c4e:	683b      	ldr	r3, [r7, #0]
20000c50:	2200      	movs	r2, #0
20000c52:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  return ((4U << 16) | 1U);
20000c54:	4b02      	ldr	r3, [pc, #8]	@ (20000c60 <DAP_SWJ_Clock+0x58>)
}
20000c56:	4618      	mov	r0, r3
20000c58:	3710      	adds	r7, #16
20000c5a:	46bd      	mov	sp, r7
20000c5c:	bd80      	pop	{r7, pc}
20000c5e:	bf00      	nop
20000c60:	00040001 	.word	0x00040001

20000c64 <DAP_SWJ_Sequence>:
// Process SWJ Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWJ_Sequence(const uint8_t *request, uint8_t *response) {
20000c64:	b580      	push	{r7, lr}
20000c66:	b084      	sub	sp, #16
20000c68:	af00      	add	r7, sp, #0
20000c6a:	6078      	str	r0, [r7, #4]
20000c6c:	6039      	str	r1, [r7, #0]
  uint32_t count;

  count = *request++;
20000c6e:	687b      	ldr	r3, [r7, #4]
20000c70:	1c5a      	adds	r2, r3, #1
20000c72:	607a      	str	r2, [r7, #4]
20000c74:	781b      	ldrb	r3, [r3, #0]
20000c76:	60fb      	str	r3, [r7, #12]
  if (count == 0U) {
20000c78:	68fb      	ldr	r3, [r7, #12]
20000c7a:	2b00      	cmp	r3, #0
20000c7c:	d102      	bne.n	20000c84 <DAP_SWJ_Sequence+0x20>
    count = 256U;
20000c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
20000c82:	60fb      	str	r3, [r7, #12]
  }

#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
  SWJ_Sequence(count, request);
20000c84:	6879      	ldr	r1, [r7, #4]
20000c86:	68f8      	ldr	r0, [r7, #12]
20000c88:	f002 faf0 	bl	2000326c <SWJ_Sequence>
  *response = DAP_OK;
20000c8c:	683b      	ldr	r3, [r7, #0]
20000c8e:	2200      	movs	r2, #0
20000c90:	701a      	strb	r2, [r3, #0]
#else
  *response = DAP_ERROR;
#endif

  count = (count + 7U) >> 3;
20000c92:	68fb      	ldr	r3, [r7, #12]
20000c94:	3307      	adds	r3, #7
20000c96:	08db      	lsrs	r3, r3, #3
20000c98:	60fb      	str	r3, [r7, #12]

  return (((count + 1U) << 16) | 1U);
20000c9a:	68fb      	ldr	r3, [r7, #12]
20000c9c:	3301      	adds	r3, #1
20000c9e:	041b      	lsls	r3, r3, #16
20000ca0:	f043 0301 	orr.w	r3, r3, #1
}
20000ca4:	4618      	mov	r0, r3
20000ca6:	3710      	adds	r7, #16
20000ca8:	46bd      	mov	sp, r7
20000caa:	bd80      	pop	{r7, pc}

20000cac <DAP_SWD_Configure>:
// Process SWD Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Configure(const uint8_t *request, uint8_t *response) {
20000cac:	b480      	push	{r7}
20000cae:	b083      	sub	sp, #12
20000cb0:	af00      	add	r7, sp, #0
20000cb2:	6078      	str	r0, [r7, #4]
20000cb4:	6039      	str	r1, [r7, #0]
  DAP_Data.swd_conf.turnaround = (value & 0x03U) + 1U;
  DAP_Data.swd_conf.data_phase = (value & 0x04U) ? 1U : 0U;

  *response = DAP_OK;
#else
  *response = DAP_ERROR;
20000cb6:	683b      	ldr	r3, [r7, #0]
20000cb8:	22ff      	movs	r2, #255	@ 0xff
20000cba:	701a      	strb	r2, [r3, #0]
#endif

  return ((1U << 16) | 1U);
20000cbc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000cc0:	4618      	mov	r0, r3
20000cc2:	370c      	adds	r7, #12
20000cc4:	46bd      	mov	sp, r7
20000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000cca:	4770      	bx	lr

20000ccc <DAP_SWD_Sequence>:
// Process SWD Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_SWD_Sequence(const uint8_t *request, uint8_t *response) {
20000ccc:	b480      	push	{r7}
20000cce:	b089      	sub	sp, #36	@ 0x24
20000cd0:	af00      	add	r7, sp, #0
20000cd2:	6078      	str	r0, [r7, #4]
20000cd4:	6039      	str	r1, [r7, #0]
  uint32_t count;

#if (DAP_SWD != 0)
  *response++ = DAP_OK;
#else
  *response++ = DAP_ERROR;
20000cd6:	683b      	ldr	r3, [r7, #0]
20000cd8:	1c5a      	adds	r2, r3, #1
20000cda:	603a      	str	r2, [r7, #0]
20000cdc:	22ff      	movs	r2, #255	@ 0xff
20000cde:	701a      	strb	r2, [r3, #0]
#endif
  request_count  = 1U;
20000ce0:	2301      	movs	r3, #1
20000ce2:	61bb      	str	r3, [r7, #24]
  response_count = 1U;
20000ce4:	2301      	movs	r3, #1
20000ce6:	613b      	str	r3, [r7, #16]

  sequence_count = *request++;
20000ce8:	687b      	ldr	r3, [r7, #4]
20000cea:	1c5a      	adds	r2, r3, #1
20000cec:	607a      	str	r2, [r7, #4]
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	61fb      	str	r3, [r7, #28]
  while (sequence_count--) {
20000cf2:	e023      	b.n	20000d3c <DAP_SWD_Sequence+0x70>
    sequence_info = *request++;
20000cf4:	687b      	ldr	r3, [r7, #4]
20000cf6:	1c5a      	adds	r2, r3, #1
20000cf8:	607a      	str	r2, [r7, #4]
20000cfa:	781b      	ldrb	r3, [r3, #0]
20000cfc:	60fb      	str	r3, [r7, #12]
    count = sequence_info & SWD_SEQUENCE_CLK;
20000cfe:	68fb      	ldr	r3, [r7, #12]
20000d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20000d04:	617b      	str	r3, [r7, #20]
    if (count == 0U) {
20000d06:	697b      	ldr	r3, [r7, #20]
20000d08:	2b00      	cmp	r3, #0
20000d0a:	d101      	bne.n	20000d10 <DAP_SWD_Sequence+0x44>
      count = 64U;
20000d0c:	2340      	movs	r3, #64	@ 0x40
20000d0e:	617b      	str	r3, [r7, #20]
    }
    count = (count + 7U) / 8U;
20000d10:	697b      	ldr	r3, [r7, #20]
20000d12:	3307      	adds	r3, #7
20000d14:	08db      	lsrs	r3, r3, #3
20000d16:	617b      	str	r3, [r7, #20]
    SWD_Sequence(sequence_info, request, response);
    if (sequence_count == 0U) {
      PIN_SWDIO_OUT_ENABLE();
    }
#endif
    if ((sequence_info & SWD_SEQUENCE_DIN) != 0U) {
20000d18:	68fb      	ldr	r3, [r7, #12]
20000d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000d1e:	2b00      	cmp	r3, #0
20000d20:	d003      	beq.n	20000d2a <DAP_SWD_Sequence+0x5e>
      request_count++;
20000d22:	69bb      	ldr	r3, [r7, #24]
20000d24:	3301      	adds	r3, #1
20000d26:	61bb      	str	r3, [r7, #24]
20000d28:	e008      	b.n	20000d3c <DAP_SWD_Sequence+0x70>
#if (DAP_SWD != 0)
      response += count;
      response_count += count;
#endif
    } else {
      request += count;
20000d2a:	687a      	ldr	r2, [r7, #4]
20000d2c:	697b      	ldr	r3, [r7, #20]
20000d2e:	4413      	add	r3, r2
20000d30:	607b      	str	r3, [r7, #4]
      request_count += count + 1U;
20000d32:	697a      	ldr	r2, [r7, #20]
20000d34:	69bb      	ldr	r3, [r7, #24]
20000d36:	4413      	add	r3, r2
20000d38:	3301      	adds	r3, #1
20000d3a:	61bb      	str	r3, [r7, #24]
  while (sequence_count--) {
20000d3c:	69fb      	ldr	r3, [r7, #28]
20000d3e:	1e5a      	subs	r2, r3, #1
20000d40:	61fa      	str	r2, [r7, #28]
20000d42:	2b00      	cmp	r3, #0
20000d44:	d1d6      	bne.n	20000cf4 <DAP_SWD_Sequence+0x28>
    }
  }

  return ((request_count << 16) | response_count);
20000d46:	69bb      	ldr	r3, [r7, #24]
20000d48:	041a      	lsls	r2, r3, #16
20000d4a:	693b      	ldr	r3, [r7, #16]
20000d4c:	4313      	orrs	r3, r2
}
20000d4e:	4618      	mov	r0, r3
20000d50:	3724      	adds	r7, #36	@ 0x24
20000d52:	46bd      	mov	sp, r7
20000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
20000d58:	4770      	bx	lr

20000d5a <DAP_JTAG_Sequence>:
// Process JTAG Sequence command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Sequence(const uint8_t *request, uint8_t *response) {
20000d5a:	b580      	push	{r7, lr}
20000d5c:	b088      	sub	sp, #32
20000d5e:	af00      	add	r7, sp, #0
20000d60:	6078      	str	r0, [r7, #4]
20000d62:	6039      	str	r1, [r7, #0]
  uint32_t request_count;
  uint32_t response_count;
  uint32_t count;

#if (DAP_JTAG != 0)
  *response++ = DAP_OK;
20000d64:	683b      	ldr	r3, [r7, #0]
20000d66:	1c5a      	adds	r2, r3, #1
20000d68:	603a      	str	r2, [r7, #0]
20000d6a:	2200      	movs	r2, #0
20000d6c:	701a      	strb	r2, [r3, #0]
#else
  *response++ = DAP_ERROR;
#endif
  request_count  = 1U;
20000d6e:	2301      	movs	r3, #1
20000d70:	61fb      	str	r3, [r7, #28]
  response_count = 1U;
20000d72:	2301      	movs	r3, #1
20000d74:	61bb      	str	r3, [r7, #24]

  sequence_count = *request++;
20000d76:	687b      	ldr	r3, [r7, #4]
20000d78:	1c5a      	adds	r2, r3, #1
20000d7a:	607a      	str	r2, [r7, #4]
20000d7c:	781b      	ldrb	r3, [r3, #0]
20000d7e:	617b      	str	r3, [r7, #20]
  while (sequence_count) {
20000d80:	e01a      	b.n	20000db8 <DAP_JTAG_Sequence+0x5e>

    JTAG_Sequence(sequence_count, request, response);
20000d82:	683a      	ldr	r2, [r7, #0]
20000d84:	6879      	ldr	r1, [r7, #4]
20000d86:	6978      	ldr	r0, [r7, #20]
20000d88:	f001 f94c 	bl	20002024 <JTAG_Sequence>

    request += count;
20000d8c:	687a      	ldr	r2, [r7, #4]
20000d8e:	693b      	ldr	r3, [r7, #16]
20000d90:	4413      	add	r3, r2
20000d92:	607b      	str	r3, [r7, #4]
    request_count += count + 1U;
20000d94:	693a      	ldr	r2, [r7, #16]
20000d96:	69fb      	ldr	r3, [r7, #28]
20000d98:	4413      	add	r3, r2
20000d9a:	3301      	adds	r3, #1
20000d9c:	61fb      	str	r3, [r7, #28]
#if (DAP_JTAG != 0)
    if ((sequence_info & JTAG_SEQUENCE_TDO) != 0U) {
20000d9e:	68fb      	ldr	r3, [r7, #12]
20000da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000da4:	2b00      	cmp	r3, #0
20000da6:	d007      	beq.n	20000db8 <DAP_JTAG_Sequence+0x5e>
      response += count;
20000da8:	683a      	ldr	r2, [r7, #0]
20000daa:	693b      	ldr	r3, [r7, #16]
20000dac:	4413      	add	r3, r2
20000dae:	603b      	str	r3, [r7, #0]
      response_count += count;
20000db0:	69ba      	ldr	r2, [r7, #24]
20000db2:	693b      	ldr	r3, [r7, #16]
20000db4:	4413      	add	r3, r2
20000db6:	61bb      	str	r3, [r7, #24]
  while (sequence_count) {
20000db8:	697b      	ldr	r3, [r7, #20]
20000dba:	2b00      	cmp	r3, #0
20000dbc:	d1e1      	bne.n	20000d82 <DAP_JTAG_Sequence+0x28>
    }
#endif
  }

  return ((request_count << 16) | response_count);
20000dbe:	69fb      	ldr	r3, [r7, #28]
20000dc0:	041a      	lsls	r2, r3, #16
20000dc2:	69bb      	ldr	r3, [r7, #24]
20000dc4:	4313      	orrs	r3, r2
}
20000dc6:	4618      	mov	r0, r3
20000dc8:	3720      	adds	r7, #32
20000dca:	46bd      	mov	sp, r7
20000dcc:	bd80      	pop	{r7, pc}
	...

20000dd0 <DAP_JTAG_Configure>:
// Process JTAG Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_Configure(const uint8_t *request, uint8_t *response) {
20000dd0:	b480      	push	{r7}
20000dd2:	b087      	sub	sp, #28
20000dd4:	af00      	add	r7, sp, #0
20000dd6:	6078      	str	r0, [r7, #4]
20000dd8:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t length;
  uint32_t bits;
  uint32_t n;

  count = *request++;
20000dda:	687b      	ldr	r3, [r7, #4]
20000ddc:	1c5a      	adds	r2, r3, #1
20000dde:	607a      	str	r2, [r7, #4]
20000de0:	781b      	ldrb	r3, [r3, #0]
20000de2:	60fb      	str	r3, [r7, #12]
  DAP_Data.jtag_dev.count = (uint8_t)count;
20000de4:	68fb      	ldr	r3, [r7, #12]
20000de6:	b2da      	uxtb	r2, r3
20000de8:	4b28      	ldr	r3, [pc, #160]	@ (20000e8c <DAP_JTAG_Configure+0xbc>)
20000dea:	761a      	strb	r2, [r3, #24]

  bits = 0U;
20000dec:	2300      	movs	r3, #0
20000dee:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000df0:	2300      	movs	r3, #0
20000df2:	613b      	str	r3, [r7, #16]
20000df4:	e01c      	b.n	20000e30 <DAP_JTAG_Configure+0x60>
    length = *request++;
20000df6:	687b      	ldr	r3, [r7, #4]
20000df8:	1c5a      	adds	r2, r3, #1
20000dfa:	607a      	str	r2, [r7, #4]
20000dfc:	781b      	ldrb	r3, [r3, #0]
20000dfe:	60bb      	str	r3, [r7, #8]
    DAP_Data.jtag_dev.ir_length[n] =  (uint8_t)length;
20000e00:	68bb      	ldr	r3, [r7, #8]
20000e02:	b2d9      	uxtb	r1, r3
20000e04:	4a21      	ldr	r2, [pc, #132]	@ (20000e8c <DAP_JTAG_Configure+0xbc>)
20000e06:	693b      	ldr	r3, [r7, #16]
20000e08:	4413      	add	r3, r2
20000e0a:	331a      	adds	r3, #26
20000e0c:	460a      	mov	r2, r1
20000e0e:	701a      	strb	r2, [r3, #0]
    DAP_Data.jtag_dev.ir_before[n] = (uint16_t)bits;
20000e10:	697b      	ldr	r3, [r7, #20]
20000e12:	b299      	uxth	r1, r3
20000e14:	4a1d      	ldr	r2, [pc, #116]	@ (20000e8c <DAP_JTAG_Configure+0xbc>)
20000e16:	693b      	ldr	r3, [r7, #16]
20000e18:	3310      	adds	r3, #16
20000e1a:	005b      	lsls	r3, r3, #1
20000e1c:	4413      	add	r3, r2
20000e1e:	460a      	mov	r2, r1
20000e20:	805a      	strh	r2, [r3, #2]
    bits += length;
20000e22:	697a      	ldr	r2, [r7, #20]
20000e24:	68bb      	ldr	r3, [r7, #8]
20000e26:	4413      	add	r3, r2
20000e28:	617b      	str	r3, [r7, #20]
  for (n = 0U; n < count; n++) {
20000e2a:	693b      	ldr	r3, [r7, #16]
20000e2c:	3301      	adds	r3, #1
20000e2e:	613b      	str	r3, [r7, #16]
20000e30:	693a      	ldr	r2, [r7, #16]
20000e32:	68fb      	ldr	r3, [r7, #12]
20000e34:	429a      	cmp	r2, r3
20000e36:	d3de      	bcc.n	20000df6 <DAP_JTAG_Configure+0x26>
  }
  for (n = 0U; n < count; n++) {
20000e38:	2300      	movs	r3, #0
20000e3a:	613b      	str	r3, [r7, #16]
20000e3c:	e014      	b.n	20000e68 <DAP_JTAG_Configure+0x98>
    bits -= DAP_Data.jtag_dev.ir_length[n];
20000e3e:	4a13      	ldr	r2, [pc, #76]	@ (20000e8c <DAP_JTAG_Configure+0xbc>)
20000e40:	693b      	ldr	r3, [r7, #16]
20000e42:	4413      	add	r3, r2
20000e44:	331a      	adds	r3, #26
20000e46:	781b      	ldrb	r3, [r3, #0]
20000e48:	461a      	mov	r2, r3
20000e4a:	697b      	ldr	r3, [r7, #20]
20000e4c:	1a9b      	subs	r3, r3, r2
20000e4e:	617b      	str	r3, [r7, #20]
    DAP_Data.jtag_dev.ir_after[n] = (uint16_t)bits;
20000e50:	697b      	ldr	r3, [r7, #20]
20000e52:	b299      	uxth	r1, r3
20000e54:	4a0d      	ldr	r2, [pc, #52]	@ (20000e8c <DAP_JTAG_Configure+0xbc>)
20000e56:	693b      	ldr	r3, [r7, #16]
20000e58:	3318      	adds	r3, #24
20000e5a:	005b      	lsls	r3, r3, #1
20000e5c:	4413      	add	r3, r2
20000e5e:	460a      	mov	r2, r1
20000e60:	805a      	strh	r2, [r3, #2]
  for (n = 0U; n < count; n++) {
20000e62:	693b      	ldr	r3, [r7, #16]
20000e64:	3301      	adds	r3, #1
20000e66:	613b      	str	r3, [r7, #16]
20000e68:	693a      	ldr	r2, [r7, #16]
20000e6a:	68fb      	ldr	r3, [r7, #12]
20000e6c:	429a      	cmp	r2, r3
20000e6e:	d3e6      	bcc.n	20000e3e <DAP_JTAG_Configure+0x6e>
  }

  *response = DAP_OK;
20000e70:	683b      	ldr	r3, [r7, #0]
20000e72:	2200      	movs	r2, #0
20000e74:	701a      	strb	r2, [r3, #0]
#else
  count = *request;
  *response = DAP_ERROR;
#endif

  return (((count + 1U) << 16) | 1U);
20000e76:	68fb      	ldr	r3, [r7, #12]
20000e78:	3301      	adds	r3, #1
20000e7a:	041b      	lsls	r3, r3, #16
20000e7c:	f043 0301 	orr.w	r3, r3, #1
}
20000e80:	4618      	mov	r0, r3
20000e82:	371c      	adds	r7, #28
20000e84:	46bd      	mov	sp, r7
20000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e8a:	4770      	bx	lr
20000e8c:	2000c3d0 	.word	0x2000c3d0

20000e90 <DAP_JTAG_IDCode>:
// Process JTAG IDCODE command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_JTAG_IDCode(const uint8_t *request, uint8_t *response) {
20000e90:	b580      	push	{r7, lr}
20000e92:	b084      	sub	sp, #16
20000e94:	af00      	add	r7, sp, #0
20000e96:	6078      	str	r0, [r7, #4]
20000e98:	6039      	str	r1, [r7, #0]
#if (DAP_JTAG != 0)
  uint32_t data;

  if (DAP_Data.debug_port != DAP_PORT_JTAG) {
20000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (20000f14 <DAP_JTAG_IDCode+0x84>)
20000e9c:	781b      	ldrb	r3, [r3, #0]
20000e9e:	2b02      	cmp	r3, #2
20000ea0:	d12b      	bne.n	20000efa <DAP_JTAG_IDCode+0x6a>
    goto id_error;
  }

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
20000ea2:	687b      	ldr	r3, [r7, #4]
20000ea4:	781a      	ldrb	r2, [r3, #0]
20000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (20000f14 <DAP_JTAG_IDCode+0x84>)
20000ea8:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (20000f14 <DAP_JTAG_IDCode+0x84>)
20000eac:	7e5a      	ldrb	r2, [r3, #25]
20000eae:	4b19      	ldr	r3, [pc, #100]	@ (20000f14 <DAP_JTAG_IDCode+0x84>)
20000eb0:	7e1b      	ldrb	r3, [r3, #24]
20000eb2:	429a      	cmp	r2, r3
20000eb4:	d223      	bcs.n	20000efe <DAP_JTAG_IDCode+0x6e>
    goto id_error;
  }

  // Select JTAG chain
  JTAG_IR(JTAG_IDCODE);
20000eb6:	200e      	movs	r0, #14
20000eb8:	f002 f982 	bl	200031c0 <JTAG_IR>

  // Read IDCODE register
  data = JTAG_ReadIDCode();
20000ebc:	f001 ff3e 	bl	20002d3c <JTAG_ReadIDCode>
20000ec0:	60f8      	str	r0, [r7, #12]

  // Store Data
  *(response+0) =  DAP_OK;
20000ec2:	683b      	ldr	r3, [r7, #0]
20000ec4:	2200      	movs	r2, #0
20000ec6:	701a      	strb	r2, [r3, #0]
  *(response+1) = (uint8_t)(data >>  0);
20000ec8:	683b      	ldr	r3, [r7, #0]
20000eca:	3301      	adds	r3, #1
20000ecc:	68fa      	ldr	r2, [r7, #12]
20000ece:	b2d2      	uxtb	r2, r2
20000ed0:	701a      	strb	r2, [r3, #0]
  *(response+2) = (uint8_t)(data >>  8);
20000ed2:	68fb      	ldr	r3, [r7, #12]
20000ed4:	0a1a      	lsrs	r2, r3, #8
20000ed6:	683b      	ldr	r3, [r7, #0]
20000ed8:	3302      	adds	r3, #2
20000eda:	b2d2      	uxtb	r2, r2
20000edc:	701a      	strb	r2, [r3, #0]
  *(response+3) = (uint8_t)(data >> 16);
20000ede:	68fb      	ldr	r3, [r7, #12]
20000ee0:	0c1a      	lsrs	r2, r3, #16
20000ee2:	683b      	ldr	r3, [r7, #0]
20000ee4:	3303      	adds	r3, #3
20000ee6:	b2d2      	uxtb	r2, r2
20000ee8:	701a      	strb	r2, [r3, #0]
  *(response+4) = (uint8_t)(data >> 24);
20000eea:	68fb      	ldr	r3, [r7, #12]
20000eec:	0e1a      	lsrs	r2, r3, #24
20000eee:	683b      	ldr	r3, [r7, #0]
20000ef0:	3304      	adds	r3, #4
20000ef2:	b2d2      	uxtb	r2, r2
20000ef4:	701a      	strb	r2, [r3, #0]

  return ((1U << 16) | 5U);
20000ef6:	4b08      	ldr	r3, [pc, #32]	@ (20000f18 <DAP_JTAG_IDCode+0x88>)
20000ef8:	e007      	b.n	20000f0a <DAP_JTAG_IDCode+0x7a>
    goto id_error;
20000efa:	bf00      	nop
20000efc:	e000      	b.n	20000f00 <DAP_JTAG_IDCode+0x70>
    goto id_error;
20000efe:	bf00      	nop

id_error:
#endif
  *response = DAP_ERROR;
20000f00:	683b      	ldr	r3, [r7, #0]
20000f02:	22ff      	movs	r2, #255	@ 0xff
20000f04:	701a      	strb	r2, [r3, #0]
  return ((1U << 16) | 1U);
20000f06:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
}
20000f0a:	4618      	mov	r0, r3
20000f0c:	3710      	adds	r7, #16
20000f0e:	46bd      	mov	sp, r7
20000f10:	bd80      	pop	{r7, pc}
20000f12:	bf00      	nop
20000f14:	2000c3d0 	.word	0x2000c3d0
20000f18:	00010005 	.word	0x00010005

20000f1c <DAP_TransferConfigure>:
// Process Transfer Configure command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferConfigure(const uint8_t *request, uint8_t *response) {
20000f1c:	b480      	push	{r7}
20000f1e:	b083      	sub	sp, #12
20000f20:	af00      	add	r7, sp, #0
20000f22:	6078      	str	r0, [r7, #4]
20000f24:	6039      	str	r1, [r7, #0]

  DAP_Data.transfer.idle_cycles =            *(request+0);
20000f26:	687b      	ldr	r3, [r7, #4]
20000f28:	781a      	ldrb	r2, [r3, #0]
20000f2a:	4b13      	ldr	r3, [pc, #76]	@ (20000f78 <DAP_TransferConfigure+0x5c>)
20000f2c:	731a      	strb	r2, [r3, #12]
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
20000f2e:	687b      	ldr	r3, [r7, #4]
20000f30:	3301      	adds	r3, #1
20000f32:	781b      	ldrb	r3, [r3, #0]
20000f34:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+2) << 8);
20000f36:	687b      	ldr	r3, [r7, #4]
20000f38:	3302      	adds	r3, #2
20000f3a:	781b      	ldrb	r3, [r3, #0]
20000f3c:	021b      	lsls	r3, r3, #8
20000f3e:	b29b      	uxth	r3, r3
  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
20000f40:	4313      	orrs	r3, r2
20000f42:	b29a      	uxth	r2, r3
20000f44:	4b0c      	ldr	r3, [pc, #48]	@ (20000f78 <DAP_TransferConfigure+0x5c>)
20000f46:	821a      	strh	r2, [r3, #16]
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
20000f48:	687b      	ldr	r3, [r7, #4]
20000f4a:	3303      	adds	r3, #3
20000f4c:	781b      	ldrb	r3, [r3, #0]
20000f4e:	461a      	mov	r2, r3
                                  (uint16_t)(*(request+4) << 8);
20000f50:	687b      	ldr	r3, [r7, #4]
20000f52:	3304      	adds	r3, #4
20000f54:	781b      	ldrb	r3, [r3, #0]
20000f56:	021b      	lsls	r3, r3, #8
20000f58:	b29b      	uxth	r3, r3
  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) |
20000f5a:	4313      	orrs	r3, r2
20000f5c:	b29a      	uxth	r2, r3
20000f5e:	4b06      	ldr	r3, [pc, #24]	@ (20000f78 <DAP_TransferConfigure+0x5c>)
20000f60:	825a      	strh	r2, [r3, #18]

  *response = DAP_OK;
20000f62:	683b      	ldr	r3, [r7, #0]
20000f64:	2200      	movs	r2, #0
20000f66:	701a      	strb	r2, [r3, #0]
  return ((5U << 16) | 1U);
20000f68:	4b04      	ldr	r3, [pc, #16]	@ (20000f7c <DAP_TransferConfigure+0x60>)
}
20000f6a:	4618      	mov	r0, r3
20000f6c:	370c      	adds	r7, #12
20000f6e:	46bd      	mov	sp, r7
20000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f74:	4770      	bx	lr
20000f76:	bf00      	nop
20000f78:	2000c3d0 	.word	0x2000c3d0
20000f7c:	00050001 	.word	0x00050001

20000f80 <DAP_JTAG_Transfer>:
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_Transfer(const uint8_t *request, uint8_t *response) {
20000f80:	b580      	push	{r7, lr}
20000f82:	b090      	sub	sp, #64	@ 0x40
20000f84:	af00      	add	r7, sp, #0
20000f86:	6078      	str	r0, [r7, #4]
20000f88:	6039      	str	r1, [r7, #0]
  uint32_t  ir;
#if (TIMESTAMP_CLOCK != 0U)
  uint32_t  timestamp;
#endif

  request_head   = request;
20000f8a:	687b      	ldr	r3, [r7, #4]
20000f8c:	623b      	str	r3, [r7, #32]

  response_count = 0U;
20000f8e:	2300      	movs	r3, #0
20000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  response_value = 0U;
20000f92:	2300      	movs	r3, #0
20000f94:	637b      	str	r3, [r7, #52]	@ 0x34
  response_head  = response;
20000f96:	683b      	ldr	r3, [r7, #0]
20000f98:	61fb      	str	r3, [r7, #28]
  response      += 2;
20000f9a:	683b      	ldr	r3, [r7, #0]
20000f9c:	3302      	adds	r3, #2
20000f9e:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20000fa0:	4b95      	ldr	r3, [pc, #596]	@ (200011f8 <DAP_JTAG_Transfer+0x278>)
20000fa2:	2200      	movs	r2, #0
20000fa4:	701a      	strb	r2, [r3, #0]

  ir        = 0U;
20000fa6:	2300      	movs	r3, #0
20000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  post_read = 0U;
20000faa:	2300      	movs	r3, #0
20000fac:	633b      	str	r3, [r7, #48]	@ 0x30

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20000fae:	687b      	ldr	r3, [r7, #4]
20000fb0:	1c5a      	adds	r2, r3, #1
20000fb2:	607a      	str	r2, [r7, #4]
20000fb4:	781a      	ldrb	r2, [r3, #0]
20000fb6:	4b91      	ldr	r3, [pc, #580]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
20000fb8:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20000fba:	4b90      	ldr	r3, [pc, #576]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
20000fbc:	7e5a      	ldrb	r2, [r3, #25]
20000fbe:	4b8f      	ldr	r3, [pc, #572]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
20000fc0:	7e1b      	ldrb	r3, [r3, #24]
20000fc2:	429a      	cmp	r2, r3
20000fc4:	f080 82bc 	bcs.w	20001540 <DAP_JTAG_Transfer+0x5c0>
    goto end;
  }

  request_count = *request++;
20000fc8:	687b      	ldr	r3, [r7, #4]
20000fca:	1c5a      	adds	r2, r3, #1
20000fcc:	607a      	str	r2, [r7, #4]
20000fce:	781b      	ldrb	r3, [r3, #0]
20000fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  while (request_count != 0) {
20000fd2:	e227      	b.n	20001424 <DAP_JTAG_Transfer+0x4a4>
    request_count--;
20000fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20000fd6:	3b01      	subs	r3, #1
20000fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
20000fda:	687b      	ldr	r3, [r7, #4]
20000fdc:	1c5a      	adds	r2, r3, #1
20000fde:	607a      	str	r2, [r7, #4]
20000fe0:	781b      	ldrb	r3, [r3, #0]
20000fe2:	61bb      	str	r3, [r7, #24]
    request_ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
20000fe4:	69bb      	ldr	r3, [r7, #24]
20000fe6:	f003 0301 	and.w	r3, r3, #1
20000fea:	2b00      	cmp	r3, #0
20000fec:	d001      	beq.n	20000ff2 <DAP_JTAG_Transfer+0x72>
20000fee:	230b      	movs	r3, #11
20000ff0:	e000      	b.n	20000ff4 <DAP_JTAG_Transfer+0x74>
20000ff2:	230a      	movs	r3, #10
20000ff4:	617b      	str	r3, [r7, #20]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20000ff6:	69bb      	ldr	r3, [r7, #24]
20000ff8:	f003 0302 	and.w	r3, r3, #2
20000ffc:	2b00      	cmp	r3, #0
20000ffe:	f000 815d 	beq.w	200012bc <DAP_JTAG_Transfer+0x33c>
      // Read register
      if (post_read) {
20001002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001004:	2b00      	cmp	r3, #0
20001006:	f000 8088 	beq.w	2000111a <DAP_JTAG_Transfer+0x19a>
        // Read was posted before
        retry = DAP_Data.transfer.retry_count;
2000100a:	4b7c      	ldr	r3, [pc, #496]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
2000100c:	8a1b      	ldrh	r3, [r3, #16]
2000100e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
20001010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001012:	697b      	ldr	r3, [r7, #20]
20001014:	429a      	cmp	r2, r3
20001016:	d11a      	bne.n	2000104e <DAP_JTAG_Transfer+0xce>
20001018:	69bb      	ldr	r3, [r7, #24]
2000101a:	f003 0310 	and.w	r3, r3, #16
2000101e:	2b00      	cmp	r3, #0
20001020:	d115      	bne.n	2000104e <DAP_JTAG_Transfer+0xce>
          // Read previous data and post next read
          do {
            response_value = JTAG_Transfer(request_value, &data);
20001022:	f107 0308 	add.w	r3, r7, #8
20001026:	4619      	mov	r1, r3
20001028:	69b8      	ldr	r0, [r7, #24]
2000102a:	f002 f8df 	bl	200031ec <JTAG_Transfer>
2000102e:	4603      	mov	r3, r0
20001030:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001034:	2b02      	cmp	r3, #2
20001036:	d12a      	bne.n	2000108e <DAP_JTAG_Transfer+0x10e>
20001038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000103a:	1e5a      	subs	r2, r3, #1
2000103c:	62ba      	str	r2, [r7, #40]	@ 0x28
2000103e:	2b00      	cmp	r3, #0
20001040:	d025      	beq.n	2000108e <DAP_JTAG_Transfer+0x10e>
20001042:	4b6d      	ldr	r3, [pc, #436]	@ (200011f8 <DAP_JTAG_Transfer+0x278>)
20001044:	781b      	ldrb	r3, [r3, #0]
20001046:	b2db      	uxtb	r3, r3
20001048:	2b00      	cmp	r3, #0
2000104a:	d0ea      	beq.n	20001022 <DAP_JTAG_Transfer+0xa2>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
2000104c:	e01f      	b.n	2000108e <DAP_JTAG_Transfer+0x10e>
        } else {
          // Select JTAG chain
          if (ir != JTAG_DPACC) {
2000104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001050:	2b0a      	cmp	r3, #10
20001052:	d004      	beq.n	2000105e <DAP_JTAG_Transfer+0xde>
            ir = JTAG_DPACC;
20001054:	230a      	movs	r3, #10
20001056:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
20001058:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000105a:	f002 f8b1 	bl	200031c0 <JTAG_IR>
          }
          // Read previous data
          do {
            response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
2000105e:	f107 0308 	add.w	r3, r7, #8
20001062:	4619      	mov	r1, r3
20001064:	200e      	movs	r0, #14
20001066:	f002 f8c1 	bl	200031ec <JTAG_Transfer>
2000106a:	4603      	mov	r3, r0
2000106c:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000106e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001070:	2b02      	cmp	r3, #2
20001072:	d109      	bne.n	20001088 <DAP_JTAG_Transfer+0x108>
20001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001076:	1e5a      	subs	r2, r3, #1
20001078:	62ba      	str	r2, [r7, #40]	@ 0x28
2000107a:	2b00      	cmp	r3, #0
2000107c:	d004      	beq.n	20001088 <DAP_JTAG_Transfer+0x108>
2000107e:	4b5e      	ldr	r3, [pc, #376]	@ (200011f8 <DAP_JTAG_Transfer+0x278>)
20001080:	781b      	ldrb	r3, [r3, #0]
20001082:	b2db      	uxtb	r3, r3
20001084:	2b00      	cmp	r3, #0
20001086:	d0ea      	beq.n	2000105e <DAP_JTAG_Transfer+0xde>
          post_read = 0U;
20001088:	2300      	movs	r3, #0
2000108a:	633b      	str	r3, [r7, #48]	@ 0x30
2000108c:	e000      	b.n	20001090 <DAP_JTAG_Transfer+0x110>
        if ((ir == request_ir) && ((request_value & DAP_TRANSFER_MATCH_VALUE) == 0U)) {
2000108e:	bf00      	nop
        }
        if (response_value != DAP_TRANSFER_OK) {
20001090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001092:	2b01      	cmp	r3, #1
20001094:	f040 81cb 	bne.w	2000142e <DAP_JTAG_Transfer+0x4ae>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
20001098:	68b9      	ldr	r1, [r7, #8]
2000109a:	683b      	ldr	r3, [r7, #0]
2000109c:	1c5a      	adds	r2, r3, #1
2000109e:	603a      	str	r2, [r7, #0]
200010a0:	b2ca      	uxtb	r2, r1
200010a2:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
200010a4:	68bb      	ldr	r3, [r7, #8]
200010a6:	0a19      	lsrs	r1, r3, #8
200010a8:	683b      	ldr	r3, [r7, #0]
200010aa:	1c5a      	adds	r2, r3, #1
200010ac:	603a      	str	r2, [r7, #0]
200010ae:	b2ca      	uxtb	r2, r1
200010b0:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
200010b2:	68bb      	ldr	r3, [r7, #8]
200010b4:	0c19      	lsrs	r1, r3, #16
200010b6:	683b      	ldr	r3, [r7, #0]
200010b8:	1c5a      	adds	r2, r3, #1
200010ba:	603a      	str	r2, [r7, #0]
200010bc:	b2ca      	uxtb	r2, r1
200010be:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
200010c0:	68bb      	ldr	r3, [r7, #8]
200010c2:	0e19      	lsrs	r1, r3, #24
200010c4:	683b      	ldr	r3, [r7, #0]
200010c6:	1c5a      	adds	r2, r3, #1
200010c8:	603a      	str	r2, [r7, #0]
200010ca:	b2ca      	uxtb	r2, r1
200010cc:	701a      	strb	r2, [r3, #0]
#if (TIMESTAMP_CLOCK != 0U)
        if (post_read) {
200010ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200010d0:	2b00      	cmp	r3, #0
200010d2:	d022      	beq.n	2000111a <DAP_JTAG_Transfer+0x19a>
          // Store Timestamp of next AP read
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200010d4:	69bb      	ldr	r3, [r7, #24]
200010d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200010da:	2b00      	cmp	r3, #0
200010dc:	d01d      	beq.n	2000111a <DAP_JTAG_Transfer+0x19a>
            timestamp = DAP_Data.timestamp;
200010de:	4b47      	ldr	r3, [pc, #284]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
200010e0:	689b      	ldr	r3, [r3, #8]
200010e2:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
200010e4:	683b      	ldr	r3, [r7, #0]
200010e6:	1c5a      	adds	r2, r3, #1
200010e8:	603a      	str	r2, [r7, #0]
200010ea:	693a      	ldr	r2, [r7, #16]
200010ec:	b2d2      	uxtb	r2, r2
200010ee:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
200010f0:	693b      	ldr	r3, [r7, #16]
200010f2:	0a19      	lsrs	r1, r3, #8
200010f4:	683b      	ldr	r3, [r7, #0]
200010f6:	1c5a      	adds	r2, r3, #1
200010f8:	603a      	str	r2, [r7, #0]
200010fa:	b2ca      	uxtb	r2, r1
200010fc:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
200010fe:	693b      	ldr	r3, [r7, #16]
20001100:	0c19      	lsrs	r1, r3, #16
20001102:	683b      	ldr	r3, [r7, #0]
20001104:	1c5a      	adds	r2, r3, #1
20001106:	603a      	str	r2, [r7, #0]
20001108:	b2ca      	uxtb	r2, r1
2000110a:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
2000110c:	693b      	ldr	r3, [r7, #16]
2000110e:	0e19      	lsrs	r1, r3, #24
20001110:	683b      	ldr	r3, [r7, #0]
20001112:	1c5a      	adds	r2, r3, #1
20001114:	603a      	str	r2, [r7, #0]
20001116:	b2ca      	uxtb	r2, r1
20001118:	701a      	strb	r2, [r3, #0]
          }
        }
#endif
      }
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
2000111a:	69bb      	ldr	r3, [r7, #24]
2000111c:	f003 0310 	and.w	r3, r3, #16
20001120:	2b00      	cmp	r3, #0
20001122:	d07e      	beq.n	20001222 <DAP_JTAG_Transfer+0x2a2>
        // Read with value match
        match_value = (uint32_t)(*(request+0) <<  0) |
20001124:	687b      	ldr	r3, [r7, #4]
20001126:	781b      	ldrb	r3, [r3, #0]
20001128:	461a      	mov	r2, r3
                      (uint32_t)(*(request+1) <<  8) |
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	3301      	adds	r3, #1
2000112e:	781b      	ldrb	r3, [r3, #0]
20001130:	021b      	lsls	r3, r3, #8
        match_value = (uint32_t)(*(request+0) <<  0) |
20001132:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+2) << 16) |
20001134:	687b      	ldr	r3, [r7, #4]
20001136:	3302      	adds	r3, #2
20001138:	781b      	ldrb	r3, [r3, #0]
2000113a:	041b      	lsls	r3, r3, #16
                      (uint32_t)(*(request+1) <<  8) |
2000113c:	431a      	orrs	r2, r3
                      (uint32_t)(*(request+3) << 24);
2000113e:	687b      	ldr	r3, [r7, #4]
20001140:	3303      	adds	r3, #3
20001142:	781b      	ldrb	r3, [r3, #0]
20001144:	061b      	lsls	r3, r3, #24
        match_value = (uint32_t)(*(request+0) <<  0) |
20001146:	4313      	orrs	r3, r2
20001148:	60fb      	str	r3, [r7, #12]
        request += 4;
2000114a:	687b      	ldr	r3, [r7, #4]
2000114c:	3304      	adds	r3, #4
2000114e:	607b      	str	r3, [r7, #4]
        match_retry  = DAP_Data.transfer.match_retry;
20001150:	4b2a      	ldr	r3, [pc, #168]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
20001152:	8a5b      	ldrh	r3, [r3, #18]
20001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // Select JTAG chain
        if (ir != request_ir) {
20001156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001158:	697b      	ldr	r3, [r7, #20]
2000115a:	429a      	cmp	r2, r3
2000115c:	d004      	beq.n	20001168 <DAP_JTAG_Transfer+0x1e8>
          ir = request_ir;
2000115e:	697b      	ldr	r3, [r7, #20]
20001160:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001164:	f002 f82c 	bl	200031c0 <JTAG_IR>
        }
        // Post DP/AP read
        retry = DAP_Data.transfer.retry_count;
20001168:	4b24      	ldr	r3, [pc, #144]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
2000116a:	8a1b      	ldrh	r3, [r3, #16]
2000116c:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, NULL);
2000116e:	2100      	movs	r1, #0
20001170:	69b8      	ldr	r0, [r7, #24]
20001172:	f002 f83b 	bl	200031ec <JTAG_Transfer>
20001176:	4603      	mov	r3, r0
20001178:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000117a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000117c:	2b02      	cmp	r3, #2
2000117e:	d109      	bne.n	20001194 <DAP_JTAG_Transfer+0x214>
20001180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001182:	1e5a      	subs	r2, r3, #1
20001184:	62ba      	str	r2, [r7, #40]	@ 0x28
20001186:	2b00      	cmp	r3, #0
20001188:	d004      	beq.n	20001194 <DAP_JTAG_Transfer+0x214>
2000118a:	4b1b      	ldr	r3, [pc, #108]	@ (200011f8 <DAP_JTAG_Transfer+0x278>)
2000118c:	781b      	ldrb	r3, [r3, #0]
2000118e:	b2db      	uxtb	r3, r3
20001190:	2b00      	cmp	r3, #0
20001192:	d0ec      	beq.n	2000116e <DAP_JTAG_Transfer+0x1ee>
        if (response_value != DAP_TRANSFER_OK) {
20001194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001196:	2b01      	cmp	r3, #1
20001198:	f040 814b 	bne.w	20001432 <DAP_JTAG_Transfer+0x4b2>
          break;
        }
        do {
          // Read register until its value matches or retry counter expires
          retry = DAP_Data.transfer.retry_count;
2000119c:	4b17      	ldr	r3, [pc, #92]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
2000119e:	8a1b      	ldrh	r3, [r3, #16]
200011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, &data);
200011a2:	f107 0308 	add.w	r3, r7, #8
200011a6:	4619      	mov	r1, r3
200011a8:	69b8      	ldr	r0, [r7, #24]
200011aa:	f002 f81f 	bl	200031ec <JTAG_Transfer>
200011ae:	4603      	mov	r3, r0
200011b0:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200011b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011b4:	2b02      	cmp	r3, #2
200011b6:	d109      	bne.n	200011cc <DAP_JTAG_Transfer+0x24c>
200011b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200011ba:	1e5a      	subs	r2, r3, #1
200011bc:	62ba      	str	r2, [r7, #40]	@ 0x28
200011be:	2b00      	cmp	r3, #0
200011c0:	d004      	beq.n	200011cc <DAP_JTAG_Transfer+0x24c>
200011c2:	4b0d      	ldr	r3, [pc, #52]	@ (200011f8 <DAP_JTAG_Transfer+0x278>)
200011c4:	781b      	ldrb	r3, [r3, #0]
200011c6:	b2db      	uxtb	r3, r3
200011c8:	2b00      	cmp	r3, #0
200011ca:	d0ea      	beq.n	200011a2 <DAP_JTAG_Transfer+0x222>
          if (response_value != DAP_TRANSFER_OK) {
200011cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200011ce:	2b01      	cmp	r3, #1
200011d0:	d116      	bne.n	20001200 <DAP_JTAG_Transfer+0x280>
            break;
          }
        } while (((data & DAP_Data.transfer.match_mask) != match_value) && match_retry-- && !DAP_TransferAbort);
200011d2:	4b0a      	ldr	r3, [pc, #40]	@ (200011fc <DAP_JTAG_Transfer+0x27c>)
200011d4:	695a      	ldr	r2, [r3, #20]
200011d6:	68bb      	ldr	r3, [r7, #8]
200011d8:	4013      	ands	r3, r2
200011da:	68fa      	ldr	r2, [r7, #12]
200011dc:	429a      	cmp	r2, r3
200011de:	d010      	beq.n	20001202 <DAP_JTAG_Transfer+0x282>
200011e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200011e2:	1e5a      	subs	r2, r3, #1
200011e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
200011e6:	2b00      	cmp	r3, #0
200011e8:	d00b      	beq.n	20001202 <DAP_JTAG_Transfer+0x282>
200011ea:	4b03      	ldr	r3, [pc, #12]	@ (200011f8 <DAP_JTAG_Transfer+0x278>)
200011ec:	781b      	ldrb	r3, [r3, #0]
200011ee:	b2db      	uxtb	r3, r3
200011f0:	2b00      	cmp	r3, #0
200011f2:	d0d3      	beq.n	2000119c <DAP_JTAG_Transfer+0x21c>
200011f4:	e005      	b.n	20001202 <DAP_JTAG_Transfer+0x282>
200011f6:	bf00      	nop
200011f8:	2000c414 	.word	0x2000c414
200011fc:	2000c3d0 	.word	0x2000c3d0
            break;
20001200:	bf00      	nop
        if ((data & DAP_Data.transfer.match_mask) != match_value) {
20001202:	4b91      	ldr	r3, [pc, #580]	@ (20001448 <DAP_JTAG_Transfer+0x4c8>)
20001204:	695a      	ldr	r2, [r3, #20]
20001206:	68bb      	ldr	r3, [r7, #8]
20001208:	4013      	ands	r3, r2
2000120a:	68fa      	ldr	r2, [r7, #12]
2000120c:	429a      	cmp	r2, r3
2000120e:	d003      	beq.n	20001218 <DAP_JTAG_Transfer+0x298>
          response_value |= DAP_TRANSFER_MISMATCH;
20001210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001212:	f043 0310 	orr.w	r3, r3, #16
20001216:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (response_value != DAP_TRANSFER_OK) {
20001218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000121a:	2b01      	cmp	r3, #1
2000121c:	f000 80fa 	beq.w	20001414 <DAP_JTAG_Transfer+0x494>
          break;
20001220:	e110      	b.n	20001444 <DAP_JTAG_Transfer+0x4c4>
        }
      } else {
        // Normal read
        if (post_read == 0U) {
20001222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001224:	2b00      	cmp	r3, #0
20001226:	f040 80f5 	bne.w	20001414 <DAP_JTAG_Transfer+0x494>
          // Select JTAG chain
          if (ir != request_ir) {
2000122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000122c:	697b      	ldr	r3, [r7, #20]
2000122e:	429a      	cmp	r2, r3
20001230:	d004      	beq.n	2000123c <DAP_JTAG_Transfer+0x2bc>
            ir = request_ir;
20001232:	697b      	ldr	r3, [r7, #20]
20001234:	627b      	str	r3, [r7, #36]	@ 0x24
            JTAG_IR(ir);
20001236:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001238:	f001 ffc2 	bl	200031c0 <JTAG_IR>
          }
          // Post DP/AP read
          retry = DAP_Data.transfer.retry_count;
2000123c:	4b82      	ldr	r3, [pc, #520]	@ (20001448 <DAP_JTAG_Transfer+0x4c8>)
2000123e:	8a1b      	ldrh	r3, [r3, #16]
20001240:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            response_value = JTAG_Transfer(request_value, NULL);
20001242:	2100      	movs	r1, #0
20001244:	69b8      	ldr	r0, [r7, #24]
20001246:	f001 ffd1 	bl	200031ec <JTAG_Transfer>
2000124a:	4603      	mov	r3, r0
2000124c:	637b      	str	r3, [r7, #52]	@ 0x34
          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
2000124e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001250:	2b02      	cmp	r3, #2
20001252:	d109      	bne.n	20001268 <DAP_JTAG_Transfer+0x2e8>
20001254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001256:	1e5a      	subs	r2, r3, #1
20001258:	62ba      	str	r2, [r7, #40]	@ 0x28
2000125a:	2b00      	cmp	r3, #0
2000125c:	d004      	beq.n	20001268 <DAP_JTAG_Transfer+0x2e8>
2000125e:	4b7b      	ldr	r3, [pc, #492]	@ (2000144c <DAP_JTAG_Transfer+0x4cc>)
20001260:	781b      	ldrb	r3, [r3, #0]
20001262:	b2db      	uxtb	r3, r3
20001264:	2b00      	cmp	r3, #0
20001266:	d0ec      	beq.n	20001242 <DAP_JTAG_Transfer+0x2c2>
          if (response_value != DAP_TRANSFER_OK) {
20001268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000126a:	2b01      	cmp	r3, #1
2000126c:	f040 80e3 	bne.w	20001436 <DAP_JTAG_Transfer+0x4b6>
            break;
          }
#if (TIMESTAMP_CLOCK != 0U)
          // Store Timestamp
          if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
20001270:	69bb      	ldr	r3, [r7, #24]
20001272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001276:	2b00      	cmp	r3, #0
20001278:	d01d      	beq.n	200012b6 <DAP_JTAG_Transfer+0x336>
            timestamp = DAP_Data.timestamp;
2000127a:	4b73      	ldr	r3, [pc, #460]	@ (20001448 <DAP_JTAG_Transfer+0x4c8>)
2000127c:	689b      	ldr	r3, [r3, #8]
2000127e:	613b      	str	r3, [r7, #16]
            *response++ = (uint8_t) timestamp;
20001280:	683b      	ldr	r3, [r7, #0]
20001282:	1c5a      	adds	r2, r3, #1
20001284:	603a      	str	r2, [r7, #0]
20001286:	693a      	ldr	r2, [r7, #16]
20001288:	b2d2      	uxtb	r2, r2
2000128a:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >>  8);
2000128c:	693b      	ldr	r3, [r7, #16]
2000128e:	0a19      	lsrs	r1, r3, #8
20001290:	683b      	ldr	r3, [r7, #0]
20001292:	1c5a      	adds	r2, r3, #1
20001294:	603a      	str	r2, [r7, #0]
20001296:	b2ca      	uxtb	r2, r1
20001298:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 16);
2000129a:	693b      	ldr	r3, [r7, #16]
2000129c:	0c19      	lsrs	r1, r3, #16
2000129e:	683b      	ldr	r3, [r7, #0]
200012a0:	1c5a      	adds	r2, r3, #1
200012a2:	603a      	str	r2, [r7, #0]
200012a4:	b2ca      	uxtb	r2, r1
200012a6:	701a      	strb	r2, [r3, #0]
            *response++ = (uint8_t)(timestamp >> 24);
200012a8:	693b      	ldr	r3, [r7, #16]
200012aa:	0e19      	lsrs	r1, r3, #24
200012ac:	683b      	ldr	r3, [r7, #0]
200012ae:	1c5a      	adds	r2, r3, #1
200012b0:	603a      	str	r2, [r7, #0]
200012b2:	b2ca      	uxtb	r2, r1
200012b4:	701a      	strb	r2, [r3, #0]
          }
#endif
          post_read = 1U;
200012b6:	2301      	movs	r3, #1
200012b8:	633b      	str	r3, [r7, #48]	@ 0x30
200012ba:	e0ab      	b.n	20001414 <DAP_JTAG_Transfer+0x494>
        }
      }
    } else {
      // Write register
      if (post_read) {
200012bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200012be:	2b00      	cmp	r3, #0
200012c0:	d040      	beq.n	20001344 <DAP_JTAG_Transfer+0x3c4>
        // Select JTAG chain
        if (ir != JTAG_DPACC) {
200012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200012c4:	2b0a      	cmp	r3, #10
200012c6:	d004      	beq.n	200012d2 <DAP_JTAG_Transfer+0x352>
          ir = JTAG_DPACC;
200012c8:	230a      	movs	r3, #10
200012ca:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
200012cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
200012ce:	f001 ff77 	bl	200031c0 <JTAG_IR>
        }
        // Read previous data
        retry = DAP_Data.transfer.retry_count;
200012d2:	4b5d      	ldr	r3, [pc, #372]	@ (20001448 <DAP_JTAG_Transfer+0x4c8>)
200012d4:	8a1b      	ldrh	r3, [r3, #16]
200012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200012d8:	f107 0308 	add.w	r3, r7, #8
200012dc:	4619      	mov	r1, r3
200012de:	200e      	movs	r0, #14
200012e0:	f001 ff84 	bl	200031ec <JTAG_Transfer>
200012e4:	4603      	mov	r3, r0
200012e6:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200012e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200012ea:	2b02      	cmp	r3, #2
200012ec:	d109      	bne.n	20001302 <DAP_JTAG_Transfer+0x382>
200012ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200012f0:	1e5a      	subs	r2, r3, #1
200012f2:	62ba      	str	r2, [r7, #40]	@ 0x28
200012f4:	2b00      	cmp	r3, #0
200012f6:	d004      	beq.n	20001302 <DAP_JTAG_Transfer+0x382>
200012f8:	4b54      	ldr	r3, [pc, #336]	@ (2000144c <DAP_JTAG_Transfer+0x4cc>)
200012fa:	781b      	ldrb	r3, [r3, #0]
200012fc:	b2db      	uxtb	r3, r3
200012fe:	2b00      	cmp	r3, #0
20001300:	d0ea      	beq.n	200012d8 <DAP_JTAG_Transfer+0x358>
        if (response_value != DAP_TRANSFER_OK) {
20001302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001304:	2b01      	cmp	r3, #1
20001306:	f040 8098 	bne.w	2000143a <DAP_JTAG_Transfer+0x4ba>
          break;
        }
        // Store previous data
        *response++ = (uint8_t) data;
2000130a:	68b9      	ldr	r1, [r7, #8]
2000130c:	683b      	ldr	r3, [r7, #0]
2000130e:	1c5a      	adds	r2, r3, #1
20001310:	603a      	str	r2, [r7, #0]
20001312:	b2ca      	uxtb	r2, r1
20001314:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >>  8);
20001316:	68bb      	ldr	r3, [r7, #8]
20001318:	0a19      	lsrs	r1, r3, #8
2000131a:	683b      	ldr	r3, [r7, #0]
2000131c:	1c5a      	adds	r2, r3, #1
2000131e:	603a      	str	r2, [r7, #0]
20001320:	b2ca      	uxtb	r2, r1
20001322:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 16);
20001324:	68bb      	ldr	r3, [r7, #8]
20001326:	0c19      	lsrs	r1, r3, #16
20001328:	683b      	ldr	r3, [r7, #0]
2000132a:	1c5a      	adds	r2, r3, #1
2000132c:	603a      	str	r2, [r7, #0]
2000132e:	b2ca      	uxtb	r2, r1
20001330:	701a      	strb	r2, [r3, #0]
        *response++ = (uint8_t)(data >> 24);
20001332:	68bb      	ldr	r3, [r7, #8]
20001334:	0e19      	lsrs	r1, r3, #24
20001336:	683b      	ldr	r3, [r7, #0]
20001338:	1c5a      	adds	r2, r3, #1
2000133a:	603a      	str	r2, [r7, #0]
2000133c:	b2ca      	uxtb	r2, r1
2000133e:	701a      	strb	r2, [r3, #0]
        post_read = 0U;
20001340:	2300      	movs	r3, #0
20001342:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001344:	687b      	ldr	r3, [r7, #4]
20001346:	781b      	ldrb	r3, [r3, #0]
20001348:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000134a:	687b      	ldr	r3, [r7, #4]
2000134c:	3301      	adds	r3, #1
2000134e:	781b      	ldrb	r3, [r3, #0]
20001350:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001352:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	3302      	adds	r3, #2
20001358:	781b      	ldrb	r3, [r3, #0]
2000135a:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
2000135c:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
2000135e:	687b      	ldr	r3, [r7, #4]
20001360:	3303      	adds	r3, #3
20001362:	781b      	ldrb	r3, [r3, #0]
20001364:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
20001366:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
20001368:	60bb      	str	r3, [r7, #8]
      request += 4;
2000136a:	687b      	ldr	r3, [r7, #4]
2000136c:	3304      	adds	r3, #4
2000136e:	607b      	str	r3, [r7, #4]
      if ((request_value & DAP_TRANSFER_MATCH_MASK) != 0U) {
20001370:	69bb      	ldr	r3, [r7, #24]
20001372:	f003 0320 	and.w	r3, r3, #32
20001376:	2b00      	cmp	r3, #0
20001378:	d005      	beq.n	20001386 <DAP_JTAG_Transfer+0x406>
        // Write match mask
        DAP_Data.transfer.match_mask = data;
2000137a:	68bb      	ldr	r3, [r7, #8]
2000137c:	4a32      	ldr	r2, [pc, #200]	@ (20001448 <DAP_JTAG_Transfer+0x4c8>)
2000137e:	6153      	str	r3, [r2, #20]
        response_value = DAP_TRANSFER_OK;
20001380:	2301      	movs	r3, #1
20001382:	637b      	str	r3, [r7, #52]	@ 0x34
20001384:	e046      	b.n	20001414 <DAP_JTAG_Transfer+0x494>
      } else {
        // Select JTAG chain
        if (ir != request_ir) {
20001386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20001388:	697b      	ldr	r3, [r7, #20]
2000138a:	429a      	cmp	r2, r3
2000138c:	d004      	beq.n	20001398 <DAP_JTAG_Transfer+0x418>
          ir = request_ir;
2000138e:	697b      	ldr	r3, [r7, #20]
20001390:	627b      	str	r3, [r7, #36]	@ 0x24
          JTAG_IR(ir);
20001392:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001394:	f001 ff14 	bl	200031c0 <JTAG_IR>
        }
        // Write DP/AP register
        retry = DAP_Data.transfer.retry_count;
20001398:	4b2b      	ldr	r3, [pc, #172]	@ (20001448 <DAP_JTAG_Transfer+0x4c8>)
2000139a:	8a1b      	ldrh	r3, [r3, #16]
2000139c:	62bb      	str	r3, [r7, #40]	@ 0x28
        do {
          response_value = JTAG_Transfer(request_value, &data);
2000139e:	f107 0308 	add.w	r3, r7, #8
200013a2:	4619      	mov	r1, r3
200013a4:	69b8      	ldr	r0, [r7, #24]
200013a6:	f001 ff21 	bl	200031ec <JTAG_Transfer>
200013aa:	4603      	mov	r3, r0
200013ac:	637b      	str	r3, [r7, #52]	@ 0x34
        } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200013ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200013b0:	2b02      	cmp	r3, #2
200013b2:	d109      	bne.n	200013c8 <DAP_JTAG_Transfer+0x448>
200013b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200013b6:	1e5a      	subs	r2, r3, #1
200013b8:	62ba      	str	r2, [r7, #40]	@ 0x28
200013ba:	2b00      	cmp	r3, #0
200013bc:	d004      	beq.n	200013c8 <DAP_JTAG_Transfer+0x448>
200013be:	4b23      	ldr	r3, [pc, #140]	@ (2000144c <DAP_JTAG_Transfer+0x4cc>)
200013c0:	781b      	ldrb	r3, [r3, #0]
200013c2:	b2db      	uxtb	r3, r3
200013c4:	2b00      	cmp	r3, #0
200013c6:	d0ea      	beq.n	2000139e <DAP_JTAG_Transfer+0x41e>
        if (response_value != DAP_TRANSFER_OK) {
200013c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200013ca:	2b01      	cmp	r3, #1
200013cc:	d137      	bne.n	2000143e <DAP_JTAG_Transfer+0x4be>
          break;
        }
#if (TIMESTAMP_CLOCK != 0U)
        // Store Timestamp
        if ((request_value & DAP_TRANSFER_TIMESTAMP) != 0U) {
200013ce:	69bb      	ldr	r3, [r7, #24]
200013d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200013d4:	2b00      	cmp	r3, #0
200013d6:	d01d      	beq.n	20001414 <DAP_JTAG_Transfer+0x494>
          timestamp = DAP_Data.timestamp;
200013d8:	4b1b      	ldr	r3, [pc, #108]	@ (20001448 <DAP_JTAG_Transfer+0x4c8>)
200013da:	689b      	ldr	r3, [r3, #8]
200013dc:	613b      	str	r3, [r7, #16]
          *response++ = (uint8_t) timestamp;
200013de:	683b      	ldr	r3, [r7, #0]
200013e0:	1c5a      	adds	r2, r3, #1
200013e2:	603a      	str	r2, [r7, #0]
200013e4:	693a      	ldr	r2, [r7, #16]
200013e6:	b2d2      	uxtb	r2, r2
200013e8:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >>  8);
200013ea:	693b      	ldr	r3, [r7, #16]
200013ec:	0a19      	lsrs	r1, r3, #8
200013ee:	683b      	ldr	r3, [r7, #0]
200013f0:	1c5a      	adds	r2, r3, #1
200013f2:	603a      	str	r2, [r7, #0]
200013f4:	b2ca      	uxtb	r2, r1
200013f6:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 16);
200013f8:	693b      	ldr	r3, [r7, #16]
200013fa:	0c19      	lsrs	r1, r3, #16
200013fc:	683b      	ldr	r3, [r7, #0]
200013fe:	1c5a      	adds	r2, r3, #1
20001400:	603a      	str	r2, [r7, #0]
20001402:	b2ca      	uxtb	r2, r1
20001404:	701a      	strb	r2, [r3, #0]
          *response++ = (uint8_t)(timestamp >> 24);
20001406:	693b      	ldr	r3, [r7, #16]
20001408:	0e19      	lsrs	r1, r3, #24
2000140a:	683b      	ldr	r3, [r7, #0]
2000140c:	1c5a      	adds	r2, r3, #1
2000140e:	603a      	str	r2, [r7, #0]
20001410:	b2ca      	uxtb	r2, r1
20001412:	701a      	strb	r2, [r3, #0]
        }
#endif
      }
    }
    response_count++;
20001414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001416:	3301      	adds	r3, #1
20001418:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (DAP_TransferAbort) {
2000141a:	4b0c      	ldr	r3, [pc, #48]	@ (2000144c <DAP_JTAG_Transfer+0x4cc>)
2000141c:	781b      	ldrb	r3, [r3, #0]
2000141e:	b2db      	uxtb	r3, r3
20001420:	2b00      	cmp	r3, #0
20001422:	d10e      	bne.n	20001442 <DAP_JTAG_Transfer+0x4c2>
  while (request_count != 0) {
20001424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001426:	2b00      	cmp	r3, #0
20001428:	f47f add4 	bne.w	20000fd4 <DAP_JTAG_Transfer+0x54>
2000142c:	e029      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
          break;
2000142e:	bf00      	nop
20001430:	e027      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
          break;
20001432:	bf00      	nop
20001434:	e025      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
            break;
20001436:	bf00      	nop
20001438:	e023      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
          break;
2000143a:	bf00      	nop
2000143c:	e021      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
          break;
2000143e:	bf00      	nop
20001440:	e01f      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
      break;
20001442:	bf00      	nop
    }
  }

  while (request_count != 0) {
20001444:	e01d      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
20001446:	bf00      	nop
20001448:	2000c3d0 	.word	0x2000c3d0
2000144c:	2000c414 	.word	0x2000c414
    // Process canceled requests
    request_count--;
20001450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001452:	3b01      	subs	r3, #1
20001454:	63fb      	str	r3, [r7, #60]	@ 0x3c
    request_value = *request++;
20001456:	687b      	ldr	r3, [r7, #4]
20001458:	1c5a      	adds	r2, r3, #1
2000145a:	607a      	str	r2, [r7, #4]
2000145c:	781b      	ldrb	r3, [r3, #0]
2000145e:	61bb      	str	r3, [r7, #24]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
20001460:	69bb      	ldr	r3, [r7, #24]
20001462:	f003 0302 	and.w	r3, r3, #2
20001466:	2b00      	cmp	r3, #0
20001468:	d008      	beq.n	2000147c <DAP_JTAG_Transfer+0x4fc>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
2000146a:	69bb      	ldr	r3, [r7, #24]
2000146c:	f003 0310 	and.w	r3, r3, #16
20001470:	2b00      	cmp	r3, #0
20001472:	d006      	beq.n	20001482 <DAP_JTAG_Transfer+0x502>
        // Read with value match
        request += 4;
20001474:	687b      	ldr	r3, [r7, #4]
20001476:	3304      	adds	r3, #4
20001478:	607b      	str	r3, [r7, #4]
2000147a:	e002      	b.n	20001482 <DAP_JTAG_Transfer+0x502>
      }
    } else {
      // Write register
      request += 4;
2000147c:	687b      	ldr	r3, [r7, #4]
2000147e:	3304      	adds	r3, #4
20001480:	607b      	str	r3, [r7, #4]
  while (request_count != 0) {
20001482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001484:	2b00      	cmp	r3, #0
20001486:	d1e3      	bne.n	20001450 <DAP_JTAG_Transfer+0x4d0>
    }
  }

  if (response_value == DAP_TRANSFER_OK) {
20001488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000148a:	2b01      	cmp	r3, #1
2000148c:	d15a      	bne.n	20001544 <DAP_JTAG_Transfer+0x5c4>
    // Select JTAG chain
    if (ir != JTAG_DPACC) {
2000148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001490:	2b0a      	cmp	r3, #10
20001492:	d004      	beq.n	2000149e <DAP_JTAG_Transfer+0x51e>
      ir = JTAG_DPACC;
20001494:	230a      	movs	r3, #10
20001496:	627b      	str	r3, [r7, #36]	@ 0x24
      JTAG_IR(ir);
20001498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000149a:	f001 fe91 	bl	200031c0 <JTAG_IR>
    }
    if (post_read) {
2000149e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200014a0:	2b00      	cmp	r3, #0
200014a2:	d036      	beq.n	20001512 <DAP_JTAG_Transfer+0x592>
      // Read previous data
      retry = DAP_Data.transfer.retry_count;
200014a4:	4b33      	ldr	r3, [pc, #204]	@ (20001574 <DAP_JTAG_Transfer+0x5f4>)
200014a6:	8a1b      	ldrh	r3, [r3, #16]
200014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
200014aa:	f107 0308 	add.w	r3, r7, #8
200014ae:	4619      	mov	r1, r3
200014b0:	200e      	movs	r0, #14
200014b2:	f001 fe9b 	bl	200031ec <JTAG_Transfer>
200014b6:	4603      	mov	r3, r0
200014b8:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200014ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014bc:	2b02      	cmp	r3, #2
200014be:	d109      	bne.n	200014d4 <DAP_JTAG_Transfer+0x554>
200014c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200014c2:	1e5a      	subs	r2, r3, #1
200014c4:	62ba      	str	r2, [r7, #40]	@ 0x28
200014c6:	2b00      	cmp	r3, #0
200014c8:	d004      	beq.n	200014d4 <DAP_JTAG_Transfer+0x554>
200014ca:	4b2b      	ldr	r3, [pc, #172]	@ (20001578 <DAP_JTAG_Transfer+0x5f8>)
200014cc:	781b      	ldrb	r3, [r3, #0]
200014ce:	b2db      	uxtb	r3, r3
200014d0:	2b00      	cmp	r3, #0
200014d2:	d0ea      	beq.n	200014aa <DAP_JTAG_Transfer+0x52a>
      if (response_value != DAP_TRANSFER_OK) {
200014d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014d6:	2b01      	cmp	r3, #1
200014d8:	d136      	bne.n	20001548 <DAP_JTAG_Transfer+0x5c8>
        goto end;
      }
      // Store previous data
      *response++ = (uint8_t) data;
200014da:	68b9      	ldr	r1, [r7, #8]
200014dc:	683b      	ldr	r3, [r7, #0]
200014de:	1c5a      	adds	r2, r3, #1
200014e0:	603a      	str	r2, [r7, #0]
200014e2:	b2ca      	uxtb	r2, r1
200014e4:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
200014e6:	68bb      	ldr	r3, [r7, #8]
200014e8:	0a19      	lsrs	r1, r3, #8
200014ea:	683b      	ldr	r3, [r7, #0]
200014ec:	1c5a      	adds	r2, r3, #1
200014ee:	603a      	str	r2, [r7, #0]
200014f0:	b2ca      	uxtb	r2, r1
200014f2:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
200014f4:	68bb      	ldr	r3, [r7, #8]
200014f6:	0c19      	lsrs	r1, r3, #16
200014f8:	683b      	ldr	r3, [r7, #0]
200014fa:	1c5a      	adds	r2, r3, #1
200014fc:	603a      	str	r2, [r7, #0]
200014fe:	b2ca      	uxtb	r2, r1
20001500:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20001502:	68bb      	ldr	r3, [r7, #8]
20001504:	0e19      	lsrs	r1, r3, #24
20001506:	683b      	ldr	r3, [r7, #0]
20001508:	1c5a      	adds	r2, r3, #1
2000150a:	603a      	str	r2, [r7, #0]
2000150c:	b2ca      	uxtb	r2, r1
2000150e:	701a      	strb	r2, [r3, #0]
20001510:	e01b      	b.n	2000154a <DAP_JTAG_Transfer+0x5ca>
    } else {
      // Check last write
      retry = DAP_Data.transfer.retry_count;
20001512:	4b18      	ldr	r3, [pc, #96]	@ (20001574 <DAP_JTAG_Transfer+0x5f4>)
20001514:	8a1b      	ldrh	r3, [r3, #16]
20001516:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
20001518:	2100      	movs	r1, #0
2000151a:	200e      	movs	r0, #14
2000151c:	f001 fe66 	bl	200031ec <JTAG_Transfer>
20001520:	4603      	mov	r3, r0
20001522:	637b      	str	r3, [r7, #52]	@ 0x34
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001526:	2b02      	cmp	r3, #2
20001528:	d10c      	bne.n	20001544 <DAP_JTAG_Transfer+0x5c4>
2000152a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000152c:	1e5a      	subs	r2, r3, #1
2000152e:	62ba      	str	r2, [r7, #40]	@ 0x28
20001530:	2b00      	cmp	r3, #0
20001532:	d007      	beq.n	20001544 <DAP_JTAG_Transfer+0x5c4>
20001534:	4b10      	ldr	r3, [pc, #64]	@ (20001578 <DAP_JTAG_Transfer+0x5f8>)
20001536:	781b      	ldrb	r3, [r3, #0]
20001538:	b2db      	uxtb	r3, r3
2000153a:	2b00      	cmp	r3, #0
2000153c:	d0ec      	beq.n	20001518 <DAP_JTAG_Transfer+0x598>
    }
  }

end:
2000153e:	e001      	b.n	20001544 <DAP_JTAG_Transfer+0x5c4>
    goto end;
20001540:	bf00      	nop
20001542:	e002      	b.n	2000154a <DAP_JTAG_Transfer+0x5ca>
end:
20001544:	bf00      	nop
20001546:	e000      	b.n	2000154a <DAP_JTAG_Transfer+0x5ca>
        goto end;
20001548:	bf00      	nop
  *(response_head+0) = (uint8_t)response_count;
2000154a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000154c:	b2da      	uxtb	r2, r3
2000154e:	69fb      	ldr	r3, [r7, #28]
20001550:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)response_value;
20001552:	69fb      	ldr	r3, [r7, #28]
20001554:	3301      	adds	r3, #1
20001556:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20001558:	b2d2      	uxtb	r2, r2
2000155a:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | (uint32_t)(response - response_head));
2000155c:	687a      	ldr	r2, [r7, #4]
2000155e:	6a3b      	ldr	r3, [r7, #32]
20001560:	1ad3      	subs	r3, r2, r3
20001562:	041b      	lsls	r3, r3, #16
20001564:	6839      	ldr	r1, [r7, #0]
20001566:	69fa      	ldr	r2, [r7, #28]
20001568:	1a8a      	subs	r2, r1, r2
2000156a:	4313      	orrs	r3, r2
}
2000156c:	4618      	mov	r0, r3
2000156e:	3740      	adds	r7, #64	@ 0x40
20001570:	46bd      	mov	sp, r7
20001572:	bd80      	pop	{r7, pc}
20001574:	2000c3d0 	.word	0x2000c3d0
20001578:	2000c414 	.word	0x2000c414

2000157c <DAP_Dummy_Transfer>:
// Process Dummy Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Dummy_Transfer(const uint8_t *request, uint8_t *response) {
2000157c:	b480      	push	{r7}
2000157e:	b087      	sub	sp, #28
20001580:	af00      	add	r7, sp, #0
20001582:	6078      	str	r0, [r7, #4]
20001584:	6039      	str	r1, [r7, #0]
  const
  uint8_t  *request_head;
  uint32_t  request_count;
  uint32_t  request_value;

  request_head  =  request;
20001586:	687b      	ldr	r3, [r7, #4]
20001588:	613b      	str	r3, [r7, #16]

  request++;            // Ignore DAP index
2000158a:	687b      	ldr	r3, [r7, #4]
2000158c:	3301      	adds	r3, #1
2000158e:	607b      	str	r3, [r7, #4]

  request_count = *request++;
20001590:	687b      	ldr	r3, [r7, #4]
20001592:	1c5a      	adds	r2, r3, #1
20001594:	607a      	str	r2, [r7, #4]
20001596:	781b      	ldrb	r3, [r3, #0]
20001598:	617b      	str	r3, [r7, #20]

  for (; request_count != 0U; request_count--) {
2000159a:	e018      	b.n	200015ce <DAP_Dummy_Transfer+0x52>
    // Process dummy requests
    request_value = *request++;
2000159c:	687b      	ldr	r3, [r7, #4]
2000159e:	1c5a      	adds	r2, r3, #1
200015a0:	607a      	str	r2, [r7, #4]
200015a2:	781b      	ldrb	r3, [r3, #0]
200015a4:	60fb      	str	r3, [r7, #12]
    if ((request_value & DAP_TRANSFER_RnW) != 0U) {
200015a6:	68fb      	ldr	r3, [r7, #12]
200015a8:	f003 0302 	and.w	r3, r3, #2
200015ac:	2b00      	cmp	r3, #0
200015ae:	d008      	beq.n	200015c2 <DAP_Dummy_Transfer+0x46>
      // Read register
      if ((request_value & DAP_TRANSFER_MATCH_VALUE) != 0U) {
200015b0:	68fb      	ldr	r3, [r7, #12]
200015b2:	f003 0310 	and.w	r3, r3, #16
200015b6:	2b00      	cmp	r3, #0
200015b8:	d006      	beq.n	200015c8 <DAP_Dummy_Transfer+0x4c>
        // Read with value match
        request += 4;
200015ba:	687b      	ldr	r3, [r7, #4]
200015bc:	3304      	adds	r3, #4
200015be:	607b      	str	r3, [r7, #4]
200015c0:	e002      	b.n	200015c8 <DAP_Dummy_Transfer+0x4c>
      }
    } else {
      // Write register
      request += 4;
200015c2:	687b      	ldr	r3, [r7, #4]
200015c4:	3304      	adds	r3, #4
200015c6:	607b      	str	r3, [r7, #4]
  for (; request_count != 0U; request_count--) {
200015c8:	697b      	ldr	r3, [r7, #20]
200015ca:	3b01      	subs	r3, #1
200015cc:	617b      	str	r3, [r7, #20]
200015ce:	697b      	ldr	r3, [r7, #20]
200015d0:	2b00      	cmp	r3, #0
200015d2:	d1e3      	bne.n	2000159c <DAP_Dummy_Transfer+0x20>
    }
  }

  *(response+0) = 0U;   // Response count
200015d4:	683b      	ldr	r3, [r7, #0]
200015d6:	2200      	movs	r2, #0
200015d8:	701a      	strb	r2, [r3, #0]
  *(response+1) = 0U;   // Response value
200015da:	683b      	ldr	r3, [r7, #0]
200015dc:	3301      	adds	r3, #1
200015de:	2200      	movs	r2, #0
200015e0:	701a      	strb	r2, [r3, #0]

  return (((uint32_t)(request - request_head) << 16) | 2U);
200015e2:	687a      	ldr	r2, [r7, #4]
200015e4:	693b      	ldr	r3, [r7, #16]
200015e6:	1ad3      	subs	r3, r2, r3
200015e8:	041b      	lsls	r3, r3, #16
200015ea:	f043 0302 	orr.w	r3, r3, #2
}
200015ee:	4618      	mov	r0, r3
200015f0:	371c      	adds	r7, #28
200015f2:	46bd      	mov	sp, r7
200015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200015f8:	4770      	bx	lr
	...

200015fc <DAP_Transfer>:
// Process Transfer command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_Transfer(const uint8_t *request, uint8_t *response) {
200015fc:	b580      	push	{r7, lr}
200015fe:	b084      	sub	sp, #16
20001600:	af00      	add	r7, sp, #0
20001602:	6078      	str	r0, [r7, #4]
20001604:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
20001606:	4b0a      	ldr	r3, [pc, #40]	@ (20001630 <DAP_Transfer+0x34>)
20001608:	781b      	ldrb	r3, [r3, #0]
2000160a:	2b02      	cmp	r3, #2
2000160c:	d105      	bne.n	2000161a <DAP_Transfer+0x1e>
      num = DAP_SWD_Transfer(request, response);
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_Transfer(request, response);
2000160e:	6839      	ldr	r1, [r7, #0]
20001610:	6878      	ldr	r0, [r7, #4]
20001612:	f7ff fcb5 	bl	20000f80 <DAP_JTAG_Transfer>
20001616:	60f8      	str	r0, [r7, #12]
      break;
20001618:	e005      	b.n	20001626 <DAP_Transfer+0x2a>
#endif
    default:
      num = DAP_Dummy_Transfer(request, response);
2000161a:	6839      	ldr	r1, [r7, #0]
2000161c:	6878      	ldr	r0, [r7, #4]
2000161e:	f7ff ffad 	bl	2000157c <DAP_Dummy_Transfer>
20001622:	60f8      	str	r0, [r7, #12]
      break;
20001624:	bf00      	nop
  }

  return (num);
20001626:	68fb      	ldr	r3, [r7, #12]
}
20001628:	4618      	mov	r0, r3
2000162a:	3710      	adds	r7, #16
2000162c:	46bd      	mov	sp, r7
2000162e:	bd80      	pop	{r7, pc}
20001630:	2000c3d0 	.word	0x2000c3d0

20001634 <DAP_JTAG_TransferBlock>:
// Process JTAG Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_TransferBlock(const uint8_t *request, uint8_t *response) {
20001634:	b580      	push	{r7, lr}
20001636:	b08a      	sub	sp, #40	@ 0x28
20001638:	af00      	add	r7, sp, #0
2000163a:	6078      	str	r0, [r7, #4]
2000163c:	6039      	str	r1, [r7, #0]
  uint8_t  *response_head;
  uint32_t  retry;
  uint32_t  data;
  uint32_t  ir;

  response_count = 0U;
2000163e:	2300      	movs	r3, #0
20001640:	61fb      	str	r3, [r7, #28]
  response_value = 0U;
20001642:	2300      	movs	r3, #0
20001644:	61bb      	str	r3, [r7, #24]
  response_head  = response;
20001646:	683b      	ldr	r3, [r7, #0]
20001648:	613b      	str	r3, [r7, #16]
  response      += 3;
2000164a:	683b      	ldr	r3, [r7, #0]
2000164c:	3303      	adds	r3, #3
2000164e:	603b      	str	r3, [r7, #0]

  DAP_TransferAbort = 0U;
20001650:	4b89      	ldr	r3, [pc, #548]	@ (20001878 <DAP_JTAG_TransferBlock+0x244>)
20001652:	2200      	movs	r2, #0
20001654:	701a      	strb	r2, [r3, #0]

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request++;
20001656:	687b      	ldr	r3, [r7, #4]
20001658:	1c5a      	adds	r2, r3, #1
2000165a:	607a      	str	r2, [r7, #4]
2000165c:	781a      	ldrb	r2, [r3, #0]
2000165e:	4b87      	ldr	r3, [pc, #540]	@ (2000187c <DAP_JTAG_TransferBlock+0x248>)
20001660:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20001662:	4b86      	ldr	r3, [pc, #536]	@ (2000187c <DAP_JTAG_TransferBlock+0x248>)
20001664:	7e5a      	ldrb	r2, [r3, #25]
20001666:	4b85      	ldr	r3, [pc, #532]	@ (2000187c <DAP_JTAG_TransferBlock+0x248>)
20001668:	7e1b      	ldrb	r3, [r3, #24]
2000166a:	429a      	cmp	r2, r3
2000166c:	f080 80e2 	bcs.w	20001834 <DAP_JTAG_TransferBlock+0x200>
    goto end;
  }

  request_count = (uint32_t)(*(request+0) << 0) |
20001670:	687b      	ldr	r3, [r7, #4]
20001672:	781b      	ldrb	r3, [r3, #0]
20001674:	461a      	mov	r2, r3
                  (uint32_t)(*(request+1) << 8);
20001676:	687b      	ldr	r3, [r7, #4]
20001678:	3301      	adds	r3, #1
2000167a:	781b      	ldrb	r3, [r3, #0]
2000167c:	021b      	lsls	r3, r3, #8
  request_count = (uint32_t)(*(request+0) << 0) |
2000167e:	4313      	orrs	r3, r2
20001680:	627b      	str	r3, [r7, #36]	@ 0x24
  request += 2;
20001682:	687b      	ldr	r3, [r7, #4]
20001684:	3302      	adds	r3, #2
20001686:	607b      	str	r3, [r7, #4]
  if (request_count == 0U) {
20001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000168a:	2b00      	cmp	r3, #0
2000168c:	f000 80d4 	beq.w	20001838 <DAP_JTAG_TransferBlock+0x204>
    goto end;
  }

  request_value = *request++;
20001690:	687b      	ldr	r3, [r7, #4]
20001692:	1c5a      	adds	r2, r3, #1
20001694:	607a      	str	r2, [r7, #4]
20001696:	781b      	ldrb	r3, [r3, #0]
20001698:	623b      	str	r3, [r7, #32]

  // Select JTAG chain
  ir = (request_value & DAP_TRANSFER_APnDP) ? JTAG_APACC : JTAG_DPACC;
2000169a:	6a3b      	ldr	r3, [r7, #32]
2000169c:	f003 0301 	and.w	r3, r3, #1
200016a0:	2b00      	cmp	r3, #0
200016a2:	d001      	beq.n	200016a8 <DAP_JTAG_TransferBlock+0x74>
200016a4:	230b      	movs	r3, #11
200016a6:	e000      	b.n	200016aa <DAP_JTAG_TransferBlock+0x76>
200016a8:	230a      	movs	r3, #10
200016aa:	60fb      	str	r3, [r7, #12]
  JTAG_IR(ir);
200016ac:	68f8      	ldr	r0, [r7, #12]
200016ae:	f001 fd87 	bl	200031c0 <JTAG_IR>

  if ((request_value & DAP_TRANSFER_RnW) != 0U) {
200016b2:	6a3b      	ldr	r3, [r7, #32]
200016b4:	f003 0302 	and.w	r3, r3, #2
200016b8:	2b00      	cmp	r3, #0
200016ba:	f000 8099 	beq.w	200017f0 <DAP_JTAG_TransferBlock+0x1bc>
    // Post read
    retry = DAP_Data.transfer.retry_count;
200016be:	4b6f      	ldr	r3, [pc, #444]	@ (2000187c <DAP_JTAG_TransferBlock+0x248>)
200016c0:	8a1b      	ldrh	r3, [r3, #16]
200016c2:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(request_value, NULL);
200016c4:	2100      	movs	r1, #0
200016c6:	6a38      	ldr	r0, [r7, #32]
200016c8:	f001 fd90 	bl	200031ec <JTAG_Transfer>
200016cc:	4603      	mov	r3, r0
200016ce:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200016d0:	69bb      	ldr	r3, [r7, #24]
200016d2:	2b02      	cmp	r3, #2
200016d4:	d109      	bne.n	200016ea <DAP_JTAG_TransferBlock+0xb6>
200016d6:	697b      	ldr	r3, [r7, #20]
200016d8:	1e5a      	subs	r2, r3, #1
200016da:	617a      	str	r2, [r7, #20]
200016dc:	2b00      	cmp	r3, #0
200016de:	d004      	beq.n	200016ea <DAP_JTAG_TransferBlock+0xb6>
200016e0:	4b65      	ldr	r3, [pc, #404]	@ (20001878 <DAP_JTAG_TransferBlock+0x244>)
200016e2:	781b      	ldrb	r3, [r3, #0]
200016e4:	b2db      	uxtb	r3, r3
200016e6:	2b00      	cmp	r3, #0
200016e8:	d0ec      	beq.n	200016c4 <DAP_JTAG_TransferBlock+0x90>
    if (response_value != DAP_TRANSFER_OK) {
200016ea:	69bb      	ldr	r3, [r7, #24]
200016ec:	2b01      	cmp	r3, #1
200016ee:	f040 80a5 	bne.w	2000183c <DAP_JTAG_TransferBlock+0x208>
      goto end;
    }
    // Read register block
    while (request_count--) {
200016f2:	e043      	b.n	2000177c <DAP_JTAG_TransferBlock+0x148>
      // Read DP/AP register
      if (request_count == 0U) {
200016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200016f6:	2b00      	cmp	r3, #0
200016f8:	d107      	bne.n	2000170a <DAP_JTAG_TransferBlock+0xd6>
        // Last read
        if (ir != JTAG_DPACC) {
200016fa:	68fb      	ldr	r3, [r7, #12]
200016fc:	2b0a      	cmp	r3, #10
200016fe:	d002      	beq.n	20001706 <DAP_JTAG_TransferBlock+0xd2>
          JTAG_IR(JTAG_DPACC);
20001700:	200a      	movs	r0, #10
20001702:	f001 fd5d 	bl	200031c0 <JTAG_IR>
        }
        request_value = DP_RDBUFF | DAP_TRANSFER_RnW;
20001706:	230e      	movs	r3, #14
20001708:	623b      	str	r3, [r7, #32]
      }
      retry = DAP_Data.transfer.retry_count;
2000170a:	4b5c      	ldr	r3, [pc, #368]	@ (2000187c <DAP_JTAG_TransferBlock+0x248>)
2000170c:	8a1b      	ldrh	r3, [r3, #16]
2000170e:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
20001710:	f107 0308 	add.w	r3, r7, #8
20001714:	4619      	mov	r1, r3
20001716:	6a38      	ldr	r0, [r7, #32]
20001718:	f001 fd68 	bl	200031ec <JTAG_Transfer>
2000171c:	4603      	mov	r3, r0
2000171e:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001720:	69bb      	ldr	r3, [r7, #24]
20001722:	2b02      	cmp	r3, #2
20001724:	d109      	bne.n	2000173a <DAP_JTAG_TransferBlock+0x106>
20001726:	697b      	ldr	r3, [r7, #20]
20001728:	1e5a      	subs	r2, r3, #1
2000172a:	617a      	str	r2, [r7, #20]
2000172c:	2b00      	cmp	r3, #0
2000172e:	d004      	beq.n	2000173a <DAP_JTAG_TransferBlock+0x106>
20001730:	4b51      	ldr	r3, [pc, #324]	@ (20001878 <DAP_JTAG_TransferBlock+0x244>)
20001732:	781b      	ldrb	r3, [r3, #0]
20001734:	b2db      	uxtb	r3, r3
20001736:	2b00      	cmp	r3, #0
20001738:	d0ea      	beq.n	20001710 <DAP_JTAG_TransferBlock+0xdc>
      if (response_value != DAP_TRANSFER_OK) {
2000173a:	69bb      	ldr	r3, [r7, #24]
2000173c:	2b01      	cmp	r3, #1
2000173e:	d17f      	bne.n	20001840 <DAP_JTAG_TransferBlock+0x20c>
        goto end;
      }
      // Store data
      *response++ = (uint8_t) data;
20001740:	68b9      	ldr	r1, [r7, #8]
20001742:	683b      	ldr	r3, [r7, #0]
20001744:	1c5a      	adds	r2, r3, #1
20001746:	603a      	str	r2, [r7, #0]
20001748:	b2ca      	uxtb	r2, r1
2000174a:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >>  8);
2000174c:	68bb      	ldr	r3, [r7, #8]
2000174e:	0a19      	lsrs	r1, r3, #8
20001750:	683b      	ldr	r3, [r7, #0]
20001752:	1c5a      	adds	r2, r3, #1
20001754:	603a      	str	r2, [r7, #0]
20001756:	b2ca      	uxtb	r2, r1
20001758:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 16);
2000175a:	68bb      	ldr	r3, [r7, #8]
2000175c:	0c19      	lsrs	r1, r3, #16
2000175e:	683b      	ldr	r3, [r7, #0]
20001760:	1c5a      	adds	r2, r3, #1
20001762:	603a      	str	r2, [r7, #0]
20001764:	b2ca      	uxtb	r2, r1
20001766:	701a      	strb	r2, [r3, #0]
      *response++ = (uint8_t)(data >> 24);
20001768:	68bb      	ldr	r3, [r7, #8]
2000176a:	0e19      	lsrs	r1, r3, #24
2000176c:	683b      	ldr	r3, [r7, #0]
2000176e:	1c5a      	adds	r2, r3, #1
20001770:	603a      	str	r2, [r7, #0]
20001772:	b2ca      	uxtb	r2, r1
20001774:	701a      	strb	r2, [r3, #0]
      response_count++;
20001776:	69fb      	ldr	r3, [r7, #28]
20001778:	3301      	adds	r3, #1
2000177a:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
2000177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000177e:	1e5a      	subs	r2, r3, #1
20001780:	627a      	str	r2, [r7, #36]	@ 0x24
20001782:	2b00      	cmp	r3, #0
20001784:	d1b6      	bne.n	200016f4 <DAP_JTAG_TransferBlock+0xc0>
20001786:	e060      	b.n	2000184a <DAP_JTAG_TransferBlock+0x216>
    }
  } else {
    // Write register block
    while (request_count--) {
      // Load data
      data = (uint32_t)(*(request+0) <<  0) |
20001788:	687b      	ldr	r3, [r7, #4]
2000178a:	781b      	ldrb	r3, [r3, #0]
2000178c:	461a      	mov	r2, r3
             (uint32_t)(*(request+1) <<  8) |
2000178e:	687b      	ldr	r3, [r7, #4]
20001790:	3301      	adds	r3, #1
20001792:	781b      	ldrb	r3, [r3, #0]
20001794:	021b      	lsls	r3, r3, #8
      data = (uint32_t)(*(request+0) <<  0) |
20001796:	431a      	orrs	r2, r3
             (uint32_t)(*(request+2) << 16) |
20001798:	687b      	ldr	r3, [r7, #4]
2000179a:	3302      	adds	r3, #2
2000179c:	781b      	ldrb	r3, [r3, #0]
2000179e:	041b      	lsls	r3, r3, #16
             (uint32_t)(*(request+1) <<  8) |
200017a0:	431a      	orrs	r2, r3
             (uint32_t)(*(request+3) << 24);
200017a2:	687b      	ldr	r3, [r7, #4]
200017a4:	3303      	adds	r3, #3
200017a6:	781b      	ldrb	r3, [r3, #0]
200017a8:	061b      	lsls	r3, r3, #24
             (uint32_t)(*(request+2) << 16) |
200017aa:	4313      	orrs	r3, r2
      data = (uint32_t)(*(request+0) <<  0) |
200017ac:	60bb      	str	r3, [r7, #8]
      request += 4;
200017ae:	687b      	ldr	r3, [r7, #4]
200017b0:	3304      	adds	r3, #4
200017b2:	607b      	str	r3, [r7, #4]
      // Write DP/AP register
      retry = DAP_Data.transfer.retry_count;
200017b4:	4b31      	ldr	r3, [pc, #196]	@ (2000187c <DAP_JTAG_TransferBlock+0x248>)
200017b6:	8a1b      	ldrh	r3, [r3, #16]
200017b8:	617b      	str	r3, [r7, #20]
      do {
        response_value = JTAG_Transfer(request_value, &data);
200017ba:	f107 0308 	add.w	r3, r7, #8
200017be:	4619      	mov	r1, r3
200017c0:	6a38      	ldr	r0, [r7, #32]
200017c2:	f001 fd13 	bl	200031ec <JTAG_Transfer>
200017c6:	4603      	mov	r3, r0
200017c8:	61bb      	str	r3, [r7, #24]
      } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
200017ca:	69bb      	ldr	r3, [r7, #24]
200017cc:	2b02      	cmp	r3, #2
200017ce:	d109      	bne.n	200017e4 <DAP_JTAG_TransferBlock+0x1b0>
200017d0:	697b      	ldr	r3, [r7, #20]
200017d2:	1e5a      	subs	r2, r3, #1
200017d4:	617a      	str	r2, [r7, #20]
200017d6:	2b00      	cmp	r3, #0
200017d8:	d004      	beq.n	200017e4 <DAP_JTAG_TransferBlock+0x1b0>
200017da:	4b27      	ldr	r3, [pc, #156]	@ (20001878 <DAP_JTAG_TransferBlock+0x244>)
200017dc:	781b      	ldrb	r3, [r3, #0]
200017de:	b2db      	uxtb	r3, r3
200017e0:	2b00      	cmp	r3, #0
200017e2:	d0ea      	beq.n	200017ba <DAP_JTAG_TransferBlock+0x186>
      if (response_value != DAP_TRANSFER_OK) {
200017e4:	69bb      	ldr	r3, [r7, #24]
200017e6:	2b01      	cmp	r3, #1
200017e8:	d12c      	bne.n	20001844 <DAP_JTAG_TransferBlock+0x210>
        goto end;
      }
      response_count++;
200017ea:	69fb      	ldr	r3, [r7, #28]
200017ec:	3301      	adds	r3, #1
200017ee:	61fb      	str	r3, [r7, #28]
    while (request_count--) {
200017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200017f2:	1e5a      	subs	r2, r3, #1
200017f4:	627a      	str	r2, [r7, #36]	@ 0x24
200017f6:	2b00      	cmp	r3, #0
200017f8:	d1c6      	bne.n	20001788 <DAP_JTAG_TransferBlock+0x154>
    }
    // Check last write
    if (ir != JTAG_DPACC) {
200017fa:	68fb      	ldr	r3, [r7, #12]
200017fc:	2b0a      	cmp	r3, #10
200017fe:	d002      	beq.n	20001806 <DAP_JTAG_TransferBlock+0x1d2>
      JTAG_IR(JTAG_DPACC);
20001800:	200a      	movs	r0, #10
20001802:	f001 fcdd 	bl	200031c0 <JTAG_IR>
    }
    retry = DAP_Data.transfer.retry_count;
20001806:	4b1d      	ldr	r3, [pc, #116]	@ (2000187c <DAP_JTAG_TransferBlock+0x248>)
20001808:	8a1b      	ldrh	r3, [r3, #16]
2000180a:	617b      	str	r3, [r7, #20]
    do {
      response_value = JTAG_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
2000180c:	2100      	movs	r1, #0
2000180e:	200e      	movs	r0, #14
20001810:	f001 fcec 	bl	200031ec <JTAG_Transfer>
20001814:	4603      	mov	r3, r0
20001816:	61bb      	str	r3, [r7, #24]
    } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
20001818:	69bb      	ldr	r3, [r7, #24]
2000181a:	2b02      	cmp	r3, #2
2000181c:	d114      	bne.n	20001848 <DAP_JTAG_TransferBlock+0x214>
2000181e:	697b      	ldr	r3, [r7, #20]
20001820:	1e5a      	subs	r2, r3, #1
20001822:	617a      	str	r2, [r7, #20]
20001824:	2b00      	cmp	r3, #0
20001826:	d00f      	beq.n	20001848 <DAP_JTAG_TransferBlock+0x214>
20001828:	4b13      	ldr	r3, [pc, #76]	@ (20001878 <DAP_JTAG_TransferBlock+0x244>)
2000182a:	781b      	ldrb	r3, [r3, #0]
2000182c:	b2db      	uxtb	r3, r3
2000182e:	2b00      	cmp	r3, #0
20001830:	d0ec      	beq.n	2000180c <DAP_JTAG_TransferBlock+0x1d8>
  }

end:
20001832:	e009      	b.n	20001848 <DAP_JTAG_TransferBlock+0x214>
    goto end;
20001834:	bf00      	nop
20001836:	e008      	b.n	2000184a <DAP_JTAG_TransferBlock+0x216>
    goto end;
20001838:	bf00      	nop
2000183a:	e006      	b.n	2000184a <DAP_JTAG_TransferBlock+0x216>
      goto end;
2000183c:	bf00      	nop
2000183e:	e004      	b.n	2000184a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20001840:	bf00      	nop
20001842:	e002      	b.n	2000184a <DAP_JTAG_TransferBlock+0x216>
        goto end;
20001844:	bf00      	nop
20001846:	e000      	b.n	2000184a <DAP_JTAG_TransferBlock+0x216>
end:
20001848:	bf00      	nop
  *(response_head+0) = (uint8_t)(response_count >> 0);
2000184a:	69fb      	ldr	r3, [r7, #28]
2000184c:	b2da      	uxtb	r2, r3
2000184e:	693b      	ldr	r3, [r7, #16]
20001850:	701a      	strb	r2, [r3, #0]
  *(response_head+1) = (uint8_t)(response_count >> 8);
20001852:	69fb      	ldr	r3, [r7, #28]
20001854:	0a1a      	lsrs	r2, r3, #8
20001856:	693b      	ldr	r3, [r7, #16]
20001858:	3301      	adds	r3, #1
2000185a:	b2d2      	uxtb	r2, r2
2000185c:	701a      	strb	r2, [r3, #0]
  *(response_head+2) = (uint8_t) response_value;
2000185e:	693b      	ldr	r3, [r7, #16]
20001860:	3302      	adds	r3, #2
20001862:	69ba      	ldr	r2, [r7, #24]
20001864:	b2d2      	uxtb	r2, r2
20001866:	701a      	strb	r2, [r3, #0]

  return ((uint32_t)(response - response_head));
20001868:	683a      	ldr	r2, [r7, #0]
2000186a:	693b      	ldr	r3, [r7, #16]
2000186c:	1ad3      	subs	r3, r2, r3
}
2000186e:	4618      	mov	r0, r3
20001870:	3728      	adds	r7, #40	@ 0x28
20001872:	46bd      	mov	sp, r7
20001874:	bd80      	pop	{r7, pc}
20001876:	bf00      	nop
20001878:	2000c414 	.word	0x2000c414
2000187c:	2000c3d0 	.word	0x2000c3d0

20001880 <DAP_TransferBlock>:
// Process Transfer Block command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_TransferBlock(const uint8_t *request, uint8_t *response) {
20001880:	b580      	push	{r7, lr}
20001882:	b084      	sub	sp, #16
20001884:	af00      	add	r7, sp, #0
20001886:	6078      	str	r0, [r7, #4]
20001888:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
2000188a:	4b1c      	ldr	r3, [pc, #112]	@ (200018fc <DAP_TransferBlock+0x7c>)
2000188c:	781b      	ldrb	r3, [r3, #0]
2000188e:	2b02      	cmp	r3, #2
20001890:	d105      	bne.n	2000189e <DAP_TransferBlock+0x1e>
      num = DAP_SWD_TransferBlock (request, response);
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_TransferBlock(request, response);
20001892:	6839      	ldr	r1, [r7, #0]
20001894:	6878      	ldr	r0, [r7, #4]
20001896:	f7ff fecd 	bl	20001634 <DAP_JTAG_TransferBlock>
2000189a:	60f8      	str	r0, [r7, #12]
      break;
2000189c:	e00d      	b.n	200018ba <DAP_TransferBlock+0x3a>
#endif
    default:
      *(response+0) = 0U;       // Response count [7:0]
2000189e:	683b      	ldr	r3, [r7, #0]
200018a0:	2200      	movs	r2, #0
200018a2:	701a      	strb	r2, [r3, #0]
      *(response+1) = 0U;       // Response count[15:8]
200018a4:	683b      	ldr	r3, [r7, #0]
200018a6:	3301      	adds	r3, #1
200018a8:	2200      	movs	r2, #0
200018aa:	701a      	strb	r2, [r3, #0]
      *(response+2) = 0U;       // Response value
200018ac:	683b      	ldr	r3, [r7, #0]
200018ae:	3302      	adds	r3, #2
200018b0:	2200      	movs	r2, #0
200018b2:	701a      	strb	r2, [r3, #0]
      num = 3U;
200018b4:	2303      	movs	r3, #3
200018b6:	60fb      	str	r3, [r7, #12]
      break;
200018b8:	bf00      	nop
  }

  if ((*(request+3) & DAP_TRANSFER_RnW) != 0U) {
200018ba:	687b      	ldr	r3, [r7, #4]
200018bc:	3303      	adds	r3, #3
200018be:	781b      	ldrb	r3, [r3, #0]
200018c0:	f003 0302 	and.w	r3, r3, #2
200018c4:	2b00      	cmp	r3, #0
200018c6:	d004      	beq.n	200018d2 <DAP_TransferBlock+0x52>
    // Read register block
    num |=  4U << 16;
200018c8:	68fb      	ldr	r3, [r7, #12]
200018ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200018ce:	60fb      	str	r3, [r7, #12]
200018d0:	e00e      	b.n	200018f0 <DAP_TransferBlock+0x70>
  } else {
    // Write register block
    num |= (4U + (((uint32_t)(*(request+1)) | (uint32_t)(*(request+2) << 8)) * 4)) << 16;
200018d2:	687b      	ldr	r3, [r7, #4]
200018d4:	3301      	adds	r3, #1
200018d6:	781b      	ldrb	r3, [r3, #0]
200018d8:	461a      	mov	r2, r3
200018da:	687b      	ldr	r3, [r7, #4]
200018dc:	3302      	adds	r3, #2
200018de:	781b      	ldrb	r3, [r3, #0]
200018e0:	021b      	lsls	r3, r3, #8
200018e2:	4313      	orrs	r3, r2
200018e4:	3301      	adds	r3, #1
200018e6:	009b      	lsls	r3, r3, #2
200018e8:	041b      	lsls	r3, r3, #16
200018ea:	68fa      	ldr	r2, [r7, #12]
200018ec:	4313      	orrs	r3, r2
200018ee:	60fb      	str	r3, [r7, #12]
  }

  return (num);
200018f0:	68fb      	ldr	r3, [r7, #12]
}
200018f2:	4618      	mov	r0, r3
200018f4:	3710      	adds	r7, #16
200018f6:	46bd      	mov	sp, r7
200018f8:	bd80      	pop	{r7, pc}
200018fa:	bf00      	nop
200018fc:	2000c3d0 	.word	0x2000c3d0

20001900 <DAP_JTAG_WriteAbort>:
// Process JTAG Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response
#if (DAP_JTAG != 0)
static uint32_t DAP_JTAG_WriteAbort(const uint8_t *request, uint8_t *response) {
20001900:	b580      	push	{r7, lr}
20001902:	b084      	sub	sp, #16
20001904:	af00      	add	r7, sp, #0
20001906:	6078      	str	r0, [r7, #4]
20001908:	6039      	str	r1, [r7, #0]
  uint32_t data;

  // Device index (JTAP TAP)
  DAP_Data.jtag_dev.index = *request;
2000190a:	687b      	ldr	r3, [r7, #4]
2000190c:	781a      	ldrb	r2, [r3, #0]
2000190e:	4b17      	ldr	r3, [pc, #92]	@ (2000196c <DAP_JTAG_WriteAbort+0x6c>)
20001910:	765a      	strb	r2, [r3, #25]
  if (DAP_Data.jtag_dev.index >= DAP_Data.jtag_dev.count) {
20001912:	4b16      	ldr	r3, [pc, #88]	@ (2000196c <DAP_JTAG_WriteAbort+0x6c>)
20001914:	7e5a      	ldrb	r2, [r3, #25]
20001916:	4b15      	ldr	r3, [pc, #84]	@ (2000196c <DAP_JTAG_WriteAbort+0x6c>)
20001918:	7e1b      	ldrb	r3, [r3, #24]
2000191a:	429a      	cmp	r2, r3
2000191c:	d304      	bcc.n	20001928 <DAP_JTAG_WriteAbort+0x28>
    *response = DAP_ERROR;
2000191e:	683b      	ldr	r3, [r7, #0]
20001920:	22ff      	movs	r2, #255	@ 0xff
20001922:	701a      	strb	r2, [r3, #0]
    return (1U);
20001924:	2301      	movs	r3, #1
20001926:	e01d      	b.n	20001964 <DAP_JTAG_WriteAbort+0x64>
  }

  // Select JTAG chain
  JTAG_IR(JTAG_ABORT);
20001928:	2008      	movs	r0, #8
2000192a:	f001 fc49 	bl	200031c0 <JTAG_IR>

  // Load data
  data = (uint32_t)(*(request+1) <<  0) |
2000192e:	687b      	ldr	r3, [r7, #4]
20001930:	3301      	adds	r3, #1
20001932:	781b      	ldrb	r3, [r3, #0]
20001934:	461a      	mov	r2, r3
         (uint32_t)(*(request+2) <<  8) |
20001936:	687b      	ldr	r3, [r7, #4]
20001938:	3302      	adds	r3, #2
2000193a:	781b      	ldrb	r3, [r3, #0]
2000193c:	021b      	lsls	r3, r3, #8
  data = (uint32_t)(*(request+1) <<  0) |
2000193e:	431a      	orrs	r2, r3
         (uint32_t)(*(request+3) << 16) |
20001940:	687b      	ldr	r3, [r7, #4]
20001942:	3303      	adds	r3, #3
20001944:	781b      	ldrb	r3, [r3, #0]
20001946:	041b      	lsls	r3, r3, #16
         (uint32_t)(*(request+2) <<  8) |
20001948:	431a      	orrs	r2, r3
         (uint32_t)(*(request+4) << 24);
2000194a:	687b      	ldr	r3, [r7, #4]
2000194c:	3304      	adds	r3, #4
2000194e:	781b      	ldrb	r3, [r3, #0]
20001950:	061b      	lsls	r3, r3, #24
  data = (uint32_t)(*(request+1) <<  0) |
20001952:	4313      	orrs	r3, r2
20001954:	60fb      	str	r3, [r7, #12]

  // Write Abort register
  JTAG_WriteAbort(data);
20001956:	68f8      	ldr	r0, [r7, #12]
20001958:	f001 faca 	bl	20002ef0 <JTAG_WriteAbort>

  *response = DAP_OK;
2000195c:	683b      	ldr	r3, [r7, #0]
2000195e:	2200      	movs	r2, #0
20001960:	701a      	strb	r2, [r3, #0]
  return (1U);
20001962:	2301      	movs	r3, #1
}
20001964:	4618      	mov	r0, r3
20001966:	3710      	adds	r7, #16
20001968:	46bd      	mov	sp, r7
2000196a:	bd80      	pop	{r7, pc}
2000196c:	2000c3d0 	.word	0x2000c3d0

20001970 <DAP_WriteAbort>:
// Process Write ABORT command and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
static uint32_t DAP_WriteAbort(const uint8_t *request, uint8_t *response) {
20001970:	b580      	push	{r7, lr}
20001972:	b084      	sub	sp, #16
20001974:	af00      	add	r7, sp, #0
20001976:	6078      	str	r0, [r7, #4]
20001978:	6039      	str	r1, [r7, #0]
  uint32_t num;

  switch (DAP_Data.debug_port) {
2000197a:	4b0b      	ldr	r3, [pc, #44]	@ (200019a8 <DAP_WriteAbort+0x38>)
2000197c:	781b      	ldrb	r3, [r3, #0]
2000197e:	2b02      	cmp	r3, #2
20001980:	d105      	bne.n	2000198e <DAP_WriteAbort+0x1e>
      num = DAP_SWD_WriteAbort (request, response);
      break;
#endif
#if (DAP_JTAG != 0)
    case DAP_PORT_JTAG:
      num = DAP_JTAG_WriteAbort(request, response);
20001982:	6839      	ldr	r1, [r7, #0]
20001984:	6878      	ldr	r0, [r7, #4]
20001986:	f7ff ffbb 	bl	20001900 <DAP_JTAG_WriteAbort>
2000198a:	60f8      	str	r0, [r7, #12]
      break;
2000198c:	e005      	b.n	2000199a <DAP_WriteAbort+0x2a>
#endif
    default:
      *response = DAP_ERROR;
2000198e:	683b      	ldr	r3, [r7, #0]
20001990:	22ff      	movs	r2, #255	@ 0xff
20001992:	701a      	strb	r2, [r3, #0]
      num = 1U;
20001994:	2301      	movs	r3, #1
20001996:	60fb      	str	r3, [r7, #12]
      break;
20001998:	bf00      	nop
  }
  return ((5U << 16) | num);
2000199a:	68fb      	ldr	r3, [r7, #12]
2000199c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
}
200019a0:	4618      	mov	r0, r3
200019a2:	3710      	adds	r7, #16
200019a4:	46bd      	mov	sp, r7
200019a6:	bd80      	pop	{r7, pc}
200019a8:	2000c3d0 	.word	0x2000c3d0

200019ac <DAP_ProcessCommand>:
// Process DAP command request and prepare response
//   request:  pointer to request data
//   response: pointer to response data
//   return:   number of bytes in response (lower 16 bits)
//             number of bytes in request (upper 16 bits)
uint32_t DAP_ProcessCommand(const uint8_t *request, uint8_t *response) {
200019ac:	b580      	push	{r7, lr}
200019ae:	b084      	sub	sp, #16
200019b0:	af00      	add	r7, sp, #0
200019b2:	6078      	str	r0, [r7, #4]
200019b4:	6039      	str	r1, [r7, #0]
  uint32_t num;

  if ((*request >= ID_DAP_Vendor0) && (*request <= ID_DAP_Vendor31)) {
200019b6:	687b      	ldr	r3, [r7, #4]
200019b8:	781b      	ldrb	r3, [r3, #0]
200019ba:	b25b      	sxtb	r3, r3
200019bc:	2b00      	cmp	r3, #0
200019be:	da09      	bge.n	200019d4 <DAP_ProcessCommand+0x28>
200019c0:	687b      	ldr	r3, [r7, #4]
200019c2:	781b      	ldrb	r3, [r3, #0]
200019c4:	2b9f      	cmp	r3, #159	@ 0x9f
200019c6:	d805      	bhi.n	200019d4 <DAP_ProcessCommand+0x28>
    return DAP_ProcessVendorCommand(request, response);
200019c8:	6839      	ldr	r1, [r7, #0]
200019ca:	6878      	ldr	r0, [r7, #4]
200019cc:	f000 f8d2 	bl	20001b74 <DAP_ProcessVendorCommand>
200019d0:	4603      	mov	r3, r0
200019d2:	e0cb      	b.n	20001b6c <DAP_ProcessCommand+0x1c0>
  }

  *response++ = *request;
200019d4:	683b      	ldr	r3, [r7, #0]
200019d6:	1c5a      	adds	r2, r3, #1
200019d8:	603a      	str	r2, [r7, #0]
200019da:	687a      	ldr	r2, [r7, #4]
200019dc:	7812      	ldrb	r2, [r2, #0]
200019de:	701a      	strb	r2, [r3, #0]

  switch (*request++) {
200019e0:	687b      	ldr	r3, [r7, #4]
200019e2:	1c5a      	adds	r2, r3, #1
200019e4:	607a      	str	r2, [r7, #4]
200019e6:	781b      	ldrb	r3, [r3, #0]
200019e8:	2b1d      	cmp	r3, #29
200019ea:	f200 80b5 	bhi.w	20001b58 <DAP_ProcessCommand+0x1ac>
200019ee:	a201      	add	r2, pc, #4	@ (adr r2, 200019f4 <DAP_ProcessCommand+0x48>)
200019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200019f4:	20001a6d 	.word	0x20001a6d
200019f8:	20001a91 	.word	0x20001a91
200019fc:	20001a9d 	.word	0x20001a9d
20001a00:	20001aa9 	.word	0x20001aa9
20001a04:	20001b29 	.word	0x20001b29
20001a08:	20001b35 	.word	0x20001b35
20001a0c:	20001b41 	.word	0x20001b41
20001a10:	20001b59 	.word	0x20001b59
20001a14:	20001b4d 	.word	0x20001b4d
20001a18:	20001ab3 	.word	0x20001ab3
20001a1c:	20001abf 	.word	0x20001abf
20001a20:	20001b59 	.word	0x20001b59
20001a24:	20001b59 	.word	0x20001b59
20001a28:	20001b59 	.word	0x20001b59
20001a2c:	20001b59 	.word	0x20001b59
20001a30:	20001b59 	.word	0x20001b59
20001a34:	20001ac9 	.word	0x20001ac9
20001a38:	20001ad5 	.word	0x20001ad5
20001a3c:	20001ae1 	.word	0x20001ae1
20001a40:	20001aed 	.word	0x20001aed
20001a44:	20001b05 	.word	0x20001b05
20001a48:	20001b11 	.word	0x20001b11
20001a4c:	20001b1d 	.word	0x20001b1d
20001a50:	20001b59 	.word	0x20001b59
20001a54:	20001b59 	.word	0x20001b59
20001a58:	20001b59 	.word	0x20001b59
20001a5c:	20001b59 	.word	0x20001b59
20001a60:	20001b59 	.word	0x20001b59
20001a64:	20001b59 	.word	0x20001b59
20001a68:	20001af9 	.word	0x20001af9
    case ID_DAP_Info:
      num = DAP_Info(*request, response+1);
20001a6c:	687b      	ldr	r3, [r7, #4]
20001a6e:	781a      	ldrb	r2, [r3, #0]
20001a70:	683b      	ldr	r3, [r7, #0]
20001a72:	3301      	adds	r3, #1
20001a74:	4619      	mov	r1, r3
20001a76:	4610      	mov	r0, r2
20001a78:	f7fe fe7e 	bl	20000778 <DAP_Info>
20001a7c:	4603      	mov	r3, r0
20001a7e:	60fb      	str	r3, [r7, #12]
      *response = (uint8_t)num;
20001a80:	68fb      	ldr	r3, [r7, #12]
20001a82:	b2da      	uxtb	r2, r3
20001a84:	683b      	ldr	r3, [r7, #0]
20001a86:	701a      	strb	r2, [r3, #0]
      return ((2U << 16) + 2U + num);
20001a88:	68fb      	ldr	r3, [r7, #12]
20001a8a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
20001a8e:	e06d      	b.n	20001b6c <DAP_ProcessCommand+0x1c0>

    case ID_DAP_HostStatus:
      num = DAP_HostStatus(request, response);
20001a90:	6839      	ldr	r1, [r7, #0]
20001a92:	6878      	ldr	r0, [r7, #4]
20001a94:	f7fe ff58 	bl	20000948 <DAP_HostStatus>
20001a98:	60f8      	str	r0, [r7, #12]
      break;
20001a9a:	e064      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Connect:
      num = DAP_Connect(request, response);
20001a9c:	6839      	ldr	r1, [r7, #0]
20001a9e:	6878      	ldr	r0, [r7, #4]
20001aa0:	f7fe ff80 	bl	200009a4 <DAP_Connect>
20001aa4:	60f8      	str	r0, [r7, #12]
      break;
20001aa6:	e05e      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Disconnect:
      num = DAP_Disconnect(response);
20001aa8:	6838      	ldr	r0, [r7, #0]
20001aaa:	f7fe ffa3 	bl	200009f4 <DAP_Disconnect>
20001aae:	60f8      	str	r0, [r7, #12]
      break;
20001ab0:	e059      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_Delay:
      num = DAP_Delay(request, response);
20001ab2:	6839      	ldr	r1, [r7, #0]
20001ab4:	6878      	ldr	r0, [r7, #4]
20001ab6:	f7fe ff1f 	bl	200008f8 <DAP_Delay>
20001aba:	60f8      	str	r0, [r7, #12]
      break;
20001abc:	e053      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_ResetTarget:
      num = DAP_ResetTarget(response);
20001abe:	6838      	ldr	r0, [r7, #0]
20001ac0:	f7fe ffac 	bl	20000a1c <DAP_ResetTarget>
20001ac4:	60f8      	str	r0, [r7, #12]
      break;
20001ac6:	e04e      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWJ_Pins:
      num = DAP_SWJ_Pins(request, response);
20001ac8:	6839      	ldr	r1, [r7, #0]
20001aca:	6878      	ldr	r0, [r7, #4]
20001acc:	f7fe ffb8 	bl	20000a40 <DAP_SWJ_Pins>
20001ad0:	60f8      	str	r0, [r7, #12]
      break;
20001ad2:	e048      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Clock:
      num = DAP_SWJ_Clock(request, response);
20001ad4:	6839      	ldr	r1, [r7, #0]
20001ad6:	6878      	ldr	r0, [r7, #4]
20001ad8:	f7ff f896 	bl	20000c08 <DAP_SWJ_Clock>
20001adc:	60f8      	str	r0, [r7, #12]
      break;
20001ade:	e042      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWJ_Sequence:
      num = DAP_SWJ_Sequence(request, response);
20001ae0:	6839      	ldr	r1, [r7, #0]
20001ae2:	6878      	ldr	r0, [r7, #4]
20001ae4:	f7ff f8be 	bl	20000c64 <DAP_SWJ_Sequence>
20001ae8:	60f8      	str	r0, [r7, #12]
      break;
20001aea:	e03c      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_SWD_Configure:
      num = DAP_SWD_Configure(request, response);
20001aec:	6839      	ldr	r1, [r7, #0]
20001aee:	6878      	ldr	r0, [r7, #4]
20001af0:	f7ff f8dc 	bl	20000cac <DAP_SWD_Configure>
20001af4:	60f8      	str	r0, [r7, #12]
      break;
20001af6:	e036      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_SWD_Sequence:
      num = DAP_SWD_Sequence(request, response);
20001af8:	6839      	ldr	r1, [r7, #0]
20001afa:	6878      	ldr	r0, [r7, #4]
20001afc:	f7ff f8e6 	bl	20000ccc <DAP_SWD_Sequence>
20001b00:	60f8      	str	r0, [r7, #12]
      break;
20001b02:	e030      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_JTAG_Sequence:
      num = DAP_JTAG_Sequence(request, response);
20001b04:	6839      	ldr	r1, [r7, #0]
20001b06:	6878      	ldr	r0, [r7, #4]
20001b08:	f7ff f927 	bl	20000d5a <DAP_JTAG_Sequence>
20001b0c:	60f8      	str	r0, [r7, #12]
      break;
20001b0e:	e02a      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_Configure:
      num = DAP_JTAG_Configure(request, response);
20001b10:	6839      	ldr	r1, [r7, #0]
20001b12:	6878      	ldr	r0, [r7, #4]
20001b14:	f7ff f95c 	bl	20000dd0 <DAP_JTAG_Configure>
20001b18:	60f8      	str	r0, [r7, #12]
      break;
20001b1a:	e024      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_JTAG_IDCODE:
      num = DAP_JTAG_IDCode(request, response);
20001b1c:	6839      	ldr	r1, [r7, #0]
20001b1e:	6878      	ldr	r0, [r7, #4]
20001b20:	f7ff f9b6 	bl	20000e90 <DAP_JTAG_IDCode>
20001b24:	60f8      	str	r0, [r7, #12]
      break;
20001b26:	e01e      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_TransferConfigure:
      num = DAP_TransferConfigure(request, response);
20001b28:	6839      	ldr	r1, [r7, #0]
20001b2a:	6878      	ldr	r0, [r7, #4]
20001b2c:	f7ff f9f6 	bl	20000f1c <DAP_TransferConfigure>
20001b30:	60f8      	str	r0, [r7, #12]
      break;
20001b32:	e018      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_Transfer:
      num = DAP_Transfer(request, response);
20001b34:	6839      	ldr	r1, [r7, #0]
20001b36:	6878      	ldr	r0, [r7, #4]
20001b38:	f7ff fd60 	bl	200015fc <DAP_Transfer>
20001b3c:	60f8      	str	r0, [r7, #12]
      break;
20001b3e:	e012      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
    case ID_DAP_TransferBlock:
      num = DAP_TransferBlock(request, response);
20001b40:	6839      	ldr	r1, [r7, #0]
20001b42:	6878      	ldr	r0, [r7, #4]
20001b44:	f7ff fe9c 	bl	20001880 <DAP_TransferBlock>
20001b48:	60f8      	str	r0, [r7, #12]
      break;
20001b4a:	e00c      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>

    case ID_DAP_WriteABORT:
      num = DAP_WriteAbort(request, response);
20001b4c:	6839      	ldr	r1, [r7, #0]
20001b4e:	6878      	ldr	r0, [r7, #4]
20001b50:	f7ff ff0e 	bl	20001970 <DAP_WriteAbort>
20001b54:	60f8      	str	r0, [r7, #12]
      break;
20001b56:	e006      	b.n	20001b66 <DAP_ProcessCommand+0x1ba>
      num = UART_Transfer(request, response);
      break;
#endif

    default:
      *(response-1) = ID_DAP_Invalid;
20001b58:	683b      	ldr	r3, [r7, #0]
20001b5a:	3b01      	subs	r3, #1
20001b5c:	22ff      	movs	r2, #255	@ 0xff
20001b5e:	701a      	strb	r2, [r3, #0]
      return ((1U << 16) | 1U);
20001b60:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
20001b64:	e002      	b.n	20001b6c <DAP_ProcessCommand+0x1c0>
  }

  return ((1U << 16) + 1U + num);
20001b66:	68fb      	ldr	r3, [r7, #12]
20001b68:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
}
20001b6c:	4618      	mov	r0, r3
20001b6e:	3710      	adds	r7, #16
20001b70:	46bd      	mov	sp, r7
20001b72:	bd80      	pop	{r7, pc}

20001b74 <DAP_ProcessVendorCommand>:
\param request   pointer to request data
\param response  pointer to response data
\return          number of bytes in response (lower 16 bits)
                 number of bytes in request (upper 16 bits)
*/
uint32_t DAP_ProcessVendorCommand(const uint8_t *request, uint8_t *response) {
20001b74:	b480      	push	{r7}
20001b76:	b085      	sub	sp, #20
20001b78:	af00      	add	r7, sp, #0
20001b7a:	6078      	str	r0, [r7, #4]
20001b7c:	6039      	str	r1, [r7, #0]
  uint32_t num = (1U << 16) | 1U;
20001b7e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
20001b82:	60fb      	str	r3, [r7, #12]

  *response++ = *request;        // copy Command ID
20001b84:	683b      	ldr	r3, [r7, #0]
20001b86:	1c5a      	adds	r2, r3, #1
20001b88:	603a      	str	r2, [r7, #0]
20001b8a:	687a      	ldr	r2, [r7, #4]
20001b8c:	7812      	ldrb	r2, [r2, #0]
20001b8e:	701a      	strb	r2, [r3, #0]

  switch (*request++) {          // first byte in request is Command ID
20001b90:	687b      	ldr	r3, [r7, #4]
20001b92:	1c5a      	adds	r2, r3, #1
20001b94:	607a      	str	r2, [r7, #4]
20001b96:	781b      	ldrb	r3, [r3, #0]
20001b98:	3b80      	subs	r3, #128	@ 0x80
20001b9a:	2b1f      	cmp	r3, #31
20001b9c:	d842      	bhi.n	20001c24 <DAP_ProcessVendorCommand+0xb0>
20001b9e:	a201      	add	r2, pc, #4	@ (adr r2, 20001ba4 <DAP_ProcessVendorCommand+0x30>)
20001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001ba4:	20001c25 	.word	0x20001c25
20001ba8:	20001c25 	.word	0x20001c25
20001bac:	20001c25 	.word	0x20001c25
20001bb0:	20001c25 	.word	0x20001c25
20001bb4:	20001c25 	.word	0x20001c25
20001bb8:	20001c25 	.word	0x20001c25
20001bbc:	20001c25 	.word	0x20001c25
20001bc0:	20001c25 	.word	0x20001c25
20001bc4:	20001c25 	.word	0x20001c25
20001bc8:	20001c25 	.word	0x20001c25
20001bcc:	20001c25 	.word	0x20001c25
20001bd0:	20001c25 	.word	0x20001c25
20001bd4:	20001c25 	.word	0x20001c25
20001bd8:	20001c25 	.word	0x20001c25
20001bdc:	20001c25 	.word	0x20001c25
20001be0:	20001c25 	.word	0x20001c25
20001be4:	20001c25 	.word	0x20001c25
20001be8:	20001c25 	.word	0x20001c25
20001bec:	20001c25 	.word	0x20001c25
20001bf0:	20001c25 	.word	0x20001c25
20001bf4:	20001c25 	.word	0x20001c25
20001bf8:	20001c25 	.word	0x20001c25
20001bfc:	20001c25 	.word	0x20001c25
20001c00:	20001c25 	.word	0x20001c25
20001c04:	20001c25 	.word	0x20001c25
20001c08:	20001c25 	.word	0x20001c25
20001c0c:	20001c25 	.word	0x20001c25
20001c10:	20001c25 	.word	0x20001c25
20001c14:	20001c25 	.word	0x20001c25
20001c18:	20001c25 	.word	0x20001c25
20001c1c:	20001c25 	.word	0x20001c25
20001c20:	20001c25 	.word	0x20001c25
    case ID_DAP_Vendor29: break;
    case ID_DAP_Vendor30: break;
    case ID_DAP_Vendor31: break;
  }

  return (num);
20001c24:	68fb      	ldr	r3, [r7, #12]
}
20001c26:	4618      	mov	r0, r3
20001c28:	3714      	adds	r7, #20
20001c2a:	46bd      	mov	sp, r7
20001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c30:	4770      	bx	lr
20001c32:	bf00      	nop

20001c34 <PIN_SWCLK_TCK_SET>:
static void     PIN_SWCLK_TCK_SET (void) {
20001c34:	b480      	push	{r7}
20001c36:	af00      	add	r7, sp, #0
}
20001c38:	bf00      	nop
20001c3a:	46bd      	mov	sp, r7
20001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c40:	4770      	bx	lr

20001c42 <PIN_SWCLK_TCK_CLR>:
static void     PIN_SWCLK_TCK_CLR (void) {
20001c42:	b480      	push	{r7}
20001c44:	af00      	add	r7, sp, #0
}
20001c46:	bf00      	nop
20001c48:	46bd      	mov	sp, r7
20001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c4e:	4770      	bx	lr

20001c50 <PIN_SWDIO_TMS_SET>:
static void     PIN_SWDIO_TMS_SET (void) {
20001c50:	b580      	push	{r7, lr}
20001c52:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20001c54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20001c58:	4802      	ldr	r0, [pc, #8]	@ (20001c64 <PIN_SWDIO_TMS_SET+0x14>)
20001c5a:	f003 f84e 	bl	20004cfa <HAL_GPIO_TogglePin>
}
20001c5e:	bf00      	nop
20001c60:	bd80      	pop	{r7, pc}
20001c62:	bf00      	nop
20001c64:	40020400 	.word	0x40020400

20001c68 <PIN_SWDIO_TMS_CLR>:
static void     PIN_SWDIO_TMS_CLR (void) {
20001c68:	b580      	push	{r7, lr}
20001c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20001c6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20001c70:	4802      	ldr	r0, [pc, #8]	@ (20001c7c <PIN_SWDIO_TMS_CLR+0x14>)
20001c72:	f003 f842 	bl	20004cfa <HAL_GPIO_TogglePin>
}
20001c76:	bf00      	nop
20001c78:	bd80      	pop	{r7, pc}
20001c7a:	bf00      	nop
20001c7c:	40020400 	.word	0x40020400

20001c80 <PIN_TDI_OUT>:
static void     PIN_TDI_OUT (uint32_t bit) {
20001c80:	b480      	push	{r7}
20001c82:	b083      	sub	sp, #12
20001c84:	af00      	add	r7, sp, #0
20001c86:	6078      	str	r0, [r7, #4]
}
20001c88:	bf00      	nop
20001c8a:	370c      	adds	r7, #12
20001c8c:	46bd      	mov	sp, r7
20001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c92:	4770      	bx	lr

20001c94 <PIN_TDO_IN>:
static uint32_t PIN_TDO_IN  (void) {
20001c94:	b480      	push	{r7}
20001c96:	af00      	add	r7, sp, #0
  return (0U);
20001c98:	2300      	movs	r3, #0
}
20001c9a:	4618      	mov	r0, r3
20001c9c:	46bd      	mov	sp, r7
20001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ca2:	4770      	bx	lr

20001ca4 <TIMESTAMP_GET>:
__STATIC_INLINE uint32_t TIMESTAMP_GET (void) {
20001ca4:	b480      	push	{r7}
20001ca6:	af00      	add	r7, sp, #0
  return (DWT->CYCCNT);
20001ca8:	4b03      	ldr	r3, [pc, #12]	@ (20001cb8 <TIMESTAMP_GET+0x14>)
20001caa:	685b      	ldr	r3, [r3, #4]
}
20001cac:	4618      	mov	r0, r3
20001cae:	46bd      	mov	sp, r7
20001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cb4:	4770      	bx	lr
20001cb6:	bf00      	nop
20001cb8:	e0001000 	.word	0xe0001000

20001cbc <write_nbits_lsb>:

    // Right-shift to remove earlier bits, then mask n bits
    return (window >> bit_offset) & ((1U << n) - 1);
}

void write_nbits_lsb(uint8_t *dst, size_t bit_index, size_t n, uint8_t value) {
20001cbc:	b480      	push	{r7}
20001cbe:	b089      	sub	sp, #36	@ 0x24
20001cc0:	af00      	add	r7, sp, #0
20001cc2:	60f8      	str	r0, [r7, #12]
20001cc4:	60b9      	str	r1, [r7, #8]
20001cc6:	607a      	str	r2, [r7, #4]
20001cc8:	70fb      	strb	r3, [r7, #3]
    size_t byte_index = bit_index / 8;
20001cca:	68bb      	ldr	r3, [r7, #8]
20001ccc:	08db      	lsrs	r3, r3, #3
20001cce:	61fb      	str	r3, [r7, #28]
    size_t bit_offset = bit_index % 8;
20001cd0:	68bb      	ldr	r3, [r7, #8]
20001cd2:	f003 0307 	and.w	r3, r3, #7
20001cd6:	61bb      	str	r3, [r7, #24]

    // Load 16-bit window
    uint16_t window = ((uint16_t)dst[byte_index]) |
20001cd8:	68fa      	ldr	r2, [r7, #12]
20001cda:	69fb      	ldr	r3, [r7, #28]
20001cdc:	4413      	add	r3, r2
20001cde:	781b      	ldrb	r3, [r3, #0]
20001ce0:	b21a      	sxth	r2, r3
                      ((uint16_t)dst[byte_index + 1] << 8);
20001ce2:	69fb      	ldr	r3, [r7, #28]
20001ce4:	3301      	adds	r3, #1
20001ce6:	68f9      	ldr	r1, [r7, #12]
20001ce8:	440b      	add	r3, r1
20001cea:	781b      	ldrb	r3, [r3, #0]
20001cec:	021b      	lsls	r3, r3, #8
    uint16_t window = ((uint16_t)dst[byte_index]) |
20001cee:	b21b      	sxth	r3, r3
20001cf0:	4313      	orrs	r3, r2
20001cf2:	b21b      	sxth	r3, r3
20001cf4:	82fb      	strh	r3, [r7, #22]

    // Clear target bits
    uint16_t mask = ((1U << n) - 1) << bit_offset;
20001cf6:	2201      	movs	r2, #1
20001cf8:	687b      	ldr	r3, [r7, #4]
20001cfa:	fa02 f303 	lsl.w	r3, r2, r3
20001cfe:	1e5a      	subs	r2, r3, #1
20001d00:	69bb      	ldr	r3, [r7, #24]
20001d02:	fa02 f303 	lsl.w	r3, r2, r3
20001d06:	82bb      	strh	r3, [r7, #20]
    window = (window & ~mask) | ((uint16_t)(value & ((1U << n) - 1)) << bit_offset);
20001d08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
20001d0c:	43db      	mvns	r3, r3
20001d0e:	b21a      	sxth	r2, r3
20001d10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
20001d14:	4013      	ands	r3, r2
20001d16:	b21a      	sxth	r2, r3
20001d18:	78fb      	ldrb	r3, [r7, #3]
20001d1a:	b299      	uxth	r1, r3
20001d1c:	2001      	movs	r0, #1
20001d1e:	687b      	ldr	r3, [r7, #4]
20001d20:	fa00 f303 	lsl.w	r3, r0, r3
20001d24:	b29b      	uxth	r3, r3
20001d26:	3b01      	subs	r3, #1
20001d28:	b29b      	uxth	r3, r3
20001d2a:	400b      	ands	r3, r1
20001d2c:	b29b      	uxth	r3, r3
20001d2e:	4619      	mov	r1, r3
20001d30:	69bb      	ldr	r3, [r7, #24]
20001d32:	fa01 f303 	lsl.w	r3, r1, r3
20001d36:	b21b      	sxth	r3, r3
20001d38:	4313      	orrs	r3, r2
20001d3a:	b21b      	sxth	r3, r3
20001d3c:	82fb      	strh	r3, [r7, #22]

    // Store back
    dst[byte_index] = window & 0xFF;
20001d3e:	68fa      	ldr	r2, [r7, #12]
20001d40:	69fb      	ldr	r3, [r7, #28]
20001d42:	4413      	add	r3, r2
20001d44:	8afa      	ldrh	r2, [r7, #22]
20001d46:	b2d2      	uxtb	r2, r2
20001d48:	701a      	strb	r2, [r3, #0]
    dst[byte_index + 1] = (window >> 8) & 0xFF;
20001d4a:	8afb      	ldrh	r3, [r7, #22]
20001d4c:	0a1b      	lsrs	r3, r3, #8
20001d4e:	b299      	uxth	r1, r3
20001d50:	69fb      	ldr	r3, [r7, #28]
20001d52:	3301      	adds	r3, #1
20001d54:	68fa      	ldr	r2, [r7, #12]
20001d56:	4413      	add	r3, r2
20001d58:	b2ca      	uxtb	r2, r1
20001d5a:	701a      	strb	r2, [r3, #0]
}
20001d5c:	bf00      	nop
20001d5e:	3724      	adds	r7, #36	@ 0x24
20001d60:	46bd      	mov	sp, r7
20001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d66:	4770      	bx	lr

20001d68 <fill_tms_buffer>:

void fill_tms_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t tms_val)
{
20001d68:	b580      	push	{r7, lr}
20001d6a:	b084      	sub	sp, #16
20001d6c:	af00      	add	r7, sp, #0
20001d6e:	60f8      	str	r0, [r7, #12]
20001d70:	60b9      	str	r1, [r7, #8]
20001d72:	4613      	mov	r3, r2
20001d74:	71fb      	strb	r3, [r7, #7]
	//TODO: optimize here!!
	while(n)
20001d76:	e01b      	b.n	20001db0 <fill_tms_buffer+0x48>
	{
		if(n > 8)
20001d78:	68bb      	ldr	r3, [r7, #8]
20001d7a:	2b08      	cmp	r3, #8
20001d7c:	d911      	bls.n	20001da2 <fill_tms_buffer+0x3a>
		{
			if(tms_val)
20001d7e:	79fb      	ldrb	r3, [r7, #7]
20001d80:	2b00      	cmp	r3, #0
20001d82:	d00a      	beq.n	20001d9a <fill_tms_buffer+0x32>
			{
				tms_val = 0xFF;
20001d84:	23ff      	movs	r3, #255	@ 0xff
20001d86:	71fb      	strb	r3, [r7, #7]
				write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, 8, tms_val);
20001d88:	79fb      	ldrb	r3, [r7, #7]
20001d8a:	2208      	movs	r2, #8
20001d8c:	68f9      	ldr	r1, [r7, #12]
20001d8e:	480c      	ldr	r0, [pc, #48]	@ (20001dc0 <fill_tms_buffer+0x58>)
20001d90:	f7ff ff94 	bl	20001cbc <write_nbits_lsb>
				total_write_bit_cnt += 8;
20001d94:	68fb      	ldr	r3, [r7, #12]
20001d96:	3308      	adds	r3, #8
20001d98:	60fb      	str	r3, [r7, #12]
			}

			n -= 8;
20001d9a:	68bb      	ldr	r3, [r7, #8]
20001d9c:	3b08      	subs	r3, #8
20001d9e:	60bb      	str	r3, [r7, #8]
20001da0:	e006      	b.n	20001db0 <fill_tms_buffer+0x48>
		}
		else
		{
			write_nbits_lsb(TMS_SEQ_ARR, total_write_bit_cnt, n, tms_val);
20001da2:	79fb      	ldrb	r3, [r7, #7]
20001da4:	68ba      	ldr	r2, [r7, #8]
20001da6:	68f9      	ldr	r1, [r7, #12]
20001da8:	4805      	ldr	r0, [pc, #20]	@ (20001dc0 <fill_tms_buffer+0x58>)
20001daa:	f7ff ff87 	bl	20001cbc <write_nbits_lsb>
			break;
20001dae:	e003      	b.n	20001db8 <fill_tms_buffer+0x50>
	while(n)
20001db0:	68bb      	ldr	r3, [r7, #8]
20001db2:	2b00      	cmp	r3, #0
20001db4:	d1e0      	bne.n	20001d78 <fill_tms_buffer+0x10>
		}

	}
}
20001db6:	bf00      	nop
20001db8:	bf00      	nop
20001dba:	3710      	adds	r7, #16
20001dbc:	46bd      	mov	sp, r7
20001dbe:	bd80      	pop	{r7, pc}
20001dc0:	2000c418 	.word	0x2000c418

20001dc4 <fill_tdi_buffer>:

void fill_tdi_buffer(uint32_t total_write_bit_cnt, uint32_t n, uint8_t *tdi_val_ptr)
{
20001dc4:	b580      	push	{r7, lr}
20001dc6:	b084      	sub	sp, #16
20001dc8:	af00      	add	r7, sp, #0
20001dca:	60f8      	str	r0, [r7, #12]
20001dcc:	60b9      	str	r1, [r7, #8]
20001dce:	607a      	str	r2, [r7, #4]
	//TODO: optimize here!!
	while(n)
20001dd0:	e01b      	b.n	20001e0a <fill_tdi_buffer+0x46>
	{
		if(n > 8)
20001dd2:	68bb      	ldr	r3, [r7, #8]
20001dd4:	2b08      	cmp	r3, #8
20001dd6:	d910      	bls.n	20001dfa <fill_tdi_buffer+0x36>
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, 8, *tdi_val_ptr);
20001dd8:	687b      	ldr	r3, [r7, #4]
20001dda:	781b      	ldrb	r3, [r3, #0]
20001ddc:	2208      	movs	r2, #8
20001dde:	68f9      	ldr	r1, [r7, #12]
20001de0:	480e      	ldr	r0, [pc, #56]	@ (20001e1c <fill_tdi_buffer+0x58>)
20001de2:	f7ff ff6b 	bl	20001cbc <write_nbits_lsb>
			n -= 8;
20001de6:	68bb      	ldr	r3, [r7, #8]
20001de8:	3b08      	subs	r3, #8
20001dea:	60bb      	str	r3, [r7, #8]
			tdi_val_ptr++;
20001dec:	687b      	ldr	r3, [r7, #4]
20001dee:	3301      	adds	r3, #1
20001df0:	607b      	str	r3, [r7, #4]
			total_write_bit_cnt += 8;
20001df2:	68fb      	ldr	r3, [r7, #12]
20001df4:	3308      	adds	r3, #8
20001df6:	60fb      	str	r3, [r7, #12]
20001df8:	e007      	b.n	20001e0a <fill_tdi_buffer+0x46>
		}
		else
		{
			write_nbits_lsb(TDI_SEQ_ARR, total_write_bit_cnt, n, *tdi_val_ptr);
20001dfa:	687b      	ldr	r3, [r7, #4]
20001dfc:	781b      	ldrb	r3, [r3, #0]
20001dfe:	68ba      	ldr	r2, [r7, #8]
20001e00:	68f9      	ldr	r1, [r7, #12]
20001e02:	4806      	ldr	r0, [pc, #24]	@ (20001e1c <fill_tdi_buffer+0x58>)
20001e04:	f7ff ff5a 	bl	20001cbc <write_nbits_lsb>
			break;
20001e08:	e003      	b.n	20001e12 <fill_tdi_buffer+0x4e>
	while(n)
20001e0a:	68bb      	ldr	r3, [r7, #8]
20001e0c:	2b00      	cmp	r3, #0
20001e0e:	d1e0      	bne.n	20001dd2 <fill_tdi_buffer+0xe>
		}

	}
}
20001e10:	bf00      	nop
20001e12:	bf00      	nop
20001e14:	3710      	adds	r7, #16
20001e16:	46bd      	mov	sp, r7
20001e18:	bd80      	pop	{r7, pc}
20001e1a:	bf00      	nop
20001e1c:	2000c818 	.word	0x2000c818

20001e20 <apply_jtag_xfer>:

void apply_jtag_xfer(const uint8_t *tdi, const uint8_t *tms, uint8_t *tdo, uint32_t cnt)
{
20001e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20001e24:	b08c      	sub	sp, #48	@ 0x30
20001e26:	af02      	add	r7, sp, #8
20001e28:	6178      	str	r0, [r7, #20]
20001e2a:	6139      	str	r1, [r7, #16]
20001e2c:	60fa      	str	r2, [r7, #12]
20001e2e:	60bb      	str	r3, [r7, #8]
	uint32_t currentBit = 0;
20001e30:	2300      	movs	r3, #0
20001e32:	627b      	str	r3, [r7, #36]	@ 0x24

	while(cnt)
20001e34:	e04f      	b.n	20001ed6 <apply_jtag_xfer+0xb6>
	{
		uint8_t tms_val = *tms;
20001e36:	693b      	ldr	r3, [r7, #16]
20001e38:	781b      	ldrb	r3, [r3, #0]
20001e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		uint8_t tdi_val = *tdi;
20001e3e:	697b      	ldr	r3, [r7, #20]
20001e40:	781b      	ldrb	r3, [r3, #0]
20001e42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		uint64_t tdo_val;
		if(cnt > 8)
20001e46:	68bb      	ldr	r3, [r7, #8]
20001e48:	2b08      	cmp	r3, #8
20001e4a:	d929      	bls.n	20001ea0 <apply_jtag_xfer+0x80>
		{
			SPI_TMS_Transfer(tms_val, 8);
20001e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
20001e50:	2200      	movs	r2, #0
20001e52:	461c      	mov	r4, r3
20001e54:	4615      	mov	r5, r2
20001e56:	2208      	movs	r2, #8
20001e58:	4620      	mov	r0, r4
20001e5a:	4629      	mov	r1, r5
20001e5c:	f001 fdc4 	bl	200039e8 <SPI_TMS_Transfer>
			SPI_Transfer(&tdo_val, tdi_val , 8);
20001e60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
20001e64:	2200      	movs	r2, #0
20001e66:	4698      	mov	r8, r3
20001e68:	4691      	mov	r9, r2
20001e6a:	f107 0118 	add.w	r1, r7, #24
20001e6e:	2308      	movs	r3, #8
20001e70:	9300      	str	r3, [sp, #0]
20001e72:	4642      	mov	r2, r8
20001e74:	464b      	mov	r3, r9
20001e76:	4608      	mov	r0, r1
20001e78:	f001 fde6 	bl	20003a48 <SPI_Transfer>

			*tdo = (uint8_t)tdo_val;
20001e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20001e80:	b2d2      	uxtb	r2, r2
20001e82:	68fb      	ldr	r3, [r7, #12]
20001e84:	701a      	strb	r2, [r3, #0]

			cnt-= 8;
20001e86:	68bb      	ldr	r3, [r7, #8]
20001e88:	3b08      	subs	r3, #8
20001e8a:	60bb      	str	r3, [r7, #8]
			tms++;
20001e8c:	693b      	ldr	r3, [r7, #16]
20001e8e:	3301      	adds	r3, #1
20001e90:	613b      	str	r3, [r7, #16]
			tdi++;
20001e92:	697b      	ldr	r3, [r7, #20]
20001e94:	3301      	adds	r3, #1
20001e96:	617b      	str	r3, [r7, #20]
			tdo++;
20001e98:	68fb      	ldr	r3, [r7, #12]
20001e9a:	3301      	adds	r3, #1
20001e9c:	60fb      	str	r3, [r7, #12]
20001e9e:	e01a      	b.n	20001ed6 <apply_jtag_xfer+0xb6>
		}
		else
		{
			SPI_TMS_Transfer(tms_val, cnt);
20001ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
20001ea4:	2200      	movs	r2, #0
20001ea6:	469a      	mov	sl, r3
20001ea8:	4693      	mov	fp, r2
20001eaa:	68bb      	ldr	r3, [r7, #8]
20001eac:	b2db      	uxtb	r3, r3
20001eae:	461a      	mov	r2, r3
20001eb0:	4650      	mov	r0, sl
20001eb2:	4659      	mov	r1, fp
20001eb4:	f001 fd98 	bl	200039e8 <SPI_TMS_Transfer>
			SPI_Transfer(tdo, tdi_val , cnt);
20001eb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
20001ebc:	2200      	movs	r2, #0
20001ebe:	603b      	str	r3, [r7, #0]
20001ec0:	607a      	str	r2, [r7, #4]
20001ec2:	68bb      	ldr	r3, [r7, #8]
20001ec4:	b2db      	uxtb	r3, r3
20001ec6:	9300      	str	r3, [sp, #0]
20001ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
20001ecc:	68f8      	ldr	r0, [r7, #12]
20001ece:	f001 fdbb 	bl	20003a48 <SPI_Transfer>
			cnt = 0;
20001ed2:	2300      	movs	r3, #0
20001ed4:	60bb      	str	r3, [r7, #8]
	while(cnt)
20001ed6:	68bb      	ldr	r3, [r7, #8]
20001ed8:	2b00      	cmp	r3, #0
20001eda:	d1ac      	bne.n	20001e36 <apply_jtag_xfer+0x16>
		}
	}

}
20001edc:	bf00      	nop
20001ede:	bf00      	nop
20001ee0:	3728      	adds	r7, #40	@ 0x28
20001ee2:	46bd      	mov	sp, r7
20001ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

20001ee8 <shift_right_bitstream_lsb>:
void shift_right_bitstream_lsb(uint8_t *data, size_t num_bits, size_t n) {
20001ee8:	b480      	push	{r7}
20001eea:	b091      	sub	sp, #68	@ 0x44
20001eec:	af00      	add	r7, sp, #0
20001eee:	60f8      	str	r0, [r7, #12]
20001ef0:	60b9      	str	r1, [r7, #8]
20001ef2:	607a      	str	r2, [r7, #4]
    if (n == 0 || num_bits == 0 || n >= num_bits)
20001ef4:	687b      	ldr	r3, [r7, #4]
20001ef6:	2b00      	cmp	r3, #0
20001ef8:	d006      	beq.n	20001f08 <shift_right_bitstream_lsb+0x20>
20001efa:	68bb      	ldr	r3, [r7, #8]
20001efc:	2b00      	cmp	r3, #0
20001efe:	d003      	beq.n	20001f08 <shift_right_bitstream_lsb+0x20>
20001f00:	687a      	ldr	r2, [r7, #4]
20001f02:	68bb      	ldr	r3, [r7, #8]
20001f04:	429a      	cmp	r2, r3
20001f06:	d313      	bcc.n	20001f30 <shift_right_bitstream_lsb+0x48>
    {
        // If n >= num_bits, clear all bits
        size_t num_bytes = (num_bits + 7) / 8;
20001f08:	68bb      	ldr	r3, [r7, #8]
20001f0a:	3307      	adds	r3, #7
20001f0c:	08db      	lsrs	r3, r3, #3
20001f0e:	613b      	str	r3, [r7, #16]
        for (size_t i = 0; i < num_bytes; i++) {
20001f10:	2300      	movs	r3, #0
20001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
20001f14:	e007      	b.n	20001f26 <shift_right_bitstream_lsb+0x3e>
            data[i] = 0;
20001f16:	68fa      	ldr	r2, [r7, #12]
20001f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001f1a:	4413      	add	r3, r2
20001f1c:	2200      	movs	r2, #0
20001f1e:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < num_bytes; i++) {
20001f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20001f22:	3301      	adds	r3, #1
20001f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
20001f26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
20001f28:	693b      	ldr	r3, [r7, #16]
20001f2a:	429a      	cmp	r2, r3
20001f2c:	d3f3      	bcc.n	20001f16 <shift_right_bitstream_lsb+0x2e>
        }
        return;
20001f2e:	e073      	b.n	20002018 <shift_right_bitstream_lsb+0x130>
    }

    for (size_t i = 0; i < num_bits - n; i++) {
20001f30:	2300      	movs	r3, #0
20001f32:	63bb      	str	r3, [r7, #56]	@ 0x38
20001f34:	e044      	b.n	20001fc0 <shift_right_bitstream_lsb+0xd8>
        // Read source bit
        size_t from_bit = i + n;
20001f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
20001f38:	687b      	ldr	r3, [r7, #4]
20001f3a:	4413      	add	r3, r2
20001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
        size_t from_byte = from_bit / 8;
20001f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001f40:	08db      	lsrs	r3, r3, #3
20001f42:	627b      	str	r3, [r7, #36]	@ 0x24
        size_t from_off = from_bit % 8;
20001f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001f46:	f003 0307 	and.w	r3, r3, #7
20001f4a:	623b      	str	r3, [r7, #32]
        uint8_t bit = (data[from_byte] >> from_off) & 1;
20001f4c:	68fa      	ldr	r2, [r7, #12]
20001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001f50:	4413      	add	r3, r2
20001f52:	781b      	ldrb	r3, [r3, #0]
20001f54:	461a      	mov	r2, r3
20001f56:	6a3b      	ldr	r3, [r7, #32]
20001f58:	fa42 f303 	asr.w	r3, r2, r3
20001f5c:	b2db      	uxtb	r3, r3
20001f5e:	f003 0301 	and.w	r3, r3, #1
20001f62:	77fb      	strb	r3, [r7, #31]

        // Write destination bit
        size_t to_byte = i / 8;
20001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001f66:	08db      	lsrs	r3, r3, #3
20001f68:	61bb      	str	r3, [r7, #24]
        size_t to_off = i % 8;
20001f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001f6c:	f003 0307 	and.w	r3, r3, #7
20001f70:	617b      	str	r3, [r7, #20]
        data[to_byte] &= ~(1 << to_off);
20001f72:	68fa      	ldr	r2, [r7, #12]
20001f74:	69bb      	ldr	r3, [r7, #24]
20001f76:	4413      	add	r3, r2
20001f78:	781b      	ldrb	r3, [r3, #0]
20001f7a:	b25a      	sxtb	r2, r3
20001f7c:	2101      	movs	r1, #1
20001f7e:	697b      	ldr	r3, [r7, #20]
20001f80:	fa01 f303 	lsl.w	r3, r1, r3
20001f84:	b25b      	sxtb	r3, r3
20001f86:	43db      	mvns	r3, r3
20001f88:	b25b      	sxtb	r3, r3
20001f8a:	4013      	ands	r3, r2
20001f8c:	b259      	sxtb	r1, r3
20001f8e:	68fa      	ldr	r2, [r7, #12]
20001f90:	69bb      	ldr	r3, [r7, #24]
20001f92:	4413      	add	r3, r2
20001f94:	b2ca      	uxtb	r2, r1
20001f96:	701a      	strb	r2, [r3, #0]
        data[to_byte] |= (bit << to_off);
20001f98:	68fa      	ldr	r2, [r7, #12]
20001f9a:	69bb      	ldr	r3, [r7, #24]
20001f9c:	4413      	add	r3, r2
20001f9e:	781b      	ldrb	r3, [r3, #0]
20001fa0:	b25a      	sxtb	r2, r3
20001fa2:	7ff9      	ldrb	r1, [r7, #31]
20001fa4:	697b      	ldr	r3, [r7, #20]
20001fa6:	fa01 f303 	lsl.w	r3, r1, r3
20001faa:	b25b      	sxtb	r3, r3
20001fac:	4313      	orrs	r3, r2
20001fae:	b259      	sxtb	r1, r3
20001fb0:	68fa      	ldr	r2, [r7, #12]
20001fb2:	69bb      	ldr	r3, [r7, #24]
20001fb4:	4413      	add	r3, r2
20001fb6:	b2ca      	uxtb	r2, r1
20001fb8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < num_bits - n; i++) {
20001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001fbc:	3301      	adds	r3, #1
20001fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
20001fc0:	68ba      	ldr	r2, [r7, #8]
20001fc2:	687b      	ldr	r3, [r7, #4]
20001fc4:	1ad3      	subs	r3, r2, r3
20001fc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
20001fc8:	429a      	cmp	r2, r3
20001fca:	d3b4      	bcc.n	20001f36 <shift_right_bitstream_lsb+0x4e>
    }

    // Zero the remaining n bits at the top
    for (size_t i = num_bits - n; i < num_bits; i++) {
20001fcc:	68ba      	ldr	r2, [r7, #8]
20001fce:	687b      	ldr	r3, [r7, #4]
20001fd0:	1ad3      	subs	r3, r2, r3
20001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
20001fd4:	e01c      	b.n	20002010 <shift_right_bitstream_lsb+0x128>
        size_t byte = i / 8;
20001fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001fd8:	08db      	lsrs	r3, r3, #3
20001fda:	633b      	str	r3, [r7, #48]	@ 0x30
        size_t bit = i % 8;
20001fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20001fde:	f003 0307 	and.w	r3, r3, #7
20001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        data[byte] &= ~(1 << bit);
20001fe4:	68fa      	ldr	r2, [r7, #12]
20001fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001fe8:	4413      	add	r3, r2
20001fea:	781b      	ldrb	r3, [r3, #0]
20001fec:	b25a      	sxtb	r2, r3
20001fee:	2101      	movs	r1, #1
20001ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20001ff2:	fa01 f303 	lsl.w	r3, r1, r3
20001ff6:	b25b      	sxtb	r3, r3
20001ff8:	43db      	mvns	r3, r3
20001ffa:	b25b      	sxtb	r3, r3
20001ffc:	4013      	ands	r3, r2
20001ffe:	b259      	sxtb	r1, r3
20002000:	68fa      	ldr	r2, [r7, #12]
20002002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002004:	4413      	add	r3, r2
20002006:	b2ca      	uxtb	r2, r1
20002008:	701a      	strb	r2, [r3, #0]
    for (size_t i = num_bits - n; i < num_bits; i++) {
2000200a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000200c:	3301      	adds	r3, #1
2000200e:	637b      	str	r3, [r7, #52]	@ 0x34
20002010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20002012:	68bb      	ldr	r3, [r7, #8]
20002014:	429a      	cmp	r2, r3
20002016:	d3de      	bcc.n	20001fd6 <shift_right_bitstream_lsb+0xee>
    }
}
20002018:	3744      	adds	r7, #68	@ 0x44
2000201a:	46bd      	mov	sp, r7
2000201c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002020:	4770      	bx	lr
	...

20002024 <JTAG_Sequence>:
//   info:   sequence information
//   tdi:    pointer to TDI generated data
//   tdo:    pointer to TDO captured data
//   return: none
void JTAG_Sequence (uint32_t count, const uint8_t *request, uint8_t *response)
{
20002024:	b580      	push	{r7, lr}
20002026:	b08e      	sub	sp, #56	@ 0x38
20002028:	af00      	add	r7, sp, #0
2000202a:	60f8      	str	r0, [r7, #12]
2000202c:	60b9      	str	r1, [r7, #8]
2000202e:	607a      	str	r2, [r7, #4]
  uint32_t total_write_bit_cnt = 0;
20002030:	2300      	movs	r3, #0
20002032:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t total_read_bit_cnt = 0;
20002034:	2300      	movs	r3, #0
20002036:	633b      	str	r3, [r7, #48]	@ 0x30

  uint32_t total_write_word_cnt = 0;
20002038:	2300      	movs	r3, #0
2000203a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t total_read_word_cnt = 0;
2000203c:	2300      	movs	r3, #0
2000203e:	623b      	str	r3, [r7, #32]

  uint32_t tdo_capture_index = 0;
20002040:	2300      	movs	r3, #0
20002042:	61fb      	str	r3, [r7, #28]

  uint32_t tms_seq_val = 0;
20002044:	2300      	movs	r3, #0
20002046:	61bb      	str	r3, [r7, #24]

  uint32_t i;


  for(i = 0; i < count; i++)
20002048:	2300      	movs	r3, #0
2000204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000204c:	e038      	b.n	200020c0 <JTAG_Sequence+0x9c>
  {
	  uint32_t n;

	  uint8_t tms_val = (*request & JTAG_SEQUENCE_TMS) >> 6;
2000204e:	68bb      	ldr	r3, [r7, #8]
20002050:	781b      	ldrb	r3, [r3, #0]
20002052:	099b      	lsrs	r3, r3, #6
20002054:	b2db      	uxtb	r3, r3
20002056:	f003 0301 	and.w	r3, r3, #1
2000205a:	75fb      	strb	r3, [r7, #23]

	  uint8_t tdi_val = *(request +1);
2000205c:	68bb      	ldr	r3, [r7, #8]
2000205e:	3301      	adds	r3, #1
20002060:	781b      	ldrb	r3, [r3, #0]
20002062:	75bb      	strb	r3, [r7, #22]

	  n = *request & JTAG_SEQUENCE_TCK;
20002064:	68bb      	ldr	r3, [r7, #8]
20002066:	781b      	ldrb	r3, [r3, #0]
20002068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
2000206c:	62bb      	str	r3, [r7, #40]	@ 0x28

	  if (n == 0U)
2000206e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002070:	2b00      	cmp	r3, #0
20002072:	d101      	bne.n	20002078 <JTAG_Sequence+0x54>
	  {
		  n = 64U;
20002074:	2340      	movs	r3, #64	@ 0x40
20002076:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }

	  fill_tms_buffer(total_write_bit_cnt, n, tms_val);
20002078:	7dfb      	ldrb	r3, [r7, #23]
2000207a:	461a      	mov	r2, r3
2000207c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2000207e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
20002080:	f7ff fe72 	bl	20001d68 <fill_tms_buffer>
	  fill_tdi_buffer(total_write_bit_cnt, n, (request +1));
20002084:	68bb      	ldr	r3, [r7, #8]
20002086:	3301      	adds	r3, #1
20002088:	461a      	mov	r2, r3
2000208a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2000208c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
2000208e:	f7ff fe99 	bl	20001dc4 <fill_tdi_buffer>


	  total_write_bit_cnt += n;
20002092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20002094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002096:	4413      	add	r3, r2
20002098:	637b      	str	r3, [r7, #52]	@ 0x34

	  if(*request & JTAG_SEQUENCE_TDO)
2000209a:	68bb      	ldr	r3, [r7, #8]
2000209c:	781b      	ldrb	r3, [r3, #0]
2000209e:	b25b      	sxtb	r3, r3
200020a0:	2b00      	cmp	r3, #0
200020a2:	da03      	bge.n	200020ac <JTAG_Sequence+0x88>
	  {
		  total_read_bit_cnt += n;
200020a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
200020a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200020a8:	4413      	add	r3, r2
200020aa:	633b      	str	r3, [r7, #48]	@ 0x30
	  }


	  request += ( (n + 7U) /8U ) + 1;
200020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200020ae:	3307      	adds	r3, #7
200020b0:	08db      	lsrs	r3, r3, #3
200020b2:	3301      	adds	r3, #1
200020b4:	68ba      	ldr	r2, [r7, #8]
200020b6:	4413      	add	r3, r2
200020b8:	60bb      	str	r3, [r7, #8]
  for(i = 0; i < count; i++)
200020ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200020bc:	3301      	adds	r3, #1
200020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
200020c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200020c2:	68fb      	ldr	r3, [r7, #12]
200020c4:	429a      	cmp	r2, r3
200020c6:	d3c2      	bcc.n	2000204e <JTAG_Sequence+0x2a>

  }

  apply_jtag_xfer(TDI_SEQ_ARR, TMS_SEQ_ARR, TDO_SEQ_ARR, total_write_bit_cnt);
200020c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200020ca:	4a07      	ldr	r2, [pc, #28]	@ (200020e8 <JTAG_Sequence+0xc4>)
200020cc:	4907      	ldr	r1, [pc, #28]	@ (200020ec <JTAG_Sequence+0xc8>)
200020ce:	4808      	ldr	r0, [pc, #32]	@ (200020f0 <JTAG_Sequence+0xcc>)
200020d0:	f7ff fea6 	bl	20001e20 <apply_jtag_xfer>

  //shift_bitstream_lsb(TDO_SEQ_ARR, total_read_bit_cnt, -7);

  //shift_right_bitstream_lsb(TDO_SEQ_ARR, 327, 7);

  shift_right_bitstream_lsb(TDO_SEQ_ARR, total_write_bit_cnt, 7);
200020d4:	2207      	movs	r2, #7
200020d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
200020d8:	4803      	ldr	r0, [pc, #12]	@ (200020e8 <JTAG_Sequence+0xc4>)
200020da:	f7ff ff05 	bl	20001ee8 <shift_right_bitstream_lsb>

}
200020de:	bf00      	nop
200020e0:	3738      	adds	r7, #56	@ 0x38
200020e2:	46bd      	mov	sp, r7
200020e4:	bd80      	pop	{r7, pc}
200020e6:	bf00      	nop
200020e8:	2000cc18 	.word	0x2000cc18
200020ec:	2000c418 	.word	0x2000c418
200020f0:	2000c818 	.word	0x2000c818

200020f4 <JTAG_IR_Fast>:
}


#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_FAST()
JTAG_IR_Function(Fast)
200020f4:	b580      	push	{r7, lr}
200020f6:	b084      	sub	sp, #16
200020f8:	af00      	add	r7, sp, #0
200020fa:	6078      	str	r0, [r7, #4]
200020fc:	f7ff fda8 	bl	20001c50 <PIN_SWDIO_TMS_SET>
20002100:	f7ff fd9f 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
  __NOP();
#endif
#if (DELAY_FAST_CYCLES >= 3U)
  __NOP();
#endif
}
20002104:	bf00      	nop
20002106:	f7ff fd95 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000210a:	bf00      	nop
2000210c:	f7ff fd99 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002110:	bf00      	nop
20002112:	f7ff fd8f 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002116:	bf00      	nop
20002118:	f7ff fda6 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
2000211c:	f7ff fd91 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002120:	bf00      	nop
20002122:	f7ff fd87 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002126:	bf00      	nop
20002128:	f7ff fd8b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000212c:	bf00      	nop
2000212e:	f7ff fd81 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002132:	bf00      	nop
20002134:	2001      	movs	r0, #1
20002136:	f7ff fda3 	bl	20001c80 <PIN_TDI_OUT>
2000213a:	4b3f      	ldr	r3, [pc, #252]	@ (20002238 <JTAG_IR_Fast+0x144>)
2000213c:	7e5b      	ldrb	r3, [r3, #25]
2000213e:	4a3e      	ldr	r2, [pc, #248]	@ (20002238 <JTAG_IR_Fast+0x144>)
20002140:	3310      	adds	r3, #16
20002142:	005b      	lsls	r3, r3, #1
20002144:	4413      	add	r3, r2
20002146:	885b      	ldrh	r3, [r3, #2]
20002148:	60fb      	str	r3, [r7, #12]
2000214a:	e008      	b.n	2000215e <JTAG_IR_Fast+0x6a>
2000214c:	f7ff fd79 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002150:	bf00      	nop
20002152:	f7ff fd6f 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002156:	bf00      	nop
20002158:	68fb      	ldr	r3, [r7, #12]
2000215a:	3b01      	subs	r3, #1
2000215c:	60fb      	str	r3, [r7, #12]
2000215e:	68fb      	ldr	r3, [r7, #12]
20002160:	2b00      	cmp	r3, #0
20002162:	d1f3      	bne.n	2000214c <JTAG_IR_Fast+0x58>
20002164:	4b34      	ldr	r3, [pc, #208]	@ (20002238 <JTAG_IR_Fast+0x144>)
20002166:	7e5b      	ldrb	r3, [r3, #25]
20002168:	461a      	mov	r2, r3
2000216a:	4b33      	ldr	r3, [pc, #204]	@ (20002238 <JTAG_IR_Fast+0x144>)
2000216c:	4413      	add	r3, r2
2000216e:	7e9b      	ldrb	r3, [r3, #26]
20002170:	3b01      	subs	r3, #1
20002172:	60fb      	str	r3, [r7, #12]
20002174:	e00e      	b.n	20002194 <JTAG_IR_Fast+0xa0>
20002176:	6878      	ldr	r0, [r7, #4]
20002178:	f7ff fd82 	bl	20001c80 <PIN_TDI_OUT>
2000217c:	f7ff fd61 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002180:	bf00      	nop
20002182:	f7ff fd57 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002186:	bf00      	nop
20002188:	687b      	ldr	r3, [r7, #4]
2000218a:	085b      	lsrs	r3, r3, #1
2000218c:	607b      	str	r3, [r7, #4]
2000218e:	68fb      	ldr	r3, [r7, #12]
20002190:	3b01      	subs	r3, #1
20002192:	60fb      	str	r3, [r7, #12]
20002194:	68fb      	ldr	r3, [r7, #12]
20002196:	2b00      	cmp	r3, #0
20002198:	d1ed      	bne.n	20002176 <JTAG_IR_Fast+0x82>
2000219a:	4b27      	ldr	r3, [pc, #156]	@ (20002238 <JTAG_IR_Fast+0x144>)
2000219c:	7e5b      	ldrb	r3, [r3, #25]
2000219e:	4a26      	ldr	r2, [pc, #152]	@ (20002238 <JTAG_IR_Fast+0x144>)
200021a0:	3318      	adds	r3, #24
200021a2:	005b      	lsls	r3, r3, #1
200021a4:	4413      	add	r3, r2
200021a6:	885b      	ldrh	r3, [r3, #2]
200021a8:	60fb      	str	r3, [r7, #12]
200021aa:	68fb      	ldr	r3, [r7, #12]
200021ac:	2b00      	cmp	r3, #0
200021ae:	d023      	beq.n	200021f8 <JTAG_IR_Fast+0x104>
200021b0:	6878      	ldr	r0, [r7, #4]
200021b2:	f7ff fd65 	bl	20001c80 <PIN_TDI_OUT>
200021b6:	f7ff fd44 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200021ba:	bf00      	nop
200021bc:	f7ff fd3a 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200021c0:	bf00      	nop
200021c2:	2001      	movs	r0, #1
200021c4:	f7ff fd5c 	bl	20001c80 <PIN_TDI_OUT>
200021c8:	68fb      	ldr	r3, [r7, #12]
200021ca:	3b01      	subs	r3, #1
200021cc:	60fb      	str	r3, [r7, #12]
200021ce:	e008      	b.n	200021e2 <JTAG_IR_Fast+0xee>
200021d0:	f7ff fd37 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200021d4:	bf00      	nop
200021d6:	f7ff fd2d 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200021da:	bf00      	nop
200021dc:	68fb      	ldr	r3, [r7, #12]
200021de:	3b01      	subs	r3, #1
200021e0:	60fb      	str	r3, [r7, #12]
200021e2:	68fb      	ldr	r3, [r7, #12]
200021e4:	2b00      	cmp	r3, #0
200021e6:	d1f3      	bne.n	200021d0 <JTAG_IR_Fast+0xdc>
200021e8:	f7ff fd32 	bl	20001c50 <PIN_SWDIO_TMS_SET>
200021ec:	f7ff fd29 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200021f0:	bf00      	nop
200021f2:	f7ff fd1f 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200021f6:	e00a      	b.n	2000220e <JTAG_IR_Fast+0x11a>
200021f8:	f7ff fd2a 	bl	20001c50 <PIN_SWDIO_TMS_SET>
200021fc:	6878      	ldr	r0, [r7, #4]
200021fe:	f7ff fd3f 	bl	20001c80 <PIN_TDI_OUT>
20002202:	f7ff fd1e 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002206:	bf00      	nop
20002208:	f7ff fd14 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000220c:	bf00      	nop
2000220e:	f7ff fd18 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002212:	bf00      	nop
20002214:	f7ff fd0e 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002218:	bf00      	nop
2000221a:	f7ff fd25 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
2000221e:	f7ff fd10 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002222:	bf00      	nop
20002224:	f7ff fd06 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002228:	bf00      	nop
2000222a:	2001      	movs	r0, #1
2000222c:	f7ff fd28 	bl	20001c80 <PIN_TDI_OUT>
20002230:	3710      	adds	r7, #16
20002232:	46bd      	mov	sp, r7
20002234:	bd80      	pop	{r7, pc}
20002236:	bf00      	nop
20002238:	2000c3d0 	.word	0x2000c3d0

2000223c <JTAG_TransferFast>:
JTAG_TransferFunction(Fast)
2000223c:	b580      	push	{r7, lr}
2000223e:	b086      	sub	sp, #24
20002240:	af00      	add	r7, sp, #0
20002242:	6078      	str	r0, [r7, #4]
20002244:	6039      	str	r1, [r7, #0]
20002246:	f7ff fd03 	bl	20001c50 <PIN_SWDIO_TMS_SET>
2000224a:	f7ff fcfa 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000224e:	bf00      	nop
20002250:	f7ff fcf0 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002254:	bf00      	nop
20002256:	f7ff fd07 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
2000225a:	f7ff fcf2 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000225e:	bf00      	nop
20002260:	f7ff fce8 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002264:	bf00      	nop
20002266:	f7ff fcec 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000226a:	bf00      	nop
2000226c:	f7ff fce2 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002270:	bf00      	nop
20002272:	4b9a      	ldr	r3, [pc, #616]	@ (200024dc <JTAG_TransferFast+0x2a0>)
20002274:	7e5b      	ldrb	r3, [r3, #25]
20002276:	60fb      	str	r3, [r7, #12]
20002278:	e008      	b.n	2000228c <JTAG_TransferFast+0x50>
2000227a:	f7ff fce2 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000227e:	bf00      	nop
20002280:	f7ff fcd8 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002284:	bf00      	nop
20002286:	68fb      	ldr	r3, [r7, #12]
20002288:	3b01      	subs	r3, #1
2000228a:	60fb      	str	r3, [r7, #12]
2000228c:	68fb      	ldr	r3, [r7, #12]
2000228e:	2b00      	cmp	r3, #0
20002290:	d1f3      	bne.n	2000227a <JTAG_TransferFast+0x3e>
20002292:	687b      	ldr	r3, [r7, #4]
20002294:	085b      	lsrs	r3, r3, #1
20002296:	4618      	mov	r0, r3
20002298:	f7ff fcf2 	bl	20001c80 <PIN_TDI_OUT>
2000229c:	f7ff fcd1 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200022a0:	bf00      	nop
200022a2:	f7ff fcf7 	bl	20001c94 <PIN_TDO_IN>
200022a6:	6178      	str	r0, [r7, #20]
200022a8:	f7ff fcc4 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200022ac:	bf00      	nop
200022ae:	697b      	ldr	r3, [r7, #20]
200022b0:	005b      	lsls	r3, r3, #1
200022b2:	60bb      	str	r3, [r7, #8]
200022b4:	687b      	ldr	r3, [r7, #4]
200022b6:	089b      	lsrs	r3, r3, #2
200022b8:	4618      	mov	r0, r3
200022ba:	f7ff fce1 	bl	20001c80 <PIN_TDI_OUT>
200022be:	f7ff fcc0 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200022c2:	bf00      	nop
200022c4:	f7ff fce6 	bl	20001c94 <PIN_TDO_IN>
200022c8:	6178      	str	r0, [r7, #20]
200022ca:	f7ff fcb3 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200022ce:	bf00      	nop
200022d0:	68ba      	ldr	r2, [r7, #8]
200022d2:	697b      	ldr	r3, [r7, #20]
200022d4:	4313      	orrs	r3, r2
200022d6:	60bb      	str	r3, [r7, #8]
200022d8:	687b      	ldr	r3, [r7, #4]
200022da:	08db      	lsrs	r3, r3, #3
200022dc:	4618      	mov	r0, r3
200022de:	f7ff fccf 	bl	20001c80 <PIN_TDI_OUT>
200022e2:	f7ff fcae 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200022e6:	bf00      	nop
200022e8:	f7ff fcd4 	bl	20001c94 <PIN_TDO_IN>
200022ec:	6178      	str	r0, [r7, #20]
200022ee:	f7ff fca1 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200022f2:	bf00      	nop
200022f4:	697b      	ldr	r3, [r7, #20]
200022f6:	009b      	lsls	r3, r3, #2
200022f8:	68ba      	ldr	r2, [r7, #8]
200022fa:	4313      	orrs	r3, r2
200022fc:	60bb      	str	r3, [r7, #8]
200022fe:	68bb      	ldr	r3, [r7, #8]
20002300:	2b01      	cmp	r3, #1
20002302:	d008      	beq.n	20002316 <JTAG_TransferFast+0xda>
20002304:	f7ff fca4 	bl	20001c50 <PIN_SWDIO_TMS_SET>
20002308:	f7ff fc9b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000230c:	bf00      	nop
2000230e:	f7ff fc91 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002312:	bf00      	nop
20002314:	e0b2      	b.n	2000247c <JTAG_TransferFast+0x240>
20002316:	687b      	ldr	r3, [r7, #4]
20002318:	f003 0302 	and.w	r3, r3, #2
2000231c:	2b00      	cmp	r3, #0
2000231e:	d05e      	beq.n	200023de <JTAG_TransferFast+0x1a2>
20002320:	2300      	movs	r3, #0
20002322:	613b      	str	r3, [r7, #16]
20002324:	231f      	movs	r3, #31
20002326:	60fb      	str	r3, [r7, #12]
20002328:	e013      	b.n	20002352 <JTAG_TransferFast+0x116>
2000232a:	f7ff fc8a 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000232e:	bf00      	nop
20002330:	f7ff fcb0 	bl	20001c94 <PIN_TDO_IN>
20002334:	6178      	str	r0, [r7, #20]
20002336:	f7ff fc7d 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000233a:	bf00      	nop
2000233c:	697b      	ldr	r3, [r7, #20]
2000233e:	07db      	lsls	r3, r3, #31
20002340:	693a      	ldr	r2, [r7, #16]
20002342:	4313      	orrs	r3, r2
20002344:	613b      	str	r3, [r7, #16]
20002346:	693b      	ldr	r3, [r7, #16]
20002348:	085b      	lsrs	r3, r3, #1
2000234a:	613b      	str	r3, [r7, #16]
2000234c:	68fb      	ldr	r3, [r7, #12]
2000234e:	3b01      	subs	r3, #1
20002350:	60fb      	str	r3, [r7, #12]
20002352:	68fb      	ldr	r3, [r7, #12]
20002354:	2b00      	cmp	r3, #0
20002356:	d1e8      	bne.n	2000232a <JTAG_TransferFast+0xee>
20002358:	4b60      	ldr	r3, [pc, #384]	@ (200024dc <JTAG_TransferFast+0x2a0>)
2000235a:	7e1b      	ldrb	r3, [r3, #24]
2000235c:	461a      	mov	r2, r3
2000235e:	4b5f      	ldr	r3, [pc, #380]	@ (200024dc <JTAG_TransferFast+0x2a0>)
20002360:	7e5b      	ldrb	r3, [r3, #25]
20002362:	1ad3      	subs	r3, r2, r3
20002364:	3b01      	subs	r3, #1
20002366:	60fb      	str	r3, [r7, #12]
20002368:	68fb      	ldr	r3, [r7, #12]
2000236a:	2b00      	cmp	r3, #0
2000236c:	d020      	beq.n	200023b0 <JTAG_TransferFast+0x174>
2000236e:	f7ff fc68 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002372:	bf00      	nop
20002374:	f7ff fc8e 	bl	20001c94 <PIN_TDO_IN>
20002378:	6178      	str	r0, [r7, #20]
2000237a:	f7ff fc5b 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000237e:	bf00      	nop
20002380:	68fb      	ldr	r3, [r7, #12]
20002382:	3b01      	subs	r3, #1
20002384:	60fb      	str	r3, [r7, #12]
20002386:	e008      	b.n	2000239a <JTAG_TransferFast+0x15e>
20002388:	f7ff fc5b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000238c:	bf00      	nop
2000238e:	f7ff fc51 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002392:	bf00      	nop
20002394:	68fb      	ldr	r3, [r7, #12]
20002396:	3b01      	subs	r3, #1
20002398:	60fb      	str	r3, [r7, #12]
2000239a:	68fb      	ldr	r3, [r7, #12]
2000239c:	2b00      	cmp	r3, #0
2000239e:	d1f3      	bne.n	20002388 <JTAG_TransferFast+0x14c>
200023a0:	f7ff fc56 	bl	20001c50 <PIN_SWDIO_TMS_SET>
200023a4:	f7ff fc4d 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200023a8:	bf00      	nop
200023aa:	f7ff fc43 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200023ae:	e00a      	b.n	200023c6 <JTAG_TransferFast+0x18a>
200023b0:	f7ff fc4e 	bl	20001c50 <PIN_SWDIO_TMS_SET>
200023b4:	f7ff fc45 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200023b8:	bf00      	nop
200023ba:	f7ff fc6b 	bl	20001c94 <PIN_TDO_IN>
200023be:	6178      	str	r0, [r7, #20]
200023c0:	f7ff fc38 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200023c4:	bf00      	nop
200023c6:	697b      	ldr	r3, [r7, #20]
200023c8:	07db      	lsls	r3, r3, #31
200023ca:	693a      	ldr	r2, [r7, #16]
200023cc:	4313      	orrs	r3, r2
200023ce:	613b      	str	r3, [r7, #16]
200023d0:	683b      	ldr	r3, [r7, #0]
200023d2:	2b00      	cmp	r3, #0
200023d4:	d052      	beq.n	2000247c <JTAG_TransferFast+0x240>
200023d6:	683b      	ldr	r3, [r7, #0]
200023d8:	693a      	ldr	r2, [r7, #16]
200023da:	601a      	str	r2, [r3, #0]
200023dc:	e04e      	b.n	2000247c <JTAG_TransferFast+0x240>
200023de:	683b      	ldr	r3, [r7, #0]
200023e0:	681b      	ldr	r3, [r3, #0]
200023e2:	613b      	str	r3, [r7, #16]
200023e4:	231f      	movs	r3, #31
200023e6:	60fb      	str	r3, [r7, #12]
200023e8:	e00e      	b.n	20002408 <JTAG_TransferFast+0x1cc>
200023ea:	6938      	ldr	r0, [r7, #16]
200023ec:	f7ff fc48 	bl	20001c80 <PIN_TDI_OUT>
200023f0:	f7ff fc27 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200023f4:	bf00      	nop
200023f6:	f7ff fc1d 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200023fa:	bf00      	nop
200023fc:	693b      	ldr	r3, [r7, #16]
200023fe:	085b      	lsrs	r3, r3, #1
20002400:	613b      	str	r3, [r7, #16]
20002402:	68fb      	ldr	r3, [r7, #12]
20002404:	3b01      	subs	r3, #1
20002406:	60fb      	str	r3, [r7, #12]
20002408:	68fb      	ldr	r3, [r7, #12]
2000240a:	2b00      	cmp	r3, #0
2000240c:	d1ed      	bne.n	200023ea <JTAG_TransferFast+0x1ae>
2000240e:	4b33      	ldr	r3, [pc, #204]	@ (200024dc <JTAG_TransferFast+0x2a0>)
20002410:	7e1b      	ldrb	r3, [r3, #24]
20002412:	461a      	mov	r2, r3
20002414:	4b31      	ldr	r3, [pc, #196]	@ (200024dc <JTAG_TransferFast+0x2a0>)
20002416:	7e5b      	ldrb	r3, [r3, #25]
20002418:	1ad3      	subs	r3, r2, r3
2000241a:	3b01      	subs	r3, #1
2000241c:	60fb      	str	r3, [r7, #12]
2000241e:	68fb      	ldr	r3, [r7, #12]
20002420:	2b00      	cmp	r3, #0
20002422:	d020      	beq.n	20002466 <JTAG_TransferFast+0x22a>
20002424:	6938      	ldr	r0, [r7, #16]
20002426:	f7ff fc2b 	bl	20001c80 <PIN_TDI_OUT>
2000242a:	f7ff fc0a 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000242e:	bf00      	nop
20002430:	f7ff fc00 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002434:	bf00      	nop
20002436:	68fb      	ldr	r3, [r7, #12]
20002438:	3b01      	subs	r3, #1
2000243a:	60fb      	str	r3, [r7, #12]
2000243c:	e008      	b.n	20002450 <JTAG_TransferFast+0x214>
2000243e:	f7ff fc00 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002442:	bf00      	nop
20002444:	f7ff fbf6 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002448:	bf00      	nop
2000244a:	68fb      	ldr	r3, [r7, #12]
2000244c:	3b01      	subs	r3, #1
2000244e:	60fb      	str	r3, [r7, #12]
20002450:	68fb      	ldr	r3, [r7, #12]
20002452:	2b00      	cmp	r3, #0
20002454:	d1f3      	bne.n	2000243e <JTAG_TransferFast+0x202>
20002456:	f7ff fbfb 	bl	20001c50 <PIN_SWDIO_TMS_SET>
2000245a:	f7ff fbf2 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000245e:	bf00      	nop
20002460:	f7ff fbe8 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002464:	e00a      	b.n	2000247c <JTAG_TransferFast+0x240>
20002466:	f7ff fbf3 	bl	20001c50 <PIN_SWDIO_TMS_SET>
2000246a:	6938      	ldr	r0, [r7, #16]
2000246c:	f7ff fc08 	bl	20001c80 <PIN_TDI_OUT>
20002470:	f7ff fbe7 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002474:	bf00      	nop
20002476:	f7ff fbdd 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000247a:	bf00      	nop
2000247c:	f7ff fbe1 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002480:	bf00      	nop
20002482:	f7ff fbd7 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002486:	bf00      	nop
20002488:	f7ff fbee 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
2000248c:	f7ff fbd9 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002490:	bf00      	nop
20002492:	f7ff fbcf 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002496:	bf00      	nop
20002498:	2001      	movs	r0, #1
2000249a:	f7ff fbf1 	bl	20001c80 <PIN_TDI_OUT>
2000249e:	687b      	ldr	r3, [r7, #4]
200024a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200024a4:	2b00      	cmp	r3, #0
200024a6:	d004      	beq.n	200024b2 <JTAG_TransferFast+0x276>
200024a8:	f7ff fbfc 	bl	20001ca4 <TIMESTAMP_GET>
200024ac:	4603      	mov	r3, r0
200024ae:	4a0b      	ldr	r2, [pc, #44]	@ (200024dc <JTAG_TransferFast+0x2a0>)
200024b0:	6093      	str	r3, [r2, #8]
200024b2:	4b0a      	ldr	r3, [pc, #40]	@ (200024dc <JTAG_TransferFast+0x2a0>)
200024b4:	7b1b      	ldrb	r3, [r3, #12]
200024b6:	60fb      	str	r3, [r7, #12]
200024b8:	e005      	b.n	200024c6 <JTAG_TransferFast+0x28a>
200024ba:	f7ff fbc2 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200024be:	bf00      	nop
200024c0:	f7ff fbb8 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200024c4:	bf00      	nop
200024c6:	68fb      	ldr	r3, [r7, #12]
200024c8:	1e5a      	subs	r2, r3, #1
200024ca:	60fa      	str	r2, [r7, #12]
200024cc:	2b00      	cmp	r3, #0
200024ce:	d1f4      	bne.n	200024ba <JTAG_TransferFast+0x27e>
200024d0:	68bb      	ldr	r3, [r7, #8]
200024d2:	b2db      	uxtb	r3, r3
200024d4:	4618      	mov	r0, r3
200024d6:	3718      	adds	r7, #24
200024d8:	46bd      	mov	sp, r7
200024da:	bd80      	pop	{r7, pc}
200024dc:	2000c3d0 	.word	0x2000c3d0

200024e0 <JTAG_IR_Slow>:

#undef  PIN_DELAY
#define PIN_DELAY() PIN_DELAY_SLOW(DAP_Data.clock_delay)
JTAG_IR_Function(Slow)
200024e0:	b580      	push	{r7, lr}
200024e2:	b09c      	sub	sp, #112	@ 0x70
200024e4:	af00      	add	r7, sp, #0
200024e6:	6078      	str	r0, [r7, #4]
200024e8:	f7ff fbb2 	bl	20001c50 <PIN_SWDIO_TMS_SET>
200024ec:	f7ff fba9 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200024f0:	4b63      	ldr	r3, [pc, #396]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
200024f2:	685b      	ldr	r3, [r3, #4]
200024f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
200024f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200024f8:	3b01      	subs	r3, #1
200024fa:	d1fd      	bne.n	200024f8 <JTAG_IR_Slow+0x18>
200024fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
200024fe:	bf00      	nop
20002500:	f7ff fb98 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002504:	4b5e      	ldr	r3, [pc, #376]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002506:	685b      	ldr	r3, [r3, #4]
20002508:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
2000250a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000250c:	3b01      	subs	r3, #1
2000250e:	d1fd      	bne.n	2000250c <JTAG_IR_Slow+0x2c>
20002510:	653b      	str	r3, [r7, #80]	@ 0x50
}
20002512:	bf00      	nop
20002514:	f7ff fb95 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002518:	4b59      	ldr	r3, [pc, #356]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
2000251a:	685b      	ldr	r3, [r3, #4]
2000251c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
2000251e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20002520:	3b01      	subs	r3, #1
20002522:	d1fd      	bne.n	20002520 <JTAG_IR_Slow+0x40>
20002524:	657b      	str	r3, [r7, #84]	@ 0x54
}
20002526:	bf00      	nop
20002528:	f7ff fb84 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000252c:	4b54      	ldr	r3, [pc, #336]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
2000252e:	685b      	ldr	r3, [r3, #4]
20002530:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20002532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20002534:	3b01      	subs	r3, #1
20002536:	d1fd      	bne.n	20002534 <JTAG_IR_Slow+0x54>
20002538:	65bb      	str	r3, [r7, #88]	@ 0x58
}
2000253a:	bf00      	nop
2000253c:	f7ff fb94 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
20002540:	f7ff fb7f 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002544:	4b4e      	ldr	r3, [pc, #312]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002546:	685b      	ldr	r3, [r3, #4]
20002548:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
2000254a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
2000254c:	3b01      	subs	r3, #1
2000254e:	d1fd      	bne.n	2000254c <JTAG_IR_Slow+0x6c>
20002550:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20002552:	bf00      	nop
20002554:	f7ff fb6e 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002558:	4b49      	ldr	r3, [pc, #292]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
2000255a:	685b      	ldr	r3, [r3, #4]
2000255c:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
2000255e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20002560:	3b01      	subs	r3, #1
20002562:	d1fd      	bne.n	20002560 <JTAG_IR_Slow+0x80>
20002564:	663b      	str	r3, [r7, #96]	@ 0x60
}
20002566:	bf00      	nop
20002568:	f7ff fb6b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000256c:	4b44      	ldr	r3, [pc, #272]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
2000256e:	685b      	ldr	r3, [r3, #4]
20002570:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20002572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002574:	3b01      	subs	r3, #1
20002576:	d1fd      	bne.n	20002574 <JTAG_IR_Slow+0x94>
20002578:	667b      	str	r3, [r7, #100]	@ 0x64
}
2000257a:	bf00      	nop
2000257c:	f7ff fb5a 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002580:	4b3f      	ldr	r3, [pc, #252]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002582:	685b      	ldr	r3, [r3, #4]
20002584:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
20002586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20002588:	3b01      	subs	r3, #1
2000258a:	d1fd      	bne.n	20002588 <JTAG_IR_Slow+0xa8>
2000258c:	66bb      	str	r3, [r7, #104]	@ 0x68
}
2000258e:	bf00      	nop
20002590:	2001      	movs	r0, #1
20002592:	f7ff fb75 	bl	20001c80 <PIN_TDI_OUT>
20002596:	4b3a      	ldr	r3, [pc, #232]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002598:	7e5b      	ldrb	r3, [r3, #25]
2000259a:	4a39      	ldr	r2, [pc, #228]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
2000259c:	3310      	adds	r3, #16
2000259e:	005b      	lsls	r3, r3, #1
200025a0:	4413      	add	r3, r2
200025a2:	885b      	ldrh	r3, [r3, #2]
200025a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
200025a6:	e016      	b.n	200025d6 <JTAG_IR_Slow+0xf6>
200025a8:	f7ff fb4b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200025ac:	4b34      	ldr	r3, [pc, #208]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
200025ae:	685b      	ldr	r3, [r3, #4]
200025b0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
200025b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200025b4:	3b01      	subs	r3, #1
200025b6:	d1fd      	bne.n	200025b4 <JTAG_IR_Slow+0xd4>
200025b8:	647b      	str	r3, [r7, #68]	@ 0x44
}
200025ba:	bf00      	nop
200025bc:	f7ff fb3a 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200025c0:	4b2f      	ldr	r3, [pc, #188]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
200025c2:	685b      	ldr	r3, [r3, #4]
200025c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
200025c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
200025c8:	3b01      	subs	r3, #1
200025ca:	d1fd      	bne.n	200025c8 <JTAG_IR_Slow+0xe8>
200025cc:	64bb      	str	r3, [r7, #72]	@ 0x48
}
200025ce:	bf00      	nop
200025d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200025d2:	3b01      	subs	r3, #1
200025d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
200025d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200025d8:	2b00      	cmp	r3, #0
200025da:	d1e5      	bne.n	200025a8 <JTAG_IR_Slow+0xc8>
200025dc:	4b28      	ldr	r3, [pc, #160]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
200025de:	7e5b      	ldrb	r3, [r3, #25]
200025e0:	461a      	mov	r2, r3
200025e2:	4b27      	ldr	r3, [pc, #156]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
200025e4:	4413      	add	r3, r2
200025e6:	7e9b      	ldrb	r3, [r3, #26]
200025e8:	3b01      	subs	r3, #1
200025ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
200025ec:	e01c      	b.n	20002628 <JTAG_IR_Slow+0x148>
200025ee:	6878      	ldr	r0, [r7, #4]
200025f0:	f7ff fb46 	bl	20001c80 <PIN_TDI_OUT>
200025f4:	f7ff fb25 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200025f8:	4b21      	ldr	r3, [pc, #132]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
200025fa:	685b      	ldr	r3, [r3, #4]
200025fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
200025fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002600:	3b01      	subs	r3, #1
20002602:	d1fd      	bne.n	20002600 <JTAG_IR_Slow+0x120>
20002604:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20002606:	bf00      	nop
20002608:	f7ff fb14 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000260c:	4b1c      	ldr	r3, [pc, #112]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
2000260e:	685b      	ldr	r3, [r3, #4]
20002610:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20002612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002614:	3b01      	subs	r3, #1
20002616:	d1fd      	bne.n	20002614 <JTAG_IR_Slow+0x134>
20002618:	643b      	str	r3, [r7, #64]	@ 0x40
}
2000261a:	bf00      	nop
2000261c:	687b      	ldr	r3, [r7, #4]
2000261e:	085b      	lsrs	r3, r3, #1
20002620:	607b      	str	r3, [r7, #4]
20002622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20002624:	3b01      	subs	r3, #1
20002626:	66fb      	str	r3, [r7, #108]	@ 0x6c
20002628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000262a:	2b00      	cmp	r3, #0
2000262c:	d1df      	bne.n	200025ee <JTAG_IR_Slow+0x10e>
2000262e:	4b14      	ldr	r3, [pc, #80]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002630:	7e5b      	ldrb	r3, [r3, #25]
20002632:	4a13      	ldr	r2, [pc, #76]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002634:	3318      	adds	r3, #24
20002636:	005b      	lsls	r3, r3, #1
20002638:	4413      	add	r3, r2
2000263a:	885b      	ldrh	r3, [r3, #2]
2000263c:	66fb      	str	r3, [r7, #108]	@ 0x6c
2000263e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20002640:	2b00      	cmp	r3, #0
20002642:	d04f      	beq.n	200026e4 <JTAG_IR_Slow+0x204>
20002644:	6878      	ldr	r0, [r7, #4]
20002646:	f7ff fb1b 	bl	20001c80 <PIN_TDI_OUT>
2000264a:	f7ff fafa 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000264e:	4b0c      	ldr	r3, [pc, #48]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002650:	685b      	ldr	r3, [r3, #4]
20002652:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20002654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002656:	3b01      	subs	r3, #1
20002658:	d1fd      	bne.n	20002656 <JTAG_IR_Slow+0x176>
2000265a:	637b      	str	r3, [r7, #52]	@ 0x34
}
2000265c:	bf00      	nop
2000265e:	f7ff fae9 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002662:	4b07      	ldr	r3, [pc, #28]	@ (20002680 <JTAG_IR_Slow+0x1a0>)
20002664:	685b      	ldr	r3, [r3, #4]
20002666:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000266a:	3b01      	subs	r3, #1
2000266c:	d1fd      	bne.n	2000266a <JTAG_IR_Slow+0x18a>
2000266e:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20002670:	bf00      	nop
20002672:	2001      	movs	r0, #1
20002674:	f7ff fb04 	bl	20001c80 <PIN_TDI_OUT>
20002678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2000267a:	3b01      	subs	r3, #1
2000267c:	66fb      	str	r3, [r7, #108]	@ 0x6c
2000267e:	e018      	b.n	200026b2 <JTAG_IR_Slow+0x1d2>
20002680:	2000c3d0 	.word	0x2000c3d0
20002684:	f7ff fadd 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002688:	4b3b      	ldr	r3, [pc, #236]	@ (20002778 <JTAG_IR_Slow+0x298>)
2000268a:	685b      	ldr	r3, [r3, #4]
2000268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
2000268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002690:	3b01      	subs	r3, #1
20002692:	d1fd      	bne.n	20002690 <JTAG_IR_Slow+0x1b0>
20002694:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20002696:	bf00      	nop
20002698:	f7ff facc 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000269c:	4b36      	ldr	r3, [pc, #216]	@ (20002778 <JTAG_IR_Slow+0x298>)
2000269e:	685b      	ldr	r3, [r3, #4]
200026a0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
200026a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200026a4:	3b01      	subs	r3, #1
200026a6:	d1fd      	bne.n	200026a4 <JTAG_IR_Slow+0x1c4>
200026a8:	633b      	str	r3, [r7, #48]	@ 0x30
}
200026aa:	bf00      	nop
200026ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200026ae:	3b01      	subs	r3, #1
200026b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
200026b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200026b4:	2b00      	cmp	r3, #0
200026b6:	d1e5      	bne.n	20002684 <JTAG_IR_Slow+0x1a4>
200026b8:	f7ff faca 	bl	20001c50 <PIN_SWDIO_TMS_SET>
200026bc:	f7ff fac1 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200026c0:	4b2d      	ldr	r3, [pc, #180]	@ (20002778 <JTAG_IR_Slow+0x298>)
200026c2:	685b      	ldr	r3, [r3, #4]
200026c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
200026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200026c8:	3b01      	subs	r3, #1
200026ca:	d1fd      	bne.n	200026c8 <JTAG_IR_Slow+0x1e8>
200026cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
200026ce:	bf00      	nop
200026d0:	f7ff fab0 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200026d4:	4b28      	ldr	r3, [pc, #160]	@ (20002778 <JTAG_IR_Slow+0x298>)
200026d6:	685b      	ldr	r3, [r3, #4]
200026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
200026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200026dc:	3b01      	subs	r3, #1
200026de:	d1fd      	bne.n	200026dc <JTAG_IR_Slow+0x1fc>
200026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
200026e2:	e018      	b.n	20002716 <JTAG_IR_Slow+0x236>
200026e4:	f7ff fab4 	bl	20001c50 <PIN_SWDIO_TMS_SET>
200026e8:	6878      	ldr	r0, [r7, #4]
200026ea:	f7ff fac9 	bl	20001c80 <PIN_TDI_OUT>
200026ee:	f7ff faa8 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200026f2:	4b21      	ldr	r3, [pc, #132]	@ (20002778 <JTAG_IR_Slow+0x298>)
200026f4:	685b      	ldr	r3, [r3, #4]
200026f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
200026f8:	69fb      	ldr	r3, [r7, #28]
200026fa:	3b01      	subs	r3, #1
200026fc:	d1fd      	bne.n	200026fa <JTAG_IR_Slow+0x21a>
200026fe:	61fb      	str	r3, [r7, #28]
}
20002700:	bf00      	nop
20002702:	f7ff fa97 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002706:	4b1c      	ldr	r3, [pc, #112]	@ (20002778 <JTAG_IR_Slow+0x298>)
20002708:	685b      	ldr	r3, [r3, #4]
2000270a:	623b      	str	r3, [r7, #32]
  __ASM volatile (
2000270c:	6a3b      	ldr	r3, [r7, #32]
2000270e:	3b01      	subs	r3, #1
20002710:	d1fd      	bne.n	2000270e <JTAG_IR_Slow+0x22e>
20002712:	623b      	str	r3, [r7, #32]
}
20002714:	bf00      	nop
20002716:	f7ff fa94 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000271a:	4b17      	ldr	r3, [pc, #92]	@ (20002778 <JTAG_IR_Slow+0x298>)
2000271c:	685b      	ldr	r3, [r3, #4]
2000271e:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20002720:	68fb      	ldr	r3, [r7, #12]
20002722:	3b01      	subs	r3, #1
20002724:	d1fd      	bne.n	20002722 <JTAG_IR_Slow+0x242>
20002726:	60fb      	str	r3, [r7, #12]
}
20002728:	bf00      	nop
2000272a:	f7ff fa83 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000272e:	4b12      	ldr	r3, [pc, #72]	@ (20002778 <JTAG_IR_Slow+0x298>)
20002730:	685b      	ldr	r3, [r3, #4]
20002732:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20002734:	693b      	ldr	r3, [r7, #16]
20002736:	3b01      	subs	r3, #1
20002738:	d1fd      	bne.n	20002736 <JTAG_IR_Slow+0x256>
2000273a:	613b      	str	r3, [r7, #16]
}
2000273c:	bf00      	nop
2000273e:	f7ff fa93 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
20002742:	f7ff fa7e 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002746:	4b0c      	ldr	r3, [pc, #48]	@ (20002778 <JTAG_IR_Slow+0x298>)
20002748:	685b      	ldr	r3, [r3, #4]
2000274a:	617b      	str	r3, [r7, #20]
  __ASM volatile (
2000274c:	697b      	ldr	r3, [r7, #20]
2000274e:	3b01      	subs	r3, #1
20002750:	d1fd      	bne.n	2000274e <JTAG_IR_Slow+0x26e>
20002752:	617b      	str	r3, [r7, #20]
}
20002754:	bf00      	nop
20002756:	f7ff fa6d 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000275a:	4b07      	ldr	r3, [pc, #28]	@ (20002778 <JTAG_IR_Slow+0x298>)
2000275c:	685b      	ldr	r3, [r3, #4]
2000275e:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20002760:	69bb      	ldr	r3, [r7, #24]
20002762:	3b01      	subs	r3, #1
20002764:	d1fd      	bne.n	20002762 <JTAG_IR_Slow+0x282>
20002766:	61bb      	str	r3, [r7, #24]
}
20002768:	bf00      	nop
2000276a:	2001      	movs	r0, #1
2000276c:	f7ff fa88 	bl	20001c80 <PIN_TDI_OUT>
20002770:	3770      	adds	r7, #112	@ 0x70
20002772:	46bd      	mov	sp, r7
20002774:	bd80      	pop	{r7, pc}
20002776:	bf00      	nop
20002778:	2000c3d0 	.word	0x2000c3d0

2000277c <JTAG_TransferSlow>:
JTAG_TransferFunction(Slow)
2000277c:	b580      	push	{r7, lr}
2000277e:	b0b0      	sub	sp, #192	@ 0xc0
20002780:	af00      	add	r7, sp, #0
20002782:	6078      	str	r0, [r7, #4]
20002784:	6039      	str	r1, [r7, #0]
20002786:	f7ff fa63 	bl	20001c50 <PIN_SWDIO_TMS_SET>
2000278a:	f7ff fa5a 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000278e:	4b8a      	ldr	r3, [pc, #552]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
20002790:	685b      	ldr	r3, [r3, #4]
20002792:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  __ASM volatile (
20002796:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
2000279a:	3b01      	subs	r3, #1
2000279c:	d1fd      	bne.n	2000279a <JTAG_TransferSlow+0x1e>
2000279e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
200027a2:	bf00      	nop
200027a4:	f7ff fa46 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200027a8:	4b83      	ldr	r3, [pc, #524]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
200027aa:	685b      	ldr	r3, [r3, #4]
200027ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  __ASM volatile (
200027b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
200027b4:	3b01      	subs	r3, #1
200027b6:	d1fd      	bne.n	200027b4 <JTAG_TransferSlow+0x38>
200027b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
200027bc:	bf00      	nop
200027be:	f7ff fa53 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
200027c2:	f7ff fa3e 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200027c6:	4b7c      	ldr	r3, [pc, #496]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
200027c8:	685b      	ldr	r3, [r3, #4]
200027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  __ASM volatile (
200027ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
200027d2:	3b01      	subs	r3, #1
200027d4:	d1fd      	bne.n	200027d2 <JTAG_TransferSlow+0x56>
200027d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
200027da:	bf00      	nop
200027dc:	f7ff fa2a 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200027e0:	4b75      	ldr	r3, [pc, #468]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
200027e2:	685b      	ldr	r3, [r3, #4]
200027e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  __ASM volatile (
200027e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
200027ec:	3b01      	subs	r3, #1
200027ee:	d1fd      	bne.n	200027ec <JTAG_TransferSlow+0x70>
200027f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
}
200027f4:	bf00      	nop
200027f6:	f7ff fa24 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200027fa:	4b6f      	ldr	r3, [pc, #444]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
200027fc:	685b      	ldr	r3, [r3, #4]
200027fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  __ASM volatile (
20002802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
20002806:	3b01      	subs	r3, #1
20002808:	d1fd      	bne.n	20002806 <JTAG_TransferSlow+0x8a>
2000280a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
}
2000280e:	bf00      	nop
20002810:	f7ff fa10 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002814:	4b68      	ldr	r3, [pc, #416]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
20002816:	685b      	ldr	r3, [r3, #4]
20002818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  __ASM volatile (
2000281c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
20002820:	3b01      	subs	r3, #1
20002822:	d1fd      	bne.n	20002820 <JTAG_TransferSlow+0xa4>
20002824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
}
20002828:	bf00      	nop
2000282a:	4b63      	ldr	r3, [pc, #396]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
2000282c:	7e5b      	ldrb	r3, [r3, #25]
2000282e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002832:	e01e      	b.n	20002872 <JTAG_TransferSlow+0xf6>
20002834:	f7ff fa05 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002838:	4b5f      	ldr	r3, [pc, #380]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
2000283a:	685b      	ldr	r3, [r3, #4]
2000283c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile (
20002840:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
20002844:	3b01      	subs	r3, #1
20002846:	d1fd      	bne.n	20002844 <JTAG_TransferSlow+0xc8>
20002848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
}
2000284c:	bf00      	nop
2000284e:	f7ff f9f1 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002852:	4b59      	ldr	r3, [pc, #356]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
20002854:	685b      	ldr	r3, [r3, #4]
20002856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  __ASM volatile (
2000285a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
2000285e:	3b01      	subs	r3, #1
20002860:	d1fd      	bne.n	2000285e <JTAG_TransferSlow+0xe2>
20002862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
}
20002866:	bf00      	nop
20002868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
2000286c:	3b01      	subs	r3, #1
2000286e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002876:	2b00      	cmp	r3, #0
20002878:	d1dc      	bne.n	20002834 <JTAG_TransferSlow+0xb8>
2000287a:	687b      	ldr	r3, [r7, #4]
2000287c:	085b      	lsrs	r3, r3, #1
2000287e:	4618      	mov	r0, r3
20002880:	f7ff f9fe 	bl	20001c80 <PIN_TDI_OUT>
20002884:	f7ff f9dd 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002888:	4b4b      	ldr	r3, [pc, #300]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
2000288a:	685b      	ldr	r3, [r3, #4]
2000288c:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
2000288e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20002890:	3b01      	subs	r3, #1
20002892:	d1fd      	bne.n	20002890 <JTAG_TransferSlow+0x114>
20002894:	67bb      	str	r3, [r7, #120]	@ 0x78
}
20002896:	bf00      	nop
20002898:	f7ff f9fc 	bl	20001c94 <PIN_TDO_IN>
2000289c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200028a0:	f7ff f9c8 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200028a4:	4b44      	ldr	r3, [pc, #272]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
200028a6:	685b      	ldr	r3, [r3, #4]
200028a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile (
200028aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200028ac:	3b01      	subs	r3, #1
200028ae:	d1fd      	bne.n	200028ac <JTAG_TransferSlow+0x130>
200028b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
}
200028b2:	bf00      	nop
200028b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
200028b8:	005b      	lsls	r3, r3, #1
200028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
200028be:	687b      	ldr	r3, [r7, #4]
200028c0:	089b      	lsrs	r3, r3, #2
200028c2:	4618      	mov	r0, r3
200028c4:	f7ff f9dc 	bl	20001c80 <PIN_TDI_OUT>
200028c8:	f7ff f9bb 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200028cc:	4b3a      	ldr	r3, [pc, #232]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
200028ce:	685b      	ldr	r3, [r3, #4]
200028d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  __ASM volatile (
200028d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
200028d8:	3b01      	subs	r3, #1
200028da:	d1fd      	bne.n	200028d8 <JTAG_TransferSlow+0x15c>
200028dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
}
200028e0:	bf00      	nop
200028e2:	f7ff f9d7 	bl	20001c94 <PIN_TDO_IN>
200028e6:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200028ea:	f7ff f9a3 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200028ee:	4b32      	ldr	r3, [pc, #200]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
200028f0:	685b      	ldr	r3, [r3, #4]
200028f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  __ASM volatile (
200028f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
200028fa:	3b01      	subs	r3, #1
200028fc:	d1fd      	bne.n	200028fa <JTAG_TransferSlow+0x17e>
200028fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
}
20002902:	bf00      	nop
20002904:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
20002908:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
2000290c:	4313      	orrs	r3, r2
2000290e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20002912:	687b      	ldr	r3, [r7, #4]
20002914:	08db      	lsrs	r3, r3, #3
20002916:	4618      	mov	r0, r3
20002918:	f7ff f9b2 	bl	20001c80 <PIN_TDI_OUT>
2000291c:	f7ff f991 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002920:	4b25      	ldr	r3, [pc, #148]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
20002922:	685b      	ldr	r3, [r3, #4]
20002924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile (
20002928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
2000292c:	3b01      	subs	r3, #1
2000292e:	d1fd      	bne.n	2000292c <JTAG_TransferSlow+0x1b0>
20002930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
}
20002934:	bf00      	nop
20002936:	f7ff f9ad 	bl	20001c94 <PIN_TDO_IN>
2000293a:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
2000293e:	f7ff f979 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002942:	4b1d      	ldr	r3, [pc, #116]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
20002944:	685b      	ldr	r3, [r3, #4]
20002946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  __ASM volatile (
2000294a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
2000294e:	3b01      	subs	r3, #1
20002950:	d1fd      	bne.n	2000294e <JTAG_TransferSlow+0x1d2>
20002952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
}
20002956:	bf00      	nop
20002958:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
2000295c:	009b      	lsls	r3, r3, #2
2000295e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
20002962:	4313      	orrs	r3, r2
20002964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
20002968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
2000296c:	2b01      	cmp	r3, #1
2000296e:	d016      	beq.n	2000299e <JTAG_TransferSlow+0x222>
20002970:	f7ff f96e 	bl	20001c50 <PIN_SWDIO_TMS_SET>
20002974:	f7ff f965 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002978:	4b0f      	ldr	r3, [pc, #60]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
2000297a:	685b      	ldr	r3, [r3, #4]
2000297c:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
2000297e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
20002980:	3b01      	subs	r3, #1
20002982:	d1fd      	bne.n	20002980 <JTAG_TransferSlow+0x204>
20002984:	673b      	str	r3, [r7, #112]	@ 0x70
}
20002986:	bf00      	nop
20002988:	f7ff f954 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000298c:	4b0a      	ldr	r3, [pc, #40]	@ (200029b8 <JTAG_TransferSlow+0x23c>)
2000298e:	685b      	ldr	r3, [r3, #4]
20002990:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
20002992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20002994:	3b01      	subs	r3, #1
20002996:	d1fd      	bne.n	20002994 <JTAG_TransferSlow+0x218>
20002998:	677b      	str	r3, [r7, #116]	@ 0x74
}
2000299a:	bf00      	nop
2000299c:	e16d      	b.n	20002c7a <JTAG_TransferSlow+0x4fe>
2000299e:	687b      	ldr	r3, [r7, #4]
200029a0:	f003 0302 	and.w	r3, r3, #2
200029a4:	2b00      	cmp	r3, #0
200029a6:	f000 80c0 	beq.w	20002b2a <JTAG_TransferSlow+0x3ae>
200029aa:	2300      	movs	r3, #0
200029ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200029b0:	231f      	movs	r3, #31
200029b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
200029b6:	e02b      	b.n	20002a10 <JTAG_TransferSlow+0x294>
200029b8:	2000c3d0 	.word	0x2000c3d0
200029bc:	f7ff f941 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200029c0:	4b86      	ldr	r3, [pc, #536]	@ (20002bdc <JTAG_TransferSlow+0x460>)
200029c2:	685b      	ldr	r3, [r3, #4]
200029c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
200029c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
200029c8:	3b01      	subs	r3, #1
200029ca:	d1fd      	bne.n	200029c8 <JTAG_TransferSlow+0x24c>
200029cc:	66bb      	str	r3, [r7, #104]	@ 0x68
}
200029ce:	bf00      	nop
200029d0:	f7ff f960 	bl	20001c94 <PIN_TDO_IN>
200029d4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
200029d8:	f7ff f92c 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200029dc:	4b7f      	ldr	r3, [pc, #508]	@ (20002bdc <JTAG_TransferSlow+0x460>)
200029de:	685b      	ldr	r3, [r3, #4]
200029e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
200029e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
200029e4:	3b01      	subs	r3, #1
200029e6:	d1fd      	bne.n	200029e4 <JTAG_TransferSlow+0x268>
200029e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
200029ea:	bf00      	nop
200029ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
200029f0:	07db      	lsls	r3, r3, #31
200029f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
200029f6:	4313      	orrs	r3, r2
200029f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200029fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
20002a00:	085b      	lsrs	r3, r3, #1
20002a02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002a0a:	3b01      	subs	r3, #1
20002a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002a10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002a14:	2b00      	cmp	r3, #0
20002a16:	d1d1      	bne.n	200029bc <JTAG_TransferSlow+0x240>
20002a18:	4b70      	ldr	r3, [pc, #448]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002a1a:	7e1b      	ldrb	r3, [r3, #24]
20002a1c:	461a      	mov	r2, r3
20002a1e:	4b6f      	ldr	r3, [pc, #444]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002a20:	7e5b      	ldrb	r3, [r3, #25]
20002a22:	1ad3      	subs	r3, r2, r3
20002a24:	3b01      	subs	r3, #1
20002a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002a2e:	2b00      	cmp	r3, #0
20002a30:	d050      	beq.n	20002ad4 <JTAG_TransferSlow+0x358>
20002a32:	f7ff f906 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002a36:	4b69      	ldr	r3, [pc, #420]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002a38:	685b      	ldr	r3, [r3, #4]
20002a3a:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20002a3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20002a3e:	3b01      	subs	r3, #1
20002a40:	d1fd      	bne.n	20002a3e <JTAG_TransferSlow+0x2c2>
20002a42:	663b      	str	r3, [r7, #96]	@ 0x60
}
20002a44:	bf00      	nop
20002a46:	f7ff f925 	bl	20001c94 <PIN_TDO_IN>
20002a4a:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002a4e:	f7ff f8f1 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002a52:	4b62      	ldr	r3, [pc, #392]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002a54:	685b      	ldr	r3, [r3, #4]
20002a56:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20002a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002a5a:	3b01      	subs	r3, #1
20002a5c:	d1fd      	bne.n	20002a5a <JTAG_TransferSlow+0x2de>
20002a5e:	667b      	str	r3, [r7, #100]	@ 0x64
}
20002a60:	bf00      	nop
20002a62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002a66:	3b01      	subs	r3, #1
20002a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002a6c:	e018      	b.n	20002aa0 <JTAG_TransferSlow+0x324>
20002a6e:	f7ff f8e8 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002a72:	4b5a      	ldr	r3, [pc, #360]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002a74:	685b      	ldr	r3, [r3, #4]
20002a76:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20002a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20002a7a:	3b01      	subs	r3, #1
20002a7c:	d1fd      	bne.n	20002a7a <JTAG_TransferSlow+0x2fe>
20002a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20002a80:	bf00      	nop
20002a82:	f7ff f8d7 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002a86:	4b55      	ldr	r3, [pc, #340]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002a88:	685b      	ldr	r3, [r3, #4]
20002a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
20002a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20002a8e:	3b01      	subs	r3, #1
20002a90:	d1fd      	bne.n	20002a8e <JTAG_TransferSlow+0x312>
20002a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20002a94:	bf00      	nop
20002a96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002a9a:	3b01      	subs	r3, #1
20002a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002aa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002aa4:	2b00      	cmp	r3, #0
20002aa6:	d1e2      	bne.n	20002a6e <JTAG_TransferSlow+0x2f2>
20002aa8:	f7ff f8d2 	bl	20001c50 <PIN_SWDIO_TMS_SET>
20002aac:	f7ff f8c9 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002ab0:	4b4a      	ldr	r3, [pc, #296]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002ab2:	685b      	ldr	r3, [r3, #4]
20002ab4:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
20002ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20002ab8:	3b01      	subs	r3, #1
20002aba:	d1fd      	bne.n	20002ab8 <JTAG_TransferSlow+0x33c>
20002abc:	653b      	str	r3, [r7, #80]	@ 0x50
}
20002abe:	bf00      	nop
20002ac0:	f7ff f8b8 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002ac4:	4b45      	ldr	r3, [pc, #276]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002ac6:	685b      	ldr	r3, [r3, #4]
20002ac8:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
20002aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20002acc:	3b01      	subs	r3, #1
20002ace:	d1fd      	bne.n	20002acc <JTAG_TransferSlow+0x350>
20002ad0:	657b      	str	r3, [r7, #84]	@ 0x54
}
20002ad2:	e019      	b.n	20002b08 <JTAG_TransferSlow+0x38c>
20002ad4:	f7ff f8bc 	bl	20001c50 <PIN_SWDIO_TMS_SET>
20002ad8:	f7ff f8b3 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002adc:	4b3f      	ldr	r3, [pc, #252]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002ade:	685b      	ldr	r3, [r3, #4]
20002ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
20002ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20002ae4:	3b01      	subs	r3, #1
20002ae6:	d1fd      	bne.n	20002ae4 <JTAG_TransferSlow+0x368>
20002ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
}
20002aea:	bf00      	nop
20002aec:	f7ff f8d2 	bl	20001c94 <PIN_TDO_IN>
20002af0:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
20002af4:	f7ff f89e 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002af8:	4b38      	ldr	r3, [pc, #224]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002afa:	685b      	ldr	r3, [r3, #4]
20002afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
20002afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20002b00:	3b01      	subs	r3, #1
20002b02:	d1fd      	bne.n	20002b00 <JTAG_TransferSlow+0x384>
20002b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
20002b06:	bf00      	nop
20002b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
20002b0c:	07db      	lsls	r3, r3, #31
20002b0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
20002b12:	4313      	orrs	r3, r2
20002b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002b18:	683b      	ldr	r3, [r7, #0]
20002b1a:	2b00      	cmp	r3, #0
20002b1c:	f000 80ad 	beq.w	20002c7a <JTAG_TransferSlow+0x4fe>
20002b20:	683b      	ldr	r3, [r7, #0]
20002b22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
20002b26:	601a      	str	r2, [r3, #0]
20002b28:	e0a7      	b.n	20002c7a <JTAG_TransferSlow+0x4fe>
20002b2a:	683b      	ldr	r3, [r7, #0]
20002b2c:	681b      	ldr	r3, [r3, #0]
20002b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002b32:	231f      	movs	r3, #31
20002b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002b38:	e021      	b.n	20002b7e <JTAG_TransferSlow+0x402>
20002b3a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20002b3e:	f7ff f89f 	bl	20001c80 <PIN_TDI_OUT>
20002b42:	f7ff f87e 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002b46:	4b25      	ldr	r3, [pc, #148]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002b48:	685b      	ldr	r3, [r3, #4]
20002b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20002b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002b4e:	3b01      	subs	r3, #1
20002b50:	d1fd      	bne.n	20002b4e <JTAG_TransferSlow+0x3d2>
20002b52:	643b      	str	r3, [r7, #64]	@ 0x40
}
20002b54:	bf00      	nop
20002b56:	f7ff f86d 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002b5a:	4b20      	ldr	r3, [pc, #128]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002b5c:	685b      	ldr	r3, [r3, #4]
20002b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20002b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20002b62:	3b01      	subs	r3, #1
20002b64:	d1fd      	bne.n	20002b62 <JTAG_TransferSlow+0x3e6>
20002b66:	647b      	str	r3, [r7, #68]	@ 0x44
}
20002b68:	bf00      	nop
20002b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
20002b6e:	085b      	lsrs	r3, r3, #1
20002b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
20002b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002b78:	3b01      	subs	r3, #1
20002b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002b82:	2b00      	cmp	r3, #0
20002b84:	d1d9      	bne.n	20002b3a <JTAG_TransferSlow+0x3be>
20002b86:	4b15      	ldr	r3, [pc, #84]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002b88:	7e1b      	ldrb	r3, [r3, #24]
20002b8a:	461a      	mov	r2, r3
20002b8c:	4b13      	ldr	r3, [pc, #76]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002b8e:	7e5b      	ldrb	r3, [r3, #25]
20002b90:	1ad3      	subs	r3, r2, r3
20002b92:	3b01      	subs	r3, #1
20002b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002b9c:	2b00      	cmp	r3, #0
20002b9e:	d052      	beq.n	20002c46 <JTAG_TransferSlow+0x4ca>
20002ba0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20002ba4:	f7ff f86c 	bl	20001c80 <PIN_TDI_OUT>
20002ba8:	f7ff f84b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002bac:	4b0b      	ldr	r3, [pc, #44]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002bae:	685b      	ldr	r3, [r3, #4]
20002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20002bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002bb4:	3b01      	subs	r3, #1
20002bb6:	d1fd      	bne.n	20002bb4 <JTAG_TransferSlow+0x438>
20002bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20002bba:	bf00      	nop
20002bbc:	f7ff f83a 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002bc0:	4b06      	ldr	r3, [pc, #24]	@ (20002bdc <JTAG_TransferSlow+0x460>)
20002bc2:	685b      	ldr	r3, [r3, #4]
20002bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20002bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002bc8:	3b01      	subs	r3, #1
20002bca:	d1fd      	bne.n	20002bc8 <JTAG_TransferSlow+0x44c>
20002bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20002bce:	bf00      	nop
20002bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002bd4:	3b01      	subs	r3, #1
20002bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002bda:	e01a      	b.n	20002c12 <JTAG_TransferSlow+0x496>
20002bdc:	2000c3d0 	.word	0x2000c3d0
20002be0:	f7ff f82f 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002be4:	4b54      	ldr	r3, [pc, #336]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002be6:	685b      	ldr	r3, [r3, #4]
20002be8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002bec:	3b01      	subs	r3, #1
20002bee:	d1fd      	bne.n	20002bec <JTAG_TransferSlow+0x470>
20002bf0:	633b      	str	r3, [r7, #48]	@ 0x30
}
20002bf2:	bf00      	nop
20002bf4:	f7ff f81e 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002bf8:	4b4f      	ldr	r3, [pc, #316]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002bfa:	685b      	ldr	r3, [r3, #4]
20002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20002bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002c00:	3b01      	subs	r3, #1
20002c02:	d1fd      	bne.n	20002c00 <JTAG_TransferSlow+0x484>
20002c04:	637b      	str	r3, [r7, #52]	@ 0x34
}
20002c06:	bf00      	nop
20002c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002c0c:	3b01      	subs	r3, #1
20002c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002c16:	2b00      	cmp	r3, #0
20002c18:	d1e2      	bne.n	20002be0 <JTAG_TransferSlow+0x464>
20002c1a:	f7ff f819 	bl	20001c50 <PIN_SWDIO_TMS_SET>
20002c1e:	f7ff f810 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002c22:	4b45      	ldr	r3, [pc, #276]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002c24:	685b      	ldr	r3, [r3, #4]
20002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20002c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002c2a:	3b01      	subs	r3, #1
20002c2c:	d1fd      	bne.n	20002c2a <JTAG_TransferSlow+0x4ae>
20002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20002c30:	bf00      	nop
20002c32:	f7fe ffff 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002c36:	4b40      	ldr	r3, [pc, #256]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002c38:	685b      	ldr	r3, [r3, #4]
20002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002c3e:	3b01      	subs	r3, #1
20002c40:	d1fd      	bne.n	20002c3e <JTAG_TransferSlow+0x4c2>
20002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20002c44:	e019      	b.n	20002c7a <JTAG_TransferSlow+0x4fe>
20002c46:	f7ff f803 	bl	20001c50 <PIN_SWDIO_TMS_SET>
20002c4a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
20002c4e:	f7ff f817 	bl	20001c80 <PIN_TDI_OUT>
20002c52:	f7fe fff6 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002c56:	4b38      	ldr	r3, [pc, #224]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002c58:	685b      	ldr	r3, [r3, #4]
20002c5a:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20002c5c:	6a3b      	ldr	r3, [r7, #32]
20002c5e:	3b01      	subs	r3, #1
20002c60:	d1fd      	bne.n	20002c5e <JTAG_TransferSlow+0x4e2>
20002c62:	623b      	str	r3, [r7, #32]
}
20002c64:	bf00      	nop
20002c66:	f7fe ffe5 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002c6a:	4b33      	ldr	r3, [pc, #204]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002c6c:	685b      	ldr	r3, [r3, #4]
20002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002c72:	3b01      	subs	r3, #1
20002c74:	d1fd      	bne.n	20002c72 <JTAG_TransferSlow+0x4f6>
20002c76:	627b      	str	r3, [r7, #36]	@ 0x24
}
20002c78:	bf00      	nop
20002c7a:	f7fe ffe2 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002c7e:	4b2e      	ldr	r3, [pc, #184]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002c80:	685b      	ldr	r3, [r3, #4]
20002c82:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20002c84:	693b      	ldr	r3, [r7, #16]
20002c86:	3b01      	subs	r3, #1
20002c88:	d1fd      	bne.n	20002c86 <JTAG_TransferSlow+0x50a>
20002c8a:	613b      	str	r3, [r7, #16]
}
20002c8c:	bf00      	nop
20002c8e:	f7fe ffd1 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002c92:	4b29      	ldr	r3, [pc, #164]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002c94:	685b      	ldr	r3, [r3, #4]
20002c96:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20002c98:	697b      	ldr	r3, [r7, #20]
20002c9a:	3b01      	subs	r3, #1
20002c9c:	d1fd      	bne.n	20002c9a <JTAG_TransferSlow+0x51e>
20002c9e:	617b      	str	r3, [r7, #20]
}
20002ca0:	bf00      	nop
20002ca2:	f7fe ffe1 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
20002ca6:	f7fe ffcc 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002caa:	4b23      	ldr	r3, [pc, #140]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002cac:	685b      	ldr	r3, [r3, #4]
20002cae:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20002cb0:	69bb      	ldr	r3, [r7, #24]
20002cb2:	3b01      	subs	r3, #1
20002cb4:	d1fd      	bne.n	20002cb2 <JTAG_TransferSlow+0x536>
20002cb6:	61bb      	str	r3, [r7, #24]
}
20002cb8:	bf00      	nop
20002cba:	f7fe ffbb 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002cc0:	685b      	ldr	r3, [r3, #4]
20002cc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20002cc4:	69fb      	ldr	r3, [r7, #28]
20002cc6:	3b01      	subs	r3, #1
20002cc8:	d1fd      	bne.n	20002cc6 <JTAG_TransferSlow+0x54a>
20002cca:	61fb      	str	r3, [r7, #28]
}
20002ccc:	bf00      	nop
20002cce:	2001      	movs	r0, #1
20002cd0:	f7fe ffd6 	bl	20001c80 <PIN_TDI_OUT>
20002cd4:	687b      	ldr	r3, [r7, #4]
20002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20002cda:	2b00      	cmp	r3, #0
20002cdc:	d004      	beq.n	20002ce8 <JTAG_TransferSlow+0x56c>
20002cde:	f7fe ffe1 	bl	20001ca4 <TIMESTAMP_GET>
20002ce2:	4603      	mov	r3, r0
20002ce4:	4a14      	ldr	r2, [pc, #80]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002ce6:	6093      	str	r3, [r2, #8]
20002ce8:	4b13      	ldr	r3, [pc, #76]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002cea:	7b1b      	ldrb	r3, [r3, #12]
20002cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20002cf0:	e013      	b.n	20002d1a <JTAG_TransferSlow+0x59e>
20002cf2:	f7fe ffa6 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002cf6:	4b10      	ldr	r3, [pc, #64]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002cf8:	685b      	ldr	r3, [r3, #4]
20002cfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
20002cfc:	68bb      	ldr	r3, [r7, #8]
20002cfe:	3b01      	subs	r3, #1
20002d00:	d1fd      	bne.n	20002cfe <JTAG_TransferSlow+0x582>
20002d02:	60bb      	str	r3, [r7, #8]
}
20002d04:	bf00      	nop
20002d06:	f7fe ff95 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (20002d38 <JTAG_TransferSlow+0x5bc>)
20002d0c:	685b      	ldr	r3, [r3, #4]
20002d0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20002d10:	68fb      	ldr	r3, [r7, #12]
20002d12:	3b01      	subs	r3, #1
20002d14:	d1fd      	bne.n	20002d12 <JTAG_TransferSlow+0x596>
20002d16:	60fb      	str	r3, [r7, #12]
}
20002d18:	bf00      	nop
20002d1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
20002d1e:	1e5a      	subs	r2, r3, #1
20002d20:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
20002d24:	2b00      	cmp	r3, #0
20002d26:	d1e4      	bne.n	20002cf2 <JTAG_TransferSlow+0x576>
20002d28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
20002d2c:	b2db      	uxtb	r3, r3
20002d2e:	4618      	mov	r0, r3
20002d30:	37c0      	adds	r7, #192	@ 0xc0
20002d32:	46bd      	mov	sp, r7
20002d34:	bd80      	pop	{r7, pc}
20002d36:	bf00      	nop
20002d38:	2000c3d0 	.word	0x2000c3d0

20002d3c <JTAG_ReadIDCode>:


// JTAG Read IDCODE register
//   return: value read
uint32_t JTAG_ReadIDCode (void) {
20002d3c:	b580      	push	{r7, lr}
20002d3e:	b094      	sub	sp, #80	@ 0x50
20002d40:	af00      	add	r7, sp, #0
  uint32_t bit;
  uint32_t val;
  uint32_t n;

  PIN_TMS_SET();
20002d42:	f7fe ff85 	bl	20001c50 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
20002d46:	f7fe ff7c 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002d4a:	4b68      	ldr	r3, [pc, #416]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002d4c:	685b      	ldr	r3, [r3, #4]
20002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
20002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20002d52:	3b01      	subs	r3, #1
20002d54:	d1fd      	bne.n	20002d52 <JTAG_ReadIDCode+0x16>
20002d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
20002d58:	bf00      	nop
20002d5a:	f7fe ff6b 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002d5e:	4b63      	ldr	r3, [pc, #396]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002d60:	685b      	ldr	r3, [r3, #4]
20002d62:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
20002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20002d66:	3b01      	subs	r3, #1
20002d68:	d1fd      	bne.n	20002d66 <JTAG_ReadIDCode+0x2a>
20002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
}
20002d6c:	bf00      	nop
  PIN_TMS_CLR();
20002d6e:	f7fe ff7b 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
20002d72:	f7fe ff66 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002d76:	4b5d      	ldr	r3, [pc, #372]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002d78:	685b      	ldr	r3, [r3, #4]
20002d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
20002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20002d7e:	3b01      	subs	r3, #1
20002d80:	d1fd      	bne.n	20002d7e <JTAG_ReadIDCode+0x42>
20002d82:	637b      	str	r3, [r7, #52]	@ 0x34
}
20002d84:	bf00      	nop
20002d86:	f7fe ff55 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002d8a:	4b58      	ldr	r3, [pc, #352]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002d8c:	685b      	ldr	r3, [r3, #4]
20002d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
20002d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20002d92:	3b01      	subs	r3, #1
20002d94:	d1fd      	bne.n	20002d92 <JTAG_ReadIDCode+0x56>
20002d96:	63bb      	str	r3, [r7, #56]	@ 0x38
}
20002d98:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
20002d9a:	f7fe ff52 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002d9e:	4b53      	ldr	r3, [pc, #332]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002da0:	685b      	ldr	r3, [r3, #4]
20002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20002da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20002da6:	3b01      	subs	r3, #1
20002da8:	d1fd      	bne.n	20002da6 <JTAG_ReadIDCode+0x6a>
20002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20002dac:	bf00      	nop
20002dae:	f7fe ff41 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002db2:	4b4e      	ldr	r3, [pc, #312]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002db4:	685b      	ldr	r3, [r3, #4]
20002db6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
20002db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20002dba:	3b01      	subs	r3, #1
20002dbc:	d1fd      	bne.n	20002dba <JTAG_ReadIDCode+0x7e>
20002dbe:	643b      	str	r3, [r7, #64]	@ 0x40
}
20002dc0:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
20002dc2:	4b4a      	ldr	r3, [pc, #296]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002dc4:	7e5b      	ldrb	r3, [r3, #25]
20002dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
20002dc8:	e016      	b.n	20002df8 <JTAG_ReadIDCode+0xbc>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
20002dca:	f7fe ff3a 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002dce:	4b47      	ldr	r3, [pc, #284]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002dd0:	685b      	ldr	r3, [r3, #4]
20002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
20002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002dd6:	3b01      	subs	r3, #1
20002dd8:	d1fd      	bne.n	20002dd6 <JTAG_ReadIDCode+0x9a>
20002dda:	627b      	str	r3, [r7, #36]	@ 0x24
}
20002ddc:	bf00      	nop
20002dde:	f7fe ff29 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002de2:	4b42      	ldr	r3, [pc, #264]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002de4:	685b      	ldr	r3, [r3, #4]
20002de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
20002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002dea:	3b01      	subs	r3, #1
20002dec:	d1fd      	bne.n	20002dea <JTAG_ReadIDCode+0xae>
20002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20002df0:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
20002df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20002df4:	3b01      	subs	r3, #1
20002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
20002df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20002dfa:	2b00      	cmp	r3, #0
20002dfc:	d1e5      	bne.n	20002dca <JTAG_ReadIDCode+0x8e>
  }

  val = 0U;
20002dfe:	2300      	movs	r3, #0
20002e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
20002e02:	231f      	movs	r3, #31
20002e04:	64bb      	str	r3, [r7, #72]	@ 0x48
20002e06:	e021      	b.n	20002e4c <JTAG_ReadIDCode+0x110>
    JTAG_CYCLE_TDO(bit);                    /* Get D0..D30 */
20002e08:	f7fe ff1b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002e0c:	4b37      	ldr	r3, [pc, #220]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002e0e:	685b      	ldr	r3, [r3, #4]
20002e10:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
20002e12:	69fb      	ldr	r3, [r7, #28]
20002e14:	3b01      	subs	r3, #1
20002e16:	d1fd      	bne.n	20002e14 <JTAG_ReadIDCode+0xd8>
20002e18:	61fb      	str	r3, [r7, #28]
}
20002e1a:	bf00      	nop
20002e1c:	f7fe ff3a 	bl	20001c94 <PIN_TDO_IN>
20002e20:	6478      	str	r0, [r7, #68]	@ 0x44
20002e22:	f7fe ff07 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002e26:	4b31      	ldr	r3, [pc, #196]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002e28:	685b      	ldr	r3, [r3, #4]
20002e2a:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20002e2c:	6a3b      	ldr	r3, [r7, #32]
20002e2e:	3b01      	subs	r3, #1
20002e30:	d1fd      	bne.n	20002e2e <JTAG_ReadIDCode+0xf2>
20002e32:	623b      	str	r3, [r7, #32]
}
20002e34:	bf00      	nop
    val  |= bit << 31;
20002e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20002e38:	07db      	lsls	r3, r3, #31
20002e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20002e3c:	4313      	orrs	r3, r2
20002e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    val >>= 1;
20002e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20002e42:	085b      	lsrs	r3, r3, #1
20002e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (n = 31U; n; n--) {
20002e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20002e48:	3b01      	subs	r3, #1
20002e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
20002e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20002e4e:	2b00      	cmp	r3, #0
20002e50:	d1da      	bne.n	20002e08 <JTAG_ReadIDCode+0xcc>
  }
  PIN_TMS_SET();
20002e52:	f7fe fefd 	bl	20001c50 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TDO(bit);                      /* Get D31 & Exit1-DR */
20002e56:	f7fe fef4 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002e5a:	4b24      	ldr	r3, [pc, #144]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002e5c:	685b      	ldr	r3, [r3, #4]
20002e5e:	607b      	str	r3, [r7, #4]
  __ASM volatile (
20002e60:	687b      	ldr	r3, [r7, #4]
20002e62:	3b01      	subs	r3, #1
20002e64:	d1fd      	bne.n	20002e62 <JTAG_ReadIDCode+0x126>
20002e66:	607b      	str	r3, [r7, #4]
}
20002e68:	bf00      	nop
20002e6a:	f7fe ff13 	bl	20001c94 <PIN_TDO_IN>
20002e6e:	6478      	str	r0, [r7, #68]	@ 0x44
20002e70:	f7fe fee0 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002e74:	4b1d      	ldr	r3, [pc, #116]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002e76:	685b      	ldr	r3, [r3, #4]
20002e78:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
20002e7a:	68bb      	ldr	r3, [r7, #8]
20002e7c:	3b01      	subs	r3, #1
20002e7e:	d1fd      	bne.n	20002e7c <JTAG_ReadIDCode+0x140>
20002e80:	60bb      	str	r3, [r7, #8]
}
20002e82:	bf00      	nop
  val |= bit << 31;
20002e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20002e86:	07db      	lsls	r3, r3, #31
20002e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20002e8a:	4313      	orrs	r3, r2
20002e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  JTAG_CYCLE_TCK();                         /* Update-DR */
20002e8e:	f7fe fed8 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002e92:	4b16      	ldr	r3, [pc, #88]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002e94:	685b      	ldr	r3, [r3, #4]
20002e96:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20002e98:	68fb      	ldr	r3, [r7, #12]
20002e9a:	3b01      	subs	r3, #1
20002e9c:	d1fd      	bne.n	20002e9a <JTAG_ReadIDCode+0x15e>
20002e9e:	60fb      	str	r3, [r7, #12]
}
20002ea0:	bf00      	nop
20002ea2:	f7fe fec7 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002ea6:	4b11      	ldr	r3, [pc, #68]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002ea8:	685b      	ldr	r3, [r3, #4]
20002eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20002eac:	693b      	ldr	r3, [r7, #16]
20002eae:	3b01      	subs	r3, #1
20002eb0:	d1fd      	bne.n	20002eae <JTAG_ReadIDCode+0x172>
20002eb2:	613b      	str	r3, [r7, #16]
}
20002eb4:	bf00      	nop
  PIN_TMS_CLR();
20002eb6:	f7fe fed7 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
20002eba:	f7fe fec2 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002ec0:	685b      	ldr	r3, [r3, #4]
20002ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20002ec4:	697b      	ldr	r3, [r7, #20]
20002ec6:	3b01      	subs	r3, #1
20002ec8:	d1fd      	bne.n	20002ec6 <JTAG_ReadIDCode+0x18a>
20002eca:	617b      	str	r3, [r7, #20]
}
20002ecc:	bf00      	nop
20002ece:	f7fe feb1 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002ed2:	4b06      	ldr	r3, [pc, #24]	@ (20002eec <JTAG_ReadIDCode+0x1b0>)
20002ed4:	685b      	ldr	r3, [r3, #4]
20002ed6:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
20002ed8:	69bb      	ldr	r3, [r7, #24]
20002eda:	3b01      	subs	r3, #1
20002edc:	d1fd      	bne.n	20002eda <JTAG_ReadIDCode+0x19e>
20002ede:	61bb      	str	r3, [r7, #24]
}
20002ee0:	bf00      	nop

  return (val);
20002ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
20002ee4:	4618      	mov	r0, r3
20002ee6:	3750      	adds	r7, #80	@ 0x50
20002ee8:	46bd      	mov	sp, r7
20002eea:	bd80      	pop	{r7, pc}
20002eec:	2000c3d0 	.word	0x2000c3d0

20002ef0 <JTAG_WriteAbort>:


// JTAG Write ABORT register
//   data:   value to write
//   return: none
void JTAG_WriteAbort (uint32_t data) {
20002ef0:	b580      	push	{r7, lr}
20002ef2:	b0a0      	sub	sp, #128	@ 0x80
20002ef4:	af00      	add	r7, sp, #0
20002ef6:	6078      	str	r0, [r7, #4]
  uint32_t n;

  PIN_TMS_SET();
20002ef8:	f7fe feaa 	bl	20001c50 <PIN_SWDIO_TMS_SET>
  JTAG_CYCLE_TCK();                         /* Select-DR-Scan */
20002efc:	f7fe fea1 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002f00:	4b70      	ldr	r3, [pc, #448]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f02:	685b      	ldr	r3, [r3, #4]
20002f04:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile (
20002f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20002f08:	3b01      	subs	r3, #1
20002f0a:	d1fd      	bne.n	20002f08 <JTAG_WriteAbort+0x18>
20002f0c:	667b      	str	r3, [r7, #100]	@ 0x64
}
20002f0e:	bf00      	nop
20002f10:	f7fe fe90 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002f14:	4b6b      	ldr	r3, [pc, #428]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f16:	685b      	ldr	r3, [r3, #4]
20002f18:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile (
20002f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20002f1c:	3b01      	subs	r3, #1
20002f1e:	d1fd      	bne.n	20002f1c <JTAG_WriteAbort+0x2c>
20002f20:	66bb      	str	r3, [r7, #104]	@ 0x68
}
20002f22:	bf00      	nop
  PIN_TMS_CLR();
20002f24:	f7fe fea0 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Capture-DR */
20002f28:	f7fe fe8b 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002f2c:	4b65      	ldr	r3, [pc, #404]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f2e:	685b      	ldr	r3, [r3, #4]
20002f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile (
20002f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20002f34:	3b01      	subs	r3, #1
20002f36:	d1fd      	bne.n	20002f34 <JTAG_WriteAbort+0x44>
20002f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
}
20002f3a:	bf00      	nop
20002f3c:	f7fe fe7a 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002f40:	4b60      	ldr	r3, [pc, #384]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f42:	685b      	ldr	r3, [r3, #4]
20002f44:	673b      	str	r3, [r7, #112]	@ 0x70
  __ASM volatile (
20002f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
20002f48:	3b01      	subs	r3, #1
20002f4a:	d1fd      	bne.n	20002f48 <JTAG_WriteAbort+0x58>
20002f4c:	673b      	str	r3, [r7, #112]	@ 0x70
}
20002f4e:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Shift-DR */
20002f50:	f7fe fe77 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002f54:	4b5b      	ldr	r3, [pc, #364]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f56:	685b      	ldr	r3, [r3, #4]
20002f58:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile (
20002f5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
20002f5c:	3b01      	subs	r3, #1
20002f5e:	d1fd      	bne.n	20002f5c <JTAG_WriteAbort+0x6c>
20002f60:	677b      	str	r3, [r7, #116]	@ 0x74
}
20002f62:	bf00      	nop
20002f64:	f7fe fe66 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002f68:	4b56      	ldr	r3, [pc, #344]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f6a:	685b      	ldr	r3, [r3, #4]
20002f6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile (
20002f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20002f70:	3b01      	subs	r3, #1
20002f72:	d1fd      	bne.n	20002f70 <JTAG_WriteAbort+0x80>
20002f74:	67bb      	str	r3, [r7, #120]	@ 0x78
}
20002f76:	bf00      	nop

  for (n = DAP_Data.jtag_dev.index; n; n--) {
20002f78:	4b52      	ldr	r3, [pc, #328]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f7a:	7e5b      	ldrb	r3, [r3, #25]
20002f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
20002f7e:	e016      	b.n	20002fae <JTAG_WriteAbort+0xbe>
    JTAG_CYCLE_TCK();                       /* Bypass before data */
20002f80:	f7fe fe5f 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002f84:	4b4f      	ldr	r3, [pc, #316]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f86:	685b      	ldr	r3, [r3, #4]
20002f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile (
20002f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
20002f8c:	3b01      	subs	r3, #1
20002f8e:	d1fd      	bne.n	20002f8c <JTAG_WriteAbort+0x9c>
20002f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
20002f92:	bf00      	nop
20002f94:	f7fe fe4e 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002f98:	4b4a      	ldr	r3, [pc, #296]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002f9a:	685b      	ldr	r3, [r3, #4]
20002f9c:	663b      	str	r3, [r7, #96]	@ 0x60
  __ASM volatile (
20002f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
20002fa0:	3b01      	subs	r3, #1
20002fa2:	d1fd      	bne.n	20002fa0 <JTAG_WriteAbort+0xb0>
20002fa4:	663b      	str	r3, [r7, #96]	@ 0x60
}
20002fa6:	bf00      	nop
  for (n = DAP_Data.jtag_dev.index; n; n--) {
20002fa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20002faa:	3b01      	subs	r3, #1
20002fac:	67fb      	str	r3, [r7, #124]	@ 0x7c
20002fae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20002fb0:	2b00      	cmp	r3, #0
20002fb2:	d1e5      	bne.n	20002f80 <JTAG_WriteAbort+0x90>
  }

  PIN_TDI_OUT(0U);
20002fb4:	2000      	movs	r0, #0
20002fb6:	f7fe fe63 	bl	20001c80 <PIN_TDI_OUT>
  JTAG_CYCLE_TCK();                         /* Set RnW=0 (Write) */
20002fba:	f7fe fe42 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002fbe:	4b41      	ldr	r3, [pc, #260]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002fc0:	685b      	ldr	r3, [r3, #4]
20002fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile (
20002fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20002fc6:	3b01      	subs	r3, #1
20002fc8:	d1fd      	bne.n	20002fc6 <JTAG_WriteAbort+0xd6>
20002fca:	647b      	str	r3, [r7, #68]	@ 0x44
}
20002fcc:	bf00      	nop
20002fce:	f7fe fe31 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002fd2:	4b3c      	ldr	r3, [pc, #240]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002fd4:	685b      	ldr	r3, [r3, #4]
20002fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile (
20002fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20002fda:	3b01      	subs	r3, #1
20002fdc:	d1fd      	bne.n	20002fda <JTAG_WriteAbort+0xea>
20002fde:	64bb      	str	r3, [r7, #72]	@ 0x48
}
20002fe0:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A2=0 */
20002fe2:	f7fe fe2e 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20002fe6:	4b37      	ldr	r3, [pc, #220]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002fe8:	685b      	ldr	r3, [r3, #4]
20002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile (
20002fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20002fee:	3b01      	subs	r3, #1
20002ff0:	d1fd      	bne.n	20002fee <JTAG_WriteAbort+0xfe>
20002ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
20002ff4:	bf00      	nop
20002ff6:	f7fe fe1d 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20002ffa:	4b32      	ldr	r3, [pc, #200]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20002ffc:	685b      	ldr	r3, [r3, #4]
20002ffe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile (
20003000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20003002:	3b01      	subs	r3, #1
20003004:	d1fd      	bne.n	20003002 <JTAG_WriteAbort+0x112>
20003006:	653b      	str	r3, [r7, #80]	@ 0x50
}
20003008:	bf00      	nop
  JTAG_CYCLE_TCK();                         /* Set A3=0 */
2000300a:	f7fe fe1a 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000300e:	4b2d      	ldr	r3, [pc, #180]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20003010:	685b      	ldr	r3, [r3, #4]
20003012:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile (
20003014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20003016:	3b01      	subs	r3, #1
20003018:	d1fd      	bne.n	20003016 <JTAG_WriteAbort+0x126>
2000301a:	657b      	str	r3, [r7, #84]	@ 0x54
}
2000301c:	bf00      	nop
2000301e:	f7fe fe09 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20003022:	4b28      	ldr	r3, [pc, #160]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20003024:	685b      	ldr	r3, [r3, #4]
20003026:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile (
20003028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
2000302a:	3b01      	subs	r3, #1
2000302c:	d1fd      	bne.n	2000302a <JTAG_WriteAbort+0x13a>
2000302e:	65bb      	str	r3, [r7, #88]	@ 0x58
}
20003030:	bf00      	nop

  for (n = 31U; n; n--) {
20003032:	231f      	movs	r3, #31
20003034:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003036:	e01c      	b.n	20003072 <JTAG_WriteAbort+0x182>
    JTAG_CYCLE_TDI(data);                   /* Set D0..D30 */
20003038:	6878      	ldr	r0, [r7, #4]
2000303a:	f7fe fe21 	bl	20001c80 <PIN_TDI_OUT>
2000303e:	f7fe fe00 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20003042:	4b20      	ldr	r3, [pc, #128]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20003044:	685b      	ldr	r3, [r3, #4]
20003046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile (
20003048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2000304a:	3b01      	subs	r3, #1
2000304c:	d1fd      	bne.n	2000304a <JTAG_WriteAbort+0x15a>
2000304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
}
20003050:	bf00      	nop
20003052:	f7fe fdef 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20003056:	4b1b      	ldr	r3, [pc, #108]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20003058:	685b      	ldr	r3, [r3, #4]
2000305a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile (
2000305c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000305e:	3b01      	subs	r3, #1
20003060:	d1fd      	bne.n	2000305e <JTAG_WriteAbort+0x16e>
20003062:	643b      	str	r3, [r7, #64]	@ 0x40
}
20003064:	bf00      	nop
    data >>= 1;
20003066:	687b      	ldr	r3, [r7, #4]
20003068:	085b      	lsrs	r3, r3, #1
2000306a:	607b      	str	r3, [r7, #4]
  for (n = 31U; n; n--) {
2000306c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
2000306e:	3b01      	subs	r3, #1
20003070:	67fb      	str	r3, [r7, #124]	@ 0x7c
20003072:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20003074:	2b00      	cmp	r3, #0
20003076:	d1df      	bne.n	20003038 <JTAG_WriteAbort+0x148>
  }
  n = DAP_Data.jtag_dev.count - DAP_Data.jtag_dev.index - 1U;
20003078:	4b12      	ldr	r3, [pc, #72]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
2000307a:	7e1b      	ldrb	r3, [r3, #24]
2000307c:	461a      	mov	r2, r3
2000307e:	4b11      	ldr	r3, [pc, #68]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
20003080:	7e5b      	ldrb	r3, [r3, #25]
20003082:	1ad3      	subs	r3, r2, r3
20003084:	3b01      	subs	r3, #1
20003086:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (n) {
20003088:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
2000308a:	2b00      	cmp	r3, #0
2000308c:	d04c      	beq.n	20003128 <JTAG_WriteAbort+0x238>
    JTAG_CYCLE_TDI(data);                   /* Set D31 */
2000308e:	6878      	ldr	r0, [r7, #4]
20003090:	f7fe fdf6 	bl	20001c80 <PIN_TDI_OUT>
20003094:	f7fe fdd5 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20003098:	4b0a      	ldr	r3, [pc, #40]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
2000309a:	685b      	ldr	r3, [r3, #4]
2000309c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile (
2000309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200030a0:	3b01      	subs	r3, #1
200030a2:	d1fd      	bne.n	200030a0 <JTAG_WriteAbort+0x1b0>
200030a4:	637b      	str	r3, [r7, #52]	@ 0x34
}
200030a6:	bf00      	nop
200030a8:	f7fe fdc4 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200030ac:	4b05      	ldr	r3, [pc, #20]	@ (200030c4 <JTAG_WriteAbort+0x1d4>)
200030ae:	685b      	ldr	r3, [r3, #4]
200030b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile (
200030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200030b4:	3b01      	subs	r3, #1
200030b6:	d1fd      	bne.n	200030b4 <JTAG_WriteAbort+0x1c4>
200030b8:	63bb      	str	r3, [r7, #56]	@ 0x38
}
200030ba:	bf00      	nop
    for (--n; n; n--) {
200030bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200030be:	3b01      	subs	r3, #1
200030c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
200030c2:	e018      	b.n	200030f6 <JTAG_WriteAbort+0x206>
200030c4:	2000c3d0 	.word	0x2000c3d0
      JTAG_CYCLE_TCK();                     /* Bypass after data */
200030c8:	f7fe fdbb 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
200030cc:	4b3b      	ldr	r3, [pc, #236]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
200030ce:	685b      	ldr	r3, [r3, #4]
200030d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile (
200030d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200030d4:	3b01      	subs	r3, #1
200030d6:	d1fd      	bne.n	200030d4 <JTAG_WriteAbort+0x1e4>
200030d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
200030da:	bf00      	nop
200030dc:	f7fe fdaa 	bl	20001c34 <PIN_SWCLK_TCK_SET>
200030e0:	4b36      	ldr	r3, [pc, #216]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
200030e2:	685b      	ldr	r3, [r3, #4]
200030e4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile (
200030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200030e8:	3b01      	subs	r3, #1
200030ea:	d1fd      	bne.n	200030e8 <JTAG_WriteAbort+0x1f8>
200030ec:	633b      	str	r3, [r7, #48]	@ 0x30
}
200030ee:	bf00      	nop
    for (--n; n; n--) {
200030f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200030f2:	3b01      	subs	r3, #1
200030f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
200030f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200030f8:	2b00      	cmp	r3, #0
200030fa:	d1e5      	bne.n	200030c8 <JTAG_WriteAbort+0x1d8>
    }
    PIN_TMS_SET();
200030fc:	f7fe fda8 	bl	20001c50 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TCK();                       /* Bypass & Exit1-DR */
20003100:	f7fe fd9f 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20003104:	4b2d      	ldr	r3, [pc, #180]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
20003106:	685b      	ldr	r3, [r3, #4]
20003108:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile (
2000310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000310c:	3b01      	subs	r3, #1
2000310e:	d1fd      	bne.n	2000310c <JTAG_WriteAbort+0x21c>
20003110:	627b      	str	r3, [r7, #36]	@ 0x24
}
20003112:	bf00      	nop
20003114:	f7fe fd8e 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20003118:	4b28      	ldr	r3, [pc, #160]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
2000311a:	685b      	ldr	r3, [r3, #4]
2000311c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile (
2000311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20003120:	3b01      	subs	r3, #1
20003122:	d1fd      	bne.n	20003120 <JTAG_WriteAbort+0x230>
20003124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
20003126:	e018      	b.n	2000315a <JTAG_WriteAbort+0x26a>
  } else {
    PIN_TMS_SET();
20003128:	f7fe fd92 	bl	20001c50 <PIN_SWDIO_TMS_SET>
    JTAG_CYCLE_TDI(data);                   /* Set D31 & Exit1-DR */
2000312c:	6878      	ldr	r0, [r7, #4]
2000312e:	f7fe fda7 	bl	20001c80 <PIN_TDI_OUT>
20003132:	f7fe fd86 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
20003136:	4b21      	ldr	r3, [pc, #132]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
20003138:	685b      	ldr	r3, [r3, #4]
2000313a:	61fb      	str	r3, [r7, #28]
  __ASM volatile (
2000313c:	69fb      	ldr	r3, [r7, #28]
2000313e:	3b01      	subs	r3, #1
20003140:	d1fd      	bne.n	2000313e <JTAG_WriteAbort+0x24e>
20003142:	61fb      	str	r3, [r7, #28]
}
20003144:	bf00      	nop
20003146:	f7fe fd75 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000314a:	4b1c      	ldr	r3, [pc, #112]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
2000314c:	685b      	ldr	r3, [r3, #4]
2000314e:	623b      	str	r3, [r7, #32]
  __ASM volatile (
20003150:	6a3b      	ldr	r3, [r7, #32]
20003152:	3b01      	subs	r3, #1
20003154:	d1fd      	bne.n	20003152 <JTAG_WriteAbort+0x262>
20003156:	623b      	str	r3, [r7, #32]
}
20003158:	bf00      	nop
  }

  JTAG_CYCLE_TCK();                         /* Update-DR */
2000315a:	f7fe fd72 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000315e:	4b17      	ldr	r3, [pc, #92]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
20003160:	685b      	ldr	r3, [r3, #4]
20003162:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
20003164:	68fb      	ldr	r3, [r7, #12]
20003166:	3b01      	subs	r3, #1
20003168:	d1fd      	bne.n	20003166 <JTAG_WriteAbort+0x276>
2000316a:	60fb      	str	r3, [r7, #12]
}
2000316c:	bf00      	nop
2000316e:	f7fe fd61 	bl	20001c34 <PIN_SWCLK_TCK_SET>
20003172:	4b12      	ldr	r3, [pc, #72]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
20003174:	685b      	ldr	r3, [r3, #4]
20003176:	613b      	str	r3, [r7, #16]
  __ASM volatile (
20003178:	693b      	ldr	r3, [r7, #16]
2000317a:	3b01      	subs	r3, #1
2000317c:	d1fd      	bne.n	2000317a <JTAG_WriteAbort+0x28a>
2000317e:	613b      	str	r3, [r7, #16]
}
20003180:	bf00      	nop
  PIN_TMS_CLR();
20003182:	f7fe fd71 	bl	20001c68 <PIN_SWDIO_TMS_CLR>
  JTAG_CYCLE_TCK();                         /* Idle */
20003186:	f7fe fd5c 	bl	20001c42 <PIN_SWCLK_TCK_CLR>
2000318a:	4b0c      	ldr	r3, [pc, #48]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
2000318c:	685b      	ldr	r3, [r3, #4]
2000318e:	617b      	str	r3, [r7, #20]
  __ASM volatile (
20003190:	697b      	ldr	r3, [r7, #20]
20003192:	3b01      	subs	r3, #1
20003194:	d1fd      	bne.n	20003192 <JTAG_WriteAbort+0x2a2>
20003196:	617b      	str	r3, [r7, #20]
}
20003198:	bf00      	nop
2000319a:	f7fe fd4b 	bl	20001c34 <PIN_SWCLK_TCK_SET>
2000319e:	4b07      	ldr	r3, [pc, #28]	@ (200031bc <JTAG_WriteAbort+0x2cc>)
200031a0:	685b      	ldr	r3, [r3, #4]
200031a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile (
200031a4:	69bb      	ldr	r3, [r7, #24]
200031a6:	3b01      	subs	r3, #1
200031a8:	d1fd      	bne.n	200031a6 <JTAG_WriteAbort+0x2b6>
200031aa:	61bb      	str	r3, [r7, #24]
}
200031ac:	bf00      	nop
  PIN_TDI_OUT(1U);
200031ae:	2001      	movs	r0, #1
200031b0:	f7fe fd66 	bl	20001c80 <PIN_TDI_OUT>
}
200031b4:	bf00      	nop
200031b6:	3780      	adds	r7, #128	@ 0x80
200031b8:	46bd      	mov	sp, r7
200031ba:	bd80      	pop	{r7, pc}
200031bc:	2000c3d0 	.word	0x2000c3d0

200031c0 <JTAG_IR>:


// JTAG Set IR
//   ir:     IR value
//   return: none
void JTAG_IR (uint32_t ir) {
200031c0:	b580      	push	{r7, lr}
200031c2:	b082      	sub	sp, #8
200031c4:	af00      	add	r7, sp, #0
200031c6:	6078      	str	r0, [r7, #4]
  if (DAP_Data.fast_clock) {
200031c8:	4b07      	ldr	r3, [pc, #28]	@ (200031e8 <JTAG_IR+0x28>)
200031ca:	785b      	ldrb	r3, [r3, #1]
200031cc:	2b00      	cmp	r3, #0
200031ce:	d003      	beq.n	200031d8 <JTAG_IR+0x18>
    JTAG_IR_Fast(ir);
200031d0:	6878      	ldr	r0, [r7, #4]
200031d2:	f7fe ff8f 	bl	200020f4 <JTAG_IR_Fast>
  } else {
    JTAG_IR_Slow(ir);
  }
}
200031d6:	e002      	b.n	200031de <JTAG_IR+0x1e>
    JTAG_IR_Slow(ir);
200031d8:	6878      	ldr	r0, [r7, #4]
200031da:	f7ff f981 	bl	200024e0 <JTAG_IR_Slow>
}
200031de:	bf00      	nop
200031e0:	3708      	adds	r7, #8
200031e2:	46bd      	mov	sp, r7
200031e4:	bd80      	pop	{r7, pc}
200031e6:	bf00      	nop
200031e8:	2000c3d0 	.word	0x2000c3d0

200031ec <JTAG_Transfer>:

// JTAG Transfer I/O
//   request: A[3:2] RnW APnDP
//   data:    DATA[31:0]
//   return:  ACK[2:0]
uint8_t  JTAG_Transfer(uint32_t request, uint32_t *data) {
200031ec:	b580      	push	{r7, lr}
200031ee:	b082      	sub	sp, #8
200031f0:	af00      	add	r7, sp, #0
200031f2:	6078      	str	r0, [r7, #4]
200031f4:	6039      	str	r1, [r7, #0]
  if (DAP_Data.fast_clock) {
200031f6:	4b09      	ldr	r3, [pc, #36]	@ (2000321c <JTAG_Transfer+0x30>)
200031f8:	785b      	ldrb	r3, [r3, #1]
200031fa:	2b00      	cmp	r3, #0
200031fc:	d005      	beq.n	2000320a <JTAG_Transfer+0x1e>
    return JTAG_TransferFast(request, data);
200031fe:	6839      	ldr	r1, [r7, #0]
20003200:	6878      	ldr	r0, [r7, #4]
20003202:	f7ff f81b 	bl	2000223c <JTAG_TransferFast>
20003206:	4603      	mov	r3, r0
20003208:	e004      	b.n	20003214 <JTAG_Transfer+0x28>
  } else {
    return JTAG_TransferSlow(request, data);
2000320a:	6839      	ldr	r1, [r7, #0]
2000320c:	6878      	ldr	r0, [r7, #4]
2000320e:	f7ff fab5 	bl	2000277c <JTAG_TransferSlow>
20003212:	4603      	mov	r3, r0
  }
}
20003214:	4618      	mov	r0, r3
20003216:	3708      	adds	r7, #8
20003218:	46bd      	mov	sp, r7
2000321a:	bd80      	pop	{r7, pc}
2000321c:	2000c3d0 	.word	0x2000c3d0

20003220 <PIN_SWCLK_TCK_SET>:
static void     PIN_SWCLK_TCK_SET (void) {
20003220:	b480      	push	{r7}
20003222:	af00      	add	r7, sp, #0
}
20003224:	bf00      	nop
20003226:	46bd      	mov	sp, r7
20003228:	f85d 7b04 	ldr.w	r7, [sp], #4
2000322c:	4770      	bx	lr

2000322e <PIN_SWCLK_TCK_CLR>:
static void     PIN_SWCLK_TCK_CLR (void) {
2000322e:	b480      	push	{r7}
20003230:	af00      	add	r7, sp, #0
}
20003232:	bf00      	nop
20003234:	46bd      	mov	sp, r7
20003236:	f85d 7b04 	ldr.w	r7, [sp], #4
2000323a:	4770      	bx	lr

2000323c <PIN_SWDIO_TMS_SET>:
static void     PIN_SWDIO_TMS_SET (void) {
2000323c:	b580      	push	{r7, lr}
2000323e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20003240:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
20003244:	4802      	ldr	r0, [pc, #8]	@ (20003250 <PIN_SWDIO_TMS_SET+0x14>)
20003246:	f001 fd58 	bl	20004cfa <HAL_GPIO_TogglePin>
}
2000324a:	bf00      	nop
2000324c:	bd80      	pop	{r7, pc}
2000324e:	bf00      	nop
20003250:	40020400 	.word	0x40020400

20003254 <PIN_SWDIO_TMS_CLR>:
static void     PIN_SWDIO_TMS_CLR (void) {
20003254:	b580      	push	{r7, lr}
20003256:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
20003258:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
2000325c:	4802      	ldr	r0, [pc, #8]	@ (20003268 <PIN_SWDIO_TMS_CLR+0x14>)
2000325e:	f001 fd4c 	bl	20004cfa <HAL_GPIO_TogglePin>
}
20003262:	bf00      	nop
20003264:	bd80      	pop	{r7, pc}
20003266:	bf00      	nop
20003268:	40020400 	.word	0x40020400

2000326c <SWJ_Sequence>:
// Generate SWJ Sequence
//   count:  sequence bit count
//   data:   pointer to sequence bit data
//   return: none
#if ((DAP_SWD != 0) || (DAP_JTAG != 0))
void SWJ_Sequence (uint32_t count, const uint8_t *data) {
2000326c:	b580      	push	{r7, lr}
2000326e:	b086      	sub	sp, #24
20003270:	af00      	add	r7, sp, #0
20003272:	6078      	str	r0, [r7, #4]
20003274:	6039      	str	r1, [r7, #0]
  uint32_t val;
  uint32_t n;

  val = 0U;
20003276:	2300      	movs	r3, #0
20003278:	617b      	str	r3, [r7, #20]
  n = 0U;
2000327a:	2300      	movs	r3, #0
2000327c:	613b      	str	r3, [r7, #16]
  while (count--) {
2000327e:	e02d      	b.n	200032dc <SWJ_Sequence+0x70>
    if (n == 0U) {
20003280:	693b      	ldr	r3, [r7, #16]
20003282:	2b00      	cmp	r3, #0
20003284:	d106      	bne.n	20003294 <SWJ_Sequence+0x28>
      val = *data++;
20003286:	683b      	ldr	r3, [r7, #0]
20003288:	1c5a      	adds	r2, r3, #1
2000328a:	603a      	str	r2, [r7, #0]
2000328c:	781b      	ldrb	r3, [r3, #0]
2000328e:	617b      	str	r3, [r7, #20]
      n = 8U;
20003290:	2308      	movs	r3, #8
20003292:	613b      	str	r3, [r7, #16]
    }
    if (val & 1U) {
20003294:	697b      	ldr	r3, [r7, #20]
20003296:	f003 0301 	and.w	r3, r3, #1
2000329a:	2b00      	cmp	r3, #0
2000329c:	d002      	beq.n	200032a4 <SWJ_Sequence+0x38>
      PIN_SWDIO_TMS_SET();
2000329e:	f7ff ffcd 	bl	2000323c <PIN_SWDIO_TMS_SET>
200032a2:	e001      	b.n	200032a8 <SWJ_Sequence+0x3c>
    } else {
      PIN_SWDIO_TMS_CLR();
200032a4:	f7ff ffd6 	bl	20003254 <PIN_SWDIO_TMS_CLR>
    }
    SW_CLOCK_CYCLE();
200032a8:	f7ff ffc1 	bl	2000322e <PIN_SWCLK_TCK_CLR>
200032ac:	4b10      	ldr	r3, [pc, #64]	@ (200032f0 <SWJ_Sequence+0x84>)
200032ae:	685b      	ldr	r3, [r3, #4]
200032b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile (
200032b2:	68bb      	ldr	r3, [r7, #8]
200032b4:	3b01      	subs	r3, #1
200032b6:	d1fd      	bne.n	200032b4 <SWJ_Sequence+0x48>
200032b8:	60bb      	str	r3, [r7, #8]
}
200032ba:	bf00      	nop
200032bc:	f7ff ffb0 	bl	20003220 <PIN_SWCLK_TCK_SET>
200032c0:	4b0b      	ldr	r3, [pc, #44]	@ (200032f0 <SWJ_Sequence+0x84>)
200032c2:	685b      	ldr	r3, [r3, #4]
200032c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile (
200032c6:	68fb      	ldr	r3, [r7, #12]
200032c8:	3b01      	subs	r3, #1
200032ca:	d1fd      	bne.n	200032c8 <SWJ_Sequence+0x5c>
200032cc:	60fb      	str	r3, [r7, #12]
}
200032ce:	bf00      	nop
    val >>= 1;
200032d0:	697b      	ldr	r3, [r7, #20]
200032d2:	085b      	lsrs	r3, r3, #1
200032d4:	617b      	str	r3, [r7, #20]
    n--;
200032d6:	693b      	ldr	r3, [r7, #16]
200032d8:	3b01      	subs	r3, #1
200032da:	613b      	str	r3, [r7, #16]
  while (count--) {
200032dc:	687b      	ldr	r3, [r7, #4]
200032de:	1e5a      	subs	r2, r3, #1
200032e0:	607a      	str	r2, [r7, #4]
200032e2:	2b00      	cmp	r3, #0
200032e4:	d1cc      	bne.n	20003280 <SWJ_Sequence+0x14>
  }
}
200032e6:	bf00      	nop
200032e8:	bf00      	nop
200032ea:	3718      	adds	r7, #24
200032ec:	46bd      	mov	sp, r7
200032ee:	bd80      	pop	{r7, pc}
200032f0:	2000c3d0 	.word	0x2000c3d0

200032f4 <JTAG_GPIO_Write>:
 * @brief Sets the state of a GPIO pin.
 * @param port GPIO_TypeDef* The GPIO port (e.g., GPIOA, GPIOB).
 * @param pin uint16_t The pin number (e.g., GPIO_PIN_5).
 * @param state GPIO_PinState The desired state (GPIO_PIN_SET or GPIO_PIN_RESET).
 */
void JTAG_GPIO_Write(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state) {
200032f4:	b580      	push	{r7, lr}
200032f6:	b082      	sub	sp, #8
200032f8:	af00      	add	r7, sp, #0
200032fa:	6078      	str	r0, [r7, #4]
200032fc:	460b      	mov	r3, r1
200032fe:	807b      	strh	r3, [r7, #2]
20003300:	4613      	mov	r3, r2
20003302:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(port, pin, state); // Using STM32 HAL library function
20003304:	787a      	ldrb	r2, [r7, #1]
20003306:	887b      	ldrh	r3, [r7, #2]
20003308:	4619      	mov	r1, r3
2000330a:	6878      	ldr	r0, [r7, #4]
2000330c:	f001 fcdc 	bl	20004cc8 <HAL_GPIO_WritePin>
}
20003310:	bf00      	nop
20003312:	3708      	adds	r7, #8
20003314:	46bd      	mov	sp, r7
20003316:	bd80      	pop	{r7, pc}

20003318 <JTAG_Delay_ns>:

/**
 * @brief Introduces a small delay. Crucial for JTAG timing.
 * This needs to be carefully tuned. A simple loop or a timer-based delay.
 */
void JTAG_Delay_ns(uint32_t nanoseconds) {
20003318:	b580      	push	{r7, lr}
2000331a:	b082      	sub	sp, #8
2000331c:	af00      	add	r7, sp, #0
2000331e:	6078      	str	r0, [r7, #4]
    // For bit-banging, even a few clock cycles can matter.
    // Consider using a DWT (Data Watchpoint and Trace) cycle counter for very precise delays,
    // or a TIM (Timer) in one-shot mode. A simple NOP loop might be too slow or imprecise.
    // Example (very rough):
    //for (volatile uint32_t i = 0; i < (nanoseconds / 10); i++); // Adjust divisor based on CPU freq
	HAL_Delay(nanoseconds);
20003320:	6878      	ldr	r0, [r7, #4]
20003322:	f000 fea1 	bl	20004068 <HAL_Delay>
}
20003326:	bf00      	nop
20003328:	3708      	adds	r7, #8
2000332a:	46bd      	mov	sp, r7
2000332c:	bd80      	pop	{r7, pc}
	...

20003330 <JTAG_Reset>:

/**
 * @brief Resets the JTAG state machine to Test-Logic-Reset.
 * Can use TRST if available, or sequence TMS.
 */
void JTAG_Reset(void) {
20003330:	b580      	push	{r7, lr}
20003332:	af00      	add	r7, sp, #0
    #ifdef JTAG_TRST_PORT
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_RESET); // Assert TRST
20003334:	2200      	movs	r2, #0
20003336:	f44f 7180 	mov.w	r1, #256	@ 0x100
2000333a:	4808      	ldr	r0, [pc, #32]	@ (2000335c <JTAG_Reset+0x2c>)
2000333c:	f7ff ffda 	bl	200032f4 <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS); // Hold for a short period
20003340:	2001      	movs	r0, #1
20003342:	f7ff ffe9 	bl	20003318 <JTAG_Delay_ns>
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_SET);   // De-assert TRST
20003346:	2201      	movs	r2, #1
20003348:	f44f 7180 	mov.w	r1, #256	@ 0x100
2000334c:	4803      	ldr	r0, [pc, #12]	@ (2000335c <JTAG_Reset+0x2c>)
2000334e:	f7ff ffd1 	bl	200032f4 <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS);
20003352:	2001      	movs	r0, #1
20003354:	f7ff ffe0 	bl	20003318 <JTAG_Delay_ns>
    #else
    // Go to run-test/idle state
    SPI_TMS_Transfer(0x001f, 16);
    SPI_Transfer(&dummyInVal, 0, 16);
	#endif
}
20003358:	bf00      	nop
2000335a:	bd80      	pop	{r7, pc}
2000335c:	40020800 	.word	0x40020800

20003360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20003360:	b580      	push	{r7, lr}
20003362:	b086      	sub	sp, #24
20003364:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
20003366:	f000 fe22 	bl	20003fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000336a:	f000 f85f 	bl	2000342c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000336e:	f000 f9c1 	bl	200036f4 <MX_GPIO_Init>
  MX_ETH_Init();
20003372:	f000 f8c9 	bl	20003508 <MX_ETH_Init>
  MX_USART3_UART_Init();
20003376:	f000 f98d 	bl	20003694 <MX_USART3_UART_Init>
  MX_SPI1_Init();
2000337a:	f000 f913 	bl	200035a4 <MX_SPI1_Init>
  MX_SPI4_Init();
2000337e:	f000 f94f 	bl	20003620 <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
20003382:	f008 f81d 	bl	2000b3c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  RCC->APB1ENR |= (1 << 15);
20003386:	4b21      	ldr	r3, [pc, #132]	@ (2000340c <main+0xac>)
20003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000338a:	4a20      	ldr	r2, [pc, #128]	@ (2000340c <main+0xac>)
2000338c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20003390:	6413      	str	r3, [r2, #64]	@ 0x40

  Switch_SPI();
20003392:	f000 fab7 	bl	20003904 <Switch_SPI>
  SPI4->CR1 |= (1 << 6);
20003396:	4b1e      	ldr	r3, [pc, #120]	@ (20003410 <main+0xb0>)
20003398:	681b      	ldr	r3, [r3, #0]
2000339a:	4a1d      	ldr	r2, [pc, #116]	@ (20003410 <main+0xb0>)
2000339c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200033a0:	6013      	str	r3, [r2, #0]

  uint64_t tms_seq = 0x00;
200033a2:	f04f 0200 	mov.w	r2, #0
200033a6:	f04f 0300 	mov.w	r3, #0
200033aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint16_t tdi_seq = 0xFF;
200033ae:	23ff      	movs	r3, #255	@ 0xff
200033b0:	81fb      	strh	r3, [r7, #14]
  uint64_t tdo_seq;
  uint8_t bit_size = 0x4;
200033b2:	2304      	movs	r3, #4
200033b4:	737b      	strb	r3, [r7, #13]

  JTAG_Reset();
200033b6:	f7ff ffbb 	bl	20003330 <JTAG_Reset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t num;
	  if(msgAvailable)
200033ba:	4b16      	ldr	r3, [pc, #88]	@ (20003414 <main+0xb4>)
200033bc:	681b      	ldr	r3, [r3, #0]
200033be:	2b00      	cmp	r3, #0
200033c0:	d020      	beq.n	20003404 <main+0xa4>
	  {
		  uint32_t readLen, writeLen;
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
200033c2:	2180      	movs	r1, #128	@ 0x80
200033c4:	4814      	ldr	r0, [pc, #80]	@ (20003418 <main+0xb8>)
200033c6:	f001 fc98 	bl	20004cfa <HAL_GPIO_TogglePin>
		  num = DAP_ProcessCommand(rdBuff, wrBuff);
200033ca:	4914      	ldr	r1, [pc, #80]	@ (2000341c <main+0xbc>)
200033cc:	4814      	ldr	r0, [pc, #80]	@ (20003420 <main+0xc0>)
200033ce:	f7fe faed 	bl	200019ac <DAP_ProcessCommand>
200033d2:	60b8      	str	r0, [r7, #8]

		  readLen = (num & 0xFFFF0000) >> 16;
200033d4:	68bb      	ldr	r3, [r7, #8]
200033d6:	0c1b      	lsrs	r3, r3, #16
200033d8:	607b      	str	r3, [r7, #4]
		  wrIdx += readLen;
200033da:	687b      	ldr	r3, [r7, #4]
200033dc:	b2da      	uxtb	r2, r3
200033de:	4b11      	ldr	r3, [pc, #68]	@ (20003424 <main+0xc4>)
200033e0:	781b      	ldrb	r3, [r3, #0]
200033e2:	4413      	add	r3, r2
200033e4:	b2da      	uxtb	r2, r3
200033e6:	4b0f      	ldr	r3, [pc, #60]	@ (20003424 <main+0xc4>)
200033e8:	701a      	strb	r2, [r3, #0]

		  writeLen = (num & 0xFFFF);
200033ea:	68bb      	ldr	r3, [r7, #8]
200033ec:	b29b      	uxth	r3, r3
200033ee:	603b      	str	r3, [r7, #0]


		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
200033f0:	683b      	ldr	r3, [r7, #0]
200033f2:	b29b      	uxth	r3, r3
200033f4:	461a      	mov	r2, r3
200033f6:	4909      	ldr	r1, [pc, #36]	@ (2000341c <main+0xbc>)
200033f8:	480b      	ldr	r0, [pc, #44]	@ (20003428 <main+0xc8>)
200033fa:	f006 fafb 	bl	200099f4 <USBD_CUSTOM_HID_SendReport>
		  			  wrBuff, writeLen);

		  msgAvailable = 0;
200033fe:	4b05      	ldr	r3, [pc, #20]	@ (20003414 <main+0xb4>)
20003400:	2200      	movs	r2, #0
20003402:	601a      	str	r2, [r3, #0]
	  }


	  //DAP_ExecuteCommand(rdBuff, wrBuff);

	  HAL_Delay(10);
20003404:	200a      	movs	r0, #10
20003406:	f000 fe2f 	bl	20004068 <HAL_Delay>
  {
2000340a:	e7d6      	b.n	200033ba <main+0x5a>
2000340c:	40023800 	.word	0x40023800
20003410:	40013400 	.word	0x40013400
20003414:	2000d354 	.word	0x2000d354
20003418:	40020400 	.word	0x40020400
2000341c:	2000d250 	.word	0x2000d250
20003420:	2000d2d0 	.word	0x2000d2d0
20003424:	2000d350 	.word	0x2000d350
20003428:	2000d37c 	.word	0x2000d37c

2000342c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000342c:	b580      	push	{r7, lr}
2000342e:	b094      	sub	sp, #80	@ 0x50
20003430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20003432:	f107 0320 	add.w	r3, r7, #32
20003436:	2230      	movs	r2, #48	@ 0x30
20003438:	2100      	movs	r1, #0
2000343a:	4618      	mov	r0, r3
2000343c:	f008 fd76 	bl	2000bf2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20003440:	f107 030c 	add.w	r3, r7, #12
20003444:	2200      	movs	r2, #0
20003446:	601a      	str	r2, [r3, #0]
20003448:	605a      	str	r2, [r3, #4]
2000344a:	609a      	str	r2, [r3, #8]
2000344c:	60da      	str	r2, [r3, #12]
2000344e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
20003450:	f002 fef8 	bl	20006244 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20003454:	4b2a      	ldr	r3, [pc, #168]	@ (20003500 <SystemClock_Config+0xd4>)
20003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003458:	4a29      	ldr	r2, [pc, #164]	@ (20003500 <SystemClock_Config+0xd4>)
2000345a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000345e:	6413      	str	r3, [r2, #64]	@ 0x40
20003460:	4b27      	ldr	r3, [pc, #156]	@ (20003500 <SystemClock_Config+0xd4>)
20003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20003468:	60bb      	str	r3, [r7, #8]
2000346a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000346c:	4b25      	ldr	r3, [pc, #148]	@ (20003504 <SystemClock_Config+0xd8>)
2000346e:	681b      	ldr	r3, [r3, #0]
20003470:	4a24      	ldr	r2, [pc, #144]	@ (20003504 <SystemClock_Config+0xd8>)
20003472:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
20003476:	6013      	str	r3, [r2, #0]
20003478:	4b22      	ldr	r3, [pc, #136]	@ (20003504 <SystemClock_Config+0xd8>)
2000347a:	681b      	ldr	r3, [r3, #0]
2000347c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20003480:	607b      	str	r3, [r7, #4]
20003482:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20003484:	2301      	movs	r3, #1
20003486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
20003488:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
2000348c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000348e:	2302      	movs	r3, #2
20003490:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20003492:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
20003498:	2304      	movs	r3, #4
2000349a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
2000349c:	23d8      	movs	r3, #216	@ 0xd8
2000349e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
200034a0:	2302      	movs	r3, #2
200034a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
200034a4:	2309      	movs	r3, #9
200034a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
200034a8:	f107 0320 	add.w	r3, r7, #32
200034ac:	4618      	mov	r0, r3
200034ae:	f002 ff29 	bl	20006304 <HAL_RCC_OscConfig>
200034b2:	4603      	mov	r3, r0
200034b4:	2b00      	cmp	r3, #0
200034b6:	d001      	beq.n	200034bc <SystemClock_Config+0x90>
  {
    Error_Handler();
200034b8:	f000 faf2 	bl	20003aa0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
200034bc:	f002 fed2 	bl	20006264 <HAL_PWREx_EnableOverDrive>
200034c0:	4603      	mov	r3, r0
200034c2:	2b00      	cmp	r3, #0
200034c4:	d001      	beq.n	200034ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
200034c6:	f000 faeb 	bl	20003aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
200034ca:	230f      	movs	r3, #15
200034cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
200034ce:	2302      	movs	r3, #2
200034d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
200034d2:	2300      	movs	r3, #0
200034d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
200034d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
200034da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
200034dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200034e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
200034e2:	f107 030c 	add.w	r3, r7, #12
200034e6:	2107      	movs	r1, #7
200034e8:	4618      	mov	r0, r3
200034ea:	f003 f9af 	bl	2000684c <HAL_RCC_ClockConfig>
200034ee:	4603      	mov	r3, r0
200034f0:	2b00      	cmp	r3, #0
200034f2:	d001      	beq.n	200034f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
200034f4:	f000 fad4 	bl	20003aa0 <Error_Handler>
  }
}
200034f8:	bf00      	nop
200034fa:	3750      	adds	r7, #80	@ 0x50
200034fc:	46bd      	mov	sp, r7
200034fe:	bd80      	pop	{r7, pc}
20003500:	40023800 	.word	0x40023800
20003504:	40007000 	.word	0x40007000

20003508 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
20003508:	b580      	push	{r7, lr}
2000350a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
2000350c:	4b1f      	ldr	r3, [pc, #124]	@ (2000358c <MX_ETH_Init+0x84>)
2000350e:	4a20      	ldr	r2, [pc, #128]	@ (20003590 <MX_ETH_Init+0x88>)
20003510:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
20003512:	4b20      	ldr	r3, [pc, #128]	@ (20003594 <MX_ETH_Init+0x8c>)
20003514:	2200      	movs	r2, #0
20003516:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
20003518:	4b1e      	ldr	r3, [pc, #120]	@ (20003594 <MX_ETH_Init+0x8c>)
2000351a:	2280      	movs	r2, #128	@ 0x80
2000351c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
2000351e:	4b1d      	ldr	r3, [pc, #116]	@ (20003594 <MX_ETH_Init+0x8c>)
20003520:	22e1      	movs	r2, #225	@ 0xe1
20003522:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
20003524:	4b1b      	ldr	r3, [pc, #108]	@ (20003594 <MX_ETH_Init+0x8c>)
20003526:	2200      	movs	r2, #0
20003528:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
2000352a:	4b1a      	ldr	r3, [pc, #104]	@ (20003594 <MX_ETH_Init+0x8c>)
2000352c:	2200      	movs	r2, #0
2000352e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
20003530:	4b18      	ldr	r3, [pc, #96]	@ (20003594 <MX_ETH_Init+0x8c>)
20003532:	2200      	movs	r2, #0
20003534:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
20003536:	4b15      	ldr	r3, [pc, #84]	@ (2000358c <MX_ETH_Init+0x84>)
20003538:	4a16      	ldr	r2, [pc, #88]	@ (20003594 <MX_ETH_Init+0x8c>)
2000353a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
2000353c:	4b13      	ldr	r3, [pc, #76]	@ (2000358c <MX_ETH_Init+0x84>)
2000353e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
20003542:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
20003544:	4b11      	ldr	r3, [pc, #68]	@ (2000358c <MX_ETH_Init+0x84>)
20003546:	4a14      	ldr	r2, [pc, #80]	@ (20003598 <MX_ETH_Init+0x90>)
20003548:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
2000354a:	4b10      	ldr	r3, [pc, #64]	@ (2000358c <MX_ETH_Init+0x84>)
2000354c:	4a13      	ldr	r2, [pc, #76]	@ (2000359c <MX_ETH_Init+0x94>)
2000354e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
20003550:	4b0e      	ldr	r3, [pc, #56]	@ (2000358c <MX_ETH_Init+0x84>)
20003552:	f240 52f4 	movw	r2, #1524	@ 0x5f4
20003556:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
20003558:	480c      	ldr	r0, [pc, #48]	@ (2000358c <MX_ETH_Init+0x84>)
2000355a:	f000 febb 	bl	200042d4 <HAL_ETH_Init>
2000355e:	4603      	mov	r3, r0
20003560:	2b00      	cmp	r3, #0
20003562:	d001      	beq.n	20003568 <MX_ETH_Init+0x60>
  {
    Error_Handler();
20003564:	f000 fa9c 	bl	20003aa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
20003568:	2238      	movs	r2, #56	@ 0x38
2000356a:	2100      	movs	r1, #0
2000356c:	480c      	ldr	r0, [pc, #48]	@ (200035a0 <MX_ETH_Init+0x98>)
2000356e:	f008 fcdd 	bl	2000bf2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
20003572:	4b0b      	ldr	r3, [pc, #44]	@ (200035a0 <MX_ETH_Init+0x98>)
20003574:	2221      	movs	r2, #33	@ 0x21
20003576:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
20003578:	4b09      	ldr	r3, [pc, #36]	@ (200035a0 <MX_ETH_Init+0x98>)
2000357a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
2000357e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
20003580:	4b07      	ldr	r3, [pc, #28]	@ (200035a0 <MX_ETH_Init+0x98>)
20003582:	2200      	movs	r2, #0
20003584:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
20003586:	bf00      	nop
20003588:	bd80      	pop	{r7, pc}
2000358a:	bf00      	nop
2000358c:	2000d050 	.word	0x2000d050
20003590:	40028000 	.word	0x40028000
20003594:	2000d364 	.word	0x2000d364
20003598:	2000c314 	.word	0x2000c314
2000359c:	2000c274 	.word	0x2000c274
200035a0:	2000d018 	.word	0x2000d018

200035a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
200035a4:	b580      	push	{r7, lr}
200035a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
200035a8:	4b1b      	ldr	r3, [pc, #108]	@ (20003618 <MX_SPI1_Init+0x74>)
200035aa:	4a1c      	ldr	r2, [pc, #112]	@ (2000361c <MX_SPI1_Init+0x78>)
200035ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
200035ae:	4b1a      	ldr	r3, [pc, #104]	@ (20003618 <MX_SPI1_Init+0x74>)
200035b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
200035b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
200035b6:	4b18      	ldr	r3, [pc, #96]	@ (20003618 <MX_SPI1_Init+0x74>)
200035b8:	2200      	movs	r2, #0
200035ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
200035bc:	4b16      	ldr	r3, [pc, #88]	@ (20003618 <MX_SPI1_Init+0x74>)
200035be:	f44f 7240 	mov.w	r2, #768	@ 0x300
200035c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
200035c4:	4b14      	ldr	r3, [pc, #80]	@ (20003618 <MX_SPI1_Init+0x74>)
200035c6:	2200      	movs	r2, #0
200035c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
200035ca:	4b13      	ldr	r3, [pc, #76]	@ (20003618 <MX_SPI1_Init+0x74>)
200035cc:	2200      	movs	r2, #0
200035ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
200035d0:	4b11      	ldr	r3, [pc, #68]	@ (20003618 <MX_SPI1_Init+0x74>)
200035d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
200035d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
200035d8:	4b0f      	ldr	r3, [pc, #60]	@ (20003618 <MX_SPI1_Init+0x74>)
200035da:	2238      	movs	r2, #56	@ 0x38
200035dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
200035de:	4b0e      	ldr	r3, [pc, #56]	@ (20003618 <MX_SPI1_Init+0x74>)
200035e0:	2280      	movs	r2, #128	@ 0x80
200035e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
200035e4:	4b0c      	ldr	r3, [pc, #48]	@ (20003618 <MX_SPI1_Init+0x74>)
200035e6:	2200      	movs	r2, #0
200035e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200035ea:	4b0b      	ldr	r3, [pc, #44]	@ (20003618 <MX_SPI1_Init+0x74>)
200035ec:	2200      	movs	r2, #0
200035ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
200035f0:	4b09      	ldr	r3, [pc, #36]	@ (20003618 <MX_SPI1_Init+0x74>)
200035f2:	2207      	movs	r2, #7
200035f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
200035f6:	4b08      	ldr	r3, [pc, #32]	@ (20003618 <MX_SPI1_Init+0x74>)
200035f8:	2200      	movs	r2, #0
200035fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
200035fc:	4b06      	ldr	r3, [pc, #24]	@ (20003618 <MX_SPI1_Init+0x74>)
200035fe:	2208      	movs	r2, #8
20003600:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
20003602:	4805      	ldr	r0, [pc, #20]	@ (20003618 <MX_SPI1_Init+0x74>)
20003604:	f003 ff38 	bl	20007478 <HAL_SPI_Init>
20003608:	4603      	mov	r3, r0
2000360a:	2b00      	cmp	r3, #0
2000360c:	d001      	beq.n	20003612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
2000360e:	f000 fa47 	bl	20003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
20003612:	bf00      	nop
20003614:	bd80      	pop	{r7, pc}
20003616:	bf00      	nop
20003618:	2000d100 	.word	0x2000d100
2000361c:	40013000 	.word	0x40013000

20003620 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
20003620:	b580      	push	{r7, lr}
20003622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
20003624:	4b19      	ldr	r3, [pc, #100]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003626:	4a1a      	ldr	r2, [pc, #104]	@ (20003690 <MX_SPI4_Init+0x70>)
20003628:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
2000362a:	4b18      	ldr	r3, [pc, #96]	@ (2000368c <MX_SPI4_Init+0x6c>)
2000362c:	2200      	movs	r2, #0
2000362e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
20003630:	4b16      	ldr	r3, [pc, #88]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003632:	2200      	movs	r2, #0
20003634:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
20003636:	4b15      	ldr	r3, [pc, #84]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003638:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
2000363c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
2000363e:	4b13      	ldr	r3, [pc, #76]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003640:	2200      	movs	r2, #0
20003642:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
20003644:	4b11      	ldr	r3, [pc, #68]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003646:	2200      	movs	r2, #0
20003648:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
2000364a:	4b10      	ldr	r3, [pc, #64]	@ (2000368c <MX_SPI4_Init+0x6c>)
2000364c:	f44f 7200 	mov.w	r2, #512	@ 0x200
20003650:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_LSB;
20003652:	4b0e      	ldr	r3, [pc, #56]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003654:	2280      	movs	r2, #128	@ 0x80
20003656:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
20003658:	4b0c      	ldr	r3, [pc, #48]	@ (2000368c <MX_SPI4_Init+0x6c>)
2000365a:	2200      	movs	r2, #0
2000365c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2000365e:	4b0b      	ldr	r3, [pc, #44]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003660:	2200      	movs	r2, #0
20003662:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
20003664:	4b09      	ldr	r3, [pc, #36]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003666:	2207      	movs	r2, #7
20003668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
2000366a:	4b08      	ldr	r3, [pc, #32]	@ (2000368c <MX_SPI4_Init+0x6c>)
2000366c:	2200      	movs	r2, #0
2000366e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
20003670:	4b06      	ldr	r3, [pc, #24]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003672:	2200      	movs	r2, #0
20003674:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
20003676:	4805      	ldr	r0, [pc, #20]	@ (2000368c <MX_SPI4_Init+0x6c>)
20003678:	f003 fefe 	bl	20007478 <HAL_SPI_Init>
2000367c:	4603      	mov	r3, r0
2000367e:	2b00      	cmp	r3, #0
20003680:	d001      	beq.n	20003686 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
20003682:	f000 fa0d 	bl	20003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
20003686:	bf00      	nop
20003688:	bd80      	pop	{r7, pc}
2000368a:	bf00      	nop
2000368c:	2000d164 	.word	0x2000d164
20003690:	40013400 	.word	0x40013400

20003694 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
20003694:	b580      	push	{r7, lr}
20003696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
20003698:	4b14      	ldr	r3, [pc, #80]	@ (200036ec <MX_USART3_UART_Init+0x58>)
2000369a:	4a15      	ldr	r2, [pc, #84]	@ (200036f0 <MX_USART3_UART_Init+0x5c>)
2000369c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
2000369e:	4b13      	ldr	r3, [pc, #76]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
200036a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
200036a6:	4b11      	ldr	r3, [pc, #68]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036a8:	2200      	movs	r2, #0
200036aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
200036ac:	4b0f      	ldr	r3, [pc, #60]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036ae:	2200      	movs	r2, #0
200036b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
200036b2:	4b0e      	ldr	r3, [pc, #56]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036b4:	2200      	movs	r2, #0
200036b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
200036b8:	4b0c      	ldr	r3, [pc, #48]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036ba:	220c      	movs	r2, #12
200036bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
200036be:	4b0b      	ldr	r3, [pc, #44]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036c0:	2200      	movs	r2, #0
200036c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
200036c4:	4b09      	ldr	r3, [pc, #36]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036c6:	2200      	movs	r2, #0
200036c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
200036ca:	4b08      	ldr	r3, [pc, #32]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036cc:	2200      	movs	r2, #0
200036ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
200036d0:	4b06      	ldr	r3, [pc, #24]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036d2:	2200      	movs	r2, #0
200036d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
200036d6:	4805      	ldr	r0, [pc, #20]	@ (200036ec <MX_USART3_UART_Init+0x58>)
200036d8:	f003 ff79 	bl	200075ce <HAL_UART_Init>
200036dc:	4603      	mov	r3, r0
200036de:	2b00      	cmp	r3, #0
200036e0:	d001      	beq.n	200036e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
200036e2:	f000 f9dd 	bl	20003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
200036e6:	bf00      	nop
200036e8:	bd80      	pop	{r7, pc}
200036ea:	bf00      	nop
200036ec:	2000d1c8 	.word	0x2000d1c8
200036f0:	40004800 	.word	0x40004800

200036f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
200036f4:	b580      	push	{r7, lr}
200036f6:	b08c      	sub	sp, #48	@ 0x30
200036f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200036fa:	f107 031c 	add.w	r3, r7, #28
200036fe:	2200      	movs	r2, #0
20003700:	601a      	str	r2, [r3, #0]
20003702:	605a      	str	r2, [r3, #4]
20003704:	609a      	str	r2, [r3, #8]
20003706:	60da      	str	r2, [r3, #12]
20003708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
2000370a:	4b79      	ldr	r3, [pc, #484]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
2000370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000370e:	4a78      	ldr	r2, [pc, #480]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003710:	f043 0310 	orr.w	r3, r3, #16
20003714:	6313      	str	r3, [r2, #48]	@ 0x30
20003716:	4b76      	ldr	r3, [pc, #472]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000371a:	f003 0310 	and.w	r3, r3, #16
2000371e:	61bb      	str	r3, [r7, #24]
20003720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20003722:	4b73      	ldr	r3, [pc, #460]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003726:	4a72      	ldr	r2, [pc, #456]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003728:	f043 0304 	orr.w	r3, r3, #4
2000372c:	6313      	str	r3, [r2, #48]	@ 0x30
2000372e:	4b70      	ldr	r3, [pc, #448]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003732:	f003 0304 	and.w	r3, r3, #4
20003736:	617b      	str	r3, [r7, #20]
20003738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000373a:	4b6d      	ldr	r3, [pc, #436]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
2000373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000373e:	4a6c      	ldr	r2, [pc, #432]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20003744:	6313      	str	r3, [r2, #48]	@ 0x30
20003746:	4b6a      	ldr	r3, [pc, #424]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000374e:	613b      	str	r3, [r7, #16]
20003750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20003752:	4b67      	ldr	r3, [pc, #412]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003756:	4a66      	ldr	r2, [pc, #408]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003758:	f043 0301 	orr.w	r3, r3, #1
2000375c:	6313      	str	r3, [r2, #48]	@ 0x30
2000375e:	4b64      	ldr	r3, [pc, #400]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003762:	f003 0301 	and.w	r3, r3, #1
20003766:	60fb      	str	r3, [r7, #12]
20003768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000376a:	4b61      	ldr	r3, [pc, #388]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
2000376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000376e:	4a60      	ldr	r2, [pc, #384]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003770:	f043 0302 	orr.w	r3, r3, #2
20003774:	6313      	str	r3, [r2, #48]	@ 0x30
20003776:	4b5e      	ldr	r3, [pc, #376]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000377a:	f003 0302 	and.w	r3, r3, #2
2000377e:	60bb      	str	r3, [r7, #8]
20003780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
20003782:	4b5b      	ldr	r3, [pc, #364]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003786:	4a5a      	ldr	r2, [pc, #360]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003788:	f043 0308 	orr.w	r3, r3, #8
2000378c:	6313      	str	r3, [r2, #48]	@ 0x30
2000378e:	4b58      	ldr	r3, [pc, #352]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
20003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003792:	f003 0308 	and.w	r3, r3, #8
20003796:	607b      	str	r3, [r7, #4]
20003798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
2000379a:	4b55      	ldr	r3, [pc, #340]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
2000379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000379e:	4a54      	ldr	r2, [pc, #336]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
200037a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200037a4:	6313      	str	r3, [r2, #48]	@ 0x30
200037a6:	4b52      	ldr	r3, [pc, #328]	@ (200038f0 <MX_GPIO_Init+0x1fc>)
200037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200037aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200037ae:	603b      	str	r3, [r7, #0]
200037b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
200037b2:	2200      	movs	r2, #0
200037b4:	f244 0181 	movw	r1, #16513	@ 0x4081
200037b8:	484e      	ldr	r0, [pc, #312]	@ (200038f4 <MX_GPIO_Init+0x200>)
200037ba:	f001 fa85 	bl	20004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
200037be:	2200      	movs	r2, #0
200037c0:	2140      	movs	r1, #64	@ 0x40
200037c2:	484d      	ldr	r0, [pc, #308]	@ (200038f8 <MX_GPIO_Init+0x204>)
200037c4:	f001 fa80 	bl	20004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TRST_Pin|JTAG_TDI_Pin, GPIO_PIN_SET);
200037c8:	2201      	movs	r2, #1
200037ca:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
200037ce:	484b      	ldr	r0, [pc, #300]	@ (200038fc <MX_GPIO_Init+0x208>)
200037d0:	f001 fa7a 	bl	20004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TMS_Pin|JTAG_TCK_Pin, GPIO_PIN_RESET);
200037d4:	2200      	movs	r2, #0
200037d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
200037da:	4848      	ldr	r0, [pc, #288]	@ (200038fc <MX_GPIO_Init+0x208>)
200037dc:	f001 fa74 	bl	20004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JTAG_SRST_GPIO_Port, JTAG_SRST_Pin, GPIO_PIN_SET);
200037e0:	2201      	movs	r2, #1
200037e2:	2104      	movs	r1, #4
200037e4:	4846      	ldr	r0, [pc, #280]	@ (20003900 <MX_GPIO_Init+0x20c>)
200037e6:	f001 fa6f 	bl	20004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
200037ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
200037ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
200037f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
200037f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
200037f6:	2300      	movs	r3, #0
200037f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
200037fa:	f107 031c 	add.w	r3, r7, #28
200037fe:	4619      	mov	r1, r3
20003800:	483e      	ldr	r0, [pc, #248]	@ (200038fc <MX_GPIO_Init+0x208>)
20003802:	f001 f8b5 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
20003806:	f244 0381 	movw	r3, #16513	@ 0x4081
2000380a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000380c:	2301      	movs	r3, #1
2000380e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003810:	2300      	movs	r3, #0
20003812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20003814:	2300      	movs	r3, #0
20003816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20003818:	f107 031c 	add.w	r3, r7, #28
2000381c:	4619      	mov	r1, r3
2000381e:	4835      	ldr	r0, [pc, #212]	@ (200038f4 <MX_GPIO_Init+0x200>)
20003820:	f001 f8a6 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
20003824:	2340      	movs	r3, #64	@ 0x40
20003826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003828:	2301      	movs	r3, #1
2000382a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000382c:	2300      	movs	r3, #0
2000382e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20003830:	2300      	movs	r3, #0
20003832:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
20003834:	f107 031c 	add.w	r3, r7, #28
20003838:	4619      	mov	r1, r3
2000383a:	482f      	ldr	r0, [pc, #188]	@ (200038f8 <MX_GPIO_Init+0x204>)
2000383c:	f001 f898 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
20003840:	2380      	movs	r3, #128	@ 0x80
20003842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20003844:	2300      	movs	r3, #0
20003846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003848:	2300      	movs	r3, #0
2000384a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
2000384c:	f107 031c 	add.w	r3, r7, #28
20003850:	4619      	mov	r1, r3
20003852:	4829      	ldr	r0, [pc, #164]	@ (200038f8 <MX_GPIO_Init+0x204>)
20003854:	f001 f88c 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TRST_Pin */
  GPIO_InitStruct.Pin = JTAG_TRST_Pin;
20003858:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000385c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000385e:	2301      	movs	r3, #1
20003860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003862:	2300      	movs	r3, #0
20003864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003866:	2303      	movs	r3, #3
20003868:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TRST_GPIO_Port, &GPIO_InitStruct);
2000386a:	f107 031c 	add.w	r3, r7, #28
2000386e:	4619      	mov	r1, r3
20003870:	4822      	ldr	r0, [pc, #136]	@ (200038fc <MX_GPIO_Init+0x208>)
20003872:	f001 f87d 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : JTAG_TMS_Pin JTAG_TCK_Pin */
  GPIO_InitStruct.Pin = JTAG_TMS_Pin|JTAG_TCK_Pin;
20003876:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
2000387a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000387c:	2301      	movs	r3, #1
2000387e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20003880:	2302      	movs	r3, #2
20003882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003884:	2303      	movs	r3, #3
20003886:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20003888:	f107 031c 	add.w	r3, r7, #28
2000388c:	4619      	mov	r1, r3
2000388e:	481b      	ldr	r0, [pc, #108]	@ (200038fc <MX_GPIO_Init+0x208>)
20003890:	f001 f86e 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDO_Pin */
  GPIO_InitStruct.Pin = JTAG_TDO_Pin;
20003894:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
2000389a:	2300      	movs	r3, #0
2000389c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
2000389e:	2301      	movs	r3, #1
200038a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JTAG_TDO_GPIO_Port, &GPIO_InitStruct);
200038a2:	f107 031c 	add.w	r3, r7, #28
200038a6:	4619      	mov	r1, r3
200038a8:	4814      	ldr	r0, [pc, #80]	@ (200038fc <MX_GPIO_Init+0x208>)
200038aa:	f001 f861 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDI_Pin */
  GPIO_InitStruct.Pin = JTAG_TDI_Pin;
200038ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200038b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200038b4:	2301      	movs	r3, #1
200038b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200038b8:	2301      	movs	r3, #1
200038ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200038bc:	2303      	movs	r3, #3
200038be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TDI_GPIO_Port, &GPIO_InitStruct);
200038c0:	f107 031c 	add.w	r3, r7, #28
200038c4:	4619      	mov	r1, r3
200038c6:	480d      	ldr	r0, [pc, #52]	@ (200038fc <MX_GPIO_Init+0x208>)
200038c8:	f001 f852 	bl	20004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_SRST_Pin */
  GPIO_InitStruct.Pin = JTAG_SRST_Pin;
200038cc:	2304      	movs	r3, #4
200038ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200038d0:	2301      	movs	r3, #1
200038d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200038d4:	2301      	movs	r3, #1
200038d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200038d8:	2303      	movs	r3, #3
200038da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_SRST_GPIO_Port, &GPIO_InitStruct);
200038dc:	f107 031c 	add.w	r3, r7, #28
200038e0:	4619      	mov	r1, r3
200038e2:	4807      	ldr	r0, [pc, #28]	@ (20003900 <MX_GPIO_Init+0x20c>)
200038e4:	f001 f844 	bl	20004970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
200038e8:	bf00      	nop
200038ea:	3730      	adds	r7, #48	@ 0x30
200038ec:	46bd      	mov	sp, r7
200038ee:	bd80      	pop	{r7, pc}
200038f0:	40023800 	.word	0x40023800
200038f4:	40020400 	.word	0x40020400
200038f8:	40021800 	.word	0x40021800
200038fc:	40020800 	.word	0x40020800
20003900:	40020c00 	.word	0x40020c00

20003904 <Switch_SPI>:

/* USER CODE BEGIN 4 */

uint32_t pupdr, afr, moder;
void Switch_SPI(void)
{
20003904:	b480      	push	{r7}
20003906:	af00      	add	r7, sp, #0
	pupdr = GPIOC->PUPDR;
20003908:	4b0f      	ldr	r3, [pc, #60]	@ (20003948 <Switch_SPI+0x44>)
2000390a:	68db      	ldr	r3, [r3, #12]
2000390c:	4a0f      	ldr	r2, [pc, #60]	@ (2000394c <Switch_SPI+0x48>)
2000390e:	6013      	str	r3, [r2, #0]
	afr = GPIOC->AFR[1];
20003910:	4b0d      	ldr	r3, [pc, #52]	@ (20003948 <Switch_SPI+0x44>)
20003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003914:	4a0e      	ldr	r2, [pc, #56]	@ (20003950 <Switch_SPI+0x4c>)
20003916:	6013      	str	r3, [r2, #0]
	moder = GPIOC->MODER;
20003918:	4b0b      	ldr	r3, [pc, #44]	@ (20003948 <Switch_SPI+0x44>)
2000391a:	681b      	ldr	r3, [r3, #0]
2000391c:	4a0d      	ldr	r2, [pc, #52]	@ (20003954 <Switch_SPI+0x50>)
2000391e:	6013      	str	r3, [r2, #0]

	GPIOC->PUPDR = (0x1 << 16);
20003920:	4b09      	ldr	r3, [pc, #36]	@ (20003948 <Switch_SPI+0x44>)
20003922:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20003926:	60da      	str	r2, [r3, #12]
	GPIOC->AFR[1] = (0x6 << 8) | (0x6 << 12) | (0x6 << 16);
20003928:	4b07      	ldr	r3, [pc, #28]	@ (20003948 <Switch_SPI+0x44>)
2000392a:	4a0b      	ldr	r2, [pc, #44]	@ (20003958 <Switch_SPI+0x54>)
2000392c:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOC->MODER = (1 << 16) | (0x1 << 18) | (0x2 << 20) | (0x2 << 22 )| (0x2 << 24);
2000392e:	4b06      	ldr	r3, [pc, #24]	@ (20003948 <Switch_SPI+0x44>)
20003930:	4a0a      	ldr	r2, [pc, #40]	@ (2000395c <Switch_SPI+0x58>)
20003932:	601a      	str	r2, [r3, #0]

	SPI3->CR1 = (0x1 << 8) | (0x1 << 9) |
20003934:	4b0a      	ldr	r3, [pc, #40]	@ (20003960 <Switch_SPI+0x5c>)
20003936:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
2000393a:	601a      	str	r2, [r3, #0]
			(1 << 2) | (0x7 << 3) | (0x1 << 7) |
			(0x1 << 6);


}
2000393c:	bf00      	nop
2000393e:	46bd      	mov	sp, r7
20003940:	f85d 7b04 	ldr.w	r7, [sp], #4
20003944:	4770      	bx	lr
20003946:	bf00      	nop
20003948:	40020800 	.word	0x40020800
2000394c:	2000d358 	.word	0x2000d358
20003950:	2000d35c 	.word	0x2000d35c
20003954:	2000d360 	.word	0x2000d360
20003958:	00066600 	.word	0x00066600
2000395c:	02a50000 	.word	0x02a50000
20003960:	40003c00 	.word	0x40003c00

20003964 <WaitForComplete>:
{
	while( !(SPI3->SR & (0x1 << 7) ) );
}

static inline void WaitForComplete(void)
{
20003964:	b480      	push	{r7}
20003966:	af00      	add	r7, sp, #0
	while( (SPI3->SR & (0x1 << 7) ) );
20003968:	bf00      	nop
2000396a:	4b06      	ldr	r3, [pc, #24]	@ (20003984 <WaitForComplete+0x20>)
2000396c:	689b      	ldr	r3, [r3, #8]
2000396e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003972:	2b00      	cmp	r3, #0
20003974:	d1f9      	bne.n	2000396a <WaitForComplete+0x6>
}
20003976:	bf00      	nop
20003978:	bf00      	nop
2000397a:	46bd      	mov	sp, r7
2000397c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003980:	4770      	bx	lr
20003982:	bf00      	nop
20003984:	40003c00 	.word	0x40003c00

20003988 <xFer>:

static inline void xFer(uint32_t *rdData, uint32_t wrData, uint8_t bitSize)
{
20003988:	b580      	push	{r7, lr}
2000398a:	b084      	sub	sp, #16
2000398c:	af00      	add	r7, sp, #0
2000398e:	60f8      	str	r0, [r7, #12]
20003990:	60b9      	str	r1, [r7, #8]
20003992:	4613      	mov	r3, r2
20003994:	71fb      	strb	r3, [r7, #7]
	SPI3->CR2 = ( (bitSize -1) << 8);
20003996:	79fb      	ldrb	r3, [r7, #7]
20003998:	3b01      	subs	r3, #1
2000399a:	021a      	lsls	r2, r3, #8
2000399c:	4b10      	ldr	r3, [pc, #64]	@ (200039e0 <xFer+0x58>)
2000399e:	605a      	str	r2, [r3, #4]

	if(bitSize <= 8)
200039a0:	79fb      	ldrb	r3, [r7, #7]
200039a2:	2b08      	cmp	r3, #8
200039a4:	d804      	bhi.n	200039b0 <xFer+0x28>
	{
		*(uint8_t *)&SPI3->DR = wrData;
200039a6:	4b0f      	ldr	r3, [pc, #60]	@ (200039e4 <xFer+0x5c>)
200039a8:	68ba      	ldr	r2, [r7, #8]
200039aa:	b2d2      	uxtb	r2, r2
200039ac:	701a      	strb	r2, [r3, #0]
200039ae:	e002      	b.n	200039b6 <xFer+0x2e>
	}
	else
	{
		SPI3->DR = wrData;
200039b0:	4a0b      	ldr	r2, [pc, #44]	@ (200039e0 <xFer+0x58>)
200039b2:	68bb      	ldr	r3, [r7, #8]
200039b4:	60d3      	str	r3, [r2, #12]
	}


	//WaitForStart();
	WaitForComplete();
200039b6:	f7ff ffd5 	bl	20003964 <WaitForComplete>

	if(bitSize <= 8)
200039ba:	79fb      	ldrb	r3, [r7, #7]
200039bc:	2b08      	cmp	r3, #8
200039be:	d805      	bhi.n	200039cc <xFer+0x44>
	{
		*rdData = *(uint8_t *)&SPI3->DR;
200039c0:	4b08      	ldr	r3, [pc, #32]	@ (200039e4 <xFer+0x5c>)
200039c2:	781b      	ldrb	r3, [r3, #0]
200039c4:	461a      	mov	r2, r3
200039c6:	68fb      	ldr	r3, [r7, #12]
200039c8:	601a      	str	r2, [r3, #0]
	{
		*rdData = *(uint16_t *)&SPI3->DR;
	}


}
200039ca:	e004      	b.n	200039d6 <xFer+0x4e>
		*rdData = *(uint16_t *)&SPI3->DR;
200039cc:	4b05      	ldr	r3, [pc, #20]	@ (200039e4 <xFer+0x5c>)
200039ce:	881b      	ldrh	r3, [r3, #0]
200039d0:	461a      	mov	r2, r3
200039d2:	68fb      	ldr	r3, [r7, #12]
200039d4:	601a      	str	r2, [r3, #0]
}
200039d6:	bf00      	nop
200039d8:	3710      	adds	r7, #16
200039da:	46bd      	mov	sp, r7
200039dc:	bd80      	pop	{r7, pc}
200039de:	bf00      	nop
200039e0:	40003c00 	.word	0x40003c00
200039e4:	40003c0c 	.word	0x40003c0c

200039e8 <SPI_TMS_Transfer>:


void SPI_TMS_Transfer(uint64_t data, uint8_t bits)
{
200039e8:	b480      	push	{r7}
200039ea:	b087      	sub	sp, #28
200039ec:	af00      	add	r7, sp, #0
200039ee:	e9c7 0102 	strd	r0, r1, [r7, #8]
200039f2:	4613      	mov	r3, r2
200039f4:	71fb      	strb	r3, [r7, #7]

	int a = 0, b = 0;
200039f6:	2300      	movs	r3, #0
200039f8:	613b      	str	r3, [r7, #16]
200039fa:	2300      	movs	r3, #0
200039fc:	617b      	str	r3, [r7, #20]



	while( (SPI3->SR & (0x1 << 7) ) )
200039fe:	e002      	b.n	20003a06 <SPI_TMS_Transfer+0x1e>
	{
		b++;
20003a00:	697b      	ldr	r3, [r7, #20]
20003a02:	3301      	adds	r3, #1
20003a04:	617b      	str	r3, [r7, #20]
	while( (SPI3->SR & (0x1 << 7) ) )
20003a06:	4b0d      	ldr	r3, [pc, #52]	@ (20003a3c <SPI_TMS_Transfer+0x54>)
20003a08:	689b      	ldr	r3, [r3, #8]
20003a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003a0e:	2b00      	cmp	r3, #0
20003a10:	d1f6      	bne.n	20003a00 <SPI_TMS_Transfer+0x18>
	}

	if(bits <= 8)
20003a12:	79fb      	ldrb	r3, [r7, #7]
20003a14:	2b08      	cmp	r3, #8
20003a16:	d803      	bhi.n	20003a20 <SPI_TMS_Transfer+0x38>
	{
		*(uint8_t *)&SPI4->DR = data;
20003a18:	4b09      	ldr	r3, [pc, #36]	@ (20003a40 <SPI_TMS_Transfer+0x58>)
20003a1a:	7a3a      	ldrb	r2, [r7, #8]
20003a1c:	701a      	strb	r2, [r3, #0]
20003a1e:	e002      	b.n	20003a26 <SPI_TMS_Transfer+0x3e>
	}
	else
	{
		SPI4->DR = data;
20003a20:	4a08      	ldr	r2, [pc, #32]	@ (20003a44 <SPI_TMS_Transfer+0x5c>)
20003a22:	68bb      	ldr	r3, [r7, #8]
20003a24:	60d3      	str	r3, [r2, #12]
	}


	SPI4->CR2 = ( (bits -1) << 8);
20003a26:	79fb      	ldrb	r3, [r7, #7]
20003a28:	3b01      	subs	r3, #1
20003a2a:	021a      	lsls	r2, r3, #8
20003a2c:	4b05      	ldr	r3, [pc, #20]	@ (20003a44 <SPI_TMS_Transfer+0x5c>)
20003a2e:	605a      	str	r2, [r3, #4]


}
20003a30:	bf00      	nop
20003a32:	371c      	adds	r7, #28
20003a34:	46bd      	mov	sp, r7
20003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a3a:	4770      	bx	lr
20003a3c:	40003c00 	.word	0x40003c00
20003a40:	4001340c 	.word	0x4001340c
20003a44:	40013400 	.word	0x40013400

20003a48 <SPI_Transfer>:

int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize)
{
20003a48:	b5b0      	push	{r4, r5, r7, lr}
20003a4a:	b088      	sub	sp, #32
20003a4c:	af00      	add	r7, sp, #0
20003a4e:	60f8      	str	r0, [r7, #12]
20003a50:	e9c7 2300 	strd	r2, r3, [r7]
	int retVal = -1;
20003a54:	f04f 33ff 	mov.w	r3, #4294967295
20003a58:	61fb      	str	r3, [r7, #28]
	int i = 0;
20003a5a:	2300      	movs	r3, #0
20003a5c:	61bb      	str	r3, [r7, #24]


	int halfWordIterationCnt = (bitSize / 16) -1;
20003a5e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
20003a62:	091b      	lsrs	r3, r3, #4
20003a64:	b2db      	uxtb	r3, r3
20003a66:	3b01      	subs	r3, #1
20003a68:	617b      	str	r3, [r7, #20]
	uint32_t tempReadVal, tempWriteVal;

	*rdData = 0;
20003a6a:	68f9      	ldr	r1, [r7, #12]
20003a6c:	f04f 0200 	mov.w	r2, #0
20003a70:	f04f 0300 	mov.w	r3, #0
20003a74:	e9c1 2300 	strd	r2, r3, [r1]
	xFer(&tempReadVal, wrData, bitSize);
20003a78:	6839      	ldr	r1, [r7, #0]
20003a7a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
20003a7e:	f107 0310 	add.w	r3, r7, #16
20003a82:	4618      	mov	r0, r3
20003a84:	f7ff ff80 	bl	20003988 <xFer>
	*rdData = tempReadVal;
20003a88:	693b      	ldr	r3, [r7, #16]
20003a8a:	2200      	movs	r2, #0
20003a8c:	461c      	mov	r4, r3
20003a8e:	4615      	mov	r5, r2
20003a90:	68fb      	ldr	r3, [r7, #12]
20003a92:	e9c3 4500 	strd	r4, r5, [r3]
	}

	//Switch_GPIO();

#endif
}
20003a96:	bf00      	nop
20003a98:	4618      	mov	r0, r3
20003a9a:	3720      	adds	r7, #32
20003a9c:	46bd      	mov	sp, r7
20003a9e:	bdb0      	pop	{r4, r5, r7, pc}

20003aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20003aa0:	b480      	push	{r7}
20003aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
20003aa4:	b672      	cpsid	i
}
20003aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20003aa8:	bf00      	nop
20003aaa:	e7fd      	b.n	20003aa8 <Error_Handler+0x8>

20003aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20003aac:	b480      	push	{r7}
20003aae:	b083      	sub	sp, #12
20003ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
20003ab2:	4b0f      	ldr	r3, [pc, #60]	@ (20003af0 <HAL_MspInit+0x44>)
20003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003ab6:	4a0e      	ldr	r2, [pc, #56]	@ (20003af0 <HAL_MspInit+0x44>)
20003ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20003abc:	6413      	str	r3, [r2, #64]	@ 0x40
20003abe:	4b0c      	ldr	r3, [pc, #48]	@ (20003af0 <HAL_MspInit+0x44>)
20003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20003ac6:	607b      	str	r3, [r7, #4]
20003ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
20003aca:	4b09      	ldr	r3, [pc, #36]	@ (20003af0 <HAL_MspInit+0x44>)
20003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003ace:	4a08      	ldr	r2, [pc, #32]	@ (20003af0 <HAL_MspInit+0x44>)
20003ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20003ad4:	6453      	str	r3, [r2, #68]	@ 0x44
20003ad6:	4b06      	ldr	r3, [pc, #24]	@ (20003af0 <HAL_MspInit+0x44>)
20003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20003ade:	603b      	str	r3, [r7, #0]
20003ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20003ae2:	bf00      	nop
20003ae4:	370c      	adds	r7, #12
20003ae6:	46bd      	mov	sp, r7
20003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
20003aec:	4770      	bx	lr
20003aee:	bf00      	nop
20003af0:	40023800 	.word	0x40023800

20003af4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
20003af4:	b580      	push	{r7, lr}
20003af6:	b08e      	sub	sp, #56	@ 0x38
20003af8:	af00      	add	r7, sp, #0
20003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003b00:	2200      	movs	r2, #0
20003b02:	601a      	str	r2, [r3, #0]
20003b04:	605a      	str	r2, [r3, #4]
20003b06:	609a      	str	r2, [r3, #8]
20003b08:	60da      	str	r2, [r3, #12]
20003b0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
20003b0c:	687b      	ldr	r3, [r7, #4]
20003b0e:	681b      	ldr	r3, [r3, #0]
20003b10:	4a4e      	ldr	r2, [pc, #312]	@ (20003c4c <HAL_ETH_MspInit+0x158>)
20003b12:	4293      	cmp	r3, r2
20003b14:	f040 8096 	bne.w	20003c44 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
20003b18:	4b4d      	ldr	r3, [pc, #308]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b1c:	4a4c      	ldr	r2, [pc, #304]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
20003b22:	6313      	str	r3, [r2, #48]	@ 0x30
20003b24:	4b4a      	ldr	r3, [pc, #296]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20003b2c:	623b      	str	r3, [r7, #32]
20003b2e:	6a3b      	ldr	r3, [r7, #32]
20003b30:	4b47      	ldr	r3, [pc, #284]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b34:	4a46      	ldr	r2, [pc, #280]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20003b3a:	6313      	str	r3, [r2, #48]	@ 0x30
20003b3c:	4b44      	ldr	r3, [pc, #272]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
20003b44:	61fb      	str	r3, [r7, #28]
20003b46:	69fb      	ldr	r3, [r7, #28]
20003b48:	4b41      	ldr	r3, [pc, #260]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b4c:	4a40      	ldr	r2, [pc, #256]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20003b52:	6313      	str	r3, [r2, #48]	@ 0x30
20003b54:	4b3e      	ldr	r3, [pc, #248]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20003b5c:	61bb      	str	r3, [r7, #24]
20003b5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
20003b60:	4b3b      	ldr	r3, [pc, #236]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b64:	4a3a      	ldr	r2, [pc, #232]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b66:	f043 0304 	orr.w	r3, r3, #4
20003b6a:	6313      	str	r3, [r2, #48]	@ 0x30
20003b6c:	4b38      	ldr	r3, [pc, #224]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b70:	f003 0304 	and.w	r3, r3, #4
20003b74:	617b      	str	r3, [r7, #20]
20003b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
20003b78:	4b35      	ldr	r3, [pc, #212]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b7c:	4a34      	ldr	r2, [pc, #208]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b7e:	f043 0301 	orr.w	r3, r3, #1
20003b82:	6313      	str	r3, [r2, #48]	@ 0x30
20003b84:	4b32      	ldr	r3, [pc, #200]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b88:	f003 0301 	and.w	r3, r3, #1
20003b8c:	613b      	str	r3, [r7, #16]
20003b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20003b90:	4b2f      	ldr	r3, [pc, #188]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003b94:	4a2e      	ldr	r2, [pc, #184]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b96:	f043 0302 	orr.w	r3, r3, #2
20003b9a:	6313      	str	r3, [r2, #48]	@ 0x30
20003b9c:	4b2c      	ldr	r3, [pc, #176]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ba0:	f003 0302 	and.w	r3, r3, #2
20003ba4:	60fb      	str	r3, [r7, #12]
20003ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
20003ba8:	4b29      	ldr	r3, [pc, #164]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003bac:	4a28      	ldr	r2, [pc, #160]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20003bb2:	6313      	str	r3, [r2, #48]	@ 0x30
20003bb4:	4b26      	ldr	r3, [pc, #152]	@ (20003c50 <HAL_ETH_MspInit+0x15c>)
20003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20003bbc:	60bb      	str	r3, [r7, #8]
20003bbe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
20003bc0:	2332      	movs	r3, #50	@ 0x32
20003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003bc4:	2302      	movs	r3, #2
20003bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003bc8:	2300      	movs	r3, #0
20003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003bcc:	2303      	movs	r3, #3
20003bce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003bd0:	230b      	movs	r3, #11
20003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20003bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003bd8:	4619      	mov	r1, r3
20003bda:	481e      	ldr	r0, [pc, #120]	@ (20003c54 <HAL_ETH_MspInit+0x160>)
20003bdc:	f000 fec8 	bl	20004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
20003be0:	2386      	movs	r3, #134	@ 0x86
20003be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003be4:	2302      	movs	r3, #2
20003be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003be8:	2300      	movs	r3, #0
20003bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003bec:	2303      	movs	r3, #3
20003bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003bf0:	230b      	movs	r3, #11
20003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20003bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003bf8:	4619      	mov	r1, r3
20003bfa:	4817      	ldr	r0, [pc, #92]	@ (20003c58 <HAL_ETH_MspInit+0x164>)
20003bfc:	f000 feb8 	bl	20004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
20003c00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20003c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003c06:	2302      	movs	r3, #2
20003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003c0a:	2300      	movs	r3, #0
20003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003c0e:	2303      	movs	r3, #3
20003c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003c12:	230b      	movs	r3, #11
20003c14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
20003c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003c1a:	4619      	mov	r1, r3
20003c1c:	480f      	ldr	r0, [pc, #60]	@ (20003c5c <HAL_ETH_MspInit+0x168>)
20003c1e:	f000 fea7 	bl	20004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
20003c22:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
20003c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003c28:	2302      	movs	r3, #2
20003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003c2c:	2300      	movs	r3, #0
20003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003c30:	2303      	movs	r3, #3
20003c32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20003c34:	230b      	movs	r3, #11
20003c36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
20003c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20003c3c:	4619      	mov	r1, r3
20003c3e:	4808      	ldr	r0, [pc, #32]	@ (20003c60 <HAL_ETH_MspInit+0x16c>)
20003c40:	f000 fe96 	bl	20004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
20003c44:	bf00      	nop
20003c46:	3738      	adds	r7, #56	@ 0x38
20003c48:	46bd      	mov	sp, r7
20003c4a:	bd80      	pop	{r7, pc}
20003c4c:	40028000 	.word	0x40028000
20003c50:	40023800 	.word	0x40023800
20003c54:	40020800 	.word	0x40020800
20003c58:	40020000 	.word	0x40020000
20003c5c:	40020400 	.word	0x40020400
20003c60:	40021800 	.word	0x40021800

20003c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
20003c64:	b580      	push	{r7, lr}
20003c66:	b08c      	sub	sp, #48	@ 0x30
20003c68:	af00      	add	r7, sp, #0
20003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003c6c:	f107 031c 	add.w	r3, r7, #28
20003c70:	2200      	movs	r2, #0
20003c72:	601a      	str	r2, [r3, #0]
20003c74:	605a      	str	r2, [r3, #4]
20003c76:	609a      	str	r2, [r3, #8]
20003c78:	60da      	str	r2, [r3, #12]
20003c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
20003c7c:	687b      	ldr	r3, [r7, #4]
20003c7e:	681b      	ldr	r3, [r3, #0]
20003c80:	4a3c      	ldr	r2, [pc, #240]	@ (20003d74 <HAL_SPI_MspInit+0x110>)
20003c82:	4293      	cmp	r3, r2
20003c84:	d144      	bne.n	20003d10 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
20003c86:	4b3c      	ldr	r3, [pc, #240]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003c8a:	4a3b      	ldr	r2, [pc, #236]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003c8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
20003c90:	6453      	str	r3, [r2, #68]	@ 0x44
20003c92:	4b39      	ldr	r3, [pc, #228]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20003c9a:	61bb      	str	r3, [r7, #24]
20003c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
20003c9e:	4b36      	ldr	r3, [pc, #216]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003ca2:	4a35      	ldr	r2, [pc, #212]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003ca4:	f043 0301 	orr.w	r3, r3, #1
20003ca8:	6313      	str	r3, [r2, #48]	@ 0x30
20003caa:	4b33      	ldr	r3, [pc, #204]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003cae:	f003 0301 	and.w	r3, r3, #1
20003cb2:	617b      	str	r3, [r7, #20]
20003cb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20003cb6:	4b30      	ldr	r3, [pc, #192]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003cba:	4a2f      	ldr	r2, [pc, #188]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003cbc:	f043 0302 	orr.w	r3, r3, #2
20003cc0:	6313      	str	r3, [r2, #48]	@ 0x30
20003cc2:	4b2d      	ldr	r3, [pc, #180]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003cc6:	f003 0302 	and.w	r3, r3, #2
20003cca:	613b      	str	r3, [r7, #16]
20003ccc:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
20003cce:	2360      	movs	r3, #96	@ 0x60
20003cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003cd2:	2302      	movs	r3, #2
20003cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003cd6:	2300      	movs	r3, #0
20003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003cda:	2303      	movs	r3, #3
20003cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20003cde:	2305      	movs	r3, #5
20003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20003ce2:	f107 031c 	add.w	r3, r7, #28
20003ce6:	4619      	mov	r1, r3
20003ce8:	4824      	ldr	r0, [pc, #144]	@ (20003d7c <HAL_SPI_MspInit+0x118>)
20003cea:	f000 fe41 	bl	20004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
20003cee:	2320      	movs	r3, #32
20003cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003cf2:	2302      	movs	r3, #2
20003cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003cf6:	2300      	movs	r3, #0
20003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003cfa:	2303      	movs	r3, #3
20003cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20003cfe:	2305      	movs	r3, #5
20003d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20003d02:	f107 031c 	add.w	r3, r7, #28
20003d06:	4619      	mov	r1, r3
20003d08:	481d      	ldr	r0, [pc, #116]	@ (20003d80 <HAL_SPI_MspInit+0x11c>)
20003d0a:	f000 fe31 	bl	20004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
20003d0e:	e02c      	b.n	20003d6a <HAL_SPI_MspInit+0x106>
  else if(hspi->Instance==SPI4)
20003d10:	687b      	ldr	r3, [r7, #4]
20003d12:	681b      	ldr	r3, [r3, #0]
20003d14:	4a1b      	ldr	r2, [pc, #108]	@ (20003d84 <HAL_SPI_MspInit+0x120>)
20003d16:	4293      	cmp	r3, r2
20003d18:	d127      	bne.n	20003d6a <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
20003d1a:	4b17      	ldr	r3, [pc, #92]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003d1e:	4a16      	ldr	r2, [pc, #88]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003d20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
20003d24:	6453      	str	r3, [r2, #68]	@ 0x44
20003d26:	4b14      	ldr	r3, [pc, #80]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20003d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20003d2e:	60fb      	str	r3, [r7, #12]
20003d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
20003d32:	4b11      	ldr	r3, [pc, #68]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003d36:	4a10      	ldr	r2, [pc, #64]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003d38:	f043 0310 	orr.w	r3, r3, #16
20003d3c:	6313      	str	r3, [r2, #48]	@ 0x30
20003d3e:	4b0e      	ldr	r3, [pc, #56]	@ (20003d78 <HAL_SPI_MspInit+0x114>)
20003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003d42:	f003 0310 	and.w	r3, r3, #16
20003d46:	60bb      	str	r3, [r7, #8]
20003d48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
20003d4a:	2364      	movs	r3, #100	@ 0x64
20003d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003d4e:	2302      	movs	r3, #2
20003d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003d52:	2300      	movs	r3, #0
20003d54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003d56:	2303      	movs	r3, #3
20003d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
20003d5a:	2305      	movs	r3, #5
20003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
20003d5e:	f107 031c 	add.w	r3, r7, #28
20003d62:	4619      	mov	r1, r3
20003d64:	4808      	ldr	r0, [pc, #32]	@ (20003d88 <HAL_SPI_MspInit+0x124>)
20003d66:	f000 fe03 	bl	20004970 <HAL_GPIO_Init>
}
20003d6a:	bf00      	nop
20003d6c:	3730      	adds	r7, #48	@ 0x30
20003d6e:	46bd      	mov	sp, r7
20003d70:	bd80      	pop	{r7, pc}
20003d72:	bf00      	nop
20003d74:	40013000 	.word	0x40013000
20003d78:	40023800 	.word	0x40023800
20003d7c:	40020000 	.word	0x40020000
20003d80:	40020400 	.word	0x40020400
20003d84:	40013400 	.word	0x40013400
20003d88:	40021000 	.word	0x40021000

20003d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
20003d8c:	b580      	push	{r7, lr}
20003d8e:	b0aa      	sub	sp, #168	@ 0xa8
20003d90:	af00      	add	r7, sp, #0
20003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003d94:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20003d98:	2200      	movs	r2, #0
20003d9a:	601a      	str	r2, [r3, #0]
20003d9c:	605a      	str	r2, [r3, #4]
20003d9e:	609a      	str	r2, [r3, #8]
20003da0:	60da      	str	r2, [r3, #12]
20003da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
20003da4:	f107 0310 	add.w	r3, r7, #16
20003da8:	2284      	movs	r2, #132	@ 0x84
20003daa:	2100      	movs	r1, #0
20003dac:	4618      	mov	r0, r3
20003dae:	f008 f8bd 	bl	2000bf2c <memset>
  if(huart->Instance==USART3)
20003db2:	687b      	ldr	r3, [r7, #4]
20003db4:	681b      	ldr	r3, [r3, #0]
20003db6:	4a22      	ldr	r2, [pc, #136]	@ (20003e40 <HAL_UART_MspInit+0xb4>)
20003db8:	4293      	cmp	r3, r2
20003dba:	d13c      	bne.n	20003e36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
20003dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
20003dc0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
20003dc2:	2300      	movs	r3, #0
20003dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
20003dc6:	f107 0310 	add.w	r3, r7, #16
20003dca:	4618      	mov	r0, r3
20003dcc:	f002 ff64 	bl	20006c98 <HAL_RCCEx_PeriphCLKConfig>
20003dd0:	4603      	mov	r3, r0
20003dd2:	2b00      	cmp	r3, #0
20003dd4:	d001      	beq.n	20003dda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
20003dd6:	f7ff fe63 	bl	20003aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
20003dda:	4b1a      	ldr	r3, [pc, #104]	@ (20003e44 <HAL_UART_MspInit+0xb8>)
20003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003dde:	4a19      	ldr	r2, [pc, #100]	@ (20003e44 <HAL_UART_MspInit+0xb8>)
20003de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20003de4:	6413      	str	r3, [r2, #64]	@ 0x40
20003de6:	4b17      	ldr	r3, [pc, #92]	@ (20003e44 <HAL_UART_MspInit+0xb8>)
20003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20003dee:	60fb      	str	r3, [r7, #12]
20003df0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
20003df2:	4b14      	ldr	r3, [pc, #80]	@ (20003e44 <HAL_UART_MspInit+0xb8>)
20003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003df6:	4a13      	ldr	r2, [pc, #76]	@ (20003e44 <HAL_UART_MspInit+0xb8>)
20003df8:	f043 0308 	orr.w	r3, r3, #8
20003dfc:	6313      	str	r3, [r2, #48]	@ 0x30
20003dfe:	4b11      	ldr	r3, [pc, #68]	@ (20003e44 <HAL_UART_MspInit+0xb8>)
20003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003e02:	f003 0308 	and.w	r3, r3, #8
20003e06:	60bb      	str	r3, [r7, #8]
20003e08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
20003e0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
20003e0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003e12:	2302      	movs	r3, #2
20003e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
20003e18:	2301      	movs	r3, #1
20003e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003e1e:	2303      	movs	r3, #3
20003e20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
20003e24:	2307      	movs	r3, #7
20003e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20003e2a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20003e2e:	4619      	mov	r1, r3
20003e30:	4805      	ldr	r0, [pc, #20]	@ (20003e48 <HAL_UART_MspInit+0xbc>)
20003e32:	f000 fd9d 	bl	20004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
20003e36:	bf00      	nop
20003e38:	37a8      	adds	r7, #168	@ 0xa8
20003e3a:	46bd      	mov	sp, r7
20003e3c:	bd80      	pop	{r7, pc}
20003e3e:	bf00      	nop
20003e40:	40004800 	.word	0x40004800
20003e44:	40023800 	.word	0x40023800
20003e48:	40020c00 	.word	0x40020c00

20003e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20003e4c:	b480      	push	{r7}
20003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
20003e50:	bf00      	nop
20003e52:	e7fd      	b.n	20003e50 <NMI_Handler+0x4>

20003e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20003e54:	b480      	push	{r7}
20003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20003e58:	bf00      	nop
20003e5a:	e7fd      	b.n	20003e58 <HardFault_Handler+0x4>

20003e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20003e5c:	b480      	push	{r7}
20003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20003e60:	bf00      	nop
20003e62:	e7fd      	b.n	20003e60 <MemManage_Handler+0x4>

20003e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20003e64:	b480      	push	{r7}
20003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20003e68:	bf00      	nop
20003e6a:	e7fd      	b.n	20003e68 <BusFault_Handler+0x4>

20003e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20003e6c:	b480      	push	{r7}
20003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20003e70:	bf00      	nop
20003e72:	e7fd      	b.n	20003e70 <UsageFault_Handler+0x4>

20003e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20003e74:	b480      	push	{r7}
20003e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
20003e78:	bf00      	nop
20003e7a:	46bd      	mov	sp, r7
20003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003e80:	4770      	bx	lr

20003e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20003e82:	b480      	push	{r7}
20003e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20003e86:	bf00      	nop
20003e88:	46bd      	mov	sp, r7
20003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20003e8e:	4770      	bx	lr

20003e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20003e90:	b480      	push	{r7}
20003e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20003e94:	bf00      	nop
20003e96:	46bd      	mov	sp, r7
20003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
20003e9c:	4770      	bx	lr

20003e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20003e9e:	b580      	push	{r7, lr}
20003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20003ea2:	f000 f8c1 	bl	20004028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20003ea6:	bf00      	nop
20003ea8:	bd80      	pop	{r7, pc}
	...

20003eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
20003eac:	b580      	push	{r7, lr}
20003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	cnt++;
20003eb0:	4b04      	ldr	r3, [pc, #16]	@ (20003ec4 <OTG_FS_IRQHandler+0x18>)
20003eb2:	681b      	ldr	r3, [r3, #0]
20003eb4:	3301      	adds	r3, #1
20003eb6:	4a03      	ldr	r2, [pc, #12]	@ (20003ec4 <OTG_FS_IRQHandler+0x18>)
20003eb8:	6013      	str	r3, [r2, #0]

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
20003eba:	4803      	ldr	r0, [pc, #12]	@ (20003ec8 <OTG_FS_IRQHandler+0x1c>)
20003ebc:	f001 f86f 	bl	20004f9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
20003ec0:	bf00      	nop
20003ec2:	bd80      	pop	{r7, pc}
20003ec4:	2000d36c 	.word	0x2000d36c
20003ec8:	2000d858 	.word	0x2000d858

20003ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20003ecc:	b580      	push	{r7, lr}
20003ece:	b086      	sub	sp, #24
20003ed0:	af00      	add	r7, sp, #0
20003ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20003ed4:	4a14      	ldr	r2, [pc, #80]	@ (20003f28 <_sbrk+0x5c>)
20003ed6:	4b15      	ldr	r3, [pc, #84]	@ (20003f2c <_sbrk+0x60>)
20003ed8:	1ad3      	subs	r3, r2, r3
20003eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20003edc:	697b      	ldr	r3, [r7, #20]
20003ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20003ee0:	4b13      	ldr	r3, [pc, #76]	@ (20003f30 <_sbrk+0x64>)
20003ee2:	681b      	ldr	r3, [r3, #0]
20003ee4:	2b00      	cmp	r3, #0
20003ee6:	d102      	bne.n	20003eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20003ee8:	4b11      	ldr	r3, [pc, #68]	@ (20003f30 <_sbrk+0x64>)
20003eea:	4a12      	ldr	r2, [pc, #72]	@ (20003f34 <_sbrk+0x68>)
20003eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20003eee:	4b10      	ldr	r3, [pc, #64]	@ (20003f30 <_sbrk+0x64>)
20003ef0:	681a      	ldr	r2, [r3, #0]
20003ef2:	687b      	ldr	r3, [r7, #4]
20003ef4:	4413      	add	r3, r2
20003ef6:	693a      	ldr	r2, [r7, #16]
20003ef8:	429a      	cmp	r2, r3
20003efa:	d207      	bcs.n	20003f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
20003efc:	f008 f82e 	bl	2000bf5c <__errno>
20003f00:	4603      	mov	r3, r0
20003f02:	220c      	movs	r2, #12
20003f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
20003f06:	f04f 33ff 	mov.w	r3, #4294967295
20003f0a:	e009      	b.n	20003f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20003f0c:	4b08      	ldr	r3, [pc, #32]	@ (20003f30 <_sbrk+0x64>)
20003f0e:	681b      	ldr	r3, [r3, #0]
20003f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
20003f12:	4b07      	ldr	r3, [pc, #28]	@ (20003f30 <_sbrk+0x64>)
20003f14:	681a      	ldr	r2, [r3, #0]
20003f16:	687b      	ldr	r3, [r7, #4]
20003f18:	4413      	add	r3, r2
20003f1a:	4a05      	ldr	r2, [pc, #20]	@ (20003f30 <_sbrk+0x64>)
20003f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20003f1e:	68fb      	ldr	r3, [r7, #12]
}
20003f20:	4618      	mov	r0, r3
20003f22:	3718      	adds	r7, #24
20003f24:	46bd      	mov	sp, r7
20003f26:	bd80      	pop	{r7, pc}
20003f28:	20050000 	.word	0x20050000
20003f2c:	00000400 	.word	0x00000400
20003f30:	2000d370 	.word	0x2000d370
20003f34:	2000de80 	.word	0x2000de80

20003f38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20003f38:	b480      	push	{r7}
20003f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20003f3c:	4b06      	ldr	r3, [pc, #24]	@ (20003f58 <SystemInit+0x20>)
20003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20003f42:	4a05      	ldr	r2, [pc, #20]	@ (20003f58 <SystemInit+0x20>)
20003f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
20003f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20003f4c:	bf00      	nop
20003f4e:	46bd      	mov	sp, r7
20003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
20003f54:	4770      	bx	lr
20003f56:	bf00      	nop
20003f58:	e000ed00 	.word	0xe000ed00

20003f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20003f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 20003f94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
20003f60:	f7ff ffea 	bl	20003f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20003f64:	480c      	ldr	r0, [pc, #48]	@ (20003f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
20003f66:	490d      	ldr	r1, [pc, #52]	@ (20003f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
20003f68:	4a0d      	ldr	r2, [pc, #52]	@ (20003fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
20003f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
20003f6c:	e002      	b.n	20003f74 <LoopCopyDataInit>

20003f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20003f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20003f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20003f72:	3304      	adds	r3, #4

20003f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20003f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20003f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
20003f78:	d3f9      	bcc.n	20003f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (20003fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
20003f7c:	4c0a      	ldr	r4, [pc, #40]	@ (20003fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
20003f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
20003f80:	e001      	b.n	20003f86 <LoopFillZerobss>

20003f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20003f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20003f84:	3204      	adds	r2, #4

20003f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20003f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
20003f88:	d3fb      	bcc.n	20003f82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
20003f8a:	f007 ffed 	bl	2000bf68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20003f8e:	f7ff f9e7 	bl	20003360 <main>
  bx  lr    
20003f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20003f94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
20003f98:	2000c0ec 	.word	0x2000c0ec
  ldr r1, =_edata
20003f9c:	2000c274 	.word	0x2000c274
  ldr r2, =_sidata
20003fa0:	2000c0ec 	.word	0x2000c0ec
  ldr r2, =_sbss
20003fa4:	2000c3b4 	.word	0x2000c3b4
  ldr r4, =_ebss
20003fa8:	2000de80 	.word	0x2000de80

20003fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20003fac:	e7fe      	b.n	20003fac <ADC_IRQHandler>

20003fae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20003fae:	b580      	push	{r7, lr}
20003fb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20003fb2:	2003      	movs	r0, #3
20003fb4:	f000 f94c 	bl	20004250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20003fb8:	2000      	movs	r0, #0
20003fba:	f000 f805 	bl	20003fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20003fbe:	f7ff fd75 	bl	20003aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20003fc2:	2300      	movs	r3, #0
}
20003fc4:	4618      	mov	r0, r3
20003fc6:	bd80      	pop	{r7, pc}

20003fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20003fc8:	b580      	push	{r7, lr}
20003fca:	b082      	sub	sp, #8
20003fcc:	af00      	add	r7, sp, #0
20003fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20003fd0:	4b12      	ldr	r3, [pc, #72]	@ (2000401c <HAL_InitTick+0x54>)
20003fd2:	681a      	ldr	r2, [r3, #0]
20003fd4:	4b12      	ldr	r3, [pc, #72]	@ (20004020 <HAL_InitTick+0x58>)
20003fd6:	781b      	ldrb	r3, [r3, #0]
20003fd8:	4619      	mov	r1, r3
20003fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
20003fde:	fbb3 f3f1 	udiv	r3, r3, r1
20003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
20003fe6:	4618      	mov	r0, r3
20003fe8:	f000 f967 	bl	200042ba <HAL_SYSTICK_Config>
20003fec:	4603      	mov	r3, r0
20003fee:	2b00      	cmp	r3, #0
20003ff0:	d001      	beq.n	20003ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20003ff2:	2301      	movs	r3, #1
20003ff4:	e00e      	b.n	20004014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20003ff6:	687b      	ldr	r3, [r7, #4]
20003ff8:	2b0f      	cmp	r3, #15
20003ffa:	d80a      	bhi.n	20004012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20003ffc:	2200      	movs	r2, #0
20003ffe:	6879      	ldr	r1, [r7, #4]
20004000:	f04f 30ff 	mov.w	r0, #4294967295
20004004:	f000 f92f 	bl	20004266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20004008:	4a06      	ldr	r2, [pc, #24]	@ (20004024 <HAL_InitTick+0x5c>)
2000400a:	687b      	ldr	r3, [r7, #4]
2000400c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000400e:	2300      	movs	r3, #0
20004010:	e000      	b.n	20004014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20004012:	2301      	movs	r3, #1
}
20004014:	4618      	mov	r0, r3
20004016:	3708      	adds	r7, #8
20004018:	46bd      	mov	sp, r7
2000401a:	bd80      	pop	{r7, pc}
2000401c:	2000c0ec 	.word	0x2000c0ec
20004020:	2000c0f4 	.word	0x2000c0f4
20004024:	2000c0f0 	.word	0x2000c0f0

20004028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20004028:	b480      	push	{r7}
2000402a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000402c:	4b06      	ldr	r3, [pc, #24]	@ (20004048 <HAL_IncTick+0x20>)
2000402e:	781b      	ldrb	r3, [r3, #0]
20004030:	461a      	mov	r2, r3
20004032:	4b06      	ldr	r3, [pc, #24]	@ (2000404c <HAL_IncTick+0x24>)
20004034:	681b      	ldr	r3, [r3, #0]
20004036:	4413      	add	r3, r2
20004038:	4a04      	ldr	r2, [pc, #16]	@ (2000404c <HAL_IncTick+0x24>)
2000403a:	6013      	str	r3, [r2, #0]
}
2000403c:	bf00      	nop
2000403e:	46bd      	mov	sp, r7
20004040:	f85d 7b04 	ldr.w	r7, [sp], #4
20004044:	4770      	bx	lr
20004046:	bf00      	nop
20004048:	2000c0f4 	.word	0x2000c0f4
2000404c:	2000d374 	.word	0x2000d374

20004050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20004050:	b480      	push	{r7}
20004052:	af00      	add	r7, sp, #0
  return uwTick;
20004054:	4b03      	ldr	r3, [pc, #12]	@ (20004064 <HAL_GetTick+0x14>)
20004056:	681b      	ldr	r3, [r3, #0]
}
20004058:	4618      	mov	r0, r3
2000405a:	46bd      	mov	sp, r7
2000405c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004060:	4770      	bx	lr
20004062:	bf00      	nop
20004064:	2000d374 	.word	0x2000d374

20004068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20004068:	b580      	push	{r7, lr}
2000406a:	b084      	sub	sp, #16
2000406c:	af00      	add	r7, sp, #0
2000406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20004070:	f7ff ffee 	bl	20004050 <HAL_GetTick>
20004074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20004076:	687b      	ldr	r3, [r7, #4]
20004078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000407a:	68fb      	ldr	r3, [r7, #12]
2000407c:	f1b3 3fff 	cmp.w	r3, #4294967295
20004080:	d005      	beq.n	2000408e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20004082:	4b0a      	ldr	r3, [pc, #40]	@ (200040ac <HAL_Delay+0x44>)
20004084:	781b      	ldrb	r3, [r3, #0]
20004086:	461a      	mov	r2, r3
20004088:	68fb      	ldr	r3, [r7, #12]
2000408a:	4413      	add	r3, r2
2000408c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
2000408e:	bf00      	nop
20004090:	f7ff ffde 	bl	20004050 <HAL_GetTick>
20004094:	4602      	mov	r2, r0
20004096:	68bb      	ldr	r3, [r7, #8]
20004098:	1ad3      	subs	r3, r2, r3
2000409a:	68fa      	ldr	r2, [r7, #12]
2000409c:	429a      	cmp	r2, r3
2000409e:	d8f7      	bhi.n	20004090 <HAL_Delay+0x28>
  {
  }
}
200040a0:	bf00      	nop
200040a2:	bf00      	nop
200040a4:	3710      	adds	r7, #16
200040a6:	46bd      	mov	sp, r7
200040a8:	bd80      	pop	{r7, pc}
200040aa:	bf00      	nop
200040ac:	2000c0f4 	.word	0x2000c0f4

200040b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200040b0:	b480      	push	{r7}
200040b2:	b085      	sub	sp, #20
200040b4:	af00      	add	r7, sp, #0
200040b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
200040b8:	687b      	ldr	r3, [r7, #4]
200040ba:	f003 0307 	and.w	r3, r3, #7
200040be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200040c0:	4b0b      	ldr	r3, [pc, #44]	@ (200040f0 <__NVIC_SetPriorityGrouping+0x40>)
200040c2:	68db      	ldr	r3, [r3, #12]
200040c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200040c6:	68ba      	ldr	r2, [r7, #8]
200040c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
200040cc:	4013      	ands	r3, r2
200040ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200040d0:	68fb      	ldr	r3, [r7, #12]
200040d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200040d4:	68bb      	ldr	r3, [r7, #8]
200040d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
200040d8:	4b06      	ldr	r3, [pc, #24]	@ (200040f4 <__NVIC_SetPriorityGrouping+0x44>)
200040da:	4313      	orrs	r3, r2
200040dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200040de:	4a04      	ldr	r2, [pc, #16]	@ (200040f0 <__NVIC_SetPriorityGrouping+0x40>)
200040e0:	68bb      	ldr	r3, [r7, #8]
200040e2:	60d3      	str	r3, [r2, #12]
}
200040e4:	bf00      	nop
200040e6:	3714      	adds	r7, #20
200040e8:	46bd      	mov	sp, r7
200040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200040ee:	4770      	bx	lr
200040f0:	e000ed00 	.word	0xe000ed00
200040f4:	05fa0000 	.word	0x05fa0000

200040f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200040f8:	b480      	push	{r7}
200040fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200040fc:	4b04      	ldr	r3, [pc, #16]	@ (20004110 <__NVIC_GetPriorityGrouping+0x18>)
200040fe:	68db      	ldr	r3, [r3, #12]
20004100:	0a1b      	lsrs	r3, r3, #8
20004102:	f003 0307 	and.w	r3, r3, #7
}
20004106:	4618      	mov	r0, r3
20004108:	46bd      	mov	sp, r7
2000410a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000410e:	4770      	bx	lr
20004110:	e000ed00 	.word	0xe000ed00

20004114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004114:	b480      	push	{r7}
20004116:	b083      	sub	sp, #12
20004118:	af00      	add	r7, sp, #0
2000411a:	4603      	mov	r3, r0
2000411c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004122:	2b00      	cmp	r3, #0
20004124:	db0b      	blt.n	2000413e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20004126:	79fb      	ldrb	r3, [r7, #7]
20004128:	f003 021f 	and.w	r2, r3, #31
2000412c:	4907      	ldr	r1, [pc, #28]	@ (2000414c <__NVIC_EnableIRQ+0x38>)
2000412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004132:	095b      	lsrs	r3, r3, #5
20004134:	2001      	movs	r0, #1
20004136:	fa00 f202 	lsl.w	r2, r0, r2
2000413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
2000413e:	bf00      	nop
20004140:	370c      	adds	r7, #12
20004142:	46bd      	mov	sp, r7
20004144:	f85d 7b04 	ldr.w	r7, [sp], #4
20004148:	4770      	bx	lr
2000414a:	bf00      	nop
2000414c:	e000e100 	.word	0xe000e100

20004150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004150:	b480      	push	{r7}
20004152:	b083      	sub	sp, #12
20004154:	af00      	add	r7, sp, #0
20004156:	4603      	mov	r3, r0
20004158:	6039      	str	r1, [r7, #0]
2000415a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004160:	2b00      	cmp	r3, #0
20004162:	db0a      	blt.n	2000417a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004164:	683b      	ldr	r3, [r7, #0]
20004166:	b2da      	uxtb	r2, r3
20004168:	490c      	ldr	r1, [pc, #48]	@ (2000419c <__NVIC_SetPriority+0x4c>)
2000416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000416e:	0112      	lsls	r2, r2, #4
20004170:	b2d2      	uxtb	r2, r2
20004172:	440b      	add	r3, r1
20004174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20004178:	e00a      	b.n	20004190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000417a:	683b      	ldr	r3, [r7, #0]
2000417c:	b2da      	uxtb	r2, r3
2000417e:	4908      	ldr	r1, [pc, #32]	@ (200041a0 <__NVIC_SetPriority+0x50>)
20004180:	79fb      	ldrb	r3, [r7, #7]
20004182:	f003 030f 	and.w	r3, r3, #15
20004186:	3b04      	subs	r3, #4
20004188:	0112      	lsls	r2, r2, #4
2000418a:	b2d2      	uxtb	r2, r2
2000418c:	440b      	add	r3, r1
2000418e:	761a      	strb	r2, [r3, #24]
}
20004190:	bf00      	nop
20004192:	370c      	adds	r7, #12
20004194:	46bd      	mov	sp, r7
20004196:	f85d 7b04 	ldr.w	r7, [sp], #4
2000419a:	4770      	bx	lr
2000419c:	e000e100 	.word	0xe000e100
200041a0:	e000ed00 	.word	0xe000ed00

200041a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
200041a4:	b480      	push	{r7}
200041a6:	b089      	sub	sp, #36	@ 0x24
200041a8:	af00      	add	r7, sp, #0
200041aa:	60f8      	str	r0, [r7, #12]
200041ac:	60b9      	str	r1, [r7, #8]
200041ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200041b0:	68fb      	ldr	r3, [r7, #12]
200041b2:	f003 0307 	and.w	r3, r3, #7
200041b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200041b8:	69fb      	ldr	r3, [r7, #28]
200041ba:	f1c3 0307 	rsb	r3, r3, #7
200041be:	2b04      	cmp	r3, #4
200041c0:	bf28      	it	cs
200041c2:	2304      	movcs	r3, #4
200041c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200041c6:	69fb      	ldr	r3, [r7, #28]
200041c8:	3304      	adds	r3, #4
200041ca:	2b06      	cmp	r3, #6
200041cc:	d902      	bls.n	200041d4 <NVIC_EncodePriority+0x30>
200041ce:	69fb      	ldr	r3, [r7, #28]
200041d0:	3b03      	subs	r3, #3
200041d2:	e000      	b.n	200041d6 <NVIC_EncodePriority+0x32>
200041d4:	2300      	movs	r3, #0
200041d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200041d8:	f04f 32ff 	mov.w	r2, #4294967295
200041dc:	69bb      	ldr	r3, [r7, #24]
200041de:	fa02 f303 	lsl.w	r3, r2, r3
200041e2:	43da      	mvns	r2, r3
200041e4:	68bb      	ldr	r3, [r7, #8]
200041e6:	401a      	ands	r2, r3
200041e8:	697b      	ldr	r3, [r7, #20]
200041ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200041ec:	f04f 31ff 	mov.w	r1, #4294967295
200041f0:	697b      	ldr	r3, [r7, #20]
200041f2:	fa01 f303 	lsl.w	r3, r1, r3
200041f6:	43d9      	mvns	r1, r3
200041f8:	687b      	ldr	r3, [r7, #4]
200041fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200041fc:	4313      	orrs	r3, r2
         );
}
200041fe:	4618      	mov	r0, r3
20004200:	3724      	adds	r7, #36	@ 0x24
20004202:	46bd      	mov	sp, r7
20004204:	f85d 7b04 	ldr.w	r7, [sp], #4
20004208:	4770      	bx	lr
	...

2000420c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000420c:	b580      	push	{r7, lr}
2000420e:	b082      	sub	sp, #8
20004210:	af00      	add	r7, sp, #0
20004212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20004214:	687b      	ldr	r3, [r7, #4]
20004216:	3b01      	subs	r3, #1
20004218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2000421c:	d301      	bcc.n	20004222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000421e:	2301      	movs	r3, #1
20004220:	e00f      	b.n	20004242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20004222:	4a0a      	ldr	r2, [pc, #40]	@ (2000424c <SysTick_Config+0x40>)
20004224:	687b      	ldr	r3, [r7, #4]
20004226:	3b01      	subs	r3, #1
20004228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000422a:	210f      	movs	r1, #15
2000422c:	f04f 30ff 	mov.w	r0, #4294967295
20004230:	f7ff ff8e 	bl	20004150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20004234:	4b05      	ldr	r3, [pc, #20]	@ (2000424c <SysTick_Config+0x40>)
20004236:	2200      	movs	r2, #0
20004238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000423a:	4b04      	ldr	r3, [pc, #16]	@ (2000424c <SysTick_Config+0x40>)
2000423c:	2207      	movs	r2, #7
2000423e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20004240:	2300      	movs	r3, #0
}
20004242:	4618      	mov	r0, r3
20004244:	3708      	adds	r7, #8
20004246:	46bd      	mov	sp, r7
20004248:	bd80      	pop	{r7, pc}
2000424a:	bf00      	nop
2000424c:	e000e010 	.word	0xe000e010

20004250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20004250:	b580      	push	{r7, lr}
20004252:	b082      	sub	sp, #8
20004254:	af00      	add	r7, sp, #0
20004256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20004258:	6878      	ldr	r0, [r7, #4]
2000425a:	f7ff ff29 	bl	200040b0 <__NVIC_SetPriorityGrouping>
}
2000425e:	bf00      	nop
20004260:	3708      	adds	r7, #8
20004262:	46bd      	mov	sp, r7
20004264:	bd80      	pop	{r7, pc}

20004266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20004266:	b580      	push	{r7, lr}
20004268:	b086      	sub	sp, #24
2000426a:	af00      	add	r7, sp, #0
2000426c:	4603      	mov	r3, r0
2000426e:	60b9      	str	r1, [r7, #8]
20004270:	607a      	str	r2, [r7, #4]
20004272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
20004274:	2300      	movs	r3, #0
20004276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20004278:	f7ff ff3e 	bl	200040f8 <__NVIC_GetPriorityGrouping>
2000427c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000427e:	687a      	ldr	r2, [r7, #4]
20004280:	68b9      	ldr	r1, [r7, #8]
20004282:	6978      	ldr	r0, [r7, #20]
20004284:	f7ff ff8e 	bl	200041a4 <NVIC_EncodePriority>
20004288:	4602      	mov	r2, r0
2000428a:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000428e:	4611      	mov	r1, r2
20004290:	4618      	mov	r0, r3
20004292:	f7ff ff5d 	bl	20004150 <__NVIC_SetPriority>
}
20004296:	bf00      	nop
20004298:	3718      	adds	r7, #24
2000429a:	46bd      	mov	sp, r7
2000429c:	bd80      	pop	{r7, pc}

2000429e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000429e:	b580      	push	{r7, lr}
200042a0:	b082      	sub	sp, #8
200042a2:	af00      	add	r7, sp, #0
200042a4:	4603      	mov	r3, r0
200042a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
200042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200042ac:	4618      	mov	r0, r3
200042ae:	f7ff ff31 	bl	20004114 <__NVIC_EnableIRQ>
}
200042b2:	bf00      	nop
200042b4:	3708      	adds	r7, #8
200042b6:	46bd      	mov	sp, r7
200042b8:	bd80      	pop	{r7, pc}

200042ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
200042ba:	b580      	push	{r7, lr}
200042bc:	b082      	sub	sp, #8
200042be:	af00      	add	r7, sp, #0
200042c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
200042c2:	6878      	ldr	r0, [r7, #4]
200042c4:	f7ff ffa2 	bl	2000420c <SysTick_Config>
200042c8:	4603      	mov	r3, r0
}
200042ca:	4618      	mov	r0, r3
200042cc:	3708      	adds	r7, #8
200042ce:	46bd      	mov	sp, r7
200042d0:	bd80      	pop	{r7, pc}
	...

200042d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
200042d4:	b580      	push	{r7, lr}
200042d6:	b084      	sub	sp, #16
200042d8:	af00      	add	r7, sp, #0
200042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
200042dc:	687b      	ldr	r3, [r7, #4]
200042de:	2b00      	cmp	r3, #0
200042e0:	d101      	bne.n	200042e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
200042e2:	2301      	movs	r3, #1
200042e4:	e086      	b.n	200043f4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
200042e6:	687b      	ldr	r3, [r7, #4]
200042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200042ec:	2b00      	cmp	r3, #0
200042ee:	d106      	bne.n	200042fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
200042f0:	687b      	ldr	r3, [r7, #4]
200042f2:	2220      	movs	r2, #32
200042f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
200042f8:	6878      	ldr	r0, [r7, #4]
200042fa:	f7ff fbfb 	bl	20003af4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
200042fe:	4b3f      	ldr	r3, [pc, #252]	@ (200043fc <HAL_ETH_Init+0x128>)
20004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004302:	4a3e      	ldr	r2, [pc, #248]	@ (200043fc <HAL_ETH_Init+0x128>)
20004304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20004308:	6453      	str	r3, [r2, #68]	@ 0x44
2000430a:	4b3c      	ldr	r3, [pc, #240]	@ (200043fc <HAL_ETH_Init+0x128>)
2000430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000430e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20004312:	60bb      	str	r3, [r7, #8]
20004314:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
20004316:	4b3a      	ldr	r3, [pc, #232]	@ (20004400 <HAL_ETH_Init+0x12c>)
20004318:	685b      	ldr	r3, [r3, #4]
2000431a:	4a39      	ldr	r2, [pc, #228]	@ (20004400 <HAL_ETH_Init+0x12c>)
2000431c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
20004320:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
20004322:	4b37      	ldr	r3, [pc, #220]	@ (20004400 <HAL_ETH_Init+0x12c>)
20004324:	685a      	ldr	r2, [r3, #4]
20004326:	687b      	ldr	r3, [r7, #4]
20004328:	689b      	ldr	r3, [r3, #8]
2000432a:	4935      	ldr	r1, [pc, #212]	@ (20004400 <HAL_ETH_Init+0x12c>)
2000432c:	4313      	orrs	r3, r2
2000432e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
20004330:	4b33      	ldr	r3, [pc, #204]	@ (20004400 <HAL_ETH_Init+0x12c>)
20004332:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
20004334:	687b      	ldr	r3, [r7, #4]
20004336:	681b      	ldr	r3, [r3, #0]
20004338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000433c:	681b      	ldr	r3, [r3, #0]
2000433e:	687a      	ldr	r2, [r7, #4]
20004340:	6812      	ldr	r2, [r2, #0]
20004342:	f043 0301 	orr.w	r3, r3, #1
20004346:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
2000434a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000434c:	f7ff fe80 	bl	20004050 <HAL_GetTick>
20004350:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
20004352:	e011      	b.n	20004378 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
20004354:	f7ff fe7c 	bl	20004050 <HAL_GetTick>
20004358:	4602      	mov	r2, r0
2000435a:	68fb      	ldr	r3, [r7, #12]
2000435c:	1ad3      	subs	r3, r2, r3
2000435e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
20004362:	d909      	bls.n	20004378 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
20004364:	687b      	ldr	r3, [r7, #4]
20004366:	2204      	movs	r2, #4
20004368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
2000436c:	687b      	ldr	r3, [r7, #4]
2000436e:	22e0      	movs	r2, #224	@ 0xe0
20004370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
20004374:	2301      	movs	r3, #1
20004376:	e03d      	b.n	200043f4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
20004378:	687b      	ldr	r3, [r7, #4]
2000437a:	681b      	ldr	r3, [r3, #0]
2000437c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004380:	681b      	ldr	r3, [r3, #0]
20004382:	f003 0301 	and.w	r3, r3, #1
20004386:	2b00      	cmp	r3, #0
20004388:	d1e4      	bne.n	20004354 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
2000438a:	6878      	ldr	r0, [r7, #4]
2000438c:	f000 f97a 	bl	20004684 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
20004390:	6878      	ldr	r0, [r7, #4]
20004392:	f000 fa25 	bl	200047e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
20004396:	6878      	ldr	r0, [r7, #4]
20004398:	f000 fa7b 	bl	20004892 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
2000439c:	687b      	ldr	r3, [r7, #4]
2000439e:	685b      	ldr	r3, [r3, #4]
200043a0:	461a      	mov	r2, r3
200043a2:	2100      	movs	r1, #0
200043a4:	6878      	ldr	r0, [r7, #4]
200043a6:	f000 f9e3 	bl	20004770 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
200043aa:	687b      	ldr	r3, [r7, #4]
200043ac:	681b      	ldr	r3, [r3, #0]
200043ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
200043b0:	687b      	ldr	r3, [r7, #4]
200043b2:	681b      	ldr	r3, [r3, #0]
200043b4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
200043b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
200043ba:	687b      	ldr	r3, [r7, #4]
200043bc:	681b      	ldr	r3, [r3, #0]
200043be:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
200043c2:	687b      	ldr	r3, [r7, #4]
200043c4:	681a      	ldr	r2, [r3, #0]
200043c6:	4b0f      	ldr	r3, [pc, #60]	@ (20004404 <HAL_ETH_Init+0x130>)
200043c8:	430b      	orrs	r3, r1
200043ca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
200043ce:	687b      	ldr	r3, [r7, #4]
200043d0:	681b      	ldr	r3, [r3, #0]
200043d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
200043d6:	687b      	ldr	r3, [r7, #4]
200043d8:	681b      	ldr	r3, [r3, #0]
200043da:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
200043de:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
200043e2:	687b      	ldr	r3, [r7, #4]
200043e4:	2200      	movs	r2, #0
200043e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
200043ea:	687b      	ldr	r3, [r7, #4]
200043ec:	2210      	movs	r2, #16
200043ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
200043f2:	2300      	movs	r3, #0
}
200043f4:	4618      	mov	r0, r3
200043f6:	3710      	adds	r7, #16
200043f8:	46bd      	mov	sp, r7
200043fa:	bd80      	pop	{r7, pc}
200043fc:	40023800 	.word	0x40023800
20004400:	40013800 	.word	0x40013800
20004404:	00020060 	.word	0x00020060

20004408 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
20004408:	b580      	push	{r7, lr}
2000440a:	b084      	sub	sp, #16
2000440c:	af00      	add	r7, sp, #0
2000440e:	6078      	str	r0, [r7, #4]
20004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
20004412:	687b      	ldr	r3, [r7, #4]
20004414:	681b      	ldr	r3, [r3, #0]
20004416:	681b      	ldr	r3, [r3, #0]
20004418:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
2000441a:	68fa      	ldr	r2, [r7, #12]
2000441c:	4b53      	ldr	r3, [pc, #332]	@ (2000456c <ETH_SetMACConfig+0x164>)
2000441e:	4013      	ands	r3, r2
20004420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20004422:	683b      	ldr	r3, [r7, #0]
20004424:	7b9b      	ldrb	r3, [r3, #14]
20004426:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20004428:	683a      	ldr	r2, [r7, #0]
2000442a:	7c12      	ldrb	r2, [r2, #16]
2000442c:	2a00      	cmp	r2, #0
2000442e:	d102      	bne.n	20004436 <ETH_SetMACConfig+0x2e>
20004430:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
20004434:	e000      	b.n	20004438 <ETH_SetMACConfig+0x30>
20004436:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20004438:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
2000443a:	683a      	ldr	r2, [r7, #0]
2000443c:	7c52      	ldrb	r2, [r2, #17]
2000443e:	2a00      	cmp	r2, #0
20004440:	d102      	bne.n	20004448 <ETH_SetMACConfig+0x40>
20004442:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
20004446:	e000      	b.n	2000444a <ETH_SetMACConfig+0x42>
20004448:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
2000444a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
2000444c:	683b      	ldr	r3, [r7, #0]
2000444e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
20004450:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
20004452:	683b      	ldr	r3, [r7, #0]
20004454:	7fdb      	ldrb	r3, [r3, #31]
20004456:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
20004458:	431a      	orrs	r2, r3
                        macconf->Speed |
2000445a:	683b      	ldr	r3, [r7, #0]
2000445c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
2000445e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20004460:	683a      	ldr	r2, [r7, #0]
20004462:	7f92      	ldrb	r2, [r2, #30]
20004464:	2a00      	cmp	r2, #0
20004466:	d102      	bne.n	2000446e <ETH_SetMACConfig+0x66>
20004468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
2000446c:	e000      	b.n	20004470 <ETH_SetMACConfig+0x68>
2000446e:	2200      	movs	r2, #0
                        macconf->Speed |
20004470:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
20004472:	683b      	ldr	r3, [r7, #0]
20004474:	7f1b      	ldrb	r3, [r3, #28]
20004476:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20004478:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
2000447a:	683b      	ldr	r3, [r7, #0]
2000447c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
2000447e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
20004480:	683b      	ldr	r3, [r7, #0]
20004482:	791b      	ldrb	r3, [r3, #4]
20004484:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
20004486:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
20004488:	683a      	ldr	r2, [r7, #0]
2000448a:	f892 2020 	ldrb.w	r2, [r2, #32]
2000448e:	2a00      	cmp	r2, #0
20004490:	d102      	bne.n	20004498 <ETH_SetMACConfig+0x90>
20004492:	f44f 7200 	mov.w	r2, #512	@ 0x200
20004496:	e000      	b.n	2000449a <ETH_SetMACConfig+0x92>
20004498:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
2000449a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
2000449c:	683b      	ldr	r3, [r7, #0]
2000449e:	7bdb      	ldrb	r3, [r3, #15]
200044a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
200044a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
200044a4:	683b      	ldr	r3, [r7, #0]
200044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
200044a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
200044aa:	683b      	ldr	r3, [r7, #0]
200044ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
200044b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
200044b2:	4313      	orrs	r3, r2
200044b4:	68fa      	ldr	r2, [r7, #12]
200044b6:	4313      	orrs	r3, r2
200044b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
200044ba:	687b      	ldr	r3, [r7, #4]
200044bc:	681b      	ldr	r3, [r3, #0]
200044be:	68fa      	ldr	r2, [r7, #12]
200044c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
200044c2:	687b      	ldr	r3, [r7, #4]
200044c4:	681b      	ldr	r3, [r3, #0]
200044c6:	681b      	ldr	r3, [r3, #0]
200044c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
200044ca:	2001      	movs	r0, #1
200044cc:	f7ff fdcc 	bl	20004068 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
200044d0:	687b      	ldr	r3, [r7, #4]
200044d2:	681b      	ldr	r3, [r3, #0]
200044d4:	68fa      	ldr	r2, [r7, #12]
200044d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
200044d8:	687b      	ldr	r3, [r7, #4]
200044da:	681b      	ldr	r3, [r3, #0]
200044dc:	699b      	ldr	r3, [r3, #24]
200044de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
200044e0:	68fa      	ldr	r2, [r7, #12]
200044e2:	f64f 7341 	movw	r3, #65345	@ 0xff41
200044e6:	4013      	ands	r3, r2
200044e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
200044ea:	683b      	ldr	r3, [r7, #0]
200044ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200044ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
200044f0:	683a      	ldr	r2, [r7, #0]
200044f2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
200044f6:	2a00      	cmp	r2, #0
200044f8:	d101      	bne.n	200044fe <ETH_SetMACConfig+0xf6>
200044fa:	2280      	movs	r2, #128	@ 0x80
200044fc:	e000      	b.n	20004500 <ETH_SetMACConfig+0xf8>
200044fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20004500:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
20004502:	683b      	ldr	r3, [r7, #0]
20004504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
20004506:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20004508:	683a      	ldr	r2, [r7, #0]
2000450a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
2000450e:	2a01      	cmp	r2, #1
20004510:	d101      	bne.n	20004516 <ETH_SetMACConfig+0x10e>
20004512:	2208      	movs	r2, #8
20004514:	e000      	b.n	20004518 <ETH_SetMACConfig+0x110>
20004516:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
20004518:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
2000451a:	683a      	ldr	r2, [r7, #0]
2000451c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
20004520:	2a01      	cmp	r2, #1
20004522:	d101      	bne.n	20004528 <ETH_SetMACConfig+0x120>
20004524:	2204      	movs	r2, #4
20004526:	e000      	b.n	2000452a <ETH_SetMACConfig+0x122>
20004528:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
2000452a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
2000452c:	683a      	ldr	r2, [r7, #0]
2000452e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
20004532:	2a01      	cmp	r2, #1
20004534:	d101      	bne.n	2000453a <ETH_SetMACConfig+0x132>
20004536:	2202      	movs	r2, #2
20004538:	e000      	b.n	2000453c <ETH_SetMACConfig+0x134>
2000453a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
2000453c:	4313      	orrs	r3, r2
2000453e:	68fa      	ldr	r2, [r7, #12]
20004540:	4313      	orrs	r3, r2
20004542:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
20004544:	687b      	ldr	r3, [r7, #4]
20004546:	681b      	ldr	r3, [r3, #0]
20004548:	68fa      	ldr	r2, [r7, #12]
2000454a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
2000454c:	687b      	ldr	r3, [r7, #4]
2000454e:	681b      	ldr	r3, [r3, #0]
20004550:	699b      	ldr	r3, [r3, #24]
20004552:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20004554:	2001      	movs	r0, #1
20004556:	f7ff fd87 	bl	20004068 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
2000455a:	687b      	ldr	r3, [r7, #4]
2000455c:	681b      	ldr	r3, [r3, #0]
2000455e:	68fa      	ldr	r2, [r7, #12]
20004560:	619a      	str	r2, [r3, #24]
}
20004562:	bf00      	nop
20004564:	3710      	adds	r7, #16
20004566:	46bd      	mov	sp, r7
20004568:	bd80      	pop	{r7, pc}
2000456a:	bf00      	nop
2000456c:	fd20810f 	.word	0xfd20810f

20004570 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
20004570:	b580      	push	{r7, lr}
20004572:	b084      	sub	sp, #16
20004574:	af00      	add	r7, sp, #0
20004576:	6078      	str	r0, [r7, #4]
20004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
2000457a:	687b      	ldr	r3, [r7, #4]
2000457c:	681b      	ldr	r3, [r3, #0]
2000457e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004582:	699b      	ldr	r3, [r3, #24]
20004584:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
20004586:	68fa      	ldr	r2, [r7, #12]
20004588:	4b3d      	ldr	r3, [pc, #244]	@ (20004680 <ETH_SetDMAConfig+0x110>)
2000458a:	4013      	ands	r3, r2
2000458c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
2000458e:	683b      	ldr	r3, [r7, #0]
20004590:	7b1b      	ldrb	r3, [r3, #12]
20004592:	2b00      	cmp	r3, #0
20004594:	d102      	bne.n	2000459c <ETH_SetDMAConfig+0x2c>
20004596:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
2000459a:	e000      	b.n	2000459e <ETH_SetDMAConfig+0x2e>
2000459c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
2000459e:	683b      	ldr	r3, [r7, #0]
200045a0:	7b5b      	ldrb	r3, [r3, #13]
200045a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
200045a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
200045a6:	683a      	ldr	r2, [r7, #0]
200045a8:	7f52      	ldrb	r2, [r2, #29]
200045aa:	2a00      	cmp	r2, #0
200045ac:	d102      	bne.n	200045b4 <ETH_SetDMAConfig+0x44>
200045ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
200045b2:	e000      	b.n	200045b6 <ETH_SetDMAConfig+0x46>
200045b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
200045b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
200045b8:	683b      	ldr	r3, [r7, #0]
200045ba:	7b9b      	ldrb	r3, [r3, #14]
200045bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
200045be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
200045c0:	683b      	ldr	r3, [r7, #0]
200045c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
200045c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
200045c6:	683b      	ldr	r3, [r7, #0]
200045c8:	7f1b      	ldrb	r3, [r3, #28]
200045ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
200045cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
200045ce:	683b      	ldr	r3, [r7, #0]
200045d0:	7f9b      	ldrb	r3, [r3, #30]
200045d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
200045d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
200045d6:	683b      	ldr	r3, [r7, #0]
200045d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
200045da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
200045dc:	683b      	ldr	r3, [r7, #0]
200045de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
200045e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
200045e4:	4313      	orrs	r3, r2
200045e6:	68fa      	ldr	r2, [r7, #12]
200045e8:	4313      	orrs	r3, r2
200045ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
200045ec:	687b      	ldr	r3, [r7, #4]
200045ee:	681b      	ldr	r3, [r3, #0]
200045f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
200045f4:	461a      	mov	r2, r3
200045f6:	68fb      	ldr	r3, [r7, #12]
200045f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
200045fa:	687b      	ldr	r3, [r7, #4]
200045fc:	681b      	ldr	r3, [r3, #0]
200045fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004602:	699b      	ldr	r3, [r3, #24]
20004604:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20004606:	2001      	movs	r0, #1
20004608:	f7ff fd2e 	bl	20004068 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
2000460c:	687b      	ldr	r3, [r7, #4]
2000460e:	681b      	ldr	r3, [r3, #0]
20004610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004614:	461a      	mov	r2, r3
20004616:	68fb      	ldr	r3, [r7, #12]
20004618:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
2000461a:	683b      	ldr	r3, [r7, #0]
2000461c:	791b      	ldrb	r3, [r3, #4]
2000461e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
20004620:	683b      	ldr	r3, [r7, #0]
20004622:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20004624:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20004626:	683b      	ldr	r3, [r7, #0]
20004628:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
2000462a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
2000462c:	683b      	ldr	r3, [r7, #0]
2000462e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20004630:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
20004632:	683b      	ldr	r3, [r7, #0]
20004634:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
20004638:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
2000463a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
2000463c:	683b      	ldr	r3, [r7, #0]
2000463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20004640:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
20004642:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
20004644:	683b      	ldr	r3, [r7, #0]
20004646:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
20004648:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
2000464a:	687a      	ldr	r2, [r7, #4]
2000464c:	6812      	ldr	r2, [r2, #0]
2000464e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
20004652:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
20004656:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
20004658:	687b      	ldr	r3, [r7, #4]
2000465a:	681b      	ldr	r3, [r3, #0]
2000465c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004660:	681b      	ldr	r3, [r3, #0]
20004662:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20004664:	2001      	movs	r0, #1
20004666:	f7ff fcff 	bl	20004068 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
2000466a:	687b      	ldr	r3, [r7, #4]
2000466c:	681b      	ldr	r3, [r3, #0]
2000466e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004672:	461a      	mov	r2, r3
20004674:	68fb      	ldr	r3, [r7, #12]
20004676:	6013      	str	r3, [r2, #0]
}
20004678:	bf00      	nop
2000467a:	3710      	adds	r7, #16
2000467c:	46bd      	mov	sp, r7
2000467e:	bd80      	pop	{r7, pc}
20004680:	f8de3f23 	.word	0xf8de3f23

20004684 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
20004684:	b580      	push	{r7, lr}
20004686:	b0a6      	sub	sp, #152	@ 0x98
20004688:	af00      	add	r7, sp, #0
2000468a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
2000468c:	2301      	movs	r3, #1
2000468e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
20004692:	2301      	movs	r3, #1
20004694:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
20004698:	2300      	movs	r3, #0
2000469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
2000469c:	2300      	movs	r3, #0
2000469e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
200046a2:	2301      	movs	r3, #1
200046a4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
200046a8:	2300      	movs	r3, #0
200046aa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
200046ae:	2301      	movs	r3, #1
200046b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
200046b4:	2301      	movs	r3, #1
200046b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
200046ba:	2300      	movs	r3, #0
200046bc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
200046c0:	2300      	movs	r3, #0
200046c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
200046c6:	2300      	movs	r3, #0
200046c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
200046ca:	2300      	movs	r3, #0
200046cc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
200046d0:	2300      	movs	r3, #0
200046d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
200046d4:	2300      	movs	r3, #0
200046d6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
200046da:	2300      	movs	r3, #0
200046dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
200046e0:	2300      	movs	r3, #0
200046e2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
200046e6:	2300      	movs	r3, #0
200046e8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
200046ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
200046f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
200046f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
200046f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
200046f8:	2300      	movs	r3, #0
200046fa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
200046fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
20004702:	4619      	mov	r1, r3
20004704:	6878      	ldr	r0, [r7, #4]
20004706:	f7ff fe7f 	bl	20004408 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
2000470a:	2301      	movs	r3, #1
2000470c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
2000470e:	2301      	movs	r3, #1
20004710:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
20004712:	2301      	movs	r3, #1
20004714:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
20004718:	2301      	movs	r3, #1
2000471a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
2000471c:	2300      	movs	r3, #0
2000471e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
20004720:	2300      	movs	r3, #0
20004722:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
20004726:	2300      	movs	r3, #0
20004728:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
2000472c:	2300      	movs	r3, #0
2000472e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
20004730:	2301      	movs	r3, #1
20004732:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
20004736:	2301      	movs	r3, #1
20004738:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
2000473a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2000473e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
20004740:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20004744:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
20004746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
2000474a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
2000474c:	2301      	movs	r3, #1
2000474e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
20004752:	2300      	movs	r3, #0
20004754:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
20004756:	2300      	movs	r3, #0
20004758:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
2000475a:	f107 0308 	add.w	r3, r7, #8
2000475e:	4619      	mov	r1, r3
20004760:	6878      	ldr	r0, [r7, #4]
20004762:	f7ff ff05 	bl	20004570 <ETH_SetDMAConfig>
}
20004766:	bf00      	nop
20004768:	3798      	adds	r7, #152	@ 0x98
2000476a:	46bd      	mov	sp, r7
2000476c:	bd80      	pop	{r7, pc}
	...

20004770 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
20004770:	b480      	push	{r7}
20004772:	b087      	sub	sp, #28
20004774:	af00      	add	r7, sp, #0
20004776:	60f8      	str	r0, [r7, #12]
20004778:	60b9      	str	r1, [r7, #8]
2000477a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
2000477c:	687b      	ldr	r3, [r7, #4]
2000477e:	3305      	adds	r3, #5
20004780:	781b      	ldrb	r3, [r3, #0]
20004782:	021b      	lsls	r3, r3, #8
20004784:	687a      	ldr	r2, [r7, #4]
20004786:	3204      	adds	r2, #4
20004788:	7812      	ldrb	r2, [r2, #0]
2000478a:	4313      	orrs	r3, r2
2000478c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
2000478e:	68ba      	ldr	r2, [r7, #8]
20004790:	4b11      	ldr	r3, [pc, #68]	@ (200047d8 <ETH_MACAddressConfig+0x68>)
20004792:	4413      	add	r3, r2
20004794:	461a      	mov	r2, r3
20004796:	697b      	ldr	r3, [r7, #20]
20004798:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
2000479a:	687b      	ldr	r3, [r7, #4]
2000479c:	3303      	adds	r3, #3
2000479e:	781b      	ldrb	r3, [r3, #0]
200047a0:	061a      	lsls	r2, r3, #24
200047a2:	687b      	ldr	r3, [r7, #4]
200047a4:	3302      	adds	r3, #2
200047a6:	781b      	ldrb	r3, [r3, #0]
200047a8:	041b      	lsls	r3, r3, #16
200047aa:	431a      	orrs	r2, r3
200047ac:	687b      	ldr	r3, [r7, #4]
200047ae:	3301      	adds	r3, #1
200047b0:	781b      	ldrb	r3, [r3, #0]
200047b2:	021b      	lsls	r3, r3, #8
200047b4:	4313      	orrs	r3, r2
200047b6:	687a      	ldr	r2, [r7, #4]
200047b8:	7812      	ldrb	r2, [r2, #0]
200047ba:	4313      	orrs	r3, r2
200047bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
200047be:	68ba      	ldr	r2, [r7, #8]
200047c0:	4b06      	ldr	r3, [pc, #24]	@ (200047dc <ETH_MACAddressConfig+0x6c>)
200047c2:	4413      	add	r3, r2
200047c4:	461a      	mov	r2, r3
200047c6:	697b      	ldr	r3, [r7, #20]
200047c8:	6013      	str	r3, [r2, #0]
}
200047ca:	bf00      	nop
200047cc:	371c      	adds	r7, #28
200047ce:	46bd      	mov	sp, r7
200047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200047d4:	4770      	bx	lr
200047d6:	bf00      	nop
200047d8:	40028040 	.word	0x40028040
200047dc:	40028044 	.word	0x40028044

200047e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
200047e0:	b480      	push	{r7}
200047e2:	b085      	sub	sp, #20
200047e4:	af00      	add	r7, sp, #0
200047e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
200047e8:	2300      	movs	r3, #0
200047ea:	60fb      	str	r3, [r7, #12]
200047ec:	e03e      	b.n	2000486c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
200047ee:	687b      	ldr	r3, [r7, #4]
200047f0:	68d9      	ldr	r1, [r3, #12]
200047f2:	68fa      	ldr	r2, [r7, #12]
200047f4:	4613      	mov	r3, r2
200047f6:	009b      	lsls	r3, r3, #2
200047f8:	4413      	add	r3, r2
200047fa:	00db      	lsls	r3, r3, #3
200047fc:	440b      	add	r3, r1
200047fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
20004800:	68bb      	ldr	r3, [r7, #8]
20004802:	2200      	movs	r2, #0
20004804:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
20004806:	68bb      	ldr	r3, [r7, #8]
20004808:	2200      	movs	r2, #0
2000480a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
2000480c:	68bb      	ldr	r3, [r7, #8]
2000480e:	2200      	movs	r2, #0
20004810:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
20004812:	68bb      	ldr	r3, [r7, #8]
20004814:	2200      	movs	r2, #0
20004816:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
20004818:	68b9      	ldr	r1, [r7, #8]
2000481a:	687b      	ldr	r3, [r7, #4]
2000481c:	68fa      	ldr	r2, [r7, #12]
2000481e:	3206      	adds	r2, #6
20004820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
20004824:	68bb      	ldr	r3, [r7, #8]
20004826:	681b      	ldr	r3, [r3, #0]
20004828:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
2000482c:	68bb      	ldr	r3, [r7, #8]
2000482e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
20004830:	68fb      	ldr	r3, [r7, #12]
20004832:	2b02      	cmp	r3, #2
20004834:	d80c      	bhi.n	20004850 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
20004836:	687b      	ldr	r3, [r7, #4]
20004838:	68d9      	ldr	r1, [r3, #12]
2000483a:	68fb      	ldr	r3, [r7, #12]
2000483c:	1c5a      	adds	r2, r3, #1
2000483e:	4613      	mov	r3, r2
20004840:	009b      	lsls	r3, r3, #2
20004842:	4413      	add	r3, r2
20004844:	00db      	lsls	r3, r3, #3
20004846:	440b      	add	r3, r1
20004848:	461a      	mov	r2, r3
2000484a:	68bb      	ldr	r3, [r7, #8]
2000484c:	60da      	str	r2, [r3, #12]
2000484e:	e004      	b.n	2000485a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
20004850:	687b      	ldr	r3, [r7, #4]
20004852:	68db      	ldr	r3, [r3, #12]
20004854:	461a      	mov	r2, r3
20004856:	68bb      	ldr	r3, [r7, #8]
20004858:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
2000485a:	68bb      	ldr	r3, [r7, #8]
2000485c:	681b      	ldr	r3, [r3, #0]
2000485e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
20004862:	68bb      	ldr	r3, [r7, #8]
20004864:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20004866:	68fb      	ldr	r3, [r7, #12]
20004868:	3301      	adds	r3, #1
2000486a:	60fb      	str	r3, [r7, #12]
2000486c:	68fb      	ldr	r3, [r7, #12]
2000486e:	2b03      	cmp	r3, #3
20004870:	d9bd      	bls.n	200047ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
20004872:	687b      	ldr	r3, [r7, #4]
20004874:	2200      	movs	r2, #0
20004876:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
20004878:	687b      	ldr	r3, [r7, #4]
2000487a:	68da      	ldr	r2, [r3, #12]
2000487c:	687b      	ldr	r3, [r7, #4]
2000487e:	681b      	ldr	r3, [r3, #0]
20004880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004884:	611a      	str	r2, [r3, #16]
}
20004886:	bf00      	nop
20004888:	3714      	adds	r7, #20
2000488a:	46bd      	mov	sp, r7
2000488c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004890:	4770      	bx	lr

20004892 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
20004892:	b480      	push	{r7}
20004894:	b085      	sub	sp, #20
20004896:	af00      	add	r7, sp, #0
20004898:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
2000489a:	2300      	movs	r3, #0
2000489c:	60fb      	str	r3, [r7, #12]
2000489e:	e048      	b.n	20004932 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
200048a0:	687b      	ldr	r3, [r7, #4]
200048a2:	6919      	ldr	r1, [r3, #16]
200048a4:	68fa      	ldr	r2, [r7, #12]
200048a6:	4613      	mov	r3, r2
200048a8:	009b      	lsls	r3, r3, #2
200048aa:	4413      	add	r3, r2
200048ac:	00db      	lsls	r3, r3, #3
200048ae:	440b      	add	r3, r1
200048b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
200048b2:	68bb      	ldr	r3, [r7, #8]
200048b4:	2200      	movs	r2, #0
200048b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
200048b8:	68bb      	ldr	r3, [r7, #8]
200048ba:	2200      	movs	r2, #0
200048bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
200048be:	68bb      	ldr	r3, [r7, #8]
200048c0:	2200      	movs	r2, #0
200048c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
200048c4:	68bb      	ldr	r3, [r7, #8]
200048c6:	2200      	movs	r2, #0
200048c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
200048ca:	68bb      	ldr	r3, [r7, #8]
200048cc:	2200      	movs	r2, #0
200048ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
200048d0:	68bb      	ldr	r3, [r7, #8]
200048d2:	2200      	movs	r2, #0
200048d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
200048d6:	68bb      	ldr	r3, [r7, #8]
200048d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
200048dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
200048de:	687b      	ldr	r3, [r7, #4]
200048e0:	695b      	ldr	r3, [r3, #20]
200048e2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
200048e6:	68bb      	ldr	r3, [r7, #8]
200048e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
200048ea:	68bb      	ldr	r3, [r7, #8]
200048ec:	685b      	ldr	r3, [r3, #4]
200048ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
200048f2:	68bb      	ldr	r3, [r7, #8]
200048f4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
200048f6:	68b9      	ldr	r1, [r7, #8]
200048f8:	687b      	ldr	r3, [r7, #4]
200048fa:	68fa      	ldr	r2, [r7, #12]
200048fc:	3212      	adds	r2, #18
200048fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
20004902:	68fb      	ldr	r3, [r7, #12]
20004904:	2b02      	cmp	r3, #2
20004906:	d80c      	bhi.n	20004922 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
20004908:	687b      	ldr	r3, [r7, #4]
2000490a:	6919      	ldr	r1, [r3, #16]
2000490c:	68fb      	ldr	r3, [r7, #12]
2000490e:	1c5a      	adds	r2, r3, #1
20004910:	4613      	mov	r3, r2
20004912:	009b      	lsls	r3, r3, #2
20004914:	4413      	add	r3, r2
20004916:	00db      	lsls	r3, r3, #3
20004918:	440b      	add	r3, r1
2000491a:	461a      	mov	r2, r3
2000491c:	68bb      	ldr	r3, [r7, #8]
2000491e:	60da      	str	r2, [r3, #12]
20004920:	e004      	b.n	2000492c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
20004922:	687b      	ldr	r3, [r7, #4]
20004924:	691b      	ldr	r3, [r3, #16]
20004926:	461a      	mov	r2, r3
20004928:	68bb      	ldr	r3, [r7, #8]
2000492a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
2000492c:	68fb      	ldr	r3, [r7, #12]
2000492e:	3301      	adds	r3, #1
20004930:	60fb      	str	r3, [r7, #12]
20004932:	68fb      	ldr	r3, [r7, #12]
20004934:	2b03      	cmp	r3, #3
20004936:	d9b3      	bls.n	200048a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
20004938:	687b      	ldr	r3, [r7, #4]
2000493a:	2200      	movs	r2, #0
2000493c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
2000493e:	687b      	ldr	r3, [r7, #4]
20004940:	2200      	movs	r2, #0
20004942:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
20004944:	687b      	ldr	r3, [r7, #4]
20004946:	2200      	movs	r2, #0
20004948:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
2000494a:	687b      	ldr	r3, [r7, #4]
2000494c:	2200      	movs	r2, #0
2000494e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
20004950:	687b      	ldr	r3, [r7, #4]
20004952:	2200      	movs	r2, #0
20004954:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
20004956:	687b      	ldr	r3, [r7, #4]
20004958:	691a      	ldr	r2, [r3, #16]
2000495a:	687b      	ldr	r3, [r7, #4]
2000495c:	681b      	ldr	r3, [r3, #0]
2000495e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20004962:	60da      	str	r2, [r3, #12]
}
20004964:	bf00      	nop
20004966:	3714      	adds	r7, #20
20004968:	46bd      	mov	sp, r7
2000496a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000496e:	4770      	bx	lr

20004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20004970:	b480      	push	{r7}
20004972:	b089      	sub	sp, #36	@ 0x24
20004974:	af00      	add	r7, sp, #0
20004976:	6078      	str	r0, [r7, #4]
20004978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
2000497a:	2300      	movs	r3, #0
2000497c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
2000497e:	2300      	movs	r3, #0
20004980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
20004982:	2300      	movs	r3, #0
20004984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
20004986:	2300      	movs	r3, #0
20004988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
2000498a:	2300      	movs	r3, #0
2000498c:	61fb      	str	r3, [r7, #28]
2000498e:	e175      	b.n	20004c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
20004990:	2201      	movs	r2, #1
20004992:	69fb      	ldr	r3, [r7, #28]
20004994:	fa02 f303 	lsl.w	r3, r2, r3
20004998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000499a:	683b      	ldr	r3, [r7, #0]
2000499c:	681b      	ldr	r3, [r3, #0]
2000499e:	697a      	ldr	r2, [r7, #20]
200049a0:	4013      	ands	r3, r2
200049a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
200049a4:	693a      	ldr	r2, [r7, #16]
200049a6:	697b      	ldr	r3, [r7, #20]
200049a8:	429a      	cmp	r2, r3
200049aa:	f040 8164 	bne.w	20004c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
200049ae:	683b      	ldr	r3, [r7, #0]
200049b0:	685b      	ldr	r3, [r3, #4]
200049b2:	f003 0303 	and.w	r3, r3, #3
200049b6:	2b01      	cmp	r3, #1
200049b8:	d005      	beq.n	200049c6 <HAL_GPIO_Init+0x56>
200049ba:	683b      	ldr	r3, [r7, #0]
200049bc:	685b      	ldr	r3, [r3, #4]
200049be:	f003 0303 	and.w	r3, r3, #3
200049c2:	2b02      	cmp	r3, #2
200049c4:	d130      	bne.n	20004a28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
200049c6:	687b      	ldr	r3, [r7, #4]
200049c8:	689b      	ldr	r3, [r3, #8]
200049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
200049cc:	69fb      	ldr	r3, [r7, #28]
200049ce:	005b      	lsls	r3, r3, #1
200049d0:	2203      	movs	r2, #3
200049d2:	fa02 f303 	lsl.w	r3, r2, r3
200049d6:	43db      	mvns	r3, r3
200049d8:	69ba      	ldr	r2, [r7, #24]
200049da:	4013      	ands	r3, r2
200049dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
200049de:	683b      	ldr	r3, [r7, #0]
200049e0:	68da      	ldr	r2, [r3, #12]
200049e2:	69fb      	ldr	r3, [r7, #28]
200049e4:	005b      	lsls	r3, r3, #1
200049e6:	fa02 f303 	lsl.w	r3, r2, r3
200049ea:	69ba      	ldr	r2, [r7, #24]
200049ec:	4313      	orrs	r3, r2
200049ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200049f0:	687b      	ldr	r3, [r7, #4]
200049f2:	69ba      	ldr	r2, [r7, #24]
200049f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
200049f6:	687b      	ldr	r3, [r7, #4]
200049f8:	685b      	ldr	r3, [r3, #4]
200049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
200049fc:	2201      	movs	r2, #1
200049fe:	69fb      	ldr	r3, [r7, #28]
20004a00:	fa02 f303 	lsl.w	r3, r2, r3
20004a04:	43db      	mvns	r3, r3
20004a06:	69ba      	ldr	r2, [r7, #24]
20004a08:	4013      	ands	r3, r2
20004a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20004a0c:	683b      	ldr	r3, [r7, #0]
20004a0e:	685b      	ldr	r3, [r3, #4]
20004a10:	091b      	lsrs	r3, r3, #4
20004a12:	f003 0201 	and.w	r2, r3, #1
20004a16:	69fb      	ldr	r3, [r7, #28]
20004a18:	fa02 f303 	lsl.w	r3, r2, r3
20004a1c:	69ba      	ldr	r2, [r7, #24]
20004a1e:	4313      	orrs	r3, r2
20004a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20004a22:	687b      	ldr	r3, [r7, #4]
20004a24:	69ba      	ldr	r2, [r7, #24]
20004a26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20004a28:	683b      	ldr	r3, [r7, #0]
20004a2a:	685b      	ldr	r3, [r3, #4]
20004a2c:	f003 0303 	and.w	r3, r3, #3
20004a30:	2b03      	cmp	r3, #3
20004a32:	d017      	beq.n	20004a64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20004a34:	687b      	ldr	r3, [r7, #4]
20004a36:	68db      	ldr	r3, [r3, #12]
20004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20004a3a:	69fb      	ldr	r3, [r7, #28]
20004a3c:	005b      	lsls	r3, r3, #1
20004a3e:	2203      	movs	r2, #3
20004a40:	fa02 f303 	lsl.w	r3, r2, r3
20004a44:	43db      	mvns	r3, r3
20004a46:	69ba      	ldr	r2, [r7, #24]
20004a48:	4013      	ands	r3, r2
20004a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
20004a4c:	683b      	ldr	r3, [r7, #0]
20004a4e:	689a      	ldr	r2, [r3, #8]
20004a50:	69fb      	ldr	r3, [r7, #28]
20004a52:	005b      	lsls	r3, r3, #1
20004a54:	fa02 f303 	lsl.w	r3, r2, r3
20004a58:	69ba      	ldr	r2, [r7, #24]
20004a5a:	4313      	orrs	r3, r2
20004a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20004a5e:	687b      	ldr	r3, [r7, #4]
20004a60:	69ba      	ldr	r2, [r7, #24]
20004a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20004a64:	683b      	ldr	r3, [r7, #0]
20004a66:	685b      	ldr	r3, [r3, #4]
20004a68:	f003 0303 	and.w	r3, r3, #3
20004a6c:	2b02      	cmp	r3, #2
20004a6e:	d123      	bne.n	20004ab8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
20004a70:	69fb      	ldr	r3, [r7, #28]
20004a72:	08da      	lsrs	r2, r3, #3
20004a74:	687b      	ldr	r3, [r7, #4]
20004a76:	3208      	adds	r2, #8
20004a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20004a7e:	69fb      	ldr	r3, [r7, #28]
20004a80:	f003 0307 	and.w	r3, r3, #7
20004a84:	009b      	lsls	r3, r3, #2
20004a86:	220f      	movs	r2, #15
20004a88:	fa02 f303 	lsl.w	r3, r2, r3
20004a8c:	43db      	mvns	r3, r3
20004a8e:	69ba      	ldr	r2, [r7, #24]
20004a90:	4013      	ands	r3, r2
20004a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
20004a94:	683b      	ldr	r3, [r7, #0]
20004a96:	691a      	ldr	r2, [r3, #16]
20004a98:	69fb      	ldr	r3, [r7, #28]
20004a9a:	f003 0307 	and.w	r3, r3, #7
20004a9e:	009b      	lsls	r3, r3, #2
20004aa0:	fa02 f303 	lsl.w	r3, r2, r3
20004aa4:	69ba      	ldr	r2, [r7, #24]
20004aa6:	4313      	orrs	r3, r2
20004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
20004aaa:	69fb      	ldr	r3, [r7, #28]
20004aac:	08da      	lsrs	r2, r3, #3
20004aae:	687b      	ldr	r3, [r7, #4]
20004ab0:	3208      	adds	r2, #8
20004ab2:	69b9      	ldr	r1, [r7, #24]
20004ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20004ab8:	687b      	ldr	r3, [r7, #4]
20004aba:	681b      	ldr	r3, [r3, #0]
20004abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
20004abe:	69fb      	ldr	r3, [r7, #28]
20004ac0:	005b      	lsls	r3, r3, #1
20004ac2:	2203      	movs	r2, #3
20004ac4:	fa02 f303 	lsl.w	r3, r2, r3
20004ac8:	43db      	mvns	r3, r3
20004aca:	69ba      	ldr	r2, [r7, #24]
20004acc:	4013      	ands	r3, r2
20004ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20004ad0:	683b      	ldr	r3, [r7, #0]
20004ad2:	685b      	ldr	r3, [r3, #4]
20004ad4:	f003 0203 	and.w	r2, r3, #3
20004ad8:	69fb      	ldr	r3, [r7, #28]
20004ada:	005b      	lsls	r3, r3, #1
20004adc:	fa02 f303 	lsl.w	r3, r2, r3
20004ae0:	69ba      	ldr	r2, [r7, #24]
20004ae2:	4313      	orrs	r3, r2
20004ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20004ae6:	687b      	ldr	r3, [r7, #4]
20004ae8:	69ba      	ldr	r2, [r7, #24]
20004aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
20004aec:	683b      	ldr	r3, [r7, #0]
20004aee:	685b      	ldr	r3, [r3, #4]
20004af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20004af4:	2b00      	cmp	r3, #0
20004af6:	f000 80be 	beq.w	20004c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20004afa:	4b66      	ldr	r3, [pc, #408]	@ (20004c94 <HAL_GPIO_Init+0x324>)
20004afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004afe:	4a65      	ldr	r2, [pc, #404]	@ (20004c94 <HAL_GPIO_Init+0x324>)
20004b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20004b04:	6453      	str	r3, [r2, #68]	@ 0x44
20004b06:	4b63      	ldr	r3, [pc, #396]	@ (20004c94 <HAL_GPIO_Init+0x324>)
20004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20004b0e:	60fb      	str	r3, [r7, #12]
20004b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
20004b12:	4a61      	ldr	r2, [pc, #388]	@ (20004c98 <HAL_GPIO_Init+0x328>)
20004b14:	69fb      	ldr	r3, [r7, #28]
20004b16:	089b      	lsrs	r3, r3, #2
20004b18:	3302      	adds	r3, #2
20004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
20004b20:	69fb      	ldr	r3, [r7, #28]
20004b22:	f003 0303 	and.w	r3, r3, #3
20004b26:	009b      	lsls	r3, r3, #2
20004b28:	220f      	movs	r2, #15
20004b2a:	fa02 f303 	lsl.w	r3, r2, r3
20004b2e:	43db      	mvns	r3, r3
20004b30:	69ba      	ldr	r2, [r7, #24]
20004b32:	4013      	ands	r3, r2
20004b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
20004b36:	687b      	ldr	r3, [r7, #4]
20004b38:	4a58      	ldr	r2, [pc, #352]	@ (20004c9c <HAL_GPIO_Init+0x32c>)
20004b3a:	4293      	cmp	r3, r2
20004b3c:	d037      	beq.n	20004bae <HAL_GPIO_Init+0x23e>
20004b3e:	687b      	ldr	r3, [r7, #4]
20004b40:	4a57      	ldr	r2, [pc, #348]	@ (20004ca0 <HAL_GPIO_Init+0x330>)
20004b42:	4293      	cmp	r3, r2
20004b44:	d031      	beq.n	20004baa <HAL_GPIO_Init+0x23a>
20004b46:	687b      	ldr	r3, [r7, #4]
20004b48:	4a56      	ldr	r2, [pc, #344]	@ (20004ca4 <HAL_GPIO_Init+0x334>)
20004b4a:	4293      	cmp	r3, r2
20004b4c:	d02b      	beq.n	20004ba6 <HAL_GPIO_Init+0x236>
20004b4e:	687b      	ldr	r3, [r7, #4]
20004b50:	4a55      	ldr	r2, [pc, #340]	@ (20004ca8 <HAL_GPIO_Init+0x338>)
20004b52:	4293      	cmp	r3, r2
20004b54:	d025      	beq.n	20004ba2 <HAL_GPIO_Init+0x232>
20004b56:	687b      	ldr	r3, [r7, #4]
20004b58:	4a54      	ldr	r2, [pc, #336]	@ (20004cac <HAL_GPIO_Init+0x33c>)
20004b5a:	4293      	cmp	r3, r2
20004b5c:	d01f      	beq.n	20004b9e <HAL_GPIO_Init+0x22e>
20004b5e:	687b      	ldr	r3, [r7, #4]
20004b60:	4a53      	ldr	r2, [pc, #332]	@ (20004cb0 <HAL_GPIO_Init+0x340>)
20004b62:	4293      	cmp	r3, r2
20004b64:	d019      	beq.n	20004b9a <HAL_GPIO_Init+0x22a>
20004b66:	687b      	ldr	r3, [r7, #4]
20004b68:	4a52      	ldr	r2, [pc, #328]	@ (20004cb4 <HAL_GPIO_Init+0x344>)
20004b6a:	4293      	cmp	r3, r2
20004b6c:	d013      	beq.n	20004b96 <HAL_GPIO_Init+0x226>
20004b6e:	687b      	ldr	r3, [r7, #4]
20004b70:	4a51      	ldr	r2, [pc, #324]	@ (20004cb8 <HAL_GPIO_Init+0x348>)
20004b72:	4293      	cmp	r3, r2
20004b74:	d00d      	beq.n	20004b92 <HAL_GPIO_Init+0x222>
20004b76:	687b      	ldr	r3, [r7, #4]
20004b78:	4a50      	ldr	r2, [pc, #320]	@ (20004cbc <HAL_GPIO_Init+0x34c>)
20004b7a:	4293      	cmp	r3, r2
20004b7c:	d007      	beq.n	20004b8e <HAL_GPIO_Init+0x21e>
20004b7e:	687b      	ldr	r3, [r7, #4]
20004b80:	4a4f      	ldr	r2, [pc, #316]	@ (20004cc0 <HAL_GPIO_Init+0x350>)
20004b82:	4293      	cmp	r3, r2
20004b84:	d101      	bne.n	20004b8a <HAL_GPIO_Init+0x21a>
20004b86:	2309      	movs	r3, #9
20004b88:	e012      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004b8a:	230a      	movs	r3, #10
20004b8c:	e010      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004b8e:	2308      	movs	r3, #8
20004b90:	e00e      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004b92:	2307      	movs	r3, #7
20004b94:	e00c      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004b96:	2306      	movs	r3, #6
20004b98:	e00a      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004b9a:	2305      	movs	r3, #5
20004b9c:	e008      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004b9e:	2304      	movs	r3, #4
20004ba0:	e006      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004ba2:	2303      	movs	r3, #3
20004ba4:	e004      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004ba6:	2302      	movs	r3, #2
20004ba8:	e002      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004baa:	2301      	movs	r3, #1
20004bac:	e000      	b.n	20004bb0 <HAL_GPIO_Init+0x240>
20004bae:	2300      	movs	r3, #0
20004bb0:	69fa      	ldr	r2, [r7, #28]
20004bb2:	f002 0203 	and.w	r2, r2, #3
20004bb6:	0092      	lsls	r2, r2, #2
20004bb8:	4093      	lsls	r3, r2
20004bba:	69ba      	ldr	r2, [r7, #24]
20004bbc:	4313      	orrs	r3, r2
20004bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
20004bc0:	4935      	ldr	r1, [pc, #212]	@ (20004c98 <HAL_GPIO_Init+0x328>)
20004bc2:	69fb      	ldr	r3, [r7, #28]
20004bc4:	089b      	lsrs	r3, r3, #2
20004bc6:	3302      	adds	r3, #2
20004bc8:	69ba      	ldr	r2, [r7, #24]
20004bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20004bce:	4b3d      	ldr	r3, [pc, #244]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004bd0:	689b      	ldr	r3, [r3, #8]
20004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004bd4:	693b      	ldr	r3, [r7, #16]
20004bd6:	43db      	mvns	r3, r3
20004bd8:	69ba      	ldr	r2, [r7, #24]
20004bda:	4013      	ands	r3, r2
20004bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
20004bde:	683b      	ldr	r3, [r7, #0]
20004be0:	685b      	ldr	r3, [r3, #4]
20004be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20004be6:	2b00      	cmp	r3, #0
20004be8:	d003      	beq.n	20004bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
20004bea:	69ba      	ldr	r2, [r7, #24]
20004bec:	693b      	ldr	r3, [r7, #16]
20004bee:	4313      	orrs	r3, r2
20004bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20004bf2:	4a34      	ldr	r2, [pc, #208]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004bf4:	69bb      	ldr	r3, [r7, #24]
20004bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20004bf8:	4b32      	ldr	r3, [pc, #200]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004bfa:	68db      	ldr	r3, [r3, #12]
20004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004bfe:	693b      	ldr	r3, [r7, #16]
20004c00:	43db      	mvns	r3, r3
20004c02:	69ba      	ldr	r2, [r7, #24]
20004c04:	4013      	ands	r3, r2
20004c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
20004c08:	683b      	ldr	r3, [r7, #0]
20004c0a:	685b      	ldr	r3, [r3, #4]
20004c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20004c10:	2b00      	cmp	r3, #0
20004c12:	d003      	beq.n	20004c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
20004c14:	69ba      	ldr	r2, [r7, #24]
20004c16:	693b      	ldr	r3, [r7, #16]
20004c18:	4313      	orrs	r3, r2
20004c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20004c1c:	4a29      	ldr	r2, [pc, #164]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004c1e:	69bb      	ldr	r3, [r7, #24]
20004c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20004c22:	4b28      	ldr	r3, [pc, #160]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004c24:	685b      	ldr	r3, [r3, #4]
20004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004c28:	693b      	ldr	r3, [r7, #16]
20004c2a:	43db      	mvns	r3, r3
20004c2c:	69ba      	ldr	r2, [r7, #24]
20004c2e:	4013      	ands	r3, r2
20004c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
20004c32:	683b      	ldr	r3, [r7, #0]
20004c34:	685b      	ldr	r3, [r3, #4]
20004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20004c3a:	2b00      	cmp	r3, #0
20004c3c:	d003      	beq.n	20004c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
20004c3e:	69ba      	ldr	r2, [r7, #24]
20004c40:	693b      	ldr	r3, [r7, #16]
20004c42:	4313      	orrs	r3, r2
20004c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20004c46:	4a1f      	ldr	r2, [pc, #124]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004c48:	69bb      	ldr	r3, [r7, #24]
20004c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20004c4c:	4b1d      	ldr	r3, [pc, #116]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004c4e:	681b      	ldr	r3, [r3, #0]
20004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20004c52:	693b      	ldr	r3, [r7, #16]
20004c54:	43db      	mvns	r3, r3
20004c56:	69ba      	ldr	r2, [r7, #24]
20004c58:	4013      	ands	r3, r2
20004c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
20004c5c:	683b      	ldr	r3, [r7, #0]
20004c5e:	685b      	ldr	r3, [r3, #4]
20004c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20004c64:	2b00      	cmp	r3, #0
20004c66:	d003      	beq.n	20004c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
20004c68:	69ba      	ldr	r2, [r7, #24]
20004c6a:	693b      	ldr	r3, [r7, #16]
20004c6c:	4313      	orrs	r3, r2
20004c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20004c70:	4a14      	ldr	r2, [pc, #80]	@ (20004cc4 <HAL_GPIO_Init+0x354>)
20004c72:	69bb      	ldr	r3, [r7, #24]
20004c74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
20004c76:	69fb      	ldr	r3, [r7, #28]
20004c78:	3301      	adds	r3, #1
20004c7a:	61fb      	str	r3, [r7, #28]
20004c7c:	69fb      	ldr	r3, [r7, #28]
20004c7e:	2b0f      	cmp	r3, #15
20004c80:	f67f ae86 	bls.w	20004990 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
20004c84:	bf00      	nop
20004c86:	bf00      	nop
20004c88:	3724      	adds	r7, #36	@ 0x24
20004c8a:	46bd      	mov	sp, r7
20004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c90:	4770      	bx	lr
20004c92:	bf00      	nop
20004c94:	40023800 	.word	0x40023800
20004c98:	40013800 	.word	0x40013800
20004c9c:	40020000 	.word	0x40020000
20004ca0:	40020400 	.word	0x40020400
20004ca4:	40020800 	.word	0x40020800
20004ca8:	40020c00 	.word	0x40020c00
20004cac:	40021000 	.word	0x40021000
20004cb0:	40021400 	.word	0x40021400
20004cb4:	40021800 	.word	0x40021800
20004cb8:	40021c00 	.word	0x40021c00
20004cbc:	40022000 	.word	0x40022000
20004cc0:	40022400 	.word	0x40022400
20004cc4:	40013c00 	.word	0x40013c00

20004cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20004cc8:	b480      	push	{r7}
20004cca:	b083      	sub	sp, #12
20004ccc:	af00      	add	r7, sp, #0
20004cce:	6078      	str	r0, [r7, #4]
20004cd0:	460b      	mov	r3, r1
20004cd2:	807b      	strh	r3, [r7, #2]
20004cd4:	4613      	mov	r3, r2
20004cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
20004cd8:	787b      	ldrb	r3, [r7, #1]
20004cda:	2b00      	cmp	r3, #0
20004cdc:	d003      	beq.n	20004ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20004cde:	887a      	ldrh	r2, [r7, #2]
20004ce0:	687b      	ldr	r3, [r7, #4]
20004ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
20004ce4:	e003      	b.n	20004cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
20004ce6:	887b      	ldrh	r3, [r7, #2]
20004ce8:	041a      	lsls	r2, r3, #16
20004cea:	687b      	ldr	r3, [r7, #4]
20004cec:	619a      	str	r2, [r3, #24]
}
20004cee:	bf00      	nop
20004cf0:	370c      	adds	r7, #12
20004cf2:	46bd      	mov	sp, r7
20004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cf8:	4770      	bx	lr

20004cfa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
20004cfa:	b480      	push	{r7}
20004cfc:	b085      	sub	sp, #20
20004cfe:	af00      	add	r7, sp, #0
20004d00:	6078      	str	r0, [r7, #4]
20004d02:	460b      	mov	r3, r1
20004d04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20004d06:	687b      	ldr	r3, [r7, #4]
20004d08:	695b      	ldr	r3, [r3, #20]
20004d0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20004d0c:	887a      	ldrh	r2, [r7, #2]
20004d0e:	68fb      	ldr	r3, [r7, #12]
20004d10:	4013      	ands	r3, r2
20004d12:	041a      	lsls	r2, r3, #16
20004d14:	68fb      	ldr	r3, [r7, #12]
20004d16:	43d9      	mvns	r1, r3
20004d18:	887b      	ldrh	r3, [r7, #2]
20004d1a:	400b      	ands	r3, r1
20004d1c:	431a      	orrs	r2, r3
20004d1e:	687b      	ldr	r3, [r7, #4]
20004d20:	619a      	str	r2, [r3, #24]
}
20004d22:	bf00      	nop
20004d24:	3714      	adds	r7, #20
20004d26:	46bd      	mov	sp, r7
20004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d2c:	4770      	bx	lr

20004d2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
20004d2e:	b580      	push	{r7, lr}
20004d30:	b086      	sub	sp, #24
20004d32:	af02      	add	r7, sp, #8
20004d34:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
20004d36:	687b      	ldr	r3, [r7, #4]
20004d38:	2b00      	cmp	r3, #0
20004d3a:	d101      	bne.n	20004d40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
20004d3c:	2301      	movs	r3, #1
20004d3e:	e108      	b.n	20004f52 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
20004d40:	687b      	ldr	r3, [r7, #4]
20004d42:	681b      	ldr	r3, [r3, #0]
20004d44:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
20004d46:	687b      	ldr	r3, [r7, #4]
20004d48:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
20004d4c:	b2db      	uxtb	r3, r3
20004d4e:	2b00      	cmp	r3, #0
20004d50:	d106      	bne.n	20004d60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
20004d52:	687b      	ldr	r3, [r7, #4]
20004d54:	2200      	movs	r2, #0
20004d56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
20004d5a:	6878      	ldr	r0, [r7, #4]
20004d5c:	f006 fcaa 	bl	2000b6b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
20004d60:	687b      	ldr	r3, [r7, #4]
20004d62:	2203      	movs	r2, #3
20004d64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
20004d68:	68bb      	ldr	r3, [r7, #8]
20004d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20004d6e:	d102      	bne.n	20004d76 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
20004d70:	687b      	ldr	r3, [r7, #4]
20004d72:	2200      	movs	r2, #0
20004d74:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
20004d76:	687b      	ldr	r3, [r7, #4]
20004d78:	681b      	ldr	r3, [r3, #0]
20004d7a:	4618      	mov	r0, r3
20004d7c:	f003 f9b1 	bl	200080e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20004d80:	687b      	ldr	r3, [r7, #4]
20004d82:	6818      	ldr	r0, [r3, #0]
20004d84:	687b      	ldr	r3, [r7, #4]
20004d86:	7c1a      	ldrb	r2, [r3, #16]
20004d88:	f88d 2000 	strb.w	r2, [sp]
20004d8c:	3304      	adds	r3, #4
20004d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
20004d90:	f003 f89a 	bl	20007ec8 <USB_CoreInit>
20004d94:	4603      	mov	r3, r0
20004d96:	2b00      	cmp	r3, #0
20004d98:	d005      	beq.n	20004da6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20004d9a:	687b      	ldr	r3, [r7, #4]
20004d9c:	2202      	movs	r2, #2
20004d9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20004da2:	2301      	movs	r3, #1
20004da4:	e0d5      	b.n	20004f52 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
20004da6:	687b      	ldr	r3, [r7, #4]
20004da8:	681b      	ldr	r3, [r3, #0]
20004daa:	2100      	movs	r1, #0
20004dac:	4618      	mov	r0, r3
20004dae:	f003 f9a9 	bl	20008104 <USB_SetCurrentMode>
20004db2:	4603      	mov	r3, r0
20004db4:	2b00      	cmp	r3, #0
20004db6:	d005      	beq.n	20004dc4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20004db8:	687b      	ldr	r3, [r7, #4]
20004dba:	2202      	movs	r2, #2
20004dbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20004dc0:	2301      	movs	r3, #1
20004dc2:	e0c6      	b.n	20004f52 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20004dc4:	2300      	movs	r3, #0
20004dc6:	73fb      	strb	r3, [r7, #15]
20004dc8:	e04a      	b.n	20004e60 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
20004dca:	7bfa      	ldrb	r2, [r7, #15]
20004dcc:	6879      	ldr	r1, [r7, #4]
20004dce:	4613      	mov	r3, r2
20004dd0:	00db      	lsls	r3, r3, #3
20004dd2:	4413      	add	r3, r2
20004dd4:	009b      	lsls	r3, r3, #2
20004dd6:	440b      	add	r3, r1
20004dd8:	3315      	adds	r3, #21
20004dda:	2201      	movs	r2, #1
20004ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
20004dde:	7bfa      	ldrb	r2, [r7, #15]
20004de0:	6879      	ldr	r1, [r7, #4]
20004de2:	4613      	mov	r3, r2
20004de4:	00db      	lsls	r3, r3, #3
20004de6:	4413      	add	r3, r2
20004de8:	009b      	lsls	r3, r3, #2
20004dea:	440b      	add	r3, r1
20004dec:	3314      	adds	r3, #20
20004dee:	7bfa      	ldrb	r2, [r7, #15]
20004df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
20004df2:	7bfa      	ldrb	r2, [r7, #15]
20004df4:	7bfb      	ldrb	r3, [r7, #15]
20004df6:	b298      	uxth	r0, r3
20004df8:	6879      	ldr	r1, [r7, #4]
20004dfa:	4613      	mov	r3, r2
20004dfc:	00db      	lsls	r3, r3, #3
20004dfe:	4413      	add	r3, r2
20004e00:	009b      	lsls	r3, r3, #2
20004e02:	440b      	add	r3, r1
20004e04:	332e      	adds	r3, #46	@ 0x2e
20004e06:	4602      	mov	r2, r0
20004e08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
20004e0a:	7bfa      	ldrb	r2, [r7, #15]
20004e0c:	6879      	ldr	r1, [r7, #4]
20004e0e:	4613      	mov	r3, r2
20004e10:	00db      	lsls	r3, r3, #3
20004e12:	4413      	add	r3, r2
20004e14:	009b      	lsls	r3, r3, #2
20004e16:	440b      	add	r3, r1
20004e18:	3318      	adds	r3, #24
20004e1a:	2200      	movs	r2, #0
20004e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
20004e1e:	7bfa      	ldrb	r2, [r7, #15]
20004e20:	6879      	ldr	r1, [r7, #4]
20004e22:	4613      	mov	r3, r2
20004e24:	00db      	lsls	r3, r3, #3
20004e26:	4413      	add	r3, r2
20004e28:	009b      	lsls	r3, r3, #2
20004e2a:	440b      	add	r3, r1
20004e2c:	331c      	adds	r3, #28
20004e2e:	2200      	movs	r2, #0
20004e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
20004e32:	7bfa      	ldrb	r2, [r7, #15]
20004e34:	6879      	ldr	r1, [r7, #4]
20004e36:	4613      	mov	r3, r2
20004e38:	00db      	lsls	r3, r3, #3
20004e3a:	4413      	add	r3, r2
20004e3c:	009b      	lsls	r3, r3, #2
20004e3e:	440b      	add	r3, r1
20004e40:	3320      	adds	r3, #32
20004e42:	2200      	movs	r2, #0
20004e44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
20004e46:	7bfa      	ldrb	r2, [r7, #15]
20004e48:	6879      	ldr	r1, [r7, #4]
20004e4a:	4613      	mov	r3, r2
20004e4c:	00db      	lsls	r3, r3, #3
20004e4e:	4413      	add	r3, r2
20004e50:	009b      	lsls	r3, r3, #2
20004e52:	440b      	add	r3, r1
20004e54:	3324      	adds	r3, #36	@ 0x24
20004e56:	2200      	movs	r2, #0
20004e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20004e5a:	7bfb      	ldrb	r3, [r7, #15]
20004e5c:	3301      	adds	r3, #1
20004e5e:	73fb      	strb	r3, [r7, #15]
20004e60:	687b      	ldr	r3, [r7, #4]
20004e62:	791b      	ldrb	r3, [r3, #4]
20004e64:	7bfa      	ldrb	r2, [r7, #15]
20004e66:	429a      	cmp	r2, r3
20004e68:	d3af      	bcc.n	20004dca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20004e6a:	2300      	movs	r3, #0
20004e6c:	73fb      	strb	r3, [r7, #15]
20004e6e:	e044      	b.n	20004efa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
20004e70:	7bfa      	ldrb	r2, [r7, #15]
20004e72:	6879      	ldr	r1, [r7, #4]
20004e74:	4613      	mov	r3, r2
20004e76:	00db      	lsls	r3, r3, #3
20004e78:	4413      	add	r3, r2
20004e7a:	009b      	lsls	r3, r3, #2
20004e7c:	440b      	add	r3, r1
20004e7e:	f203 2355 	addw	r3, r3, #597	@ 0x255
20004e82:	2200      	movs	r2, #0
20004e84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
20004e86:	7bfa      	ldrb	r2, [r7, #15]
20004e88:	6879      	ldr	r1, [r7, #4]
20004e8a:	4613      	mov	r3, r2
20004e8c:	00db      	lsls	r3, r3, #3
20004e8e:	4413      	add	r3, r2
20004e90:	009b      	lsls	r3, r3, #2
20004e92:	440b      	add	r3, r1
20004e94:	f503 7315 	add.w	r3, r3, #596	@ 0x254
20004e98:	7bfa      	ldrb	r2, [r7, #15]
20004e9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
20004e9c:	7bfa      	ldrb	r2, [r7, #15]
20004e9e:	6879      	ldr	r1, [r7, #4]
20004ea0:	4613      	mov	r3, r2
20004ea2:	00db      	lsls	r3, r3, #3
20004ea4:	4413      	add	r3, r2
20004ea6:	009b      	lsls	r3, r3, #2
20004ea8:	440b      	add	r3, r1
20004eaa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20004eae:	2200      	movs	r2, #0
20004eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
20004eb2:	7bfa      	ldrb	r2, [r7, #15]
20004eb4:	6879      	ldr	r1, [r7, #4]
20004eb6:	4613      	mov	r3, r2
20004eb8:	00db      	lsls	r3, r3, #3
20004eba:	4413      	add	r3, r2
20004ebc:	009b      	lsls	r3, r3, #2
20004ebe:	440b      	add	r3, r1
20004ec0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
20004ec4:	2200      	movs	r2, #0
20004ec6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
20004ec8:	7bfa      	ldrb	r2, [r7, #15]
20004eca:	6879      	ldr	r1, [r7, #4]
20004ecc:	4613      	mov	r3, r2
20004ece:	00db      	lsls	r3, r3, #3
20004ed0:	4413      	add	r3, r2
20004ed2:	009b      	lsls	r3, r3, #2
20004ed4:	440b      	add	r3, r1
20004ed6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
20004eda:	2200      	movs	r2, #0
20004edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
20004ede:	7bfa      	ldrb	r2, [r7, #15]
20004ee0:	6879      	ldr	r1, [r7, #4]
20004ee2:	4613      	mov	r3, r2
20004ee4:	00db      	lsls	r3, r3, #3
20004ee6:	4413      	add	r3, r2
20004ee8:	009b      	lsls	r3, r3, #2
20004eea:	440b      	add	r3, r1
20004eec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20004ef0:	2200      	movs	r2, #0
20004ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20004ef4:	7bfb      	ldrb	r3, [r7, #15]
20004ef6:	3301      	adds	r3, #1
20004ef8:	73fb      	strb	r3, [r7, #15]
20004efa:	687b      	ldr	r3, [r7, #4]
20004efc:	791b      	ldrb	r3, [r3, #4]
20004efe:	7bfa      	ldrb	r2, [r7, #15]
20004f00:	429a      	cmp	r2, r3
20004f02:	d3b5      	bcc.n	20004e70 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20004f04:	687b      	ldr	r3, [r7, #4]
20004f06:	6818      	ldr	r0, [r3, #0]
20004f08:	687b      	ldr	r3, [r7, #4]
20004f0a:	7c1a      	ldrb	r2, [r3, #16]
20004f0c:	f88d 2000 	strb.w	r2, [sp]
20004f10:	3304      	adds	r3, #4
20004f12:	cb0e      	ldmia	r3, {r1, r2, r3}
20004f14:	f003 f942 	bl	2000819c <USB_DevInit>
20004f18:	4603      	mov	r3, r0
20004f1a:	2b00      	cmp	r3, #0
20004f1c:	d005      	beq.n	20004f2a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20004f1e:	687b      	ldr	r3, [r7, #4]
20004f20:	2202      	movs	r2, #2
20004f22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20004f26:	2301      	movs	r3, #1
20004f28:	e013      	b.n	20004f52 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
20004f2a:	687b      	ldr	r3, [r7, #4]
20004f2c:	2200      	movs	r2, #0
20004f2e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
20004f30:	687b      	ldr	r3, [r7, #4]
20004f32:	2201      	movs	r2, #1
20004f34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
20004f38:	687b      	ldr	r3, [r7, #4]
20004f3a:	7b1b      	ldrb	r3, [r3, #12]
20004f3c:	2b01      	cmp	r3, #1
20004f3e:	d102      	bne.n	20004f46 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
20004f40:	6878      	ldr	r0, [r7, #4]
20004f42:	f001 f95b 	bl	200061fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
20004f46:	687b      	ldr	r3, [r7, #4]
20004f48:	681b      	ldr	r3, [r3, #0]
20004f4a:	4618      	mov	r0, r3
20004f4c:	f004 f985 	bl	2000925a <USB_DevDisconnect>

  return HAL_OK;
20004f50:	2300      	movs	r3, #0
}
20004f52:	4618      	mov	r0, r3
20004f54:	3710      	adds	r7, #16
20004f56:	46bd      	mov	sp, r7
20004f58:	bd80      	pop	{r7, pc}

20004f5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
20004f5a:	b580      	push	{r7, lr}
20004f5c:	b082      	sub	sp, #8
20004f5e:	af00      	add	r7, sp, #0
20004f60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
20004f62:	687b      	ldr	r3, [r7, #4]
20004f64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20004f68:	2b01      	cmp	r3, #1
20004f6a:	d101      	bne.n	20004f70 <HAL_PCD_Start+0x16>
20004f6c:	2302      	movs	r3, #2
20004f6e:	e012      	b.n	20004f96 <HAL_PCD_Start+0x3c>
20004f70:	687b      	ldr	r3, [r7, #4]
20004f72:	2201      	movs	r2, #1
20004f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
20004f78:	687b      	ldr	r3, [r7, #4]
20004f7a:	681b      	ldr	r3, [r3, #0]
20004f7c:	4618      	mov	r0, r3
20004f7e:	f003 f89f 	bl	200080c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
20004f82:	687b      	ldr	r3, [r7, #4]
20004f84:	681b      	ldr	r3, [r3, #0]
20004f86:	4618      	mov	r0, r3
20004f88:	f004 f946 	bl	20009218 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
20004f8c:	687b      	ldr	r3, [r7, #4]
20004f8e:	2200      	movs	r2, #0
20004f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20004f94:	2300      	movs	r3, #0
}
20004f96:	4618      	mov	r0, r3
20004f98:	3708      	adds	r7, #8
20004f9a:	46bd      	mov	sp, r7
20004f9c:	bd80      	pop	{r7, pc}

20004f9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
20004f9e:	b590      	push	{r4, r7, lr}
20004fa0:	b08d      	sub	sp, #52	@ 0x34
20004fa2:	af00      	add	r7, sp, #0
20004fa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20004fa6:	687b      	ldr	r3, [r7, #4]
20004fa8:	681b      	ldr	r3, [r3, #0]
20004faa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
20004fac:	6a3b      	ldr	r3, [r7, #32]
20004fae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
20004fb0:	687b      	ldr	r3, [r7, #4]
20004fb2:	681b      	ldr	r3, [r3, #0]
20004fb4:	4618      	mov	r0, r3
20004fb6:	f004 fa04 	bl	200093c2 <USB_GetMode>
20004fba:	4603      	mov	r3, r0
20004fbc:	2b00      	cmp	r3, #0
20004fbe:	f040 84b9 	bne.w	20005934 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
20004fc2:	687b      	ldr	r3, [r7, #4]
20004fc4:	681b      	ldr	r3, [r3, #0]
20004fc6:	4618      	mov	r0, r3
20004fc8:	f004 f968 	bl	2000929c <USB_ReadInterrupts>
20004fcc:	4603      	mov	r3, r0
20004fce:	2b00      	cmp	r3, #0
20004fd0:	f000 84af 	beq.w	20005932 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
20004fd4:	69fb      	ldr	r3, [r7, #28]
20004fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20004fda:	689b      	ldr	r3, [r3, #8]
20004fdc:	0a1b      	lsrs	r3, r3, #8
20004fde:	f3c3 020d 	ubfx	r2, r3, #0, #14
20004fe2:	687b      	ldr	r3, [r7, #4]
20004fe4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
20004fe8:	687b      	ldr	r3, [r7, #4]
20004fea:	681b      	ldr	r3, [r3, #0]
20004fec:	4618      	mov	r0, r3
20004fee:	f004 f955 	bl	2000929c <USB_ReadInterrupts>
20004ff2:	4603      	mov	r3, r0
20004ff4:	f003 0302 	and.w	r3, r3, #2
20004ff8:	2b02      	cmp	r3, #2
20004ffa:	d107      	bne.n	2000500c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
20004ffc:	687b      	ldr	r3, [r7, #4]
20004ffe:	681b      	ldr	r3, [r3, #0]
20005000:	695a      	ldr	r2, [r3, #20]
20005002:	687b      	ldr	r3, [r7, #4]
20005004:	681b      	ldr	r3, [r3, #0]
20005006:	f002 0202 	and.w	r2, r2, #2
2000500a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
2000500c:	687b      	ldr	r3, [r7, #4]
2000500e:	681b      	ldr	r3, [r3, #0]
20005010:	4618      	mov	r0, r3
20005012:	f004 f943 	bl	2000929c <USB_ReadInterrupts>
20005016:	4603      	mov	r3, r0
20005018:	f003 0310 	and.w	r3, r3, #16
2000501c:	2b10      	cmp	r3, #16
2000501e:	d161      	bne.n	200050e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
20005020:	687b      	ldr	r3, [r7, #4]
20005022:	681b      	ldr	r3, [r3, #0]
20005024:	699a      	ldr	r2, [r3, #24]
20005026:	687b      	ldr	r3, [r7, #4]
20005028:	681b      	ldr	r3, [r3, #0]
2000502a:	f022 0210 	bic.w	r2, r2, #16
2000502e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
20005030:	6a3b      	ldr	r3, [r7, #32]
20005032:	6a1b      	ldr	r3, [r3, #32]
20005034:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
20005036:	69bb      	ldr	r3, [r7, #24]
20005038:	f003 020f 	and.w	r2, r3, #15
2000503c:	4613      	mov	r3, r2
2000503e:	00db      	lsls	r3, r3, #3
20005040:	4413      	add	r3, r2
20005042:	009b      	lsls	r3, r3, #2
20005044:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005048:	687a      	ldr	r2, [r7, #4]
2000504a:	4413      	add	r3, r2
2000504c:	3304      	adds	r3, #4
2000504e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
20005050:	69bb      	ldr	r3, [r7, #24]
20005052:	0c5b      	lsrs	r3, r3, #17
20005054:	f003 030f 	and.w	r3, r3, #15
20005058:	2b02      	cmp	r3, #2
2000505a:	d124      	bne.n	200050a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
2000505c:	69ba      	ldr	r2, [r7, #24]
2000505e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
20005062:	4013      	ands	r3, r2
20005064:	2b00      	cmp	r3, #0
20005066:	d035      	beq.n	200050d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
20005068:	697b      	ldr	r3, [r7, #20]
2000506a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
2000506c:	69bb      	ldr	r3, [r7, #24]
2000506e:	091b      	lsrs	r3, r3, #4
20005070:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
20005072:	f3c3 030a 	ubfx	r3, r3, #0, #11
20005076:	b29b      	uxth	r3, r3
20005078:	461a      	mov	r2, r3
2000507a:	6a38      	ldr	r0, [r7, #32]
2000507c:	f003 ff7a 	bl	20008f74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20005080:	697b      	ldr	r3, [r7, #20]
20005082:	68da      	ldr	r2, [r3, #12]
20005084:	69bb      	ldr	r3, [r7, #24]
20005086:	091b      	lsrs	r3, r3, #4
20005088:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000508c:	441a      	add	r2, r3
2000508e:	697b      	ldr	r3, [r7, #20]
20005090:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20005092:	697b      	ldr	r3, [r7, #20]
20005094:	695a      	ldr	r2, [r3, #20]
20005096:	69bb      	ldr	r3, [r7, #24]
20005098:	091b      	lsrs	r3, r3, #4
2000509a:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000509e:	441a      	add	r2, r3
200050a0:	697b      	ldr	r3, [r7, #20]
200050a2:	615a      	str	r2, [r3, #20]
200050a4:	e016      	b.n	200050d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
200050a6:	69bb      	ldr	r3, [r7, #24]
200050a8:	0c5b      	lsrs	r3, r3, #17
200050aa:	f003 030f 	and.w	r3, r3, #15
200050ae:	2b06      	cmp	r3, #6
200050b0:	d110      	bne.n	200050d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
200050b2:	687b      	ldr	r3, [r7, #4]
200050b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
200050b8:	2208      	movs	r2, #8
200050ba:	4619      	mov	r1, r3
200050bc:	6a38      	ldr	r0, [r7, #32]
200050be:	f003 ff59 	bl	20008f74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
200050c2:	697b      	ldr	r3, [r7, #20]
200050c4:	695a      	ldr	r2, [r3, #20]
200050c6:	69bb      	ldr	r3, [r7, #24]
200050c8:	091b      	lsrs	r3, r3, #4
200050ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
200050ce:	441a      	add	r2, r3
200050d0:	697b      	ldr	r3, [r7, #20]
200050d2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
200050d4:	687b      	ldr	r3, [r7, #4]
200050d6:	681b      	ldr	r3, [r3, #0]
200050d8:	699a      	ldr	r2, [r3, #24]
200050da:	687b      	ldr	r3, [r7, #4]
200050dc:	681b      	ldr	r3, [r3, #0]
200050de:	f042 0210 	orr.w	r2, r2, #16
200050e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
200050e4:	687b      	ldr	r3, [r7, #4]
200050e6:	681b      	ldr	r3, [r3, #0]
200050e8:	4618      	mov	r0, r3
200050ea:	f004 f8d7 	bl	2000929c <USB_ReadInterrupts>
200050ee:	4603      	mov	r3, r0
200050f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
200050f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
200050f8:	f040 80a7 	bne.w	2000524a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
200050fc:	2300      	movs	r3, #0
200050fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
20005100:	687b      	ldr	r3, [r7, #4]
20005102:	681b      	ldr	r3, [r3, #0]
20005104:	4618      	mov	r0, r3
20005106:	f004 f8dc 	bl	200092c2 <USB_ReadDevAllOutEpInterrupt>
2000510a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
2000510c:	e099      	b.n	20005242 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
2000510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20005110:	f003 0301 	and.w	r3, r3, #1
20005114:	2b00      	cmp	r3, #0
20005116:	f000 808e 	beq.w	20005236 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
2000511a:	687b      	ldr	r3, [r7, #4]
2000511c:	681b      	ldr	r3, [r3, #0]
2000511e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005120:	b2d2      	uxtb	r2, r2
20005122:	4611      	mov	r1, r2
20005124:	4618      	mov	r0, r3
20005126:	f004 f900 	bl	2000932a <USB_ReadDevOutEPInterrupt>
2000512a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
2000512c:	693b      	ldr	r3, [r7, #16]
2000512e:	f003 0301 	and.w	r3, r3, #1
20005132:	2b00      	cmp	r3, #0
20005134:	d00c      	beq.n	20005150 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
20005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005138:	015a      	lsls	r2, r3, #5
2000513a:	69fb      	ldr	r3, [r7, #28]
2000513c:	4413      	add	r3, r2
2000513e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005142:	461a      	mov	r2, r3
20005144:	2301      	movs	r3, #1
20005146:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
20005148:	6a79      	ldr	r1, [r7, #36]	@ 0x24
2000514a:	6878      	ldr	r0, [r7, #4]
2000514c:	f000 fed0 	bl	20005ef0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
20005150:	693b      	ldr	r3, [r7, #16]
20005152:	f003 0308 	and.w	r3, r3, #8
20005156:	2b00      	cmp	r3, #0
20005158:	d00c      	beq.n	20005174 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
2000515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000515c:	015a      	lsls	r2, r3, #5
2000515e:	69fb      	ldr	r3, [r7, #28]
20005160:	4413      	add	r3, r2
20005162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005166:	461a      	mov	r2, r3
20005168:	2308      	movs	r3, #8
2000516a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
2000516c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
2000516e:	6878      	ldr	r0, [r7, #4]
20005170:	f000 ffa6 	bl	200060c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
20005174:	693b      	ldr	r3, [r7, #16]
20005176:	f003 0310 	and.w	r3, r3, #16
2000517a:	2b00      	cmp	r3, #0
2000517c:	d008      	beq.n	20005190 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
2000517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005180:	015a      	lsls	r2, r3, #5
20005182:	69fb      	ldr	r3, [r7, #28]
20005184:	4413      	add	r3, r2
20005186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000518a:	461a      	mov	r2, r3
2000518c:	2310      	movs	r3, #16
2000518e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
20005190:	693b      	ldr	r3, [r7, #16]
20005192:	f003 0302 	and.w	r3, r3, #2
20005196:	2b00      	cmp	r3, #0
20005198:	d030      	beq.n	200051fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
2000519a:	6a3b      	ldr	r3, [r7, #32]
2000519c:	695b      	ldr	r3, [r3, #20]
2000519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200051a2:	2b80      	cmp	r3, #128	@ 0x80
200051a4:	d109      	bne.n	200051ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
200051a6:	69fb      	ldr	r3, [r7, #28]
200051a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200051ac:	685b      	ldr	r3, [r3, #4]
200051ae:	69fa      	ldr	r2, [r7, #28]
200051b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200051b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
200051b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
200051ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200051bc:	4613      	mov	r3, r2
200051be:	00db      	lsls	r3, r3, #3
200051c0:	4413      	add	r3, r2
200051c2:	009b      	lsls	r3, r3, #2
200051c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200051c8:	687a      	ldr	r2, [r7, #4]
200051ca:	4413      	add	r3, r2
200051cc:	3304      	adds	r3, #4
200051ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
200051d0:	697b      	ldr	r3, [r7, #20]
200051d2:	78db      	ldrb	r3, [r3, #3]
200051d4:	2b01      	cmp	r3, #1
200051d6:	d108      	bne.n	200051ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
200051d8:	697b      	ldr	r3, [r7, #20]
200051da:	2200      	movs	r2, #0
200051dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
200051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200051e0:	b2db      	uxtb	r3, r3
200051e2:	4619      	mov	r1, r3
200051e4:	6878      	ldr	r0, [r7, #4]
200051e6:	f006 fb99 	bl	2000b91c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
200051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200051ec:	015a      	lsls	r2, r3, #5
200051ee:	69fb      	ldr	r3, [r7, #28]
200051f0:	4413      	add	r3, r2
200051f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200051f6:	461a      	mov	r2, r3
200051f8:	2302      	movs	r3, #2
200051fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
200051fc:	693b      	ldr	r3, [r7, #16]
200051fe:	f003 0320 	and.w	r3, r3, #32
20005202:	2b00      	cmp	r3, #0
20005204:	d008      	beq.n	20005218 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005208:	015a      	lsls	r2, r3, #5
2000520a:	69fb      	ldr	r3, [r7, #28]
2000520c:	4413      	add	r3, r2
2000520e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005212:	461a      	mov	r2, r3
20005214:	2320      	movs	r3, #32
20005216:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
20005218:	693b      	ldr	r3, [r7, #16]
2000521a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2000521e:	2b00      	cmp	r3, #0
20005220:	d009      	beq.n	20005236 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
20005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005224:	015a      	lsls	r2, r3, #5
20005226:	69fb      	ldr	r3, [r7, #28]
20005228:	4413      	add	r3, r2
2000522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000522e:	461a      	mov	r2, r3
20005230:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20005234:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
20005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005238:	3301      	adds	r3, #1
2000523a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
2000523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000523e:	085b      	lsrs	r3, r3, #1
20005240:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
20005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20005244:	2b00      	cmp	r3, #0
20005246:	f47f af62 	bne.w	2000510e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
2000524a:	687b      	ldr	r3, [r7, #4]
2000524c:	681b      	ldr	r3, [r3, #0]
2000524e:	4618      	mov	r0, r3
20005250:	f004 f824 	bl	2000929c <USB_ReadInterrupts>
20005254:	4603      	mov	r3, r0
20005256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2000525a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
2000525e:	f040 80db 	bne.w	20005418 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
20005262:	687b      	ldr	r3, [r7, #4]
20005264:	681b      	ldr	r3, [r3, #0]
20005266:	4618      	mov	r0, r3
20005268:	f004 f845 	bl	200092f6 <USB_ReadDevAllInEpInterrupt>
2000526c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
2000526e:	2300      	movs	r3, #0
20005270:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
20005272:	e0cd      	b.n	20005410 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
20005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20005276:	f003 0301 	and.w	r3, r3, #1
2000527a:	2b00      	cmp	r3, #0
2000527c:	f000 80c2 	beq.w	20005404 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
20005280:	687b      	ldr	r3, [r7, #4]
20005282:	681b      	ldr	r3, [r3, #0]
20005284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005286:	b2d2      	uxtb	r2, r2
20005288:	4611      	mov	r1, r2
2000528a:	4618      	mov	r0, r3
2000528c:	f004 f86b 	bl	20009366 <USB_ReadDevInEPInterrupt>
20005290:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
20005292:	693b      	ldr	r3, [r7, #16]
20005294:	f003 0301 	and.w	r3, r3, #1
20005298:	2b00      	cmp	r3, #0
2000529a:	d057      	beq.n	2000534c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
2000529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000529e:	f003 030f 	and.w	r3, r3, #15
200052a2:	2201      	movs	r2, #1
200052a4:	fa02 f303 	lsl.w	r3, r2, r3
200052a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
200052aa:	69fb      	ldr	r3, [r7, #28]
200052ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200052b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
200052b2:	68fb      	ldr	r3, [r7, #12]
200052b4:	43db      	mvns	r3, r3
200052b6:	69f9      	ldr	r1, [r7, #28]
200052b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200052bc:	4013      	ands	r3, r2
200052be:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
200052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200052c2:	015a      	lsls	r2, r3, #5
200052c4:	69fb      	ldr	r3, [r7, #28]
200052c6:	4413      	add	r3, r2
200052c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200052cc:	461a      	mov	r2, r3
200052ce:	2301      	movs	r3, #1
200052d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
200052d2:	687b      	ldr	r3, [r7, #4]
200052d4:	799b      	ldrb	r3, [r3, #6]
200052d6:	2b01      	cmp	r3, #1
200052d8:	d132      	bne.n	20005340 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
200052da:	6879      	ldr	r1, [r7, #4]
200052dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200052de:	4613      	mov	r3, r2
200052e0:	00db      	lsls	r3, r3, #3
200052e2:	4413      	add	r3, r2
200052e4:	009b      	lsls	r3, r3, #2
200052e6:	440b      	add	r3, r1
200052e8:	3320      	adds	r3, #32
200052ea:	6819      	ldr	r1, [r3, #0]
200052ec:	6878      	ldr	r0, [r7, #4]
200052ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200052f0:	4613      	mov	r3, r2
200052f2:	00db      	lsls	r3, r3, #3
200052f4:	4413      	add	r3, r2
200052f6:	009b      	lsls	r3, r3, #2
200052f8:	4403      	add	r3, r0
200052fa:	331c      	adds	r3, #28
200052fc:	681b      	ldr	r3, [r3, #0]
200052fe:	4419      	add	r1, r3
20005300:	6878      	ldr	r0, [r7, #4]
20005302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005304:	4613      	mov	r3, r2
20005306:	00db      	lsls	r3, r3, #3
20005308:	4413      	add	r3, r2
2000530a:	009b      	lsls	r3, r3, #2
2000530c:	4403      	add	r3, r0
2000530e:	3320      	adds	r3, #32
20005310:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
20005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005314:	2b00      	cmp	r3, #0
20005316:	d113      	bne.n	20005340 <HAL_PCD_IRQHandler+0x3a2>
20005318:	6879      	ldr	r1, [r7, #4]
2000531a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000531c:	4613      	mov	r3, r2
2000531e:	00db      	lsls	r3, r3, #3
20005320:	4413      	add	r3, r2
20005322:	009b      	lsls	r3, r3, #2
20005324:	440b      	add	r3, r1
20005326:	3324      	adds	r3, #36	@ 0x24
20005328:	681b      	ldr	r3, [r3, #0]
2000532a:	2b00      	cmp	r3, #0
2000532c:	d108      	bne.n	20005340 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
2000532e:	687b      	ldr	r3, [r7, #4]
20005330:	6818      	ldr	r0, [r3, #0]
20005332:	687b      	ldr	r3, [r7, #4]
20005334:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20005338:	461a      	mov	r2, r3
2000533a:	2101      	movs	r1, #1
2000533c:	f004 f874 	bl	20009428 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
20005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005342:	b2db      	uxtb	r3, r3
20005344:	4619      	mov	r1, r3
20005346:	6878      	ldr	r0, [r7, #4]
20005348:	f006 fa63 	bl	2000b812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
2000534c:	693b      	ldr	r3, [r7, #16]
2000534e:	f003 0308 	and.w	r3, r3, #8
20005352:	2b00      	cmp	r3, #0
20005354:	d008      	beq.n	20005368 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
20005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005358:	015a      	lsls	r2, r3, #5
2000535a:	69fb      	ldr	r3, [r7, #28]
2000535c:	4413      	add	r3, r2
2000535e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005362:	461a      	mov	r2, r3
20005364:	2308      	movs	r3, #8
20005366:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
20005368:	693b      	ldr	r3, [r7, #16]
2000536a:	f003 0310 	and.w	r3, r3, #16
2000536e:	2b00      	cmp	r3, #0
20005370:	d008      	beq.n	20005384 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
20005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005374:	015a      	lsls	r2, r3, #5
20005376:	69fb      	ldr	r3, [r7, #28]
20005378:	4413      	add	r3, r2
2000537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000537e:	461a      	mov	r2, r3
20005380:	2310      	movs	r3, #16
20005382:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
20005384:	693b      	ldr	r3, [r7, #16]
20005386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000538a:	2b00      	cmp	r3, #0
2000538c:	d008      	beq.n	200053a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
2000538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005390:	015a      	lsls	r2, r3, #5
20005392:	69fb      	ldr	r3, [r7, #28]
20005394:	4413      	add	r3, r2
20005396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000539a:	461a      	mov	r2, r3
2000539c:	2340      	movs	r3, #64	@ 0x40
2000539e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
200053a0:	693b      	ldr	r3, [r7, #16]
200053a2:	f003 0302 	and.w	r3, r3, #2
200053a6:	2b00      	cmp	r3, #0
200053a8:	d023      	beq.n	200053f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
200053aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200053ac:	6a38      	ldr	r0, [r7, #32]
200053ae:	f003 f853 	bl	20008458 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
200053b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200053b4:	4613      	mov	r3, r2
200053b6:	00db      	lsls	r3, r3, #3
200053b8:	4413      	add	r3, r2
200053ba:	009b      	lsls	r3, r3, #2
200053bc:	3310      	adds	r3, #16
200053be:	687a      	ldr	r2, [r7, #4]
200053c0:	4413      	add	r3, r2
200053c2:	3304      	adds	r3, #4
200053c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
200053c6:	697b      	ldr	r3, [r7, #20]
200053c8:	78db      	ldrb	r3, [r3, #3]
200053ca:	2b01      	cmp	r3, #1
200053cc:	d108      	bne.n	200053e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
200053ce:	697b      	ldr	r3, [r7, #20]
200053d0:	2200      	movs	r2, #0
200053d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
200053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200053d6:	b2db      	uxtb	r3, r3
200053d8:	4619      	mov	r1, r3
200053da:	6878      	ldr	r0, [r7, #4]
200053dc:	f006 fab0 	bl	2000b940 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
200053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200053e2:	015a      	lsls	r2, r3, #5
200053e4:	69fb      	ldr	r3, [r7, #28]
200053e6:	4413      	add	r3, r2
200053e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200053ec:	461a      	mov	r2, r3
200053ee:	2302      	movs	r3, #2
200053f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
200053f2:	693b      	ldr	r3, [r7, #16]
200053f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200053f8:	2b00      	cmp	r3, #0
200053fa:	d003      	beq.n	20005404 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
200053fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
200053fe:	6878      	ldr	r0, [r7, #4]
20005400:	f000 fcea 	bl	20005dd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
20005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005406:	3301      	adds	r3, #1
20005408:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
2000540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000540c:	085b      	lsrs	r3, r3, #1
2000540e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
20005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20005412:	2b00      	cmp	r3, #0
20005414:	f47f af2e 	bne.w	20005274 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
20005418:	687b      	ldr	r3, [r7, #4]
2000541a:	681b      	ldr	r3, [r3, #0]
2000541c:	4618      	mov	r0, r3
2000541e:	f003 ff3d 	bl	2000929c <USB_ReadInterrupts>
20005422:	4603      	mov	r3, r0
20005424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20005428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000542c:	d122      	bne.n	20005474 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
2000542e:	69fb      	ldr	r3, [r7, #28]
20005430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005434:	685b      	ldr	r3, [r3, #4]
20005436:	69fa      	ldr	r2, [r7, #28]
20005438:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000543c:	f023 0301 	bic.w	r3, r3, #1
20005440:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
20005442:	687b      	ldr	r3, [r7, #4]
20005444:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
20005448:	2b01      	cmp	r3, #1
2000544a:	d108      	bne.n	2000545e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
2000544c:	687b      	ldr	r3, [r7, #4]
2000544e:	2200      	movs	r2, #0
20005450:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
20005454:	2100      	movs	r1, #0
20005456:	6878      	ldr	r0, [r7, #4]
20005458:	f006 fc2a 	bl	2000bcb0 <HAL_PCDEx_LPM_Callback>
2000545c:	e002      	b.n	20005464 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
2000545e:	6878      	ldr	r0, [r7, #4]
20005460:	f006 fa4e 	bl	2000b900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
20005464:	687b      	ldr	r3, [r7, #4]
20005466:	681b      	ldr	r3, [r3, #0]
20005468:	695a      	ldr	r2, [r3, #20]
2000546a:	687b      	ldr	r3, [r7, #4]
2000546c:	681b      	ldr	r3, [r3, #0]
2000546e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
20005472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
20005474:	687b      	ldr	r3, [r7, #4]
20005476:	681b      	ldr	r3, [r3, #0]
20005478:	4618      	mov	r0, r3
2000547a:	f003 ff0f 	bl	2000929c <USB_ReadInterrupts>
2000547e:	4603      	mov	r3, r0
20005480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20005484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20005488:	d112      	bne.n	200054b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
2000548a:	69fb      	ldr	r3, [r7, #28]
2000548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005490:	689b      	ldr	r3, [r3, #8]
20005492:	f003 0301 	and.w	r3, r3, #1
20005496:	2b01      	cmp	r3, #1
20005498:	d102      	bne.n	200054a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
2000549a:	6878      	ldr	r0, [r7, #4]
2000549c:	f006 fa0a 	bl	2000b8b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
200054a0:	687b      	ldr	r3, [r7, #4]
200054a2:	681b      	ldr	r3, [r3, #0]
200054a4:	695a      	ldr	r2, [r3, #20]
200054a6:	687b      	ldr	r3, [r7, #4]
200054a8:	681b      	ldr	r3, [r3, #0]
200054aa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
200054ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
200054b0:	687b      	ldr	r3, [r7, #4]
200054b2:	681b      	ldr	r3, [r3, #0]
200054b4:	4618      	mov	r0, r3
200054b6:	f003 fef1 	bl	2000929c <USB_ReadInterrupts>
200054ba:	4603      	mov	r3, r0
200054bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200054c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
200054c4:	d121      	bne.n	2000550a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
200054c6:	687b      	ldr	r3, [r7, #4]
200054c8:	681b      	ldr	r3, [r3, #0]
200054ca:	695a      	ldr	r2, [r3, #20]
200054cc:	687b      	ldr	r3, [r7, #4]
200054ce:	681b      	ldr	r3, [r3, #0]
200054d0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
200054d4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
200054d6:	687b      	ldr	r3, [r7, #4]
200054d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
200054dc:	2b00      	cmp	r3, #0
200054de:	d111      	bne.n	20005504 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
200054e0:	687b      	ldr	r3, [r7, #4]
200054e2:	2201      	movs	r2, #1
200054e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
200054e8:	687b      	ldr	r3, [r7, #4]
200054ea:	681b      	ldr	r3, [r3, #0]
200054ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200054ee:	089b      	lsrs	r3, r3, #2
200054f0:	f003 020f 	and.w	r2, r3, #15
200054f4:	687b      	ldr	r3, [r7, #4]
200054f6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
200054fa:	2101      	movs	r1, #1
200054fc:	6878      	ldr	r0, [r7, #4]
200054fe:	f006 fbd7 	bl	2000bcb0 <HAL_PCDEx_LPM_Callback>
20005502:	e002      	b.n	2000550a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
20005504:	6878      	ldr	r0, [r7, #4]
20005506:	f006 f9d5 	bl	2000b8b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
2000550a:	687b      	ldr	r3, [r7, #4]
2000550c:	681b      	ldr	r3, [r3, #0]
2000550e:	4618      	mov	r0, r3
20005510:	f003 fec4 	bl	2000929c <USB_ReadInterrupts>
20005514:	4603      	mov	r3, r0
20005516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
2000551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
2000551e:	f040 80b7 	bne.w	20005690 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
20005522:	69fb      	ldr	r3, [r7, #28]
20005524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005528:	685b      	ldr	r3, [r3, #4]
2000552a:	69fa      	ldr	r2, [r7, #28]
2000552c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005530:	f023 0301 	bic.w	r3, r3, #1
20005534:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
20005536:	687b      	ldr	r3, [r7, #4]
20005538:	681b      	ldr	r3, [r3, #0]
2000553a:	2110      	movs	r1, #16
2000553c:	4618      	mov	r0, r3
2000553e:	f002 ff8b 	bl	20008458 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20005542:	2300      	movs	r3, #0
20005544:	62fb      	str	r3, [r7, #44]	@ 0x2c
20005546:	e046      	b.n	200055d6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
20005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000554a:	015a      	lsls	r2, r3, #5
2000554c:	69fb      	ldr	r3, [r7, #28]
2000554e:	4413      	add	r3, r2
20005550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005554:	461a      	mov	r2, r3
20005556:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
2000555a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
2000555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000555e:	015a      	lsls	r2, r3, #5
20005560:	69fb      	ldr	r3, [r7, #28]
20005562:	4413      	add	r3, r2
20005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005568:	681b      	ldr	r3, [r3, #0]
2000556a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000556c:	0151      	lsls	r1, r2, #5
2000556e:	69fa      	ldr	r2, [r7, #28]
20005570:	440a      	add	r2, r1
20005572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20005576:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000557a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
2000557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000557e:	015a      	lsls	r2, r3, #5
20005580:	69fb      	ldr	r3, [r7, #28]
20005582:	4413      	add	r3, r2
20005584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005588:	461a      	mov	r2, r3
2000558a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
2000558e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
20005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20005592:	015a      	lsls	r2, r3, #5
20005594:	69fb      	ldr	r3, [r7, #28]
20005596:	4413      	add	r3, r2
20005598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000559c:	681b      	ldr	r3, [r3, #0]
2000559e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200055a0:	0151      	lsls	r1, r2, #5
200055a2:	69fa      	ldr	r2, [r7, #28]
200055a4:	440a      	add	r2, r1
200055a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200055aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
200055ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
200055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200055b2:	015a      	lsls	r2, r3, #5
200055b4:	69fb      	ldr	r3, [r7, #28]
200055b6:	4413      	add	r3, r2
200055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200055bc:	681b      	ldr	r3, [r3, #0]
200055be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200055c0:	0151      	lsls	r1, r2, #5
200055c2:	69fa      	ldr	r2, [r7, #28]
200055c4:	440a      	add	r2, r1
200055c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200055ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
200055ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200055d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200055d2:	3301      	adds	r3, #1
200055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
200055d6:	687b      	ldr	r3, [r7, #4]
200055d8:	791b      	ldrb	r3, [r3, #4]
200055da:	461a      	mov	r2, r3
200055dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200055de:	4293      	cmp	r3, r2
200055e0:	d3b2      	bcc.n	20005548 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
200055e2:	69fb      	ldr	r3, [r7, #28]
200055e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200055e8:	69db      	ldr	r3, [r3, #28]
200055ea:	69fa      	ldr	r2, [r7, #28]
200055ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200055f0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
200055f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
200055f6:	687b      	ldr	r3, [r7, #4]
200055f8:	7bdb      	ldrb	r3, [r3, #15]
200055fa:	2b00      	cmp	r3, #0
200055fc:	d016      	beq.n	2000562c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
200055fe:	69fb      	ldr	r3, [r7, #28]
20005600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20005608:	69fa      	ldr	r2, [r7, #28]
2000560a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000560e:	f043 030b 	orr.w	r3, r3, #11
20005612:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
20005616:	69fb      	ldr	r3, [r7, #28]
20005618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000561e:	69fa      	ldr	r2, [r7, #28]
20005620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005624:	f043 030b 	orr.w	r3, r3, #11
20005628:	6453      	str	r3, [r2, #68]	@ 0x44
2000562a:	e015      	b.n	20005658 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
2000562c:	69fb      	ldr	r3, [r7, #28]
2000562e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005632:	695a      	ldr	r2, [r3, #20]
20005634:	69fb      	ldr	r3, [r7, #28]
20005636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000563a:	4619      	mov	r1, r3
2000563c:	f242 032b 	movw	r3, #8235	@ 0x202b
20005640:	4313      	orrs	r3, r2
20005642:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
20005644:	69fb      	ldr	r3, [r7, #28]
20005646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000564a:	691b      	ldr	r3, [r3, #16]
2000564c:	69fa      	ldr	r2, [r7, #28]
2000564e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005652:	f043 030b 	orr.w	r3, r3, #11
20005656:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
20005658:	69fb      	ldr	r3, [r7, #28]
2000565a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000565e:	681b      	ldr	r3, [r3, #0]
20005660:	69fa      	ldr	r2, [r7, #28]
20005662:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005666:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
2000566a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
2000566c:	687b      	ldr	r3, [r7, #4]
2000566e:	6818      	ldr	r0, [r3, #0]
20005670:	687b      	ldr	r3, [r7, #4]
20005672:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
20005674:	687b      	ldr	r3, [r7, #4]
20005676:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
2000567a:	461a      	mov	r2, r3
2000567c:	f003 fed4 	bl	20009428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
20005680:	687b      	ldr	r3, [r7, #4]
20005682:	681b      	ldr	r3, [r3, #0]
20005684:	695a      	ldr	r2, [r3, #20]
20005686:	687b      	ldr	r3, [r7, #4]
20005688:	681b      	ldr	r3, [r3, #0]
2000568a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
2000568e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
20005690:	687b      	ldr	r3, [r7, #4]
20005692:	681b      	ldr	r3, [r3, #0]
20005694:	4618      	mov	r0, r3
20005696:	f003 fe01 	bl	2000929c <USB_ReadInterrupts>
2000569a:	4603      	mov	r3, r0
2000569c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200056a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
200056a4:	d123      	bne.n	200056ee <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
200056a6:	687b      	ldr	r3, [r7, #4]
200056a8:	681b      	ldr	r3, [r3, #0]
200056aa:	4618      	mov	r0, r3
200056ac:	f003 fe98 	bl	200093e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
200056b0:	687b      	ldr	r3, [r7, #4]
200056b2:	681b      	ldr	r3, [r3, #0]
200056b4:	4618      	mov	r0, r3
200056b6:	f002 ff48 	bl	2000854a <USB_GetDevSpeed>
200056ba:	4603      	mov	r3, r0
200056bc:	461a      	mov	r2, r3
200056be:	687b      	ldr	r3, [r7, #4]
200056c0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
200056c2:	687b      	ldr	r3, [r7, #4]
200056c4:	681c      	ldr	r4, [r3, #0]
200056c6:	f001 fab3 	bl	20006c30 <HAL_RCC_GetHCLKFreq>
200056ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
200056cc:	687b      	ldr	r3, [r7, #4]
200056ce:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
200056d0:	461a      	mov	r2, r3
200056d2:	4620      	mov	r0, r4
200056d4:	f002 fc52 	bl	20007f7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
200056d8:	6878      	ldr	r0, [r7, #4]
200056da:	f006 f8c2 	bl	2000b862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
200056de:	687b      	ldr	r3, [r7, #4]
200056e0:	681b      	ldr	r3, [r3, #0]
200056e2:	695a      	ldr	r2, [r3, #20]
200056e4:	687b      	ldr	r3, [r7, #4]
200056e6:	681b      	ldr	r3, [r3, #0]
200056e8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
200056ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
200056ee:	687b      	ldr	r3, [r7, #4]
200056f0:	681b      	ldr	r3, [r3, #0]
200056f2:	4618      	mov	r0, r3
200056f4:	f003 fdd2 	bl	2000929c <USB_ReadInterrupts>
200056f8:	4603      	mov	r3, r0
200056fa:	f003 0308 	and.w	r3, r3, #8
200056fe:	2b08      	cmp	r3, #8
20005700:	d10a      	bne.n	20005718 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
20005702:	6878      	ldr	r0, [r7, #4]
20005704:	f006 f89f 	bl	2000b846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
20005708:	687b      	ldr	r3, [r7, #4]
2000570a:	681b      	ldr	r3, [r3, #0]
2000570c:	695a      	ldr	r2, [r3, #20]
2000570e:	687b      	ldr	r3, [r7, #4]
20005710:	681b      	ldr	r3, [r3, #0]
20005712:	f002 0208 	and.w	r2, r2, #8
20005716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
20005718:	687b      	ldr	r3, [r7, #4]
2000571a:	681b      	ldr	r3, [r3, #0]
2000571c:	4618      	mov	r0, r3
2000571e:	f003 fdbd 	bl	2000929c <USB_ReadInterrupts>
20005722:	4603      	mov	r3, r0
20005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20005728:	2b80      	cmp	r3, #128	@ 0x80
2000572a:	d123      	bne.n	20005774 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
2000572c:	6a3b      	ldr	r3, [r7, #32]
2000572e:	699b      	ldr	r3, [r3, #24]
20005730:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
20005734:	6a3b      	ldr	r3, [r7, #32]
20005736:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005738:	2301      	movs	r3, #1
2000573a:	627b      	str	r3, [r7, #36]	@ 0x24
2000573c:	e014      	b.n	20005768 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
2000573e:	6879      	ldr	r1, [r7, #4]
20005740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005742:	4613      	mov	r3, r2
20005744:	00db      	lsls	r3, r3, #3
20005746:	4413      	add	r3, r2
20005748:	009b      	lsls	r3, r3, #2
2000574a:	440b      	add	r3, r1
2000574c:	f203 2357 	addw	r3, r3, #599	@ 0x257
20005750:	781b      	ldrb	r3, [r3, #0]
20005752:	2b01      	cmp	r3, #1
20005754:	d105      	bne.n	20005762 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
20005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005758:	b2db      	uxtb	r3, r3
2000575a:	4619      	mov	r1, r3
2000575c:	6878      	ldr	r0, [r7, #4]
2000575e:	f000 fb0a 	bl	20005d76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005764:	3301      	adds	r3, #1
20005766:	627b      	str	r3, [r7, #36]	@ 0x24
20005768:	687b      	ldr	r3, [r7, #4]
2000576a:	791b      	ldrb	r3, [r3, #4]
2000576c:	461a      	mov	r2, r3
2000576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005770:	4293      	cmp	r3, r2
20005772:	d3e4      	bcc.n	2000573e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
20005774:	687b      	ldr	r3, [r7, #4]
20005776:	681b      	ldr	r3, [r3, #0]
20005778:	4618      	mov	r0, r3
2000577a:	f003 fd8f 	bl	2000929c <USB_ReadInterrupts>
2000577e:	4603      	mov	r3, r0
20005780:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20005784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20005788:	d13c      	bne.n	20005804 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
2000578a:	2301      	movs	r3, #1
2000578c:	627b      	str	r3, [r7, #36]	@ 0x24
2000578e:	e02b      	b.n	200057e8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
20005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005792:	015a      	lsls	r2, r3, #5
20005794:	69fb      	ldr	r3, [r7, #28]
20005796:	4413      	add	r3, r2
20005798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000579c:	681b      	ldr	r3, [r3, #0]
2000579e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
200057a0:	6879      	ldr	r1, [r7, #4]
200057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200057a4:	4613      	mov	r3, r2
200057a6:	00db      	lsls	r3, r3, #3
200057a8:	4413      	add	r3, r2
200057aa:	009b      	lsls	r3, r3, #2
200057ac:	440b      	add	r3, r1
200057ae:	3318      	adds	r3, #24
200057b0:	781b      	ldrb	r3, [r3, #0]
200057b2:	2b01      	cmp	r3, #1
200057b4:	d115      	bne.n	200057e2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
200057b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
200057b8:	2b00      	cmp	r3, #0
200057ba:	da12      	bge.n	200057e2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
200057bc:	6879      	ldr	r1, [r7, #4]
200057be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200057c0:	4613      	mov	r3, r2
200057c2:	00db      	lsls	r3, r3, #3
200057c4:	4413      	add	r3, r2
200057c6:	009b      	lsls	r3, r3, #2
200057c8:	440b      	add	r3, r1
200057ca:	3317      	adds	r3, #23
200057cc:	2201      	movs	r2, #1
200057ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
200057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200057d2:	b2db      	uxtb	r3, r3
200057d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
200057d8:	b2db      	uxtb	r3, r3
200057da:	4619      	mov	r1, r3
200057dc:	6878      	ldr	r0, [r7, #4]
200057de:	f000 faca 	bl	20005d76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
200057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200057e4:	3301      	adds	r3, #1
200057e6:	627b      	str	r3, [r7, #36]	@ 0x24
200057e8:	687b      	ldr	r3, [r7, #4]
200057ea:	791b      	ldrb	r3, [r3, #4]
200057ec:	461a      	mov	r2, r3
200057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200057f0:	4293      	cmp	r3, r2
200057f2:	d3cd      	bcc.n	20005790 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
200057f4:	687b      	ldr	r3, [r7, #4]
200057f6:	681b      	ldr	r3, [r3, #0]
200057f8:	695a      	ldr	r2, [r3, #20]
200057fa:	687b      	ldr	r3, [r7, #4]
200057fc:	681b      	ldr	r3, [r3, #0]
200057fe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
20005802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
20005804:	687b      	ldr	r3, [r7, #4]
20005806:	681b      	ldr	r3, [r3, #0]
20005808:	4618      	mov	r0, r3
2000580a:	f003 fd47 	bl	2000929c <USB_ReadInterrupts>
2000580e:	4603      	mov	r3, r0
20005810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20005814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20005818:	d156      	bne.n	200058c8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
2000581a:	2301      	movs	r3, #1
2000581c:	627b      	str	r3, [r7, #36]	@ 0x24
2000581e:	e045      	b.n	200058ac <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
20005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005822:	015a      	lsls	r2, r3, #5
20005824:	69fb      	ldr	r3, [r7, #28]
20005826:	4413      	add	r3, r2
20005828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000582c:	681b      	ldr	r3, [r3, #0]
2000582e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20005830:	6879      	ldr	r1, [r7, #4]
20005832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005834:	4613      	mov	r3, r2
20005836:	00db      	lsls	r3, r3, #3
20005838:	4413      	add	r3, r2
2000583a:	009b      	lsls	r3, r3, #2
2000583c:	440b      	add	r3, r1
2000583e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20005842:	781b      	ldrb	r3, [r3, #0]
20005844:	2b01      	cmp	r3, #1
20005846:	d12e      	bne.n	200058a6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20005848:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
2000584a:	2b00      	cmp	r3, #0
2000584c:	da2b      	bge.n	200058a6 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
2000584e:	69bb      	ldr	r3, [r7, #24]
20005850:	0c1a      	lsrs	r2, r3, #16
20005852:	687b      	ldr	r3, [r7, #4]
20005854:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
20005858:	4053      	eors	r3, r2
2000585a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
2000585e:	2b00      	cmp	r3, #0
20005860:	d121      	bne.n	200058a6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
20005862:	6879      	ldr	r1, [r7, #4]
20005864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005866:	4613      	mov	r3, r2
20005868:	00db      	lsls	r3, r3, #3
2000586a:	4413      	add	r3, r2
2000586c:	009b      	lsls	r3, r3, #2
2000586e:	440b      	add	r3, r1
20005870:	f203 2357 	addw	r3, r3, #599	@ 0x257
20005874:	2201      	movs	r2, #1
20005876:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
20005878:	6a3b      	ldr	r3, [r7, #32]
2000587a:	699b      	ldr	r3, [r3, #24]
2000587c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20005880:	6a3b      	ldr	r3, [r7, #32]
20005882:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
20005884:	6a3b      	ldr	r3, [r7, #32]
20005886:	695b      	ldr	r3, [r3, #20]
20005888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000588c:	2b00      	cmp	r3, #0
2000588e:	d10a      	bne.n	200058a6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
20005890:	69fb      	ldr	r3, [r7, #28]
20005892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005896:	685b      	ldr	r3, [r3, #4]
20005898:	69fa      	ldr	r2, [r7, #28]
2000589a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000589e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
200058a2:	6053      	str	r3, [r2, #4]
            break;
200058a4:	e008      	b.n	200058b8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
200058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200058a8:	3301      	adds	r3, #1
200058aa:	627b      	str	r3, [r7, #36]	@ 0x24
200058ac:	687b      	ldr	r3, [r7, #4]
200058ae:	791b      	ldrb	r3, [r3, #4]
200058b0:	461a      	mov	r2, r3
200058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200058b4:	4293      	cmp	r3, r2
200058b6:	d3b3      	bcc.n	20005820 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
200058b8:	687b      	ldr	r3, [r7, #4]
200058ba:	681b      	ldr	r3, [r3, #0]
200058bc:	695a      	ldr	r2, [r3, #20]
200058be:	687b      	ldr	r3, [r7, #4]
200058c0:	681b      	ldr	r3, [r3, #0]
200058c2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
200058c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
200058c8:	687b      	ldr	r3, [r7, #4]
200058ca:	681b      	ldr	r3, [r3, #0]
200058cc:	4618      	mov	r0, r3
200058ce:	f003 fce5 	bl	2000929c <USB_ReadInterrupts>
200058d2:	4603      	mov	r3, r0
200058d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
200058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
200058dc:	d10a      	bne.n	200058f4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
200058de:	6878      	ldr	r0, [r7, #4]
200058e0:	f006 f840 	bl	2000b964 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
200058e4:	687b      	ldr	r3, [r7, #4]
200058e6:	681b      	ldr	r3, [r3, #0]
200058e8:	695a      	ldr	r2, [r3, #20]
200058ea:	687b      	ldr	r3, [r7, #4]
200058ec:	681b      	ldr	r3, [r3, #0]
200058ee:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
200058f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
200058f4:	687b      	ldr	r3, [r7, #4]
200058f6:	681b      	ldr	r3, [r3, #0]
200058f8:	4618      	mov	r0, r3
200058fa:	f003 fccf 	bl	2000929c <USB_ReadInterrupts>
200058fe:	4603      	mov	r3, r0
20005900:	f003 0304 	and.w	r3, r3, #4
20005904:	2b04      	cmp	r3, #4
20005906:	d115      	bne.n	20005934 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
20005908:	687b      	ldr	r3, [r7, #4]
2000590a:	681b      	ldr	r3, [r3, #0]
2000590c:	685b      	ldr	r3, [r3, #4]
2000590e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
20005910:	69bb      	ldr	r3, [r7, #24]
20005912:	f003 0304 	and.w	r3, r3, #4
20005916:	2b00      	cmp	r3, #0
20005918:	d002      	beq.n	20005920 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
2000591a:	6878      	ldr	r0, [r7, #4]
2000591c:	f006 f830 	bl	2000b980 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
20005920:	687b      	ldr	r3, [r7, #4]
20005922:	681b      	ldr	r3, [r3, #0]
20005924:	6859      	ldr	r1, [r3, #4]
20005926:	687b      	ldr	r3, [r7, #4]
20005928:	681b      	ldr	r3, [r3, #0]
2000592a:	69ba      	ldr	r2, [r7, #24]
2000592c:	430a      	orrs	r2, r1
2000592e:	605a      	str	r2, [r3, #4]
20005930:	e000      	b.n	20005934 <HAL_PCD_IRQHandler+0x996>
      return;
20005932:	bf00      	nop
    }
  }
}
20005934:	3734      	adds	r7, #52	@ 0x34
20005936:	46bd      	mov	sp, r7
20005938:	bd90      	pop	{r4, r7, pc}

2000593a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
2000593a:	b580      	push	{r7, lr}
2000593c:	b082      	sub	sp, #8
2000593e:	af00      	add	r7, sp, #0
20005940:	6078      	str	r0, [r7, #4]
20005942:	460b      	mov	r3, r1
20005944:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
20005946:	687b      	ldr	r3, [r7, #4]
20005948:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
2000594c:	2b01      	cmp	r3, #1
2000594e:	d101      	bne.n	20005954 <HAL_PCD_SetAddress+0x1a>
20005950:	2302      	movs	r3, #2
20005952:	e012      	b.n	2000597a <HAL_PCD_SetAddress+0x40>
20005954:	687b      	ldr	r3, [r7, #4]
20005956:	2201      	movs	r2, #1
20005958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
2000595c:	687b      	ldr	r3, [r7, #4]
2000595e:	78fa      	ldrb	r2, [r7, #3]
20005960:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
20005962:	687b      	ldr	r3, [r7, #4]
20005964:	681b      	ldr	r3, [r3, #0]
20005966:	78fa      	ldrb	r2, [r7, #3]
20005968:	4611      	mov	r1, r2
2000596a:	4618      	mov	r0, r3
2000596c:	f003 fc2e 	bl	200091cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
20005970:	687b      	ldr	r3, [r7, #4]
20005972:	2200      	movs	r2, #0
20005974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20005978:	2300      	movs	r3, #0
}
2000597a:	4618      	mov	r0, r3
2000597c:	3708      	adds	r7, #8
2000597e:	46bd      	mov	sp, r7
20005980:	bd80      	pop	{r7, pc}

20005982 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
20005982:	b580      	push	{r7, lr}
20005984:	b084      	sub	sp, #16
20005986:	af00      	add	r7, sp, #0
20005988:	6078      	str	r0, [r7, #4]
2000598a:	4608      	mov	r0, r1
2000598c:	4611      	mov	r1, r2
2000598e:	461a      	mov	r2, r3
20005990:	4603      	mov	r3, r0
20005992:	70fb      	strb	r3, [r7, #3]
20005994:	460b      	mov	r3, r1
20005996:	803b      	strh	r3, [r7, #0]
20005998:	4613      	mov	r3, r2
2000599a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
2000599c:	2300      	movs	r3, #0
2000599e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
200059a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
200059a4:	2b00      	cmp	r3, #0
200059a6:	da0f      	bge.n	200059c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
200059a8:	78fb      	ldrb	r3, [r7, #3]
200059aa:	f003 020f 	and.w	r2, r3, #15
200059ae:	4613      	mov	r3, r2
200059b0:	00db      	lsls	r3, r3, #3
200059b2:	4413      	add	r3, r2
200059b4:	009b      	lsls	r3, r3, #2
200059b6:	3310      	adds	r3, #16
200059b8:	687a      	ldr	r2, [r7, #4]
200059ba:	4413      	add	r3, r2
200059bc:	3304      	adds	r3, #4
200059be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
200059c0:	68fb      	ldr	r3, [r7, #12]
200059c2:	2201      	movs	r2, #1
200059c4:	705a      	strb	r2, [r3, #1]
200059c6:	e00f      	b.n	200059e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
200059c8:	78fb      	ldrb	r3, [r7, #3]
200059ca:	f003 020f 	and.w	r2, r3, #15
200059ce:	4613      	mov	r3, r2
200059d0:	00db      	lsls	r3, r3, #3
200059d2:	4413      	add	r3, r2
200059d4:	009b      	lsls	r3, r3, #2
200059d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200059da:	687a      	ldr	r2, [r7, #4]
200059dc:	4413      	add	r3, r2
200059de:	3304      	adds	r3, #4
200059e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
200059e2:	68fb      	ldr	r3, [r7, #12]
200059e4:	2200      	movs	r2, #0
200059e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
200059e8:	78fb      	ldrb	r3, [r7, #3]
200059ea:	f003 030f 	and.w	r3, r3, #15
200059ee:	b2da      	uxtb	r2, r3
200059f0:	68fb      	ldr	r3, [r7, #12]
200059f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
200059f4:	883b      	ldrh	r3, [r7, #0]
200059f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
200059fa:	68fb      	ldr	r3, [r7, #12]
200059fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
200059fe:	68fb      	ldr	r3, [r7, #12]
20005a00:	78ba      	ldrb	r2, [r7, #2]
20005a02:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
20005a04:	68fb      	ldr	r3, [r7, #12]
20005a06:	785b      	ldrb	r3, [r3, #1]
20005a08:	2b00      	cmp	r3, #0
20005a0a:	d004      	beq.n	20005a16 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
20005a0c:	68fb      	ldr	r3, [r7, #12]
20005a0e:	781b      	ldrb	r3, [r3, #0]
20005a10:	461a      	mov	r2, r3
20005a12:	68fb      	ldr	r3, [r7, #12]
20005a14:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
20005a16:	78bb      	ldrb	r3, [r7, #2]
20005a18:	2b02      	cmp	r3, #2
20005a1a:	d102      	bne.n	20005a22 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
20005a1c:	68fb      	ldr	r3, [r7, #12]
20005a1e:	2200      	movs	r2, #0
20005a20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
20005a22:	687b      	ldr	r3, [r7, #4]
20005a24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005a28:	2b01      	cmp	r3, #1
20005a2a:	d101      	bne.n	20005a30 <HAL_PCD_EP_Open+0xae>
20005a2c:	2302      	movs	r3, #2
20005a2e:	e00e      	b.n	20005a4e <HAL_PCD_EP_Open+0xcc>
20005a30:	687b      	ldr	r3, [r7, #4]
20005a32:	2201      	movs	r2, #1
20005a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
20005a38:	687b      	ldr	r3, [r7, #4]
20005a3a:	681b      	ldr	r3, [r3, #0]
20005a3c:	68f9      	ldr	r1, [r7, #12]
20005a3e:	4618      	mov	r0, r3
20005a40:	f002 fda8 	bl	20008594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
20005a44:	687b      	ldr	r3, [r7, #4]
20005a46:	2200      	movs	r2, #0
20005a48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
20005a4c:	7afb      	ldrb	r3, [r7, #11]
}
20005a4e:	4618      	mov	r0, r3
20005a50:	3710      	adds	r7, #16
20005a52:	46bd      	mov	sp, r7
20005a54:	bd80      	pop	{r7, pc}

20005a56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20005a56:	b580      	push	{r7, lr}
20005a58:	b084      	sub	sp, #16
20005a5a:	af00      	add	r7, sp, #0
20005a5c:	6078      	str	r0, [r7, #4]
20005a5e:	460b      	mov	r3, r1
20005a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
20005a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
20005a66:	2b00      	cmp	r3, #0
20005a68:	da0f      	bge.n	20005a8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005a6a:	78fb      	ldrb	r3, [r7, #3]
20005a6c:	f003 020f 	and.w	r2, r3, #15
20005a70:	4613      	mov	r3, r2
20005a72:	00db      	lsls	r3, r3, #3
20005a74:	4413      	add	r3, r2
20005a76:	009b      	lsls	r3, r3, #2
20005a78:	3310      	adds	r3, #16
20005a7a:	687a      	ldr	r2, [r7, #4]
20005a7c:	4413      	add	r3, r2
20005a7e:	3304      	adds	r3, #4
20005a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20005a82:	68fb      	ldr	r3, [r7, #12]
20005a84:	2201      	movs	r2, #1
20005a86:	705a      	strb	r2, [r3, #1]
20005a88:	e00f      	b.n	20005aaa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20005a8a:	78fb      	ldrb	r3, [r7, #3]
20005a8c:	f003 020f 	and.w	r2, r3, #15
20005a90:	4613      	mov	r3, r2
20005a92:	00db      	lsls	r3, r3, #3
20005a94:	4413      	add	r3, r2
20005a96:	009b      	lsls	r3, r3, #2
20005a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005a9c:	687a      	ldr	r2, [r7, #4]
20005a9e:	4413      	add	r3, r2
20005aa0:	3304      	adds	r3, #4
20005aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20005aa4:	68fb      	ldr	r3, [r7, #12]
20005aa6:	2200      	movs	r2, #0
20005aa8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
20005aaa:	78fb      	ldrb	r3, [r7, #3]
20005aac:	f003 030f 	and.w	r3, r3, #15
20005ab0:	b2da      	uxtb	r2, r3
20005ab2:	68fb      	ldr	r3, [r7, #12]
20005ab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20005ab6:	687b      	ldr	r3, [r7, #4]
20005ab8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005abc:	2b01      	cmp	r3, #1
20005abe:	d101      	bne.n	20005ac4 <HAL_PCD_EP_Close+0x6e>
20005ac0:	2302      	movs	r3, #2
20005ac2:	e00e      	b.n	20005ae2 <HAL_PCD_EP_Close+0x8c>
20005ac4:	687b      	ldr	r3, [r7, #4]
20005ac6:	2201      	movs	r2, #1
20005ac8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
20005acc:	687b      	ldr	r3, [r7, #4]
20005ace:	681b      	ldr	r3, [r3, #0]
20005ad0:	68f9      	ldr	r1, [r7, #12]
20005ad2:	4618      	mov	r0, r3
20005ad4:	f002 fde6 	bl	200086a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
20005ad8:	687b      	ldr	r3, [r7, #4]
20005ada:	2200      	movs	r2, #0
20005adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
20005ae0:	2300      	movs	r3, #0
}
20005ae2:	4618      	mov	r0, r3
20005ae4:	3710      	adds	r7, #16
20005ae6:	46bd      	mov	sp, r7
20005ae8:	bd80      	pop	{r7, pc}

20005aea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20005aea:	b580      	push	{r7, lr}
20005aec:	b086      	sub	sp, #24
20005aee:	af00      	add	r7, sp, #0
20005af0:	60f8      	str	r0, [r7, #12]
20005af2:	607a      	str	r2, [r7, #4]
20005af4:	603b      	str	r3, [r7, #0]
20005af6:	460b      	mov	r3, r1
20005af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20005afa:	7afb      	ldrb	r3, [r7, #11]
20005afc:	f003 020f 	and.w	r2, r3, #15
20005b00:	4613      	mov	r3, r2
20005b02:	00db      	lsls	r3, r3, #3
20005b04:	4413      	add	r3, r2
20005b06:	009b      	lsls	r3, r3, #2
20005b08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005b0c:	68fa      	ldr	r2, [r7, #12]
20005b0e:	4413      	add	r3, r2
20005b10:	3304      	adds	r3, #4
20005b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20005b14:	697b      	ldr	r3, [r7, #20]
20005b16:	687a      	ldr	r2, [r7, #4]
20005b18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20005b1a:	697b      	ldr	r3, [r7, #20]
20005b1c:	683a      	ldr	r2, [r7, #0]
20005b1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
20005b20:	697b      	ldr	r3, [r7, #20]
20005b22:	2200      	movs	r2, #0
20005b24:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
20005b26:	697b      	ldr	r3, [r7, #20]
20005b28:	2200      	movs	r2, #0
20005b2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20005b2c:	7afb      	ldrb	r3, [r7, #11]
20005b2e:	f003 030f 	and.w	r3, r3, #15
20005b32:	b2da      	uxtb	r2, r3
20005b34:	697b      	ldr	r3, [r7, #20]
20005b36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20005b38:	68fb      	ldr	r3, [r7, #12]
20005b3a:	799b      	ldrb	r3, [r3, #6]
20005b3c:	2b01      	cmp	r3, #1
20005b3e:	d102      	bne.n	20005b46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
20005b40:	687a      	ldr	r2, [r7, #4]
20005b42:	697b      	ldr	r3, [r7, #20]
20005b44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
20005b46:	68fb      	ldr	r3, [r7, #12]
20005b48:	6818      	ldr	r0, [r3, #0]
20005b4a:	68fb      	ldr	r3, [r7, #12]
20005b4c:	799b      	ldrb	r3, [r3, #6]
20005b4e:	461a      	mov	r2, r3
20005b50:	6979      	ldr	r1, [r7, #20]
20005b52:	f002 fe83 	bl	2000885c <USB_EPStartXfer>

  return HAL_OK;
20005b56:	2300      	movs	r3, #0
}
20005b58:	4618      	mov	r0, r3
20005b5a:	3718      	adds	r7, #24
20005b5c:	46bd      	mov	sp, r7
20005b5e:	bd80      	pop	{r7, pc}

20005b60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
20005b60:	b480      	push	{r7}
20005b62:	b083      	sub	sp, #12
20005b64:	af00      	add	r7, sp, #0
20005b66:	6078      	str	r0, [r7, #4]
20005b68:	460b      	mov	r3, r1
20005b6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
20005b6c:	78fb      	ldrb	r3, [r7, #3]
20005b6e:	f003 020f 	and.w	r2, r3, #15
20005b72:	6879      	ldr	r1, [r7, #4]
20005b74:	4613      	mov	r3, r2
20005b76:	00db      	lsls	r3, r3, #3
20005b78:	4413      	add	r3, r2
20005b7a:	009b      	lsls	r3, r3, #2
20005b7c:	440b      	add	r3, r1
20005b7e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
20005b82:	681b      	ldr	r3, [r3, #0]
}
20005b84:	4618      	mov	r0, r3
20005b86:	370c      	adds	r7, #12
20005b88:	46bd      	mov	sp, r7
20005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b8e:	4770      	bx	lr

20005b90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20005b90:	b580      	push	{r7, lr}
20005b92:	b086      	sub	sp, #24
20005b94:	af00      	add	r7, sp, #0
20005b96:	60f8      	str	r0, [r7, #12]
20005b98:	607a      	str	r2, [r7, #4]
20005b9a:	603b      	str	r3, [r7, #0]
20005b9c:	460b      	mov	r3, r1
20005b9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005ba0:	7afb      	ldrb	r3, [r7, #11]
20005ba2:	f003 020f 	and.w	r2, r3, #15
20005ba6:	4613      	mov	r3, r2
20005ba8:	00db      	lsls	r3, r3, #3
20005baa:	4413      	add	r3, r2
20005bac:	009b      	lsls	r3, r3, #2
20005bae:	3310      	adds	r3, #16
20005bb0:	68fa      	ldr	r2, [r7, #12]
20005bb2:	4413      	add	r3, r2
20005bb4:	3304      	adds	r3, #4
20005bb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20005bb8:	697b      	ldr	r3, [r7, #20]
20005bba:	687a      	ldr	r2, [r7, #4]
20005bbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20005bbe:	697b      	ldr	r3, [r7, #20]
20005bc0:	683a      	ldr	r2, [r7, #0]
20005bc2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
20005bc4:	697b      	ldr	r3, [r7, #20]
20005bc6:	2200      	movs	r2, #0
20005bc8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
20005bca:	697b      	ldr	r3, [r7, #20]
20005bcc:	2201      	movs	r2, #1
20005bce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20005bd0:	7afb      	ldrb	r3, [r7, #11]
20005bd2:	f003 030f 	and.w	r3, r3, #15
20005bd6:	b2da      	uxtb	r2, r3
20005bd8:	697b      	ldr	r3, [r7, #20]
20005bda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20005bdc:	68fb      	ldr	r3, [r7, #12]
20005bde:	799b      	ldrb	r3, [r3, #6]
20005be0:	2b01      	cmp	r3, #1
20005be2:	d102      	bne.n	20005bea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
20005be4:	687a      	ldr	r2, [r7, #4]
20005be6:	697b      	ldr	r3, [r7, #20]
20005be8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
20005bea:	68fb      	ldr	r3, [r7, #12]
20005bec:	6818      	ldr	r0, [r3, #0]
20005bee:	68fb      	ldr	r3, [r7, #12]
20005bf0:	799b      	ldrb	r3, [r3, #6]
20005bf2:	461a      	mov	r2, r3
20005bf4:	6979      	ldr	r1, [r7, #20]
20005bf6:	f002 fe31 	bl	2000885c <USB_EPStartXfer>

  return HAL_OK;
20005bfa:	2300      	movs	r3, #0
}
20005bfc:	4618      	mov	r0, r3
20005bfe:	3718      	adds	r7, #24
20005c00:	46bd      	mov	sp, r7
20005c02:	bd80      	pop	{r7, pc}

20005c04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20005c04:	b580      	push	{r7, lr}
20005c06:	b084      	sub	sp, #16
20005c08:	af00      	add	r7, sp, #0
20005c0a:	6078      	str	r0, [r7, #4]
20005c0c:	460b      	mov	r3, r1
20005c0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
20005c10:	78fb      	ldrb	r3, [r7, #3]
20005c12:	f003 030f 	and.w	r3, r3, #15
20005c16:	687a      	ldr	r2, [r7, #4]
20005c18:	7912      	ldrb	r2, [r2, #4]
20005c1a:	4293      	cmp	r3, r2
20005c1c:	d901      	bls.n	20005c22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
20005c1e:	2301      	movs	r3, #1
20005c20:	e04f      	b.n	20005cc2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
20005c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
20005c26:	2b00      	cmp	r3, #0
20005c28:	da0f      	bge.n	20005c4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005c2a:	78fb      	ldrb	r3, [r7, #3]
20005c2c:	f003 020f 	and.w	r2, r3, #15
20005c30:	4613      	mov	r3, r2
20005c32:	00db      	lsls	r3, r3, #3
20005c34:	4413      	add	r3, r2
20005c36:	009b      	lsls	r3, r3, #2
20005c38:	3310      	adds	r3, #16
20005c3a:	687a      	ldr	r2, [r7, #4]
20005c3c:	4413      	add	r3, r2
20005c3e:	3304      	adds	r3, #4
20005c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20005c42:	68fb      	ldr	r3, [r7, #12]
20005c44:	2201      	movs	r2, #1
20005c46:	705a      	strb	r2, [r3, #1]
20005c48:	e00d      	b.n	20005c66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
20005c4a:	78fa      	ldrb	r2, [r7, #3]
20005c4c:	4613      	mov	r3, r2
20005c4e:	00db      	lsls	r3, r3, #3
20005c50:	4413      	add	r3, r2
20005c52:	009b      	lsls	r3, r3, #2
20005c54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005c58:	687a      	ldr	r2, [r7, #4]
20005c5a:	4413      	add	r3, r2
20005c5c:	3304      	adds	r3, #4
20005c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20005c60:	68fb      	ldr	r3, [r7, #12]
20005c62:	2200      	movs	r2, #0
20005c64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
20005c66:	68fb      	ldr	r3, [r7, #12]
20005c68:	2201      	movs	r2, #1
20005c6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
20005c6c:	78fb      	ldrb	r3, [r7, #3]
20005c6e:	f003 030f 	and.w	r3, r3, #15
20005c72:	b2da      	uxtb	r2, r3
20005c74:	68fb      	ldr	r3, [r7, #12]
20005c76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20005c78:	687b      	ldr	r3, [r7, #4]
20005c7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005c7e:	2b01      	cmp	r3, #1
20005c80:	d101      	bne.n	20005c86 <HAL_PCD_EP_SetStall+0x82>
20005c82:	2302      	movs	r3, #2
20005c84:	e01d      	b.n	20005cc2 <HAL_PCD_EP_SetStall+0xbe>
20005c86:	687b      	ldr	r3, [r7, #4]
20005c88:	2201      	movs	r2, #1
20005c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
20005c8e:	687b      	ldr	r3, [r7, #4]
20005c90:	681b      	ldr	r3, [r3, #0]
20005c92:	68f9      	ldr	r1, [r7, #12]
20005c94:	4618      	mov	r0, r3
20005c96:	f003 f9c5 	bl	20009024 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
20005c9a:	78fb      	ldrb	r3, [r7, #3]
20005c9c:	f003 030f 	and.w	r3, r3, #15
20005ca0:	2b00      	cmp	r3, #0
20005ca2:	d109      	bne.n	20005cb8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
20005ca4:	687b      	ldr	r3, [r7, #4]
20005ca6:	6818      	ldr	r0, [r3, #0]
20005ca8:	687b      	ldr	r3, [r7, #4]
20005caa:	7999      	ldrb	r1, [r3, #6]
20005cac:	687b      	ldr	r3, [r7, #4]
20005cae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20005cb2:	461a      	mov	r2, r3
20005cb4:	f003 fbb8 	bl	20009428 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
20005cb8:	687b      	ldr	r3, [r7, #4]
20005cba:	2200      	movs	r2, #0
20005cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20005cc0:	2300      	movs	r3, #0
}
20005cc2:	4618      	mov	r0, r3
20005cc4:	3710      	adds	r7, #16
20005cc6:	46bd      	mov	sp, r7
20005cc8:	bd80      	pop	{r7, pc}

20005cca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20005cca:	b580      	push	{r7, lr}
20005ccc:	b084      	sub	sp, #16
20005cce:	af00      	add	r7, sp, #0
20005cd0:	6078      	str	r0, [r7, #4]
20005cd2:	460b      	mov	r3, r1
20005cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
20005cd6:	78fb      	ldrb	r3, [r7, #3]
20005cd8:	f003 030f 	and.w	r3, r3, #15
20005cdc:	687a      	ldr	r2, [r7, #4]
20005cde:	7912      	ldrb	r2, [r2, #4]
20005ce0:	4293      	cmp	r3, r2
20005ce2:	d901      	bls.n	20005ce8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
20005ce4:	2301      	movs	r3, #1
20005ce6:	e042      	b.n	20005d6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
20005ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
20005cec:	2b00      	cmp	r3, #0
20005cee:	da0f      	bge.n	20005d10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005cf0:	78fb      	ldrb	r3, [r7, #3]
20005cf2:	f003 020f 	and.w	r2, r3, #15
20005cf6:	4613      	mov	r3, r2
20005cf8:	00db      	lsls	r3, r3, #3
20005cfa:	4413      	add	r3, r2
20005cfc:	009b      	lsls	r3, r3, #2
20005cfe:	3310      	adds	r3, #16
20005d00:	687a      	ldr	r2, [r7, #4]
20005d02:	4413      	add	r3, r2
20005d04:	3304      	adds	r3, #4
20005d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20005d08:	68fb      	ldr	r3, [r7, #12]
20005d0a:	2201      	movs	r2, #1
20005d0c:	705a      	strb	r2, [r3, #1]
20005d0e:	e00f      	b.n	20005d30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20005d10:	78fb      	ldrb	r3, [r7, #3]
20005d12:	f003 020f 	and.w	r2, r3, #15
20005d16:	4613      	mov	r3, r2
20005d18:	00db      	lsls	r3, r3, #3
20005d1a:	4413      	add	r3, r2
20005d1c:	009b      	lsls	r3, r3, #2
20005d1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005d22:	687a      	ldr	r2, [r7, #4]
20005d24:	4413      	add	r3, r2
20005d26:	3304      	adds	r3, #4
20005d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20005d2a:	68fb      	ldr	r3, [r7, #12]
20005d2c:	2200      	movs	r2, #0
20005d2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
20005d30:	68fb      	ldr	r3, [r7, #12]
20005d32:	2200      	movs	r2, #0
20005d34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
20005d36:	78fb      	ldrb	r3, [r7, #3]
20005d38:	f003 030f 	and.w	r3, r3, #15
20005d3c:	b2da      	uxtb	r2, r3
20005d3e:	68fb      	ldr	r3, [r7, #12]
20005d40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20005d42:	687b      	ldr	r3, [r7, #4]
20005d44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20005d48:	2b01      	cmp	r3, #1
20005d4a:	d101      	bne.n	20005d50 <HAL_PCD_EP_ClrStall+0x86>
20005d4c:	2302      	movs	r3, #2
20005d4e:	e00e      	b.n	20005d6e <HAL_PCD_EP_ClrStall+0xa4>
20005d50:	687b      	ldr	r3, [r7, #4]
20005d52:	2201      	movs	r2, #1
20005d54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
20005d58:	687b      	ldr	r3, [r7, #4]
20005d5a:	681b      	ldr	r3, [r3, #0]
20005d5c:	68f9      	ldr	r1, [r7, #12]
20005d5e:	4618      	mov	r0, r3
20005d60:	f003 f9ce 	bl	20009100 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
20005d64:	687b      	ldr	r3, [r7, #4]
20005d66:	2200      	movs	r2, #0
20005d68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20005d6c:	2300      	movs	r3, #0
}
20005d6e:	4618      	mov	r0, r3
20005d70:	3710      	adds	r7, #16
20005d72:	46bd      	mov	sp, r7
20005d74:	bd80      	pop	{r7, pc}

20005d76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20005d76:	b580      	push	{r7, lr}
20005d78:	b084      	sub	sp, #16
20005d7a:	af00      	add	r7, sp, #0
20005d7c:	6078      	str	r0, [r7, #4]
20005d7e:	460b      	mov	r3, r1
20005d80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
20005d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
20005d86:	2b00      	cmp	r3, #0
20005d88:	da0c      	bge.n	20005da4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20005d8a:	78fb      	ldrb	r3, [r7, #3]
20005d8c:	f003 020f 	and.w	r2, r3, #15
20005d90:	4613      	mov	r3, r2
20005d92:	00db      	lsls	r3, r3, #3
20005d94:	4413      	add	r3, r2
20005d96:	009b      	lsls	r3, r3, #2
20005d98:	3310      	adds	r3, #16
20005d9a:	687a      	ldr	r2, [r7, #4]
20005d9c:	4413      	add	r3, r2
20005d9e:	3304      	adds	r3, #4
20005da0:	60fb      	str	r3, [r7, #12]
20005da2:	e00c      	b.n	20005dbe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20005da4:	78fb      	ldrb	r3, [r7, #3]
20005da6:	f003 020f 	and.w	r2, r3, #15
20005daa:	4613      	mov	r3, r2
20005dac:	00db      	lsls	r3, r3, #3
20005dae:	4413      	add	r3, r2
20005db0:	009b      	lsls	r3, r3, #2
20005db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005db6:	687a      	ldr	r2, [r7, #4]
20005db8:	4413      	add	r3, r2
20005dba:	3304      	adds	r3, #4
20005dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
20005dbe:	687b      	ldr	r3, [r7, #4]
20005dc0:	681b      	ldr	r3, [r3, #0]
20005dc2:	68f9      	ldr	r1, [r7, #12]
20005dc4:	4618      	mov	r0, r3
20005dc6:	f002 ffed 	bl	20008da4 <USB_EPStopXfer>
20005dca:	4603      	mov	r3, r0
20005dcc:	72fb      	strb	r3, [r7, #11]

  return ret;
20005dce:	7afb      	ldrb	r3, [r7, #11]
}
20005dd0:	4618      	mov	r0, r3
20005dd2:	3710      	adds	r7, #16
20005dd4:	46bd      	mov	sp, r7
20005dd6:	bd80      	pop	{r7, pc}

20005dd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20005dd8:	b580      	push	{r7, lr}
20005dda:	b08a      	sub	sp, #40	@ 0x28
20005ddc:	af02      	add	r7, sp, #8
20005dde:	6078      	str	r0, [r7, #4]
20005de0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20005de2:	687b      	ldr	r3, [r7, #4]
20005de4:	681b      	ldr	r3, [r3, #0]
20005de6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
20005de8:	697b      	ldr	r3, [r7, #20]
20005dea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
20005dec:	683a      	ldr	r2, [r7, #0]
20005dee:	4613      	mov	r3, r2
20005df0:	00db      	lsls	r3, r3, #3
20005df2:	4413      	add	r3, r2
20005df4:	009b      	lsls	r3, r3, #2
20005df6:	3310      	adds	r3, #16
20005df8:	687a      	ldr	r2, [r7, #4]
20005dfa:	4413      	add	r3, r2
20005dfc:	3304      	adds	r3, #4
20005dfe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
20005e00:	68fb      	ldr	r3, [r7, #12]
20005e02:	695a      	ldr	r2, [r3, #20]
20005e04:	68fb      	ldr	r3, [r7, #12]
20005e06:	691b      	ldr	r3, [r3, #16]
20005e08:	429a      	cmp	r2, r3
20005e0a:	d901      	bls.n	20005e10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
20005e0c:	2301      	movs	r3, #1
20005e0e:	e06b      	b.n	20005ee8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
20005e10:	68fb      	ldr	r3, [r7, #12]
20005e12:	691a      	ldr	r2, [r3, #16]
20005e14:	68fb      	ldr	r3, [r7, #12]
20005e16:	695b      	ldr	r3, [r3, #20]
20005e18:	1ad3      	subs	r3, r2, r3
20005e1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
20005e1c:	68fb      	ldr	r3, [r7, #12]
20005e1e:	689b      	ldr	r3, [r3, #8]
20005e20:	69fa      	ldr	r2, [r7, #28]
20005e22:	429a      	cmp	r2, r3
20005e24:	d902      	bls.n	20005e2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
20005e26:	68fb      	ldr	r3, [r7, #12]
20005e28:	689b      	ldr	r3, [r3, #8]
20005e2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
20005e2c:	69fb      	ldr	r3, [r7, #28]
20005e2e:	3303      	adds	r3, #3
20005e30:	089b      	lsrs	r3, r3, #2
20005e32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20005e34:	e02a      	b.n	20005e8c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
20005e36:	68fb      	ldr	r3, [r7, #12]
20005e38:	691a      	ldr	r2, [r3, #16]
20005e3a:	68fb      	ldr	r3, [r7, #12]
20005e3c:	695b      	ldr	r3, [r3, #20]
20005e3e:	1ad3      	subs	r3, r2, r3
20005e40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
20005e42:	68fb      	ldr	r3, [r7, #12]
20005e44:	689b      	ldr	r3, [r3, #8]
20005e46:	69fa      	ldr	r2, [r7, #28]
20005e48:	429a      	cmp	r2, r3
20005e4a:	d902      	bls.n	20005e52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
20005e4c:	68fb      	ldr	r3, [r7, #12]
20005e4e:	689b      	ldr	r3, [r3, #8]
20005e50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
20005e52:	69fb      	ldr	r3, [r7, #28]
20005e54:	3303      	adds	r3, #3
20005e56:	089b      	lsrs	r3, r3, #2
20005e58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
20005e5a:	68fb      	ldr	r3, [r7, #12]
20005e5c:	68d9      	ldr	r1, [r3, #12]
20005e5e:	683b      	ldr	r3, [r7, #0]
20005e60:	b2da      	uxtb	r2, r3
20005e62:	69fb      	ldr	r3, [r7, #28]
20005e64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
20005e66:	687b      	ldr	r3, [r7, #4]
20005e68:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
20005e6a:	9300      	str	r3, [sp, #0]
20005e6c:	4603      	mov	r3, r0
20005e6e:	6978      	ldr	r0, [r7, #20]
20005e70:	f003 f842 	bl	20008ef8 <USB_WritePacket>

    ep->xfer_buff  += len;
20005e74:	68fb      	ldr	r3, [r7, #12]
20005e76:	68da      	ldr	r2, [r3, #12]
20005e78:	69fb      	ldr	r3, [r7, #28]
20005e7a:	441a      	add	r2, r3
20005e7c:	68fb      	ldr	r3, [r7, #12]
20005e7e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
20005e80:	68fb      	ldr	r3, [r7, #12]
20005e82:	695a      	ldr	r2, [r3, #20]
20005e84:	69fb      	ldr	r3, [r7, #28]
20005e86:	441a      	add	r2, r3
20005e88:	68fb      	ldr	r3, [r7, #12]
20005e8a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20005e8c:	683b      	ldr	r3, [r7, #0]
20005e8e:	015a      	lsls	r2, r3, #5
20005e90:	693b      	ldr	r3, [r7, #16]
20005e92:	4413      	add	r3, r2
20005e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005e98:	699b      	ldr	r3, [r3, #24]
20005e9a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
20005e9c:	69ba      	ldr	r2, [r7, #24]
20005e9e:	429a      	cmp	r2, r3
20005ea0:	d809      	bhi.n	20005eb6 <PCD_WriteEmptyTxFifo+0xde>
20005ea2:	68fb      	ldr	r3, [r7, #12]
20005ea4:	695a      	ldr	r2, [r3, #20]
20005ea6:	68fb      	ldr	r3, [r7, #12]
20005ea8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20005eaa:	429a      	cmp	r2, r3
20005eac:	d203      	bcs.n	20005eb6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
20005eae:	68fb      	ldr	r3, [r7, #12]
20005eb0:	691b      	ldr	r3, [r3, #16]
20005eb2:	2b00      	cmp	r3, #0
20005eb4:	d1bf      	bne.n	20005e36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
20005eb6:	68fb      	ldr	r3, [r7, #12]
20005eb8:	691a      	ldr	r2, [r3, #16]
20005eba:	68fb      	ldr	r3, [r7, #12]
20005ebc:	695b      	ldr	r3, [r3, #20]
20005ebe:	429a      	cmp	r2, r3
20005ec0:	d811      	bhi.n	20005ee6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
20005ec2:	683b      	ldr	r3, [r7, #0]
20005ec4:	f003 030f 	and.w	r3, r3, #15
20005ec8:	2201      	movs	r2, #1
20005eca:	fa02 f303 	lsl.w	r3, r2, r3
20005ece:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
20005ed0:	693b      	ldr	r3, [r7, #16]
20005ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20005ed8:	68bb      	ldr	r3, [r7, #8]
20005eda:	43db      	mvns	r3, r3
20005edc:	6939      	ldr	r1, [r7, #16]
20005ede:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20005ee2:	4013      	ands	r3, r2
20005ee4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
20005ee6:	2300      	movs	r3, #0
}
20005ee8:	4618      	mov	r0, r3
20005eea:	3720      	adds	r7, #32
20005eec:	46bd      	mov	sp, r7
20005eee:	bd80      	pop	{r7, pc}

20005ef0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20005ef0:	b580      	push	{r7, lr}
20005ef2:	b088      	sub	sp, #32
20005ef4:	af00      	add	r7, sp, #0
20005ef6:	6078      	str	r0, [r7, #4]
20005ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20005efa:	687b      	ldr	r3, [r7, #4]
20005efc:	681b      	ldr	r3, [r3, #0]
20005efe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
20005f00:	69fb      	ldr	r3, [r7, #28]
20005f02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20005f04:	69fb      	ldr	r3, [r7, #28]
20005f06:	333c      	adds	r3, #60	@ 0x3c
20005f08:	3304      	adds	r3, #4
20005f0a:	681b      	ldr	r3, [r3, #0]
20005f0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
20005f0e:	683b      	ldr	r3, [r7, #0]
20005f10:	015a      	lsls	r2, r3, #5
20005f12:	69bb      	ldr	r3, [r7, #24]
20005f14:	4413      	add	r3, r2
20005f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f1a:	689b      	ldr	r3, [r3, #8]
20005f1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
20005f1e:	687b      	ldr	r3, [r7, #4]
20005f20:	799b      	ldrb	r3, [r3, #6]
20005f22:	2b01      	cmp	r3, #1
20005f24:	d17b      	bne.n	2000601e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
20005f26:	693b      	ldr	r3, [r7, #16]
20005f28:	f003 0308 	and.w	r3, r3, #8
20005f2c:	2b00      	cmp	r3, #0
20005f2e:	d015      	beq.n	20005f5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20005f30:	697b      	ldr	r3, [r7, #20]
20005f32:	4a61      	ldr	r2, [pc, #388]	@ (200060b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
20005f34:	4293      	cmp	r3, r2
20005f36:	f240 80b9 	bls.w	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
20005f3a:	693b      	ldr	r3, [r7, #16]
20005f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20005f40:	2b00      	cmp	r3, #0
20005f42:	f000 80b3 	beq.w	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20005f46:	683b      	ldr	r3, [r7, #0]
20005f48:	015a      	lsls	r2, r3, #5
20005f4a:	69bb      	ldr	r3, [r7, #24]
20005f4c:	4413      	add	r3, r2
20005f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f52:	461a      	mov	r2, r3
20005f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20005f58:	6093      	str	r3, [r2, #8]
20005f5a:	e0a7      	b.n	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
20005f5c:	693b      	ldr	r3, [r7, #16]
20005f5e:	f003 0320 	and.w	r3, r3, #32
20005f62:	2b00      	cmp	r3, #0
20005f64:	d009      	beq.n	20005f7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20005f66:	683b      	ldr	r3, [r7, #0]
20005f68:	015a      	lsls	r2, r3, #5
20005f6a:	69bb      	ldr	r3, [r7, #24]
20005f6c:	4413      	add	r3, r2
20005f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f72:	461a      	mov	r2, r3
20005f74:	2320      	movs	r3, #32
20005f76:	6093      	str	r3, [r2, #8]
20005f78:	e098      	b.n	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
20005f7a:	693b      	ldr	r3, [r7, #16]
20005f7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
20005f80:	2b00      	cmp	r3, #0
20005f82:	f040 8093 	bne.w	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20005f86:	697b      	ldr	r3, [r7, #20]
20005f88:	4a4b      	ldr	r2, [pc, #300]	@ (200060b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
20005f8a:	4293      	cmp	r3, r2
20005f8c:	d90f      	bls.n	20005fae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
20005f8e:	693b      	ldr	r3, [r7, #16]
20005f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20005f94:	2b00      	cmp	r3, #0
20005f96:	d00a      	beq.n	20005fae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20005f98:	683b      	ldr	r3, [r7, #0]
20005f9a:	015a      	lsls	r2, r3, #5
20005f9c:	69bb      	ldr	r3, [r7, #24]
20005f9e:	4413      	add	r3, r2
20005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005fa4:	461a      	mov	r2, r3
20005fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20005faa:	6093      	str	r3, [r2, #8]
20005fac:	e07e      	b.n	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
20005fae:	683a      	ldr	r2, [r7, #0]
20005fb0:	4613      	mov	r3, r2
20005fb2:	00db      	lsls	r3, r3, #3
20005fb4:	4413      	add	r3, r2
20005fb6:	009b      	lsls	r3, r3, #2
20005fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20005fbc:	687a      	ldr	r2, [r7, #4]
20005fbe:	4413      	add	r3, r2
20005fc0:	3304      	adds	r3, #4
20005fc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
20005fc4:	68fb      	ldr	r3, [r7, #12]
20005fc6:	6a1a      	ldr	r2, [r3, #32]
20005fc8:	683b      	ldr	r3, [r7, #0]
20005fca:	0159      	lsls	r1, r3, #5
20005fcc:	69bb      	ldr	r3, [r7, #24]
20005fce:	440b      	add	r3, r1
20005fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005fd4:	691b      	ldr	r3, [r3, #16]
20005fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
20005fda:	1ad2      	subs	r2, r2, r3
20005fdc:	68fb      	ldr	r3, [r7, #12]
20005fde:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
20005fe0:	683b      	ldr	r3, [r7, #0]
20005fe2:	2b00      	cmp	r3, #0
20005fe4:	d114      	bne.n	20006010 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
20005fe6:	68fb      	ldr	r3, [r7, #12]
20005fe8:	691b      	ldr	r3, [r3, #16]
20005fea:	2b00      	cmp	r3, #0
20005fec:	d109      	bne.n	20006002 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
20005fee:	687b      	ldr	r3, [r7, #4]
20005ff0:	6818      	ldr	r0, [r3, #0]
20005ff2:	687b      	ldr	r3, [r7, #4]
20005ff4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20005ff8:	461a      	mov	r2, r3
20005ffa:	2101      	movs	r1, #1
20005ffc:	f003 fa14 	bl	20009428 <USB_EP0_OutStart>
20006000:	e006      	b.n	20006010 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
20006002:	68fb      	ldr	r3, [r7, #12]
20006004:	68da      	ldr	r2, [r3, #12]
20006006:	68fb      	ldr	r3, [r7, #12]
20006008:	695b      	ldr	r3, [r3, #20]
2000600a:	441a      	add	r2, r3
2000600c:	68fb      	ldr	r3, [r7, #12]
2000600e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20006010:	683b      	ldr	r3, [r7, #0]
20006012:	b2db      	uxtb	r3, r3
20006014:	4619      	mov	r1, r3
20006016:	6878      	ldr	r0, [r7, #4]
20006018:	f005 fbe0 	bl	2000b7dc <HAL_PCD_DataOutStageCallback>
2000601c:	e046      	b.n	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
2000601e:	697b      	ldr	r3, [r7, #20]
20006020:	4a26      	ldr	r2, [pc, #152]	@ (200060bc <PCD_EP_OutXfrComplete_int+0x1cc>)
20006022:	4293      	cmp	r3, r2
20006024:	d124      	bne.n	20006070 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
20006026:	693b      	ldr	r3, [r7, #16]
20006028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000602c:	2b00      	cmp	r3, #0
2000602e:	d00a      	beq.n	20006046 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20006030:	683b      	ldr	r3, [r7, #0]
20006032:	015a      	lsls	r2, r3, #5
20006034:	69bb      	ldr	r3, [r7, #24]
20006036:	4413      	add	r3, r2
20006038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000603c:	461a      	mov	r2, r3
2000603e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20006042:	6093      	str	r3, [r2, #8]
20006044:	e032      	b.n	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
20006046:	693b      	ldr	r3, [r7, #16]
20006048:	f003 0320 	and.w	r3, r3, #32
2000604c:	2b00      	cmp	r3, #0
2000604e:	d008      	beq.n	20006062 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20006050:	683b      	ldr	r3, [r7, #0]
20006052:	015a      	lsls	r2, r3, #5
20006054:	69bb      	ldr	r3, [r7, #24]
20006056:	4413      	add	r3, r2
20006058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000605c:	461a      	mov	r2, r3
2000605e:	2320      	movs	r3, #32
20006060:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20006062:	683b      	ldr	r3, [r7, #0]
20006064:	b2db      	uxtb	r3, r3
20006066:	4619      	mov	r1, r3
20006068:	6878      	ldr	r0, [r7, #4]
2000606a:	f005 fbb7 	bl	2000b7dc <HAL_PCD_DataOutStageCallback>
2000606e:	e01d      	b.n	200060ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
20006070:	683b      	ldr	r3, [r7, #0]
20006072:	2b00      	cmp	r3, #0
20006074:	d114      	bne.n	200060a0 <PCD_EP_OutXfrComplete_int+0x1b0>
20006076:	6879      	ldr	r1, [r7, #4]
20006078:	683a      	ldr	r2, [r7, #0]
2000607a:	4613      	mov	r3, r2
2000607c:	00db      	lsls	r3, r3, #3
2000607e:	4413      	add	r3, r2
20006080:	009b      	lsls	r3, r3, #2
20006082:	440b      	add	r3, r1
20006084:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20006088:	681b      	ldr	r3, [r3, #0]
2000608a:	2b00      	cmp	r3, #0
2000608c:	d108      	bne.n	200060a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
2000608e:	687b      	ldr	r3, [r7, #4]
20006090:	6818      	ldr	r0, [r3, #0]
20006092:	687b      	ldr	r3, [r7, #4]
20006094:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20006098:	461a      	mov	r2, r3
2000609a:	2100      	movs	r1, #0
2000609c:	f003 f9c4 	bl	20009428 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
200060a0:	683b      	ldr	r3, [r7, #0]
200060a2:	b2db      	uxtb	r3, r3
200060a4:	4619      	mov	r1, r3
200060a6:	6878      	ldr	r0, [r7, #4]
200060a8:	f005 fb98 	bl	2000b7dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
200060ac:	2300      	movs	r3, #0
}
200060ae:	4618      	mov	r0, r3
200060b0:	3720      	adds	r7, #32
200060b2:	46bd      	mov	sp, r7
200060b4:	bd80      	pop	{r7, pc}
200060b6:	bf00      	nop
200060b8:	4f54300a 	.word	0x4f54300a
200060bc:	4f54310a 	.word	0x4f54310a

200060c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
200060c0:	b580      	push	{r7, lr}
200060c2:	b086      	sub	sp, #24
200060c4:	af00      	add	r7, sp, #0
200060c6:	6078      	str	r0, [r7, #4]
200060c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
200060ca:	687b      	ldr	r3, [r7, #4]
200060cc:	681b      	ldr	r3, [r3, #0]
200060ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
200060d0:	697b      	ldr	r3, [r7, #20]
200060d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
200060d4:	697b      	ldr	r3, [r7, #20]
200060d6:	333c      	adds	r3, #60	@ 0x3c
200060d8:	3304      	adds	r3, #4
200060da:	681b      	ldr	r3, [r3, #0]
200060dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
200060de:	683b      	ldr	r3, [r7, #0]
200060e0:	015a      	lsls	r2, r3, #5
200060e2:	693b      	ldr	r3, [r7, #16]
200060e4:	4413      	add	r3, r2
200060e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200060ea:	689b      	ldr	r3, [r3, #8]
200060ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200060ee:	68fb      	ldr	r3, [r7, #12]
200060f0:	4a15      	ldr	r2, [pc, #84]	@ (20006148 <PCD_EP_OutSetupPacket_int+0x88>)
200060f2:	4293      	cmp	r3, r2
200060f4:	d90e      	bls.n	20006114 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
200060f6:	68bb      	ldr	r3, [r7, #8]
200060f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
200060fc:	2b00      	cmp	r3, #0
200060fe:	d009      	beq.n	20006114 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20006100:	683b      	ldr	r3, [r7, #0]
20006102:	015a      	lsls	r2, r3, #5
20006104:	693b      	ldr	r3, [r7, #16]
20006106:	4413      	add	r3, r2
20006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000610c:	461a      	mov	r2, r3
2000610e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20006112:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
20006114:	6878      	ldr	r0, [r7, #4]
20006116:	f005 fb4f 	bl	2000b7b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
2000611a:	68fb      	ldr	r3, [r7, #12]
2000611c:	4a0a      	ldr	r2, [pc, #40]	@ (20006148 <PCD_EP_OutSetupPacket_int+0x88>)
2000611e:	4293      	cmp	r3, r2
20006120:	d90c      	bls.n	2000613c <PCD_EP_OutSetupPacket_int+0x7c>
20006122:	687b      	ldr	r3, [r7, #4]
20006124:	799b      	ldrb	r3, [r3, #6]
20006126:	2b01      	cmp	r3, #1
20006128:	d108      	bne.n	2000613c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
2000612a:	687b      	ldr	r3, [r7, #4]
2000612c:	6818      	ldr	r0, [r3, #0]
2000612e:	687b      	ldr	r3, [r7, #4]
20006130:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20006134:	461a      	mov	r2, r3
20006136:	2101      	movs	r1, #1
20006138:	f003 f976 	bl	20009428 <USB_EP0_OutStart>
  }

  return HAL_OK;
2000613c:	2300      	movs	r3, #0
}
2000613e:	4618      	mov	r0, r3
20006140:	3718      	adds	r7, #24
20006142:	46bd      	mov	sp, r7
20006144:	bd80      	pop	{r7, pc}
20006146:	bf00      	nop
20006148:	4f54300a 	.word	0x4f54300a

2000614c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
2000614c:	b480      	push	{r7}
2000614e:	b085      	sub	sp, #20
20006150:	af00      	add	r7, sp, #0
20006152:	6078      	str	r0, [r7, #4]
20006154:	460b      	mov	r3, r1
20006156:	70fb      	strb	r3, [r7, #3]
20006158:	4613      	mov	r3, r2
2000615a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
2000615c:	687b      	ldr	r3, [r7, #4]
2000615e:	681b      	ldr	r3, [r3, #0]
20006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20006162:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
20006164:	78fb      	ldrb	r3, [r7, #3]
20006166:	2b00      	cmp	r3, #0
20006168:	d107      	bne.n	2000617a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
2000616a:	883b      	ldrh	r3, [r7, #0]
2000616c:	0419      	lsls	r1, r3, #16
2000616e:	687b      	ldr	r3, [r7, #4]
20006170:	681b      	ldr	r3, [r3, #0]
20006172:	68ba      	ldr	r2, [r7, #8]
20006174:	430a      	orrs	r2, r1
20006176:	629a      	str	r2, [r3, #40]	@ 0x28
20006178:	e028      	b.n	200061cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
2000617a:	687b      	ldr	r3, [r7, #4]
2000617c:	681b      	ldr	r3, [r3, #0]
2000617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006180:	0c1b      	lsrs	r3, r3, #16
20006182:	68ba      	ldr	r2, [r7, #8]
20006184:	4413      	add	r3, r2
20006186:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20006188:	2300      	movs	r3, #0
2000618a:	73fb      	strb	r3, [r7, #15]
2000618c:	e00d      	b.n	200061aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
2000618e:	687b      	ldr	r3, [r7, #4]
20006190:	681a      	ldr	r2, [r3, #0]
20006192:	7bfb      	ldrb	r3, [r7, #15]
20006194:	3340      	adds	r3, #64	@ 0x40
20006196:	009b      	lsls	r3, r3, #2
20006198:	4413      	add	r3, r2
2000619a:	685b      	ldr	r3, [r3, #4]
2000619c:	0c1b      	lsrs	r3, r3, #16
2000619e:	68ba      	ldr	r2, [r7, #8]
200061a0:	4413      	add	r3, r2
200061a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
200061a4:	7bfb      	ldrb	r3, [r7, #15]
200061a6:	3301      	adds	r3, #1
200061a8:	73fb      	strb	r3, [r7, #15]
200061aa:	7bfa      	ldrb	r2, [r7, #15]
200061ac:	78fb      	ldrb	r3, [r7, #3]
200061ae:	3b01      	subs	r3, #1
200061b0:	429a      	cmp	r2, r3
200061b2:	d3ec      	bcc.n	2000618e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
200061b4:	883b      	ldrh	r3, [r7, #0]
200061b6:	0418      	lsls	r0, r3, #16
200061b8:	687b      	ldr	r3, [r7, #4]
200061ba:	6819      	ldr	r1, [r3, #0]
200061bc:	78fb      	ldrb	r3, [r7, #3]
200061be:	3b01      	subs	r3, #1
200061c0:	68ba      	ldr	r2, [r7, #8]
200061c2:	4302      	orrs	r2, r0
200061c4:	3340      	adds	r3, #64	@ 0x40
200061c6:	009b      	lsls	r3, r3, #2
200061c8:	440b      	add	r3, r1
200061ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
200061cc:	2300      	movs	r3, #0
}
200061ce:	4618      	mov	r0, r3
200061d0:	3714      	adds	r7, #20
200061d2:	46bd      	mov	sp, r7
200061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200061d8:	4770      	bx	lr

200061da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
200061da:	b480      	push	{r7}
200061dc:	b083      	sub	sp, #12
200061de:	af00      	add	r7, sp, #0
200061e0:	6078      	str	r0, [r7, #4]
200061e2:	460b      	mov	r3, r1
200061e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
200061e6:	687b      	ldr	r3, [r7, #4]
200061e8:	681b      	ldr	r3, [r3, #0]
200061ea:	887a      	ldrh	r2, [r7, #2]
200061ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
200061ee:	2300      	movs	r3, #0
}
200061f0:	4618      	mov	r0, r3
200061f2:	370c      	adds	r7, #12
200061f4:	46bd      	mov	sp, r7
200061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200061fa:	4770      	bx	lr

200061fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
200061fc:	b480      	push	{r7}
200061fe:	b085      	sub	sp, #20
20006200:	af00      	add	r7, sp, #0
20006202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20006204:	687b      	ldr	r3, [r7, #4]
20006206:	681b      	ldr	r3, [r3, #0]
20006208:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
2000620a:	687b      	ldr	r3, [r7, #4]
2000620c:	2201      	movs	r2, #1
2000620e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
20006212:	687b      	ldr	r3, [r7, #4]
20006214:	2200      	movs	r2, #0
20006216:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
2000621a:	68fb      	ldr	r3, [r7, #12]
2000621c:	699b      	ldr	r3, [r3, #24]
2000621e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
20006222:	68fb      	ldr	r3, [r7, #12]
20006224:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
20006226:	68fb      	ldr	r3, [r7, #12]
20006228:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
2000622a:	4b05      	ldr	r3, [pc, #20]	@ (20006240 <HAL_PCDEx_ActivateLPM+0x44>)
2000622c:	4313      	orrs	r3, r2
2000622e:	68fa      	ldr	r2, [r7, #12]
20006230:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
20006232:	2300      	movs	r3, #0
}
20006234:	4618      	mov	r0, r3
20006236:	3714      	adds	r7, #20
20006238:	46bd      	mov	sp, r7
2000623a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000623e:	4770      	bx	lr
20006240:	10000003 	.word	0x10000003

20006244 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20006244:	b480      	push	{r7}
20006246:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
20006248:	4b05      	ldr	r3, [pc, #20]	@ (20006260 <HAL_PWR_EnableBkUpAccess+0x1c>)
2000624a:	681b      	ldr	r3, [r3, #0]
2000624c:	4a04      	ldr	r2, [pc, #16]	@ (20006260 <HAL_PWR_EnableBkUpAccess+0x1c>)
2000624e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20006252:	6013      	str	r3, [r2, #0]
}
20006254:	bf00      	nop
20006256:	46bd      	mov	sp, r7
20006258:	f85d 7b04 	ldr.w	r7, [sp], #4
2000625c:	4770      	bx	lr
2000625e:	bf00      	nop
20006260:	40007000 	.word	0x40007000

20006264 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20006264:	b580      	push	{r7, lr}
20006266:	b082      	sub	sp, #8
20006268:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
2000626a:	2300      	movs	r3, #0
2000626c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
2000626e:	4b23      	ldr	r3, [pc, #140]	@ (200062fc <HAL_PWREx_EnableOverDrive+0x98>)
20006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006272:	4a22      	ldr	r2, [pc, #136]	@ (200062fc <HAL_PWREx_EnableOverDrive+0x98>)
20006274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006278:	6413      	str	r3, [r2, #64]	@ 0x40
2000627a:	4b20      	ldr	r3, [pc, #128]	@ (200062fc <HAL_PWREx_EnableOverDrive+0x98>)
2000627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000627e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20006282:	603b      	str	r3, [r7, #0]
20006284:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20006286:	4b1e      	ldr	r3, [pc, #120]	@ (20006300 <HAL_PWREx_EnableOverDrive+0x9c>)
20006288:	681b      	ldr	r3, [r3, #0]
2000628a:	4a1d      	ldr	r2, [pc, #116]	@ (20006300 <HAL_PWREx_EnableOverDrive+0x9c>)
2000628c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006290:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20006292:	f7fd fedd 	bl	20004050 <HAL_GetTick>
20006296:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20006298:	e009      	b.n	200062ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000629a:	f7fd fed9 	bl	20004050 <HAL_GetTick>
2000629e:	4602      	mov	r2, r0
200062a0:	687b      	ldr	r3, [r7, #4]
200062a2:	1ad3      	subs	r3, r2, r3
200062a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
200062a8:	d901      	bls.n	200062ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
200062aa:	2303      	movs	r3, #3
200062ac:	e022      	b.n	200062f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200062ae:	4b14      	ldr	r3, [pc, #80]	@ (20006300 <HAL_PWREx_EnableOverDrive+0x9c>)
200062b0:	685b      	ldr	r3, [r3, #4]
200062b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200062b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200062ba:	d1ee      	bne.n	2000629a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
200062bc:	4b10      	ldr	r3, [pc, #64]	@ (20006300 <HAL_PWREx_EnableOverDrive+0x9c>)
200062be:	681b      	ldr	r3, [r3, #0]
200062c0:	4a0f      	ldr	r2, [pc, #60]	@ (20006300 <HAL_PWREx_EnableOverDrive+0x9c>)
200062c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
200062c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200062c8:	f7fd fec2 	bl	20004050 <HAL_GetTick>
200062cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
200062ce:	e009      	b.n	200062e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
200062d0:	f7fd febe 	bl	20004050 <HAL_GetTick>
200062d4:	4602      	mov	r2, r0
200062d6:	687b      	ldr	r3, [r7, #4]
200062d8:	1ad3      	subs	r3, r2, r3
200062da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
200062de:	d901      	bls.n	200062e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
200062e0:	2303      	movs	r3, #3
200062e2:	e007      	b.n	200062f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
200062e4:	4b06      	ldr	r3, [pc, #24]	@ (20006300 <HAL_PWREx_EnableOverDrive+0x9c>)
200062e6:	685b      	ldr	r3, [r3, #4]
200062e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200062ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
200062f0:	d1ee      	bne.n	200062d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
200062f2:	2300      	movs	r3, #0
}
200062f4:	4618      	mov	r0, r3
200062f6:	3708      	adds	r7, #8
200062f8:	46bd      	mov	sp, r7
200062fa:	bd80      	pop	{r7, pc}
200062fc:	40023800 	.word	0x40023800
20006300:	40007000 	.word	0x40007000

20006304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20006304:	b580      	push	{r7, lr}
20006306:	b086      	sub	sp, #24
20006308:	af00      	add	r7, sp, #0
2000630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
2000630c:	2300      	movs	r3, #0
2000630e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20006310:	687b      	ldr	r3, [r7, #4]
20006312:	2b00      	cmp	r3, #0
20006314:	d101      	bne.n	2000631a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
20006316:	2301      	movs	r3, #1
20006318:	e291      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000631a:	687b      	ldr	r3, [r7, #4]
2000631c:	681b      	ldr	r3, [r3, #0]
2000631e:	f003 0301 	and.w	r3, r3, #1
20006322:	2b00      	cmp	r3, #0
20006324:	f000 8087 	beq.w	20006436 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
20006328:	4b96      	ldr	r3, [pc, #600]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
2000632a:	689b      	ldr	r3, [r3, #8]
2000632c:	f003 030c 	and.w	r3, r3, #12
20006330:	2b04      	cmp	r3, #4
20006332:	d00c      	beq.n	2000634e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20006334:	4b93      	ldr	r3, [pc, #588]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006336:	689b      	ldr	r3, [r3, #8]
20006338:	f003 030c 	and.w	r3, r3, #12
2000633c:	2b08      	cmp	r3, #8
2000633e:	d112      	bne.n	20006366 <HAL_RCC_OscConfig+0x62>
20006340:	4b90      	ldr	r3, [pc, #576]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006342:	685b      	ldr	r3, [r3, #4]
20006344:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20006348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
2000634c:	d10b      	bne.n	20006366 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000634e:	4b8d      	ldr	r3, [pc, #564]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006350:	681b      	ldr	r3, [r3, #0]
20006352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20006356:	2b00      	cmp	r3, #0
20006358:	d06c      	beq.n	20006434 <HAL_RCC_OscConfig+0x130>
2000635a:	687b      	ldr	r3, [r7, #4]
2000635c:	685b      	ldr	r3, [r3, #4]
2000635e:	2b00      	cmp	r3, #0
20006360:	d168      	bne.n	20006434 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
20006362:	2301      	movs	r3, #1
20006364:	e26b      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20006366:	687b      	ldr	r3, [r7, #4]
20006368:	685b      	ldr	r3, [r3, #4]
2000636a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2000636e:	d106      	bne.n	2000637e <HAL_RCC_OscConfig+0x7a>
20006370:	4b84      	ldr	r3, [pc, #528]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006372:	681b      	ldr	r3, [r3, #0]
20006374:	4a83      	ldr	r2, [pc, #524]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000637a:	6013      	str	r3, [r2, #0]
2000637c:	e02e      	b.n	200063dc <HAL_RCC_OscConfig+0xd8>
2000637e:	687b      	ldr	r3, [r7, #4]
20006380:	685b      	ldr	r3, [r3, #4]
20006382:	2b00      	cmp	r3, #0
20006384:	d10c      	bne.n	200063a0 <HAL_RCC_OscConfig+0x9c>
20006386:	4b7f      	ldr	r3, [pc, #508]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006388:	681b      	ldr	r3, [r3, #0]
2000638a:	4a7e      	ldr	r2, [pc, #504]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
2000638c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20006390:	6013      	str	r3, [r2, #0]
20006392:	4b7c      	ldr	r3, [pc, #496]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006394:	681b      	ldr	r3, [r3, #0]
20006396:	4a7b      	ldr	r2, [pc, #492]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006398:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2000639c:	6013      	str	r3, [r2, #0]
2000639e:	e01d      	b.n	200063dc <HAL_RCC_OscConfig+0xd8>
200063a0:	687b      	ldr	r3, [r7, #4]
200063a2:	685b      	ldr	r3, [r3, #4]
200063a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
200063a8:	d10c      	bne.n	200063c4 <HAL_RCC_OscConfig+0xc0>
200063aa:	4b76      	ldr	r3, [pc, #472]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063ac:	681b      	ldr	r3, [r3, #0]
200063ae:	4a75      	ldr	r2, [pc, #468]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200063b4:	6013      	str	r3, [r2, #0]
200063b6:	4b73      	ldr	r3, [pc, #460]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063b8:	681b      	ldr	r3, [r3, #0]
200063ba:	4a72      	ldr	r2, [pc, #456]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200063c0:	6013      	str	r3, [r2, #0]
200063c2:	e00b      	b.n	200063dc <HAL_RCC_OscConfig+0xd8>
200063c4:	4b6f      	ldr	r3, [pc, #444]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063c6:	681b      	ldr	r3, [r3, #0]
200063c8:	4a6e      	ldr	r2, [pc, #440]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200063ce:	6013      	str	r3, [r2, #0]
200063d0:	4b6c      	ldr	r3, [pc, #432]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063d2:	681b      	ldr	r3, [r3, #0]
200063d4:	4a6b      	ldr	r2, [pc, #428]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200063d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
200063da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
200063dc:	687b      	ldr	r3, [r7, #4]
200063de:	685b      	ldr	r3, [r3, #4]
200063e0:	2b00      	cmp	r3, #0
200063e2:	d013      	beq.n	2000640c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200063e4:	f7fd fe34 	bl	20004050 <HAL_GetTick>
200063e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200063ea:	e008      	b.n	200063fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
200063ec:	f7fd fe30 	bl	20004050 <HAL_GetTick>
200063f0:	4602      	mov	r2, r0
200063f2:	693b      	ldr	r3, [r7, #16]
200063f4:	1ad3      	subs	r3, r2, r3
200063f6:	2b64      	cmp	r3, #100	@ 0x64
200063f8:	d901      	bls.n	200063fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
200063fa:	2303      	movs	r3, #3
200063fc:	e21f      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200063fe:	4b61      	ldr	r3, [pc, #388]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006400:	681b      	ldr	r3, [r3, #0]
20006402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20006406:	2b00      	cmp	r3, #0
20006408:	d0f0      	beq.n	200063ec <HAL_RCC_OscConfig+0xe8>
2000640a:	e014      	b.n	20006436 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000640c:	f7fd fe20 	bl	20004050 <HAL_GetTick>
20006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20006412:	e008      	b.n	20006426 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20006414:	f7fd fe1c 	bl	20004050 <HAL_GetTick>
20006418:	4602      	mov	r2, r0
2000641a:	693b      	ldr	r3, [r7, #16]
2000641c:	1ad3      	subs	r3, r2, r3
2000641e:	2b64      	cmp	r3, #100	@ 0x64
20006420:	d901      	bls.n	20006426 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
20006422:	2303      	movs	r3, #3
20006424:	e20b      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20006426:	4b57      	ldr	r3, [pc, #348]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006428:	681b      	ldr	r3, [r3, #0]
2000642a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2000642e:	2b00      	cmp	r3, #0
20006430:	d1f0      	bne.n	20006414 <HAL_RCC_OscConfig+0x110>
20006432:	e000      	b.n	20006436 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20006434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20006436:	687b      	ldr	r3, [r7, #4]
20006438:	681b      	ldr	r3, [r3, #0]
2000643a:	f003 0302 	and.w	r3, r3, #2
2000643e:	2b00      	cmp	r3, #0
20006440:	d069      	beq.n	20006516 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
20006442:	4b50      	ldr	r3, [pc, #320]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006444:	689b      	ldr	r3, [r3, #8]
20006446:	f003 030c 	and.w	r3, r3, #12
2000644a:	2b00      	cmp	r3, #0
2000644c:	d00b      	beq.n	20006466 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000644e:	4b4d      	ldr	r3, [pc, #308]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006450:	689b      	ldr	r3, [r3, #8]
20006452:	f003 030c 	and.w	r3, r3, #12
20006456:	2b08      	cmp	r3, #8
20006458:	d11c      	bne.n	20006494 <HAL_RCC_OscConfig+0x190>
2000645a:	4b4a      	ldr	r3, [pc, #296]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
2000645c:	685b      	ldr	r3, [r3, #4]
2000645e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20006462:	2b00      	cmp	r3, #0
20006464:	d116      	bne.n	20006494 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20006466:	4b47      	ldr	r3, [pc, #284]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006468:	681b      	ldr	r3, [r3, #0]
2000646a:	f003 0302 	and.w	r3, r3, #2
2000646e:	2b00      	cmp	r3, #0
20006470:	d005      	beq.n	2000647e <HAL_RCC_OscConfig+0x17a>
20006472:	687b      	ldr	r3, [r7, #4]
20006474:	68db      	ldr	r3, [r3, #12]
20006476:	2b01      	cmp	r3, #1
20006478:	d001      	beq.n	2000647e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
2000647a:	2301      	movs	r3, #1
2000647c:	e1df      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000647e:	4b41      	ldr	r3, [pc, #260]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006480:	681b      	ldr	r3, [r3, #0]
20006482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20006486:	687b      	ldr	r3, [r7, #4]
20006488:	691b      	ldr	r3, [r3, #16]
2000648a:	00db      	lsls	r3, r3, #3
2000648c:	493d      	ldr	r1, [pc, #244]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
2000648e:	4313      	orrs	r3, r2
20006490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20006492:	e040      	b.n	20006516 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
20006494:	687b      	ldr	r3, [r7, #4]
20006496:	68db      	ldr	r3, [r3, #12]
20006498:	2b00      	cmp	r3, #0
2000649a:	d023      	beq.n	200064e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000649c:	4b39      	ldr	r3, [pc, #228]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
2000649e:	681b      	ldr	r3, [r3, #0]
200064a0:	4a38      	ldr	r2, [pc, #224]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200064a2:	f043 0301 	orr.w	r3, r3, #1
200064a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200064a8:	f7fd fdd2 	bl	20004050 <HAL_GetTick>
200064ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200064ae:	e008      	b.n	200064c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200064b0:	f7fd fdce 	bl	20004050 <HAL_GetTick>
200064b4:	4602      	mov	r2, r0
200064b6:	693b      	ldr	r3, [r7, #16]
200064b8:	1ad3      	subs	r3, r2, r3
200064ba:	2b02      	cmp	r3, #2
200064bc:	d901      	bls.n	200064c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
200064be:	2303      	movs	r3, #3
200064c0:	e1bd      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200064c2:	4b30      	ldr	r3, [pc, #192]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200064c4:	681b      	ldr	r3, [r3, #0]
200064c6:	f003 0302 	and.w	r3, r3, #2
200064ca:	2b00      	cmp	r3, #0
200064cc:	d0f0      	beq.n	200064b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200064ce:	4b2d      	ldr	r3, [pc, #180]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200064d0:	681b      	ldr	r3, [r3, #0]
200064d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
200064d6:	687b      	ldr	r3, [r7, #4]
200064d8:	691b      	ldr	r3, [r3, #16]
200064da:	00db      	lsls	r3, r3, #3
200064dc:	4929      	ldr	r1, [pc, #164]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200064de:	4313      	orrs	r3, r2
200064e0:	600b      	str	r3, [r1, #0]
200064e2:	e018      	b.n	20006516 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
200064e4:	4b27      	ldr	r3, [pc, #156]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200064e6:	681b      	ldr	r3, [r3, #0]
200064e8:	4a26      	ldr	r2, [pc, #152]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
200064ea:	f023 0301 	bic.w	r3, r3, #1
200064ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200064f0:	f7fd fdae 	bl	20004050 <HAL_GetTick>
200064f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200064f6:	e008      	b.n	2000650a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200064f8:	f7fd fdaa 	bl	20004050 <HAL_GetTick>
200064fc:	4602      	mov	r2, r0
200064fe:	693b      	ldr	r3, [r7, #16]
20006500:	1ad3      	subs	r3, r2, r3
20006502:	2b02      	cmp	r3, #2
20006504:	d901      	bls.n	2000650a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
20006506:	2303      	movs	r3, #3
20006508:	e199      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000650a:	4b1e      	ldr	r3, [pc, #120]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
2000650c:	681b      	ldr	r3, [r3, #0]
2000650e:	f003 0302 	and.w	r3, r3, #2
20006512:	2b00      	cmp	r3, #0
20006514:	d1f0      	bne.n	200064f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20006516:	687b      	ldr	r3, [r7, #4]
20006518:	681b      	ldr	r3, [r3, #0]
2000651a:	f003 0308 	and.w	r3, r3, #8
2000651e:	2b00      	cmp	r3, #0
20006520:	d038      	beq.n	20006594 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
20006522:	687b      	ldr	r3, [r7, #4]
20006524:	695b      	ldr	r3, [r3, #20]
20006526:	2b00      	cmp	r3, #0
20006528:	d019      	beq.n	2000655e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000652a:	4b16      	ldr	r3, [pc, #88]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
2000652c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2000652e:	4a15      	ldr	r2, [pc, #84]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006530:	f043 0301 	orr.w	r3, r3, #1
20006534:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006536:	f7fd fd8b 	bl	20004050 <HAL_GetTick>
2000653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000653c:	e008      	b.n	20006550 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2000653e:	f7fd fd87 	bl	20004050 <HAL_GetTick>
20006542:	4602      	mov	r2, r0
20006544:	693b      	ldr	r3, [r7, #16]
20006546:	1ad3      	subs	r3, r2, r3
20006548:	2b02      	cmp	r3, #2
2000654a:	d901      	bls.n	20006550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
2000654c:	2303      	movs	r3, #3
2000654e:	e176      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20006550:	4b0c      	ldr	r3, [pc, #48]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20006554:	f003 0302 	and.w	r3, r3, #2
20006558:	2b00      	cmp	r3, #0
2000655a:	d0f0      	beq.n	2000653e <HAL_RCC_OscConfig+0x23a>
2000655c:	e01a      	b.n	20006594 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000655e:	4b09      	ldr	r3, [pc, #36]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20006562:	4a08      	ldr	r2, [pc, #32]	@ (20006584 <HAL_RCC_OscConfig+0x280>)
20006564:	f023 0301 	bic.w	r3, r3, #1
20006568:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000656a:	f7fd fd71 	bl	20004050 <HAL_GetTick>
2000656e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20006570:	e00a      	b.n	20006588 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20006572:	f7fd fd6d 	bl	20004050 <HAL_GetTick>
20006576:	4602      	mov	r2, r0
20006578:	693b      	ldr	r3, [r7, #16]
2000657a:	1ad3      	subs	r3, r2, r3
2000657c:	2b02      	cmp	r3, #2
2000657e:	d903      	bls.n	20006588 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
20006580:	2303      	movs	r3, #3
20006582:	e15c      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
20006584:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20006588:	4b91      	ldr	r3, [pc, #580]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000658a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2000658c:	f003 0302 	and.w	r3, r3, #2
20006590:	2b00      	cmp	r3, #0
20006592:	d1ee      	bne.n	20006572 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20006594:	687b      	ldr	r3, [r7, #4]
20006596:	681b      	ldr	r3, [r3, #0]
20006598:	f003 0304 	and.w	r3, r3, #4
2000659c:	2b00      	cmp	r3, #0
2000659e:	f000 80a4 	beq.w	200066ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
200065a2:	4b8b      	ldr	r3, [pc, #556]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200065a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200065aa:	2b00      	cmp	r3, #0
200065ac:	d10d      	bne.n	200065ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
200065ae:	4b88      	ldr	r3, [pc, #544]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200065b2:	4a87      	ldr	r2, [pc, #540]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200065b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200065b8:	6413      	str	r3, [r2, #64]	@ 0x40
200065ba:	4b85      	ldr	r3, [pc, #532]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200065be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200065c2:	60bb      	str	r3, [r7, #8]
200065c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
200065c6:	2301      	movs	r3, #1
200065c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
200065ca:	4b82      	ldr	r3, [pc, #520]	@ (200067d4 <HAL_RCC_OscConfig+0x4d0>)
200065cc:	681b      	ldr	r3, [r3, #0]
200065ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200065d2:	2b00      	cmp	r3, #0
200065d4:	d118      	bne.n	20006608 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
200065d6:	4b7f      	ldr	r3, [pc, #508]	@ (200067d4 <HAL_RCC_OscConfig+0x4d0>)
200065d8:	681b      	ldr	r3, [r3, #0]
200065da:	4a7e      	ldr	r2, [pc, #504]	@ (200067d4 <HAL_RCC_OscConfig+0x4d0>)
200065dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200065e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
200065e2:	f7fd fd35 	bl	20004050 <HAL_GetTick>
200065e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
200065e8:	e008      	b.n	200065fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
200065ea:	f7fd fd31 	bl	20004050 <HAL_GetTick>
200065ee:	4602      	mov	r2, r0
200065f0:	693b      	ldr	r3, [r7, #16]
200065f2:	1ad3      	subs	r3, r2, r3
200065f4:	2b64      	cmp	r3, #100	@ 0x64
200065f6:	d901      	bls.n	200065fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
200065f8:	2303      	movs	r3, #3
200065fa:	e120      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
200065fc:	4b75      	ldr	r3, [pc, #468]	@ (200067d4 <HAL_RCC_OscConfig+0x4d0>)
200065fe:	681b      	ldr	r3, [r3, #0]
20006600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20006604:	2b00      	cmp	r3, #0
20006606:	d0f0      	beq.n	200065ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20006608:	687b      	ldr	r3, [r7, #4]
2000660a:	689b      	ldr	r3, [r3, #8]
2000660c:	2b01      	cmp	r3, #1
2000660e:	d106      	bne.n	2000661e <HAL_RCC_OscConfig+0x31a>
20006610:	4b6f      	ldr	r3, [pc, #444]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006614:	4a6e      	ldr	r2, [pc, #440]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006616:	f043 0301 	orr.w	r3, r3, #1
2000661a:	6713      	str	r3, [r2, #112]	@ 0x70
2000661c:	e02d      	b.n	2000667a <HAL_RCC_OscConfig+0x376>
2000661e:	687b      	ldr	r3, [r7, #4]
20006620:	689b      	ldr	r3, [r3, #8]
20006622:	2b00      	cmp	r3, #0
20006624:	d10c      	bne.n	20006640 <HAL_RCC_OscConfig+0x33c>
20006626:	4b6a      	ldr	r3, [pc, #424]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000662a:	4a69      	ldr	r2, [pc, #420]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000662c:	f023 0301 	bic.w	r3, r3, #1
20006630:	6713      	str	r3, [r2, #112]	@ 0x70
20006632:	4b67      	ldr	r3, [pc, #412]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006636:	4a66      	ldr	r2, [pc, #408]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006638:	f023 0304 	bic.w	r3, r3, #4
2000663c:	6713      	str	r3, [r2, #112]	@ 0x70
2000663e:	e01c      	b.n	2000667a <HAL_RCC_OscConfig+0x376>
20006640:	687b      	ldr	r3, [r7, #4]
20006642:	689b      	ldr	r3, [r3, #8]
20006644:	2b05      	cmp	r3, #5
20006646:	d10c      	bne.n	20006662 <HAL_RCC_OscConfig+0x35e>
20006648:	4b61      	ldr	r3, [pc, #388]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000664a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000664c:	4a60      	ldr	r2, [pc, #384]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000664e:	f043 0304 	orr.w	r3, r3, #4
20006652:	6713      	str	r3, [r2, #112]	@ 0x70
20006654:	4b5e      	ldr	r3, [pc, #376]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006658:	4a5d      	ldr	r2, [pc, #372]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000665a:	f043 0301 	orr.w	r3, r3, #1
2000665e:	6713      	str	r3, [r2, #112]	@ 0x70
20006660:	e00b      	b.n	2000667a <HAL_RCC_OscConfig+0x376>
20006662:	4b5b      	ldr	r3, [pc, #364]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006666:	4a5a      	ldr	r2, [pc, #360]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006668:	f023 0301 	bic.w	r3, r3, #1
2000666c:	6713      	str	r3, [r2, #112]	@ 0x70
2000666e:	4b58      	ldr	r3, [pc, #352]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006672:	4a57      	ldr	r2, [pc, #348]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006674:	f023 0304 	bic.w	r3, r3, #4
20006678:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000667a:	687b      	ldr	r3, [r7, #4]
2000667c:	689b      	ldr	r3, [r3, #8]
2000667e:	2b00      	cmp	r3, #0
20006680:	d015      	beq.n	200066ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006682:	f7fd fce5 	bl	20004050 <HAL_GetTick>
20006686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006688:	e00a      	b.n	200066a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2000668a:	f7fd fce1 	bl	20004050 <HAL_GetTick>
2000668e:	4602      	mov	r2, r0
20006690:	693b      	ldr	r3, [r7, #16]
20006692:	1ad3      	subs	r3, r2, r3
20006694:	f241 3288 	movw	r2, #5000	@ 0x1388
20006698:	4293      	cmp	r3, r2
2000669a:	d901      	bls.n	200066a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
2000669c:	2303      	movs	r3, #3
2000669e:	e0ce      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200066a0:	4b4b      	ldr	r3, [pc, #300]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200066a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200066a4:	f003 0302 	and.w	r3, r3, #2
200066a8:	2b00      	cmp	r3, #0
200066aa:	d0ee      	beq.n	2000668a <HAL_RCC_OscConfig+0x386>
200066ac:	e014      	b.n	200066d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200066ae:	f7fd fccf 	bl	20004050 <HAL_GetTick>
200066b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200066b4:	e00a      	b.n	200066cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200066b6:	f7fd fccb 	bl	20004050 <HAL_GetTick>
200066ba:	4602      	mov	r2, r0
200066bc:	693b      	ldr	r3, [r7, #16]
200066be:	1ad3      	subs	r3, r2, r3
200066c0:	f241 3288 	movw	r2, #5000	@ 0x1388
200066c4:	4293      	cmp	r3, r2
200066c6:	d901      	bls.n	200066cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
200066c8:	2303      	movs	r3, #3
200066ca:	e0b8      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200066cc:	4b40      	ldr	r3, [pc, #256]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200066ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200066d0:	f003 0302 	and.w	r3, r3, #2
200066d4:	2b00      	cmp	r3, #0
200066d6:	d1ee      	bne.n	200066b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
200066d8:	7dfb      	ldrb	r3, [r7, #23]
200066da:	2b01      	cmp	r3, #1
200066dc:	d105      	bne.n	200066ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
200066de:	4b3c      	ldr	r3, [pc, #240]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200066e2:	4a3b      	ldr	r2, [pc, #236]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200066e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
200066e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
200066ea:	687b      	ldr	r3, [r7, #4]
200066ec:	699b      	ldr	r3, [r3, #24]
200066ee:	2b00      	cmp	r3, #0
200066f0:	f000 80a4 	beq.w	2000683c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
200066f4:	4b36      	ldr	r3, [pc, #216]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200066f6:	689b      	ldr	r3, [r3, #8]
200066f8:	f003 030c 	and.w	r3, r3, #12
200066fc:	2b08      	cmp	r3, #8
200066fe:	d06b      	beq.n	200067d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20006700:	687b      	ldr	r3, [r7, #4]
20006702:	699b      	ldr	r3, [r3, #24]
20006704:	2b02      	cmp	r3, #2
20006706:	d149      	bne.n	2000679c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20006708:	4b31      	ldr	r3, [pc, #196]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000670a:	681b      	ldr	r3, [r3, #0]
2000670c:	4a30      	ldr	r2, [pc, #192]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000670e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20006712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006714:	f7fd fc9c 	bl	20004050 <HAL_GetTick>
20006718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000671a:	e008      	b.n	2000672e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2000671c:	f7fd fc98 	bl	20004050 <HAL_GetTick>
20006720:	4602      	mov	r2, r0
20006722:	693b      	ldr	r3, [r7, #16]
20006724:	1ad3      	subs	r3, r2, r3
20006726:	2b02      	cmp	r3, #2
20006728:	d901      	bls.n	2000672e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
2000672a:	2303      	movs	r3, #3
2000672c:	e087      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000672e:	4b28      	ldr	r3, [pc, #160]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006730:	681b      	ldr	r3, [r3, #0]
20006732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006736:	2b00      	cmp	r3, #0
20006738:	d1f0      	bne.n	2000671c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2000673a:	687b      	ldr	r3, [r7, #4]
2000673c:	69da      	ldr	r2, [r3, #28]
2000673e:	687b      	ldr	r3, [r7, #4]
20006740:	6a1b      	ldr	r3, [r3, #32]
20006742:	431a      	orrs	r2, r3
20006744:	687b      	ldr	r3, [r7, #4]
20006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20006748:	019b      	lsls	r3, r3, #6
2000674a:	431a      	orrs	r2, r3
2000674c:	687b      	ldr	r3, [r7, #4]
2000674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006750:	085b      	lsrs	r3, r3, #1
20006752:	3b01      	subs	r3, #1
20006754:	041b      	lsls	r3, r3, #16
20006756:	431a      	orrs	r2, r3
20006758:	687b      	ldr	r3, [r7, #4]
2000675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000675c:	061b      	lsls	r3, r3, #24
2000675e:	4313      	orrs	r3, r2
20006760:	4a1b      	ldr	r2, [pc, #108]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006762:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20006766:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20006768:	4b19      	ldr	r3, [pc, #100]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000676a:	681b      	ldr	r3, [r3, #0]
2000676c:	4a18      	ldr	r2, [pc, #96]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000676e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20006772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006774:	f7fd fc6c 	bl	20004050 <HAL_GetTick>
20006778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000677a:	e008      	b.n	2000678e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2000677c:	f7fd fc68 	bl	20004050 <HAL_GetTick>
20006780:	4602      	mov	r2, r0
20006782:	693b      	ldr	r3, [r7, #16]
20006784:	1ad3      	subs	r3, r2, r3
20006786:	2b02      	cmp	r3, #2
20006788:	d901      	bls.n	2000678e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
2000678a:	2303      	movs	r3, #3
2000678c:	e057      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000678e:	4b10      	ldr	r3, [pc, #64]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
20006790:	681b      	ldr	r3, [r3, #0]
20006792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006796:	2b00      	cmp	r3, #0
20006798:	d0f0      	beq.n	2000677c <HAL_RCC_OscConfig+0x478>
2000679a:	e04f      	b.n	2000683c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000679c:	4b0c      	ldr	r3, [pc, #48]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
2000679e:	681b      	ldr	r3, [r3, #0]
200067a0:	4a0b      	ldr	r2, [pc, #44]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200067a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
200067a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200067a8:	f7fd fc52 	bl	20004050 <HAL_GetTick>
200067ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200067ae:	e008      	b.n	200067c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200067b0:	f7fd fc4e 	bl	20004050 <HAL_GetTick>
200067b4:	4602      	mov	r2, r0
200067b6:	693b      	ldr	r3, [r7, #16]
200067b8:	1ad3      	subs	r3, r2, r3
200067ba:	2b02      	cmp	r3, #2
200067bc:	d901      	bls.n	200067c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
200067be:	2303      	movs	r3, #3
200067c0:	e03d      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200067c2:	4b03      	ldr	r3, [pc, #12]	@ (200067d0 <HAL_RCC_OscConfig+0x4cc>)
200067c4:	681b      	ldr	r3, [r3, #0]
200067c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200067ca:	2b00      	cmp	r3, #0
200067cc:	d1f0      	bne.n	200067b0 <HAL_RCC_OscConfig+0x4ac>
200067ce:	e035      	b.n	2000683c <HAL_RCC_OscConfig+0x538>
200067d0:	40023800 	.word	0x40023800
200067d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
200067d8:	4b1b      	ldr	r3, [pc, #108]	@ (20006848 <HAL_RCC_OscConfig+0x544>)
200067da:	685b      	ldr	r3, [r3, #4]
200067dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200067de:	687b      	ldr	r3, [r7, #4]
200067e0:	699b      	ldr	r3, [r3, #24]
200067e2:	2b01      	cmp	r3, #1
200067e4:	d028      	beq.n	20006838 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200067e6:	68fb      	ldr	r3, [r7, #12]
200067e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
200067ec:	687b      	ldr	r3, [r7, #4]
200067ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200067f0:	429a      	cmp	r2, r3
200067f2:	d121      	bne.n	20006838 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
200067f4:	68fb      	ldr	r3, [r7, #12]
200067f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
200067fa:	687b      	ldr	r3, [r7, #4]
200067fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200067fe:	429a      	cmp	r2, r3
20006800:	d11a      	bne.n	20006838 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20006802:	68fa      	ldr	r2, [r7, #12]
20006804:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
20006808:	4013      	ands	r3, r2
2000680a:	687a      	ldr	r2, [r7, #4]
2000680c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
2000680e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20006810:	4293      	cmp	r3, r2
20006812:	d111      	bne.n	20006838 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20006814:	68fb      	ldr	r3, [r7, #12]
20006816:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
2000681a:	687b      	ldr	r3, [r7, #4]
2000681c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000681e:	085b      	lsrs	r3, r3, #1
20006820:	3b01      	subs	r3, #1
20006822:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20006824:	429a      	cmp	r2, r3
20006826:	d107      	bne.n	20006838 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20006828:	68fb      	ldr	r3, [r7, #12]
2000682a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
2000682e:	687b      	ldr	r3, [r7, #4]
20006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006832:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20006834:	429a      	cmp	r2, r3
20006836:	d001      	beq.n	2000683c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
20006838:	2301      	movs	r3, #1
2000683a:	e000      	b.n	2000683e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
2000683c:	2300      	movs	r3, #0
}
2000683e:	4618      	mov	r0, r3
20006840:	3718      	adds	r7, #24
20006842:	46bd      	mov	sp, r7
20006844:	bd80      	pop	{r7, pc}
20006846:	bf00      	nop
20006848:	40023800 	.word	0x40023800

2000684c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000684c:	b580      	push	{r7, lr}
2000684e:	b084      	sub	sp, #16
20006850:	af00      	add	r7, sp, #0
20006852:	6078      	str	r0, [r7, #4]
20006854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
20006856:	2300      	movs	r3, #0
20006858:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2000685a:	687b      	ldr	r3, [r7, #4]
2000685c:	2b00      	cmp	r3, #0
2000685e:	d101      	bne.n	20006864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
20006860:	2301      	movs	r3, #1
20006862:	e0d0      	b.n	20006a06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
20006864:	4b6a      	ldr	r3, [pc, #424]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
20006866:	681b      	ldr	r3, [r3, #0]
20006868:	f003 030f 	and.w	r3, r3, #15
2000686c:	683a      	ldr	r2, [r7, #0]
2000686e:	429a      	cmp	r2, r3
20006870:	d910      	bls.n	20006894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20006872:	4b67      	ldr	r3, [pc, #412]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
20006874:	681b      	ldr	r3, [r3, #0]
20006876:	f023 020f 	bic.w	r2, r3, #15
2000687a:	4965      	ldr	r1, [pc, #404]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
2000687c:	683b      	ldr	r3, [r7, #0]
2000687e:	4313      	orrs	r3, r2
20006880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20006882:	4b63      	ldr	r3, [pc, #396]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
20006884:	681b      	ldr	r3, [r3, #0]
20006886:	f003 030f 	and.w	r3, r3, #15
2000688a:	683a      	ldr	r2, [r7, #0]
2000688c:	429a      	cmp	r2, r3
2000688e:	d001      	beq.n	20006894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
20006890:	2301      	movs	r3, #1
20006892:	e0b8      	b.n	20006a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20006894:	687b      	ldr	r3, [r7, #4]
20006896:	681b      	ldr	r3, [r3, #0]
20006898:	f003 0302 	and.w	r3, r3, #2
2000689c:	2b00      	cmp	r3, #0
2000689e:	d020      	beq.n	200068e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200068a0:	687b      	ldr	r3, [r7, #4]
200068a2:	681b      	ldr	r3, [r3, #0]
200068a4:	f003 0304 	and.w	r3, r3, #4
200068a8:	2b00      	cmp	r3, #0
200068aa:	d005      	beq.n	200068b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
200068ac:	4b59      	ldr	r3, [pc, #356]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200068ae:	689b      	ldr	r3, [r3, #8]
200068b0:	4a58      	ldr	r2, [pc, #352]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200068b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
200068b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200068b8:	687b      	ldr	r3, [r7, #4]
200068ba:	681b      	ldr	r3, [r3, #0]
200068bc:	f003 0308 	and.w	r3, r3, #8
200068c0:	2b00      	cmp	r3, #0
200068c2:	d005      	beq.n	200068d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
200068c4:	4b53      	ldr	r3, [pc, #332]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200068c6:	689b      	ldr	r3, [r3, #8]
200068c8:	4a52      	ldr	r2, [pc, #328]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200068ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
200068ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
200068d0:	4b50      	ldr	r3, [pc, #320]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200068d2:	689b      	ldr	r3, [r3, #8]
200068d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
200068d8:	687b      	ldr	r3, [r7, #4]
200068da:	689b      	ldr	r3, [r3, #8]
200068dc:	494d      	ldr	r1, [pc, #308]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200068de:	4313      	orrs	r3, r2
200068e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200068e2:	687b      	ldr	r3, [r7, #4]
200068e4:	681b      	ldr	r3, [r3, #0]
200068e6:	f003 0301 	and.w	r3, r3, #1
200068ea:	2b00      	cmp	r3, #0
200068ec:	d040      	beq.n	20006970 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
200068ee:	687b      	ldr	r3, [r7, #4]
200068f0:	685b      	ldr	r3, [r3, #4]
200068f2:	2b01      	cmp	r3, #1
200068f4:	d107      	bne.n	20006906 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200068f6:	4b47      	ldr	r3, [pc, #284]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200068f8:	681b      	ldr	r3, [r3, #0]
200068fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200068fe:	2b00      	cmp	r3, #0
20006900:	d115      	bne.n	2000692e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
20006902:	2301      	movs	r3, #1
20006904:	e07f      	b.n	20006a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
20006906:	687b      	ldr	r3, [r7, #4]
20006908:	685b      	ldr	r3, [r3, #4]
2000690a:	2b02      	cmp	r3, #2
2000690c:	d107      	bne.n	2000691e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000690e:	4b41      	ldr	r3, [pc, #260]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
20006910:	681b      	ldr	r3, [r3, #0]
20006912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006916:	2b00      	cmp	r3, #0
20006918:	d109      	bne.n	2000692e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
2000691a:	2301      	movs	r3, #1
2000691c:	e073      	b.n	20006a06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000691e:	4b3d      	ldr	r3, [pc, #244]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
20006920:	681b      	ldr	r3, [r3, #0]
20006922:	f003 0302 	and.w	r3, r3, #2
20006926:	2b00      	cmp	r3, #0
20006928:	d101      	bne.n	2000692e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
2000692a:	2301      	movs	r3, #1
2000692c:	e06b      	b.n	20006a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000692e:	4b39      	ldr	r3, [pc, #228]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
20006930:	689b      	ldr	r3, [r3, #8]
20006932:	f023 0203 	bic.w	r2, r3, #3
20006936:	687b      	ldr	r3, [r7, #4]
20006938:	685b      	ldr	r3, [r3, #4]
2000693a:	4936      	ldr	r1, [pc, #216]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
2000693c:	4313      	orrs	r3, r2
2000693e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20006940:	f7fd fb86 	bl	20004050 <HAL_GetTick>
20006944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006946:	e00a      	b.n	2000695e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20006948:	f7fd fb82 	bl	20004050 <HAL_GetTick>
2000694c:	4602      	mov	r2, r0
2000694e:	68fb      	ldr	r3, [r7, #12]
20006950:	1ad3      	subs	r3, r2, r3
20006952:	f241 3288 	movw	r2, #5000	@ 0x1388
20006956:	4293      	cmp	r3, r2
20006958:	d901      	bls.n	2000695e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
2000695a:	2303      	movs	r3, #3
2000695c:	e053      	b.n	20006a06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000695e:	4b2d      	ldr	r3, [pc, #180]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
20006960:	689b      	ldr	r3, [r3, #8]
20006962:	f003 020c 	and.w	r2, r3, #12
20006966:	687b      	ldr	r3, [r7, #4]
20006968:	685b      	ldr	r3, [r3, #4]
2000696a:	009b      	lsls	r3, r3, #2
2000696c:	429a      	cmp	r2, r3
2000696e:	d1eb      	bne.n	20006948 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20006970:	4b27      	ldr	r3, [pc, #156]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
20006972:	681b      	ldr	r3, [r3, #0]
20006974:	f003 030f 	and.w	r3, r3, #15
20006978:	683a      	ldr	r2, [r7, #0]
2000697a:	429a      	cmp	r2, r3
2000697c:	d210      	bcs.n	200069a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000697e:	4b24      	ldr	r3, [pc, #144]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
20006980:	681b      	ldr	r3, [r3, #0]
20006982:	f023 020f 	bic.w	r2, r3, #15
20006986:	4922      	ldr	r1, [pc, #136]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
20006988:	683b      	ldr	r3, [r7, #0]
2000698a:	4313      	orrs	r3, r2
2000698c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2000698e:	4b20      	ldr	r3, [pc, #128]	@ (20006a10 <HAL_RCC_ClockConfig+0x1c4>)
20006990:	681b      	ldr	r3, [r3, #0]
20006992:	f003 030f 	and.w	r3, r3, #15
20006996:	683a      	ldr	r2, [r7, #0]
20006998:	429a      	cmp	r2, r3
2000699a:	d001      	beq.n	200069a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
2000699c:	2301      	movs	r3, #1
2000699e:	e032      	b.n	20006a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200069a0:	687b      	ldr	r3, [r7, #4]
200069a2:	681b      	ldr	r3, [r3, #0]
200069a4:	f003 0304 	and.w	r3, r3, #4
200069a8:	2b00      	cmp	r3, #0
200069aa:	d008      	beq.n	200069be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
200069ac:	4b19      	ldr	r3, [pc, #100]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200069ae:	689b      	ldr	r3, [r3, #8]
200069b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
200069b4:	687b      	ldr	r3, [r7, #4]
200069b6:	68db      	ldr	r3, [r3, #12]
200069b8:	4916      	ldr	r1, [pc, #88]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200069ba:	4313      	orrs	r3, r2
200069bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200069be:	687b      	ldr	r3, [r7, #4]
200069c0:	681b      	ldr	r3, [r3, #0]
200069c2:	f003 0308 	and.w	r3, r3, #8
200069c6:	2b00      	cmp	r3, #0
200069c8:	d009      	beq.n	200069de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
200069ca:	4b12      	ldr	r3, [pc, #72]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200069cc:	689b      	ldr	r3, [r3, #8]
200069ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
200069d2:	687b      	ldr	r3, [r7, #4]
200069d4:	691b      	ldr	r3, [r3, #16]
200069d6:	00db      	lsls	r3, r3, #3
200069d8:	490e      	ldr	r1, [pc, #56]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200069da:	4313      	orrs	r3, r2
200069dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
200069de:	f000 f821 	bl	20006a24 <HAL_RCC_GetSysClockFreq>
200069e2:	4602      	mov	r2, r0
200069e4:	4b0b      	ldr	r3, [pc, #44]	@ (20006a14 <HAL_RCC_ClockConfig+0x1c8>)
200069e6:	689b      	ldr	r3, [r3, #8]
200069e8:	091b      	lsrs	r3, r3, #4
200069ea:	f003 030f 	and.w	r3, r3, #15
200069ee:	490a      	ldr	r1, [pc, #40]	@ (20006a18 <HAL_RCC_ClockConfig+0x1cc>)
200069f0:	5ccb      	ldrb	r3, [r1, r3]
200069f2:	fa22 f303 	lsr.w	r3, r2, r3
200069f6:	4a09      	ldr	r2, [pc, #36]	@ (20006a1c <HAL_RCC_ClockConfig+0x1d0>)
200069f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
200069fa:	4b09      	ldr	r3, [pc, #36]	@ (20006a20 <HAL_RCC_ClockConfig+0x1d4>)
200069fc:	681b      	ldr	r3, [r3, #0]
200069fe:	4618      	mov	r0, r3
20006a00:	f7fd fae2 	bl	20003fc8 <HAL_InitTick>

  return HAL_OK;
20006a04:	2300      	movs	r3, #0
}
20006a06:	4618      	mov	r0, r3
20006a08:	3710      	adds	r7, #16
20006a0a:	46bd      	mov	sp, r7
20006a0c:	bd80      	pop	{r7, pc}
20006a0e:	bf00      	nop
20006a10:	40023c00 	.word	0x40023c00
20006a14:	40023800 	.word	0x40023800
20006a18:	2000c0c4 	.word	0x2000c0c4
20006a1c:	2000c0ec 	.word	0x2000c0ec
20006a20:	2000c0f0 	.word	0x2000c0f0

20006a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20006a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20006a28:	b094      	sub	sp, #80	@ 0x50
20006a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
20006a2c:	2300      	movs	r3, #0
20006a2e:	647b      	str	r3, [r7, #68]	@ 0x44
20006a30:	2300      	movs	r3, #0
20006a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
20006a34:	2300      	movs	r3, #0
20006a36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
20006a38:	2300      	movs	r3, #0
20006a3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20006a3c:	4b79      	ldr	r3, [pc, #484]	@ (20006c24 <HAL_RCC_GetSysClockFreq+0x200>)
20006a3e:	689b      	ldr	r3, [r3, #8]
20006a40:	f003 030c 	and.w	r3, r3, #12
20006a44:	2b08      	cmp	r3, #8
20006a46:	d00d      	beq.n	20006a64 <HAL_RCC_GetSysClockFreq+0x40>
20006a48:	2b08      	cmp	r3, #8
20006a4a:	f200 80e1 	bhi.w	20006c10 <HAL_RCC_GetSysClockFreq+0x1ec>
20006a4e:	2b00      	cmp	r3, #0
20006a50:	d002      	beq.n	20006a58 <HAL_RCC_GetSysClockFreq+0x34>
20006a52:	2b04      	cmp	r3, #4
20006a54:	d003      	beq.n	20006a5e <HAL_RCC_GetSysClockFreq+0x3a>
20006a56:	e0db      	b.n	20006c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20006a58:	4b73      	ldr	r3, [pc, #460]	@ (20006c28 <HAL_RCC_GetSysClockFreq+0x204>)
20006a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006a5c:	e0db      	b.n	20006c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20006a5e:	4b73      	ldr	r3, [pc, #460]	@ (20006c2c <HAL_RCC_GetSysClockFreq+0x208>)
20006a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006a62:	e0d8      	b.n	20006c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20006a64:	4b6f      	ldr	r3, [pc, #444]	@ (20006c24 <HAL_RCC_GetSysClockFreq+0x200>)
20006a66:	685b      	ldr	r3, [r3, #4]
20006a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20006a6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
20006a6e:	4b6d      	ldr	r3, [pc, #436]	@ (20006c24 <HAL_RCC_GetSysClockFreq+0x200>)
20006a70:	685b      	ldr	r3, [r3, #4]
20006a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20006a76:	2b00      	cmp	r3, #0
20006a78:	d063      	beq.n	20006b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006a7a:	4b6a      	ldr	r3, [pc, #424]	@ (20006c24 <HAL_RCC_GetSysClockFreq+0x200>)
20006a7c:	685b      	ldr	r3, [r3, #4]
20006a7e:	099b      	lsrs	r3, r3, #6
20006a80:	2200      	movs	r2, #0
20006a82:	63bb      	str	r3, [r7, #56]	@ 0x38
20006a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
20006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20006a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
20006a8c:	633b      	str	r3, [r7, #48]	@ 0x30
20006a8e:	2300      	movs	r3, #0
20006a90:	637b      	str	r3, [r7, #52]	@ 0x34
20006a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
20006a96:	4622      	mov	r2, r4
20006a98:	462b      	mov	r3, r5
20006a9a:	f04f 0000 	mov.w	r0, #0
20006a9e:	f04f 0100 	mov.w	r1, #0
20006aa2:	0159      	lsls	r1, r3, #5
20006aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006aa8:	0150      	lsls	r0, r2, #5
20006aaa:	4602      	mov	r2, r0
20006aac:	460b      	mov	r3, r1
20006aae:	4621      	mov	r1, r4
20006ab0:	1a51      	subs	r1, r2, r1
20006ab2:	6139      	str	r1, [r7, #16]
20006ab4:	4629      	mov	r1, r5
20006ab6:	eb63 0301 	sbc.w	r3, r3, r1
20006aba:	617b      	str	r3, [r7, #20]
20006abc:	f04f 0200 	mov.w	r2, #0
20006ac0:	f04f 0300 	mov.w	r3, #0
20006ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20006ac8:	4659      	mov	r1, fp
20006aca:	018b      	lsls	r3, r1, #6
20006acc:	4651      	mov	r1, sl
20006ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20006ad2:	4651      	mov	r1, sl
20006ad4:	018a      	lsls	r2, r1, #6
20006ad6:	4651      	mov	r1, sl
20006ad8:	ebb2 0801 	subs.w	r8, r2, r1
20006adc:	4659      	mov	r1, fp
20006ade:	eb63 0901 	sbc.w	r9, r3, r1
20006ae2:	f04f 0200 	mov.w	r2, #0
20006ae6:	f04f 0300 	mov.w	r3, #0
20006aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20006aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20006af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20006af6:	4690      	mov	r8, r2
20006af8:	4699      	mov	r9, r3
20006afa:	4623      	mov	r3, r4
20006afc:	eb18 0303 	adds.w	r3, r8, r3
20006b00:	60bb      	str	r3, [r7, #8]
20006b02:	462b      	mov	r3, r5
20006b04:	eb49 0303 	adc.w	r3, r9, r3
20006b08:	60fb      	str	r3, [r7, #12]
20006b0a:	f04f 0200 	mov.w	r2, #0
20006b0e:	f04f 0300 	mov.w	r3, #0
20006b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20006b16:	4629      	mov	r1, r5
20006b18:	024b      	lsls	r3, r1, #9
20006b1a:	4621      	mov	r1, r4
20006b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20006b20:	4621      	mov	r1, r4
20006b22:	024a      	lsls	r2, r1, #9
20006b24:	4610      	mov	r0, r2
20006b26:	4619      	mov	r1, r3
20006b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20006b2a:	2200      	movs	r2, #0
20006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
20006b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
20006b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
20006b34:	f7f9 fb68 	bl	20000208 <__aeabi_uldivmod>
20006b38:	4602      	mov	r2, r0
20006b3a:	460b      	mov	r3, r1
20006b3c:	4613      	mov	r3, r2
20006b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
20006b40:	e058      	b.n	20006bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006b42:	4b38      	ldr	r3, [pc, #224]	@ (20006c24 <HAL_RCC_GetSysClockFreq+0x200>)
20006b44:	685b      	ldr	r3, [r3, #4]
20006b46:	099b      	lsrs	r3, r3, #6
20006b48:	2200      	movs	r2, #0
20006b4a:	4618      	mov	r0, r3
20006b4c:	4611      	mov	r1, r2
20006b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
20006b52:	623b      	str	r3, [r7, #32]
20006b54:	2300      	movs	r3, #0
20006b56:	627b      	str	r3, [r7, #36]	@ 0x24
20006b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20006b5c:	4642      	mov	r2, r8
20006b5e:	464b      	mov	r3, r9
20006b60:	f04f 0000 	mov.w	r0, #0
20006b64:	f04f 0100 	mov.w	r1, #0
20006b68:	0159      	lsls	r1, r3, #5
20006b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006b6e:	0150      	lsls	r0, r2, #5
20006b70:	4602      	mov	r2, r0
20006b72:	460b      	mov	r3, r1
20006b74:	4641      	mov	r1, r8
20006b76:	ebb2 0a01 	subs.w	sl, r2, r1
20006b7a:	4649      	mov	r1, r9
20006b7c:	eb63 0b01 	sbc.w	fp, r3, r1
20006b80:	f04f 0200 	mov.w	r2, #0
20006b84:	f04f 0300 	mov.w	r3, #0
20006b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
20006b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20006b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
20006b94:	ebb2 040a 	subs.w	r4, r2, sl
20006b98:	eb63 050b 	sbc.w	r5, r3, fp
20006b9c:	f04f 0200 	mov.w	r2, #0
20006ba0:	f04f 0300 	mov.w	r3, #0
20006ba4:	00eb      	lsls	r3, r5, #3
20006ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20006baa:	00e2      	lsls	r2, r4, #3
20006bac:	4614      	mov	r4, r2
20006bae:	461d      	mov	r5, r3
20006bb0:	4643      	mov	r3, r8
20006bb2:	18e3      	adds	r3, r4, r3
20006bb4:	603b      	str	r3, [r7, #0]
20006bb6:	464b      	mov	r3, r9
20006bb8:	eb45 0303 	adc.w	r3, r5, r3
20006bbc:	607b      	str	r3, [r7, #4]
20006bbe:	f04f 0200 	mov.w	r2, #0
20006bc2:	f04f 0300 	mov.w	r3, #0
20006bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
20006bca:	4629      	mov	r1, r5
20006bcc:	028b      	lsls	r3, r1, #10
20006bce:	4621      	mov	r1, r4
20006bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20006bd4:	4621      	mov	r1, r4
20006bd6:	028a      	lsls	r2, r1, #10
20006bd8:	4610      	mov	r0, r2
20006bda:	4619      	mov	r1, r3
20006bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20006bde:	2200      	movs	r2, #0
20006be0:	61bb      	str	r3, [r7, #24]
20006be2:	61fa      	str	r2, [r7, #28]
20006be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20006be8:	f7f9 fb0e 	bl	20000208 <__aeabi_uldivmod>
20006bec:	4602      	mov	r2, r0
20006bee:	460b      	mov	r3, r1
20006bf0:	4613      	mov	r3, r2
20006bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
20006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (20006c24 <HAL_RCC_GetSysClockFreq+0x200>)
20006bf6:	685b      	ldr	r3, [r3, #4]
20006bf8:	0c1b      	lsrs	r3, r3, #16
20006bfa:	f003 0303 	and.w	r3, r3, #3
20006bfe:	3301      	adds	r3, #1
20006c00:	005b      	lsls	r3, r3, #1
20006c02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
20006c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20006c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20006c08:	fbb2 f3f3 	udiv	r3, r2, r3
20006c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006c0e:	e002      	b.n	20006c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20006c10:	4b05      	ldr	r3, [pc, #20]	@ (20006c28 <HAL_RCC_GetSysClockFreq+0x204>)
20006c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20006c14:	bf00      	nop
    }
  }
  return sysclockfreq;
20006c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
20006c18:	4618      	mov	r0, r3
20006c1a:	3750      	adds	r7, #80	@ 0x50
20006c1c:	46bd      	mov	sp, r7
20006c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20006c22:	bf00      	nop
20006c24:	40023800 	.word	0x40023800
20006c28:	00f42400 	.word	0x00f42400
20006c2c:	007a1200 	.word	0x007a1200

20006c30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20006c30:	b480      	push	{r7}
20006c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20006c34:	4b03      	ldr	r3, [pc, #12]	@ (20006c44 <HAL_RCC_GetHCLKFreq+0x14>)
20006c36:	681b      	ldr	r3, [r3, #0]
}
20006c38:	4618      	mov	r0, r3
20006c3a:	46bd      	mov	sp, r7
20006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006c40:	4770      	bx	lr
20006c42:	bf00      	nop
20006c44:	2000c0ec 	.word	0x2000c0ec

20006c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20006c48:	b580      	push	{r7, lr}
20006c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
20006c4c:	f7ff fff0 	bl	20006c30 <HAL_RCC_GetHCLKFreq>
20006c50:	4602      	mov	r2, r0
20006c52:	4b05      	ldr	r3, [pc, #20]	@ (20006c68 <HAL_RCC_GetPCLK1Freq+0x20>)
20006c54:	689b      	ldr	r3, [r3, #8]
20006c56:	0a9b      	lsrs	r3, r3, #10
20006c58:	f003 0307 	and.w	r3, r3, #7
20006c5c:	4903      	ldr	r1, [pc, #12]	@ (20006c6c <HAL_RCC_GetPCLK1Freq+0x24>)
20006c5e:	5ccb      	ldrb	r3, [r1, r3]
20006c60:	fa22 f303 	lsr.w	r3, r2, r3
}
20006c64:	4618      	mov	r0, r3
20006c66:	bd80      	pop	{r7, pc}
20006c68:	40023800 	.word	0x40023800
20006c6c:	2000c0d4 	.word	0x2000c0d4

20006c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20006c70:	b580      	push	{r7, lr}
20006c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
20006c74:	f7ff ffdc 	bl	20006c30 <HAL_RCC_GetHCLKFreq>
20006c78:	4602      	mov	r2, r0
20006c7a:	4b05      	ldr	r3, [pc, #20]	@ (20006c90 <HAL_RCC_GetPCLK2Freq+0x20>)
20006c7c:	689b      	ldr	r3, [r3, #8]
20006c7e:	0b5b      	lsrs	r3, r3, #13
20006c80:	f003 0307 	and.w	r3, r3, #7
20006c84:	4903      	ldr	r1, [pc, #12]	@ (20006c94 <HAL_RCC_GetPCLK2Freq+0x24>)
20006c86:	5ccb      	ldrb	r3, [r1, r3]
20006c88:	fa22 f303 	lsr.w	r3, r2, r3
}
20006c8c:	4618      	mov	r0, r3
20006c8e:	bd80      	pop	{r7, pc}
20006c90:	40023800 	.word	0x40023800
20006c94:	2000c0d4 	.word	0x2000c0d4

20006c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20006c98:	b580      	push	{r7, lr}
20006c9a:	b088      	sub	sp, #32
20006c9c:	af00      	add	r7, sp, #0
20006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
20006ca0:	2300      	movs	r3, #0
20006ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
20006ca4:	2300      	movs	r3, #0
20006ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
20006ca8:	2300      	movs	r3, #0
20006caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
20006cac:	2300      	movs	r3, #0
20006cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
20006cb0:	2300      	movs	r3, #0
20006cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
20006cb4:	687b      	ldr	r3, [r7, #4]
20006cb6:	681b      	ldr	r3, [r3, #0]
20006cb8:	f003 0301 	and.w	r3, r3, #1
20006cbc:	2b00      	cmp	r3, #0
20006cbe:	d012      	beq.n	20006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20006cc0:	4b69      	ldr	r3, [pc, #420]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006cc2:	689b      	ldr	r3, [r3, #8]
20006cc4:	4a68      	ldr	r2, [pc, #416]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006cc6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
20006cca:	6093      	str	r3, [r2, #8]
20006ccc:	4b66      	ldr	r3, [pc, #408]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006cce:	689a      	ldr	r2, [r3, #8]
20006cd0:	687b      	ldr	r3, [r7, #4]
20006cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20006cd4:	4964      	ldr	r1, [pc, #400]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006cd6:	4313      	orrs	r3, r2
20006cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
20006cda:	687b      	ldr	r3, [r7, #4]
20006cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20006cde:	2b00      	cmp	r3, #0
20006ce0:	d101      	bne.n	20006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
20006ce2:	2301      	movs	r3, #1
20006ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
20006ce6:	687b      	ldr	r3, [r7, #4]
20006ce8:	681b      	ldr	r3, [r3, #0]
20006cea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20006cee:	2b00      	cmp	r3, #0
20006cf0:	d017      	beq.n	20006d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
20006cf2:	4b5d      	ldr	r3, [pc, #372]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20006cf8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20006cfc:	687b      	ldr	r3, [r7, #4]
20006cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20006d00:	4959      	ldr	r1, [pc, #356]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006d02:	4313      	orrs	r3, r2
20006d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
20006d08:	687b      	ldr	r3, [r7, #4]
20006d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20006d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20006d10:	d101      	bne.n	20006d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
20006d12:	2301      	movs	r3, #1
20006d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
20006d16:	687b      	ldr	r3, [r7, #4]
20006d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20006d1a:	2b00      	cmp	r3, #0
20006d1c:	d101      	bne.n	20006d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
20006d1e:	2301      	movs	r3, #1
20006d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
20006d22:	687b      	ldr	r3, [r7, #4]
20006d24:	681b      	ldr	r3, [r3, #0]
20006d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20006d2a:	2b00      	cmp	r3, #0
20006d2c:	d017      	beq.n	20006d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
20006d2e:	4b4e      	ldr	r3, [pc, #312]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20006d34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
20006d38:	687b      	ldr	r3, [r7, #4]
20006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006d3c:	494a      	ldr	r1, [pc, #296]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006d3e:	4313      	orrs	r3, r2
20006d40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
20006d44:	687b      	ldr	r3, [r7, #4]
20006d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20006d4c:	d101      	bne.n	20006d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
20006d4e:	2301      	movs	r3, #1
20006d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
20006d52:	687b      	ldr	r3, [r7, #4]
20006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006d56:	2b00      	cmp	r3, #0
20006d58:	d101      	bne.n	20006d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
20006d5a:	2301      	movs	r3, #1
20006d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20006d5e:	687b      	ldr	r3, [r7, #4]
20006d60:	681b      	ldr	r3, [r3, #0]
20006d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20006d66:	2b00      	cmp	r3, #0
20006d68:	d001      	beq.n	20006d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
20006d6a:	2301      	movs	r3, #1
20006d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
20006d6e:	687b      	ldr	r3, [r7, #4]
20006d70:	681b      	ldr	r3, [r3, #0]
20006d72:	f003 0320 	and.w	r3, r3, #32
20006d76:	2b00      	cmp	r3, #0
20006d78:	f000 808b 	beq.w	20006e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
20006d7c:	4b3a      	ldr	r3, [pc, #232]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006d80:	4a39      	ldr	r2, [pc, #228]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006d86:	6413      	str	r3, [r2, #64]	@ 0x40
20006d88:	4b37      	ldr	r3, [pc, #220]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20006d90:	60bb      	str	r3, [r7, #8]
20006d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
20006d94:	4b35      	ldr	r3, [pc, #212]	@ (20006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20006d96:	681b      	ldr	r3, [r3, #0]
20006d98:	4a34      	ldr	r2, [pc, #208]	@ (20006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20006d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20006d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20006da0:	f7fd f956 	bl	20004050 <HAL_GetTick>
20006da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20006da6:	e008      	b.n	20006dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20006da8:	f7fd f952 	bl	20004050 <HAL_GetTick>
20006dac:	4602      	mov	r2, r0
20006dae:	697b      	ldr	r3, [r7, #20]
20006db0:	1ad3      	subs	r3, r2, r3
20006db2:	2b64      	cmp	r3, #100	@ 0x64
20006db4:	d901      	bls.n	20006dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
20006db6:	2303      	movs	r3, #3
20006db8:	e357      	b.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20006dba:	4b2c      	ldr	r3, [pc, #176]	@ (20006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20006dbc:	681b      	ldr	r3, [r3, #0]
20006dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20006dc2:	2b00      	cmp	r3, #0
20006dc4:	d0f0      	beq.n	20006da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
20006dc6:	4b28      	ldr	r3, [pc, #160]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20006dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20006dd0:	693b      	ldr	r3, [r7, #16]
20006dd2:	2b00      	cmp	r3, #0
20006dd4:	d035      	beq.n	20006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
20006dd6:	687b      	ldr	r3, [r7, #4]
20006dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20006dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20006dde:	693a      	ldr	r2, [r7, #16]
20006de0:	429a      	cmp	r2, r3
20006de2:	d02e      	beq.n	20006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20006de4:	4b20      	ldr	r3, [pc, #128]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20006dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
20006dee:	4b1e      	ldr	r3, [pc, #120]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006df2:	4a1d      	ldr	r2, [pc, #116]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006df8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
20006dfa:	4b1b      	ldr	r3, [pc, #108]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006dfe:	4a1a      	ldr	r2, [pc, #104]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20006e04:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
20006e06:	4a18      	ldr	r2, [pc, #96]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006e08:	693b      	ldr	r3, [r7, #16]
20006e0a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20006e0c:	4b16      	ldr	r3, [pc, #88]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006e10:	f003 0301 	and.w	r3, r3, #1
20006e14:	2b01      	cmp	r3, #1
20006e16:	d114      	bne.n	20006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006e18:	f7fd f91a 	bl	20004050 <HAL_GetTick>
20006e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006e1e:	e00a      	b.n	20006e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20006e20:	f7fd f916 	bl	20004050 <HAL_GetTick>
20006e24:	4602      	mov	r2, r0
20006e26:	697b      	ldr	r3, [r7, #20]
20006e28:	1ad3      	subs	r3, r2, r3
20006e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
20006e2e:	4293      	cmp	r3, r2
20006e30:	d901      	bls.n	20006e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
20006e32:	2303      	movs	r3, #3
20006e34:	e319      	b.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006e36:	4b0c      	ldr	r3, [pc, #48]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006e3a:	f003 0302 	and.w	r3, r3, #2
20006e3e:	2b00      	cmp	r3, #0
20006e40:	d0ee      	beq.n	20006e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20006e42:	687b      	ldr	r3, [r7, #4]
20006e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20006e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20006e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20006e4e:	d111      	bne.n	20006e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
20006e50:	4b05      	ldr	r3, [pc, #20]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006e52:	689b      	ldr	r3, [r3, #8]
20006e54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
20006e58:	687b      	ldr	r3, [r7, #4]
20006e5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
20006e5c:	4b04      	ldr	r3, [pc, #16]	@ (20006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
20006e5e:	400b      	ands	r3, r1
20006e60:	4901      	ldr	r1, [pc, #4]	@ (20006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006e62:	4313      	orrs	r3, r2
20006e64:	608b      	str	r3, [r1, #8]
20006e66:	e00b      	b.n	20006e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
20006e68:	40023800 	.word	0x40023800
20006e6c:	40007000 	.word	0x40007000
20006e70:	0ffffcff 	.word	0x0ffffcff
20006e74:	4baa      	ldr	r3, [pc, #680]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006e76:	689b      	ldr	r3, [r3, #8]
20006e78:	4aa9      	ldr	r2, [pc, #676]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006e7a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
20006e7e:	6093      	str	r3, [r2, #8]
20006e80:	4ba7      	ldr	r3, [pc, #668]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006e82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
20006e84:	687b      	ldr	r3, [r7, #4]
20006e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20006e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
20006e8c:	49a4      	ldr	r1, [pc, #656]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006e8e:	4313      	orrs	r3, r2
20006e90:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
20006e92:	687b      	ldr	r3, [r7, #4]
20006e94:	681b      	ldr	r3, [r3, #0]
20006e96:	f003 0310 	and.w	r3, r3, #16
20006e9a:	2b00      	cmp	r3, #0
20006e9c:	d010      	beq.n	20006ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
20006e9e:	4ba0      	ldr	r3, [pc, #640]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20006ea4:	4a9e      	ldr	r2, [pc, #632]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20006eaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
20006eae:	4b9c      	ldr	r3, [pc, #624]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
20006eb4:	687b      	ldr	r3, [r7, #4]
20006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20006eb8:	4999      	ldr	r1, [pc, #612]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006eba:	4313      	orrs	r3, r2
20006ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
20006ec0:	687b      	ldr	r3, [r7, #4]
20006ec2:	681b      	ldr	r3, [r3, #0]
20006ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20006ec8:	2b00      	cmp	r3, #0
20006eca:	d00a      	beq.n	20006ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
20006ecc:	4b94      	ldr	r3, [pc, #592]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006ed2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20006ed6:	687b      	ldr	r3, [r7, #4]
20006ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20006eda:	4991      	ldr	r1, [pc, #580]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006edc:	4313      	orrs	r3, r2
20006ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
20006ee2:	687b      	ldr	r3, [r7, #4]
20006ee4:	681b      	ldr	r3, [r3, #0]
20006ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20006eea:	2b00      	cmp	r3, #0
20006eec:	d00a      	beq.n	20006f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
20006eee:	4b8c      	ldr	r3, [pc, #560]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006ef4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
20006ef8:	687b      	ldr	r3, [r7, #4]
20006efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20006efc:	4988      	ldr	r1, [pc, #544]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006efe:	4313      	orrs	r3, r2
20006f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
20006f04:	687b      	ldr	r3, [r7, #4]
20006f06:	681b      	ldr	r3, [r3, #0]
20006f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20006f0c:	2b00      	cmp	r3, #0
20006f0e:	d00a      	beq.n	20006f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
20006f10:	4b83      	ldr	r3, [pc, #524]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20006f1a:	687b      	ldr	r3, [r7, #4]
20006f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20006f1e:	4980      	ldr	r1, [pc, #512]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f20:	4313      	orrs	r3, r2
20006f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
20006f26:	687b      	ldr	r3, [r7, #4]
20006f28:	681b      	ldr	r3, [r3, #0]
20006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20006f2e:	2b00      	cmp	r3, #0
20006f30:	d00a      	beq.n	20006f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
20006f32:	4b7b      	ldr	r3, [pc, #492]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006f38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
20006f3c:	687b      	ldr	r3, [r7, #4]
20006f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006f40:	4977      	ldr	r1, [pc, #476]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f42:	4313      	orrs	r3, r2
20006f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
20006f48:	687b      	ldr	r3, [r7, #4]
20006f4a:	681b      	ldr	r3, [r3, #0]
20006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20006f50:	2b00      	cmp	r3, #0
20006f52:	d00a      	beq.n	20006f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
20006f54:	4b72      	ldr	r3, [pc, #456]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006f5a:	f023 0203 	bic.w	r2, r3, #3
20006f5e:	687b      	ldr	r3, [r7, #4]
20006f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20006f62:	496f      	ldr	r1, [pc, #444]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f64:	4313      	orrs	r3, r2
20006f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
20006f6a:	687b      	ldr	r3, [r7, #4]
20006f6c:	681b      	ldr	r3, [r3, #0]
20006f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006f72:	2b00      	cmp	r3, #0
20006f74:	d00a      	beq.n	20006f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
20006f76:	4b6a      	ldr	r3, [pc, #424]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006f7c:	f023 020c 	bic.w	r2, r3, #12
20006f80:	687b      	ldr	r3, [r7, #4]
20006f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20006f84:	4966      	ldr	r1, [pc, #408]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f86:	4313      	orrs	r3, r2
20006f88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
20006f8c:	687b      	ldr	r3, [r7, #4]
20006f8e:	681b      	ldr	r3, [r3, #0]
20006f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20006f94:	2b00      	cmp	r3, #0
20006f96:	d00a      	beq.n	20006fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
20006f98:	4b61      	ldr	r3, [pc, #388]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006f9e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
20006fa2:	687b      	ldr	r3, [r7, #4]
20006fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20006fa6:	495e      	ldr	r1, [pc, #376]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006fa8:	4313      	orrs	r3, r2
20006faa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
20006fae:	687b      	ldr	r3, [r7, #4]
20006fb0:	681b      	ldr	r3, [r3, #0]
20006fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20006fb6:	2b00      	cmp	r3, #0
20006fb8:	d00a      	beq.n	20006fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
20006fba:	4b59      	ldr	r3, [pc, #356]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006fc0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
20006fc4:	687b      	ldr	r3, [r7, #4]
20006fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20006fc8:	4955      	ldr	r1, [pc, #340]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006fca:	4313      	orrs	r3, r2
20006fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
20006fd0:	687b      	ldr	r3, [r7, #4]
20006fd2:	681b      	ldr	r3, [r3, #0]
20006fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20006fd8:	2b00      	cmp	r3, #0
20006fda:	d00a      	beq.n	20006ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
20006fdc:	4b50      	ldr	r3, [pc, #320]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20006fe2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
20006fe6:	687b      	ldr	r3, [r7, #4]
20006fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20006fea:	494d      	ldr	r1, [pc, #308]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20006fec:	4313      	orrs	r3, r2
20006fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
20006ff2:	687b      	ldr	r3, [r7, #4]
20006ff4:	681b      	ldr	r3, [r3, #0]
20006ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20006ffa:	2b00      	cmp	r3, #0
20006ffc:	d00a      	beq.n	20007014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
20006ffe:	4b48      	ldr	r3, [pc, #288]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007004:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
20007008:	687b      	ldr	r3, [r7, #4]
2000700a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2000700c:	4944      	ldr	r1, [pc, #272]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000700e:	4313      	orrs	r3, r2
20007010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
20007014:	687b      	ldr	r3, [r7, #4]
20007016:	681b      	ldr	r3, [r3, #0]
20007018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
2000701c:	2b00      	cmp	r3, #0
2000701e:	d00a      	beq.n	20007036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
20007020:	4b3f      	ldr	r3, [pc, #252]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007026:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
2000702a:	687b      	ldr	r3, [r7, #4]
2000702c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2000702e:	493c      	ldr	r1, [pc, #240]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007030:	4313      	orrs	r3, r2
20007032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
20007036:	687b      	ldr	r3, [r7, #4]
20007038:	681b      	ldr	r3, [r3, #0]
2000703a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2000703e:	2b00      	cmp	r3, #0
20007040:	d00a      	beq.n	20007058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
20007042:	4b37      	ldr	r3, [pc, #220]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007048:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
2000704c:	687b      	ldr	r3, [r7, #4]
2000704e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007050:	4933      	ldr	r1, [pc, #204]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007052:	4313      	orrs	r3, r2
20007054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
20007058:	687b      	ldr	r3, [r7, #4]
2000705a:	681b      	ldr	r3, [r3, #0]
2000705c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20007060:	2b00      	cmp	r3, #0
20007062:	d00a      	beq.n	2000707a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
20007064:	4b2e      	ldr	r3, [pc, #184]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000706a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
2000706e:	687b      	ldr	r3, [r7, #4]
20007070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
20007072:	492b      	ldr	r1, [pc, #172]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007074:	4313      	orrs	r3, r2
20007076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
2000707a:	687b      	ldr	r3, [r7, #4]
2000707c:	681b      	ldr	r3, [r3, #0]
2000707e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20007082:	2b00      	cmp	r3, #0
20007084:	d011      	beq.n	200070aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
20007086:	4b26      	ldr	r3, [pc, #152]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000708c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
20007090:	687b      	ldr	r3, [r7, #4]
20007092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20007094:	4922      	ldr	r1, [pc, #136]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007096:	4313      	orrs	r3, r2
20007098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
2000709c:	687b      	ldr	r3, [r7, #4]
2000709e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200070a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
200070a4:	d101      	bne.n	200070aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
200070a6:	2301      	movs	r3, #1
200070a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
200070aa:	687b      	ldr	r3, [r7, #4]
200070ac:	681b      	ldr	r3, [r3, #0]
200070ae:	f003 0308 	and.w	r3, r3, #8
200070b2:	2b00      	cmp	r3, #0
200070b4:	d001      	beq.n	200070ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
200070b6:	2301      	movs	r3, #1
200070b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
200070ba:	687b      	ldr	r3, [r7, #4]
200070bc:	681b      	ldr	r3, [r3, #0]
200070be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
200070c2:	2b00      	cmp	r3, #0
200070c4:	d00a      	beq.n	200070dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
200070c6:	4b16      	ldr	r3, [pc, #88]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200070cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
200070d0:	687b      	ldr	r3, [r7, #4]
200070d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200070d4:	4912      	ldr	r1, [pc, #72]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200070d6:	4313      	orrs	r3, r2
200070d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
200070dc:	687b      	ldr	r3, [r7, #4]
200070de:	681b      	ldr	r3, [r3, #0]
200070e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
200070e4:	2b00      	cmp	r3, #0
200070e6:	d00b      	beq.n	20007100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
200070e8:	4b0d      	ldr	r3, [pc, #52]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200070ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
200070f2:	687b      	ldr	r3, [r7, #4]
200070f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
200070f8:	4909      	ldr	r1, [pc, #36]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
200070fa:	4313      	orrs	r3, r2
200070fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20007100:	69fb      	ldr	r3, [r7, #28]
20007102:	2b01      	cmp	r3, #1
20007104:	d006      	beq.n	20007114 <HAL_RCCEx_PeriphCLKConfig+0x47c>
20007106:	687b      	ldr	r3, [r7, #4]
20007108:	681b      	ldr	r3, [r3, #0]
2000710a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000710e:	2b00      	cmp	r3, #0
20007110:	f000 80d9 	beq.w	200072c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20007114:	4b02      	ldr	r3, [pc, #8]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20007116:	681b      	ldr	r3, [r3, #0]
20007118:	4a01      	ldr	r2, [pc, #4]	@ (20007120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
2000711a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
2000711e:	e001      	b.n	20007124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
20007120:	40023800 	.word	0x40023800
20007124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20007126:	f7fc ff93 	bl	20004050 <HAL_GetTick>
2000712a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2000712c:	e008      	b.n	20007140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000712e:	f7fc ff8f 	bl	20004050 <HAL_GetTick>
20007132:	4602      	mov	r2, r0
20007134:	697b      	ldr	r3, [r7, #20]
20007136:	1ad3      	subs	r3, r2, r3
20007138:	2b64      	cmp	r3, #100	@ 0x64
2000713a:	d901      	bls.n	20007140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000713c:	2303      	movs	r3, #3
2000713e:	e194      	b.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20007140:	4b6c      	ldr	r3, [pc, #432]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007142:	681b      	ldr	r3, [r3, #0]
20007144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20007148:	2b00      	cmp	r3, #0
2000714a:	d1f0      	bne.n	2000712e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
2000714c:	687b      	ldr	r3, [r7, #4]
2000714e:	681b      	ldr	r3, [r3, #0]
20007150:	f003 0301 	and.w	r3, r3, #1
20007154:	2b00      	cmp	r3, #0
20007156:	d021      	beq.n	2000719c <HAL_RCCEx_PeriphCLKConfig+0x504>
20007158:	687b      	ldr	r3, [r7, #4]
2000715a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000715c:	2b00      	cmp	r3, #0
2000715e:	d11d      	bne.n	2000719c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20007160:	4b64      	ldr	r3, [pc, #400]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20007166:	0c1b      	lsrs	r3, r3, #16
20007168:	f003 0303 	and.w	r3, r3, #3
2000716c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
2000716e:	4b61      	ldr	r3, [pc, #388]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20007174:	0e1b      	lsrs	r3, r3, #24
20007176:	f003 030f 	and.w	r3, r3, #15
2000717a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
2000717c:	687b      	ldr	r3, [r7, #4]
2000717e:	685b      	ldr	r3, [r3, #4]
20007180:	019a      	lsls	r2, r3, #6
20007182:	693b      	ldr	r3, [r7, #16]
20007184:	041b      	lsls	r3, r3, #16
20007186:	431a      	orrs	r2, r3
20007188:	68fb      	ldr	r3, [r7, #12]
2000718a:	061b      	lsls	r3, r3, #24
2000718c:	431a      	orrs	r2, r3
2000718e:	687b      	ldr	r3, [r7, #4]
20007190:	689b      	ldr	r3, [r3, #8]
20007192:	071b      	lsls	r3, r3, #28
20007194:	4957      	ldr	r1, [pc, #348]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007196:	4313      	orrs	r3, r2
20007198:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2000719c:	687b      	ldr	r3, [r7, #4]
2000719e:	681b      	ldr	r3, [r3, #0]
200071a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
200071a4:	2b00      	cmp	r3, #0
200071a6:	d004      	beq.n	200071b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
200071a8:	687b      	ldr	r3, [r7, #4]
200071aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200071ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
200071b0:	d00a      	beq.n	200071c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
200071b2:	687b      	ldr	r3, [r7, #4]
200071b4:	681b      	ldr	r3, [r3, #0]
200071b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
200071ba:	2b00      	cmp	r3, #0
200071bc:	d02e      	beq.n	2000721c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
200071be:	687b      	ldr	r3, [r7, #4]
200071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200071c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200071c6:	d129      	bne.n	2000721c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
200071c8:	4b4a      	ldr	r3, [pc, #296]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200071ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200071ce:	0c1b      	lsrs	r3, r3, #16
200071d0:	f003 0303 	and.w	r3, r3, #3
200071d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
200071d6:	4b47      	ldr	r3, [pc, #284]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200071d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200071dc:	0f1b      	lsrs	r3, r3, #28
200071de:	f003 0307 	and.w	r3, r3, #7
200071e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
200071e4:	687b      	ldr	r3, [r7, #4]
200071e6:	685b      	ldr	r3, [r3, #4]
200071e8:	019a      	lsls	r2, r3, #6
200071ea:	693b      	ldr	r3, [r7, #16]
200071ec:	041b      	lsls	r3, r3, #16
200071ee:	431a      	orrs	r2, r3
200071f0:	687b      	ldr	r3, [r7, #4]
200071f2:	68db      	ldr	r3, [r3, #12]
200071f4:	061b      	lsls	r3, r3, #24
200071f6:	431a      	orrs	r2, r3
200071f8:	68fb      	ldr	r3, [r7, #12]
200071fa:	071b      	lsls	r3, r3, #28
200071fc:	493d      	ldr	r1, [pc, #244]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200071fe:	4313      	orrs	r3, r2
20007200:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
20007204:	4b3b      	ldr	r3, [pc, #236]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
2000720a:	f023 021f 	bic.w	r2, r3, #31
2000720e:	687b      	ldr	r3, [r7, #4]
20007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007212:	3b01      	subs	r3, #1
20007214:	4937      	ldr	r1, [pc, #220]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007216:	4313      	orrs	r3, r2
20007218:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2000721c:	687b      	ldr	r3, [r7, #4]
2000721e:	681b      	ldr	r3, [r3, #0]
20007220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20007224:	2b00      	cmp	r3, #0
20007226:	d01d      	beq.n	20007264 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20007228:	4b32      	ldr	r3, [pc, #200]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000722a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2000722e:	0e1b      	lsrs	r3, r3, #24
20007230:	f003 030f 	and.w	r3, r3, #15
20007234:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20007236:	4b2f      	ldr	r3, [pc, #188]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2000723c:	0f1b      	lsrs	r3, r3, #28
2000723e:	f003 0307 	and.w	r3, r3, #7
20007242:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
20007244:	687b      	ldr	r3, [r7, #4]
20007246:	685b      	ldr	r3, [r3, #4]
20007248:	019a      	lsls	r2, r3, #6
2000724a:	687b      	ldr	r3, [r7, #4]
2000724c:	691b      	ldr	r3, [r3, #16]
2000724e:	041b      	lsls	r3, r3, #16
20007250:	431a      	orrs	r2, r3
20007252:	693b      	ldr	r3, [r7, #16]
20007254:	061b      	lsls	r3, r3, #24
20007256:	431a      	orrs	r2, r3
20007258:	68fb      	ldr	r3, [r7, #12]
2000725a:	071b      	lsls	r3, r3, #28
2000725c:	4925      	ldr	r1, [pc, #148]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000725e:	4313      	orrs	r3, r2
20007260:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
20007264:	687b      	ldr	r3, [r7, #4]
20007266:	681b      	ldr	r3, [r3, #0]
20007268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000726c:	2b00      	cmp	r3, #0
2000726e:	d011      	beq.n	20007294 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
20007270:	687b      	ldr	r3, [r7, #4]
20007272:	685b      	ldr	r3, [r3, #4]
20007274:	019a      	lsls	r2, r3, #6
20007276:	687b      	ldr	r3, [r7, #4]
20007278:	691b      	ldr	r3, [r3, #16]
2000727a:	041b      	lsls	r3, r3, #16
2000727c:	431a      	orrs	r2, r3
2000727e:	687b      	ldr	r3, [r7, #4]
20007280:	68db      	ldr	r3, [r3, #12]
20007282:	061b      	lsls	r3, r3, #24
20007284:	431a      	orrs	r2, r3
20007286:	687b      	ldr	r3, [r7, #4]
20007288:	689b      	ldr	r3, [r3, #8]
2000728a:	071b      	lsls	r3, r3, #28
2000728c:	4919      	ldr	r1, [pc, #100]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000728e:	4313      	orrs	r3, r2
20007290:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20007294:	4b17      	ldr	r3, [pc, #92]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20007296:	681b      	ldr	r3, [r3, #0]
20007298:	4a16      	ldr	r2, [pc, #88]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
2000729a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
2000729e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200072a0:	f7fc fed6 	bl	20004050 <HAL_GetTick>
200072a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
200072a6:	e008      	b.n	200072ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
200072a8:	f7fc fed2 	bl	20004050 <HAL_GetTick>
200072ac:	4602      	mov	r2, r0
200072ae:	697b      	ldr	r3, [r7, #20]
200072b0:	1ad3      	subs	r3, r2, r3
200072b2:	2b64      	cmp	r3, #100	@ 0x64
200072b4:	d901      	bls.n	200072ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200072b6:	2303      	movs	r3, #3
200072b8:	e0d7      	b.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
200072ba:	4b0e      	ldr	r3, [pc, #56]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200072bc:	681b      	ldr	r3, [r3, #0]
200072be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200072c2:	2b00      	cmp	r3, #0
200072c4:	d0f0      	beq.n	200072a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
200072c6:	69bb      	ldr	r3, [r7, #24]
200072c8:	2b01      	cmp	r3, #1
200072ca:	f040 80cd 	bne.w	20007468 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
200072ce:	4b09      	ldr	r3, [pc, #36]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200072d0:	681b      	ldr	r3, [r3, #0]
200072d2:	4a08      	ldr	r2, [pc, #32]	@ (200072f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
200072d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
200072d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200072da:	f7fc feb9 	bl	20004050 <HAL_GetTick>
200072de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
200072e0:	e00a      	b.n	200072f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
200072e2:	f7fc feb5 	bl	20004050 <HAL_GetTick>
200072e6:	4602      	mov	r2, r0
200072e8:	697b      	ldr	r3, [r7, #20]
200072ea:	1ad3      	subs	r3, r2, r3
200072ec:	2b64      	cmp	r3, #100	@ 0x64
200072ee:	d903      	bls.n	200072f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200072f0:	2303      	movs	r3, #3
200072f2:	e0ba      	b.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
200072f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
200072f8:	4b5e      	ldr	r3, [pc, #376]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200072fa:	681b      	ldr	r3, [r3, #0]
200072fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20007300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20007304:	d0ed      	beq.n	200072e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20007306:	687b      	ldr	r3, [r7, #4]
20007308:	681b      	ldr	r3, [r3, #0]
2000730a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2000730e:	2b00      	cmp	r3, #0
20007310:	d003      	beq.n	2000731a <HAL_RCCEx_PeriphCLKConfig+0x682>
20007312:	687b      	ldr	r3, [r7, #4]
20007314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20007316:	2b00      	cmp	r3, #0
20007318:	d009      	beq.n	2000732e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
2000731a:	687b      	ldr	r3, [r7, #4]
2000731c:	681b      	ldr	r3, [r3, #0]
2000731e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20007322:	2b00      	cmp	r3, #0
20007324:	d02e      	beq.n	20007384 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
20007326:	687b      	ldr	r3, [r7, #4]
20007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000732a:	2b00      	cmp	r3, #0
2000732c:	d12a      	bne.n	20007384 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
2000732e:	4b51      	ldr	r3, [pc, #324]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20007334:	0c1b      	lsrs	r3, r3, #16
20007336:	f003 0303 	and.w	r3, r3, #3
2000733a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
2000733c:	4b4d      	ldr	r3, [pc, #308]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20007342:	0f1b      	lsrs	r3, r3, #28
20007344:	f003 0307 	and.w	r3, r3, #7
20007348:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
2000734a:	687b      	ldr	r3, [r7, #4]
2000734c:	695b      	ldr	r3, [r3, #20]
2000734e:	019a      	lsls	r2, r3, #6
20007350:	693b      	ldr	r3, [r7, #16]
20007352:	041b      	lsls	r3, r3, #16
20007354:	431a      	orrs	r2, r3
20007356:	687b      	ldr	r3, [r7, #4]
20007358:	699b      	ldr	r3, [r3, #24]
2000735a:	061b      	lsls	r3, r3, #24
2000735c:	431a      	orrs	r2, r3
2000735e:	68fb      	ldr	r3, [r7, #12]
20007360:	071b      	lsls	r3, r3, #28
20007362:	4944      	ldr	r1, [pc, #272]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007364:	4313      	orrs	r3, r2
20007366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
2000736a:	4b42      	ldr	r3, [pc, #264]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000736c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20007370:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
20007374:	687b      	ldr	r3, [r7, #4]
20007376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007378:	3b01      	subs	r3, #1
2000737a:	021b      	lsls	r3, r3, #8
2000737c:	493d      	ldr	r1, [pc, #244]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000737e:	4313      	orrs	r3, r2
20007380:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
20007384:	687b      	ldr	r3, [r7, #4]
20007386:	681b      	ldr	r3, [r3, #0]
20007388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
2000738c:	2b00      	cmp	r3, #0
2000738e:	d022      	beq.n	200073d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
20007390:	687b      	ldr	r3, [r7, #4]
20007392:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20007394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20007398:	d11d      	bne.n	200073d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2000739a:	4b36      	ldr	r3, [pc, #216]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200073a0:	0e1b      	lsrs	r3, r3, #24
200073a2:	f003 030f 	and.w	r3, r3, #15
200073a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
200073a8:	4b32      	ldr	r3, [pc, #200]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200073ae:	0f1b      	lsrs	r3, r3, #28
200073b0:	f003 0307 	and.w	r3, r3, #7
200073b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
200073b6:	687b      	ldr	r3, [r7, #4]
200073b8:	695b      	ldr	r3, [r3, #20]
200073ba:	019a      	lsls	r2, r3, #6
200073bc:	687b      	ldr	r3, [r7, #4]
200073be:	6a1b      	ldr	r3, [r3, #32]
200073c0:	041b      	lsls	r3, r3, #16
200073c2:	431a      	orrs	r2, r3
200073c4:	693b      	ldr	r3, [r7, #16]
200073c6:	061b      	lsls	r3, r3, #24
200073c8:	431a      	orrs	r2, r3
200073ca:	68fb      	ldr	r3, [r7, #12]
200073cc:	071b      	lsls	r3, r3, #28
200073ce:	4929      	ldr	r1, [pc, #164]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200073d0:	4313      	orrs	r3, r2
200073d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
200073d6:	687b      	ldr	r3, [r7, #4]
200073d8:	681b      	ldr	r3, [r3, #0]
200073da:	f003 0308 	and.w	r3, r3, #8
200073de:	2b00      	cmp	r3, #0
200073e0:	d028      	beq.n	20007434 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
200073e2:	4b24      	ldr	r3, [pc, #144]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200073e8:	0e1b      	lsrs	r3, r3, #24
200073ea:	f003 030f 	and.w	r3, r3, #15
200073ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
200073f0:	4b20      	ldr	r3, [pc, #128]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
200073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200073f6:	0c1b      	lsrs	r3, r3, #16
200073f8:	f003 0303 	and.w	r3, r3, #3
200073fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
200073fe:	687b      	ldr	r3, [r7, #4]
20007400:	695b      	ldr	r3, [r3, #20]
20007402:	019a      	lsls	r2, r3, #6
20007404:	68fb      	ldr	r3, [r7, #12]
20007406:	041b      	lsls	r3, r3, #16
20007408:	431a      	orrs	r2, r3
2000740a:	693b      	ldr	r3, [r7, #16]
2000740c:	061b      	lsls	r3, r3, #24
2000740e:	431a      	orrs	r2, r3
20007410:	687b      	ldr	r3, [r7, #4]
20007412:	69db      	ldr	r3, [r3, #28]
20007414:	071b      	lsls	r3, r3, #28
20007416:	4917      	ldr	r1, [pc, #92]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007418:	4313      	orrs	r3, r2
2000741a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
2000741e:	4b15      	ldr	r3, [pc, #84]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20007424:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20007428:	687b      	ldr	r3, [r7, #4]
2000742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000742c:	4911      	ldr	r1, [pc, #68]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000742e:	4313      	orrs	r3, r2
20007430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
20007434:	4b0f      	ldr	r3, [pc, #60]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20007436:	681b      	ldr	r3, [r3, #0]
20007438:	4a0e      	ldr	r2, [pc, #56]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000743a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000743e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20007440:	f7fc fe06 	bl	20004050 <HAL_GetTick>
20007444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20007446:	e008      	b.n	2000745a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20007448:	f7fc fe02 	bl	20004050 <HAL_GetTick>
2000744c:	4602      	mov	r2, r0
2000744e:	697b      	ldr	r3, [r7, #20]
20007450:	1ad3      	subs	r3, r2, r3
20007452:	2b64      	cmp	r3, #100	@ 0x64
20007454:	d901      	bls.n	2000745a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20007456:	2303      	movs	r3, #3
20007458:	e007      	b.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000745a:	4b06      	ldr	r3, [pc, #24]	@ (20007474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
2000745c:	681b      	ldr	r3, [r3, #0]
2000745e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20007462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20007466:	d1ef      	bne.n	20007448 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
20007468:	2300      	movs	r3, #0
}
2000746a:	4618      	mov	r0, r3
2000746c:	3720      	adds	r7, #32
2000746e:	46bd      	mov	sp, r7
20007470:	bd80      	pop	{r7, pc}
20007472:	bf00      	nop
20007474:	40023800 	.word	0x40023800

20007478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20007478:	b580      	push	{r7, lr}
2000747a:	b084      	sub	sp, #16
2000747c:	af00      	add	r7, sp, #0
2000747e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
20007480:	687b      	ldr	r3, [r7, #4]
20007482:	2b00      	cmp	r3, #0
20007484:	d101      	bne.n	2000748a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20007486:	2301      	movs	r3, #1
20007488:	e09d      	b.n	200075c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
2000748a:	687b      	ldr	r3, [r7, #4]
2000748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000748e:	2b00      	cmp	r3, #0
20007490:	d108      	bne.n	200074a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20007492:	687b      	ldr	r3, [r7, #4]
20007494:	685b      	ldr	r3, [r3, #4]
20007496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
2000749a:	d009      	beq.n	200074b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
2000749c:	687b      	ldr	r3, [r7, #4]
2000749e:	2200      	movs	r2, #0
200074a0:	61da      	str	r2, [r3, #28]
200074a2:	e005      	b.n	200074b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
200074a4:	687b      	ldr	r3, [r7, #4]
200074a6:	2200      	movs	r2, #0
200074a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
200074aa:	687b      	ldr	r3, [r7, #4]
200074ac:	2200      	movs	r2, #0
200074ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200074b0:	687b      	ldr	r3, [r7, #4]
200074b2:	2200      	movs	r2, #0
200074b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
200074b6:	687b      	ldr	r3, [r7, #4]
200074b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
200074bc:	b2db      	uxtb	r3, r3
200074be:	2b00      	cmp	r3, #0
200074c0:	d106      	bne.n	200074d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
200074c2:	687b      	ldr	r3, [r7, #4]
200074c4:	2200      	movs	r2, #0
200074c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
200074ca:	6878      	ldr	r0, [r7, #4]
200074cc:	f7fc fbca 	bl	20003c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
200074d0:	687b      	ldr	r3, [r7, #4]
200074d2:	2202      	movs	r2, #2
200074d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
200074d8:	687b      	ldr	r3, [r7, #4]
200074da:	681b      	ldr	r3, [r3, #0]
200074dc:	681a      	ldr	r2, [r3, #0]
200074de:	687b      	ldr	r3, [r7, #4]
200074e0:	681b      	ldr	r3, [r3, #0]
200074e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
200074e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
200074e8:	687b      	ldr	r3, [r7, #4]
200074ea:	68db      	ldr	r3, [r3, #12]
200074ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
200074f0:	d902      	bls.n	200074f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
200074f2:	2300      	movs	r3, #0
200074f4:	60fb      	str	r3, [r7, #12]
200074f6:	e002      	b.n	200074fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
200074f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200074fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
200074fe:	687b      	ldr	r3, [r7, #4]
20007500:	68db      	ldr	r3, [r3, #12]
20007502:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
20007506:	d007      	beq.n	20007518 <HAL_SPI_Init+0xa0>
20007508:	687b      	ldr	r3, [r7, #4]
2000750a:	68db      	ldr	r3, [r3, #12]
2000750c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20007510:	d002      	beq.n	20007518 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20007512:	687b      	ldr	r3, [r7, #4]
20007514:	2200      	movs	r2, #0
20007516:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20007518:	687b      	ldr	r3, [r7, #4]
2000751a:	685b      	ldr	r3, [r3, #4]
2000751c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
20007520:	687b      	ldr	r3, [r7, #4]
20007522:	689b      	ldr	r3, [r3, #8]
20007524:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
20007528:	431a      	orrs	r2, r3
2000752a:	687b      	ldr	r3, [r7, #4]
2000752c:	691b      	ldr	r3, [r3, #16]
2000752e:	f003 0302 	and.w	r3, r3, #2
20007532:	431a      	orrs	r2, r3
20007534:	687b      	ldr	r3, [r7, #4]
20007536:	695b      	ldr	r3, [r3, #20]
20007538:	f003 0301 	and.w	r3, r3, #1
2000753c:	431a      	orrs	r2, r3
2000753e:	687b      	ldr	r3, [r7, #4]
20007540:	699b      	ldr	r3, [r3, #24]
20007542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20007546:	431a      	orrs	r2, r3
20007548:	687b      	ldr	r3, [r7, #4]
2000754a:	69db      	ldr	r3, [r3, #28]
2000754c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20007550:	431a      	orrs	r2, r3
20007552:	687b      	ldr	r3, [r7, #4]
20007554:	6a1b      	ldr	r3, [r3, #32]
20007556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000755a:	ea42 0103 	orr.w	r1, r2, r3
2000755e:	687b      	ldr	r3, [r7, #4]
20007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007562:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
20007566:	687b      	ldr	r3, [r7, #4]
20007568:	681b      	ldr	r3, [r3, #0]
2000756a:	430a      	orrs	r2, r1
2000756c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
2000756e:	687b      	ldr	r3, [r7, #4]
20007570:	699b      	ldr	r3, [r3, #24]
20007572:	0c1b      	lsrs	r3, r3, #16
20007574:	f003 0204 	and.w	r2, r3, #4
20007578:	687b      	ldr	r3, [r7, #4]
2000757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000757c:	f003 0310 	and.w	r3, r3, #16
20007580:	431a      	orrs	r2, r3
20007582:	687b      	ldr	r3, [r7, #4]
20007584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20007586:	f003 0308 	and.w	r3, r3, #8
2000758a:	431a      	orrs	r2, r3
2000758c:	687b      	ldr	r3, [r7, #4]
2000758e:	68db      	ldr	r3, [r3, #12]
20007590:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
20007594:	ea42 0103 	orr.w	r1, r2, r3
20007598:	68fb      	ldr	r3, [r7, #12]
2000759a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
2000759e:	687b      	ldr	r3, [r7, #4]
200075a0:	681b      	ldr	r3, [r3, #0]
200075a2:	430a      	orrs	r2, r1
200075a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
200075a6:	687b      	ldr	r3, [r7, #4]
200075a8:	681b      	ldr	r3, [r3, #0]
200075aa:	69da      	ldr	r2, [r3, #28]
200075ac:	687b      	ldr	r3, [r7, #4]
200075ae:	681b      	ldr	r3, [r3, #0]
200075b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
200075b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
200075b6:	687b      	ldr	r3, [r7, #4]
200075b8:	2200      	movs	r2, #0
200075ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
200075bc:	687b      	ldr	r3, [r7, #4]
200075be:	2201      	movs	r2, #1
200075c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
200075c4:	2300      	movs	r3, #0
}
200075c6:	4618      	mov	r0, r3
200075c8:	3710      	adds	r7, #16
200075ca:	46bd      	mov	sp, r7
200075cc:	bd80      	pop	{r7, pc}

200075ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
200075ce:	b580      	push	{r7, lr}
200075d0:	b082      	sub	sp, #8
200075d2:	af00      	add	r7, sp, #0
200075d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
200075d6:	687b      	ldr	r3, [r7, #4]
200075d8:	2b00      	cmp	r3, #0
200075da:	d101      	bne.n	200075e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
200075dc:	2301      	movs	r3, #1
200075de:	e040      	b.n	20007662 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
200075e0:	687b      	ldr	r3, [r7, #4]
200075e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200075e4:	2b00      	cmp	r3, #0
200075e6:	d106      	bne.n	200075f6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
200075e8:	687b      	ldr	r3, [r7, #4]
200075ea:	2200      	movs	r2, #0
200075ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
200075f0:	6878      	ldr	r0, [r7, #4]
200075f2:	f7fc fbcb 	bl	20003d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
200075f6:	687b      	ldr	r3, [r7, #4]
200075f8:	2224      	movs	r2, #36	@ 0x24
200075fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
200075fc:	687b      	ldr	r3, [r7, #4]
200075fe:	681b      	ldr	r3, [r3, #0]
20007600:	681a      	ldr	r2, [r3, #0]
20007602:	687b      	ldr	r3, [r7, #4]
20007604:	681b      	ldr	r3, [r3, #0]
20007606:	f022 0201 	bic.w	r2, r2, #1
2000760a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
2000760c:	687b      	ldr	r3, [r7, #4]
2000760e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007610:	2b00      	cmp	r3, #0
20007612:	d002      	beq.n	2000761a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
20007614:	6878      	ldr	r0, [r7, #4]
20007616:	f000 fa8d 	bl	20007b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
2000761a:	6878      	ldr	r0, [r7, #4]
2000761c:	f000 f826 	bl	2000766c <UART_SetConfig>
20007620:	4603      	mov	r3, r0
20007622:	2b01      	cmp	r3, #1
20007624:	d101      	bne.n	2000762a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
20007626:	2301      	movs	r3, #1
20007628:	e01b      	b.n	20007662 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2000762a:	687b      	ldr	r3, [r7, #4]
2000762c:	681b      	ldr	r3, [r3, #0]
2000762e:	685a      	ldr	r2, [r3, #4]
20007630:	687b      	ldr	r3, [r7, #4]
20007632:	681b      	ldr	r3, [r3, #0]
20007634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
20007638:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2000763a:	687b      	ldr	r3, [r7, #4]
2000763c:	681b      	ldr	r3, [r3, #0]
2000763e:	689a      	ldr	r2, [r3, #8]
20007640:	687b      	ldr	r3, [r7, #4]
20007642:	681b      	ldr	r3, [r3, #0]
20007644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
20007648:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
2000764a:	687b      	ldr	r3, [r7, #4]
2000764c:	681b      	ldr	r3, [r3, #0]
2000764e:	681a      	ldr	r2, [r3, #0]
20007650:	687b      	ldr	r3, [r7, #4]
20007652:	681b      	ldr	r3, [r3, #0]
20007654:	f042 0201 	orr.w	r2, r2, #1
20007658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
2000765a:	6878      	ldr	r0, [r7, #4]
2000765c:	f000 fb0c 	bl	20007c78 <UART_CheckIdleState>
20007660:	4603      	mov	r3, r0
}
20007662:	4618      	mov	r0, r3
20007664:	3708      	adds	r7, #8
20007666:	46bd      	mov	sp, r7
20007668:	bd80      	pop	{r7, pc}
	...

2000766c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
2000766c:	b580      	push	{r7, lr}
2000766e:	b088      	sub	sp, #32
20007670:	af00      	add	r7, sp, #0
20007672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
20007674:	2300      	movs	r3, #0
20007676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
20007678:	687b      	ldr	r3, [r7, #4]
2000767a:	689a      	ldr	r2, [r3, #8]
2000767c:	687b      	ldr	r3, [r7, #4]
2000767e:	691b      	ldr	r3, [r3, #16]
20007680:	431a      	orrs	r2, r3
20007682:	687b      	ldr	r3, [r7, #4]
20007684:	695b      	ldr	r3, [r3, #20]
20007686:	431a      	orrs	r2, r3
20007688:	687b      	ldr	r3, [r7, #4]
2000768a:	69db      	ldr	r3, [r3, #28]
2000768c:	4313      	orrs	r3, r2
2000768e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
20007690:	687b      	ldr	r3, [r7, #4]
20007692:	681b      	ldr	r3, [r3, #0]
20007694:	681a      	ldr	r2, [r3, #0]
20007696:	4ba6      	ldr	r3, [pc, #664]	@ (20007930 <UART_SetConfig+0x2c4>)
20007698:	4013      	ands	r3, r2
2000769a:	687a      	ldr	r2, [r7, #4]
2000769c:	6812      	ldr	r2, [r2, #0]
2000769e:	6979      	ldr	r1, [r7, #20]
200076a0:	430b      	orrs	r3, r1
200076a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
200076a4:	687b      	ldr	r3, [r7, #4]
200076a6:	681b      	ldr	r3, [r3, #0]
200076a8:	685b      	ldr	r3, [r3, #4]
200076aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
200076ae:	687b      	ldr	r3, [r7, #4]
200076b0:	68da      	ldr	r2, [r3, #12]
200076b2:	687b      	ldr	r3, [r7, #4]
200076b4:	681b      	ldr	r3, [r3, #0]
200076b6:	430a      	orrs	r2, r1
200076b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
200076ba:	687b      	ldr	r3, [r7, #4]
200076bc:	699b      	ldr	r3, [r3, #24]
200076be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
200076c0:	687b      	ldr	r3, [r7, #4]
200076c2:	6a1b      	ldr	r3, [r3, #32]
200076c4:	697a      	ldr	r2, [r7, #20]
200076c6:	4313      	orrs	r3, r2
200076c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
200076ca:	687b      	ldr	r3, [r7, #4]
200076cc:	681b      	ldr	r3, [r3, #0]
200076ce:	689b      	ldr	r3, [r3, #8]
200076d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
200076d4:	687b      	ldr	r3, [r7, #4]
200076d6:	681b      	ldr	r3, [r3, #0]
200076d8:	697a      	ldr	r2, [r7, #20]
200076da:	430a      	orrs	r2, r1
200076dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
200076de:	687b      	ldr	r3, [r7, #4]
200076e0:	681b      	ldr	r3, [r3, #0]
200076e2:	4a94      	ldr	r2, [pc, #592]	@ (20007934 <UART_SetConfig+0x2c8>)
200076e4:	4293      	cmp	r3, r2
200076e6:	d120      	bne.n	2000772a <UART_SetConfig+0xbe>
200076e8:	4b93      	ldr	r3, [pc, #588]	@ (20007938 <UART_SetConfig+0x2cc>)
200076ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200076ee:	f003 0303 	and.w	r3, r3, #3
200076f2:	2b03      	cmp	r3, #3
200076f4:	d816      	bhi.n	20007724 <UART_SetConfig+0xb8>
200076f6:	a201      	add	r2, pc, #4	@ (adr r2, 200076fc <UART_SetConfig+0x90>)
200076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200076fc:	2000770d 	.word	0x2000770d
20007700:	20007719 	.word	0x20007719
20007704:	20007713 	.word	0x20007713
20007708:	2000771f 	.word	0x2000771f
2000770c:	2301      	movs	r3, #1
2000770e:	77fb      	strb	r3, [r7, #31]
20007710:	e150      	b.n	200079b4 <UART_SetConfig+0x348>
20007712:	2302      	movs	r3, #2
20007714:	77fb      	strb	r3, [r7, #31]
20007716:	e14d      	b.n	200079b4 <UART_SetConfig+0x348>
20007718:	2304      	movs	r3, #4
2000771a:	77fb      	strb	r3, [r7, #31]
2000771c:	e14a      	b.n	200079b4 <UART_SetConfig+0x348>
2000771e:	2308      	movs	r3, #8
20007720:	77fb      	strb	r3, [r7, #31]
20007722:	e147      	b.n	200079b4 <UART_SetConfig+0x348>
20007724:	2310      	movs	r3, #16
20007726:	77fb      	strb	r3, [r7, #31]
20007728:	e144      	b.n	200079b4 <UART_SetConfig+0x348>
2000772a:	687b      	ldr	r3, [r7, #4]
2000772c:	681b      	ldr	r3, [r3, #0]
2000772e:	4a83      	ldr	r2, [pc, #524]	@ (2000793c <UART_SetConfig+0x2d0>)
20007730:	4293      	cmp	r3, r2
20007732:	d132      	bne.n	2000779a <UART_SetConfig+0x12e>
20007734:	4b80      	ldr	r3, [pc, #512]	@ (20007938 <UART_SetConfig+0x2cc>)
20007736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000773a:	f003 030c 	and.w	r3, r3, #12
2000773e:	2b0c      	cmp	r3, #12
20007740:	d828      	bhi.n	20007794 <UART_SetConfig+0x128>
20007742:	a201      	add	r2, pc, #4	@ (adr r2, 20007748 <UART_SetConfig+0xdc>)
20007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20007748:	2000777d 	.word	0x2000777d
2000774c:	20007795 	.word	0x20007795
20007750:	20007795 	.word	0x20007795
20007754:	20007795 	.word	0x20007795
20007758:	20007789 	.word	0x20007789
2000775c:	20007795 	.word	0x20007795
20007760:	20007795 	.word	0x20007795
20007764:	20007795 	.word	0x20007795
20007768:	20007783 	.word	0x20007783
2000776c:	20007795 	.word	0x20007795
20007770:	20007795 	.word	0x20007795
20007774:	20007795 	.word	0x20007795
20007778:	2000778f 	.word	0x2000778f
2000777c:	2300      	movs	r3, #0
2000777e:	77fb      	strb	r3, [r7, #31]
20007780:	e118      	b.n	200079b4 <UART_SetConfig+0x348>
20007782:	2302      	movs	r3, #2
20007784:	77fb      	strb	r3, [r7, #31]
20007786:	e115      	b.n	200079b4 <UART_SetConfig+0x348>
20007788:	2304      	movs	r3, #4
2000778a:	77fb      	strb	r3, [r7, #31]
2000778c:	e112      	b.n	200079b4 <UART_SetConfig+0x348>
2000778e:	2308      	movs	r3, #8
20007790:	77fb      	strb	r3, [r7, #31]
20007792:	e10f      	b.n	200079b4 <UART_SetConfig+0x348>
20007794:	2310      	movs	r3, #16
20007796:	77fb      	strb	r3, [r7, #31]
20007798:	e10c      	b.n	200079b4 <UART_SetConfig+0x348>
2000779a:	687b      	ldr	r3, [r7, #4]
2000779c:	681b      	ldr	r3, [r3, #0]
2000779e:	4a68      	ldr	r2, [pc, #416]	@ (20007940 <UART_SetConfig+0x2d4>)
200077a0:	4293      	cmp	r3, r2
200077a2:	d120      	bne.n	200077e6 <UART_SetConfig+0x17a>
200077a4:	4b64      	ldr	r3, [pc, #400]	@ (20007938 <UART_SetConfig+0x2cc>)
200077a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200077aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
200077ae:	2b30      	cmp	r3, #48	@ 0x30
200077b0:	d013      	beq.n	200077da <UART_SetConfig+0x16e>
200077b2:	2b30      	cmp	r3, #48	@ 0x30
200077b4:	d814      	bhi.n	200077e0 <UART_SetConfig+0x174>
200077b6:	2b20      	cmp	r3, #32
200077b8:	d009      	beq.n	200077ce <UART_SetConfig+0x162>
200077ba:	2b20      	cmp	r3, #32
200077bc:	d810      	bhi.n	200077e0 <UART_SetConfig+0x174>
200077be:	2b00      	cmp	r3, #0
200077c0:	d002      	beq.n	200077c8 <UART_SetConfig+0x15c>
200077c2:	2b10      	cmp	r3, #16
200077c4:	d006      	beq.n	200077d4 <UART_SetConfig+0x168>
200077c6:	e00b      	b.n	200077e0 <UART_SetConfig+0x174>
200077c8:	2300      	movs	r3, #0
200077ca:	77fb      	strb	r3, [r7, #31]
200077cc:	e0f2      	b.n	200079b4 <UART_SetConfig+0x348>
200077ce:	2302      	movs	r3, #2
200077d0:	77fb      	strb	r3, [r7, #31]
200077d2:	e0ef      	b.n	200079b4 <UART_SetConfig+0x348>
200077d4:	2304      	movs	r3, #4
200077d6:	77fb      	strb	r3, [r7, #31]
200077d8:	e0ec      	b.n	200079b4 <UART_SetConfig+0x348>
200077da:	2308      	movs	r3, #8
200077dc:	77fb      	strb	r3, [r7, #31]
200077de:	e0e9      	b.n	200079b4 <UART_SetConfig+0x348>
200077e0:	2310      	movs	r3, #16
200077e2:	77fb      	strb	r3, [r7, #31]
200077e4:	e0e6      	b.n	200079b4 <UART_SetConfig+0x348>
200077e6:	687b      	ldr	r3, [r7, #4]
200077e8:	681b      	ldr	r3, [r3, #0]
200077ea:	4a56      	ldr	r2, [pc, #344]	@ (20007944 <UART_SetConfig+0x2d8>)
200077ec:	4293      	cmp	r3, r2
200077ee:	d120      	bne.n	20007832 <UART_SetConfig+0x1c6>
200077f0:	4b51      	ldr	r3, [pc, #324]	@ (20007938 <UART_SetConfig+0x2cc>)
200077f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200077f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
200077fa:	2bc0      	cmp	r3, #192	@ 0xc0
200077fc:	d013      	beq.n	20007826 <UART_SetConfig+0x1ba>
200077fe:	2bc0      	cmp	r3, #192	@ 0xc0
20007800:	d814      	bhi.n	2000782c <UART_SetConfig+0x1c0>
20007802:	2b80      	cmp	r3, #128	@ 0x80
20007804:	d009      	beq.n	2000781a <UART_SetConfig+0x1ae>
20007806:	2b80      	cmp	r3, #128	@ 0x80
20007808:	d810      	bhi.n	2000782c <UART_SetConfig+0x1c0>
2000780a:	2b00      	cmp	r3, #0
2000780c:	d002      	beq.n	20007814 <UART_SetConfig+0x1a8>
2000780e:	2b40      	cmp	r3, #64	@ 0x40
20007810:	d006      	beq.n	20007820 <UART_SetConfig+0x1b4>
20007812:	e00b      	b.n	2000782c <UART_SetConfig+0x1c0>
20007814:	2300      	movs	r3, #0
20007816:	77fb      	strb	r3, [r7, #31]
20007818:	e0cc      	b.n	200079b4 <UART_SetConfig+0x348>
2000781a:	2302      	movs	r3, #2
2000781c:	77fb      	strb	r3, [r7, #31]
2000781e:	e0c9      	b.n	200079b4 <UART_SetConfig+0x348>
20007820:	2304      	movs	r3, #4
20007822:	77fb      	strb	r3, [r7, #31]
20007824:	e0c6      	b.n	200079b4 <UART_SetConfig+0x348>
20007826:	2308      	movs	r3, #8
20007828:	77fb      	strb	r3, [r7, #31]
2000782a:	e0c3      	b.n	200079b4 <UART_SetConfig+0x348>
2000782c:	2310      	movs	r3, #16
2000782e:	77fb      	strb	r3, [r7, #31]
20007830:	e0c0      	b.n	200079b4 <UART_SetConfig+0x348>
20007832:	687b      	ldr	r3, [r7, #4]
20007834:	681b      	ldr	r3, [r3, #0]
20007836:	4a44      	ldr	r2, [pc, #272]	@ (20007948 <UART_SetConfig+0x2dc>)
20007838:	4293      	cmp	r3, r2
2000783a:	d125      	bne.n	20007888 <UART_SetConfig+0x21c>
2000783c:	4b3e      	ldr	r3, [pc, #248]	@ (20007938 <UART_SetConfig+0x2cc>)
2000783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20007846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
2000784a:	d017      	beq.n	2000787c <UART_SetConfig+0x210>
2000784c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20007850:	d817      	bhi.n	20007882 <UART_SetConfig+0x216>
20007852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20007856:	d00b      	beq.n	20007870 <UART_SetConfig+0x204>
20007858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2000785c:	d811      	bhi.n	20007882 <UART_SetConfig+0x216>
2000785e:	2b00      	cmp	r3, #0
20007860:	d003      	beq.n	2000786a <UART_SetConfig+0x1fe>
20007862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20007866:	d006      	beq.n	20007876 <UART_SetConfig+0x20a>
20007868:	e00b      	b.n	20007882 <UART_SetConfig+0x216>
2000786a:	2300      	movs	r3, #0
2000786c:	77fb      	strb	r3, [r7, #31]
2000786e:	e0a1      	b.n	200079b4 <UART_SetConfig+0x348>
20007870:	2302      	movs	r3, #2
20007872:	77fb      	strb	r3, [r7, #31]
20007874:	e09e      	b.n	200079b4 <UART_SetConfig+0x348>
20007876:	2304      	movs	r3, #4
20007878:	77fb      	strb	r3, [r7, #31]
2000787a:	e09b      	b.n	200079b4 <UART_SetConfig+0x348>
2000787c:	2308      	movs	r3, #8
2000787e:	77fb      	strb	r3, [r7, #31]
20007880:	e098      	b.n	200079b4 <UART_SetConfig+0x348>
20007882:	2310      	movs	r3, #16
20007884:	77fb      	strb	r3, [r7, #31]
20007886:	e095      	b.n	200079b4 <UART_SetConfig+0x348>
20007888:	687b      	ldr	r3, [r7, #4]
2000788a:	681b      	ldr	r3, [r3, #0]
2000788c:	4a2f      	ldr	r2, [pc, #188]	@ (2000794c <UART_SetConfig+0x2e0>)
2000788e:	4293      	cmp	r3, r2
20007890:	d125      	bne.n	200078de <UART_SetConfig+0x272>
20007892:	4b29      	ldr	r3, [pc, #164]	@ (20007938 <UART_SetConfig+0x2cc>)
20007894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20007898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
2000789c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
200078a0:	d017      	beq.n	200078d2 <UART_SetConfig+0x266>
200078a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
200078a6:	d817      	bhi.n	200078d8 <UART_SetConfig+0x26c>
200078a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
200078ac:	d00b      	beq.n	200078c6 <UART_SetConfig+0x25a>
200078ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
200078b2:	d811      	bhi.n	200078d8 <UART_SetConfig+0x26c>
200078b4:	2b00      	cmp	r3, #0
200078b6:	d003      	beq.n	200078c0 <UART_SetConfig+0x254>
200078b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
200078bc:	d006      	beq.n	200078cc <UART_SetConfig+0x260>
200078be:	e00b      	b.n	200078d8 <UART_SetConfig+0x26c>
200078c0:	2301      	movs	r3, #1
200078c2:	77fb      	strb	r3, [r7, #31]
200078c4:	e076      	b.n	200079b4 <UART_SetConfig+0x348>
200078c6:	2302      	movs	r3, #2
200078c8:	77fb      	strb	r3, [r7, #31]
200078ca:	e073      	b.n	200079b4 <UART_SetConfig+0x348>
200078cc:	2304      	movs	r3, #4
200078ce:	77fb      	strb	r3, [r7, #31]
200078d0:	e070      	b.n	200079b4 <UART_SetConfig+0x348>
200078d2:	2308      	movs	r3, #8
200078d4:	77fb      	strb	r3, [r7, #31]
200078d6:	e06d      	b.n	200079b4 <UART_SetConfig+0x348>
200078d8:	2310      	movs	r3, #16
200078da:	77fb      	strb	r3, [r7, #31]
200078dc:	e06a      	b.n	200079b4 <UART_SetConfig+0x348>
200078de:	687b      	ldr	r3, [r7, #4]
200078e0:	681b      	ldr	r3, [r3, #0]
200078e2:	4a1b      	ldr	r2, [pc, #108]	@ (20007950 <UART_SetConfig+0x2e4>)
200078e4:	4293      	cmp	r3, r2
200078e6:	d138      	bne.n	2000795a <UART_SetConfig+0x2ee>
200078e8:	4b13      	ldr	r3, [pc, #76]	@ (20007938 <UART_SetConfig+0x2cc>)
200078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200078ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
200078f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
200078f6:	d017      	beq.n	20007928 <UART_SetConfig+0x2bc>
200078f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
200078fc:	d82a      	bhi.n	20007954 <UART_SetConfig+0x2e8>
200078fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20007902:	d00b      	beq.n	2000791c <UART_SetConfig+0x2b0>
20007904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20007908:	d824      	bhi.n	20007954 <UART_SetConfig+0x2e8>
2000790a:	2b00      	cmp	r3, #0
2000790c:	d003      	beq.n	20007916 <UART_SetConfig+0x2aa>
2000790e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20007912:	d006      	beq.n	20007922 <UART_SetConfig+0x2b6>
20007914:	e01e      	b.n	20007954 <UART_SetConfig+0x2e8>
20007916:	2300      	movs	r3, #0
20007918:	77fb      	strb	r3, [r7, #31]
2000791a:	e04b      	b.n	200079b4 <UART_SetConfig+0x348>
2000791c:	2302      	movs	r3, #2
2000791e:	77fb      	strb	r3, [r7, #31]
20007920:	e048      	b.n	200079b4 <UART_SetConfig+0x348>
20007922:	2304      	movs	r3, #4
20007924:	77fb      	strb	r3, [r7, #31]
20007926:	e045      	b.n	200079b4 <UART_SetConfig+0x348>
20007928:	2308      	movs	r3, #8
2000792a:	77fb      	strb	r3, [r7, #31]
2000792c:	e042      	b.n	200079b4 <UART_SetConfig+0x348>
2000792e:	bf00      	nop
20007930:	efff69f3 	.word	0xefff69f3
20007934:	40011000 	.word	0x40011000
20007938:	40023800 	.word	0x40023800
2000793c:	40004400 	.word	0x40004400
20007940:	40004800 	.word	0x40004800
20007944:	40004c00 	.word	0x40004c00
20007948:	40005000 	.word	0x40005000
2000794c:	40011400 	.word	0x40011400
20007950:	40007800 	.word	0x40007800
20007954:	2310      	movs	r3, #16
20007956:	77fb      	strb	r3, [r7, #31]
20007958:	e02c      	b.n	200079b4 <UART_SetConfig+0x348>
2000795a:	687b      	ldr	r3, [r7, #4]
2000795c:	681b      	ldr	r3, [r3, #0]
2000795e:	4a72      	ldr	r2, [pc, #456]	@ (20007b28 <UART_SetConfig+0x4bc>)
20007960:	4293      	cmp	r3, r2
20007962:	d125      	bne.n	200079b0 <UART_SetConfig+0x344>
20007964:	4b71      	ldr	r3, [pc, #452]	@ (20007b2c <UART_SetConfig+0x4c0>)
20007966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000796a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
2000796e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20007972:	d017      	beq.n	200079a4 <UART_SetConfig+0x338>
20007974:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20007978:	d817      	bhi.n	200079aa <UART_SetConfig+0x33e>
2000797a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000797e:	d00b      	beq.n	20007998 <UART_SetConfig+0x32c>
20007980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20007984:	d811      	bhi.n	200079aa <UART_SetConfig+0x33e>
20007986:	2b00      	cmp	r3, #0
20007988:	d003      	beq.n	20007992 <UART_SetConfig+0x326>
2000798a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2000798e:	d006      	beq.n	2000799e <UART_SetConfig+0x332>
20007990:	e00b      	b.n	200079aa <UART_SetConfig+0x33e>
20007992:	2300      	movs	r3, #0
20007994:	77fb      	strb	r3, [r7, #31]
20007996:	e00d      	b.n	200079b4 <UART_SetConfig+0x348>
20007998:	2302      	movs	r3, #2
2000799a:	77fb      	strb	r3, [r7, #31]
2000799c:	e00a      	b.n	200079b4 <UART_SetConfig+0x348>
2000799e:	2304      	movs	r3, #4
200079a0:	77fb      	strb	r3, [r7, #31]
200079a2:	e007      	b.n	200079b4 <UART_SetConfig+0x348>
200079a4:	2308      	movs	r3, #8
200079a6:	77fb      	strb	r3, [r7, #31]
200079a8:	e004      	b.n	200079b4 <UART_SetConfig+0x348>
200079aa:	2310      	movs	r3, #16
200079ac:	77fb      	strb	r3, [r7, #31]
200079ae:	e001      	b.n	200079b4 <UART_SetConfig+0x348>
200079b0:	2310      	movs	r3, #16
200079b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
200079b4:	687b      	ldr	r3, [r7, #4]
200079b6:	69db      	ldr	r3, [r3, #28]
200079b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
200079bc:	d15b      	bne.n	20007a76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
200079be:	7ffb      	ldrb	r3, [r7, #31]
200079c0:	2b08      	cmp	r3, #8
200079c2:	d828      	bhi.n	20007a16 <UART_SetConfig+0x3aa>
200079c4:	a201      	add	r2, pc, #4	@ (adr r2, 200079cc <UART_SetConfig+0x360>)
200079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200079ca:	bf00      	nop
200079cc:	200079f1 	.word	0x200079f1
200079d0:	200079f9 	.word	0x200079f9
200079d4:	20007a01 	.word	0x20007a01
200079d8:	20007a17 	.word	0x20007a17
200079dc:	20007a07 	.word	0x20007a07
200079e0:	20007a17 	.word	0x20007a17
200079e4:	20007a17 	.word	0x20007a17
200079e8:	20007a17 	.word	0x20007a17
200079ec:	20007a0f 	.word	0x20007a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
200079f0:	f7ff f92a 	bl	20006c48 <HAL_RCC_GetPCLK1Freq>
200079f4:	61b8      	str	r0, [r7, #24]
        break;
200079f6:	e013      	b.n	20007a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
200079f8:	f7ff f93a 	bl	20006c70 <HAL_RCC_GetPCLK2Freq>
200079fc:	61b8      	str	r0, [r7, #24]
        break;
200079fe:	e00f      	b.n	20007a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20007a00:	4b4b      	ldr	r3, [pc, #300]	@ (20007b30 <UART_SetConfig+0x4c4>)
20007a02:	61bb      	str	r3, [r7, #24]
        break;
20007a04:	e00c      	b.n	20007a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20007a06:	f7ff f80d 	bl	20006a24 <HAL_RCC_GetSysClockFreq>
20007a0a:	61b8      	str	r0, [r7, #24]
        break;
20007a0c:	e008      	b.n	20007a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20007a12:	61bb      	str	r3, [r7, #24]
        break;
20007a14:	e004      	b.n	20007a20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
20007a16:	2300      	movs	r3, #0
20007a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20007a1a:	2301      	movs	r3, #1
20007a1c:	77bb      	strb	r3, [r7, #30]
        break;
20007a1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
20007a20:	69bb      	ldr	r3, [r7, #24]
20007a22:	2b00      	cmp	r3, #0
20007a24:	d074      	beq.n	20007b10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
20007a26:	69bb      	ldr	r3, [r7, #24]
20007a28:	005a      	lsls	r2, r3, #1
20007a2a:	687b      	ldr	r3, [r7, #4]
20007a2c:	685b      	ldr	r3, [r3, #4]
20007a2e:	085b      	lsrs	r3, r3, #1
20007a30:	441a      	add	r2, r3
20007a32:	687b      	ldr	r3, [r7, #4]
20007a34:	685b      	ldr	r3, [r3, #4]
20007a36:	fbb2 f3f3 	udiv	r3, r2, r3
20007a3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
20007a3c:	693b      	ldr	r3, [r7, #16]
20007a3e:	2b0f      	cmp	r3, #15
20007a40:	d916      	bls.n	20007a70 <UART_SetConfig+0x404>
20007a42:	693b      	ldr	r3, [r7, #16]
20007a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20007a48:	d212      	bcs.n	20007a70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
20007a4a:	693b      	ldr	r3, [r7, #16]
20007a4c:	b29b      	uxth	r3, r3
20007a4e:	f023 030f 	bic.w	r3, r3, #15
20007a52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
20007a54:	693b      	ldr	r3, [r7, #16]
20007a56:	085b      	lsrs	r3, r3, #1
20007a58:	b29b      	uxth	r3, r3
20007a5a:	f003 0307 	and.w	r3, r3, #7
20007a5e:	b29a      	uxth	r2, r3
20007a60:	89fb      	ldrh	r3, [r7, #14]
20007a62:	4313      	orrs	r3, r2
20007a64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
20007a66:	687b      	ldr	r3, [r7, #4]
20007a68:	681b      	ldr	r3, [r3, #0]
20007a6a:	89fa      	ldrh	r2, [r7, #14]
20007a6c:	60da      	str	r2, [r3, #12]
20007a6e:	e04f      	b.n	20007b10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20007a70:	2301      	movs	r3, #1
20007a72:	77bb      	strb	r3, [r7, #30]
20007a74:	e04c      	b.n	20007b10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
20007a76:	7ffb      	ldrb	r3, [r7, #31]
20007a78:	2b08      	cmp	r3, #8
20007a7a:	d828      	bhi.n	20007ace <UART_SetConfig+0x462>
20007a7c:	a201      	add	r2, pc, #4	@ (adr r2, 20007a84 <UART_SetConfig+0x418>)
20007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20007a82:	bf00      	nop
20007a84:	20007aa9 	.word	0x20007aa9
20007a88:	20007ab1 	.word	0x20007ab1
20007a8c:	20007ab9 	.word	0x20007ab9
20007a90:	20007acf 	.word	0x20007acf
20007a94:	20007abf 	.word	0x20007abf
20007a98:	20007acf 	.word	0x20007acf
20007a9c:	20007acf 	.word	0x20007acf
20007aa0:	20007acf 	.word	0x20007acf
20007aa4:	20007ac7 	.word	0x20007ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20007aa8:	f7ff f8ce 	bl	20006c48 <HAL_RCC_GetPCLK1Freq>
20007aac:	61b8      	str	r0, [r7, #24]
        break;
20007aae:	e013      	b.n	20007ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20007ab0:	f7ff f8de 	bl	20006c70 <HAL_RCC_GetPCLK2Freq>
20007ab4:	61b8      	str	r0, [r7, #24]
        break;
20007ab6:	e00f      	b.n	20007ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20007ab8:	4b1d      	ldr	r3, [pc, #116]	@ (20007b30 <UART_SetConfig+0x4c4>)
20007aba:	61bb      	str	r3, [r7, #24]
        break;
20007abc:	e00c      	b.n	20007ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20007abe:	f7fe ffb1 	bl	20006a24 <HAL_RCC_GetSysClockFreq>
20007ac2:	61b8      	str	r0, [r7, #24]
        break;
20007ac4:	e008      	b.n	20007ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
20007ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20007aca:	61bb      	str	r3, [r7, #24]
        break;
20007acc:	e004      	b.n	20007ad8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
20007ace:	2300      	movs	r3, #0
20007ad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
20007ad2:	2301      	movs	r3, #1
20007ad4:	77bb      	strb	r3, [r7, #30]
        break;
20007ad6:	bf00      	nop
    }

    if (pclk != 0U)
20007ad8:	69bb      	ldr	r3, [r7, #24]
20007ada:	2b00      	cmp	r3, #0
20007adc:	d018      	beq.n	20007b10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
20007ade:	687b      	ldr	r3, [r7, #4]
20007ae0:	685b      	ldr	r3, [r3, #4]
20007ae2:	085a      	lsrs	r2, r3, #1
20007ae4:	69bb      	ldr	r3, [r7, #24]
20007ae6:	441a      	add	r2, r3
20007ae8:	687b      	ldr	r3, [r7, #4]
20007aea:	685b      	ldr	r3, [r3, #4]
20007aec:	fbb2 f3f3 	udiv	r3, r2, r3
20007af0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
20007af2:	693b      	ldr	r3, [r7, #16]
20007af4:	2b0f      	cmp	r3, #15
20007af6:	d909      	bls.n	20007b0c <UART_SetConfig+0x4a0>
20007af8:	693b      	ldr	r3, [r7, #16]
20007afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20007afe:	d205      	bcs.n	20007b0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
20007b00:	693b      	ldr	r3, [r7, #16]
20007b02:	b29a      	uxth	r2, r3
20007b04:	687b      	ldr	r3, [r7, #4]
20007b06:	681b      	ldr	r3, [r3, #0]
20007b08:	60da      	str	r2, [r3, #12]
20007b0a:	e001      	b.n	20007b10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20007b0c:	2301      	movs	r3, #1
20007b0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
20007b10:	687b      	ldr	r3, [r7, #4]
20007b12:	2200      	movs	r2, #0
20007b14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
20007b16:	687b      	ldr	r3, [r7, #4]
20007b18:	2200      	movs	r2, #0
20007b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
20007b1c:	7fbb      	ldrb	r3, [r7, #30]
}
20007b1e:	4618      	mov	r0, r3
20007b20:	3720      	adds	r7, #32
20007b22:	46bd      	mov	sp, r7
20007b24:	bd80      	pop	{r7, pc}
20007b26:	bf00      	nop
20007b28:	40007c00 	.word	0x40007c00
20007b2c:	40023800 	.word	0x40023800
20007b30:	00f42400 	.word	0x00f42400

20007b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
20007b34:	b480      	push	{r7}
20007b36:	b083      	sub	sp, #12
20007b38:	af00      	add	r7, sp, #0
20007b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
20007b3c:	687b      	ldr	r3, [r7, #4]
20007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007b40:	f003 0308 	and.w	r3, r3, #8
20007b44:	2b00      	cmp	r3, #0
20007b46:	d00a      	beq.n	20007b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
20007b48:	687b      	ldr	r3, [r7, #4]
20007b4a:	681b      	ldr	r3, [r3, #0]
20007b4c:	685b      	ldr	r3, [r3, #4]
20007b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
20007b52:	687b      	ldr	r3, [r7, #4]
20007b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20007b56:	687b      	ldr	r3, [r7, #4]
20007b58:	681b      	ldr	r3, [r3, #0]
20007b5a:	430a      	orrs	r2, r1
20007b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
20007b5e:	687b      	ldr	r3, [r7, #4]
20007b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007b62:	f003 0301 	and.w	r3, r3, #1
20007b66:	2b00      	cmp	r3, #0
20007b68:	d00a      	beq.n	20007b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
20007b6a:	687b      	ldr	r3, [r7, #4]
20007b6c:	681b      	ldr	r3, [r3, #0]
20007b6e:	685b      	ldr	r3, [r3, #4]
20007b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
20007b74:	687b      	ldr	r3, [r7, #4]
20007b76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20007b78:	687b      	ldr	r3, [r7, #4]
20007b7a:	681b      	ldr	r3, [r3, #0]
20007b7c:	430a      	orrs	r2, r1
20007b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
20007b80:	687b      	ldr	r3, [r7, #4]
20007b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007b84:	f003 0302 	and.w	r3, r3, #2
20007b88:	2b00      	cmp	r3, #0
20007b8a:	d00a      	beq.n	20007ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
20007b8c:	687b      	ldr	r3, [r7, #4]
20007b8e:	681b      	ldr	r3, [r3, #0]
20007b90:	685b      	ldr	r3, [r3, #4]
20007b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
20007b96:	687b      	ldr	r3, [r7, #4]
20007b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20007b9a:	687b      	ldr	r3, [r7, #4]
20007b9c:	681b      	ldr	r3, [r3, #0]
20007b9e:	430a      	orrs	r2, r1
20007ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
20007ba2:	687b      	ldr	r3, [r7, #4]
20007ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007ba6:	f003 0304 	and.w	r3, r3, #4
20007baa:	2b00      	cmp	r3, #0
20007bac:	d00a      	beq.n	20007bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
20007bae:	687b      	ldr	r3, [r7, #4]
20007bb0:	681b      	ldr	r3, [r3, #0]
20007bb2:	685b      	ldr	r3, [r3, #4]
20007bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
20007bb8:	687b      	ldr	r3, [r7, #4]
20007bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20007bbc:	687b      	ldr	r3, [r7, #4]
20007bbe:	681b      	ldr	r3, [r3, #0]
20007bc0:	430a      	orrs	r2, r1
20007bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
20007bc4:	687b      	ldr	r3, [r7, #4]
20007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007bc8:	f003 0310 	and.w	r3, r3, #16
20007bcc:	2b00      	cmp	r3, #0
20007bce:	d00a      	beq.n	20007be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
20007bd0:	687b      	ldr	r3, [r7, #4]
20007bd2:	681b      	ldr	r3, [r3, #0]
20007bd4:	689b      	ldr	r3, [r3, #8]
20007bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
20007bda:	687b      	ldr	r3, [r7, #4]
20007bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
20007bde:	687b      	ldr	r3, [r7, #4]
20007be0:	681b      	ldr	r3, [r3, #0]
20007be2:	430a      	orrs	r2, r1
20007be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
20007be6:	687b      	ldr	r3, [r7, #4]
20007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007bea:	f003 0320 	and.w	r3, r3, #32
20007bee:	2b00      	cmp	r3, #0
20007bf0:	d00a      	beq.n	20007c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
20007bf2:	687b      	ldr	r3, [r7, #4]
20007bf4:	681b      	ldr	r3, [r3, #0]
20007bf6:	689b      	ldr	r3, [r3, #8]
20007bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
20007bfc:	687b      	ldr	r3, [r7, #4]
20007bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20007c00:	687b      	ldr	r3, [r7, #4]
20007c02:	681b      	ldr	r3, [r3, #0]
20007c04:	430a      	orrs	r2, r1
20007c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
20007c08:	687b      	ldr	r3, [r7, #4]
20007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20007c10:	2b00      	cmp	r3, #0
20007c12:	d01a      	beq.n	20007c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
20007c14:	687b      	ldr	r3, [r7, #4]
20007c16:	681b      	ldr	r3, [r3, #0]
20007c18:	685b      	ldr	r3, [r3, #4]
20007c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
20007c1e:	687b      	ldr	r3, [r7, #4]
20007c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
20007c22:	687b      	ldr	r3, [r7, #4]
20007c24:	681b      	ldr	r3, [r3, #0]
20007c26:	430a      	orrs	r2, r1
20007c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
20007c2a:	687b      	ldr	r3, [r7, #4]
20007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20007c32:	d10a      	bne.n	20007c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
20007c34:	687b      	ldr	r3, [r7, #4]
20007c36:	681b      	ldr	r3, [r3, #0]
20007c38:	685b      	ldr	r3, [r3, #4]
20007c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
20007c3e:	687b      	ldr	r3, [r7, #4]
20007c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
20007c42:	687b      	ldr	r3, [r7, #4]
20007c44:	681b      	ldr	r3, [r3, #0]
20007c46:	430a      	orrs	r2, r1
20007c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
20007c4a:	687b      	ldr	r3, [r7, #4]
20007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20007c52:	2b00      	cmp	r3, #0
20007c54:	d00a      	beq.n	20007c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
20007c56:	687b      	ldr	r3, [r7, #4]
20007c58:	681b      	ldr	r3, [r3, #0]
20007c5a:	685b      	ldr	r3, [r3, #4]
20007c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
20007c60:	687b      	ldr	r3, [r7, #4]
20007c62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
20007c64:	687b      	ldr	r3, [r7, #4]
20007c66:	681b      	ldr	r3, [r3, #0]
20007c68:	430a      	orrs	r2, r1
20007c6a:	605a      	str	r2, [r3, #4]
  }
}
20007c6c:	bf00      	nop
20007c6e:	370c      	adds	r7, #12
20007c70:	46bd      	mov	sp, r7
20007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
20007c76:	4770      	bx	lr

20007c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
20007c78:	b580      	push	{r7, lr}
20007c7a:	b08c      	sub	sp, #48	@ 0x30
20007c7c:	af02      	add	r7, sp, #8
20007c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20007c80:	687b      	ldr	r3, [r7, #4]
20007c82:	2200      	movs	r2, #0
20007c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
20007c88:	f7fc f9e2 	bl	20004050 <HAL_GetTick>
20007c8c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
20007c8e:	687b      	ldr	r3, [r7, #4]
20007c90:	681b      	ldr	r3, [r3, #0]
20007c92:	681b      	ldr	r3, [r3, #0]
20007c94:	f003 0308 	and.w	r3, r3, #8
20007c98:	2b08      	cmp	r3, #8
20007c9a:	d12e      	bne.n	20007cfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
20007c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
20007ca0:	9300      	str	r3, [sp, #0]
20007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20007ca4:	2200      	movs	r2, #0
20007ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
20007caa:	6878      	ldr	r0, [r7, #4]
20007cac:	f000 f83b 	bl	20007d26 <UART_WaitOnFlagUntilTimeout>
20007cb0:	4603      	mov	r3, r0
20007cb2:	2b00      	cmp	r3, #0
20007cb4:	d021      	beq.n	20007cfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
20007cb6:	687b      	ldr	r3, [r7, #4]
20007cb8:	681b      	ldr	r3, [r3, #0]
20007cba:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20007cbc:	693b      	ldr	r3, [r7, #16]
20007cbe:	e853 3f00 	ldrex	r3, [r3]
20007cc2:	60fb      	str	r3, [r7, #12]
   return(result);
20007cc4:	68fb      	ldr	r3, [r7, #12]
20007cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
20007cca:	623b      	str	r3, [r7, #32]
20007ccc:	687b      	ldr	r3, [r7, #4]
20007cce:	681b      	ldr	r3, [r3, #0]
20007cd0:	461a      	mov	r2, r3
20007cd2:	6a3b      	ldr	r3, [r7, #32]
20007cd4:	61fb      	str	r3, [r7, #28]
20007cd6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20007cd8:	69b9      	ldr	r1, [r7, #24]
20007cda:	69fa      	ldr	r2, [r7, #28]
20007cdc:	e841 2300 	strex	r3, r2, [r1]
20007ce0:	617b      	str	r3, [r7, #20]
   return(result);
20007ce2:	697b      	ldr	r3, [r7, #20]
20007ce4:	2b00      	cmp	r3, #0
20007ce6:	d1e6      	bne.n	20007cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
20007ce8:	687b      	ldr	r3, [r7, #4]
20007cea:	2220      	movs	r2, #32
20007cec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
20007cee:	687b      	ldr	r3, [r7, #4]
20007cf0:	2200      	movs	r2, #0
20007cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
20007cf6:	2303      	movs	r3, #3
20007cf8:	e011      	b.n	20007d1e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
20007cfa:	687b      	ldr	r3, [r7, #4]
20007cfc:	2220      	movs	r2, #32
20007cfe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
20007d00:	687b      	ldr	r3, [r7, #4]
20007d02:	2220      	movs	r2, #32
20007d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
20007d08:	687b      	ldr	r3, [r7, #4]
20007d0a:	2200      	movs	r2, #0
20007d0c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
20007d0e:	687b      	ldr	r3, [r7, #4]
20007d10:	2200      	movs	r2, #0
20007d12:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
20007d14:	687b      	ldr	r3, [r7, #4]
20007d16:	2200      	movs	r2, #0
20007d18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
20007d1c:	2300      	movs	r3, #0
}
20007d1e:	4618      	mov	r0, r3
20007d20:	3728      	adds	r7, #40	@ 0x28
20007d22:	46bd      	mov	sp, r7
20007d24:	bd80      	pop	{r7, pc}

20007d26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
20007d26:	b580      	push	{r7, lr}
20007d28:	b084      	sub	sp, #16
20007d2a:	af00      	add	r7, sp, #0
20007d2c:	60f8      	str	r0, [r7, #12]
20007d2e:	60b9      	str	r1, [r7, #8]
20007d30:	603b      	str	r3, [r7, #0]
20007d32:	4613      	mov	r3, r2
20007d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
20007d36:	e04f      	b.n	20007dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
20007d38:	69bb      	ldr	r3, [r7, #24]
20007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
20007d3e:	d04b      	beq.n	20007dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20007d40:	f7fc f986 	bl	20004050 <HAL_GetTick>
20007d44:	4602      	mov	r2, r0
20007d46:	683b      	ldr	r3, [r7, #0]
20007d48:	1ad3      	subs	r3, r2, r3
20007d4a:	69ba      	ldr	r2, [r7, #24]
20007d4c:	429a      	cmp	r2, r3
20007d4e:	d302      	bcc.n	20007d56 <UART_WaitOnFlagUntilTimeout+0x30>
20007d50:	69bb      	ldr	r3, [r7, #24]
20007d52:	2b00      	cmp	r3, #0
20007d54:	d101      	bne.n	20007d5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
20007d56:	2303      	movs	r3, #3
20007d58:	e04e      	b.n	20007df8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
20007d5a:	68fb      	ldr	r3, [r7, #12]
20007d5c:	681b      	ldr	r3, [r3, #0]
20007d5e:	681b      	ldr	r3, [r3, #0]
20007d60:	f003 0304 	and.w	r3, r3, #4
20007d64:	2b00      	cmp	r3, #0
20007d66:	d037      	beq.n	20007dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
20007d68:	68bb      	ldr	r3, [r7, #8]
20007d6a:	2b80      	cmp	r3, #128	@ 0x80
20007d6c:	d034      	beq.n	20007dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
20007d6e:	68bb      	ldr	r3, [r7, #8]
20007d70:	2b40      	cmp	r3, #64	@ 0x40
20007d72:	d031      	beq.n	20007dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
20007d74:	68fb      	ldr	r3, [r7, #12]
20007d76:	681b      	ldr	r3, [r3, #0]
20007d78:	69db      	ldr	r3, [r3, #28]
20007d7a:	f003 0308 	and.w	r3, r3, #8
20007d7e:	2b08      	cmp	r3, #8
20007d80:	d110      	bne.n	20007da4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
20007d82:	68fb      	ldr	r3, [r7, #12]
20007d84:	681b      	ldr	r3, [r3, #0]
20007d86:	2208      	movs	r2, #8
20007d88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
20007d8a:	68f8      	ldr	r0, [r7, #12]
20007d8c:	f000 f838 	bl	20007e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
20007d90:	68fb      	ldr	r3, [r7, #12]
20007d92:	2208      	movs	r2, #8
20007d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20007d98:	68fb      	ldr	r3, [r7, #12]
20007d9a:	2200      	movs	r2, #0
20007d9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
20007da0:	2301      	movs	r3, #1
20007da2:	e029      	b.n	20007df8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
20007da4:	68fb      	ldr	r3, [r7, #12]
20007da6:	681b      	ldr	r3, [r3, #0]
20007da8:	69db      	ldr	r3, [r3, #28]
20007daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20007dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20007db2:	d111      	bne.n	20007dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
20007db4:	68fb      	ldr	r3, [r7, #12]
20007db6:	681b      	ldr	r3, [r3, #0]
20007db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20007dbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
20007dbe:	68f8      	ldr	r0, [r7, #12]
20007dc0:	f000 f81e 	bl	20007e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
20007dc4:	68fb      	ldr	r3, [r7, #12]
20007dc6:	2220      	movs	r2, #32
20007dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20007dcc:	68fb      	ldr	r3, [r7, #12]
20007dce:	2200      	movs	r2, #0
20007dd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
20007dd4:	2303      	movs	r3, #3
20007dd6:	e00f      	b.n	20007df8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
20007dd8:	68fb      	ldr	r3, [r7, #12]
20007dda:	681b      	ldr	r3, [r3, #0]
20007ddc:	69da      	ldr	r2, [r3, #28]
20007dde:	68bb      	ldr	r3, [r7, #8]
20007de0:	4013      	ands	r3, r2
20007de2:	68ba      	ldr	r2, [r7, #8]
20007de4:	429a      	cmp	r2, r3
20007de6:	bf0c      	ite	eq
20007de8:	2301      	moveq	r3, #1
20007dea:	2300      	movne	r3, #0
20007dec:	b2db      	uxtb	r3, r3
20007dee:	461a      	mov	r2, r3
20007df0:	79fb      	ldrb	r3, [r7, #7]
20007df2:	429a      	cmp	r2, r3
20007df4:	d0a0      	beq.n	20007d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
20007df6:	2300      	movs	r3, #0
}
20007df8:	4618      	mov	r0, r3
20007dfa:	3710      	adds	r7, #16
20007dfc:	46bd      	mov	sp, r7
20007dfe:	bd80      	pop	{r7, pc}

20007e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
20007e00:	b480      	push	{r7}
20007e02:	b095      	sub	sp, #84	@ 0x54
20007e04:	af00      	add	r7, sp, #0
20007e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
20007e08:	687b      	ldr	r3, [r7, #4]
20007e0a:	681b      	ldr	r3, [r3, #0]
20007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20007e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20007e10:	e853 3f00 	ldrex	r3, [r3]
20007e14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
20007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20007e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
20007e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
20007e1e:	687b      	ldr	r3, [r7, #4]
20007e20:	681b      	ldr	r3, [r3, #0]
20007e22:	461a      	mov	r2, r3
20007e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20007e26:	643b      	str	r3, [r7, #64]	@ 0x40
20007e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20007e2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
20007e2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
20007e2e:	e841 2300 	strex	r3, r2, [r1]
20007e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
20007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20007e36:	2b00      	cmp	r3, #0
20007e38:	d1e6      	bne.n	20007e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
20007e3a:	687b      	ldr	r3, [r7, #4]
20007e3c:	681b      	ldr	r3, [r3, #0]
20007e3e:	3308      	adds	r3, #8
20007e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20007e42:	6a3b      	ldr	r3, [r7, #32]
20007e44:	e853 3f00 	ldrex	r3, [r3]
20007e48:	61fb      	str	r3, [r7, #28]
   return(result);
20007e4a:	69fb      	ldr	r3, [r7, #28]
20007e4c:	f023 0301 	bic.w	r3, r3, #1
20007e50:	64bb      	str	r3, [r7, #72]	@ 0x48
20007e52:	687b      	ldr	r3, [r7, #4]
20007e54:	681b      	ldr	r3, [r3, #0]
20007e56:	3308      	adds	r3, #8
20007e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
20007e5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
20007e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20007e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
20007e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20007e62:	e841 2300 	strex	r3, r2, [r1]
20007e66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
20007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20007e6a:	2b00      	cmp	r3, #0
20007e6c:	d1e5      	bne.n	20007e3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
20007e6e:	687b      	ldr	r3, [r7, #4]
20007e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007e72:	2b01      	cmp	r3, #1
20007e74:	d118      	bne.n	20007ea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
20007e76:	687b      	ldr	r3, [r7, #4]
20007e78:	681b      	ldr	r3, [r3, #0]
20007e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20007e7c:	68fb      	ldr	r3, [r7, #12]
20007e7e:	e853 3f00 	ldrex	r3, [r3]
20007e82:	60bb      	str	r3, [r7, #8]
   return(result);
20007e84:	68bb      	ldr	r3, [r7, #8]
20007e86:	f023 0310 	bic.w	r3, r3, #16
20007e8a:	647b      	str	r3, [r7, #68]	@ 0x44
20007e8c:	687b      	ldr	r3, [r7, #4]
20007e8e:	681b      	ldr	r3, [r3, #0]
20007e90:	461a      	mov	r2, r3
20007e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20007e94:	61bb      	str	r3, [r7, #24]
20007e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20007e98:	6979      	ldr	r1, [r7, #20]
20007e9a:	69ba      	ldr	r2, [r7, #24]
20007e9c:	e841 2300 	strex	r3, r2, [r1]
20007ea0:	613b      	str	r3, [r7, #16]
   return(result);
20007ea2:	693b      	ldr	r3, [r7, #16]
20007ea4:	2b00      	cmp	r3, #0
20007ea6:	d1e6      	bne.n	20007e76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
20007ea8:	687b      	ldr	r3, [r7, #4]
20007eaa:	2220      	movs	r2, #32
20007eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
20007eb0:	687b      	ldr	r3, [r7, #4]
20007eb2:	2200      	movs	r2, #0
20007eb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
20007eb6:	687b      	ldr	r3, [r7, #4]
20007eb8:	2200      	movs	r2, #0
20007eba:	669a      	str	r2, [r3, #104]	@ 0x68
}
20007ebc:	bf00      	nop
20007ebe:	3754      	adds	r7, #84	@ 0x54
20007ec0:	46bd      	mov	sp, r7
20007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
20007ec6:	4770      	bx	lr

20007ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
20007ec8:	b084      	sub	sp, #16
20007eca:	b580      	push	{r7, lr}
20007ecc:	b084      	sub	sp, #16
20007ece:	af00      	add	r7, sp, #0
20007ed0:	6078      	str	r0, [r7, #4]
20007ed2:	f107 001c 	add.w	r0, r7, #28
20007ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
20007eda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20007ede:	2b01      	cmp	r3, #1
20007ee0:	d121      	bne.n	20007f26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
20007ee2:	687b      	ldr	r3, [r7, #4]
20007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007ee6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
20007eea:	687b      	ldr	r3, [r7, #4]
20007eec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
20007eee:	687b      	ldr	r3, [r7, #4]
20007ef0:	68da      	ldr	r2, [r3, #12]
20007ef2:	4b21      	ldr	r3, [pc, #132]	@ (20007f78 <USB_CoreInit+0xb0>)
20007ef4:	4013      	ands	r3, r2
20007ef6:	687a      	ldr	r2, [r7, #4]
20007ef8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
20007efa:	687b      	ldr	r3, [r7, #4]
20007efc:	68db      	ldr	r3, [r3, #12]
20007efe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20007f02:	687b      	ldr	r3, [r7, #4]
20007f04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
20007f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
20007f0a:	2b01      	cmp	r3, #1
20007f0c:	d105      	bne.n	20007f1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
20007f0e:	687b      	ldr	r3, [r7, #4]
20007f10:	68db      	ldr	r3, [r3, #12]
20007f12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20007f16:	687b      	ldr	r3, [r7, #4]
20007f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
20007f1a:	6878      	ldr	r0, [r7, #4]
20007f1c:	f001 fae2 	bl	200094e4 <USB_CoreReset>
20007f20:	4603      	mov	r3, r0
20007f22:	73fb      	strb	r3, [r7, #15]
20007f24:	e010      	b.n	20007f48 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
20007f26:	687b      	ldr	r3, [r7, #4]
20007f28:	68db      	ldr	r3, [r3, #12]
20007f2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20007f2e:	687b      	ldr	r3, [r7, #4]
20007f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
20007f32:	6878      	ldr	r0, [r7, #4]
20007f34:	f001 fad6 	bl	200094e4 <USB_CoreReset>
20007f38:	4603      	mov	r3, r0
20007f3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
20007f3c:	687b      	ldr	r3, [r7, #4]
20007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007f40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
20007f44:	687b      	ldr	r3, [r7, #4]
20007f46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
20007f48:	7fbb      	ldrb	r3, [r7, #30]
20007f4a:	2b01      	cmp	r3, #1
20007f4c:	d10b      	bne.n	20007f66 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
20007f4e:	687b      	ldr	r3, [r7, #4]
20007f50:	689b      	ldr	r3, [r3, #8]
20007f52:	f043 0206 	orr.w	r2, r3, #6
20007f56:	687b      	ldr	r3, [r7, #4]
20007f58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
20007f5a:	687b      	ldr	r3, [r7, #4]
20007f5c:	689b      	ldr	r3, [r3, #8]
20007f5e:	f043 0220 	orr.w	r2, r3, #32
20007f62:	687b      	ldr	r3, [r7, #4]
20007f64:	609a      	str	r2, [r3, #8]
  }

  return ret;
20007f66:	7bfb      	ldrb	r3, [r7, #15]
}
20007f68:	4618      	mov	r0, r3
20007f6a:	3710      	adds	r7, #16
20007f6c:	46bd      	mov	sp, r7
20007f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20007f72:	b004      	add	sp, #16
20007f74:	4770      	bx	lr
20007f76:	bf00      	nop
20007f78:	ffbdffbf 	.word	0xffbdffbf

20007f7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
20007f7c:	b480      	push	{r7}
20007f7e:	b087      	sub	sp, #28
20007f80:	af00      	add	r7, sp, #0
20007f82:	60f8      	str	r0, [r7, #12]
20007f84:	60b9      	str	r1, [r7, #8]
20007f86:	4613      	mov	r3, r2
20007f88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
20007f8a:	79fb      	ldrb	r3, [r7, #7]
20007f8c:	2b02      	cmp	r3, #2
20007f8e:	d165      	bne.n	2000805c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
20007f90:	68bb      	ldr	r3, [r7, #8]
20007f92:	4a41      	ldr	r2, [pc, #260]	@ (20008098 <USB_SetTurnaroundTime+0x11c>)
20007f94:	4293      	cmp	r3, r2
20007f96:	d906      	bls.n	20007fa6 <USB_SetTurnaroundTime+0x2a>
20007f98:	68bb      	ldr	r3, [r7, #8]
20007f9a:	4a40      	ldr	r2, [pc, #256]	@ (2000809c <USB_SetTurnaroundTime+0x120>)
20007f9c:	4293      	cmp	r3, r2
20007f9e:	d202      	bcs.n	20007fa6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
20007fa0:	230f      	movs	r3, #15
20007fa2:	617b      	str	r3, [r7, #20]
20007fa4:	e062      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
20007fa6:	68bb      	ldr	r3, [r7, #8]
20007fa8:	4a3c      	ldr	r2, [pc, #240]	@ (2000809c <USB_SetTurnaroundTime+0x120>)
20007faa:	4293      	cmp	r3, r2
20007fac:	d306      	bcc.n	20007fbc <USB_SetTurnaroundTime+0x40>
20007fae:	68bb      	ldr	r3, [r7, #8]
20007fb0:	4a3b      	ldr	r2, [pc, #236]	@ (200080a0 <USB_SetTurnaroundTime+0x124>)
20007fb2:	4293      	cmp	r3, r2
20007fb4:	d202      	bcs.n	20007fbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
20007fb6:	230e      	movs	r3, #14
20007fb8:	617b      	str	r3, [r7, #20]
20007fba:	e057      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
20007fbc:	68bb      	ldr	r3, [r7, #8]
20007fbe:	4a38      	ldr	r2, [pc, #224]	@ (200080a0 <USB_SetTurnaroundTime+0x124>)
20007fc0:	4293      	cmp	r3, r2
20007fc2:	d306      	bcc.n	20007fd2 <USB_SetTurnaroundTime+0x56>
20007fc4:	68bb      	ldr	r3, [r7, #8]
20007fc6:	4a37      	ldr	r2, [pc, #220]	@ (200080a4 <USB_SetTurnaroundTime+0x128>)
20007fc8:	4293      	cmp	r3, r2
20007fca:	d202      	bcs.n	20007fd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
20007fcc:	230d      	movs	r3, #13
20007fce:	617b      	str	r3, [r7, #20]
20007fd0:	e04c      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
20007fd2:	68bb      	ldr	r3, [r7, #8]
20007fd4:	4a33      	ldr	r2, [pc, #204]	@ (200080a4 <USB_SetTurnaroundTime+0x128>)
20007fd6:	4293      	cmp	r3, r2
20007fd8:	d306      	bcc.n	20007fe8 <USB_SetTurnaroundTime+0x6c>
20007fda:	68bb      	ldr	r3, [r7, #8]
20007fdc:	4a32      	ldr	r2, [pc, #200]	@ (200080a8 <USB_SetTurnaroundTime+0x12c>)
20007fde:	4293      	cmp	r3, r2
20007fe0:	d802      	bhi.n	20007fe8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
20007fe2:	230c      	movs	r3, #12
20007fe4:	617b      	str	r3, [r7, #20]
20007fe6:	e041      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
20007fe8:	68bb      	ldr	r3, [r7, #8]
20007fea:	4a2f      	ldr	r2, [pc, #188]	@ (200080a8 <USB_SetTurnaroundTime+0x12c>)
20007fec:	4293      	cmp	r3, r2
20007fee:	d906      	bls.n	20007ffe <USB_SetTurnaroundTime+0x82>
20007ff0:	68bb      	ldr	r3, [r7, #8]
20007ff2:	4a2e      	ldr	r2, [pc, #184]	@ (200080ac <USB_SetTurnaroundTime+0x130>)
20007ff4:	4293      	cmp	r3, r2
20007ff6:	d802      	bhi.n	20007ffe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
20007ff8:	230b      	movs	r3, #11
20007ffa:	617b      	str	r3, [r7, #20]
20007ffc:	e036      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
20007ffe:	68bb      	ldr	r3, [r7, #8]
20008000:	4a2a      	ldr	r2, [pc, #168]	@ (200080ac <USB_SetTurnaroundTime+0x130>)
20008002:	4293      	cmp	r3, r2
20008004:	d906      	bls.n	20008014 <USB_SetTurnaroundTime+0x98>
20008006:	68bb      	ldr	r3, [r7, #8]
20008008:	4a29      	ldr	r2, [pc, #164]	@ (200080b0 <USB_SetTurnaroundTime+0x134>)
2000800a:	4293      	cmp	r3, r2
2000800c:	d802      	bhi.n	20008014 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
2000800e:	230a      	movs	r3, #10
20008010:	617b      	str	r3, [r7, #20]
20008012:	e02b      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
20008014:	68bb      	ldr	r3, [r7, #8]
20008016:	4a26      	ldr	r2, [pc, #152]	@ (200080b0 <USB_SetTurnaroundTime+0x134>)
20008018:	4293      	cmp	r3, r2
2000801a:	d906      	bls.n	2000802a <USB_SetTurnaroundTime+0xae>
2000801c:	68bb      	ldr	r3, [r7, #8]
2000801e:	4a25      	ldr	r2, [pc, #148]	@ (200080b4 <USB_SetTurnaroundTime+0x138>)
20008020:	4293      	cmp	r3, r2
20008022:	d202      	bcs.n	2000802a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
20008024:	2309      	movs	r3, #9
20008026:	617b      	str	r3, [r7, #20]
20008028:	e020      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
2000802a:	68bb      	ldr	r3, [r7, #8]
2000802c:	4a21      	ldr	r2, [pc, #132]	@ (200080b4 <USB_SetTurnaroundTime+0x138>)
2000802e:	4293      	cmp	r3, r2
20008030:	d306      	bcc.n	20008040 <USB_SetTurnaroundTime+0xc4>
20008032:	68bb      	ldr	r3, [r7, #8]
20008034:	4a20      	ldr	r2, [pc, #128]	@ (200080b8 <USB_SetTurnaroundTime+0x13c>)
20008036:	4293      	cmp	r3, r2
20008038:	d802      	bhi.n	20008040 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
2000803a:	2308      	movs	r3, #8
2000803c:	617b      	str	r3, [r7, #20]
2000803e:	e015      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
20008040:	68bb      	ldr	r3, [r7, #8]
20008042:	4a1d      	ldr	r2, [pc, #116]	@ (200080b8 <USB_SetTurnaroundTime+0x13c>)
20008044:	4293      	cmp	r3, r2
20008046:	d906      	bls.n	20008056 <USB_SetTurnaroundTime+0xda>
20008048:	68bb      	ldr	r3, [r7, #8]
2000804a:	4a1c      	ldr	r2, [pc, #112]	@ (200080bc <USB_SetTurnaroundTime+0x140>)
2000804c:	4293      	cmp	r3, r2
2000804e:	d202      	bcs.n	20008056 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
20008050:	2307      	movs	r3, #7
20008052:	617b      	str	r3, [r7, #20]
20008054:	e00a      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
20008056:	2306      	movs	r3, #6
20008058:	617b      	str	r3, [r7, #20]
2000805a:	e007      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
2000805c:	79fb      	ldrb	r3, [r7, #7]
2000805e:	2b00      	cmp	r3, #0
20008060:	d102      	bne.n	20008068 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
20008062:	2309      	movs	r3, #9
20008064:	617b      	str	r3, [r7, #20]
20008066:	e001      	b.n	2000806c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
20008068:	2309      	movs	r3, #9
2000806a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
2000806c:	68fb      	ldr	r3, [r7, #12]
2000806e:	68db      	ldr	r3, [r3, #12]
20008070:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
20008074:	68fb      	ldr	r3, [r7, #12]
20008076:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
20008078:	68fb      	ldr	r3, [r7, #12]
2000807a:	68da      	ldr	r2, [r3, #12]
2000807c:	697b      	ldr	r3, [r7, #20]
2000807e:	029b      	lsls	r3, r3, #10
20008080:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
20008084:	431a      	orrs	r2, r3
20008086:	68fb      	ldr	r3, [r7, #12]
20008088:	60da      	str	r2, [r3, #12]

  return HAL_OK;
2000808a:	2300      	movs	r3, #0
}
2000808c:	4618      	mov	r0, r3
2000808e:	371c      	adds	r7, #28
20008090:	46bd      	mov	sp, r7
20008092:	f85d 7b04 	ldr.w	r7, [sp], #4
20008096:	4770      	bx	lr
20008098:	00d8acbf 	.word	0x00d8acbf
2000809c:	00e4e1c0 	.word	0x00e4e1c0
200080a0:	00f42400 	.word	0x00f42400
200080a4:	01067380 	.word	0x01067380
200080a8:	011a499f 	.word	0x011a499f
200080ac:	01312cff 	.word	0x01312cff
200080b0:	014ca43f 	.word	0x014ca43f
200080b4:	016e3600 	.word	0x016e3600
200080b8:	01a6ab1f 	.word	0x01a6ab1f
200080bc:	01e84800 	.word	0x01e84800

200080c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
200080c0:	b480      	push	{r7}
200080c2:	b083      	sub	sp, #12
200080c4:	af00      	add	r7, sp, #0
200080c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
200080c8:	687b      	ldr	r3, [r7, #4]
200080ca:	689b      	ldr	r3, [r3, #8]
200080cc:	f043 0201 	orr.w	r2, r3, #1
200080d0:	687b      	ldr	r3, [r7, #4]
200080d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
200080d4:	2300      	movs	r3, #0
}
200080d6:	4618      	mov	r0, r3
200080d8:	370c      	adds	r7, #12
200080da:	46bd      	mov	sp, r7
200080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200080e0:	4770      	bx	lr

200080e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
200080e2:	b480      	push	{r7}
200080e4:	b083      	sub	sp, #12
200080e6:	af00      	add	r7, sp, #0
200080e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
200080ea:	687b      	ldr	r3, [r7, #4]
200080ec:	689b      	ldr	r3, [r3, #8]
200080ee:	f023 0201 	bic.w	r2, r3, #1
200080f2:	687b      	ldr	r3, [r7, #4]
200080f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
200080f6:	2300      	movs	r3, #0
}
200080f8:	4618      	mov	r0, r3
200080fa:	370c      	adds	r7, #12
200080fc:	46bd      	mov	sp, r7
200080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20008102:	4770      	bx	lr

20008104 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
20008104:	b580      	push	{r7, lr}
20008106:	b084      	sub	sp, #16
20008108:	af00      	add	r7, sp, #0
2000810a:	6078      	str	r0, [r7, #4]
2000810c:	460b      	mov	r3, r1
2000810e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
20008110:	2300      	movs	r3, #0
20008112:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
20008114:	687b      	ldr	r3, [r7, #4]
20008116:	68db      	ldr	r3, [r3, #12]
20008118:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
2000811c:	687b      	ldr	r3, [r7, #4]
2000811e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
20008120:	78fb      	ldrb	r3, [r7, #3]
20008122:	2b01      	cmp	r3, #1
20008124:	d115      	bne.n	20008152 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
20008126:	687b      	ldr	r3, [r7, #4]
20008128:	68db      	ldr	r3, [r3, #12]
2000812a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
2000812e:	687b      	ldr	r3, [r7, #4]
20008130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20008132:	200a      	movs	r0, #10
20008134:	f7fb ff98 	bl	20004068 <HAL_Delay>
      ms += 10U;
20008138:	68fb      	ldr	r3, [r7, #12]
2000813a:	330a      	adds	r3, #10
2000813c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
2000813e:	6878      	ldr	r0, [r7, #4]
20008140:	f001 f93f 	bl	200093c2 <USB_GetMode>
20008144:	4603      	mov	r3, r0
20008146:	2b01      	cmp	r3, #1
20008148:	d01e      	beq.n	20008188 <USB_SetCurrentMode+0x84>
2000814a:	68fb      	ldr	r3, [r7, #12]
2000814c:	2bc7      	cmp	r3, #199	@ 0xc7
2000814e:	d9f0      	bls.n	20008132 <USB_SetCurrentMode+0x2e>
20008150:	e01a      	b.n	20008188 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
20008152:	78fb      	ldrb	r3, [r7, #3]
20008154:	2b00      	cmp	r3, #0
20008156:	d115      	bne.n	20008184 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
20008158:	687b      	ldr	r3, [r7, #4]
2000815a:	68db      	ldr	r3, [r3, #12]
2000815c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
20008160:	687b      	ldr	r3, [r7, #4]
20008162:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20008164:	200a      	movs	r0, #10
20008166:	f7fb ff7f 	bl	20004068 <HAL_Delay>
      ms += 10U;
2000816a:	68fb      	ldr	r3, [r7, #12]
2000816c:	330a      	adds	r3, #10
2000816e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
20008170:	6878      	ldr	r0, [r7, #4]
20008172:	f001 f926 	bl	200093c2 <USB_GetMode>
20008176:	4603      	mov	r3, r0
20008178:	2b00      	cmp	r3, #0
2000817a:	d005      	beq.n	20008188 <USB_SetCurrentMode+0x84>
2000817c:	68fb      	ldr	r3, [r7, #12]
2000817e:	2bc7      	cmp	r3, #199	@ 0xc7
20008180:	d9f0      	bls.n	20008164 <USB_SetCurrentMode+0x60>
20008182:	e001      	b.n	20008188 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
20008184:	2301      	movs	r3, #1
20008186:	e005      	b.n	20008194 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
20008188:	68fb      	ldr	r3, [r7, #12]
2000818a:	2bc8      	cmp	r3, #200	@ 0xc8
2000818c:	d101      	bne.n	20008192 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
2000818e:	2301      	movs	r3, #1
20008190:	e000      	b.n	20008194 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
20008192:	2300      	movs	r3, #0
}
20008194:	4618      	mov	r0, r3
20008196:	3710      	adds	r7, #16
20008198:	46bd      	mov	sp, r7
2000819a:	bd80      	pop	{r7, pc}

2000819c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
2000819c:	b084      	sub	sp, #16
2000819e:	b580      	push	{r7, lr}
200081a0:	b086      	sub	sp, #24
200081a2:	af00      	add	r7, sp, #0
200081a4:	6078      	str	r0, [r7, #4]
200081a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
200081aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
200081ae:	2300      	movs	r3, #0
200081b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
200081b2:	687b      	ldr	r3, [r7, #4]
200081b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
200081b6:	2300      	movs	r3, #0
200081b8:	613b      	str	r3, [r7, #16]
200081ba:	e009      	b.n	200081d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
200081bc:	687a      	ldr	r2, [r7, #4]
200081be:	693b      	ldr	r3, [r7, #16]
200081c0:	3340      	adds	r3, #64	@ 0x40
200081c2:	009b      	lsls	r3, r3, #2
200081c4:	4413      	add	r3, r2
200081c6:	2200      	movs	r2, #0
200081c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
200081ca:	693b      	ldr	r3, [r7, #16]
200081cc:	3301      	adds	r3, #1
200081ce:	613b      	str	r3, [r7, #16]
200081d0:	693b      	ldr	r3, [r7, #16]
200081d2:	2b0e      	cmp	r3, #14
200081d4:	d9f2      	bls.n	200081bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
200081d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
200081da:	2b00      	cmp	r3, #0
200081dc:	d11c      	bne.n	20008218 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
200081de:	68fb      	ldr	r3, [r7, #12]
200081e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200081e4:	685b      	ldr	r3, [r3, #4]
200081e6:	68fa      	ldr	r2, [r7, #12]
200081e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200081ec:	f043 0302 	orr.w	r3, r3, #2
200081f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
200081f2:	687b      	ldr	r3, [r7, #4]
200081f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200081f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
200081fa:	687b      	ldr	r3, [r7, #4]
200081fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
200081fe:	687b      	ldr	r3, [r7, #4]
20008200:	681b      	ldr	r3, [r3, #0]
20008202:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20008206:	687b      	ldr	r3, [r7, #4]
20008208:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
2000820a:	687b      	ldr	r3, [r7, #4]
2000820c:	681b      	ldr	r3, [r3, #0]
2000820e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20008212:	687b      	ldr	r3, [r7, #4]
20008214:	601a      	str	r2, [r3, #0]
20008216:	e005      	b.n	20008224 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
20008218:	687b      	ldr	r3, [r7, #4]
2000821a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000821c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
20008220:	687b      	ldr	r3, [r7, #4]
20008222:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
20008224:	68fb      	ldr	r3, [r7, #12]
20008226:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000822a:	461a      	mov	r2, r3
2000822c:	2300      	movs	r3, #0
2000822e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
20008230:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
20008234:	2b01      	cmp	r3, #1
20008236:	d10d      	bne.n	20008254 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
20008238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2000823c:	2b00      	cmp	r3, #0
2000823e:	d104      	bne.n	2000824a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
20008240:	2100      	movs	r1, #0
20008242:	6878      	ldr	r0, [r7, #4]
20008244:	f000 f968 	bl	20008518 <USB_SetDevSpeed>
20008248:	e008      	b.n	2000825c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
2000824a:	2101      	movs	r1, #1
2000824c:	6878      	ldr	r0, [r7, #4]
2000824e:	f000 f963 	bl	20008518 <USB_SetDevSpeed>
20008252:	e003      	b.n	2000825c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
20008254:	2103      	movs	r1, #3
20008256:	6878      	ldr	r0, [r7, #4]
20008258:	f000 f95e 	bl	20008518 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
2000825c:	2110      	movs	r1, #16
2000825e:	6878      	ldr	r0, [r7, #4]
20008260:	f000 f8fa 	bl	20008458 <USB_FlushTxFifo>
20008264:	4603      	mov	r3, r0
20008266:	2b00      	cmp	r3, #0
20008268:	d001      	beq.n	2000826e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
2000826a:	2301      	movs	r3, #1
2000826c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
2000826e:	6878      	ldr	r0, [r7, #4]
20008270:	f000 f924 	bl	200084bc <USB_FlushRxFifo>
20008274:	4603      	mov	r3, r0
20008276:	2b00      	cmp	r3, #0
20008278:	d001      	beq.n	2000827e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
2000827a:	2301      	movs	r3, #1
2000827c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
2000827e:	68fb      	ldr	r3, [r7, #12]
20008280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008284:	461a      	mov	r2, r3
20008286:	2300      	movs	r3, #0
20008288:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
2000828a:	68fb      	ldr	r3, [r7, #12]
2000828c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008290:	461a      	mov	r2, r3
20008292:	2300      	movs	r3, #0
20008294:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
20008296:	68fb      	ldr	r3, [r7, #12]
20008298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000829c:	461a      	mov	r2, r3
2000829e:	2300      	movs	r3, #0
200082a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
200082a2:	2300      	movs	r3, #0
200082a4:	613b      	str	r3, [r7, #16]
200082a6:	e043      	b.n	20008330 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
200082a8:	693b      	ldr	r3, [r7, #16]
200082aa:	015a      	lsls	r2, r3, #5
200082ac:	68fb      	ldr	r3, [r7, #12]
200082ae:	4413      	add	r3, r2
200082b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200082b4:	681b      	ldr	r3, [r3, #0]
200082b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200082ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200082be:	d118      	bne.n	200082f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
200082c0:	693b      	ldr	r3, [r7, #16]
200082c2:	2b00      	cmp	r3, #0
200082c4:	d10a      	bne.n	200082dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
200082c6:	693b      	ldr	r3, [r7, #16]
200082c8:	015a      	lsls	r2, r3, #5
200082ca:	68fb      	ldr	r3, [r7, #12]
200082cc:	4413      	add	r3, r2
200082ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200082d2:	461a      	mov	r2, r3
200082d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
200082d8:	6013      	str	r3, [r2, #0]
200082da:	e013      	b.n	20008304 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
200082dc:	693b      	ldr	r3, [r7, #16]
200082de:	015a      	lsls	r2, r3, #5
200082e0:	68fb      	ldr	r3, [r7, #12]
200082e2:	4413      	add	r3, r2
200082e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200082e8:	461a      	mov	r2, r3
200082ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
200082ee:	6013      	str	r3, [r2, #0]
200082f0:	e008      	b.n	20008304 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
200082f2:	693b      	ldr	r3, [r7, #16]
200082f4:	015a      	lsls	r2, r3, #5
200082f6:	68fb      	ldr	r3, [r7, #12]
200082f8:	4413      	add	r3, r2
200082fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200082fe:	461a      	mov	r2, r3
20008300:	2300      	movs	r3, #0
20008302:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
20008304:	693b      	ldr	r3, [r7, #16]
20008306:	015a      	lsls	r2, r3, #5
20008308:	68fb      	ldr	r3, [r7, #12]
2000830a:	4413      	add	r3, r2
2000830c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008310:	461a      	mov	r2, r3
20008312:	2300      	movs	r3, #0
20008314:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
20008316:	693b      	ldr	r3, [r7, #16]
20008318:	015a      	lsls	r2, r3, #5
2000831a:	68fb      	ldr	r3, [r7, #12]
2000831c:	4413      	add	r3, r2
2000831e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008322:	461a      	mov	r2, r3
20008324:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20008328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
2000832a:	693b      	ldr	r3, [r7, #16]
2000832c:	3301      	adds	r3, #1
2000832e:	613b      	str	r3, [r7, #16]
20008330:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20008334:	461a      	mov	r2, r3
20008336:	693b      	ldr	r3, [r7, #16]
20008338:	4293      	cmp	r3, r2
2000833a:	d3b5      	bcc.n	200082a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
2000833c:	2300      	movs	r3, #0
2000833e:	613b      	str	r3, [r7, #16]
20008340:	e043      	b.n	200083ca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20008342:	693b      	ldr	r3, [r7, #16]
20008344:	015a      	lsls	r2, r3, #5
20008346:	68fb      	ldr	r3, [r7, #12]
20008348:	4413      	add	r3, r2
2000834a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000834e:	681b      	ldr	r3, [r3, #0]
20008350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20008358:	d118      	bne.n	2000838c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
2000835a:	693b      	ldr	r3, [r7, #16]
2000835c:	2b00      	cmp	r3, #0
2000835e:	d10a      	bne.n	20008376 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
20008360:	693b      	ldr	r3, [r7, #16]
20008362:	015a      	lsls	r2, r3, #5
20008364:	68fb      	ldr	r3, [r7, #12]
20008366:	4413      	add	r3, r2
20008368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000836c:	461a      	mov	r2, r3
2000836e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20008372:	6013      	str	r3, [r2, #0]
20008374:	e013      	b.n	2000839e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
20008376:	693b      	ldr	r3, [r7, #16]
20008378:	015a      	lsls	r2, r3, #5
2000837a:	68fb      	ldr	r3, [r7, #12]
2000837c:	4413      	add	r3, r2
2000837e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008382:	461a      	mov	r2, r3
20008384:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20008388:	6013      	str	r3, [r2, #0]
2000838a:	e008      	b.n	2000839e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
2000838c:	693b      	ldr	r3, [r7, #16]
2000838e:	015a      	lsls	r2, r3, #5
20008390:	68fb      	ldr	r3, [r7, #12]
20008392:	4413      	add	r3, r2
20008394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008398:	461a      	mov	r2, r3
2000839a:	2300      	movs	r3, #0
2000839c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
2000839e:	693b      	ldr	r3, [r7, #16]
200083a0:	015a      	lsls	r2, r3, #5
200083a2:	68fb      	ldr	r3, [r7, #12]
200083a4:	4413      	add	r3, r2
200083a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200083aa:	461a      	mov	r2, r3
200083ac:	2300      	movs	r3, #0
200083ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
200083b0:	693b      	ldr	r3, [r7, #16]
200083b2:	015a      	lsls	r2, r3, #5
200083b4:	68fb      	ldr	r3, [r7, #12]
200083b6:	4413      	add	r3, r2
200083b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200083bc:	461a      	mov	r2, r3
200083be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
200083c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
200083c4:	693b      	ldr	r3, [r7, #16]
200083c6:	3301      	adds	r3, #1
200083c8:	613b      	str	r3, [r7, #16]
200083ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
200083ce:	461a      	mov	r2, r3
200083d0:	693b      	ldr	r3, [r7, #16]
200083d2:	4293      	cmp	r3, r2
200083d4:	d3b5      	bcc.n	20008342 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
200083d6:	68fb      	ldr	r3, [r7, #12]
200083d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200083dc:	691b      	ldr	r3, [r3, #16]
200083de:	68fa      	ldr	r2, [r7, #12]
200083e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200083e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
200083e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
200083ea:	687b      	ldr	r3, [r7, #4]
200083ec:	2200      	movs	r2, #0
200083ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
200083f0:	687b      	ldr	r3, [r7, #4]
200083f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
200083f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
200083f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
200083fc:	2b00      	cmp	r3, #0
200083fe:	d105      	bne.n	2000840c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
20008400:	687b      	ldr	r3, [r7, #4]
20008402:	699b      	ldr	r3, [r3, #24]
20008404:	f043 0210 	orr.w	r2, r3, #16
20008408:	687b      	ldr	r3, [r7, #4]
2000840a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
2000840c:	687b      	ldr	r3, [r7, #4]
2000840e:	699a      	ldr	r2, [r3, #24]
20008410:	4b0f      	ldr	r3, [pc, #60]	@ (20008450 <USB_DevInit+0x2b4>)
20008412:	4313      	orrs	r3, r2
20008414:	687a      	ldr	r2, [r7, #4]
20008416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
20008418:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
2000841c:	2b00      	cmp	r3, #0
2000841e:	d005      	beq.n	2000842c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
20008420:	687b      	ldr	r3, [r7, #4]
20008422:	699b      	ldr	r3, [r3, #24]
20008424:	f043 0208 	orr.w	r2, r3, #8
20008428:	687b      	ldr	r3, [r7, #4]
2000842a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
2000842c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
20008430:	2b01      	cmp	r3, #1
20008432:	d105      	bne.n	20008440 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
20008434:	687b      	ldr	r3, [r7, #4]
20008436:	699a      	ldr	r2, [r3, #24]
20008438:	4b06      	ldr	r3, [pc, #24]	@ (20008454 <USB_DevInit+0x2b8>)
2000843a:	4313      	orrs	r3, r2
2000843c:	687a      	ldr	r2, [r7, #4]
2000843e:	6193      	str	r3, [r2, #24]
  }

  return ret;
20008440:	7dfb      	ldrb	r3, [r7, #23]
}
20008442:	4618      	mov	r0, r3
20008444:	3718      	adds	r7, #24
20008446:	46bd      	mov	sp, r7
20008448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
2000844c:	b004      	add	sp, #16
2000844e:	4770      	bx	lr
20008450:	803c3800 	.word	0x803c3800
20008454:	40000004 	.word	0x40000004

20008458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
20008458:	b480      	push	{r7}
2000845a:	b085      	sub	sp, #20
2000845c:	af00      	add	r7, sp, #0
2000845e:	6078      	str	r0, [r7, #4]
20008460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
20008462:	2300      	movs	r3, #0
20008464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20008466:	68fb      	ldr	r3, [r7, #12]
20008468:	3301      	adds	r3, #1
2000846a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000846c:	68fb      	ldr	r3, [r7, #12]
2000846e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20008472:	d901      	bls.n	20008478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
20008474:	2303      	movs	r3, #3
20008476:	e01b      	b.n	200084b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20008478:	687b      	ldr	r3, [r7, #4]
2000847a:	691b      	ldr	r3, [r3, #16]
2000847c:	2b00      	cmp	r3, #0
2000847e:	daf2      	bge.n	20008466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
20008480:	2300      	movs	r3, #0
20008482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
20008484:	683b      	ldr	r3, [r7, #0]
20008486:	019b      	lsls	r3, r3, #6
20008488:	f043 0220 	orr.w	r2, r3, #32
2000848c:	687b      	ldr	r3, [r7, #4]
2000848e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20008490:	68fb      	ldr	r3, [r7, #12]
20008492:	3301      	adds	r3, #1
20008494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20008496:	68fb      	ldr	r3, [r7, #12]
20008498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000849c:	d901      	bls.n	200084a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
2000849e:	2303      	movs	r3, #3
200084a0:	e006      	b.n	200084b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
200084a2:	687b      	ldr	r3, [r7, #4]
200084a4:	691b      	ldr	r3, [r3, #16]
200084a6:	f003 0320 	and.w	r3, r3, #32
200084aa:	2b20      	cmp	r3, #32
200084ac:	d0f0      	beq.n	20008490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
200084ae:	2300      	movs	r3, #0
}
200084b0:	4618      	mov	r0, r3
200084b2:	3714      	adds	r7, #20
200084b4:	46bd      	mov	sp, r7
200084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200084ba:	4770      	bx	lr

200084bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
200084bc:	b480      	push	{r7}
200084be:	b085      	sub	sp, #20
200084c0:	af00      	add	r7, sp, #0
200084c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
200084c4:	2300      	movs	r3, #0
200084c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
200084c8:	68fb      	ldr	r3, [r7, #12]
200084ca:	3301      	adds	r3, #1
200084cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
200084ce:	68fb      	ldr	r3, [r7, #12]
200084d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200084d4:	d901      	bls.n	200084da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
200084d6:	2303      	movs	r3, #3
200084d8:	e018      	b.n	2000850c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
200084da:	687b      	ldr	r3, [r7, #4]
200084dc:	691b      	ldr	r3, [r3, #16]
200084de:	2b00      	cmp	r3, #0
200084e0:	daf2      	bge.n	200084c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
200084e2:	2300      	movs	r3, #0
200084e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
200084e6:	687b      	ldr	r3, [r7, #4]
200084e8:	2210      	movs	r2, #16
200084ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
200084ec:	68fb      	ldr	r3, [r7, #12]
200084ee:	3301      	adds	r3, #1
200084f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
200084f2:	68fb      	ldr	r3, [r7, #12]
200084f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200084f8:	d901      	bls.n	200084fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
200084fa:	2303      	movs	r3, #3
200084fc:	e006      	b.n	2000850c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
200084fe:	687b      	ldr	r3, [r7, #4]
20008500:	691b      	ldr	r3, [r3, #16]
20008502:	f003 0310 	and.w	r3, r3, #16
20008506:	2b10      	cmp	r3, #16
20008508:	d0f0      	beq.n	200084ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
2000850a:	2300      	movs	r3, #0
}
2000850c:	4618      	mov	r0, r3
2000850e:	3714      	adds	r7, #20
20008510:	46bd      	mov	sp, r7
20008512:	f85d 7b04 	ldr.w	r7, [sp], #4
20008516:	4770      	bx	lr

20008518 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
20008518:	b480      	push	{r7}
2000851a:	b085      	sub	sp, #20
2000851c:	af00      	add	r7, sp, #0
2000851e:	6078      	str	r0, [r7, #4]
20008520:	460b      	mov	r3, r1
20008522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008524:	687b      	ldr	r3, [r7, #4]
20008526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
20008528:	68fb      	ldr	r3, [r7, #12]
2000852a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000852e:	681a      	ldr	r2, [r3, #0]
20008530:	78fb      	ldrb	r3, [r7, #3]
20008532:	68f9      	ldr	r1, [r7, #12]
20008534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008538:	4313      	orrs	r3, r2
2000853a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
2000853c:	2300      	movs	r3, #0
}
2000853e:	4618      	mov	r0, r3
20008540:	3714      	adds	r7, #20
20008542:	46bd      	mov	sp, r7
20008544:	f85d 7b04 	ldr.w	r7, [sp], #4
20008548:	4770      	bx	lr

2000854a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
2000854a:	b480      	push	{r7}
2000854c:	b087      	sub	sp, #28
2000854e:	af00      	add	r7, sp, #0
20008550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008552:	687b      	ldr	r3, [r7, #4]
20008554:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
20008556:	693b      	ldr	r3, [r7, #16]
20008558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000855c:	689b      	ldr	r3, [r3, #8]
2000855e:	f003 0306 	and.w	r3, r3, #6
20008562:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
20008564:	68fb      	ldr	r3, [r7, #12]
20008566:	2b00      	cmp	r3, #0
20008568:	d102      	bne.n	20008570 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
2000856a:	2300      	movs	r3, #0
2000856c:	75fb      	strb	r3, [r7, #23]
2000856e:	e00a      	b.n	20008586 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
20008570:	68fb      	ldr	r3, [r7, #12]
20008572:	2b02      	cmp	r3, #2
20008574:	d002      	beq.n	2000857c <USB_GetDevSpeed+0x32>
20008576:	68fb      	ldr	r3, [r7, #12]
20008578:	2b06      	cmp	r3, #6
2000857a:	d102      	bne.n	20008582 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
2000857c:	2302      	movs	r3, #2
2000857e:	75fb      	strb	r3, [r7, #23]
20008580:	e001      	b.n	20008586 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
20008582:	230f      	movs	r3, #15
20008584:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
20008586:	7dfb      	ldrb	r3, [r7, #23]
}
20008588:	4618      	mov	r0, r3
2000858a:	371c      	adds	r7, #28
2000858c:	46bd      	mov	sp, r7
2000858e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008592:	4770      	bx	lr

20008594 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20008594:	b480      	push	{r7}
20008596:	b085      	sub	sp, #20
20008598:	af00      	add	r7, sp, #0
2000859a:	6078      	str	r0, [r7, #4]
2000859c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000859e:	687b      	ldr	r3, [r7, #4]
200085a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
200085a2:	683b      	ldr	r3, [r7, #0]
200085a4:	781b      	ldrb	r3, [r3, #0]
200085a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
200085a8:	683b      	ldr	r3, [r7, #0]
200085aa:	785b      	ldrb	r3, [r3, #1]
200085ac:	2b01      	cmp	r3, #1
200085ae:	d139      	bne.n	20008624 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
200085b0:	68fb      	ldr	r3, [r7, #12]
200085b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200085b6:	69da      	ldr	r2, [r3, #28]
200085b8:	683b      	ldr	r3, [r7, #0]
200085ba:	781b      	ldrb	r3, [r3, #0]
200085bc:	f003 030f 	and.w	r3, r3, #15
200085c0:	2101      	movs	r1, #1
200085c2:	fa01 f303 	lsl.w	r3, r1, r3
200085c6:	b29b      	uxth	r3, r3
200085c8:	68f9      	ldr	r1, [r7, #12]
200085ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200085ce:	4313      	orrs	r3, r2
200085d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
200085d2:	68bb      	ldr	r3, [r7, #8]
200085d4:	015a      	lsls	r2, r3, #5
200085d6:	68fb      	ldr	r3, [r7, #12]
200085d8:	4413      	add	r3, r2
200085da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200085de:	681b      	ldr	r3, [r3, #0]
200085e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
200085e4:	2b00      	cmp	r3, #0
200085e6:	d153      	bne.n	20008690 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
200085e8:	68bb      	ldr	r3, [r7, #8]
200085ea:	015a      	lsls	r2, r3, #5
200085ec:	68fb      	ldr	r3, [r7, #12]
200085ee:	4413      	add	r3, r2
200085f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200085f4:	681a      	ldr	r2, [r3, #0]
200085f6:	683b      	ldr	r3, [r7, #0]
200085f8:	689b      	ldr	r3, [r3, #8]
200085fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
200085fe:	683b      	ldr	r3, [r7, #0]
20008600:	791b      	ldrb	r3, [r3, #4]
20008602:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20008604:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
20008606:	68bb      	ldr	r3, [r7, #8]
20008608:	059b      	lsls	r3, r3, #22
2000860a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
2000860c:	431a      	orrs	r2, r3
2000860e:	68bb      	ldr	r3, [r7, #8]
20008610:	0159      	lsls	r1, r3, #5
20008612:	68fb      	ldr	r3, [r7, #12]
20008614:	440b      	add	r3, r1
20008616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000861a:	4619      	mov	r1, r3
2000861c:	4b20      	ldr	r3, [pc, #128]	@ (200086a0 <USB_ActivateEndpoint+0x10c>)
2000861e:	4313      	orrs	r3, r2
20008620:	600b      	str	r3, [r1, #0]
20008622:	e035      	b.n	20008690 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
20008624:	68fb      	ldr	r3, [r7, #12]
20008626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000862a:	69da      	ldr	r2, [r3, #28]
2000862c:	683b      	ldr	r3, [r7, #0]
2000862e:	781b      	ldrb	r3, [r3, #0]
20008630:	f003 030f 	and.w	r3, r3, #15
20008634:	2101      	movs	r1, #1
20008636:	fa01 f303 	lsl.w	r3, r1, r3
2000863a:	041b      	lsls	r3, r3, #16
2000863c:	68f9      	ldr	r1, [r7, #12]
2000863e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008642:	4313      	orrs	r3, r2
20008644:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
20008646:	68bb      	ldr	r3, [r7, #8]
20008648:	015a      	lsls	r2, r3, #5
2000864a:	68fb      	ldr	r3, [r7, #12]
2000864c:	4413      	add	r3, r2
2000864e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008652:	681b      	ldr	r3, [r3, #0]
20008654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20008658:	2b00      	cmp	r3, #0
2000865a:	d119      	bne.n	20008690 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
2000865c:	68bb      	ldr	r3, [r7, #8]
2000865e:	015a      	lsls	r2, r3, #5
20008660:	68fb      	ldr	r3, [r7, #12]
20008662:	4413      	add	r3, r2
20008664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008668:	681a      	ldr	r2, [r3, #0]
2000866a:	683b      	ldr	r3, [r7, #0]
2000866c:	689b      	ldr	r3, [r3, #8]
2000866e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
20008672:	683b      	ldr	r3, [r7, #0]
20008674:	791b      	ldrb	r3, [r3, #4]
20008676:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20008678:	430b      	orrs	r3, r1
2000867a:	431a      	orrs	r2, r3
2000867c:	68bb      	ldr	r3, [r7, #8]
2000867e:	0159      	lsls	r1, r3, #5
20008680:	68fb      	ldr	r3, [r7, #12]
20008682:	440b      	add	r3, r1
20008684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008688:	4619      	mov	r1, r3
2000868a:	4b05      	ldr	r3, [pc, #20]	@ (200086a0 <USB_ActivateEndpoint+0x10c>)
2000868c:	4313      	orrs	r3, r2
2000868e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
20008690:	2300      	movs	r3, #0
}
20008692:	4618      	mov	r0, r3
20008694:	3714      	adds	r7, #20
20008696:	46bd      	mov	sp, r7
20008698:	f85d 7b04 	ldr.w	r7, [sp], #4
2000869c:	4770      	bx	lr
2000869e:	bf00      	nop
200086a0:	10008000 	.word	0x10008000

200086a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
200086a4:	b480      	push	{r7}
200086a6:	b085      	sub	sp, #20
200086a8:	af00      	add	r7, sp, #0
200086aa:	6078      	str	r0, [r7, #4]
200086ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
200086ae:	687b      	ldr	r3, [r7, #4]
200086b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
200086b2:	683b      	ldr	r3, [r7, #0]
200086b4:	781b      	ldrb	r3, [r3, #0]
200086b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
200086b8:	683b      	ldr	r3, [r7, #0]
200086ba:	785b      	ldrb	r3, [r3, #1]
200086bc:	2b01      	cmp	r3, #1
200086be:	d161      	bne.n	20008784 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
200086c0:	68bb      	ldr	r3, [r7, #8]
200086c2:	015a      	lsls	r2, r3, #5
200086c4:	68fb      	ldr	r3, [r7, #12]
200086c6:	4413      	add	r3, r2
200086c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200086cc:	681b      	ldr	r3, [r3, #0]
200086ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200086d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200086d6:	d11f      	bne.n	20008718 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
200086d8:	68bb      	ldr	r3, [r7, #8]
200086da:	015a      	lsls	r2, r3, #5
200086dc:	68fb      	ldr	r3, [r7, #12]
200086de:	4413      	add	r3, r2
200086e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200086e4:	681b      	ldr	r3, [r3, #0]
200086e6:	68ba      	ldr	r2, [r7, #8]
200086e8:	0151      	lsls	r1, r2, #5
200086ea:	68fa      	ldr	r2, [r7, #12]
200086ec:	440a      	add	r2, r1
200086ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200086f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
200086f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
200086f8:	68bb      	ldr	r3, [r7, #8]
200086fa:	015a      	lsls	r2, r3, #5
200086fc:	68fb      	ldr	r3, [r7, #12]
200086fe:	4413      	add	r3, r2
20008700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008704:	681b      	ldr	r3, [r3, #0]
20008706:	68ba      	ldr	r2, [r7, #8]
20008708:	0151      	lsls	r1, r2, #5
2000870a:	68fa      	ldr	r2, [r7, #12]
2000870c:	440a      	add	r2, r1
2000870e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008712:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20008716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
20008718:	68fb      	ldr	r3, [r7, #12]
2000871a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000871e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20008720:	683b      	ldr	r3, [r7, #0]
20008722:	781b      	ldrb	r3, [r3, #0]
20008724:	f003 030f 	and.w	r3, r3, #15
20008728:	2101      	movs	r1, #1
2000872a:	fa01 f303 	lsl.w	r3, r1, r3
2000872e:	b29b      	uxth	r3, r3
20008730:	43db      	mvns	r3, r3
20008732:	68f9      	ldr	r1, [r7, #12]
20008734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008738:	4013      	ands	r3, r2
2000873a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
2000873c:	68fb      	ldr	r3, [r7, #12]
2000873e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008742:	69da      	ldr	r2, [r3, #28]
20008744:	683b      	ldr	r3, [r7, #0]
20008746:	781b      	ldrb	r3, [r3, #0]
20008748:	f003 030f 	and.w	r3, r3, #15
2000874c:	2101      	movs	r1, #1
2000874e:	fa01 f303 	lsl.w	r3, r1, r3
20008752:	b29b      	uxth	r3, r3
20008754:	43db      	mvns	r3, r3
20008756:	68f9      	ldr	r1, [r7, #12]
20008758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
2000875c:	4013      	ands	r3, r2
2000875e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
20008760:	68bb      	ldr	r3, [r7, #8]
20008762:	015a      	lsls	r2, r3, #5
20008764:	68fb      	ldr	r3, [r7, #12]
20008766:	4413      	add	r3, r2
20008768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000876c:	681a      	ldr	r2, [r3, #0]
2000876e:	68bb      	ldr	r3, [r7, #8]
20008770:	0159      	lsls	r1, r3, #5
20008772:	68fb      	ldr	r3, [r7, #12]
20008774:	440b      	add	r3, r1
20008776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000877a:	4619      	mov	r1, r3
2000877c:	4b35      	ldr	r3, [pc, #212]	@ (20008854 <USB_DeactivateEndpoint+0x1b0>)
2000877e:	4013      	ands	r3, r2
20008780:	600b      	str	r3, [r1, #0]
20008782:	e060      	b.n	20008846 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20008784:	68bb      	ldr	r3, [r7, #8]
20008786:	015a      	lsls	r2, r3, #5
20008788:	68fb      	ldr	r3, [r7, #12]
2000878a:	4413      	add	r3, r2
2000878c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008790:	681b      	ldr	r3, [r3, #0]
20008792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000879a:	d11f      	bne.n	200087dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
2000879c:	68bb      	ldr	r3, [r7, #8]
2000879e:	015a      	lsls	r2, r3, #5
200087a0:	68fb      	ldr	r3, [r7, #12]
200087a2:	4413      	add	r3, r2
200087a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200087a8:	681b      	ldr	r3, [r3, #0]
200087aa:	68ba      	ldr	r2, [r7, #8]
200087ac:	0151      	lsls	r1, r2, #5
200087ae:	68fa      	ldr	r2, [r7, #12]
200087b0:	440a      	add	r2, r1
200087b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200087b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
200087ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
200087bc:	68bb      	ldr	r3, [r7, #8]
200087be:	015a      	lsls	r2, r3, #5
200087c0:	68fb      	ldr	r3, [r7, #12]
200087c2:	4413      	add	r3, r2
200087c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200087c8:	681b      	ldr	r3, [r3, #0]
200087ca:	68ba      	ldr	r2, [r7, #8]
200087cc:	0151      	lsls	r1, r2, #5
200087ce:	68fa      	ldr	r2, [r7, #12]
200087d0:	440a      	add	r2, r1
200087d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200087d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
200087da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
200087dc:	68fb      	ldr	r3, [r7, #12]
200087de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200087e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
200087e4:	683b      	ldr	r3, [r7, #0]
200087e6:	781b      	ldrb	r3, [r3, #0]
200087e8:	f003 030f 	and.w	r3, r3, #15
200087ec:	2101      	movs	r1, #1
200087ee:	fa01 f303 	lsl.w	r3, r1, r3
200087f2:	041b      	lsls	r3, r3, #16
200087f4:	43db      	mvns	r3, r3
200087f6:	68f9      	ldr	r1, [r7, #12]
200087f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200087fc:	4013      	ands	r3, r2
200087fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20008800:	68fb      	ldr	r3, [r7, #12]
20008802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008806:	69da      	ldr	r2, [r3, #28]
20008808:	683b      	ldr	r3, [r7, #0]
2000880a:	781b      	ldrb	r3, [r3, #0]
2000880c:	f003 030f 	and.w	r3, r3, #15
20008810:	2101      	movs	r1, #1
20008812:	fa01 f303 	lsl.w	r3, r1, r3
20008816:	041b      	lsls	r3, r3, #16
20008818:	43db      	mvns	r3, r3
2000881a:	68f9      	ldr	r1, [r7, #12]
2000881c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008820:	4013      	ands	r3, r2
20008822:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
20008824:	68bb      	ldr	r3, [r7, #8]
20008826:	015a      	lsls	r2, r3, #5
20008828:	68fb      	ldr	r3, [r7, #12]
2000882a:	4413      	add	r3, r2
2000882c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008830:	681a      	ldr	r2, [r3, #0]
20008832:	68bb      	ldr	r3, [r7, #8]
20008834:	0159      	lsls	r1, r3, #5
20008836:	68fb      	ldr	r3, [r7, #12]
20008838:	440b      	add	r3, r1
2000883a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000883e:	4619      	mov	r1, r3
20008840:	4b05      	ldr	r3, [pc, #20]	@ (20008858 <USB_DeactivateEndpoint+0x1b4>)
20008842:	4013      	ands	r3, r2
20008844:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
20008846:	2300      	movs	r3, #0
}
20008848:	4618      	mov	r0, r3
2000884a:	3714      	adds	r7, #20
2000884c:	46bd      	mov	sp, r7
2000884e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008852:	4770      	bx	lr
20008854:	ec337800 	.word	0xec337800
20008858:	eff37800 	.word	0xeff37800

2000885c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
2000885c:	b580      	push	{r7, lr}
2000885e:	b08a      	sub	sp, #40	@ 0x28
20008860:	af02      	add	r7, sp, #8
20008862:	60f8      	str	r0, [r7, #12]
20008864:	60b9      	str	r1, [r7, #8]
20008866:	4613      	mov	r3, r2
20008868:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000886a:	68fb      	ldr	r3, [r7, #12]
2000886c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
2000886e:	68bb      	ldr	r3, [r7, #8]
20008870:	781b      	ldrb	r3, [r3, #0]
20008872:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
20008874:	68bb      	ldr	r3, [r7, #8]
20008876:	785b      	ldrb	r3, [r3, #1]
20008878:	2b01      	cmp	r3, #1
2000887a:	f040 8185 	bne.w	20008b88 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
2000887e:	68bb      	ldr	r3, [r7, #8]
20008880:	691b      	ldr	r3, [r3, #16]
20008882:	2b00      	cmp	r3, #0
20008884:	d132      	bne.n	200088ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
20008886:	69bb      	ldr	r3, [r7, #24]
20008888:	015a      	lsls	r2, r3, #5
2000888a:	69fb      	ldr	r3, [r7, #28]
2000888c:	4413      	add	r3, r2
2000888e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008892:	691a      	ldr	r2, [r3, #16]
20008894:	69bb      	ldr	r3, [r7, #24]
20008896:	0159      	lsls	r1, r3, #5
20008898:	69fb      	ldr	r3, [r7, #28]
2000889a:	440b      	add	r3, r1
2000889c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200088a0:	4619      	mov	r1, r3
200088a2:	4ba7      	ldr	r3, [pc, #668]	@ (20008b40 <USB_EPStartXfer+0x2e4>)
200088a4:	4013      	ands	r3, r2
200088a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
200088a8:	69bb      	ldr	r3, [r7, #24]
200088aa:	015a      	lsls	r2, r3, #5
200088ac:	69fb      	ldr	r3, [r7, #28]
200088ae:	4413      	add	r3, r2
200088b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200088b4:	691b      	ldr	r3, [r3, #16]
200088b6:	69ba      	ldr	r2, [r7, #24]
200088b8:	0151      	lsls	r1, r2, #5
200088ba:	69fa      	ldr	r2, [r7, #28]
200088bc:	440a      	add	r2, r1
200088be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200088c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
200088c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
200088c8:	69bb      	ldr	r3, [r7, #24]
200088ca:	015a      	lsls	r2, r3, #5
200088cc:	69fb      	ldr	r3, [r7, #28]
200088ce:	4413      	add	r3, r2
200088d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200088d4:	691a      	ldr	r2, [r3, #16]
200088d6:	69bb      	ldr	r3, [r7, #24]
200088d8:	0159      	lsls	r1, r3, #5
200088da:	69fb      	ldr	r3, [r7, #28]
200088dc:	440b      	add	r3, r1
200088de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200088e2:	4619      	mov	r1, r3
200088e4:	4b97      	ldr	r3, [pc, #604]	@ (20008b44 <USB_EPStartXfer+0x2e8>)
200088e6:	4013      	ands	r3, r2
200088e8:	610b      	str	r3, [r1, #16]
200088ea:	e097      	b.n	20008a1c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
200088ec:	69bb      	ldr	r3, [r7, #24]
200088ee:	015a      	lsls	r2, r3, #5
200088f0:	69fb      	ldr	r3, [r7, #28]
200088f2:	4413      	add	r3, r2
200088f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200088f8:	691a      	ldr	r2, [r3, #16]
200088fa:	69bb      	ldr	r3, [r7, #24]
200088fc:	0159      	lsls	r1, r3, #5
200088fe:	69fb      	ldr	r3, [r7, #28]
20008900:	440b      	add	r3, r1
20008902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008906:	4619      	mov	r1, r3
20008908:	4b8e      	ldr	r3, [pc, #568]	@ (20008b44 <USB_EPStartXfer+0x2e8>)
2000890a:	4013      	ands	r3, r2
2000890c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
2000890e:	69bb      	ldr	r3, [r7, #24]
20008910:	015a      	lsls	r2, r3, #5
20008912:	69fb      	ldr	r3, [r7, #28]
20008914:	4413      	add	r3, r2
20008916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000891a:	691a      	ldr	r2, [r3, #16]
2000891c:	69bb      	ldr	r3, [r7, #24]
2000891e:	0159      	lsls	r1, r3, #5
20008920:	69fb      	ldr	r3, [r7, #28]
20008922:	440b      	add	r3, r1
20008924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008928:	4619      	mov	r1, r3
2000892a:	4b85      	ldr	r3, [pc, #532]	@ (20008b40 <USB_EPStartXfer+0x2e4>)
2000892c:	4013      	ands	r3, r2
2000892e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
20008930:	69bb      	ldr	r3, [r7, #24]
20008932:	2b00      	cmp	r3, #0
20008934:	d11a      	bne.n	2000896c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
20008936:	68bb      	ldr	r3, [r7, #8]
20008938:	691a      	ldr	r2, [r3, #16]
2000893a:	68bb      	ldr	r3, [r7, #8]
2000893c:	689b      	ldr	r3, [r3, #8]
2000893e:	429a      	cmp	r2, r3
20008940:	d903      	bls.n	2000894a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
20008942:	68bb      	ldr	r3, [r7, #8]
20008944:	689a      	ldr	r2, [r3, #8]
20008946:	68bb      	ldr	r3, [r7, #8]
20008948:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
2000894a:	69bb      	ldr	r3, [r7, #24]
2000894c:	015a      	lsls	r2, r3, #5
2000894e:	69fb      	ldr	r3, [r7, #28]
20008950:	4413      	add	r3, r2
20008952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008956:	691b      	ldr	r3, [r3, #16]
20008958:	69ba      	ldr	r2, [r7, #24]
2000895a:	0151      	lsls	r1, r2, #5
2000895c:	69fa      	ldr	r2, [r7, #28]
2000895e:	440a      	add	r2, r1
20008960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008964:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20008968:	6113      	str	r3, [r2, #16]
2000896a:	e044      	b.n	200089f6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
2000896c:	68bb      	ldr	r3, [r7, #8]
2000896e:	691a      	ldr	r2, [r3, #16]
20008970:	68bb      	ldr	r3, [r7, #8]
20008972:	689b      	ldr	r3, [r3, #8]
20008974:	4413      	add	r3, r2
20008976:	1e5a      	subs	r2, r3, #1
20008978:	68bb      	ldr	r3, [r7, #8]
2000897a:	689b      	ldr	r3, [r3, #8]
2000897c:	fbb2 f3f3 	udiv	r3, r2, r3
20008980:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
20008982:	69bb      	ldr	r3, [r7, #24]
20008984:	015a      	lsls	r2, r3, #5
20008986:	69fb      	ldr	r3, [r7, #28]
20008988:	4413      	add	r3, r2
2000898a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000898e:	691a      	ldr	r2, [r3, #16]
20008990:	8afb      	ldrh	r3, [r7, #22]
20008992:	04d9      	lsls	r1, r3, #19
20008994:	4b6c      	ldr	r3, [pc, #432]	@ (20008b48 <USB_EPStartXfer+0x2ec>)
20008996:	400b      	ands	r3, r1
20008998:	69b9      	ldr	r1, [r7, #24]
2000899a:	0148      	lsls	r0, r1, #5
2000899c:	69f9      	ldr	r1, [r7, #28]
2000899e:	4401      	add	r1, r0
200089a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
200089a4:	4313      	orrs	r3, r2
200089a6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
200089a8:	68bb      	ldr	r3, [r7, #8]
200089aa:	791b      	ldrb	r3, [r3, #4]
200089ac:	2b01      	cmp	r3, #1
200089ae:	d122      	bne.n	200089f6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
200089b0:	69bb      	ldr	r3, [r7, #24]
200089b2:	015a      	lsls	r2, r3, #5
200089b4:	69fb      	ldr	r3, [r7, #28]
200089b6:	4413      	add	r3, r2
200089b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200089bc:	691b      	ldr	r3, [r3, #16]
200089be:	69ba      	ldr	r2, [r7, #24]
200089c0:	0151      	lsls	r1, r2, #5
200089c2:	69fa      	ldr	r2, [r7, #28]
200089c4:	440a      	add	r2, r1
200089c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200089ca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
200089ce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
200089d0:	69bb      	ldr	r3, [r7, #24]
200089d2:	015a      	lsls	r2, r3, #5
200089d4:	69fb      	ldr	r3, [r7, #28]
200089d6:	4413      	add	r3, r2
200089d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200089dc:	691a      	ldr	r2, [r3, #16]
200089de:	8afb      	ldrh	r3, [r7, #22]
200089e0:	075b      	lsls	r3, r3, #29
200089e2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
200089e6:	69b9      	ldr	r1, [r7, #24]
200089e8:	0148      	lsls	r0, r1, #5
200089ea:	69f9      	ldr	r1, [r7, #28]
200089ec:	4401      	add	r1, r0
200089ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
200089f2:	4313      	orrs	r3, r2
200089f4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
200089f6:	69bb      	ldr	r3, [r7, #24]
200089f8:	015a      	lsls	r2, r3, #5
200089fa:	69fb      	ldr	r3, [r7, #28]
200089fc:	4413      	add	r3, r2
200089fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008a02:	691a      	ldr	r2, [r3, #16]
20008a04:	68bb      	ldr	r3, [r7, #8]
20008a06:	691b      	ldr	r3, [r3, #16]
20008a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
20008a0c:	69b9      	ldr	r1, [r7, #24]
20008a0e:	0148      	lsls	r0, r1, #5
20008a10:	69f9      	ldr	r1, [r7, #28]
20008a12:	4401      	add	r1, r0
20008a14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
20008a18:	4313      	orrs	r3, r2
20008a1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
20008a1c:	79fb      	ldrb	r3, [r7, #7]
20008a1e:	2b01      	cmp	r3, #1
20008a20:	d14b      	bne.n	20008aba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
20008a22:	68bb      	ldr	r3, [r7, #8]
20008a24:	69db      	ldr	r3, [r3, #28]
20008a26:	2b00      	cmp	r3, #0
20008a28:	d009      	beq.n	20008a3e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
20008a2a:	69bb      	ldr	r3, [r7, #24]
20008a2c:	015a      	lsls	r2, r3, #5
20008a2e:	69fb      	ldr	r3, [r7, #28]
20008a30:	4413      	add	r3, r2
20008a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008a36:	461a      	mov	r2, r3
20008a38:	68bb      	ldr	r3, [r7, #8]
20008a3a:	69db      	ldr	r3, [r3, #28]
20008a3c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
20008a3e:	68bb      	ldr	r3, [r7, #8]
20008a40:	791b      	ldrb	r3, [r3, #4]
20008a42:	2b01      	cmp	r3, #1
20008a44:	d128      	bne.n	20008a98 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
20008a46:	69fb      	ldr	r3, [r7, #28]
20008a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008a4c:	689b      	ldr	r3, [r3, #8]
20008a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008a52:	2b00      	cmp	r3, #0
20008a54:	d110      	bne.n	20008a78 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
20008a56:	69bb      	ldr	r3, [r7, #24]
20008a58:	015a      	lsls	r2, r3, #5
20008a5a:	69fb      	ldr	r3, [r7, #28]
20008a5c:	4413      	add	r3, r2
20008a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008a62:	681b      	ldr	r3, [r3, #0]
20008a64:	69ba      	ldr	r2, [r7, #24]
20008a66:	0151      	lsls	r1, r2, #5
20008a68:	69fa      	ldr	r2, [r7, #28]
20008a6a:	440a      	add	r2, r1
20008a6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008a70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20008a74:	6013      	str	r3, [r2, #0]
20008a76:	e00f      	b.n	20008a98 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
20008a78:	69bb      	ldr	r3, [r7, #24]
20008a7a:	015a      	lsls	r2, r3, #5
20008a7c:	69fb      	ldr	r3, [r7, #28]
20008a7e:	4413      	add	r3, r2
20008a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008a84:	681b      	ldr	r3, [r3, #0]
20008a86:	69ba      	ldr	r2, [r7, #24]
20008a88:	0151      	lsls	r1, r2, #5
20008a8a:	69fa      	ldr	r2, [r7, #28]
20008a8c:	440a      	add	r2, r1
20008a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008a96:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20008a98:	69bb      	ldr	r3, [r7, #24]
20008a9a:	015a      	lsls	r2, r3, #5
20008a9c:	69fb      	ldr	r3, [r7, #28]
20008a9e:	4413      	add	r3, r2
20008aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008aa4:	681b      	ldr	r3, [r3, #0]
20008aa6:	69ba      	ldr	r2, [r7, #24]
20008aa8:	0151      	lsls	r1, r2, #5
20008aaa:	69fa      	ldr	r2, [r7, #28]
20008aac:	440a      	add	r2, r1
20008aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008ab2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20008ab6:	6013      	str	r3, [r2, #0]
20008ab8:	e169      	b.n	20008d8e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20008aba:	69bb      	ldr	r3, [r7, #24]
20008abc:	015a      	lsls	r2, r3, #5
20008abe:	69fb      	ldr	r3, [r7, #28]
20008ac0:	4413      	add	r3, r2
20008ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008ac6:	681b      	ldr	r3, [r3, #0]
20008ac8:	69ba      	ldr	r2, [r7, #24]
20008aca:	0151      	lsls	r1, r2, #5
20008acc:	69fa      	ldr	r2, [r7, #28]
20008ace:	440a      	add	r2, r1
20008ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008ad4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20008ad8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
20008ada:	68bb      	ldr	r3, [r7, #8]
20008adc:	791b      	ldrb	r3, [r3, #4]
20008ade:	2b01      	cmp	r3, #1
20008ae0:	d015      	beq.n	20008b0e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
20008ae2:	68bb      	ldr	r3, [r7, #8]
20008ae4:	691b      	ldr	r3, [r3, #16]
20008ae6:	2b00      	cmp	r3, #0
20008ae8:	f000 8151 	beq.w	20008d8e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
20008aec:	69fb      	ldr	r3, [r7, #28]
20008aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20008af4:	68bb      	ldr	r3, [r7, #8]
20008af6:	781b      	ldrb	r3, [r3, #0]
20008af8:	f003 030f 	and.w	r3, r3, #15
20008afc:	2101      	movs	r1, #1
20008afe:	fa01 f303 	lsl.w	r3, r1, r3
20008b02:	69f9      	ldr	r1, [r7, #28]
20008b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20008b08:	4313      	orrs	r3, r2
20008b0a:	634b      	str	r3, [r1, #52]	@ 0x34
20008b0c:	e13f      	b.n	20008d8e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
20008b0e:	69fb      	ldr	r3, [r7, #28]
20008b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008b14:	689b      	ldr	r3, [r3, #8]
20008b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008b1a:	2b00      	cmp	r3, #0
20008b1c:	d116      	bne.n	20008b4c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
20008b1e:	69bb      	ldr	r3, [r7, #24]
20008b20:	015a      	lsls	r2, r3, #5
20008b22:	69fb      	ldr	r3, [r7, #28]
20008b24:	4413      	add	r3, r2
20008b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008b2a:	681b      	ldr	r3, [r3, #0]
20008b2c:	69ba      	ldr	r2, [r7, #24]
20008b2e:	0151      	lsls	r1, r2, #5
20008b30:	69fa      	ldr	r2, [r7, #28]
20008b32:	440a      	add	r2, r1
20008b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008b38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20008b3c:	6013      	str	r3, [r2, #0]
20008b3e:	e015      	b.n	20008b6c <USB_EPStartXfer+0x310>
20008b40:	e007ffff 	.word	0xe007ffff
20008b44:	fff80000 	.word	0xfff80000
20008b48:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
20008b4c:	69bb      	ldr	r3, [r7, #24]
20008b4e:	015a      	lsls	r2, r3, #5
20008b50:	69fb      	ldr	r3, [r7, #28]
20008b52:	4413      	add	r3, r2
20008b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008b58:	681b      	ldr	r3, [r3, #0]
20008b5a:	69ba      	ldr	r2, [r7, #24]
20008b5c:	0151      	lsls	r1, r2, #5
20008b5e:	69fa      	ldr	r2, [r7, #28]
20008b60:	440a      	add	r2, r1
20008b62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008b6a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
20008b6c:	68bb      	ldr	r3, [r7, #8]
20008b6e:	68d9      	ldr	r1, [r3, #12]
20008b70:	68bb      	ldr	r3, [r7, #8]
20008b72:	781a      	ldrb	r2, [r3, #0]
20008b74:	68bb      	ldr	r3, [r7, #8]
20008b76:	691b      	ldr	r3, [r3, #16]
20008b78:	b298      	uxth	r0, r3
20008b7a:	79fb      	ldrb	r3, [r7, #7]
20008b7c:	9300      	str	r3, [sp, #0]
20008b7e:	4603      	mov	r3, r0
20008b80:	68f8      	ldr	r0, [r7, #12]
20008b82:	f000 f9b9 	bl	20008ef8 <USB_WritePacket>
20008b86:	e102      	b.n	20008d8e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
20008b88:	69bb      	ldr	r3, [r7, #24]
20008b8a:	015a      	lsls	r2, r3, #5
20008b8c:	69fb      	ldr	r3, [r7, #28]
20008b8e:	4413      	add	r3, r2
20008b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008b94:	691a      	ldr	r2, [r3, #16]
20008b96:	69bb      	ldr	r3, [r7, #24]
20008b98:	0159      	lsls	r1, r3, #5
20008b9a:	69fb      	ldr	r3, [r7, #28]
20008b9c:	440b      	add	r3, r1
20008b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008ba2:	4619      	mov	r1, r3
20008ba4:	4b7c      	ldr	r3, [pc, #496]	@ (20008d98 <USB_EPStartXfer+0x53c>)
20008ba6:	4013      	ands	r3, r2
20008ba8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
20008baa:	69bb      	ldr	r3, [r7, #24]
20008bac:	015a      	lsls	r2, r3, #5
20008bae:	69fb      	ldr	r3, [r7, #28]
20008bb0:	4413      	add	r3, r2
20008bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008bb6:	691a      	ldr	r2, [r3, #16]
20008bb8:	69bb      	ldr	r3, [r7, #24]
20008bba:	0159      	lsls	r1, r3, #5
20008bbc:	69fb      	ldr	r3, [r7, #28]
20008bbe:	440b      	add	r3, r1
20008bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008bc4:	4619      	mov	r1, r3
20008bc6:	4b75      	ldr	r3, [pc, #468]	@ (20008d9c <USB_EPStartXfer+0x540>)
20008bc8:	4013      	ands	r3, r2
20008bca:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
20008bcc:	69bb      	ldr	r3, [r7, #24]
20008bce:	2b00      	cmp	r3, #0
20008bd0:	d12f      	bne.n	20008c32 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
20008bd2:	68bb      	ldr	r3, [r7, #8]
20008bd4:	691b      	ldr	r3, [r3, #16]
20008bd6:	2b00      	cmp	r3, #0
20008bd8:	d003      	beq.n	20008be2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
20008bda:	68bb      	ldr	r3, [r7, #8]
20008bdc:	689a      	ldr	r2, [r3, #8]
20008bde:	68bb      	ldr	r3, [r7, #8]
20008be0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
20008be2:	68bb      	ldr	r3, [r7, #8]
20008be4:	689a      	ldr	r2, [r3, #8]
20008be6:	68bb      	ldr	r3, [r7, #8]
20008be8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
20008bea:	69bb      	ldr	r3, [r7, #24]
20008bec:	015a      	lsls	r2, r3, #5
20008bee:	69fb      	ldr	r3, [r7, #28]
20008bf0:	4413      	add	r3, r2
20008bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008bf6:	691a      	ldr	r2, [r3, #16]
20008bf8:	68bb      	ldr	r3, [r7, #8]
20008bfa:	6a1b      	ldr	r3, [r3, #32]
20008bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
20008c00:	69b9      	ldr	r1, [r7, #24]
20008c02:	0148      	lsls	r0, r1, #5
20008c04:	69f9      	ldr	r1, [r7, #28]
20008c06:	4401      	add	r1, r0
20008c08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20008c0c:	4313      	orrs	r3, r2
20008c0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
20008c10:	69bb      	ldr	r3, [r7, #24]
20008c12:	015a      	lsls	r2, r3, #5
20008c14:	69fb      	ldr	r3, [r7, #28]
20008c16:	4413      	add	r3, r2
20008c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008c1c:	691b      	ldr	r3, [r3, #16]
20008c1e:	69ba      	ldr	r2, [r7, #24]
20008c20:	0151      	lsls	r1, r2, #5
20008c22:	69fa      	ldr	r2, [r7, #28]
20008c24:	440a      	add	r2, r1
20008c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008c2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20008c2e:	6113      	str	r3, [r2, #16]
20008c30:	e05f      	b.n	20008cf2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
20008c32:	68bb      	ldr	r3, [r7, #8]
20008c34:	691b      	ldr	r3, [r3, #16]
20008c36:	2b00      	cmp	r3, #0
20008c38:	d123      	bne.n	20008c82 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
20008c3a:	69bb      	ldr	r3, [r7, #24]
20008c3c:	015a      	lsls	r2, r3, #5
20008c3e:	69fb      	ldr	r3, [r7, #28]
20008c40:	4413      	add	r3, r2
20008c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008c46:	691a      	ldr	r2, [r3, #16]
20008c48:	68bb      	ldr	r3, [r7, #8]
20008c4a:	689b      	ldr	r3, [r3, #8]
20008c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
20008c50:	69b9      	ldr	r1, [r7, #24]
20008c52:	0148      	lsls	r0, r1, #5
20008c54:	69f9      	ldr	r1, [r7, #28]
20008c56:	4401      	add	r1, r0
20008c58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20008c5c:	4313      	orrs	r3, r2
20008c5e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
20008c60:	69bb      	ldr	r3, [r7, #24]
20008c62:	015a      	lsls	r2, r3, #5
20008c64:	69fb      	ldr	r3, [r7, #28]
20008c66:	4413      	add	r3, r2
20008c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008c6c:	691b      	ldr	r3, [r3, #16]
20008c6e:	69ba      	ldr	r2, [r7, #24]
20008c70:	0151      	lsls	r1, r2, #5
20008c72:	69fa      	ldr	r2, [r7, #28]
20008c74:	440a      	add	r2, r1
20008c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008c7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20008c7e:	6113      	str	r3, [r2, #16]
20008c80:	e037      	b.n	20008cf2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
20008c82:	68bb      	ldr	r3, [r7, #8]
20008c84:	691a      	ldr	r2, [r3, #16]
20008c86:	68bb      	ldr	r3, [r7, #8]
20008c88:	689b      	ldr	r3, [r3, #8]
20008c8a:	4413      	add	r3, r2
20008c8c:	1e5a      	subs	r2, r3, #1
20008c8e:	68bb      	ldr	r3, [r7, #8]
20008c90:	689b      	ldr	r3, [r3, #8]
20008c92:	fbb2 f3f3 	udiv	r3, r2, r3
20008c96:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
20008c98:	68bb      	ldr	r3, [r7, #8]
20008c9a:	689b      	ldr	r3, [r3, #8]
20008c9c:	8afa      	ldrh	r2, [r7, #22]
20008c9e:	fb03 f202 	mul.w	r2, r3, r2
20008ca2:	68bb      	ldr	r3, [r7, #8]
20008ca4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
20008ca6:	69bb      	ldr	r3, [r7, #24]
20008ca8:	015a      	lsls	r2, r3, #5
20008caa:	69fb      	ldr	r3, [r7, #28]
20008cac:	4413      	add	r3, r2
20008cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008cb2:	691a      	ldr	r2, [r3, #16]
20008cb4:	8afb      	ldrh	r3, [r7, #22]
20008cb6:	04d9      	lsls	r1, r3, #19
20008cb8:	4b39      	ldr	r3, [pc, #228]	@ (20008da0 <USB_EPStartXfer+0x544>)
20008cba:	400b      	ands	r3, r1
20008cbc:	69b9      	ldr	r1, [r7, #24]
20008cbe:	0148      	lsls	r0, r1, #5
20008cc0:	69f9      	ldr	r1, [r7, #28]
20008cc2:	4401      	add	r1, r0
20008cc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20008cc8:	4313      	orrs	r3, r2
20008cca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
20008ccc:	69bb      	ldr	r3, [r7, #24]
20008cce:	015a      	lsls	r2, r3, #5
20008cd0:	69fb      	ldr	r3, [r7, #28]
20008cd2:	4413      	add	r3, r2
20008cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008cd8:	691a      	ldr	r2, [r3, #16]
20008cda:	68bb      	ldr	r3, [r7, #8]
20008cdc:	6a1b      	ldr	r3, [r3, #32]
20008cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
20008ce2:	69b9      	ldr	r1, [r7, #24]
20008ce4:	0148      	lsls	r0, r1, #5
20008ce6:	69f9      	ldr	r1, [r7, #28]
20008ce8:	4401      	add	r1, r0
20008cea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20008cee:	4313      	orrs	r3, r2
20008cf0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
20008cf2:	79fb      	ldrb	r3, [r7, #7]
20008cf4:	2b01      	cmp	r3, #1
20008cf6:	d10d      	bne.n	20008d14 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
20008cf8:	68bb      	ldr	r3, [r7, #8]
20008cfa:	68db      	ldr	r3, [r3, #12]
20008cfc:	2b00      	cmp	r3, #0
20008cfe:	d009      	beq.n	20008d14 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
20008d00:	68bb      	ldr	r3, [r7, #8]
20008d02:	68d9      	ldr	r1, [r3, #12]
20008d04:	69bb      	ldr	r3, [r7, #24]
20008d06:	015a      	lsls	r2, r3, #5
20008d08:	69fb      	ldr	r3, [r7, #28]
20008d0a:	4413      	add	r3, r2
20008d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008d10:	460a      	mov	r2, r1
20008d12:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
20008d14:	68bb      	ldr	r3, [r7, #8]
20008d16:	791b      	ldrb	r3, [r3, #4]
20008d18:	2b01      	cmp	r3, #1
20008d1a:	d128      	bne.n	20008d6e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
20008d1c:	69fb      	ldr	r3, [r7, #28]
20008d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20008d22:	689b      	ldr	r3, [r3, #8]
20008d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008d28:	2b00      	cmp	r3, #0
20008d2a:	d110      	bne.n	20008d4e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
20008d2c:	69bb      	ldr	r3, [r7, #24]
20008d2e:	015a      	lsls	r2, r3, #5
20008d30:	69fb      	ldr	r3, [r7, #28]
20008d32:	4413      	add	r3, r2
20008d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008d38:	681b      	ldr	r3, [r3, #0]
20008d3a:	69ba      	ldr	r2, [r7, #24]
20008d3c:	0151      	lsls	r1, r2, #5
20008d3e:	69fa      	ldr	r2, [r7, #28]
20008d40:	440a      	add	r2, r1
20008d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008d46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20008d4a:	6013      	str	r3, [r2, #0]
20008d4c:	e00f      	b.n	20008d6e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
20008d4e:	69bb      	ldr	r3, [r7, #24]
20008d50:	015a      	lsls	r2, r3, #5
20008d52:	69fb      	ldr	r3, [r7, #28]
20008d54:	4413      	add	r3, r2
20008d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008d5a:	681b      	ldr	r3, [r3, #0]
20008d5c:	69ba      	ldr	r2, [r7, #24]
20008d5e:	0151      	lsls	r1, r2, #5
20008d60:	69fa      	ldr	r2, [r7, #28]
20008d62:	440a      	add	r2, r1
20008d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008d6c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
20008d6e:	69bb      	ldr	r3, [r7, #24]
20008d70:	015a      	lsls	r2, r3, #5
20008d72:	69fb      	ldr	r3, [r7, #28]
20008d74:	4413      	add	r3, r2
20008d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008d7a:	681b      	ldr	r3, [r3, #0]
20008d7c:	69ba      	ldr	r2, [r7, #24]
20008d7e:	0151      	lsls	r1, r2, #5
20008d80:	69fa      	ldr	r2, [r7, #28]
20008d82:	440a      	add	r2, r1
20008d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008d88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20008d8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
20008d8e:	2300      	movs	r3, #0
}
20008d90:	4618      	mov	r0, r3
20008d92:	3720      	adds	r7, #32
20008d94:	46bd      	mov	sp, r7
20008d96:	bd80      	pop	{r7, pc}
20008d98:	fff80000 	.word	0xfff80000
20008d9c:	e007ffff 	.word	0xe007ffff
20008da0:	1ff80000 	.word	0x1ff80000

20008da4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
20008da4:	b480      	push	{r7}
20008da6:	b087      	sub	sp, #28
20008da8:	af00      	add	r7, sp, #0
20008daa:	6078      	str	r0, [r7, #4]
20008dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
20008dae:	2300      	movs	r3, #0
20008db0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
20008db2:	2300      	movs	r3, #0
20008db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008db6:	687b      	ldr	r3, [r7, #4]
20008db8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
20008dba:	683b      	ldr	r3, [r7, #0]
20008dbc:	785b      	ldrb	r3, [r3, #1]
20008dbe:	2b01      	cmp	r3, #1
20008dc0:	d14a      	bne.n	20008e58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20008dc2:	683b      	ldr	r3, [r7, #0]
20008dc4:	781b      	ldrb	r3, [r3, #0]
20008dc6:	015a      	lsls	r2, r3, #5
20008dc8:	693b      	ldr	r3, [r7, #16]
20008dca:	4413      	add	r3, r2
20008dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008dd0:	681b      	ldr	r3, [r3, #0]
20008dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20008dda:	f040 8086 	bne.w	20008eea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
20008dde:	683b      	ldr	r3, [r7, #0]
20008de0:	781b      	ldrb	r3, [r3, #0]
20008de2:	015a      	lsls	r2, r3, #5
20008de4:	693b      	ldr	r3, [r7, #16]
20008de6:	4413      	add	r3, r2
20008de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008dec:	681b      	ldr	r3, [r3, #0]
20008dee:	683a      	ldr	r2, [r7, #0]
20008df0:	7812      	ldrb	r2, [r2, #0]
20008df2:	0151      	lsls	r1, r2, #5
20008df4:	693a      	ldr	r2, [r7, #16]
20008df6:	440a      	add	r2, r1
20008df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008dfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20008e00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
20008e02:	683b      	ldr	r3, [r7, #0]
20008e04:	781b      	ldrb	r3, [r3, #0]
20008e06:	015a      	lsls	r2, r3, #5
20008e08:	693b      	ldr	r3, [r7, #16]
20008e0a:	4413      	add	r3, r2
20008e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008e10:	681b      	ldr	r3, [r3, #0]
20008e12:	683a      	ldr	r2, [r7, #0]
20008e14:	7812      	ldrb	r2, [r2, #0]
20008e16:	0151      	lsls	r1, r2, #5
20008e18:	693a      	ldr	r2, [r7, #16]
20008e1a:	440a      	add	r2, r1
20008e1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20008e20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20008e24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
20008e26:	68fb      	ldr	r3, [r7, #12]
20008e28:	3301      	adds	r3, #1
20008e2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
20008e2c:	68fb      	ldr	r3, [r7, #12]
20008e2e:	f242 7210 	movw	r2, #10000	@ 0x2710
20008e32:	4293      	cmp	r3, r2
20008e34:	d902      	bls.n	20008e3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
20008e36:	2301      	movs	r3, #1
20008e38:	75fb      	strb	r3, [r7, #23]
          break;
20008e3a:	e056      	b.n	20008eea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
20008e3c:	683b      	ldr	r3, [r7, #0]
20008e3e:	781b      	ldrb	r3, [r3, #0]
20008e40:	015a      	lsls	r2, r3, #5
20008e42:	693b      	ldr	r3, [r7, #16]
20008e44:	4413      	add	r3, r2
20008e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20008e4a:	681b      	ldr	r3, [r3, #0]
20008e4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008e50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20008e54:	d0e7      	beq.n	20008e26 <USB_EPStopXfer+0x82>
20008e56:	e048      	b.n	20008eea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20008e58:	683b      	ldr	r3, [r7, #0]
20008e5a:	781b      	ldrb	r3, [r3, #0]
20008e5c:	015a      	lsls	r2, r3, #5
20008e5e:	693b      	ldr	r3, [r7, #16]
20008e60:	4413      	add	r3, r2
20008e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008e66:	681b      	ldr	r3, [r3, #0]
20008e68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20008e70:	d13b      	bne.n	20008eea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
20008e72:	683b      	ldr	r3, [r7, #0]
20008e74:	781b      	ldrb	r3, [r3, #0]
20008e76:	015a      	lsls	r2, r3, #5
20008e78:	693b      	ldr	r3, [r7, #16]
20008e7a:	4413      	add	r3, r2
20008e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008e80:	681b      	ldr	r3, [r3, #0]
20008e82:	683a      	ldr	r2, [r7, #0]
20008e84:	7812      	ldrb	r2, [r2, #0]
20008e86:	0151      	lsls	r1, r2, #5
20008e88:	693a      	ldr	r2, [r7, #16]
20008e8a:	440a      	add	r2, r1
20008e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008e90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20008e94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
20008e96:	683b      	ldr	r3, [r7, #0]
20008e98:	781b      	ldrb	r3, [r3, #0]
20008e9a:	015a      	lsls	r2, r3, #5
20008e9c:	693b      	ldr	r3, [r7, #16]
20008e9e:	4413      	add	r3, r2
20008ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008ea4:	681b      	ldr	r3, [r3, #0]
20008ea6:	683a      	ldr	r2, [r7, #0]
20008ea8:	7812      	ldrb	r2, [r2, #0]
20008eaa:	0151      	lsls	r1, r2, #5
20008eac:	693a      	ldr	r2, [r7, #16]
20008eae:	440a      	add	r2, r1
20008eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20008eb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20008eb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
20008eba:	68fb      	ldr	r3, [r7, #12]
20008ebc:	3301      	adds	r3, #1
20008ebe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
20008ec0:	68fb      	ldr	r3, [r7, #12]
20008ec2:	f242 7210 	movw	r2, #10000	@ 0x2710
20008ec6:	4293      	cmp	r3, r2
20008ec8:	d902      	bls.n	20008ed0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
20008eca:	2301      	movs	r3, #1
20008ecc:	75fb      	strb	r3, [r7, #23]
          break;
20008ece:	e00c      	b.n	20008eea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
20008ed0:	683b      	ldr	r3, [r7, #0]
20008ed2:	781b      	ldrb	r3, [r3, #0]
20008ed4:	015a      	lsls	r2, r3, #5
20008ed6:	693b      	ldr	r3, [r7, #16]
20008ed8:	4413      	add	r3, r2
20008eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20008ede:	681b      	ldr	r3, [r3, #0]
20008ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20008ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20008ee8:	d0e7      	beq.n	20008eba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
20008eea:	7dfb      	ldrb	r3, [r7, #23]
}
20008eec:	4618      	mov	r0, r3
20008eee:	371c      	adds	r7, #28
20008ef0:	46bd      	mov	sp, r7
20008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
20008ef6:	4770      	bx	lr

20008ef8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
20008ef8:	b480      	push	{r7}
20008efa:	b089      	sub	sp, #36	@ 0x24
20008efc:	af00      	add	r7, sp, #0
20008efe:	60f8      	str	r0, [r7, #12]
20008f00:	60b9      	str	r1, [r7, #8]
20008f02:	4611      	mov	r1, r2
20008f04:	461a      	mov	r2, r3
20008f06:	460b      	mov	r3, r1
20008f08:	71fb      	strb	r3, [r7, #7]
20008f0a:	4613      	mov	r3, r2
20008f0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008f0e:	68fb      	ldr	r3, [r7, #12]
20008f10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
20008f12:	68bb      	ldr	r3, [r7, #8]
20008f14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
20008f16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
20008f1a:	2b00      	cmp	r3, #0
20008f1c:	d123      	bne.n	20008f66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
20008f1e:	88bb      	ldrh	r3, [r7, #4]
20008f20:	3303      	adds	r3, #3
20008f22:	089b      	lsrs	r3, r3, #2
20008f24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
20008f26:	2300      	movs	r3, #0
20008f28:	61bb      	str	r3, [r7, #24]
20008f2a:	e018      	b.n	20008f5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
20008f2c:	79fb      	ldrb	r3, [r7, #7]
20008f2e:	031a      	lsls	r2, r3, #12
20008f30:	697b      	ldr	r3, [r7, #20]
20008f32:	4413      	add	r3, r2
20008f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20008f38:	461a      	mov	r2, r3
20008f3a:	69fb      	ldr	r3, [r7, #28]
20008f3c:	681b      	ldr	r3, [r3, #0]
20008f3e:	6013      	str	r3, [r2, #0]
      pSrc++;
20008f40:	69fb      	ldr	r3, [r7, #28]
20008f42:	3301      	adds	r3, #1
20008f44:	61fb      	str	r3, [r7, #28]
      pSrc++;
20008f46:	69fb      	ldr	r3, [r7, #28]
20008f48:	3301      	adds	r3, #1
20008f4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
20008f4c:	69fb      	ldr	r3, [r7, #28]
20008f4e:	3301      	adds	r3, #1
20008f50:	61fb      	str	r3, [r7, #28]
      pSrc++;
20008f52:	69fb      	ldr	r3, [r7, #28]
20008f54:	3301      	adds	r3, #1
20008f56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
20008f58:	69bb      	ldr	r3, [r7, #24]
20008f5a:	3301      	adds	r3, #1
20008f5c:	61bb      	str	r3, [r7, #24]
20008f5e:	69ba      	ldr	r2, [r7, #24]
20008f60:	693b      	ldr	r3, [r7, #16]
20008f62:	429a      	cmp	r2, r3
20008f64:	d3e2      	bcc.n	20008f2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
20008f66:	2300      	movs	r3, #0
}
20008f68:	4618      	mov	r0, r3
20008f6a:	3724      	adds	r7, #36	@ 0x24
20008f6c:	46bd      	mov	sp, r7
20008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f72:	4770      	bx	lr

20008f74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
20008f74:	b480      	push	{r7}
20008f76:	b08b      	sub	sp, #44	@ 0x2c
20008f78:	af00      	add	r7, sp, #0
20008f7a:	60f8      	str	r0, [r7, #12]
20008f7c:	60b9      	str	r1, [r7, #8]
20008f7e:	4613      	mov	r3, r2
20008f80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
20008f82:	68fb      	ldr	r3, [r7, #12]
20008f84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
20008f86:	68bb      	ldr	r3, [r7, #8]
20008f88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
20008f8a:	88fb      	ldrh	r3, [r7, #6]
20008f8c:	089b      	lsrs	r3, r3, #2
20008f8e:	b29b      	uxth	r3, r3
20008f90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
20008f92:	88fb      	ldrh	r3, [r7, #6]
20008f94:	f003 0303 	and.w	r3, r3, #3
20008f98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
20008f9a:	2300      	movs	r3, #0
20008f9c:	623b      	str	r3, [r7, #32]
20008f9e:	e014      	b.n	20008fca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
20008fa0:	69bb      	ldr	r3, [r7, #24]
20008fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20008fa6:	681a      	ldr	r2, [r3, #0]
20008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008faa:	601a      	str	r2, [r3, #0]
    pDest++;
20008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008fae:	3301      	adds	r3, #1
20008fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20008fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008fb4:	3301      	adds	r3, #1
20008fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008fba:	3301      	adds	r3, #1
20008fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20008fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008fc0:	3301      	adds	r3, #1
20008fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
20008fc4:	6a3b      	ldr	r3, [r7, #32]
20008fc6:	3301      	adds	r3, #1
20008fc8:	623b      	str	r3, [r7, #32]
20008fca:	6a3a      	ldr	r2, [r7, #32]
20008fcc:	697b      	ldr	r3, [r7, #20]
20008fce:	429a      	cmp	r2, r3
20008fd0:	d3e6      	bcc.n	20008fa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
20008fd2:	8bfb      	ldrh	r3, [r7, #30]
20008fd4:	2b00      	cmp	r3, #0
20008fd6:	d01e      	beq.n	20009016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
20008fd8:	2300      	movs	r3, #0
20008fda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
20008fdc:	69bb      	ldr	r3, [r7, #24]
20008fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20008fe2:	461a      	mov	r2, r3
20008fe4:	f107 0310 	add.w	r3, r7, #16
20008fe8:	6812      	ldr	r2, [r2, #0]
20008fea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
20008fec:	693a      	ldr	r2, [r7, #16]
20008fee:	6a3b      	ldr	r3, [r7, #32]
20008ff0:	b2db      	uxtb	r3, r3
20008ff2:	00db      	lsls	r3, r3, #3
20008ff4:	fa22 f303 	lsr.w	r3, r2, r3
20008ff8:	b2da      	uxtb	r2, r3
20008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008ffc:	701a      	strb	r2, [r3, #0]
      i++;
20008ffe:	6a3b      	ldr	r3, [r7, #32]
20009000:	3301      	adds	r3, #1
20009002:	623b      	str	r3, [r7, #32]
      pDest++;
20009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20009006:	3301      	adds	r3, #1
20009008:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
2000900a:	8bfb      	ldrh	r3, [r7, #30]
2000900c:	3b01      	subs	r3, #1
2000900e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
20009010:	8bfb      	ldrh	r3, [r7, #30]
20009012:	2b00      	cmp	r3, #0
20009014:	d1ea      	bne.n	20008fec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
20009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
20009018:	4618      	mov	r0, r3
2000901a:	372c      	adds	r7, #44	@ 0x2c
2000901c:	46bd      	mov	sp, r7
2000901e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009022:	4770      	bx	lr

20009024 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20009024:	b480      	push	{r7}
20009026:	b085      	sub	sp, #20
20009028:	af00      	add	r7, sp, #0
2000902a:	6078      	str	r0, [r7, #4]
2000902c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000902e:	687b      	ldr	r3, [r7, #4]
20009030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20009032:	683b      	ldr	r3, [r7, #0]
20009034:	781b      	ldrb	r3, [r3, #0]
20009036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20009038:	683b      	ldr	r3, [r7, #0]
2000903a:	785b      	ldrb	r3, [r3, #1]
2000903c:	2b01      	cmp	r3, #1
2000903e:	d12c      	bne.n	2000909a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
20009040:	68bb      	ldr	r3, [r7, #8]
20009042:	015a      	lsls	r2, r3, #5
20009044:	68fb      	ldr	r3, [r7, #12]
20009046:	4413      	add	r3, r2
20009048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000904c:	681b      	ldr	r3, [r3, #0]
2000904e:	2b00      	cmp	r3, #0
20009050:	db12      	blt.n	20009078 <USB_EPSetStall+0x54>
20009052:	68bb      	ldr	r3, [r7, #8]
20009054:	2b00      	cmp	r3, #0
20009056:	d00f      	beq.n	20009078 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
20009058:	68bb      	ldr	r3, [r7, #8]
2000905a:	015a      	lsls	r2, r3, #5
2000905c:	68fb      	ldr	r3, [r7, #12]
2000905e:	4413      	add	r3, r2
20009060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009064:	681b      	ldr	r3, [r3, #0]
20009066:	68ba      	ldr	r2, [r7, #8]
20009068:	0151      	lsls	r1, r2, #5
2000906a:	68fa      	ldr	r2, [r7, #12]
2000906c:	440a      	add	r2, r1
2000906e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009072:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
20009076:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
20009078:	68bb      	ldr	r3, [r7, #8]
2000907a:	015a      	lsls	r2, r3, #5
2000907c:	68fb      	ldr	r3, [r7, #12]
2000907e:	4413      	add	r3, r2
20009080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009084:	681b      	ldr	r3, [r3, #0]
20009086:	68ba      	ldr	r2, [r7, #8]
20009088:	0151      	lsls	r1, r2, #5
2000908a:	68fa      	ldr	r2, [r7, #12]
2000908c:	440a      	add	r2, r1
2000908e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009092:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
20009096:	6013      	str	r3, [r2, #0]
20009098:	e02b      	b.n	200090f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
2000909a:	68bb      	ldr	r3, [r7, #8]
2000909c:	015a      	lsls	r2, r3, #5
2000909e:	68fb      	ldr	r3, [r7, #12]
200090a0:	4413      	add	r3, r2
200090a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200090a6:	681b      	ldr	r3, [r3, #0]
200090a8:	2b00      	cmp	r3, #0
200090aa:	db12      	blt.n	200090d2 <USB_EPSetStall+0xae>
200090ac:	68bb      	ldr	r3, [r7, #8]
200090ae:	2b00      	cmp	r3, #0
200090b0:	d00f      	beq.n	200090d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
200090b2:	68bb      	ldr	r3, [r7, #8]
200090b4:	015a      	lsls	r2, r3, #5
200090b6:	68fb      	ldr	r3, [r7, #12]
200090b8:	4413      	add	r3, r2
200090ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200090be:	681b      	ldr	r3, [r3, #0]
200090c0:	68ba      	ldr	r2, [r7, #8]
200090c2:	0151      	lsls	r1, r2, #5
200090c4:	68fa      	ldr	r2, [r7, #12]
200090c6:	440a      	add	r2, r1
200090c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200090cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
200090d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
200090d2:	68bb      	ldr	r3, [r7, #8]
200090d4:	015a      	lsls	r2, r3, #5
200090d6:	68fb      	ldr	r3, [r7, #12]
200090d8:	4413      	add	r3, r2
200090da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200090de:	681b      	ldr	r3, [r3, #0]
200090e0:	68ba      	ldr	r2, [r7, #8]
200090e2:	0151      	lsls	r1, r2, #5
200090e4:	68fa      	ldr	r2, [r7, #12]
200090e6:	440a      	add	r2, r1
200090e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200090ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
200090f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
200090f2:	2300      	movs	r3, #0
}
200090f4:	4618      	mov	r0, r3
200090f6:	3714      	adds	r7, #20
200090f8:	46bd      	mov	sp, r7
200090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200090fe:	4770      	bx	lr

20009100 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20009100:	b480      	push	{r7}
20009102:	b085      	sub	sp, #20
20009104:	af00      	add	r7, sp, #0
20009106:	6078      	str	r0, [r7, #4]
20009108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000910a:	687b      	ldr	r3, [r7, #4]
2000910c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
2000910e:	683b      	ldr	r3, [r7, #0]
20009110:	781b      	ldrb	r3, [r3, #0]
20009112:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20009114:	683b      	ldr	r3, [r7, #0]
20009116:	785b      	ldrb	r3, [r3, #1]
20009118:	2b01      	cmp	r3, #1
2000911a:	d128      	bne.n	2000916e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
2000911c:	68bb      	ldr	r3, [r7, #8]
2000911e:	015a      	lsls	r2, r3, #5
20009120:	68fb      	ldr	r3, [r7, #12]
20009122:	4413      	add	r3, r2
20009124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009128:	681b      	ldr	r3, [r3, #0]
2000912a:	68ba      	ldr	r2, [r7, #8]
2000912c:	0151      	lsls	r1, r2, #5
2000912e:	68fa      	ldr	r2, [r7, #12]
20009130:	440a      	add	r2, r1
20009132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009136:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000913a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
2000913c:	683b      	ldr	r3, [r7, #0]
2000913e:	791b      	ldrb	r3, [r3, #4]
20009140:	2b03      	cmp	r3, #3
20009142:	d003      	beq.n	2000914c <USB_EPClearStall+0x4c>
20009144:	683b      	ldr	r3, [r7, #0]
20009146:	791b      	ldrb	r3, [r3, #4]
20009148:	2b02      	cmp	r3, #2
2000914a:	d138      	bne.n	200091be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
2000914c:	68bb      	ldr	r3, [r7, #8]
2000914e:	015a      	lsls	r2, r3, #5
20009150:	68fb      	ldr	r3, [r7, #12]
20009152:	4413      	add	r3, r2
20009154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20009158:	681b      	ldr	r3, [r3, #0]
2000915a:	68ba      	ldr	r2, [r7, #8]
2000915c:	0151      	lsls	r1, r2, #5
2000915e:	68fa      	ldr	r2, [r7, #12]
20009160:	440a      	add	r2, r1
20009162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20009166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000916a:	6013      	str	r3, [r2, #0]
2000916c:	e027      	b.n	200091be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
2000916e:	68bb      	ldr	r3, [r7, #8]
20009170:	015a      	lsls	r2, r3, #5
20009172:	68fb      	ldr	r3, [r7, #12]
20009174:	4413      	add	r3, r2
20009176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000917a:	681b      	ldr	r3, [r3, #0]
2000917c:	68ba      	ldr	r2, [r7, #8]
2000917e:	0151      	lsls	r1, r2, #5
20009180:	68fa      	ldr	r2, [r7, #12]
20009182:	440a      	add	r2, r1
20009184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009188:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000918c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
2000918e:	683b      	ldr	r3, [r7, #0]
20009190:	791b      	ldrb	r3, [r3, #4]
20009192:	2b03      	cmp	r3, #3
20009194:	d003      	beq.n	2000919e <USB_EPClearStall+0x9e>
20009196:	683b      	ldr	r3, [r7, #0]
20009198:	791b      	ldrb	r3, [r3, #4]
2000919a:	2b02      	cmp	r3, #2
2000919c:	d10f      	bne.n	200091be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
2000919e:	68bb      	ldr	r3, [r7, #8]
200091a0:	015a      	lsls	r2, r3, #5
200091a2:	68fb      	ldr	r3, [r7, #12]
200091a4:	4413      	add	r3, r2
200091a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200091aa:	681b      	ldr	r3, [r3, #0]
200091ac:	68ba      	ldr	r2, [r7, #8]
200091ae:	0151      	lsls	r1, r2, #5
200091b0:	68fa      	ldr	r2, [r7, #12]
200091b2:	440a      	add	r2, r1
200091b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200091b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200091bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
200091be:	2300      	movs	r3, #0
}
200091c0:	4618      	mov	r0, r3
200091c2:	3714      	adds	r7, #20
200091c4:	46bd      	mov	sp, r7
200091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200091ca:	4770      	bx	lr

200091cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
200091cc:	b480      	push	{r7}
200091ce:	b085      	sub	sp, #20
200091d0:	af00      	add	r7, sp, #0
200091d2:	6078      	str	r0, [r7, #4]
200091d4:	460b      	mov	r3, r1
200091d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
200091d8:	687b      	ldr	r3, [r7, #4]
200091da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
200091dc:	68fb      	ldr	r3, [r7, #12]
200091de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200091e2:	681b      	ldr	r3, [r3, #0]
200091e4:	68fa      	ldr	r2, [r7, #12]
200091e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200091ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
200091ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
200091f0:	68fb      	ldr	r3, [r7, #12]
200091f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200091f6:	681a      	ldr	r2, [r3, #0]
200091f8:	78fb      	ldrb	r3, [r7, #3]
200091fa:	011b      	lsls	r3, r3, #4
200091fc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
20009200:	68f9      	ldr	r1, [r7, #12]
20009202:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20009206:	4313      	orrs	r3, r2
20009208:	600b      	str	r3, [r1, #0]

  return HAL_OK;
2000920a:	2300      	movs	r3, #0
}
2000920c:	4618      	mov	r0, r3
2000920e:	3714      	adds	r7, #20
20009210:	46bd      	mov	sp, r7
20009212:	f85d 7b04 	ldr.w	r7, [sp], #4
20009216:	4770      	bx	lr

20009218 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
20009218:	b480      	push	{r7}
2000921a:	b085      	sub	sp, #20
2000921c:	af00      	add	r7, sp, #0
2000921e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009220:	687b      	ldr	r3, [r7, #4]
20009222:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
20009224:	68fb      	ldr	r3, [r7, #12]
20009226:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000922a:	681b      	ldr	r3, [r3, #0]
2000922c:	68fa      	ldr	r2, [r7, #12]
2000922e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
20009232:	f023 0303 	bic.w	r3, r3, #3
20009236:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
20009238:	68fb      	ldr	r3, [r7, #12]
2000923a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000923e:	685b      	ldr	r3, [r3, #4]
20009240:	68fa      	ldr	r2, [r7, #12]
20009242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009246:	f023 0302 	bic.w	r3, r3, #2
2000924a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000924c:	2300      	movs	r3, #0
}
2000924e:	4618      	mov	r0, r3
20009250:	3714      	adds	r7, #20
20009252:	46bd      	mov	sp, r7
20009254:	f85d 7b04 	ldr.w	r7, [sp], #4
20009258:	4770      	bx	lr

2000925a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
2000925a:	b480      	push	{r7}
2000925c:	b085      	sub	sp, #20
2000925e:	af00      	add	r7, sp, #0
20009260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009262:	687b      	ldr	r3, [r7, #4]
20009264:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
20009266:	68fb      	ldr	r3, [r7, #12]
20009268:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000926c:	681b      	ldr	r3, [r3, #0]
2000926e:	68fa      	ldr	r2, [r7, #12]
20009270:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
20009274:	f023 0303 	bic.w	r3, r3, #3
20009278:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
2000927a:	68fb      	ldr	r3, [r7, #12]
2000927c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009280:	685b      	ldr	r3, [r3, #4]
20009282:	68fa      	ldr	r2, [r7, #12]
20009284:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009288:	f043 0302 	orr.w	r3, r3, #2
2000928c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
2000928e:	2300      	movs	r3, #0
}
20009290:	4618      	mov	r0, r3
20009292:	3714      	adds	r7, #20
20009294:	46bd      	mov	sp, r7
20009296:	f85d 7b04 	ldr.w	r7, [sp], #4
2000929a:	4770      	bx	lr

2000929c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
2000929c:	b480      	push	{r7}
2000929e:	b085      	sub	sp, #20
200092a0:	af00      	add	r7, sp, #0
200092a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
200092a4:	687b      	ldr	r3, [r7, #4]
200092a6:	695b      	ldr	r3, [r3, #20]
200092a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
200092aa:	687b      	ldr	r3, [r7, #4]
200092ac:	699b      	ldr	r3, [r3, #24]
200092ae:	68fa      	ldr	r2, [r7, #12]
200092b0:	4013      	ands	r3, r2
200092b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
200092b4:	68fb      	ldr	r3, [r7, #12]
}
200092b6:	4618      	mov	r0, r3
200092b8:	3714      	adds	r7, #20
200092ba:	46bd      	mov	sp, r7
200092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200092c0:	4770      	bx	lr

200092c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
200092c2:	b480      	push	{r7}
200092c4:	b085      	sub	sp, #20
200092c6:	af00      	add	r7, sp, #0
200092c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200092ca:	687b      	ldr	r3, [r7, #4]
200092cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
200092ce:	68fb      	ldr	r3, [r7, #12]
200092d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200092d4:	699b      	ldr	r3, [r3, #24]
200092d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
200092d8:	68fb      	ldr	r3, [r7, #12]
200092da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200092de:	69db      	ldr	r3, [r3, #28]
200092e0:	68ba      	ldr	r2, [r7, #8]
200092e2:	4013      	ands	r3, r2
200092e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
200092e6:	68bb      	ldr	r3, [r7, #8]
200092e8:	0c1b      	lsrs	r3, r3, #16
}
200092ea:	4618      	mov	r0, r3
200092ec:	3714      	adds	r7, #20
200092ee:	46bd      	mov	sp, r7
200092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200092f4:	4770      	bx	lr

200092f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
200092f6:	b480      	push	{r7}
200092f8:	b085      	sub	sp, #20
200092fa:	af00      	add	r7, sp, #0
200092fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200092fe:	687b      	ldr	r3, [r7, #4]
20009300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
20009302:	68fb      	ldr	r3, [r7, #12]
20009304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009308:	699b      	ldr	r3, [r3, #24]
2000930a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
2000930c:	68fb      	ldr	r3, [r7, #12]
2000930e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009312:	69db      	ldr	r3, [r3, #28]
20009314:	68ba      	ldr	r2, [r7, #8]
20009316:	4013      	ands	r3, r2
20009318:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
2000931a:	68bb      	ldr	r3, [r7, #8]
2000931c:	b29b      	uxth	r3, r3
}
2000931e:	4618      	mov	r0, r3
20009320:	3714      	adds	r7, #20
20009322:	46bd      	mov	sp, r7
20009324:	f85d 7b04 	ldr.w	r7, [sp], #4
20009328:	4770      	bx	lr

2000932a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
2000932a:	b480      	push	{r7}
2000932c:	b085      	sub	sp, #20
2000932e:	af00      	add	r7, sp, #0
20009330:	6078      	str	r0, [r7, #4]
20009332:	460b      	mov	r3, r1
20009334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009336:	687b      	ldr	r3, [r7, #4]
20009338:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
2000933a:	78fb      	ldrb	r3, [r7, #3]
2000933c:	015a      	lsls	r2, r3, #5
2000933e:	68fb      	ldr	r3, [r7, #12]
20009340:	4413      	add	r3, r2
20009342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009346:	689b      	ldr	r3, [r3, #8]
20009348:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
2000934a:	68fb      	ldr	r3, [r7, #12]
2000934c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009350:	695b      	ldr	r3, [r3, #20]
20009352:	68ba      	ldr	r2, [r7, #8]
20009354:	4013      	ands	r3, r2
20009356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
20009358:	68bb      	ldr	r3, [r7, #8]
}
2000935a:	4618      	mov	r0, r3
2000935c:	3714      	adds	r7, #20
2000935e:	46bd      	mov	sp, r7
20009360:	f85d 7b04 	ldr.w	r7, [sp], #4
20009364:	4770      	bx	lr

20009366 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
20009366:	b480      	push	{r7}
20009368:	b087      	sub	sp, #28
2000936a:	af00      	add	r7, sp, #0
2000936c:	6078      	str	r0, [r7, #4]
2000936e:	460b      	mov	r3, r1
20009370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009372:	687b      	ldr	r3, [r7, #4]
20009374:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
20009376:	697b      	ldr	r3, [r7, #20]
20009378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000937c:	691b      	ldr	r3, [r3, #16]
2000937e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
20009380:	697b      	ldr	r3, [r7, #20]
20009382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20009388:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
2000938a:	78fb      	ldrb	r3, [r7, #3]
2000938c:	f003 030f 	and.w	r3, r3, #15
20009390:	68fa      	ldr	r2, [r7, #12]
20009392:	fa22 f303 	lsr.w	r3, r2, r3
20009396:	01db      	lsls	r3, r3, #7
20009398:	b2db      	uxtb	r3, r3
2000939a:	693a      	ldr	r2, [r7, #16]
2000939c:	4313      	orrs	r3, r2
2000939e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
200093a0:	78fb      	ldrb	r3, [r7, #3]
200093a2:	015a      	lsls	r2, r3, #5
200093a4:	697b      	ldr	r3, [r7, #20]
200093a6:	4413      	add	r3, r2
200093a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200093ac:	689b      	ldr	r3, [r3, #8]
200093ae:	693a      	ldr	r2, [r7, #16]
200093b0:	4013      	ands	r3, r2
200093b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
200093b4:	68bb      	ldr	r3, [r7, #8]
}
200093b6:	4618      	mov	r0, r3
200093b8:	371c      	adds	r7, #28
200093ba:	46bd      	mov	sp, r7
200093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200093c0:	4770      	bx	lr

200093c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
200093c2:	b480      	push	{r7}
200093c4:	b083      	sub	sp, #12
200093c6:	af00      	add	r7, sp, #0
200093c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
200093ca:	687b      	ldr	r3, [r7, #4]
200093cc:	695b      	ldr	r3, [r3, #20]
200093ce:	f003 0301 	and.w	r3, r3, #1
}
200093d2:	4618      	mov	r0, r3
200093d4:	370c      	adds	r7, #12
200093d6:	46bd      	mov	sp, r7
200093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200093dc:	4770      	bx	lr
	...

200093e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
200093e0:	b480      	push	{r7}
200093e2:	b085      	sub	sp, #20
200093e4:	af00      	add	r7, sp, #0
200093e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200093e8:	687b      	ldr	r3, [r7, #4]
200093ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
200093ec:	68fb      	ldr	r3, [r7, #12]
200093ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200093f2:	681a      	ldr	r2, [r3, #0]
200093f4:	68fb      	ldr	r3, [r7, #12]
200093f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200093fa:	4619      	mov	r1, r3
200093fc:	4b09      	ldr	r3, [pc, #36]	@ (20009424 <USB_ActivateSetup+0x44>)
200093fe:	4013      	ands	r3, r2
20009400:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
20009402:	68fb      	ldr	r3, [r7, #12]
20009404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20009408:	685b      	ldr	r3, [r3, #4]
2000940a:	68fa      	ldr	r2, [r7, #12]
2000940c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20009410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20009414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
20009416:	2300      	movs	r3, #0
}
20009418:	4618      	mov	r0, r3
2000941a:	3714      	adds	r7, #20
2000941c:	46bd      	mov	sp, r7
2000941e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009422:	4770      	bx	lr
20009424:	fffff800 	.word	0xfffff800

20009428 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
20009428:	b480      	push	{r7}
2000942a:	b087      	sub	sp, #28
2000942c:	af00      	add	r7, sp, #0
2000942e:	60f8      	str	r0, [r7, #12]
20009430:	460b      	mov	r3, r1
20009432:	607a      	str	r2, [r7, #4]
20009434:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
20009436:	68fb      	ldr	r3, [r7, #12]
20009438:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
2000943a:	68fb      	ldr	r3, [r7, #12]
2000943c:	333c      	adds	r3, #60	@ 0x3c
2000943e:	3304      	adds	r3, #4
20009440:	681b      	ldr	r3, [r3, #0]
20009442:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
20009444:	693b      	ldr	r3, [r7, #16]
20009446:	4a26      	ldr	r2, [pc, #152]	@ (200094e0 <USB_EP0_OutStart+0xb8>)
20009448:	4293      	cmp	r3, r2
2000944a:	d90a      	bls.n	20009462 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
2000944c:	697b      	ldr	r3, [r7, #20]
2000944e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009452:	681b      	ldr	r3, [r3, #0]
20009454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20009458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000945c:	d101      	bne.n	20009462 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
2000945e:	2300      	movs	r3, #0
20009460:	e037      	b.n	200094d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
20009462:	697b      	ldr	r3, [r7, #20]
20009464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009468:	461a      	mov	r2, r3
2000946a:	2300      	movs	r3, #0
2000946c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
2000946e:	697b      	ldr	r3, [r7, #20]
20009470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009474:	691b      	ldr	r3, [r3, #16]
20009476:	697a      	ldr	r2, [r7, #20]
20009478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000947c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20009480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
20009482:	697b      	ldr	r3, [r7, #20]
20009484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20009488:	691b      	ldr	r3, [r3, #16]
2000948a:	697a      	ldr	r2, [r7, #20]
2000948c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20009490:	f043 0318 	orr.w	r3, r3, #24
20009494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
20009496:	697b      	ldr	r3, [r7, #20]
20009498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000949c:	691b      	ldr	r3, [r3, #16]
2000949e:	697a      	ldr	r2, [r7, #20]
200094a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200094a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
200094a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
200094aa:	7afb      	ldrb	r3, [r7, #11]
200094ac:	2b01      	cmp	r3, #1
200094ae:	d10f      	bne.n	200094d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
200094b0:	697b      	ldr	r3, [r7, #20]
200094b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200094b6:	461a      	mov	r2, r3
200094b8:	687b      	ldr	r3, [r7, #4]
200094ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
200094bc:	697b      	ldr	r3, [r7, #20]
200094be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200094c2:	681b      	ldr	r3, [r3, #0]
200094c4:	697a      	ldr	r2, [r7, #20]
200094c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200094ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
200094ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
200094d0:	2300      	movs	r3, #0
}
200094d2:	4618      	mov	r0, r3
200094d4:	371c      	adds	r7, #28
200094d6:	46bd      	mov	sp, r7
200094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200094dc:	4770      	bx	lr
200094de:	bf00      	nop
200094e0:	4f54300a 	.word	0x4f54300a

200094e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
200094e4:	b480      	push	{r7}
200094e6:	b085      	sub	sp, #20
200094e8:	af00      	add	r7, sp, #0
200094ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
200094ec:	2300      	movs	r3, #0
200094ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
200094f0:	68fb      	ldr	r3, [r7, #12]
200094f2:	3301      	adds	r3, #1
200094f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
200094f6:	68fb      	ldr	r3, [r7, #12]
200094f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200094fc:	d901      	bls.n	20009502 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
200094fe:	2303      	movs	r3, #3
20009500:	e022      	b.n	20009548 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20009502:	687b      	ldr	r3, [r7, #4]
20009504:	691b      	ldr	r3, [r3, #16]
20009506:	2b00      	cmp	r3, #0
20009508:	daf2      	bge.n	200094f0 <USB_CoreReset+0xc>

  count = 10U;
2000950a:	230a      	movs	r3, #10
2000950c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
2000950e:	e002      	b.n	20009516 <USB_CoreReset+0x32>
  {
    count--;
20009510:	68fb      	ldr	r3, [r7, #12]
20009512:	3b01      	subs	r3, #1
20009514:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
20009516:	68fb      	ldr	r3, [r7, #12]
20009518:	2b00      	cmp	r3, #0
2000951a:	d1f9      	bne.n	20009510 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
2000951c:	687b      	ldr	r3, [r7, #4]
2000951e:	691b      	ldr	r3, [r3, #16]
20009520:	f043 0201 	orr.w	r2, r3, #1
20009524:	687b      	ldr	r3, [r7, #4]
20009526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20009528:	68fb      	ldr	r3, [r7, #12]
2000952a:	3301      	adds	r3, #1
2000952c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000952e:	68fb      	ldr	r3, [r7, #12]
20009530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20009534:	d901      	bls.n	2000953a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
20009536:	2303      	movs	r3, #3
20009538:	e006      	b.n	20009548 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
2000953a:	687b      	ldr	r3, [r7, #4]
2000953c:	691b      	ldr	r3, [r3, #16]
2000953e:	f003 0301 	and.w	r3, r3, #1
20009542:	2b01      	cmp	r3, #1
20009544:	d0f0      	beq.n	20009528 <USB_CoreReset+0x44>

  return HAL_OK;
20009546:	2300      	movs	r3, #0
}
20009548:	4618      	mov	r0, r3
2000954a:	3714      	adds	r7, #20
2000954c:	46bd      	mov	sp, r7
2000954e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009552:	4770      	bx	lr

20009554 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
20009554:	b580      	push	{r7, lr}
20009556:	b084      	sub	sp, #16
20009558:	af00      	add	r7, sp, #0
2000955a:	6078      	str	r0, [r7, #4]
2000955c:	460b      	mov	r3, r1
2000955e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
20009560:	2054      	movs	r0, #84	@ 0x54
20009562:	f002 fc25 	bl	2000bdb0 <malloc>
20009566:	4603      	mov	r3, r0
20009568:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
2000956a:	68fb      	ldr	r3, [r7, #12]
2000956c:	2b00      	cmp	r3, #0
2000956e:	d109      	bne.n	20009584 <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
20009570:	687b      	ldr	r3, [r7, #4]
20009572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009576:	687b      	ldr	r3, [r7, #4]
20009578:	32b0      	adds	r2, #176	@ 0xb0
2000957a:	2100      	movs	r1, #0
2000957c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
20009580:	2302      	movs	r3, #2
20009582:	e08b      	b.n	2000969c <USBD_CUSTOM_HID_Init+0x148>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
20009584:	687b      	ldr	r3, [r7, #4]
20009586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000958a:	687b      	ldr	r3, [r7, #4]
2000958c:	32b0      	adds	r2, #176	@ 0xb0
2000958e:	68f9      	ldr	r1, [r7, #12]
20009590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
20009594:	687b      	ldr	r3, [r7, #4]
20009596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000959a:	687b      	ldr	r3, [r7, #4]
2000959c:	32b0      	adds	r2, #176	@ 0xb0
2000959e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
200095a2:	687b      	ldr	r3, [r7, #4]
200095a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
200095a8:	687b      	ldr	r3, [r7, #4]
200095aa:	7c1b      	ldrb	r3, [r3, #16]
200095ac:	2b00      	cmp	r3, #0
200095ae:	d11b      	bne.n	200095e8 <USBD_CUSTOM_HID_Init+0x94>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
200095b0:	4b3c      	ldr	r3, [pc, #240]	@ (200096a4 <USBD_CUSTOM_HID_Init+0x150>)
200095b2:	781b      	ldrb	r3, [r3, #0]
200095b4:	f003 020f 	and.w	r2, r3, #15
200095b8:	6879      	ldr	r1, [r7, #4]
200095ba:	4613      	mov	r3, r2
200095bc:	009b      	lsls	r3, r3, #2
200095be:	4413      	add	r3, r2
200095c0:	009b      	lsls	r3, r3, #2
200095c2:	440b      	add	r3, r1
200095c4:	331c      	adds	r3, #28
200095c6:	2205      	movs	r2, #5
200095c8:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
200095ca:	4b37      	ldr	r3, [pc, #220]	@ (200096a8 <USBD_CUSTOM_HID_Init+0x154>)
200095cc:	781b      	ldrb	r3, [r3, #0]
200095ce:	f003 020f 	and.w	r2, r3, #15
200095d2:	6879      	ldr	r1, [r7, #4]
200095d4:	4613      	mov	r3, r2
200095d6:	009b      	lsls	r3, r3, #2
200095d8:	4413      	add	r3, r2
200095da:	009b      	lsls	r3, r3, #2
200095dc:	440b      	add	r3, r1
200095de:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
200095e2:	2205      	movs	r2, #5
200095e4:	601a      	str	r2, [r3, #0]
200095e6:	e01a      	b.n	2000961e <USBD_CUSTOM_HID_Init+0xca>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
200095e8:	4b2e      	ldr	r3, [pc, #184]	@ (200096a4 <USBD_CUSTOM_HID_Init+0x150>)
200095ea:	781b      	ldrb	r3, [r3, #0]
200095ec:	f003 020f 	and.w	r2, r3, #15
200095f0:	6879      	ldr	r1, [r7, #4]
200095f2:	4613      	mov	r3, r2
200095f4:	009b      	lsls	r3, r3, #2
200095f6:	4413      	add	r3, r2
200095f8:	009b      	lsls	r3, r3, #2
200095fa:	440b      	add	r3, r1
200095fc:	331c      	adds	r3, #28
200095fe:	2205      	movs	r2, #5
20009600:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
20009602:	4b29      	ldr	r3, [pc, #164]	@ (200096a8 <USBD_CUSTOM_HID_Init+0x154>)
20009604:	781b      	ldrb	r3, [r3, #0]
20009606:	f003 020f 	and.w	r2, r3, #15
2000960a:	6879      	ldr	r1, [r7, #4]
2000960c:	4613      	mov	r3, r2
2000960e:	009b      	lsls	r3, r3, #2
20009610:	4413      	add	r3, r2
20009612:	009b      	lsls	r3, r3, #2
20009614:	440b      	add	r3, r1
20009616:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000961a:	2205      	movs	r2, #5
2000961c:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
2000961e:	4b21      	ldr	r3, [pc, #132]	@ (200096a4 <USBD_CUSTOM_HID_Init+0x150>)
20009620:	7819      	ldrb	r1, [r3, #0]
20009622:	2340      	movs	r3, #64	@ 0x40
20009624:	2203      	movs	r2, #3
20009626:	6878      	ldr	r0, [r7, #4]
20009628:	f002 fa1f 	bl	2000ba6a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
2000962c:	4b1d      	ldr	r3, [pc, #116]	@ (200096a4 <USBD_CUSTOM_HID_Init+0x150>)
2000962e:	781b      	ldrb	r3, [r3, #0]
20009630:	f003 020f 	and.w	r2, r3, #15
20009634:	6879      	ldr	r1, [r7, #4]
20009636:	4613      	mov	r3, r2
20009638:	009b      	lsls	r3, r3, #2
2000963a:	4413      	add	r3, r2
2000963c:	009b      	lsls	r3, r3, #2
2000963e:	440b      	add	r3, r1
20009640:	3323      	adds	r3, #35	@ 0x23
20009642:	2201      	movs	r2, #1
20009644:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
20009646:	4b18      	ldr	r3, [pc, #96]	@ (200096a8 <USBD_CUSTOM_HID_Init+0x154>)
20009648:	7819      	ldrb	r1, [r3, #0]
2000964a:	2340      	movs	r3, #64	@ 0x40
2000964c:	2203      	movs	r2, #3
2000964e:	6878      	ldr	r0, [r7, #4]
20009650:	f002 fa0b 	bl	2000ba6a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
20009654:	4b14      	ldr	r3, [pc, #80]	@ (200096a8 <USBD_CUSTOM_HID_Init+0x154>)
20009656:	781b      	ldrb	r3, [r3, #0]
20009658:	f003 020f 	and.w	r2, r3, #15
2000965c:	6879      	ldr	r1, [r7, #4]
2000965e:	4613      	mov	r3, r2
20009660:	009b      	lsls	r3, r3, #2
20009662:	4413      	add	r3, r2
20009664:	009b      	lsls	r3, r3, #2
20009666:	440b      	add	r3, r1
20009668:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000966c:	2201      	movs	r2, #1
2000966e:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
20009670:	68fb      	ldr	r3, [r7, #12]
20009672:	2200      	movs	r2, #0
20009674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
20009678:	687b      	ldr	r3, [r7, #4]
2000967a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
2000967e:	687a      	ldr	r2, [r7, #4]
20009680:	33b0      	adds	r3, #176	@ 0xb0
20009682:	009b      	lsls	r3, r3, #2
20009684:	4413      	add	r3, r2
20009686:	685b      	ldr	r3, [r3, #4]
20009688:	685b      	ldr	r3, [r3, #4]
2000968a:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
2000968c:	4b06      	ldr	r3, [pc, #24]	@ (200096a8 <USBD_CUSTOM_HID_Init+0x154>)
2000968e:	7819      	ldrb	r1, [r3, #0]
20009690:	68fa      	ldr	r2, [r7, #12]
20009692:	2340      	movs	r3, #64	@ 0x40
20009694:	6878      	ldr	r0, [r7, #4]
20009696:	f002 fad7 	bl	2000bc48 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
2000969a:	2300      	movs	r3, #0
}
2000969c:	4618      	mov	r0, r3
2000969e:	3710      	adds	r7, #16
200096a0:	46bd      	mov	sp, r7
200096a2:	bd80      	pop	{r7, pc}
200096a4:	2000c172 	.word	0x2000c172
200096a8:	2000c173 	.word	0x2000c173

200096ac <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
200096ac:	b580      	push	{r7, lr}
200096ae:	b082      	sub	sp, #8
200096b0:	af00      	add	r7, sp, #0
200096b2:	6078      	str	r0, [r7, #4]
200096b4:	460b      	mov	r3, r1
200096b6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
200096b8:	4b37      	ldr	r3, [pc, #220]	@ (20009798 <USBD_CUSTOM_HID_DeInit+0xec>)
200096ba:	781b      	ldrb	r3, [r3, #0]
200096bc:	4619      	mov	r1, r3
200096be:	6878      	ldr	r0, [r7, #4]
200096c0:	f002 f9f9 	bl	2000bab6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
200096c4:	4b34      	ldr	r3, [pc, #208]	@ (20009798 <USBD_CUSTOM_HID_DeInit+0xec>)
200096c6:	781b      	ldrb	r3, [r3, #0]
200096c8:	f003 020f 	and.w	r2, r3, #15
200096cc:	6879      	ldr	r1, [r7, #4]
200096ce:	4613      	mov	r3, r2
200096d0:	009b      	lsls	r3, r3, #2
200096d2:	4413      	add	r3, r2
200096d4:	009b      	lsls	r3, r3, #2
200096d6:	440b      	add	r3, r1
200096d8:	3323      	adds	r3, #35	@ 0x23
200096da:	2200      	movs	r2, #0
200096dc:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
200096de:	4b2e      	ldr	r3, [pc, #184]	@ (20009798 <USBD_CUSTOM_HID_DeInit+0xec>)
200096e0:	781b      	ldrb	r3, [r3, #0]
200096e2:	f003 020f 	and.w	r2, r3, #15
200096e6:	6879      	ldr	r1, [r7, #4]
200096e8:	4613      	mov	r3, r2
200096ea:	009b      	lsls	r3, r3, #2
200096ec:	4413      	add	r3, r2
200096ee:	009b      	lsls	r3, r3, #2
200096f0:	440b      	add	r3, r1
200096f2:	331c      	adds	r3, #28
200096f4:	2200      	movs	r2, #0
200096f6:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
200096f8:	4b28      	ldr	r3, [pc, #160]	@ (2000979c <USBD_CUSTOM_HID_DeInit+0xf0>)
200096fa:	781b      	ldrb	r3, [r3, #0]
200096fc:	4619      	mov	r1, r3
200096fe:	6878      	ldr	r0, [r7, #4]
20009700:	f002 f9d9 	bl	2000bab6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
20009704:	4b25      	ldr	r3, [pc, #148]	@ (2000979c <USBD_CUSTOM_HID_DeInit+0xf0>)
20009706:	781b      	ldrb	r3, [r3, #0]
20009708:	f003 020f 	and.w	r2, r3, #15
2000970c:	6879      	ldr	r1, [r7, #4]
2000970e:	4613      	mov	r3, r2
20009710:	009b      	lsls	r3, r3, #2
20009712:	4413      	add	r3, r2
20009714:	009b      	lsls	r3, r3, #2
20009716:	440b      	add	r3, r1
20009718:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000971c:	2200      	movs	r2, #0
2000971e:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
20009720:	4b1e      	ldr	r3, [pc, #120]	@ (2000979c <USBD_CUSTOM_HID_DeInit+0xf0>)
20009722:	781b      	ldrb	r3, [r3, #0]
20009724:	f003 020f 	and.w	r2, r3, #15
20009728:	6879      	ldr	r1, [r7, #4]
2000972a:	4613      	mov	r3, r2
2000972c:	009b      	lsls	r3, r3, #2
2000972e:	4413      	add	r3, r2
20009730:	009b      	lsls	r3, r3, #2
20009732:	440b      	add	r3, r1
20009734:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
20009738:	2200      	movs	r2, #0
2000973a:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
2000973c:	687b      	ldr	r3, [r7, #4]
2000973e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009742:	687b      	ldr	r3, [r7, #4]
20009744:	32b0      	adds	r2, #176	@ 0xb0
20009746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000974a:	2b00      	cmp	r3, #0
2000974c:	d01f      	beq.n	2000978e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
2000974e:	687b      	ldr	r3, [r7, #4]
20009750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009754:	687a      	ldr	r2, [r7, #4]
20009756:	33b0      	adds	r3, #176	@ 0xb0
20009758:	009b      	lsls	r3, r3, #2
2000975a:	4413      	add	r3, r2
2000975c:	685b      	ldr	r3, [r3, #4]
2000975e:	689b      	ldr	r3, [r3, #8]
20009760:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
20009762:	687b      	ldr	r3, [r7, #4]
20009764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009768:	687b      	ldr	r3, [r7, #4]
2000976a:	32b0      	adds	r2, #176	@ 0xb0
2000976c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009770:	4618      	mov	r0, r3
20009772:	f002 fb25 	bl	2000bdc0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
20009776:	687b      	ldr	r3, [r7, #4]
20009778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000977c:	687b      	ldr	r3, [r7, #4]
2000977e:	32b0      	adds	r2, #176	@ 0xb0
20009780:	2100      	movs	r1, #0
20009782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
20009786:	687b      	ldr	r3, [r7, #4]
20009788:	2200      	movs	r2, #0
2000978a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
2000978e:	2300      	movs	r3, #0
}
20009790:	4618      	mov	r0, r3
20009792:	3708      	adds	r7, #8
20009794:	46bd      	mov	sp, r7
20009796:	bd80      	pop	{r7, pc}
20009798:	2000c172 	.word	0x2000c172
2000979c:	2000c173 	.word	0x2000c173

200097a0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
200097a0:	b580      	push	{r7, lr}
200097a2:	b088      	sub	sp, #32
200097a4:	af00      	add	r7, sp, #0
200097a6:	6078      	str	r0, [r7, #4]
200097a8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
200097aa:	687b      	ldr	r3, [r7, #4]
200097ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
200097b0:	687b      	ldr	r3, [r7, #4]
200097b2:	32b0      	adds	r2, #176	@ 0xb0
200097b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200097b8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
200097ba:	2300      	movs	r3, #0
200097bc:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
200097be:	2300      	movs	r3, #0
200097c0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
200097c2:	2300      	movs	r3, #0
200097c4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
200097c6:	2300      	movs	r3, #0
200097c8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
200097ca:	693b      	ldr	r3, [r7, #16]
200097cc:	2b00      	cmp	r3, #0
200097ce:	d101      	bne.n	200097d4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
200097d0:	2303      	movs	r3, #3
200097d2:	e108      	b.n	200099e6 <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
200097d4:	683b      	ldr	r3, [r7, #0]
200097d6:	781b      	ldrb	r3, [r3, #0]
200097d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
200097dc:	2b00      	cmp	r3, #0
200097de:	d05c      	beq.n	2000989a <USBD_CUSTOM_HID_Setup+0xfa>
200097e0:	2b20      	cmp	r3, #32
200097e2:	f040 80f8 	bne.w	200099d6 <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
200097e6:	683b      	ldr	r3, [r7, #0]
200097e8:	785b      	ldrb	r3, [r3, #1]
200097ea:	3b02      	subs	r3, #2
200097ec:	2b09      	cmp	r3, #9
200097ee:	d84c      	bhi.n	2000988a <USBD_CUSTOM_HID_Setup+0xea>
200097f0:	a201      	add	r2, pc, #4	@ (adr r2, 200097f8 <USBD_CUSTOM_HID_Setup+0x58>)
200097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200097f6:	bf00      	nop
200097f8:	20009851 	.word	0x20009851
200097fc:	2000982f 	.word	0x2000982f
20009800:	2000988b 	.word	0x2000988b
20009804:	2000988b 	.word	0x2000988b
20009808:	2000988b 	.word	0x2000988b
2000980c:	2000988b 	.word	0x2000988b
20009810:	2000988b 	.word	0x2000988b
20009814:	20009861 	.word	0x20009861
20009818:	2000983f 	.word	0x2000983f
2000981c:	20009821 	.word	0x20009821
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
20009820:	683b      	ldr	r3, [r7, #0]
20009822:	885b      	ldrh	r3, [r3, #2]
20009824:	b2db      	uxtb	r3, r3
20009826:	461a      	mov	r2, r3
20009828:	693b      	ldr	r3, [r7, #16]
2000982a:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
2000982c:	e034      	b.n	20009898 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
2000982e:	693b      	ldr	r3, [r7, #16]
20009830:	3340      	adds	r3, #64	@ 0x40
20009832:	2201      	movs	r2, #1
20009834:	4619      	mov	r1, r3
20009836:	6878      	ldr	r0, [r7, #4]
20009838:	f001 fd3a 	bl	2000b2b0 <USBD_CtlSendData>
          break;
2000983c:	e02c      	b.n	20009898 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
2000983e:	683b      	ldr	r3, [r7, #0]
20009840:	885b      	ldrh	r3, [r3, #2]
20009842:	0a1b      	lsrs	r3, r3, #8
20009844:	b29b      	uxth	r3, r3
20009846:	b2db      	uxtb	r3, r3
20009848:	461a      	mov	r2, r3
2000984a:	693b      	ldr	r3, [r7, #16]
2000984c:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
2000984e:	e023      	b.n	20009898 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
20009850:	693b      	ldr	r3, [r7, #16]
20009852:	3344      	adds	r3, #68	@ 0x44
20009854:	2201      	movs	r2, #1
20009856:	4619      	mov	r1, r3
20009858:	6878      	ldr	r0, [r7, #4]
2000985a:	f001 fd29 	bl	2000b2b0 <USBD_CtlSendData>
          break;
2000985e:	e01b      	b.n	20009898 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
20009860:	683b      	ldr	r3, [r7, #0]
20009862:	88db      	ldrh	r3, [r3, #6]
20009864:	2b40      	cmp	r3, #64	@ 0x40
20009866:	d905      	bls.n	20009874 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
20009868:	6839      	ldr	r1, [r7, #0]
2000986a:	6878      	ldr	r0, [r7, #4]
2000986c:	f001 fca3 	bl	2000b1b6 <USBD_CtlError>
            return USBD_FAIL;
20009870:	2303      	movs	r3, #3
20009872:	e0b8      	b.n	200099e6 <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
20009874:	693b      	ldr	r3, [r7, #16]
20009876:	2201      	movs	r2, #1
20009878:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
2000987a:	6939      	ldr	r1, [r7, #16]
2000987c:	683b      	ldr	r3, [r7, #0]
2000987e:	88db      	ldrh	r3, [r3, #6]
20009880:	461a      	mov	r2, r3
20009882:	6878      	ldr	r0, [r7, #4]
20009884:	f001 fd43 	bl	2000b30e <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
20009888:	e006      	b.n	20009898 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
2000988a:	6839      	ldr	r1, [r7, #0]
2000988c:	6878      	ldr	r0, [r7, #4]
2000988e:	f001 fc92 	bl	2000b1b6 <USBD_CtlError>
          ret = USBD_FAIL;
20009892:	2303      	movs	r3, #3
20009894:	75fb      	strb	r3, [r7, #23]
          break;
20009896:	bf00      	nop
      }
      break;
20009898:	e0a4      	b.n	200099e4 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000989a:	683b      	ldr	r3, [r7, #0]
2000989c:	785b      	ldrb	r3, [r3, #1]
2000989e:	2b0b      	cmp	r3, #11
200098a0:	f200 8090 	bhi.w	200099c4 <USBD_CUSTOM_HID_Setup+0x224>
200098a4:	a201      	add	r2, pc, #4	@ (adr r2, 200098ac <USBD_CUSTOM_HID_Setup+0x10c>)
200098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200098aa:	bf00      	nop
200098ac:	200098dd 	.word	0x200098dd
200098b0:	200099d3 	.word	0x200099d3
200098b4:	200099c5 	.word	0x200099c5
200098b8:	200099c5 	.word	0x200099c5
200098bc:	200099c5 	.word	0x200099c5
200098c0:	200099c5 	.word	0x200099c5
200098c4:	20009907 	.word	0x20009907
200098c8:	200099c5 	.word	0x200099c5
200098cc:	200099c5 	.word	0x200099c5
200098d0:	200099c5 	.word	0x200099c5
200098d4:	20009973 	.word	0x20009973
200098d8:	2000999d 	.word	0x2000999d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
200098dc:	687b      	ldr	r3, [r7, #4]
200098de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
200098e2:	b2db      	uxtb	r3, r3
200098e4:	2b03      	cmp	r3, #3
200098e6:	d107      	bne.n	200098f8 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
200098e8:	f107 030e 	add.w	r3, r7, #14
200098ec:	2202      	movs	r2, #2
200098ee:	4619      	mov	r1, r3
200098f0:	6878      	ldr	r0, [r7, #4]
200098f2:	f001 fcdd 	bl	2000b2b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
200098f6:	e06d      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
200098f8:	6839      	ldr	r1, [r7, #0]
200098fa:	6878      	ldr	r0, [r7, #4]
200098fc:	f001 fc5b 	bl	2000b1b6 <USBD_CtlError>
            ret = USBD_FAIL;
20009900:	2303      	movs	r3, #3
20009902:	75fb      	strb	r3, [r7, #23]
          break;
20009904:	e066      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
20009906:	683b      	ldr	r3, [r7, #0]
20009908:	885b      	ldrh	r3, [r3, #2]
2000990a:	0a1b      	lsrs	r3, r3, #8
2000990c:	b29b      	uxth	r3, r3
2000990e:	2b22      	cmp	r3, #34	@ 0x22
20009910:	d110      	bne.n	20009934 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
20009912:	683b      	ldr	r3, [r7, #0]
20009914:	88db      	ldrh	r3, [r3, #6]
20009916:	2b40      	cmp	r3, #64	@ 0x40
20009918:	bf28      	it	cs
2000991a:	2340      	movcs	r3, #64	@ 0x40
2000991c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
2000991e:	687b      	ldr	r3, [r7, #4]
20009920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009924:	687a      	ldr	r2, [r7, #4]
20009926:	33b0      	adds	r3, #176	@ 0xb0
20009928:	009b      	lsls	r3, r3, #2
2000992a:	4413      	add	r3, r2
2000992c:	685b      	ldr	r3, [r3, #4]
2000992e:	681b      	ldr	r3, [r3, #0]
20009930:	61bb      	str	r3, [r7, #24]
20009932:	e00d      	b.n	20009950 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
20009934:	683b      	ldr	r3, [r7, #0]
20009936:	885b      	ldrh	r3, [r3, #2]
20009938:	0a1b      	lsrs	r3, r3, #8
2000993a:	b29b      	uxth	r3, r3
2000993c:	2b21      	cmp	r3, #33	@ 0x21
2000993e:	d107      	bne.n	20009950 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
20009940:	4b2b      	ldr	r3, [pc, #172]	@ (200099f0 <USBD_CUSTOM_HID_Setup+0x250>)
20009942:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
20009944:	683b      	ldr	r3, [r7, #0]
20009946:	88db      	ldrh	r3, [r3, #6]
20009948:	2b09      	cmp	r3, #9
2000994a:	bf28      	it	cs
2000994c:	2309      	movcs	r3, #9
2000994e:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
20009950:	69bb      	ldr	r3, [r7, #24]
20009952:	2b00      	cmp	r3, #0
20009954:	d006      	beq.n	20009964 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
20009956:	8bfb      	ldrh	r3, [r7, #30]
20009958:	461a      	mov	r2, r3
2000995a:	69b9      	ldr	r1, [r7, #24]
2000995c:	6878      	ldr	r0, [r7, #4]
2000995e:	f001 fca7 	bl	2000b2b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
20009962:	e037      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
20009964:	6839      	ldr	r1, [r7, #0]
20009966:	6878      	ldr	r0, [r7, #4]
20009968:	f001 fc25 	bl	2000b1b6 <USBD_CtlError>
            ret = USBD_FAIL;
2000996c:	2303      	movs	r3, #3
2000996e:	75fb      	strb	r3, [r7, #23]
          break;
20009970:	e030      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
20009972:	687b      	ldr	r3, [r7, #4]
20009974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20009978:	b2db      	uxtb	r3, r3
2000997a:	2b03      	cmp	r3, #3
2000997c:	d107      	bne.n	2000998e <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
2000997e:	693b      	ldr	r3, [r7, #16]
20009980:	3348      	adds	r3, #72	@ 0x48
20009982:	2201      	movs	r2, #1
20009984:	4619      	mov	r1, r3
20009986:	6878      	ldr	r0, [r7, #4]
20009988:	f001 fc92 	bl	2000b2b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000998c:	e022      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000998e:	6839      	ldr	r1, [r7, #0]
20009990:	6878      	ldr	r0, [r7, #4]
20009992:	f001 fc10 	bl	2000b1b6 <USBD_CtlError>
            ret = USBD_FAIL;
20009996:	2303      	movs	r3, #3
20009998:	75fb      	strb	r3, [r7, #23]
          break;
2000999a:	e01b      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000999c:	687b      	ldr	r3, [r7, #4]
2000999e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
200099a2:	b2db      	uxtb	r3, r3
200099a4:	2b03      	cmp	r3, #3
200099a6:	d106      	bne.n	200099b6 <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
200099a8:	683b      	ldr	r3, [r7, #0]
200099aa:	885b      	ldrh	r3, [r3, #2]
200099ac:	b2db      	uxtb	r3, r3
200099ae:	461a      	mov	r2, r3
200099b0:	693b      	ldr	r3, [r7, #16]
200099b2:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
200099b4:	e00e      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
200099b6:	6839      	ldr	r1, [r7, #0]
200099b8:	6878      	ldr	r0, [r7, #4]
200099ba:	f001 fbfc 	bl	2000b1b6 <USBD_CtlError>
            ret = USBD_FAIL;
200099be:	2303      	movs	r3, #3
200099c0:	75fb      	strb	r3, [r7, #23]
          break;
200099c2:	e007      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
200099c4:	6839      	ldr	r1, [r7, #0]
200099c6:	6878      	ldr	r0, [r7, #4]
200099c8:	f001 fbf5 	bl	2000b1b6 <USBD_CtlError>
          ret = USBD_FAIL;
200099cc:	2303      	movs	r3, #3
200099ce:	75fb      	strb	r3, [r7, #23]
          break;
200099d0:	e000      	b.n	200099d4 <USBD_CUSTOM_HID_Setup+0x234>
          break;
200099d2:	bf00      	nop
      }
      break;
200099d4:	e006      	b.n	200099e4 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
200099d6:	6839      	ldr	r1, [r7, #0]
200099d8:	6878      	ldr	r0, [r7, #4]
200099da:	f001 fbec 	bl	2000b1b6 <USBD_CtlError>
      ret = USBD_FAIL;
200099de:	2303      	movs	r3, #3
200099e0:	75fb      	strb	r3, [r7, #23]
      break;
200099e2:	bf00      	nop
  }
  return (uint8_t)ret;
200099e4:	7dfb      	ldrb	r3, [r7, #23]
}
200099e6:	4618      	mov	r0, r3
200099e8:	3720      	adds	r7, #32
200099ea:	46bd      	mov	sp, r7
200099ec:	bd80      	pop	{r7, pc}
200099ee:	bf00      	nop
200099f0:	2000c15c 	.word	0x2000c15c

200099f4 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
200099f4:	b580      	push	{r7, lr}
200099f6:	b086      	sub	sp, #24
200099f8:	af00      	add	r7, sp, #0
200099fa:	60f8      	str	r0, [r7, #12]
200099fc:	60b9      	str	r1, [r7, #8]
200099fe:	4613      	mov	r3, r2
20009a00:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009a02:	68fb      	ldr	r3, [r7, #12]
20009a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009a08:	68fb      	ldr	r3, [r7, #12]
20009a0a:	32b0      	adds	r2, #176	@ 0xb0
20009a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009a10:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
20009a12:	697b      	ldr	r3, [r7, #20]
20009a14:	2b00      	cmp	r3, #0
20009a16:	d101      	bne.n	20009a1c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
20009a18:	2303      	movs	r3, #3
20009a1a:	e019      	b.n	20009a50 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
20009a1c:	68fb      	ldr	r3, [r7, #12]
20009a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20009a22:	b2db      	uxtb	r3, r3
20009a24:	2b03      	cmp	r3, #3
20009a26:	d112      	bne.n	20009a4e <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
20009a28:	697b      	ldr	r3, [r7, #20]
20009a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20009a2e:	2b00      	cmp	r3, #0
20009a30:	d10b      	bne.n	20009a4a <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
20009a32:	697b      	ldr	r3, [r7, #20]
20009a34:	2201      	movs	r2, #1
20009a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
20009a3a:	4b07      	ldr	r3, [pc, #28]	@ (20009a58 <USBD_CUSTOM_HID_SendReport+0x64>)
20009a3c:	7819      	ldrb	r1, [r3, #0]
20009a3e:	88fb      	ldrh	r3, [r7, #6]
20009a40:	68ba      	ldr	r2, [r7, #8]
20009a42:	68f8      	ldr	r0, [r7, #12]
20009a44:	f002 f8df 	bl	2000bc06 <USBD_LL_Transmit>
20009a48:	e001      	b.n	20009a4e <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
20009a4a:	2301      	movs	r3, #1
20009a4c:	e000      	b.n	20009a50 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
20009a4e:	2300      	movs	r3, #0
}
20009a50:	4618      	mov	r0, r3
20009a52:	3718      	adds	r7, #24
20009a54:	46bd      	mov	sp, r7
20009a56:	bd80      	pop	{r7, pc}
20009a58:	2000c172 	.word	0x2000c172

20009a5c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
20009a5c:	b580      	push	{r7, lr}
20009a5e:	b084      	sub	sp, #16
20009a60:	af00      	add	r7, sp, #0
20009a62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20009a64:	2181      	movs	r1, #129	@ 0x81
20009a66:	4815      	ldr	r0, [pc, #84]	@ (20009abc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
20009a68:	f000 fd44 	bl	2000a4f4 <USBD_GetEpDesc>
20009a6c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
20009a6e:	2101      	movs	r1, #1
20009a70:	4812      	ldr	r0, [pc, #72]	@ (20009abc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
20009a72:	f000 fd3f 	bl	2000a4f4 <USBD_GetEpDesc>
20009a76:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
20009a78:	68fb      	ldr	r3, [r7, #12]
20009a7a:	2b00      	cmp	r3, #0
20009a7c:	d009      	beq.n	20009a92 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
20009a7e:	68fb      	ldr	r3, [r7, #12]
20009a80:	2200      	movs	r2, #0
20009a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009a86:	711a      	strb	r2, [r3, #4]
20009a88:	2200      	movs	r2, #0
20009a8a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009a8c:	68fb      	ldr	r3, [r7, #12]
20009a8e:	2205      	movs	r2, #5
20009a90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
20009a92:	68bb      	ldr	r3, [r7, #8]
20009a94:	2b00      	cmp	r3, #0
20009a96:	d009      	beq.n	20009aac <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
20009a98:	68bb      	ldr	r3, [r7, #8]
20009a9a:	2200      	movs	r2, #0
20009a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009aa0:	711a      	strb	r2, [r3, #4]
20009aa2:	2200      	movs	r2, #0
20009aa4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009aa6:	68bb      	ldr	r3, [r7, #8]
20009aa8:	2205      	movs	r2, #5
20009aaa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20009aac:	687b      	ldr	r3, [r7, #4]
20009aae:	2229      	movs	r2, #41	@ 0x29
20009ab0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20009ab2:	4b02      	ldr	r3, [pc, #8]	@ (20009abc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
20009ab4:	4618      	mov	r0, r3
20009ab6:	3710      	adds	r7, #16
20009ab8:	46bd      	mov	sp, r7
20009aba:	bd80      	pop	{r7, pc}
20009abc:	2000c130 	.word	0x2000c130

20009ac0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
20009ac0:	b580      	push	{r7, lr}
20009ac2:	b084      	sub	sp, #16
20009ac4:	af00      	add	r7, sp, #0
20009ac6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20009ac8:	2181      	movs	r1, #129	@ 0x81
20009aca:	4815      	ldr	r0, [pc, #84]	@ (20009b20 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
20009acc:	f000 fd12 	bl	2000a4f4 <USBD_GetEpDesc>
20009ad0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
20009ad2:	2101      	movs	r1, #1
20009ad4:	4812      	ldr	r0, [pc, #72]	@ (20009b20 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
20009ad6:	f000 fd0d 	bl	2000a4f4 <USBD_GetEpDesc>
20009ada:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
20009adc:	68fb      	ldr	r3, [r7, #12]
20009ade:	2b00      	cmp	r3, #0
20009ae0:	d009      	beq.n	20009af6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
20009ae2:	68fb      	ldr	r3, [r7, #12]
20009ae4:	2200      	movs	r2, #0
20009ae6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009aea:	711a      	strb	r2, [r3, #4]
20009aec:	2200      	movs	r2, #0
20009aee:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
20009af0:	68fb      	ldr	r3, [r7, #12]
20009af2:	2205      	movs	r2, #5
20009af4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
20009af6:	68bb      	ldr	r3, [r7, #8]
20009af8:	2b00      	cmp	r3, #0
20009afa:	d009      	beq.n	20009b10 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
20009afc:	68bb      	ldr	r3, [r7, #8]
20009afe:	2200      	movs	r2, #0
20009b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009b04:	711a      	strb	r2, [r3, #4]
20009b06:	2200      	movs	r2, #0
20009b08:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
20009b0a:	68bb      	ldr	r3, [r7, #8]
20009b0c:	2205      	movs	r2, #5
20009b0e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20009b10:	687b      	ldr	r3, [r7, #4]
20009b12:	2229      	movs	r2, #41	@ 0x29
20009b14:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20009b16:	4b02      	ldr	r3, [pc, #8]	@ (20009b20 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
20009b18:	4618      	mov	r0, r3
20009b1a:	3710      	adds	r7, #16
20009b1c:	46bd      	mov	sp, r7
20009b1e:	bd80      	pop	{r7, pc}
20009b20:	2000c130 	.word	0x2000c130

20009b24 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
20009b24:	b580      	push	{r7, lr}
20009b26:	b084      	sub	sp, #16
20009b28:	af00      	add	r7, sp, #0
20009b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20009b2c:	2181      	movs	r1, #129	@ 0x81
20009b2e:	4815      	ldr	r0, [pc, #84]	@ (20009b84 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
20009b30:	f000 fce0 	bl	2000a4f4 <USBD_GetEpDesc>
20009b34:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
20009b36:	2101      	movs	r1, #1
20009b38:	4812      	ldr	r0, [pc, #72]	@ (20009b84 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
20009b3a:	f000 fcdb 	bl	2000a4f4 <USBD_GetEpDesc>
20009b3e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
20009b40:	68fb      	ldr	r3, [r7, #12]
20009b42:	2b00      	cmp	r3, #0
20009b44:	d009      	beq.n	20009b5a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
20009b46:	68fb      	ldr	r3, [r7, #12]
20009b48:	2200      	movs	r2, #0
20009b4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009b4e:	711a      	strb	r2, [r3, #4]
20009b50:	2200      	movs	r2, #0
20009b52:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009b54:	68fb      	ldr	r3, [r7, #12]
20009b56:	2205      	movs	r2, #5
20009b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
20009b5a:	68bb      	ldr	r3, [r7, #8]
20009b5c:	2b00      	cmp	r3, #0
20009b5e:	d009      	beq.n	20009b74 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
20009b60:	68bb      	ldr	r3, [r7, #8]
20009b62:	2200      	movs	r2, #0
20009b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20009b68:	711a      	strb	r2, [r3, #4]
20009b6a:	2200      	movs	r2, #0
20009b6c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20009b6e:	68bb      	ldr	r3, [r7, #8]
20009b70:	2205      	movs	r2, #5
20009b72:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20009b74:	687b      	ldr	r3, [r7, #4]
20009b76:	2229      	movs	r2, #41	@ 0x29
20009b78:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20009b7a:	4b02      	ldr	r3, [pc, #8]	@ (20009b84 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
20009b7c:	4618      	mov	r0, r3
20009b7e:	3710      	adds	r7, #16
20009b80:	46bd      	mov	sp, r7
20009b82:	bd80      	pop	{r7, pc}
20009b84:	2000c130 	.word	0x2000c130

20009b88 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
20009b88:	b480      	push	{r7}
20009b8a:	b083      	sub	sp, #12
20009b8c:	af00      	add	r7, sp, #0
20009b8e:	6078      	str	r0, [r7, #4]
20009b90:	460b      	mov	r3, r1
20009b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
20009b94:	687b      	ldr	r3, [r7, #4]
20009b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009b9a:	687b      	ldr	r3, [r7, #4]
20009b9c:	32b0      	adds	r2, #176	@ 0xb0
20009b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009ba2:	2200      	movs	r2, #0
20009ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
20009ba8:	2300      	movs	r3, #0
}
20009baa:	4618      	mov	r0, r3
20009bac:	370c      	adds	r7, #12
20009bae:	46bd      	mov	sp, r7
20009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
20009bb4:	4770      	bx	lr

20009bb6 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
20009bb6:	b580      	push	{r7, lr}
20009bb8:	b084      	sub	sp, #16
20009bba:	af00      	add	r7, sp, #0
20009bbc:	6078      	str	r0, [r7, #4]
20009bbe:	460b      	mov	r3, r1
20009bc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
20009bc2:	687b      	ldr	r3, [r7, #4]
20009bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009bc8:	687b      	ldr	r3, [r7, #4]
20009bca:	32b0      	adds	r2, #176	@ 0xb0
20009bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009bd0:	2b00      	cmp	r3, #0
20009bd2:	d101      	bne.n	20009bd8 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
20009bd4:	2303      	movs	r3, #3
20009bd6:	e017      	b.n	20009c08 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009bd8:	687b      	ldr	r3, [r7, #4]
20009bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009bde:	687b      	ldr	r3, [r7, #4]
20009be0:	32b0      	adds	r2, #176	@ 0xb0
20009be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009be6:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
20009be8:	687b      	ldr	r3, [r7, #4]
20009bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009bee:	687a      	ldr	r2, [r7, #4]
20009bf0:	33b0      	adds	r3, #176	@ 0xb0
20009bf2:	009b      	lsls	r3, r3, #2
20009bf4:	4413      	add	r3, r2
20009bf6:	685b      	ldr	r3, [r3, #4]
20009bf8:	68db      	ldr	r3, [r3, #12]
20009bfa:	68fa      	ldr	r2, [r7, #12]
20009bfc:	7810      	ldrb	r0, [r2, #0]
20009bfe:	68fa      	ldr	r2, [r7, #12]
20009c00:	7852      	ldrb	r2, [r2, #1]
20009c02:	4611      	mov	r1, r2
20009c04:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
20009c06:	2300      	movs	r3, #0
}
20009c08:	4618      	mov	r0, r3
20009c0a:	3710      	adds	r7, #16
20009c0c:	46bd      	mov	sp, r7
20009c0e:	bd80      	pop	{r7, pc}

20009c10 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
20009c10:	b580      	push	{r7, lr}
20009c12:	b084      	sub	sp, #16
20009c14:	af00      	add	r7, sp, #0
20009c16:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;
  uint8_t len;

  len = USBD_LL_GetRxDataSize(pdev, CUSTOMHIDOutEpAdd);
20009c18:	4b17      	ldr	r3, [pc, #92]	@ (20009c78 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
20009c1a:	781b      	ldrb	r3, [r3, #0]
20009c1c:	4619      	mov	r1, r3
20009c1e:	6878      	ldr	r0, [r7, #4]
20009c20:	f002 f833 	bl	2000bc8a <USBD_LL_GetRxDataSize>
20009c24:	4603      	mov	r3, r0
20009c26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
20009c28:	687b      	ldr	r3, [r7, #4]
20009c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009c2e:	687b      	ldr	r3, [r7, #4]
20009c30:	32b0      	adds	r2, #176	@ 0xb0
20009c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009c36:	2b00      	cmp	r3, #0
20009c38:	d101      	bne.n	20009c3e <USBD_CUSTOM_HID_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
20009c3a:	2303      	movs	r3, #3
20009c3c:	e018      	b.n	20009c70 <USBD_CUSTOM_HID_ReceivePacket+0x60>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009c3e:	687b      	ldr	r3, [r7, #4]
20009c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009c44:	687b      	ldr	r3, [r7, #4]
20009c46:	32b0      	adds	r2, #176	@ 0xb0
20009c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009c4c:	60bb      	str	r3, [r7, #8]

  memcpy(rdBuff, hhid->Report_buf, len);
20009c4e:	68bb      	ldr	r3, [r7, #8]
20009c50:	7bfa      	ldrb	r2, [r7, #15]
20009c52:	4619      	mov	r1, r3
20009c54:	4809      	ldr	r0, [pc, #36]	@ (20009c7c <USBD_CUSTOM_HID_ReceivePacket+0x6c>)
20009c56:	f002 f9ad 	bl	2000bfb4 <memcpy>
  msgAvailable = 1;
20009c5a:	4b09      	ldr	r3, [pc, #36]	@ (20009c80 <USBD_CUSTOM_HID_ReceivePacket+0x70>)
20009c5c:	2201      	movs	r2, #1
20009c5e:	601a      	str	r2, [r3, #0]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
20009c60:	4b05      	ldr	r3, [pc, #20]	@ (20009c78 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
20009c62:	7819      	ldrb	r1, [r3, #0]
20009c64:	68ba      	ldr	r2, [r7, #8]
20009c66:	2340      	movs	r3, #64	@ 0x40
20009c68:	6878      	ldr	r0, [r7, #4]
20009c6a:	f001 ffed 	bl	2000bc48 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);



  return (uint8_t)USBD_OK;
20009c6e:	2300      	movs	r3, #0
}
20009c70:	4618      	mov	r0, r3
20009c72:	3710      	adds	r7, #16
20009c74:	46bd      	mov	sp, r7
20009c76:	bd80      	pop	{r7, pc}
20009c78:	2000c173 	.word	0x2000c173
20009c7c:	2000d2d0 	.word	0x2000d2d0
20009c80:	2000d354 	.word	0x2000d354

20009c84 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
20009c84:	b580      	push	{r7, lr}
20009c86:	b084      	sub	sp, #16
20009c88:	af00      	add	r7, sp, #0
20009c8a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20009c8c:	687b      	ldr	r3, [r7, #4]
20009c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009c92:	687b      	ldr	r3, [r7, #4]
20009c94:	32b0      	adds	r2, #176	@ 0xb0
20009c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009c9a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
20009c9c:	68fb      	ldr	r3, [r7, #12]
20009c9e:	2b00      	cmp	r3, #0
20009ca0:	d101      	bne.n	20009ca6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
20009ca2:	2303      	movs	r3, #3
20009ca4:	e016      	b.n	20009cd4 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
20009ca6:	68fb      	ldr	r3, [r7, #12]
20009ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20009caa:	2b01      	cmp	r3, #1
20009cac:	d111      	bne.n	20009cd2 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
20009cae:	687b      	ldr	r3, [r7, #4]
20009cb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009cb4:	687a      	ldr	r2, [r7, #4]
20009cb6:	33b0      	adds	r3, #176	@ 0xb0
20009cb8:	009b      	lsls	r3, r3, #2
20009cba:	4413      	add	r3, r2
20009cbc:	685b      	ldr	r3, [r3, #4]
20009cbe:	68db      	ldr	r3, [r3, #12]
20009cc0:	68fa      	ldr	r2, [r7, #12]
20009cc2:	7810      	ldrb	r0, [r2, #0]
20009cc4:	68fa      	ldr	r2, [r7, #12]
20009cc6:	7852      	ldrb	r2, [r2, #1]
20009cc8:	4611      	mov	r1, r2
20009cca:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
20009ccc:	68fb      	ldr	r3, [r7, #12]
20009cce:	2200      	movs	r2, #0
20009cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
20009cd2:	2300      	movs	r3, #0
}
20009cd4:	4618      	mov	r0, r3
20009cd6:	3710      	adds	r7, #16
20009cd8:	46bd      	mov	sp, r7
20009cda:	bd80      	pop	{r7, pc}

20009cdc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
20009cdc:	b480      	push	{r7}
20009cde:	b083      	sub	sp, #12
20009ce0:	af00      	add	r7, sp, #0
20009ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
20009ce4:	687b      	ldr	r3, [r7, #4]
20009ce6:	220a      	movs	r2, #10
20009ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
20009cea:	4b03      	ldr	r3, [pc, #12]	@ (20009cf8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
20009cec:	4618      	mov	r0, r3
20009cee:	370c      	adds	r7, #12
20009cf0:	46bd      	mov	sp, r7
20009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
20009cf6:	4770      	bx	lr
20009cf8:	2000c168 	.word	0x2000c168

20009cfc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
20009cfc:	b480      	push	{r7}
20009cfe:	b083      	sub	sp, #12
20009d00:	af00      	add	r7, sp, #0
20009d02:	6078      	str	r0, [r7, #4]
20009d04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
20009d06:	683b      	ldr	r3, [r7, #0]
20009d08:	2b00      	cmp	r3, #0
20009d0a:	d101      	bne.n	20009d10 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
20009d0c:	2303      	movs	r3, #3
20009d0e:	e009      	b.n	20009d24 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
20009d10:	687b      	ldr	r3, [r7, #4]
20009d12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20009d16:	687a      	ldr	r2, [r7, #4]
20009d18:	33b0      	adds	r3, #176	@ 0xb0
20009d1a:	009b      	lsls	r3, r3, #2
20009d1c:	4413      	add	r3, r2
20009d1e:	683a      	ldr	r2, [r7, #0]
20009d20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
20009d22:	2300      	movs	r3, #0
}
20009d24:	4618      	mov	r0, r3
20009d26:	370c      	adds	r7, #12
20009d28:	46bd      	mov	sp, r7
20009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20009d2e:	4770      	bx	lr

20009d30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
20009d30:	b580      	push	{r7, lr}
20009d32:	b086      	sub	sp, #24
20009d34:	af00      	add	r7, sp, #0
20009d36:	60f8      	str	r0, [r7, #12]
20009d38:	60b9      	str	r1, [r7, #8]
20009d3a:	4613      	mov	r3, r2
20009d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
20009d3e:	68fb      	ldr	r3, [r7, #12]
20009d40:	2b00      	cmp	r3, #0
20009d42:	d101      	bne.n	20009d48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
20009d44:	2303      	movs	r3, #3
20009d46:	e01f      	b.n	20009d88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
20009d48:	68fb      	ldr	r3, [r7, #12]
20009d4a:	2200      	movs	r2, #0
20009d4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
20009d50:	68fb      	ldr	r3, [r7, #12]
20009d52:	2200      	movs	r2, #0
20009d54:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
20009d58:	68fb      	ldr	r3, [r7, #12]
20009d5a:	2200      	movs	r2, #0
20009d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
20009d60:	68bb      	ldr	r3, [r7, #8]
20009d62:	2b00      	cmp	r3, #0
20009d64:	d003      	beq.n	20009d6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
20009d66:	68fb      	ldr	r3, [r7, #12]
20009d68:	68ba      	ldr	r2, [r7, #8]
20009d6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
20009d6e:	68fb      	ldr	r3, [r7, #12]
20009d70:	2201      	movs	r2, #1
20009d72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
20009d76:	68fb      	ldr	r3, [r7, #12]
20009d78:	79fa      	ldrb	r2, [r7, #7]
20009d7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
20009d7c:	68f8      	ldr	r0, [r7, #12]
20009d7e:	f001 fe0d 	bl	2000b99c <USBD_LL_Init>
20009d82:	4603      	mov	r3, r0
20009d84:	75fb      	strb	r3, [r7, #23]

  return ret;
20009d86:	7dfb      	ldrb	r3, [r7, #23]
}
20009d88:	4618      	mov	r0, r3
20009d8a:	3718      	adds	r7, #24
20009d8c:	46bd      	mov	sp, r7
20009d8e:	bd80      	pop	{r7, pc}

20009d90 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
20009d90:	b580      	push	{r7, lr}
20009d92:	b084      	sub	sp, #16
20009d94:	af00      	add	r7, sp, #0
20009d96:	6078      	str	r0, [r7, #4]
20009d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
20009d9a:	2300      	movs	r3, #0
20009d9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
20009d9e:	683b      	ldr	r3, [r7, #0]
20009da0:	2b00      	cmp	r3, #0
20009da2:	d101      	bne.n	20009da8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
20009da4:	2303      	movs	r3, #3
20009da6:	e025      	b.n	20009df4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
20009da8:	687b      	ldr	r3, [r7, #4]
20009daa:	683a      	ldr	r2, [r7, #0]
20009dac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
20009db0:	687b      	ldr	r3, [r7, #4]
20009db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009db6:	687b      	ldr	r3, [r7, #4]
20009db8:	32ae      	adds	r2, #174	@ 0xae
20009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20009dc0:	2b00      	cmp	r3, #0
20009dc2:	d00f      	beq.n	20009de4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
20009dc4:	687b      	ldr	r3, [r7, #4]
20009dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20009dca:	687b      	ldr	r3, [r7, #4]
20009dcc:	32ae      	adds	r2, #174	@ 0xae
20009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20009dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20009dd4:	f107 020e 	add.w	r2, r7, #14
20009dd8:	4610      	mov	r0, r2
20009dda:	4798      	blx	r3
20009ddc:	4602      	mov	r2, r0
20009dde:	687b      	ldr	r3, [r7, #4]
20009de0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
20009de4:	687b      	ldr	r3, [r7, #4]
20009de6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
20009dea:	1c5a      	adds	r2, r3, #1
20009dec:	687b      	ldr	r3, [r7, #4]
20009dee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
20009df2:	2300      	movs	r3, #0
}
20009df4:	4618      	mov	r0, r3
20009df6:	3710      	adds	r7, #16
20009df8:	46bd      	mov	sp, r7
20009dfa:	bd80      	pop	{r7, pc}

20009dfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
20009dfc:	b580      	push	{r7, lr}
20009dfe:	b082      	sub	sp, #8
20009e00:	af00      	add	r7, sp, #0
20009e02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
20009e04:	6878      	ldr	r0, [r7, #4]
20009e06:	f001 fe15 	bl	2000ba34 <USBD_LL_Start>
20009e0a:	4603      	mov	r3, r0
}
20009e0c:	4618      	mov	r0, r3
20009e0e:	3708      	adds	r7, #8
20009e10:	46bd      	mov	sp, r7
20009e12:	bd80      	pop	{r7, pc}

20009e14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
20009e14:	b480      	push	{r7}
20009e16:	b083      	sub	sp, #12
20009e18:	af00      	add	r7, sp, #0
20009e1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
20009e1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
20009e1e:	4618      	mov	r0, r3
20009e20:	370c      	adds	r7, #12
20009e22:	46bd      	mov	sp, r7
20009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
20009e28:	4770      	bx	lr

20009e2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
20009e2a:	b580      	push	{r7, lr}
20009e2c:	b084      	sub	sp, #16
20009e2e:	af00      	add	r7, sp, #0
20009e30:	6078      	str	r0, [r7, #4]
20009e32:	460b      	mov	r3, r1
20009e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
20009e36:	2300      	movs	r3, #0
20009e38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
20009e3a:	687b      	ldr	r3, [r7, #4]
20009e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20009e40:	2b00      	cmp	r3, #0
20009e42:	d009      	beq.n	20009e58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
20009e44:	687b      	ldr	r3, [r7, #4]
20009e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20009e4a:	681b      	ldr	r3, [r3, #0]
20009e4c:	78fa      	ldrb	r2, [r7, #3]
20009e4e:	4611      	mov	r1, r2
20009e50:	6878      	ldr	r0, [r7, #4]
20009e52:	4798      	blx	r3
20009e54:	4603      	mov	r3, r0
20009e56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
20009e58:	7bfb      	ldrb	r3, [r7, #15]
}
20009e5a:	4618      	mov	r0, r3
20009e5c:	3710      	adds	r7, #16
20009e5e:	46bd      	mov	sp, r7
20009e60:	bd80      	pop	{r7, pc}

20009e62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
20009e62:	b580      	push	{r7, lr}
20009e64:	b084      	sub	sp, #16
20009e66:	af00      	add	r7, sp, #0
20009e68:	6078      	str	r0, [r7, #4]
20009e6a:	460b      	mov	r3, r1
20009e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
20009e6e:	2300      	movs	r3, #0
20009e70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
20009e72:	687b      	ldr	r3, [r7, #4]
20009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20009e78:	685b      	ldr	r3, [r3, #4]
20009e7a:	78fa      	ldrb	r2, [r7, #3]
20009e7c:	4611      	mov	r1, r2
20009e7e:	6878      	ldr	r0, [r7, #4]
20009e80:	4798      	blx	r3
20009e82:	4603      	mov	r3, r0
20009e84:	2b00      	cmp	r3, #0
20009e86:	d001      	beq.n	20009e8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
20009e88:	2303      	movs	r3, #3
20009e8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
20009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
20009e8e:	4618      	mov	r0, r3
20009e90:	3710      	adds	r7, #16
20009e92:	46bd      	mov	sp, r7
20009e94:	bd80      	pop	{r7, pc}

20009e96 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
20009e96:	b580      	push	{r7, lr}
20009e98:	b084      	sub	sp, #16
20009e9a:	af00      	add	r7, sp, #0
20009e9c:	6078      	str	r0, [r7, #4]
20009e9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
20009ea0:	687b      	ldr	r3, [r7, #4]
20009ea2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
20009ea6:	6839      	ldr	r1, [r7, #0]
20009ea8:	4618      	mov	r0, r3
20009eaa:	f001 f94a 	bl	2000b142 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
20009eae:	687b      	ldr	r3, [r7, #4]
20009eb0:	2201      	movs	r2, #1
20009eb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
20009eb6:	687b      	ldr	r3, [r7, #4]
20009eb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
20009ebc:	461a      	mov	r2, r3
20009ebe:	687b      	ldr	r3, [r7, #4]
20009ec0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
20009ec4:	687b      	ldr	r3, [r7, #4]
20009ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
20009eca:	f003 031f 	and.w	r3, r3, #31
20009ece:	2b02      	cmp	r3, #2
20009ed0:	d01a      	beq.n	20009f08 <USBD_LL_SetupStage+0x72>
20009ed2:	2b02      	cmp	r3, #2
20009ed4:	d822      	bhi.n	20009f1c <USBD_LL_SetupStage+0x86>
20009ed6:	2b00      	cmp	r3, #0
20009ed8:	d002      	beq.n	20009ee0 <USBD_LL_SetupStage+0x4a>
20009eda:	2b01      	cmp	r3, #1
20009edc:	d00a      	beq.n	20009ef4 <USBD_LL_SetupStage+0x5e>
20009ede:	e01d      	b.n	20009f1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
20009ee0:	687b      	ldr	r3, [r7, #4]
20009ee2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
20009ee6:	4619      	mov	r1, r3
20009ee8:	6878      	ldr	r0, [r7, #4]
20009eea:	f000 fb75 	bl	2000a5d8 <USBD_StdDevReq>
20009eee:	4603      	mov	r3, r0
20009ef0:	73fb      	strb	r3, [r7, #15]
      break;
20009ef2:	e020      	b.n	20009f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
20009ef4:	687b      	ldr	r3, [r7, #4]
20009ef6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
20009efa:	4619      	mov	r1, r3
20009efc:	6878      	ldr	r0, [r7, #4]
20009efe:	f000 fbdd 	bl	2000a6bc <USBD_StdItfReq>
20009f02:	4603      	mov	r3, r0
20009f04:	73fb      	strb	r3, [r7, #15]
      break;
20009f06:	e016      	b.n	20009f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
20009f08:	687b      	ldr	r3, [r7, #4]
20009f0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
20009f0e:	4619      	mov	r1, r3
20009f10:	6878      	ldr	r0, [r7, #4]
20009f12:	f000 fc3f 	bl	2000a794 <USBD_StdEPReq>
20009f16:	4603      	mov	r3, r0
20009f18:	73fb      	strb	r3, [r7, #15]
      break;
20009f1a:	e00c      	b.n	20009f36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
20009f1c:	687b      	ldr	r3, [r7, #4]
20009f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
20009f22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
20009f26:	b2db      	uxtb	r3, r3
20009f28:	4619      	mov	r1, r3
20009f2a:	6878      	ldr	r0, [r7, #4]
20009f2c:	f001 fde2 	bl	2000baf4 <USBD_LL_StallEP>
20009f30:	4603      	mov	r3, r0
20009f32:	73fb      	strb	r3, [r7, #15]
      break;
20009f34:	bf00      	nop
  }

  return ret;
20009f36:	7bfb      	ldrb	r3, [r7, #15]
}
20009f38:	4618      	mov	r0, r3
20009f3a:	3710      	adds	r7, #16
20009f3c:	46bd      	mov	sp, r7
20009f3e:	bd80      	pop	{r7, pc}

20009f40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
20009f40:	b580      	push	{r7, lr}
20009f42:	b086      	sub	sp, #24
20009f44:	af00      	add	r7, sp, #0
20009f46:	60f8      	str	r0, [r7, #12]
20009f48:	460b      	mov	r3, r1
20009f4a:	607a      	str	r2, [r7, #4]
20009f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
20009f4e:	2300      	movs	r3, #0
20009f50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
20009f52:	7afb      	ldrb	r3, [r7, #11]
20009f54:	2b00      	cmp	r3, #0
20009f56:	d177      	bne.n	2000a048 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
20009f58:	68fb      	ldr	r3, [r7, #12]
20009f5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
20009f5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
20009f60:	68fb      	ldr	r3, [r7, #12]
20009f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
20009f66:	2b03      	cmp	r3, #3
20009f68:	f040 80a1 	bne.w	2000a0ae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
20009f6c:	693b      	ldr	r3, [r7, #16]
20009f6e:	685b      	ldr	r3, [r3, #4]
20009f70:	693a      	ldr	r2, [r7, #16]
20009f72:	8992      	ldrh	r2, [r2, #12]
20009f74:	4293      	cmp	r3, r2
20009f76:	d91c      	bls.n	20009fb2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
20009f78:	693b      	ldr	r3, [r7, #16]
20009f7a:	685b      	ldr	r3, [r3, #4]
20009f7c:	693a      	ldr	r2, [r7, #16]
20009f7e:	8992      	ldrh	r2, [r2, #12]
20009f80:	1a9a      	subs	r2, r3, r2
20009f82:	693b      	ldr	r3, [r7, #16]
20009f84:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
20009f86:	693b      	ldr	r3, [r7, #16]
20009f88:	691b      	ldr	r3, [r3, #16]
20009f8a:	693a      	ldr	r2, [r7, #16]
20009f8c:	8992      	ldrh	r2, [r2, #12]
20009f8e:	441a      	add	r2, r3
20009f90:	693b      	ldr	r3, [r7, #16]
20009f92:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
20009f94:	693b      	ldr	r3, [r7, #16]
20009f96:	6919      	ldr	r1, [r3, #16]
20009f98:	693b      	ldr	r3, [r7, #16]
20009f9a:	899b      	ldrh	r3, [r3, #12]
20009f9c:	461a      	mov	r2, r3
20009f9e:	693b      	ldr	r3, [r7, #16]
20009fa0:	685b      	ldr	r3, [r3, #4]
20009fa2:	4293      	cmp	r3, r2
20009fa4:	bf38      	it	cc
20009fa6:	4613      	movcc	r3, r2
20009fa8:	461a      	mov	r2, r3
20009faa:	68f8      	ldr	r0, [r7, #12]
20009fac:	f001 f9d0 	bl	2000b350 <USBD_CtlContinueRx>
20009fb0:	e07d      	b.n	2000a0ae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
20009fb2:	68fb      	ldr	r3, [r7, #12]
20009fb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
20009fb8:	f003 031f 	and.w	r3, r3, #31
20009fbc:	2b02      	cmp	r3, #2
20009fbe:	d014      	beq.n	20009fea <USBD_LL_DataOutStage+0xaa>
20009fc0:	2b02      	cmp	r3, #2
20009fc2:	d81d      	bhi.n	2000a000 <USBD_LL_DataOutStage+0xc0>
20009fc4:	2b00      	cmp	r3, #0
20009fc6:	d002      	beq.n	20009fce <USBD_LL_DataOutStage+0x8e>
20009fc8:	2b01      	cmp	r3, #1
20009fca:	d003      	beq.n	20009fd4 <USBD_LL_DataOutStage+0x94>
20009fcc:	e018      	b.n	2000a000 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
20009fce:	2300      	movs	r3, #0
20009fd0:	75bb      	strb	r3, [r7, #22]
            break;
20009fd2:	e018      	b.n	2000a006 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
20009fd4:	68fb      	ldr	r3, [r7, #12]
20009fd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
20009fda:	b2db      	uxtb	r3, r3
20009fdc:	4619      	mov	r1, r3
20009fde:	68f8      	ldr	r0, [r7, #12]
20009fe0:	f000 fa6e 	bl	2000a4c0 <USBD_CoreFindIF>
20009fe4:	4603      	mov	r3, r0
20009fe6:	75bb      	strb	r3, [r7, #22]
            break;
20009fe8:	e00d      	b.n	2000a006 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
20009fea:	68fb      	ldr	r3, [r7, #12]
20009fec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
20009ff0:	b2db      	uxtb	r3, r3
20009ff2:	4619      	mov	r1, r3
20009ff4:	68f8      	ldr	r0, [r7, #12]
20009ff6:	f000 fa70 	bl	2000a4da <USBD_CoreFindEP>
20009ffa:	4603      	mov	r3, r0
20009ffc:	75bb      	strb	r3, [r7, #22]
            break;
20009ffe:	e002      	b.n	2000a006 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
2000a000:	2300      	movs	r3, #0
2000a002:	75bb      	strb	r3, [r7, #22]
            break;
2000a004:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
2000a006:	7dbb      	ldrb	r3, [r7, #22]
2000a008:	2b00      	cmp	r3, #0
2000a00a:	d119      	bne.n	2000a040 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a00c:	68fb      	ldr	r3, [r7, #12]
2000a00e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a012:	b2db      	uxtb	r3, r3
2000a014:	2b03      	cmp	r3, #3
2000a016:	d113      	bne.n	2000a040 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
2000a018:	7dba      	ldrb	r2, [r7, #22]
2000a01a:	68fb      	ldr	r3, [r7, #12]
2000a01c:	32ae      	adds	r2, #174	@ 0xae
2000a01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a022:	691b      	ldr	r3, [r3, #16]
2000a024:	2b00      	cmp	r3, #0
2000a026:	d00b      	beq.n	2000a040 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
2000a028:	7dba      	ldrb	r2, [r7, #22]
2000a02a:	68fb      	ldr	r3, [r7, #12]
2000a02c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
2000a030:	7dba      	ldrb	r2, [r7, #22]
2000a032:	68fb      	ldr	r3, [r7, #12]
2000a034:	32ae      	adds	r2, #174	@ 0xae
2000a036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a03a:	691b      	ldr	r3, [r3, #16]
2000a03c:	68f8      	ldr	r0, [r7, #12]
2000a03e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
2000a040:	68f8      	ldr	r0, [r7, #12]
2000a042:	f001 f996 	bl	2000b372 <USBD_CtlSendStatus>
2000a046:	e032      	b.n	2000a0ae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
2000a048:	7afb      	ldrb	r3, [r7, #11]
2000a04a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000a04e:	b2db      	uxtb	r3, r3
2000a050:	4619      	mov	r1, r3
2000a052:	68f8      	ldr	r0, [r7, #12]
2000a054:	f000 fa41 	bl	2000a4da <USBD_CoreFindEP>
2000a058:	4603      	mov	r3, r0
2000a05a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000a05c:	7dbb      	ldrb	r3, [r7, #22]
2000a05e:	2bff      	cmp	r3, #255	@ 0xff
2000a060:	d025      	beq.n	2000a0ae <USBD_LL_DataOutStage+0x16e>
2000a062:	7dbb      	ldrb	r3, [r7, #22]
2000a064:	2b00      	cmp	r3, #0
2000a066:	d122      	bne.n	2000a0ae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a068:	68fb      	ldr	r3, [r7, #12]
2000a06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a06e:	b2db      	uxtb	r3, r3
2000a070:	2b03      	cmp	r3, #3
2000a072:	d117      	bne.n	2000a0a4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
2000a074:	7dba      	ldrb	r2, [r7, #22]
2000a076:	68fb      	ldr	r3, [r7, #12]
2000a078:	32ae      	adds	r2, #174	@ 0xae
2000a07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a07e:	699b      	ldr	r3, [r3, #24]
2000a080:	2b00      	cmp	r3, #0
2000a082:	d00f      	beq.n	2000a0a4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
2000a084:	7dba      	ldrb	r2, [r7, #22]
2000a086:	68fb      	ldr	r3, [r7, #12]
2000a088:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
2000a08c:	7dba      	ldrb	r2, [r7, #22]
2000a08e:	68fb      	ldr	r3, [r7, #12]
2000a090:	32ae      	adds	r2, #174	@ 0xae
2000a092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a096:	699b      	ldr	r3, [r3, #24]
2000a098:	7afa      	ldrb	r2, [r7, #11]
2000a09a:	4611      	mov	r1, r2
2000a09c:	68f8      	ldr	r0, [r7, #12]
2000a09e:	4798      	blx	r3
2000a0a0:	4603      	mov	r3, r0
2000a0a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
2000a0a4:	7dfb      	ldrb	r3, [r7, #23]
2000a0a6:	2b00      	cmp	r3, #0
2000a0a8:	d001      	beq.n	2000a0ae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
2000a0aa:	7dfb      	ldrb	r3, [r7, #23]
2000a0ac:	e000      	b.n	2000a0b0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
2000a0ae:	2300      	movs	r3, #0
}
2000a0b0:	4618      	mov	r0, r3
2000a0b2:	3718      	adds	r7, #24
2000a0b4:	46bd      	mov	sp, r7
2000a0b6:	bd80      	pop	{r7, pc}

2000a0b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
2000a0b8:	b580      	push	{r7, lr}
2000a0ba:	b086      	sub	sp, #24
2000a0bc:	af00      	add	r7, sp, #0
2000a0be:	60f8      	str	r0, [r7, #12]
2000a0c0:	460b      	mov	r3, r1
2000a0c2:	607a      	str	r2, [r7, #4]
2000a0c4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
2000a0c6:	7afb      	ldrb	r3, [r7, #11]
2000a0c8:	2b00      	cmp	r3, #0
2000a0ca:	d178      	bne.n	2000a1be <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
2000a0cc:	68fb      	ldr	r3, [r7, #12]
2000a0ce:	3314      	adds	r3, #20
2000a0d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
2000a0d2:	68fb      	ldr	r3, [r7, #12]
2000a0d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
2000a0d8:	2b02      	cmp	r3, #2
2000a0da:	d163      	bne.n	2000a1a4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
2000a0dc:	693b      	ldr	r3, [r7, #16]
2000a0de:	685b      	ldr	r3, [r3, #4]
2000a0e0:	693a      	ldr	r2, [r7, #16]
2000a0e2:	8992      	ldrh	r2, [r2, #12]
2000a0e4:	4293      	cmp	r3, r2
2000a0e6:	d91c      	bls.n	2000a122 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
2000a0e8:	693b      	ldr	r3, [r7, #16]
2000a0ea:	685b      	ldr	r3, [r3, #4]
2000a0ec:	693a      	ldr	r2, [r7, #16]
2000a0ee:	8992      	ldrh	r2, [r2, #12]
2000a0f0:	1a9a      	subs	r2, r3, r2
2000a0f2:	693b      	ldr	r3, [r7, #16]
2000a0f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
2000a0f6:	693b      	ldr	r3, [r7, #16]
2000a0f8:	691b      	ldr	r3, [r3, #16]
2000a0fa:	693a      	ldr	r2, [r7, #16]
2000a0fc:	8992      	ldrh	r2, [r2, #12]
2000a0fe:	441a      	add	r2, r3
2000a100:	693b      	ldr	r3, [r7, #16]
2000a102:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
2000a104:	693b      	ldr	r3, [r7, #16]
2000a106:	6919      	ldr	r1, [r3, #16]
2000a108:	693b      	ldr	r3, [r7, #16]
2000a10a:	685b      	ldr	r3, [r3, #4]
2000a10c:	461a      	mov	r2, r3
2000a10e:	68f8      	ldr	r0, [r7, #12]
2000a110:	f001 f8ec 	bl	2000b2ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000a114:	2300      	movs	r3, #0
2000a116:	2200      	movs	r2, #0
2000a118:	2100      	movs	r1, #0
2000a11a:	68f8      	ldr	r0, [r7, #12]
2000a11c:	f001 fd94 	bl	2000bc48 <USBD_LL_PrepareReceive>
2000a120:	e040      	b.n	2000a1a4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
2000a122:	693b      	ldr	r3, [r7, #16]
2000a124:	899b      	ldrh	r3, [r3, #12]
2000a126:	461a      	mov	r2, r3
2000a128:	693b      	ldr	r3, [r7, #16]
2000a12a:	685b      	ldr	r3, [r3, #4]
2000a12c:	429a      	cmp	r2, r3
2000a12e:	d11c      	bne.n	2000a16a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
2000a130:	693b      	ldr	r3, [r7, #16]
2000a132:	681b      	ldr	r3, [r3, #0]
2000a134:	693a      	ldr	r2, [r7, #16]
2000a136:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
2000a138:	4293      	cmp	r3, r2
2000a13a:	d316      	bcc.n	2000a16a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
2000a13c:	693b      	ldr	r3, [r7, #16]
2000a13e:	681a      	ldr	r2, [r3, #0]
2000a140:	68fb      	ldr	r3, [r7, #12]
2000a142:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
2000a146:	429a      	cmp	r2, r3
2000a148:	d20f      	bcs.n	2000a16a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
2000a14a:	2200      	movs	r2, #0
2000a14c:	2100      	movs	r1, #0
2000a14e:	68f8      	ldr	r0, [r7, #12]
2000a150:	f001 f8cc 	bl	2000b2ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
2000a154:	68fb      	ldr	r3, [r7, #12]
2000a156:	2200      	movs	r2, #0
2000a158:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000a15c:	2300      	movs	r3, #0
2000a15e:	2200      	movs	r2, #0
2000a160:	2100      	movs	r1, #0
2000a162:	68f8      	ldr	r0, [r7, #12]
2000a164:	f001 fd70 	bl	2000bc48 <USBD_LL_PrepareReceive>
2000a168:	e01c      	b.n	2000a1a4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a16a:	68fb      	ldr	r3, [r7, #12]
2000a16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a170:	b2db      	uxtb	r3, r3
2000a172:	2b03      	cmp	r3, #3
2000a174:	d10f      	bne.n	2000a196 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
2000a176:	68fb      	ldr	r3, [r7, #12]
2000a178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a17c:	68db      	ldr	r3, [r3, #12]
2000a17e:	2b00      	cmp	r3, #0
2000a180:	d009      	beq.n	2000a196 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
2000a182:	68fb      	ldr	r3, [r7, #12]
2000a184:	2200      	movs	r2, #0
2000a186:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
2000a18a:	68fb      	ldr	r3, [r7, #12]
2000a18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a190:	68db      	ldr	r3, [r3, #12]
2000a192:	68f8      	ldr	r0, [r7, #12]
2000a194:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
2000a196:	2180      	movs	r1, #128	@ 0x80
2000a198:	68f8      	ldr	r0, [r7, #12]
2000a19a:	f001 fcab 	bl	2000baf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
2000a19e:	68f8      	ldr	r0, [r7, #12]
2000a1a0:	f001 f8fa 	bl	2000b398 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
2000a1a4:	68fb      	ldr	r3, [r7, #12]
2000a1a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
2000a1aa:	2b00      	cmp	r3, #0
2000a1ac:	d03a      	beq.n	2000a224 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
2000a1ae:	68f8      	ldr	r0, [r7, #12]
2000a1b0:	f7ff fe30 	bl	20009e14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
2000a1b4:	68fb      	ldr	r3, [r7, #12]
2000a1b6:	2200      	movs	r2, #0
2000a1b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
2000a1bc:	e032      	b.n	2000a224 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
2000a1be:	7afb      	ldrb	r3, [r7, #11]
2000a1c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
2000a1c4:	b2db      	uxtb	r3, r3
2000a1c6:	4619      	mov	r1, r3
2000a1c8:	68f8      	ldr	r0, [r7, #12]
2000a1ca:	f000 f986 	bl	2000a4da <USBD_CoreFindEP>
2000a1ce:	4603      	mov	r3, r0
2000a1d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000a1d2:	7dfb      	ldrb	r3, [r7, #23]
2000a1d4:	2bff      	cmp	r3, #255	@ 0xff
2000a1d6:	d025      	beq.n	2000a224 <USBD_LL_DataInStage+0x16c>
2000a1d8:	7dfb      	ldrb	r3, [r7, #23]
2000a1da:	2b00      	cmp	r3, #0
2000a1dc:	d122      	bne.n	2000a224 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a1de:	68fb      	ldr	r3, [r7, #12]
2000a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a1e4:	b2db      	uxtb	r3, r3
2000a1e6:	2b03      	cmp	r3, #3
2000a1e8:	d11c      	bne.n	2000a224 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
2000a1ea:	7dfa      	ldrb	r2, [r7, #23]
2000a1ec:	68fb      	ldr	r3, [r7, #12]
2000a1ee:	32ae      	adds	r2, #174	@ 0xae
2000a1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a1f4:	695b      	ldr	r3, [r3, #20]
2000a1f6:	2b00      	cmp	r3, #0
2000a1f8:	d014      	beq.n	2000a224 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
2000a1fa:	7dfa      	ldrb	r2, [r7, #23]
2000a1fc:	68fb      	ldr	r3, [r7, #12]
2000a1fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
2000a202:	7dfa      	ldrb	r2, [r7, #23]
2000a204:	68fb      	ldr	r3, [r7, #12]
2000a206:	32ae      	adds	r2, #174	@ 0xae
2000a208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a20c:	695b      	ldr	r3, [r3, #20]
2000a20e:	7afa      	ldrb	r2, [r7, #11]
2000a210:	4611      	mov	r1, r2
2000a212:	68f8      	ldr	r0, [r7, #12]
2000a214:	4798      	blx	r3
2000a216:	4603      	mov	r3, r0
2000a218:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
2000a21a:	7dbb      	ldrb	r3, [r7, #22]
2000a21c:	2b00      	cmp	r3, #0
2000a21e:	d001      	beq.n	2000a224 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
2000a220:	7dbb      	ldrb	r3, [r7, #22]
2000a222:	e000      	b.n	2000a226 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
2000a224:	2300      	movs	r3, #0
}
2000a226:	4618      	mov	r0, r3
2000a228:	3718      	adds	r7, #24
2000a22a:	46bd      	mov	sp, r7
2000a22c:	bd80      	pop	{r7, pc}

2000a22e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
2000a22e:	b580      	push	{r7, lr}
2000a230:	b084      	sub	sp, #16
2000a232:	af00      	add	r7, sp, #0
2000a234:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
2000a236:	2300      	movs	r3, #0
2000a238:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000a23a:	687b      	ldr	r3, [r7, #4]
2000a23c:	2201      	movs	r2, #1
2000a23e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
2000a242:	687b      	ldr	r3, [r7, #4]
2000a244:	2200      	movs	r2, #0
2000a246:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
2000a24a:	687b      	ldr	r3, [r7, #4]
2000a24c:	2200      	movs	r2, #0
2000a24e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
2000a250:	687b      	ldr	r3, [r7, #4]
2000a252:	2200      	movs	r2, #0
2000a254:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
2000a258:	687b      	ldr	r3, [r7, #4]
2000a25a:	2200      	movs	r2, #0
2000a25c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
2000a260:	687b      	ldr	r3, [r7, #4]
2000a262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a266:	2b00      	cmp	r3, #0
2000a268:	d014      	beq.n	2000a294 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
2000a26a:	687b      	ldr	r3, [r7, #4]
2000a26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a270:	685b      	ldr	r3, [r3, #4]
2000a272:	2b00      	cmp	r3, #0
2000a274:	d00e      	beq.n	2000a294 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
2000a276:	687b      	ldr	r3, [r7, #4]
2000a278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a27c:	685b      	ldr	r3, [r3, #4]
2000a27e:	687a      	ldr	r2, [r7, #4]
2000a280:	6852      	ldr	r2, [r2, #4]
2000a282:	b2d2      	uxtb	r2, r2
2000a284:	4611      	mov	r1, r2
2000a286:	6878      	ldr	r0, [r7, #4]
2000a288:	4798      	blx	r3
2000a28a:	4603      	mov	r3, r0
2000a28c:	2b00      	cmp	r3, #0
2000a28e:	d001      	beq.n	2000a294 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
2000a290:	2303      	movs	r3, #3
2000a292:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000a294:	2340      	movs	r3, #64	@ 0x40
2000a296:	2200      	movs	r2, #0
2000a298:	2100      	movs	r1, #0
2000a29a:	6878      	ldr	r0, [r7, #4]
2000a29c:	f001 fbe5 	bl	2000ba6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
2000a2a0:	687b      	ldr	r3, [r7, #4]
2000a2a2:	2201      	movs	r2, #1
2000a2a4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
2000a2a8:	687b      	ldr	r3, [r7, #4]
2000a2aa:	2240      	movs	r2, #64	@ 0x40
2000a2ac:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
2000a2b0:	2340      	movs	r3, #64	@ 0x40
2000a2b2:	2200      	movs	r2, #0
2000a2b4:	2180      	movs	r1, #128	@ 0x80
2000a2b6:	6878      	ldr	r0, [r7, #4]
2000a2b8:	f001 fbd7 	bl	2000ba6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
2000a2bc:	687b      	ldr	r3, [r7, #4]
2000a2be:	2201      	movs	r2, #1
2000a2c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
2000a2c4:	687b      	ldr	r3, [r7, #4]
2000a2c6:	2240      	movs	r2, #64	@ 0x40
2000a2c8:	841a      	strh	r2, [r3, #32]

  return ret;
2000a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
2000a2cc:	4618      	mov	r0, r3
2000a2ce:	3710      	adds	r7, #16
2000a2d0:	46bd      	mov	sp, r7
2000a2d2:	bd80      	pop	{r7, pc}

2000a2d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
2000a2d4:	b480      	push	{r7}
2000a2d6:	b083      	sub	sp, #12
2000a2d8:	af00      	add	r7, sp, #0
2000a2da:	6078      	str	r0, [r7, #4]
2000a2dc:	460b      	mov	r3, r1
2000a2de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
2000a2e0:	687b      	ldr	r3, [r7, #4]
2000a2e2:	78fa      	ldrb	r2, [r7, #3]
2000a2e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
2000a2e6:	2300      	movs	r3, #0
}
2000a2e8:	4618      	mov	r0, r3
2000a2ea:	370c      	adds	r7, #12
2000a2ec:	46bd      	mov	sp, r7
2000a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a2f2:	4770      	bx	lr

2000a2f4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
2000a2f4:	b480      	push	{r7}
2000a2f6:	b083      	sub	sp, #12
2000a2f8:	af00      	add	r7, sp, #0
2000a2fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
2000a2fc:	687b      	ldr	r3, [r7, #4]
2000a2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a302:	b2db      	uxtb	r3, r3
2000a304:	2b04      	cmp	r3, #4
2000a306:	d006      	beq.n	2000a316 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
2000a308:	687b      	ldr	r3, [r7, #4]
2000a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a30e:	b2da      	uxtb	r2, r3
2000a310:	687b      	ldr	r3, [r7, #4]
2000a312:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
2000a316:	687b      	ldr	r3, [r7, #4]
2000a318:	2204      	movs	r2, #4
2000a31a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
2000a31e:	2300      	movs	r3, #0
}
2000a320:	4618      	mov	r0, r3
2000a322:	370c      	adds	r7, #12
2000a324:	46bd      	mov	sp, r7
2000a326:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a32a:	4770      	bx	lr

2000a32c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
2000a32c:	b480      	push	{r7}
2000a32e:	b083      	sub	sp, #12
2000a330:	af00      	add	r7, sp, #0
2000a332:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
2000a334:	687b      	ldr	r3, [r7, #4]
2000a336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a33a:	b2db      	uxtb	r3, r3
2000a33c:	2b04      	cmp	r3, #4
2000a33e:	d106      	bne.n	2000a34e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
2000a340:	687b      	ldr	r3, [r7, #4]
2000a342:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
2000a346:	b2da      	uxtb	r2, r3
2000a348:	687b      	ldr	r3, [r7, #4]
2000a34a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
2000a34e:	2300      	movs	r3, #0
}
2000a350:	4618      	mov	r0, r3
2000a352:	370c      	adds	r7, #12
2000a354:	46bd      	mov	sp, r7
2000a356:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a35a:	4770      	bx	lr

2000a35c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
2000a35c:	b580      	push	{r7, lr}
2000a35e:	b082      	sub	sp, #8
2000a360:	af00      	add	r7, sp, #0
2000a362:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a364:	687b      	ldr	r3, [r7, #4]
2000a366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a36a:	b2db      	uxtb	r3, r3
2000a36c:	2b03      	cmp	r3, #3
2000a36e:	d110      	bne.n	2000a392 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
2000a370:	687b      	ldr	r3, [r7, #4]
2000a372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a376:	2b00      	cmp	r3, #0
2000a378:	d00b      	beq.n	2000a392 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
2000a37a:	687b      	ldr	r3, [r7, #4]
2000a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a380:	69db      	ldr	r3, [r3, #28]
2000a382:	2b00      	cmp	r3, #0
2000a384:	d005      	beq.n	2000a392 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
2000a386:	687b      	ldr	r3, [r7, #4]
2000a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a38c:	69db      	ldr	r3, [r3, #28]
2000a38e:	6878      	ldr	r0, [r7, #4]
2000a390:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
2000a392:	2300      	movs	r3, #0
}
2000a394:	4618      	mov	r0, r3
2000a396:	3708      	adds	r7, #8
2000a398:	46bd      	mov	sp, r7
2000a39a:	bd80      	pop	{r7, pc}

2000a39c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
2000a39c:	b580      	push	{r7, lr}
2000a39e:	b082      	sub	sp, #8
2000a3a0:	af00      	add	r7, sp, #0
2000a3a2:	6078      	str	r0, [r7, #4]
2000a3a4:	460b      	mov	r3, r1
2000a3a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000a3a8:	687b      	ldr	r3, [r7, #4]
2000a3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a3ae:	687b      	ldr	r3, [r7, #4]
2000a3b0:	32ae      	adds	r2, #174	@ 0xae
2000a3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a3b6:	2b00      	cmp	r3, #0
2000a3b8:	d101      	bne.n	2000a3be <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
2000a3ba:	2303      	movs	r3, #3
2000a3bc:	e01c      	b.n	2000a3f8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a3be:	687b      	ldr	r3, [r7, #4]
2000a3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a3c4:	b2db      	uxtb	r3, r3
2000a3c6:	2b03      	cmp	r3, #3
2000a3c8:	d115      	bne.n	2000a3f6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
2000a3ca:	687b      	ldr	r3, [r7, #4]
2000a3cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a3d0:	687b      	ldr	r3, [r7, #4]
2000a3d2:	32ae      	adds	r2, #174	@ 0xae
2000a3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a3d8:	6a1b      	ldr	r3, [r3, #32]
2000a3da:	2b00      	cmp	r3, #0
2000a3dc:	d00b      	beq.n	2000a3f6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
2000a3de:	687b      	ldr	r3, [r7, #4]
2000a3e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a3e4:	687b      	ldr	r3, [r7, #4]
2000a3e6:	32ae      	adds	r2, #174	@ 0xae
2000a3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a3ec:	6a1b      	ldr	r3, [r3, #32]
2000a3ee:	78fa      	ldrb	r2, [r7, #3]
2000a3f0:	4611      	mov	r1, r2
2000a3f2:	6878      	ldr	r0, [r7, #4]
2000a3f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000a3f6:	2300      	movs	r3, #0
}
2000a3f8:	4618      	mov	r0, r3
2000a3fa:	3708      	adds	r7, #8
2000a3fc:	46bd      	mov	sp, r7
2000a3fe:	bd80      	pop	{r7, pc}

2000a400 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
2000a400:	b580      	push	{r7, lr}
2000a402:	b082      	sub	sp, #8
2000a404:	af00      	add	r7, sp, #0
2000a406:	6078      	str	r0, [r7, #4]
2000a408:	460b      	mov	r3, r1
2000a40a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
2000a40c:	687b      	ldr	r3, [r7, #4]
2000a40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a412:	687b      	ldr	r3, [r7, #4]
2000a414:	32ae      	adds	r2, #174	@ 0xae
2000a416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a41a:	2b00      	cmp	r3, #0
2000a41c:	d101      	bne.n	2000a422 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
2000a41e:	2303      	movs	r3, #3
2000a420:	e01c      	b.n	2000a45c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000a422:	687b      	ldr	r3, [r7, #4]
2000a424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a428:	b2db      	uxtb	r3, r3
2000a42a:	2b03      	cmp	r3, #3
2000a42c:	d115      	bne.n	2000a45a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
2000a42e:	687b      	ldr	r3, [r7, #4]
2000a430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a434:	687b      	ldr	r3, [r7, #4]
2000a436:	32ae      	adds	r2, #174	@ 0xae
2000a438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a43e:	2b00      	cmp	r3, #0
2000a440:	d00b      	beq.n	2000a45a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
2000a442:	687b      	ldr	r3, [r7, #4]
2000a444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a448:	687b      	ldr	r3, [r7, #4]
2000a44a:	32ae      	adds	r2, #174	@ 0xae
2000a44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a452:	78fa      	ldrb	r2, [r7, #3]
2000a454:	4611      	mov	r1, r2
2000a456:	6878      	ldr	r0, [r7, #4]
2000a458:	4798      	blx	r3
    }
  }

  return USBD_OK;
2000a45a:	2300      	movs	r3, #0
}
2000a45c:	4618      	mov	r0, r3
2000a45e:	3708      	adds	r7, #8
2000a460:	46bd      	mov	sp, r7
2000a462:	bd80      	pop	{r7, pc}

2000a464 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
2000a464:	b480      	push	{r7}
2000a466:	b083      	sub	sp, #12
2000a468:	af00      	add	r7, sp, #0
2000a46a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
2000a46c:	2300      	movs	r3, #0
}
2000a46e:	4618      	mov	r0, r3
2000a470:	370c      	adds	r7, #12
2000a472:	46bd      	mov	sp, r7
2000a474:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a478:	4770      	bx	lr

2000a47a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
2000a47a:	b580      	push	{r7, lr}
2000a47c:	b084      	sub	sp, #16
2000a47e:	af00      	add	r7, sp, #0
2000a480:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
2000a482:	2300      	movs	r3, #0
2000a484:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
2000a486:	687b      	ldr	r3, [r7, #4]
2000a488:	2201      	movs	r2, #1
2000a48a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
2000a48e:	687b      	ldr	r3, [r7, #4]
2000a490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a494:	2b00      	cmp	r3, #0
2000a496:	d00e      	beq.n	2000a4b6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
2000a498:	687b      	ldr	r3, [r7, #4]
2000a49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000a49e:	685b      	ldr	r3, [r3, #4]
2000a4a0:	687a      	ldr	r2, [r7, #4]
2000a4a2:	6852      	ldr	r2, [r2, #4]
2000a4a4:	b2d2      	uxtb	r2, r2
2000a4a6:	4611      	mov	r1, r2
2000a4a8:	6878      	ldr	r0, [r7, #4]
2000a4aa:	4798      	blx	r3
2000a4ac:	4603      	mov	r3, r0
2000a4ae:	2b00      	cmp	r3, #0
2000a4b0:	d001      	beq.n	2000a4b6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
2000a4b2:	2303      	movs	r3, #3
2000a4b4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000a4b6:	7bfb      	ldrb	r3, [r7, #15]
}
2000a4b8:	4618      	mov	r0, r3
2000a4ba:	3710      	adds	r7, #16
2000a4bc:	46bd      	mov	sp, r7
2000a4be:	bd80      	pop	{r7, pc}

2000a4c0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000a4c0:	b480      	push	{r7}
2000a4c2:	b083      	sub	sp, #12
2000a4c4:	af00      	add	r7, sp, #0
2000a4c6:	6078      	str	r0, [r7, #4]
2000a4c8:	460b      	mov	r3, r1
2000a4ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000a4cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000a4ce:	4618      	mov	r0, r3
2000a4d0:	370c      	adds	r7, #12
2000a4d2:	46bd      	mov	sp, r7
2000a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a4d8:	4770      	bx	lr

2000a4da <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
2000a4da:	b480      	push	{r7}
2000a4dc:	b083      	sub	sp, #12
2000a4de:	af00      	add	r7, sp, #0
2000a4e0:	6078      	str	r0, [r7, #4]
2000a4e2:	460b      	mov	r3, r1
2000a4e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
2000a4e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
2000a4e8:	4618      	mov	r0, r3
2000a4ea:	370c      	adds	r7, #12
2000a4ec:	46bd      	mov	sp, r7
2000a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a4f2:	4770      	bx	lr

2000a4f4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
2000a4f4:	b580      	push	{r7, lr}
2000a4f6:	b086      	sub	sp, #24
2000a4f8:	af00      	add	r7, sp, #0
2000a4fa:	6078      	str	r0, [r7, #4]
2000a4fc:	460b      	mov	r3, r1
2000a4fe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
2000a500:	687b      	ldr	r3, [r7, #4]
2000a502:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
2000a504:	687b      	ldr	r3, [r7, #4]
2000a506:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
2000a508:	2300      	movs	r3, #0
2000a50a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
2000a50c:	68fb      	ldr	r3, [r7, #12]
2000a50e:	885b      	ldrh	r3, [r3, #2]
2000a510:	b29b      	uxth	r3, r3
2000a512:	68fa      	ldr	r2, [r7, #12]
2000a514:	7812      	ldrb	r2, [r2, #0]
2000a516:	4293      	cmp	r3, r2
2000a518:	d91f      	bls.n	2000a55a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
2000a51a:	68fb      	ldr	r3, [r7, #12]
2000a51c:	781b      	ldrb	r3, [r3, #0]
2000a51e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
2000a520:	e013      	b.n	2000a54a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
2000a522:	f107 030a 	add.w	r3, r7, #10
2000a526:	4619      	mov	r1, r3
2000a528:	6978      	ldr	r0, [r7, #20]
2000a52a:	f000 f81b 	bl	2000a564 <USBD_GetNextDesc>
2000a52e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
2000a530:	697b      	ldr	r3, [r7, #20]
2000a532:	785b      	ldrb	r3, [r3, #1]
2000a534:	2b05      	cmp	r3, #5
2000a536:	d108      	bne.n	2000a54a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
2000a538:	697b      	ldr	r3, [r7, #20]
2000a53a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
2000a53c:	693b      	ldr	r3, [r7, #16]
2000a53e:	789b      	ldrb	r3, [r3, #2]
2000a540:	78fa      	ldrb	r2, [r7, #3]
2000a542:	429a      	cmp	r2, r3
2000a544:	d008      	beq.n	2000a558 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
2000a546:	2300      	movs	r3, #0
2000a548:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
2000a54a:	68fb      	ldr	r3, [r7, #12]
2000a54c:	885b      	ldrh	r3, [r3, #2]
2000a54e:	b29a      	uxth	r2, r3
2000a550:	897b      	ldrh	r3, [r7, #10]
2000a552:	429a      	cmp	r2, r3
2000a554:	d8e5      	bhi.n	2000a522 <USBD_GetEpDesc+0x2e>
2000a556:	e000      	b.n	2000a55a <USBD_GetEpDesc+0x66>
          break;
2000a558:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
2000a55a:	693b      	ldr	r3, [r7, #16]
}
2000a55c:	4618      	mov	r0, r3
2000a55e:	3718      	adds	r7, #24
2000a560:	46bd      	mov	sp, r7
2000a562:	bd80      	pop	{r7, pc}

2000a564 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
2000a564:	b480      	push	{r7}
2000a566:	b085      	sub	sp, #20
2000a568:	af00      	add	r7, sp, #0
2000a56a:	6078      	str	r0, [r7, #4]
2000a56c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
2000a56e:	687b      	ldr	r3, [r7, #4]
2000a570:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
2000a572:	683b      	ldr	r3, [r7, #0]
2000a574:	881b      	ldrh	r3, [r3, #0]
2000a576:	68fa      	ldr	r2, [r7, #12]
2000a578:	7812      	ldrb	r2, [r2, #0]
2000a57a:	4413      	add	r3, r2
2000a57c:	b29a      	uxth	r2, r3
2000a57e:	683b      	ldr	r3, [r7, #0]
2000a580:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
2000a582:	68fb      	ldr	r3, [r7, #12]
2000a584:	781b      	ldrb	r3, [r3, #0]
2000a586:	461a      	mov	r2, r3
2000a588:	687b      	ldr	r3, [r7, #4]
2000a58a:	4413      	add	r3, r2
2000a58c:	60fb      	str	r3, [r7, #12]

  return (pnext);
2000a58e:	68fb      	ldr	r3, [r7, #12]
}
2000a590:	4618      	mov	r0, r3
2000a592:	3714      	adds	r7, #20
2000a594:	46bd      	mov	sp, r7
2000a596:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a59a:	4770      	bx	lr

2000a59c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
2000a59c:	b480      	push	{r7}
2000a59e:	b087      	sub	sp, #28
2000a5a0:	af00      	add	r7, sp, #0
2000a5a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
2000a5a4:	687b      	ldr	r3, [r7, #4]
2000a5a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
2000a5a8:	697b      	ldr	r3, [r7, #20]
2000a5aa:	781b      	ldrb	r3, [r3, #0]
2000a5ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
2000a5ae:	697b      	ldr	r3, [r7, #20]
2000a5b0:	3301      	adds	r3, #1
2000a5b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
2000a5b4:	697b      	ldr	r3, [r7, #20]
2000a5b6:	781b      	ldrb	r3, [r3, #0]
2000a5b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
2000a5ba:	8a3b      	ldrh	r3, [r7, #16]
2000a5bc:	021b      	lsls	r3, r3, #8
2000a5be:	b21a      	sxth	r2, r3
2000a5c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
2000a5c4:	4313      	orrs	r3, r2
2000a5c6:	b21b      	sxth	r3, r3
2000a5c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
2000a5ca:	89fb      	ldrh	r3, [r7, #14]
}
2000a5cc:	4618      	mov	r0, r3
2000a5ce:	371c      	adds	r7, #28
2000a5d0:	46bd      	mov	sp, r7
2000a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a5d6:	4770      	bx	lr

2000a5d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000a5d8:	b580      	push	{r7, lr}
2000a5da:	b084      	sub	sp, #16
2000a5dc:	af00      	add	r7, sp, #0
2000a5de:	6078      	str	r0, [r7, #4]
2000a5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000a5e2:	2300      	movs	r3, #0
2000a5e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000a5e6:	683b      	ldr	r3, [r7, #0]
2000a5e8:	781b      	ldrb	r3, [r3, #0]
2000a5ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000a5ee:	2b40      	cmp	r3, #64	@ 0x40
2000a5f0:	d005      	beq.n	2000a5fe <USBD_StdDevReq+0x26>
2000a5f2:	2b40      	cmp	r3, #64	@ 0x40
2000a5f4:	d857      	bhi.n	2000a6a6 <USBD_StdDevReq+0xce>
2000a5f6:	2b00      	cmp	r3, #0
2000a5f8:	d00f      	beq.n	2000a61a <USBD_StdDevReq+0x42>
2000a5fa:	2b20      	cmp	r3, #32
2000a5fc:	d153      	bne.n	2000a6a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
2000a5fe:	687b      	ldr	r3, [r7, #4]
2000a600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000a604:	687b      	ldr	r3, [r7, #4]
2000a606:	32ae      	adds	r2, #174	@ 0xae
2000a608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a60c:	689b      	ldr	r3, [r3, #8]
2000a60e:	6839      	ldr	r1, [r7, #0]
2000a610:	6878      	ldr	r0, [r7, #4]
2000a612:	4798      	blx	r3
2000a614:	4603      	mov	r3, r0
2000a616:	73fb      	strb	r3, [r7, #15]
      break;
2000a618:	e04a      	b.n	2000a6b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000a61a:	683b      	ldr	r3, [r7, #0]
2000a61c:	785b      	ldrb	r3, [r3, #1]
2000a61e:	2b09      	cmp	r3, #9
2000a620:	d83b      	bhi.n	2000a69a <USBD_StdDevReq+0xc2>
2000a622:	a201      	add	r2, pc, #4	@ (adr r2, 2000a628 <USBD_StdDevReq+0x50>)
2000a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000a628:	2000a67d 	.word	0x2000a67d
2000a62c:	2000a691 	.word	0x2000a691
2000a630:	2000a69b 	.word	0x2000a69b
2000a634:	2000a687 	.word	0x2000a687
2000a638:	2000a69b 	.word	0x2000a69b
2000a63c:	2000a65b 	.word	0x2000a65b
2000a640:	2000a651 	.word	0x2000a651
2000a644:	2000a69b 	.word	0x2000a69b
2000a648:	2000a673 	.word	0x2000a673
2000a64c:	2000a665 	.word	0x2000a665
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
2000a650:	6839      	ldr	r1, [r7, #0]
2000a652:	6878      	ldr	r0, [r7, #4]
2000a654:	f000 fa3e 	bl	2000aad4 <USBD_GetDescriptor>
          break;
2000a658:	e024      	b.n	2000a6a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
2000a65a:	6839      	ldr	r1, [r7, #0]
2000a65c:	6878      	ldr	r0, [r7, #4]
2000a65e:	f000 fbcd 	bl	2000adfc <USBD_SetAddress>
          break;
2000a662:	e01f      	b.n	2000a6a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
2000a664:	6839      	ldr	r1, [r7, #0]
2000a666:	6878      	ldr	r0, [r7, #4]
2000a668:	f000 fc0c 	bl	2000ae84 <USBD_SetConfig>
2000a66c:	4603      	mov	r3, r0
2000a66e:	73fb      	strb	r3, [r7, #15]
          break;
2000a670:	e018      	b.n	2000a6a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
2000a672:	6839      	ldr	r1, [r7, #0]
2000a674:	6878      	ldr	r0, [r7, #4]
2000a676:	f000 fcaf 	bl	2000afd8 <USBD_GetConfig>
          break;
2000a67a:	e013      	b.n	2000a6a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
2000a67c:	6839      	ldr	r1, [r7, #0]
2000a67e:	6878      	ldr	r0, [r7, #4]
2000a680:	f000 fce0 	bl	2000b044 <USBD_GetStatus>
          break;
2000a684:	e00e      	b.n	2000a6a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
2000a686:	6839      	ldr	r1, [r7, #0]
2000a688:	6878      	ldr	r0, [r7, #4]
2000a68a:	f000 fd0f 	bl	2000b0ac <USBD_SetFeature>
          break;
2000a68e:	e009      	b.n	2000a6a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
2000a690:	6839      	ldr	r1, [r7, #0]
2000a692:	6878      	ldr	r0, [r7, #4]
2000a694:	f000 fd33 	bl	2000b0fe <USBD_ClrFeature>
          break;
2000a698:	e004      	b.n	2000a6a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
2000a69a:	6839      	ldr	r1, [r7, #0]
2000a69c:	6878      	ldr	r0, [r7, #4]
2000a69e:	f000 fd8a 	bl	2000b1b6 <USBD_CtlError>
          break;
2000a6a2:	bf00      	nop
      }
      break;
2000a6a4:	e004      	b.n	2000a6b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
2000a6a6:	6839      	ldr	r1, [r7, #0]
2000a6a8:	6878      	ldr	r0, [r7, #4]
2000a6aa:	f000 fd84 	bl	2000b1b6 <USBD_CtlError>
      break;
2000a6ae:	bf00      	nop
  }

  return ret;
2000a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
2000a6b2:	4618      	mov	r0, r3
2000a6b4:	3710      	adds	r7, #16
2000a6b6:	46bd      	mov	sp, r7
2000a6b8:	bd80      	pop	{r7, pc}
2000a6ba:	bf00      	nop

2000a6bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000a6bc:	b580      	push	{r7, lr}
2000a6be:	b084      	sub	sp, #16
2000a6c0:	af00      	add	r7, sp, #0
2000a6c2:	6078      	str	r0, [r7, #4]
2000a6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000a6c6:	2300      	movs	r3, #0
2000a6c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000a6ca:	683b      	ldr	r3, [r7, #0]
2000a6cc:	781b      	ldrb	r3, [r3, #0]
2000a6ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000a6d2:	2b40      	cmp	r3, #64	@ 0x40
2000a6d4:	d005      	beq.n	2000a6e2 <USBD_StdItfReq+0x26>
2000a6d6:	2b40      	cmp	r3, #64	@ 0x40
2000a6d8:	d852      	bhi.n	2000a780 <USBD_StdItfReq+0xc4>
2000a6da:	2b00      	cmp	r3, #0
2000a6dc:	d001      	beq.n	2000a6e2 <USBD_StdItfReq+0x26>
2000a6de:	2b20      	cmp	r3, #32
2000a6e0:	d14e      	bne.n	2000a780 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
2000a6e2:	687b      	ldr	r3, [r7, #4]
2000a6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a6e8:	b2db      	uxtb	r3, r3
2000a6ea:	3b01      	subs	r3, #1
2000a6ec:	2b02      	cmp	r3, #2
2000a6ee:	d840      	bhi.n	2000a772 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
2000a6f0:	683b      	ldr	r3, [r7, #0]
2000a6f2:	889b      	ldrh	r3, [r3, #4]
2000a6f4:	b2db      	uxtb	r3, r3
2000a6f6:	2b01      	cmp	r3, #1
2000a6f8:	d836      	bhi.n	2000a768 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
2000a6fa:	683b      	ldr	r3, [r7, #0]
2000a6fc:	889b      	ldrh	r3, [r3, #4]
2000a6fe:	b2db      	uxtb	r3, r3
2000a700:	4619      	mov	r1, r3
2000a702:	6878      	ldr	r0, [r7, #4]
2000a704:	f7ff fedc 	bl	2000a4c0 <USBD_CoreFindIF>
2000a708:	4603      	mov	r3, r0
2000a70a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000a70c:	7bbb      	ldrb	r3, [r7, #14]
2000a70e:	2bff      	cmp	r3, #255	@ 0xff
2000a710:	d01d      	beq.n	2000a74e <USBD_StdItfReq+0x92>
2000a712:	7bbb      	ldrb	r3, [r7, #14]
2000a714:	2b00      	cmp	r3, #0
2000a716:	d11a      	bne.n	2000a74e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
2000a718:	7bba      	ldrb	r2, [r7, #14]
2000a71a:	687b      	ldr	r3, [r7, #4]
2000a71c:	32ae      	adds	r2, #174	@ 0xae
2000a71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a722:	689b      	ldr	r3, [r3, #8]
2000a724:	2b00      	cmp	r3, #0
2000a726:	d00f      	beq.n	2000a748 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
2000a728:	7bba      	ldrb	r2, [r7, #14]
2000a72a:	687b      	ldr	r3, [r7, #4]
2000a72c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000a730:	7bba      	ldrb	r2, [r7, #14]
2000a732:	687b      	ldr	r3, [r7, #4]
2000a734:	32ae      	adds	r2, #174	@ 0xae
2000a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a73a:	689b      	ldr	r3, [r3, #8]
2000a73c:	6839      	ldr	r1, [r7, #0]
2000a73e:	6878      	ldr	r0, [r7, #4]
2000a740:	4798      	blx	r3
2000a742:	4603      	mov	r3, r0
2000a744:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000a746:	e004      	b.n	2000a752 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
2000a748:	2303      	movs	r3, #3
2000a74a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000a74c:	e001      	b.n	2000a752 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
2000a74e:	2303      	movs	r3, #3
2000a750:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
2000a752:	683b      	ldr	r3, [r7, #0]
2000a754:	88db      	ldrh	r3, [r3, #6]
2000a756:	2b00      	cmp	r3, #0
2000a758:	d110      	bne.n	2000a77c <USBD_StdItfReq+0xc0>
2000a75a:	7bfb      	ldrb	r3, [r7, #15]
2000a75c:	2b00      	cmp	r3, #0
2000a75e:	d10d      	bne.n	2000a77c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
2000a760:	6878      	ldr	r0, [r7, #4]
2000a762:	f000 fe06 	bl	2000b372 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
2000a766:	e009      	b.n	2000a77c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
2000a768:	6839      	ldr	r1, [r7, #0]
2000a76a:	6878      	ldr	r0, [r7, #4]
2000a76c:	f000 fd23 	bl	2000b1b6 <USBD_CtlError>
          break;
2000a770:	e004      	b.n	2000a77c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
2000a772:	6839      	ldr	r1, [r7, #0]
2000a774:	6878      	ldr	r0, [r7, #4]
2000a776:	f000 fd1e 	bl	2000b1b6 <USBD_CtlError>
          break;
2000a77a:	e000      	b.n	2000a77e <USBD_StdItfReq+0xc2>
          break;
2000a77c:	bf00      	nop
      }
      break;
2000a77e:	e004      	b.n	2000a78a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
2000a780:	6839      	ldr	r1, [r7, #0]
2000a782:	6878      	ldr	r0, [r7, #4]
2000a784:	f000 fd17 	bl	2000b1b6 <USBD_CtlError>
      break;
2000a788:	bf00      	nop
  }

  return ret;
2000a78a:	7bfb      	ldrb	r3, [r7, #15]
}
2000a78c:	4618      	mov	r0, r3
2000a78e:	3710      	adds	r7, #16
2000a790:	46bd      	mov	sp, r7
2000a792:	bd80      	pop	{r7, pc}

2000a794 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000a794:	b580      	push	{r7, lr}
2000a796:	b084      	sub	sp, #16
2000a798:	af00      	add	r7, sp, #0
2000a79a:	6078      	str	r0, [r7, #4]
2000a79c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
2000a79e:	2300      	movs	r3, #0
2000a7a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
2000a7a2:	683b      	ldr	r3, [r7, #0]
2000a7a4:	889b      	ldrh	r3, [r3, #4]
2000a7a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000a7a8:	683b      	ldr	r3, [r7, #0]
2000a7aa:	781b      	ldrb	r3, [r3, #0]
2000a7ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2000a7b0:	2b40      	cmp	r3, #64	@ 0x40
2000a7b2:	d007      	beq.n	2000a7c4 <USBD_StdEPReq+0x30>
2000a7b4:	2b40      	cmp	r3, #64	@ 0x40
2000a7b6:	f200 8181 	bhi.w	2000aabc <USBD_StdEPReq+0x328>
2000a7ba:	2b00      	cmp	r3, #0
2000a7bc:	d02a      	beq.n	2000a814 <USBD_StdEPReq+0x80>
2000a7be:	2b20      	cmp	r3, #32
2000a7c0:	f040 817c 	bne.w	2000aabc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
2000a7c4:	7bbb      	ldrb	r3, [r7, #14]
2000a7c6:	4619      	mov	r1, r3
2000a7c8:	6878      	ldr	r0, [r7, #4]
2000a7ca:	f7ff fe86 	bl	2000a4da <USBD_CoreFindEP>
2000a7ce:	4603      	mov	r3, r0
2000a7d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000a7d2:	7b7b      	ldrb	r3, [r7, #13]
2000a7d4:	2bff      	cmp	r3, #255	@ 0xff
2000a7d6:	f000 8176 	beq.w	2000aac6 <USBD_StdEPReq+0x332>
2000a7da:	7b7b      	ldrb	r3, [r7, #13]
2000a7dc:	2b00      	cmp	r3, #0
2000a7de:	f040 8172 	bne.w	2000aac6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
2000a7e2:	7b7a      	ldrb	r2, [r7, #13]
2000a7e4:	687b      	ldr	r3, [r7, #4]
2000a7e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
2000a7ea:	7b7a      	ldrb	r2, [r7, #13]
2000a7ec:	687b      	ldr	r3, [r7, #4]
2000a7ee:	32ae      	adds	r2, #174	@ 0xae
2000a7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a7f4:	689b      	ldr	r3, [r3, #8]
2000a7f6:	2b00      	cmp	r3, #0
2000a7f8:	f000 8165 	beq.w	2000aac6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
2000a7fc:	7b7a      	ldrb	r2, [r7, #13]
2000a7fe:	687b      	ldr	r3, [r7, #4]
2000a800:	32ae      	adds	r2, #174	@ 0xae
2000a802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a806:	689b      	ldr	r3, [r3, #8]
2000a808:	6839      	ldr	r1, [r7, #0]
2000a80a:	6878      	ldr	r0, [r7, #4]
2000a80c:	4798      	blx	r3
2000a80e:	4603      	mov	r3, r0
2000a810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
2000a812:	e158      	b.n	2000aac6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
2000a814:	683b      	ldr	r3, [r7, #0]
2000a816:	785b      	ldrb	r3, [r3, #1]
2000a818:	2b03      	cmp	r3, #3
2000a81a:	d008      	beq.n	2000a82e <USBD_StdEPReq+0x9a>
2000a81c:	2b03      	cmp	r3, #3
2000a81e:	f300 8147 	bgt.w	2000aab0 <USBD_StdEPReq+0x31c>
2000a822:	2b00      	cmp	r3, #0
2000a824:	f000 809b 	beq.w	2000a95e <USBD_StdEPReq+0x1ca>
2000a828:	2b01      	cmp	r3, #1
2000a82a:	d03c      	beq.n	2000a8a6 <USBD_StdEPReq+0x112>
2000a82c:	e140      	b.n	2000aab0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
2000a82e:	687b      	ldr	r3, [r7, #4]
2000a830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a834:	b2db      	uxtb	r3, r3
2000a836:	2b02      	cmp	r3, #2
2000a838:	d002      	beq.n	2000a840 <USBD_StdEPReq+0xac>
2000a83a:	2b03      	cmp	r3, #3
2000a83c:	d016      	beq.n	2000a86c <USBD_StdEPReq+0xd8>
2000a83e:	e02c      	b.n	2000a89a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000a840:	7bbb      	ldrb	r3, [r7, #14]
2000a842:	2b00      	cmp	r3, #0
2000a844:	d00d      	beq.n	2000a862 <USBD_StdEPReq+0xce>
2000a846:	7bbb      	ldrb	r3, [r7, #14]
2000a848:	2b80      	cmp	r3, #128	@ 0x80
2000a84a:	d00a      	beq.n	2000a862 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000a84c:	7bbb      	ldrb	r3, [r7, #14]
2000a84e:	4619      	mov	r1, r3
2000a850:	6878      	ldr	r0, [r7, #4]
2000a852:	f001 f94f 	bl	2000baf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000a856:	2180      	movs	r1, #128	@ 0x80
2000a858:	6878      	ldr	r0, [r7, #4]
2000a85a:	f001 f94b 	bl	2000baf4 <USBD_LL_StallEP>
2000a85e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000a860:	e020      	b.n	2000a8a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
2000a862:	6839      	ldr	r1, [r7, #0]
2000a864:	6878      	ldr	r0, [r7, #4]
2000a866:	f000 fca6 	bl	2000b1b6 <USBD_CtlError>
              break;
2000a86a:	e01b      	b.n	2000a8a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000a86c:	683b      	ldr	r3, [r7, #0]
2000a86e:	885b      	ldrh	r3, [r3, #2]
2000a870:	2b00      	cmp	r3, #0
2000a872:	d10e      	bne.n	2000a892 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
2000a874:	7bbb      	ldrb	r3, [r7, #14]
2000a876:	2b00      	cmp	r3, #0
2000a878:	d00b      	beq.n	2000a892 <USBD_StdEPReq+0xfe>
2000a87a:	7bbb      	ldrb	r3, [r7, #14]
2000a87c:	2b80      	cmp	r3, #128	@ 0x80
2000a87e:	d008      	beq.n	2000a892 <USBD_StdEPReq+0xfe>
2000a880:	683b      	ldr	r3, [r7, #0]
2000a882:	88db      	ldrh	r3, [r3, #6]
2000a884:	2b00      	cmp	r3, #0
2000a886:	d104      	bne.n	2000a892 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
2000a888:	7bbb      	ldrb	r3, [r7, #14]
2000a88a:	4619      	mov	r1, r3
2000a88c:	6878      	ldr	r0, [r7, #4]
2000a88e:	f001 f931 	bl	2000baf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
2000a892:	6878      	ldr	r0, [r7, #4]
2000a894:	f000 fd6d 	bl	2000b372 <USBD_CtlSendStatus>

              break;
2000a898:	e004      	b.n	2000a8a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
2000a89a:	6839      	ldr	r1, [r7, #0]
2000a89c:	6878      	ldr	r0, [r7, #4]
2000a89e:	f000 fc8a 	bl	2000b1b6 <USBD_CtlError>
              break;
2000a8a2:	bf00      	nop
          }
          break;
2000a8a4:	e109      	b.n	2000aaba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
2000a8a6:	687b      	ldr	r3, [r7, #4]
2000a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a8ac:	b2db      	uxtb	r3, r3
2000a8ae:	2b02      	cmp	r3, #2
2000a8b0:	d002      	beq.n	2000a8b8 <USBD_StdEPReq+0x124>
2000a8b2:	2b03      	cmp	r3, #3
2000a8b4:	d016      	beq.n	2000a8e4 <USBD_StdEPReq+0x150>
2000a8b6:	e04b      	b.n	2000a950 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000a8b8:	7bbb      	ldrb	r3, [r7, #14]
2000a8ba:	2b00      	cmp	r3, #0
2000a8bc:	d00d      	beq.n	2000a8da <USBD_StdEPReq+0x146>
2000a8be:	7bbb      	ldrb	r3, [r7, #14]
2000a8c0:	2b80      	cmp	r3, #128	@ 0x80
2000a8c2:	d00a      	beq.n	2000a8da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
2000a8c4:	7bbb      	ldrb	r3, [r7, #14]
2000a8c6:	4619      	mov	r1, r3
2000a8c8:	6878      	ldr	r0, [r7, #4]
2000a8ca:	f001 f913 	bl	2000baf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000a8ce:	2180      	movs	r1, #128	@ 0x80
2000a8d0:	6878      	ldr	r0, [r7, #4]
2000a8d2:	f001 f90f 	bl	2000baf4 <USBD_LL_StallEP>
2000a8d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000a8d8:	e040      	b.n	2000a95c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
2000a8da:	6839      	ldr	r1, [r7, #0]
2000a8dc:	6878      	ldr	r0, [r7, #4]
2000a8de:	f000 fc6a 	bl	2000b1b6 <USBD_CtlError>
              break;
2000a8e2:	e03b      	b.n	2000a95c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
2000a8e4:	683b      	ldr	r3, [r7, #0]
2000a8e6:	885b      	ldrh	r3, [r3, #2]
2000a8e8:	2b00      	cmp	r3, #0
2000a8ea:	d136      	bne.n	2000a95a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
2000a8ec:	7bbb      	ldrb	r3, [r7, #14]
2000a8ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000a8f2:	2b00      	cmp	r3, #0
2000a8f4:	d004      	beq.n	2000a900 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
2000a8f6:	7bbb      	ldrb	r3, [r7, #14]
2000a8f8:	4619      	mov	r1, r3
2000a8fa:	6878      	ldr	r0, [r7, #4]
2000a8fc:	f001 f919 	bl	2000bb32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
2000a900:	6878      	ldr	r0, [r7, #4]
2000a902:	f000 fd36 	bl	2000b372 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
2000a906:	7bbb      	ldrb	r3, [r7, #14]
2000a908:	4619      	mov	r1, r3
2000a90a:	6878      	ldr	r0, [r7, #4]
2000a90c:	f7ff fde5 	bl	2000a4da <USBD_CoreFindEP>
2000a910:	4603      	mov	r3, r0
2000a912:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
2000a914:	7b7b      	ldrb	r3, [r7, #13]
2000a916:	2bff      	cmp	r3, #255	@ 0xff
2000a918:	d01f      	beq.n	2000a95a <USBD_StdEPReq+0x1c6>
2000a91a:	7b7b      	ldrb	r3, [r7, #13]
2000a91c:	2b00      	cmp	r3, #0
2000a91e:	d11c      	bne.n	2000a95a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
2000a920:	7b7a      	ldrb	r2, [r7, #13]
2000a922:	687b      	ldr	r3, [r7, #4]
2000a924:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
2000a928:	7b7a      	ldrb	r2, [r7, #13]
2000a92a:	687b      	ldr	r3, [r7, #4]
2000a92c:	32ae      	adds	r2, #174	@ 0xae
2000a92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a932:	689b      	ldr	r3, [r3, #8]
2000a934:	2b00      	cmp	r3, #0
2000a936:	d010      	beq.n	2000a95a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
2000a938:	7b7a      	ldrb	r2, [r7, #13]
2000a93a:	687b      	ldr	r3, [r7, #4]
2000a93c:	32ae      	adds	r2, #174	@ 0xae
2000a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000a942:	689b      	ldr	r3, [r3, #8]
2000a944:	6839      	ldr	r1, [r7, #0]
2000a946:	6878      	ldr	r0, [r7, #4]
2000a948:	4798      	blx	r3
2000a94a:	4603      	mov	r3, r0
2000a94c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
2000a94e:	e004      	b.n	2000a95a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
2000a950:	6839      	ldr	r1, [r7, #0]
2000a952:	6878      	ldr	r0, [r7, #4]
2000a954:	f000 fc2f 	bl	2000b1b6 <USBD_CtlError>
              break;
2000a958:	e000      	b.n	2000a95c <USBD_StdEPReq+0x1c8>
              break;
2000a95a:	bf00      	nop
          }
          break;
2000a95c:	e0ad      	b.n	2000aaba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
2000a95e:	687b      	ldr	r3, [r7, #4]
2000a960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000a964:	b2db      	uxtb	r3, r3
2000a966:	2b02      	cmp	r3, #2
2000a968:	d002      	beq.n	2000a970 <USBD_StdEPReq+0x1dc>
2000a96a:	2b03      	cmp	r3, #3
2000a96c:	d033      	beq.n	2000a9d6 <USBD_StdEPReq+0x242>
2000a96e:	e099      	b.n	2000aaa4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000a970:	7bbb      	ldrb	r3, [r7, #14]
2000a972:	2b00      	cmp	r3, #0
2000a974:	d007      	beq.n	2000a986 <USBD_StdEPReq+0x1f2>
2000a976:	7bbb      	ldrb	r3, [r7, #14]
2000a978:	2b80      	cmp	r3, #128	@ 0x80
2000a97a:	d004      	beq.n	2000a986 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
2000a97c:	6839      	ldr	r1, [r7, #0]
2000a97e:	6878      	ldr	r0, [r7, #4]
2000a980:	f000 fc19 	bl	2000b1b6 <USBD_CtlError>
                break;
2000a984:	e093      	b.n	2000aaae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000a986:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000a98a:	2b00      	cmp	r3, #0
2000a98c:	da0b      	bge.n	2000a9a6 <USBD_StdEPReq+0x212>
2000a98e:	7bbb      	ldrb	r3, [r7, #14]
2000a990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000a994:	4613      	mov	r3, r2
2000a996:	009b      	lsls	r3, r3, #2
2000a998:	4413      	add	r3, r2
2000a99a:	009b      	lsls	r3, r3, #2
2000a99c:	3310      	adds	r3, #16
2000a99e:	687a      	ldr	r2, [r7, #4]
2000a9a0:	4413      	add	r3, r2
2000a9a2:	3304      	adds	r3, #4
2000a9a4:	e00b      	b.n	2000a9be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000a9a6:	7bbb      	ldrb	r3, [r7, #14]
2000a9a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000a9ac:	4613      	mov	r3, r2
2000a9ae:	009b      	lsls	r3, r3, #2
2000a9b0:	4413      	add	r3, r2
2000a9b2:	009b      	lsls	r3, r3, #2
2000a9b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000a9b8:	687a      	ldr	r2, [r7, #4]
2000a9ba:	4413      	add	r3, r2
2000a9bc:	3304      	adds	r3, #4
2000a9be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
2000a9c0:	68bb      	ldr	r3, [r7, #8]
2000a9c2:	2200      	movs	r2, #0
2000a9c4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000a9c6:	68bb      	ldr	r3, [r7, #8]
2000a9c8:	330e      	adds	r3, #14
2000a9ca:	2202      	movs	r2, #2
2000a9cc:	4619      	mov	r1, r3
2000a9ce:	6878      	ldr	r0, [r7, #4]
2000a9d0:	f000 fc6e 	bl	2000b2b0 <USBD_CtlSendData>
              break;
2000a9d4:	e06b      	b.n	2000aaae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
2000a9d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000a9da:	2b00      	cmp	r3, #0
2000a9dc:	da11      	bge.n	2000aa02 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
2000a9de:	7bbb      	ldrb	r3, [r7, #14]
2000a9e0:	f003 020f 	and.w	r2, r3, #15
2000a9e4:	6879      	ldr	r1, [r7, #4]
2000a9e6:	4613      	mov	r3, r2
2000a9e8:	009b      	lsls	r3, r3, #2
2000a9ea:	4413      	add	r3, r2
2000a9ec:	009b      	lsls	r3, r3, #2
2000a9ee:	440b      	add	r3, r1
2000a9f0:	3323      	adds	r3, #35	@ 0x23
2000a9f2:	781b      	ldrb	r3, [r3, #0]
2000a9f4:	2b00      	cmp	r3, #0
2000a9f6:	d117      	bne.n	2000aa28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000a9f8:	6839      	ldr	r1, [r7, #0]
2000a9fa:	6878      	ldr	r0, [r7, #4]
2000a9fc:	f000 fbdb 	bl	2000b1b6 <USBD_CtlError>
                  break;
2000aa00:	e055      	b.n	2000aaae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
2000aa02:	7bbb      	ldrb	r3, [r7, #14]
2000aa04:	f003 020f 	and.w	r2, r3, #15
2000aa08:	6879      	ldr	r1, [r7, #4]
2000aa0a:	4613      	mov	r3, r2
2000aa0c:	009b      	lsls	r3, r3, #2
2000aa0e:	4413      	add	r3, r2
2000aa10:	009b      	lsls	r3, r3, #2
2000aa12:	440b      	add	r3, r1
2000aa14:	f203 1363 	addw	r3, r3, #355	@ 0x163
2000aa18:	781b      	ldrb	r3, [r3, #0]
2000aa1a:	2b00      	cmp	r3, #0
2000aa1c:	d104      	bne.n	2000aa28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
2000aa1e:	6839      	ldr	r1, [r7, #0]
2000aa20:	6878      	ldr	r0, [r7, #4]
2000aa22:	f000 fbc8 	bl	2000b1b6 <USBD_CtlError>
                  break;
2000aa26:	e042      	b.n	2000aaae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000aa28:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000aa2c:	2b00      	cmp	r3, #0
2000aa2e:	da0b      	bge.n	2000aa48 <USBD_StdEPReq+0x2b4>
2000aa30:	7bbb      	ldrb	r3, [r7, #14]
2000aa32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000aa36:	4613      	mov	r3, r2
2000aa38:	009b      	lsls	r3, r3, #2
2000aa3a:	4413      	add	r3, r2
2000aa3c:	009b      	lsls	r3, r3, #2
2000aa3e:	3310      	adds	r3, #16
2000aa40:	687a      	ldr	r2, [r7, #4]
2000aa42:	4413      	add	r3, r2
2000aa44:	3304      	adds	r3, #4
2000aa46:	e00b      	b.n	2000aa60 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000aa48:	7bbb      	ldrb	r3, [r7, #14]
2000aa4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000aa4e:	4613      	mov	r3, r2
2000aa50:	009b      	lsls	r3, r3, #2
2000aa52:	4413      	add	r3, r2
2000aa54:	009b      	lsls	r3, r3, #2
2000aa56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000aa5a:	687a      	ldr	r2, [r7, #4]
2000aa5c:	4413      	add	r3, r2
2000aa5e:	3304      	adds	r3, #4
2000aa60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
2000aa62:	7bbb      	ldrb	r3, [r7, #14]
2000aa64:	2b00      	cmp	r3, #0
2000aa66:	d002      	beq.n	2000aa6e <USBD_StdEPReq+0x2da>
2000aa68:	7bbb      	ldrb	r3, [r7, #14]
2000aa6a:	2b80      	cmp	r3, #128	@ 0x80
2000aa6c:	d103      	bne.n	2000aa76 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
2000aa6e:	68bb      	ldr	r3, [r7, #8]
2000aa70:	2200      	movs	r2, #0
2000aa72:	739a      	strb	r2, [r3, #14]
2000aa74:	e00e      	b.n	2000aa94 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
2000aa76:	7bbb      	ldrb	r3, [r7, #14]
2000aa78:	4619      	mov	r1, r3
2000aa7a:	6878      	ldr	r0, [r7, #4]
2000aa7c:	f001 f878 	bl	2000bb70 <USBD_LL_IsStallEP>
2000aa80:	4603      	mov	r3, r0
2000aa82:	2b00      	cmp	r3, #0
2000aa84:	d003      	beq.n	2000aa8e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
2000aa86:	68bb      	ldr	r3, [r7, #8]
2000aa88:	2201      	movs	r2, #1
2000aa8a:	739a      	strb	r2, [r3, #14]
2000aa8c:	e002      	b.n	2000aa94 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
2000aa8e:	68bb      	ldr	r3, [r7, #8]
2000aa90:	2200      	movs	r2, #0
2000aa92:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000aa94:	68bb      	ldr	r3, [r7, #8]
2000aa96:	330e      	adds	r3, #14
2000aa98:	2202      	movs	r2, #2
2000aa9a:	4619      	mov	r1, r3
2000aa9c:	6878      	ldr	r0, [r7, #4]
2000aa9e:	f000 fc07 	bl	2000b2b0 <USBD_CtlSendData>
              break;
2000aaa2:	e004      	b.n	2000aaae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
2000aaa4:	6839      	ldr	r1, [r7, #0]
2000aaa6:	6878      	ldr	r0, [r7, #4]
2000aaa8:	f000 fb85 	bl	2000b1b6 <USBD_CtlError>
              break;
2000aaac:	bf00      	nop
          }
          break;
2000aaae:	e004      	b.n	2000aaba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
2000aab0:	6839      	ldr	r1, [r7, #0]
2000aab2:	6878      	ldr	r0, [r7, #4]
2000aab4:	f000 fb7f 	bl	2000b1b6 <USBD_CtlError>
          break;
2000aab8:	bf00      	nop
      }
      break;
2000aaba:	e005      	b.n	2000aac8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
2000aabc:	6839      	ldr	r1, [r7, #0]
2000aabe:	6878      	ldr	r0, [r7, #4]
2000aac0:	f000 fb79 	bl	2000b1b6 <USBD_CtlError>
      break;
2000aac4:	e000      	b.n	2000aac8 <USBD_StdEPReq+0x334>
      break;
2000aac6:	bf00      	nop
  }

  return ret;
2000aac8:	7bfb      	ldrb	r3, [r7, #15]
}
2000aaca:	4618      	mov	r0, r3
2000aacc:	3710      	adds	r7, #16
2000aace:	46bd      	mov	sp, r7
2000aad0:	bd80      	pop	{r7, pc}
	...

2000aad4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000aad4:	b580      	push	{r7, lr}
2000aad6:	b084      	sub	sp, #16
2000aad8:	af00      	add	r7, sp, #0
2000aada:	6078      	str	r0, [r7, #4]
2000aadc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000aade:	2300      	movs	r3, #0
2000aae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
2000aae2:	2300      	movs	r3, #0
2000aae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
2000aae6:	2300      	movs	r3, #0
2000aae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
2000aaea:	683b      	ldr	r3, [r7, #0]
2000aaec:	885b      	ldrh	r3, [r3, #2]
2000aaee:	0a1b      	lsrs	r3, r3, #8
2000aaf0:	b29b      	uxth	r3, r3
2000aaf2:	3b01      	subs	r3, #1
2000aaf4:	2b0e      	cmp	r3, #14
2000aaf6:	f200 8152 	bhi.w	2000ad9e <USBD_GetDescriptor+0x2ca>
2000aafa:	a201      	add	r2, pc, #4	@ (adr r2, 2000ab00 <USBD_GetDescriptor+0x2c>)
2000aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000ab00:	2000ab71 	.word	0x2000ab71
2000ab04:	2000ab89 	.word	0x2000ab89
2000ab08:	2000abc9 	.word	0x2000abc9
2000ab0c:	2000ad9f 	.word	0x2000ad9f
2000ab10:	2000ad9f 	.word	0x2000ad9f
2000ab14:	2000ad3f 	.word	0x2000ad3f
2000ab18:	2000ad6b 	.word	0x2000ad6b
2000ab1c:	2000ad9f 	.word	0x2000ad9f
2000ab20:	2000ad9f 	.word	0x2000ad9f
2000ab24:	2000ad9f 	.word	0x2000ad9f
2000ab28:	2000ad9f 	.word	0x2000ad9f
2000ab2c:	2000ad9f 	.word	0x2000ad9f
2000ab30:	2000ad9f 	.word	0x2000ad9f
2000ab34:	2000ad9f 	.word	0x2000ad9f
2000ab38:	2000ab3d 	.word	0x2000ab3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
2000ab3c:	687b      	ldr	r3, [r7, #4]
2000ab3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ab42:	69db      	ldr	r3, [r3, #28]
2000ab44:	2b00      	cmp	r3, #0
2000ab46:	d00b      	beq.n	2000ab60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
2000ab48:	687b      	ldr	r3, [r7, #4]
2000ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ab4e:	69db      	ldr	r3, [r3, #28]
2000ab50:	687a      	ldr	r2, [r7, #4]
2000ab52:	7c12      	ldrb	r2, [r2, #16]
2000ab54:	f107 0108 	add.w	r1, r7, #8
2000ab58:	4610      	mov	r0, r2
2000ab5a:	4798      	blx	r3
2000ab5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000ab5e:	e126      	b.n	2000adae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000ab60:	6839      	ldr	r1, [r7, #0]
2000ab62:	6878      	ldr	r0, [r7, #4]
2000ab64:	f000 fb27 	bl	2000b1b6 <USBD_CtlError>
        err++;
2000ab68:	7afb      	ldrb	r3, [r7, #11]
2000ab6a:	3301      	adds	r3, #1
2000ab6c:	72fb      	strb	r3, [r7, #11]
      break;
2000ab6e:	e11e      	b.n	2000adae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
2000ab70:	687b      	ldr	r3, [r7, #4]
2000ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ab76:	681b      	ldr	r3, [r3, #0]
2000ab78:	687a      	ldr	r2, [r7, #4]
2000ab7a:	7c12      	ldrb	r2, [r2, #16]
2000ab7c:	f107 0108 	add.w	r1, r7, #8
2000ab80:	4610      	mov	r0, r2
2000ab82:	4798      	blx	r3
2000ab84:	60f8      	str	r0, [r7, #12]
      break;
2000ab86:	e112      	b.n	2000adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000ab88:	687b      	ldr	r3, [r7, #4]
2000ab8a:	7c1b      	ldrb	r3, [r3, #16]
2000ab8c:	2b00      	cmp	r3, #0
2000ab8e:	d10d      	bne.n	2000abac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
2000ab90:	687b      	ldr	r3, [r7, #4]
2000ab92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000ab96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000ab98:	f107 0208 	add.w	r2, r7, #8
2000ab9c:	4610      	mov	r0, r2
2000ab9e:	4798      	blx	r3
2000aba0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000aba2:	68fb      	ldr	r3, [r7, #12]
2000aba4:	3301      	adds	r3, #1
2000aba6:	2202      	movs	r2, #2
2000aba8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
2000abaa:	e100      	b.n	2000adae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
2000abac:	687b      	ldr	r3, [r7, #4]
2000abae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000abb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000abb4:	f107 0208 	add.w	r2, r7, #8
2000abb8:	4610      	mov	r0, r2
2000abba:	4798      	blx	r3
2000abbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
2000abbe:	68fb      	ldr	r3, [r7, #12]
2000abc0:	3301      	adds	r3, #1
2000abc2:	2202      	movs	r2, #2
2000abc4:	701a      	strb	r2, [r3, #0]
      break;
2000abc6:	e0f2      	b.n	2000adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
2000abc8:	683b      	ldr	r3, [r7, #0]
2000abca:	885b      	ldrh	r3, [r3, #2]
2000abcc:	b2db      	uxtb	r3, r3
2000abce:	2b05      	cmp	r3, #5
2000abd0:	f200 80ac 	bhi.w	2000ad2c <USBD_GetDescriptor+0x258>
2000abd4:	a201      	add	r2, pc, #4	@ (adr r2, 2000abdc <USBD_GetDescriptor+0x108>)
2000abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000abda:	bf00      	nop
2000abdc:	2000abf5 	.word	0x2000abf5
2000abe0:	2000ac29 	.word	0x2000ac29
2000abe4:	2000ac5d 	.word	0x2000ac5d
2000abe8:	2000ac91 	.word	0x2000ac91
2000abec:	2000acc5 	.word	0x2000acc5
2000abf0:	2000acf9 	.word	0x2000acf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
2000abf4:	687b      	ldr	r3, [r7, #4]
2000abf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000abfa:	685b      	ldr	r3, [r3, #4]
2000abfc:	2b00      	cmp	r3, #0
2000abfe:	d00b      	beq.n	2000ac18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
2000ac00:	687b      	ldr	r3, [r7, #4]
2000ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ac06:	685b      	ldr	r3, [r3, #4]
2000ac08:	687a      	ldr	r2, [r7, #4]
2000ac0a:	7c12      	ldrb	r2, [r2, #16]
2000ac0c:	f107 0108 	add.w	r1, r7, #8
2000ac10:	4610      	mov	r0, r2
2000ac12:	4798      	blx	r3
2000ac14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000ac16:	e091      	b.n	2000ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000ac18:	6839      	ldr	r1, [r7, #0]
2000ac1a:	6878      	ldr	r0, [r7, #4]
2000ac1c:	f000 facb 	bl	2000b1b6 <USBD_CtlError>
            err++;
2000ac20:	7afb      	ldrb	r3, [r7, #11]
2000ac22:	3301      	adds	r3, #1
2000ac24:	72fb      	strb	r3, [r7, #11]
          break;
2000ac26:	e089      	b.n	2000ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
2000ac28:	687b      	ldr	r3, [r7, #4]
2000ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ac2e:	689b      	ldr	r3, [r3, #8]
2000ac30:	2b00      	cmp	r3, #0
2000ac32:	d00b      	beq.n	2000ac4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
2000ac34:	687b      	ldr	r3, [r7, #4]
2000ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ac3a:	689b      	ldr	r3, [r3, #8]
2000ac3c:	687a      	ldr	r2, [r7, #4]
2000ac3e:	7c12      	ldrb	r2, [r2, #16]
2000ac40:	f107 0108 	add.w	r1, r7, #8
2000ac44:	4610      	mov	r0, r2
2000ac46:	4798      	blx	r3
2000ac48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000ac4a:	e077      	b.n	2000ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000ac4c:	6839      	ldr	r1, [r7, #0]
2000ac4e:	6878      	ldr	r0, [r7, #4]
2000ac50:	f000 fab1 	bl	2000b1b6 <USBD_CtlError>
            err++;
2000ac54:	7afb      	ldrb	r3, [r7, #11]
2000ac56:	3301      	adds	r3, #1
2000ac58:	72fb      	strb	r3, [r7, #11]
          break;
2000ac5a:	e06f      	b.n	2000ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
2000ac5c:	687b      	ldr	r3, [r7, #4]
2000ac5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ac62:	68db      	ldr	r3, [r3, #12]
2000ac64:	2b00      	cmp	r3, #0
2000ac66:	d00b      	beq.n	2000ac80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
2000ac68:	687b      	ldr	r3, [r7, #4]
2000ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ac6e:	68db      	ldr	r3, [r3, #12]
2000ac70:	687a      	ldr	r2, [r7, #4]
2000ac72:	7c12      	ldrb	r2, [r2, #16]
2000ac74:	f107 0108 	add.w	r1, r7, #8
2000ac78:	4610      	mov	r0, r2
2000ac7a:	4798      	blx	r3
2000ac7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000ac7e:	e05d      	b.n	2000ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000ac80:	6839      	ldr	r1, [r7, #0]
2000ac82:	6878      	ldr	r0, [r7, #4]
2000ac84:	f000 fa97 	bl	2000b1b6 <USBD_CtlError>
            err++;
2000ac88:	7afb      	ldrb	r3, [r7, #11]
2000ac8a:	3301      	adds	r3, #1
2000ac8c:	72fb      	strb	r3, [r7, #11]
          break;
2000ac8e:	e055      	b.n	2000ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
2000ac90:	687b      	ldr	r3, [r7, #4]
2000ac92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ac96:	691b      	ldr	r3, [r3, #16]
2000ac98:	2b00      	cmp	r3, #0
2000ac9a:	d00b      	beq.n	2000acb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
2000ac9c:	687b      	ldr	r3, [r7, #4]
2000ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000aca2:	691b      	ldr	r3, [r3, #16]
2000aca4:	687a      	ldr	r2, [r7, #4]
2000aca6:	7c12      	ldrb	r2, [r2, #16]
2000aca8:	f107 0108 	add.w	r1, r7, #8
2000acac:	4610      	mov	r0, r2
2000acae:	4798      	blx	r3
2000acb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000acb2:	e043      	b.n	2000ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000acb4:	6839      	ldr	r1, [r7, #0]
2000acb6:	6878      	ldr	r0, [r7, #4]
2000acb8:	f000 fa7d 	bl	2000b1b6 <USBD_CtlError>
            err++;
2000acbc:	7afb      	ldrb	r3, [r7, #11]
2000acbe:	3301      	adds	r3, #1
2000acc0:	72fb      	strb	r3, [r7, #11]
          break;
2000acc2:	e03b      	b.n	2000ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
2000acc4:	687b      	ldr	r3, [r7, #4]
2000acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000acca:	695b      	ldr	r3, [r3, #20]
2000accc:	2b00      	cmp	r3, #0
2000acce:	d00b      	beq.n	2000ace8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
2000acd0:	687b      	ldr	r3, [r7, #4]
2000acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000acd6:	695b      	ldr	r3, [r3, #20]
2000acd8:	687a      	ldr	r2, [r7, #4]
2000acda:	7c12      	ldrb	r2, [r2, #16]
2000acdc:	f107 0108 	add.w	r1, r7, #8
2000ace0:	4610      	mov	r0, r2
2000ace2:	4798      	blx	r3
2000ace4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000ace6:	e029      	b.n	2000ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000ace8:	6839      	ldr	r1, [r7, #0]
2000acea:	6878      	ldr	r0, [r7, #4]
2000acec:	f000 fa63 	bl	2000b1b6 <USBD_CtlError>
            err++;
2000acf0:	7afb      	ldrb	r3, [r7, #11]
2000acf2:	3301      	adds	r3, #1
2000acf4:	72fb      	strb	r3, [r7, #11]
          break;
2000acf6:	e021      	b.n	2000ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
2000acf8:	687b      	ldr	r3, [r7, #4]
2000acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000acfe:	699b      	ldr	r3, [r3, #24]
2000ad00:	2b00      	cmp	r3, #0
2000ad02:	d00b      	beq.n	2000ad1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
2000ad04:	687b      	ldr	r3, [r7, #4]
2000ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000ad0a:	699b      	ldr	r3, [r3, #24]
2000ad0c:	687a      	ldr	r2, [r7, #4]
2000ad0e:	7c12      	ldrb	r2, [r2, #16]
2000ad10:	f107 0108 	add.w	r1, r7, #8
2000ad14:	4610      	mov	r0, r2
2000ad16:	4798      	blx	r3
2000ad18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000ad1a:	e00f      	b.n	2000ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
2000ad1c:	6839      	ldr	r1, [r7, #0]
2000ad1e:	6878      	ldr	r0, [r7, #4]
2000ad20:	f000 fa49 	bl	2000b1b6 <USBD_CtlError>
            err++;
2000ad24:	7afb      	ldrb	r3, [r7, #11]
2000ad26:	3301      	adds	r3, #1
2000ad28:	72fb      	strb	r3, [r7, #11]
          break;
2000ad2a:	e007      	b.n	2000ad3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
2000ad2c:	6839      	ldr	r1, [r7, #0]
2000ad2e:	6878      	ldr	r0, [r7, #4]
2000ad30:	f000 fa41 	bl	2000b1b6 <USBD_CtlError>
          err++;
2000ad34:	7afb      	ldrb	r3, [r7, #11]
2000ad36:	3301      	adds	r3, #1
2000ad38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
2000ad3a:	bf00      	nop
      }
      break;
2000ad3c:	e037      	b.n	2000adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000ad3e:	687b      	ldr	r3, [r7, #4]
2000ad40:	7c1b      	ldrb	r3, [r3, #16]
2000ad42:	2b00      	cmp	r3, #0
2000ad44:	d109      	bne.n	2000ad5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
2000ad46:	687b      	ldr	r3, [r7, #4]
2000ad48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000ad4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000ad4e:	f107 0208 	add.w	r2, r7, #8
2000ad52:	4610      	mov	r0, r2
2000ad54:	4798      	blx	r3
2000ad56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000ad58:	e029      	b.n	2000adae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000ad5a:	6839      	ldr	r1, [r7, #0]
2000ad5c:	6878      	ldr	r0, [r7, #4]
2000ad5e:	f000 fa2a 	bl	2000b1b6 <USBD_CtlError>
        err++;
2000ad62:	7afb      	ldrb	r3, [r7, #11]
2000ad64:	3301      	adds	r3, #1
2000ad66:	72fb      	strb	r3, [r7, #11]
      break;
2000ad68:	e021      	b.n	2000adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000ad6a:	687b      	ldr	r3, [r7, #4]
2000ad6c:	7c1b      	ldrb	r3, [r3, #16]
2000ad6e:	2b00      	cmp	r3, #0
2000ad70:	d10d      	bne.n	2000ad8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
2000ad72:	687b      	ldr	r3, [r7, #4]
2000ad74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000ad78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000ad7a:	f107 0208 	add.w	r2, r7, #8
2000ad7e:	4610      	mov	r0, r2
2000ad80:	4798      	blx	r3
2000ad82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
2000ad84:	68fb      	ldr	r3, [r7, #12]
2000ad86:	3301      	adds	r3, #1
2000ad88:	2207      	movs	r2, #7
2000ad8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000ad8c:	e00f      	b.n	2000adae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000ad8e:	6839      	ldr	r1, [r7, #0]
2000ad90:	6878      	ldr	r0, [r7, #4]
2000ad92:	f000 fa10 	bl	2000b1b6 <USBD_CtlError>
        err++;
2000ad96:	7afb      	ldrb	r3, [r7, #11]
2000ad98:	3301      	adds	r3, #1
2000ad9a:	72fb      	strb	r3, [r7, #11]
      break;
2000ad9c:	e007      	b.n	2000adae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
2000ad9e:	6839      	ldr	r1, [r7, #0]
2000ada0:	6878      	ldr	r0, [r7, #4]
2000ada2:	f000 fa08 	bl	2000b1b6 <USBD_CtlError>
      err++;
2000ada6:	7afb      	ldrb	r3, [r7, #11]
2000ada8:	3301      	adds	r3, #1
2000adaa:	72fb      	strb	r3, [r7, #11]
      break;
2000adac:	bf00      	nop
  }

  if (err != 0U)
2000adae:	7afb      	ldrb	r3, [r7, #11]
2000adb0:	2b00      	cmp	r3, #0
2000adb2:	d11e      	bne.n	2000adf2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
2000adb4:	683b      	ldr	r3, [r7, #0]
2000adb6:	88db      	ldrh	r3, [r3, #6]
2000adb8:	2b00      	cmp	r3, #0
2000adba:	d016      	beq.n	2000adea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
2000adbc:	893b      	ldrh	r3, [r7, #8]
2000adbe:	2b00      	cmp	r3, #0
2000adc0:	d00e      	beq.n	2000ade0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
2000adc2:	683b      	ldr	r3, [r7, #0]
2000adc4:	88da      	ldrh	r2, [r3, #6]
2000adc6:	893b      	ldrh	r3, [r7, #8]
2000adc8:	4293      	cmp	r3, r2
2000adca:	bf28      	it	cs
2000adcc:	4613      	movcs	r3, r2
2000adce:	b29b      	uxth	r3, r3
2000add0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
2000add2:	893b      	ldrh	r3, [r7, #8]
2000add4:	461a      	mov	r2, r3
2000add6:	68f9      	ldr	r1, [r7, #12]
2000add8:	6878      	ldr	r0, [r7, #4]
2000adda:	f000 fa69 	bl	2000b2b0 <USBD_CtlSendData>
2000adde:	e009      	b.n	2000adf4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
2000ade0:	6839      	ldr	r1, [r7, #0]
2000ade2:	6878      	ldr	r0, [r7, #4]
2000ade4:	f000 f9e7 	bl	2000b1b6 <USBD_CtlError>
2000ade8:	e004      	b.n	2000adf4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
2000adea:	6878      	ldr	r0, [r7, #4]
2000adec:	f000 fac1 	bl	2000b372 <USBD_CtlSendStatus>
2000adf0:	e000      	b.n	2000adf4 <USBD_GetDescriptor+0x320>
    return;
2000adf2:	bf00      	nop
  }
}
2000adf4:	3710      	adds	r7, #16
2000adf6:	46bd      	mov	sp, r7
2000adf8:	bd80      	pop	{r7, pc}
2000adfa:	bf00      	nop

2000adfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000adfc:	b580      	push	{r7, lr}
2000adfe:	b084      	sub	sp, #16
2000ae00:	af00      	add	r7, sp, #0
2000ae02:	6078      	str	r0, [r7, #4]
2000ae04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
2000ae06:	683b      	ldr	r3, [r7, #0]
2000ae08:	889b      	ldrh	r3, [r3, #4]
2000ae0a:	2b00      	cmp	r3, #0
2000ae0c:	d131      	bne.n	2000ae72 <USBD_SetAddress+0x76>
2000ae0e:	683b      	ldr	r3, [r7, #0]
2000ae10:	88db      	ldrh	r3, [r3, #6]
2000ae12:	2b00      	cmp	r3, #0
2000ae14:	d12d      	bne.n	2000ae72 <USBD_SetAddress+0x76>
2000ae16:	683b      	ldr	r3, [r7, #0]
2000ae18:	885b      	ldrh	r3, [r3, #2]
2000ae1a:	2b7f      	cmp	r3, #127	@ 0x7f
2000ae1c:	d829      	bhi.n	2000ae72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
2000ae1e:	683b      	ldr	r3, [r7, #0]
2000ae20:	885b      	ldrh	r3, [r3, #2]
2000ae22:	b2db      	uxtb	r3, r3
2000ae24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000ae28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ae2a:	687b      	ldr	r3, [r7, #4]
2000ae2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000ae30:	b2db      	uxtb	r3, r3
2000ae32:	2b03      	cmp	r3, #3
2000ae34:	d104      	bne.n	2000ae40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
2000ae36:	6839      	ldr	r1, [r7, #0]
2000ae38:	6878      	ldr	r0, [r7, #4]
2000ae3a:	f000 f9bc 	bl	2000b1b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ae3e:	e01d      	b.n	2000ae7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
2000ae40:	687b      	ldr	r3, [r7, #4]
2000ae42:	7bfa      	ldrb	r2, [r7, #15]
2000ae44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
2000ae48:	7bfb      	ldrb	r3, [r7, #15]
2000ae4a:	4619      	mov	r1, r3
2000ae4c:	6878      	ldr	r0, [r7, #4]
2000ae4e:	f000 febb 	bl	2000bbc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
2000ae52:	6878      	ldr	r0, [r7, #4]
2000ae54:	f000 fa8d 	bl	2000b372 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
2000ae58:	7bfb      	ldrb	r3, [r7, #15]
2000ae5a:	2b00      	cmp	r3, #0
2000ae5c:	d004      	beq.n	2000ae68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000ae5e:	687b      	ldr	r3, [r7, #4]
2000ae60:	2202      	movs	r2, #2
2000ae62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ae66:	e009      	b.n	2000ae7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
2000ae68:	687b      	ldr	r3, [r7, #4]
2000ae6a:	2201      	movs	r2, #1
2000ae6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000ae70:	e004      	b.n	2000ae7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
2000ae72:	6839      	ldr	r1, [r7, #0]
2000ae74:	6878      	ldr	r0, [r7, #4]
2000ae76:	f000 f99e 	bl	2000b1b6 <USBD_CtlError>
  }
}
2000ae7a:	bf00      	nop
2000ae7c:	bf00      	nop
2000ae7e:	3710      	adds	r7, #16
2000ae80:	46bd      	mov	sp, r7
2000ae82:	bd80      	pop	{r7, pc}

2000ae84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000ae84:	b580      	push	{r7, lr}
2000ae86:	b084      	sub	sp, #16
2000ae88:	af00      	add	r7, sp, #0
2000ae8a:	6078      	str	r0, [r7, #4]
2000ae8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000ae8e:	2300      	movs	r3, #0
2000ae90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
2000ae92:	683b      	ldr	r3, [r7, #0]
2000ae94:	885b      	ldrh	r3, [r3, #2]
2000ae96:	b2da      	uxtb	r2, r3
2000ae98:	4b4e      	ldr	r3, [pc, #312]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000ae9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
2000ae9c:	4b4d      	ldr	r3, [pc, #308]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000ae9e:	781b      	ldrb	r3, [r3, #0]
2000aea0:	2b01      	cmp	r3, #1
2000aea2:	d905      	bls.n	2000aeb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
2000aea4:	6839      	ldr	r1, [r7, #0]
2000aea6:	6878      	ldr	r0, [r7, #4]
2000aea8:	f000 f985 	bl	2000b1b6 <USBD_CtlError>
    return USBD_FAIL;
2000aeac:	2303      	movs	r3, #3
2000aeae:	e08c      	b.n	2000afca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
2000aeb0:	687b      	ldr	r3, [r7, #4]
2000aeb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000aeb6:	b2db      	uxtb	r3, r3
2000aeb8:	2b02      	cmp	r3, #2
2000aeba:	d002      	beq.n	2000aec2 <USBD_SetConfig+0x3e>
2000aebc:	2b03      	cmp	r3, #3
2000aebe:	d029      	beq.n	2000af14 <USBD_SetConfig+0x90>
2000aec0:	e075      	b.n	2000afae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
2000aec2:	4b44      	ldr	r3, [pc, #272]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000aec4:	781b      	ldrb	r3, [r3, #0]
2000aec6:	2b00      	cmp	r3, #0
2000aec8:	d020      	beq.n	2000af0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
2000aeca:	4b42      	ldr	r3, [pc, #264]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000aecc:	781b      	ldrb	r3, [r3, #0]
2000aece:	461a      	mov	r2, r3
2000aed0:	687b      	ldr	r3, [r7, #4]
2000aed2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
2000aed4:	4b3f      	ldr	r3, [pc, #252]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000aed6:	781b      	ldrb	r3, [r3, #0]
2000aed8:	4619      	mov	r1, r3
2000aeda:	6878      	ldr	r0, [r7, #4]
2000aedc:	f7fe ffa5 	bl	20009e2a <USBD_SetClassConfig>
2000aee0:	4603      	mov	r3, r0
2000aee2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
2000aee4:	7bfb      	ldrb	r3, [r7, #15]
2000aee6:	2b00      	cmp	r3, #0
2000aee8:	d008      	beq.n	2000aefc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
2000aeea:	6839      	ldr	r1, [r7, #0]
2000aeec:	6878      	ldr	r0, [r7, #4]
2000aeee:	f000 f962 	bl	2000b1b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000aef2:	687b      	ldr	r3, [r7, #4]
2000aef4:	2202      	movs	r2, #2
2000aef6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000aefa:	e065      	b.n	2000afc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000aefc:	6878      	ldr	r0, [r7, #4]
2000aefe:	f000 fa38 	bl	2000b372 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
2000af02:	687b      	ldr	r3, [r7, #4]
2000af04:	2203      	movs	r2, #3
2000af06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000af0a:	e05d      	b.n	2000afc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000af0c:	6878      	ldr	r0, [r7, #4]
2000af0e:	f000 fa30 	bl	2000b372 <USBD_CtlSendStatus>
      break;
2000af12:	e059      	b.n	2000afc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
2000af14:	4b2f      	ldr	r3, [pc, #188]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000af16:	781b      	ldrb	r3, [r3, #0]
2000af18:	2b00      	cmp	r3, #0
2000af1a:	d112      	bne.n	2000af42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
2000af1c:	687b      	ldr	r3, [r7, #4]
2000af1e:	2202      	movs	r2, #2
2000af20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
2000af24:	4b2b      	ldr	r3, [pc, #172]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000af26:	781b      	ldrb	r3, [r3, #0]
2000af28:	461a      	mov	r2, r3
2000af2a:	687b      	ldr	r3, [r7, #4]
2000af2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
2000af2e:	4b29      	ldr	r3, [pc, #164]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000af30:	781b      	ldrb	r3, [r3, #0]
2000af32:	4619      	mov	r1, r3
2000af34:	6878      	ldr	r0, [r7, #4]
2000af36:	f7fe ff94 	bl	20009e62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
2000af3a:	6878      	ldr	r0, [r7, #4]
2000af3c:	f000 fa19 	bl	2000b372 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
2000af40:	e042      	b.n	2000afc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
2000af42:	4b24      	ldr	r3, [pc, #144]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000af44:	781b      	ldrb	r3, [r3, #0]
2000af46:	461a      	mov	r2, r3
2000af48:	687b      	ldr	r3, [r7, #4]
2000af4a:	685b      	ldr	r3, [r3, #4]
2000af4c:	429a      	cmp	r2, r3
2000af4e:	d02a      	beq.n	2000afa6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000af50:	687b      	ldr	r3, [r7, #4]
2000af52:	685b      	ldr	r3, [r3, #4]
2000af54:	b2db      	uxtb	r3, r3
2000af56:	4619      	mov	r1, r3
2000af58:	6878      	ldr	r0, [r7, #4]
2000af5a:	f7fe ff82 	bl	20009e62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
2000af5e:	4b1d      	ldr	r3, [pc, #116]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000af60:	781b      	ldrb	r3, [r3, #0]
2000af62:	461a      	mov	r2, r3
2000af64:	687b      	ldr	r3, [r7, #4]
2000af66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
2000af68:	4b1a      	ldr	r3, [pc, #104]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000af6a:	781b      	ldrb	r3, [r3, #0]
2000af6c:	4619      	mov	r1, r3
2000af6e:	6878      	ldr	r0, [r7, #4]
2000af70:	f7fe ff5b 	bl	20009e2a <USBD_SetClassConfig>
2000af74:	4603      	mov	r3, r0
2000af76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
2000af78:	7bfb      	ldrb	r3, [r7, #15]
2000af7a:	2b00      	cmp	r3, #0
2000af7c:	d00f      	beq.n	2000af9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
2000af7e:	6839      	ldr	r1, [r7, #0]
2000af80:	6878      	ldr	r0, [r7, #4]
2000af82:	f000 f918 	bl	2000b1b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
2000af86:	687b      	ldr	r3, [r7, #4]
2000af88:	685b      	ldr	r3, [r3, #4]
2000af8a:	b2db      	uxtb	r3, r3
2000af8c:	4619      	mov	r1, r3
2000af8e:	6878      	ldr	r0, [r7, #4]
2000af90:	f7fe ff67 	bl	20009e62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
2000af94:	687b      	ldr	r3, [r7, #4]
2000af96:	2202      	movs	r2, #2
2000af98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
2000af9c:	e014      	b.n	2000afc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
2000af9e:	6878      	ldr	r0, [r7, #4]
2000afa0:	f000 f9e7 	bl	2000b372 <USBD_CtlSendStatus>
      break;
2000afa4:	e010      	b.n	2000afc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
2000afa6:	6878      	ldr	r0, [r7, #4]
2000afa8:	f000 f9e3 	bl	2000b372 <USBD_CtlSendStatus>
      break;
2000afac:	e00c      	b.n	2000afc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
2000afae:	6839      	ldr	r1, [r7, #0]
2000afb0:	6878      	ldr	r0, [r7, #4]
2000afb2:	f000 f900 	bl	2000b1b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
2000afb6:	4b07      	ldr	r3, [pc, #28]	@ (2000afd4 <USBD_SetConfig+0x150>)
2000afb8:	781b      	ldrb	r3, [r3, #0]
2000afba:	4619      	mov	r1, r3
2000afbc:	6878      	ldr	r0, [r7, #4]
2000afbe:	f7fe ff50 	bl	20009e62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
2000afc2:	2303      	movs	r3, #3
2000afc4:	73fb      	strb	r3, [r7, #15]
      break;
2000afc6:	bf00      	nop
  }

  return ret;
2000afc8:	7bfb      	ldrb	r3, [r7, #15]
}
2000afca:	4618      	mov	r0, r3
2000afcc:	3710      	adds	r7, #16
2000afce:	46bd      	mov	sp, r7
2000afd0:	bd80      	pop	{r7, pc}
2000afd2:	bf00      	nop
2000afd4:	2000d378 	.word	0x2000d378

2000afd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000afd8:	b580      	push	{r7, lr}
2000afda:	b082      	sub	sp, #8
2000afdc:	af00      	add	r7, sp, #0
2000afde:	6078      	str	r0, [r7, #4]
2000afe0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
2000afe2:	683b      	ldr	r3, [r7, #0]
2000afe4:	88db      	ldrh	r3, [r3, #6]
2000afe6:	2b01      	cmp	r3, #1
2000afe8:	d004      	beq.n	2000aff4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
2000afea:	6839      	ldr	r1, [r7, #0]
2000afec:	6878      	ldr	r0, [r7, #4]
2000afee:	f000 f8e2 	bl	2000b1b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
2000aff2:	e023      	b.n	2000b03c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
2000aff4:	687b      	ldr	r3, [r7, #4]
2000aff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000affa:	b2db      	uxtb	r3, r3
2000affc:	2b02      	cmp	r3, #2
2000affe:	dc02      	bgt.n	2000b006 <USBD_GetConfig+0x2e>
2000b000:	2b00      	cmp	r3, #0
2000b002:	dc03      	bgt.n	2000b00c <USBD_GetConfig+0x34>
2000b004:	e015      	b.n	2000b032 <USBD_GetConfig+0x5a>
2000b006:	2b03      	cmp	r3, #3
2000b008:	d00b      	beq.n	2000b022 <USBD_GetConfig+0x4a>
2000b00a:	e012      	b.n	2000b032 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
2000b00c:	687b      	ldr	r3, [r7, #4]
2000b00e:	2200      	movs	r2, #0
2000b010:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
2000b012:	687b      	ldr	r3, [r7, #4]
2000b014:	3308      	adds	r3, #8
2000b016:	2201      	movs	r2, #1
2000b018:	4619      	mov	r1, r3
2000b01a:	6878      	ldr	r0, [r7, #4]
2000b01c:	f000 f948 	bl	2000b2b0 <USBD_CtlSendData>
        break;
2000b020:	e00c      	b.n	2000b03c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
2000b022:	687b      	ldr	r3, [r7, #4]
2000b024:	3304      	adds	r3, #4
2000b026:	2201      	movs	r2, #1
2000b028:	4619      	mov	r1, r3
2000b02a:	6878      	ldr	r0, [r7, #4]
2000b02c:	f000 f940 	bl	2000b2b0 <USBD_CtlSendData>
        break;
2000b030:	e004      	b.n	2000b03c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
2000b032:	6839      	ldr	r1, [r7, #0]
2000b034:	6878      	ldr	r0, [r7, #4]
2000b036:	f000 f8be 	bl	2000b1b6 <USBD_CtlError>
        break;
2000b03a:	bf00      	nop
}
2000b03c:	bf00      	nop
2000b03e:	3708      	adds	r7, #8
2000b040:	46bd      	mov	sp, r7
2000b042:	bd80      	pop	{r7, pc}

2000b044 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b044:	b580      	push	{r7, lr}
2000b046:	b082      	sub	sp, #8
2000b048:	af00      	add	r7, sp, #0
2000b04a:	6078      	str	r0, [r7, #4]
2000b04c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000b04e:	687b      	ldr	r3, [r7, #4]
2000b050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b054:	b2db      	uxtb	r3, r3
2000b056:	3b01      	subs	r3, #1
2000b058:	2b02      	cmp	r3, #2
2000b05a:	d81e      	bhi.n	2000b09a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
2000b05c:	683b      	ldr	r3, [r7, #0]
2000b05e:	88db      	ldrh	r3, [r3, #6]
2000b060:	2b02      	cmp	r3, #2
2000b062:	d004      	beq.n	2000b06e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
2000b064:	6839      	ldr	r1, [r7, #0]
2000b066:	6878      	ldr	r0, [r7, #4]
2000b068:	f000 f8a5 	bl	2000b1b6 <USBD_CtlError>
        break;
2000b06c:	e01a      	b.n	2000b0a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
2000b06e:	687b      	ldr	r3, [r7, #4]
2000b070:	2201      	movs	r2, #1
2000b072:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
2000b074:	687b      	ldr	r3, [r7, #4]
2000b076:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
2000b07a:	2b00      	cmp	r3, #0
2000b07c:	d005      	beq.n	2000b08a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
2000b07e:	687b      	ldr	r3, [r7, #4]
2000b080:	68db      	ldr	r3, [r3, #12]
2000b082:	f043 0202 	orr.w	r2, r3, #2
2000b086:	687b      	ldr	r3, [r7, #4]
2000b088:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
2000b08a:	687b      	ldr	r3, [r7, #4]
2000b08c:	330c      	adds	r3, #12
2000b08e:	2202      	movs	r2, #2
2000b090:	4619      	mov	r1, r3
2000b092:	6878      	ldr	r0, [r7, #4]
2000b094:	f000 f90c 	bl	2000b2b0 <USBD_CtlSendData>
      break;
2000b098:	e004      	b.n	2000b0a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
2000b09a:	6839      	ldr	r1, [r7, #0]
2000b09c:	6878      	ldr	r0, [r7, #4]
2000b09e:	f000 f88a 	bl	2000b1b6 <USBD_CtlError>
      break;
2000b0a2:	bf00      	nop
  }
}
2000b0a4:	bf00      	nop
2000b0a6:	3708      	adds	r7, #8
2000b0a8:	46bd      	mov	sp, r7
2000b0aa:	bd80      	pop	{r7, pc}

2000b0ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b0ac:	b580      	push	{r7, lr}
2000b0ae:	b082      	sub	sp, #8
2000b0b0:	af00      	add	r7, sp, #0
2000b0b2:	6078      	str	r0, [r7, #4]
2000b0b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000b0b6:	683b      	ldr	r3, [r7, #0]
2000b0b8:	885b      	ldrh	r3, [r3, #2]
2000b0ba:	2b01      	cmp	r3, #1
2000b0bc:	d107      	bne.n	2000b0ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
2000b0be:	687b      	ldr	r3, [r7, #4]
2000b0c0:	2201      	movs	r2, #1
2000b0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
2000b0c6:	6878      	ldr	r0, [r7, #4]
2000b0c8:	f000 f953 	bl	2000b372 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
2000b0cc:	e013      	b.n	2000b0f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
2000b0ce:	683b      	ldr	r3, [r7, #0]
2000b0d0:	885b      	ldrh	r3, [r3, #2]
2000b0d2:	2b02      	cmp	r3, #2
2000b0d4:	d10b      	bne.n	2000b0ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
2000b0d6:	683b      	ldr	r3, [r7, #0]
2000b0d8:	889b      	ldrh	r3, [r3, #4]
2000b0da:	0a1b      	lsrs	r3, r3, #8
2000b0dc:	b29b      	uxth	r3, r3
2000b0de:	b2da      	uxtb	r2, r3
2000b0e0:	687b      	ldr	r3, [r7, #4]
2000b0e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
2000b0e6:	6878      	ldr	r0, [r7, #4]
2000b0e8:	f000 f943 	bl	2000b372 <USBD_CtlSendStatus>
}
2000b0ec:	e003      	b.n	2000b0f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
2000b0ee:	6839      	ldr	r1, [r7, #0]
2000b0f0:	6878      	ldr	r0, [r7, #4]
2000b0f2:	f000 f860 	bl	2000b1b6 <USBD_CtlError>
}
2000b0f6:	bf00      	nop
2000b0f8:	3708      	adds	r7, #8
2000b0fa:	46bd      	mov	sp, r7
2000b0fc:	bd80      	pop	{r7, pc}

2000b0fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b0fe:	b580      	push	{r7, lr}
2000b100:	b082      	sub	sp, #8
2000b102:	af00      	add	r7, sp, #0
2000b104:	6078      	str	r0, [r7, #4]
2000b106:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
2000b108:	687b      	ldr	r3, [r7, #4]
2000b10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
2000b10e:	b2db      	uxtb	r3, r3
2000b110:	3b01      	subs	r3, #1
2000b112:	2b02      	cmp	r3, #2
2000b114:	d80b      	bhi.n	2000b12e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
2000b116:	683b      	ldr	r3, [r7, #0]
2000b118:	885b      	ldrh	r3, [r3, #2]
2000b11a:	2b01      	cmp	r3, #1
2000b11c:	d10c      	bne.n	2000b138 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
2000b11e:	687b      	ldr	r3, [r7, #4]
2000b120:	2200      	movs	r2, #0
2000b122:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
2000b126:	6878      	ldr	r0, [r7, #4]
2000b128:	f000 f923 	bl	2000b372 <USBD_CtlSendStatus>
      }
      break;
2000b12c:	e004      	b.n	2000b138 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
2000b12e:	6839      	ldr	r1, [r7, #0]
2000b130:	6878      	ldr	r0, [r7, #4]
2000b132:	f000 f840 	bl	2000b1b6 <USBD_CtlError>
      break;
2000b136:	e000      	b.n	2000b13a <USBD_ClrFeature+0x3c>
      break;
2000b138:	bf00      	nop
  }
}
2000b13a:	bf00      	nop
2000b13c:	3708      	adds	r7, #8
2000b13e:	46bd      	mov	sp, r7
2000b140:	bd80      	pop	{r7, pc}

2000b142 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
2000b142:	b580      	push	{r7, lr}
2000b144:	b084      	sub	sp, #16
2000b146:	af00      	add	r7, sp, #0
2000b148:	6078      	str	r0, [r7, #4]
2000b14a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
2000b14c:	683b      	ldr	r3, [r7, #0]
2000b14e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
2000b150:	68fb      	ldr	r3, [r7, #12]
2000b152:	781a      	ldrb	r2, [r3, #0]
2000b154:	687b      	ldr	r3, [r7, #4]
2000b156:	701a      	strb	r2, [r3, #0]

  pbuff++;
2000b158:	68fb      	ldr	r3, [r7, #12]
2000b15a:	3301      	adds	r3, #1
2000b15c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
2000b15e:	68fb      	ldr	r3, [r7, #12]
2000b160:	781a      	ldrb	r2, [r3, #0]
2000b162:	687b      	ldr	r3, [r7, #4]
2000b164:	705a      	strb	r2, [r3, #1]

  pbuff++;
2000b166:	68fb      	ldr	r3, [r7, #12]
2000b168:	3301      	adds	r3, #1
2000b16a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
2000b16c:	68f8      	ldr	r0, [r7, #12]
2000b16e:	f7ff fa15 	bl	2000a59c <SWAPBYTE>
2000b172:	4603      	mov	r3, r0
2000b174:	461a      	mov	r2, r3
2000b176:	687b      	ldr	r3, [r7, #4]
2000b178:	805a      	strh	r2, [r3, #2]

  pbuff++;
2000b17a:	68fb      	ldr	r3, [r7, #12]
2000b17c:	3301      	adds	r3, #1
2000b17e:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000b180:	68fb      	ldr	r3, [r7, #12]
2000b182:	3301      	adds	r3, #1
2000b184:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
2000b186:	68f8      	ldr	r0, [r7, #12]
2000b188:	f7ff fa08 	bl	2000a59c <SWAPBYTE>
2000b18c:	4603      	mov	r3, r0
2000b18e:	461a      	mov	r2, r3
2000b190:	687b      	ldr	r3, [r7, #4]
2000b192:	809a      	strh	r2, [r3, #4]

  pbuff++;
2000b194:	68fb      	ldr	r3, [r7, #12]
2000b196:	3301      	adds	r3, #1
2000b198:	60fb      	str	r3, [r7, #12]
  pbuff++;
2000b19a:	68fb      	ldr	r3, [r7, #12]
2000b19c:	3301      	adds	r3, #1
2000b19e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
2000b1a0:	68f8      	ldr	r0, [r7, #12]
2000b1a2:	f7ff f9fb 	bl	2000a59c <SWAPBYTE>
2000b1a6:	4603      	mov	r3, r0
2000b1a8:	461a      	mov	r2, r3
2000b1aa:	687b      	ldr	r3, [r7, #4]
2000b1ac:	80da      	strh	r2, [r3, #6]
}
2000b1ae:	bf00      	nop
2000b1b0:	3710      	adds	r7, #16
2000b1b2:	46bd      	mov	sp, r7
2000b1b4:	bd80      	pop	{r7, pc}

2000b1b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000b1b6:	b580      	push	{r7, lr}
2000b1b8:	b082      	sub	sp, #8
2000b1ba:	af00      	add	r7, sp, #0
2000b1bc:	6078      	str	r0, [r7, #4]
2000b1be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
2000b1c0:	2180      	movs	r1, #128	@ 0x80
2000b1c2:	6878      	ldr	r0, [r7, #4]
2000b1c4:	f000 fc96 	bl	2000baf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
2000b1c8:	2100      	movs	r1, #0
2000b1ca:	6878      	ldr	r0, [r7, #4]
2000b1cc:	f000 fc92 	bl	2000baf4 <USBD_LL_StallEP>
}
2000b1d0:	bf00      	nop
2000b1d2:	3708      	adds	r7, #8
2000b1d4:	46bd      	mov	sp, r7
2000b1d6:	bd80      	pop	{r7, pc}

2000b1d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
2000b1d8:	b580      	push	{r7, lr}
2000b1da:	b086      	sub	sp, #24
2000b1dc:	af00      	add	r7, sp, #0
2000b1de:	60f8      	str	r0, [r7, #12]
2000b1e0:	60b9      	str	r1, [r7, #8]
2000b1e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
2000b1e4:	2300      	movs	r3, #0
2000b1e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
2000b1e8:	68fb      	ldr	r3, [r7, #12]
2000b1ea:	2b00      	cmp	r3, #0
2000b1ec:	d042      	beq.n	2000b274 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
2000b1ee:	68fb      	ldr	r3, [r7, #12]
2000b1f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
2000b1f2:	6938      	ldr	r0, [r7, #16]
2000b1f4:	f000 f842 	bl	2000b27c <USBD_GetLen>
2000b1f8:	4603      	mov	r3, r0
2000b1fa:	3301      	adds	r3, #1
2000b1fc:	005b      	lsls	r3, r3, #1
2000b1fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2000b202:	d808      	bhi.n	2000b216 <USBD_GetString+0x3e>
2000b204:	6938      	ldr	r0, [r7, #16]
2000b206:	f000 f839 	bl	2000b27c <USBD_GetLen>
2000b20a:	4603      	mov	r3, r0
2000b20c:	3301      	adds	r3, #1
2000b20e:	b29b      	uxth	r3, r3
2000b210:	005b      	lsls	r3, r3, #1
2000b212:	b29a      	uxth	r2, r3
2000b214:	e001      	b.n	2000b21a <USBD_GetString+0x42>
2000b216:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000b21a:	687b      	ldr	r3, [r7, #4]
2000b21c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
2000b21e:	7dfb      	ldrb	r3, [r7, #23]
2000b220:	68ba      	ldr	r2, [r7, #8]
2000b222:	4413      	add	r3, r2
2000b224:	687a      	ldr	r2, [r7, #4]
2000b226:	7812      	ldrb	r2, [r2, #0]
2000b228:	701a      	strb	r2, [r3, #0]
  idx++;
2000b22a:	7dfb      	ldrb	r3, [r7, #23]
2000b22c:	3301      	adds	r3, #1
2000b22e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
2000b230:	7dfb      	ldrb	r3, [r7, #23]
2000b232:	68ba      	ldr	r2, [r7, #8]
2000b234:	4413      	add	r3, r2
2000b236:	2203      	movs	r2, #3
2000b238:	701a      	strb	r2, [r3, #0]
  idx++;
2000b23a:	7dfb      	ldrb	r3, [r7, #23]
2000b23c:	3301      	adds	r3, #1
2000b23e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
2000b240:	e013      	b.n	2000b26a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
2000b242:	7dfb      	ldrb	r3, [r7, #23]
2000b244:	68ba      	ldr	r2, [r7, #8]
2000b246:	4413      	add	r3, r2
2000b248:	693a      	ldr	r2, [r7, #16]
2000b24a:	7812      	ldrb	r2, [r2, #0]
2000b24c:	701a      	strb	r2, [r3, #0]
    pdesc++;
2000b24e:	693b      	ldr	r3, [r7, #16]
2000b250:	3301      	adds	r3, #1
2000b252:	613b      	str	r3, [r7, #16]
    idx++;
2000b254:	7dfb      	ldrb	r3, [r7, #23]
2000b256:	3301      	adds	r3, #1
2000b258:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
2000b25a:	7dfb      	ldrb	r3, [r7, #23]
2000b25c:	68ba      	ldr	r2, [r7, #8]
2000b25e:	4413      	add	r3, r2
2000b260:	2200      	movs	r2, #0
2000b262:	701a      	strb	r2, [r3, #0]
    idx++;
2000b264:	7dfb      	ldrb	r3, [r7, #23]
2000b266:	3301      	adds	r3, #1
2000b268:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
2000b26a:	693b      	ldr	r3, [r7, #16]
2000b26c:	781b      	ldrb	r3, [r3, #0]
2000b26e:	2b00      	cmp	r3, #0
2000b270:	d1e7      	bne.n	2000b242 <USBD_GetString+0x6a>
2000b272:	e000      	b.n	2000b276 <USBD_GetString+0x9e>
    return;
2000b274:	bf00      	nop
  }
}
2000b276:	3718      	adds	r7, #24
2000b278:	46bd      	mov	sp, r7
2000b27a:	bd80      	pop	{r7, pc}

2000b27c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
2000b27c:	b480      	push	{r7}
2000b27e:	b085      	sub	sp, #20
2000b280:	af00      	add	r7, sp, #0
2000b282:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
2000b284:	2300      	movs	r3, #0
2000b286:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
2000b288:	687b      	ldr	r3, [r7, #4]
2000b28a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
2000b28c:	e005      	b.n	2000b29a <USBD_GetLen+0x1e>
  {
    len++;
2000b28e:	7bfb      	ldrb	r3, [r7, #15]
2000b290:	3301      	adds	r3, #1
2000b292:	73fb      	strb	r3, [r7, #15]
    pbuff++;
2000b294:	68bb      	ldr	r3, [r7, #8]
2000b296:	3301      	adds	r3, #1
2000b298:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
2000b29a:	68bb      	ldr	r3, [r7, #8]
2000b29c:	781b      	ldrb	r3, [r3, #0]
2000b29e:	2b00      	cmp	r3, #0
2000b2a0:	d1f5      	bne.n	2000b28e <USBD_GetLen+0x12>
  }

  return len;
2000b2a2:	7bfb      	ldrb	r3, [r7, #15]
}
2000b2a4:	4618      	mov	r0, r3
2000b2a6:	3714      	adds	r7, #20
2000b2a8:	46bd      	mov	sp, r7
2000b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b2ae:	4770      	bx	lr

2000b2b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
2000b2b0:	b580      	push	{r7, lr}
2000b2b2:	b084      	sub	sp, #16
2000b2b4:	af00      	add	r7, sp, #0
2000b2b6:	60f8      	str	r0, [r7, #12]
2000b2b8:	60b9      	str	r1, [r7, #8]
2000b2ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
2000b2bc:	68fb      	ldr	r3, [r7, #12]
2000b2be:	2202      	movs	r2, #2
2000b2c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
2000b2c4:	68fb      	ldr	r3, [r7, #12]
2000b2c6:	687a      	ldr	r2, [r7, #4]
2000b2c8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
2000b2ca:	68fb      	ldr	r3, [r7, #12]
2000b2cc:	68ba      	ldr	r2, [r7, #8]
2000b2ce:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
2000b2d0:	68fb      	ldr	r3, [r7, #12]
2000b2d2:	687a      	ldr	r2, [r7, #4]
2000b2d4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000b2d6:	687b      	ldr	r3, [r7, #4]
2000b2d8:	68ba      	ldr	r2, [r7, #8]
2000b2da:	2100      	movs	r1, #0
2000b2dc:	68f8      	ldr	r0, [r7, #12]
2000b2de:	f000 fc92 	bl	2000bc06 <USBD_LL_Transmit>

  return USBD_OK;
2000b2e2:	2300      	movs	r3, #0
}
2000b2e4:	4618      	mov	r0, r3
2000b2e6:	3710      	adds	r7, #16
2000b2e8:	46bd      	mov	sp, r7
2000b2ea:	bd80      	pop	{r7, pc}

2000b2ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
2000b2ec:	b580      	push	{r7, lr}
2000b2ee:	b084      	sub	sp, #16
2000b2f0:	af00      	add	r7, sp, #0
2000b2f2:	60f8      	str	r0, [r7, #12]
2000b2f4:	60b9      	str	r1, [r7, #8]
2000b2f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
2000b2f8:	687b      	ldr	r3, [r7, #4]
2000b2fa:	68ba      	ldr	r2, [r7, #8]
2000b2fc:	2100      	movs	r1, #0
2000b2fe:	68f8      	ldr	r0, [r7, #12]
2000b300:	f000 fc81 	bl	2000bc06 <USBD_LL_Transmit>

  return USBD_OK;
2000b304:	2300      	movs	r3, #0
}
2000b306:	4618      	mov	r0, r3
2000b308:	3710      	adds	r7, #16
2000b30a:	46bd      	mov	sp, r7
2000b30c:	bd80      	pop	{r7, pc}

2000b30e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
2000b30e:	b580      	push	{r7, lr}
2000b310:	b084      	sub	sp, #16
2000b312:	af00      	add	r7, sp, #0
2000b314:	60f8      	str	r0, [r7, #12]
2000b316:	60b9      	str	r1, [r7, #8]
2000b318:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
2000b31a:	68fb      	ldr	r3, [r7, #12]
2000b31c:	2203      	movs	r2, #3
2000b31e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
2000b322:	68fb      	ldr	r3, [r7, #12]
2000b324:	687a      	ldr	r2, [r7, #4]
2000b326:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
2000b32a:	68fb      	ldr	r3, [r7, #12]
2000b32c:	68ba      	ldr	r2, [r7, #8]
2000b32e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
2000b332:	68fb      	ldr	r3, [r7, #12]
2000b334:	687a      	ldr	r2, [r7, #4]
2000b336:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000b33a:	687b      	ldr	r3, [r7, #4]
2000b33c:	68ba      	ldr	r2, [r7, #8]
2000b33e:	2100      	movs	r1, #0
2000b340:	68f8      	ldr	r0, [r7, #12]
2000b342:	f000 fc81 	bl	2000bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000b346:	2300      	movs	r3, #0
}
2000b348:	4618      	mov	r0, r3
2000b34a:	3710      	adds	r7, #16
2000b34c:	46bd      	mov	sp, r7
2000b34e:	bd80      	pop	{r7, pc}

2000b350 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
2000b350:	b580      	push	{r7, lr}
2000b352:	b084      	sub	sp, #16
2000b354:	af00      	add	r7, sp, #0
2000b356:	60f8      	str	r0, [r7, #12]
2000b358:	60b9      	str	r1, [r7, #8]
2000b35a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
2000b35c:	687b      	ldr	r3, [r7, #4]
2000b35e:	68ba      	ldr	r2, [r7, #8]
2000b360:	2100      	movs	r1, #0
2000b362:	68f8      	ldr	r0, [r7, #12]
2000b364:	f000 fc70 	bl	2000bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000b368:	2300      	movs	r3, #0
}
2000b36a:	4618      	mov	r0, r3
2000b36c:	3710      	adds	r7, #16
2000b36e:	46bd      	mov	sp, r7
2000b370:	bd80      	pop	{r7, pc}

2000b372 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
2000b372:	b580      	push	{r7, lr}
2000b374:	b082      	sub	sp, #8
2000b376:	af00      	add	r7, sp, #0
2000b378:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
2000b37a:	687b      	ldr	r3, [r7, #4]
2000b37c:	2204      	movs	r2, #4
2000b37e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
2000b382:	2300      	movs	r3, #0
2000b384:	2200      	movs	r2, #0
2000b386:	2100      	movs	r1, #0
2000b388:	6878      	ldr	r0, [r7, #4]
2000b38a:	f000 fc3c 	bl	2000bc06 <USBD_LL_Transmit>

  return USBD_OK;
2000b38e:	2300      	movs	r3, #0
}
2000b390:	4618      	mov	r0, r3
2000b392:	3708      	adds	r7, #8
2000b394:	46bd      	mov	sp, r7
2000b396:	bd80      	pop	{r7, pc}

2000b398 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
2000b398:	b580      	push	{r7, lr}
2000b39a:	b082      	sub	sp, #8
2000b39c:	af00      	add	r7, sp, #0
2000b39e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
2000b3a0:	687b      	ldr	r3, [r7, #4]
2000b3a2:	2205      	movs	r2, #5
2000b3a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
2000b3a8:	2300      	movs	r3, #0
2000b3aa:	2200      	movs	r2, #0
2000b3ac:	2100      	movs	r1, #0
2000b3ae:	6878      	ldr	r0, [r7, #4]
2000b3b0:	f000 fc4a 	bl	2000bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
2000b3b4:	2300      	movs	r3, #0
}
2000b3b6:	4618      	mov	r0, r3
2000b3b8:	3708      	adds	r7, #8
2000b3ba:	46bd      	mov	sp, r7
2000b3bc:	bd80      	pop	{r7, pc}
	...

2000b3c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
2000b3c0:	b580      	push	{r7, lr}
2000b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
2000b3c4:	2200      	movs	r2, #0
2000b3c6:	4912      	ldr	r1, [pc, #72]	@ (2000b410 <MX_USB_DEVICE_Init+0x50>)
2000b3c8:	4812      	ldr	r0, [pc, #72]	@ (2000b414 <MX_USB_DEVICE_Init+0x54>)
2000b3ca:	f7fe fcb1 	bl	20009d30 <USBD_Init>
2000b3ce:	4603      	mov	r3, r0
2000b3d0:	2b00      	cmp	r3, #0
2000b3d2:	d001      	beq.n	2000b3d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
2000b3d4:	f7f8 fb64 	bl	20003aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
2000b3d8:	490f      	ldr	r1, [pc, #60]	@ (2000b418 <MX_USB_DEVICE_Init+0x58>)
2000b3da:	480e      	ldr	r0, [pc, #56]	@ (2000b414 <MX_USB_DEVICE_Init+0x54>)
2000b3dc:	f7fe fcd8 	bl	20009d90 <USBD_RegisterClass>
2000b3e0:	4603      	mov	r3, r0
2000b3e2:	2b00      	cmp	r3, #0
2000b3e4:	d001      	beq.n	2000b3ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
2000b3e6:	f7f8 fb5b 	bl	20003aa0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
2000b3ea:	490c      	ldr	r1, [pc, #48]	@ (2000b41c <MX_USB_DEVICE_Init+0x5c>)
2000b3ec:	4809      	ldr	r0, [pc, #36]	@ (2000b414 <MX_USB_DEVICE_Init+0x54>)
2000b3ee:	f7fe fc85 	bl	20009cfc <USBD_CUSTOM_HID_RegisterInterface>
2000b3f2:	4603      	mov	r3, r0
2000b3f4:	2b00      	cmp	r3, #0
2000b3f6:	d001      	beq.n	2000b3fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
2000b3f8:	f7f8 fb52 	bl	20003aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
2000b3fc:	4805      	ldr	r0, [pc, #20]	@ (2000b414 <MX_USB_DEVICE_Init+0x54>)
2000b3fe:	f7fe fcfd 	bl	20009dfc <USBD_Start>
2000b402:	4603      	mov	r3, r0
2000b404:	2b00      	cmp	r3, #0
2000b406:	d001      	beq.n	2000b40c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
2000b408:	f7f8 fb4a 	bl	20003aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
2000b40c:	bf00      	nop
2000b40e:	bd80      	pop	{r7, pc}
2000b410:	2000c1c4 	.word	0x2000c1c4
2000b414:	2000d37c 	.word	0x2000d37c
2000b418:	2000c0f8 	.word	0x2000c0f8
2000b41c:	2000c1b4 	.word	0x2000c1b4

2000b420 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
2000b420:	b480      	push	{r7}
2000b422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
2000b424:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
2000b426:	4618      	mov	r0, r3
2000b428:	46bd      	mov	sp, r7
2000b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b42e:	4770      	bx	lr

2000b430 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
2000b430:	b480      	push	{r7}
2000b432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
2000b434:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
2000b436:	4618      	mov	r0, r3
2000b438:	46bd      	mov	sp, r7
2000b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b43e:	4770      	bx	lr

2000b440 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
2000b440:	b580      	push	{r7, lr}
2000b442:	b082      	sub	sp, #8
2000b444:	af00      	add	r7, sp, #0
2000b446:	4603      	mov	r3, r0
2000b448:	460a      	mov	r2, r1
2000b44a:	71fb      	strb	r3, [r7, #7]
2000b44c:	4613      	mov	r3, r2
2000b44e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
2000b450:	4806      	ldr	r0, [pc, #24]	@ (2000b46c <CUSTOM_HID_OutEvent_FS+0x2c>)
2000b452:	f7fe fbdd 	bl	20009c10 <USBD_CUSTOM_HID_ReceivePacket>
2000b456:	4603      	mov	r3, r0
2000b458:	2b00      	cmp	r3, #0
2000b45a:	d002      	beq.n	2000b462 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
2000b45c:	f04f 33ff 	mov.w	r3, #4294967295
2000b460:	e000      	b.n	2000b464 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
2000b462:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
2000b464:	4618      	mov	r0, r3
2000b466:	3708      	adds	r7, #8
2000b468:	46bd      	mov	sp, r7
2000b46a:	bd80      	pop	{r7, pc}
2000b46c:	2000d37c 	.word	0x2000d37c

2000b470 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b470:	b480      	push	{r7}
2000b472:	b083      	sub	sp, #12
2000b474:	af00      	add	r7, sp, #0
2000b476:	4603      	mov	r3, r0
2000b478:	6039      	str	r1, [r7, #0]
2000b47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
2000b47c:	683b      	ldr	r3, [r7, #0]
2000b47e:	2212      	movs	r2, #18
2000b480:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
2000b482:	4b03      	ldr	r3, [pc, #12]	@ (2000b490 <USBD_FS_DeviceDescriptor+0x20>)
}
2000b484:	4618      	mov	r0, r3
2000b486:	370c      	adds	r7, #12
2000b488:	46bd      	mov	sp, r7
2000b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b48e:	4770      	bx	lr
2000b490:	2000c1e4 	.word	0x2000c1e4

2000b494 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b494:	b480      	push	{r7}
2000b496:	b083      	sub	sp, #12
2000b498:	af00      	add	r7, sp, #0
2000b49a:	4603      	mov	r3, r0
2000b49c:	6039      	str	r1, [r7, #0]
2000b49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
2000b4a0:	683b      	ldr	r3, [r7, #0]
2000b4a2:	2204      	movs	r2, #4
2000b4a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
2000b4a6:	4b03      	ldr	r3, [pc, #12]	@ (2000b4b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
2000b4a8:	4618      	mov	r0, r3
2000b4aa:	370c      	adds	r7, #12
2000b4ac:	46bd      	mov	sp, r7
2000b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b4b2:	4770      	bx	lr
2000b4b4:	2000c204 	.word	0x2000c204

2000b4b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b4b8:	b580      	push	{r7, lr}
2000b4ba:	b082      	sub	sp, #8
2000b4bc:	af00      	add	r7, sp, #0
2000b4be:	4603      	mov	r3, r0
2000b4c0:	6039      	str	r1, [r7, #0]
2000b4c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000b4c4:	79fb      	ldrb	r3, [r7, #7]
2000b4c6:	2b00      	cmp	r3, #0
2000b4c8:	d105      	bne.n	2000b4d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000b4ca:	683a      	ldr	r2, [r7, #0]
2000b4cc:	4907      	ldr	r1, [pc, #28]	@ (2000b4ec <USBD_FS_ProductStrDescriptor+0x34>)
2000b4ce:	4808      	ldr	r0, [pc, #32]	@ (2000b4f0 <USBD_FS_ProductStrDescriptor+0x38>)
2000b4d0:	f7ff fe82 	bl	2000b1d8 <USBD_GetString>
2000b4d4:	e004      	b.n	2000b4e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
2000b4d6:	683a      	ldr	r2, [r7, #0]
2000b4d8:	4904      	ldr	r1, [pc, #16]	@ (2000b4ec <USBD_FS_ProductStrDescriptor+0x34>)
2000b4da:	4805      	ldr	r0, [pc, #20]	@ (2000b4f0 <USBD_FS_ProductStrDescriptor+0x38>)
2000b4dc:	f7ff fe7c 	bl	2000b1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
2000b4e0:	4b02      	ldr	r3, [pc, #8]	@ (2000b4ec <USBD_FS_ProductStrDescriptor+0x34>)
}
2000b4e2:	4618      	mov	r0, r3
2000b4e4:	3708      	adds	r7, #8
2000b4e6:	46bd      	mov	sp, r7
2000b4e8:	bd80      	pop	{r7, pc}
2000b4ea:	bf00      	nop
2000b4ec:	2000d658 	.word	0x2000d658
2000b4f0:	2000c07c 	.word	0x2000c07c

2000b4f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b4f4:	b580      	push	{r7, lr}
2000b4f6:	b082      	sub	sp, #8
2000b4f8:	af00      	add	r7, sp, #0
2000b4fa:	4603      	mov	r3, r0
2000b4fc:	6039      	str	r1, [r7, #0]
2000b4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
2000b500:	683a      	ldr	r2, [r7, #0]
2000b502:	4904      	ldr	r1, [pc, #16]	@ (2000b514 <USBD_FS_ManufacturerStrDescriptor+0x20>)
2000b504:	4804      	ldr	r0, [pc, #16]	@ (2000b518 <USBD_FS_ManufacturerStrDescriptor+0x24>)
2000b506:	f7ff fe67 	bl	2000b1d8 <USBD_GetString>
  return USBD_StrDesc;
2000b50a:	4b02      	ldr	r3, [pc, #8]	@ (2000b514 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
2000b50c:	4618      	mov	r0, r3
2000b50e:	3708      	adds	r7, #8
2000b510:	46bd      	mov	sp, r7
2000b512:	bd80      	pop	{r7, pc}
2000b514:	2000d658 	.word	0x2000d658
2000b518:	2000c090 	.word	0x2000c090

2000b51c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b51c:	b580      	push	{r7, lr}
2000b51e:	b082      	sub	sp, #8
2000b520:	af00      	add	r7, sp, #0
2000b522:	4603      	mov	r3, r0
2000b524:	6039      	str	r1, [r7, #0]
2000b526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
2000b528:	683b      	ldr	r3, [r7, #0]
2000b52a:	221a      	movs	r2, #26
2000b52c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
2000b52e:	f000 f855 	bl	2000b5dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
2000b532:	4b02      	ldr	r3, [pc, #8]	@ (2000b53c <USBD_FS_SerialStrDescriptor+0x20>)
}
2000b534:	4618      	mov	r0, r3
2000b536:	3708      	adds	r7, #8
2000b538:	46bd      	mov	sp, r7
2000b53a:	bd80      	pop	{r7, pc}
2000b53c:	2000c208 	.word	0x2000c208

2000b540 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b540:	b580      	push	{r7, lr}
2000b542:	b082      	sub	sp, #8
2000b544:	af00      	add	r7, sp, #0
2000b546:	4603      	mov	r3, r0
2000b548:	6039      	str	r1, [r7, #0]
2000b54a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
2000b54c:	79fb      	ldrb	r3, [r7, #7]
2000b54e:	2b00      	cmp	r3, #0
2000b550:	d105      	bne.n	2000b55e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000b552:	683a      	ldr	r2, [r7, #0]
2000b554:	4907      	ldr	r1, [pc, #28]	@ (2000b574 <USBD_FS_ConfigStrDescriptor+0x34>)
2000b556:	4808      	ldr	r0, [pc, #32]	@ (2000b578 <USBD_FS_ConfigStrDescriptor+0x38>)
2000b558:	f7ff fe3e 	bl	2000b1d8 <USBD_GetString>
2000b55c:	e004      	b.n	2000b568 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000b55e:	683a      	ldr	r2, [r7, #0]
2000b560:	4904      	ldr	r1, [pc, #16]	@ (2000b574 <USBD_FS_ConfigStrDescriptor+0x34>)
2000b562:	4805      	ldr	r0, [pc, #20]	@ (2000b578 <USBD_FS_ConfigStrDescriptor+0x38>)
2000b564:	f7ff fe38 	bl	2000b1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
2000b568:	4b02      	ldr	r3, [pc, #8]	@ (2000b574 <USBD_FS_ConfigStrDescriptor+0x34>)
}
2000b56a:	4618      	mov	r0, r3
2000b56c:	3708      	adds	r7, #8
2000b56e:	46bd      	mov	sp, r7
2000b570:	bd80      	pop	{r7, pc}
2000b572:	bf00      	nop
2000b574:	2000d658 	.word	0x2000d658
2000b578:	2000c0a4 	.word	0x2000c0a4

2000b57c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b57c:	b580      	push	{r7, lr}
2000b57e:	b082      	sub	sp, #8
2000b580:	af00      	add	r7, sp, #0
2000b582:	4603      	mov	r3, r0
2000b584:	6039      	str	r1, [r7, #0]
2000b586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
2000b588:	79fb      	ldrb	r3, [r7, #7]
2000b58a:	2b00      	cmp	r3, #0
2000b58c:	d105      	bne.n	2000b59a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000b58e:	683a      	ldr	r2, [r7, #0]
2000b590:	4907      	ldr	r1, [pc, #28]	@ (2000b5b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
2000b592:	4808      	ldr	r0, [pc, #32]	@ (2000b5b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000b594:	f7ff fe20 	bl	2000b1d8 <USBD_GetString>
2000b598:	e004      	b.n	2000b5a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
2000b59a:	683a      	ldr	r2, [r7, #0]
2000b59c:	4904      	ldr	r1, [pc, #16]	@ (2000b5b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
2000b59e:	4805      	ldr	r0, [pc, #20]	@ (2000b5b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
2000b5a0:	f7ff fe1a 	bl	2000b1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
2000b5a4:	4b02      	ldr	r3, [pc, #8]	@ (2000b5b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
2000b5a6:	4618      	mov	r0, r3
2000b5a8:	3708      	adds	r7, #8
2000b5aa:	46bd      	mov	sp, r7
2000b5ac:	bd80      	pop	{r7, pc}
2000b5ae:	bf00      	nop
2000b5b0:	2000d658 	.word	0x2000d658
2000b5b4:	2000c0a4 	.word	0x2000c0a4

2000b5b8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
2000b5b8:	b480      	push	{r7}
2000b5ba:	b083      	sub	sp, #12
2000b5bc:	af00      	add	r7, sp, #0
2000b5be:	4603      	mov	r3, r0
2000b5c0:	6039      	str	r1, [r7, #0]
2000b5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
2000b5c4:	683b      	ldr	r3, [r7, #0]
2000b5c6:	220c      	movs	r2, #12
2000b5c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
2000b5ca:	4b03      	ldr	r3, [pc, #12]	@ (2000b5d8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
2000b5cc:	4618      	mov	r0, r3
2000b5ce:	370c      	adds	r7, #12
2000b5d0:	46bd      	mov	sp, r7
2000b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b5d6:	4770      	bx	lr
2000b5d8:	2000c1f8 	.word	0x2000c1f8

2000b5dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
2000b5dc:	b580      	push	{r7, lr}
2000b5de:	b084      	sub	sp, #16
2000b5e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
2000b5e2:	4b0f      	ldr	r3, [pc, #60]	@ (2000b620 <Get_SerialNum+0x44>)
2000b5e4:	681b      	ldr	r3, [r3, #0]
2000b5e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
2000b5e8:	4b0e      	ldr	r3, [pc, #56]	@ (2000b624 <Get_SerialNum+0x48>)
2000b5ea:	681b      	ldr	r3, [r3, #0]
2000b5ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
2000b5ee:	4b0e      	ldr	r3, [pc, #56]	@ (2000b628 <Get_SerialNum+0x4c>)
2000b5f0:	681b      	ldr	r3, [r3, #0]
2000b5f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
2000b5f4:	68fa      	ldr	r2, [r7, #12]
2000b5f6:	687b      	ldr	r3, [r7, #4]
2000b5f8:	4413      	add	r3, r2
2000b5fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
2000b5fc:	68fb      	ldr	r3, [r7, #12]
2000b5fe:	2b00      	cmp	r3, #0
2000b600:	d009      	beq.n	2000b616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
2000b602:	2208      	movs	r2, #8
2000b604:	4909      	ldr	r1, [pc, #36]	@ (2000b62c <Get_SerialNum+0x50>)
2000b606:	68f8      	ldr	r0, [r7, #12]
2000b608:	f000 f814 	bl	2000b634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
2000b60c:	2204      	movs	r2, #4
2000b60e:	4908      	ldr	r1, [pc, #32]	@ (2000b630 <Get_SerialNum+0x54>)
2000b610:	68b8      	ldr	r0, [r7, #8]
2000b612:	f000 f80f 	bl	2000b634 <IntToUnicode>
  }
}
2000b616:	bf00      	nop
2000b618:	3710      	adds	r7, #16
2000b61a:	46bd      	mov	sp, r7
2000b61c:	bd80      	pop	{r7, pc}
2000b61e:	bf00      	nop
2000b620:	1ff0f420 	.word	0x1ff0f420
2000b624:	1ff0f424 	.word	0x1ff0f424
2000b628:	1ff0f428 	.word	0x1ff0f428
2000b62c:	2000c20a 	.word	0x2000c20a
2000b630:	2000c21a 	.word	0x2000c21a

2000b634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
2000b634:	b480      	push	{r7}
2000b636:	b087      	sub	sp, #28
2000b638:	af00      	add	r7, sp, #0
2000b63a:	60f8      	str	r0, [r7, #12]
2000b63c:	60b9      	str	r1, [r7, #8]
2000b63e:	4613      	mov	r3, r2
2000b640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
2000b642:	2300      	movs	r3, #0
2000b644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
2000b646:	2300      	movs	r3, #0
2000b648:	75fb      	strb	r3, [r7, #23]
2000b64a:	e027      	b.n	2000b69c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
2000b64c:	68fb      	ldr	r3, [r7, #12]
2000b64e:	0f1b      	lsrs	r3, r3, #28
2000b650:	2b09      	cmp	r3, #9
2000b652:	d80b      	bhi.n	2000b66c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
2000b654:	68fb      	ldr	r3, [r7, #12]
2000b656:	0f1b      	lsrs	r3, r3, #28
2000b658:	b2da      	uxtb	r2, r3
2000b65a:	7dfb      	ldrb	r3, [r7, #23]
2000b65c:	005b      	lsls	r3, r3, #1
2000b65e:	4619      	mov	r1, r3
2000b660:	68bb      	ldr	r3, [r7, #8]
2000b662:	440b      	add	r3, r1
2000b664:	3230      	adds	r2, #48	@ 0x30
2000b666:	b2d2      	uxtb	r2, r2
2000b668:	701a      	strb	r2, [r3, #0]
2000b66a:	e00a      	b.n	2000b682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
2000b66c:	68fb      	ldr	r3, [r7, #12]
2000b66e:	0f1b      	lsrs	r3, r3, #28
2000b670:	b2da      	uxtb	r2, r3
2000b672:	7dfb      	ldrb	r3, [r7, #23]
2000b674:	005b      	lsls	r3, r3, #1
2000b676:	4619      	mov	r1, r3
2000b678:	68bb      	ldr	r3, [r7, #8]
2000b67a:	440b      	add	r3, r1
2000b67c:	3237      	adds	r2, #55	@ 0x37
2000b67e:	b2d2      	uxtb	r2, r2
2000b680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
2000b682:	68fb      	ldr	r3, [r7, #12]
2000b684:	011b      	lsls	r3, r3, #4
2000b686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
2000b688:	7dfb      	ldrb	r3, [r7, #23]
2000b68a:	005b      	lsls	r3, r3, #1
2000b68c:	3301      	adds	r3, #1
2000b68e:	68ba      	ldr	r2, [r7, #8]
2000b690:	4413      	add	r3, r2
2000b692:	2200      	movs	r2, #0
2000b694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
2000b696:	7dfb      	ldrb	r3, [r7, #23]
2000b698:	3301      	adds	r3, #1
2000b69a:	75fb      	strb	r3, [r7, #23]
2000b69c:	7dfa      	ldrb	r2, [r7, #23]
2000b69e:	79fb      	ldrb	r3, [r7, #7]
2000b6a0:	429a      	cmp	r2, r3
2000b6a2:	d3d3      	bcc.n	2000b64c <IntToUnicode+0x18>
  }
}
2000b6a4:	bf00      	nop
2000b6a6:	bf00      	nop
2000b6a8:	371c      	adds	r7, #28
2000b6aa:	46bd      	mov	sp, r7
2000b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b6b0:	4770      	bx	lr
	...

2000b6b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
2000b6b4:	b580      	push	{r7, lr}
2000b6b6:	b0ac      	sub	sp, #176	@ 0xb0
2000b6b8:	af00      	add	r7, sp, #0
2000b6ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000b6bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000b6c0:	2200      	movs	r2, #0
2000b6c2:	601a      	str	r2, [r3, #0]
2000b6c4:	605a      	str	r2, [r3, #4]
2000b6c6:	609a      	str	r2, [r3, #8]
2000b6c8:	60da      	str	r2, [r3, #12]
2000b6ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2000b6cc:	f107 0318 	add.w	r3, r7, #24
2000b6d0:	2284      	movs	r2, #132	@ 0x84
2000b6d2:	2100      	movs	r1, #0
2000b6d4:	4618      	mov	r0, r3
2000b6d6:	f000 fc29 	bl	2000bf2c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
2000b6da:	687b      	ldr	r3, [r7, #4]
2000b6dc:	681b      	ldr	r3, [r3, #0]
2000b6de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2000b6e2:	d161      	bne.n	2000b7a8 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
2000b6e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000b6e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
2000b6ea:	2300      	movs	r3, #0
2000b6ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2000b6f0:	f107 0318 	add.w	r3, r7, #24
2000b6f4:	4618      	mov	r0, r3
2000b6f6:	f7fb facf 	bl	20006c98 <HAL_RCCEx_PeriphCLKConfig>
2000b6fa:	4603      	mov	r3, r0
2000b6fc:	2b00      	cmp	r3, #0
2000b6fe:	d001      	beq.n	2000b704 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
2000b700:	f7f8 f9ce 	bl	20003aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000b704:	4b2a      	ldr	r3, [pc, #168]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000b708:	4a29      	ldr	r2, [pc, #164]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b70a:	f043 0301 	orr.w	r3, r3, #1
2000b70e:	6313      	str	r3, [r2, #48]	@ 0x30
2000b710:	4b27      	ldr	r3, [pc, #156]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000b714:	f003 0301 	and.w	r3, r3, #1
2000b718:	617b      	str	r3, [r7, #20]
2000b71a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
2000b71c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
2000b720:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000b724:	2302      	movs	r3, #2
2000b726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000b72a:	2300      	movs	r3, #0
2000b72c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000b730:	2303      	movs	r3, #3
2000b732:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
2000b736:	230a      	movs	r3, #10
2000b738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000b73c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000b740:	4619      	mov	r1, r3
2000b742:	481c      	ldr	r0, [pc, #112]	@ (2000b7b4 <HAL_PCD_MspInit+0x100>)
2000b744:	f7f9 f914 	bl	20004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
2000b748:	f44f 7300 	mov.w	r3, #512	@ 0x200
2000b74c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
2000b750:	2300      	movs	r3, #0
2000b752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000b756:	2300      	movs	r3, #0
2000b758:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
2000b75c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
2000b760:	4619      	mov	r1, r3
2000b762:	4814      	ldr	r0, [pc, #80]	@ (2000b7b4 <HAL_PCD_MspInit+0x100>)
2000b764:	f7f9 f904 	bl	20004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
2000b768:	4b11      	ldr	r3, [pc, #68]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b76a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000b76c:	4a10      	ldr	r2, [pc, #64]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2000b772:	6353      	str	r3, [r2, #52]	@ 0x34
2000b774:	4b0e      	ldr	r3, [pc, #56]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000b778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000b77c:	613b      	str	r3, [r7, #16]
2000b77e:	693b      	ldr	r3, [r7, #16]
2000b780:	4b0b      	ldr	r3, [pc, #44]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b784:	4a0a      	ldr	r2, [pc, #40]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2000b78a:	6453      	str	r3, [r2, #68]	@ 0x44
2000b78c:	4b08      	ldr	r3, [pc, #32]	@ (2000b7b0 <HAL_PCD_MspInit+0xfc>)
2000b78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000b794:	60fb      	str	r3, [r7, #12]
2000b796:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
2000b798:	2200      	movs	r2, #0
2000b79a:	2100      	movs	r1, #0
2000b79c:	2043      	movs	r0, #67	@ 0x43
2000b79e:	f7f8 fd62 	bl	20004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
2000b7a2:	2043      	movs	r0, #67	@ 0x43
2000b7a4:	f7f8 fd7b 	bl	2000429e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
2000b7a8:	bf00      	nop
2000b7aa:	37b0      	adds	r7, #176	@ 0xb0
2000b7ac:	46bd      	mov	sp, r7
2000b7ae:	bd80      	pop	{r7, pc}
2000b7b0:	40023800 	.word	0x40023800
2000b7b4:	40020000 	.word	0x40020000

2000b7b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b7b8:	b580      	push	{r7, lr}
2000b7ba:	b082      	sub	sp, #8
2000b7bc:	af00      	add	r7, sp, #0
2000b7be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
2000b7c0:	687b      	ldr	r3, [r7, #4]
2000b7c2:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
2000b7c6:	687b      	ldr	r3, [r7, #4]
2000b7c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000b7cc:	4619      	mov	r1, r3
2000b7ce:	4610      	mov	r0, r2
2000b7d0:	f7fe fb61 	bl	20009e96 <USBD_LL_SetupStage>
}
2000b7d4:	bf00      	nop
2000b7d6:	3708      	adds	r7, #8
2000b7d8:	46bd      	mov	sp, r7
2000b7da:	bd80      	pop	{r7, pc}

2000b7dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b7dc:	b580      	push	{r7, lr}
2000b7de:	b082      	sub	sp, #8
2000b7e0:	af00      	add	r7, sp, #0
2000b7e2:	6078      	str	r0, [r7, #4]
2000b7e4:	460b      	mov	r3, r1
2000b7e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
2000b7e8:	687b      	ldr	r3, [r7, #4]
2000b7ea:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000b7ee:	78fa      	ldrb	r2, [r7, #3]
2000b7f0:	6879      	ldr	r1, [r7, #4]
2000b7f2:	4613      	mov	r3, r2
2000b7f4:	00db      	lsls	r3, r3, #3
2000b7f6:	4413      	add	r3, r2
2000b7f8:	009b      	lsls	r3, r3, #2
2000b7fa:	440b      	add	r3, r1
2000b7fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
2000b800:	681a      	ldr	r2, [r3, #0]
2000b802:	78fb      	ldrb	r3, [r7, #3]
2000b804:	4619      	mov	r1, r3
2000b806:	f7fe fb9b 	bl	20009f40 <USBD_LL_DataOutStage>
}
2000b80a:	bf00      	nop
2000b80c:	3708      	adds	r7, #8
2000b80e:	46bd      	mov	sp, r7
2000b810:	bd80      	pop	{r7, pc}

2000b812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b812:	b580      	push	{r7, lr}
2000b814:	b082      	sub	sp, #8
2000b816:	af00      	add	r7, sp, #0
2000b818:	6078      	str	r0, [r7, #4]
2000b81a:	460b      	mov	r3, r1
2000b81c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
2000b81e:	687b      	ldr	r3, [r7, #4]
2000b820:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000b824:	78fa      	ldrb	r2, [r7, #3]
2000b826:	6879      	ldr	r1, [r7, #4]
2000b828:	4613      	mov	r3, r2
2000b82a:	00db      	lsls	r3, r3, #3
2000b82c:	4413      	add	r3, r2
2000b82e:	009b      	lsls	r3, r3, #2
2000b830:	440b      	add	r3, r1
2000b832:	3320      	adds	r3, #32
2000b834:	681a      	ldr	r2, [r3, #0]
2000b836:	78fb      	ldrb	r3, [r7, #3]
2000b838:	4619      	mov	r1, r3
2000b83a:	f7fe fc3d 	bl	2000a0b8 <USBD_LL_DataInStage>
}
2000b83e:	bf00      	nop
2000b840:	3708      	adds	r7, #8
2000b842:	46bd      	mov	sp, r7
2000b844:	bd80      	pop	{r7, pc}

2000b846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b846:	b580      	push	{r7, lr}
2000b848:	b082      	sub	sp, #8
2000b84a:	af00      	add	r7, sp, #0
2000b84c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
2000b84e:	687b      	ldr	r3, [r7, #4]
2000b850:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b854:	4618      	mov	r0, r3
2000b856:	f7fe fd81 	bl	2000a35c <USBD_LL_SOF>
}
2000b85a:	bf00      	nop
2000b85c:	3708      	adds	r7, #8
2000b85e:	46bd      	mov	sp, r7
2000b860:	bd80      	pop	{r7, pc}

2000b862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b862:	b580      	push	{r7, lr}
2000b864:	b084      	sub	sp, #16
2000b866:	af00      	add	r7, sp, #0
2000b868:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
2000b86a:	2301      	movs	r3, #1
2000b86c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
2000b86e:	687b      	ldr	r3, [r7, #4]
2000b870:	79db      	ldrb	r3, [r3, #7]
2000b872:	2b00      	cmp	r3, #0
2000b874:	d102      	bne.n	2000b87c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
2000b876:	2300      	movs	r3, #0
2000b878:	73fb      	strb	r3, [r7, #15]
2000b87a:	e008      	b.n	2000b88e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
2000b87c:	687b      	ldr	r3, [r7, #4]
2000b87e:	79db      	ldrb	r3, [r3, #7]
2000b880:	2b02      	cmp	r3, #2
2000b882:	d102      	bne.n	2000b88a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
2000b884:	2301      	movs	r3, #1
2000b886:	73fb      	strb	r3, [r7, #15]
2000b888:	e001      	b.n	2000b88e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
2000b88a:	f7f8 f909 	bl	20003aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
2000b88e:	687b      	ldr	r3, [r7, #4]
2000b890:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b894:	7bfa      	ldrb	r2, [r7, #15]
2000b896:	4611      	mov	r1, r2
2000b898:	4618      	mov	r0, r3
2000b89a:	f7fe fd1b 	bl	2000a2d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
2000b89e:	687b      	ldr	r3, [r7, #4]
2000b8a0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b8a4:	4618      	mov	r0, r3
2000b8a6:	f7fe fcc2 	bl	2000a22e <USBD_LL_Reset>
}
2000b8aa:	bf00      	nop
2000b8ac:	3710      	adds	r7, #16
2000b8ae:	46bd      	mov	sp, r7
2000b8b0:	bd80      	pop	{r7, pc}
	...

2000b8b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b8b4:	b580      	push	{r7, lr}
2000b8b6:	b082      	sub	sp, #8
2000b8b8:	af00      	add	r7, sp, #0
2000b8ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
2000b8bc:	687b      	ldr	r3, [r7, #4]
2000b8be:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b8c2:	4618      	mov	r0, r3
2000b8c4:	f7fe fd16 	bl	2000a2f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000b8c8:	687b      	ldr	r3, [r7, #4]
2000b8ca:	681b      	ldr	r3, [r3, #0]
2000b8cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000b8d0:	681b      	ldr	r3, [r3, #0]
2000b8d2:	687a      	ldr	r2, [r7, #4]
2000b8d4:	6812      	ldr	r2, [r2, #0]
2000b8d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000b8da:	f043 0301 	orr.w	r3, r3, #1
2000b8de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
2000b8e0:	687b      	ldr	r3, [r7, #4]
2000b8e2:	7adb      	ldrb	r3, [r3, #11]
2000b8e4:	2b00      	cmp	r3, #0
2000b8e6:	d005      	beq.n	2000b8f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000b8e8:	4b04      	ldr	r3, [pc, #16]	@ (2000b8fc <HAL_PCD_SuspendCallback+0x48>)
2000b8ea:	691b      	ldr	r3, [r3, #16]
2000b8ec:	4a03      	ldr	r2, [pc, #12]	@ (2000b8fc <HAL_PCD_SuspendCallback+0x48>)
2000b8ee:	f043 0306 	orr.w	r3, r3, #6
2000b8f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
2000b8f4:	bf00      	nop
2000b8f6:	3708      	adds	r7, #8
2000b8f8:	46bd      	mov	sp, r7
2000b8fa:	bd80      	pop	{r7, pc}
2000b8fc:	e000ed00 	.word	0xe000ed00

2000b900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b900:	b580      	push	{r7, lr}
2000b902:	b082      	sub	sp, #8
2000b904:	af00      	add	r7, sp, #0
2000b906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
2000b908:	687b      	ldr	r3, [r7, #4]
2000b90a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b90e:	4618      	mov	r0, r3
2000b910:	f7fe fd0c 	bl	2000a32c <USBD_LL_Resume>
}
2000b914:	bf00      	nop
2000b916:	3708      	adds	r7, #8
2000b918:	46bd      	mov	sp, r7
2000b91a:	bd80      	pop	{r7, pc}

2000b91c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b91c:	b580      	push	{r7, lr}
2000b91e:	b082      	sub	sp, #8
2000b920:	af00      	add	r7, sp, #0
2000b922:	6078      	str	r0, [r7, #4]
2000b924:	460b      	mov	r3, r1
2000b926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000b928:	687b      	ldr	r3, [r7, #4]
2000b92a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b92e:	78fa      	ldrb	r2, [r7, #3]
2000b930:	4611      	mov	r1, r2
2000b932:	4618      	mov	r0, r3
2000b934:	f7fe fd64 	bl	2000a400 <USBD_LL_IsoOUTIncomplete>
}
2000b938:	bf00      	nop
2000b93a:	3708      	adds	r7, #8
2000b93c:	46bd      	mov	sp, r7
2000b93e:	bd80      	pop	{r7, pc}

2000b940 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b940:	b580      	push	{r7, lr}
2000b942:	b082      	sub	sp, #8
2000b944:	af00      	add	r7, sp, #0
2000b946:	6078      	str	r0, [r7, #4]
2000b948:	460b      	mov	r3, r1
2000b94a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
2000b94c:	687b      	ldr	r3, [r7, #4]
2000b94e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b952:	78fa      	ldrb	r2, [r7, #3]
2000b954:	4611      	mov	r1, r2
2000b956:	4618      	mov	r0, r3
2000b958:	f7fe fd20 	bl	2000a39c <USBD_LL_IsoINIncomplete>
}
2000b95c:	bf00      	nop
2000b95e:	3708      	adds	r7, #8
2000b960:	46bd      	mov	sp, r7
2000b962:	bd80      	pop	{r7, pc}

2000b964 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b964:	b580      	push	{r7, lr}
2000b966:	b082      	sub	sp, #8
2000b968:	af00      	add	r7, sp, #0
2000b96a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
2000b96c:	687b      	ldr	r3, [r7, #4]
2000b96e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b972:	4618      	mov	r0, r3
2000b974:	f7fe fd76 	bl	2000a464 <USBD_LL_DevConnected>
}
2000b978:	bf00      	nop
2000b97a:	3708      	adds	r7, #8
2000b97c:	46bd      	mov	sp, r7
2000b97e:	bd80      	pop	{r7, pc}

2000b980 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000b980:	b580      	push	{r7, lr}
2000b982:	b082      	sub	sp, #8
2000b984:	af00      	add	r7, sp, #0
2000b986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
2000b988:	687b      	ldr	r3, [r7, #4]
2000b98a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000b98e:	4618      	mov	r0, r3
2000b990:	f7fe fd73 	bl	2000a47a <USBD_LL_DevDisconnected>
}
2000b994:	bf00      	nop
2000b996:	3708      	adds	r7, #8
2000b998:	46bd      	mov	sp, r7
2000b99a:	bd80      	pop	{r7, pc}

2000b99c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
2000b99c:	b580      	push	{r7, lr}
2000b99e:	b082      	sub	sp, #8
2000b9a0:	af00      	add	r7, sp, #0
2000b9a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
2000b9a4:	687b      	ldr	r3, [r7, #4]
2000b9a6:	781b      	ldrb	r3, [r3, #0]
2000b9a8:	2b00      	cmp	r3, #0
2000b9aa:	d13c      	bne.n	2000ba26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
2000b9ac:	4a20      	ldr	r2, [pc, #128]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9ae:	687b      	ldr	r3, [r7, #4]
2000b9b0:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
2000b9b4:	687b      	ldr	r3, [r7, #4]
2000b9b6:	4a1e      	ldr	r2, [pc, #120]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
2000b9bc:	4b1c      	ldr	r3, [pc, #112]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
2000b9c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
2000b9c4:	4b1a      	ldr	r3, [pc, #104]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9c6:	2206      	movs	r2, #6
2000b9c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
2000b9ca:	4b19      	ldr	r3, [pc, #100]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9cc:	2202      	movs	r2, #2
2000b9ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
2000b9d0:	4b17      	ldr	r3, [pc, #92]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9d2:	2200      	movs	r2, #0
2000b9d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
2000b9d6:	4b16      	ldr	r3, [pc, #88]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9d8:	2202      	movs	r2, #2
2000b9da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
2000b9dc:	4b14      	ldr	r3, [pc, #80]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9de:	2201      	movs	r2, #1
2000b9e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
2000b9e2:	4b13      	ldr	r3, [pc, #76]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9e4:	2200      	movs	r2, #0
2000b9e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
2000b9e8:	4b11      	ldr	r3, [pc, #68]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9ea:	2200      	movs	r2, #0
2000b9ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
2000b9ee:	4b10      	ldr	r3, [pc, #64]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9f0:	2201      	movs	r2, #1
2000b9f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
2000b9f4:	4b0e      	ldr	r3, [pc, #56]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9f6:	2200      	movs	r2, #0
2000b9f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
2000b9fa:	480d      	ldr	r0, [pc, #52]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000b9fc:	f7f9 f997 	bl	20004d2e <HAL_PCD_Init>
2000ba00:	4603      	mov	r3, r0
2000ba02:	2b00      	cmp	r3, #0
2000ba04:	d001      	beq.n	2000ba0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
2000ba06:	f7f8 f84b 	bl	20003aa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
2000ba0a:	2180      	movs	r1, #128	@ 0x80
2000ba0c:	4808      	ldr	r0, [pc, #32]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000ba0e:	f7fa fbe4 	bl	200061da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
2000ba12:	2240      	movs	r2, #64	@ 0x40
2000ba14:	2100      	movs	r1, #0
2000ba16:	4806      	ldr	r0, [pc, #24]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000ba18:	f7fa fb98 	bl	2000614c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
2000ba1c:	2280      	movs	r2, #128	@ 0x80
2000ba1e:	2101      	movs	r1, #1
2000ba20:	4803      	ldr	r0, [pc, #12]	@ (2000ba30 <USBD_LL_Init+0x94>)
2000ba22:	f7fa fb93 	bl	2000614c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
2000ba26:	2300      	movs	r3, #0
}
2000ba28:	4618      	mov	r0, r3
2000ba2a:	3708      	adds	r7, #8
2000ba2c:	46bd      	mov	sp, r7
2000ba2e:	bd80      	pop	{r7, pc}
2000ba30:	2000d858 	.word	0x2000d858

2000ba34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
2000ba34:	b580      	push	{r7, lr}
2000ba36:	b084      	sub	sp, #16
2000ba38:	af00      	add	r7, sp, #0
2000ba3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000ba3c:	2300      	movs	r3, #0
2000ba3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000ba40:	2300      	movs	r3, #0
2000ba42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
2000ba44:	687b      	ldr	r3, [r7, #4]
2000ba46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000ba4a:	4618      	mov	r0, r3
2000ba4c:	f7f9 fa85 	bl	20004f5a <HAL_PCD_Start>
2000ba50:	4603      	mov	r3, r0
2000ba52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000ba54:	7bfb      	ldrb	r3, [r7, #15]
2000ba56:	4618      	mov	r0, r3
2000ba58:	f000 f97e 	bl	2000bd58 <USBD_Get_USB_Status>
2000ba5c:	4603      	mov	r3, r0
2000ba5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000ba60:	7bbb      	ldrb	r3, [r7, #14]
}
2000ba62:	4618      	mov	r0, r3
2000ba64:	3710      	adds	r7, #16
2000ba66:	46bd      	mov	sp, r7
2000ba68:	bd80      	pop	{r7, pc}

2000ba6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
2000ba6a:	b580      	push	{r7, lr}
2000ba6c:	b084      	sub	sp, #16
2000ba6e:	af00      	add	r7, sp, #0
2000ba70:	6078      	str	r0, [r7, #4]
2000ba72:	4608      	mov	r0, r1
2000ba74:	4611      	mov	r1, r2
2000ba76:	461a      	mov	r2, r3
2000ba78:	4603      	mov	r3, r0
2000ba7a:	70fb      	strb	r3, [r7, #3]
2000ba7c:	460b      	mov	r3, r1
2000ba7e:	70bb      	strb	r3, [r7, #2]
2000ba80:	4613      	mov	r3, r2
2000ba82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000ba84:	2300      	movs	r3, #0
2000ba86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000ba88:	2300      	movs	r3, #0
2000ba8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
2000ba8c:	687b      	ldr	r3, [r7, #4]
2000ba8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000ba92:	78bb      	ldrb	r3, [r7, #2]
2000ba94:	883a      	ldrh	r2, [r7, #0]
2000ba96:	78f9      	ldrb	r1, [r7, #3]
2000ba98:	f7f9 ff73 	bl	20005982 <HAL_PCD_EP_Open>
2000ba9c:	4603      	mov	r3, r0
2000ba9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000baa0:	7bfb      	ldrb	r3, [r7, #15]
2000baa2:	4618      	mov	r0, r3
2000baa4:	f000 f958 	bl	2000bd58 <USBD_Get_USB_Status>
2000baa8:	4603      	mov	r3, r0
2000baaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000baac:	7bbb      	ldrb	r3, [r7, #14]
}
2000baae:	4618      	mov	r0, r3
2000bab0:	3710      	adds	r7, #16
2000bab2:	46bd      	mov	sp, r7
2000bab4:	bd80      	pop	{r7, pc}

2000bab6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000bab6:	b580      	push	{r7, lr}
2000bab8:	b084      	sub	sp, #16
2000baba:	af00      	add	r7, sp, #0
2000babc:	6078      	str	r0, [r7, #4]
2000babe:	460b      	mov	r3, r1
2000bac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bac2:	2300      	movs	r3, #0
2000bac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bac6:	2300      	movs	r3, #0
2000bac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
2000baca:	687b      	ldr	r3, [r7, #4]
2000bacc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bad0:	78fa      	ldrb	r2, [r7, #3]
2000bad2:	4611      	mov	r1, r2
2000bad4:	4618      	mov	r0, r3
2000bad6:	f7f9 ffbe 	bl	20005a56 <HAL_PCD_EP_Close>
2000bada:	4603      	mov	r3, r0
2000badc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bade:	7bfb      	ldrb	r3, [r7, #15]
2000bae0:	4618      	mov	r0, r3
2000bae2:	f000 f939 	bl	2000bd58 <USBD_Get_USB_Status>
2000bae6:	4603      	mov	r3, r0
2000bae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000baea:	7bbb      	ldrb	r3, [r7, #14]
}
2000baec:	4618      	mov	r0, r3
2000baee:	3710      	adds	r7, #16
2000baf0:	46bd      	mov	sp, r7
2000baf2:	bd80      	pop	{r7, pc}

2000baf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000baf4:	b580      	push	{r7, lr}
2000baf6:	b084      	sub	sp, #16
2000baf8:	af00      	add	r7, sp, #0
2000bafa:	6078      	str	r0, [r7, #4]
2000bafc:	460b      	mov	r3, r1
2000bafe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bb00:	2300      	movs	r3, #0
2000bb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bb04:	2300      	movs	r3, #0
2000bb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
2000bb08:	687b      	ldr	r3, [r7, #4]
2000bb0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bb0e:	78fa      	ldrb	r2, [r7, #3]
2000bb10:	4611      	mov	r1, r2
2000bb12:	4618      	mov	r0, r3
2000bb14:	f7fa f876 	bl	20005c04 <HAL_PCD_EP_SetStall>
2000bb18:	4603      	mov	r3, r0
2000bb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bb1c:	7bfb      	ldrb	r3, [r7, #15]
2000bb1e:	4618      	mov	r0, r3
2000bb20:	f000 f91a 	bl	2000bd58 <USBD_Get_USB_Status>
2000bb24:	4603      	mov	r3, r0
2000bb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000bb28:	7bbb      	ldrb	r3, [r7, #14]
}
2000bb2a:	4618      	mov	r0, r3
2000bb2c:	3710      	adds	r7, #16
2000bb2e:	46bd      	mov	sp, r7
2000bb30:	bd80      	pop	{r7, pc}

2000bb32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000bb32:	b580      	push	{r7, lr}
2000bb34:	b084      	sub	sp, #16
2000bb36:	af00      	add	r7, sp, #0
2000bb38:	6078      	str	r0, [r7, #4]
2000bb3a:	460b      	mov	r3, r1
2000bb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bb3e:	2300      	movs	r3, #0
2000bb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bb42:	2300      	movs	r3, #0
2000bb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
2000bb46:	687b      	ldr	r3, [r7, #4]
2000bb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bb4c:	78fa      	ldrb	r2, [r7, #3]
2000bb4e:	4611      	mov	r1, r2
2000bb50:	4618      	mov	r0, r3
2000bb52:	f7fa f8ba 	bl	20005cca <HAL_PCD_EP_ClrStall>
2000bb56:	4603      	mov	r3, r0
2000bb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bb5a:	7bfb      	ldrb	r3, [r7, #15]
2000bb5c:	4618      	mov	r0, r3
2000bb5e:	f000 f8fb 	bl	2000bd58 <USBD_Get_USB_Status>
2000bb62:	4603      	mov	r3, r0
2000bb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000bb66:	7bbb      	ldrb	r3, [r7, #14]
}
2000bb68:	4618      	mov	r0, r3
2000bb6a:	3710      	adds	r7, #16
2000bb6c:	46bd      	mov	sp, r7
2000bb6e:	bd80      	pop	{r7, pc}

2000bb70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000bb70:	b480      	push	{r7}
2000bb72:	b085      	sub	sp, #20
2000bb74:	af00      	add	r7, sp, #0
2000bb76:	6078      	str	r0, [r7, #4]
2000bb78:	460b      	mov	r3, r1
2000bb7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
2000bb7c:	687b      	ldr	r3, [r7, #4]
2000bb7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bb82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
2000bb84:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000bb88:	2b00      	cmp	r3, #0
2000bb8a:	da0b      	bge.n	2000bba4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
2000bb8c:	78fb      	ldrb	r3, [r7, #3]
2000bb8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000bb92:	68f9      	ldr	r1, [r7, #12]
2000bb94:	4613      	mov	r3, r2
2000bb96:	00db      	lsls	r3, r3, #3
2000bb98:	4413      	add	r3, r2
2000bb9a:	009b      	lsls	r3, r3, #2
2000bb9c:	440b      	add	r3, r1
2000bb9e:	3316      	adds	r3, #22
2000bba0:	781b      	ldrb	r3, [r3, #0]
2000bba2:	e00b      	b.n	2000bbbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
2000bba4:	78fb      	ldrb	r3, [r7, #3]
2000bba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000bbaa:	68f9      	ldr	r1, [r7, #12]
2000bbac:	4613      	mov	r3, r2
2000bbae:	00db      	lsls	r3, r3, #3
2000bbb0:	4413      	add	r3, r2
2000bbb2:	009b      	lsls	r3, r3, #2
2000bbb4:	440b      	add	r3, r1
2000bbb6:	f203 2356 	addw	r3, r3, #598	@ 0x256
2000bbba:	781b      	ldrb	r3, [r3, #0]
  }
}
2000bbbc:	4618      	mov	r0, r3
2000bbbe:	3714      	adds	r7, #20
2000bbc0:	46bd      	mov	sp, r7
2000bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000bbc6:	4770      	bx	lr

2000bbc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
2000bbc8:	b580      	push	{r7, lr}
2000bbca:	b084      	sub	sp, #16
2000bbcc:	af00      	add	r7, sp, #0
2000bbce:	6078      	str	r0, [r7, #4]
2000bbd0:	460b      	mov	r3, r1
2000bbd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bbd4:	2300      	movs	r3, #0
2000bbd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bbd8:	2300      	movs	r3, #0
2000bbda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
2000bbdc:	687b      	ldr	r3, [r7, #4]
2000bbde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bbe2:	78fa      	ldrb	r2, [r7, #3]
2000bbe4:	4611      	mov	r1, r2
2000bbe6:	4618      	mov	r0, r3
2000bbe8:	f7f9 fea7 	bl	2000593a <HAL_PCD_SetAddress>
2000bbec:	4603      	mov	r3, r0
2000bbee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bbf0:	7bfb      	ldrb	r3, [r7, #15]
2000bbf2:	4618      	mov	r0, r3
2000bbf4:	f000 f8b0 	bl	2000bd58 <USBD_Get_USB_Status>
2000bbf8:	4603      	mov	r3, r0
2000bbfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000bbfc:	7bbb      	ldrb	r3, [r7, #14]
}
2000bbfe:	4618      	mov	r0, r3
2000bc00:	3710      	adds	r7, #16
2000bc02:	46bd      	mov	sp, r7
2000bc04:	bd80      	pop	{r7, pc}

2000bc06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000bc06:	b580      	push	{r7, lr}
2000bc08:	b086      	sub	sp, #24
2000bc0a:	af00      	add	r7, sp, #0
2000bc0c:	60f8      	str	r0, [r7, #12]
2000bc0e:	607a      	str	r2, [r7, #4]
2000bc10:	603b      	str	r3, [r7, #0]
2000bc12:	460b      	mov	r3, r1
2000bc14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bc16:	2300      	movs	r3, #0
2000bc18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bc1a:	2300      	movs	r3, #0
2000bc1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
2000bc1e:	68fb      	ldr	r3, [r7, #12]
2000bc20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000bc24:	7af9      	ldrb	r1, [r7, #11]
2000bc26:	683b      	ldr	r3, [r7, #0]
2000bc28:	687a      	ldr	r2, [r7, #4]
2000bc2a:	f7f9 ffb1 	bl	20005b90 <HAL_PCD_EP_Transmit>
2000bc2e:	4603      	mov	r3, r0
2000bc30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bc32:	7dfb      	ldrb	r3, [r7, #23]
2000bc34:	4618      	mov	r0, r3
2000bc36:	f000 f88f 	bl	2000bd58 <USBD_Get_USB_Status>
2000bc3a:	4603      	mov	r3, r0
2000bc3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000bc3e:	7dbb      	ldrb	r3, [r7, #22]
}
2000bc40:	4618      	mov	r0, r3
2000bc42:	3718      	adds	r7, #24
2000bc44:	46bd      	mov	sp, r7
2000bc46:	bd80      	pop	{r7, pc}

2000bc48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000bc48:	b580      	push	{r7, lr}
2000bc4a:	b086      	sub	sp, #24
2000bc4c:	af00      	add	r7, sp, #0
2000bc4e:	60f8      	str	r0, [r7, #12]
2000bc50:	607a      	str	r2, [r7, #4]
2000bc52:	603b      	str	r3, [r7, #0]
2000bc54:	460b      	mov	r3, r1
2000bc56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000bc58:	2300      	movs	r3, #0
2000bc5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bc5c:	2300      	movs	r3, #0
2000bc5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
2000bc60:	68fb      	ldr	r3, [r7, #12]
2000bc62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000bc66:	7af9      	ldrb	r1, [r7, #11]
2000bc68:	683b      	ldr	r3, [r7, #0]
2000bc6a:	687a      	ldr	r2, [r7, #4]
2000bc6c:	f7f9 ff3d 	bl	20005aea <HAL_PCD_EP_Receive>
2000bc70:	4603      	mov	r3, r0
2000bc72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000bc74:	7dfb      	ldrb	r3, [r7, #23]
2000bc76:	4618      	mov	r0, r3
2000bc78:	f000 f86e 	bl	2000bd58 <USBD_Get_USB_Status>
2000bc7c:	4603      	mov	r3, r0
2000bc7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
2000bc80:	7dbb      	ldrb	r3, [r7, #22]
}
2000bc82:	4618      	mov	r0, r3
2000bc84:	3718      	adds	r7, #24
2000bc86:	46bd      	mov	sp, r7
2000bc88:	bd80      	pop	{r7, pc}

2000bc8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000bc8a:	b580      	push	{r7, lr}
2000bc8c:	b082      	sub	sp, #8
2000bc8e:	af00      	add	r7, sp, #0
2000bc90:	6078      	str	r0, [r7, #4]
2000bc92:	460b      	mov	r3, r1
2000bc94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
2000bc96:	687b      	ldr	r3, [r7, #4]
2000bc98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000bc9c:	78fa      	ldrb	r2, [r7, #3]
2000bc9e:	4611      	mov	r1, r2
2000bca0:	4618      	mov	r0, r3
2000bca2:	f7f9 ff5d 	bl	20005b60 <HAL_PCD_EP_GetRxCount>
2000bca6:	4603      	mov	r3, r0
}
2000bca8:	4618      	mov	r0, r3
2000bcaa:	3708      	adds	r7, #8
2000bcac:	46bd      	mov	sp, r7
2000bcae:	bd80      	pop	{r7, pc}

2000bcb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
2000bcb0:	b580      	push	{r7, lr}
2000bcb2:	b082      	sub	sp, #8
2000bcb4:	af00      	add	r7, sp, #0
2000bcb6:	6078      	str	r0, [r7, #4]
2000bcb8:	460b      	mov	r3, r1
2000bcba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
2000bcbc:	78fb      	ldrb	r3, [r7, #3]
2000bcbe:	2b00      	cmp	r3, #0
2000bcc0:	d002      	beq.n	2000bcc8 <HAL_PCDEx_LPM_Callback+0x18>
2000bcc2:	2b01      	cmp	r3, #1
2000bcc4:	d01f      	beq.n	2000bd06 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
2000bcc6:	e03b      	b.n	2000bd40 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
2000bcc8:	687b      	ldr	r3, [r7, #4]
2000bcca:	7adb      	ldrb	r3, [r3, #11]
2000bccc:	2b00      	cmp	r3, #0
2000bcce:	d007      	beq.n	2000bce0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
2000bcd0:	f000 f83c 	bl	2000bd4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000bcd4:	4b1c      	ldr	r3, [pc, #112]	@ (2000bd48 <HAL_PCDEx_LPM_Callback+0x98>)
2000bcd6:	691b      	ldr	r3, [r3, #16]
2000bcd8:	4a1b      	ldr	r2, [pc, #108]	@ (2000bd48 <HAL_PCDEx_LPM_Callback+0x98>)
2000bcda:	f023 0306 	bic.w	r3, r3, #6
2000bcde:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
2000bce0:	687b      	ldr	r3, [r7, #4]
2000bce2:	681b      	ldr	r3, [r3, #0]
2000bce4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000bce8:	681b      	ldr	r3, [r3, #0]
2000bcea:	687a      	ldr	r2, [r7, #4]
2000bcec:	6812      	ldr	r2, [r2, #0]
2000bcee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000bcf2:	f023 0301 	bic.w	r3, r3, #1
2000bcf6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
2000bcf8:	687b      	ldr	r3, [r7, #4]
2000bcfa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bcfe:	4618      	mov	r0, r3
2000bd00:	f7fe fb14 	bl	2000a32c <USBD_LL_Resume>
    break;
2000bd04:	e01c      	b.n	2000bd40 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
2000bd06:	687b      	ldr	r3, [r7, #4]
2000bd08:	681b      	ldr	r3, [r3, #0]
2000bd0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
2000bd0e:	681b      	ldr	r3, [r3, #0]
2000bd10:	687a      	ldr	r2, [r7, #4]
2000bd12:	6812      	ldr	r2, [r2, #0]
2000bd14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
2000bd18:	f043 0301 	orr.w	r3, r3, #1
2000bd1c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
2000bd1e:	687b      	ldr	r3, [r7, #4]
2000bd20:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000bd24:	4618      	mov	r0, r3
2000bd26:	f7fe fae5 	bl	2000a2f4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
2000bd2a:	687b      	ldr	r3, [r7, #4]
2000bd2c:	7adb      	ldrb	r3, [r3, #11]
2000bd2e:	2b00      	cmp	r3, #0
2000bd30:	d005      	beq.n	2000bd3e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
2000bd32:	4b05      	ldr	r3, [pc, #20]	@ (2000bd48 <HAL_PCDEx_LPM_Callback+0x98>)
2000bd34:	691b      	ldr	r3, [r3, #16]
2000bd36:	4a04      	ldr	r2, [pc, #16]	@ (2000bd48 <HAL_PCDEx_LPM_Callback+0x98>)
2000bd38:	f043 0306 	orr.w	r3, r3, #6
2000bd3c:	6113      	str	r3, [r2, #16]
    break;
2000bd3e:	bf00      	nop
}
2000bd40:	bf00      	nop
2000bd42:	3708      	adds	r7, #8
2000bd44:	46bd      	mov	sp, r7
2000bd46:	bd80      	pop	{r7, pc}
2000bd48:	e000ed00 	.word	0xe000ed00

2000bd4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
2000bd4c:	b580      	push	{r7, lr}
2000bd4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
2000bd50:	f7f7 fb6c 	bl	2000342c <SystemClock_Config>
}
2000bd54:	bf00      	nop
2000bd56:	bd80      	pop	{r7, pc}

2000bd58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
2000bd58:	b480      	push	{r7}
2000bd5a:	b085      	sub	sp, #20
2000bd5c:	af00      	add	r7, sp, #0
2000bd5e:	4603      	mov	r3, r0
2000bd60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000bd62:	2300      	movs	r3, #0
2000bd64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
2000bd66:	79fb      	ldrb	r3, [r7, #7]
2000bd68:	2b03      	cmp	r3, #3
2000bd6a:	d817      	bhi.n	2000bd9c <USBD_Get_USB_Status+0x44>
2000bd6c:	a201      	add	r2, pc, #4	@ (adr r2, 2000bd74 <USBD_Get_USB_Status+0x1c>)
2000bd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000bd72:	bf00      	nop
2000bd74:	2000bd85 	.word	0x2000bd85
2000bd78:	2000bd8b 	.word	0x2000bd8b
2000bd7c:	2000bd91 	.word	0x2000bd91
2000bd80:	2000bd97 	.word	0x2000bd97
  {
    case HAL_OK :
      usb_status = USBD_OK;
2000bd84:	2300      	movs	r3, #0
2000bd86:	73fb      	strb	r3, [r7, #15]
    break;
2000bd88:	e00b      	b.n	2000bda2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
2000bd8a:	2303      	movs	r3, #3
2000bd8c:	73fb      	strb	r3, [r7, #15]
    break;
2000bd8e:	e008      	b.n	2000bda2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
2000bd90:	2301      	movs	r3, #1
2000bd92:	73fb      	strb	r3, [r7, #15]
    break;
2000bd94:	e005      	b.n	2000bda2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
2000bd96:	2303      	movs	r3, #3
2000bd98:	73fb      	strb	r3, [r7, #15]
    break;
2000bd9a:	e002      	b.n	2000bda2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
2000bd9c:	2303      	movs	r3, #3
2000bd9e:	73fb      	strb	r3, [r7, #15]
    break;
2000bda0:	bf00      	nop
  }
  return usb_status;
2000bda2:	7bfb      	ldrb	r3, [r7, #15]
}
2000bda4:	4618      	mov	r0, r3
2000bda6:	3714      	adds	r7, #20
2000bda8:	46bd      	mov	sp, r7
2000bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000bdae:	4770      	bx	lr

2000bdb0 <malloc>:
2000bdb0:	4b02      	ldr	r3, [pc, #8]	@ (2000bdbc <malloc+0xc>)
2000bdb2:	4601      	mov	r1, r0
2000bdb4:	6818      	ldr	r0, [r3, #0]
2000bdb6:	f000 b82d 	b.w	2000be14 <_malloc_r>
2000bdba:	bf00      	nop
2000bdbc:	2000c224 	.word	0x2000c224

2000bdc0 <free>:
2000bdc0:	4b02      	ldr	r3, [pc, #8]	@ (2000bdcc <free+0xc>)
2000bdc2:	4601      	mov	r1, r0
2000bdc4:	6818      	ldr	r0, [r3, #0]
2000bdc6:	f000 b903 	b.w	2000bfd0 <_free_r>
2000bdca:	bf00      	nop
2000bdcc:	2000c224 	.word	0x2000c224

2000bdd0 <sbrk_aligned>:
2000bdd0:	b570      	push	{r4, r5, r6, lr}
2000bdd2:	4e0f      	ldr	r6, [pc, #60]	@ (2000be10 <sbrk_aligned+0x40>)
2000bdd4:	460c      	mov	r4, r1
2000bdd6:	6831      	ldr	r1, [r6, #0]
2000bdd8:	4605      	mov	r5, r0
2000bdda:	b911      	cbnz	r1, 2000bde2 <sbrk_aligned+0x12>
2000bddc:	f000 f8ae 	bl	2000bf3c <_sbrk_r>
2000bde0:	6030      	str	r0, [r6, #0]
2000bde2:	4621      	mov	r1, r4
2000bde4:	4628      	mov	r0, r5
2000bde6:	f000 f8a9 	bl	2000bf3c <_sbrk_r>
2000bdea:	1c43      	adds	r3, r0, #1
2000bdec:	d103      	bne.n	2000bdf6 <sbrk_aligned+0x26>
2000bdee:	f04f 34ff 	mov.w	r4, #4294967295
2000bdf2:	4620      	mov	r0, r4
2000bdf4:	bd70      	pop	{r4, r5, r6, pc}
2000bdf6:	1cc4      	adds	r4, r0, #3
2000bdf8:	f024 0403 	bic.w	r4, r4, #3
2000bdfc:	42a0      	cmp	r0, r4
2000bdfe:	d0f8      	beq.n	2000bdf2 <sbrk_aligned+0x22>
2000be00:	1a21      	subs	r1, r4, r0
2000be02:	4628      	mov	r0, r5
2000be04:	f000 f89a 	bl	2000bf3c <_sbrk_r>
2000be08:	3001      	adds	r0, #1
2000be0a:	d1f2      	bne.n	2000bdf2 <sbrk_aligned+0x22>
2000be0c:	e7ef      	b.n	2000bdee <sbrk_aligned+0x1e>
2000be0e:	bf00      	nop
2000be10:	2000dd38 	.word	0x2000dd38

2000be14 <_malloc_r>:
2000be14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000be18:	1ccd      	adds	r5, r1, #3
2000be1a:	f025 0503 	bic.w	r5, r5, #3
2000be1e:	3508      	adds	r5, #8
2000be20:	2d0c      	cmp	r5, #12
2000be22:	bf38      	it	cc
2000be24:	250c      	movcc	r5, #12
2000be26:	2d00      	cmp	r5, #0
2000be28:	4606      	mov	r6, r0
2000be2a:	db01      	blt.n	2000be30 <_malloc_r+0x1c>
2000be2c:	42a9      	cmp	r1, r5
2000be2e:	d904      	bls.n	2000be3a <_malloc_r+0x26>
2000be30:	230c      	movs	r3, #12
2000be32:	6033      	str	r3, [r6, #0]
2000be34:	2000      	movs	r0, #0
2000be36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000be3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2000bf10 <_malloc_r+0xfc>
2000be3e:	f000 f869 	bl	2000bf14 <__malloc_lock>
2000be42:	f8d8 3000 	ldr.w	r3, [r8]
2000be46:	461c      	mov	r4, r3
2000be48:	bb44      	cbnz	r4, 2000be9c <_malloc_r+0x88>
2000be4a:	4629      	mov	r1, r5
2000be4c:	4630      	mov	r0, r6
2000be4e:	f7ff ffbf 	bl	2000bdd0 <sbrk_aligned>
2000be52:	1c43      	adds	r3, r0, #1
2000be54:	4604      	mov	r4, r0
2000be56:	d158      	bne.n	2000bf0a <_malloc_r+0xf6>
2000be58:	f8d8 4000 	ldr.w	r4, [r8]
2000be5c:	4627      	mov	r7, r4
2000be5e:	2f00      	cmp	r7, #0
2000be60:	d143      	bne.n	2000beea <_malloc_r+0xd6>
2000be62:	2c00      	cmp	r4, #0
2000be64:	d04b      	beq.n	2000befe <_malloc_r+0xea>
2000be66:	6823      	ldr	r3, [r4, #0]
2000be68:	4639      	mov	r1, r7
2000be6a:	4630      	mov	r0, r6
2000be6c:	eb04 0903 	add.w	r9, r4, r3
2000be70:	f000 f864 	bl	2000bf3c <_sbrk_r>
2000be74:	4581      	cmp	r9, r0
2000be76:	d142      	bne.n	2000befe <_malloc_r+0xea>
2000be78:	6821      	ldr	r1, [r4, #0]
2000be7a:	1a6d      	subs	r5, r5, r1
2000be7c:	4629      	mov	r1, r5
2000be7e:	4630      	mov	r0, r6
2000be80:	f7ff ffa6 	bl	2000bdd0 <sbrk_aligned>
2000be84:	3001      	adds	r0, #1
2000be86:	d03a      	beq.n	2000befe <_malloc_r+0xea>
2000be88:	6823      	ldr	r3, [r4, #0]
2000be8a:	442b      	add	r3, r5
2000be8c:	6023      	str	r3, [r4, #0]
2000be8e:	f8d8 3000 	ldr.w	r3, [r8]
2000be92:	685a      	ldr	r2, [r3, #4]
2000be94:	bb62      	cbnz	r2, 2000bef0 <_malloc_r+0xdc>
2000be96:	f8c8 7000 	str.w	r7, [r8]
2000be9a:	e00f      	b.n	2000bebc <_malloc_r+0xa8>
2000be9c:	6822      	ldr	r2, [r4, #0]
2000be9e:	1b52      	subs	r2, r2, r5
2000bea0:	d420      	bmi.n	2000bee4 <_malloc_r+0xd0>
2000bea2:	2a0b      	cmp	r2, #11
2000bea4:	d917      	bls.n	2000bed6 <_malloc_r+0xc2>
2000bea6:	1961      	adds	r1, r4, r5
2000bea8:	42a3      	cmp	r3, r4
2000beaa:	6025      	str	r5, [r4, #0]
2000beac:	bf18      	it	ne
2000beae:	6059      	strne	r1, [r3, #4]
2000beb0:	6863      	ldr	r3, [r4, #4]
2000beb2:	bf08      	it	eq
2000beb4:	f8c8 1000 	streq.w	r1, [r8]
2000beb8:	5162      	str	r2, [r4, r5]
2000beba:	604b      	str	r3, [r1, #4]
2000bebc:	4630      	mov	r0, r6
2000bebe:	f000 f82f 	bl	2000bf20 <__malloc_unlock>
2000bec2:	f104 000b 	add.w	r0, r4, #11
2000bec6:	1d23      	adds	r3, r4, #4
2000bec8:	f020 0007 	bic.w	r0, r0, #7
2000becc:	1ac2      	subs	r2, r0, r3
2000bece:	bf1c      	itt	ne
2000bed0:	1a1b      	subne	r3, r3, r0
2000bed2:	50a3      	strne	r3, [r4, r2]
2000bed4:	e7af      	b.n	2000be36 <_malloc_r+0x22>
2000bed6:	6862      	ldr	r2, [r4, #4]
2000bed8:	42a3      	cmp	r3, r4
2000beda:	bf0c      	ite	eq
2000bedc:	f8c8 2000 	streq.w	r2, [r8]
2000bee0:	605a      	strne	r2, [r3, #4]
2000bee2:	e7eb      	b.n	2000bebc <_malloc_r+0xa8>
2000bee4:	4623      	mov	r3, r4
2000bee6:	6864      	ldr	r4, [r4, #4]
2000bee8:	e7ae      	b.n	2000be48 <_malloc_r+0x34>
2000beea:	463c      	mov	r4, r7
2000beec:	687f      	ldr	r7, [r7, #4]
2000beee:	e7b6      	b.n	2000be5e <_malloc_r+0x4a>
2000bef0:	461a      	mov	r2, r3
2000bef2:	685b      	ldr	r3, [r3, #4]
2000bef4:	42a3      	cmp	r3, r4
2000bef6:	d1fb      	bne.n	2000bef0 <_malloc_r+0xdc>
2000bef8:	2300      	movs	r3, #0
2000befa:	6053      	str	r3, [r2, #4]
2000befc:	e7de      	b.n	2000bebc <_malloc_r+0xa8>
2000befe:	230c      	movs	r3, #12
2000bf00:	6033      	str	r3, [r6, #0]
2000bf02:	4630      	mov	r0, r6
2000bf04:	f000 f80c 	bl	2000bf20 <__malloc_unlock>
2000bf08:	e794      	b.n	2000be34 <_malloc_r+0x20>
2000bf0a:	6005      	str	r5, [r0, #0]
2000bf0c:	e7d6      	b.n	2000bebc <_malloc_r+0xa8>
2000bf0e:	bf00      	nop
2000bf10:	2000dd3c 	.word	0x2000dd3c

2000bf14 <__malloc_lock>:
2000bf14:	4801      	ldr	r0, [pc, #4]	@ (2000bf1c <__malloc_lock+0x8>)
2000bf16:	f000 b84b 	b.w	2000bfb0 <__retarget_lock_acquire_recursive>
2000bf1a:	bf00      	nop
2000bf1c:	2000de7c 	.word	0x2000de7c

2000bf20 <__malloc_unlock>:
2000bf20:	4801      	ldr	r0, [pc, #4]	@ (2000bf28 <__malloc_unlock+0x8>)
2000bf22:	f000 b846 	b.w	2000bfb2 <__retarget_lock_release_recursive>
2000bf26:	bf00      	nop
2000bf28:	2000de7c 	.word	0x2000de7c

2000bf2c <memset>:
2000bf2c:	4402      	add	r2, r0
2000bf2e:	4603      	mov	r3, r0
2000bf30:	4293      	cmp	r3, r2
2000bf32:	d100      	bne.n	2000bf36 <memset+0xa>
2000bf34:	4770      	bx	lr
2000bf36:	f803 1b01 	strb.w	r1, [r3], #1
2000bf3a:	e7f9      	b.n	2000bf30 <memset+0x4>

2000bf3c <_sbrk_r>:
2000bf3c:	b538      	push	{r3, r4, r5, lr}
2000bf3e:	4d06      	ldr	r5, [pc, #24]	@ (2000bf58 <_sbrk_r+0x1c>)
2000bf40:	2300      	movs	r3, #0
2000bf42:	4604      	mov	r4, r0
2000bf44:	4608      	mov	r0, r1
2000bf46:	602b      	str	r3, [r5, #0]
2000bf48:	f7f7 ffc0 	bl	20003ecc <_sbrk>
2000bf4c:	1c43      	adds	r3, r0, #1
2000bf4e:	d102      	bne.n	2000bf56 <_sbrk_r+0x1a>
2000bf50:	682b      	ldr	r3, [r5, #0]
2000bf52:	b103      	cbz	r3, 2000bf56 <_sbrk_r+0x1a>
2000bf54:	6023      	str	r3, [r4, #0]
2000bf56:	bd38      	pop	{r3, r4, r5, pc}
2000bf58:	2000de78 	.word	0x2000de78

2000bf5c <__errno>:
2000bf5c:	4b01      	ldr	r3, [pc, #4]	@ (2000bf64 <__errno+0x8>)
2000bf5e:	6818      	ldr	r0, [r3, #0]
2000bf60:	4770      	bx	lr
2000bf62:	bf00      	nop
2000bf64:	2000c224 	.word	0x2000c224

2000bf68 <__libc_init_array>:
2000bf68:	b570      	push	{r4, r5, r6, lr}
2000bf6a:	4d0d      	ldr	r5, [pc, #52]	@ (2000bfa0 <__libc_init_array+0x38>)
2000bf6c:	4c0d      	ldr	r4, [pc, #52]	@ (2000bfa4 <__libc_init_array+0x3c>)
2000bf6e:	1b64      	subs	r4, r4, r5
2000bf70:	10a4      	asrs	r4, r4, #2
2000bf72:	2600      	movs	r6, #0
2000bf74:	42a6      	cmp	r6, r4
2000bf76:	d109      	bne.n	2000bf8c <__libc_init_array+0x24>
2000bf78:	4d0b      	ldr	r5, [pc, #44]	@ (2000bfa8 <__libc_init_array+0x40>)
2000bf7a:	4c0c      	ldr	r4, [pc, #48]	@ (2000bfac <__libc_init_array+0x44>)
2000bf7c:	f000 f872 	bl	2000c064 <_init>
2000bf80:	1b64      	subs	r4, r4, r5
2000bf82:	10a4      	asrs	r4, r4, #2
2000bf84:	2600      	movs	r6, #0
2000bf86:	42a6      	cmp	r6, r4
2000bf88:	d105      	bne.n	2000bf96 <__libc_init_array+0x2e>
2000bf8a:	bd70      	pop	{r4, r5, r6, pc}
2000bf8c:	f855 3b04 	ldr.w	r3, [r5], #4
2000bf90:	4798      	blx	r3
2000bf92:	3601      	adds	r6, #1
2000bf94:	e7ee      	b.n	2000bf74 <__libc_init_array+0xc>
2000bf96:	f855 3b04 	ldr.w	r3, [r5], #4
2000bf9a:	4798      	blx	r3
2000bf9c:	3601      	adds	r6, #1
2000bf9e:	e7f2      	b.n	2000bf86 <__libc_init_array+0x1e>
2000bfa0:	2000c0e4 	.word	0x2000c0e4
2000bfa4:	2000c0e4 	.word	0x2000c0e4
2000bfa8:	2000c0e4 	.word	0x2000c0e4
2000bfac:	2000c0e8 	.word	0x2000c0e8

2000bfb0 <__retarget_lock_acquire_recursive>:
2000bfb0:	4770      	bx	lr

2000bfb2 <__retarget_lock_release_recursive>:
2000bfb2:	4770      	bx	lr

2000bfb4 <memcpy>:
2000bfb4:	440a      	add	r2, r1
2000bfb6:	4291      	cmp	r1, r2
2000bfb8:	f100 33ff 	add.w	r3, r0, #4294967295
2000bfbc:	d100      	bne.n	2000bfc0 <memcpy+0xc>
2000bfbe:	4770      	bx	lr
2000bfc0:	b510      	push	{r4, lr}
2000bfc2:	f811 4b01 	ldrb.w	r4, [r1], #1
2000bfc6:	f803 4f01 	strb.w	r4, [r3, #1]!
2000bfca:	4291      	cmp	r1, r2
2000bfcc:	d1f9      	bne.n	2000bfc2 <memcpy+0xe>
2000bfce:	bd10      	pop	{r4, pc}

2000bfd0 <_free_r>:
2000bfd0:	b538      	push	{r3, r4, r5, lr}
2000bfd2:	4605      	mov	r5, r0
2000bfd4:	2900      	cmp	r1, #0
2000bfd6:	d041      	beq.n	2000c05c <_free_r+0x8c>
2000bfd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000bfdc:	1f0c      	subs	r4, r1, #4
2000bfde:	2b00      	cmp	r3, #0
2000bfe0:	bfb8      	it	lt
2000bfe2:	18e4      	addlt	r4, r4, r3
2000bfe4:	f7ff ff96 	bl	2000bf14 <__malloc_lock>
2000bfe8:	4a1d      	ldr	r2, [pc, #116]	@ (2000c060 <_free_r+0x90>)
2000bfea:	6813      	ldr	r3, [r2, #0]
2000bfec:	b933      	cbnz	r3, 2000bffc <_free_r+0x2c>
2000bfee:	6063      	str	r3, [r4, #4]
2000bff0:	6014      	str	r4, [r2, #0]
2000bff2:	4628      	mov	r0, r5
2000bff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000bff8:	f7ff bf92 	b.w	2000bf20 <__malloc_unlock>
2000bffc:	42a3      	cmp	r3, r4
2000bffe:	d908      	bls.n	2000c012 <_free_r+0x42>
2000c000:	6820      	ldr	r0, [r4, #0]
2000c002:	1821      	adds	r1, r4, r0
2000c004:	428b      	cmp	r3, r1
2000c006:	bf01      	itttt	eq
2000c008:	6819      	ldreq	r1, [r3, #0]
2000c00a:	685b      	ldreq	r3, [r3, #4]
2000c00c:	1809      	addeq	r1, r1, r0
2000c00e:	6021      	streq	r1, [r4, #0]
2000c010:	e7ed      	b.n	2000bfee <_free_r+0x1e>
2000c012:	461a      	mov	r2, r3
2000c014:	685b      	ldr	r3, [r3, #4]
2000c016:	b10b      	cbz	r3, 2000c01c <_free_r+0x4c>
2000c018:	42a3      	cmp	r3, r4
2000c01a:	d9fa      	bls.n	2000c012 <_free_r+0x42>
2000c01c:	6811      	ldr	r1, [r2, #0]
2000c01e:	1850      	adds	r0, r2, r1
2000c020:	42a0      	cmp	r0, r4
2000c022:	d10b      	bne.n	2000c03c <_free_r+0x6c>
2000c024:	6820      	ldr	r0, [r4, #0]
2000c026:	4401      	add	r1, r0
2000c028:	1850      	adds	r0, r2, r1
2000c02a:	4283      	cmp	r3, r0
2000c02c:	6011      	str	r1, [r2, #0]
2000c02e:	d1e0      	bne.n	2000bff2 <_free_r+0x22>
2000c030:	6818      	ldr	r0, [r3, #0]
2000c032:	685b      	ldr	r3, [r3, #4]
2000c034:	6053      	str	r3, [r2, #4]
2000c036:	4408      	add	r0, r1
2000c038:	6010      	str	r0, [r2, #0]
2000c03a:	e7da      	b.n	2000bff2 <_free_r+0x22>
2000c03c:	d902      	bls.n	2000c044 <_free_r+0x74>
2000c03e:	230c      	movs	r3, #12
2000c040:	602b      	str	r3, [r5, #0]
2000c042:	e7d6      	b.n	2000bff2 <_free_r+0x22>
2000c044:	6820      	ldr	r0, [r4, #0]
2000c046:	1821      	adds	r1, r4, r0
2000c048:	428b      	cmp	r3, r1
2000c04a:	bf04      	itt	eq
2000c04c:	6819      	ldreq	r1, [r3, #0]
2000c04e:	685b      	ldreq	r3, [r3, #4]
2000c050:	6063      	str	r3, [r4, #4]
2000c052:	bf04      	itt	eq
2000c054:	1809      	addeq	r1, r1, r0
2000c056:	6021      	streq	r1, [r4, #0]
2000c058:	6054      	str	r4, [r2, #4]
2000c05a:	e7ca      	b.n	2000bff2 <_free_r+0x22>
2000c05c:	bd38      	pop	{r3, r4, r5, pc}
2000c05e:	bf00      	nop
2000c060:	2000dd3c 	.word	0x2000dd3c

2000c064 <_init>:
2000c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000c066:	bf00      	nop
2000c068:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000c06a:	bc08      	pop	{r3}
2000c06c:	469e      	mov	lr, r3
2000c06e:	4770      	bx	lr

2000c070 <_fini>:
2000c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000c072:	bf00      	nop
2000c074:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000c076:	bc08      	pop	{r3}
2000c078:	469e      	mov	lr, r3
2000c07a:	4770      	bx	lr
