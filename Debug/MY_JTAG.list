
MY_JTAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000997c  200001c8  200001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  20009b44  20009b44  0000ab44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20009ba8  20009ba8  0000ae38  2**0
                  CONTENTS
  4 .ARM          00000008  20009ba8  20009ba8  0000aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20009bb0  20009e38  0000ae38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20009bb0  20009bb0  0000abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  20009bb4  20009bb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  20009bb8  20009bb8  0000abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20009cf8  20009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20009d98  20009d98  0000ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  20009e38  20009e38  0000ae38  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000abb8  2000abb8  0000ae38  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000ae38  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019989  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d48  00000000  00000000  000247f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013e0  00000000  00000000  00028540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f1d  00000000  00000000  00029920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a13c  00000000  00000000  0002a83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001aff8  00000000  00000000  00054979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f318f  00000000  00000000  0006f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162b00  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005500  00000000  00000000  00162b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00168044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c8 <__do_global_dtors_aux>:
200001c8:	b510      	push	{r4, lr}
200001ca:	4c05      	ldr	r4, [pc, #20]	@ (200001e0 <__do_global_dtors_aux+0x18>)
200001cc:	7823      	ldrb	r3, [r4, #0]
200001ce:	b933      	cbnz	r3, 200001de <__do_global_dtors_aux+0x16>
200001d0:	4b04      	ldr	r3, [pc, #16]	@ (200001e4 <__do_global_dtors_aux+0x1c>)
200001d2:	b113      	cbz	r3, 200001da <__do_global_dtors_aux+0x12>
200001d4:	4804      	ldr	r0, [pc, #16]	@ (200001e8 <__do_global_dtors_aux+0x20>)
200001d6:	f3af 8000 	nop.w
200001da:	2301      	movs	r3, #1
200001dc:	7023      	strb	r3, [r4, #0]
200001de:	bd10      	pop	{r4, pc}
200001e0:	20009e38 	.word	0x20009e38
200001e4:	00000000 	.word	0x00000000
200001e8:	20009b2c 	.word	0x20009b2c

200001ec <frame_dummy>:
200001ec:	b508      	push	{r3, lr}
200001ee:	4b03      	ldr	r3, [pc, #12]	@ (200001fc <frame_dummy+0x10>)
200001f0:	b11b      	cbz	r3, 200001fa <frame_dummy+0xe>
200001f2:	4903      	ldr	r1, [pc, #12]	@ (20000200 <frame_dummy+0x14>)
200001f4:	4803      	ldr	r0, [pc, #12]	@ (20000204 <frame_dummy+0x18>)
200001f6:	f3af 8000 	nop.w
200001fa:	bd08      	pop	{r3, pc}
200001fc:	00000000 	.word	0x00000000
20000200:	20009e3c 	.word	0x20009e3c
20000204:	20009b2c 	.word	0x20009b2c

20000208 <__aeabi_uldivmod>:
20000208:	b953      	cbnz	r3, 20000220 <__aeabi_uldivmod+0x18>
2000020a:	b94a      	cbnz	r2, 20000220 <__aeabi_uldivmod+0x18>
2000020c:	2900      	cmp	r1, #0
2000020e:	bf08      	it	eq
20000210:	2800      	cmpeq	r0, #0
20000212:	bf1c      	itt	ne
20000214:	f04f 31ff 	movne.w	r1, #4294967295
20000218:	f04f 30ff 	movne.w	r0, #4294967295
2000021c:	f000 b96a 	b.w	200004f4 <__aeabi_idiv0>
20000220:	f1ad 0c08 	sub.w	ip, sp, #8
20000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000228:	f000 f806 	bl	20000238 <__udivmoddi4>
2000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
20000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000234:	b004      	add	sp, #16
20000236:	4770      	bx	lr

20000238 <__udivmoddi4>:
20000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000023c:	9d08      	ldr	r5, [sp, #32]
2000023e:	460c      	mov	r4, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14e      	bne.n	200002e2 <__udivmoddi4+0xaa>
20000244:	4694      	mov	ip, r2
20000246:	458c      	cmp	ip, r1
20000248:	4686      	mov	lr, r0
2000024a:	fab2 f282 	clz	r2, r2
2000024e:	d962      	bls.n	20000316 <__udivmoddi4+0xde>
20000250:	b14a      	cbz	r2, 20000266 <__udivmoddi4+0x2e>
20000252:	f1c2 0320 	rsb	r3, r2, #32
20000256:	4091      	lsls	r1, r2
20000258:	fa20 f303 	lsr.w	r3, r0, r3
2000025c:	fa0c fc02 	lsl.w	ip, ip, r2
20000260:	4319      	orrs	r1, r3
20000262:	fa00 fe02 	lsl.w	lr, r0, r2
20000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000026a:	fa1f f68c 	uxth.w	r6, ip
2000026e:	fbb1 f4f7 	udiv	r4, r1, r7
20000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000276:	fb07 1114 	mls	r1, r7, r4, r1
2000027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000027e:	fb04 f106 	mul.w	r1, r4, r6
20000282:	4299      	cmp	r1, r3
20000284:	d90a      	bls.n	2000029c <__udivmoddi4+0x64>
20000286:	eb1c 0303 	adds.w	r3, ip, r3
2000028a:	f104 30ff 	add.w	r0, r4, #4294967295
2000028e:	f080 8112 	bcs.w	200004b6 <__udivmoddi4+0x27e>
20000292:	4299      	cmp	r1, r3
20000294:	f240 810f 	bls.w	200004b6 <__udivmoddi4+0x27e>
20000298:	3c02      	subs	r4, #2
2000029a:	4463      	add	r3, ip
2000029c:	1a59      	subs	r1, r3, r1
2000029e:	fa1f f38e 	uxth.w	r3, lr
200002a2:	fbb1 f0f7 	udiv	r0, r1, r7
200002a6:	fb07 1110 	mls	r1, r7, r0, r1
200002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200002ae:	fb00 f606 	mul.w	r6, r0, r6
200002b2:	429e      	cmp	r6, r3
200002b4:	d90a      	bls.n	200002cc <__udivmoddi4+0x94>
200002b6:	eb1c 0303 	adds.w	r3, ip, r3
200002ba:	f100 31ff 	add.w	r1, r0, #4294967295
200002be:	f080 80fc 	bcs.w	200004ba <__udivmoddi4+0x282>
200002c2:	429e      	cmp	r6, r3
200002c4:	f240 80f9 	bls.w	200004ba <__udivmoddi4+0x282>
200002c8:	4463      	add	r3, ip
200002ca:	3802      	subs	r0, #2
200002cc:	1b9b      	subs	r3, r3, r6
200002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200002d2:	2100      	movs	r1, #0
200002d4:	b11d      	cbz	r5, 200002de <__udivmoddi4+0xa6>
200002d6:	40d3      	lsrs	r3, r2
200002d8:	2200      	movs	r2, #0
200002da:	e9c5 3200 	strd	r3, r2, [r5]
200002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002e2:	428b      	cmp	r3, r1
200002e4:	d905      	bls.n	200002f2 <__udivmoddi4+0xba>
200002e6:	b10d      	cbz	r5, 200002ec <__udivmoddi4+0xb4>
200002e8:	e9c5 0100 	strd	r0, r1, [r5]
200002ec:	2100      	movs	r1, #0
200002ee:	4608      	mov	r0, r1
200002f0:	e7f5      	b.n	200002de <__udivmoddi4+0xa6>
200002f2:	fab3 f183 	clz	r1, r3
200002f6:	2900      	cmp	r1, #0
200002f8:	d146      	bne.n	20000388 <__udivmoddi4+0x150>
200002fa:	42a3      	cmp	r3, r4
200002fc:	d302      	bcc.n	20000304 <__udivmoddi4+0xcc>
200002fe:	4290      	cmp	r0, r2
20000300:	f0c0 80f0 	bcc.w	200004e4 <__udivmoddi4+0x2ac>
20000304:	1a86      	subs	r6, r0, r2
20000306:	eb64 0303 	sbc.w	r3, r4, r3
2000030a:	2001      	movs	r0, #1
2000030c:	2d00      	cmp	r5, #0
2000030e:	d0e6      	beq.n	200002de <__udivmoddi4+0xa6>
20000310:	e9c5 6300 	strd	r6, r3, [r5]
20000314:	e7e3      	b.n	200002de <__udivmoddi4+0xa6>
20000316:	2a00      	cmp	r2, #0
20000318:	f040 8090 	bne.w	2000043c <__udivmoddi4+0x204>
2000031c:	eba1 040c 	sub.w	r4, r1, ip
20000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000324:	fa1f f78c 	uxth.w	r7, ip
20000328:	2101      	movs	r1, #1
2000032a:	fbb4 f6f8 	udiv	r6, r4, r8
2000032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000332:	fb08 4416 	mls	r4, r8, r6, r4
20000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000033a:	fb07 f006 	mul.w	r0, r7, r6
2000033e:	4298      	cmp	r0, r3
20000340:	d908      	bls.n	20000354 <__udivmoddi4+0x11c>
20000342:	eb1c 0303 	adds.w	r3, ip, r3
20000346:	f106 34ff 	add.w	r4, r6, #4294967295
2000034a:	d202      	bcs.n	20000352 <__udivmoddi4+0x11a>
2000034c:	4298      	cmp	r0, r3
2000034e:	f200 80cd 	bhi.w	200004ec <__udivmoddi4+0x2b4>
20000352:	4626      	mov	r6, r4
20000354:	1a1c      	subs	r4, r3, r0
20000356:	fa1f f38e 	uxth.w	r3, lr
2000035a:	fbb4 f0f8 	udiv	r0, r4, r8
2000035e:	fb08 4410 	mls	r4, r8, r0, r4
20000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000366:	fb00 f707 	mul.w	r7, r0, r7
2000036a:	429f      	cmp	r7, r3
2000036c:	d908      	bls.n	20000380 <__udivmoddi4+0x148>
2000036e:	eb1c 0303 	adds.w	r3, ip, r3
20000372:	f100 34ff 	add.w	r4, r0, #4294967295
20000376:	d202      	bcs.n	2000037e <__udivmoddi4+0x146>
20000378:	429f      	cmp	r7, r3
2000037a:	f200 80b0 	bhi.w	200004de <__udivmoddi4+0x2a6>
2000037e:	4620      	mov	r0, r4
20000380:	1bdb      	subs	r3, r3, r7
20000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000386:	e7a5      	b.n	200002d4 <__udivmoddi4+0x9c>
20000388:	f1c1 0620 	rsb	r6, r1, #32
2000038c:	408b      	lsls	r3, r1
2000038e:	fa22 f706 	lsr.w	r7, r2, r6
20000392:	431f      	orrs	r7, r3
20000394:	fa20 fc06 	lsr.w	ip, r0, r6
20000398:	fa04 f301 	lsl.w	r3, r4, r1
2000039c:	ea43 030c 	orr.w	r3, r3, ip
200003a0:	40f4      	lsrs	r4, r6
200003a2:	fa00 f801 	lsl.w	r8, r0, r1
200003a6:	0c38      	lsrs	r0, r7, #16
200003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
200003ac:	fbb4 fef0 	udiv	lr, r4, r0
200003b0:	fa1f fc87 	uxth.w	ip, r7
200003b4:	fb00 441e 	mls	r4, r0, lr, r4
200003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003bc:	fb0e f90c 	mul.w	r9, lr, ip
200003c0:	45a1      	cmp	r9, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	d90a      	bls.n	200003de <__udivmoddi4+0x1a6>
200003c8:	193c      	adds	r4, r7, r4
200003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
200003ce:	f080 8084 	bcs.w	200004da <__udivmoddi4+0x2a2>
200003d2:	45a1      	cmp	r9, r4
200003d4:	f240 8081 	bls.w	200004da <__udivmoddi4+0x2a2>
200003d8:	f1ae 0e02 	sub.w	lr, lr, #2
200003dc:	443c      	add	r4, r7
200003de:	eba4 0409 	sub.w	r4, r4, r9
200003e2:	fa1f f983 	uxth.w	r9, r3
200003e6:	fbb4 f3f0 	udiv	r3, r4, r0
200003ea:	fb00 4413 	mls	r4, r0, r3, r4
200003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200003f2:	fb03 fc0c 	mul.w	ip, r3, ip
200003f6:	45a4      	cmp	ip, r4
200003f8:	d907      	bls.n	2000040a <__udivmoddi4+0x1d2>
200003fa:	193c      	adds	r4, r7, r4
200003fc:	f103 30ff 	add.w	r0, r3, #4294967295
20000400:	d267      	bcs.n	200004d2 <__udivmoddi4+0x29a>
20000402:	45a4      	cmp	ip, r4
20000404:	d965      	bls.n	200004d2 <__udivmoddi4+0x29a>
20000406:	3b02      	subs	r3, #2
20000408:	443c      	add	r4, r7
2000040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
2000040e:	fba0 9302 	umull	r9, r3, r0, r2
20000412:	eba4 040c 	sub.w	r4, r4, ip
20000416:	429c      	cmp	r4, r3
20000418:	46ce      	mov	lr, r9
2000041a:	469c      	mov	ip, r3
2000041c:	d351      	bcc.n	200004c2 <__udivmoddi4+0x28a>
2000041e:	d04e      	beq.n	200004be <__udivmoddi4+0x286>
20000420:	b155      	cbz	r5, 20000438 <__udivmoddi4+0x200>
20000422:	ebb8 030e 	subs.w	r3, r8, lr
20000426:	eb64 040c 	sbc.w	r4, r4, ip
2000042a:	fa04 f606 	lsl.w	r6, r4, r6
2000042e:	40cb      	lsrs	r3, r1
20000430:	431e      	orrs	r6, r3
20000432:	40cc      	lsrs	r4, r1
20000434:	e9c5 6400 	strd	r6, r4, [r5]
20000438:	2100      	movs	r1, #0
2000043a:	e750      	b.n	200002de <__udivmoddi4+0xa6>
2000043c:	f1c2 0320 	rsb	r3, r2, #32
20000440:	fa20 f103 	lsr.w	r1, r0, r3
20000444:	fa0c fc02 	lsl.w	ip, ip, r2
20000448:	fa24 f303 	lsr.w	r3, r4, r3
2000044c:	4094      	lsls	r4, r2
2000044e:	430c      	orrs	r4, r1
20000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000454:	fa00 fe02 	lsl.w	lr, r0, r2
20000458:	fa1f f78c 	uxth.w	r7, ip
2000045c:	fbb3 f0f8 	udiv	r0, r3, r8
20000460:	fb08 3110 	mls	r1, r8, r0, r3
20000464:	0c23      	lsrs	r3, r4, #16
20000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000046a:	fb00 f107 	mul.w	r1, r0, r7
2000046e:	4299      	cmp	r1, r3
20000470:	d908      	bls.n	20000484 <__udivmoddi4+0x24c>
20000472:	eb1c 0303 	adds.w	r3, ip, r3
20000476:	f100 36ff 	add.w	r6, r0, #4294967295
2000047a:	d22c      	bcs.n	200004d6 <__udivmoddi4+0x29e>
2000047c:	4299      	cmp	r1, r3
2000047e:	d92a      	bls.n	200004d6 <__udivmoddi4+0x29e>
20000480:	3802      	subs	r0, #2
20000482:	4463      	add	r3, ip
20000484:	1a5b      	subs	r3, r3, r1
20000486:	b2a4      	uxth	r4, r4
20000488:	fbb3 f1f8 	udiv	r1, r3, r8
2000048c:	fb08 3311 	mls	r3, r8, r1, r3
20000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000494:	fb01 f307 	mul.w	r3, r1, r7
20000498:	42a3      	cmp	r3, r4
2000049a:	d908      	bls.n	200004ae <__udivmoddi4+0x276>
2000049c:	eb1c 0404 	adds.w	r4, ip, r4
200004a0:	f101 36ff 	add.w	r6, r1, #4294967295
200004a4:	d213      	bcs.n	200004ce <__udivmoddi4+0x296>
200004a6:	42a3      	cmp	r3, r4
200004a8:	d911      	bls.n	200004ce <__udivmoddi4+0x296>
200004aa:	3902      	subs	r1, #2
200004ac:	4464      	add	r4, ip
200004ae:	1ae4      	subs	r4, r4, r3
200004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
200004b4:	e739      	b.n	2000032a <__udivmoddi4+0xf2>
200004b6:	4604      	mov	r4, r0
200004b8:	e6f0      	b.n	2000029c <__udivmoddi4+0x64>
200004ba:	4608      	mov	r0, r1
200004bc:	e706      	b.n	200002cc <__udivmoddi4+0x94>
200004be:	45c8      	cmp	r8, r9
200004c0:	d2ae      	bcs.n	20000420 <__udivmoddi4+0x1e8>
200004c2:	ebb9 0e02 	subs.w	lr, r9, r2
200004c6:	eb63 0c07 	sbc.w	ip, r3, r7
200004ca:	3801      	subs	r0, #1
200004cc:	e7a8      	b.n	20000420 <__udivmoddi4+0x1e8>
200004ce:	4631      	mov	r1, r6
200004d0:	e7ed      	b.n	200004ae <__udivmoddi4+0x276>
200004d2:	4603      	mov	r3, r0
200004d4:	e799      	b.n	2000040a <__udivmoddi4+0x1d2>
200004d6:	4630      	mov	r0, r6
200004d8:	e7d4      	b.n	20000484 <__udivmoddi4+0x24c>
200004da:	46d6      	mov	lr, sl
200004dc:	e77f      	b.n	200003de <__udivmoddi4+0x1a6>
200004de:	4463      	add	r3, ip
200004e0:	3802      	subs	r0, #2
200004e2:	e74d      	b.n	20000380 <__udivmoddi4+0x148>
200004e4:	4606      	mov	r6, r0
200004e6:	4623      	mov	r3, r4
200004e8:	4608      	mov	r0, r1
200004ea:	e70f      	b.n	2000030c <__udivmoddi4+0xd4>
200004ec:	3e02      	subs	r6, #2
200004ee:	4463      	add	r3, ip
200004f0:	e730      	b.n	20000354 <__udivmoddi4+0x11c>
200004f2:	bf00      	nop

200004f4 <__aeabi_idiv0>:
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <DPACC>:
 * @return CM3_DBG_OK on success, error code otherwise.
 */


uint32_t DPACC (uint32_t data_out, uint32_t *data_in, uint32_t dp_reg ,uint32_t read)
{
200004f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200004fc:	b09a      	sub	sp, #104	@ 0x68
200004fe:	af00      	add	r7, sp, #0
20000500:	64f8      	str	r0, [r7, #76]	@ 0x4c
20000502:	64b9      	str	r1, [r7, #72]	@ 0x48
20000504:	647a      	str	r2, [r7, #68]	@ 0x44
20000506:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t retval = 0;
20000508:	2300      	movs	r3, #0
2000050a:	667b      	str	r3, [r7, #100]	@ 0x64
	uint64_t tempWriteVal = 0;
2000050c:	f04f 0200 	mov.w	r2, #0
20000510:	f04f 0300 	mov.w	r3, #0
20000514:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	uint64_t data_in_temp;

	tempWriteVal |= read & 0x1;
20000518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000051a:	2200      	movs	r2, #0
2000051c:	63bb      	str	r3, [r7, #56]	@ 0x38
2000051e:	63fa      	str	r2, [r7, #60]	@ 0x3c
20000520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000522:	f003 0401 	and.w	r4, r3, #1
20000526:	2500      	movs	r5, #0
20000528:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
2000052c:	ea42 0104 	orr.w	r1, r2, r4
20000530:	6139      	str	r1, [r7, #16]
20000532:	432b      	orrs	r3, r5
20000534:	617b      	str	r3, [r7, #20]
20000536:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
2000053a:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (dp_reg & 0x3) << 1;
2000053e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000540:	005b      	lsls	r3, r3, #1
20000542:	2200      	movs	r2, #0
20000544:	633b      	str	r3, [r7, #48]	@ 0x30
20000546:	637a      	str	r2, [r7, #52]	@ 0x34
20000548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000054a:	f003 0a06 	and.w	sl, r3, #6
2000054e:	f04f 0b00 	mov.w	fp, #0
20000552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20000556:	ea42 010a 	orr.w	r1, r2, sl
2000055a:	60b9      	str	r1, [r7, #8]
2000055c:	ea43 030b 	orr.w	r3, r3, fp
20000560:	60fb      	str	r3, [r7, #12]
20000562:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
20000566:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (uint64_t)data_out << 3;
2000056a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000056c:	2200      	movs	r2, #0
2000056e:	62bb      	str	r3, [r7, #40]	@ 0x28
20000570:	62fa      	str	r2, [r7, #44]	@ 0x2c
20000572:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
20000576:	460b      	mov	r3, r1
20000578:	ea4f 7953 	mov.w	r9, r3, lsr #29
2000057c:	460b      	mov	r3, r1
2000057e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
20000582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20000586:	ea42 0108 	orr.w	r1, r2, r8
2000058a:	6039      	str	r1, [r7, #0]
2000058c:	ea43 0309 	orr.w	r3, r3, r9
20000590:	607b      	str	r3, [r7, #4]
20000592:	e9d7 3400 	ldrd	r3, r4, [r7]
20000596:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	// Direct DP access (e.g., CTRLSTAT, IDCODE, ABORT)
	JTAG_ShiftIRSPI(0b1010, CM3_JTAG_IR_LENGTH);
2000059a:	2204      	movs	r2, #4
2000059c:	f04f 000a 	mov.w	r0, #10
200005a0:	f04f 0100 	mov.w	r1, #0
200005a4:	f000 f92a 	bl	200007fc <JTAG_ShiftIRSPI>

	JTAG_ShiftDR_SPI(tempWriteVal, 35, &data_in_temp);
200005a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200005ac:	2223      	movs	r2, #35	@ 0x23
200005ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
200005b2:	f000 fa86 	bl	20000ac2 <JTAG_ShiftDR_SPI>


	if(read)
200005b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200005b8:	2b00      	cmp	r3, #0
200005ba:	d028      	beq.n	2000060e <DPACC+0x116>
	{

		//JTAG_ShiftDR(data_out, 35, &data_in_temp);
		JTAG_ShiftDR_SPI(data_out, 35, &data_in_temp);
200005bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200005be:	2200      	movs	r2, #0
200005c0:	623b      	str	r3, [r7, #32]
200005c2:	627a      	str	r2, [r7, #36]	@ 0x24
200005c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200005c8:	2223      	movs	r2, #35	@ 0x23
200005ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
200005ce:	f000 fa78 	bl	20000ac2 <JTAG_ShiftDR_SPI>

		if( (data_in_temp & 0x7) == 0b010) // 0b010 = OK/FAULT
200005d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
200005d6:	f002 0307 	and.w	r3, r2, #7
200005da:	61bb      	str	r3, [r7, #24]
200005dc:	2300      	movs	r3, #0
200005de:	61fb      	str	r3, [r7, #28]
200005e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
200005e4:	460b      	mov	r3, r1
200005e6:	3b02      	subs	r3, #2
200005e8:	4313      	orrs	r3, r2
200005ea:	d10e      	bne.n	2000060a <DPACC+0x112>
		{
			retval = 1;
200005ec:	2301      	movs	r3, #1
200005ee:	667b      	str	r3, [r7, #100]	@ 0x64
			*data_in = ( (uint64_t)data_in_temp >> 3) & 0xFFFFFFFF;
200005f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
200005f4:	f04f 0200 	mov.w	r2, #0
200005f8:	f04f 0300 	mov.w	r3, #0
200005fc:	08c2      	lsrs	r2, r0, #3
200005fe:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
20000602:	08cb      	lsrs	r3, r1, #3
20000604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000606:	601a      	str	r2, [r3, #0]
20000608:	e001      	b.n	2000060e <DPACC+0x116>
		}
		else  // 0b001 = WAIT
		{
			retval = 0;
2000060a:	2300      	movs	r3, #0
2000060c:	667b      	str	r3, [r7, #100]	@ 0x64
		}


	}

    return retval;
2000060e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
20000610:	4618      	mov	r0, r3
20000612:	3768      	adds	r7, #104	@ 0x68
20000614:	46bd      	mov	sp, r7
20000616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

2000061a <APACC>:

uint32_t APACC (uint32_t data_out, uint32_t *data_in, uint32_t dp_reg ,uint32_t read)
{
2000061a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2000061e:	b09a      	sub	sp, #104	@ 0x68
20000620:	af00      	add	r7, sp, #0
20000622:	64f8      	str	r0, [r7, #76]	@ 0x4c
20000624:	64b9      	str	r1, [r7, #72]	@ 0x48
20000626:	647a      	str	r2, [r7, #68]	@ 0x44
20000628:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t retval = 0;
2000062a:	2300      	movs	r3, #0
2000062c:	667b      	str	r3, [r7, #100]	@ 0x64
	uint64_t tempWriteVal = 0;
2000062e:	f04f 0200 	mov.w	r2, #0
20000632:	f04f 0300 	mov.w	r3, #0
20000636:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	uint64_t data_in_temp;

	tempWriteVal |= read & 0x1;
2000063a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000063c:	2200      	movs	r2, #0
2000063e:	63bb      	str	r3, [r7, #56]	@ 0x38
20000640:	63fa      	str	r2, [r7, #60]	@ 0x3c
20000642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000644:	f003 0401 	and.w	r4, r3, #1
20000648:	2500      	movs	r5, #0
2000064a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
2000064e:	ea42 0104 	orr.w	r1, r2, r4
20000652:	6139      	str	r1, [r7, #16]
20000654:	432b      	orrs	r3, r5
20000656:	617b      	str	r3, [r7, #20]
20000658:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
2000065c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (dp_reg & 0x3) << 1;
20000660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000662:	005b      	lsls	r3, r3, #1
20000664:	2200      	movs	r2, #0
20000666:	633b      	str	r3, [r7, #48]	@ 0x30
20000668:	637a      	str	r2, [r7, #52]	@ 0x34
2000066a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000066c:	f003 0a06 	and.w	sl, r3, #6
20000670:	f04f 0b00 	mov.w	fp, #0
20000674:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20000678:	ea42 010a 	orr.w	r1, r2, sl
2000067c:	60b9      	str	r1, [r7, #8]
2000067e:	ea43 030b 	orr.w	r3, r3, fp
20000682:	60fb      	str	r3, [r7, #12]
20000684:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
20000688:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	tempWriteVal |= (uint64_t)data_out << 3;
2000068c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000068e:	2200      	movs	r2, #0
20000690:	62bb      	str	r3, [r7, #40]	@ 0x28
20000692:	62fa      	str	r2, [r7, #44]	@ 0x2c
20000694:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
20000698:	460b      	mov	r3, r1
2000069a:	ea4f 7953 	mov.w	r9, r3, lsr #29
2000069e:	460b      	mov	r3, r1
200006a0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
200006a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
200006a8:	ea42 0108 	orr.w	r1, r2, r8
200006ac:	6039      	str	r1, [r7, #0]
200006ae:	ea43 0309 	orr.w	r3, r3, r9
200006b2:	607b      	str	r3, [r7, #4]
200006b4:	e9d7 3400 	ldrd	r3, r4, [r7]
200006b8:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

	// Direct AP access (e.g., CTRLSTAT, IDCODE, ABORT)
	JTAG_ShiftIRSPI(0b1011, CM3_JTAG_IR_LENGTH);
200006bc:	2204      	movs	r2, #4
200006be:	f04f 000b 	mov.w	r0, #11
200006c2:	f04f 0100 	mov.w	r1, #0
200006c6:	f000 f899 	bl	200007fc <JTAG_ShiftIRSPI>

	JTAG_ShiftDR_SPI(tempWriteVal, 35, &data_in_temp);
200006ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200006ce:	2223      	movs	r2, #35	@ 0x23
200006d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
200006d4:	f000 f9f5 	bl	20000ac2 <JTAG_ShiftDR_SPI>


	if(read)
200006d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200006da:	2b00      	cmp	r3, #0
200006dc:	d028      	beq.n	20000730 <APACC+0x116>
	{

		//JTAG_ShiftDR(data_out, 35, &data_in_temp);
		JTAG_ShiftDR_SPI(data_out, 35, &data_in_temp);
200006de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200006e0:	2200      	movs	r2, #0
200006e2:	623b      	str	r3, [r7, #32]
200006e4:	627a      	str	r2, [r7, #36]	@ 0x24
200006e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
200006ea:	2223      	movs	r2, #35	@ 0x23
200006ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
200006f0:	f000 f9e7 	bl	20000ac2 <JTAG_ShiftDR_SPI>

		if( (data_in_temp & 0x7) == 0b010) // 0b010 = OK/FAULT
200006f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
200006f8:	f002 0307 	and.w	r3, r2, #7
200006fc:	61bb      	str	r3, [r7, #24]
200006fe:	2300      	movs	r3, #0
20000700:	61fb      	str	r3, [r7, #28]
20000702:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
20000706:	460b      	mov	r3, r1
20000708:	3b02      	subs	r3, #2
2000070a:	4313      	orrs	r3, r2
2000070c:	d10e      	bne.n	2000072c <APACC+0x112>
		{
			retval = 1;
2000070e:	2301      	movs	r3, #1
20000710:	667b      	str	r3, [r7, #100]	@ 0x64
			*data_in = ( (uint64_t)data_in_temp >> 3) & 0xFFFFFFFF;
20000712:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
20000716:	f04f 0200 	mov.w	r2, #0
2000071a:	f04f 0300 	mov.w	r3, #0
2000071e:	08c2      	lsrs	r2, r0, #3
20000720:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
20000724:	08cb      	lsrs	r3, r1, #3
20000726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000728:	601a      	str	r2, [r3, #0]
2000072a:	e001      	b.n	20000730 <APACC+0x116>
		}
		else  // 0b001 = WAIT
		{
			retval = 0;
2000072c:	2300      	movs	r3, #0
2000072e:	667b      	str	r3, [r7, #100]	@ 0x64
		}


	}

    return retval;
20000730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
20000732:	4618      	mov	r0, r3
20000734:	3768      	adds	r7, #104	@ 0x68
20000736:	46bd      	mov	sp, r7
20000738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

2000073c <JTAG_GPIO_Write>:
 * @brief Sets the state of a GPIO pin.
 * @param port GPIO_TypeDef* The GPIO port (e.g., GPIOA, GPIOB).
 * @param pin uint16_t The pin number (e.g., GPIO_PIN_5).
 * @param state GPIO_PinState The desired state (GPIO_PIN_SET or GPIO_PIN_RESET).
 */
void JTAG_GPIO_Write(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state) {
2000073c:	b580      	push	{r7, lr}
2000073e:	b082      	sub	sp, #8
20000740:	af00      	add	r7, sp, #0
20000742:	6078      	str	r0, [r7, #4]
20000744:	460b      	mov	r3, r1
20000746:	807b      	strh	r3, [r7, #2]
20000748:	4613      	mov	r3, r2
2000074a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(port, pin, state); // Using STM32 HAL library function
2000074c:	787a      	ldrb	r2, [r7, #1]
2000074e:	887b      	ldrh	r3, [r7, #2]
20000750:	4619      	mov	r1, r3
20000752:	6878      	ldr	r0, [r7, #4]
20000754:	f002 f8be 	bl	200028d4 <HAL_GPIO_WritePin>
}
20000758:	bf00      	nop
2000075a:	3708      	adds	r7, #8
2000075c:	46bd      	mov	sp, r7
2000075e:	bd80      	pop	{r7, pc}

20000760 <JTAG_Reset_Target>:

void JTAG_Reset_Target(void)
{
20000760:	b580      	push	{r7, lr}
20000762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_RESET);
20000764:	2200      	movs	r2, #0
20000766:	2104      	movs	r1, #4
20000768:	4806      	ldr	r0, [pc, #24]	@ (20000784 <JTAG_Reset_Target+0x24>)
2000076a:	f002 f8b3 	bl	200028d4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
2000076e:	2032      	movs	r0, #50	@ 0x32
20000770:	f001 fa80 	bl	20001c74 <HAL_Delay>
	HAL_GPIO_WritePin(JTAG_SRST_PORT, JTAG_SRST_PIN, GPIO_PIN_SET);
20000774:	2201      	movs	r2, #1
20000776:	2104      	movs	r1, #4
20000778:	4802      	ldr	r0, [pc, #8]	@ (20000784 <JTAG_Reset_Target+0x24>)
2000077a:	f002 f8ab 	bl	200028d4 <HAL_GPIO_WritePin>

}
2000077e:	bf00      	nop
20000780:	bd80      	pop	{r7, pc}
20000782:	bf00      	nop
20000784:	40020c00 	.word	0x40020c00

20000788 <JTAG_Delay_ns>:

/**
 * @brief Introduces a small delay. Crucial for JTAG timing.
 * This needs to be carefully tuned. A simple loop or a timer-based delay.
 */
void JTAG_Delay_ns(uint32_t nanoseconds) {
20000788:	b580      	push	{r7, lr}
2000078a:	b082      	sub	sp, #8
2000078c:	af00      	add	r7, sp, #0
2000078e:	6078      	str	r0, [r7, #4]
    // For bit-banging, even a few clock cycles can matter.
    // Consider using a DWT (Data Watchpoint and Trace) cycle counter for very precise delays,
    // or a TIM (Timer) in one-shot mode. A simple NOP loop might be too slow or imprecise.
    // Example (very rough):
    //for (volatile uint32_t i = 0; i < (nanoseconds / 10); i++); // Adjust divisor based on CPU freq
	HAL_Delay(nanoseconds);
20000790:	6878      	ldr	r0, [r7, #4]
20000792:	f001 fa6f 	bl	20001c74 <HAL_Delay>
}
20000796:	bf00      	nop
20000798:	3708      	adds	r7, #8
2000079a:	46bd      	mov	sp, r7
2000079c:	bd80      	pop	{r7, pc}

2000079e <JTAG_Init>:

/**
 * @brief Initializes JTAG GPIOs.
 * Call this once at the start of your program.
 */
void JTAG_Init(void) {
2000079e:	b580      	push	{r7, lr}
200007a0:	b084      	sub	sp, #16
200007a2:	af02      	add	r7, sp, #8
	uint32_t dummyInVal;

    JTAG_Reset();
200007a4:	f000 f812 	bl	200007cc <JTAG_Reset>

    // Go to run-test/idle state
    SPI_TMS_Transfer(0x001f, 16);
200007a8:	2110      	movs	r1, #16
200007aa:	201f      	movs	r0, #31
200007ac:	f000 ff28 	bl	20001600 <SPI_TMS_Transfer>
    SPI_Transfer(&dummyInVal, 0, 16);
200007b0:	1d39      	adds	r1, r7, #4
200007b2:	2310      	movs	r3, #16
200007b4:	9300      	str	r3, [sp, #0]
200007b6:	f04f 0200 	mov.w	r2, #0
200007ba:	f04f 0300 	mov.w	r3, #0
200007be:	4608      	mov	r0, r1
200007c0:	f000 ff48 	bl	20001654 <SPI_Transfer>
}
200007c4:	bf00      	nop
200007c6:	3708      	adds	r7, #8
200007c8:	46bd      	mov	sp, r7
200007ca:	bd80      	pop	{r7, pc}

200007cc <JTAG_Reset>:

/**
 * @brief Resets the JTAG state machine to Test-Logic-Reset.
 * Can use TRST if available, or sequence TMS.
 */
void JTAG_Reset(void) {
200007cc:	b580      	push	{r7, lr}
200007ce:	af00      	add	r7, sp, #0
    #ifdef JTAG_TRST_PORT
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_RESET); // Assert TRST
200007d0:	2200      	movs	r2, #0
200007d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
200007d6:	4808      	ldr	r0, [pc, #32]	@ (200007f8 <JTAG_Reset+0x2c>)
200007d8:	f7ff ffb0 	bl	2000073c <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS); // Hold for a short period
200007dc:	2001      	movs	r0, #1
200007de:	f7ff ffd3 	bl	20000788 <JTAG_Delay_ns>
    JTAG_GPIO_Write(JTAG_TRST_PORT, JTAG_TRST_PIN, GPIO_PIN_SET);   // De-assert TRST
200007e2:	2201      	movs	r2, #1
200007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
200007e8:	4803      	ldr	r0, [pc, #12]	@ (200007f8 <JTAG_Reset+0x2c>)
200007ea:	f7ff ffa7 	bl	2000073c <JTAG_GPIO_Write>
    JTAG_Delay_ns(DELAY_MS);
200007ee:	2001      	movs	r0, #1
200007f0:	f7ff ffca 	bl	20000788 <JTAG_Delay_ns>
    #else
    // Go to run-test/idle state
    SPI_TMS_Transfer(0x001f, 16);
    SPI_Transfer(&dummyInVal, 0, 16);
	#endif
}
200007f4:	bf00      	nop
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40020800 	.word	0x40020800

200007fc <JTAG_ShiftIRSPI>:
 * Assumes JTAG is in Run-Test/Idle state before call.
 * @param instruction The instruction value to shift in.
 * @param bits The number of bits in the instruction.
 * @return The data shifted out from TDO during the IR shift.
 */
uint64_t JTAG_ShiftIRSPI(uint64_t instruction, uint8_t bits) {
200007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20000800:	b0a7      	sub	sp, #156	@ 0x9c
20000802:	af02      	add	r7, sp, #8
20000804:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
20000808:	4613      	mov	r3, r2
2000080a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint64_t dummyInVal = 0;
2000080e:	f04f 0200 	mov.w	r2, #0
20000812:	f04f 0300 	mov.w	r3, #0
20000816:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    uint32_t remaining_bits = bits;
2000081a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
2000081e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint64_t read_data = 0;
20000822:	f04f 0200 	mov.w	r2, #0
20000826:	f04f 0300 	mov.w	r3, #0
2000082a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    //TODO: handle bits more than 64 bits!!!

    /* move to shift ir */
    uint16_t next_path = 0x3000;
2000082e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
20000832:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

	SPI_TMS_Transfer(next_path, 16);
20000836:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
2000083a:	2110      	movs	r1, #16
2000083c:	4618      	mov	r0, r3
2000083e:	f000 fedf 	bl	20001600 <SPI_TMS_Transfer>
	SPI_Transfer(&dummyInVal, 0, 16);
20000842:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000846:	2310      	movs	r3, #16
20000848:	9300      	str	r3, [sp, #0]
2000084a:	f04f 0200 	mov.w	r2, #0
2000084e:	f04f 0300 	mov.w	r3, #0
20000852:	4608      	mov	r0, r1
20000854:	f000 fefe 	bl	20001654 <SPI_Transfer>


	int i = 0;
20000858:	2300      	movs	r3, #0
2000085a:	67fb      	str	r3, [r7, #124]	@ 0x7c

	while(remaining_bits)
2000085c:	e124      	b.n	20000aa8 <JTAG_ShiftIRSPI+0x2ac>
	{
		uint16_t tms_bit_pos = remaining_bits -1;
2000085e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000862:	b29b      	uxth	r3, r3
20000864:	3b01      	subs	r3, #1
20000866:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

		uint16_t tms_seq = 0x03 << tms_bit_pos;
2000086a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
2000086e:	2303      	movs	r3, #3
20000870:	4093      	lsls	r3, r2
20000872:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		SPI_TMS_Transfer(tms_seq, 16);
20000876:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
2000087a:	2110      	movs	r1, #16
2000087c:	4618      	mov	r0, r3
2000087e:	f000 febf 	bl	20001600 <SPI_TMS_Transfer>
		SPI_Transfer(&dummyInVal, instruction, 16);
20000882:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000886:	2310      	movs	r3, #16
20000888:	9300      	str	r3, [sp, #0]
2000088a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
2000088e:	4608      	mov	r0, r1
20000890:	f000 fee0 	bl	20001654 <SPI_Transfer>

		if(remaining_bits > 16)
20000894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000898:	2b10      	cmp	r3, #16
2000089a:	d934      	bls.n	20000906 <JTAG_ShiftIRSPI+0x10a>
		{
			remaining_bits -= 16;
2000089c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
200008a0:	3b10      	subs	r3, #16
200008a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			instruction >>= 16;
200008a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
200008aa:	f04f 0000 	mov.w	r0, #0
200008ae:	f04f 0100 	mov.w	r1, #0
200008b2:	0c10      	lsrs	r0, r2, #16
200008b4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
200008b8:	0c19      	lsrs	r1, r3, #16
200008ba:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
			read_data |= (dummyInVal << (16 *i) );
200008be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
200008c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
200008c4:	010c      	lsls	r4, r1, #4
200008c6:	f1a4 0120 	sub.w	r1, r4, #32
200008ca:	f1c4 0020 	rsb	r0, r4, #32
200008ce:	fa03 fb04 	lsl.w	fp, r3, r4
200008d2:	fa02 f101 	lsl.w	r1, r2, r1
200008d6:	ea4b 0b01 	orr.w	fp, fp, r1
200008da:	fa22 f000 	lsr.w	r0, r2, r0
200008de:	ea4b 0b00 	orr.w	fp, fp, r0
200008e2:	fa02 fa04 	lsl.w	sl, r2, r4
200008e6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
200008ea:	ea42 010a 	orr.w	r1, r2, sl
200008ee:	61b9      	str	r1, [r7, #24]
200008f0:	ea43 030b 	orr.w	r3, r3, fp
200008f4:	61fb      	str	r3, [r7, #28]
200008f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
200008fa:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
			i++;
200008fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000900:	3301      	adds	r3, #1
20000902:	67fb      	str	r3, [r7, #124]	@ 0x7c
20000904:	e0d0      	b.n	20000aa8 <JTAG_ShiftIRSPI+0x2ac>
		}
		else if(16 == remaining_bits)
20000906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
2000090a:	2b10      	cmp	r3, #16
2000090c:	d145      	bne.n	2000099a <JTAG_ShiftIRSPI+0x19e>
		{

			read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
2000090e:	2201      	movs	r2, #1
20000910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000914:	fa02 f303 	lsl.w	r3, r2, r3
20000918:	3b01      	subs	r3, #1
2000091a:	17da      	asrs	r2, r3, #31
2000091c:	633b      	str	r3, [r7, #48]	@ 0x30
2000091e:	637a      	str	r2, [r7, #52]	@ 0x34
20000920:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000924:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20000926:	4011      	ands	r1, r2
20000928:	64b9      	str	r1, [r7, #72]	@ 0x48
2000092a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
2000092c:	400b      	ands	r3, r1
2000092e:	64fb      	str	r3, [r7, #76]	@ 0x4c
20000930:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000932:	0119      	lsls	r1, r3, #4
20000934:	f1a1 0320 	sub.w	r3, r1, #32
20000938:	f1c1 0220 	rsb	r2, r1, #32
2000093c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
2000093e:	fa00 f601 	lsl.w	r6, r0, r1
20000942:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
20000944:	fa00 f303 	lsl.w	r3, r0, r3
20000948:	431e      	orrs	r6, r3
2000094a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2000094c:	fa23 f202 	lsr.w	r2, r3, r2
20000950:	4316      	orrs	r6, r2
20000952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000954:	fa03 f501 	lsl.w	r5, r3, r1
20000958:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
2000095c:	ea42 0105 	orr.w	r1, r2, r5
20000960:	6139      	str	r1, [r7, #16]
20000962:	4333      	orrs	r3, r6
20000964:	617b      	str	r3, [r7, #20]
20000966:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
2000096a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
			tms_seq = 0x01;
2000096e:	2301      	movs	r3, #1
20000970:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			SPI_TMS_Transfer(tms_seq, 16);
20000974:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000978:	2110      	movs	r1, #16
2000097a:	4618      	mov	r0, r3
2000097c:	f000 fe40 	bl	20001600 <SPI_TMS_Transfer>
			SPI_Transfer(&dummyInVal, instruction, 16);
20000980:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000984:	2310      	movs	r3, #16
20000986:	9300      	str	r3, [sp, #0]
20000988:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
2000098c:	4608      	mov	r0, r1
2000098e:	f000 fe61 	bl	20001654 <SPI_Transfer>

			remaining_bits = 0;
20000992:	2300      	movs	r3, #0
20000994:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
20000998:	e086      	b.n	20000aa8 <JTAG_ShiftIRSPI+0x2ac>
		}
		else if(15 == remaining_bits)
2000099a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
2000099e:	2b0f      	cmp	r3, #15
200009a0:	d14c      	bne.n	20000a3c <JTAG_ShiftIRSPI+0x240>
		{
			read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
200009a2:	2201      	movs	r2, #1
200009a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
200009a8:	fa02 f303 	lsl.w	r3, r2, r3
200009ac:	3b01      	subs	r3, #1
200009ae:	17da      	asrs	r2, r3, #31
200009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
200009b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
200009b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
200009b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
200009ba:	4011      	ands	r1, r2
200009bc:	6439      	str	r1, [r7, #64]	@ 0x40
200009be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
200009c0:	400b      	ands	r3, r1
200009c2:	647b      	str	r3, [r7, #68]	@ 0x44
200009c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
200009c6:	0119      	lsls	r1, r3, #4
200009c8:	f1a1 0320 	sub.w	r3, r1, #32
200009cc:	f1c1 0220 	rsb	r2, r1, #32
200009d0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
200009d2:	4088      	lsls	r0, r1
200009d4:	6578      	str	r0, [r7, #84]	@ 0x54
200009d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
200009d8:	fa00 f303 	lsl.w	r3, r0, r3
200009dc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
200009de:	4318      	orrs	r0, r3
200009e0:	6578      	str	r0, [r7, #84]	@ 0x54
200009e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200009e4:	fa23 f202 	lsr.w	r2, r3, r2
200009e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009ea:	4313      	orrs	r3, r2
200009ec:	657b      	str	r3, [r7, #84]	@ 0x54
200009ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200009f0:	408b      	lsls	r3, r1
200009f2:	653b      	str	r3, [r7, #80]	@ 0x50
200009f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
200009f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
200009fa:	4311      	orrs	r1, r2
200009fc:	60b9      	str	r1, [r7, #8]
200009fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
20000a00:	430b      	orrs	r3, r1
20000a02:	60fb      	str	r3, [r7, #12]
20000a04:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
20000a08:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80

			tms_seq = 0x0;
20000a0c:	2300      	movs	r3, #0
20000a0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			SPI_TMS_Transfer(tms_seq, 16);
20000a12:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000a16:	2110      	movs	r1, #16
20000a18:	4618      	mov	r0, r3
20000a1a:	f000 fdf1 	bl	20001600 <SPI_TMS_Transfer>
			SPI_Transfer(&dummyInVal, 0, 16);
20000a1e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000a22:	2310      	movs	r3, #16
20000a24:	9300      	str	r3, [sp, #0]
20000a26:	f04f 0200 	mov.w	r2, #0
20000a2a:	f04f 0300 	mov.w	r3, #0
20000a2e:	4608      	mov	r0, r1
20000a30:	f000 fe10 	bl	20001654 <SPI_Transfer>

			remaining_bits = 0;
20000a34:	2300      	movs	r3, #0
20000a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
20000a3a:	e035      	b.n	20000aa8 <JTAG_ShiftIRSPI+0x2ac>

		}
		else
		{
			read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
20000a3c:	2201      	movs	r2, #1
20000a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000a42:	fa02 f303 	lsl.w	r3, r2, r3
20000a46:	3b01      	subs	r3, #1
20000a48:	17da      	asrs	r2, r3, #31
20000a4a:	623b      	str	r3, [r7, #32]
20000a4c:	627a      	str	r2, [r7, #36]	@ 0x24
20000a4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000a52:	6a39      	ldr	r1, [r7, #32]
20000a54:	4011      	ands	r1, r2
20000a56:	63b9      	str	r1, [r7, #56]	@ 0x38
20000a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20000a5a:	400b      	ands	r3, r1
20000a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
20000a5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000a60:	0119      	lsls	r1, r3, #4
20000a62:	f1a1 0320 	sub.w	r3, r1, #32
20000a66:	f1c1 0220 	rsb	r2, r1, #32
20000a6a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
20000a6c:	fa00 f901 	lsl.w	r9, r0, r1
20000a70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
20000a72:	fa00 f303 	lsl.w	r3, r0, r3
20000a76:	ea49 0903 	orr.w	r9, r9, r3
20000a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000a7c:	fa23 f202 	lsr.w	r2, r3, r2
20000a80:	ea49 0902 	orr.w	r9, r9, r2
20000a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000a86:	fa03 f801 	lsl.w	r8, r3, r1
20000a8a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000a8e:	ea42 0108 	orr.w	r1, r2, r8
20000a92:	6039      	str	r1, [r7, #0]
20000a94:	ea43 0309 	orr.w	r3, r3, r9
20000a98:	607b      	str	r3, [r7, #4]
20000a9a:	e9d7 3400 	ldrd	r3, r4, [r7]
20000a9e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
			remaining_bits = 0;
20000aa2:	2300      	movs	r3, #0
20000aa4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	while(remaining_bits)
20000aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000aac:	2b00      	cmp	r3, #0
20000aae:	f47f aed6 	bne.w	2000085e <JTAG_ShiftIRSPI+0x62>
		}


	}

    return read_data;
20000ab2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
}
20000ab6:	4610      	mov	r0, r2
20000ab8:	4619      	mov	r1, r3
20000aba:	3794      	adds	r7, #148	@ 0x94
20000abc:	46bd      	mov	sp, r7
20000abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

20000ac2 <JTAG_ShiftDR_SPI>:
 * Assumes JTAG is in Run-Test/Idle state before call.
 * @param data_out The data value to shift out.
 * @param bits The number of bits in the data register.
 * @param data_in Pointer to store the data shifted in from TDO. Can be NULL if not needed.
 */
void JTAG_ShiftDR_SPI(uint64_t data_out, uint8_t bits, uint64_t* data_in) {
20000ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20000ac6:	b0a7      	sub	sp, #156	@ 0x9c
20000ac8:	af02      	add	r7, sp, #8
20000aca:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
20000ace:	65bb      	str	r3, [r7, #88]	@ 0x58
20000ad0:	4613      	mov	r3, r2
20000ad2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		uint64_t dummyInVal = 0;
20000ad6:	f04f 0200 	mov.w	r2, #0
20000ada:	f04f 0300 	mov.w	r3, #0
20000ade:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    uint32_t remaining_bits = bits;
20000ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
20000ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	    uint64_t read_data = 0;
20000aea:	f04f 0200 	mov.w	r2, #0
20000aee:	f04f 0300 	mov.w	r3, #0
20000af2:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	    //TODO: handle bits more than 64 bits!!!

	    /* move to shift dr */
	    uint16_t next_path = 0x2000;
20000af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20000afa:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

		SPI_TMS_Transfer(next_path, 16);
20000afe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
20000b02:	2110      	movs	r1, #16
20000b04:	4618      	mov	r0, r3
20000b06:	f000 fd7b 	bl	20001600 <SPI_TMS_Transfer>
		SPI_Transfer(&dummyInVal, 0, 16);
20000b0a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000b0e:	2310      	movs	r3, #16
20000b10:	9300      	str	r3, [sp, #0]
20000b12:	f04f 0200 	mov.w	r2, #0
20000b16:	f04f 0300 	mov.w	r3, #0
20000b1a:	4608      	mov	r0, r1
20000b1c:	f000 fd9a 	bl	20001654 <SPI_Transfer>


		int i = 0;
20000b20:	2300      	movs	r3, #0
20000b22:	67fb      	str	r3, [r7, #124]	@ 0x7c

		while(remaining_bits)
20000b24:	e124      	b.n	20000d70 <JTAG_ShiftDR_SPI+0x2ae>
		{
			uint16_t tms_bit_pos = remaining_bits -1;
20000b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000b2a:	b29b      	uxth	r3, r3
20000b2c:	3b01      	subs	r3, #1
20000b2e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

			uint16_t tms_seq = 0x03 << tms_bit_pos;
20000b32:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
20000b36:	2303      	movs	r3, #3
20000b38:	4093      	lsls	r3, r2
20000b3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			SPI_TMS_Transfer(tms_seq, 16);
20000b3e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000b42:	2110      	movs	r1, #16
20000b44:	4618      	mov	r0, r3
20000b46:	f000 fd5b 	bl	20001600 <SPI_TMS_Transfer>
			SPI_Transfer(&dummyInVal, data_out, 16);
20000b4a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000b4e:	2310      	movs	r3, #16
20000b50:	9300      	str	r3, [sp, #0]
20000b52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
20000b56:	4608      	mov	r0, r1
20000b58:	f000 fd7c 	bl	20001654 <SPI_Transfer>

			if(remaining_bits > 16)
20000b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000b60:	2b10      	cmp	r3, #16
20000b62:	d934      	bls.n	20000bce <JTAG_ShiftDR_SPI+0x10c>
			{
				remaining_bits -= 16;
20000b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000b68:	3b10      	subs	r3, #16
20000b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				data_out >>= 16;
20000b6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
20000b72:	f04f 0000 	mov.w	r0, #0
20000b76:	f04f 0100 	mov.w	r1, #0
20000b7a:	0c10      	lsrs	r0, r2, #16
20000b7c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
20000b80:	0c19      	lsrs	r1, r3, #16
20000b82:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				read_data |= (dummyInVal << (16 *i) );
20000b86:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000b8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
20000b8c:	010c      	lsls	r4, r1, #4
20000b8e:	f1a4 0120 	sub.w	r1, r4, #32
20000b92:	f1c4 0020 	rsb	r0, r4, #32
20000b96:	fa03 fb04 	lsl.w	fp, r3, r4
20000b9a:	fa02 f101 	lsl.w	r1, r2, r1
20000b9e:	ea4b 0b01 	orr.w	fp, fp, r1
20000ba2:	fa22 f000 	lsr.w	r0, r2, r0
20000ba6:	ea4b 0b00 	orr.w	fp, fp, r0
20000baa:	fa02 fa04 	lsl.w	sl, r2, r4
20000bae:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000bb2:	ea42 010a 	orr.w	r1, r2, sl
20000bb6:	61b9      	str	r1, [r7, #24]
20000bb8:	ea43 030b 	orr.w	r3, r3, fp
20000bbc:	61fb      	str	r3, [r7, #28]
20000bbe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
20000bc2:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
				i++;
20000bc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000bc8:	3301      	adds	r3, #1
20000bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
20000bcc:	e0d0      	b.n	20000d70 <JTAG_ShiftDR_SPI+0x2ae>
			}
			else if(16 == remaining_bits)
20000bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000bd2:	2b10      	cmp	r3, #16
20000bd4:	d145      	bne.n	20000c62 <JTAG_ShiftDR_SPI+0x1a0>
			{

				read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
20000bd6:	2201      	movs	r2, #1
20000bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000bdc:	fa02 f303 	lsl.w	r3, r2, r3
20000be0:	3b01      	subs	r3, #1
20000be2:	17da      	asrs	r2, r3, #31
20000be4:	633b      	str	r3, [r7, #48]	@ 0x30
20000be6:	637a      	str	r2, [r7, #52]	@ 0x34
20000be8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000bec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20000bee:	4011      	ands	r1, r2
20000bf0:	64b9      	str	r1, [r7, #72]	@ 0x48
20000bf2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
20000bf4:	400b      	ands	r3, r1
20000bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
20000bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000bfa:	0119      	lsls	r1, r3, #4
20000bfc:	f1a1 0320 	sub.w	r3, r1, #32
20000c00:	f1c1 0220 	rsb	r2, r1, #32
20000c04:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
20000c06:	fa00 f601 	lsl.w	r6, r0, r1
20000c0a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
20000c0c:	fa00 f303 	lsl.w	r3, r0, r3
20000c10:	431e      	orrs	r6, r3
20000c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000c14:	fa23 f202 	lsr.w	r2, r3, r2
20000c18:	4316      	orrs	r6, r2
20000c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000c1c:	fa03 f501 	lsl.w	r5, r3, r1
20000c20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000c24:	ea42 0105 	orr.w	r1, r2, r5
20000c28:	6139      	str	r1, [r7, #16]
20000c2a:	4333      	orrs	r3, r6
20000c2c:	617b      	str	r3, [r7, #20]
20000c2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
20000c32:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
				tms_seq = 0x01;
20000c36:	2301      	movs	r3, #1
20000c38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
				SPI_TMS_Transfer(tms_seq, 16);
20000c3c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000c40:	2110      	movs	r1, #16
20000c42:	4618      	mov	r0, r3
20000c44:	f000 fcdc 	bl	20001600 <SPI_TMS_Transfer>
				SPI_Transfer(&dummyInVal, data_out, 16);
20000c48:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000c4c:	2310      	movs	r3, #16
20000c4e:	9300      	str	r3, [sp, #0]
20000c50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
20000c54:	4608      	mov	r0, r1
20000c56:	f000 fcfd 	bl	20001654 <SPI_Transfer>

				remaining_bits = 0;
20000c5a:	2300      	movs	r3, #0
20000c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
20000c60:	e086      	b.n	20000d70 <JTAG_ShiftDR_SPI+0x2ae>
			}
			else if(15 == remaining_bits)
20000c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000c66:	2b0f      	cmp	r3, #15
20000c68:	d14c      	bne.n	20000d04 <JTAG_ShiftDR_SPI+0x242>
			{
				read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
20000c6a:	2201      	movs	r2, #1
20000c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000c70:	fa02 f303 	lsl.w	r3, r2, r3
20000c74:	3b01      	subs	r3, #1
20000c76:	17da      	asrs	r2, r3, #31
20000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
20000c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
20000c7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
20000c82:	4011      	ands	r1, r2
20000c84:	6439      	str	r1, [r7, #64]	@ 0x40
20000c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
20000c88:	400b      	ands	r3, r1
20000c8a:	647b      	str	r3, [r7, #68]	@ 0x44
20000c8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000c8e:	0119      	lsls	r1, r3, #4
20000c90:	f1a1 0320 	sub.w	r3, r1, #32
20000c94:	f1c1 0220 	rsb	r2, r1, #32
20000c98:	6c78      	ldr	r0, [r7, #68]	@ 0x44
20000c9a:	4088      	lsls	r0, r1
20000c9c:	6578      	str	r0, [r7, #84]	@ 0x54
20000c9e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
20000ca0:	fa00 f303 	lsl.w	r3, r0, r3
20000ca4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000ca6:	4318      	orrs	r0, r3
20000ca8:	6578      	str	r0, [r7, #84]	@ 0x54
20000caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000cac:	fa23 f202 	lsr.w	r2, r3, r2
20000cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000cb2:	4313      	orrs	r3, r2
20000cb4:	657b      	str	r3, [r7, #84]	@ 0x54
20000cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000cb8:	408b      	lsls	r3, r1
20000cba:	653b      	str	r3, [r7, #80]	@ 0x50
20000cbc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000cc0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
20000cc2:	4311      	orrs	r1, r2
20000cc4:	60b9      	str	r1, [r7, #8]
20000cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
20000cc8:	430b      	orrs	r3, r1
20000cca:	60fb      	str	r3, [r7, #12]
20000ccc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
20000cd0:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80

				tms_seq = 0x0;
20000cd4:	2300      	movs	r3, #0
20000cd6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
				SPI_TMS_Transfer(tms_seq, 16);
20000cda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
20000cde:	2110      	movs	r1, #16
20000ce0:	4618      	mov	r0, r3
20000ce2:	f000 fc8d 	bl	20001600 <SPI_TMS_Transfer>
				SPI_Transfer(&dummyInVal, 0, 16);
20000ce6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
20000cea:	2310      	movs	r3, #16
20000cec:	9300      	str	r3, [sp, #0]
20000cee:	f04f 0200 	mov.w	r2, #0
20000cf2:	f04f 0300 	mov.w	r3, #0
20000cf6:	4608      	mov	r0, r1
20000cf8:	f000 fcac 	bl	20001654 <SPI_Transfer>

				remaining_bits = 0;
20000cfc:	2300      	movs	r3, #0
20000cfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
20000d02:	e035      	b.n	20000d70 <JTAG_ShiftDR_SPI+0x2ae>

			}
			else
			{
				read_data |= (dummyInVal & ( (1 << remaining_bits) -1) ) << (16 *i);
20000d04:	2201      	movs	r2, #1
20000d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000d0a:	fa02 f303 	lsl.w	r3, r2, r3
20000d0e:	3b01      	subs	r3, #1
20000d10:	17da      	asrs	r2, r3, #31
20000d12:	623b      	str	r3, [r7, #32]
20000d14:	627a      	str	r2, [r7, #36]	@ 0x24
20000d16:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
20000d1a:	6a39      	ldr	r1, [r7, #32]
20000d1c:	4011      	ands	r1, r2
20000d1e:	63b9      	str	r1, [r7, #56]	@ 0x38
20000d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20000d22:	400b      	ands	r3, r1
20000d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
20000d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
20000d28:	0119      	lsls	r1, r3, #4
20000d2a:	f1a1 0320 	sub.w	r3, r1, #32
20000d2e:	f1c1 0220 	rsb	r2, r1, #32
20000d32:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
20000d34:	fa00 f901 	lsl.w	r9, r0, r1
20000d38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
20000d3a:	fa00 f303 	lsl.w	r3, r0, r3
20000d3e:	ea49 0903 	orr.w	r9, r9, r3
20000d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000d44:	fa23 f202 	lsr.w	r2, r3, r2
20000d48:	ea49 0902 	orr.w	r9, r9, r2
20000d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000d4e:	fa03 f801 	lsl.w	r8, r3, r1
20000d52:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000d56:	ea42 0108 	orr.w	r1, r2, r8
20000d5a:	6039      	str	r1, [r7, #0]
20000d5c:	ea43 0309 	orr.w	r3, r3, r9
20000d60:	607b      	str	r3, [r7, #4]
20000d62:	e9d7 3400 	ldrd	r3, r4, [r7]
20000d66:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
				remaining_bits = 0;
20000d6a:	2300      	movs	r3, #0
20000d6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		while(remaining_bits)
20000d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000d74:	2b00      	cmp	r3, #0
20000d76:	f47f aed6 	bne.w	20000b26 <JTAG_ShiftDR_SPI+0x64>
			}


		}

        *data_in = read_data;
20000d7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
20000d7c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
20000d80:	e9c1 2300 	strd	r2, r3, [r1]
        return;
20000d84:	bf00      	nop

}
20000d86:	3794      	adds	r7, #148	@ 0x94
20000d88:	46bd      	mov	sp, r7
20000d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

20000d90 <JTAG_ReadIDCODE>:

/**
 * @brief Reads a specific JTAG IDCODE from the target device.
 * @return The IDCODE value. Returns 0 if read fails or JTAG not initialized.
 */
uint32_t JTAG_ReadIDCODE(void) {
20000d90:	b580      	push	{r7, lr}
20000d92:	b084      	sub	sp, #16
20000d94:	af00      	add	r7, sp, #0
    uint32_t idcode = 0;
20000d96:	2300      	movs	r3, #0
20000d98:	60fb      	str	r3, [r7, #12]
    // Assume JTAG is in Run-Test/Idle

    // 1. Shift in the IDCODE instruction (typically 0x01 for ARM/standard JTAG devices)
    // The instruction length is device-specific. Common is 5-bit for ARM.
    // You need to know the target device's IR length.
    uint8_t ir_length = 4; // Example for ARM
20000d9a:	2304      	movs	r3, #4
20000d9c:	72fb      	strb	r3, [r7, #11]
    JTAG_ShiftIRSPI(0xE, ir_length);
20000d9e:	7afb      	ldrb	r3, [r7, #11]
20000da0:	461a      	mov	r2, r3
20000da2:	f04f 000e 	mov.w	r0, #14
20000da6:	f04f 0100 	mov.w	r1, #0
20000daa:	f7ff fd27 	bl	200007fc <JTAG_ShiftIRSPI>
    //JTAG_ShiftIRSPI(0xF, ir_length);

    // 2. Shift out the 32-bit IDCODE data register
    uint64_t read_idcode = 0;
20000dae:	f04f 0200 	mov.w	r2, #0
20000db2:	f04f 0300 	mov.w	r3, #0
20000db6:	e9c7 2300 	strd	r2, r3, [r7]
    //JTAG_ShiftDR(0x00000000, 32, &read_idcode); // TDI doesn't matter, shifting in 0s
    JTAG_ShiftDR_SPI(0x80000001, 32, &read_idcode); // TDI doesn't matter, shifting in 0s
20000dba:	463b      	mov	r3, r7
20000dbc:	2220      	movs	r2, #32
20000dbe:	4807      	ldr	r0, [pc, #28]	@ (20000ddc <JTAG_ReadIDCODE+0x4c>)
20000dc0:	f04f 0100 	mov.w	r1, #0
20000dc4:	f7ff fe7d 	bl	20000ac2 <JTAG_ShiftDR_SPI>

    idcode = (uint32_t)read_idcode;
20000dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
20000dcc:	4613      	mov	r3, r2
20000dce:	60fb      	str	r3, [r7, #12]
    return idcode;
20000dd0:	68fb      	ldr	r3, [r7, #12]
}
20000dd2:	4618      	mov	r0, r3
20000dd4:	3710      	adds	r7, #16
20000dd6:	46bd      	mov	sp, r7
20000dd8:	bd80      	pop	{r7, pc}
20000dda:	bf00      	nop
20000ddc:	80000001 	.word	0x80000001

20000de0 <JTAG_MeasureIRLength>:
 * It assumes the device is in the Run-Test/Idle state before the call.
 * @return The measured IR length, or 0 if measurement fails or an unexpected TDO pattern is observed.
 * A return value of 0 might indicate an issue with JTAG communication or a non-standard device.
 */
uint8_t JTAG_MeasureIRLength(void)
{//TODO: handle IRlen try more than 32 bit.
20000de0:	b580      	push	{r7, lr}
20000de2:	b086      	sub	sp, #24
20000de4:	af00      	add	r7, sp, #0
	uint32_t return_bits;
	int ir_len = 1;
20000de6:	2301      	movs	r3, #1
20000de8:	613b      	str	r3, [r7, #16]
	int i;
	const uint32_t bit_pattern = 0xDEADBEEF;
20000dea:	4b1b      	ldr	r3, [pc, #108]	@ (20000e58 <JTAG_MeasureIRLength+0x78>)
20000dec:	607b      	str	r3, [r7, #4]
	uint32_t try_bit_cnt = 32;
20000dee:	2320      	movs	r3, #32
20000df0:	60bb      	str	r3, [r7, #8]

	return_bits = JTAG_ShiftIRSPI(bit_pattern, try_bit_cnt);
20000df2:	687b      	ldr	r3, [r7, #4]
20000df4:	2200      	movs	r2, #0
20000df6:	4618      	mov	r0, r3
20000df8:	4611      	mov	r1, r2
20000dfa:	68bb      	ldr	r3, [r7, #8]
20000dfc:	b2db      	uxtb	r3, r3
20000dfe:	461a      	mov	r2, r3
20000e00:	f7ff fcfc 	bl	200007fc <JTAG_ShiftIRSPI>
20000e04:	4602      	mov	r2, r0
20000e06:	460b      	mov	r3, r1
20000e08:	4613      	mov	r3, r2
20000e0a:	617b      	str	r3, [r7, #20]

	for(i = 0; i < try_bit_cnt; i++)
20000e0c:	2300      	movs	r3, #0
20000e0e:	60fb      	str	r3, [r7, #12]
20000e10:	e018      	b.n	20000e44 <JTAG_MeasureIRLength+0x64>
	{
		uint32_t mask = (1 << try_bit_cnt) - 1;
20000e12:	2201      	movs	r2, #1
20000e14:	68bb      	ldr	r3, [r7, #8]
20000e16:	fa02 f303 	lsl.w	r3, r2, r3
20000e1a:	3b01      	subs	r3, #1
20000e1c:	603b      	str	r3, [r7, #0]
		if( (return_bits & mask) == (bit_pattern & mask) )
20000e1e:	697a      	ldr	r2, [r7, #20]
20000e20:	687b      	ldr	r3, [r7, #4]
20000e22:	405a      	eors	r2, r3
20000e24:	683b      	ldr	r3, [r7, #0]
20000e26:	4013      	ands	r3, r2
20000e28:	2b00      	cmp	r3, #0
20000e2a:	d102      	bne.n	20000e32 <JTAG_MeasureIRLength+0x52>
		{
			ir_len = i;
20000e2c:	68fb      	ldr	r3, [r7, #12]
20000e2e:	613b      	str	r3, [r7, #16]
			break;
20000e30:	e00c      	b.n	20000e4c <JTAG_MeasureIRLength+0x6c>
		}
		else
		{
			return_bits >>= 1;
20000e32:	697b      	ldr	r3, [r7, #20]
20000e34:	085b      	lsrs	r3, r3, #1
20000e36:	617b      	str	r3, [r7, #20]
			try_bit_cnt--;
20000e38:	68bb      	ldr	r3, [r7, #8]
20000e3a:	3b01      	subs	r3, #1
20000e3c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < try_bit_cnt; i++)
20000e3e:	68fb      	ldr	r3, [r7, #12]
20000e40:	3301      	adds	r3, #1
20000e42:	60fb      	str	r3, [r7, #12]
20000e44:	68fb      	ldr	r3, [r7, #12]
20000e46:	68ba      	ldr	r2, [r7, #8]
20000e48:	429a      	cmp	r2, r3
20000e4a:	d8e2      	bhi.n	20000e12 <JTAG_MeasureIRLength+0x32>

		}
	}
    return ir_len;
20000e4c:	693b      	ldr	r3, [r7, #16]
20000e4e:	b2db      	uxtb	r3, r3
}
20000e50:	4618      	mov	r0, r3
20000e52:	3718      	adds	r7, #24
20000e54:	46bd      	mov	sp, r7
20000e56:	bd80      	pop	{r7, pc}
20000e58:	deadbeef 	.word	0xdeadbeef

20000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000e5c:	b580      	push	{r7, lr}
20000e5e:	b090      	sub	sp, #64	@ 0x40
20000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000e62:	f000 feaa 	bl	20001bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20000e66:	f000 f8e3 	bl	20001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000e6a:	f000 fa45 	bl	200012f8 <MX_GPIO_Init>
  MX_ETH_Init();
20000e6e:	f000 f94d 	bl	2000110c <MX_ETH_Init>
  MX_USART3_UART_Init();
20000e72:	f000 fa11 	bl	20001298 <MX_USART3_UART_Init>
  MX_SPI1_Init();
20000e76:	f000 f997 	bl	200011a8 <MX_SPI1_Init>
  MX_SPI4_Init();
20000e7a:	f000 f9d3 	bl	20001224 <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
20000e7e:	f008 f823 	bl	20008ec8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  RCC->APB1ENR |= (1 << 15);
20000e82:	4b63      	ldr	r3, [pc, #396]	@ (20001010 <main+0x1b4>)
20000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000e86:	4a62      	ldr	r2, [pc, #392]	@ (20001010 <main+0x1b4>)
20000e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20000e8c:	6413      	str	r3, [r2, #64]	@ 0x40

  Switch_SPI();
20000e8e:	f000 fb3b 	bl	20001508 <Switch_SPI>
  SPI4->CR1 |= (1 << 6);
20000e92:	4b60      	ldr	r3, [pc, #384]	@ (20001014 <main+0x1b8>)
20000e94:	681b      	ldr	r3, [r3, #0]
20000e96:	4a5f      	ldr	r2, [pc, #380]	@ (20001014 <main+0x1b8>)
20000e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20000e9c:	6013      	str	r3, [r2, #0]

  uint8_t wrBuff[16] = {0};
20000e9e:	2300      	movs	r3, #0
20000ea0:	61bb      	str	r3, [r7, #24]
20000ea2:	f107 031c 	add.w	r3, r7, #28
20000ea6:	2200      	movs	r2, #0
20000ea8:	601a      	str	r2, [r3, #0]
20000eaa:	605a      	str	r2, [r3, #4]
20000eac:	609a      	str	r2, [r3, #8]
  uint8_t rdBuff[16] = {0};
20000eae:	2300      	movs	r3, #0
20000eb0:	60bb      	str	r3, [r7, #8]
20000eb2:	f107 030c 	add.w	r3, r7, #12
20000eb6:	2200      	movs	r2, #0
20000eb8:	601a      	str	r2, [r3, #0]
20000eba:	605a      	str	r2, [r3, #4]
20000ebc:	609a      	str	r2, [r3, #8]


  JTAG_Init();
20000ebe:	f7ff fc6e 	bl	2000079e <JTAG_Init>
  JTAG_Reset_Target();
20000ec2:	f7ff fc4d 	bl	20000760 <JTAG_Reset_Target>

  uint32_t idCode = JTAG_ReadIDCODE();
20000ec6:	f7ff ff63 	bl	20000d90 <JTAG_ReadIDCODE>
20000eca:	63f8      	str	r0, [r7, #60]	@ 0x3c


    uint64_t denemeVal = 0;
20000ecc:	f04f 0200 	mov.w	r2, #0
20000ed0:	f04f 0300 	mov.w	r3, #0
20000ed4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    uint8_t irLen;
    irLen = JTAG_MeasureIRLength();
20000ed8:	f7ff ff82 	bl	20000de0 <JTAG_MeasureIRLength>
20000edc:	4603      	mov	r3, r0
20000ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint32_t apacc_reg;

    uint32_t writeVal;


    writeVal = (1 << 30) | (1 << 28) | (1 << 5);
20000ee2:	4b4d      	ldr	r3, [pc, #308]	@ (20001018 <main+0x1bc>)
20000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    //writeVal = 0xFFffFFff;

    DPACC(writeVal, &dpacc_reg, 1, WRITE);
20000ee6:	1d39      	adds	r1, r7, #4
20000ee8:	2300      	movs	r3, #0
20000eea:	2201      	movs	r2, #1
20000eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000eee:	f7ff fb03 	bl	200004f8 <DPACC>

    DPACC(writeVal, &dpacc_reg, 1, READ);
20000ef2:	1d39      	adds	r1, r7, #4
20000ef4:	2301      	movs	r3, #1
20000ef6:	2201      	movs	r2, #1
20000ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000efa:	f7ff fafd 	bl	200004f8 <DPACC>


    /* read normal data */
    writeVal = 0x00;
20000efe:	2300      	movs	r3, #0
20000f00:	62bb      	str	r3, [r7, #40]	@ 0x28

    DPACC(writeVal, &dpacc_reg, 2, WRITE);
20000f02:	1d39      	adds	r1, r7, #4
20000f04:	2300      	movs	r3, #0
20000f06:	2202      	movs	r2, #2
20000f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000f0a:	f7ff faf5 	bl	200004f8 <DPACC>

    APACC(0x00000002, &apacc_reg, 0,READ);
20000f0e:	4639      	mov	r1, r7
20000f10:	2301      	movs	r3, #1
20000f12:	2200      	movs	r2, #0
20000f14:	2002      	movs	r0, #2
20000f16:	f7ff fb80 	bl	2000061a <APACC>

    APACC( (0x2 | 1 << 29 | 1 << 25) , &apacc_reg, 0,WRITE);
20000f1a:	4639      	mov	r1, r7
20000f1c:	2300      	movs	r3, #0
20000f1e:	2200      	movs	r2, #0
20000f20:	483e      	ldr	r0, [pc, #248]	@ (2000101c <main+0x1c0>)
20000f22:	f7ff fb7a 	bl	2000061a <APACC>

    APACC(0x00000002, &apacc_reg, 0,READ);
20000f26:	4639      	mov	r1, r7
20000f28:	2301      	movs	r3, #1
20000f2a:	2200      	movs	r2, #0
20000f2c:	2002      	movs	r0, #2
20000f2e:	f7ff fb74 	bl	2000061a <APACC>


    APACC(0xE000EDF0, &apacc_reg, 1,WRITE);
20000f32:	4639      	mov	r1, r7
20000f34:	2300      	movs	r3, #0
20000f36:	2201      	movs	r2, #1
20000f38:	4839      	ldr	r0, [pc, #228]	@ (20001020 <main+0x1c4>)
20000f3a:	f7ff fb6e 	bl	2000061a <APACC>

    APACC(DUMMY_WRITE_VAL, &apacc_reg, 1,READ);
20000f3e:	4639      	mov	r1, r7
20000f40:	2301      	movs	r3, #1
20000f42:	2201      	movs	r2, #1
20000f44:	2001      	movs	r0, #1
20000f46:	f7ff fb68 	bl	2000061a <APACC>

    /* this command halts the core */
    APACC(0xA05F0003, &apacc_reg, 3,WRITE);
20000f4a:	4639      	mov	r1, r7
20000f4c:	2300      	movs	r3, #0
20000f4e:	2203      	movs	r2, #3
20000f50:	4834      	ldr	r0, [pc, #208]	@ (20001024 <main+0x1c8>)
20000f52:	f7ff fb62 	bl	2000061a <APACC>


    APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000f56:	4639      	mov	r1, r7
20000f58:	2301      	movs	r3, #1
20000f5a:	2203      	movs	r2, #3
20000f5c:	4832      	ldr	r0, [pc, #200]	@ (20001028 <main+0x1cc>)
20000f5e:	f7ff fb5c 	bl	2000061a <APACC>

    DPACC(writeVal, &dpacc_reg, 1, READ);
20000f62:	1d39      	adds	r1, r7, #4
20000f64:	2301      	movs	r3, #1
20000f66:	2201      	movs	r2, #1
20000f68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000f6a:	f7ff fac5 	bl	200004f8 <DPACC>

    APACC(0xDEADBEEF, &apacc_reg, 3,WRITE);
20000f6e:	4639      	mov	r1, r7
20000f70:	2300      	movs	r3, #0
20000f72:	2203      	movs	r2, #3
20000f74:	482d      	ldr	r0, [pc, #180]	@ (2000102c <main+0x1d0>)
20000f76:	f7ff fb50 	bl	2000061a <APACC>

    APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000f7a:	4639      	mov	r1, r7
20000f7c:	2301      	movs	r3, #1
20000f7e:	2203      	movs	r2, #3
20000f80:	4829      	ldr	r0, [pc, #164]	@ (20001028 <main+0x1cc>)
20000f82:	f7ff fb4a 	bl	2000061a <APACC>

    DPACC(writeVal, &dpacc_reg, 1, READ);
20000f86:	1d39      	adds	r1, r7, #4
20000f88:	2301      	movs	r3, #1
20000f8a:	2201      	movs	r2, #1
20000f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000f8e:	f7ff fab3 	bl	200004f8 <DPACC>

    /* read banked data */

    APACC(0x0, &apacc_reg, 1,WRITE);
20000f92:	4639      	mov	r1, r7
20000f94:	2300      	movs	r3, #0
20000f96:	2201      	movs	r2, #1
20000f98:	2000      	movs	r0, #0
20000f9a:	f7ff fb3e 	bl	2000061a <APACC>

    writeVal = 0x10;
20000f9e:	2310      	movs	r3, #16
20000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28

    DPACC(writeVal, &dpacc_reg, 2, WRITE);
20000fa2:	1d39      	adds	r1, r7, #4
20000fa4:	2300      	movs	r3, #0
20000fa6:	2202      	movs	r2, #2
20000fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000faa:	f7ff faa5 	bl	200004f8 <DPACC>

    APACC(0xAA55AA55, &apacc_reg, 0,READ);
20000fae:	4639      	mov	r1, r7
20000fb0:	2301      	movs	r3, #1
20000fb2:	2200      	movs	r2, #0
20000fb4:	481c      	ldr	r0, [pc, #112]	@ (20001028 <main+0x1cc>)
20000fb6:	f7ff fb30 	bl	2000061a <APACC>

    APACC(0xAA55AA55, &apacc_reg, 1,READ);
20000fba:	4639      	mov	r1, r7
20000fbc:	2301      	movs	r3, #1
20000fbe:	2201      	movs	r2, #1
20000fc0:	4819      	ldr	r0, [pc, #100]	@ (20001028 <main+0x1cc>)
20000fc2:	f7ff fb2a 	bl	2000061a <APACC>

    APACC(0xAA55AA55, &apacc_reg, 2,READ);
20000fc6:	4639      	mov	r1, r7
20000fc8:	2301      	movs	r3, #1
20000fca:	2202      	movs	r2, #2
20000fcc:	4816      	ldr	r0, [pc, #88]	@ (20001028 <main+0x1cc>)
20000fce:	f7ff fb24 	bl	2000061a <APACC>

    APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000fd2:	4639      	mov	r1, r7
20000fd4:	2301      	movs	r3, #1
20000fd6:	2203      	movs	r2, #3
20000fd8:	4813      	ldr	r0, [pc, #76]	@ (20001028 <main+0x1cc>)
20000fda:	f7ff fb1e 	bl	2000061a <APACC>


    /* read ID */

    writeVal = 0xf0;
20000fde:	23f0      	movs	r3, #240	@ 0xf0
20000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

    DPACC(writeVal, &dpacc_reg, 2, WRITE);
20000fe2:	1d39      	adds	r1, r7, #4
20000fe4:	2300      	movs	r3, #0
20000fe6:	2202      	movs	r2, #2
20000fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
20000fea:	f7ff fa85 	bl	200004f8 <DPACC>

    APACC(0xAA55AA55, &apacc_reg, 3,READ);
20000fee:	4639      	mov	r1, r7
20000ff0:	2301      	movs	r3, #1
20000ff2:	2203      	movs	r2, #3
20000ff4:	480c      	ldr	r0, [pc, #48]	@ (20001028 <main+0x1cc>)
20000ff6:	f7ff fb10 	bl	2000061a <APACC>

    APACC(0xAA55AA55, &apacc_reg, 2,READ);
20000ffa:	4639      	mov	r1, r7
20000ffc:	2301      	movs	r3, #1
20000ffe:	2202      	movs	r2, #2
20001000:	4809      	ldr	r0, [pc, #36]	@ (20001028 <main+0x1cc>)
20001002:	f7ff fb0a 	bl	2000061a <APACC>





    idCode = JTAG_ReadIDCODE();
20001006:	f7ff fec3 	bl	20000d90 <JTAG_ReadIDCODE>
2000100a:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000100c:	bf00      	nop
2000100e:	e7fd      	b.n	2000100c <main+0x1b0>
20001010:	40023800 	.word	0x40023800
20001014:	40013400 	.word	0x40013400
20001018:	50000020 	.word	0x50000020
2000101c:	22000002 	.word	0x22000002
20001020:	e000edf0 	.word	0xe000edf0
20001024:	a05f0003 	.word	0xa05f0003
20001028:	aa55aa55 	.word	0xaa55aa55
2000102c:	deadbeef 	.word	0xdeadbeef

20001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20001030:	b580      	push	{r7, lr}
20001032:	b094      	sub	sp, #80	@ 0x50
20001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20001036:	f107 0320 	add.w	r3, r7, #32
2000103a:	2230      	movs	r2, #48	@ 0x30
2000103c:	2100      	movs	r1, #0
2000103e:	4618      	mov	r0, r3
20001040:	f008 fce6 	bl	20009a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20001044:	f107 030c 	add.w	r3, r7, #12
20001048:	2200      	movs	r2, #0
2000104a:	601a      	str	r2, [r3, #0]
2000104c:	605a      	str	r2, [r3, #4]
2000104e:	609a      	str	r2, [r3, #8]
20001050:	60da      	str	r2, [r3, #12]
20001052:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
20001054:	f002 feca 	bl	20003dec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20001058:	4b2a      	ldr	r3, [pc, #168]	@ (20001104 <SystemClock_Config+0xd4>)
2000105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000105c:	4a29      	ldr	r2, [pc, #164]	@ (20001104 <SystemClock_Config+0xd4>)
2000105e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20001062:	6413      	str	r3, [r2, #64]	@ 0x40
20001064:	4b27      	ldr	r3, [pc, #156]	@ (20001104 <SystemClock_Config+0xd4>)
20001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20001068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000106c:	60bb      	str	r3, [r7, #8]
2000106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20001070:	4b25      	ldr	r3, [pc, #148]	@ (20001108 <SystemClock_Config+0xd8>)
20001072:	681b      	ldr	r3, [r3, #0]
20001074:	4a24      	ldr	r2, [pc, #144]	@ (20001108 <SystemClock_Config+0xd8>)
20001076:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
2000107a:	6013      	str	r3, [r2, #0]
2000107c:	4b22      	ldr	r3, [pc, #136]	@ (20001108 <SystemClock_Config+0xd8>)
2000107e:	681b      	ldr	r3, [r3, #0]
20001080:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20001084:	607b      	str	r3, [r7, #4]
20001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20001088:	2301      	movs	r3, #1
2000108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
2000108c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
20001090:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20001092:	2302      	movs	r3, #2
20001094:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20001096:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
2000109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
2000109c:	2304      	movs	r3, #4
2000109e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
200010a0:	23d8      	movs	r3, #216	@ 0xd8
200010a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
200010a4:	2302      	movs	r3, #2
200010a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
200010a8:	2309      	movs	r3, #9
200010aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
200010ac:	f107 0320 	add.w	r3, r7, #32
200010b0:	4618      	mov	r0, r3
200010b2:	f002 fefb 	bl	20003eac <HAL_RCC_OscConfig>
200010b6:	4603      	mov	r3, r0
200010b8:	2b00      	cmp	r3, #0
200010ba:	d001      	beq.n	200010c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
200010bc:	f000 faf5 	bl	200016aa <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
200010c0:	f002 fea4 	bl	20003e0c <HAL_PWREx_EnableOverDrive>
200010c4:	4603      	mov	r3, r0
200010c6:	2b00      	cmp	r3, #0
200010c8:	d001      	beq.n	200010ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
200010ca:	f000 faee 	bl	200016aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
200010ce:	230f      	movs	r3, #15
200010d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
200010d2:	2302      	movs	r3, #2
200010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
200010d6:	2300      	movs	r3, #0
200010d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
200010da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
200010de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
200010e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200010e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
200010e6:	f107 030c 	add.w	r3, r7, #12
200010ea:	2107      	movs	r1, #7
200010ec:	4618      	mov	r0, r3
200010ee:	f003 f981 	bl	200043f4 <HAL_RCC_ClockConfig>
200010f2:	4603      	mov	r3, r0
200010f4:	2b00      	cmp	r3, #0
200010f6:	d001      	beq.n	200010fc <SystemClock_Config+0xcc>
  {
    Error_Handler();
200010f8:	f000 fad7 	bl	200016aa <Error_Handler>
  }
}
200010fc:	bf00      	nop
200010fe:	3750      	adds	r7, #80	@ 0x50
20001100:	46bd      	mov	sp, r7
20001102:	bd80      	pop	{r7, pc}
20001104:	40023800 	.word	0x40023800
20001108:	40007000 	.word	0x40007000

2000110c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
2000110c:	b580      	push	{r7, lr}
2000110e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
20001110:	4b1f      	ldr	r3, [pc, #124]	@ (20001190 <MX_ETH_Init+0x84>)
20001112:	4a20      	ldr	r2, [pc, #128]	@ (20001194 <MX_ETH_Init+0x88>)
20001114:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
20001116:	4b20      	ldr	r3, [pc, #128]	@ (20001198 <MX_ETH_Init+0x8c>)
20001118:	2200      	movs	r2, #0
2000111a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
2000111c:	4b1e      	ldr	r3, [pc, #120]	@ (20001198 <MX_ETH_Init+0x8c>)
2000111e:	2280      	movs	r2, #128	@ 0x80
20001120:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
20001122:	4b1d      	ldr	r3, [pc, #116]	@ (20001198 <MX_ETH_Init+0x8c>)
20001124:	22e1      	movs	r2, #225	@ 0xe1
20001126:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
20001128:	4b1b      	ldr	r3, [pc, #108]	@ (20001198 <MX_ETH_Init+0x8c>)
2000112a:	2200      	movs	r2, #0
2000112c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
2000112e:	4b1a      	ldr	r3, [pc, #104]	@ (20001198 <MX_ETH_Init+0x8c>)
20001130:	2200      	movs	r2, #0
20001132:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
20001134:	4b18      	ldr	r3, [pc, #96]	@ (20001198 <MX_ETH_Init+0x8c>)
20001136:	2200      	movs	r2, #0
20001138:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
2000113a:	4b15      	ldr	r3, [pc, #84]	@ (20001190 <MX_ETH_Init+0x84>)
2000113c:	4a16      	ldr	r2, [pc, #88]	@ (20001198 <MX_ETH_Init+0x8c>)
2000113e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
20001140:	4b13      	ldr	r3, [pc, #76]	@ (20001190 <MX_ETH_Init+0x84>)
20001142:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
20001146:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
20001148:	4b11      	ldr	r3, [pc, #68]	@ (20001190 <MX_ETH_Init+0x84>)
2000114a:	4a14      	ldr	r2, [pc, #80]	@ (2000119c <MX_ETH_Init+0x90>)
2000114c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
2000114e:	4b10      	ldr	r3, [pc, #64]	@ (20001190 <MX_ETH_Init+0x84>)
20001150:	4a13      	ldr	r2, [pc, #76]	@ (200011a0 <MX_ETH_Init+0x94>)
20001152:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
20001154:	4b0e      	ldr	r3, [pc, #56]	@ (20001190 <MX_ETH_Init+0x84>)
20001156:	f240 52f4 	movw	r2, #1524	@ 0x5f4
2000115a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
2000115c:	480c      	ldr	r0, [pc, #48]	@ (20001190 <MX_ETH_Init+0x84>)
2000115e:	f000 febf 	bl	20001ee0 <HAL_ETH_Init>
20001162:	4603      	mov	r3, r0
20001164:	2b00      	cmp	r3, #0
20001166:	d001      	beq.n	2000116c <MX_ETH_Init+0x60>
  {
    Error_Handler();
20001168:	f000 fa9f 	bl	200016aa <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
2000116c:	2238      	movs	r2, #56	@ 0x38
2000116e:	2100      	movs	r1, #0
20001170:	480c      	ldr	r0, [pc, #48]	@ (200011a4 <MX_ETH_Init+0x98>)
20001172:	f008 fc4d 	bl	20009a10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
20001176:	4b0b      	ldr	r3, [pc, #44]	@ (200011a4 <MX_ETH_Init+0x98>)
20001178:	2221      	movs	r2, #33	@ 0x21
2000117a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
2000117c:	4b09      	ldr	r3, [pc, #36]	@ (200011a4 <MX_ETH_Init+0x98>)
2000117e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
20001182:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
20001184:	4b07      	ldr	r3, [pc, #28]	@ (200011a4 <MX_ETH_Init+0x98>)
20001186:	2200      	movs	r2, #0
20001188:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
2000118a:	bf00      	nop
2000118c:	bd80      	pop	{r7, pc}
2000118e:	bf00      	nop
20001190:	20009e8c 	.word	0x20009e8c
20001194:	40028000 	.word	0x40028000
20001198:	2000a098 	.word	0x2000a098
2000119c:	20009d98 	.word	0x20009d98
200011a0:	20009cf8 	.word	0x20009cf8
200011a4:	20009e54 	.word	0x20009e54

200011a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
200011a8:	b580      	push	{r7, lr}
200011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
200011ac:	4b1b      	ldr	r3, [pc, #108]	@ (2000121c <MX_SPI1_Init+0x74>)
200011ae:	4a1c      	ldr	r2, [pc, #112]	@ (20001220 <MX_SPI1_Init+0x78>)
200011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
200011b2:	4b1a      	ldr	r3, [pc, #104]	@ (2000121c <MX_SPI1_Init+0x74>)
200011b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
200011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
200011ba:	4b18      	ldr	r3, [pc, #96]	@ (2000121c <MX_SPI1_Init+0x74>)
200011bc:	2200      	movs	r2, #0
200011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
200011c0:	4b16      	ldr	r3, [pc, #88]	@ (2000121c <MX_SPI1_Init+0x74>)
200011c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
200011c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
200011c8:	4b14      	ldr	r3, [pc, #80]	@ (2000121c <MX_SPI1_Init+0x74>)
200011ca:	2200      	movs	r2, #0
200011cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
200011ce:	4b13      	ldr	r3, [pc, #76]	@ (2000121c <MX_SPI1_Init+0x74>)
200011d0:	2200      	movs	r2, #0
200011d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
200011d4:	4b11      	ldr	r3, [pc, #68]	@ (2000121c <MX_SPI1_Init+0x74>)
200011d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
200011da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
200011dc:	4b0f      	ldr	r3, [pc, #60]	@ (2000121c <MX_SPI1_Init+0x74>)
200011de:	2238      	movs	r2, #56	@ 0x38
200011e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
200011e2:	4b0e      	ldr	r3, [pc, #56]	@ (2000121c <MX_SPI1_Init+0x74>)
200011e4:	2280      	movs	r2, #128	@ 0x80
200011e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
200011e8:	4b0c      	ldr	r3, [pc, #48]	@ (2000121c <MX_SPI1_Init+0x74>)
200011ea:	2200      	movs	r2, #0
200011ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200011ee:	4b0b      	ldr	r3, [pc, #44]	@ (2000121c <MX_SPI1_Init+0x74>)
200011f0:	2200      	movs	r2, #0
200011f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
200011f4:	4b09      	ldr	r3, [pc, #36]	@ (2000121c <MX_SPI1_Init+0x74>)
200011f6:	2207      	movs	r2, #7
200011f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
200011fa:	4b08      	ldr	r3, [pc, #32]	@ (2000121c <MX_SPI1_Init+0x74>)
200011fc:	2200      	movs	r2, #0
200011fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
20001200:	4b06      	ldr	r3, [pc, #24]	@ (2000121c <MX_SPI1_Init+0x74>)
20001202:	2208      	movs	r2, #8
20001204:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
20001206:	4805      	ldr	r0, [pc, #20]	@ (2000121c <MX_SPI1_Init+0x74>)
20001208:	f003 ff0a 	bl	20005020 <HAL_SPI_Init>
2000120c:	4603      	mov	r3, r0
2000120e:	2b00      	cmp	r3, #0
20001210:	d001      	beq.n	20001216 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
20001212:	f000 fa4a 	bl	200016aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
20001216:	bf00      	nop
20001218:	bd80      	pop	{r7, pc}
2000121a:	bf00      	nop
2000121c:	20009f3c 	.word	0x20009f3c
20001220:	40013000 	.word	0x40013000

20001224 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
20001224:	b580      	push	{r7, lr}
20001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
20001228:	4b19      	ldr	r3, [pc, #100]	@ (20001290 <MX_SPI4_Init+0x6c>)
2000122a:	4a1a      	ldr	r2, [pc, #104]	@ (20001294 <MX_SPI4_Init+0x70>)
2000122c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
2000122e:	4b18      	ldr	r3, [pc, #96]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001230:	2200      	movs	r2, #0
20001232:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
20001234:	4b16      	ldr	r3, [pc, #88]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001236:	2200      	movs	r2, #0
20001238:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
2000123a:	4b15      	ldr	r3, [pc, #84]	@ (20001290 <MX_SPI4_Init+0x6c>)
2000123c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
20001240:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
20001242:	4b13      	ldr	r3, [pc, #76]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001244:	2200      	movs	r2, #0
20001246:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
20001248:	4b11      	ldr	r3, [pc, #68]	@ (20001290 <MX_SPI4_Init+0x6c>)
2000124a:	2200      	movs	r2, #0
2000124c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
2000124e:	4b10      	ldr	r3, [pc, #64]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001250:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001254:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_LSB;
20001256:	4b0e      	ldr	r3, [pc, #56]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001258:	2280      	movs	r2, #128	@ 0x80
2000125a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
2000125c:	4b0c      	ldr	r3, [pc, #48]	@ (20001290 <MX_SPI4_Init+0x6c>)
2000125e:	2200      	movs	r2, #0
20001260:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20001262:	4b0b      	ldr	r3, [pc, #44]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001264:	2200      	movs	r2, #0
20001266:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
20001268:	4b09      	ldr	r3, [pc, #36]	@ (20001290 <MX_SPI4_Init+0x6c>)
2000126a:	2207      	movs	r2, #7
2000126c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
2000126e:	4b08      	ldr	r3, [pc, #32]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001270:	2200      	movs	r2, #0
20001272:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
20001274:	4b06      	ldr	r3, [pc, #24]	@ (20001290 <MX_SPI4_Init+0x6c>)
20001276:	2200      	movs	r2, #0
20001278:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
2000127a:	4805      	ldr	r0, [pc, #20]	@ (20001290 <MX_SPI4_Init+0x6c>)
2000127c:	f003 fed0 	bl	20005020 <HAL_SPI_Init>
20001280:	4603      	mov	r3, r0
20001282:	2b00      	cmp	r3, #0
20001284:	d001      	beq.n	2000128a <MX_SPI4_Init+0x66>
  {
    Error_Handler();
20001286:	f000 fa10 	bl	200016aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
2000128a:	bf00      	nop
2000128c:	bd80      	pop	{r7, pc}
2000128e:	bf00      	nop
20001290:	20009fa0 	.word	0x20009fa0
20001294:	40013400 	.word	0x40013400

20001298 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
20001298:	b580      	push	{r7, lr}
2000129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
2000129c:	4b14      	ldr	r3, [pc, #80]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
2000129e:	4a15      	ldr	r2, [pc, #84]	@ (200012f4 <MX_USART3_UART_Init+0x5c>)
200012a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
200012a2:	4b13      	ldr	r3, [pc, #76]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
200012a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
200012aa:	4b11      	ldr	r3, [pc, #68]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012ac:	2200      	movs	r2, #0
200012ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
200012b0:	4b0f      	ldr	r3, [pc, #60]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012b2:	2200      	movs	r2, #0
200012b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
200012b6:	4b0e      	ldr	r3, [pc, #56]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012b8:	2200      	movs	r2, #0
200012ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
200012bc:	4b0c      	ldr	r3, [pc, #48]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012be:	220c      	movs	r2, #12
200012c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
200012c2:	4b0b      	ldr	r3, [pc, #44]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012c4:	2200      	movs	r2, #0
200012c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
200012c8:	4b09      	ldr	r3, [pc, #36]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012ca:	2200      	movs	r2, #0
200012cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
200012ce:	4b08      	ldr	r3, [pc, #32]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012d0:	2200      	movs	r2, #0
200012d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
200012d4:	4b06      	ldr	r3, [pc, #24]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012d6:	2200      	movs	r2, #0
200012d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
200012da:	4805      	ldr	r0, [pc, #20]	@ (200012f0 <MX_USART3_UART_Init+0x58>)
200012dc:	f003 ff4b 	bl	20005176 <HAL_UART_Init>
200012e0:	4603      	mov	r3, r0
200012e2:	2b00      	cmp	r3, #0
200012e4:	d001      	beq.n	200012ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
200012e6:	f000 f9e0 	bl	200016aa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
200012ea:	bf00      	nop
200012ec:	bd80      	pop	{r7, pc}
200012ee:	bf00      	nop
200012f0:	2000a004 	.word	0x2000a004
200012f4:	40004800 	.word	0x40004800

200012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
200012f8:	b580      	push	{r7, lr}
200012fa:	b08c      	sub	sp, #48	@ 0x30
200012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200012fe:	f107 031c 	add.w	r3, r7, #28
20001302:	2200      	movs	r2, #0
20001304:	601a      	str	r2, [r3, #0]
20001306:	605a      	str	r2, [r3, #4]
20001308:	609a      	str	r2, [r3, #8]
2000130a:	60da      	str	r2, [r3, #12]
2000130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
2000130e:	4b79      	ldr	r3, [pc, #484]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001312:	4a78      	ldr	r2, [pc, #480]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001314:	f043 0310 	orr.w	r3, r3, #16
20001318:	6313      	str	r3, [r2, #48]	@ 0x30
2000131a:	4b76      	ldr	r3, [pc, #472]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
2000131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000131e:	f003 0310 	and.w	r3, r3, #16
20001322:	61bb      	str	r3, [r7, #24]
20001324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20001326:	4b73      	ldr	r3, [pc, #460]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000132a:	4a72      	ldr	r2, [pc, #456]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
2000132c:	f043 0304 	orr.w	r3, r3, #4
20001330:	6313      	str	r3, [r2, #48]	@ 0x30
20001332:	4b70      	ldr	r3, [pc, #448]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001336:	f003 0304 	and.w	r3, r3, #4
2000133a:	617b      	str	r3, [r7, #20]
2000133c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000133e:	4b6d      	ldr	r3, [pc, #436]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001342:	4a6c      	ldr	r2, [pc, #432]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20001348:	6313      	str	r3, [r2, #48]	@ 0x30
2000134a:	4b6a      	ldr	r3, [pc, #424]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
2000134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001352:	613b      	str	r3, [r7, #16]
20001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20001356:	4b67      	ldr	r3, [pc, #412]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000135a:	4a66      	ldr	r2, [pc, #408]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
2000135c:	f043 0301 	orr.w	r3, r3, #1
20001360:	6313      	str	r3, [r2, #48]	@ 0x30
20001362:	4b64      	ldr	r3, [pc, #400]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001366:	f003 0301 	and.w	r3, r3, #1
2000136a:	60fb      	str	r3, [r7, #12]
2000136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000136e:	4b61      	ldr	r3, [pc, #388]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001372:	4a60      	ldr	r2, [pc, #384]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001374:	f043 0302 	orr.w	r3, r3, #2
20001378:	6313      	str	r3, [r2, #48]	@ 0x30
2000137a:	4b5e      	ldr	r3, [pc, #376]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
2000137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000137e:	f003 0302 	and.w	r3, r3, #2
20001382:	60bb      	str	r3, [r7, #8]
20001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
20001386:	4b5b      	ldr	r3, [pc, #364]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000138a:	4a5a      	ldr	r2, [pc, #360]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
2000138c:	f043 0308 	orr.w	r3, r3, #8
20001390:	6313      	str	r3, [r2, #48]	@ 0x30
20001392:	4b58      	ldr	r3, [pc, #352]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
20001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001396:	f003 0308 	and.w	r3, r3, #8
2000139a:	607b      	str	r3, [r7, #4]
2000139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
2000139e:	4b55      	ldr	r3, [pc, #340]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
200013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200013a2:	4a54      	ldr	r2, [pc, #336]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
200013a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200013a8:	6313      	str	r3, [r2, #48]	@ 0x30
200013aa:	4b52      	ldr	r3, [pc, #328]	@ (200014f4 <MX_GPIO_Init+0x1fc>)
200013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200013ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200013b2:	603b      	str	r3, [r7, #0]
200013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
200013b6:	2200      	movs	r2, #0
200013b8:	f244 0181 	movw	r1, #16513	@ 0x4081
200013bc:	484e      	ldr	r0, [pc, #312]	@ (200014f8 <MX_GPIO_Init+0x200>)
200013be:	f001 fa89 	bl	200028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
200013c2:	2200      	movs	r2, #0
200013c4:	2140      	movs	r1, #64	@ 0x40
200013c6:	484d      	ldr	r0, [pc, #308]	@ (200014fc <MX_GPIO_Init+0x204>)
200013c8:	f001 fa84 	bl	200028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TRST_Pin|JTAG_TDI_Pin, GPIO_PIN_SET);
200013cc:	2201      	movs	r2, #1
200013ce:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
200013d2:	484b      	ldr	r0, [pc, #300]	@ (20001500 <MX_GPIO_Init+0x208>)
200013d4:	f001 fa7e 	bl	200028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, JTAG_TMS_Pin|JTAG_TCK_Pin, GPIO_PIN_RESET);
200013d8:	2200      	movs	r2, #0
200013da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
200013de:	4848      	ldr	r0, [pc, #288]	@ (20001500 <MX_GPIO_Init+0x208>)
200013e0:	f001 fa78 	bl	200028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JTAG_SRST_GPIO_Port, JTAG_SRST_Pin, GPIO_PIN_SET);
200013e4:	2201      	movs	r2, #1
200013e6:	2104      	movs	r1, #4
200013e8:	4846      	ldr	r0, [pc, #280]	@ (20001504 <MX_GPIO_Init+0x20c>)
200013ea:	f001 fa73 	bl	200028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
200013ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
200013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
200013f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
200013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
200013fa:	2300      	movs	r3, #0
200013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
200013fe:	f107 031c 	add.w	r3, r7, #28
20001402:	4619      	mov	r1, r3
20001404:	483e      	ldr	r0, [pc, #248]	@ (20001500 <MX_GPIO_Init+0x208>)
20001406:	f001 f8b9 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
2000140a:	f244 0381 	movw	r3, #16513	@ 0x4081
2000140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001410:	2301      	movs	r3, #1
20001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001414:	2300      	movs	r3, #0
20001416:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001418:	2300      	movs	r3, #0
2000141a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000141c:	f107 031c 	add.w	r3, r7, #28
20001420:	4619      	mov	r1, r3
20001422:	4835      	ldr	r0, [pc, #212]	@ (200014f8 <MX_GPIO_Init+0x200>)
20001424:	f001 f8aa 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
20001428:	2340      	movs	r3, #64	@ 0x40
2000142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000142c:	2301      	movs	r3, #1
2000142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001430:	2300      	movs	r3, #0
20001432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001434:	2300      	movs	r3, #0
20001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
20001438:	f107 031c 	add.w	r3, r7, #28
2000143c:	4619      	mov	r1, r3
2000143e:	482f      	ldr	r0, [pc, #188]	@ (200014fc <MX_GPIO_Init+0x204>)
20001440:	f001 f89c 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
20001444:	2380      	movs	r3, #128	@ 0x80
20001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20001448:	2300      	movs	r3, #0
2000144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000144c:	2300      	movs	r3, #0
2000144e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
20001450:	f107 031c 	add.w	r3, r7, #28
20001454:	4619      	mov	r1, r3
20001456:	4829      	ldr	r0, [pc, #164]	@ (200014fc <MX_GPIO_Init+0x204>)
20001458:	f001 f890 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TRST_Pin */
  GPIO_InitStruct.Pin = JTAG_TRST_Pin;
2000145c:	f44f 7380 	mov.w	r3, #256	@ 0x100
20001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001462:	2301      	movs	r3, #1
20001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001466:	2300      	movs	r3, #0
20001468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000146a:	2303      	movs	r3, #3
2000146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TRST_GPIO_Port, &GPIO_InitStruct);
2000146e:	f107 031c 	add.w	r3, r7, #28
20001472:	4619      	mov	r1, r3
20001474:	4822      	ldr	r0, [pc, #136]	@ (20001500 <MX_GPIO_Init+0x208>)
20001476:	f001 f881 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pins : JTAG_TMS_Pin JTAG_TCK_Pin */
  GPIO_InitStruct.Pin = JTAG_TMS_Pin|JTAG_TCK_Pin;
2000147a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
2000147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001480:	2301      	movs	r3, #1
20001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20001484:	2302      	movs	r3, #2
20001486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001488:	2303      	movs	r3, #3
2000148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2000148c:	f107 031c 	add.w	r3, r7, #28
20001490:	4619      	mov	r1, r3
20001492:	481b      	ldr	r0, [pc, #108]	@ (20001500 <MX_GPIO_Init+0x208>)
20001494:	f001 f872 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDO_Pin */
  GPIO_InitStruct.Pin = JTAG_TDO_Pin;
20001498:	f44f 6300 	mov.w	r3, #2048	@ 0x800
2000149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
2000149e:	2300      	movs	r3, #0
200014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200014a2:	2301      	movs	r3, #1
200014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JTAG_TDO_GPIO_Port, &GPIO_InitStruct);
200014a6:	f107 031c 	add.w	r3, r7, #28
200014aa:	4619      	mov	r1, r3
200014ac:	4814      	ldr	r0, [pc, #80]	@ (20001500 <MX_GPIO_Init+0x208>)
200014ae:	f001 f865 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_TDI_Pin */
  GPIO_InitStruct.Pin = JTAG_TDI_Pin;
200014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200014b8:	2301      	movs	r3, #1
200014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200014bc:	2301      	movs	r3, #1
200014be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200014c0:	2303      	movs	r3, #3
200014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_TDI_GPIO_Port, &GPIO_InitStruct);
200014c4:	f107 031c 	add.w	r3, r7, #28
200014c8:	4619      	mov	r1, r3
200014ca:	480d      	ldr	r0, [pc, #52]	@ (20001500 <MX_GPIO_Init+0x208>)
200014cc:	f001 f856 	bl	2000257c <HAL_GPIO_Init>

  /*Configure GPIO pin : JTAG_SRST_Pin */
  GPIO_InitStruct.Pin = JTAG_SRST_Pin;
200014d0:	2304      	movs	r3, #4
200014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200014d4:	2301      	movs	r3, #1
200014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
200014d8:	2301      	movs	r3, #1
200014da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200014dc:	2303      	movs	r3, #3
200014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(JTAG_SRST_GPIO_Port, &GPIO_InitStruct);
200014e0:	f107 031c 	add.w	r3, r7, #28
200014e4:	4619      	mov	r1, r3
200014e6:	4807      	ldr	r0, [pc, #28]	@ (20001504 <MX_GPIO_Init+0x20c>)
200014e8:	f001 f848 	bl	2000257c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
200014ec:	bf00      	nop
200014ee:	3730      	adds	r7, #48	@ 0x30
200014f0:	46bd      	mov	sp, r7
200014f2:	bd80      	pop	{r7, pc}
200014f4:	40023800 	.word	0x40023800
200014f8:	40020400 	.word	0x40020400
200014fc:	40021800 	.word	0x40021800
20001500:	40020800 	.word	0x40020800
20001504:	40020c00 	.word	0x40020c00

20001508 <Switch_SPI>:

/* USER CODE BEGIN 4 */

uint32_t pupdr, afr, moder;
void Switch_SPI(void)
{
20001508:	b480      	push	{r7}
2000150a:	af00      	add	r7, sp, #0
	pupdr = GPIOC->PUPDR;
2000150c:	4b0f      	ldr	r3, [pc, #60]	@ (2000154c <Switch_SPI+0x44>)
2000150e:	68db      	ldr	r3, [r3, #12]
20001510:	4a0f      	ldr	r2, [pc, #60]	@ (20001550 <Switch_SPI+0x48>)
20001512:	6013      	str	r3, [r2, #0]
	afr = GPIOC->AFR[1];
20001514:	4b0d      	ldr	r3, [pc, #52]	@ (2000154c <Switch_SPI+0x44>)
20001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20001518:	4a0e      	ldr	r2, [pc, #56]	@ (20001554 <Switch_SPI+0x4c>)
2000151a:	6013      	str	r3, [r2, #0]
	moder = GPIOC->MODER;
2000151c:	4b0b      	ldr	r3, [pc, #44]	@ (2000154c <Switch_SPI+0x44>)
2000151e:	681b      	ldr	r3, [r3, #0]
20001520:	4a0d      	ldr	r2, [pc, #52]	@ (20001558 <Switch_SPI+0x50>)
20001522:	6013      	str	r3, [r2, #0]

	GPIOC->PUPDR = (0x1 << 16);
20001524:	4b09      	ldr	r3, [pc, #36]	@ (2000154c <Switch_SPI+0x44>)
20001526:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
2000152a:	60da      	str	r2, [r3, #12]
	GPIOC->AFR[1] = (0x6 << 8) | (0x6 << 12) | (0x6 << 16);
2000152c:	4b07      	ldr	r3, [pc, #28]	@ (2000154c <Switch_SPI+0x44>)
2000152e:	4a0b      	ldr	r2, [pc, #44]	@ (2000155c <Switch_SPI+0x54>)
20001530:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOC->MODER = (1 << 16) | (0x1 << 18) | (0x2 << 20) | (0x2 << 22 )| (0x2 << 24);
20001532:	4b06      	ldr	r3, [pc, #24]	@ (2000154c <Switch_SPI+0x44>)
20001534:	4a0a      	ldr	r2, [pc, #40]	@ (20001560 <Switch_SPI+0x58>)
20001536:	601a      	str	r2, [r3, #0]

	SPI3->CR1 = (0x1 << 8) | (0x1 << 9) |
20001538:	4b0a      	ldr	r3, [pc, #40]	@ (20001564 <Switch_SPI+0x5c>)
2000153a:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
2000153e:	601a      	str	r2, [r3, #0]
			(1 << 2) | (0x7 << 3) | (0x1 << 7) |
			(0x1 << 6);


}
20001540:	bf00      	nop
20001542:	46bd      	mov	sp, r7
20001544:	f85d 7b04 	ldr.w	r7, [sp], #4
20001548:	4770      	bx	lr
2000154a:	bf00      	nop
2000154c:	40020800 	.word	0x40020800
20001550:	2000a08c 	.word	0x2000a08c
20001554:	2000a090 	.word	0x2000a090
20001558:	2000a094 	.word	0x2000a094
2000155c:	00066600 	.word	0x00066600
20001560:	02a50000 	.word	0x02a50000
20001564:	40003c00 	.word	0x40003c00

20001568 <WaitForStart>:
	GPIOC->MODER = moder;

}

static inline void WaitForStart(void)
{
20001568:	b480      	push	{r7}
2000156a:	af00      	add	r7, sp, #0
	while( !(SPI3->SR & (0x1 << 7) ) );
2000156c:	bf00      	nop
2000156e:	4b06      	ldr	r3, [pc, #24]	@ (20001588 <WaitForStart+0x20>)
20001570:	689b      	ldr	r3, [r3, #8]
20001572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001576:	2b00      	cmp	r3, #0
20001578:	d0f9      	beq.n	2000156e <WaitForStart+0x6>
}
2000157a:	bf00      	nop
2000157c:	bf00      	nop
2000157e:	46bd      	mov	sp, r7
20001580:	f85d 7b04 	ldr.w	r7, [sp], #4
20001584:	4770      	bx	lr
20001586:	bf00      	nop
20001588:	40003c00 	.word	0x40003c00

2000158c <WaitForComplete>:

static inline void WaitForComplete(void)
{
2000158c:	b480      	push	{r7}
2000158e:	af00      	add	r7, sp, #0
	while( (SPI3->SR & (0x1 << 7) ) );
20001590:	bf00      	nop
20001592:	4b06      	ldr	r3, [pc, #24]	@ (200015ac <WaitForComplete+0x20>)
20001594:	689b      	ldr	r3, [r3, #8]
20001596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000159a:	2b00      	cmp	r3, #0
2000159c:	d1f9      	bne.n	20001592 <WaitForComplete+0x6>
}
2000159e:	bf00      	nop
200015a0:	bf00      	nop
200015a2:	46bd      	mov	sp, r7
200015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200015a8:	4770      	bx	lr
200015aa:	bf00      	nop
200015ac:	40003c00 	.word	0x40003c00

200015b0 <xFer>:

static inline void xFer(uint32_t *rdData, uint32_t wrData, uint8_t bitSize)
{
200015b0:	b580      	push	{r7, lr}
200015b2:	b084      	sub	sp, #16
200015b4:	af00      	add	r7, sp, #0
200015b6:	60f8      	str	r0, [r7, #12]
200015b8:	60b9      	str	r1, [r7, #8]
200015ba:	4613      	mov	r3, r2
200015bc:	71fb      	strb	r3, [r7, #7]
	SPI3->CR2 = ( (bitSize -1) << 8);
200015be:	79fb      	ldrb	r3, [r7, #7]
200015c0:	3b01      	subs	r3, #1
200015c2:	021a      	lsls	r2, r3, #8
200015c4:	4b0c      	ldr	r3, [pc, #48]	@ (200015f8 <xFer+0x48>)
200015c6:	605a      	str	r2, [r3, #4]

	if(bitSize <= 8)
200015c8:	79fb      	ldrb	r3, [r7, #7]
200015ca:	2b08      	cmp	r3, #8
200015cc:	d804      	bhi.n	200015d8 <xFer+0x28>
	{
		*(uint8_t *)&SPI3->DR = wrData;
200015ce:	4b0b      	ldr	r3, [pc, #44]	@ (200015fc <xFer+0x4c>)
200015d0:	68ba      	ldr	r2, [r7, #8]
200015d2:	b2d2      	uxtb	r2, r2
200015d4:	701a      	strb	r2, [r3, #0]
200015d6:	e002      	b.n	200015de <xFer+0x2e>
	}
	else
	{
		SPI3->DR = wrData;
200015d8:	4a07      	ldr	r2, [pc, #28]	@ (200015f8 <xFer+0x48>)
200015da:	68bb      	ldr	r3, [r7, #8]
200015dc:	60d3      	str	r3, [r2, #12]
	}


	WaitForStart();
200015de:	f7ff ffc3 	bl	20001568 <WaitForStart>
	WaitForComplete();
200015e2:	f7ff ffd3 	bl	2000158c <WaitForComplete>

	*rdData = SPI3->DR;
200015e6:	4b04      	ldr	r3, [pc, #16]	@ (200015f8 <xFer+0x48>)
200015e8:	68da      	ldr	r2, [r3, #12]
200015ea:	68fb      	ldr	r3, [r7, #12]
200015ec:	601a      	str	r2, [r3, #0]
}
200015ee:	bf00      	nop
200015f0:	3710      	adds	r7, #16
200015f2:	46bd      	mov	sp, r7
200015f4:	bd80      	pop	{r7, pc}
200015f6:	bf00      	nop
200015f8:	40003c00 	.word	0x40003c00
200015fc:	40003c0c 	.word	0x40003c0c

20001600 <SPI_TMS_Transfer>:


void SPI_TMS_Transfer(uint32_t data, uint8_t bits)
{
20001600:	b480      	push	{r7}
20001602:	b085      	sub	sp, #20
20001604:	af00      	add	r7, sp, #0
20001606:	6078      	str	r0, [r7, #4]
20001608:	460b      	mov	r3, r1
2000160a:	70fb      	strb	r3, [r7, #3]

	int a = 0, b = 0;
2000160c:	2300      	movs	r3, #0
2000160e:	60bb      	str	r3, [r7, #8]
20001610:	2300      	movs	r3, #0
20001612:	60fb      	str	r3, [r7, #12]



	while( (SPI3->SR & (0x1 << 7) ) )
20001614:	e002      	b.n	2000161c <SPI_TMS_Transfer+0x1c>
	{
		b++;
20001616:	68fb      	ldr	r3, [r7, #12]
20001618:	3301      	adds	r3, #1
2000161a:	60fb      	str	r3, [r7, #12]
	while( (SPI3->SR & (0x1 << 7) ) )
2000161c:	4b0a      	ldr	r3, [pc, #40]	@ (20001648 <SPI_TMS_Transfer+0x48>)
2000161e:	689b      	ldr	r3, [r3, #8]
20001620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20001624:	2b00      	cmp	r3, #0
20001626:	d1f6      	bne.n	20001616 <SPI_TMS_Transfer+0x16>
	}


	*(uint16_t *)&SPI4->DR = data;
20001628:	4b08      	ldr	r3, [pc, #32]	@ (2000164c <SPI_TMS_Transfer+0x4c>)
2000162a:	687a      	ldr	r2, [r7, #4]
2000162c:	b292      	uxth	r2, r2
2000162e:	801a      	strh	r2, [r3, #0]

	SPI4->CR2 = ( (bits -1) << 8);
20001630:	78fb      	ldrb	r3, [r7, #3]
20001632:	3b01      	subs	r3, #1
20001634:	021a      	lsls	r2, r3, #8
20001636:	4b06      	ldr	r3, [pc, #24]	@ (20001650 <SPI_TMS_Transfer+0x50>)
20001638:	605a      	str	r2, [r3, #4]


}
2000163a:	bf00      	nop
2000163c:	3714      	adds	r7, #20
2000163e:	46bd      	mov	sp, r7
20001640:	f85d 7b04 	ldr.w	r7, [sp], #4
20001644:	4770      	bx	lr
20001646:	bf00      	nop
20001648:	40003c00 	.word	0x40003c00
2000164c:	4001340c 	.word	0x4001340c
20001650:	40013400 	.word	0x40013400

20001654 <SPI_Transfer>:

int SPI_Transfer(uint64_t *rdData, uint64_t wrData, uint8_t bitSize)
{
20001654:	b5b0      	push	{r4, r5, r7, lr}
20001656:	b088      	sub	sp, #32
20001658:	af00      	add	r7, sp, #0
2000165a:	60f8      	str	r0, [r7, #12]
2000165c:	e9c7 2300 	strd	r2, r3, [r7]
	int retVal = -1;
20001660:	f04f 33ff 	mov.w	r3, #4294967295
20001664:	61fb      	str	r3, [r7, #28]
	int i = 0;
20001666:	2300      	movs	r3, #0
20001668:	61bb      	str	r3, [r7, #24]


	int halfWordIterationCnt = (bitSize / 16) -1;
2000166a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
2000166e:	091b      	lsrs	r3, r3, #4
20001670:	b2db      	uxtb	r3, r3
20001672:	3b01      	subs	r3, #1
20001674:	617b      	str	r3, [r7, #20]
	uint32_t tempReadVal, tempWriteVal;

	*rdData = 0;
20001676:	68f9      	ldr	r1, [r7, #12]
20001678:	f04f 0200 	mov.w	r2, #0
2000167c:	f04f 0300 	mov.w	r3, #0
20001680:	e9c1 2300 	strd	r2, r3, [r1]
	xFer(&tempReadVal, wrData, 16);
20001684:	6839      	ldr	r1, [r7, #0]
20001686:	f107 0310 	add.w	r3, r7, #16
2000168a:	2210      	movs	r2, #16
2000168c:	4618      	mov	r0, r3
2000168e:	f7ff ff8f 	bl	200015b0 <xFer>
	*rdData = tempReadVal;
20001692:	693b      	ldr	r3, [r7, #16]
20001694:	2200      	movs	r2, #0
20001696:	461c      	mov	r4, r3
20001698:	4615      	mov	r5, r2
2000169a:	68fb      	ldr	r3, [r7, #12]
2000169c:	e9c3 4500 	strd	r4, r5, [r3]
	}

	//Switch_GPIO();

#endif
}
200016a0:	bf00      	nop
200016a2:	4618      	mov	r0, r3
200016a4:	3720      	adds	r7, #32
200016a6:	46bd      	mov	sp, r7
200016a8:	bdb0      	pop	{r4, r5, r7, pc}

200016aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
200016aa:	b480      	push	{r7}
200016ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
200016ae:	b672      	cpsid	i
}
200016b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
200016b2:	bf00      	nop
200016b4:	e7fd      	b.n	200016b2 <Error_Handler+0x8>
	...

200016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
200016b8:	b480      	push	{r7}
200016ba:	b083      	sub	sp, #12
200016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
200016be:	4b0f      	ldr	r3, [pc, #60]	@ (200016fc <HAL_MspInit+0x44>)
200016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200016c2:	4a0e      	ldr	r2, [pc, #56]	@ (200016fc <HAL_MspInit+0x44>)
200016c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200016c8:	6413      	str	r3, [r2, #64]	@ 0x40
200016ca:	4b0c      	ldr	r3, [pc, #48]	@ (200016fc <HAL_MspInit+0x44>)
200016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200016d2:	607b      	str	r3, [r7, #4]
200016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200016d6:	4b09      	ldr	r3, [pc, #36]	@ (200016fc <HAL_MspInit+0x44>)
200016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200016da:	4a08      	ldr	r2, [pc, #32]	@ (200016fc <HAL_MspInit+0x44>)
200016dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
200016e0:	6453      	str	r3, [r2, #68]	@ 0x44
200016e2:	4b06      	ldr	r3, [pc, #24]	@ (200016fc <HAL_MspInit+0x44>)
200016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200016e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
200016ea:	603b      	str	r3, [r7, #0]
200016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
200016ee:	bf00      	nop
200016f0:	370c      	adds	r7, #12
200016f2:	46bd      	mov	sp, r7
200016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200016f8:	4770      	bx	lr
200016fa:	bf00      	nop
200016fc:	40023800 	.word	0x40023800

20001700 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
20001700:	b580      	push	{r7, lr}
20001702:	b08e      	sub	sp, #56	@ 0x38
20001704:	af00      	add	r7, sp, #0
20001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2000170c:	2200      	movs	r2, #0
2000170e:	601a      	str	r2, [r3, #0]
20001710:	605a      	str	r2, [r3, #4]
20001712:	609a      	str	r2, [r3, #8]
20001714:	60da      	str	r2, [r3, #12]
20001716:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
20001718:	687b      	ldr	r3, [r7, #4]
2000171a:	681b      	ldr	r3, [r3, #0]
2000171c:	4a4e      	ldr	r2, [pc, #312]	@ (20001858 <HAL_ETH_MspInit+0x158>)
2000171e:	4293      	cmp	r3, r2
20001720:	f040 8096 	bne.w	20001850 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
20001724:	4b4d      	ldr	r3, [pc, #308]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001728:	4a4c      	ldr	r2, [pc, #304]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000172a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
2000172e:	6313      	str	r3, [r2, #48]	@ 0x30
20001730:	4b4a      	ldr	r3, [pc, #296]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20001738:	623b      	str	r3, [r7, #32]
2000173a:	6a3b      	ldr	r3, [r7, #32]
2000173c:	4b47      	ldr	r3, [pc, #284]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001740:	4a46      	ldr	r2, [pc, #280]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001742:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20001746:	6313      	str	r3, [r2, #48]	@ 0x30
20001748:	4b44      	ldr	r3, [pc, #272]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000174a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000174c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
20001750:	61fb      	str	r3, [r7, #28]
20001752:	69fb      	ldr	r3, [r7, #28]
20001754:	4b41      	ldr	r3, [pc, #260]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001758:	4a40      	ldr	r2, [pc, #256]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000175a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000175e:	6313      	str	r3, [r2, #48]	@ 0x30
20001760:	4b3e      	ldr	r3, [pc, #248]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20001768:	61bb      	str	r3, [r7, #24]
2000176a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
2000176c:	4b3b      	ldr	r3, [pc, #236]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001770:	4a3a      	ldr	r2, [pc, #232]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001772:	f043 0304 	orr.w	r3, r3, #4
20001776:	6313      	str	r3, [r2, #48]	@ 0x30
20001778:	4b38      	ldr	r3, [pc, #224]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000177a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000177c:	f003 0304 	and.w	r3, r3, #4
20001780:	617b      	str	r3, [r7, #20]
20001782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
20001784:	4b35      	ldr	r3, [pc, #212]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001788:	4a34      	ldr	r2, [pc, #208]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000178a:	f043 0301 	orr.w	r3, r3, #1
2000178e:	6313      	str	r3, [r2, #48]	@ 0x30
20001790:	4b32      	ldr	r3, [pc, #200]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
20001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001794:	f003 0301 	and.w	r3, r3, #1
20001798:	613b      	str	r3, [r7, #16]
2000179a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2000179c:	4b2f      	ldr	r3, [pc, #188]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
2000179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017a0:	4a2e      	ldr	r2, [pc, #184]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
200017a2:	f043 0302 	orr.w	r3, r3, #2
200017a6:	6313      	str	r3, [r2, #48]	@ 0x30
200017a8:	4b2c      	ldr	r3, [pc, #176]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
200017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017ac:	f003 0302 	and.w	r3, r3, #2
200017b0:	60fb      	str	r3, [r7, #12]
200017b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
200017b4:	4b29      	ldr	r3, [pc, #164]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
200017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017b8:	4a28      	ldr	r2, [pc, #160]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
200017ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200017be:	6313      	str	r3, [r2, #48]	@ 0x30
200017c0:	4b26      	ldr	r3, [pc, #152]	@ (2000185c <HAL_ETH_MspInit+0x15c>)
200017c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200017c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200017c8:	60bb      	str	r3, [r7, #8]
200017ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
200017cc:	2332      	movs	r3, #50	@ 0x32
200017ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200017d0:	2302      	movs	r3, #2
200017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200017d4:	2300      	movs	r3, #0
200017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200017d8:	2303      	movs	r3, #3
200017da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
200017dc:	230b      	movs	r3, #11
200017de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200017e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
200017e4:	4619      	mov	r1, r3
200017e6:	481e      	ldr	r0, [pc, #120]	@ (20001860 <HAL_ETH_MspInit+0x160>)
200017e8:	f000 fec8 	bl	2000257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
200017ec:	2386      	movs	r3, #134	@ 0x86
200017ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200017f0:	2302      	movs	r3, #2
200017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200017f4:	2300      	movs	r3, #0
200017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200017f8:	2303      	movs	r3, #3
200017fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
200017fc:	230b      	movs	r3, #11
200017fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20001800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001804:	4619      	mov	r1, r3
20001806:	4817      	ldr	r0, [pc, #92]	@ (20001864 <HAL_ETH_MspInit+0x164>)
20001808:	f000 feb8 	bl	2000257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
2000180c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20001810:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001812:	2302      	movs	r3, #2
20001814:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001816:	2300      	movs	r3, #0
20001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000181a:	2303      	movs	r3, #3
2000181c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
2000181e:	230b      	movs	r3, #11
20001820:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
20001822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001826:	4619      	mov	r1, r3
20001828:	480f      	ldr	r0, [pc, #60]	@ (20001868 <HAL_ETH_MspInit+0x168>)
2000182a:	f000 fea7 	bl	2000257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
2000182e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
20001832:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001834:	2302      	movs	r3, #2
20001836:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001838:	2300      	movs	r3, #0
2000183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000183c:	2303      	movs	r3, #3
2000183e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
20001840:	230b      	movs	r3, #11
20001842:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
20001844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20001848:	4619      	mov	r1, r3
2000184a:	4808      	ldr	r0, [pc, #32]	@ (2000186c <HAL_ETH_MspInit+0x16c>)
2000184c:	f000 fe96 	bl	2000257c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
20001850:	bf00      	nop
20001852:	3738      	adds	r7, #56	@ 0x38
20001854:	46bd      	mov	sp, r7
20001856:	bd80      	pop	{r7, pc}
20001858:	40028000 	.word	0x40028000
2000185c:	40023800 	.word	0x40023800
20001860:	40020800 	.word	0x40020800
20001864:	40020000 	.word	0x40020000
20001868:	40020400 	.word	0x40020400
2000186c:	40021800 	.word	0x40021800

20001870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
20001870:	b580      	push	{r7, lr}
20001872:	b08c      	sub	sp, #48	@ 0x30
20001874:	af00      	add	r7, sp, #0
20001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001878:	f107 031c 	add.w	r3, r7, #28
2000187c:	2200      	movs	r2, #0
2000187e:	601a      	str	r2, [r3, #0]
20001880:	605a      	str	r2, [r3, #4]
20001882:	609a      	str	r2, [r3, #8]
20001884:	60da      	str	r2, [r3, #12]
20001886:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
20001888:	687b      	ldr	r3, [r7, #4]
2000188a:	681b      	ldr	r3, [r3, #0]
2000188c:	4a3c      	ldr	r2, [pc, #240]	@ (20001980 <HAL_SPI_MspInit+0x110>)
2000188e:	4293      	cmp	r3, r2
20001890:	d144      	bne.n	2000191c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
20001892:	4b3c      	ldr	r3, [pc, #240]	@ (20001984 <HAL_SPI_MspInit+0x114>)
20001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001896:	4a3b      	ldr	r2, [pc, #236]	@ (20001984 <HAL_SPI_MspInit+0x114>)
20001898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
2000189c:	6453      	str	r3, [r2, #68]	@ 0x44
2000189e:	4b39      	ldr	r3, [pc, #228]	@ (20001984 <HAL_SPI_MspInit+0x114>)
200018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200018a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
200018a6:	61bb      	str	r3, [r7, #24]
200018a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
200018aa:	4b36      	ldr	r3, [pc, #216]	@ (20001984 <HAL_SPI_MspInit+0x114>)
200018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018ae:	4a35      	ldr	r2, [pc, #212]	@ (20001984 <HAL_SPI_MspInit+0x114>)
200018b0:	f043 0301 	orr.w	r3, r3, #1
200018b4:	6313      	str	r3, [r2, #48]	@ 0x30
200018b6:	4b33      	ldr	r3, [pc, #204]	@ (20001984 <HAL_SPI_MspInit+0x114>)
200018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018ba:	f003 0301 	and.w	r3, r3, #1
200018be:	617b      	str	r3, [r7, #20]
200018c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
200018c2:	4b30      	ldr	r3, [pc, #192]	@ (20001984 <HAL_SPI_MspInit+0x114>)
200018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018c6:	4a2f      	ldr	r2, [pc, #188]	@ (20001984 <HAL_SPI_MspInit+0x114>)
200018c8:	f043 0302 	orr.w	r3, r3, #2
200018cc:	6313      	str	r3, [r2, #48]	@ 0x30
200018ce:	4b2d      	ldr	r3, [pc, #180]	@ (20001984 <HAL_SPI_MspInit+0x114>)
200018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200018d2:	f003 0302 	and.w	r3, r3, #2
200018d6:	613b      	str	r3, [r7, #16]
200018d8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
200018da:	2360      	movs	r3, #96	@ 0x60
200018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200018de:	2302      	movs	r3, #2
200018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200018e2:	2300      	movs	r3, #0
200018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200018e6:	2303      	movs	r3, #3
200018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
200018ea:	2305      	movs	r3, #5
200018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
200018ee:	f107 031c 	add.w	r3, r7, #28
200018f2:	4619      	mov	r1, r3
200018f4:	4824      	ldr	r0, [pc, #144]	@ (20001988 <HAL_SPI_MspInit+0x118>)
200018f6:	f000 fe41 	bl	2000257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
200018fa:	2320      	movs	r3, #32
200018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200018fe:	2302      	movs	r3, #2
20001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001902:	2300      	movs	r3, #0
20001904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001906:	2303      	movs	r3, #3
20001908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2000190a:	2305      	movs	r3, #5
2000190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000190e:	f107 031c 	add.w	r3, r7, #28
20001912:	4619      	mov	r1, r3
20001914:	481d      	ldr	r0, [pc, #116]	@ (2000198c <HAL_SPI_MspInit+0x11c>)
20001916:	f000 fe31 	bl	2000257c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
2000191a:	e02c      	b.n	20001976 <HAL_SPI_MspInit+0x106>
  else if(hspi->Instance==SPI4)
2000191c:	687b      	ldr	r3, [r7, #4]
2000191e:	681b      	ldr	r3, [r3, #0]
20001920:	4a1b      	ldr	r2, [pc, #108]	@ (20001990 <HAL_SPI_MspInit+0x120>)
20001922:	4293      	cmp	r3, r2
20001924:	d127      	bne.n	20001976 <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
20001926:	4b17      	ldr	r3, [pc, #92]	@ (20001984 <HAL_SPI_MspInit+0x114>)
20001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000192a:	4a16      	ldr	r2, [pc, #88]	@ (20001984 <HAL_SPI_MspInit+0x114>)
2000192c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
20001930:	6453      	str	r3, [r2, #68]	@ 0x44
20001932:	4b14      	ldr	r3, [pc, #80]	@ (20001984 <HAL_SPI_MspInit+0x114>)
20001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2000193a:	60fb      	str	r3, [r7, #12]
2000193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
2000193e:	4b11      	ldr	r3, [pc, #68]	@ (20001984 <HAL_SPI_MspInit+0x114>)
20001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001942:	4a10      	ldr	r2, [pc, #64]	@ (20001984 <HAL_SPI_MspInit+0x114>)
20001944:	f043 0310 	orr.w	r3, r3, #16
20001948:	6313      	str	r3, [r2, #48]	@ 0x30
2000194a:	4b0e      	ldr	r3, [pc, #56]	@ (20001984 <HAL_SPI_MspInit+0x114>)
2000194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000194e:	f003 0310 	and.w	r3, r3, #16
20001952:	60bb      	str	r3, [r7, #8]
20001954:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
20001956:	2364      	movs	r3, #100	@ 0x64
20001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000195a:	2302      	movs	r3, #2
2000195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000195e:	2300      	movs	r3, #0
20001960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001962:	2303      	movs	r3, #3
20001964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
20001966:	2305      	movs	r3, #5
20001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2000196a:	f107 031c 	add.w	r3, r7, #28
2000196e:	4619      	mov	r1, r3
20001970:	4808      	ldr	r0, [pc, #32]	@ (20001994 <HAL_SPI_MspInit+0x124>)
20001972:	f000 fe03 	bl	2000257c <HAL_GPIO_Init>
}
20001976:	bf00      	nop
20001978:	3730      	adds	r7, #48	@ 0x30
2000197a:	46bd      	mov	sp, r7
2000197c:	bd80      	pop	{r7, pc}
2000197e:	bf00      	nop
20001980:	40013000 	.word	0x40013000
20001984:	40023800 	.word	0x40023800
20001988:	40020000 	.word	0x40020000
2000198c:	40020400 	.word	0x40020400
20001990:	40013400 	.word	0x40013400
20001994:	40021000 	.word	0x40021000

20001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
20001998:	b580      	push	{r7, lr}
2000199a:	b0aa      	sub	sp, #168	@ 0xa8
2000199c:	af00      	add	r7, sp, #0
2000199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200019a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
200019a4:	2200      	movs	r2, #0
200019a6:	601a      	str	r2, [r3, #0]
200019a8:	605a      	str	r2, [r3, #4]
200019aa:	609a      	str	r2, [r3, #8]
200019ac:	60da      	str	r2, [r3, #12]
200019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
200019b0:	f107 0310 	add.w	r3, r7, #16
200019b4:	2284      	movs	r2, #132	@ 0x84
200019b6:	2100      	movs	r1, #0
200019b8:	4618      	mov	r0, r3
200019ba:	f008 f829 	bl	20009a10 <memset>
  if(huart->Instance==USART3)
200019be:	687b      	ldr	r3, [r7, #4]
200019c0:	681b      	ldr	r3, [r3, #0]
200019c2:	4a22      	ldr	r2, [pc, #136]	@ (20001a4c <HAL_UART_MspInit+0xb4>)
200019c4:	4293      	cmp	r3, r2
200019c6:	d13c      	bne.n	20001a42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
200019c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
200019cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
200019ce:	2300      	movs	r3, #0
200019d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
200019d2:	f107 0310 	add.w	r3, r7, #16
200019d6:	4618      	mov	r0, r3
200019d8:	f002 ff32 	bl	20004840 <HAL_RCCEx_PeriphCLKConfig>
200019dc:	4603      	mov	r3, r0
200019de:	2b00      	cmp	r3, #0
200019e0:	d001      	beq.n	200019e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
200019e2:	f7ff fe62 	bl	200016aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
200019e6:	4b1a      	ldr	r3, [pc, #104]	@ (20001a50 <HAL_UART_MspInit+0xb8>)
200019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200019ea:	4a19      	ldr	r2, [pc, #100]	@ (20001a50 <HAL_UART_MspInit+0xb8>)
200019ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200019f0:	6413      	str	r3, [r2, #64]	@ 0x40
200019f2:	4b17      	ldr	r3, [pc, #92]	@ (20001a50 <HAL_UART_MspInit+0xb8>)
200019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200019f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
200019fa:	60fb      	str	r3, [r7, #12]
200019fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
200019fe:	4b14      	ldr	r3, [pc, #80]	@ (20001a50 <HAL_UART_MspInit+0xb8>)
20001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001a02:	4a13      	ldr	r2, [pc, #76]	@ (20001a50 <HAL_UART_MspInit+0xb8>)
20001a04:	f043 0308 	orr.w	r3, r3, #8
20001a08:	6313      	str	r3, [r2, #48]	@ 0x30
20001a0a:	4b11      	ldr	r3, [pc, #68]	@ (20001a50 <HAL_UART_MspInit+0xb8>)
20001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001a0e:	f003 0308 	and.w	r3, r3, #8
20001a12:	60bb      	str	r3, [r7, #8]
20001a14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
20001a16:	f44f 7340 	mov.w	r3, #768	@ 0x300
20001a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001a1e:	2302      	movs	r3, #2
20001a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
20001a24:	2301      	movs	r3, #1
20001a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001a2a:	2303      	movs	r3, #3
20001a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
20001a30:	2307      	movs	r3, #7
20001a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20001a36:	f107 0394 	add.w	r3, r7, #148	@ 0x94
20001a3a:	4619      	mov	r1, r3
20001a3c:	4805      	ldr	r0, [pc, #20]	@ (20001a54 <HAL_UART_MspInit+0xbc>)
20001a3e:	f000 fd9d 	bl	2000257c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
20001a42:	bf00      	nop
20001a44:	37a8      	adds	r7, #168	@ 0xa8
20001a46:	46bd      	mov	sp, r7
20001a48:	bd80      	pop	{r7, pc}
20001a4a:	bf00      	nop
20001a4c:	40004800 	.word	0x40004800
20001a50:	40023800 	.word	0x40023800
20001a54:	40020c00 	.word	0x40020c00

20001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20001a58:	b480      	push	{r7}
20001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
20001a5c:	bf00      	nop
20001a5e:	e7fd      	b.n	20001a5c <NMI_Handler+0x4>

20001a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20001a60:	b480      	push	{r7}
20001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20001a64:	bf00      	nop
20001a66:	e7fd      	b.n	20001a64 <HardFault_Handler+0x4>

20001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20001a68:	b480      	push	{r7}
20001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20001a6c:	bf00      	nop
20001a6e:	e7fd      	b.n	20001a6c <MemManage_Handler+0x4>

20001a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20001a70:	b480      	push	{r7}
20001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20001a74:	bf00      	nop
20001a76:	e7fd      	b.n	20001a74 <BusFault_Handler+0x4>

20001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20001a78:	b480      	push	{r7}
20001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001a7c:	bf00      	nop
20001a7e:	e7fd      	b.n	20001a7c <UsageFault_Handler+0x4>

20001a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20001a80:	b480      	push	{r7}
20001a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
20001a84:	bf00      	nop
20001a86:	46bd      	mov	sp, r7
20001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a8c:	4770      	bx	lr

20001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20001a8e:	b480      	push	{r7}
20001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20001a92:	bf00      	nop
20001a94:	46bd      	mov	sp, r7
20001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a9a:	4770      	bx	lr

20001a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20001a9c:	b480      	push	{r7}
20001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20001aa0:	bf00      	nop
20001aa2:	46bd      	mov	sp, r7
20001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001aa8:	4770      	bx	lr

20001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20001aaa:	b580      	push	{r7, lr}
20001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20001aae:	f000 f8c1 	bl	20001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20001ab2:	bf00      	nop
20001ab4:	bd80      	pop	{r7, pc}
	...

20001ab8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
20001ab8:	b580      	push	{r7, lr}
20001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	cnt++;
20001abc:	4b04      	ldr	r3, [pc, #16]	@ (20001ad0 <OTG_FS_IRQHandler+0x18>)
20001abe:	681b      	ldr	r3, [r3, #0]
20001ac0:	3301      	adds	r3, #1
20001ac2:	4a03      	ldr	r2, [pc, #12]	@ (20001ad0 <OTG_FS_IRQHandler+0x18>)
20001ac4:	6013      	str	r3, [r2, #0]

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
20001ac6:	4803      	ldr	r0, [pc, #12]	@ (20001ad4 <OTG_FS_IRQHandler+0x1c>)
20001ac8:	f001 f855 	bl	20002b76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
20001acc:	bf00      	nop
20001ace:	bd80      	pop	{r7, pc}
20001ad0:	2000a0a0 	.word	0x2000a0a0
20001ad4:	2000a590 	.word	0x2000a590

20001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20001ad8:	b580      	push	{r7, lr}
20001ada:	b086      	sub	sp, #24
20001adc:	af00      	add	r7, sp, #0
20001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20001ae0:	4a14      	ldr	r2, [pc, #80]	@ (20001b34 <_sbrk+0x5c>)
20001ae2:	4b15      	ldr	r3, [pc, #84]	@ (20001b38 <_sbrk+0x60>)
20001ae4:	1ad3      	subs	r3, r2, r3
20001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20001ae8:	697b      	ldr	r3, [r7, #20]
20001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20001aec:	4b13      	ldr	r3, [pc, #76]	@ (20001b3c <_sbrk+0x64>)
20001aee:	681b      	ldr	r3, [r3, #0]
20001af0:	2b00      	cmp	r3, #0
20001af2:	d102      	bne.n	20001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20001af4:	4b11      	ldr	r3, [pc, #68]	@ (20001b3c <_sbrk+0x64>)
20001af6:	4a12      	ldr	r2, [pc, #72]	@ (20001b40 <_sbrk+0x68>)
20001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20001afa:	4b10      	ldr	r3, [pc, #64]	@ (20001b3c <_sbrk+0x64>)
20001afc:	681a      	ldr	r2, [r3, #0]
20001afe:	687b      	ldr	r3, [r7, #4]
20001b00:	4413      	add	r3, r2
20001b02:	693a      	ldr	r2, [r7, #16]
20001b04:	429a      	cmp	r2, r3
20001b06:	d207      	bcs.n	20001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
20001b08:	f007 ff9a 	bl	20009a40 <__errno>
20001b0c:	4603      	mov	r3, r0
20001b0e:	220c      	movs	r2, #12
20001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
20001b12:	f04f 33ff 	mov.w	r3, #4294967295
20001b16:	e009      	b.n	20001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20001b18:	4b08      	ldr	r3, [pc, #32]	@ (20001b3c <_sbrk+0x64>)
20001b1a:	681b      	ldr	r3, [r3, #0]
20001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
20001b1e:	4b07      	ldr	r3, [pc, #28]	@ (20001b3c <_sbrk+0x64>)
20001b20:	681a      	ldr	r2, [r3, #0]
20001b22:	687b      	ldr	r3, [r7, #4]
20001b24:	4413      	add	r3, r2
20001b26:	4a05      	ldr	r2, [pc, #20]	@ (20001b3c <_sbrk+0x64>)
20001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20001b2a:	68fb      	ldr	r3, [r7, #12]
}
20001b2c:	4618      	mov	r0, r3
20001b2e:	3718      	adds	r7, #24
20001b30:	46bd      	mov	sp, r7
20001b32:	bd80      	pop	{r7, pc}
20001b34:	20050000 	.word	0x20050000
20001b38:	00000400 	.word	0x00000400
20001b3c:	2000a0a4 	.word	0x2000a0a4
20001b40:	2000abb8 	.word	0x2000abb8

20001b44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001b44:	b480      	push	{r7}
20001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001b48:	4b06      	ldr	r3, [pc, #24]	@ (20001b64 <SystemInit+0x20>)
20001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20001b4e:	4a05      	ldr	r2, [pc, #20]	@ (20001b64 <SystemInit+0x20>)
20001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
20001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20001b58:	bf00      	nop
20001b5a:	46bd      	mov	sp, r7
20001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b60:	4770      	bx	lr
20001b62:	bf00      	nop
20001b64:	e000ed00 	.word	0xe000ed00

20001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20001b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 20001ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
20001b6c:	f7ff ffea 	bl	20001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001b70:	480c      	ldr	r0, [pc, #48]	@ (20001ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
20001b72:	490d      	ldr	r1, [pc, #52]	@ (20001ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
20001b74:	4a0d      	ldr	r2, [pc, #52]	@ (20001bac <LoopFillZerobss+0x1a>)
  movs r3, #0
20001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001b78:	e002      	b.n	20001b80 <LoopCopyDataInit>

20001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001b7e:	3304      	adds	r3, #4

20001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001b84:	d3f9      	bcc.n	20001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001b86:	4a0a      	ldr	r2, [pc, #40]	@ (20001bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
20001b88:	4c0a      	ldr	r4, [pc, #40]	@ (20001bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
20001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
20001b8c:	e001      	b.n	20001b92 <LoopFillZerobss>

20001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001b90:	3204      	adds	r2, #4

20001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001b94:	d3fb      	bcc.n	20001b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
20001b96:	f007 ff59 	bl	20009a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001b9a:	f7ff f95f 	bl	20000e5c <main>
  bx  lr    
20001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20001ba0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
20001ba4:	20009bb8 	.word	0x20009bb8
  ldr r1, =_edata
20001ba8:	20009cf8 	.word	0x20009cf8
  ldr r2, =_sidata
20001bac:	20009bb8 	.word	0x20009bb8
  ldr r2, =_sbss
20001bb0:	20009e38 	.word	0x20009e38
  ldr r4, =_ebss
20001bb4:	2000abb8 	.word	0x2000abb8

20001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001bb8:	e7fe      	b.n	20001bb8 <ADC_IRQHandler>

20001bba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001bba:	b580      	push	{r7, lr}
20001bbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001bbe:	2003      	movs	r0, #3
20001bc0:	f000 f94c 	bl	20001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001bc4:	2000      	movs	r0, #0
20001bc6:	f000 f805 	bl	20001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001bca:	f7ff fd75 	bl	200016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001bce:	2300      	movs	r3, #0
}
20001bd0:	4618      	mov	r0, r3
20001bd2:	bd80      	pop	{r7, pc}

20001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001bd4:	b580      	push	{r7, lr}
20001bd6:	b082      	sub	sp, #8
20001bd8:	af00      	add	r7, sp, #0
20001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001bdc:	4b12      	ldr	r3, [pc, #72]	@ (20001c28 <HAL_InitTick+0x54>)
20001bde:	681a      	ldr	r2, [r3, #0]
20001be0:	4b12      	ldr	r3, [pc, #72]	@ (20001c2c <HAL_InitTick+0x58>)
20001be2:	781b      	ldrb	r3, [r3, #0]
20001be4:	4619      	mov	r1, r3
20001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
20001bea:	fbb3 f3f1 	udiv	r3, r3, r1
20001bee:	fbb2 f3f3 	udiv	r3, r2, r3
20001bf2:	4618      	mov	r0, r3
20001bf4:	f000 f967 	bl	20001ec6 <HAL_SYSTICK_Config>
20001bf8:	4603      	mov	r3, r0
20001bfa:	2b00      	cmp	r3, #0
20001bfc:	d001      	beq.n	20001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20001bfe:	2301      	movs	r3, #1
20001c00:	e00e      	b.n	20001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001c02:	687b      	ldr	r3, [r7, #4]
20001c04:	2b0f      	cmp	r3, #15
20001c06:	d80a      	bhi.n	20001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001c08:	2200      	movs	r2, #0
20001c0a:	6879      	ldr	r1, [r7, #4]
20001c0c:	f04f 30ff 	mov.w	r0, #4294967295
20001c10:	f000 f92f 	bl	20001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001c14:	4a06      	ldr	r2, [pc, #24]	@ (20001c30 <HAL_InitTick+0x5c>)
20001c16:	687b      	ldr	r3, [r7, #4]
20001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001c1a:	2300      	movs	r3, #0
20001c1c:	e000      	b.n	20001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20001c1e:	2301      	movs	r3, #1
}
20001c20:	4618      	mov	r0, r3
20001c22:	3708      	adds	r7, #8
20001c24:	46bd      	mov	sp, r7
20001c26:	bd80      	pop	{r7, pc}
20001c28:	20009bb8 	.word	0x20009bb8
20001c2c:	20009bc0 	.word	0x20009bc0
20001c30:	20009bbc 	.word	0x20009bbc

20001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001c34:	b480      	push	{r7}
20001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001c38:	4b06      	ldr	r3, [pc, #24]	@ (20001c54 <HAL_IncTick+0x20>)
20001c3a:	781b      	ldrb	r3, [r3, #0]
20001c3c:	461a      	mov	r2, r3
20001c3e:	4b06      	ldr	r3, [pc, #24]	@ (20001c58 <HAL_IncTick+0x24>)
20001c40:	681b      	ldr	r3, [r3, #0]
20001c42:	4413      	add	r3, r2
20001c44:	4a04      	ldr	r2, [pc, #16]	@ (20001c58 <HAL_IncTick+0x24>)
20001c46:	6013      	str	r3, [r2, #0]
}
20001c48:	bf00      	nop
20001c4a:	46bd      	mov	sp, r7
20001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c50:	4770      	bx	lr
20001c52:	bf00      	nop
20001c54:	20009bc0 	.word	0x20009bc0
20001c58:	2000a0a8 	.word	0x2000a0a8

20001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001c5c:	b480      	push	{r7}
20001c5e:	af00      	add	r7, sp, #0
  return uwTick;
20001c60:	4b03      	ldr	r3, [pc, #12]	@ (20001c70 <HAL_GetTick+0x14>)
20001c62:	681b      	ldr	r3, [r3, #0]
}
20001c64:	4618      	mov	r0, r3
20001c66:	46bd      	mov	sp, r7
20001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c6c:	4770      	bx	lr
20001c6e:	bf00      	nop
20001c70:	2000a0a8 	.word	0x2000a0a8

20001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001c74:	b580      	push	{r7, lr}
20001c76:	b084      	sub	sp, #16
20001c78:	af00      	add	r7, sp, #0
20001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001c7c:	f7ff ffee 	bl	20001c5c <HAL_GetTick>
20001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20001c82:	687b      	ldr	r3, [r7, #4]
20001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001c86:	68fb      	ldr	r3, [r7, #12]
20001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
20001c8c:	d005      	beq.n	20001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (20001cb8 <HAL_Delay+0x44>)
20001c90:	781b      	ldrb	r3, [r3, #0]
20001c92:	461a      	mov	r2, r3
20001c94:	68fb      	ldr	r3, [r7, #12]
20001c96:	4413      	add	r3, r2
20001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
20001c9a:	bf00      	nop
20001c9c:	f7ff ffde 	bl	20001c5c <HAL_GetTick>
20001ca0:	4602      	mov	r2, r0
20001ca2:	68bb      	ldr	r3, [r7, #8]
20001ca4:	1ad3      	subs	r3, r2, r3
20001ca6:	68fa      	ldr	r2, [r7, #12]
20001ca8:	429a      	cmp	r2, r3
20001caa:	d8f7      	bhi.n	20001c9c <HAL_Delay+0x28>
  {
  }
}
20001cac:	bf00      	nop
20001cae:	bf00      	nop
20001cb0:	3710      	adds	r7, #16
20001cb2:	46bd      	mov	sp, r7
20001cb4:	bd80      	pop	{r7, pc}
20001cb6:	bf00      	nop
20001cb8:	20009bc0 	.word	0x20009bc0

20001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001cbc:	b480      	push	{r7}
20001cbe:	b085      	sub	sp, #20
20001cc0:	af00      	add	r7, sp, #0
20001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20001cc4:	687b      	ldr	r3, [r7, #4]
20001cc6:	f003 0307 	and.w	r3, r3, #7
20001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (20001cfc <__NVIC_SetPriorityGrouping+0x40>)
20001cce:	68db      	ldr	r3, [r3, #12]
20001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20001cd2:	68ba      	ldr	r2, [r7, #8]
20001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
20001cd8:	4013      	ands	r3, r2
20001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001cdc:	68fb      	ldr	r3, [r7, #12]
20001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20001ce0:	68bb      	ldr	r3, [r7, #8]
20001ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
20001ce4:	4b06      	ldr	r3, [pc, #24]	@ (20001d00 <__NVIC_SetPriorityGrouping+0x44>)
20001ce6:	4313      	orrs	r3, r2
20001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20001cea:	4a04      	ldr	r2, [pc, #16]	@ (20001cfc <__NVIC_SetPriorityGrouping+0x40>)
20001cec:	68bb      	ldr	r3, [r7, #8]
20001cee:	60d3      	str	r3, [r2, #12]
}
20001cf0:	bf00      	nop
20001cf2:	3714      	adds	r7, #20
20001cf4:	46bd      	mov	sp, r7
20001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cfa:	4770      	bx	lr
20001cfc:	e000ed00 	.word	0xe000ed00
20001d00:	05fa0000 	.word	0x05fa0000

20001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20001d04:	b480      	push	{r7}
20001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20001d08:	4b04      	ldr	r3, [pc, #16]	@ (20001d1c <__NVIC_GetPriorityGrouping+0x18>)
20001d0a:	68db      	ldr	r3, [r3, #12]
20001d0c:	0a1b      	lsrs	r3, r3, #8
20001d0e:	f003 0307 	and.w	r3, r3, #7
}
20001d12:	4618      	mov	r0, r3
20001d14:	46bd      	mov	sp, r7
20001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d1a:	4770      	bx	lr
20001d1c:	e000ed00 	.word	0xe000ed00

20001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001d20:	b480      	push	{r7}
20001d22:	b083      	sub	sp, #12
20001d24:	af00      	add	r7, sp, #0
20001d26:	4603      	mov	r3, r0
20001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d2e:	2b00      	cmp	r3, #0
20001d30:	db0b      	blt.n	20001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001d32:	79fb      	ldrb	r3, [r7, #7]
20001d34:	f003 021f 	and.w	r2, r3, #31
20001d38:	4907      	ldr	r1, [pc, #28]	@ (20001d58 <__NVIC_EnableIRQ+0x38>)
20001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d3e:	095b      	lsrs	r3, r3, #5
20001d40:	2001      	movs	r0, #1
20001d42:	fa00 f202 	lsl.w	r2, r0, r2
20001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20001d4a:	bf00      	nop
20001d4c:	370c      	adds	r7, #12
20001d4e:	46bd      	mov	sp, r7
20001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d54:	4770      	bx	lr
20001d56:	bf00      	nop
20001d58:	e000e100 	.word	0xe000e100

20001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20001d5c:	b480      	push	{r7}
20001d5e:	b083      	sub	sp, #12
20001d60:	af00      	add	r7, sp, #0
20001d62:	4603      	mov	r3, r0
20001d64:	6039      	str	r1, [r7, #0]
20001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d6c:	2b00      	cmp	r3, #0
20001d6e:	db0a      	blt.n	20001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001d70:	683b      	ldr	r3, [r7, #0]
20001d72:	b2da      	uxtb	r2, r3
20001d74:	490c      	ldr	r1, [pc, #48]	@ (20001da8 <__NVIC_SetPriority+0x4c>)
20001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d7a:	0112      	lsls	r2, r2, #4
20001d7c:	b2d2      	uxtb	r2, r2
20001d7e:	440b      	add	r3, r1
20001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001d84:	e00a      	b.n	20001d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001d86:	683b      	ldr	r3, [r7, #0]
20001d88:	b2da      	uxtb	r2, r3
20001d8a:	4908      	ldr	r1, [pc, #32]	@ (20001dac <__NVIC_SetPriority+0x50>)
20001d8c:	79fb      	ldrb	r3, [r7, #7]
20001d8e:	f003 030f 	and.w	r3, r3, #15
20001d92:	3b04      	subs	r3, #4
20001d94:	0112      	lsls	r2, r2, #4
20001d96:	b2d2      	uxtb	r2, r2
20001d98:	440b      	add	r3, r1
20001d9a:	761a      	strb	r2, [r3, #24]
}
20001d9c:	bf00      	nop
20001d9e:	370c      	adds	r7, #12
20001da0:	46bd      	mov	sp, r7
20001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
20001da6:	4770      	bx	lr
20001da8:	e000e100 	.word	0xe000e100
20001dac:	e000ed00 	.word	0xe000ed00

20001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20001db0:	b480      	push	{r7}
20001db2:	b089      	sub	sp, #36	@ 0x24
20001db4:	af00      	add	r7, sp, #0
20001db6:	60f8      	str	r0, [r7, #12]
20001db8:	60b9      	str	r1, [r7, #8]
20001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20001dbc:	68fb      	ldr	r3, [r7, #12]
20001dbe:	f003 0307 	and.w	r3, r3, #7
20001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001dc4:	69fb      	ldr	r3, [r7, #28]
20001dc6:	f1c3 0307 	rsb	r3, r3, #7
20001dca:	2b04      	cmp	r3, #4
20001dcc:	bf28      	it	cs
20001dce:	2304      	movcs	r3, #4
20001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001dd2:	69fb      	ldr	r3, [r7, #28]
20001dd4:	3304      	adds	r3, #4
20001dd6:	2b06      	cmp	r3, #6
20001dd8:	d902      	bls.n	20001de0 <NVIC_EncodePriority+0x30>
20001dda:	69fb      	ldr	r3, [r7, #28]
20001ddc:	3b03      	subs	r3, #3
20001dde:	e000      	b.n	20001de2 <NVIC_EncodePriority+0x32>
20001de0:	2300      	movs	r3, #0
20001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001de4:	f04f 32ff 	mov.w	r2, #4294967295
20001de8:	69bb      	ldr	r3, [r7, #24]
20001dea:	fa02 f303 	lsl.w	r3, r2, r3
20001dee:	43da      	mvns	r2, r3
20001df0:	68bb      	ldr	r3, [r7, #8]
20001df2:	401a      	ands	r2, r3
20001df4:	697b      	ldr	r3, [r7, #20]
20001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20001df8:	f04f 31ff 	mov.w	r1, #4294967295
20001dfc:	697b      	ldr	r3, [r7, #20]
20001dfe:	fa01 f303 	lsl.w	r3, r1, r3
20001e02:	43d9      	mvns	r1, r3
20001e04:	687b      	ldr	r3, [r7, #4]
20001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001e08:	4313      	orrs	r3, r2
         );
}
20001e0a:	4618      	mov	r0, r3
20001e0c:	3724      	adds	r7, #36	@ 0x24
20001e0e:	46bd      	mov	sp, r7
20001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e14:	4770      	bx	lr
	...

20001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001e18:	b580      	push	{r7, lr}
20001e1a:	b082      	sub	sp, #8
20001e1c:	af00      	add	r7, sp, #0
20001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001e20:	687b      	ldr	r3, [r7, #4]
20001e22:	3b01      	subs	r3, #1
20001e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20001e28:	d301      	bcc.n	20001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20001e2a:	2301      	movs	r3, #1
20001e2c:	e00f      	b.n	20001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (20001e58 <SysTick_Config+0x40>)
20001e30:	687b      	ldr	r3, [r7, #4]
20001e32:	3b01      	subs	r3, #1
20001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001e36:	210f      	movs	r1, #15
20001e38:	f04f 30ff 	mov.w	r0, #4294967295
20001e3c:	f7ff ff8e 	bl	20001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001e40:	4b05      	ldr	r3, [pc, #20]	@ (20001e58 <SysTick_Config+0x40>)
20001e42:	2200      	movs	r2, #0
20001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001e46:	4b04      	ldr	r3, [pc, #16]	@ (20001e58 <SysTick_Config+0x40>)
20001e48:	2207      	movs	r2, #7
20001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001e4c:	2300      	movs	r3, #0
}
20001e4e:	4618      	mov	r0, r3
20001e50:	3708      	adds	r7, #8
20001e52:	46bd      	mov	sp, r7
20001e54:	bd80      	pop	{r7, pc}
20001e56:	bf00      	nop
20001e58:	e000e010 	.word	0xe000e010

20001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001e5c:	b580      	push	{r7, lr}
20001e5e:	b082      	sub	sp, #8
20001e60:	af00      	add	r7, sp, #0
20001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20001e64:	6878      	ldr	r0, [r7, #4]
20001e66:	f7ff ff29 	bl	20001cbc <__NVIC_SetPriorityGrouping>
}
20001e6a:	bf00      	nop
20001e6c:	3708      	adds	r7, #8
20001e6e:	46bd      	mov	sp, r7
20001e70:	bd80      	pop	{r7, pc}

20001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20001e72:	b580      	push	{r7, lr}
20001e74:	b086      	sub	sp, #24
20001e76:	af00      	add	r7, sp, #0
20001e78:	4603      	mov	r3, r0
20001e7a:	60b9      	str	r1, [r7, #8]
20001e7c:	607a      	str	r2, [r7, #4]
20001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
20001e80:	2300      	movs	r3, #0
20001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20001e84:	f7ff ff3e 	bl	20001d04 <__NVIC_GetPriorityGrouping>
20001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20001e8a:	687a      	ldr	r2, [r7, #4]
20001e8c:	68b9      	ldr	r1, [r7, #8]
20001e8e:	6978      	ldr	r0, [r7, #20]
20001e90:	f7ff ff8e 	bl	20001db0 <NVIC_EncodePriority>
20001e94:	4602      	mov	r2, r0
20001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001e9a:	4611      	mov	r1, r2
20001e9c:	4618      	mov	r0, r3
20001e9e:	f7ff ff5d 	bl	20001d5c <__NVIC_SetPriority>
}
20001ea2:	bf00      	nop
20001ea4:	3718      	adds	r7, #24
20001ea6:	46bd      	mov	sp, r7
20001ea8:	bd80      	pop	{r7, pc}

20001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001eaa:	b580      	push	{r7, lr}
20001eac:	b082      	sub	sp, #8
20001eae:	af00      	add	r7, sp, #0
20001eb0:	4603      	mov	r3, r0
20001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001eb8:	4618      	mov	r0, r3
20001eba:	f7ff ff31 	bl	20001d20 <__NVIC_EnableIRQ>
}
20001ebe:	bf00      	nop
20001ec0:	3708      	adds	r7, #8
20001ec2:	46bd      	mov	sp, r7
20001ec4:	bd80      	pop	{r7, pc}

20001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20001ec6:	b580      	push	{r7, lr}
20001ec8:	b082      	sub	sp, #8
20001eca:	af00      	add	r7, sp, #0
20001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20001ece:	6878      	ldr	r0, [r7, #4]
20001ed0:	f7ff ffa2 	bl	20001e18 <SysTick_Config>
20001ed4:	4603      	mov	r3, r0
}
20001ed6:	4618      	mov	r0, r3
20001ed8:	3708      	adds	r7, #8
20001eda:	46bd      	mov	sp, r7
20001edc:	bd80      	pop	{r7, pc}
	...

20001ee0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
20001ee0:	b580      	push	{r7, lr}
20001ee2:	b084      	sub	sp, #16
20001ee4:	af00      	add	r7, sp, #0
20001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
20001ee8:	687b      	ldr	r3, [r7, #4]
20001eea:	2b00      	cmp	r3, #0
20001eec:	d101      	bne.n	20001ef2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
20001eee:	2301      	movs	r3, #1
20001ef0:	e086      	b.n	20002000 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
20001ef2:	687b      	ldr	r3, [r7, #4]
20001ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20001ef8:	2b00      	cmp	r3, #0
20001efa:	d106      	bne.n	20001f0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
20001efc:	687b      	ldr	r3, [r7, #4]
20001efe:	2220      	movs	r2, #32
20001f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
20001f04:	6878      	ldr	r0, [r7, #4]
20001f06:	f7ff fbfb 	bl	20001700 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20001f0a:	4b3f      	ldr	r3, [pc, #252]	@ (20002008 <HAL_ETH_Init+0x128>)
20001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001f0e:	4a3e      	ldr	r2, [pc, #248]	@ (20002008 <HAL_ETH_Init+0x128>)
20001f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20001f14:	6453      	str	r3, [r2, #68]	@ 0x44
20001f16:	4b3c      	ldr	r3, [pc, #240]	@ (20002008 <HAL_ETH_Init+0x128>)
20001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20001f1e:	60bb      	str	r3, [r7, #8]
20001f20:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
20001f22:	4b3a      	ldr	r3, [pc, #232]	@ (2000200c <HAL_ETH_Init+0x12c>)
20001f24:	685b      	ldr	r3, [r3, #4]
20001f26:	4a39      	ldr	r2, [pc, #228]	@ (2000200c <HAL_ETH_Init+0x12c>)
20001f28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
20001f2c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
20001f2e:	4b37      	ldr	r3, [pc, #220]	@ (2000200c <HAL_ETH_Init+0x12c>)
20001f30:	685a      	ldr	r2, [r3, #4]
20001f32:	687b      	ldr	r3, [r7, #4]
20001f34:	689b      	ldr	r3, [r3, #8]
20001f36:	4935      	ldr	r1, [pc, #212]	@ (2000200c <HAL_ETH_Init+0x12c>)
20001f38:	4313      	orrs	r3, r2
20001f3a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
20001f3c:	4b33      	ldr	r3, [pc, #204]	@ (2000200c <HAL_ETH_Init+0x12c>)
20001f3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
20001f40:	687b      	ldr	r3, [r7, #4]
20001f42:	681b      	ldr	r3, [r3, #0]
20001f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20001f48:	681b      	ldr	r3, [r3, #0]
20001f4a:	687a      	ldr	r2, [r7, #4]
20001f4c:	6812      	ldr	r2, [r2, #0]
20001f4e:	f043 0301 	orr.w	r3, r3, #1
20001f52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
20001f56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20001f58:	f7ff fe80 	bl	20001c5c <HAL_GetTick>
20001f5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
20001f5e:	e011      	b.n	20001f84 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
20001f60:	f7ff fe7c 	bl	20001c5c <HAL_GetTick>
20001f64:	4602      	mov	r2, r0
20001f66:	68fb      	ldr	r3, [r7, #12]
20001f68:	1ad3      	subs	r3, r2, r3
20001f6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
20001f6e:	d909      	bls.n	20001f84 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
20001f70:	687b      	ldr	r3, [r7, #4]
20001f72:	2204      	movs	r2, #4
20001f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
20001f78:	687b      	ldr	r3, [r7, #4]
20001f7a:	22e0      	movs	r2, #224	@ 0xe0
20001f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
20001f80:	2301      	movs	r3, #1
20001f82:	e03d      	b.n	20002000 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
20001f84:	687b      	ldr	r3, [r7, #4]
20001f86:	681b      	ldr	r3, [r3, #0]
20001f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20001f8c:	681b      	ldr	r3, [r3, #0]
20001f8e:	f003 0301 	and.w	r3, r3, #1
20001f92:	2b00      	cmp	r3, #0
20001f94:	d1e4      	bne.n	20001f60 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
20001f96:	6878      	ldr	r0, [r7, #4]
20001f98:	f000 f97a 	bl	20002290 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
20001f9c:	6878      	ldr	r0, [r7, #4]
20001f9e:	f000 fa25 	bl	200023ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
20001fa2:	6878      	ldr	r0, [r7, #4]
20001fa4:	f000 fa7b 	bl	2000249e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
20001fa8:	687b      	ldr	r3, [r7, #4]
20001faa:	685b      	ldr	r3, [r3, #4]
20001fac:	461a      	mov	r2, r3
20001fae:	2100      	movs	r1, #0
20001fb0:	6878      	ldr	r0, [r7, #4]
20001fb2:	f000 f9e3 	bl	2000237c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
20001fb6:	687b      	ldr	r3, [r7, #4]
20001fb8:	681b      	ldr	r3, [r3, #0]
20001fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20001fbc:	687b      	ldr	r3, [r7, #4]
20001fbe:	681b      	ldr	r3, [r3, #0]
20001fc0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
20001fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
20001fc6:	687b      	ldr	r3, [r7, #4]
20001fc8:	681b      	ldr	r3, [r3, #0]
20001fca:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
20001fce:	687b      	ldr	r3, [r7, #4]
20001fd0:	681a      	ldr	r2, [r3, #0]
20001fd2:	4b0f      	ldr	r3, [pc, #60]	@ (20002010 <HAL_ETH_Init+0x130>)
20001fd4:	430b      	orrs	r3, r1
20001fd6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
20001fda:	687b      	ldr	r3, [r7, #4]
20001fdc:	681b      	ldr	r3, [r3, #0]
20001fde:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
20001fe2:	687b      	ldr	r3, [r7, #4]
20001fe4:	681b      	ldr	r3, [r3, #0]
20001fe6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
20001fea:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
20001fee:	687b      	ldr	r3, [r7, #4]
20001ff0:	2200      	movs	r2, #0
20001ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
20001ff6:	687b      	ldr	r3, [r7, #4]
20001ff8:	2210      	movs	r2, #16
20001ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
20001ffe:	2300      	movs	r3, #0
}
20002000:	4618      	mov	r0, r3
20002002:	3710      	adds	r7, #16
20002004:	46bd      	mov	sp, r7
20002006:	bd80      	pop	{r7, pc}
20002008:	40023800 	.word	0x40023800
2000200c:	40013800 	.word	0x40013800
20002010:	00020060 	.word	0x00020060

20002014 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
20002014:	b580      	push	{r7, lr}
20002016:	b084      	sub	sp, #16
20002018:	af00      	add	r7, sp, #0
2000201a:	6078      	str	r0, [r7, #4]
2000201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
2000201e:	687b      	ldr	r3, [r7, #4]
20002020:	681b      	ldr	r3, [r3, #0]
20002022:	681b      	ldr	r3, [r3, #0]
20002024:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
20002026:	68fa      	ldr	r2, [r7, #12]
20002028:	4b53      	ldr	r3, [pc, #332]	@ (20002178 <ETH_SetMACConfig+0x164>)
2000202a:	4013      	ands	r3, r2
2000202c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
2000202e:	683b      	ldr	r3, [r7, #0]
20002030:	7b9b      	ldrb	r3, [r3, #14]
20002032:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20002034:	683a      	ldr	r2, [r7, #0]
20002036:	7c12      	ldrb	r2, [r2, #16]
20002038:	2a00      	cmp	r2, #0
2000203a:	d102      	bne.n	20002042 <ETH_SetMACConfig+0x2e>
2000203c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
20002040:	e000      	b.n	20002044 <ETH_SetMACConfig+0x30>
20002042:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
20002044:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
20002046:	683a      	ldr	r2, [r7, #0]
20002048:	7c52      	ldrb	r2, [r2, #17]
2000204a:	2a00      	cmp	r2, #0
2000204c:	d102      	bne.n	20002054 <ETH_SetMACConfig+0x40>
2000204e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
20002052:	e000      	b.n	20002056 <ETH_SetMACConfig+0x42>
20002054:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
20002056:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
20002058:	683b      	ldr	r3, [r7, #0]
2000205a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
2000205c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
2000205e:	683b      	ldr	r3, [r7, #0]
20002060:	7fdb      	ldrb	r3, [r3, #31]
20002062:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
20002064:	431a      	orrs	r2, r3
                        macconf->Speed |
20002066:	683b      	ldr	r3, [r7, #0]
20002068:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
2000206a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
2000206c:	683a      	ldr	r2, [r7, #0]
2000206e:	7f92      	ldrb	r2, [r2, #30]
20002070:	2a00      	cmp	r2, #0
20002072:	d102      	bne.n	2000207a <ETH_SetMACConfig+0x66>
20002074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
20002078:	e000      	b.n	2000207c <ETH_SetMACConfig+0x68>
2000207a:	2200      	movs	r2, #0
                        macconf->Speed |
2000207c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
2000207e:	683b      	ldr	r3, [r7, #0]
20002080:	7f1b      	ldrb	r3, [r3, #28]
20002082:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
20002084:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
20002086:	683b      	ldr	r3, [r7, #0]
20002088:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
2000208a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
2000208c:	683b      	ldr	r3, [r7, #0]
2000208e:	791b      	ldrb	r3, [r3, #4]
20002090:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
20002092:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
20002094:	683a      	ldr	r2, [r7, #0]
20002096:	f892 2020 	ldrb.w	r2, [r2, #32]
2000209a:	2a00      	cmp	r2, #0
2000209c:	d102      	bne.n	200020a4 <ETH_SetMACConfig+0x90>
2000209e:	f44f 7200 	mov.w	r2, #512	@ 0x200
200020a2:	e000      	b.n	200020a6 <ETH_SetMACConfig+0x92>
200020a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
200020a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
200020a8:	683b      	ldr	r3, [r7, #0]
200020aa:	7bdb      	ldrb	r3, [r3, #15]
200020ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
200020ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
200020b0:	683b      	ldr	r3, [r7, #0]
200020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
200020b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
200020b6:	683b      	ldr	r3, [r7, #0]
200020b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
200020bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
200020be:	4313      	orrs	r3, r2
200020c0:	68fa      	ldr	r2, [r7, #12]
200020c2:	4313      	orrs	r3, r2
200020c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
200020c6:	687b      	ldr	r3, [r7, #4]
200020c8:	681b      	ldr	r3, [r3, #0]
200020ca:	68fa      	ldr	r2, [r7, #12]
200020cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
200020ce:	687b      	ldr	r3, [r7, #4]
200020d0:	681b      	ldr	r3, [r3, #0]
200020d2:	681b      	ldr	r3, [r3, #0]
200020d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
200020d6:	2001      	movs	r0, #1
200020d8:	f7ff fdcc 	bl	20001c74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
200020dc:	687b      	ldr	r3, [r7, #4]
200020de:	681b      	ldr	r3, [r3, #0]
200020e0:	68fa      	ldr	r2, [r7, #12]
200020e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
200020e4:	687b      	ldr	r3, [r7, #4]
200020e6:	681b      	ldr	r3, [r3, #0]
200020e8:	699b      	ldr	r3, [r3, #24]
200020ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
200020ec:	68fa      	ldr	r2, [r7, #12]
200020ee:	f64f 7341 	movw	r3, #65345	@ 0xff41
200020f2:	4013      	ands	r3, r2
200020f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
200020f6:	683b      	ldr	r3, [r7, #0]
200020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200020fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
200020fc:	683a      	ldr	r2, [r7, #0]
200020fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
20002102:	2a00      	cmp	r2, #0
20002104:	d101      	bne.n	2000210a <ETH_SetMACConfig+0xf6>
20002106:	2280      	movs	r2, #128	@ 0x80
20002108:	e000      	b.n	2000210c <ETH_SetMACConfig+0xf8>
2000210a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
2000210c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
2000210e:	683b      	ldr	r3, [r7, #0]
20002110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
20002112:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20002114:	683a      	ldr	r2, [r7, #0]
20002116:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
2000211a:	2a01      	cmp	r2, #1
2000211c:	d101      	bne.n	20002122 <ETH_SetMACConfig+0x10e>
2000211e:	2208      	movs	r2, #8
20002120:	e000      	b.n	20002124 <ETH_SetMACConfig+0x110>
20002122:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
20002124:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
20002126:	683a      	ldr	r2, [r7, #0]
20002128:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
2000212c:	2a01      	cmp	r2, #1
2000212e:	d101      	bne.n	20002134 <ETH_SetMACConfig+0x120>
20002130:	2204      	movs	r2, #4
20002132:	e000      	b.n	20002136 <ETH_SetMACConfig+0x122>
20002134:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
20002136:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
20002138:	683a      	ldr	r2, [r7, #0]
2000213a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
2000213e:	2a01      	cmp	r2, #1
20002140:	d101      	bne.n	20002146 <ETH_SetMACConfig+0x132>
20002142:	2202      	movs	r2, #2
20002144:	e000      	b.n	20002148 <ETH_SetMACConfig+0x134>
20002146:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
20002148:	4313      	orrs	r3, r2
2000214a:	68fa      	ldr	r2, [r7, #12]
2000214c:	4313      	orrs	r3, r2
2000214e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
20002150:	687b      	ldr	r3, [r7, #4]
20002152:	681b      	ldr	r3, [r3, #0]
20002154:	68fa      	ldr	r2, [r7, #12]
20002156:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
20002158:	687b      	ldr	r3, [r7, #4]
2000215a:	681b      	ldr	r3, [r3, #0]
2000215c:	699b      	ldr	r3, [r3, #24]
2000215e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20002160:	2001      	movs	r0, #1
20002162:	f7ff fd87 	bl	20001c74 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
20002166:	687b      	ldr	r3, [r7, #4]
20002168:	681b      	ldr	r3, [r3, #0]
2000216a:	68fa      	ldr	r2, [r7, #12]
2000216c:	619a      	str	r2, [r3, #24]
}
2000216e:	bf00      	nop
20002170:	3710      	adds	r7, #16
20002172:	46bd      	mov	sp, r7
20002174:	bd80      	pop	{r7, pc}
20002176:	bf00      	nop
20002178:	fd20810f 	.word	0xfd20810f

2000217c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
2000217c:	b580      	push	{r7, lr}
2000217e:	b084      	sub	sp, #16
20002180:	af00      	add	r7, sp, #0
20002182:	6078      	str	r0, [r7, #4]
20002184:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
20002186:	687b      	ldr	r3, [r7, #4]
20002188:	681b      	ldr	r3, [r3, #0]
2000218a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000218e:	699b      	ldr	r3, [r3, #24]
20002190:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
20002192:	68fa      	ldr	r2, [r7, #12]
20002194:	4b3d      	ldr	r3, [pc, #244]	@ (2000228c <ETH_SetDMAConfig+0x110>)
20002196:	4013      	ands	r3, r2
20002198:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
2000219a:	683b      	ldr	r3, [r7, #0]
2000219c:	7b1b      	ldrb	r3, [r3, #12]
2000219e:	2b00      	cmp	r3, #0
200021a0:	d102      	bne.n	200021a8 <ETH_SetDMAConfig+0x2c>
200021a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
200021a6:	e000      	b.n	200021aa <ETH_SetDMAConfig+0x2e>
200021a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
200021aa:	683b      	ldr	r3, [r7, #0]
200021ac:	7b5b      	ldrb	r3, [r3, #13]
200021ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
200021b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
200021b2:	683a      	ldr	r2, [r7, #0]
200021b4:	7f52      	ldrb	r2, [r2, #29]
200021b6:	2a00      	cmp	r2, #0
200021b8:	d102      	bne.n	200021c0 <ETH_SetDMAConfig+0x44>
200021ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
200021be:	e000      	b.n	200021c2 <ETH_SetDMAConfig+0x46>
200021c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
200021c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
200021c4:	683b      	ldr	r3, [r7, #0]
200021c6:	7b9b      	ldrb	r3, [r3, #14]
200021c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
200021ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
200021cc:	683b      	ldr	r3, [r7, #0]
200021ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
200021d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
200021d2:	683b      	ldr	r3, [r7, #0]
200021d4:	7f1b      	ldrb	r3, [r3, #28]
200021d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
200021d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
200021da:	683b      	ldr	r3, [r7, #0]
200021dc:	7f9b      	ldrb	r3, [r3, #30]
200021de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
200021e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
200021e2:	683b      	ldr	r3, [r7, #0]
200021e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
200021e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
200021e8:	683b      	ldr	r3, [r7, #0]
200021ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
200021ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
200021f0:	4313      	orrs	r3, r2
200021f2:	68fa      	ldr	r2, [r7, #12]
200021f4:	4313      	orrs	r3, r2
200021f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
200021f8:	687b      	ldr	r3, [r7, #4]
200021fa:	681b      	ldr	r3, [r3, #0]
200021fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20002200:	461a      	mov	r2, r3
20002202:	68fb      	ldr	r3, [r7, #12]
20002204:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
20002206:	687b      	ldr	r3, [r7, #4]
20002208:	681b      	ldr	r3, [r3, #0]
2000220a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000220e:	699b      	ldr	r3, [r3, #24]
20002210:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20002212:	2001      	movs	r0, #1
20002214:	f7ff fd2e 	bl	20001c74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
20002218:	687b      	ldr	r3, [r7, #4]
2000221a:	681b      	ldr	r3, [r3, #0]
2000221c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20002220:	461a      	mov	r2, r3
20002222:	68fb      	ldr	r3, [r7, #12]
20002224:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20002226:	683b      	ldr	r3, [r7, #0]
20002228:	791b      	ldrb	r3, [r3, #4]
2000222a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
2000222c:	683b      	ldr	r3, [r7, #0]
2000222e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20002230:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
20002232:	683b      	ldr	r3, [r7, #0]
20002234:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
20002236:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
20002238:	683b      	ldr	r3, [r7, #0]
2000223a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
2000223c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
2000223e:	683b      	ldr	r3, [r7, #0]
20002240:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
20002244:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
20002246:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
20002248:	683b      	ldr	r3, [r7, #0]
2000224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000224c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
2000224e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
20002250:	683b      	ldr	r3, [r7, #0]
20002252:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
20002254:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
20002256:	687a      	ldr	r2, [r7, #4]
20002258:	6812      	ldr	r2, [r2, #0]
2000225a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
2000225e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
20002262:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
20002264:	687b      	ldr	r3, [r7, #4]
20002266:	681b      	ldr	r3, [r3, #0]
20002268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000226c:	681b      	ldr	r3, [r3, #0]
2000226e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
20002270:	2001      	movs	r0, #1
20002272:	f7ff fcff 	bl	20001c74 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
20002276:	687b      	ldr	r3, [r7, #4]
20002278:	681b      	ldr	r3, [r3, #0]
2000227a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000227e:	461a      	mov	r2, r3
20002280:	68fb      	ldr	r3, [r7, #12]
20002282:	6013      	str	r3, [r2, #0]
}
20002284:	bf00      	nop
20002286:	3710      	adds	r7, #16
20002288:	46bd      	mov	sp, r7
2000228a:	bd80      	pop	{r7, pc}
2000228c:	f8de3f23 	.word	0xf8de3f23

20002290 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
20002290:	b580      	push	{r7, lr}
20002292:	b0a6      	sub	sp, #152	@ 0x98
20002294:	af00      	add	r7, sp, #0
20002296:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
20002298:	2301      	movs	r3, #1
2000229a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
2000229e:	2301      	movs	r3, #1
200022a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
200022a4:	2300      	movs	r3, #0
200022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
200022a8:	2300      	movs	r3, #0
200022aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
200022ae:	2301      	movs	r3, #1
200022b0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
200022b4:	2300      	movs	r3, #0
200022b6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
200022ba:	2301      	movs	r3, #1
200022bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
200022c0:	2301      	movs	r3, #1
200022c2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
200022c6:	2300      	movs	r3, #0
200022c8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
200022cc:	2300      	movs	r3, #0
200022ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
200022d2:	2300      	movs	r3, #0
200022d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
200022d6:	2300      	movs	r3, #0
200022d8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
200022dc:	2300      	movs	r3, #0
200022de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
200022e0:	2300      	movs	r3, #0
200022e2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
200022e6:	2300      	movs	r3, #0
200022e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
200022ec:	2300      	movs	r3, #0
200022ee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
200022f2:	2300      	movs	r3, #0
200022f4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
200022f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
200022fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
200022fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20002302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
20002304:	2300      	movs	r3, #0
20002306:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
2000230a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
2000230e:	4619      	mov	r1, r3
20002310:	6878      	ldr	r0, [r7, #4]
20002312:	f7ff fe7f 	bl	20002014 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
20002316:	2301      	movs	r3, #1
20002318:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
2000231a:	2301      	movs	r3, #1
2000231c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
2000231e:	2301      	movs	r3, #1
20002320:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
20002324:	2301      	movs	r3, #1
20002326:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
20002328:	2300      	movs	r3, #0
2000232a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
2000232c:	2300      	movs	r3, #0
2000232e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
20002332:	2300      	movs	r3, #0
20002334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
20002338:	2300      	movs	r3, #0
2000233a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
2000233c:	2301      	movs	r3, #1
2000233e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
20002342:	2301      	movs	r3, #1
20002344:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
20002346:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2000234a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
2000234c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20002350:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
20002352:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20002356:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
20002358:	2301      	movs	r3, #1
2000235a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
2000235e:	2300      	movs	r3, #0
20002360:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
20002362:	2300      	movs	r3, #0
20002364:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
20002366:	f107 0308 	add.w	r3, r7, #8
2000236a:	4619      	mov	r1, r3
2000236c:	6878      	ldr	r0, [r7, #4]
2000236e:	f7ff ff05 	bl	2000217c <ETH_SetDMAConfig>
}
20002372:	bf00      	nop
20002374:	3798      	adds	r7, #152	@ 0x98
20002376:	46bd      	mov	sp, r7
20002378:	bd80      	pop	{r7, pc}
	...

2000237c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
2000237c:	b480      	push	{r7}
2000237e:	b087      	sub	sp, #28
20002380:	af00      	add	r7, sp, #0
20002382:	60f8      	str	r0, [r7, #12]
20002384:	60b9      	str	r1, [r7, #8]
20002386:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
20002388:	687b      	ldr	r3, [r7, #4]
2000238a:	3305      	adds	r3, #5
2000238c:	781b      	ldrb	r3, [r3, #0]
2000238e:	021b      	lsls	r3, r3, #8
20002390:	687a      	ldr	r2, [r7, #4]
20002392:	3204      	adds	r2, #4
20002394:	7812      	ldrb	r2, [r2, #0]
20002396:	4313      	orrs	r3, r2
20002398:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
2000239a:	68ba      	ldr	r2, [r7, #8]
2000239c:	4b11      	ldr	r3, [pc, #68]	@ (200023e4 <ETH_MACAddressConfig+0x68>)
2000239e:	4413      	add	r3, r2
200023a0:	461a      	mov	r2, r3
200023a2:	697b      	ldr	r3, [r7, #20]
200023a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
200023a6:	687b      	ldr	r3, [r7, #4]
200023a8:	3303      	adds	r3, #3
200023aa:	781b      	ldrb	r3, [r3, #0]
200023ac:	061a      	lsls	r2, r3, #24
200023ae:	687b      	ldr	r3, [r7, #4]
200023b0:	3302      	adds	r3, #2
200023b2:	781b      	ldrb	r3, [r3, #0]
200023b4:	041b      	lsls	r3, r3, #16
200023b6:	431a      	orrs	r2, r3
200023b8:	687b      	ldr	r3, [r7, #4]
200023ba:	3301      	adds	r3, #1
200023bc:	781b      	ldrb	r3, [r3, #0]
200023be:	021b      	lsls	r3, r3, #8
200023c0:	4313      	orrs	r3, r2
200023c2:	687a      	ldr	r2, [r7, #4]
200023c4:	7812      	ldrb	r2, [r2, #0]
200023c6:	4313      	orrs	r3, r2
200023c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
200023ca:	68ba      	ldr	r2, [r7, #8]
200023cc:	4b06      	ldr	r3, [pc, #24]	@ (200023e8 <ETH_MACAddressConfig+0x6c>)
200023ce:	4413      	add	r3, r2
200023d0:	461a      	mov	r2, r3
200023d2:	697b      	ldr	r3, [r7, #20]
200023d4:	6013      	str	r3, [r2, #0]
}
200023d6:	bf00      	nop
200023d8:	371c      	adds	r7, #28
200023da:	46bd      	mov	sp, r7
200023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200023e0:	4770      	bx	lr
200023e2:	bf00      	nop
200023e4:	40028040 	.word	0x40028040
200023e8:	40028044 	.word	0x40028044

200023ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
200023ec:	b480      	push	{r7}
200023ee:	b085      	sub	sp, #20
200023f0:	af00      	add	r7, sp, #0
200023f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
200023f4:	2300      	movs	r3, #0
200023f6:	60fb      	str	r3, [r7, #12]
200023f8:	e03e      	b.n	20002478 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
200023fa:	687b      	ldr	r3, [r7, #4]
200023fc:	68d9      	ldr	r1, [r3, #12]
200023fe:	68fa      	ldr	r2, [r7, #12]
20002400:	4613      	mov	r3, r2
20002402:	009b      	lsls	r3, r3, #2
20002404:	4413      	add	r3, r2
20002406:	00db      	lsls	r3, r3, #3
20002408:	440b      	add	r3, r1
2000240a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
2000240c:	68bb      	ldr	r3, [r7, #8]
2000240e:	2200      	movs	r2, #0
20002410:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
20002412:	68bb      	ldr	r3, [r7, #8]
20002414:	2200      	movs	r2, #0
20002416:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
20002418:	68bb      	ldr	r3, [r7, #8]
2000241a:	2200      	movs	r2, #0
2000241c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
2000241e:	68bb      	ldr	r3, [r7, #8]
20002420:	2200      	movs	r2, #0
20002422:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
20002424:	68b9      	ldr	r1, [r7, #8]
20002426:	687b      	ldr	r3, [r7, #4]
20002428:	68fa      	ldr	r2, [r7, #12]
2000242a:	3206      	adds	r2, #6
2000242c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
20002430:	68bb      	ldr	r3, [r7, #8]
20002432:	681b      	ldr	r3, [r3, #0]
20002434:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20002438:	68bb      	ldr	r3, [r7, #8]
2000243a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
2000243c:	68fb      	ldr	r3, [r7, #12]
2000243e:	2b02      	cmp	r3, #2
20002440:	d80c      	bhi.n	2000245c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
20002442:	687b      	ldr	r3, [r7, #4]
20002444:	68d9      	ldr	r1, [r3, #12]
20002446:	68fb      	ldr	r3, [r7, #12]
20002448:	1c5a      	adds	r2, r3, #1
2000244a:	4613      	mov	r3, r2
2000244c:	009b      	lsls	r3, r3, #2
2000244e:	4413      	add	r3, r2
20002450:	00db      	lsls	r3, r3, #3
20002452:	440b      	add	r3, r1
20002454:	461a      	mov	r2, r3
20002456:	68bb      	ldr	r3, [r7, #8]
20002458:	60da      	str	r2, [r3, #12]
2000245a:	e004      	b.n	20002466 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
2000245c:	687b      	ldr	r3, [r7, #4]
2000245e:	68db      	ldr	r3, [r3, #12]
20002460:	461a      	mov	r2, r3
20002462:	68bb      	ldr	r3, [r7, #8]
20002464:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
20002466:	68bb      	ldr	r3, [r7, #8]
20002468:	681b      	ldr	r3, [r3, #0]
2000246a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
2000246e:	68bb      	ldr	r3, [r7, #8]
20002470:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
20002472:	68fb      	ldr	r3, [r7, #12]
20002474:	3301      	adds	r3, #1
20002476:	60fb      	str	r3, [r7, #12]
20002478:	68fb      	ldr	r3, [r7, #12]
2000247a:	2b03      	cmp	r3, #3
2000247c:	d9bd      	bls.n	200023fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
2000247e:	687b      	ldr	r3, [r7, #4]
20002480:	2200      	movs	r2, #0
20002482:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
20002484:	687b      	ldr	r3, [r7, #4]
20002486:	68da      	ldr	r2, [r3, #12]
20002488:	687b      	ldr	r3, [r7, #4]
2000248a:	681b      	ldr	r3, [r3, #0]
2000248c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20002490:	611a      	str	r2, [r3, #16]
}
20002492:	bf00      	nop
20002494:	3714      	adds	r7, #20
20002496:	46bd      	mov	sp, r7
20002498:	f85d 7b04 	ldr.w	r7, [sp], #4
2000249c:	4770      	bx	lr

2000249e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
2000249e:	b480      	push	{r7}
200024a0:	b085      	sub	sp, #20
200024a2:	af00      	add	r7, sp, #0
200024a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
200024a6:	2300      	movs	r3, #0
200024a8:	60fb      	str	r3, [r7, #12]
200024aa:	e048      	b.n	2000253e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
200024ac:	687b      	ldr	r3, [r7, #4]
200024ae:	6919      	ldr	r1, [r3, #16]
200024b0:	68fa      	ldr	r2, [r7, #12]
200024b2:	4613      	mov	r3, r2
200024b4:	009b      	lsls	r3, r3, #2
200024b6:	4413      	add	r3, r2
200024b8:	00db      	lsls	r3, r3, #3
200024ba:	440b      	add	r3, r1
200024bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
200024be:	68bb      	ldr	r3, [r7, #8]
200024c0:	2200      	movs	r2, #0
200024c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
200024c4:	68bb      	ldr	r3, [r7, #8]
200024c6:	2200      	movs	r2, #0
200024c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
200024ca:	68bb      	ldr	r3, [r7, #8]
200024cc:	2200      	movs	r2, #0
200024ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
200024d0:	68bb      	ldr	r3, [r7, #8]
200024d2:	2200      	movs	r2, #0
200024d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
200024d6:	68bb      	ldr	r3, [r7, #8]
200024d8:	2200      	movs	r2, #0
200024da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
200024dc:	68bb      	ldr	r3, [r7, #8]
200024de:	2200      	movs	r2, #0
200024e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
200024e2:	68bb      	ldr	r3, [r7, #8]
200024e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
200024e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
200024ea:	687b      	ldr	r3, [r7, #4]
200024ec:	695b      	ldr	r3, [r3, #20]
200024ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
200024f2:	68bb      	ldr	r3, [r7, #8]
200024f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
200024f6:	68bb      	ldr	r3, [r7, #8]
200024f8:	685b      	ldr	r3, [r3, #4]
200024fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
200024fe:	68bb      	ldr	r3, [r7, #8]
20002500:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
20002502:	68b9      	ldr	r1, [r7, #8]
20002504:	687b      	ldr	r3, [r7, #4]
20002506:	68fa      	ldr	r2, [r7, #12]
20002508:	3212      	adds	r2, #18
2000250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
2000250e:	68fb      	ldr	r3, [r7, #12]
20002510:	2b02      	cmp	r3, #2
20002512:	d80c      	bhi.n	2000252e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
20002514:	687b      	ldr	r3, [r7, #4]
20002516:	6919      	ldr	r1, [r3, #16]
20002518:	68fb      	ldr	r3, [r7, #12]
2000251a:	1c5a      	adds	r2, r3, #1
2000251c:	4613      	mov	r3, r2
2000251e:	009b      	lsls	r3, r3, #2
20002520:	4413      	add	r3, r2
20002522:	00db      	lsls	r3, r3, #3
20002524:	440b      	add	r3, r1
20002526:	461a      	mov	r2, r3
20002528:	68bb      	ldr	r3, [r7, #8]
2000252a:	60da      	str	r2, [r3, #12]
2000252c:	e004      	b.n	20002538 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
2000252e:	687b      	ldr	r3, [r7, #4]
20002530:	691b      	ldr	r3, [r3, #16]
20002532:	461a      	mov	r2, r3
20002534:	68bb      	ldr	r3, [r7, #8]
20002536:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
20002538:	68fb      	ldr	r3, [r7, #12]
2000253a:	3301      	adds	r3, #1
2000253c:	60fb      	str	r3, [r7, #12]
2000253e:	68fb      	ldr	r3, [r7, #12]
20002540:	2b03      	cmp	r3, #3
20002542:	d9b3      	bls.n	200024ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
20002544:	687b      	ldr	r3, [r7, #4]
20002546:	2200      	movs	r2, #0
20002548:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
2000254a:	687b      	ldr	r3, [r7, #4]
2000254c:	2200      	movs	r2, #0
2000254e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
20002550:	687b      	ldr	r3, [r7, #4]
20002552:	2200      	movs	r2, #0
20002554:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
20002556:	687b      	ldr	r3, [r7, #4]
20002558:	2200      	movs	r2, #0
2000255a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
2000255c:	687b      	ldr	r3, [r7, #4]
2000255e:	2200      	movs	r2, #0
20002560:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
20002562:	687b      	ldr	r3, [r7, #4]
20002564:	691a      	ldr	r2, [r3, #16]
20002566:	687b      	ldr	r3, [r7, #4]
20002568:	681b      	ldr	r3, [r3, #0]
2000256a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
2000256e:	60da      	str	r2, [r3, #12]
}
20002570:	bf00      	nop
20002572:	3714      	adds	r7, #20
20002574:	46bd      	mov	sp, r7
20002576:	f85d 7b04 	ldr.w	r7, [sp], #4
2000257a:	4770      	bx	lr

2000257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000257c:	b480      	push	{r7}
2000257e:	b089      	sub	sp, #36	@ 0x24
20002580:	af00      	add	r7, sp, #0
20002582:	6078      	str	r0, [r7, #4]
20002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
20002586:	2300      	movs	r3, #0
20002588:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
2000258a:	2300      	movs	r3, #0
2000258c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
2000258e:	2300      	movs	r3, #0
20002590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
20002592:	2300      	movs	r3, #0
20002594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
20002596:	2300      	movs	r3, #0
20002598:	61fb      	str	r3, [r7, #28]
2000259a:	e175      	b.n	20002888 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
2000259c:	2201      	movs	r2, #1
2000259e:	69fb      	ldr	r3, [r7, #28]
200025a0:	fa02 f303 	lsl.w	r3, r2, r3
200025a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200025a6:	683b      	ldr	r3, [r7, #0]
200025a8:	681b      	ldr	r3, [r3, #0]
200025aa:	697a      	ldr	r2, [r7, #20]
200025ac:	4013      	ands	r3, r2
200025ae:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
200025b0:	693a      	ldr	r2, [r7, #16]
200025b2:	697b      	ldr	r3, [r7, #20]
200025b4:	429a      	cmp	r2, r3
200025b6:	f040 8164 	bne.w	20002882 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
200025ba:	683b      	ldr	r3, [r7, #0]
200025bc:	685b      	ldr	r3, [r3, #4]
200025be:	f003 0303 	and.w	r3, r3, #3
200025c2:	2b01      	cmp	r3, #1
200025c4:	d005      	beq.n	200025d2 <HAL_GPIO_Init+0x56>
200025c6:	683b      	ldr	r3, [r7, #0]
200025c8:	685b      	ldr	r3, [r3, #4]
200025ca:	f003 0303 	and.w	r3, r3, #3
200025ce:	2b02      	cmp	r3, #2
200025d0:	d130      	bne.n	20002634 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
200025d2:	687b      	ldr	r3, [r7, #4]
200025d4:	689b      	ldr	r3, [r3, #8]
200025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
200025d8:	69fb      	ldr	r3, [r7, #28]
200025da:	005b      	lsls	r3, r3, #1
200025dc:	2203      	movs	r2, #3
200025de:	fa02 f303 	lsl.w	r3, r2, r3
200025e2:	43db      	mvns	r3, r3
200025e4:	69ba      	ldr	r2, [r7, #24]
200025e6:	4013      	ands	r3, r2
200025e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
200025ea:	683b      	ldr	r3, [r7, #0]
200025ec:	68da      	ldr	r2, [r3, #12]
200025ee:	69fb      	ldr	r3, [r7, #28]
200025f0:	005b      	lsls	r3, r3, #1
200025f2:	fa02 f303 	lsl.w	r3, r2, r3
200025f6:	69ba      	ldr	r2, [r7, #24]
200025f8:	4313      	orrs	r3, r2
200025fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200025fc:	687b      	ldr	r3, [r7, #4]
200025fe:	69ba      	ldr	r2, [r7, #24]
20002600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20002602:	687b      	ldr	r3, [r7, #4]
20002604:	685b      	ldr	r3, [r3, #4]
20002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20002608:	2201      	movs	r2, #1
2000260a:	69fb      	ldr	r3, [r7, #28]
2000260c:	fa02 f303 	lsl.w	r3, r2, r3
20002610:	43db      	mvns	r3, r3
20002612:	69ba      	ldr	r2, [r7, #24]
20002614:	4013      	ands	r3, r2
20002616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20002618:	683b      	ldr	r3, [r7, #0]
2000261a:	685b      	ldr	r3, [r3, #4]
2000261c:	091b      	lsrs	r3, r3, #4
2000261e:	f003 0201 	and.w	r2, r3, #1
20002622:	69fb      	ldr	r3, [r7, #28]
20002624:	fa02 f303 	lsl.w	r3, r2, r3
20002628:	69ba      	ldr	r2, [r7, #24]
2000262a:	4313      	orrs	r3, r2
2000262c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000262e:	687b      	ldr	r3, [r7, #4]
20002630:	69ba      	ldr	r2, [r7, #24]
20002632:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20002634:	683b      	ldr	r3, [r7, #0]
20002636:	685b      	ldr	r3, [r3, #4]
20002638:	f003 0303 	and.w	r3, r3, #3
2000263c:	2b03      	cmp	r3, #3
2000263e:	d017      	beq.n	20002670 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20002640:	687b      	ldr	r3, [r7, #4]
20002642:	68db      	ldr	r3, [r3, #12]
20002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20002646:	69fb      	ldr	r3, [r7, #28]
20002648:	005b      	lsls	r3, r3, #1
2000264a:	2203      	movs	r2, #3
2000264c:	fa02 f303 	lsl.w	r3, r2, r3
20002650:	43db      	mvns	r3, r3
20002652:	69ba      	ldr	r2, [r7, #24]
20002654:	4013      	ands	r3, r2
20002656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
20002658:	683b      	ldr	r3, [r7, #0]
2000265a:	689a      	ldr	r2, [r3, #8]
2000265c:	69fb      	ldr	r3, [r7, #28]
2000265e:	005b      	lsls	r3, r3, #1
20002660:	fa02 f303 	lsl.w	r3, r2, r3
20002664:	69ba      	ldr	r2, [r7, #24]
20002666:	4313      	orrs	r3, r2
20002668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
2000266a:	687b      	ldr	r3, [r7, #4]
2000266c:	69ba      	ldr	r2, [r7, #24]
2000266e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20002670:	683b      	ldr	r3, [r7, #0]
20002672:	685b      	ldr	r3, [r3, #4]
20002674:	f003 0303 	and.w	r3, r3, #3
20002678:	2b02      	cmp	r3, #2
2000267a:	d123      	bne.n	200026c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
2000267c:	69fb      	ldr	r3, [r7, #28]
2000267e:	08da      	lsrs	r2, r3, #3
20002680:	687b      	ldr	r3, [r7, #4]
20002682:	3208      	adds	r2, #8
20002684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
2000268a:	69fb      	ldr	r3, [r7, #28]
2000268c:	f003 0307 	and.w	r3, r3, #7
20002690:	009b      	lsls	r3, r3, #2
20002692:	220f      	movs	r2, #15
20002694:	fa02 f303 	lsl.w	r3, r2, r3
20002698:	43db      	mvns	r3, r3
2000269a:	69ba      	ldr	r2, [r7, #24]
2000269c:	4013      	ands	r3, r2
2000269e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
200026a0:	683b      	ldr	r3, [r7, #0]
200026a2:	691a      	ldr	r2, [r3, #16]
200026a4:	69fb      	ldr	r3, [r7, #28]
200026a6:	f003 0307 	and.w	r3, r3, #7
200026aa:	009b      	lsls	r3, r3, #2
200026ac:	fa02 f303 	lsl.w	r3, r2, r3
200026b0:	69ba      	ldr	r2, [r7, #24]
200026b2:	4313      	orrs	r3, r2
200026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
200026b6:	69fb      	ldr	r3, [r7, #28]
200026b8:	08da      	lsrs	r2, r3, #3
200026ba:	687b      	ldr	r3, [r7, #4]
200026bc:	3208      	adds	r2, #8
200026be:	69b9      	ldr	r1, [r7, #24]
200026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
200026c4:	687b      	ldr	r3, [r7, #4]
200026c6:	681b      	ldr	r3, [r3, #0]
200026c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
200026ca:	69fb      	ldr	r3, [r7, #28]
200026cc:	005b      	lsls	r3, r3, #1
200026ce:	2203      	movs	r2, #3
200026d0:	fa02 f303 	lsl.w	r3, r2, r3
200026d4:	43db      	mvns	r3, r3
200026d6:	69ba      	ldr	r2, [r7, #24]
200026d8:	4013      	ands	r3, r2
200026da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
200026dc:	683b      	ldr	r3, [r7, #0]
200026de:	685b      	ldr	r3, [r3, #4]
200026e0:	f003 0203 	and.w	r2, r3, #3
200026e4:	69fb      	ldr	r3, [r7, #28]
200026e6:	005b      	lsls	r3, r3, #1
200026e8:	fa02 f303 	lsl.w	r3, r2, r3
200026ec:	69ba      	ldr	r2, [r7, #24]
200026ee:	4313      	orrs	r3, r2
200026f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
200026f2:	687b      	ldr	r3, [r7, #4]
200026f4:	69ba      	ldr	r2, [r7, #24]
200026f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
200026f8:	683b      	ldr	r3, [r7, #0]
200026fa:	685b      	ldr	r3, [r3, #4]
200026fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20002700:	2b00      	cmp	r3, #0
20002702:	f000 80be 	beq.w	20002882 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20002706:	4b66      	ldr	r3, [pc, #408]	@ (200028a0 <HAL_GPIO_Init+0x324>)
20002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000270a:	4a65      	ldr	r2, [pc, #404]	@ (200028a0 <HAL_GPIO_Init+0x324>)
2000270c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20002710:	6453      	str	r3, [r2, #68]	@ 0x44
20002712:	4b63      	ldr	r3, [pc, #396]	@ (200028a0 <HAL_GPIO_Init+0x324>)
20002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20002716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000271a:	60fb      	str	r3, [r7, #12]
2000271c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
2000271e:	4a61      	ldr	r2, [pc, #388]	@ (200028a4 <HAL_GPIO_Init+0x328>)
20002720:	69fb      	ldr	r3, [r7, #28]
20002722:	089b      	lsrs	r3, r3, #2
20002724:	3302      	adds	r3, #2
20002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
2000272c:	69fb      	ldr	r3, [r7, #28]
2000272e:	f003 0303 	and.w	r3, r3, #3
20002732:	009b      	lsls	r3, r3, #2
20002734:	220f      	movs	r2, #15
20002736:	fa02 f303 	lsl.w	r3, r2, r3
2000273a:	43db      	mvns	r3, r3
2000273c:	69ba      	ldr	r2, [r7, #24]
2000273e:	4013      	ands	r3, r2
20002740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
20002742:	687b      	ldr	r3, [r7, #4]
20002744:	4a58      	ldr	r2, [pc, #352]	@ (200028a8 <HAL_GPIO_Init+0x32c>)
20002746:	4293      	cmp	r3, r2
20002748:	d037      	beq.n	200027ba <HAL_GPIO_Init+0x23e>
2000274a:	687b      	ldr	r3, [r7, #4]
2000274c:	4a57      	ldr	r2, [pc, #348]	@ (200028ac <HAL_GPIO_Init+0x330>)
2000274e:	4293      	cmp	r3, r2
20002750:	d031      	beq.n	200027b6 <HAL_GPIO_Init+0x23a>
20002752:	687b      	ldr	r3, [r7, #4]
20002754:	4a56      	ldr	r2, [pc, #344]	@ (200028b0 <HAL_GPIO_Init+0x334>)
20002756:	4293      	cmp	r3, r2
20002758:	d02b      	beq.n	200027b2 <HAL_GPIO_Init+0x236>
2000275a:	687b      	ldr	r3, [r7, #4]
2000275c:	4a55      	ldr	r2, [pc, #340]	@ (200028b4 <HAL_GPIO_Init+0x338>)
2000275e:	4293      	cmp	r3, r2
20002760:	d025      	beq.n	200027ae <HAL_GPIO_Init+0x232>
20002762:	687b      	ldr	r3, [r7, #4]
20002764:	4a54      	ldr	r2, [pc, #336]	@ (200028b8 <HAL_GPIO_Init+0x33c>)
20002766:	4293      	cmp	r3, r2
20002768:	d01f      	beq.n	200027aa <HAL_GPIO_Init+0x22e>
2000276a:	687b      	ldr	r3, [r7, #4]
2000276c:	4a53      	ldr	r2, [pc, #332]	@ (200028bc <HAL_GPIO_Init+0x340>)
2000276e:	4293      	cmp	r3, r2
20002770:	d019      	beq.n	200027a6 <HAL_GPIO_Init+0x22a>
20002772:	687b      	ldr	r3, [r7, #4]
20002774:	4a52      	ldr	r2, [pc, #328]	@ (200028c0 <HAL_GPIO_Init+0x344>)
20002776:	4293      	cmp	r3, r2
20002778:	d013      	beq.n	200027a2 <HAL_GPIO_Init+0x226>
2000277a:	687b      	ldr	r3, [r7, #4]
2000277c:	4a51      	ldr	r2, [pc, #324]	@ (200028c4 <HAL_GPIO_Init+0x348>)
2000277e:	4293      	cmp	r3, r2
20002780:	d00d      	beq.n	2000279e <HAL_GPIO_Init+0x222>
20002782:	687b      	ldr	r3, [r7, #4]
20002784:	4a50      	ldr	r2, [pc, #320]	@ (200028c8 <HAL_GPIO_Init+0x34c>)
20002786:	4293      	cmp	r3, r2
20002788:	d007      	beq.n	2000279a <HAL_GPIO_Init+0x21e>
2000278a:	687b      	ldr	r3, [r7, #4]
2000278c:	4a4f      	ldr	r2, [pc, #316]	@ (200028cc <HAL_GPIO_Init+0x350>)
2000278e:	4293      	cmp	r3, r2
20002790:	d101      	bne.n	20002796 <HAL_GPIO_Init+0x21a>
20002792:	2309      	movs	r3, #9
20002794:	e012      	b.n	200027bc <HAL_GPIO_Init+0x240>
20002796:	230a      	movs	r3, #10
20002798:	e010      	b.n	200027bc <HAL_GPIO_Init+0x240>
2000279a:	2308      	movs	r3, #8
2000279c:	e00e      	b.n	200027bc <HAL_GPIO_Init+0x240>
2000279e:	2307      	movs	r3, #7
200027a0:	e00c      	b.n	200027bc <HAL_GPIO_Init+0x240>
200027a2:	2306      	movs	r3, #6
200027a4:	e00a      	b.n	200027bc <HAL_GPIO_Init+0x240>
200027a6:	2305      	movs	r3, #5
200027a8:	e008      	b.n	200027bc <HAL_GPIO_Init+0x240>
200027aa:	2304      	movs	r3, #4
200027ac:	e006      	b.n	200027bc <HAL_GPIO_Init+0x240>
200027ae:	2303      	movs	r3, #3
200027b0:	e004      	b.n	200027bc <HAL_GPIO_Init+0x240>
200027b2:	2302      	movs	r3, #2
200027b4:	e002      	b.n	200027bc <HAL_GPIO_Init+0x240>
200027b6:	2301      	movs	r3, #1
200027b8:	e000      	b.n	200027bc <HAL_GPIO_Init+0x240>
200027ba:	2300      	movs	r3, #0
200027bc:	69fa      	ldr	r2, [r7, #28]
200027be:	f002 0203 	and.w	r2, r2, #3
200027c2:	0092      	lsls	r2, r2, #2
200027c4:	4093      	lsls	r3, r2
200027c6:	69ba      	ldr	r2, [r7, #24]
200027c8:	4313      	orrs	r3, r2
200027ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
200027cc:	4935      	ldr	r1, [pc, #212]	@ (200028a4 <HAL_GPIO_Init+0x328>)
200027ce:	69fb      	ldr	r3, [r7, #28]
200027d0:	089b      	lsrs	r3, r3, #2
200027d2:	3302      	adds	r3, #2
200027d4:	69ba      	ldr	r2, [r7, #24]
200027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
200027da:	4b3d      	ldr	r3, [pc, #244]	@ (200028d0 <HAL_GPIO_Init+0x354>)
200027dc:	689b      	ldr	r3, [r3, #8]
200027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200027e0:	693b      	ldr	r3, [r7, #16]
200027e2:	43db      	mvns	r3, r3
200027e4:	69ba      	ldr	r2, [r7, #24]
200027e6:	4013      	ands	r3, r2
200027e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
200027ea:	683b      	ldr	r3, [r7, #0]
200027ec:	685b      	ldr	r3, [r3, #4]
200027ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
200027f2:	2b00      	cmp	r3, #0
200027f4:	d003      	beq.n	200027fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
200027f6:	69ba      	ldr	r2, [r7, #24]
200027f8:	693b      	ldr	r3, [r7, #16]
200027fa:	4313      	orrs	r3, r2
200027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
200027fe:	4a34      	ldr	r2, [pc, #208]	@ (200028d0 <HAL_GPIO_Init+0x354>)
20002800:	69bb      	ldr	r3, [r7, #24]
20002802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20002804:	4b32      	ldr	r3, [pc, #200]	@ (200028d0 <HAL_GPIO_Init+0x354>)
20002806:	68db      	ldr	r3, [r3, #12]
20002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000280a:	693b      	ldr	r3, [r7, #16]
2000280c:	43db      	mvns	r3, r3
2000280e:	69ba      	ldr	r2, [r7, #24]
20002810:	4013      	ands	r3, r2
20002812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
20002814:	683b      	ldr	r3, [r7, #0]
20002816:	685b      	ldr	r3, [r3, #4]
20002818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
2000281c:	2b00      	cmp	r3, #0
2000281e:	d003      	beq.n	20002828 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
20002820:	69ba      	ldr	r2, [r7, #24]
20002822:	693b      	ldr	r3, [r7, #16]
20002824:	4313      	orrs	r3, r2
20002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20002828:	4a29      	ldr	r2, [pc, #164]	@ (200028d0 <HAL_GPIO_Init+0x354>)
2000282a:	69bb      	ldr	r3, [r7, #24]
2000282c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
2000282e:	4b28      	ldr	r3, [pc, #160]	@ (200028d0 <HAL_GPIO_Init+0x354>)
20002830:	685b      	ldr	r3, [r3, #4]
20002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002834:	693b      	ldr	r3, [r7, #16]
20002836:	43db      	mvns	r3, r3
20002838:	69ba      	ldr	r2, [r7, #24]
2000283a:	4013      	ands	r3, r2
2000283c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
2000283e:	683b      	ldr	r3, [r7, #0]
20002840:	685b      	ldr	r3, [r3, #4]
20002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002846:	2b00      	cmp	r3, #0
20002848:	d003      	beq.n	20002852 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
2000284a:	69ba      	ldr	r2, [r7, #24]
2000284c:	693b      	ldr	r3, [r7, #16]
2000284e:	4313      	orrs	r3, r2
20002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20002852:	4a1f      	ldr	r2, [pc, #124]	@ (200028d0 <HAL_GPIO_Init+0x354>)
20002854:	69bb      	ldr	r3, [r7, #24]
20002856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20002858:	4b1d      	ldr	r3, [pc, #116]	@ (200028d0 <HAL_GPIO_Init+0x354>)
2000285a:	681b      	ldr	r3, [r3, #0]
2000285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000285e:	693b      	ldr	r3, [r7, #16]
20002860:	43db      	mvns	r3, r3
20002862:	69ba      	ldr	r2, [r7, #24]
20002864:	4013      	ands	r3, r2
20002866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
20002868:	683b      	ldr	r3, [r7, #0]
2000286a:	685b      	ldr	r3, [r3, #4]
2000286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20002870:	2b00      	cmp	r3, #0
20002872:	d003      	beq.n	2000287c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
20002874:	69ba      	ldr	r2, [r7, #24]
20002876:	693b      	ldr	r3, [r7, #16]
20002878:	4313      	orrs	r3, r2
2000287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000287c:	4a14      	ldr	r2, [pc, #80]	@ (200028d0 <HAL_GPIO_Init+0x354>)
2000287e:	69bb      	ldr	r3, [r7, #24]
20002880:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
20002882:	69fb      	ldr	r3, [r7, #28]
20002884:	3301      	adds	r3, #1
20002886:	61fb      	str	r3, [r7, #28]
20002888:	69fb      	ldr	r3, [r7, #28]
2000288a:	2b0f      	cmp	r3, #15
2000288c:	f67f ae86 	bls.w	2000259c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
20002890:	bf00      	nop
20002892:	bf00      	nop
20002894:	3724      	adds	r7, #36	@ 0x24
20002896:	46bd      	mov	sp, r7
20002898:	f85d 7b04 	ldr.w	r7, [sp], #4
2000289c:	4770      	bx	lr
2000289e:	bf00      	nop
200028a0:	40023800 	.word	0x40023800
200028a4:	40013800 	.word	0x40013800
200028a8:	40020000 	.word	0x40020000
200028ac:	40020400 	.word	0x40020400
200028b0:	40020800 	.word	0x40020800
200028b4:	40020c00 	.word	0x40020c00
200028b8:	40021000 	.word	0x40021000
200028bc:	40021400 	.word	0x40021400
200028c0:	40021800 	.word	0x40021800
200028c4:	40021c00 	.word	0x40021c00
200028c8:	40022000 	.word	0x40022000
200028cc:	40022400 	.word	0x40022400
200028d0:	40013c00 	.word	0x40013c00

200028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
200028d4:	b480      	push	{r7}
200028d6:	b083      	sub	sp, #12
200028d8:	af00      	add	r7, sp, #0
200028da:	6078      	str	r0, [r7, #4]
200028dc:	460b      	mov	r3, r1
200028de:	807b      	strh	r3, [r7, #2]
200028e0:	4613      	mov	r3, r2
200028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
200028e4:	787b      	ldrb	r3, [r7, #1]
200028e6:	2b00      	cmp	r3, #0
200028e8:	d003      	beq.n	200028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
200028ea:	887a      	ldrh	r2, [r7, #2]
200028ec:	687b      	ldr	r3, [r7, #4]
200028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
200028f0:	e003      	b.n	200028fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
200028f2:	887b      	ldrh	r3, [r7, #2]
200028f4:	041a      	lsls	r2, r3, #16
200028f6:	687b      	ldr	r3, [r7, #4]
200028f8:	619a      	str	r2, [r3, #24]
}
200028fa:	bf00      	nop
200028fc:	370c      	adds	r7, #12
200028fe:	46bd      	mov	sp, r7
20002900:	f85d 7b04 	ldr.w	r7, [sp], #4
20002904:	4770      	bx	lr

20002906 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
20002906:	b580      	push	{r7, lr}
20002908:	b086      	sub	sp, #24
2000290a:	af02      	add	r7, sp, #8
2000290c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
2000290e:	687b      	ldr	r3, [r7, #4]
20002910:	2b00      	cmp	r3, #0
20002912:	d101      	bne.n	20002918 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
20002914:	2301      	movs	r3, #1
20002916:	e108      	b.n	20002b2a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
20002918:	687b      	ldr	r3, [r7, #4]
2000291a:	681b      	ldr	r3, [r3, #0]
2000291c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
2000291e:	687b      	ldr	r3, [r7, #4]
20002920:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
20002924:	b2db      	uxtb	r3, r3
20002926:	2b00      	cmp	r3, #0
20002928:	d106      	bne.n	20002938 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
2000292a:	687b      	ldr	r3, [r7, #4]
2000292c:	2200      	movs	r2, #0
2000292e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
20002932:	6878      	ldr	r0, [r7, #4]
20002934:	f006 fc42 	bl	200091bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
20002938:	687b      	ldr	r3, [r7, #4]
2000293a:	2203      	movs	r2, #3
2000293c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
20002940:	68bb      	ldr	r3, [r7, #8]
20002942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20002946:	d102      	bne.n	2000294e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
20002948:	687b      	ldr	r3, [r7, #4]
2000294a:	2200      	movs	r2, #0
2000294c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
2000294e:	687b      	ldr	r3, [r7, #4]
20002950:	681b      	ldr	r3, [r3, #0]
20002952:	4618      	mov	r0, r3
20002954:	f003 f999 	bl	20005c8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20002958:	687b      	ldr	r3, [r7, #4]
2000295a:	6818      	ldr	r0, [r3, #0]
2000295c:	687b      	ldr	r3, [r7, #4]
2000295e:	7c1a      	ldrb	r2, [r3, #16]
20002960:	f88d 2000 	strb.w	r2, [sp]
20002964:	3304      	adds	r3, #4
20002966:	cb0e      	ldmia	r3, {r1, r2, r3}
20002968:	f003 f882 	bl	20005a70 <USB_CoreInit>
2000296c:	4603      	mov	r3, r0
2000296e:	2b00      	cmp	r3, #0
20002970:	d005      	beq.n	2000297e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20002972:	687b      	ldr	r3, [r7, #4]
20002974:	2202      	movs	r2, #2
20002976:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
2000297a:	2301      	movs	r3, #1
2000297c:	e0d5      	b.n	20002b2a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
2000297e:	687b      	ldr	r3, [r7, #4]
20002980:	681b      	ldr	r3, [r3, #0]
20002982:	2100      	movs	r1, #0
20002984:	4618      	mov	r0, r3
20002986:	f003 f991 	bl	20005cac <USB_SetCurrentMode>
2000298a:	4603      	mov	r3, r0
2000298c:	2b00      	cmp	r3, #0
2000298e:	d005      	beq.n	2000299c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20002990:	687b      	ldr	r3, [r7, #4]
20002992:	2202      	movs	r2, #2
20002994:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20002998:	2301      	movs	r3, #1
2000299a:	e0c6      	b.n	20002b2a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
2000299c:	2300      	movs	r3, #0
2000299e:	73fb      	strb	r3, [r7, #15]
200029a0:	e04a      	b.n	20002a38 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
200029a2:	7bfa      	ldrb	r2, [r7, #15]
200029a4:	6879      	ldr	r1, [r7, #4]
200029a6:	4613      	mov	r3, r2
200029a8:	00db      	lsls	r3, r3, #3
200029aa:	4413      	add	r3, r2
200029ac:	009b      	lsls	r3, r3, #2
200029ae:	440b      	add	r3, r1
200029b0:	3315      	adds	r3, #21
200029b2:	2201      	movs	r2, #1
200029b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
200029b6:	7bfa      	ldrb	r2, [r7, #15]
200029b8:	6879      	ldr	r1, [r7, #4]
200029ba:	4613      	mov	r3, r2
200029bc:	00db      	lsls	r3, r3, #3
200029be:	4413      	add	r3, r2
200029c0:	009b      	lsls	r3, r3, #2
200029c2:	440b      	add	r3, r1
200029c4:	3314      	adds	r3, #20
200029c6:	7bfa      	ldrb	r2, [r7, #15]
200029c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
200029ca:	7bfa      	ldrb	r2, [r7, #15]
200029cc:	7bfb      	ldrb	r3, [r7, #15]
200029ce:	b298      	uxth	r0, r3
200029d0:	6879      	ldr	r1, [r7, #4]
200029d2:	4613      	mov	r3, r2
200029d4:	00db      	lsls	r3, r3, #3
200029d6:	4413      	add	r3, r2
200029d8:	009b      	lsls	r3, r3, #2
200029da:	440b      	add	r3, r1
200029dc:	332e      	adds	r3, #46	@ 0x2e
200029de:	4602      	mov	r2, r0
200029e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
200029e2:	7bfa      	ldrb	r2, [r7, #15]
200029e4:	6879      	ldr	r1, [r7, #4]
200029e6:	4613      	mov	r3, r2
200029e8:	00db      	lsls	r3, r3, #3
200029ea:	4413      	add	r3, r2
200029ec:	009b      	lsls	r3, r3, #2
200029ee:	440b      	add	r3, r1
200029f0:	3318      	adds	r3, #24
200029f2:	2200      	movs	r2, #0
200029f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
200029f6:	7bfa      	ldrb	r2, [r7, #15]
200029f8:	6879      	ldr	r1, [r7, #4]
200029fa:	4613      	mov	r3, r2
200029fc:	00db      	lsls	r3, r3, #3
200029fe:	4413      	add	r3, r2
20002a00:	009b      	lsls	r3, r3, #2
20002a02:	440b      	add	r3, r1
20002a04:	331c      	adds	r3, #28
20002a06:	2200      	movs	r2, #0
20002a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
20002a0a:	7bfa      	ldrb	r2, [r7, #15]
20002a0c:	6879      	ldr	r1, [r7, #4]
20002a0e:	4613      	mov	r3, r2
20002a10:	00db      	lsls	r3, r3, #3
20002a12:	4413      	add	r3, r2
20002a14:	009b      	lsls	r3, r3, #2
20002a16:	440b      	add	r3, r1
20002a18:	3320      	adds	r3, #32
20002a1a:	2200      	movs	r2, #0
20002a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
20002a1e:	7bfa      	ldrb	r2, [r7, #15]
20002a20:	6879      	ldr	r1, [r7, #4]
20002a22:	4613      	mov	r3, r2
20002a24:	00db      	lsls	r3, r3, #3
20002a26:	4413      	add	r3, r2
20002a28:	009b      	lsls	r3, r3, #2
20002a2a:	440b      	add	r3, r1
20002a2c:	3324      	adds	r3, #36	@ 0x24
20002a2e:	2200      	movs	r2, #0
20002a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20002a32:	7bfb      	ldrb	r3, [r7, #15]
20002a34:	3301      	adds	r3, #1
20002a36:	73fb      	strb	r3, [r7, #15]
20002a38:	687b      	ldr	r3, [r7, #4]
20002a3a:	791b      	ldrb	r3, [r3, #4]
20002a3c:	7bfa      	ldrb	r2, [r7, #15]
20002a3e:	429a      	cmp	r2, r3
20002a40:	d3af      	bcc.n	200029a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20002a42:	2300      	movs	r3, #0
20002a44:	73fb      	strb	r3, [r7, #15]
20002a46:	e044      	b.n	20002ad2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
20002a48:	7bfa      	ldrb	r2, [r7, #15]
20002a4a:	6879      	ldr	r1, [r7, #4]
20002a4c:	4613      	mov	r3, r2
20002a4e:	00db      	lsls	r3, r3, #3
20002a50:	4413      	add	r3, r2
20002a52:	009b      	lsls	r3, r3, #2
20002a54:	440b      	add	r3, r1
20002a56:	f203 2355 	addw	r3, r3, #597	@ 0x255
20002a5a:	2200      	movs	r2, #0
20002a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
20002a5e:	7bfa      	ldrb	r2, [r7, #15]
20002a60:	6879      	ldr	r1, [r7, #4]
20002a62:	4613      	mov	r3, r2
20002a64:	00db      	lsls	r3, r3, #3
20002a66:	4413      	add	r3, r2
20002a68:	009b      	lsls	r3, r3, #2
20002a6a:	440b      	add	r3, r1
20002a6c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
20002a70:	7bfa      	ldrb	r2, [r7, #15]
20002a72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
20002a74:	7bfa      	ldrb	r2, [r7, #15]
20002a76:	6879      	ldr	r1, [r7, #4]
20002a78:	4613      	mov	r3, r2
20002a7a:	00db      	lsls	r3, r3, #3
20002a7c:	4413      	add	r3, r2
20002a7e:	009b      	lsls	r3, r3, #2
20002a80:	440b      	add	r3, r1
20002a82:	f503 7316 	add.w	r3, r3, #600	@ 0x258
20002a86:	2200      	movs	r2, #0
20002a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
20002a8a:	7bfa      	ldrb	r2, [r7, #15]
20002a8c:	6879      	ldr	r1, [r7, #4]
20002a8e:	4613      	mov	r3, r2
20002a90:	00db      	lsls	r3, r3, #3
20002a92:	4413      	add	r3, r2
20002a94:	009b      	lsls	r3, r3, #2
20002a96:	440b      	add	r3, r1
20002a98:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
20002a9c:	2200      	movs	r2, #0
20002a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
20002aa0:	7bfa      	ldrb	r2, [r7, #15]
20002aa2:	6879      	ldr	r1, [r7, #4]
20002aa4:	4613      	mov	r3, r2
20002aa6:	00db      	lsls	r3, r3, #3
20002aa8:	4413      	add	r3, r2
20002aaa:	009b      	lsls	r3, r3, #2
20002aac:	440b      	add	r3, r1
20002aae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
20002ab2:	2200      	movs	r2, #0
20002ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
20002ab6:	7bfa      	ldrb	r2, [r7, #15]
20002ab8:	6879      	ldr	r1, [r7, #4]
20002aba:	4613      	mov	r3, r2
20002abc:	00db      	lsls	r3, r3, #3
20002abe:	4413      	add	r3, r2
20002ac0:	009b      	lsls	r3, r3, #2
20002ac2:	440b      	add	r3, r1
20002ac4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20002ac8:	2200      	movs	r2, #0
20002aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
20002acc:	7bfb      	ldrb	r3, [r7, #15]
20002ace:	3301      	adds	r3, #1
20002ad0:	73fb      	strb	r3, [r7, #15]
20002ad2:	687b      	ldr	r3, [r7, #4]
20002ad4:	791b      	ldrb	r3, [r3, #4]
20002ad6:	7bfa      	ldrb	r2, [r7, #15]
20002ad8:	429a      	cmp	r2, r3
20002ada:	d3b5      	bcc.n	20002a48 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
20002adc:	687b      	ldr	r3, [r7, #4]
20002ade:	6818      	ldr	r0, [r3, #0]
20002ae0:	687b      	ldr	r3, [r7, #4]
20002ae2:	7c1a      	ldrb	r2, [r3, #16]
20002ae4:	f88d 2000 	strb.w	r2, [sp]
20002ae8:	3304      	adds	r3, #4
20002aea:	cb0e      	ldmia	r3, {r1, r2, r3}
20002aec:	f003 f92a 	bl	20005d44 <USB_DevInit>
20002af0:	4603      	mov	r3, r0
20002af2:	2b00      	cmp	r3, #0
20002af4:	d005      	beq.n	20002b02 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
20002af6:	687b      	ldr	r3, [r7, #4]
20002af8:	2202      	movs	r2, #2
20002afa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
20002afe:	2301      	movs	r3, #1
20002b00:	e013      	b.n	20002b2a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
20002b02:	687b      	ldr	r3, [r7, #4]
20002b04:	2200      	movs	r2, #0
20002b06:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
20002b08:	687b      	ldr	r3, [r7, #4]
20002b0a:	2201      	movs	r2, #1
20002b0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
20002b10:	687b      	ldr	r3, [r7, #4]
20002b12:	7b1b      	ldrb	r3, [r3, #12]
20002b14:	2b01      	cmp	r3, #1
20002b16:	d102      	bne.n	20002b1e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
20002b18:	6878      	ldr	r0, [r7, #4]
20002b1a:	f001 f943 	bl	20003da4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
20002b1e:	687b      	ldr	r3, [r7, #4]
20002b20:	681b      	ldr	r3, [r3, #0]
20002b22:	4618      	mov	r0, r3
20002b24:	f004 f96d 	bl	20006e02 <USB_DevDisconnect>

  return HAL_OK;
20002b28:	2300      	movs	r3, #0
}
20002b2a:	4618      	mov	r0, r3
20002b2c:	3710      	adds	r7, #16
20002b2e:	46bd      	mov	sp, r7
20002b30:	bd80      	pop	{r7, pc}

20002b32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
20002b32:	b580      	push	{r7, lr}
20002b34:	b082      	sub	sp, #8
20002b36:	af00      	add	r7, sp, #0
20002b38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
20002b3a:	687b      	ldr	r3, [r7, #4]
20002b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20002b40:	2b01      	cmp	r3, #1
20002b42:	d101      	bne.n	20002b48 <HAL_PCD_Start+0x16>
20002b44:	2302      	movs	r3, #2
20002b46:	e012      	b.n	20002b6e <HAL_PCD_Start+0x3c>
20002b48:	687b      	ldr	r3, [r7, #4]
20002b4a:	2201      	movs	r2, #1
20002b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
20002b50:	687b      	ldr	r3, [r7, #4]
20002b52:	681b      	ldr	r3, [r3, #0]
20002b54:	4618      	mov	r0, r3
20002b56:	f003 f887 	bl	20005c68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
20002b5a:	687b      	ldr	r3, [r7, #4]
20002b5c:	681b      	ldr	r3, [r3, #0]
20002b5e:	4618      	mov	r0, r3
20002b60:	f004 f92e 	bl	20006dc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
20002b64:	687b      	ldr	r3, [r7, #4]
20002b66:	2200      	movs	r2, #0
20002b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20002b6c:	2300      	movs	r3, #0
}
20002b6e:	4618      	mov	r0, r3
20002b70:	3708      	adds	r7, #8
20002b72:	46bd      	mov	sp, r7
20002b74:	bd80      	pop	{r7, pc}

20002b76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
20002b76:	b590      	push	{r4, r7, lr}
20002b78:	b08d      	sub	sp, #52	@ 0x34
20002b7a:	af00      	add	r7, sp, #0
20002b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20002b7e:	687b      	ldr	r3, [r7, #4]
20002b80:	681b      	ldr	r3, [r3, #0]
20002b82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
20002b84:	6a3b      	ldr	r3, [r7, #32]
20002b86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
20002b88:	687b      	ldr	r3, [r7, #4]
20002b8a:	681b      	ldr	r3, [r3, #0]
20002b8c:	4618      	mov	r0, r3
20002b8e:	f004 f9ec 	bl	20006f6a <USB_GetMode>
20002b92:	4603      	mov	r3, r0
20002b94:	2b00      	cmp	r3, #0
20002b96:	f040 84b9 	bne.w	2000350c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
20002b9a:	687b      	ldr	r3, [r7, #4]
20002b9c:	681b      	ldr	r3, [r3, #0]
20002b9e:	4618      	mov	r0, r3
20002ba0:	f004 f950 	bl	20006e44 <USB_ReadInterrupts>
20002ba4:	4603      	mov	r3, r0
20002ba6:	2b00      	cmp	r3, #0
20002ba8:	f000 84af 	beq.w	2000350a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
20002bac:	69fb      	ldr	r3, [r7, #28]
20002bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20002bb2:	689b      	ldr	r3, [r3, #8]
20002bb4:	0a1b      	lsrs	r3, r3, #8
20002bb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
20002bba:	687b      	ldr	r3, [r7, #4]
20002bbc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
20002bc0:	687b      	ldr	r3, [r7, #4]
20002bc2:	681b      	ldr	r3, [r3, #0]
20002bc4:	4618      	mov	r0, r3
20002bc6:	f004 f93d 	bl	20006e44 <USB_ReadInterrupts>
20002bca:	4603      	mov	r3, r0
20002bcc:	f003 0302 	and.w	r3, r3, #2
20002bd0:	2b02      	cmp	r3, #2
20002bd2:	d107      	bne.n	20002be4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
20002bd4:	687b      	ldr	r3, [r7, #4]
20002bd6:	681b      	ldr	r3, [r3, #0]
20002bd8:	695a      	ldr	r2, [r3, #20]
20002bda:	687b      	ldr	r3, [r7, #4]
20002bdc:	681b      	ldr	r3, [r3, #0]
20002bde:	f002 0202 	and.w	r2, r2, #2
20002be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
20002be4:	687b      	ldr	r3, [r7, #4]
20002be6:	681b      	ldr	r3, [r3, #0]
20002be8:	4618      	mov	r0, r3
20002bea:	f004 f92b 	bl	20006e44 <USB_ReadInterrupts>
20002bee:	4603      	mov	r3, r0
20002bf0:	f003 0310 	and.w	r3, r3, #16
20002bf4:	2b10      	cmp	r3, #16
20002bf6:	d161      	bne.n	20002cbc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
20002bf8:	687b      	ldr	r3, [r7, #4]
20002bfa:	681b      	ldr	r3, [r3, #0]
20002bfc:	699a      	ldr	r2, [r3, #24]
20002bfe:	687b      	ldr	r3, [r7, #4]
20002c00:	681b      	ldr	r3, [r3, #0]
20002c02:	f022 0210 	bic.w	r2, r2, #16
20002c06:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
20002c08:	6a3b      	ldr	r3, [r7, #32]
20002c0a:	6a1b      	ldr	r3, [r3, #32]
20002c0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
20002c0e:	69bb      	ldr	r3, [r7, #24]
20002c10:	f003 020f 	and.w	r2, r3, #15
20002c14:	4613      	mov	r3, r2
20002c16:	00db      	lsls	r3, r3, #3
20002c18:	4413      	add	r3, r2
20002c1a:	009b      	lsls	r3, r3, #2
20002c1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20002c20:	687a      	ldr	r2, [r7, #4]
20002c22:	4413      	add	r3, r2
20002c24:	3304      	adds	r3, #4
20002c26:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
20002c28:	69bb      	ldr	r3, [r7, #24]
20002c2a:	0c5b      	lsrs	r3, r3, #17
20002c2c:	f003 030f 	and.w	r3, r3, #15
20002c30:	2b02      	cmp	r3, #2
20002c32:	d124      	bne.n	20002c7e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
20002c34:	69ba      	ldr	r2, [r7, #24]
20002c36:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
20002c3a:	4013      	ands	r3, r2
20002c3c:	2b00      	cmp	r3, #0
20002c3e:	d035      	beq.n	20002cac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
20002c40:	697b      	ldr	r3, [r7, #20]
20002c42:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
20002c44:	69bb      	ldr	r3, [r7, #24]
20002c46:	091b      	lsrs	r3, r3, #4
20002c48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
20002c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
20002c4e:	b29b      	uxth	r3, r3
20002c50:	461a      	mov	r2, r3
20002c52:	6a38      	ldr	r0, [r7, #32]
20002c54:	f003 ff62 	bl	20006b1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20002c58:	697b      	ldr	r3, [r7, #20]
20002c5a:	68da      	ldr	r2, [r3, #12]
20002c5c:	69bb      	ldr	r3, [r7, #24]
20002c5e:	091b      	lsrs	r3, r3, #4
20002c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
20002c64:	441a      	add	r2, r3
20002c66:	697b      	ldr	r3, [r7, #20]
20002c68:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20002c6a:	697b      	ldr	r3, [r7, #20]
20002c6c:	695a      	ldr	r2, [r3, #20]
20002c6e:	69bb      	ldr	r3, [r7, #24]
20002c70:	091b      	lsrs	r3, r3, #4
20002c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
20002c76:	441a      	add	r2, r3
20002c78:	697b      	ldr	r3, [r7, #20]
20002c7a:	615a      	str	r2, [r3, #20]
20002c7c:	e016      	b.n	20002cac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
20002c7e:	69bb      	ldr	r3, [r7, #24]
20002c80:	0c5b      	lsrs	r3, r3, #17
20002c82:	f003 030f 	and.w	r3, r3, #15
20002c86:	2b06      	cmp	r3, #6
20002c88:	d110      	bne.n	20002cac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
20002c8a:	687b      	ldr	r3, [r7, #4]
20002c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20002c90:	2208      	movs	r2, #8
20002c92:	4619      	mov	r1, r3
20002c94:	6a38      	ldr	r0, [r7, #32]
20002c96:	f003 ff41 	bl	20006b1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
20002c9a:	697b      	ldr	r3, [r7, #20]
20002c9c:	695a      	ldr	r2, [r3, #20]
20002c9e:	69bb      	ldr	r3, [r7, #24]
20002ca0:	091b      	lsrs	r3, r3, #4
20002ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
20002ca6:	441a      	add	r2, r3
20002ca8:	697b      	ldr	r3, [r7, #20]
20002caa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
20002cac:	687b      	ldr	r3, [r7, #4]
20002cae:	681b      	ldr	r3, [r3, #0]
20002cb0:	699a      	ldr	r2, [r3, #24]
20002cb2:	687b      	ldr	r3, [r7, #4]
20002cb4:	681b      	ldr	r3, [r3, #0]
20002cb6:	f042 0210 	orr.w	r2, r2, #16
20002cba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
20002cbc:	687b      	ldr	r3, [r7, #4]
20002cbe:	681b      	ldr	r3, [r3, #0]
20002cc0:	4618      	mov	r0, r3
20002cc2:	f004 f8bf 	bl	20006e44 <USB_ReadInterrupts>
20002cc6:	4603      	mov	r3, r0
20002cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20002ccc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
20002cd0:	f040 80a7 	bne.w	20002e22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
20002cd4:	2300      	movs	r3, #0
20002cd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
20002cd8:	687b      	ldr	r3, [r7, #4]
20002cda:	681b      	ldr	r3, [r3, #0]
20002cdc:	4618      	mov	r0, r3
20002cde:	f004 f8c4 	bl	20006e6a <USB_ReadDevAllOutEpInterrupt>
20002ce2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
20002ce4:	e099      	b.n	20002e1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
20002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002ce8:	f003 0301 	and.w	r3, r3, #1
20002cec:	2b00      	cmp	r3, #0
20002cee:	f000 808e 	beq.w	20002e0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
20002cf2:	687b      	ldr	r3, [r7, #4]
20002cf4:	681b      	ldr	r3, [r3, #0]
20002cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002cf8:	b2d2      	uxtb	r2, r2
20002cfa:	4611      	mov	r1, r2
20002cfc:	4618      	mov	r0, r3
20002cfe:	f004 f8e8 	bl	20006ed2 <USB_ReadDevOutEPInterrupt>
20002d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
20002d04:	693b      	ldr	r3, [r7, #16]
20002d06:	f003 0301 	and.w	r3, r3, #1
20002d0a:	2b00      	cmp	r3, #0
20002d0c:	d00c      	beq.n	20002d28 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
20002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002d10:	015a      	lsls	r2, r3, #5
20002d12:	69fb      	ldr	r3, [r7, #28]
20002d14:	4413      	add	r3, r2
20002d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20002d1a:	461a      	mov	r2, r3
20002d1c:	2301      	movs	r3, #1
20002d1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
20002d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20002d22:	6878      	ldr	r0, [r7, #4]
20002d24:	f000 feb8 	bl	20003a98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
20002d28:	693b      	ldr	r3, [r7, #16]
20002d2a:	f003 0308 	and.w	r3, r3, #8
20002d2e:	2b00      	cmp	r3, #0
20002d30:	d00c      	beq.n	20002d4c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
20002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002d34:	015a      	lsls	r2, r3, #5
20002d36:	69fb      	ldr	r3, [r7, #28]
20002d38:	4413      	add	r3, r2
20002d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20002d3e:	461a      	mov	r2, r3
20002d40:	2308      	movs	r3, #8
20002d42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
20002d44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20002d46:	6878      	ldr	r0, [r7, #4]
20002d48:	f000 ff8e 	bl	20003c68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
20002d4c:	693b      	ldr	r3, [r7, #16]
20002d4e:	f003 0310 	and.w	r3, r3, #16
20002d52:	2b00      	cmp	r3, #0
20002d54:	d008      	beq.n	20002d68 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
20002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002d58:	015a      	lsls	r2, r3, #5
20002d5a:	69fb      	ldr	r3, [r7, #28]
20002d5c:	4413      	add	r3, r2
20002d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20002d62:	461a      	mov	r2, r3
20002d64:	2310      	movs	r3, #16
20002d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
20002d68:	693b      	ldr	r3, [r7, #16]
20002d6a:	f003 0302 	and.w	r3, r3, #2
20002d6e:	2b00      	cmp	r3, #0
20002d70:	d030      	beq.n	20002dd4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
20002d72:	6a3b      	ldr	r3, [r7, #32]
20002d74:	695b      	ldr	r3, [r3, #20]
20002d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20002d7a:	2b80      	cmp	r3, #128	@ 0x80
20002d7c:	d109      	bne.n	20002d92 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
20002d7e:	69fb      	ldr	r3, [r7, #28]
20002d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20002d84:	685b      	ldr	r3, [r3, #4]
20002d86:	69fa      	ldr	r2, [r7, #28]
20002d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20002d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
20002d90:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
20002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002d94:	4613      	mov	r3, r2
20002d96:	00db      	lsls	r3, r3, #3
20002d98:	4413      	add	r3, r2
20002d9a:	009b      	lsls	r3, r3, #2
20002d9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20002da0:	687a      	ldr	r2, [r7, #4]
20002da2:	4413      	add	r3, r2
20002da4:	3304      	adds	r3, #4
20002da6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
20002da8:	697b      	ldr	r3, [r7, #20]
20002daa:	78db      	ldrb	r3, [r3, #3]
20002dac:	2b01      	cmp	r3, #1
20002dae:	d108      	bne.n	20002dc2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
20002db0:	697b      	ldr	r3, [r7, #20]
20002db2:	2200      	movs	r2, #0
20002db4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
20002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002db8:	b2db      	uxtb	r3, r3
20002dba:	4619      	mov	r1, r3
20002dbc:	6878      	ldr	r0, [r7, #4]
20002dbe:	f006 fb31 	bl	20009424 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
20002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002dc4:	015a      	lsls	r2, r3, #5
20002dc6:	69fb      	ldr	r3, [r7, #28]
20002dc8:	4413      	add	r3, r2
20002dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20002dce:	461a      	mov	r2, r3
20002dd0:	2302      	movs	r3, #2
20002dd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
20002dd4:	693b      	ldr	r3, [r7, #16]
20002dd6:	f003 0320 	and.w	r3, r3, #32
20002dda:	2b00      	cmp	r3, #0
20002ddc:	d008      	beq.n	20002df0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002de0:	015a      	lsls	r2, r3, #5
20002de2:	69fb      	ldr	r3, [r7, #28]
20002de4:	4413      	add	r3, r2
20002de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20002dea:	461a      	mov	r2, r3
20002dec:	2320      	movs	r3, #32
20002dee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
20002df0:	693b      	ldr	r3, [r7, #16]
20002df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20002df6:	2b00      	cmp	r3, #0
20002df8:	d009      	beq.n	20002e0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
20002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002dfc:	015a      	lsls	r2, r3, #5
20002dfe:	69fb      	ldr	r3, [r7, #28]
20002e00:	4413      	add	r3, r2
20002e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20002e06:	461a      	mov	r2, r3
20002e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20002e0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
20002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002e10:	3301      	adds	r3, #1
20002e12:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
20002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002e16:	085b      	lsrs	r3, r3, #1
20002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
20002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002e1c:	2b00      	cmp	r3, #0
20002e1e:	f47f af62 	bne.w	20002ce6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
20002e22:	687b      	ldr	r3, [r7, #4]
20002e24:	681b      	ldr	r3, [r3, #0]
20002e26:	4618      	mov	r0, r3
20002e28:	f004 f80c 	bl	20006e44 <USB_ReadInterrupts>
20002e2c:	4603      	mov	r3, r0
20002e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20002e32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
20002e36:	f040 80db 	bne.w	20002ff0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
20002e3a:	687b      	ldr	r3, [r7, #4]
20002e3c:	681b      	ldr	r3, [r3, #0]
20002e3e:	4618      	mov	r0, r3
20002e40:	f004 f82d 	bl	20006e9e <USB_ReadDevAllInEpInterrupt>
20002e44:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
20002e46:	2300      	movs	r3, #0
20002e48:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
20002e4a:	e0cd      	b.n	20002fe8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
20002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002e4e:	f003 0301 	and.w	r3, r3, #1
20002e52:	2b00      	cmp	r3, #0
20002e54:	f000 80c2 	beq.w	20002fdc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
20002e58:	687b      	ldr	r3, [r7, #4]
20002e5a:	681b      	ldr	r3, [r3, #0]
20002e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002e5e:	b2d2      	uxtb	r2, r2
20002e60:	4611      	mov	r1, r2
20002e62:	4618      	mov	r0, r3
20002e64:	f004 f853 	bl	20006f0e <USB_ReadDevInEPInterrupt>
20002e68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
20002e6a:	693b      	ldr	r3, [r7, #16]
20002e6c:	f003 0301 	and.w	r3, r3, #1
20002e70:	2b00      	cmp	r3, #0
20002e72:	d057      	beq.n	20002f24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
20002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002e76:	f003 030f 	and.w	r3, r3, #15
20002e7a:	2201      	movs	r2, #1
20002e7c:	fa02 f303 	lsl.w	r3, r2, r3
20002e80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
20002e82:	69fb      	ldr	r3, [r7, #28]
20002e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20002e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20002e8a:	68fb      	ldr	r3, [r7, #12]
20002e8c:	43db      	mvns	r3, r3
20002e8e:	69f9      	ldr	r1, [r7, #28]
20002e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20002e94:	4013      	ands	r3, r2
20002e96:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
20002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002e9a:	015a      	lsls	r2, r3, #5
20002e9c:	69fb      	ldr	r3, [r7, #28]
20002e9e:	4413      	add	r3, r2
20002ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20002ea4:	461a      	mov	r2, r3
20002ea6:	2301      	movs	r3, #1
20002ea8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
20002eaa:	687b      	ldr	r3, [r7, #4]
20002eac:	799b      	ldrb	r3, [r3, #6]
20002eae:	2b01      	cmp	r3, #1
20002eb0:	d132      	bne.n	20002f18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
20002eb2:	6879      	ldr	r1, [r7, #4]
20002eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002eb6:	4613      	mov	r3, r2
20002eb8:	00db      	lsls	r3, r3, #3
20002eba:	4413      	add	r3, r2
20002ebc:	009b      	lsls	r3, r3, #2
20002ebe:	440b      	add	r3, r1
20002ec0:	3320      	adds	r3, #32
20002ec2:	6819      	ldr	r1, [r3, #0]
20002ec4:	6878      	ldr	r0, [r7, #4]
20002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002ec8:	4613      	mov	r3, r2
20002eca:	00db      	lsls	r3, r3, #3
20002ecc:	4413      	add	r3, r2
20002ece:	009b      	lsls	r3, r3, #2
20002ed0:	4403      	add	r3, r0
20002ed2:	331c      	adds	r3, #28
20002ed4:	681b      	ldr	r3, [r3, #0]
20002ed6:	4419      	add	r1, r3
20002ed8:	6878      	ldr	r0, [r7, #4]
20002eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002edc:	4613      	mov	r3, r2
20002ede:	00db      	lsls	r3, r3, #3
20002ee0:	4413      	add	r3, r2
20002ee2:	009b      	lsls	r3, r3, #2
20002ee4:	4403      	add	r3, r0
20002ee6:	3320      	adds	r3, #32
20002ee8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
20002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002eec:	2b00      	cmp	r3, #0
20002eee:	d113      	bne.n	20002f18 <HAL_PCD_IRQHandler+0x3a2>
20002ef0:	6879      	ldr	r1, [r7, #4]
20002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002ef4:	4613      	mov	r3, r2
20002ef6:	00db      	lsls	r3, r3, #3
20002ef8:	4413      	add	r3, r2
20002efa:	009b      	lsls	r3, r3, #2
20002efc:	440b      	add	r3, r1
20002efe:	3324      	adds	r3, #36	@ 0x24
20002f00:	681b      	ldr	r3, [r3, #0]
20002f02:	2b00      	cmp	r3, #0
20002f04:	d108      	bne.n	20002f18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
20002f06:	687b      	ldr	r3, [r7, #4]
20002f08:	6818      	ldr	r0, [r3, #0]
20002f0a:	687b      	ldr	r3, [r7, #4]
20002f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20002f10:	461a      	mov	r2, r3
20002f12:	2101      	movs	r1, #1
20002f14:	f004 f85c 	bl	20006fd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
20002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002f1a:	b2db      	uxtb	r3, r3
20002f1c:	4619      	mov	r1, r3
20002f1e:	6878      	ldr	r0, [r7, #4]
20002f20:	f006 f9fb 	bl	2000931a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
20002f24:	693b      	ldr	r3, [r7, #16]
20002f26:	f003 0308 	and.w	r3, r3, #8
20002f2a:	2b00      	cmp	r3, #0
20002f2c:	d008      	beq.n	20002f40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
20002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002f30:	015a      	lsls	r2, r3, #5
20002f32:	69fb      	ldr	r3, [r7, #28]
20002f34:	4413      	add	r3, r2
20002f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20002f3a:	461a      	mov	r2, r3
20002f3c:	2308      	movs	r3, #8
20002f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
20002f40:	693b      	ldr	r3, [r7, #16]
20002f42:	f003 0310 	and.w	r3, r3, #16
20002f46:	2b00      	cmp	r3, #0
20002f48:	d008      	beq.n	20002f5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
20002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002f4c:	015a      	lsls	r2, r3, #5
20002f4e:	69fb      	ldr	r3, [r7, #28]
20002f50:	4413      	add	r3, r2
20002f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20002f56:	461a      	mov	r2, r3
20002f58:	2310      	movs	r3, #16
20002f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
20002f5c:	693b      	ldr	r3, [r7, #16]
20002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20002f62:	2b00      	cmp	r3, #0
20002f64:	d008      	beq.n	20002f78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
20002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002f68:	015a      	lsls	r2, r3, #5
20002f6a:	69fb      	ldr	r3, [r7, #28]
20002f6c:	4413      	add	r3, r2
20002f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20002f72:	461a      	mov	r2, r3
20002f74:	2340      	movs	r3, #64	@ 0x40
20002f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
20002f78:	693b      	ldr	r3, [r7, #16]
20002f7a:	f003 0302 	and.w	r3, r3, #2
20002f7e:	2b00      	cmp	r3, #0
20002f80:	d023      	beq.n	20002fca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
20002f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20002f84:	6a38      	ldr	r0, [r7, #32]
20002f86:	f003 f83b 	bl	20006000 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
20002f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002f8c:	4613      	mov	r3, r2
20002f8e:	00db      	lsls	r3, r3, #3
20002f90:	4413      	add	r3, r2
20002f92:	009b      	lsls	r3, r3, #2
20002f94:	3310      	adds	r3, #16
20002f96:	687a      	ldr	r2, [r7, #4]
20002f98:	4413      	add	r3, r2
20002f9a:	3304      	adds	r3, #4
20002f9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
20002f9e:	697b      	ldr	r3, [r7, #20]
20002fa0:	78db      	ldrb	r3, [r3, #3]
20002fa2:	2b01      	cmp	r3, #1
20002fa4:	d108      	bne.n	20002fb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
20002fa6:	697b      	ldr	r3, [r7, #20]
20002fa8:	2200      	movs	r2, #0
20002faa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
20002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002fae:	b2db      	uxtb	r3, r3
20002fb0:	4619      	mov	r1, r3
20002fb2:	6878      	ldr	r0, [r7, #4]
20002fb4:	f006 fa48 	bl	20009448 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
20002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002fba:	015a      	lsls	r2, r3, #5
20002fbc:	69fb      	ldr	r3, [r7, #28]
20002fbe:	4413      	add	r3, r2
20002fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20002fc4:	461a      	mov	r2, r3
20002fc6:	2302      	movs	r3, #2
20002fc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
20002fca:	693b      	ldr	r3, [r7, #16]
20002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20002fd0:	2b00      	cmp	r3, #0
20002fd2:	d003      	beq.n	20002fdc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
20002fd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20002fd6:	6878      	ldr	r0, [r7, #4]
20002fd8:	f000 fcd2 	bl	20003980 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
20002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002fde:	3301      	adds	r3, #1
20002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
20002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002fe4:	085b      	lsrs	r3, r3, #1
20002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
20002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20002fea:	2b00      	cmp	r3, #0
20002fec:	f47f af2e 	bne.w	20002e4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
20002ff0:	687b      	ldr	r3, [r7, #4]
20002ff2:	681b      	ldr	r3, [r3, #0]
20002ff4:	4618      	mov	r0, r3
20002ff6:	f003 ff25 	bl	20006e44 <USB_ReadInterrupts>
20002ffa:	4603      	mov	r3, r0
20002ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20003000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20003004:	d122      	bne.n	2000304c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
20003006:	69fb      	ldr	r3, [r7, #28]
20003008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000300c:	685b      	ldr	r3, [r3, #4]
2000300e:	69fa      	ldr	r2, [r7, #28]
20003010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20003014:	f023 0301 	bic.w	r3, r3, #1
20003018:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
2000301a:	687b      	ldr	r3, [r7, #4]
2000301c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
20003020:	2b01      	cmp	r3, #1
20003022:	d108      	bne.n	20003036 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
20003024:	687b      	ldr	r3, [r7, #4]
20003026:	2200      	movs	r2, #0
20003028:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
2000302c:	2100      	movs	r1, #0
2000302e:	6878      	ldr	r0, [r7, #4]
20003030:	f006 fbb0 	bl	20009794 <HAL_PCDEx_LPM_Callback>
20003034:	e002      	b.n	2000303c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
20003036:	6878      	ldr	r0, [r7, #4]
20003038:	f006 f9e6 	bl	20009408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
2000303c:	687b      	ldr	r3, [r7, #4]
2000303e:	681b      	ldr	r3, [r3, #0]
20003040:	695a      	ldr	r2, [r3, #20]
20003042:	687b      	ldr	r3, [r7, #4]
20003044:	681b      	ldr	r3, [r3, #0]
20003046:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
2000304a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
2000304c:	687b      	ldr	r3, [r7, #4]
2000304e:	681b      	ldr	r3, [r3, #0]
20003050:	4618      	mov	r0, r3
20003052:	f003 fef7 	bl	20006e44 <USB_ReadInterrupts>
20003056:	4603      	mov	r3, r0
20003058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
2000305c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20003060:	d112      	bne.n	20003088 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
20003062:	69fb      	ldr	r3, [r7, #28]
20003064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20003068:	689b      	ldr	r3, [r3, #8]
2000306a:	f003 0301 	and.w	r3, r3, #1
2000306e:	2b01      	cmp	r3, #1
20003070:	d102      	bne.n	20003078 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
20003072:	6878      	ldr	r0, [r7, #4]
20003074:	f006 f9a2 	bl	200093bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
20003078:	687b      	ldr	r3, [r7, #4]
2000307a:	681b      	ldr	r3, [r3, #0]
2000307c:	695a      	ldr	r2, [r3, #20]
2000307e:	687b      	ldr	r3, [r7, #4]
20003080:	681b      	ldr	r3, [r3, #0]
20003082:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
20003086:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
20003088:	687b      	ldr	r3, [r7, #4]
2000308a:	681b      	ldr	r3, [r3, #0]
2000308c:	4618      	mov	r0, r3
2000308e:	f003 fed9 	bl	20006e44 <USB_ReadInterrupts>
20003092:	4603      	mov	r3, r0
20003094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20003098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
2000309c:	d121      	bne.n	200030e2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
2000309e:	687b      	ldr	r3, [r7, #4]
200030a0:	681b      	ldr	r3, [r3, #0]
200030a2:	695a      	ldr	r2, [r3, #20]
200030a4:	687b      	ldr	r3, [r7, #4]
200030a6:	681b      	ldr	r3, [r3, #0]
200030a8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
200030ac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
200030ae:	687b      	ldr	r3, [r7, #4]
200030b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
200030b4:	2b00      	cmp	r3, #0
200030b6:	d111      	bne.n	200030dc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
200030b8:	687b      	ldr	r3, [r7, #4]
200030ba:	2201      	movs	r2, #1
200030bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
200030c0:	687b      	ldr	r3, [r7, #4]
200030c2:	681b      	ldr	r3, [r3, #0]
200030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200030c6:	089b      	lsrs	r3, r3, #2
200030c8:	f003 020f 	and.w	r2, r3, #15
200030cc:	687b      	ldr	r3, [r7, #4]
200030ce:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
200030d2:	2101      	movs	r1, #1
200030d4:	6878      	ldr	r0, [r7, #4]
200030d6:	f006 fb5d 	bl	20009794 <HAL_PCDEx_LPM_Callback>
200030da:	e002      	b.n	200030e2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
200030dc:	6878      	ldr	r0, [r7, #4]
200030de:	f006 f96d 	bl	200093bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
200030e2:	687b      	ldr	r3, [r7, #4]
200030e4:	681b      	ldr	r3, [r3, #0]
200030e6:	4618      	mov	r0, r3
200030e8:	f003 feac 	bl	20006e44 <USB_ReadInterrupts>
200030ec:	4603      	mov	r3, r0
200030ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
200030f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
200030f6:	f040 80b7 	bne.w	20003268 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
200030fa:	69fb      	ldr	r3, [r7, #28]
200030fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20003100:	685b      	ldr	r3, [r3, #4]
20003102:	69fa      	ldr	r2, [r7, #28]
20003104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20003108:	f023 0301 	bic.w	r3, r3, #1
2000310c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
2000310e:	687b      	ldr	r3, [r7, #4]
20003110:	681b      	ldr	r3, [r3, #0]
20003112:	2110      	movs	r1, #16
20003114:	4618      	mov	r0, r3
20003116:	f002 ff73 	bl	20006000 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
2000311a:	2300      	movs	r3, #0
2000311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000311e:	e046      	b.n	200031ae <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
20003120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003122:	015a      	lsls	r2, r3, #5
20003124:	69fb      	ldr	r3, [r7, #28]
20003126:	4413      	add	r3, r2
20003128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000312c:	461a      	mov	r2, r3
2000312e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20003132:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
20003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003136:	015a      	lsls	r2, r3, #5
20003138:	69fb      	ldr	r3, [r7, #28]
2000313a:	4413      	add	r3, r2
2000313c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20003140:	681b      	ldr	r3, [r3, #0]
20003142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20003144:	0151      	lsls	r1, r2, #5
20003146:	69fa      	ldr	r2, [r7, #28]
20003148:	440a      	add	r2, r1
2000314a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000314e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
20003152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
20003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20003156:	015a      	lsls	r2, r3, #5
20003158:	69fb      	ldr	r3, [r7, #28]
2000315a:	4413      	add	r3, r2
2000315c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003160:	461a      	mov	r2, r3
20003162:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20003166:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
20003168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000316a:	015a      	lsls	r2, r3, #5
2000316c:	69fb      	ldr	r3, [r7, #28]
2000316e:	4413      	add	r3, r2
20003170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003174:	681b      	ldr	r3, [r3, #0]
20003176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20003178:	0151      	lsls	r1, r2, #5
2000317a:	69fa      	ldr	r2, [r7, #28]
2000317c:	440a      	add	r2, r1
2000317e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20003182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
20003186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000318a:	015a      	lsls	r2, r3, #5
2000318c:	69fb      	ldr	r3, [r7, #28]
2000318e:	4413      	add	r3, r2
20003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003194:	681b      	ldr	r3, [r3, #0]
20003196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20003198:	0151      	lsls	r1, r2, #5
2000319a:	69fa      	ldr	r2, [r7, #28]
2000319c:	440a      	add	r2, r1
2000319e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200031a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
200031a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
200031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200031aa:	3301      	adds	r3, #1
200031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
200031ae:	687b      	ldr	r3, [r7, #4]
200031b0:	791b      	ldrb	r3, [r3, #4]
200031b2:	461a      	mov	r2, r3
200031b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200031b6:	4293      	cmp	r3, r2
200031b8:	d3b2      	bcc.n	20003120 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
200031ba:	69fb      	ldr	r3, [r7, #28]
200031bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200031c0:	69db      	ldr	r3, [r3, #28]
200031c2:	69fa      	ldr	r2, [r7, #28]
200031c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200031c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
200031cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
200031ce:	687b      	ldr	r3, [r7, #4]
200031d0:	7bdb      	ldrb	r3, [r3, #15]
200031d2:	2b00      	cmp	r3, #0
200031d4:	d016      	beq.n	20003204 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
200031d6:	69fb      	ldr	r3, [r7, #28]
200031d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200031dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200031e0:	69fa      	ldr	r2, [r7, #28]
200031e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200031e6:	f043 030b 	orr.w	r3, r3, #11
200031ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
200031ee:	69fb      	ldr	r3, [r7, #28]
200031f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200031f6:	69fa      	ldr	r2, [r7, #28]
200031f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
200031fc:	f043 030b 	orr.w	r3, r3, #11
20003200:	6453      	str	r3, [r2, #68]	@ 0x44
20003202:	e015      	b.n	20003230 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
20003204:	69fb      	ldr	r3, [r7, #28]
20003206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000320a:	695a      	ldr	r2, [r3, #20]
2000320c:	69fb      	ldr	r3, [r7, #28]
2000320e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20003212:	4619      	mov	r1, r3
20003214:	f242 032b 	movw	r3, #8235	@ 0x202b
20003218:	4313      	orrs	r3, r2
2000321a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
2000321c:	69fb      	ldr	r3, [r7, #28]
2000321e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20003222:	691b      	ldr	r3, [r3, #16]
20003224:	69fa      	ldr	r2, [r7, #28]
20003226:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000322a:	f043 030b 	orr.w	r3, r3, #11
2000322e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
20003230:	69fb      	ldr	r3, [r7, #28]
20003232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20003236:	681b      	ldr	r3, [r3, #0]
20003238:	69fa      	ldr	r2, [r7, #28]
2000323a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
2000323e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
20003242:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20003244:	687b      	ldr	r3, [r7, #4]
20003246:	6818      	ldr	r0, [r3, #0]
20003248:	687b      	ldr	r3, [r7, #4]
2000324a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
2000324c:	687b      	ldr	r3, [r7, #4]
2000324e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
20003252:	461a      	mov	r2, r3
20003254:	f003 febc 	bl	20006fd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
20003258:	687b      	ldr	r3, [r7, #4]
2000325a:	681b      	ldr	r3, [r3, #0]
2000325c:	695a      	ldr	r2, [r3, #20]
2000325e:	687b      	ldr	r3, [r7, #4]
20003260:	681b      	ldr	r3, [r3, #0]
20003262:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
20003266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
20003268:	687b      	ldr	r3, [r7, #4]
2000326a:	681b      	ldr	r3, [r3, #0]
2000326c:	4618      	mov	r0, r3
2000326e:	f003 fde9 	bl	20006e44 <USB_ReadInterrupts>
20003272:	4603      	mov	r3, r0
20003274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20003278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2000327c:	d123      	bne.n	200032c6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
2000327e:	687b      	ldr	r3, [r7, #4]
20003280:	681b      	ldr	r3, [r3, #0]
20003282:	4618      	mov	r0, r3
20003284:	f003 fe80 	bl	20006f88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
20003288:	687b      	ldr	r3, [r7, #4]
2000328a:	681b      	ldr	r3, [r3, #0]
2000328c:	4618      	mov	r0, r3
2000328e:	f002 ff30 	bl	200060f2 <USB_GetDevSpeed>
20003292:	4603      	mov	r3, r0
20003294:	461a      	mov	r2, r3
20003296:	687b      	ldr	r3, [r7, #4]
20003298:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
2000329a:	687b      	ldr	r3, [r7, #4]
2000329c:	681c      	ldr	r4, [r3, #0]
2000329e:	f001 fa9b 	bl	200047d8 <HAL_RCC_GetHCLKFreq>
200032a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
200032a4:	687b      	ldr	r3, [r7, #4]
200032a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
200032a8:	461a      	mov	r2, r3
200032aa:	4620      	mov	r0, r4
200032ac:	f002 fc3a 	bl	20005b24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
200032b0:	6878      	ldr	r0, [r7, #4]
200032b2:	f006 f85a 	bl	2000936a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
200032b6:	687b      	ldr	r3, [r7, #4]
200032b8:	681b      	ldr	r3, [r3, #0]
200032ba:	695a      	ldr	r2, [r3, #20]
200032bc:	687b      	ldr	r3, [r7, #4]
200032be:	681b      	ldr	r3, [r3, #0]
200032c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
200032c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
200032c6:	687b      	ldr	r3, [r7, #4]
200032c8:	681b      	ldr	r3, [r3, #0]
200032ca:	4618      	mov	r0, r3
200032cc:	f003 fdba 	bl	20006e44 <USB_ReadInterrupts>
200032d0:	4603      	mov	r3, r0
200032d2:	f003 0308 	and.w	r3, r3, #8
200032d6:	2b08      	cmp	r3, #8
200032d8:	d10a      	bne.n	200032f0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
200032da:	6878      	ldr	r0, [r7, #4]
200032dc:	f006 f837 	bl	2000934e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
200032e0:	687b      	ldr	r3, [r7, #4]
200032e2:	681b      	ldr	r3, [r3, #0]
200032e4:	695a      	ldr	r2, [r3, #20]
200032e6:	687b      	ldr	r3, [r7, #4]
200032e8:	681b      	ldr	r3, [r3, #0]
200032ea:	f002 0208 	and.w	r2, r2, #8
200032ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
200032f0:	687b      	ldr	r3, [r7, #4]
200032f2:	681b      	ldr	r3, [r3, #0]
200032f4:	4618      	mov	r0, r3
200032f6:	f003 fda5 	bl	20006e44 <USB_ReadInterrupts>
200032fa:	4603      	mov	r3, r0
200032fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003300:	2b80      	cmp	r3, #128	@ 0x80
20003302:	d123      	bne.n	2000334c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
20003304:	6a3b      	ldr	r3, [r7, #32]
20003306:	699b      	ldr	r3, [r3, #24]
20003308:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
2000330c:	6a3b      	ldr	r3, [r7, #32]
2000330e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20003310:	2301      	movs	r3, #1
20003312:	627b      	str	r3, [r7, #36]	@ 0x24
20003314:	e014      	b.n	20003340 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
20003316:	6879      	ldr	r1, [r7, #4]
20003318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000331a:	4613      	mov	r3, r2
2000331c:	00db      	lsls	r3, r3, #3
2000331e:	4413      	add	r3, r2
20003320:	009b      	lsls	r3, r3, #2
20003322:	440b      	add	r3, r1
20003324:	f203 2357 	addw	r3, r3, #599	@ 0x257
20003328:	781b      	ldrb	r3, [r3, #0]
2000332a:	2b01      	cmp	r3, #1
2000332c:	d105      	bne.n	2000333a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
2000332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003330:	b2db      	uxtb	r3, r3
20003332:	4619      	mov	r1, r3
20003334:	6878      	ldr	r0, [r7, #4]
20003336:	f000 faf2 	bl	2000391e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
2000333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000333c:	3301      	adds	r3, #1
2000333e:	627b      	str	r3, [r7, #36]	@ 0x24
20003340:	687b      	ldr	r3, [r7, #4]
20003342:	791b      	ldrb	r3, [r3, #4]
20003344:	461a      	mov	r2, r3
20003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003348:	4293      	cmp	r3, r2
2000334a:	d3e4      	bcc.n	20003316 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
2000334c:	687b      	ldr	r3, [r7, #4]
2000334e:	681b      	ldr	r3, [r3, #0]
20003350:	4618      	mov	r0, r3
20003352:	f003 fd77 	bl	20006e44 <USB_ReadInterrupts>
20003356:	4603      	mov	r3, r0
20003358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2000335c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20003360:	d13c      	bne.n	200033dc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
20003362:	2301      	movs	r3, #1
20003364:	627b      	str	r3, [r7, #36]	@ 0x24
20003366:	e02b      	b.n	200033c0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
20003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000336a:	015a      	lsls	r2, r3, #5
2000336c:	69fb      	ldr	r3, [r7, #28]
2000336e:	4413      	add	r3, r2
20003370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20003374:	681b      	ldr	r3, [r3, #0]
20003376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20003378:	6879      	ldr	r1, [r7, #4]
2000337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000337c:	4613      	mov	r3, r2
2000337e:	00db      	lsls	r3, r3, #3
20003380:	4413      	add	r3, r2
20003382:	009b      	lsls	r3, r3, #2
20003384:	440b      	add	r3, r1
20003386:	3318      	adds	r3, #24
20003388:	781b      	ldrb	r3, [r3, #0]
2000338a:	2b01      	cmp	r3, #1
2000338c:	d115      	bne.n	200033ba <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
2000338e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
20003390:	2b00      	cmp	r3, #0
20003392:	da12      	bge.n	200033ba <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
20003394:	6879      	ldr	r1, [r7, #4]
20003396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20003398:	4613      	mov	r3, r2
2000339a:	00db      	lsls	r3, r3, #3
2000339c:	4413      	add	r3, r2
2000339e:	009b      	lsls	r3, r3, #2
200033a0:	440b      	add	r3, r1
200033a2:	3317      	adds	r3, #23
200033a4:	2201      	movs	r2, #1
200033a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
200033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200033aa:	b2db      	uxtb	r3, r3
200033ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
200033b0:	b2db      	uxtb	r3, r3
200033b2:	4619      	mov	r1, r3
200033b4:	6878      	ldr	r0, [r7, #4]
200033b6:	f000 fab2 	bl	2000391e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
200033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200033bc:	3301      	adds	r3, #1
200033be:	627b      	str	r3, [r7, #36]	@ 0x24
200033c0:	687b      	ldr	r3, [r7, #4]
200033c2:	791b      	ldrb	r3, [r3, #4]
200033c4:	461a      	mov	r2, r3
200033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200033c8:	4293      	cmp	r3, r2
200033ca:	d3cd      	bcc.n	20003368 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
200033cc:	687b      	ldr	r3, [r7, #4]
200033ce:	681b      	ldr	r3, [r3, #0]
200033d0:	695a      	ldr	r2, [r3, #20]
200033d2:	687b      	ldr	r3, [r7, #4]
200033d4:	681b      	ldr	r3, [r3, #0]
200033d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
200033da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
200033dc:	687b      	ldr	r3, [r7, #4]
200033de:	681b      	ldr	r3, [r3, #0]
200033e0:	4618      	mov	r0, r3
200033e2:	f003 fd2f 	bl	20006e44 <USB_ReadInterrupts>
200033e6:	4603      	mov	r3, r0
200033e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200033ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
200033f0:	d156      	bne.n	200034a0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
200033f2:	2301      	movs	r3, #1
200033f4:	627b      	str	r3, [r7, #36]	@ 0x24
200033f6:	e045      	b.n	20003484 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
200033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200033fa:	015a      	lsls	r2, r3, #5
200033fc:	69fb      	ldr	r3, [r7, #28]
200033fe:	4413      	add	r3, r2
20003400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003404:	681b      	ldr	r3, [r3, #0]
20003406:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20003408:	6879      	ldr	r1, [r7, #4]
2000340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000340c:	4613      	mov	r3, r2
2000340e:	00db      	lsls	r3, r3, #3
20003410:	4413      	add	r3, r2
20003412:	009b      	lsls	r3, r3, #2
20003414:	440b      	add	r3, r1
20003416:	f503 7316 	add.w	r3, r3, #600	@ 0x258
2000341a:	781b      	ldrb	r3, [r3, #0]
2000341c:	2b01      	cmp	r3, #1
2000341e:	d12e      	bne.n	2000347e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20003420:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
20003422:	2b00      	cmp	r3, #0
20003424:	da2b      	bge.n	2000347e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
20003426:	69bb      	ldr	r3, [r7, #24]
20003428:	0c1a      	lsrs	r2, r3, #16
2000342a:	687b      	ldr	r3, [r7, #4]
2000342c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
20003430:	4053      	eors	r3, r2
20003432:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
20003436:	2b00      	cmp	r3, #0
20003438:	d121      	bne.n	2000347e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
2000343a:	6879      	ldr	r1, [r7, #4]
2000343c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000343e:	4613      	mov	r3, r2
20003440:	00db      	lsls	r3, r3, #3
20003442:	4413      	add	r3, r2
20003444:	009b      	lsls	r3, r3, #2
20003446:	440b      	add	r3, r1
20003448:	f203 2357 	addw	r3, r3, #599	@ 0x257
2000344c:	2201      	movs	r2, #1
2000344e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
20003450:	6a3b      	ldr	r3, [r7, #32]
20003452:	699b      	ldr	r3, [r3, #24]
20003454:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20003458:	6a3b      	ldr	r3, [r7, #32]
2000345a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
2000345c:	6a3b      	ldr	r3, [r7, #32]
2000345e:	695b      	ldr	r3, [r3, #20]
20003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20003464:	2b00      	cmp	r3, #0
20003466:	d10a      	bne.n	2000347e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
20003468:	69fb      	ldr	r3, [r7, #28]
2000346a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000346e:	685b      	ldr	r3, [r3, #4]
20003470:	69fa      	ldr	r2, [r7, #28]
20003472:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20003476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
2000347a:	6053      	str	r3, [r2, #4]
            break;
2000347c:	e008      	b.n	20003490 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
2000347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20003480:	3301      	adds	r3, #1
20003482:	627b      	str	r3, [r7, #36]	@ 0x24
20003484:	687b      	ldr	r3, [r7, #4]
20003486:	791b      	ldrb	r3, [r3, #4]
20003488:	461a      	mov	r2, r3
2000348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000348c:	4293      	cmp	r3, r2
2000348e:	d3b3      	bcc.n	200033f8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
20003490:	687b      	ldr	r3, [r7, #4]
20003492:	681b      	ldr	r3, [r3, #0]
20003494:	695a      	ldr	r2, [r3, #20]
20003496:	687b      	ldr	r3, [r7, #4]
20003498:	681b      	ldr	r3, [r3, #0]
2000349a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
2000349e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
200034a0:	687b      	ldr	r3, [r7, #4]
200034a2:	681b      	ldr	r3, [r3, #0]
200034a4:	4618      	mov	r0, r3
200034a6:	f003 fccd 	bl	20006e44 <USB_ReadInterrupts>
200034aa:	4603      	mov	r3, r0
200034ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
200034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
200034b4:	d10a      	bne.n	200034cc <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
200034b6:	6878      	ldr	r0, [r7, #4]
200034b8:	f005 ffd8 	bl	2000946c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
200034bc:	687b      	ldr	r3, [r7, #4]
200034be:	681b      	ldr	r3, [r3, #0]
200034c0:	695a      	ldr	r2, [r3, #20]
200034c2:	687b      	ldr	r3, [r7, #4]
200034c4:	681b      	ldr	r3, [r3, #0]
200034c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
200034ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
200034cc:	687b      	ldr	r3, [r7, #4]
200034ce:	681b      	ldr	r3, [r3, #0]
200034d0:	4618      	mov	r0, r3
200034d2:	f003 fcb7 	bl	20006e44 <USB_ReadInterrupts>
200034d6:	4603      	mov	r3, r0
200034d8:	f003 0304 	and.w	r3, r3, #4
200034dc:	2b04      	cmp	r3, #4
200034de:	d115      	bne.n	2000350c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
200034e0:	687b      	ldr	r3, [r7, #4]
200034e2:	681b      	ldr	r3, [r3, #0]
200034e4:	685b      	ldr	r3, [r3, #4]
200034e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
200034e8:	69bb      	ldr	r3, [r7, #24]
200034ea:	f003 0304 	and.w	r3, r3, #4
200034ee:	2b00      	cmp	r3, #0
200034f0:	d002      	beq.n	200034f8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
200034f2:	6878      	ldr	r0, [r7, #4]
200034f4:	f005 ffc8 	bl	20009488 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
200034f8:	687b      	ldr	r3, [r7, #4]
200034fa:	681b      	ldr	r3, [r3, #0]
200034fc:	6859      	ldr	r1, [r3, #4]
200034fe:	687b      	ldr	r3, [r7, #4]
20003500:	681b      	ldr	r3, [r3, #0]
20003502:	69ba      	ldr	r2, [r7, #24]
20003504:	430a      	orrs	r2, r1
20003506:	605a      	str	r2, [r3, #4]
20003508:	e000      	b.n	2000350c <HAL_PCD_IRQHandler+0x996>
      return;
2000350a:	bf00      	nop
    }
  }
}
2000350c:	3734      	adds	r7, #52	@ 0x34
2000350e:	46bd      	mov	sp, r7
20003510:	bd90      	pop	{r4, r7, pc}

20003512 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
20003512:	b580      	push	{r7, lr}
20003514:	b082      	sub	sp, #8
20003516:	af00      	add	r7, sp, #0
20003518:	6078      	str	r0, [r7, #4]
2000351a:	460b      	mov	r3, r1
2000351c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
2000351e:	687b      	ldr	r3, [r7, #4]
20003520:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20003524:	2b01      	cmp	r3, #1
20003526:	d101      	bne.n	2000352c <HAL_PCD_SetAddress+0x1a>
20003528:	2302      	movs	r3, #2
2000352a:	e012      	b.n	20003552 <HAL_PCD_SetAddress+0x40>
2000352c:	687b      	ldr	r3, [r7, #4]
2000352e:	2201      	movs	r2, #1
20003530:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
20003534:	687b      	ldr	r3, [r7, #4]
20003536:	78fa      	ldrb	r2, [r7, #3]
20003538:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
2000353a:	687b      	ldr	r3, [r7, #4]
2000353c:	681b      	ldr	r3, [r3, #0]
2000353e:	78fa      	ldrb	r2, [r7, #3]
20003540:	4611      	mov	r1, r2
20003542:	4618      	mov	r0, r3
20003544:	f003 fc16 	bl	20006d74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
20003548:	687b      	ldr	r3, [r7, #4]
2000354a:	2200      	movs	r2, #0
2000354c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20003550:	2300      	movs	r3, #0
}
20003552:	4618      	mov	r0, r3
20003554:	3708      	adds	r7, #8
20003556:	46bd      	mov	sp, r7
20003558:	bd80      	pop	{r7, pc}

2000355a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
2000355a:	b580      	push	{r7, lr}
2000355c:	b084      	sub	sp, #16
2000355e:	af00      	add	r7, sp, #0
20003560:	6078      	str	r0, [r7, #4]
20003562:	4608      	mov	r0, r1
20003564:	4611      	mov	r1, r2
20003566:	461a      	mov	r2, r3
20003568:	4603      	mov	r3, r0
2000356a:	70fb      	strb	r3, [r7, #3]
2000356c:	460b      	mov	r3, r1
2000356e:	803b      	strh	r3, [r7, #0]
20003570:	4613      	mov	r3, r2
20003572:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
20003574:	2300      	movs	r3, #0
20003576:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
20003578:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000357c:	2b00      	cmp	r3, #0
2000357e:	da0f      	bge.n	200035a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20003580:	78fb      	ldrb	r3, [r7, #3]
20003582:	f003 020f 	and.w	r2, r3, #15
20003586:	4613      	mov	r3, r2
20003588:	00db      	lsls	r3, r3, #3
2000358a:	4413      	add	r3, r2
2000358c:	009b      	lsls	r3, r3, #2
2000358e:	3310      	adds	r3, #16
20003590:	687a      	ldr	r2, [r7, #4]
20003592:	4413      	add	r3, r2
20003594:	3304      	adds	r3, #4
20003596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
20003598:	68fb      	ldr	r3, [r7, #12]
2000359a:	2201      	movs	r2, #1
2000359c:	705a      	strb	r2, [r3, #1]
2000359e:	e00f      	b.n	200035c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
200035a0:	78fb      	ldrb	r3, [r7, #3]
200035a2:	f003 020f 	and.w	r2, r3, #15
200035a6:	4613      	mov	r3, r2
200035a8:	00db      	lsls	r3, r3, #3
200035aa:	4413      	add	r3, r2
200035ac:	009b      	lsls	r3, r3, #2
200035ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200035b2:	687a      	ldr	r2, [r7, #4]
200035b4:	4413      	add	r3, r2
200035b6:	3304      	adds	r3, #4
200035b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
200035ba:	68fb      	ldr	r3, [r7, #12]
200035bc:	2200      	movs	r2, #0
200035be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
200035c0:	78fb      	ldrb	r3, [r7, #3]
200035c2:	f003 030f 	and.w	r3, r3, #15
200035c6:	b2da      	uxtb	r2, r3
200035c8:	68fb      	ldr	r3, [r7, #12]
200035ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
200035cc:	883b      	ldrh	r3, [r7, #0]
200035ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
200035d2:	68fb      	ldr	r3, [r7, #12]
200035d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
200035d6:	68fb      	ldr	r3, [r7, #12]
200035d8:	78ba      	ldrb	r2, [r7, #2]
200035da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
200035dc:	68fb      	ldr	r3, [r7, #12]
200035de:	785b      	ldrb	r3, [r3, #1]
200035e0:	2b00      	cmp	r3, #0
200035e2:	d004      	beq.n	200035ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
200035e4:	68fb      	ldr	r3, [r7, #12]
200035e6:	781b      	ldrb	r3, [r3, #0]
200035e8:	461a      	mov	r2, r3
200035ea:	68fb      	ldr	r3, [r7, #12]
200035ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
200035ee:	78bb      	ldrb	r3, [r7, #2]
200035f0:	2b02      	cmp	r3, #2
200035f2:	d102      	bne.n	200035fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
200035f4:	68fb      	ldr	r3, [r7, #12]
200035f6:	2200      	movs	r2, #0
200035f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
200035fa:	687b      	ldr	r3, [r7, #4]
200035fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20003600:	2b01      	cmp	r3, #1
20003602:	d101      	bne.n	20003608 <HAL_PCD_EP_Open+0xae>
20003604:	2302      	movs	r3, #2
20003606:	e00e      	b.n	20003626 <HAL_PCD_EP_Open+0xcc>
20003608:	687b      	ldr	r3, [r7, #4]
2000360a:	2201      	movs	r2, #1
2000360c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
20003610:	687b      	ldr	r3, [r7, #4]
20003612:	681b      	ldr	r3, [r3, #0]
20003614:	68f9      	ldr	r1, [r7, #12]
20003616:	4618      	mov	r0, r3
20003618:	f002 fd90 	bl	2000613c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
2000361c:	687b      	ldr	r3, [r7, #4]
2000361e:	2200      	movs	r2, #0
20003620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
20003624:	7afb      	ldrb	r3, [r7, #11]
}
20003626:	4618      	mov	r0, r3
20003628:	3710      	adds	r7, #16
2000362a:	46bd      	mov	sp, r7
2000362c:	bd80      	pop	{r7, pc}

2000362e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
2000362e:	b580      	push	{r7, lr}
20003630:	b084      	sub	sp, #16
20003632:	af00      	add	r7, sp, #0
20003634:	6078      	str	r0, [r7, #4]
20003636:	460b      	mov	r3, r1
20003638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
2000363a:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000363e:	2b00      	cmp	r3, #0
20003640:	da0f      	bge.n	20003662 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20003642:	78fb      	ldrb	r3, [r7, #3]
20003644:	f003 020f 	and.w	r2, r3, #15
20003648:	4613      	mov	r3, r2
2000364a:	00db      	lsls	r3, r3, #3
2000364c:	4413      	add	r3, r2
2000364e:	009b      	lsls	r3, r3, #2
20003650:	3310      	adds	r3, #16
20003652:	687a      	ldr	r2, [r7, #4]
20003654:	4413      	add	r3, r2
20003656:	3304      	adds	r3, #4
20003658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
2000365a:	68fb      	ldr	r3, [r7, #12]
2000365c:	2201      	movs	r2, #1
2000365e:	705a      	strb	r2, [r3, #1]
20003660:	e00f      	b.n	20003682 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
20003662:	78fb      	ldrb	r3, [r7, #3]
20003664:	f003 020f 	and.w	r2, r3, #15
20003668:	4613      	mov	r3, r2
2000366a:	00db      	lsls	r3, r3, #3
2000366c:	4413      	add	r3, r2
2000366e:	009b      	lsls	r3, r3, #2
20003670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20003674:	687a      	ldr	r2, [r7, #4]
20003676:	4413      	add	r3, r2
20003678:	3304      	adds	r3, #4
2000367a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
2000367c:	68fb      	ldr	r3, [r7, #12]
2000367e:	2200      	movs	r2, #0
20003680:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
20003682:	78fb      	ldrb	r3, [r7, #3]
20003684:	f003 030f 	and.w	r3, r3, #15
20003688:	b2da      	uxtb	r2, r3
2000368a:	68fb      	ldr	r3, [r7, #12]
2000368c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
2000368e:	687b      	ldr	r3, [r7, #4]
20003690:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20003694:	2b01      	cmp	r3, #1
20003696:	d101      	bne.n	2000369c <HAL_PCD_EP_Close+0x6e>
20003698:	2302      	movs	r3, #2
2000369a:	e00e      	b.n	200036ba <HAL_PCD_EP_Close+0x8c>
2000369c:	687b      	ldr	r3, [r7, #4]
2000369e:	2201      	movs	r2, #1
200036a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
200036a4:	687b      	ldr	r3, [r7, #4]
200036a6:	681b      	ldr	r3, [r3, #0]
200036a8:	68f9      	ldr	r1, [r7, #12]
200036aa:	4618      	mov	r0, r3
200036ac:	f002 fdce 	bl	2000624c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
200036b0:	687b      	ldr	r3, [r7, #4]
200036b2:	2200      	movs	r2, #0
200036b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
200036b8:	2300      	movs	r3, #0
}
200036ba:	4618      	mov	r0, r3
200036bc:	3710      	adds	r7, #16
200036be:	46bd      	mov	sp, r7
200036c0:	bd80      	pop	{r7, pc}

200036c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
200036c2:	b580      	push	{r7, lr}
200036c4:	b086      	sub	sp, #24
200036c6:	af00      	add	r7, sp, #0
200036c8:	60f8      	str	r0, [r7, #12]
200036ca:	607a      	str	r2, [r7, #4]
200036cc:	603b      	str	r3, [r7, #0]
200036ce:	460b      	mov	r3, r1
200036d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
200036d2:	7afb      	ldrb	r3, [r7, #11]
200036d4:	f003 020f 	and.w	r2, r3, #15
200036d8:	4613      	mov	r3, r2
200036da:	00db      	lsls	r3, r3, #3
200036dc:	4413      	add	r3, r2
200036de:	009b      	lsls	r3, r3, #2
200036e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200036e4:	68fa      	ldr	r2, [r7, #12]
200036e6:	4413      	add	r3, r2
200036e8:	3304      	adds	r3, #4
200036ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
200036ec:	697b      	ldr	r3, [r7, #20]
200036ee:	687a      	ldr	r2, [r7, #4]
200036f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
200036f2:	697b      	ldr	r3, [r7, #20]
200036f4:	683a      	ldr	r2, [r7, #0]
200036f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
200036f8:	697b      	ldr	r3, [r7, #20]
200036fa:	2200      	movs	r2, #0
200036fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
200036fe:	697b      	ldr	r3, [r7, #20]
20003700:	2200      	movs	r2, #0
20003702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20003704:	7afb      	ldrb	r3, [r7, #11]
20003706:	f003 030f 	and.w	r3, r3, #15
2000370a:	b2da      	uxtb	r2, r3
2000370c:	697b      	ldr	r3, [r7, #20]
2000370e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20003710:	68fb      	ldr	r3, [r7, #12]
20003712:	799b      	ldrb	r3, [r3, #6]
20003714:	2b01      	cmp	r3, #1
20003716:	d102      	bne.n	2000371e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
20003718:	687a      	ldr	r2, [r7, #4]
2000371a:	697b      	ldr	r3, [r7, #20]
2000371c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
2000371e:	68fb      	ldr	r3, [r7, #12]
20003720:	6818      	ldr	r0, [r3, #0]
20003722:	68fb      	ldr	r3, [r7, #12]
20003724:	799b      	ldrb	r3, [r3, #6]
20003726:	461a      	mov	r2, r3
20003728:	6979      	ldr	r1, [r7, #20]
2000372a:	f002 fe6b 	bl	20006404 <USB_EPStartXfer>

  return HAL_OK;
2000372e:	2300      	movs	r3, #0
}
20003730:	4618      	mov	r0, r3
20003732:	3718      	adds	r7, #24
20003734:	46bd      	mov	sp, r7
20003736:	bd80      	pop	{r7, pc}

20003738 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
20003738:	b580      	push	{r7, lr}
2000373a:	b086      	sub	sp, #24
2000373c:	af00      	add	r7, sp, #0
2000373e:	60f8      	str	r0, [r7, #12]
20003740:	607a      	str	r2, [r7, #4]
20003742:	603b      	str	r3, [r7, #0]
20003744:	460b      	mov	r3, r1
20003746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20003748:	7afb      	ldrb	r3, [r7, #11]
2000374a:	f003 020f 	and.w	r2, r3, #15
2000374e:	4613      	mov	r3, r2
20003750:	00db      	lsls	r3, r3, #3
20003752:	4413      	add	r3, r2
20003754:	009b      	lsls	r3, r3, #2
20003756:	3310      	adds	r3, #16
20003758:	68fa      	ldr	r2, [r7, #12]
2000375a:	4413      	add	r3, r2
2000375c:	3304      	adds	r3, #4
2000375e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
20003760:	697b      	ldr	r3, [r7, #20]
20003762:	687a      	ldr	r2, [r7, #4]
20003764:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
20003766:	697b      	ldr	r3, [r7, #20]
20003768:	683a      	ldr	r2, [r7, #0]
2000376a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
2000376c:	697b      	ldr	r3, [r7, #20]
2000376e:	2200      	movs	r2, #0
20003770:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
20003772:	697b      	ldr	r3, [r7, #20]
20003774:	2201      	movs	r2, #1
20003776:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
20003778:	7afb      	ldrb	r3, [r7, #11]
2000377a:	f003 030f 	and.w	r3, r3, #15
2000377e:	b2da      	uxtb	r2, r3
20003780:	697b      	ldr	r3, [r7, #20]
20003782:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
20003784:	68fb      	ldr	r3, [r7, #12]
20003786:	799b      	ldrb	r3, [r3, #6]
20003788:	2b01      	cmp	r3, #1
2000378a:	d102      	bne.n	20003792 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
2000378c:	687a      	ldr	r2, [r7, #4]
2000378e:	697b      	ldr	r3, [r7, #20]
20003790:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
20003792:	68fb      	ldr	r3, [r7, #12]
20003794:	6818      	ldr	r0, [r3, #0]
20003796:	68fb      	ldr	r3, [r7, #12]
20003798:	799b      	ldrb	r3, [r3, #6]
2000379a:	461a      	mov	r2, r3
2000379c:	6979      	ldr	r1, [r7, #20]
2000379e:	f002 fe31 	bl	20006404 <USB_EPStartXfer>

  return HAL_OK;
200037a2:	2300      	movs	r3, #0
}
200037a4:	4618      	mov	r0, r3
200037a6:	3718      	adds	r7, #24
200037a8:	46bd      	mov	sp, r7
200037aa:	bd80      	pop	{r7, pc}

200037ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
200037ac:	b580      	push	{r7, lr}
200037ae:	b084      	sub	sp, #16
200037b0:	af00      	add	r7, sp, #0
200037b2:	6078      	str	r0, [r7, #4]
200037b4:	460b      	mov	r3, r1
200037b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
200037b8:	78fb      	ldrb	r3, [r7, #3]
200037ba:	f003 030f 	and.w	r3, r3, #15
200037be:	687a      	ldr	r2, [r7, #4]
200037c0:	7912      	ldrb	r2, [r2, #4]
200037c2:	4293      	cmp	r3, r2
200037c4:	d901      	bls.n	200037ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
200037c6:	2301      	movs	r3, #1
200037c8:	e04f      	b.n	2000386a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
200037ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
200037ce:	2b00      	cmp	r3, #0
200037d0:	da0f      	bge.n	200037f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
200037d2:	78fb      	ldrb	r3, [r7, #3]
200037d4:	f003 020f 	and.w	r2, r3, #15
200037d8:	4613      	mov	r3, r2
200037da:	00db      	lsls	r3, r3, #3
200037dc:	4413      	add	r3, r2
200037de:	009b      	lsls	r3, r3, #2
200037e0:	3310      	adds	r3, #16
200037e2:	687a      	ldr	r2, [r7, #4]
200037e4:	4413      	add	r3, r2
200037e6:	3304      	adds	r3, #4
200037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
200037ea:	68fb      	ldr	r3, [r7, #12]
200037ec:	2201      	movs	r2, #1
200037ee:	705a      	strb	r2, [r3, #1]
200037f0:	e00d      	b.n	2000380e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
200037f2:	78fa      	ldrb	r2, [r7, #3]
200037f4:	4613      	mov	r3, r2
200037f6:	00db      	lsls	r3, r3, #3
200037f8:	4413      	add	r3, r2
200037fa:	009b      	lsls	r3, r3, #2
200037fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20003800:	687a      	ldr	r2, [r7, #4]
20003802:	4413      	add	r3, r2
20003804:	3304      	adds	r3, #4
20003806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
20003808:	68fb      	ldr	r3, [r7, #12]
2000380a:	2200      	movs	r2, #0
2000380c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
2000380e:	68fb      	ldr	r3, [r7, #12]
20003810:	2201      	movs	r2, #1
20003812:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
20003814:	78fb      	ldrb	r3, [r7, #3]
20003816:	f003 030f 	and.w	r3, r3, #15
2000381a:	b2da      	uxtb	r2, r3
2000381c:	68fb      	ldr	r3, [r7, #12]
2000381e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
20003820:	687b      	ldr	r3, [r7, #4]
20003822:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
20003826:	2b01      	cmp	r3, #1
20003828:	d101      	bne.n	2000382e <HAL_PCD_EP_SetStall+0x82>
2000382a:	2302      	movs	r3, #2
2000382c:	e01d      	b.n	2000386a <HAL_PCD_EP_SetStall+0xbe>
2000382e:	687b      	ldr	r3, [r7, #4]
20003830:	2201      	movs	r2, #1
20003832:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
20003836:	687b      	ldr	r3, [r7, #4]
20003838:	681b      	ldr	r3, [r3, #0]
2000383a:	68f9      	ldr	r1, [r7, #12]
2000383c:	4618      	mov	r0, r3
2000383e:	f003 f9c5 	bl	20006bcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
20003842:	78fb      	ldrb	r3, [r7, #3]
20003844:	f003 030f 	and.w	r3, r3, #15
20003848:	2b00      	cmp	r3, #0
2000384a:	d109      	bne.n	20003860 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
2000384c:	687b      	ldr	r3, [r7, #4]
2000384e:	6818      	ldr	r0, [r3, #0]
20003850:	687b      	ldr	r3, [r7, #4]
20003852:	7999      	ldrb	r1, [r3, #6]
20003854:	687b      	ldr	r3, [r7, #4]
20003856:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
2000385a:	461a      	mov	r2, r3
2000385c:	f003 fbb8 	bl	20006fd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
20003860:	687b      	ldr	r3, [r7, #4]
20003862:	2200      	movs	r2, #0
20003864:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20003868:	2300      	movs	r3, #0
}
2000386a:	4618      	mov	r0, r3
2000386c:	3710      	adds	r7, #16
2000386e:	46bd      	mov	sp, r7
20003870:	bd80      	pop	{r7, pc}

20003872 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
20003872:	b580      	push	{r7, lr}
20003874:	b084      	sub	sp, #16
20003876:	af00      	add	r7, sp, #0
20003878:	6078      	str	r0, [r7, #4]
2000387a:	460b      	mov	r3, r1
2000387c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
2000387e:	78fb      	ldrb	r3, [r7, #3]
20003880:	f003 030f 	and.w	r3, r3, #15
20003884:	687a      	ldr	r2, [r7, #4]
20003886:	7912      	ldrb	r2, [r2, #4]
20003888:	4293      	cmp	r3, r2
2000388a:	d901      	bls.n	20003890 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
2000388c:	2301      	movs	r3, #1
2000388e:	e042      	b.n	20003916 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
20003890:	f997 3003 	ldrsb.w	r3, [r7, #3]
20003894:	2b00      	cmp	r3, #0
20003896:	da0f      	bge.n	200038b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20003898:	78fb      	ldrb	r3, [r7, #3]
2000389a:	f003 020f 	and.w	r2, r3, #15
2000389e:	4613      	mov	r3, r2
200038a0:	00db      	lsls	r3, r3, #3
200038a2:	4413      	add	r3, r2
200038a4:	009b      	lsls	r3, r3, #2
200038a6:	3310      	adds	r3, #16
200038a8:	687a      	ldr	r2, [r7, #4]
200038aa:	4413      	add	r3, r2
200038ac:	3304      	adds	r3, #4
200038ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
200038b0:	68fb      	ldr	r3, [r7, #12]
200038b2:	2201      	movs	r2, #1
200038b4:	705a      	strb	r2, [r3, #1]
200038b6:	e00f      	b.n	200038d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
200038b8:	78fb      	ldrb	r3, [r7, #3]
200038ba:	f003 020f 	and.w	r2, r3, #15
200038be:	4613      	mov	r3, r2
200038c0:	00db      	lsls	r3, r3, #3
200038c2:	4413      	add	r3, r2
200038c4:	009b      	lsls	r3, r3, #2
200038c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
200038ca:	687a      	ldr	r2, [r7, #4]
200038cc:	4413      	add	r3, r2
200038ce:	3304      	adds	r3, #4
200038d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
200038d2:	68fb      	ldr	r3, [r7, #12]
200038d4:	2200      	movs	r2, #0
200038d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
200038d8:	68fb      	ldr	r3, [r7, #12]
200038da:	2200      	movs	r2, #0
200038dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
200038de:	78fb      	ldrb	r3, [r7, #3]
200038e0:	f003 030f 	and.w	r3, r3, #15
200038e4:	b2da      	uxtb	r2, r3
200038e6:	68fb      	ldr	r3, [r7, #12]
200038e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
200038ea:	687b      	ldr	r3, [r7, #4]
200038ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
200038f0:	2b01      	cmp	r3, #1
200038f2:	d101      	bne.n	200038f8 <HAL_PCD_EP_ClrStall+0x86>
200038f4:	2302      	movs	r3, #2
200038f6:	e00e      	b.n	20003916 <HAL_PCD_EP_ClrStall+0xa4>
200038f8:	687b      	ldr	r3, [r7, #4]
200038fa:	2201      	movs	r2, #1
200038fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
20003900:	687b      	ldr	r3, [r7, #4]
20003902:	681b      	ldr	r3, [r3, #0]
20003904:	68f9      	ldr	r1, [r7, #12]
20003906:	4618      	mov	r0, r3
20003908:	f003 f9ce 	bl	20006ca8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
2000390c:	687b      	ldr	r3, [r7, #4]
2000390e:	2200      	movs	r2, #0
20003910:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
20003914:	2300      	movs	r3, #0
}
20003916:	4618      	mov	r0, r3
20003918:	3710      	adds	r7, #16
2000391a:	46bd      	mov	sp, r7
2000391c:	bd80      	pop	{r7, pc}

2000391e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
2000391e:	b580      	push	{r7, lr}
20003920:	b084      	sub	sp, #16
20003922:	af00      	add	r7, sp, #0
20003924:	6078      	str	r0, [r7, #4]
20003926:	460b      	mov	r3, r1
20003928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
2000392a:	f997 3003 	ldrsb.w	r3, [r7, #3]
2000392e:	2b00      	cmp	r3, #0
20003930:	da0c      	bge.n	2000394c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
20003932:	78fb      	ldrb	r3, [r7, #3]
20003934:	f003 020f 	and.w	r2, r3, #15
20003938:	4613      	mov	r3, r2
2000393a:	00db      	lsls	r3, r3, #3
2000393c:	4413      	add	r3, r2
2000393e:	009b      	lsls	r3, r3, #2
20003940:	3310      	adds	r3, #16
20003942:	687a      	ldr	r2, [r7, #4]
20003944:	4413      	add	r3, r2
20003946:	3304      	adds	r3, #4
20003948:	60fb      	str	r3, [r7, #12]
2000394a:	e00c      	b.n	20003966 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
2000394c:	78fb      	ldrb	r3, [r7, #3]
2000394e:	f003 020f 	and.w	r2, r3, #15
20003952:	4613      	mov	r3, r2
20003954:	00db      	lsls	r3, r3, #3
20003956:	4413      	add	r3, r2
20003958:	009b      	lsls	r3, r3, #2
2000395a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
2000395e:	687a      	ldr	r2, [r7, #4]
20003960:	4413      	add	r3, r2
20003962:	3304      	adds	r3, #4
20003964:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
20003966:	687b      	ldr	r3, [r7, #4]
20003968:	681b      	ldr	r3, [r3, #0]
2000396a:	68f9      	ldr	r1, [r7, #12]
2000396c:	4618      	mov	r0, r3
2000396e:	f002 ffed 	bl	2000694c <USB_EPStopXfer>
20003972:	4603      	mov	r3, r0
20003974:	72fb      	strb	r3, [r7, #11]

  return ret;
20003976:	7afb      	ldrb	r3, [r7, #11]
}
20003978:	4618      	mov	r0, r3
2000397a:	3710      	adds	r7, #16
2000397c:	46bd      	mov	sp, r7
2000397e:	bd80      	pop	{r7, pc}

20003980 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20003980:	b580      	push	{r7, lr}
20003982:	b08a      	sub	sp, #40	@ 0x28
20003984:	af02      	add	r7, sp, #8
20003986:	6078      	str	r0, [r7, #4]
20003988:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
2000398a:	687b      	ldr	r3, [r7, #4]
2000398c:	681b      	ldr	r3, [r3, #0]
2000398e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
20003990:	697b      	ldr	r3, [r7, #20]
20003992:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
20003994:	683a      	ldr	r2, [r7, #0]
20003996:	4613      	mov	r3, r2
20003998:	00db      	lsls	r3, r3, #3
2000399a:	4413      	add	r3, r2
2000399c:	009b      	lsls	r3, r3, #2
2000399e:	3310      	adds	r3, #16
200039a0:	687a      	ldr	r2, [r7, #4]
200039a2:	4413      	add	r3, r2
200039a4:	3304      	adds	r3, #4
200039a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
200039a8:	68fb      	ldr	r3, [r7, #12]
200039aa:	695a      	ldr	r2, [r3, #20]
200039ac:	68fb      	ldr	r3, [r7, #12]
200039ae:	691b      	ldr	r3, [r3, #16]
200039b0:	429a      	cmp	r2, r3
200039b2:	d901      	bls.n	200039b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
200039b4:	2301      	movs	r3, #1
200039b6:	e06b      	b.n	20003a90 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
200039b8:	68fb      	ldr	r3, [r7, #12]
200039ba:	691a      	ldr	r2, [r3, #16]
200039bc:	68fb      	ldr	r3, [r7, #12]
200039be:	695b      	ldr	r3, [r3, #20]
200039c0:	1ad3      	subs	r3, r2, r3
200039c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
200039c4:	68fb      	ldr	r3, [r7, #12]
200039c6:	689b      	ldr	r3, [r3, #8]
200039c8:	69fa      	ldr	r2, [r7, #28]
200039ca:	429a      	cmp	r2, r3
200039cc:	d902      	bls.n	200039d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
200039ce:	68fb      	ldr	r3, [r7, #12]
200039d0:	689b      	ldr	r3, [r3, #8]
200039d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
200039d4:	69fb      	ldr	r3, [r7, #28]
200039d6:	3303      	adds	r3, #3
200039d8:	089b      	lsrs	r3, r3, #2
200039da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
200039dc:	e02a      	b.n	20003a34 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
200039de:	68fb      	ldr	r3, [r7, #12]
200039e0:	691a      	ldr	r2, [r3, #16]
200039e2:	68fb      	ldr	r3, [r7, #12]
200039e4:	695b      	ldr	r3, [r3, #20]
200039e6:	1ad3      	subs	r3, r2, r3
200039e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
200039ea:	68fb      	ldr	r3, [r7, #12]
200039ec:	689b      	ldr	r3, [r3, #8]
200039ee:	69fa      	ldr	r2, [r7, #28]
200039f0:	429a      	cmp	r2, r3
200039f2:	d902      	bls.n	200039fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
200039f4:	68fb      	ldr	r3, [r7, #12]
200039f6:	689b      	ldr	r3, [r3, #8]
200039f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
200039fa:	69fb      	ldr	r3, [r7, #28]
200039fc:	3303      	adds	r3, #3
200039fe:	089b      	lsrs	r3, r3, #2
20003a00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
20003a02:	68fb      	ldr	r3, [r7, #12]
20003a04:	68d9      	ldr	r1, [r3, #12]
20003a06:	683b      	ldr	r3, [r7, #0]
20003a08:	b2da      	uxtb	r2, r3
20003a0a:	69fb      	ldr	r3, [r7, #28]
20003a0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
20003a0e:	687b      	ldr	r3, [r7, #4]
20003a10:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
20003a12:	9300      	str	r3, [sp, #0]
20003a14:	4603      	mov	r3, r0
20003a16:	6978      	ldr	r0, [r7, #20]
20003a18:	f003 f842 	bl	20006aa0 <USB_WritePacket>

    ep->xfer_buff  += len;
20003a1c:	68fb      	ldr	r3, [r7, #12]
20003a1e:	68da      	ldr	r2, [r3, #12]
20003a20:	69fb      	ldr	r3, [r7, #28]
20003a22:	441a      	add	r2, r3
20003a24:	68fb      	ldr	r3, [r7, #12]
20003a26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
20003a28:	68fb      	ldr	r3, [r7, #12]
20003a2a:	695a      	ldr	r2, [r3, #20]
20003a2c:	69fb      	ldr	r3, [r7, #28]
20003a2e:	441a      	add	r2, r3
20003a30:	68fb      	ldr	r3, [r7, #12]
20003a32:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20003a34:	683b      	ldr	r3, [r7, #0]
20003a36:	015a      	lsls	r2, r3, #5
20003a38:	693b      	ldr	r3, [r7, #16]
20003a3a:	4413      	add	r3, r2
20003a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20003a40:	699b      	ldr	r3, [r3, #24]
20003a42:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
20003a44:	69ba      	ldr	r2, [r7, #24]
20003a46:	429a      	cmp	r2, r3
20003a48:	d809      	bhi.n	20003a5e <PCD_WriteEmptyTxFifo+0xde>
20003a4a:	68fb      	ldr	r3, [r7, #12]
20003a4c:	695a      	ldr	r2, [r3, #20]
20003a4e:	68fb      	ldr	r3, [r7, #12]
20003a50:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
20003a52:	429a      	cmp	r2, r3
20003a54:	d203      	bcs.n	20003a5e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
20003a56:	68fb      	ldr	r3, [r7, #12]
20003a58:	691b      	ldr	r3, [r3, #16]
20003a5a:	2b00      	cmp	r3, #0
20003a5c:	d1bf      	bne.n	200039de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
20003a5e:	68fb      	ldr	r3, [r7, #12]
20003a60:	691a      	ldr	r2, [r3, #16]
20003a62:	68fb      	ldr	r3, [r7, #12]
20003a64:	695b      	ldr	r3, [r3, #20]
20003a66:	429a      	cmp	r2, r3
20003a68:	d811      	bhi.n	20003a8e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
20003a6a:	683b      	ldr	r3, [r7, #0]
20003a6c:	f003 030f 	and.w	r3, r3, #15
20003a70:	2201      	movs	r2, #1
20003a72:	fa02 f303 	lsl.w	r3, r2, r3
20003a76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
20003a78:	693b      	ldr	r3, [r7, #16]
20003a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20003a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
20003a80:	68bb      	ldr	r3, [r7, #8]
20003a82:	43db      	mvns	r3, r3
20003a84:	6939      	ldr	r1, [r7, #16]
20003a86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20003a8a:	4013      	ands	r3, r2
20003a8c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
20003a8e:	2300      	movs	r3, #0
}
20003a90:	4618      	mov	r0, r3
20003a92:	3720      	adds	r7, #32
20003a94:	46bd      	mov	sp, r7
20003a96:	bd80      	pop	{r7, pc}

20003a98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20003a98:	b580      	push	{r7, lr}
20003a9a:	b088      	sub	sp, #32
20003a9c:	af00      	add	r7, sp, #0
20003a9e:	6078      	str	r0, [r7, #4]
20003aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20003aa2:	687b      	ldr	r3, [r7, #4]
20003aa4:	681b      	ldr	r3, [r3, #0]
20003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
20003aa8:	69fb      	ldr	r3, [r7, #28]
20003aaa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20003aac:	69fb      	ldr	r3, [r7, #28]
20003aae:	333c      	adds	r3, #60	@ 0x3c
20003ab0:	3304      	adds	r3, #4
20003ab2:	681b      	ldr	r3, [r3, #0]
20003ab4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
20003ab6:	683b      	ldr	r3, [r7, #0]
20003ab8:	015a      	lsls	r2, r3, #5
20003aba:	69bb      	ldr	r3, [r7, #24]
20003abc:	4413      	add	r3, r2
20003abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003ac2:	689b      	ldr	r3, [r3, #8]
20003ac4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
20003ac6:	687b      	ldr	r3, [r7, #4]
20003ac8:	799b      	ldrb	r3, [r3, #6]
20003aca:	2b01      	cmp	r3, #1
20003acc:	d17b      	bne.n	20003bc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
20003ace:	693b      	ldr	r3, [r7, #16]
20003ad0:	f003 0308 	and.w	r3, r3, #8
20003ad4:	2b00      	cmp	r3, #0
20003ad6:	d015      	beq.n	20003b04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20003ad8:	697b      	ldr	r3, [r7, #20]
20003ada:	4a61      	ldr	r2, [pc, #388]	@ (20003c60 <PCD_EP_OutXfrComplete_int+0x1c8>)
20003adc:	4293      	cmp	r3, r2
20003ade:	f240 80b9 	bls.w	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
20003ae2:	693b      	ldr	r3, [r7, #16]
20003ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20003ae8:	2b00      	cmp	r3, #0
20003aea:	f000 80b3 	beq.w	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20003aee:	683b      	ldr	r3, [r7, #0]
20003af0:	015a      	lsls	r2, r3, #5
20003af2:	69bb      	ldr	r3, [r7, #24]
20003af4:	4413      	add	r3, r2
20003af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003afa:	461a      	mov	r2, r3
20003afc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20003b00:	6093      	str	r3, [r2, #8]
20003b02:	e0a7      	b.n	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
20003b04:	693b      	ldr	r3, [r7, #16]
20003b06:	f003 0320 	and.w	r3, r3, #32
20003b0a:	2b00      	cmp	r3, #0
20003b0c:	d009      	beq.n	20003b22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20003b0e:	683b      	ldr	r3, [r7, #0]
20003b10:	015a      	lsls	r2, r3, #5
20003b12:	69bb      	ldr	r3, [r7, #24]
20003b14:	4413      	add	r3, r2
20003b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003b1a:	461a      	mov	r2, r3
20003b1c:	2320      	movs	r3, #32
20003b1e:	6093      	str	r3, [r2, #8]
20003b20:	e098      	b.n	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
20003b22:	693b      	ldr	r3, [r7, #16]
20003b24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
20003b28:	2b00      	cmp	r3, #0
20003b2a:	f040 8093 	bne.w	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20003b2e:	697b      	ldr	r3, [r7, #20]
20003b30:	4a4b      	ldr	r2, [pc, #300]	@ (20003c60 <PCD_EP_OutXfrComplete_int+0x1c8>)
20003b32:	4293      	cmp	r3, r2
20003b34:	d90f      	bls.n	20003b56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
20003b36:	693b      	ldr	r3, [r7, #16]
20003b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20003b3c:	2b00      	cmp	r3, #0
20003b3e:	d00a      	beq.n	20003b56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20003b40:	683b      	ldr	r3, [r7, #0]
20003b42:	015a      	lsls	r2, r3, #5
20003b44:	69bb      	ldr	r3, [r7, #24]
20003b46:	4413      	add	r3, r2
20003b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003b4c:	461a      	mov	r2, r3
20003b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20003b52:	6093      	str	r3, [r2, #8]
20003b54:	e07e      	b.n	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
20003b56:	683a      	ldr	r2, [r7, #0]
20003b58:	4613      	mov	r3, r2
20003b5a:	00db      	lsls	r3, r3, #3
20003b5c:	4413      	add	r3, r2
20003b5e:	009b      	lsls	r3, r3, #2
20003b60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
20003b64:	687a      	ldr	r2, [r7, #4]
20003b66:	4413      	add	r3, r2
20003b68:	3304      	adds	r3, #4
20003b6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
20003b6c:	68fb      	ldr	r3, [r7, #12]
20003b6e:	6a1a      	ldr	r2, [r3, #32]
20003b70:	683b      	ldr	r3, [r7, #0]
20003b72:	0159      	lsls	r1, r3, #5
20003b74:	69bb      	ldr	r3, [r7, #24]
20003b76:	440b      	add	r3, r1
20003b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003b7c:	691b      	ldr	r3, [r3, #16]
20003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
20003b82:	1ad2      	subs	r2, r2, r3
20003b84:	68fb      	ldr	r3, [r7, #12]
20003b86:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
20003b88:	683b      	ldr	r3, [r7, #0]
20003b8a:	2b00      	cmp	r3, #0
20003b8c:	d114      	bne.n	20003bb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
20003b8e:	68fb      	ldr	r3, [r7, #12]
20003b90:	691b      	ldr	r3, [r3, #16]
20003b92:	2b00      	cmp	r3, #0
20003b94:	d109      	bne.n	20003baa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
20003b96:	687b      	ldr	r3, [r7, #4]
20003b98:	6818      	ldr	r0, [r3, #0]
20003b9a:	687b      	ldr	r3, [r7, #4]
20003b9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20003ba0:	461a      	mov	r2, r3
20003ba2:	2101      	movs	r1, #1
20003ba4:	f003 fa14 	bl	20006fd0 <USB_EP0_OutStart>
20003ba8:	e006      	b.n	20003bb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
20003baa:	68fb      	ldr	r3, [r7, #12]
20003bac:	68da      	ldr	r2, [r3, #12]
20003bae:	68fb      	ldr	r3, [r7, #12]
20003bb0:	695b      	ldr	r3, [r3, #20]
20003bb2:	441a      	add	r2, r3
20003bb4:	68fb      	ldr	r3, [r7, #12]
20003bb6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20003bb8:	683b      	ldr	r3, [r7, #0]
20003bba:	b2db      	uxtb	r3, r3
20003bbc:	4619      	mov	r1, r3
20003bbe:	6878      	ldr	r0, [r7, #4]
20003bc0:	f005 fb90 	bl	200092e4 <HAL_PCD_DataOutStageCallback>
20003bc4:	e046      	b.n	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
20003bc6:	697b      	ldr	r3, [r7, #20]
20003bc8:	4a26      	ldr	r2, [pc, #152]	@ (20003c64 <PCD_EP_OutXfrComplete_int+0x1cc>)
20003bca:	4293      	cmp	r3, r2
20003bcc:	d124      	bne.n	20003c18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
20003bce:	693b      	ldr	r3, [r7, #16]
20003bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20003bd4:	2b00      	cmp	r3, #0
20003bd6:	d00a      	beq.n	20003bee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20003bd8:	683b      	ldr	r3, [r7, #0]
20003bda:	015a      	lsls	r2, r3, #5
20003bdc:	69bb      	ldr	r3, [r7, #24]
20003bde:	4413      	add	r3, r2
20003be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003be4:	461a      	mov	r2, r3
20003be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20003bea:	6093      	str	r3, [r2, #8]
20003bec:	e032      	b.n	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
20003bee:	693b      	ldr	r3, [r7, #16]
20003bf0:	f003 0320 	and.w	r3, r3, #32
20003bf4:	2b00      	cmp	r3, #0
20003bf6:	d008      	beq.n	20003c0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
20003bf8:	683b      	ldr	r3, [r7, #0]
20003bfa:	015a      	lsls	r2, r3, #5
20003bfc:	69bb      	ldr	r3, [r7, #24]
20003bfe:	4413      	add	r3, r2
20003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003c04:	461a      	mov	r2, r3
20003c06:	2320      	movs	r3, #32
20003c08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20003c0a:	683b      	ldr	r3, [r7, #0]
20003c0c:	b2db      	uxtb	r3, r3
20003c0e:	4619      	mov	r1, r3
20003c10:	6878      	ldr	r0, [r7, #4]
20003c12:	f005 fb67 	bl	200092e4 <HAL_PCD_DataOutStageCallback>
20003c16:	e01d      	b.n	20003c54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
20003c18:	683b      	ldr	r3, [r7, #0]
20003c1a:	2b00      	cmp	r3, #0
20003c1c:	d114      	bne.n	20003c48 <PCD_EP_OutXfrComplete_int+0x1b0>
20003c1e:	6879      	ldr	r1, [r7, #4]
20003c20:	683a      	ldr	r2, [r7, #0]
20003c22:	4613      	mov	r3, r2
20003c24:	00db      	lsls	r3, r3, #3
20003c26:	4413      	add	r3, r2
20003c28:	009b      	lsls	r3, r3, #2
20003c2a:	440b      	add	r3, r1
20003c2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
20003c30:	681b      	ldr	r3, [r3, #0]
20003c32:	2b00      	cmp	r3, #0
20003c34:	d108      	bne.n	20003c48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
20003c36:	687b      	ldr	r3, [r7, #4]
20003c38:	6818      	ldr	r0, [r3, #0]
20003c3a:	687b      	ldr	r3, [r7, #4]
20003c3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20003c40:	461a      	mov	r2, r3
20003c42:	2100      	movs	r1, #0
20003c44:	f003 f9c4 	bl	20006fd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
20003c48:	683b      	ldr	r3, [r7, #0]
20003c4a:	b2db      	uxtb	r3, r3
20003c4c:	4619      	mov	r1, r3
20003c4e:	6878      	ldr	r0, [r7, #4]
20003c50:	f005 fb48 	bl	200092e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
20003c54:	2300      	movs	r3, #0
}
20003c56:	4618      	mov	r0, r3
20003c58:	3720      	adds	r7, #32
20003c5a:	46bd      	mov	sp, r7
20003c5c:	bd80      	pop	{r7, pc}
20003c5e:	bf00      	nop
20003c60:	4f54300a 	.word	0x4f54300a
20003c64:	4f54310a 	.word	0x4f54310a

20003c68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
20003c68:	b580      	push	{r7, lr}
20003c6a:	b086      	sub	sp, #24
20003c6c:	af00      	add	r7, sp, #0
20003c6e:	6078      	str	r0, [r7, #4]
20003c70:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20003c72:	687b      	ldr	r3, [r7, #4]
20003c74:	681b      	ldr	r3, [r3, #0]
20003c76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
20003c78:	697b      	ldr	r3, [r7, #20]
20003c7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20003c7c:	697b      	ldr	r3, [r7, #20]
20003c7e:	333c      	adds	r3, #60	@ 0x3c
20003c80:	3304      	adds	r3, #4
20003c82:	681b      	ldr	r3, [r3, #0]
20003c84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
20003c86:	683b      	ldr	r3, [r7, #0]
20003c88:	015a      	lsls	r2, r3, #5
20003c8a:	693b      	ldr	r3, [r7, #16]
20003c8c:	4413      	add	r3, r2
20003c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003c92:	689b      	ldr	r3, [r3, #8]
20003c94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20003c96:	68fb      	ldr	r3, [r7, #12]
20003c98:	4a15      	ldr	r2, [pc, #84]	@ (20003cf0 <PCD_EP_OutSetupPacket_int+0x88>)
20003c9a:	4293      	cmp	r3, r2
20003c9c:	d90e      	bls.n	20003cbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
20003c9e:	68bb      	ldr	r3, [r7, #8]
20003ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
20003ca4:	2b00      	cmp	r3, #0
20003ca6:	d009      	beq.n	20003cbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
20003ca8:	683b      	ldr	r3, [r7, #0]
20003caa:	015a      	lsls	r2, r3, #5
20003cac:	693b      	ldr	r3, [r7, #16]
20003cae:	4413      	add	r3, r2
20003cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20003cb4:	461a      	mov	r2, r3
20003cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20003cba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
20003cbc:	6878      	ldr	r0, [r7, #4]
20003cbe:	f005 faff 	bl	200092c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
20003cc2:	68fb      	ldr	r3, [r7, #12]
20003cc4:	4a0a      	ldr	r2, [pc, #40]	@ (20003cf0 <PCD_EP_OutSetupPacket_int+0x88>)
20003cc6:	4293      	cmp	r3, r2
20003cc8:	d90c      	bls.n	20003ce4 <PCD_EP_OutSetupPacket_int+0x7c>
20003cca:	687b      	ldr	r3, [r7, #4]
20003ccc:	799b      	ldrb	r3, [r3, #6]
20003cce:	2b01      	cmp	r3, #1
20003cd0:	d108      	bne.n	20003ce4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
20003cd2:	687b      	ldr	r3, [r7, #4]
20003cd4:	6818      	ldr	r0, [r3, #0]
20003cd6:	687b      	ldr	r3, [r7, #4]
20003cd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
20003cdc:	461a      	mov	r2, r3
20003cde:	2101      	movs	r1, #1
20003ce0:	f003 f976 	bl	20006fd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
20003ce4:	2300      	movs	r3, #0
}
20003ce6:	4618      	mov	r0, r3
20003ce8:	3718      	adds	r7, #24
20003cea:	46bd      	mov	sp, r7
20003cec:	bd80      	pop	{r7, pc}
20003cee:	bf00      	nop
20003cf0:	4f54300a 	.word	0x4f54300a

20003cf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
20003cf4:	b480      	push	{r7}
20003cf6:	b085      	sub	sp, #20
20003cf8:	af00      	add	r7, sp, #0
20003cfa:	6078      	str	r0, [r7, #4]
20003cfc:	460b      	mov	r3, r1
20003cfe:	70fb      	strb	r3, [r7, #3]
20003d00:	4613      	mov	r3, r2
20003d02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
20003d04:	687b      	ldr	r3, [r7, #4]
20003d06:	681b      	ldr	r3, [r3, #0]
20003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003d0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
20003d0c:	78fb      	ldrb	r3, [r7, #3]
20003d0e:	2b00      	cmp	r3, #0
20003d10:	d107      	bne.n	20003d22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
20003d12:	883b      	ldrh	r3, [r7, #0]
20003d14:	0419      	lsls	r1, r3, #16
20003d16:	687b      	ldr	r3, [r7, #4]
20003d18:	681b      	ldr	r3, [r3, #0]
20003d1a:	68ba      	ldr	r2, [r7, #8]
20003d1c:	430a      	orrs	r2, r1
20003d1e:	629a      	str	r2, [r3, #40]	@ 0x28
20003d20:	e028      	b.n	20003d74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
20003d22:	687b      	ldr	r3, [r7, #4]
20003d24:	681b      	ldr	r3, [r3, #0]
20003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20003d28:	0c1b      	lsrs	r3, r3, #16
20003d2a:	68ba      	ldr	r2, [r7, #8]
20003d2c:	4413      	add	r3, r2
20003d2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20003d30:	2300      	movs	r3, #0
20003d32:	73fb      	strb	r3, [r7, #15]
20003d34:	e00d      	b.n	20003d52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
20003d36:	687b      	ldr	r3, [r7, #4]
20003d38:	681a      	ldr	r2, [r3, #0]
20003d3a:	7bfb      	ldrb	r3, [r7, #15]
20003d3c:	3340      	adds	r3, #64	@ 0x40
20003d3e:	009b      	lsls	r3, r3, #2
20003d40:	4413      	add	r3, r2
20003d42:	685b      	ldr	r3, [r3, #4]
20003d44:	0c1b      	lsrs	r3, r3, #16
20003d46:	68ba      	ldr	r2, [r7, #8]
20003d48:	4413      	add	r3, r2
20003d4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
20003d4c:	7bfb      	ldrb	r3, [r7, #15]
20003d4e:	3301      	adds	r3, #1
20003d50:	73fb      	strb	r3, [r7, #15]
20003d52:	7bfa      	ldrb	r2, [r7, #15]
20003d54:	78fb      	ldrb	r3, [r7, #3]
20003d56:	3b01      	subs	r3, #1
20003d58:	429a      	cmp	r2, r3
20003d5a:	d3ec      	bcc.n	20003d36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
20003d5c:	883b      	ldrh	r3, [r7, #0]
20003d5e:	0418      	lsls	r0, r3, #16
20003d60:	687b      	ldr	r3, [r7, #4]
20003d62:	6819      	ldr	r1, [r3, #0]
20003d64:	78fb      	ldrb	r3, [r7, #3]
20003d66:	3b01      	subs	r3, #1
20003d68:	68ba      	ldr	r2, [r7, #8]
20003d6a:	4302      	orrs	r2, r0
20003d6c:	3340      	adds	r3, #64	@ 0x40
20003d6e:	009b      	lsls	r3, r3, #2
20003d70:	440b      	add	r3, r1
20003d72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
20003d74:	2300      	movs	r3, #0
}
20003d76:	4618      	mov	r0, r3
20003d78:	3714      	adds	r7, #20
20003d7a:	46bd      	mov	sp, r7
20003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d80:	4770      	bx	lr

20003d82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
20003d82:	b480      	push	{r7}
20003d84:	b083      	sub	sp, #12
20003d86:	af00      	add	r7, sp, #0
20003d88:	6078      	str	r0, [r7, #4]
20003d8a:	460b      	mov	r3, r1
20003d8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
20003d8e:	687b      	ldr	r3, [r7, #4]
20003d90:	681b      	ldr	r3, [r3, #0]
20003d92:	887a      	ldrh	r2, [r7, #2]
20003d94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
20003d96:	2300      	movs	r3, #0
}
20003d98:	4618      	mov	r0, r3
20003d9a:	370c      	adds	r7, #12
20003d9c:	46bd      	mov	sp, r7
20003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003da2:	4770      	bx	lr

20003da4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
20003da4:	b480      	push	{r7}
20003da6:	b085      	sub	sp, #20
20003da8:	af00      	add	r7, sp, #0
20003daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
20003dac:	687b      	ldr	r3, [r7, #4]
20003dae:	681b      	ldr	r3, [r3, #0]
20003db0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
20003db2:	687b      	ldr	r3, [r7, #4]
20003db4:	2201      	movs	r2, #1
20003db6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
20003dba:	687b      	ldr	r3, [r7, #4]
20003dbc:	2200      	movs	r2, #0
20003dbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
20003dc2:	68fb      	ldr	r3, [r7, #12]
20003dc4:	699b      	ldr	r3, [r3, #24]
20003dc6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
20003dca:	68fb      	ldr	r3, [r7, #12]
20003dcc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
20003dce:	68fb      	ldr	r3, [r7, #12]
20003dd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
20003dd2:	4b05      	ldr	r3, [pc, #20]	@ (20003de8 <HAL_PCDEx_ActivateLPM+0x44>)
20003dd4:	4313      	orrs	r3, r2
20003dd6:	68fa      	ldr	r2, [r7, #12]
20003dd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
20003dda:	2300      	movs	r3, #0
}
20003ddc:	4618      	mov	r0, r3
20003dde:	3714      	adds	r7, #20
20003de0:	46bd      	mov	sp, r7
20003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
20003de6:	4770      	bx	lr
20003de8:	10000003 	.word	0x10000003

20003dec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20003dec:	b480      	push	{r7}
20003dee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
20003df0:	4b05      	ldr	r3, [pc, #20]	@ (20003e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
20003df2:	681b      	ldr	r3, [r3, #0]
20003df4:	4a04      	ldr	r2, [pc, #16]	@ (20003e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
20003df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20003dfa:	6013      	str	r3, [r2, #0]
}
20003dfc:	bf00      	nop
20003dfe:	46bd      	mov	sp, r7
20003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
20003e04:	4770      	bx	lr
20003e06:	bf00      	nop
20003e08:	40007000 	.word	0x40007000

20003e0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20003e0c:	b580      	push	{r7, lr}
20003e0e:	b082      	sub	sp, #8
20003e10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
20003e12:	2300      	movs	r3, #0
20003e14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
20003e16:	4b23      	ldr	r3, [pc, #140]	@ (20003ea4 <HAL_PWREx_EnableOverDrive+0x98>)
20003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003e1a:	4a22      	ldr	r2, [pc, #136]	@ (20003ea4 <HAL_PWREx_EnableOverDrive+0x98>)
20003e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20003e20:	6413      	str	r3, [r2, #64]	@ 0x40
20003e22:	4b20      	ldr	r3, [pc, #128]	@ (20003ea4 <HAL_PWREx_EnableOverDrive+0x98>)
20003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20003e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20003e2a:	603b      	str	r3, [r7, #0]
20003e2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20003e2e:	4b1e      	ldr	r3, [pc, #120]	@ (20003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
20003e30:	681b      	ldr	r3, [r3, #0]
20003e32:	4a1d      	ldr	r2, [pc, #116]	@ (20003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
20003e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20003e38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20003e3a:	f7fd ff0f 	bl	20001c5c <HAL_GetTick>
20003e3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20003e40:	e009      	b.n	20003e56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20003e42:	f7fd ff0b 	bl	20001c5c <HAL_GetTick>
20003e46:	4602      	mov	r2, r0
20003e48:	687b      	ldr	r3, [r7, #4]
20003e4a:	1ad3      	subs	r3, r2, r3
20003e4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20003e50:	d901      	bls.n	20003e56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
20003e52:	2303      	movs	r3, #3
20003e54:	e022      	b.n	20003e9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20003e56:	4b14      	ldr	r3, [pc, #80]	@ (20003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
20003e58:	685b      	ldr	r3, [r3, #4]
20003e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20003e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20003e62:	d1ee      	bne.n	20003e42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20003e64:	4b10      	ldr	r3, [pc, #64]	@ (20003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
20003e66:	681b      	ldr	r3, [r3, #0]
20003e68:	4a0f      	ldr	r2, [pc, #60]	@ (20003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
20003e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20003e6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20003e70:	f7fd fef4 	bl	20001c5c <HAL_GetTick>
20003e74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20003e76:	e009      	b.n	20003e8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20003e78:	f7fd fef0 	bl	20001c5c <HAL_GetTick>
20003e7c:	4602      	mov	r2, r0
20003e7e:	687b      	ldr	r3, [r7, #4]
20003e80:	1ad3      	subs	r3, r2, r3
20003e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20003e86:	d901      	bls.n	20003e8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
20003e88:	2303      	movs	r3, #3
20003e8a:	e007      	b.n	20003e9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20003e8c:	4b06      	ldr	r3, [pc, #24]	@ (20003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
20003e8e:	685b      	ldr	r3, [r3, #4]
20003e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20003e94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20003e98:	d1ee      	bne.n	20003e78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
20003e9a:	2300      	movs	r3, #0
}
20003e9c:	4618      	mov	r0, r3
20003e9e:	3708      	adds	r7, #8
20003ea0:	46bd      	mov	sp, r7
20003ea2:	bd80      	pop	{r7, pc}
20003ea4:	40023800 	.word	0x40023800
20003ea8:	40007000 	.word	0x40007000

20003eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20003eac:	b580      	push	{r7, lr}
20003eae:	b086      	sub	sp, #24
20003eb0:	af00      	add	r7, sp, #0
20003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
20003eb4:	2300      	movs	r3, #0
20003eb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20003eb8:	687b      	ldr	r3, [r7, #4]
20003eba:	2b00      	cmp	r3, #0
20003ebc:	d101      	bne.n	20003ec2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
20003ebe:	2301      	movs	r3, #1
20003ec0:	e291      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20003ec2:	687b      	ldr	r3, [r7, #4]
20003ec4:	681b      	ldr	r3, [r3, #0]
20003ec6:	f003 0301 	and.w	r3, r3, #1
20003eca:	2b00      	cmp	r3, #0
20003ecc:	f000 8087 	beq.w	20003fde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
20003ed0:	4b96      	ldr	r3, [pc, #600]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003ed2:	689b      	ldr	r3, [r3, #8]
20003ed4:	f003 030c 	and.w	r3, r3, #12
20003ed8:	2b04      	cmp	r3, #4
20003eda:	d00c      	beq.n	20003ef6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20003edc:	4b93      	ldr	r3, [pc, #588]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003ede:	689b      	ldr	r3, [r3, #8]
20003ee0:	f003 030c 	and.w	r3, r3, #12
20003ee4:	2b08      	cmp	r3, #8
20003ee6:	d112      	bne.n	20003f0e <HAL_RCC_OscConfig+0x62>
20003ee8:	4b90      	ldr	r3, [pc, #576]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003eea:	685b      	ldr	r3, [r3, #4]
20003eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20003ef4:	d10b      	bne.n	20003f0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20003ef6:	4b8d      	ldr	r3, [pc, #564]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003ef8:	681b      	ldr	r3, [r3, #0]
20003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20003efe:	2b00      	cmp	r3, #0
20003f00:	d06c      	beq.n	20003fdc <HAL_RCC_OscConfig+0x130>
20003f02:	687b      	ldr	r3, [r7, #4]
20003f04:	685b      	ldr	r3, [r3, #4]
20003f06:	2b00      	cmp	r3, #0
20003f08:	d168      	bne.n	20003fdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
20003f0a:	2301      	movs	r3, #1
20003f0c:	e26b      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20003f0e:	687b      	ldr	r3, [r7, #4]
20003f10:	685b      	ldr	r3, [r3, #4]
20003f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20003f16:	d106      	bne.n	20003f26 <HAL_RCC_OscConfig+0x7a>
20003f18:	4b84      	ldr	r3, [pc, #528]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f1a:	681b      	ldr	r3, [r3, #0]
20003f1c:	4a83      	ldr	r2, [pc, #524]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20003f22:	6013      	str	r3, [r2, #0]
20003f24:	e02e      	b.n	20003f84 <HAL_RCC_OscConfig+0xd8>
20003f26:	687b      	ldr	r3, [r7, #4]
20003f28:	685b      	ldr	r3, [r3, #4]
20003f2a:	2b00      	cmp	r3, #0
20003f2c:	d10c      	bne.n	20003f48 <HAL_RCC_OscConfig+0x9c>
20003f2e:	4b7f      	ldr	r3, [pc, #508]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f30:	681b      	ldr	r3, [r3, #0]
20003f32:	4a7e      	ldr	r2, [pc, #504]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20003f38:	6013      	str	r3, [r2, #0]
20003f3a:	4b7c      	ldr	r3, [pc, #496]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f3c:	681b      	ldr	r3, [r3, #0]
20003f3e:	4a7b      	ldr	r2, [pc, #492]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20003f44:	6013      	str	r3, [r2, #0]
20003f46:	e01d      	b.n	20003f84 <HAL_RCC_OscConfig+0xd8>
20003f48:	687b      	ldr	r3, [r7, #4]
20003f4a:	685b      	ldr	r3, [r3, #4]
20003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20003f50:	d10c      	bne.n	20003f6c <HAL_RCC_OscConfig+0xc0>
20003f52:	4b76      	ldr	r3, [pc, #472]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f54:	681b      	ldr	r3, [r3, #0]
20003f56:	4a75      	ldr	r2, [pc, #468]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20003f5c:	6013      	str	r3, [r2, #0]
20003f5e:	4b73      	ldr	r3, [pc, #460]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f60:	681b      	ldr	r3, [r3, #0]
20003f62:	4a72      	ldr	r2, [pc, #456]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20003f68:	6013      	str	r3, [r2, #0]
20003f6a:	e00b      	b.n	20003f84 <HAL_RCC_OscConfig+0xd8>
20003f6c:	4b6f      	ldr	r3, [pc, #444]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f6e:	681b      	ldr	r3, [r3, #0]
20003f70:	4a6e      	ldr	r2, [pc, #440]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20003f76:	6013      	str	r3, [r2, #0]
20003f78:	4b6c      	ldr	r3, [pc, #432]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f7a:	681b      	ldr	r3, [r3, #0]
20003f7c:	4a6b      	ldr	r2, [pc, #428]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20003f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
20003f84:	687b      	ldr	r3, [r7, #4]
20003f86:	685b      	ldr	r3, [r3, #4]
20003f88:	2b00      	cmp	r3, #0
20003f8a:	d013      	beq.n	20003fb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20003f8c:	f7fd fe66 	bl	20001c5c <HAL_GetTick>
20003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20003f92:	e008      	b.n	20003fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20003f94:	f7fd fe62 	bl	20001c5c <HAL_GetTick>
20003f98:	4602      	mov	r2, r0
20003f9a:	693b      	ldr	r3, [r7, #16]
20003f9c:	1ad3      	subs	r3, r2, r3
20003f9e:	2b64      	cmp	r3, #100	@ 0x64
20003fa0:	d901      	bls.n	20003fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20003fa2:	2303      	movs	r3, #3
20003fa4:	e21f      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20003fa6:	4b61      	ldr	r3, [pc, #388]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003fa8:	681b      	ldr	r3, [r3, #0]
20003faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20003fae:	2b00      	cmp	r3, #0
20003fb0:	d0f0      	beq.n	20003f94 <HAL_RCC_OscConfig+0xe8>
20003fb2:	e014      	b.n	20003fde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20003fb4:	f7fd fe52 	bl	20001c5c <HAL_GetTick>
20003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20003fba:	e008      	b.n	20003fce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20003fbc:	f7fd fe4e 	bl	20001c5c <HAL_GetTick>
20003fc0:	4602      	mov	r2, r0
20003fc2:	693b      	ldr	r3, [r7, #16]
20003fc4:	1ad3      	subs	r3, r2, r3
20003fc6:	2b64      	cmp	r3, #100	@ 0x64
20003fc8:	d901      	bls.n	20003fce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
20003fca:	2303      	movs	r3, #3
20003fcc:	e20b      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20003fce:	4b57      	ldr	r3, [pc, #348]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003fd0:	681b      	ldr	r3, [r3, #0]
20003fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20003fd6:	2b00      	cmp	r3, #0
20003fd8:	d1f0      	bne.n	20003fbc <HAL_RCC_OscConfig+0x110>
20003fda:	e000      	b.n	20003fde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20003fde:	687b      	ldr	r3, [r7, #4]
20003fe0:	681b      	ldr	r3, [r3, #0]
20003fe2:	f003 0302 	and.w	r3, r3, #2
20003fe6:	2b00      	cmp	r3, #0
20003fe8:	d069      	beq.n	200040be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
20003fea:	4b50      	ldr	r3, [pc, #320]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003fec:	689b      	ldr	r3, [r3, #8]
20003fee:	f003 030c 	and.w	r3, r3, #12
20003ff2:	2b00      	cmp	r3, #0
20003ff4:	d00b      	beq.n	2000400e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20003ff6:	4b4d      	ldr	r3, [pc, #308]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20003ff8:	689b      	ldr	r3, [r3, #8]
20003ffa:	f003 030c 	and.w	r3, r3, #12
20003ffe:	2b08      	cmp	r3, #8
20004000:	d11c      	bne.n	2000403c <HAL_RCC_OscConfig+0x190>
20004002:	4b4a      	ldr	r3, [pc, #296]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004004:	685b      	ldr	r3, [r3, #4]
20004006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
2000400a:	2b00      	cmp	r3, #0
2000400c:	d116      	bne.n	2000403c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000400e:	4b47      	ldr	r3, [pc, #284]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004010:	681b      	ldr	r3, [r3, #0]
20004012:	f003 0302 	and.w	r3, r3, #2
20004016:	2b00      	cmp	r3, #0
20004018:	d005      	beq.n	20004026 <HAL_RCC_OscConfig+0x17a>
2000401a:	687b      	ldr	r3, [r7, #4]
2000401c:	68db      	ldr	r3, [r3, #12]
2000401e:	2b01      	cmp	r3, #1
20004020:	d001      	beq.n	20004026 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
20004022:	2301      	movs	r3, #1
20004024:	e1df      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20004026:	4b41      	ldr	r3, [pc, #260]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004028:	681b      	ldr	r3, [r3, #0]
2000402a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
2000402e:	687b      	ldr	r3, [r7, #4]
20004030:	691b      	ldr	r3, [r3, #16]
20004032:	00db      	lsls	r3, r3, #3
20004034:	493d      	ldr	r1, [pc, #244]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004036:	4313      	orrs	r3, r2
20004038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000403a:	e040      	b.n	200040be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2000403c:	687b      	ldr	r3, [r7, #4]
2000403e:	68db      	ldr	r3, [r3, #12]
20004040:	2b00      	cmp	r3, #0
20004042:	d023      	beq.n	2000408c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20004044:	4b39      	ldr	r3, [pc, #228]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004046:	681b      	ldr	r3, [r3, #0]
20004048:	4a38      	ldr	r2, [pc, #224]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
2000404a:	f043 0301 	orr.w	r3, r3, #1
2000404e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20004050:	f7fd fe04 	bl	20001c5c <HAL_GetTick>
20004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20004056:	e008      	b.n	2000406a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20004058:	f7fd fe00 	bl	20001c5c <HAL_GetTick>
2000405c:	4602      	mov	r2, r0
2000405e:	693b      	ldr	r3, [r7, #16]
20004060:	1ad3      	subs	r3, r2, r3
20004062:	2b02      	cmp	r3, #2
20004064:	d901      	bls.n	2000406a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
20004066:	2303      	movs	r3, #3
20004068:	e1bd      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000406a:	4b30      	ldr	r3, [pc, #192]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
2000406c:	681b      	ldr	r3, [r3, #0]
2000406e:	f003 0302 	and.w	r3, r3, #2
20004072:	2b00      	cmp	r3, #0
20004074:	d0f0      	beq.n	20004058 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20004076:	4b2d      	ldr	r3, [pc, #180]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004078:	681b      	ldr	r3, [r3, #0]
2000407a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
2000407e:	687b      	ldr	r3, [r7, #4]
20004080:	691b      	ldr	r3, [r3, #16]
20004082:	00db      	lsls	r3, r3, #3
20004084:	4929      	ldr	r1, [pc, #164]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004086:	4313      	orrs	r3, r2
20004088:	600b      	str	r3, [r1, #0]
2000408a:	e018      	b.n	200040be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000408c:	4b27      	ldr	r3, [pc, #156]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
2000408e:	681b      	ldr	r3, [r3, #0]
20004090:	4a26      	ldr	r2, [pc, #152]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004092:	f023 0301 	bic.w	r3, r3, #1
20004096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20004098:	f7fd fde0 	bl	20001c5c <HAL_GetTick>
2000409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000409e:	e008      	b.n	200040b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200040a0:	f7fd fddc 	bl	20001c5c <HAL_GetTick>
200040a4:	4602      	mov	r2, r0
200040a6:	693b      	ldr	r3, [r7, #16]
200040a8:	1ad3      	subs	r3, r2, r3
200040aa:	2b02      	cmp	r3, #2
200040ac:	d901      	bls.n	200040b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
200040ae:	2303      	movs	r3, #3
200040b0:	e199      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200040b2:	4b1e      	ldr	r3, [pc, #120]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
200040b4:	681b      	ldr	r3, [r3, #0]
200040b6:	f003 0302 	and.w	r3, r3, #2
200040ba:	2b00      	cmp	r3, #0
200040bc:	d1f0      	bne.n	200040a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200040be:	687b      	ldr	r3, [r7, #4]
200040c0:	681b      	ldr	r3, [r3, #0]
200040c2:	f003 0308 	and.w	r3, r3, #8
200040c6:	2b00      	cmp	r3, #0
200040c8:	d038      	beq.n	2000413c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
200040ca:	687b      	ldr	r3, [r7, #4]
200040cc:	695b      	ldr	r3, [r3, #20]
200040ce:	2b00      	cmp	r3, #0
200040d0:	d019      	beq.n	20004106 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
200040d2:	4b16      	ldr	r3, [pc, #88]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
200040d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200040d6:	4a15      	ldr	r2, [pc, #84]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
200040d8:	f043 0301 	orr.w	r3, r3, #1
200040dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200040de:	f7fd fdbd 	bl	20001c5c <HAL_GetTick>
200040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200040e4:	e008      	b.n	200040f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
200040e6:	f7fd fdb9 	bl	20001c5c <HAL_GetTick>
200040ea:	4602      	mov	r2, r0
200040ec:	693b      	ldr	r3, [r7, #16]
200040ee:	1ad3      	subs	r3, r2, r3
200040f0:	2b02      	cmp	r3, #2
200040f2:	d901      	bls.n	200040f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
200040f4:	2303      	movs	r3, #3
200040f6:	e176      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200040f8:	4b0c      	ldr	r3, [pc, #48]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
200040fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200040fc:	f003 0302 	and.w	r3, r3, #2
20004100:	2b00      	cmp	r3, #0
20004102:	d0f0      	beq.n	200040e6 <HAL_RCC_OscConfig+0x23a>
20004104:	e01a      	b.n	2000413c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20004106:	4b09      	ldr	r3, [pc, #36]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
20004108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2000410a:	4a08      	ldr	r2, [pc, #32]	@ (2000412c <HAL_RCC_OscConfig+0x280>)
2000410c:	f023 0301 	bic.w	r3, r3, #1
20004110:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20004112:	f7fd fda3 	bl	20001c5c <HAL_GetTick>
20004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20004118:	e00a      	b.n	20004130 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2000411a:	f7fd fd9f 	bl	20001c5c <HAL_GetTick>
2000411e:	4602      	mov	r2, r0
20004120:	693b      	ldr	r3, [r7, #16]
20004122:	1ad3      	subs	r3, r2, r3
20004124:	2b02      	cmp	r3, #2
20004126:	d903      	bls.n	20004130 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
20004128:	2303      	movs	r3, #3
2000412a:	e15c      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
2000412c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20004130:	4b91      	ldr	r3, [pc, #580]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20004134:	f003 0302 	and.w	r3, r3, #2
20004138:	2b00      	cmp	r3, #0
2000413a:	d1ee      	bne.n	2000411a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000413c:	687b      	ldr	r3, [r7, #4]
2000413e:	681b      	ldr	r3, [r3, #0]
20004140:	f003 0304 	and.w	r3, r3, #4
20004144:	2b00      	cmp	r3, #0
20004146:	f000 80a4 	beq.w	20004292 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
2000414a:	4b8b      	ldr	r3, [pc, #556]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000414e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20004152:	2b00      	cmp	r3, #0
20004154:	d10d      	bne.n	20004172 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
20004156:	4b88      	ldr	r3, [pc, #544]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000415a:	4a87      	ldr	r2, [pc, #540]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000415c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20004160:	6413      	str	r3, [r2, #64]	@ 0x40
20004162:	4b85      	ldr	r3, [pc, #532]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000416a:	60bb      	str	r3, [r7, #8]
2000416c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000416e:	2301      	movs	r3, #1
20004170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20004172:	4b82      	ldr	r3, [pc, #520]	@ (2000437c <HAL_RCC_OscConfig+0x4d0>)
20004174:	681b      	ldr	r3, [r3, #0]
20004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000417a:	2b00      	cmp	r3, #0
2000417c:	d118      	bne.n	200041b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
2000417e:	4b7f      	ldr	r3, [pc, #508]	@ (2000437c <HAL_RCC_OscConfig+0x4d0>)
20004180:	681b      	ldr	r3, [r3, #0]
20004182:	4a7e      	ldr	r2, [pc, #504]	@ (2000437c <HAL_RCC_OscConfig+0x4d0>)
20004184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20004188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000418a:	f7fd fd67 	bl	20001c5c <HAL_GetTick>
2000418e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20004190:	e008      	b.n	200041a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20004192:	f7fd fd63 	bl	20001c5c <HAL_GetTick>
20004196:	4602      	mov	r2, r0
20004198:	693b      	ldr	r3, [r7, #16]
2000419a:	1ad3      	subs	r3, r2, r3
2000419c:	2b64      	cmp	r3, #100	@ 0x64
2000419e:	d901      	bls.n	200041a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
200041a0:	2303      	movs	r3, #3
200041a2:	e120      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
200041a4:	4b75      	ldr	r3, [pc, #468]	@ (2000437c <HAL_RCC_OscConfig+0x4d0>)
200041a6:	681b      	ldr	r3, [r3, #0]
200041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200041ac:	2b00      	cmp	r3, #0
200041ae:	d0f0      	beq.n	20004192 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200041b0:	687b      	ldr	r3, [r7, #4]
200041b2:	689b      	ldr	r3, [r3, #8]
200041b4:	2b01      	cmp	r3, #1
200041b6:	d106      	bne.n	200041c6 <HAL_RCC_OscConfig+0x31a>
200041b8:	4b6f      	ldr	r3, [pc, #444]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200041bc:	4a6e      	ldr	r2, [pc, #440]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041be:	f043 0301 	orr.w	r3, r3, #1
200041c2:	6713      	str	r3, [r2, #112]	@ 0x70
200041c4:	e02d      	b.n	20004222 <HAL_RCC_OscConfig+0x376>
200041c6:	687b      	ldr	r3, [r7, #4]
200041c8:	689b      	ldr	r3, [r3, #8]
200041ca:	2b00      	cmp	r3, #0
200041cc:	d10c      	bne.n	200041e8 <HAL_RCC_OscConfig+0x33c>
200041ce:	4b6a      	ldr	r3, [pc, #424]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200041d2:	4a69      	ldr	r2, [pc, #420]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041d4:	f023 0301 	bic.w	r3, r3, #1
200041d8:	6713      	str	r3, [r2, #112]	@ 0x70
200041da:	4b67      	ldr	r3, [pc, #412]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200041de:	4a66      	ldr	r2, [pc, #408]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041e0:	f023 0304 	bic.w	r3, r3, #4
200041e4:	6713      	str	r3, [r2, #112]	@ 0x70
200041e6:	e01c      	b.n	20004222 <HAL_RCC_OscConfig+0x376>
200041e8:	687b      	ldr	r3, [r7, #4]
200041ea:	689b      	ldr	r3, [r3, #8]
200041ec:	2b05      	cmp	r3, #5
200041ee:	d10c      	bne.n	2000420a <HAL_RCC_OscConfig+0x35e>
200041f0:	4b61      	ldr	r3, [pc, #388]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200041f4:	4a60      	ldr	r2, [pc, #384]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041f6:	f043 0304 	orr.w	r3, r3, #4
200041fa:	6713      	str	r3, [r2, #112]	@ 0x70
200041fc:	4b5e      	ldr	r3, [pc, #376]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200041fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20004200:	4a5d      	ldr	r2, [pc, #372]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004202:	f043 0301 	orr.w	r3, r3, #1
20004206:	6713      	str	r3, [r2, #112]	@ 0x70
20004208:	e00b      	b.n	20004222 <HAL_RCC_OscConfig+0x376>
2000420a:	4b5b      	ldr	r3, [pc, #364]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000420e:	4a5a      	ldr	r2, [pc, #360]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004210:	f023 0301 	bic.w	r3, r3, #1
20004214:	6713      	str	r3, [r2, #112]	@ 0x70
20004216:	4b58      	ldr	r3, [pc, #352]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000421a:	4a57      	ldr	r2, [pc, #348]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000421c:	f023 0304 	bic.w	r3, r3, #4
20004220:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20004222:	687b      	ldr	r3, [r7, #4]
20004224:	689b      	ldr	r3, [r3, #8]
20004226:	2b00      	cmp	r3, #0
20004228:	d015      	beq.n	20004256 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000422a:	f7fd fd17 	bl	20001c5c <HAL_GetTick>
2000422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20004230:	e00a      	b.n	20004248 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20004232:	f7fd fd13 	bl	20001c5c <HAL_GetTick>
20004236:	4602      	mov	r2, r0
20004238:	693b      	ldr	r3, [r7, #16]
2000423a:	1ad3      	subs	r3, r2, r3
2000423c:	f241 3288 	movw	r2, #5000	@ 0x1388
20004240:	4293      	cmp	r3, r2
20004242:	d901      	bls.n	20004248 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
20004244:	2303      	movs	r3, #3
20004246:	e0ce      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20004248:	4b4b      	ldr	r3, [pc, #300]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000424a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000424c:	f003 0302 	and.w	r3, r3, #2
20004250:	2b00      	cmp	r3, #0
20004252:	d0ee      	beq.n	20004232 <HAL_RCC_OscConfig+0x386>
20004254:	e014      	b.n	20004280 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20004256:	f7fd fd01 	bl	20001c5c <HAL_GetTick>
2000425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000425c:	e00a      	b.n	20004274 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2000425e:	f7fd fcfd 	bl	20001c5c <HAL_GetTick>
20004262:	4602      	mov	r2, r0
20004264:	693b      	ldr	r3, [r7, #16]
20004266:	1ad3      	subs	r3, r2, r3
20004268:	f241 3288 	movw	r2, #5000	@ 0x1388
2000426c:	4293      	cmp	r3, r2
2000426e:	d901      	bls.n	20004274 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
20004270:	2303      	movs	r3, #3
20004272:	e0b8      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20004274:	4b40      	ldr	r3, [pc, #256]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20004278:	f003 0302 	and.w	r3, r3, #2
2000427c:	2b00      	cmp	r3, #0
2000427e:	d1ee      	bne.n	2000425e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
20004280:	7dfb      	ldrb	r3, [r7, #23]
20004282:	2b01      	cmp	r3, #1
20004284:	d105      	bne.n	20004292 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20004286:	4b3c      	ldr	r3, [pc, #240]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000428a:	4a3b      	ldr	r2, [pc, #236]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000428c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20004290:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20004292:	687b      	ldr	r3, [r7, #4]
20004294:	699b      	ldr	r3, [r3, #24]
20004296:	2b00      	cmp	r3, #0
20004298:	f000 80a4 	beq.w	200043e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
2000429c:	4b36      	ldr	r3, [pc, #216]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000429e:	689b      	ldr	r3, [r3, #8]
200042a0:	f003 030c 	and.w	r3, r3, #12
200042a4:	2b08      	cmp	r3, #8
200042a6:	d06b      	beq.n	20004380 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
200042a8:	687b      	ldr	r3, [r7, #4]
200042aa:	699b      	ldr	r3, [r3, #24]
200042ac:	2b02      	cmp	r3, #2
200042ae:	d149      	bne.n	20004344 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200042b0:	4b31      	ldr	r3, [pc, #196]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200042b2:	681b      	ldr	r3, [r3, #0]
200042b4:	4a30      	ldr	r2, [pc, #192]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200042b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
200042ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200042bc:	f7fd fcce 	bl	20001c5c <HAL_GetTick>
200042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200042c2:	e008      	b.n	200042d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200042c4:	f7fd fcca 	bl	20001c5c <HAL_GetTick>
200042c8:	4602      	mov	r2, r0
200042ca:	693b      	ldr	r3, [r7, #16]
200042cc:	1ad3      	subs	r3, r2, r3
200042ce:	2b02      	cmp	r3, #2
200042d0:	d901      	bls.n	200042d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
200042d2:	2303      	movs	r3, #3
200042d4:	e087      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200042d6:	4b28      	ldr	r3, [pc, #160]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
200042d8:	681b      	ldr	r3, [r3, #0]
200042da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200042de:	2b00      	cmp	r3, #0
200042e0:	d1f0      	bne.n	200042c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
200042e2:	687b      	ldr	r3, [r7, #4]
200042e4:	69da      	ldr	r2, [r3, #28]
200042e6:	687b      	ldr	r3, [r7, #4]
200042e8:	6a1b      	ldr	r3, [r3, #32]
200042ea:	431a      	orrs	r2, r3
200042ec:	687b      	ldr	r3, [r7, #4]
200042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200042f0:	019b      	lsls	r3, r3, #6
200042f2:	431a      	orrs	r2, r3
200042f4:	687b      	ldr	r3, [r7, #4]
200042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200042f8:	085b      	lsrs	r3, r3, #1
200042fa:	3b01      	subs	r3, #1
200042fc:	041b      	lsls	r3, r3, #16
200042fe:	431a      	orrs	r2, r3
20004300:	687b      	ldr	r3, [r7, #4]
20004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20004304:	061b      	lsls	r3, r3, #24
20004306:	4313      	orrs	r3, r2
20004308:	4a1b      	ldr	r2, [pc, #108]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000430a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
2000430e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20004310:	4b19      	ldr	r3, [pc, #100]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004312:	681b      	ldr	r3, [r3, #0]
20004314:	4a18      	ldr	r2, [pc, #96]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
2000431a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000431c:	f7fd fc9e 	bl	20001c5c <HAL_GetTick>
20004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20004322:	e008      	b.n	20004336 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20004324:	f7fd fc9a 	bl	20001c5c <HAL_GetTick>
20004328:	4602      	mov	r2, r0
2000432a:	693b      	ldr	r3, [r7, #16]
2000432c:	1ad3      	subs	r3, r2, r3
2000432e:	2b02      	cmp	r3, #2
20004330:	d901      	bls.n	20004336 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
20004332:	2303      	movs	r3, #3
20004334:	e057      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20004336:	4b10      	ldr	r3, [pc, #64]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004338:	681b      	ldr	r3, [r3, #0]
2000433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000433e:	2b00      	cmp	r3, #0
20004340:	d0f0      	beq.n	20004324 <HAL_RCC_OscConfig+0x478>
20004342:	e04f      	b.n	200043e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20004344:	4b0c      	ldr	r3, [pc, #48]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
20004346:	681b      	ldr	r3, [r3, #0]
20004348:	4a0b      	ldr	r2, [pc, #44]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000434a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2000434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20004350:	f7fd fc84 	bl	20001c5c <HAL_GetTick>
20004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20004356:	e008      	b.n	2000436a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20004358:	f7fd fc80 	bl	20001c5c <HAL_GetTick>
2000435c:	4602      	mov	r2, r0
2000435e:	693b      	ldr	r3, [r7, #16]
20004360:	1ad3      	subs	r3, r2, r3
20004362:	2b02      	cmp	r3, #2
20004364:	d901      	bls.n	2000436a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
20004366:	2303      	movs	r3, #3
20004368:	e03d      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000436a:	4b03      	ldr	r3, [pc, #12]	@ (20004378 <HAL_RCC_OscConfig+0x4cc>)
2000436c:	681b      	ldr	r3, [r3, #0]
2000436e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20004372:	2b00      	cmp	r3, #0
20004374:	d1f0      	bne.n	20004358 <HAL_RCC_OscConfig+0x4ac>
20004376:	e035      	b.n	200043e4 <HAL_RCC_OscConfig+0x538>
20004378:	40023800 	.word	0x40023800
2000437c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
20004380:	4b1b      	ldr	r3, [pc, #108]	@ (200043f0 <HAL_RCC_OscConfig+0x544>)
20004382:	685b      	ldr	r3, [r3, #4]
20004384:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20004386:	687b      	ldr	r3, [r7, #4]
20004388:	699b      	ldr	r3, [r3, #24]
2000438a:	2b01      	cmp	r3, #1
2000438c:	d028      	beq.n	200043e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000438e:	68fb      	ldr	r3, [r7, #12]
20004390:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20004394:	687b      	ldr	r3, [r7, #4]
20004396:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20004398:	429a      	cmp	r2, r3
2000439a:	d121      	bne.n	200043e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000439c:	68fb      	ldr	r3, [r7, #12]
2000439e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
200043a2:	687b      	ldr	r3, [r7, #4]
200043a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200043a6:	429a      	cmp	r2, r3
200043a8:	d11a      	bne.n	200043e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
200043aa:	68fa      	ldr	r2, [r7, #12]
200043ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
200043b0:	4013      	ands	r3, r2
200043b2:	687a      	ldr	r2, [r7, #4]
200043b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
200043b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
200043b8:	4293      	cmp	r3, r2
200043ba:	d111      	bne.n	200043e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
200043bc:	68fb      	ldr	r3, [r7, #12]
200043be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
200043c2:	687b      	ldr	r3, [r7, #4]
200043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200043c6:	085b      	lsrs	r3, r3, #1
200043c8:	3b01      	subs	r3, #1
200043ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
200043cc:	429a      	cmp	r2, r3
200043ce:	d107      	bne.n	200043e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
200043d0:	68fb      	ldr	r3, [r7, #12]
200043d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
200043d6:	687b      	ldr	r3, [r7, #4]
200043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200043da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
200043dc:	429a      	cmp	r2, r3
200043de:	d001      	beq.n	200043e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
200043e0:	2301      	movs	r3, #1
200043e2:	e000      	b.n	200043e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
200043e4:	2300      	movs	r3, #0
}
200043e6:	4618      	mov	r0, r3
200043e8:	3718      	adds	r7, #24
200043ea:	46bd      	mov	sp, r7
200043ec:	bd80      	pop	{r7, pc}
200043ee:	bf00      	nop
200043f0:	40023800 	.word	0x40023800

200043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
200043f4:	b580      	push	{r7, lr}
200043f6:	b084      	sub	sp, #16
200043f8:	af00      	add	r7, sp, #0
200043fa:	6078      	str	r0, [r7, #4]
200043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
200043fe:	2300      	movs	r3, #0
20004400:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
20004402:	687b      	ldr	r3, [r7, #4]
20004404:	2b00      	cmp	r3, #0
20004406:	d101      	bne.n	2000440c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
20004408:	2301      	movs	r3, #1
2000440a:	e0d0      	b.n	200045ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2000440c:	4b6a      	ldr	r3, [pc, #424]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
2000440e:	681b      	ldr	r3, [r3, #0]
20004410:	f003 030f 	and.w	r3, r3, #15
20004414:	683a      	ldr	r2, [r7, #0]
20004416:	429a      	cmp	r2, r3
20004418:	d910      	bls.n	2000443c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000441a:	4b67      	ldr	r3, [pc, #412]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
2000441c:	681b      	ldr	r3, [r3, #0]
2000441e:	f023 020f 	bic.w	r2, r3, #15
20004422:	4965      	ldr	r1, [pc, #404]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
20004424:	683b      	ldr	r3, [r7, #0]
20004426:	4313      	orrs	r3, r2
20004428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2000442a:	4b63      	ldr	r3, [pc, #396]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
2000442c:	681b      	ldr	r3, [r3, #0]
2000442e:	f003 030f 	and.w	r3, r3, #15
20004432:	683a      	ldr	r2, [r7, #0]
20004434:	429a      	cmp	r2, r3
20004436:	d001      	beq.n	2000443c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
20004438:	2301      	movs	r3, #1
2000443a:	e0b8      	b.n	200045ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000443c:	687b      	ldr	r3, [r7, #4]
2000443e:	681b      	ldr	r3, [r3, #0]
20004440:	f003 0302 	and.w	r3, r3, #2
20004444:	2b00      	cmp	r3, #0
20004446:	d020      	beq.n	2000448a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20004448:	687b      	ldr	r3, [r7, #4]
2000444a:	681b      	ldr	r3, [r3, #0]
2000444c:	f003 0304 	and.w	r3, r3, #4
20004450:	2b00      	cmp	r3, #0
20004452:	d005      	beq.n	20004460 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20004454:	4b59      	ldr	r3, [pc, #356]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004456:	689b      	ldr	r3, [r3, #8]
20004458:	4a58      	ldr	r2, [pc, #352]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
2000445a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
2000445e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20004460:	687b      	ldr	r3, [r7, #4]
20004462:	681b      	ldr	r3, [r3, #0]
20004464:	f003 0308 	and.w	r3, r3, #8
20004468:	2b00      	cmp	r3, #0
2000446a:	d005      	beq.n	20004478 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000446c:	4b53      	ldr	r3, [pc, #332]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
2000446e:	689b      	ldr	r3, [r3, #8]
20004470:	4a52      	ldr	r2, [pc, #328]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004472:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
20004476:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20004478:	4b50      	ldr	r3, [pc, #320]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
2000447a:	689b      	ldr	r3, [r3, #8]
2000447c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
20004480:	687b      	ldr	r3, [r7, #4]
20004482:	689b      	ldr	r3, [r3, #8]
20004484:	494d      	ldr	r1, [pc, #308]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004486:	4313      	orrs	r3, r2
20004488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000448a:	687b      	ldr	r3, [r7, #4]
2000448c:	681b      	ldr	r3, [r3, #0]
2000448e:	f003 0301 	and.w	r3, r3, #1
20004492:	2b00      	cmp	r3, #0
20004494:	d040      	beq.n	20004518 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20004496:	687b      	ldr	r3, [r7, #4]
20004498:	685b      	ldr	r3, [r3, #4]
2000449a:	2b01      	cmp	r3, #1
2000449c:	d107      	bne.n	200044ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000449e:	4b47      	ldr	r3, [pc, #284]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
200044a0:	681b      	ldr	r3, [r3, #0]
200044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200044a6:	2b00      	cmp	r3, #0
200044a8:	d115      	bne.n	200044d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
200044aa:	2301      	movs	r3, #1
200044ac:	e07f      	b.n	200045ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
200044ae:	687b      	ldr	r3, [r7, #4]
200044b0:	685b      	ldr	r3, [r3, #4]
200044b2:	2b02      	cmp	r3, #2
200044b4:	d107      	bne.n	200044c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200044b6:	4b41      	ldr	r3, [pc, #260]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
200044b8:	681b      	ldr	r3, [r3, #0]
200044ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200044be:	2b00      	cmp	r3, #0
200044c0:	d109      	bne.n	200044d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
200044c2:	2301      	movs	r3, #1
200044c4:	e073      	b.n	200045ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200044c6:	4b3d      	ldr	r3, [pc, #244]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
200044c8:	681b      	ldr	r3, [r3, #0]
200044ca:	f003 0302 	and.w	r3, r3, #2
200044ce:	2b00      	cmp	r3, #0
200044d0:	d101      	bne.n	200044d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
200044d2:	2301      	movs	r3, #1
200044d4:	e06b      	b.n	200045ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
200044d6:	4b39      	ldr	r3, [pc, #228]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
200044d8:	689b      	ldr	r3, [r3, #8]
200044da:	f023 0203 	bic.w	r2, r3, #3
200044de:	687b      	ldr	r3, [r7, #4]
200044e0:	685b      	ldr	r3, [r3, #4]
200044e2:	4936      	ldr	r1, [pc, #216]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
200044e4:	4313      	orrs	r3, r2
200044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
200044e8:	f7fd fbb8 	bl	20001c5c <HAL_GetTick>
200044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200044ee:	e00a      	b.n	20004506 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
200044f0:	f7fd fbb4 	bl	20001c5c <HAL_GetTick>
200044f4:	4602      	mov	r2, r0
200044f6:	68fb      	ldr	r3, [r7, #12]
200044f8:	1ad3      	subs	r3, r2, r3
200044fa:	f241 3288 	movw	r2, #5000	@ 0x1388
200044fe:	4293      	cmp	r3, r2
20004500:	d901      	bls.n	20004506 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
20004502:	2303      	movs	r3, #3
20004504:	e053      	b.n	200045ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20004506:	4b2d      	ldr	r3, [pc, #180]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004508:	689b      	ldr	r3, [r3, #8]
2000450a:	f003 020c 	and.w	r2, r3, #12
2000450e:	687b      	ldr	r3, [r7, #4]
20004510:	685b      	ldr	r3, [r3, #4]
20004512:	009b      	lsls	r3, r3, #2
20004514:	429a      	cmp	r2, r3
20004516:	d1eb      	bne.n	200044f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20004518:	4b27      	ldr	r3, [pc, #156]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
2000451a:	681b      	ldr	r3, [r3, #0]
2000451c:	f003 030f 	and.w	r3, r3, #15
20004520:	683a      	ldr	r2, [r7, #0]
20004522:	429a      	cmp	r2, r3
20004524:	d210      	bcs.n	20004548 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20004526:	4b24      	ldr	r3, [pc, #144]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
20004528:	681b      	ldr	r3, [r3, #0]
2000452a:	f023 020f 	bic.w	r2, r3, #15
2000452e:	4922      	ldr	r1, [pc, #136]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
20004530:	683b      	ldr	r3, [r7, #0]
20004532:	4313      	orrs	r3, r2
20004534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20004536:	4b20      	ldr	r3, [pc, #128]	@ (200045b8 <HAL_RCC_ClockConfig+0x1c4>)
20004538:	681b      	ldr	r3, [r3, #0]
2000453a:	f003 030f 	and.w	r3, r3, #15
2000453e:	683a      	ldr	r2, [r7, #0]
20004540:	429a      	cmp	r2, r3
20004542:	d001      	beq.n	20004548 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
20004544:	2301      	movs	r3, #1
20004546:	e032      	b.n	200045ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20004548:	687b      	ldr	r3, [r7, #4]
2000454a:	681b      	ldr	r3, [r3, #0]
2000454c:	f003 0304 	and.w	r3, r3, #4
20004550:	2b00      	cmp	r3, #0
20004552:	d008      	beq.n	20004566 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20004554:	4b19      	ldr	r3, [pc, #100]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004556:	689b      	ldr	r3, [r3, #8]
20004558:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
2000455c:	687b      	ldr	r3, [r7, #4]
2000455e:	68db      	ldr	r3, [r3, #12]
20004560:	4916      	ldr	r1, [pc, #88]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004562:	4313      	orrs	r3, r2
20004564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20004566:	687b      	ldr	r3, [r7, #4]
20004568:	681b      	ldr	r3, [r3, #0]
2000456a:	f003 0308 	and.w	r3, r3, #8
2000456e:	2b00      	cmp	r3, #0
20004570:	d009      	beq.n	20004586 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
20004572:	4b12      	ldr	r3, [pc, #72]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004574:	689b      	ldr	r3, [r3, #8]
20004576:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
2000457a:	687b      	ldr	r3, [r7, #4]
2000457c:	691b      	ldr	r3, [r3, #16]
2000457e:	00db      	lsls	r3, r3, #3
20004580:	490e      	ldr	r1, [pc, #56]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
20004582:	4313      	orrs	r3, r2
20004584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
20004586:	f000 f821 	bl	200045cc <HAL_RCC_GetSysClockFreq>
2000458a:	4602      	mov	r2, r0
2000458c:	4b0b      	ldr	r3, [pc, #44]	@ (200045bc <HAL_RCC_ClockConfig+0x1c8>)
2000458e:	689b      	ldr	r3, [r3, #8]
20004590:	091b      	lsrs	r3, r3, #4
20004592:	f003 030f 	and.w	r3, r3, #15
20004596:	490a      	ldr	r1, [pc, #40]	@ (200045c0 <HAL_RCC_ClockConfig+0x1cc>)
20004598:	5ccb      	ldrb	r3, [r1, r3]
2000459a:	fa22 f303 	lsr.w	r3, r2, r3
2000459e:	4a09      	ldr	r2, [pc, #36]	@ (200045c4 <HAL_RCC_ClockConfig+0x1d0>)
200045a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
200045a2:	4b09      	ldr	r3, [pc, #36]	@ (200045c8 <HAL_RCC_ClockConfig+0x1d4>)
200045a4:	681b      	ldr	r3, [r3, #0]
200045a6:	4618      	mov	r0, r3
200045a8:	f7fd fb14 	bl	20001bd4 <HAL_InitTick>

  return HAL_OK;
200045ac:	2300      	movs	r3, #0
}
200045ae:	4618      	mov	r0, r3
200045b0:	3710      	adds	r7, #16
200045b2:	46bd      	mov	sp, r7
200045b4:	bd80      	pop	{r7, pc}
200045b6:	bf00      	nop
200045b8:	40023c00 	.word	0x40023c00
200045bc:	40023800 	.word	0x40023800
200045c0:	20009b90 	.word	0x20009b90
200045c4:	20009bb8 	.word	0x20009bb8
200045c8:	20009bbc 	.word	0x20009bbc

200045cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
200045cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200045d0:	b094      	sub	sp, #80	@ 0x50
200045d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
200045d4:	2300      	movs	r3, #0
200045d6:	647b      	str	r3, [r7, #68]	@ 0x44
200045d8:	2300      	movs	r3, #0
200045da:	64fb      	str	r3, [r7, #76]	@ 0x4c
200045dc:	2300      	movs	r3, #0
200045de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
200045e0:	2300      	movs	r3, #0
200045e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
200045e4:	4b79      	ldr	r3, [pc, #484]	@ (200047cc <HAL_RCC_GetSysClockFreq+0x200>)
200045e6:	689b      	ldr	r3, [r3, #8]
200045e8:	f003 030c 	and.w	r3, r3, #12
200045ec:	2b08      	cmp	r3, #8
200045ee:	d00d      	beq.n	2000460c <HAL_RCC_GetSysClockFreq+0x40>
200045f0:	2b08      	cmp	r3, #8
200045f2:	f200 80e1 	bhi.w	200047b8 <HAL_RCC_GetSysClockFreq+0x1ec>
200045f6:	2b00      	cmp	r3, #0
200045f8:	d002      	beq.n	20004600 <HAL_RCC_GetSysClockFreq+0x34>
200045fa:	2b04      	cmp	r3, #4
200045fc:	d003      	beq.n	20004606 <HAL_RCC_GetSysClockFreq+0x3a>
200045fe:	e0db      	b.n	200047b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20004600:	4b73      	ldr	r3, [pc, #460]	@ (200047d0 <HAL_RCC_GetSysClockFreq+0x204>)
20004602:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
20004604:	e0db      	b.n	200047be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20004606:	4b73      	ldr	r3, [pc, #460]	@ (200047d4 <HAL_RCC_GetSysClockFreq+0x208>)
20004608:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
2000460a:	e0d8      	b.n	200047be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000460c:	4b6f      	ldr	r3, [pc, #444]	@ (200047cc <HAL_RCC_GetSysClockFreq+0x200>)
2000460e:	685b      	ldr	r3, [r3, #4]
20004610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20004614:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
20004616:	4b6d      	ldr	r3, [pc, #436]	@ (200047cc <HAL_RCC_GetSysClockFreq+0x200>)
20004618:	685b      	ldr	r3, [r3, #4]
2000461a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
2000461e:	2b00      	cmp	r3, #0
20004620:	d063      	beq.n	200046ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20004622:	4b6a      	ldr	r3, [pc, #424]	@ (200047cc <HAL_RCC_GetSysClockFreq+0x200>)
20004624:	685b      	ldr	r3, [r3, #4]
20004626:	099b      	lsrs	r3, r3, #6
20004628:	2200      	movs	r2, #0
2000462a:	63bb      	str	r3, [r7, #56]	@ 0x38
2000462c:	63fa      	str	r2, [r7, #60]	@ 0x3c
2000462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20004630:	f3c3 0308 	ubfx	r3, r3, #0, #9
20004634:	633b      	str	r3, [r7, #48]	@ 0x30
20004636:	2300      	movs	r3, #0
20004638:	637b      	str	r3, [r7, #52]	@ 0x34
2000463a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
2000463e:	4622      	mov	r2, r4
20004640:	462b      	mov	r3, r5
20004642:	f04f 0000 	mov.w	r0, #0
20004646:	f04f 0100 	mov.w	r1, #0
2000464a:	0159      	lsls	r1, r3, #5
2000464c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20004650:	0150      	lsls	r0, r2, #5
20004652:	4602      	mov	r2, r0
20004654:	460b      	mov	r3, r1
20004656:	4621      	mov	r1, r4
20004658:	1a51      	subs	r1, r2, r1
2000465a:	6139      	str	r1, [r7, #16]
2000465c:	4629      	mov	r1, r5
2000465e:	eb63 0301 	sbc.w	r3, r3, r1
20004662:	617b      	str	r3, [r7, #20]
20004664:	f04f 0200 	mov.w	r2, #0
20004668:	f04f 0300 	mov.w	r3, #0
2000466c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20004670:	4659      	mov	r1, fp
20004672:	018b      	lsls	r3, r1, #6
20004674:	4651      	mov	r1, sl
20004676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
2000467a:	4651      	mov	r1, sl
2000467c:	018a      	lsls	r2, r1, #6
2000467e:	4651      	mov	r1, sl
20004680:	ebb2 0801 	subs.w	r8, r2, r1
20004684:	4659      	mov	r1, fp
20004686:	eb63 0901 	sbc.w	r9, r3, r1
2000468a:	f04f 0200 	mov.w	r2, #0
2000468e:	f04f 0300 	mov.w	r3, #0
20004692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20004696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
2000469a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
2000469e:	4690      	mov	r8, r2
200046a0:	4699      	mov	r9, r3
200046a2:	4623      	mov	r3, r4
200046a4:	eb18 0303 	adds.w	r3, r8, r3
200046a8:	60bb      	str	r3, [r7, #8]
200046aa:	462b      	mov	r3, r5
200046ac:	eb49 0303 	adc.w	r3, r9, r3
200046b0:	60fb      	str	r3, [r7, #12]
200046b2:	f04f 0200 	mov.w	r2, #0
200046b6:	f04f 0300 	mov.w	r3, #0
200046ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
200046be:	4629      	mov	r1, r5
200046c0:	024b      	lsls	r3, r1, #9
200046c2:	4621      	mov	r1, r4
200046c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
200046c8:	4621      	mov	r1, r4
200046ca:	024a      	lsls	r2, r1, #9
200046cc:	4610      	mov	r0, r2
200046ce:	4619      	mov	r1, r3
200046d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200046d2:	2200      	movs	r2, #0
200046d4:	62bb      	str	r3, [r7, #40]	@ 0x28
200046d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
200046d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
200046dc:	f7fb fd94 	bl	20000208 <__aeabi_uldivmod>
200046e0:	4602      	mov	r2, r0
200046e2:	460b      	mov	r3, r1
200046e4:	4613      	mov	r3, r2
200046e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
200046e8:	e058      	b.n	2000479c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200046ea:	4b38      	ldr	r3, [pc, #224]	@ (200047cc <HAL_RCC_GetSysClockFreq+0x200>)
200046ec:	685b      	ldr	r3, [r3, #4]
200046ee:	099b      	lsrs	r3, r3, #6
200046f0:	2200      	movs	r2, #0
200046f2:	4618      	mov	r0, r3
200046f4:	4611      	mov	r1, r2
200046f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
200046fa:	623b      	str	r3, [r7, #32]
200046fc:	2300      	movs	r3, #0
200046fe:	627b      	str	r3, [r7, #36]	@ 0x24
20004700:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20004704:	4642      	mov	r2, r8
20004706:	464b      	mov	r3, r9
20004708:	f04f 0000 	mov.w	r0, #0
2000470c:	f04f 0100 	mov.w	r1, #0
20004710:	0159      	lsls	r1, r3, #5
20004712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20004716:	0150      	lsls	r0, r2, #5
20004718:	4602      	mov	r2, r0
2000471a:	460b      	mov	r3, r1
2000471c:	4641      	mov	r1, r8
2000471e:	ebb2 0a01 	subs.w	sl, r2, r1
20004722:	4649      	mov	r1, r9
20004724:	eb63 0b01 	sbc.w	fp, r3, r1
20004728:	f04f 0200 	mov.w	r2, #0
2000472c:	f04f 0300 	mov.w	r3, #0
20004730:	ea4f 138b 	mov.w	r3, fp, lsl #6
20004734:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20004738:	ea4f 128a 	mov.w	r2, sl, lsl #6
2000473c:	ebb2 040a 	subs.w	r4, r2, sl
20004740:	eb63 050b 	sbc.w	r5, r3, fp
20004744:	f04f 0200 	mov.w	r2, #0
20004748:	f04f 0300 	mov.w	r3, #0
2000474c:	00eb      	lsls	r3, r5, #3
2000474e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20004752:	00e2      	lsls	r2, r4, #3
20004754:	4614      	mov	r4, r2
20004756:	461d      	mov	r5, r3
20004758:	4643      	mov	r3, r8
2000475a:	18e3      	adds	r3, r4, r3
2000475c:	603b      	str	r3, [r7, #0]
2000475e:	464b      	mov	r3, r9
20004760:	eb45 0303 	adc.w	r3, r5, r3
20004764:	607b      	str	r3, [r7, #4]
20004766:	f04f 0200 	mov.w	r2, #0
2000476a:	f04f 0300 	mov.w	r3, #0
2000476e:	e9d7 4500 	ldrd	r4, r5, [r7]
20004772:	4629      	mov	r1, r5
20004774:	028b      	lsls	r3, r1, #10
20004776:	4621      	mov	r1, r4
20004778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
2000477c:	4621      	mov	r1, r4
2000477e:	028a      	lsls	r2, r1, #10
20004780:	4610      	mov	r0, r2
20004782:	4619      	mov	r1, r3
20004784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20004786:	2200      	movs	r2, #0
20004788:	61bb      	str	r3, [r7, #24]
2000478a:	61fa      	str	r2, [r7, #28]
2000478c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20004790:	f7fb fd3a 	bl	20000208 <__aeabi_uldivmod>
20004794:	4602      	mov	r2, r0
20004796:	460b      	mov	r3, r1
20004798:	4613      	mov	r3, r2
2000479a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
2000479c:	4b0b      	ldr	r3, [pc, #44]	@ (200047cc <HAL_RCC_GetSysClockFreq+0x200>)
2000479e:	685b      	ldr	r3, [r3, #4]
200047a0:	0c1b      	lsrs	r3, r3, #16
200047a2:	f003 0303 	and.w	r3, r3, #3
200047a6:	3301      	adds	r3, #1
200047a8:	005b      	lsls	r3, r3, #1
200047aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
200047ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
200047ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
200047b0:	fbb2 f3f3 	udiv	r3, r2, r3
200047b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
200047b6:	e002      	b.n	200047be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
200047b8:	4b05      	ldr	r3, [pc, #20]	@ (200047d0 <HAL_RCC_GetSysClockFreq+0x204>)
200047ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
200047bc:	bf00      	nop
    }
  }
  return sysclockfreq;
200047be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
200047c0:	4618      	mov	r0, r3
200047c2:	3750      	adds	r7, #80	@ 0x50
200047c4:	46bd      	mov	sp, r7
200047c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
200047ca:	bf00      	nop
200047cc:	40023800 	.word	0x40023800
200047d0:	00f42400 	.word	0x00f42400
200047d4:	007a1200 	.word	0x007a1200

200047d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
200047d8:	b480      	push	{r7}
200047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
200047dc:	4b03      	ldr	r3, [pc, #12]	@ (200047ec <HAL_RCC_GetHCLKFreq+0x14>)
200047de:	681b      	ldr	r3, [r3, #0]
}
200047e0:	4618      	mov	r0, r3
200047e2:	46bd      	mov	sp, r7
200047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200047e8:	4770      	bx	lr
200047ea:	bf00      	nop
200047ec:	20009bb8 	.word	0x20009bb8

200047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
200047f0:	b580      	push	{r7, lr}
200047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
200047f4:	f7ff fff0 	bl	200047d8 <HAL_RCC_GetHCLKFreq>
200047f8:	4602      	mov	r2, r0
200047fa:	4b05      	ldr	r3, [pc, #20]	@ (20004810 <HAL_RCC_GetPCLK1Freq+0x20>)
200047fc:	689b      	ldr	r3, [r3, #8]
200047fe:	0a9b      	lsrs	r3, r3, #10
20004800:	f003 0307 	and.w	r3, r3, #7
20004804:	4903      	ldr	r1, [pc, #12]	@ (20004814 <HAL_RCC_GetPCLK1Freq+0x24>)
20004806:	5ccb      	ldrb	r3, [r1, r3]
20004808:	fa22 f303 	lsr.w	r3, r2, r3
}
2000480c:	4618      	mov	r0, r3
2000480e:	bd80      	pop	{r7, pc}
20004810:	40023800 	.word	0x40023800
20004814:	20009ba0 	.word	0x20009ba0

20004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20004818:	b580      	push	{r7, lr}
2000481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
2000481c:	f7ff ffdc 	bl	200047d8 <HAL_RCC_GetHCLKFreq>
20004820:	4602      	mov	r2, r0
20004822:	4b05      	ldr	r3, [pc, #20]	@ (20004838 <HAL_RCC_GetPCLK2Freq+0x20>)
20004824:	689b      	ldr	r3, [r3, #8]
20004826:	0b5b      	lsrs	r3, r3, #13
20004828:	f003 0307 	and.w	r3, r3, #7
2000482c:	4903      	ldr	r1, [pc, #12]	@ (2000483c <HAL_RCC_GetPCLK2Freq+0x24>)
2000482e:	5ccb      	ldrb	r3, [r1, r3]
20004830:	fa22 f303 	lsr.w	r3, r2, r3
}
20004834:	4618      	mov	r0, r3
20004836:	bd80      	pop	{r7, pc}
20004838:	40023800 	.word	0x40023800
2000483c:	20009ba0 	.word	0x20009ba0

20004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20004840:	b580      	push	{r7, lr}
20004842:	b088      	sub	sp, #32
20004844:	af00      	add	r7, sp, #0
20004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
20004848:	2300      	movs	r3, #0
2000484a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
2000484c:	2300      	movs	r3, #0
2000484e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
20004850:	2300      	movs	r3, #0
20004852:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
20004854:	2300      	movs	r3, #0
20004856:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
20004858:	2300      	movs	r3, #0
2000485a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
2000485c:	687b      	ldr	r3, [r7, #4]
2000485e:	681b      	ldr	r3, [r3, #0]
20004860:	f003 0301 	and.w	r3, r3, #1
20004864:	2b00      	cmp	r3, #0
20004866:	d012      	beq.n	2000488e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20004868:	4b69      	ldr	r3, [pc, #420]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000486a:	689b      	ldr	r3, [r3, #8]
2000486c:	4a68      	ldr	r2, [pc, #416]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000486e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
20004872:	6093      	str	r3, [r2, #8]
20004874:	4b66      	ldr	r3, [pc, #408]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20004876:	689a      	ldr	r2, [r3, #8]
20004878:	687b      	ldr	r3, [r7, #4]
2000487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000487c:	4964      	ldr	r1, [pc, #400]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000487e:	4313      	orrs	r3, r2
20004880:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
20004882:	687b      	ldr	r3, [r7, #4]
20004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20004886:	2b00      	cmp	r3, #0
20004888:	d101      	bne.n	2000488e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
2000488a:	2301      	movs	r3, #1
2000488c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
2000488e:	687b      	ldr	r3, [r7, #4]
20004890:	681b      	ldr	r3, [r3, #0]
20004892:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20004896:	2b00      	cmp	r3, #0
20004898:	d017      	beq.n	200048ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2000489a:	4b5d      	ldr	r3, [pc, #372]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200048a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
200048a4:	687b      	ldr	r3, [r7, #4]
200048a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200048a8:	4959      	ldr	r1, [pc, #356]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200048aa:	4313      	orrs	r3, r2
200048ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
200048b0:	687b      	ldr	r3, [r7, #4]
200048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200048b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
200048b8:	d101      	bne.n	200048be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
200048ba:	2301      	movs	r3, #1
200048bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
200048be:	687b      	ldr	r3, [r7, #4]
200048c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200048c2:	2b00      	cmp	r3, #0
200048c4:	d101      	bne.n	200048ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
200048c6:	2301      	movs	r3, #1
200048c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
200048ca:	687b      	ldr	r3, [r7, #4]
200048cc:	681b      	ldr	r3, [r3, #0]
200048ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
200048d2:	2b00      	cmp	r3, #0
200048d4:	d017      	beq.n	20004906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
200048d6:	4b4e      	ldr	r3, [pc, #312]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
200048dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
200048e0:	687b      	ldr	r3, [r7, #4]
200048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200048e4:	494a      	ldr	r1, [pc, #296]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200048e6:	4313      	orrs	r3, r2
200048e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
200048ec:	687b      	ldr	r3, [r7, #4]
200048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200048f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200048f4:	d101      	bne.n	200048fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
200048f6:	2301      	movs	r3, #1
200048f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
200048fa:	687b      	ldr	r3, [r7, #4]
200048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200048fe:	2b00      	cmp	r3, #0
20004900:	d101      	bne.n	20004906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
20004902:	2301      	movs	r3, #1
20004904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20004906:	687b      	ldr	r3, [r7, #4]
20004908:	681b      	ldr	r3, [r3, #0]
2000490a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2000490e:	2b00      	cmp	r3, #0
20004910:	d001      	beq.n	20004916 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
20004912:	2301      	movs	r3, #1
20004914:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
20004916:	687b      	ldr	r3, [r7, #4]
20004918:	681b      	ldr	r3, [r3, #0]
2000491a:	f003 0320 	and.w	r3, r3, #32
2000491e:	2b00      	cmp	r3, #0
20004920:	f000 808b 	beq.w	20004a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
20004924:	4b3a      	ldr	r3, [pc, #232]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004928:	4a39      	ldr	r2, [pc, #228]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000492a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000492e:	6413      	str	r3, [r2, #64]	@ 0x40
20004930:	4b37      	ldr	r3, [pc, #220]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20004938:	60bb      	str	r3, [r7, #8]
2000493a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2000493c:	4b35      	ldr	r3, [pc, #212]	@ (20004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
2000493e:	681b      	ldr	r3, [r3, #0]
20004940:	4a34      	ldr	r2, [pc, #208]	@ (20004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20004942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20004946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20004948:	f7fd f988 	bl	20001c5c <HAL_GetTick>
2000494c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000494e:	e008      	b.n	20004962 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20004950:	f7fd f984 	bl	20001c5c <HAL_GetTick>
20004954:	4602      	mov	r2, r0
20004956:	697b      	ldr	r3, [r7, #20]
20004958:	1ad3      	subs	r3, r2, r3
2000495a:	2b64      	cmp	r3, #100	@ 0x64
2000495c:	d901      	bls.n	20004962 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
2000495e:	2303      	movs	r3, #3
20004960:	e357      	b.n	20005012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20004962:	4b2c      	ldr	r3, [pc, #176]	@ (20004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20004964:	681b      	ldr	r3, [r3, #0]
20004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000496a:	2b00      	cmp	r3, #0
2000496c:	d0f0      	beq.n	20004950 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2000496e:	4b28      	ldr	r3, [pc, #160]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20004970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20004972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20004976:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20004978:	693b      	ldr	r3, [r7, #16]
2000497a:	2b00      	cmp	r3, #0
2000497c:	d035      	beq.n	200049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
2000497e:	687b      	ldr	r3, [r7, #4]
20004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20004986:	693a      	ldr	r2, [r7, #16]
20004988:	429a      	cmp	r2, r3
2000498a:	d02e      	beq.n	200049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2000498c:	4b20      	ldr	r3, [pc, #128]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000498e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20004990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20004994:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
20004996:	4b1e      	ldr	r3, [pc, #120]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000499a:	4a1d      	ldr	r2, [pc, #116]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200049a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
200049a2:	4b1b      	ldr	r3, [pc, #108]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200049a6:	4a1a      	ldr	r2, [pc, #104]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200049a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200049ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
200049ae:	4a18      	ldr	r2, [pc, #96]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200049b0:	693b      	ldr	r3, [r7, #16]
200049b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
200049b4:	4b16      	ldr	r3, [pc, #88]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200049b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200049b8:	f003 0301 	and.w	r3, r3, #1
200049bc:	2b01      	cmp	r3, #1
200049be:	d114      	bne.n	200049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200049c0:	f7fd f94c 	bl	20001c5c <HAL_GetTick>
200049c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200049c6:	e00a      	b.n	200049de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200049c8:	f7fd f948 	bl	20001c5c <HAL_GetTick>
200049cc:	4602      	mov	r2, r0
200049ce:	697b      	ldr	r3, [r7, #20]
200049d0:	1ad3      	subs	r3, r2, r3
200049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
200049d6:	4293      	cmp	r3, r2
200049d8:	d901      	bls.n	200049de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
200049da:	2303      	movs	r3, #3
200049dc:	e319      	b.n	20005012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200049de:	4b0c      	ldr	r3, [pc, #48]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200049e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200049e2:	f003 0302 	and.w	r3, r3, #2
200049e6:	2b00      	cmp	r3, #0
200049e8:	d0ee      	beq.n	200049c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
200049ea:	687b      	ldr	r3, [r7, #4]
200049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200049ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
200049f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200049f6:	d111      	bne.n	20004a1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
200049f8:	4b05      	ldr	r3, [pc, #20]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200049fa:	689b      	ldr	r3, [r3, #8]
200049fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
20004a00:	687b      	ldr	r3, [r7, #4]
20004a02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
20004a04:	4b04      	ldr	r3, [pc, #16]	@ (20004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
20004a06:	400b      	ands	r3, r1
20004a08:	4901      	ldr	r1, [pc, #4]	@ (20004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20004a0a:	4313      	orrs	r3, r2
20004a0c:	608b      	str	r3, [r1, #8]
20004a0e:	e00b      	b.n	20004a28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
20004a10:	40023800 	.word	0x40023800
20004a14:	40007000 	.word	0x40007000
20004a18:	0ffffcff 	.word	0x0ffffcff
20004a1c:	4baa      	ldr	r3, [pc, #680]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a1e:	689b      	ldr	r3, [r3, #8]
20004a20:	4aa9      	ldr	r2, [pc, #676]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
20004a26:	6093      	str	r3, [r2, #8]
20004a28:	4ba7      	ldr	r3, [pc, #668]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
20004a2c:	687b      	ldr	r3, [r7, #4]
20004a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
20004a34:	49a4      	ldr	r1, [pc, #656]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a36:	4313      	orrs	r3, r2
20004a38:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
20004a3a:	687b      	ldr	r3, [r7, #4]
20004a3c:	681b      	ldr	r3, [r3, #0]
20004a3e:	f003 0310 	and.w	r3, r3, #16
20004a42:	2b00      	cmp	r3, #0
20004a44:	d010      	beq.n	20004a68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
20004a46:	4ba0      	ldr	r3, [pc, #640]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20004a4c:	4a9e      	ldr	r2, [pc, #632]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20004a52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
20004a56:	4b9c      	ldr	r3, [pc, #624]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
20004a5c:	687b      	ldr	r3, [r7, #4]
20004a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20004a60:	4999      	ldr	r1, [pc, #612]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a62:	4313      	orrs	r3, r2
20004a64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
20004a68:	687b      	ldr	r3, [r7, #4]
20004a6a:	681b      	ldr	r3, [r3, #0]
20004a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20004a70:	2b00      	cmp	r3, #0
20004a72:	d00a      	beq.n	20004a8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
20004a74:	4b94      	ldr	r3, [pc, #592]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004a7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20004a7e:	687b      	ldr	r3, [r7, #4]
20004a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20004a82:	4991      	ldr	r1, [pc, #580]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a84:	4313      	orrs	r3, r2
20004a86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
20004a8a:	687b      	ldr	r3, [r7, #4]
20004a8c:	681b      	ldr	r3, [r3, #0]
20004a8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20004a92:	2b00      	cmp	r3, #0
20004a94:	d00a      	beq.n	20004aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
20004a96:	4b8c      	ldr	r3, [pc, #560]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004a9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
20004aa0:	687b      	ldr	r3, [r7, #4]
20004aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20004aa4:	4988      	ldr	r1, [pc, #544]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004aa6:	4313      	orrs	r3, r2
20004aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
20004aac:	687b      	ldr	r3, [r7, #4]
20004aae:	681b      	ldr	r3, [r3, #0]
20004ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20004ab4:	2b00      	cmp	r3, #0
20004ab6:	d00a      	beq.n	20004ace <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
20004ab8:	4b83      	ldr	r3, [pc, #524]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004abe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20004ac2:	687b      	ldr	r3, [r7, #4]
20004ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20004ac6:	4980      	ldr	r1, [pc, #512]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004ac8:	4313      	orrs	r3, r2
20004aca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
20004ace:	687b      	ldr	r3, [r7, #4]
20004ad0:	681b      	ldr	r3, [r3, #0]
20004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20004ad6:	2b00      	cmp	r3, #0
20004ad8:	d00a      	beq.n	20004af0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
20004ada:	4b7b      	ldr	r3, [pc, #492]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004ae0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
20004ae4:	687b      	ldr	r3, [r7, #4]
20004ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20004ae8:	4977      	ldr	r1, [pc, #476]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004aea:	4313      	orrs	r3, r2
20004aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
20004af0:	687b      	ldr	r3, [r7, #4]
20004af2:	681b      	ldr	r3, [r3, #0]
20004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20004af8:	2b00      	cmp	r3, #0
20004afa:	d00a      	beq.n	20004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
20004afc:	4b72      	ldr	r3, [pc, #456]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004b02:	f023 0203 	bic.w	r2, r3, #3
20004b06:	687b      	ldr	r3, [r7, #4]
20004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20004b0a:	496f      	ldr	r1, [pc, #444]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b0c:	4313      	orrs	r3, r2
20004b0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
20004b12:	687b      	ldr	r3, [r7, #4]
20004b14:	681b      	ldr	r3, [r3, #0]
20004b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20004b1a:	2b00      	cmp	r3, #0
20004b1c:	d00a      	beq.n	20004b34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
20004b1e:	4b6a      	ldr	r3, [pc, #424]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004b24:	f023 020c 	bic.w	r2, r3, #12
20004b28:	687b      	ldr	r3, [r7, #4]
20004b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20004b2c:	4966      	ldr	r1, [pc, #408]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b2e:	4313      	orrs	r3, r2
20004b30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
20004b34:	687b      	ldr	r3, [r7, #4]
20004b36:	681b      	ldr	r3, [r3, #0]
20004b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20004b3c:	2b00      	cmp	r3, #0
20004b3e:	d00a      	beq.n	20004b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
20004b40:	4b61      	ldr	r3, [pc, #388]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004b46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
20004b4a:	687b      	ldr	r3, [r7, #4]
20004b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20004b4e:	495e      	ldr	r1, [pc, #376]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b50:	4313      	orrs	r3, r2
20004b52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
20004b56:	687b      	ldr	r3, [r7, #4]
20004b58:	681b      	ldr	r3, [r3, #0]
20004b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20004b5e:	2b00      	cmp	r3, #0
20004b60:	d00a      	beq.n	20004b78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
20004b62:	4b59      	ldr	r3, [pc, #356]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004b68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
20004b6c:	687b      	ldr	r3, [r7, #4]
20004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20004b70:	4955      	ldr	r1, [pc, #340]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b72:	4313      	orrs	r3, r2
20004b74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
20004b78:	687b      	ldr	r3, [r7, #4]
20004b7a:	681b      	ldr	r3, [r3, #0]
20004b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20004b80:	2b00      	cmp	r3, #0
20004b82:	d00a      	beq.n	20004b9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
20004b84:	4b50      	ldr	r3, [pc, #320]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004b8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
20004b8e:	687b      	ldr	r3, [r7, #4]
20004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20004b92:	494d      	ldr	r1, [pc, #308]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004b94:	4313      	orrs	r3, r2
20004b96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
20004b9a:	687b      	ldr	r3, [r7, #4]
20004b9c:	681b      	ldr	r3, [r3, #0]
20004b9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20004ba2:	2b00      	cmp	r3, #0
20004ba4:	d00a      	beq.n	20004bbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
20004ba6:	4b48      	ldr	r3, [pc, #288]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004bac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
20004bb0:	687b      	ldr	r3, [r7, #4]
20004bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20004bb4:	4944      	ldr	r1, [pc, #272]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004bb6:	4313      	orrs	r3, r2
20004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
20004bbc:	687b      	ldr	r3, [r7, #4]
20004bbe:	681b      	ldr	r3, [r3, #0]
20004bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20004bc4:	2b00      	cmp	r3, #0
20004bc6:	d00a      	beq.n	20004bde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
20004bc8:	4b3f      	ldr	r3, [pc, #252]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004bce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
20004bd2:	687b      	ldr	r3, [r7, #4]
20004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20004bd6:	493c      	ldr	r1, [pc, #240]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004bd8:	4313      	orrs	r3, r2
20004bda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
20004bde:	687b      	ldr	r3, [r7, #4]
20004be0:	681b      	ldr	r3, [r3, #0]
20004be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20004be6:	2b00      	cmp	r3, #0
20004be8:	d00a      	beq.n	20004c00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
20004bea:	4b37      	ldr	r3, [pc, #220]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004bf0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
20004bf4:	687b      	ldr	r3, [r7, #4]
20004bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20004bf8:	4933      	ldr	r1, [pc, #204]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004bfa:	4313      	orrs	r3, r2
20004bfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
20004c00:	687b      	ldr	r3, [r7, #4]
20004c02:	681b      	ldr	r3, [r3, #0]
20004c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20004c08:	2b00      	cmp	r3, #0
20004c0a:	d00a      	beq.n	20004c22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
20004c0c:	4b2e      	ldr	r3, [pc, #184]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004c12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
20004c16:	687b      	ldr	r3, [r7, #4]
20004c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
20004c1a:	492b      	ldr	r1, [pc, #172]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004c1c:	4313      	orrs	r3, r2
20004c1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
20004c22:	687b      	ldr	r3, [r7, #4]
20004c24:	681b      	ldr	r3, [r3, #0]
20004c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20004c2a:	2b00      	cmp	r3, #0
20004c2c:	d011      	beq.n	20004c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
20004c2e:	4b26      	ldr	r3, [pc, #152]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004c34:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
20004c38:	687b      	ldr	r3, [r7, #4]
20004c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20004c3c:	4922      	ldr	r1, [pc, #136]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004c3e:	4313      	orrs	r3, r2
20004c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
20004c44:	687b      	ldr	r3, [r7, #4]
20004c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20004c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20004c4c:	d101      	bne.n	20004c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
20004c4e:	2301      	movs	r3, #1
20004c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
20004c52:	687b      	ldr	r3, [r7, #4]
20004c54:	681b      	ldr	r3, [r3, #0]
20004c56:	f003 0308 	and.w	r3, r3, #8
20004c5a:	2b00      	cmp	r3, #0
20004c5c:	d001      	beq.n	20004c62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
20004c5e:	2301      	movs	r3, #1
20004c60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
20004c62:	687b      	ldr	r3, [r7, #4]
20004c64:	681b      	ldr	r3, [r3, #0]
20004c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20004c6a:	2b00      	cmp	r3, #0
20004c6c:	d00a      	beq.n	20004c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
20004c6e:	4b16      	ldr	r3, [pc, #88]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004c74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
20004c78:	687b      	ldr	r3, [r7, #4]
20004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20004c7c:	4912      	ldr	r1, [pc, #72]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004c7e:	4313      	orrs	r3, r2
20004c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
20004c84:	687b      	ldr	r3, [r7, #4]
20004c86:	681b      	ldr	r3, [r3, #0]
20004c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
20004c8c:	2b00      	cmp	r3, #0
20004c8e:	d00b      	beq.n	20004ca8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
20004c90:	4b0d      	ldr	r3, [pc, #52]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20004c96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
20004c9a:	687b      	ldr	r3, [r7, #4]
20004c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20004ca0:	4909      	ldr	r1, [pc, #36]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004ca2:	4313      	orrs	r3, r2
20004ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20004ca8:	69fb      	ldr	r3, [r7, #28]
20004caa:	2b01      	cmp	r3, #1
20004cac:	d006      	beq.n	20004cbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
20004cae:	687b      	ldr	r3, [r7, #4]
20004cb0:	681b      	ldr	r3, [r3, #0]
20004cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20004cb6:	2b00      	cmp	r3, #0
20004cb8:	f000 80d9 	beq.w	20004e6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20004cbc:	4b02      	ldr	r3, [pc, #8]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004cbe:	681b      	ldr	r3, [r3, #0]
20004cc0:	4a01      	ldr	r2, [pc, #4]	@ (20004cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
20004cc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
20004cc6:	e001      	b.n	20004ccc <HAL_RCCEx_PeriphCLKConfig+0x48c>
20004cc8:	40023800 	.word	0x40023800
20004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20004cce:	f7fc ffc5 	bl	20001c5c <HAL_GetTick>
20004cd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20004cd4:	e008      	b.n	20004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20004cd6:	f7fc ffc1 	bl	20001c5c <HAL_GetTick>
20004cda:	4602      	mov	r2, r0
20004cdc:	697b      	ldr	r3, [r7, #20]
20004cde:	1ad3      	subs	r3, r2, r3
20004ce0:	2b64      	cmp	r3, #100	@ 0x64
20004ce2:	d901      	bls.n	20004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20004ce4:	2303      	movs	r3, #3
20004ce6:	e194      	b.n	20005012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20004ce8:	4b6c      	ldr	r3, [pc, #432]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004cea:	681b      	ldr	r3, [r3, #0]
20004cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20004cf0:	2b00      	cmp	r3, #0
20004cf2:	d1f0      	bne.n	20004cd6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
20004cf4:	687b      	ldr	r3, [r7, #4]
20004cf6:	681b      	ldr	r3, [r3, #0]
20004cf8:	f003 0301 	and.w	r3, r3, #1
20004cfc:	2b00      	cmp	r3, #0
20004cfe:	d021      	beq.n	20004d44 <HAL_RCCEx_PeriphCLKConfig+0x504>
20004d00:	687b      	ldr	r3, [r7, #4]
20004d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20004d04:	2b00      	cmp	r3, #0
20004d06:	d11d      	bne.n	20004d44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20004d08:	4b64      	ldr	r3, [pc, #400]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20004d0e:	0c1b      	lsrs	r3, r3, #16
20004d10:	f003 0303 	and.w	r3, r3, #3
20004d14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20004d16:	4b61      	ldr	r3, [pc, #388]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20004d1c:	0e1b      	lsrs	r3, r3, #24
20004d1e:	f003 030f 	and.w	r3, r3, #15
20004d22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
20004d24:	687b      	ldr	r3, [r7, #4]
20004d26:	685b      	ldr	r3, [r3, #4]
20004d28:	019a      	lsls	r2, r3, #6
20004d2a:	693b      	ldr	r3, [r7, #16]
20004d2c:	041b      	lsls	r3, r3, #16
20004d2e:	431a      	orrs	r2, r3
20004d30:	68fb      	ldr	r3, [r7, #12]
20004d32:	061b      	lsls	r3, r3, #24
20004d34:	431a      	orrs	r2, r3
20004d36:	687b      	ldr	r3, [r7, #4]
20004d38:	689b      	ldr	r3, [r3, #8]
20004d3a:	071b      	lsls	r3, r3, #28
20004d3c:	4957      	ldr	r1, [pc, #348]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004d3e:	4313      	orrs	r3, r2
20004d40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20004d44:	687b      	ldr	r3, [r7, #4]
20004d46:	681b      	ldr	r3, [r3, #0]
20004d48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20004d4c:	2b00      	cmp	r3, #0
20004d4e:	d004      	beq.n	20004d5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
20004d50:	687b      	ldr	r3, [r7, #4]
20004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20004d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20004d58:	d00a      	beq.n	20004d70 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20004d5a:	687b      	ldr	r3, [r7, #4]
20004d5c:	681b      	ldr	r3, [r3, #0]
20004d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20004d62:	2b00      	cmp	r3, #0
20004d64:	d02e      	beq.n	20004dc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20004d66:	687b      	ldr	r3, [r7, #4]
20004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20004d6e:	d129      	bne.n	20004dc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20004d70:	4b4a      	ldr	r3, [pc, #296]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20004d76:	0c1b      	lsrs	r3, r3, #16
20004d78:	f003 0303 	and.w	r3, r3, #3
20004d7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20004d7e:	4b47      	ldr	r3, [pc, #284]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20004d84:	0f1b      	lsrs	r3, r3, #28
20004d86:	f003 0307 	and.w	r3, r3, #7
20004d8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
20004d8c:	687b      	ldr	r3, [r7, #4]
20004d8e:	685b      	ldr	r3, [r3, #4]
20004d90:	019a      	lsls	r2, r3, #6
20004d92:	693b      	ldr	r3, [r7, #16]
20004d94:	041b      	lsls	r3, r3, #16
20004d96:	431a      	orrs	r2, r3
20004d98:	687b      	ldr	r3, [r7, #4]
20004d9a:	68db      	ldr	r3, [r3, #12]
20004d9c:	061b      	lsls	r3, r3, #24
20004d9e:	431a      	orrs	r2, r3
20004da0:	68fb      	ldr	r3, [r7, #12]
20004da2:	071b      	lsls	r3, r3, #28
20004da4:	493d      	ldr	r1, [pc, #244]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004da6:	4313      	orrs	r3, r2
20004da8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
20004dac:	4b3b      	ldr	r3, [pc, #236]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20004db2:	f023 021f 	bic.w	r2, r3, #31
20004db6:	687b      	ldr	r3, [r7, #4]
20004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20004dba:	3b01      	subs	r3, #1
20004dbc:	4937      	ldr	r1, [pc, #220]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004dbe:	4313      	orrs	r3, r2
20004dc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20004dc4:	687b      	ldr	r3, [r7, #4]
20004dc6:	681b      	ldr	r3, [r3, #0]
20004dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20004dcc:	2b00      	cmp	r3, #0
20004dce:	d01d      	beq.n	20004e0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20004dd0:	4b32      	ldr	r3, [pc, #200]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20004dd6:	0e1b      	lsrs	r3, r3, #24
20004dd8:	f003 030f 	and.w	r3, r3, #15
20004ddc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20004dde:	4b2f      	ldr	r3, [pc, #188]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20004de4:	0f1b      	lsrs	r3, r3, #28
20004de6:	f003 0307 	and.w	r3, r3, #7
20004dea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
20004dec:	687b      	ldr	r3, [r7, #4]
20004dee:	685b      	ldr	r3, [r3, #4]
20004df0:	019a      	lsls	r2, r3, #6
20004df2:	687b      	ldr	r3, [r7, #4]
20004df4:	691b      	ldr	r3, [r3, #16]
20004df6:	041b      	lsls	r3, r3, #16
20004df8:	431a      	orrs	r2, r3
20004dfa:	693b      	ldr	r3, [r7, #16]
20004dfc:	061b      	lsls	r3, r3, #24
20004dfe:	431a      	orrs	r2, r3
20004e00:	68fb      	ldr	r3, [r7, #12]
20004e02:	071b      	lsls	r3, r3, #28
20004e04:	4925      	ldr	r1, [pc, #148]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004e06:	4313      	orrs	r3, r2
20004e08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
20004e0c:	687b      	ldr	r3, [r7, #4]
20004e0e:	681b      	ldr	r3, [r3, #0]
20004e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20004e14:	2b00      	cmp	r3, #0
20004e16:	d011      	beq.n	20004e3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
20004e18:	687b      	ldr	r3, [r7, #4]
20004e1a:	685b      	ldr	r3, [r3, #4]
20004e1c:	019a      	lsls	r2, r3, #6
20004e1e:	687b      	ldr	r3, [r7, #4]
20004e20:	691b      	ldr	r3, [r3, #16]
20004e22:	041b      	lsls	r3, r3, #16
20004e24:	431a      	orrs	r2, r3
20004e26:	687b      	ldr	r3, [r7, #4]
20004e28:	68db      	ldr	r3, [r3, #12]
20004e2a:	061b      	lsls	r3, r3, #24
20004e2c:	431a      	orrs	r2, r3
20004e2e:	687b      	ldr	r3, [r7, #4]
20004e30:	689b      	ldr	r3, [r3, #8]
20004e32:	071b      	lsls	r3, r3, #28
20004e34:	4919      	ldr	r1, [pc, #100]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004e36:	4313      	orrs	r3, r2
20004e38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20004e3c:	4b17      	ldr	r3, [pc, #92]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004e3e:	681b      	ldr	r3, [r3, #0]
20004e40:	4a16      	ldr	r2, [pc, #88]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004e42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20004e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20004e48:	f7fc ff08 	bl	20001c5c <HAL_GetTick>
20004e4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20004e4e:	e008      	b.n	20004e62 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20004e50:	f7fc ff04 	bl	20001c5c <HAL_GetTick>
20004e54:	4602      	mov	r2, r0
20004e56:	697b      	ldr	r3, [r7, #20]
20004e58:	1ad3      	subs	r3, r2, r3
20004e5a:	2b64      	cmp	r3, #100	@ 0x64
20004e5c:	d901      	bls.n	20004e62 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20004e5e:	2303      	movs	r3, #3
20004e60:	e0d7      	b.n	20005012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20004e62:	4b0e      	ldr	r3, [pc, #56]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004e64:	681b      	ldr	r3, [r3, #0]
20004e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20004e6a:	2b00      	cmp	r3, #0
20004e6c:	d0f0      	beq.n	20004e50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
20004e6e:	69bb      	ldr	r3, [r7, #24]
20004e70:	2b01      	cmp	r3, #1
20004e72:	f040 80cd 	bne.w	20005010 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
20004e76:	4b09      	ldr	r3, [pc, #36]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004e78:	681b      	ldr	r3, [r3, #0]
20004e7a:	4a08      	ldr	r2, [pc, #32]	@ (20004e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
20004e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20004e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20004e82:	f7fc feeb 	bl	20001c5c <HAL_GetTick>
20004e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20004e88:	e00a      	b.n	20004ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20004e8a:	f7fc fee7 	bl	20001c5c <HAL_GetTick>
20004e8e:	4602      	mov	r2, r0
20004e90:	697b      	ldr	r3, [r7, #20]
20004e92:	1ad3      	subs	r3, r2, r3
20004e94:	2b64      	cmp	r3, #100	@ 0x64
20004e96:	d903      	bls.n	20004ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20004e98:	2303      	movs	r3, #3
20004e9a:	e0ba      	b.n	20005012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
20004e9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20004ea0:	4b5e      	ldr	r3, [pc, #376]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004ea2:	681b      	ldr	r3, [r3, #0]
20004ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20004ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20004eac:	d0ed      	beq.n	20004e8a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20004eae:	687b      	ldr	r3, [r7, #4]
20004eb0:	681b      	ldr	r3, [r3, #0]
20004eb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20004eb6:	2b00      	cmp	r3, #0
20004eb8:	d003      	beq.n	20004ec2 <HAL_RCCEx_PeriphCLKConfig+0x682>
20004eba:	687b      	ldr	r3, [r7, #4]
20004ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20004ebe:	2b00      	cmp	r3, #0
20004ec0:	d009      	beq.n	20004ed6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
20004ec2:	687b      	ldr	r3, [r7, #4]
20004ec4:	681b      	ldr	r3, [r3, #0]
20004ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20004eca:	2b00      	cmp	r3, #0
20004ecc:	d02e      	beq.n	20004f2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
20004ece:	687b      	ldr	r3, [r7, #4]
20004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004ed2:	2b00      	cmp	r3, #0
20004ed4:	d12a      	bne.n	20004f2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20004ed6:	4b51      	ldr	r3, [pc, #324]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20004edc:	0c1b      	lsrs	r3, r3, #16
20004ede:	f003 0303 	and.w	r3, r3, #3
20004ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20004ee4:	4b4d      	ldr	r3, [pc, #308]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20004eea:	0f1b      	lsrs	r3, r3, #28
20004eec:	f003 0307 	and.w	r3, r3, #7
20004ef0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
20004ef2:	687b      	ldr	r3, [r7, #4]
20004ef4:	695b      	ldr	r3, [r3, #20]
20004ef6:	019a      	lsls	r2, r3, #6
20004ef8:	693b      	ldr	r3, [r7, #16]
20004efa:	041b      	lsls	r3, r3, #16
20004efc:	431a      	orrs	r2, r3
20004efe:	687b      	ldr	r3, [r7, #4]
20004f00:	699b      	ldr	r3, [r3, #24]
20004f02:	061b      	lsls	r3, r3, #24
20004f04:	431a      	orrs	r2, r3
20004f06:	68fb      	ldr	r3, [r7, #12]
20004f08:	071b      	lsls	r3, r3, #28
20004f0a:	4944      	ldr	r1, [pc, #272]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f0c:	4313      	orrs	r3, r2
20004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
20004f12:	4b42      	ldr	r3, [pc, #264]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20004f18:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
20004f1c:	687b      	ldr	r3, [r7, #4]
20004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20004f20:	3b01      	subs	r3, #1
20004f22:	021b      	lsls	r3, r3, #8
20004f24:	493d      	ldr	r1, [pc, #244]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f26:	4313      	orrs	r3, r2
20004f28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
20004f2c:	687b      	ldr	r3, [r7, #4]
20004f2e:	681b      	ldr	r3, [r3, #0]
20004f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20004f34:	2b00      	cmp	r3, #0
20004f36:	d022      	beq.n	20004f7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
20004f38:	687b      	ldr	r3, [r7, #4]
20004f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
20004f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20004f40:	d11d      	bne.n	20004f7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20004f42:	4b36      	ldr	r3, [pc, #216]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20004f48:	0e1b      	lsrs	r3, r3, #24
20004f4a:	f003 030f 	and.w	r3, r3, #15
20004f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20004f50:	4b32      	ldr	r3, [pc, #200]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20004f56:	0f1b      	lsrs	r3, r3, #28
20004f58:	f003 0307 	and.w	r3, r3, #7
20004f5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
20004f5e:	687b      	ldr	r3, [r7, #4]
20004f60:	695b      	ldr	r3, [r3, #20]
20004f62:	019a      	lsls	r2, r3, #6
20004f64:	687b      	ldr	r3, [r7, #4]
20004f66:	6a1b      	ldr	r3, [r3, #32]
20004f68:	041b      	lsls	r3, r3, #16
20004f6a:	431a      	orrs	r2, r3
20004f6c:	693b      	ldr	r3, [r7, #16]
20004f6e:	061b      	lsls	r3, r3, #24
20004f70:	431a      	orrs	r2, r3
20004f72:	68fb      	ldr	r3, [r7, #12]
20004f74:	071b      	lsls	r3, r3, #28
20004f76:	4929      	ldr	r1, [pc, #164]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f78:	4313      	orrs	r3, r2
20004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
20004f7e:	687b      	ldr	r3, [r7, #4]
20004f80:	681b      	ldr	r3, [r3, #0]
20004f82:	f003 0308 	and.w	r3, r3, #8
20004f86:	2b00      	cmp	r3, #0
20004f88:	d028      	beq.n	20004fdc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20004f8a:	4b24      	ldr	r3, [pc, #144]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20004f90:	0e1b      	lsrs	r3, r3, #24
20004f92:	f003 030f 	and.w	r3, r3, #15
20004f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20004f98:	4b20      	ldr	r3, [pc, #128]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20004f9e:	0c1b      	lsrs	r3, r3, #16
20004fa0:	f003 0303 	and.w	r3, r3, #3
20004fa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
20004fa6:	687b      	ldr	r3, [r7, #4]
20004fa8:	695b      	ldr	r3, [r3, #20]
20004faa:	019a      	lsls	r2, r3, #6
20004fac:	68fb      	ldr	r3, [r7, #12]
20004fae:	041b      	lsls	r3, r3, #16
20004fb0:	431a      	orrs	r2, r3
20004fb2:	693b      	ldr	r3, [r7, #16]
20004fb4:	061b      	lsls	r3, r3, #24
20004fb6:	431a      	orrs	r2, r3
20004fb8:	687b      	ldr	r3, [r7, #4]
20004fba:	69db      	ldr	r3, [r3, #28]
20004fbc:	071b      	lsls	r3, r3, #28
20004fbe:	4917      	ldr	r1, [pc, #92]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004fc0:	4313      	orrs	r3, r2
20004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
20004fc6:	4b15      	ldr	r3, [pc, #84]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20004fcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
20004fd0:	687b      	ldr	r3, [r7, #4]
20004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20004fd4:	4911      	ldr	r1, [pc, #68]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004fd6:	4313      	orrs	r3, r2
20004fd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
20004fdc:	4b0f      	ldr	r3, [pc, #60]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004fde:	681b      	ldr	r3, [r3, #0]
20004fe0:	4a0e      	ldr	r2, [pc, #56]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20004fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20004fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20004fe8:	f7fc fe38 	bl	20001c5c <HAL_GetTick>
20004fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20004fee:	e008      	b.n	20005002 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20004ff0:	f7fc fe34 	bl	20001c5c <HAL_GetTick>
20004ff4:	4602      	mov	r2, r0
20004ff6:	697b      	ldr	r3, [r7, #20]
20004ff8:	1ad3      	subs	r3, r2, r3
20004ffa:	2b64      	cmp	r3, #100	@ 0x64
20004ffc:	d901      	bls.n	20005002 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20004ffe:	2303      	movs	r3, #3
20005000:	e007      	b.n	20005012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20005002:	4b06      	ldr	r3, [pc, #24]	@ (2000501c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
20005004:	681b      	ldr	r3, [r3, #0]
20005006:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
2000500a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2000500e:	d1ef      	bne.n	20004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
20005010:	2300      	movs	r3, #0
}
20005012:	4618      	mov	r0, r3
20005014:	3720      	adds	r7, #32
20005016:	46bd      	mov	sp, r7
20005018:	bd80      	pop	{r7, pc}
2000501a:	bf00      	nop
2000501c:	40023800 	.word	0x40023800

20005020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20005020:	b580      	push	{r7, lr}
20005022:	b084      	sub	sp, #16
20005024:	af00      	add	r7, sp, #0
20005026:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
20005028:	687b      	ldr	r3, [r7, #4]
2000502a:	2b00      	cmp	r3, #0
2000502c:	d101      	bne.n	20005032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
2000502e:	2301      	movs	r3, #1
20005030:	e09d      	b.n	2000516e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20005032:	687b      	ldr	r3, [r7, #4]
20005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20005036:	2b00      	cmp	r3, #0
20005038:	d108      	bne.n	2000504c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
2000503a:	687b      	ldr	r3, [r7, #4]
2000503c:	685b      	ldr	r3, [r3, #4]
2000503e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20005042:	d009      	beq.n	20005058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20005044:	687b      	ldr	r3, [r7, #4]
20005046:	2200      	movs	r2, #0
20005048:	61da      	str	r2, [r3, #28]
2000504a:	e005      	b.n	20005058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
2000504c:	687b      	ldr	r3, [r7, #4]
2000504e:	2200      	movs	r2, #0
20005050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20005052:	687b      	ldr	r3, [r7, #4]
20005054:	2200      	movs	r2, #0
20005056:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20005058:	687b      	ldr	r3, [r7, #4]
2000505a:	2200      	movs	r2, #0
2000505c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
2000505e:	687b      	ldr	r3, [r7, #4]
20005060:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
20005064:	b2db      	uxtb	r3, r3
20005066:	2b00      	cmp	r3, #0
20005068:	d106      	bne.n	20005078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
2000506a:	687b      	ldr	r3, [r7, #4]
2000506c:	2200      	movs	r2, #0
2000506e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20005072:	6878      	ldr	r0, [r7, #4]
20005074:	f7fc fbfc 	bl	20001870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20005078:	687b      	ldr	r3, [r7, #4]
2000507a:	2202      	movs	r2, #2
2000507c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20005080:	687b      	ldr	r3, [r7, #4]
20005082:	681b      	ldr	r3, [r3, #0]
20005084:	681a      	ldr	r2, [r3, #0]
20005086:	687b      	ldr	r3, [r7, #4]
20005088:	681b      	ldr	r3, [r3, #0]
2000508a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
2000508e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20005090:	687b      	ldr	r3, [r7, #4]
20005092:	68db      	ldr	r3, [r3, #12]
20005094:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
20005098:	d902      	bls.n	200050a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
2000509a:	2300      	movs	r3, #0
2000509c:	60fb      	str	r3, [r7, #12]
2000509e:	e002      	b.n	200050a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
200050a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
200050a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
200050a6:	687b      	ldr	r3, [r7, #4]
200050a8:	68db      	ldr	r3, [r3, #12]
200050aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
200050ae:	d007      	beq.n	200050c0 <HAL_SPI_Init+0xa0>
200050b0:	687b      	ldr	r3, [r7, #4]
200050b2:	68db      	ldr	r3, [r3, #12]
200050b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
200050b8:	d002      	beq.n	200050c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200050ba:	687b      	ldr	r3, [r7, #4]
200050bc:	2200      	movs	r2, #0
200050be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
200050c0:	687b      	ldr	r3, [r7, #4]
200050c2:	685b      	ldr	r3, [r3, #4]
200050c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
200050c8:	687b      	ldr	r3, [r7, #4]
200050ca:	689b      	ldr	r3, [r3, #8]
200050cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
200050d0:	431a      	orrs	r2, r3
200050d2:	687b      	ldr	r3, [r7, #4]
200050d4:	691b      	ldr	r3, [r3, #16]
200050d6:	f003 0302 	and.w	r3, r3, #2
200050da:	431a      	orrs	r2, r3
200050dc:	687b      	ldr	r3, [r7, #4]
200050de:	695b      	ldr	r3, [r3, #20]
200050e0:	f003 0301 	and.w	r3, r3, #1
200050e4:	431a      	orrs	r2, r3
200050e6:	687b      	ldr	r3, [r7, #4]
200050e8:	699b      	ldr	r3, [r3, #24]
200050ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
200050ee:	431a      	orrs	r2, r3
200050f0:	687b      	ldr	r3, [r7, #4]
200050f2:	69db      	ldr	r3, [r3, #28]
200050f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
200050f8:	431a      	orrs	r2, r3
200050fa:	687b      	ldr	r3, [r7, #4]
200050fc:	6a1b      	ldr	r3, [r3, #32]
200050fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20005102:	ea42 0103 	orr.w	r1, r2, r3
20005106:	687b      	ldr	r3, [r7, #4]
20005108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000510a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
2000510e:	687b      	ldr	r3, [r7, #4]
20005110:	681b      	ldr	r3, [r3, #0]
20005112:	430a      	orrs	r2, r1
20005114:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
20005116:	687b      	ldr	r3, [r7, #4]
20005118:	699b      	ldr	r3, [r3, #24]
2000511a:	0c1b      	lsrs	r3, r3, #16
2000511c:	f003 0204 	and.w	r2, r3, #4
20005120:	687b      	ldr	r3, [r7, #4]
20005122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20005124:	f003 0310 	and.w	r3, r3, #16
20005128:	431a      	orrs	r2, r3
2000512a:	687b      	ldr	r3, [r7, #4]
2000512c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000512e:	f003 0308 	and.w	r3, r3, #8
20005132:	431a      	orrs	r2, r3
20005134:	687b      	ldr	r3, [r7, #4]
20005136:	68db      	ldr	r3, [r3, #12]
20005138:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
2000513c:	ea42 0103 	orr.w	r1, r2, r3
20005140:	68fb      	ldr	r3, [r7, #12]
20005142:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
20005146:	687b      	ldr	r3, [r7, #4]
20005148:	681b      	ldr	r3, [r3, #0]
2000514a:	430a      	orrs	r2, r1
2000514c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2000514e:	687b      	ldr	r3, [r7, #4]
20005150:	681b      	ldr	r3, [r3, #0]
20005152:	69da      	ldr	r2, [r3, #28]
20005154:	687b      	ldr	r3, [r7, #4]
20005156:	681b      	ldr	r3, [r3, #0]
20005158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
2000515c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000515e:	687b      	ldr	r3, [r7, #4]
20005160:	2200      	movs	r2, #0
20005162:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
20005164:	687b      	ldr	r3, [r7, #4]
20005166:	2201      	movs	r2, #1
20005168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
2000516c:	2300      	movs	r3, #0
}
2000516e:	4618      	mov	r0, r3
20005170:	3710      	adds	r7, #16
20005172:	46bd      	mov	sp, r7
20005174:	bd80      	pop	{r7, pc}

20005176 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
20005176:	b580      	push	{r7, lr}
20005178:	b082      	sub	sp, #8
2000517a:	af00      	add	r7, sp, #0
2000517c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
2000517e:	687b      	ldr	r3, [r7, #4]
20005180:	2b00      	cmp	r3, #0
20005182:	d101      	bne.n	20005188 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
20005184:	2301      	movs	r3, #1
20005186:	e040      	b.n	2000520a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
20005188:	687b      	ldr	r3, [r7, #4]
2000518a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
2000518c:	2b00      	cmp	r3, #0
2000518e:	d106      	bne.n	2000519e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
20005190:	687b      	ldr	r3, [r7, #4]
20005192:	2200      	movs	r2, #0
20005194:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
20005198:	6878      	ldr	r0, [r7, #4]
2000519a:	f7fc fbfd 	bl	20001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
2000519e:	687b      	ldr	r3, [r7, #4]
200051a0:	2224      	movs	r2, #36	@ 0x24
200051a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
200051a4:	687b      	ldr	r3, [r7, #4]
200051a6:	681b      	ldr	r3, [r3, #0]
200051a8:	681a      	ldr	r2, [r3, #0]
200051aa:	687b      	ldr	r3, [r7, #4]
200051ac:	681b      	ldr	r3, [r3, #0]
200051ae:	f022 0201 	bic.w	r2, r2, #1
200051b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
200051b4:	687b      	ldr	r3, [r7, #4]
200051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200051b8:	2b00      	cmp	r3, #0
200051ba:	d002      	beq.n	200051c2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
200051bc:	6878      	ldr	r0, [r7, #4]
200051be:	f000 fa8d 	bl	200056dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
200051c2:	6878      	ldr	r0, [r7, #4]
200051c4:	f000 f826 	bl	20005214 <UART_SetConfig>
200051c8:	4603      	mov	r3, r0
200051ca:	2b01      	cmp	r3, #1
200051cc:	d101      	bne.n	200051d2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
200051ce:	2301      	movs	r3, #1
200051d0:	e01b      	b.n	2000520a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
200051d2:	687b      	ldr	r3, [r7, #4]
200051d4:	681b      	ldr	r3, [r3, #0]
200051d6:	685a      	ldr	r2, [r3, #4]
200051d8:	687b      	ldr	r3, [r7, #4]
200051da:	681b      	ldr	r3, [r3, #0]
200051dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
200051e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
200051e2:	687b      	ldr	r3, [r7, #4]
200051e4:	681b      	ldr	r3, [r3, #0]
200051e6:	689a      	ldr	r2, [r3, #8]
200051e8:	687b      	ldr	r3, [r7, #4]
200051ea:	681b      	ldr	r3, [r3, #0]
200051ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
200051f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
200051f2:	687b      	ldr	r3, [r7, #4]
200051f4:	681b      	ldr	r3, [r3, #0]
200051f6:	681a      	ldr	r2, [r3, #0]
200051f8:	687b      	ldr	r3, [r7, #4]
200051fa:	681b      	ldr	r3, [r3, #0]
200051fc:	f042 0201 	orr.w	r2, r2, #1
20005200:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
20005202:	6878      	ldr	r0, [r7, #4]
20005204:	f000 fb0c 	bl	20005820 <UART_CheckIdleState>
20005208:	4603      	mov	r3, r0
}
2000520a:	4618      	mov	r0, r3
2000520c:	3708      	adds	r7, #8
2000520e:	46bd      	mov	sp, r7
20005210:	bd80      	pop	{r7, pc}
	...

20005214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
20005214:	b580      	push	{r7, lr}
20005216:	b088      	sub	sp, #32
20005218:	af00      	add	r7, sp, #0
2000521a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
2000521c:	2300      	movs	r3, #0
2000521e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
20005220:	687b      	ldr	r3, [r7, #4]
20005222:	689a      	ldr	r2, [r3, #8]
20005224:	687b      	ldr	r3, [r7, #4]
20005226:	691b      	ldr	r3, [r3, #16]
20005228:	431a      	orrs	r2, r3
2000522a:	687b      	ldr	r3, [r7, #4]
2000522c:	695b      	ldr	r3, [r3, #20]
2000522e:	431a      	orrs	r2, r3
20005230:	687b      	ldr	r3, [r7, #4]
20005232:	69db      	ldr	r3, [r3, #28]
20005234:	4313      	orrs	r3, r2
20005236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
20005238:	687b      	ldr	r3, [r7, #4]
2000523a:	681b      	ldr	r3, [r3, #0]
2000523c:	681a      	ldr	r2, [r3, #0]
2000523e:	4ba6      	ldr	r3, [pc, #664]	@ (200054d8 <UART_SetConfig+0x2c4>)
20005240:	4013      	ands	r3, r2
20005242:	687a      	ldr	r2, [r7, #4]
20005244:	6812      	ldr	r2, [r2, #0]
20005246:	6979      	ldr	r1, [r7, #20]
20005248:	430b      	orrs	r3, r1
2000524a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2000524c:	687b      	ldr	r3, [r7, #4]
2000524e:	681b      	ldr	r3, [r3, #0]
20005250:	685b      	ldr	r3, [r3, #4]
20005252:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
20005256:	687b      	ldr	r3, [r7, #4]
20005258:	68da      	ldr	r2, [r3, #12]
2000525a:	687b      	ldr	r3, [r7, #4]
2000525c:	681b      	ldr	r3, [r3, #0]
2000525e:	430a      	orrs	r2, r1
20005260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
20005262:	687b      	ldr	r3, [r7, #4]
20005264:	699b      	ldr	r3, [r3, #24]
20005266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
20005268:	687b      	ldr	r3, [r7, #4]
2000526a:	6a1b      	ldr	r3, [r3, #32]
2000526c:	697a      	ldr	r2, [r7, #20]
2000526e:	4313      	orrs	r3, r2
20005270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
20005272:	687b      	ldr	r3, [r7, #4]
20005274:	681b      	ldr	r3, [r3, #0]
20005276:	689b      	ldr	r3, [r3, #8]
20005278:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
2000527c:	687b      	ldr	r3, [r7, #4]
2000527e:	681b      	ldr	r3, [r3, #0]
20005280:	697a      	ldr	r2, [r7, #20]
20005282:	430a      	orrs	r2, r1
20005284:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
20005286:	687b      	ldr	r3, [r7, #4]
20005288:	681b      	ldr	r3, [r3, #0]
2000528a:	4a94      	ldr	r2, [pc, #592]	@ (200054dc <UART_SetConfig+0x2c8>)
2000528c:	4293      	cmp	r3, r2
2000528e:	d120      	bne.n	200052d2 <UART_SetConfig+0xbe>
20005290:	4b93      	ldr	r3, [pc, #588]	@ (200054e0 <UART_SetConfig+0x2cc>)
20005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20005296:	f003 0303 	and.w	r3, r3, #3
2000529a:	2b03      	cmp	r3, #3
2000529c:	d816      	bhi.n	200052cc <UART_SetConfig+0xb8>
2000529e:	a201      	add	r2, pc, #4	@ (adr r2, 200052a4 <UART_SetConfig+0x90>)
200052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200052a4:	200052b5 	.word	0x200052b5
200052a8:	200052c1 	.word	0x200052c1
200052ac:	200052bb 	.word	0x200052bb
200052b0:	200052c7 	.word	0x200052c7
200052b4:	2301      	movs	r3, #1
200052b6:	77fb      	strb	r3, [r7, #31]
200052b8:	e150      	b.n	2000555c <UART_SetConfig+0x348>
200052ba:	2302      	movs	r3, #2
200052bc:	77fb      	strb	r3, [r7, #31]
200052be:	e14d      	b.n	2000555c <UART_SetConfig+0x348>
200052c0:	2304      	movs	r3, #4
200052c2:	77fb      	strb	r3, [r7, #31]
200052c4:	e14a      	b.n	2000555c <UART_SetConfig+0x348>
200052c6:	2308      	movs	r3, #8
200052c8:	77fb      	strb	r3, [r7, #31]
200052ca:	e147      	b.n	2000555c <UART_SetConfig+0x348>
200052cc:	2310      	movs	r3, #16
200052ce:	77fb      	strb	r3, [r7, #31]
200052d0:	e144      	b.n	2000555c <UART_SetConfig+0x348>
200052d2:	687b      	ldr	r3, [r7, #4]
200052d4:	681b      	ldr	r3, [r3, #0]
200052d6:	4a83      	ldr	r2, [pc, #524]	@ (200054e4 <UART_SetConfig+0x2d0>)
200052d8:	4293      	cmp	r3, r2
200052da:	d132      	bne.n	20005342 <UART_SetConfig+0x12e>
200052dc:	4b80      	ldr	r3, [pc, #512]	@ (200054e0 <UART_SetConfig+0x2cc>)
200052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200052e2:	f003 030c 	and.w	r3, r3, #12
200052e6:	2b0c      	cmp	r3, #12
200052e8:	d828      	bhi.n	2000533c <UART_SetConfig+0x128>
200052ea:	a201      	add	r2, pc, #4	@ (adr r2, 200052f0 <UART_SetConfig+0xdc>)
200052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200052f0:	20005325 	.word	0x20005325
200052f4:	2000533d 	.word	0x2000533d
200052f8:	2000533d 	.word	0x2000533d
200052fc:	2000533d 	.word	0x2000533d
20005300:	20005331 	.word	0x20005331
20005304:	2000533d 	.word	0x2000533d
20005308:	2000533d 	.word	0x2000533d
2000530c:	2000533d 	.word	0x2000533d
20005310:	2000532b 	.word	0x2000532b
20005314:	2000533d 	.word	0x2000533d
20005318:	2000533d 	.word	0x2000533d
2000531c:	2000533d 	.word	0x2000533d
20005320:	20005337 	.word	0x20005337
20005324:	2300      	movs	r3, #0
20005326:	77fb      	strb	r3, [r7, #31]
20005328:	e118      	b.n	2000555c <UART_SetConfig+0x348>
2000532a:	2302      	movs	r3, #2
2000532c:	77fb      	strb	r3, [r7, #31]
2000532e:	e115      	b.n	2000555c <UART_SetConfig+0x348>
20005330:	2304      	movs	r3, #4
20005332:	77fb      	strb	r3, [r7, #31]
20005334:	e112      	b.n	2000555c <UART_SetConfig+0x348>
20005336:	2308      	movs	r3, #8
20005338:	77fb      	strb	r3, [r7, #31]
2000533a:	e10f      	b.n	2000555c <UART_SetConfig+0x348>
2000533c:	2310      	movs	r3, #16
2000533e:	77fb      	strb	r3, [r7, #31]
20005340:	e10c      	b.n	2000555c <UART_SetConfig+0x348>
20005342:	687b      	ldr	r3, [r7, #4]
20005344:	681b      	ldr	r3, [r3, #0]
20005346:	4a68      	ldr	r2, [pc, #416]	@ (200054e8 <UART_SetConfig+0x2d4>)
20005348:	4293      	cmp	r3, r2
2000534a:	d120      	bne.n	2000538e <UART_SetConfig+0x17a>
2000534c:	4b64      	ldr	r3, [pc, #400]	@ (200054e0 <UART_SetConfig+0x2cc>)
2000534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20005352:	f003 0330 	and.w	r3, r3, #48	@ 0x30
20005356:	2b30      	cmp	r3, #48	@ 0x30
20005358:	d013      	beq.n	20005382 <UART_SetConfig+0x16e>
2000535a:	2b30      	cmp	r3, #48	@ 0x30
2000535c:	d814      	bhi.n	20005388 <UART_SetConfig+0x174>
2000535e:	2b20      	cmp	r3, #32
20005360:	d009      	beq.n	20005376 <UART_SetConfig+0x162>
20005362:	2b20      	cmp	r3, #32
20005364:	d810      	bhi.n	20005388 <UART_SetConfig+0x174>
20005366:	2b00      	cmp	r3, #0
20005368:	d002      	beq.n	20005370 <UART_SetConfig+0x15c>
2000536a:	2b10      	cmp	r3, #16
2000536c:	d006      	beq.n	2000537c <UART_SetConfig+0x168>
2000536e:	e00b      	b.n	20005388 <UART_SetConfig+0x174>
20005370:	2300      	movs	r3, #0
20005372:	77fb      	strb	r3, [r7, #31]
20005374:	e0f2      	b.n	2000555c <UART_SetConfig+0x348>
20005376:	2302      	movs	r3, #2
20005378:	77fb      	strb	r3, [r7, #31]
2000537a:	e0ef      	b.n	2000555c <UART_SetConfig+0x348>
2000537c:	2304      	movs	r3, #4
2000537e:	77fb      	strb	r3, [r7, #31]
20005380:	e0ec      	b.n	2000555c <UART_SetConfig+0x348>
20005382:	2308      	movs	r3, #8
20005384:	77fb      	strb	r3, [r7, #31]
20005386:	e0e9      	b.n	2000555c <UART_SetConfig+0x348>
20005388:	2310      	movs	r3, #16
2000538a:	77fb      	strb	r3, [r7, #31]
2000538c:	e0e6      	b.n	2000555c <UART_SetConfig+0x348>
2000538e:	687b      	ldr	r3, [r7, #4]
20005390:	681b      	ldr	r3, [r3, #0]
20005392:	4a56      	ldr	r2, [pc, #344]	@ (200054ec <UART_SetConfig+0x2d8>)
20005394:	4293      	cmp	r3, r2
20005396:	d120      	bne.n	200053da <UART_SetConfig+0x1c6>
20005398:	4b51      	ldr	r3, [pc, #324]	@ (200054e0 <UART_SetConfig+0x2cc>)
2000539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2000539e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
200053a2:	2bc0      	cmp	r3, #192	@ 0xc0
200053a4:	d013      	beq.n	200053ce <UART_SetConfig+0x1ba>
200053a6:	2bc0      	cmp	r3, #192	@ 0xc0
200053a8:	d814      	bhi.n	200053d4 <UART_SetConfig+0x1c0>
200053aa:	2b80      	cmp	r3, #128	@ 0x80
200053ac:	d009      	beq.n	200053c2 <UART_SetConfig+0x1ae>
200053ae:	2b80      	cmp	r3, #128	@ 0x80
200053b0:	d810      	bhi.n	200053d4 <UART_SetConfig+0x1c0>
200053b2:	2b00      	cmp	r3, #0
200053b4:	d002      	beq.n	200053bc <UART_SetConfig+0x1a8>
200053b6:	2b40      	cmp	r3, #64	@ 0x40
200053b8:	d006      	beq.n	200053c8 <UART_SetConfig+0x1b4>
200053ba:	e00b      	b.n	200053d4 <UART_SetConfig+0x1c0>
200053bc:	2300      	movs	r3, #0
200053be:	77fb      	strb	r3, [r7, #31]
200053c0:	e0cc      	b.n	2000555c <UART_SetConfig+0x348>
200053c2:	2302      	movs	r3, #2
200053c4:	77fb      	strb	r3, [r7, #31]
200053c6:	e0c9      	b.n	2000555c <UART_SetConfig+0x348>
200053c8:	2304      	movs	r3, #4
200053ca:	77fb      	strb	r3, [r7, #31]
200053cc:	e0c6      	b.n	2000555c <UART_SetConfig+0x348>
200053ce:	2308      	movs	r3, #8
200053d0:	77fb      	strb	r3, [r7, #31]
200053d2:	e0c3      	b.n	2000555c <UART_SetConfig+0x348>
200053d4:	2310      	movs	r3, #16
200053d6:	77fb      	strb	r3, [r7, #31]
200053d8:	e0c0      	b.n	2000555c <UART_SetConfig+0x348>
200053da:	687b      	ldr	r3, [r7, #4]
200053dc:	681b      	ldr	r3, [r3, #0]
200053de:	4a44      	ldr	r2, [pc, #272]	@ (200054f0 <UART_SetConfig+0x2dc>)
200053e0:	4293      	cmp	r3, r2
200053e2:	d125      	bne.n	20005430 <UART_SetConfig+0x21c>
200053e4:	4b3e      	ldr	r3, [pc, #248]	@ (200054e0 <UART_SetConfig+0x2cc>)
200053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200053ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
200053ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200053f2:	d017      	beq.n	20005424 <UART_SetConfig+0x210>
200053f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
200053f8:	d817      	bhi.n	2000542a <UART_SetConfig+0x216>
200053fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
200053fe:	d00b      	beq.n	20005418 <UART_SetConfig+0x204>
20005400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20005404:	d811      	bhi.n	2000542a <UART_SetConfig+0x216>
20005406:	2b00      	cmp	r3, #0
20005408:	d003      	beq.n	20005412 <UART_SetConfig+0x1fe>
2000540a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2000540e:	d006      	beq.n	2000541e <UART_SetConfig+0x20a>
20005410:	e00b      	b.n	2000542a <UART_SetConfig+0x216>
20005412:	2300      	movs	r3, #0
20005414:	77fb      	strb	r3, [r7, #31]
20005416:	e0a1      	b.n	2000555c <UART_SetConfig+0x348>
20005418:	2302      	movs	r3, #2
2000541a:	77fb      	strb	r3, [r7, #31]
2000541c:	e09e      	b.n	2000555c <UART_SetConfig+0x348>
2000541e:	2304      	movs	r3, #4
20005420:	77fb      	strb	r3, [r7, #31]
20005422:	e09b      	b.n	2000555c <UART_SetConfig+0x348>
20005424:	2308      	movs	r3, #8
20005426:	77fb      	strb	r3, [r7, #31]
20005428:	e098      	b.n	2000555c <UART_SetConfig+0x348>
2000542a:	2310      	movs	r3, #16
2000542c:	77fb      	strb	r3, [r7, #31]
2000542e:	e095      	b.n	2000555c <UART_SetConfig+0x348>
20005430:	687b      	ldr	r3, [r7, #4]
20005432:	681b      	ldr	r3, [r3, #0]
20005434:	4a2f      	ldr	r2, [pc, #188]	@ (200054f4 <UART_SetConfig+0x2e0>)
20005436:	4293      	cmp	r3, r2
20005438:	d125      	bne.n	20005486 <UART_SetConfig+0x272>
2000543a:	4b29      	ldr	r3, [pc, #164]	@ (200054e0 <UART_SetConfig+0x2cc>)
2000543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20005440:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
20005444:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20005448:	d017      	beq.n	2000547a <UART_SetConfig+0x266>
2000544a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
2000544e:	d817      	bhi.n	20005480 <UART_SetConfig+0x26c>
20005450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20005454:	d00b      	beq.n	2000546e <UART_SetConfig+0x25a>
20005456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2000545a:	d811      	bhi.n	20005480 <UART_SetConfig+0x26c>
2000545c:	2b00      	cmp	r3, #0
2000545e:	d003      	beq.n	20005468 <UART_SetConfig+0x254>
20005460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20005464:	d006      	beq.n	20005474 <UART_SetConfig+0x260>
20005466:	e00b      	b.n	20005480 <UART_SetConfig+0x26c>
20005468:	2301      	movs	r3, #1
2000546a:	77fb      	strb	r3, [r7, #31]
2000546c:	e076      	b.n	2000555c <UART_SetConfig+0x348>
2000546e:	2302      	movs	r3, #2
20005470:	77fb      	strb	r3, [r7, #31]
20005472:	e073      	b.n	2000555c <UART_SetConfig+0x348>
20005474:	2304      	movs	r3, #4
20005476:	77fb      	strb	r3, [r7, #31]
20005478:	e070      	b.n	2000555c <UART_SetConfig+0x348>
2000547a:	2308      	movs	r3, #8
2000547c:	77fb      	strb	r3, [r7, #31]
2000547e:	e06d      	b.n	2000555c <UART_SetConfig+0x348>
20005480:	2310      	movs	r3, #16
20005482:	77fb      	strb	r3, [r7, #31]
20005484:	e06a      	b.n	2000555c <UART_SetConfig+0x348>
20005486:	687b      	ldr	r3, [r7, #4]
20005488:	681b      	ldr	r3, [r3, #0]
2000548a:	4a1b      	ldr	r2, [pc, #108]	@ (200054f8 <UART_SetConfig+0x2e4>)
2000548c:	4293      	cmp	r3, r2
2000548e:	d138      	bne.n	20005502 <UART_SetConfig+0x2ee>
20005490:	4b13      	ldr	r3, [pc, #76]	@ (200054e0 <UART_SetConfig+0x2cc>)
20005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20005496:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
2000549a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
2000549e:	d017      	beq.n	200054d0 <UART_SetConfig+0x2bc>
200054a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
200054a4:	d82a      	bhi.n	200054fc <UART_SetConfig+0x2e8>
200054a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
200054aa:	d00b      	beq.n	200054c4 <UART_SetConfig+0x2b0>
200054ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
200054b0:	d824      	bhi.n	200054fc <UART_SetConfig+0x2e8>
200054b2:	2b00      	cmp	r3, #0
200054b4:	d003      	beq.n	200054be <UART_SetConfig+0x2aa>
200054b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
200054ba:	d006      	beq.n	200054ca <UART_SetConfig+0x2b6>
200054bc:	e01e      	b.n	200054fc <UART_SetConfig+0x2e8>
200054be:	2300      	movs	r3, #0
200054c0:	77fb      	strb	r3, [r7, #31]
200054c2:	e04b      	b.n	2000555c <UART_SetConfig+0x348>
200054c4:	2302      	movs	r3, #2
200054c6:	77fb      	strb	r3, [r7, #31]
200054c8:	e048      	b.n	2000555c <UART_SetConfig+0x348>
200054ca:	2304      	movs	r3, #4
200054cc:	77fb      	strb	r3, [r7, #31]
200054ce:	e045      	b.n	2000555c <UART_SetConfig+0x348>
200054d0:	2308      	movs	r3, #8
200054d2:	77fb      	strb	r3, [r7, #31]
200054d4:	e042      	b.n	2000555c <UART_SetConfig+0x348>
200054d6:	bf00      	nop
200054d8:	efff69f3 	.word	0xefff69f3
200054dc:	40011000 	.word	0x40011000
200054e0:	40023800 	.word	0x40023800
200054e4:	40004400 	.word	0x40004400
200054e8:	40004800 	.word	0x40004800
200054ec:	40004c00 	.word	0x40004c00
200054f0:	40005000 	.word	0x40005000
200054f4:	40011400 	.word	0x40011400
200054f8:	40007800 	.word	0x40007800
200054fc:	2310      	movs	r3, #16
200054fe:	77fb      	strb	r3, [r7, #31]
20005500:	e02c      	b.n	2000555c <UART_SetConfig+0x348>
20005502:	687b      	ldr	r3, [r7, #4]
20005504:	681b      	ldr	r3, [r3, #0]
20005506:	4a72      	ldr	r2, [pc, #456]	@ (200056d0 <UART_SetConfig+0x4bc>)
20005508:	4293      	cmp	r3, r2
2000550a:	d125      	bne.n	20005558 <UART_SetConfig+0x344>
2000550c:	4b71      	ldr	r3, [pc, #452]	@ (200056d4 <UART_SetConfig+0x4c0>)
2000550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
20005512:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20005516:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
2000551a:	d017      	beq.n	2000554c <UART_SetConfig+0x338>
2000551c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20005520:	d817      	bhi.n	20005552 <UART_SetConfig+0x33e>
20005522:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20005526:	d00b      	beq.n	20005540 <UART_SetConfig+0x32c>
20005528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000552c:	d811      	bhi.n	20005552 <UART_SetConfig+0x33e>
2000552e:	2b00      	cmp	r3, #0
20005530:	d003      	beq.n	2000553a <UART_SetConfig+0x326>
20005532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20005536:	d006      	beq.n	20005546 <UART_SetConfig+0x332>
20005538:	e00b      	b.n	20005552 <UART_SetConfig+0x33e>
2000553a:	2300      	movs	r3, #0
2000553c:	77fb      	strb	r3, [r7, #31]
2000553e:	e00d      	b.n	2000555c <UART_SetConfig+0x348>
20005540:	2302      	movs	r3, #2
20005542:	77fb      	strb	r3, [r7, #31]
20005544:	e00a      	b.n	2000555c <UART_SetConfig+0x348>
20005546:	2304      	movs	r3, #4
20005548:	77fb      	strb	r3, [r7, #31]
2000554a:	e007      	b.n	2000555c <UART_SetConfig+0x348>
2000554c:	2308      	movs	r3, #8
2000554e:	77fb      	strb	r3, [r7, #31]
20005550:	e004      	b.n	2000555c <UART_SetConfig+0x348>
20005552:	2310      	movs	r3, #16
20005554:	77fb      	strb	r3, [r7, #31]
20005556:	e001      	b.n	2000555c <UART_SetConfig+0x348>
20005558:	2310      	movs	r3, #16
2000555a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2000555c:	687b      	ldr	r3, [r7, #4]
2000555e:	69db      	ldr	r3, [r3, #28]
20005560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20005564:	d15b      	bne.n	2000561e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
20005566:	7ffb      	ldrb	r3, [r7, #31]
20005568:	2b08      	cmp	r3, #8
2000556a:	d828      	bhi.n	200055be <UART_SetConfig+0x3aa>
2000556c:	a201      	add	r2, pc, #4	@ (adr r2, 20005574 <UART_SetConfig+0x360>)
2000556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005572:	bf00      	nop
20005574:	20005599 	.word	0x20005599
20005578:	200055a1 	.word	0x200055a1
2000557c:	200055a9 	.word	0x200055a9
20005580:	200055bf 	.word	0x200055bf
20005584:	200055af 	.word	0x200055af
20005588:	200055bf 	.word	0x200055bf
2000558c:	200055bf 	.word	0x200055bf
20005590:	200055bf 	.word	0x200055bf
20005594:	200055b7 	.word	0x200055b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20005598:	f7ff f92a 	bl	200047f0 <HAL_RCC_GetPCLK1Freq>
2000559c:	61b8      	str	r0, [r7, #24]
        break;
2000559e:	e013      	b.n	200055c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
200055a0:	f7ff f93a 	bl	20004818 <HAL_RCC_GetPCLK2Freq>
200055a4:	61b8      	str	r0, [r7, #24]
        break;
200055a6:	e00f      	b.n	200055c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
200055a8:	4b4b      	ldr	r3, [pc, #300]	@ (200056d8 <UART_SetConfig+0x4c4>)
200055aa:	61bb      	str	r3, [r7, #24]
        break;
200055ac:	e00c      	b.n	200055c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
200055ae:	f7ff f80d 	bl	200045cc <HAL_RCC_GetSysClockFreq>
200055b2:	61b8      	str	r0, [r7, #24]
        break;
200055b4:	e008      	b.n	200055c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
200055b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
200055ba:	61bb      	str	r3, [r7, #24]
        break;
200055bc:	e004      	b.n	200055c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
200055be:	2300      	movs	r3, #0
200055c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
200055c2:	2301      	movs	r3, #1
200055c4:	77bb      	strb	r3, [r7, #30]
        break;
200055c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
200055c8:	69bb      	ldr	r3, [r7, #24]
200055ca:	2b00      	cmp	r3, #0
200055cc:	d074      	beq.n	200056b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
200055ce:	69bb      	ldr	r3, [r7, #24]
200055d0:	005a      	lsls	r2, r3, #1
200055d2:	687b      	ldr	r3, [r7, #4]
200055d4:	685b      	ldr	r3, [r3, #4]
200055d6:	085b      	lsrs	r3, r3, #1
200055d8:	441a      	add	r2, r3
200055da:	687b      	ldr	r3, [r7, #4]
200055dc:	685b      	ldr	r3, [r3, #4]
200055de:	fbb2 f3f3 	udiv	r3, r2, r3
200055e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
200055e4:	693b      	ldr	r3, [r7, #16]
200055e6:	2b0f      	cmp	r3, #15
200055e8:	d916      	bls.n	20005618 <UART_SetConfig+0x404>
200055ea:	693b      	ldr	r3, [r7, #16]
200055ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200055f0:	d212      	bcs.n	20005618 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
200055f2:	693b      	ldr	r3, [r7, #16]
200055f4:	b29b      	uxth	r3, r3
200055f6:	f023 030f 	bic.w	r3, r3, #15
200055fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
200055fc:	693b      	ldr	r3, [r7, #16]
200055fe:	085b      	lsrs	r3, r3, #1
20005600:	b29b      	uxth	r3, r3
20005602:	f003 0307 	and.w	r3, r3, #7
20005606:	b29a      	uxth	r2, r3
20005608:	89fb      	ldrh	r3, [r7, #14]
2000560a:	4313      	orrs	r3, r2
2000560c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
2000560e:	687b      	ldr	r3, [r7, #4]
20005610:	681b      	ldr	r3, [r3, #0]
20005612:	89fa      	ldrh	r2, [r7, #14]
20005614:	60da      	str	r2, [r3, #12]
20005616:	e04f      	b.n	200056b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
20005618:	2301      	movs	r3, #1
2000561a:	77bb      	strb	r3, [r7, #30]
2000561c:	e04c      	b.n	200056b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
2000561e:	7ffb      	ldrb	r3, [r7, #31]
20005620:	2b08      	cmp	r3, #8
20005622:	d828      	bhi.n	20005676 <UART_SetConfig+0x462>
20005624:	a201      	add	r2, pc, #4	@ (adr r2, 2000562c <UART_SetConfig+0x418>)
20005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000562a:	bf00      	nop
2000562c:	20005651 	.word	0x20005651
20005630:	20005659 	.word	0x20005659
20005634:	20005661 	.word	0x20005661
20005638:	20005677 	.word	0x20005677
2000563c:	20005667 	.word	0x20005667
20005640:	20005677 	.word	0x20005677
20005644:	20005677 	.word	0x20005677
20005648:	20005677 	.word	0x20005677
2000564c:	2000566f 	.word	0x2000566f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
20005650:	f7ff f8ce 	bl	200047f0 <HAL_RCC_GetPCLK1Freq>
20005654:	61b8      	str	r0, [r7, #24]
        break;
20005656:	e013      	b.n	20005680 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
20005658:	f7ff f8de 	bl	20004818 <HAL_RCC_GetPCLK2Freq>
2000565c:	61b8      	str	r0, [r7, #24]
        break;
2000565e:	e00f      	b.n	20005680 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
20005660:	4b1d      	ldr	r3, [pc, #116]	@ (200056d8 <UART_SetConfig+0x4c4>)
20005662:	61bb      	str	r3, [r7, #24]
        break;
20005664:	e00c      	b.n	20005680 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
20005666:	f7fe ffb1 	bl	200045cc <HAL_RCC_GetSysClockFreq>
2000566a:	61b8      	str	r0, [r7, #24]
        break;
2000566c:	e008      	b.n	20005680 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
2000566e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20005672:	61bb      	str	r3, [r7, #24]
        break;
20005674:	e004      	b.n	20005680 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
20005676:	2300      	movs	r3, #0
20005678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
2000567a:	2301      	movs	r3, #1
2000567c:	77bb      	strb	r3, [r7, #30]
        break;
2000567e:	bf00      	nop
    }

    if (pclk != 0U)
20005680:	69bb      	ldr	r3, [r7, #24]
20005682:	2b00      	cmp	r3, #0
20005684:	d018      	beq.n	200056b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
20005686:	687b      	ldr	r3, [r7, #4]
20005688:	685b      	ldr	r3, [r3, #4]
2000568a:	085a      	lsrs	r2, r3, #1
2000568c:	69bb      	ldr	r3, [r7, #24]
2000568e:	441a      	add	r2, r3
20005690:	687b      	ldr	r3, [r7, #4]
20005692:	685b      	ldr	r3, [r3, #4]
20005694:	fbb2 f3f3 	udiv	r3, r2, r3
20005698:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
2000569a:	693b      	ldr	r3, [r7, #16]
2000569c:	2b0f      	cmp	r3, #15
2000569e:	d909      	bls.n	200056b4 <UART_SetConfig+0x4a0>
200056a0:	693b      	ldr	r3, [r7, #16]
200056a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200056a6:	d205      	bcs.n	200056b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
200056a8:	693b      	ldr	r3, [r7, #16]
200056aa:	b29a      	uxth	r2, r3
200056ac:	687b      	ldr	r3, [r7, #4]
200056ae:	681b      	ldr	r3, [r3, #0]
200056b0:	60da      	str	r2, [r3, #12]
200056b2:	e001      	b.n	200056b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
200056b4:	2301      	movs	r3, #1
200056b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
200056b8:	687b      	ldr	r3, [r7, #4]
200056ba:	2200      	movs	r2, #0
200056bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
200056be:	687b      	ldr	r3, [r7, #4]
200056c0:	2200      	movs	r2, #0
200056c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
200056c4:	7fbb      	ldrb	r3, [r7, #30]
}
200056c6:	4618      	mov	r0, r3
200056c8:	3720      	adds	r7, #32
200056ca:	46bd      	mov	sp, r7
200056cc:	bd80      	pop	{r7, pc}
200056ce:	bf00      	nop
200056d0:	40007c00 	.word	0x40007c00
200056d4:	40023800 	.word	0x40023800
200056d8:	00f42400 	.word	0x00f42400

200056dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
200056dc:	b480      	push	{r7}
200056de:	b083      	sub	sp, #12
200056e0:	af00      	add	r7, sp, #0
200056e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
200056e4:	687b      	ldr	r3, [r7, #4]
200056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200056e8:	f003 0308 	and.w	r3, r3, #8
200056ec:	2b00      	cmp	r3, #0
200056ee:	d00a      	beq.n	20005706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
200056f0:	687b      	ldr	r3, [r7, #4]
200056f2:	681b      	ldr	r3, [r3, #0]
200056f4:	685b      	ldr	r3, [r3, #4]
200056f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
200056fa:	687b      	ldr	r3, [r7, #4]
200056fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
200056fe:	687b      	ldr	r3, [r7, #4]
20005700:	681b      	ldr	r3, [r3, #0]
20005702:	430a      	orrs	r2, r1
20005704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
20005706:	687b      	ldr	r3, [r7, #4]
20005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000570a:	f003 0301 	and.w	r3, r3, #1
2000570e:	2b00      	cmp	r3, #0
20005710:	d00a      	beq.n	20005728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
20005712:	687b      	ldr	r3, [r7, #4]
20005714:	681b      	ldr	r3, [r3, #0]
20005716:	685b      	ldr	r3, [r3, #4]
20005718:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
2000571c:	687b      	ldr	r3, [r7, #4]
2000571e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20005720:	687b      	ldr	r3, [r7, #4]
20005722:	681b      	ldr	r3, [r3, #0]
20005724:	430a      	orrs	r2, r1
20005726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
20005728:	687b      	ldr	r3, [r7, #4]
2000572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000572c:	f003 0302 	and.w	r3, r3, #2
20005730:	2b00      	cmp	r3, #0
20005732:	d00a      	beq.n	2000574a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
20005734:	687b      	ldr	r3, [r7, #4]
20005736:	681b      	ldr	r3, [r3, #0]
20005738:	685b      	ldr	r3, [r3, #4]
2000573a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
2000573e:	687b      	ldr	r3, [r7, #4]
20005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20005742:	687b      	ldr	r3, [r7, #4]
20005744:	681b      	ldr	r3, [r3, #0]
20005746:	430a      	orrs	r2, r1
20005748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
2000574a:	687b      	ldr	r3, [r7, #4]
2000574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000574e:	f003 0304 	and.w	r3, r3, #4
20005752:	2b00      	cmp	r3, #0
20005754:	d00a      	beq.n	2000576c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
20005756:	687b      	ldr	r3, [r7, #4]
20005758:	681b      	ldr	r3, [r3, #0]
2000575a:	685b      	ldr	r3, [r3, #4]
2000575c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
20005760:	687b      	ldr	r3, [r7, #4]
20005762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20005764:	687b      	ldr	r3, [r7, #4]
20005766:	681b      	ldr	r3, [r3, #0]
20005768:	430a      	orrs	r2, r1
2000576a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
2000576c:	687b      	ldr	r3, [r7, #4]
2000576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20005770:	f003 0310 	and.w	r3, r3, #16
20005774:	2b00      	cmp	r3, #0
20005776:	d00a      	beq.n	2000578e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
20005778:	687b      	ldr	r3, [r7, #4]
2000577a:	681b      	ldr	r3, [r3, #0]
2000577c:	689b      	ldr	r3, [r3, #8]
2000577e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
20005782:	687b      	ldr	r3, [r7, #4]
20005784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
20005786:	687b      	ldr	r3, [r7, #4]
20005788:	681b      	ldr	r3, [r3, #0]
2000578a:	430a      	orrs	r2, r1
2000578c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
2000578e:	687b      	ldr	r3, [r7, #4]
20005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20005792:	f003 0320 	and.w	r3, r3, #32
20005796:	2b00      	cmp	r3, #0
20005798:	d00a      	beq.n	200057b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
2000579a:	687b      	ldr	r3, [r7, #4]
2000579c:	681b      	ldr	r3, [r3, #0]
2000579e:	689b      	ldr	r3, [r3, #8]
200057a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
200057a4:	687b      	ldr	r3, [r7, #4]
200057a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
200057a8:	687b      	ldr	r3, [r7, #4]
200057aa:	681b      	ldr	r3, [r3, #0]
200057ac:	430a      	orrs	r2, r1
200057ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
200057b0:	687b      	ldr	r3, [r7, #4]
200057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200057b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200057b8:	2b00      	cmp	r3, #0
200057ba:	d01a      	beq.n	200057f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
200057bc:	687b      	ldr	r3, [r7, #4]
200057be:	681b      	ldr	r3, [r3, #0]
200057c0:	685b      	ldr	r3, [r3, #4]
200057c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
200057c6:	687b      	ldr	r3, [r7, #4]
200057c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
200057ca:	687b      	ldr	r3, [r7, #4]
200057cc:	681b      	ldr	r3, [r3, #0]
200057ce:	430a      	orrs	r2, r1
200057d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
200057d2:	687b      	ldr	r3, [r7, #4]
200057d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200057d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
200057da:	d10a      	bne.n	200057f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
200057dc:	687b      	ldr	r3, [r7, #4]
200057de:	681b      	ldr	r3, [r3, #0]
200057e0:	685b      	ldr	r3, [r3, #4]
200057e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
200057e6:	687b      	ldr	r3, [r7, #4]
200057e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
200057ea:	687b      	ldr	r3, [r7, #4]
200057ec:	681b      	ldr	r3, [r3, #0]
200057ee:	430a      	orrs	r2, r1
200057f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
200057f2:	687b      	ldr	r3, [r7, #4]
200057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200057fa:	2b00      	cmp	r3, #0
200057fc:	d00a      	beq.n	20005814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
200057fe:	687b      	ldr	r3, [r7, #4]
20005800:	681b      	ldr	r3, [r3, #0]
20005802:	685b      	ldr	r3, [r3, #4]
20005804:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
20005808:	687b      	ldr	r3, [r7, #4]
2000580a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
2000580c:	687b      	ldr	r3, [r7, #4]
2000580e:	681b      	ldr	r3, [r3, #0]
20005810:	430a      	orrs	r2, r1
20005812:	605a      	str	r2, [r3, #4]
  }
}
20005814:	bf00      	nop
20005816:	370c      	adds	r7, #12
20005818:	46bd      	mov	sp, r7
2000581a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000581e:	4770      	bx	lr

20005820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
20005820:	b580      	push	{r7, lr}
20005822:	b08c      	sub	sp, #48	@ 0x30
20005824:	af02      	add	r7, sp, #8
20005826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20005828:	687b      	ldr	r3, [r7, #4]
2000582a:	2200      	movs	r2, #0
2000582c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
20005830:	f7fc fa14 	bl	20001c5c <HAL_GetTick>
20005834:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
20005836:	687b      	ldr	r3, [r7, #4]
20005838:	681b      	ldr	r3, [r3, #0]
2000583a:	681b      	ldr	r3, [r3, #0]
2000583c:	f003 0308 	and.w	r3, r3, #8
20005840:	2b08      	cmp	r3, #8
20005842:	d12e      	bne.n	200058a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
20005844:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
20005848:	9300      	str	r3, [sp, #0]
2000584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000584c:	2200      	movs	r2, #0
2000584e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
20005852:	6878      	ldr	r0, [r7, #4]
20005854:	f000 f83b 	bl	200058ce <UART_WaitOnFlagUntilTimeout>
20005858:	4603      	mov	r3, r0
2000585a:	2b00      	cmp	r3, #0
2000585c:	d021      	beq.n	200058a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
2000585e:	687b      	ldr	r3, [r7, #4]
20005860:	681b      	ldr	r3, [r3, #0]
20005862:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20005864:	693b      	ldr	r3, [r7, #16]
20005866:	e853 3f00 	ldrex	r3, [r3]
2000586a:	60fb      	str	r3, [r7, #12]
   return(result);
2000586c:	68fb      	ldr	r3, [r7, #12]
2000586e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
20005872:	623b      	str	r3, [r7, #32]
20005874:	687b      	ldr	r3, [r7, #4]
20005876:	681b      	ldr	r3, [r3, #0]
20005878:	461a      	mov	r2, r3
2000587a:	6a3b      	ldr	r3, [r7, #32]
2000587c:	61fb      	str	r3, [r7, #28]
2000587e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20005880:	69b9      	ldr	r1, [r7, #24]
20005882:	69fa      	ldr	r2, [r7, #28]
20005884:	e841 2300 	strex	r3, r2, [r1]
20005888:	617b      	str	r3, [r7, #20]
   return(result);
2000588a:	697b      	ldr	r3, [r7, #20]
2000588c:	2b00      	cmp	r3, #0
2000588e:	d1e6      	bne.n	2000585e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
20005890:	687b      	ldr	r3, [r7, #4]
20005892:	2220      	movs	r2, #32
20005894:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
20005896:	687b      	ldr	r3, [r7, #4]
20005898:	2200      	movs	r2, #0
2000589a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
2000589e:	2303      	movs	r3, #3
200058a0:	e011      	b.n	200058c6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
200058a2:	687b      	ldr	r3, [r7, #4]
200058a4:	2220      	movs	r2, #32
200058a6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
200058a8:	687b      	ldr	r3, [r7, #4]
200058aa:	2220      	movs	r2, #32
200058ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
200058b0:	687b      	ldr	r3, [r7, #4]
200058b2:	2200      	movs	r2, #0
200058b4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
200058b6:	687b      	ldr	r3, [r7, #4]
200058b8:	2200      	movs	r2, #0
200058ba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
200058bc:	687b      	ldr	r3, [r7, #4]
200058be:	2200      	movs	r2, #0
200058c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
200058c4:	2300      	movs	r3, #0
}
200058c6:	4618      	mov	r0, r3
200058c8:	3728      	adds	r7, #40	@ 0x28
200058ca:	46bd      	mov	sp, r7
200058cc:	bd80      	pop	{r7, pc}

200058ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
200058ce:	b580      	push	{r7, lr}
200058d0:	b084      	sub	sp, #16
200058d2:	af00      	add	r7, sp, #0
200058d4:	60f8      	str	r0, [r7, #12]
200058d6:	60b9      	str	r1, [r7, #8]
200058d8:	603b      	str	r3, [r7, #0]
200058da:	4613      	mov	r3, r2
200058dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
200058de:	e04f      	b.n	20005980 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
200058e0:	69bb      	ldr	r3, [r7, #24]
200058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
200058e6:	d04b      	beq.n	20005980 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200058e8:	f7fc f9b8 	bl	20001c5c <HAL_GetTick>
200058ec:	4602      	mov	r2, r0
200058ee:	683b      	ldr	r3, [r7, #0]
200058f0:	1ad3      	subs	r3, r2, r3
200058f2:	69ba      	ldr	r2, [r7, #24]
200058f4:	429a      	cmp	r2, r3
200058f6:	d302      	bcc.n	200058fe <UART_WaitOnFlagUntilTimeout+0x30>
200058f8:	69bb      	ldr	r3, [r7, #24]
200058fa:	2b00      	cmp	r3, #0
200058fc:	d101      	bne.n	20005902 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
200058fe:	2303      	movs	r3, #3
20005900:	e04e      	b.n	200059a0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
20005902:	68fb      	ldr	r3, [r7, #12]
20005904:	681b      	ldr	r3, [r3, #0]
20005906:	681b      	ldr	r3, [r3, #0]
20005908:	f003 0304 	and.w	r3, r3, #4
2000590c:	2b00      	cmp	r3, #0
2000590e:	d037      	beq.n	20005980 <UART_WaitOnFlagUntilTimeout+0xb2>
20005910:	68bb      	ldr	r3, [r7, #8]
20005912:	2b80      	cmp	r3, #128	@ 0x80
20005914:	d034      	beq.n	20005980 <UART_WaitOnFlagUntilTimeout+0xb2>
20005916:	68bb      	ldr	r3, [r7, #8]
20005918:	2b40      	cmp	r3, #64	@ 0x40
2000591a:	d031      	beq.n	20005980 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
2000591c:	68fb      	ldr	r3, [r7, #12]
2000591e:	681b      	ldr	r3, [r3, #0]
20005920:	69db      	ldr	r3, [r3, #28]
20005922:	f003 0308 	and.w	r3, r3, #8
20005926:	2b08      	cmp	r3, #8
20005928:	d110      	bne.n	2000594c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
2000592a:	68fb      	ldr	r3, [r7, #12]
2000592c:	681b      	ldr	r3, [r3, #0]
2000592e:	2208      	movs	r2, #8
20005930:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
20005932:	68f8      	ldr	r0, [r7, #12]
20005934:	f000 f838 	bl	200059a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
20005938:	68fb      	ldr	r3, [r7, #12]
2000593a:	2208      	movs	r2, #8
2000593c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20005940:	68fb      	ldr	r3, [r7, #12]
20005942:	2200      	movs	r2, #0
20005944:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
20005948:	2301      	movs	r3, #1
2000594a:	e029      	b.n	200059a0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
2000594c:	68fb      	ldr	r3, [r7, #12]
2000594e:	681b      	ldr	r3, [r3, #0]
20005950:	69db      	ldr	r3, [r3, #28]
20005952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20005956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2000595a:	d111      	bne.n	20005980 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
2000595c:	68fb      	ldr	r3, [r7, #12]
2000595e:	681b      	ldr	r3, [r3, #0]
20005960:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20005964:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
20005966:	68f8      	ldr	r0, [r7, #12]
20005968:	f000 f81e 	bl	200059a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
2000596c:	68fb      	ldr	r3, [r7, #12]
2000596e:	2220      	movs	r2, #32
20005970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
20005974:	68fb      	ldr	r3, [r7, #12]
20005976:	2200      	movs	r2, #0
20005978:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
2000597c:	2303      	movs	r3, #3
2000597e:	e00f      	b.n	200059a0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
20005980:	68fb      	ldr	r3, [r7, #12]
20005982:	681b      	ldr	r3, [r3, #0]
20005984:	69da      	ldr	r2, [r3, #28]
20005986:	68bb      	ldr	r3, [r7, #8]
20005988:	4013      	ands	r3, r2
2000598a:	68ba      	ldr	r2, [r7, #8]
2000598c:	429a      	cmp	r2, r3
2000598e:	bf0c      	ite	eq
20005990:	2301      	moveq	r3, #1
20005992:	2300      	movne	r3, #0
20005994:	b2db      	uxtb	r3, r3
20005996:	461a      	mov	r2, r3
20005998:	79fb      	ldrb	r3, [r7, #7]
2000599a:	429a      	cmp	r2, r3
2000599c:	d0a0      	beq.n	200058e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
2000599e:	2300      	movs	r3, #0
}
200059a0:	4618      	mov	r0, r3
200059a2:	3710      	adds	r7, #16
200059a4:	46bd      	mov	sp, r7
200059a6:	bd80      	pop	{r7, pc}

200059a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
200059a8:	b480      	push	{r7}
200059aa:	b095      	sub	sp, #84	@ 0x54
200059ac:	af00      	add	r7, sp, #0
200059ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
200059b0:	687b      	ldr	r3, [r7, #4]
200059b2:	681b      	ldr	r3, [r3, #0]
200059b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200059b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200059b8:	e853 3f00 	ldrex	r3, [r3]
200059bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
200059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200059c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
200059c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
200059c6:	687b      	ldr	r3, [r7, #4]
200059c8:	681b      	ldr	r3, [r3, #0]
200059ca:	461a      	mov	r2, r3
200059cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200059ce:	643b      	str	r3, [r7, #64]	@ 0x40
200059d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200059d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
200059d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
200059d6:	e841 2300 	strex	r3, r2, [r1]
200059da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
200059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200059de:	2b00      	cmp	r3, #0
200059e0:	d1e6      	bne.n	200059b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
200059e2:	687b      	ldr	r3, [r7, #4]
200059e4:	681b      	ldr	r3, [r3, #0]
200059e6:	3308      	adds	r3, #8
200059e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
200059ea:	6a3b      	ldr	r3, [r7, #32]
200059ec:	e853 3f00 	ldrex	r3, [r3]
200059f0:	61fb      	str	r3, [r7, #28]
   return(result);
200059f2:	69fb      	ldr	r3, [r7, #28]
200059f4:	f023 0301 	bic.w	r3, r3, #1
200059f8:	64bb      	str	r3, [r7, #72]	@ 0x48
200059fa:	687b      	ldr	r3, [r7, #4]
200059fc:	681b      	ldr	r3, [r3, #0]
200059fe:	3308      	adds	r3, #8
20005a00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
20005a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
20005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20005a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
20005a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20005a0a:	e841 2300 	strex	r3, r2, [r1]
20005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
20005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20005a12:	2b00      	cmp	r3, #0
20005a14:	d1e5      	bne.n	200059e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
20005a16:	687b      	ldr	r3, [r7, #4]
20005a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20005a1a:	2b01      	cmp	r3, #1
20005a1c:	d118      	bne.n	20005a50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
20005a1e:	687b      	ldr	r3, [r7, #4]
20005a20:	681b      	ldr	r3, [r3, #0]
20005a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20005a24:	68fb      	ldr	r3, [r7, #12]
20005a26:	e853 3f00 	ldrex	r3, [r3]
20005a2a:	60bb      	str	r3, [r7, #8]
   return(result);
20005a2c:	68bb      	ldr	r3, [r7, #8]
20005a2e:	f023 0310 	bic.w	r3, r3, #16
20005a32:	647b      	str	r3, [r7, #68]	@ 0x44
20005a34:	687b      	ldr	r3, [r7, #4]
20005a36:	681b      	ldr	r3, [r3, #0]
20005a38:	461a      	mov	r2, r3
20005a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20005a3c:	61bb      	str	r3, [r7, #24]
20005a3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20005a40:	6979      	ldr	r1, [r7, #20]
20005a42:	69ba      	ldr	r2, [r7, #24]
20005a44:	e841 2300 	strex	r3, r2, [r1]
20005a48:	613b      	str	r3, [r7, #16]
   return(result);
20005a4a:	693b      	ldr	r3, [r7, #16]
20005a4c:	2b00      	cmp	r3, #0
20005a4e:	d1e6      	bne.n	20005a1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
20005a50:	687b      	ldr	r3, [r7, #4]
20005a52:	2220      	movs	r2, #32
20005a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
20005a58:	687b      	ldr	r3, [r7, #4]
20005a5a:	2200      	movs	r2, #0
20005a5c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
20005a5e:	687b      	ldr	r3, [r7, #4]
20005a60:	2200      	movs	r2, #0
20005a62:	669a      	str	r2, [r3, #104]	@ 0x68
}
20005a64:	bf00      	nop
20005a66:	3754      	adds	r7, #84	@ 0x54
20005a68:	46bd      	mov	sp, r7
20005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a6e:	4770      	bx	lr

20005a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
20005a70:	b084      	sub	sp, #16
20005a72:	b580      	push	{r7, lr}
20005a74:	b084      	sub	sp, #16
20005a76:	af00      	add	r7, sp, #0
20005a78:	6078      	str	r0, [r7, #4]
20005a7a:	f107 001c 	add.w	r0, r7, #28
20005a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
20005a82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
20005a86:	2b01      	cmp	r3, #1
20005a88:	d121      	bne.n	20005ace <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
20005a8a:	687b      	ldr	r3, [r7, #4]
20005a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20005a8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
20005a92:	687b      	ldr	r3, [r7, #4]
20005a94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
20005a96:	687b      	ldr	r3, [r7, #4]
20005a98:	68da      	ldr	r2, [r3, #12]
20005a9a:	4b21      	ldr	r3, [pc, #132]	@ (20005b20 <USB_CoreInit+0xb0>)
20005a9c:	4013      	ands	r3, r2
20005a9e:	687a      	ldr	r2, [r7, #4]
20005aa0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
20005aa2:	687b      	ldr	r3, [r7, #4]
20005aa4:	68db      	ldr	r3, [r3, #12]
20005aa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
20005aaa:	687b      	ldr	r3, [r7, #4]
20005aac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
20005aae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
20005ab2:	2b01      	cmp	r3, #1
20005ab4:	d105      	bne.n	20005ac2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
20005ab6:	687b      	ldr	r3, [r7, #4]
20005ab8:	68db      	ldr	r3, [r3, #12]
20005aba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
20005abe:	687b      	ldr	r3, [r7, #4]
20005ac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
20005ac2:	6878      	ldr	r0, [r7, #4]
20005ac4:	f001 fae2 	bl	2000708c <USB_CoreReset>
20005ac8:	4603      	mov	r3, r0
20005aca:	73fb      	strb	r3, [r7, #15]
20005acc:	e010      	b.n	20005af0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
20005ace:	687b      	ldr	r3, [r7, #4]
20005ad0:	68db      	ldr	r3, [r3, #12]
20005ad2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20005ad6:	687b      	ldr	r3, [r7, #4]
20005ad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
20005ada:	6878      	ldr	r0, [r7, #4]
20005adc:	f001 fad6 	bl	2000708c <USB_CoreReset>
20005ae0:	4603      	mov	r3, r0
20005ae2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
20005ae4:	687b      	ldr	r3, [r7, #4]
20005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20005ae8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
20005aec:	687b      	ldr	r3, [r7, #4]
20005aee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
20005af0:	7fbb      	ldrb	r3, [r7, #30]
20005af2:	2b01      	cmp	r3, #1
20005af4:	d10b      	bne.n	20005b0e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
20005af6:	687b      	ldr	r3, [r7, #4]
20005af8:	689b      	ldr	r3, [r3, #8]
20005afa:	f043 0206 	orr.w	r2, r3, #6
20005afe:	687b      	ldr	r3, [r7, #4]
20005b00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
20005b02:	687b      	ldr	r3, [r7, #4]
20005b04:	689b      	ldr	r3, [r3, #8]
20005b06:	f043 0220 	orr.w	r2, r3, #32
20005b0a:	687b      	ldr	r3, [r7, #4]
20005b0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
20005b0e:	7bfb      	ldrb	r3, [r7, #15]
}
20005b10:	4618      	mov	r0, r3
20005b12:	3710      	adds	r7, #16
20005b14:	46bd      	mov	sp, r7
20005b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20005b1a:	b004      	add	sp, #16
20005b1c:	4770      	bx	lr
20005b1e:	bf00      	nop
20005b20:	ffbdffbf 	.word	0xffbdffbf

20005b24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
20005b24:	b480      	push	{r7}
20005b26:	b087      	sub	sp, #28
20005b28:	af00      	add	r7, sp, #0
20005b2a:	60f8      	str	r0, [r7, #12]
20005b2c:	60b9      	str	r1, [r7, #8]
20005b2e:	4613      	mov	r3, r2
20005b30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
20005b32:	79fb      	ldrb	r3, [r7, #7]
20005b34:	2b02      	cmp	r3, #2
20005b36:	d165      	bne.n	20005c04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
20005b38:	68bb      	ldr	r3, [r7, #8]
20005b3a:	4a41      	ldr	r2, [pc, #260]	@ (20005c40 <USB_SetTurnaroundTime+0x11c>)
20005b3c:	4293      	cmp	r3, r2
20005b3e:	d906      	bls.n	20005b4e <USB_SetTurnaroundTime+0x2a>
20005b40:	68bb      	ldr	r3, [r7, #8]
20005b42:	4a40      	ldr	r2, [pc, #256]	@ (20005c44 <USB_SetTurnaroundTime+0x120>)
20005b44:	4293      	cmp	r3, r2
20005b46:	d202      	bcs.n	20005b4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
20005b48:	230f      	movs	r3, #15
20005b4a:	617b      	str	r3, [r7, #20]
20005b4c:	e062      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
20005b4e:	68bb      	ldr	r3, [r7, #8]
20005b50:	4a3c      	ldr	r2, [pc, #240]	@ (20005c44 <USB_SetTurnaroundTime+0x120>)
20005b52:	4293      	cmp	r3, r2
20005b54:	d306      	bcc.n	20005b64 <USB_SetTurnaroundTime+0x40>
20005b56:	68bb      	ldr	r3, [r7, #8]
20005b58:	4a3b      	ldr	r2, [pc, #236]	@ (20005c48 <USB_SetTurnaroundTime+0x124>)
20005b5a:	4293      	cmp	r3, r2
20005b5c:	d202      	bcs.n	20005b64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
20005b5e:	230e      	movs	r3, #14
20005b60:	617b      	str	r3, [r7, #20]
20005b62:	e057      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
20005b64:	68bb      	ldr	r3, [r7, #8]
20005b66:	4a38      	ldr	r2, [pc, #224]	@ (20005c48 <USB_SetTurnaroundTime+0x124>)
20005b68:	4293      	cmp	r3, r2
20005b6a:	d306      	bcc.n	20005b7a <USB_SetTurnaroundTime+0x56>
20005b6c:	68bb      	ldr	r3, [r7, #8]
20005b6e:	4a37      	ldr	r2, [pc, #220]	@ (20005c4c <USB_SetTurnaroundTime+0x128>)
20005b70:	4293      	cmp	r3, r2
20005b72:	d202      	bcs.n	20005b7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
20005b74:	230d      	movs	r3, #13
20005b76:	617b      	str	r3, [r7, #20]
20005b78:	e04c      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
20005b7a:	68bb      	ldr	r3, [r7, #8]
20005b7c:	4a33      	ldr	r2, [pc, #204]	@ (20005c4c <USB_SetTurnaroundTime+0x128>)
20005b7e:	4293      	cmp	r3, r2
20005b80:	d306      	bcc.n	20005b90 <USB_SetTurnaroundTime+0x6c>
20005b82:	68bb      	ldr	r3, [r7, #8]
20005b84:	4a32      	ldr	r2, [pc, #200]	@ (20005c50 <USB_SetTurnaroundTime+0x12c>)
20005b86:	4293      	cmp	r3, r2
20005b88:	d802      	bhi.n	20005b90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
20005b8a:	230c      	movs	r3, #12
20005b8c:	617b      	str	r3, [r7, #20]
20005b8e:	e041      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
20005b90:	68bb      	ldr	r3, [r7, #8]
20005b92:	4a2f      	ldr	r2, [pc, #188]	@ (20005c50 <USB_SetTurnaroundTime+0x12c>)
20005b94:	4293      	cmp	r3, r2
20005b96:	d906      	bls.n	20005ba6 <USB_SetTurnaroundTime+0x82>
20005b98:	68bb      	ldr	r3, [r7, #8]
20005b9a:	4a2e      	ldr	r2, [pc, #184]	@ (20005c54 <USB_SetTurnaroundTime+0x130>)
20005b9c:	4293      	cmp	r3, r2
20005b9e:	d802      	bhi.n	20005ba6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
20005ba0:	230b      	movs	r3, #11
20005ba2:	617b      	str	r3, [r7, #20]
20005ba4:	e036      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
20005ba6:	68bb      	ldr	r3, [r7, #8]
20005ba8:	4a2a      	ldr	r2, [pc, #168]	@ (20005c54 <USB_SetTurnaroundTime+0x130>)
20005baa:	4293      	cmp	r3, r2
20005bac:	d906      	bls.n	20005bbc <USB_SetTurnaroundTime+0x98>
20005bae:	68bb      	ldr	r3, [r7, #8]
20005bb0:	4a29      	ldr	r2, [pc, #164]	@ (20005c58 <USB_SetTurnaroundTime+0x134>)
20005bb2:	4293      	cmp	r3, r2
20005bb4:	d802      	bhi.n	20005bbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
20005bb6:	230a      	movs	r3, #10
20005bb8:	617b      	str	r3, [r7, #20]
20005bba:	e02b      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
20005bbc:	68bb      	ldr	r3, [r7, #8]
20005bbe:	4a26      	ldr	r2, [pc, #152]	@ (20005c58 <USB_SetTurnaroundTime+0x134>)
20005bc0:	4293      	cmp	r3, r2
20005bc2:	d906      	bls.n	20005bd2 <USB_SetTurnaroundTime+0xae>
20005bc4:	68bb      	ldr	r3, [r7, #8]
20005bc6:	4a25      	ldr	r2, [pc, #148]	@ (20005c5c <USB_SetTurnaroundTime+0x138>)
20005bc8:	4293      	cmp	r3, r2
20005bca:	d202      	bcs.n	20005bd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
20005bcc:	2309      	movs	r3, #9
20005bce:	617b      	str	r3, [r7, #20]
20005bd0:	e020      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
20005bd2:	68bb      	ldr	r3, [r7, #8]
20005bd4:	4a21      	ldr	r2, [pc, #132]	@ (20005c5c <USB_SetTurnaroundTime+0x138>)
20005bd6:	4293      	cmp	r3, r2
20005bd8:	d306      	bcc.n	20005be8 <USB_SetTurnaroundTime+0xc4>
20005bda:	68bb      	ldr	r3, [r7, #8]
20005bdc:	4a20      	ldr	r2, [pc, #128]	@ (20005c60 <USB_SetTurnaroundTime+0x13c>)
20005bde:	4293      	cmp	r3, r2
20005be0:	d802      	bhi.n	20005be8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
20005be2:	2308      	movs	r3, #8
20005be4:	617b      	str	r3, [r7, #20]
20005be6:	e015      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
20005be8:	68bb      	ldr	r3, [r7, #8]
20005bea:	4a1d      	ldr	r2, [pc, #116]	@ (20005c60 <USB_SetTurnaroundTime+0x13c>)
20005bec:	4293      	cmp	r3, r2
20005bee:	d906      	bls.n	20005bfe <USB_SetTurnaroundTime+0xda>
20005bf0:	68bb      	ldr	r3, [r7, #8]
20005bf2:	4a1c      	ldr	r2, [pc, #112]	@ (20005c64 <USB_SetTurnaroundTime+0x140>)
20005bf4:	4293      	cmp	r3, r2
20005bf6:	d202      	bcs.n	20005bfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
20005bf8:	2307      	movs	r3, #7
20005bfa:	617b      	str	r3, [r7, #20]
20005bfc:	e00a      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
20005bfe:	2306      	movs	r3, #6
20005c00:	617b      	str	r3, [r7, #20]
20005c02:	e007      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
20005c04:	79fb      	ldrb	r3, [r7, #7]
20005c06:	2b00      	cmp	r3, #0
20005c08:	d102      	bne.n	20005c10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
20005c0a:	2309      	movs	r3, #9
20005c0c:	617b      	str	r3, [r7, #20]
20005c0e:	e001      	b.n	20005c14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
20005c10:	2309      	movs	r3, #9
20005c12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
20005c14:	68fb      	ldr	r3, [r7, #12]
20005c16:	68db      	ldr	r3, [r3, #12]
20005c18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
20005c1c:	68fb      	ldr	r3, [r7, #12]
20005c1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
20005c20:	68fb      	ldr	r3, [r7, #12]
20005c22:	68da      	ldr	r2, [r3, #12]
20005c24:	697b      	ldr	r3, [r7, #20]
20005c26:	029b      	lsls	r3, r3, #10
20005c28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
20005c2c:	431a      	orrs	r2, r3
20005c2e:	68fb      	ldr	r3, [r7, #12]
20005c30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
20005c32:	2300      	movs	r3, #0
}
20005c34:	4618      	mov	r0, r3
20005c36:	371c      	adds	r7, #28
20005c38:	46bd      	mov	sp, r7
20005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c3e:	4770      	bx	lr
20005c40:	00d8acbf 	.word	0x00d8acbf
20005c44:	00e4e1c0 	.word	0x00e4e1c0
20005c48:	00f42400 	.word	0x00f42400
20005c4c:	01067380 	.word	0x01067380
20005c50:	011a499f 	.word	0x011a499f
20005c54:	01312cff 	.word	0x01312cff
20005c58:	014ca43f 	.word	0x014ca43f
20005c5c:	016e3600 	.word	0x016e3600
20005c60:	01a6ab1f 	.word	0x01a6ab1f
20005c64:	01e84800 	.word	0x01e84800

20005c68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
20005c68:	b480      	push	{r7}
20005c6a:	b083      	sub	sp, #12
20005c6c:	af00      	add	r7, sp, #0
20005c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
20005c70:	687b      	ldr	r3, [r7, #4]
20005c72:	689b      	ldr	r3, [r3, #8]
20005c74:	f043 0201 	orr.w	r2, r3, #1
20005c78:	687b      	ldr	r3, [r7, #4]
20005c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
20005c7c:	2300      	movs	r3, #0
}
20005c7e:	4618      	mov	r0, r3
20005c80:	370c      	adds	r7, #12
20005c82:	46bd      	mov	sp, r7
20005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c88:	4770      	bx	lr

20005c8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
20005c8a:	b480      	push	{r7}
20005c8c:	b083      	sub	sp, #12
20005c8e:	af00      	add	r7, sp, #0
20005c90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
20005c92:	687b      	ldr	r3, [r7, #4]
20005c94:	689b      	ldr	r3, [r3, #8]
20005c96:	f023 0201 	bic.w	r2, r3, #1
20005c9a:	687b      	ldr	r3, [r7, #4]
20005c9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
20005c9e:	2300      	movs	r3, #0
}
20005ca0:	4618      	mov	r0, r3
20005ca2:	370c      	adds	r7, #12
20005ca4:	46bd      	mov	sp, r7
20005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
20005caa:	4770      	bx	lr

20005cac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
20005cac:	b580      	push	{r7, lr}
20005cae:	b084      	sub	sp, #16
20005cb0:	af00      	add	r7, sp, #0
20005cb2:	6078      	str	r0, [r7, #4]
20005cb4:	460b      	mov	r3, r1
20005cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
20005cb8:	2300      	movs	r3, #0
20005cba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
20005cbc:	687b      	ldr	r3, [r7, #4]
20005cbe:	68db      	ldr	r3, [r3, #12]
20005cc0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
20005cc4:	687b      	ldr	r3, [r7, #4]
20005cc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
20005cc8:	78fb      	ldrb	r3, [r7, #3]
20005cca:	2b01      	cmp	r3, #1
20005ccc:	d115      	bne.n	20005cfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
20005cce:	687b      	ldr	r3, [r7, #4]
20005cd0:	68db      	ldr	r3, [r3, #12]
20005cd2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
20005cd6:	687b      	ldr	r3, [r7, #4]
20005cd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20005cda:	200a      	movs	r0, #10
20005cdc:	f7fb ffca 	bl	20001c74 <HAL_Delay>
      ms += 10U;
20005ce0:	68fb      	ldr	r3, [r7, #12]
20005ce2:	330a      	adds	r3, #10
20005ce4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
20005ce6:	6878      	ldr	r0, [r7, #4]
20005ce8:	f001 f93f 	bl	20006f6a <USB_GetMode>
20005cec:	4603      	mov	r3, r0
20005cee:	2b01      	cmp	r3, #1
20005cf0:	d01e      	beq.n	20005d30 <USB_SetCurrentMode+0x84>
20005cf2:	68fb      	ldr	r3, [r7, #12]
20005cf4:	2bc7      	cmp	r3, #199	@ 0xc7
20005cf6:	d9f0      	bls.n	20005cda <USB_SetCurrentMode+0x2e>
20005cf8:	e01a      	b.n	20005d30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
20005cfa:	78fb      	ldrb	r3, [r7, #3]
20005cfc:	2b00      	cmp	r3, #0
20005cfe:	d115      	bne.n	20005d2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
20005d00:	687b      	ldr	r3, [r7, #4]
20005d02:	68db      	ldr	r3, [r3, #12]
20005d04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
20005d08:	687b      	ldr	r3, [r7, #4]
20005d0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
20005d0c:	200a      	movs	r0, #10
20005d0e:	f7fb ffb1 	bl	20001c74 <HAL_Delay>
      ms += 10U;
20005d12:	68fb      	ldr	r3, [r7, #12]
20005d14:	330a      	adds	r3, #10
20005d16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
20005d18:	6878      	ldr	r0, [r7, #4]
20005d1a:	f001 f926 	bl	20006f6a <USB_GetMode>
20005d1e:	4603      	mov	r3, r0
20005d20:	2b00      	cmp	r3, #0
20005d22:	d005      	beq.n	20005d30 <USB_SetCurrentMode+0x84>
20005d24:	68fb      	ldr	r3, [r7, #12]
20005d26:	2bc7      	cmp	r3, #199	@ 0xc7
20005d28:	d9f0      	bls.n	20005d0c <USB_SetCurrentMode+0x60>
20005d2a:	e001      	b.n	20005d30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
20005d2c:	2301      	movs	r3, #1
20005d2e:	e005      	b.n	20005d3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
20005d30:	68fb      	ldr	r3, [r7, #12]
20005d32:	2bc8      	cmp	r3, #200	@ 0xc8
20005d34:	d101      	bne.n	20005d3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
20005d36:	2301      	movs	r3, #1
20005d38:	e000      	b.n	20005d3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
20005d3a:	2300      	movs	r3, #0
}
20005d3c:	4618      	mov	r0, r3
20005d3e:	3710      	adds	r7, #16
20005d40:	46bd      	mov	sp, r7
20005d42:	bd80      	pop	{r7, pc}

20005d44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
20005d44:	b084      	sub	sp, #16
20005d46:	b580      	push	{r7, lr}
20005d48:	b086      	sub	sp, #24
20005d4a:	af00      	add	r7, sp, #0
20005d4c:	6078      	str	r0, [r7, #4]
20005d4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
20005d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
20005d56:	2300      	movs	r3, #0
20005d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
20005d5a:	687b      	ldr	r3, [r7, #4]
20005d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
20005d5e:	2300      	movs	r3, #0
20005d60:	613b      	str	r3, [r7, #16]
20005d62:	e009      	b.n	20005d78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
20005d64:	687a      	ldr	r2, [r7, #4]
20005d66:	693b      	ldr	r3, [r7, #16]
20005d68:	3340      	adds	r3, #64	@ 0x40
20005d6a:	009b      	lsls	r3, r3, #2
20005d6c:	4413      	add	r3, r2
20005d6e:	2200      	movs	r2, #0
20005d70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
20005d72:	693b      	ldr	r3, [r7, #16]
20005d74:	3301      	adds	r3, #1
20005d76:	613b      	str	r3, [r7, #16]
20005d78:	693b      	ldr	r3, [r7, #16]
20005d7a:	2b0e      	cmp	r3, #14
20005d7c:	d9f2      	bls.n	20005d64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
20005d7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
20005d82:	2b00      	cmp	r3, #0
20005d84:	d11c      	bne.n	20005dc0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
20005d86:	68fb      	ldr	r3, [r7, #12]
20005d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005d8c:	685b      	ldr	r3, [r3, #4]
20005d8e:	68fa      	ldr	r2, [r7, #12]
20005d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005d94:	f043 0302 	orr.w	r3, r3, #2
20005d98:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
20005d9a:	687b      	ldr	r3, [r7, #4]
20005d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20005d9e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
20005da2:	687b      	ldr	r3, [r7, #4]
20005da4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
20005da6:	687b      	ldr	r3, [r7, #4]
20005da8:	681b      	ldr	r3, [r3, #0]
20005daa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20005dae:	687b      	ldr	r3, [r7, #4]
20005db0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
20005db2:	687b      	ldr	r3, [r7, #4]
20005db4:	681b      	ldr	r3, [r3, #0]
20005db6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
20005dba:	687b      	ldr	r3, [r7, #4]
20005dbc:	601a      	str	r2, [r3, #0]
20005dbe:	e005      	b.n	20005dcc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
20005dc0:	687b      	ldr	r3, [r7, #4]
20005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20005dc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
20005dc8:	687b      	ldr	r3, [r7, #4]
20005dca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
20005dcc:	68fb      	ldr	r3, [r7, #12]
20005dce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
20005dd2:	461a      	mov	r2, r3
20005dd4:	2300      	movs	r3, #0
20005dd6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
20005dd8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
20005ddc:	2b01      	cmp	r3, #1
20005dde:	d10d      	bne.n	20005dfc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
20005de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
20005de4:	2b00      	cmp	r3, #0
20005de6:	d104      	bne.n	20005df2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
20005de8:	2100      	movs	r1, #0
20005dea:	6878      	ldr	r0, [r7, #4]
20005dec:	f000 f968 	bl	200060c0 <USB_SetDevSpeed>
20005df0:	e008      	b.n	20005e04 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
20005df2:	2101      	movs	r1, #1
20005df4:	6878      	ldr	r0, [r7, #4]
20005df6:	f000 f963 	bl	200060c0 <USB_SetDevSpeed>
20005dfa:	e003      	b.n	20005e04 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
20005dfc:	2103      	movs	r1, #3
20005dfe:	6878      	ldr	r0, [r7, #4]
20005e00:	f000 f95e 	bl	200060c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
20005e04:	2110      	movs	r1, #16
20005e06:	6878      	ldr	r0, [r7, #4]
20005e08:	f000 f8fa 	bl	20006000 <USB_FlushTxFifo>
20005e0c:	4603      	mov	r3, r0
20005e0e:	2b00      	cmp	r3, #0
20005e10:	d001      	beq.n	20005e16 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
20005e12:	2301      	movs	r3, #1
20005e14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
20005e16:	6878      	ldr	r0, [r7, #4]
20005e18:	f000 f924 	bl	20006064 <USB_FlushRxFifo>
20005e1c:	4603      	mov	r3, r0
20005e1e:	2b00      	cmp	r3, #0
20005e20:	d001      	beq.n	20005e26 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
20005e22:	2301      	movs	r3, #1
20005e24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
20005e26:	68fb      	ldr	r3, [r7, #12]
20005e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005e2c:	461a      	mov	r2, r3
20005e2e:	2300      	movs	r3, #0
20005e30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
20005e32:	68fb      	ldr	r3, [r7, #12]
20005e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005e38:	461a      	mov	r2, r3
20005e3a:	2300      	movs	r3, #0
20005e3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
20005e3e:	68fb      	ldr	r3, [r7, #12]
20005e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005e44:	461a      	mov	r2, r3
20005e46:	2300      	movs	r3, #0
20005e48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
20005e4a:	2300      	movs	r3, #0
20005e4c:	613b      	str	r3, [r7, #16]
20005e4e:	e043      	b.n	20005ed8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20005e50:	693b      	ldr	r3, [r7, #16]
20005e52:	015a      	lsls	r2, r3, #5
20005e54:	68fb      	ldr	r3, [r7, #12]
20005e56:	4413      	add	r3, r2
20005e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005e5c:	681b      	ldr	r3, [r3, #0]
20005e5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20005e62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20005e66:	d118      	bne.n	20005e9a <USB_DevInit+0x156>
    {
      if (i == 0U)
20005e68:	693b      	ldr	r3, [r7, #16]
20005e6a:	2b00      	cmp	r3, #0
20005e6c:	d10a      	bne.n	20005e84 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
20005e6e:	693b      	ldr	r3, [r7, #16]
20005e70:	015a      	lsls	r2, r3, #5
20005e72:	68fb      	ldr	r3, [r7, #12]
20005e74:	4413      	add	r3, r2
20005e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005e7a:	461a      	mov	r2, r3
20005e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20005e80:	6013      	str	r3, [r2, #0]
20005e82:	e013      	b.n	20005eac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
20005e84:	693b      	ldr	r3, [r7, #16]
20005e86:	015a      	lsls	r2, r3, #5
20005e88:	68fb      	ldr	r3, [r7, #12]
20005e8a:	4413      	add	r3, r2
20005e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005e90:	461a      	mov	r2, r3
20005e92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20005e96:	6013      	str	r3, [r2, #0]
20005e98:	e008      	b.n	20005eac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
20005e9a:	693b      	ldr	r3, [r7, #16]
20005e9c:	015a      	lsls	r2, r3, #5
20005e9e:	68fb      	ldr	r3, [r7, #12]
20005ea0:	4413      	add	r3, r2
20005ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005ea6:	461a      	mov	r2, r3
20005ea8:	2300      	movs	r3, #0
20005eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
20005eac:	693b      	ldr	r3, [r7, #16]
20005eae:	015a      	lsls	r2, r3, #5
20005eb0:	68fb      	ldr	r3, [r7, #12]
20005eb2:	4413      	add	r3, r2
20005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005eb8:	461a      	mov	r2, r3
20005eba:	2300      	movs	r3, #0
20005ebc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
20005ebe:	693b      	ldr	r3, [r7, #16]
20005ec0:	015a      	lsls	r2, r3, #5
20005ec2:	68fb      	ldr	r3, [r7, #12]
20005ec4:	4413      	add	r3, r2
20005ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20005eca:	461a      	mov	r2, r3
20005ecc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20005ed0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
20005ed2:	693b      	ldr	r3, [r7, #16]
20005ed4:	3301      	adds	r3, #1
20005ed6:	613b      	str	r3, [r7, #16]
20005ed8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20005edc:	461a      	mov	r2, r3
20005ede:	693b      	ldr	r3, [r7, #16]
20005ee0:	4293      	cmp	r3, r2
20005ee2:	d3b5      	bcc.n	20005e50 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
20005ee4:	2300      	movs	r3, #0
20005ee6:	613b      	str	r3, [r7, #16]
20005ee8:	e043      	b.n	20005f72 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20005eea:	693b      	ldr	r3, [r7, #16]
20005eec:	015a      	lsls	r2, r3, #5
20005eee:	68fb      	ldr	r3, [r7, #12]
20005ef0:	4413      	add	r3, r2
20005ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005ef6:	681b      	ldr	r3, [r3, #0]
20005ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20005efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20005f00:	d118      	bne.n	20005f34 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
20005f02:	693b      	ldr	r3, [r7, #16]
20005f04:	2b00      	cmp	r3, #0
20005f06:	d10a      	bne.n	20005f1e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
20005f08:	693b      	ldr	r3, [r7, #16]
20005f0a:	015a      	lsls	r2, r3, #5
20005f0c:	68fb      	ldr	r3, [r7, #12]
20005f0e:	4413      	add	r3, r2
20005f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f14:	461a      	mov	r2, r3
20005f16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20005f1a:	6013      	str	r3, [r2, #0]
20005f1c:	e013      	b.n	20005f46 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
20005f1e:	693b      	ldr	r3, [r7, #16]
20005f20:	015a      	lsls	r2, r3, #5
20005f22:	68fb      	ldr	r3, [r7, #12]
20005f24:	4413      	add	r3, r2
20005f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f2a:	461a      	mov	r2, r3
20005f2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20005f30:	6013      	str	r3, [r2, #0]
20005f32:	e008      	b.n	20005f46 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
20005f34:	693b      	ldr	r3, [r7, #16]
20005f36:	015a      	lsls	r2, r3, #5
20005f38:	68fb      	ldr	r3, [r7, #12]
20005f3a:	4413      	add	r3, r2
20005f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f40:	461a      	mov	r2, r3
20005f42:	2300      	movs	r3, #0
20005f44:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
20005f46:	693b      	ldr	r3, [r7, #16]
20005f48:	015a      	lsls	r2, r3, #5
20005f4a:	68fb      	ldr	r3, [r7, #12]
20005f4c:	4413      	add	r3, r2
20005f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f52:	461a      	mov	r2, r3
20005f54:	2300      	movs	r3, #0
20005f56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
20005f58:	693b      	ldr	r3, [r7, #16]
20005f5a:	015a      	lsls	r2, r3, #5
20005f5c:	68fb      	ldr	r3, [r7, #12]
20005f5e:	4413      	add	r3, r2
20005f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20005f64:	461a      	mov	r2, r3
20005f66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
20005f6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
20005f6c:	693b      	ldr	r3, [r7, #16]
20005f6e:	3301      	adds	r3, #1
20005f70:	613b      	str	r3, [r7, #16]
20005f72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
20005f76:	461a      	mov	r2, r3
20005f78:	693b      	ldr	r3, [r7, #16]
20005f7a:	4293      	cmp	r3, r2
20005f7c:	d3b5      	bcc.n	20005eea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
20005f7e:	68fb      	ldr	r3, [r7, #12]
20005f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20005f84:	691b      	ldr	r3, [r3, #16]
20005f86:	68fa      	ldr	r2, [r7, #12]
20005f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20005f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
20005f90:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
20005f92:	687b      	ldr	r3, [r7, #4]
20005f94:	2200      	movs	r2, #0
20005f96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
20005f98:	687b      	ldr	r3, [r7, #4]
20005f9a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
20005f9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
20005fa0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
20005fa4:	2b00      	cmp	r3, #0
20005fa6:	d105      	bne.n	20005fb4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
20005fa8:	687b      	ldr	r3, [r7, #4]
20005faa:	699b      	ldr	r3, [r3, #24]
20005fac:	f043 0210 	orr.w	r2, r3, #16
20005fb0:	687b      	ldr	r3, [r7, #4]
20005fb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
20005fb4:	687b      	ldr	r3, [r7, #4]
20005fb6:	699a      	ldr	r2, [r3, #24]
20005fb8:	4b0f      	ldr	r3, [pc, #60]	@ (20005ff8 <USB_DevInit+0x2b4>)
20005fba:	4313      	orrs	r3, r2
20005fbc:	687a      	ldr	r2, [r7, #4]
20005fbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
20005fc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
20005fc4:	2b00      	cmp	r3, #0
20005fc6:	d005      	beq.n	20005fd4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
20005fc8:	687b      	ldr	r3, [r7, #4]
20005fca:	699b      	ldr	r3, [r3, #24]
20005fcc:	f043 0208 	orr.w	r2, r3, #8
20005fd0:	687b      	ldr	r3, [r7, #4]
20005fd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
20005fd4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
20005fd8:	2b01      	cmp	r3, #1
20005fda:	d105      	bne.n	20005fe8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
20005fdc:	687b      	ldr	r3, [r7, #4]
20005fde:	699a      	ldr	r2, [r3, #24]
20005fe0:	4b06      	ldr	r3, [pc, #24]	@ (20005ffc <USB_DevInit+0x2b8>)
20005fe2:	4313      	orrs	r3, r2
20005fe4:	687a      	ldr	r2, [r7, #4]
20005fe6:	6193      	str	r3, [r2, #24]
  }

  return ret;
20005fe8:	7dfb      	ldrb	r3, [r7, #23]
}
20005fea:	4618      	mov	r0, r3
20005fec:	3718      	adds	r7, #24
20005fee:	46bd      	mov	sp, r7
20005ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20005ff4:	b004      	add	sp, #16
20005ff6:	4770      	bx	lr
20005ff8:	803c3800 	.word	0x803c3800
20005ffc:	40000004 	.word	0x40000004

20006000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
20006000:	b480      	push	{r7}
20006002:	b085      	sub	sp, #20
20006004:	af00      	add	r7, sp, #0
20006006:	6078      	str	r0, [r7, #4]
20006008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
2000600a:	2300      	movs	r3, #0
2000600c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
2000600e:	68fb      	ldr	r3, [r7, #12]
20006010:	3301      	adds	r3, #1
20006012:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20006014:	68fb      	ldr	r3, [r7, #12]
20006016:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000601a:	d901      	bls.n	20006020 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
2000601c:	2303      	movs	r3, #3
2000601e:	e01b      	b.n	20006058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20006020:	687b      	ldr	r3, [r7, #4]
20006022:	691b      	ldr	r3, [r3, #16]
20006024:	2b00      	cmp	r3, #0
20006026:	daf2      	bge.n	2000600e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
20006028:	2300      	movs	r3, #0
2000602a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
2000602c:	683b      	ldr	r3, [r7, #0]
2000602e:	019b      	lsls	r3, r3, #6
20006030:	f043 0220 	orr.w	r2, r3, #32
20006034:	687b      	ldr	r3, [r7, #4]
20006036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20006038:	68fb      	ldr	r3, [r7, #12]
2000603a:	3301      	adds	r3, #1
2000603c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000603e:	68fb      	ldr	r3, [r7, #12]
20006040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
20006044:	d901      	bls.n	2000604a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
20006046:	2303      	movs	r3, #3
20006048:	e006      	b.n	20006058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
2000604a:	687b      	ldr	r3, [r7, #4]
2000604c:	691b      	ldr	r3, [r3, #16]
2000604e:	f003 0320 	and.w	r3, r3, #32
20006052:	2b20      	cmp	r3, #32
20006054:	d0f0      	beq.n	20006038 <USB_FlushTxFifo+0x38>

  return HAL_OK;
20006056:	2300      	movs	r3, #0
}
20006058:	4618      	mov	r0, r3
2000605a:	3714      	adds	r7, #20
2000605c:	46bd      	mov	sp, r7
2000605e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006062:	4770      	bx	lr

20006064 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
20006064:	b480      	push	{r7}
20006066:	b085      	sub	sp, #20
20006068:	af00      	add	r7, sp, #0
2000606a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
2000606c:	2300      	movs	r3, #0
2000606e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20006070:	68fb      	ldr	r3, [r7, #12]
20006072:	3301      	adds	r3, #1
20006074:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
20006076:	68fb      	ldr	r3, [r7, #12]
20006078:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
2000607c:	d901      	bls.n	20006082 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
2000607e:	2303      	movs	r3, #3
20006080:	e018      	b.n	200060b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
20006082:	687b      	ldr	r3, [r7, #4]
20006084:	691b      	ldr	r3, [r3, #16]
20006086:	2b00      	cmp	r3, #0
20006088:	daf2      	bge.n	20006070 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
2000608a:	2300      	movs	r3, #0
2000608c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
2000608e:	687b      	ldr	r3, [r7, #4]
20006090:	2210      	movs	r2, #16
20006092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
20006094:	68fb      	ldr	r3, [r7, #12]
20006096:	3301      	adds	r3, #1
20006098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000609a:	68fb      	ldr	r3, [r7, #12]
2000609c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200060a0:	d901      	bls.n	200060a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
200060a2:	2303      	movs	r3, #3
200060a4:	e006      	b.n	200060b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
200060a6:	687b      	ldr	r3, [r7, #4]
200060a8:	691b      	ldr	r3, [r3, #16]
200060aa:	f003 0310 	and.w	r3, r3, #16
200060ae:	2b10      	cmp	r3, #16
200060b0:	d0f0      	beq.n	20006094 <USB_FlushRxFifo+0x30>

  return HAL_OK;
200060b2:	2300      	movs	r3, #0
}
200060b4:	4618      	mov	r0, r3
200060b6:	3714      	adds	r7, #20
200060b8:	46bd      	mov	sp, r7
200060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200060be:	4770      	bx	lr

200060c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
200060c0:	b480      	push	{r7}
200060c2:	b085      	sub	sp, #20
200060c4:	af00      	add	r7, sp, #0
200060c6:	6078      	str	r0, [r7, #4]
200060c8:	460b      	mov	r3, r1
200060ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
200060cc:	687b      	ldr	r3, [r7, #4]
200060ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
200060d0:	68fb      	ldr	r3, [r7, #12]
200060d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200060d6:	681a      	ldr	r2, [r3, #0]
200060d8:	78fb      	ldrb	r3, [r7, #3]
200060da:	68f9      	ldr	r1, [r7, #12]
200060dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200060e0:	4313      	orrs	r3, r2
200060e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
200060e4:	2300      	movs	r3, #0
}
200060e6:	4618      	mov	r0, r3
200060e8:	3714      	adds	r7, #20
200060ea:	46bd      	mov	sp, r7
200060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200060f0:	4770      	bx	lr

200060f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
200060f2:	b480      	push	{r7}
200060f4:	b087      	sub	sp, #28
200060f6:	af00      	add	r7, sp, #0
200060f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
200060fa:	687b      	ldr	r3, [r7, #4]
200060fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
200060fe:	693b      	ldr	r3, [r7, #16]
20006100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006104:	689b      	ldr	r3, [r3, #8]
20006106:	f003 0306 	and.w	r3, r3, #6
2000610a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
2000610c:	68fb      	ldr	r3, [r7, #12]
2000610e:	2b00      	cmp	r3, #0
20006110:	d102      	bne.n	20006118 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
20006112:	2300      	movs	r3, #0
20006114:	75fb      	strb	r3, [r7, #23]
20006116:	e00a      	b.n	2000612e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
20006118:	68fb      	ldr	r3, [r7, #12]
2000611a:	2b02      	cmp	r3, #2
2000611c:	d002      	beq.n	20006124 <USB_GetDevSpeed+0x32>
2000611e:	68fb      	ldr	r3, [r7, #12]
20006120:	2b06      	cmp	r3, #6
20006122:	d102      	bne.n	2000612a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
20006124:	2302      	movs	r3, #2
20006126:	75fb      	strb	r3, [r7, #23]
20006128:	e001      	b.n	2000612e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
2000612a:	230f      	movs	r3, #15
2000612c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
2000612e:	7dfb      	ldrb	r3, [r7, #23]
}
20006130:	4618      	mov	r0, r3
20006132:	371c      	adds	r7, #28
20006134:	46bd      	mov	sp, r7
20006136:	f85d 7b04 	ldr.w	r7, [sp], #4
2000613a:	4770      	bx	lr

2000613c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
2000613c:	b480      	push	{r7}
2000613e:	b085      	sub	sp, #20
20006140:	af00      	add	r7, sp, #0
20006142:	6078      	str	r0, [r7, #4]
20006144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006146:	687b      	ldr	r3, [r7, #4]
20006148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
2000614a:	683b      	ldr	r3, [r7, #0]
2000614c:	781b      	ldrb	r3, [r3, #0]
2000614e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20006150:	683b      	ldr	r3, [r7, #0]
20006152:	785b      	ldrb	r3, [r3, #1]
20006154:	2b01      	cmp	r3, #1
20006156:	d139      	bne.n	200061cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
20006158:	68fb      	ldr	r3, [r7, #12]
2000615a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000615e:	69da      	ldr	r2, [r3, #28]
20006160:	683b      	ldr	r3, [r7, #0]
20006162:	781b      	ldrb	r3, [r3, #0]
20006164:	f003 030f 	and.w	r3, r3, #15
20006168:	2101      	movs	r1, #1
2000616a:	fa01 f303 	lsl.w	r3, r1, r3
2000616e:	b29b      	uxth	r3, r3
20006170:	68f9      	ldr	r1, [r7, #12]
20006172:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20006176:	4313      	orrs	r3, r2
20006178:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
2000617a:	68bb      	ldr	r3, [r7, #8]
2000617c:	015a      	lsls	r2, r3, #5
2000617e:	68fb      	ldr	r3, [r7, #12]
20006180:	4413      	add	r3, r2
20006182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006186:	681b      	ldr	r3, [r3, #0]
20006188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000618c:	2b00      	cmp	r3, #0
2000618e:	d153      	bne.n	20006238 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
20006190:	68bb      	ldr	r3, [r7, #8]
20006192:	015a      	lsls	r2, r3, #5
20006194:	68fb      	ldr	r3, [r7, #12]
20006196:	4413      	add	r3, r2
20006198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000619c:	681a      	ldr	r2, [r3, #0]
2000619e:	683b      	ldr	r3, [r7, #0]
200061a0:	689b      	ldr	r3, [r3, #8]
200061a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
200061a6:	683b      	ldr	r3, [r7, #0]
200061a8:	791b      	ldrb	r3, [r3, #4]
200061aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
200061ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
200061ae:	68bb      	ldr	r3, [r7, #8]
200061b0:	059b      	lsls	r3, r3, #22
200061b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
200061b4:	431a      	orrs	r2, r3
200061b6:	68bb      	ldr	r3, [r7, #8]
200061b8:	0159      	lsls	r1, r3, #5
200061ba:	68fb      	ldr	r3, [r7, #12]
200061bc:	440b      	add	r3, r1
200061be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200061c2:	4619      	mov	r1, r3
200061c4:	4b20      	ldr	r3, [pc, #128]	@ (20006248 <USB_ActivateEndpoint+0x10c>)
200061c6:	4313      	orrs	r3, r2
200061c8:	600b      	str	r3, [r1, #0]
200061ca:	e035      	b.n	20006238 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
200061cc:	68fb      	ldr	r3, [r7, #12]
200061ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200061d2:	69da      	ldr	r2, [r3, #28]
200061d4:	683b      	ldr	r3, [r7, #0]
200061d6:	781b      	ldrb	r3, [r3, #0]
200061d8:	f003 030f 	and.w	r3, r3, #15
200061dc:	2101      	movs	r1, #1
200061de:	fa01 f303 	lsl.w	r3, r1, r3
200061e2:	041b      	lsls	r3, r3, #16
200061e4:	68f9      	ldr	r1, [r7, #12]
200061e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200061ea:	4313      	orrs	r3, r2
200061ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
200061ee:	68bb      	ldr	r3, [r7, #8]
200061f0:	015a      	lsls	r2, r3, #5
200061f2:	68fb      	ldr	r3, [r7, #12]
200061f4:	4413      	add	r3, r2
200061f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200061fa:	681b      	ldr	r3, [r3, #0]
200061fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20006200:	2b00      	cmp	r3, #0
20006202:	d119      	bne.n	20006238 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20006204:	68bb      	ldr	r3, [r7, #8]
20006206:	015a      	lsls	r2, r3, #5
20006208:	68fb      	ldr	r3, [r7, #12]
2000620a:	4413      	add	r3, r2
2000620c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006210:	681a      	ldr	r2, [r3, #0]
20006212:	683b      	ldr	r3, [r7, #0]
20006214:	689b      	ldr	r3, [r3, #8]
20006216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
2000621a:	683b      	ldr	r3, [r7, #0]
2000621c:	791b      	ldrb	r3, [r3, #4]
2000621e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
20006220:	430b      	orrs	r3, r1
20006222:	431a      	orrs	r2, r3
20006224:	68bb      	ldr	r3, [r7, #8]
20006226:	0159      	lsls	r1, r3, #5
20006228:	68fb      	ldr	r3, [r7, #12]
2000622a:	440b      	add	r3, r1
2000622c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006230:	4619      	mov	r1, r3
20006232:	4b05      	ldr	r3, [pc, #20]	@ (20006248 <USB_ActivateEndpoint+0x10c>)
20006234:	4313      	orrs	r3, r2
20006236:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
20006238:	2300      	movs	r3, #0
}
2000623a:	4618      	mov	r0, r3
2000623c:	3714      	adds	r7, #20
2000623e:	46bd      	mov	sp, r7
20006240:	f85d 7b04 	ldr.w	r7, [sp], #4
20006244:	4770      	bx	lr
20006246:	bf00      	nop
20006248:	10008000 	.word	0x10008000

2000624c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
2000624c:	b480      	push	{r7}
2000624e:	b085      	sub	sp, #20
20006250:	af00      	add	r7, sp, #0
20006252:	6078      	str	r0, [r7, #4]
20006254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006256:	687b      	ldr	r3, [r7, #4]
20006258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
2000625a:	683b      	ldr	r3, [r7, #0]
2000625c:	781b      	ldrb	r3, [r3, #0]
2000625e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
20006260:	683b      	ldr	r3, [r7, #0]
20006262:	785b      	ldrb	r3, [r3, #1]
20006264:	2b01      	cmp	r3, #1
20006266:	d161      	bne.n	2000632c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
20006268:	68bb      	ldr	r3, [r7, #8]
2000626a:	015a      	lsls	r2, r3, #5
2000626c:	68fb      	ldr	r3, [r7, #12]
2000626e:	4413      	add	r3, r2
20006270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006274:	681b      	ldr	r3, [r3, #0]
20006276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000627a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
2000627e:	d11f      	bne.n	200062c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
20006280:	68bb      	ldr	r3, [r7, #8]
20006282:	015a      	lsls	r2, r3, #5
20006284:	68fb      	ldr	r3, [r7, #12]
20006286:	4413      	add	r3, r2
20006288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000628c:	681b      	ldr	r3, [r3, #0]
2000628e:	68ba      	ldr	r2, [r7, #8]
20006290:	0151      	lsls	r1, r2, #5
20006292:	68fa      	ldr	r2, [r7, #12]
20006294:	440a      	add	r2, r1
20006296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000629a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
2000629e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
200062a0:	68bb      	ldr	r3, [r7, #8]
200062a2:	015a      	lsls	r2, r3, #5
200062a4:	68fb      	ldr	r3, [r7, #12]
200062a6:	4413      	add	r3, r2
200062a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200062ac:	681b      	ldr	r3, [r3, #0]
200062ae:	68ba      	ldr	r2, [r7, #8]
200062b0:	0151      	lsls	r1, r2, #5
200062b2:	68fa      	ldr	r2, [r7, #12]
200062b4:	440a      	add	r2, r1
200062b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200062ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
200062be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
200062c0:	68fb      	ldr	r3, [r7, #12]
200062c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200062c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
200062c8:	683b      	ldr	r3, [r7, #0]
200062ca:	781b      	ldrb	r3, [r3, #0]
200062cc:	f003 030f 	and.w	r3, r3, #15
200062d0:	2101      	movs	r1, #1
200062d2:	fa01 f303 	lsl.w	r3, r1, r3
200062d6:	b29b      	uxth	r3, r3
200062d8:	43db      	mvns	r3, r3
200062da:	68f9      	ldr	r1, [r7, #12]
200062dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200062e0:	4013      	ands	r3, r2
200062e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
200062e4:	68fb      	ldr	r3, [r7, #12]
200062e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200062ea:	69da      	ldr	r2, [r3, #28]
200062ec:	683b      	ldr	r3, [r7, #0]
200062ee:	781b      	ldrb	r3, [r3, #0]
200062f0:	f003 030f 	and.w	r3, r3, #15
200062f4:	2101      	movs	r1, #1
200062f6:	fa01 f303 	lsl.w	r3, r1, r3
200062fa:	b29b      	uxth	r3, r3
200062fc:	43db      	mvns	r3, r3
200062fe:	68f9      	ldr	r1, [r7, #12]
20006300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20006304:	4013      	ands	r3, r2
20006306:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
20006308:	68bb      	ldr	r3, [r7, #8]
2000630a:	015a      	lsls	r2, r3, #5
2000630c:	68fb      	ldr	r3, [r7, #12]
2000630e:	4413      	add	r3, r2
20006310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006314:	681a      	ldr	r2, [r3, #0]
20006316:	68bb      	ldr	r3, [r7, #8]
20006318:	0159      	lsls	r1, r3, #5
2000631a:	68fb      	ldr	r3, [r7, #12]
2000631c:	440b      	add	r3, r1
2000631e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006322:	4619      	mov	r1, r3
20006324:	4b35      	ldr	r3, [pc, #212]	@ (200063fc <USB_DeactivateEndpoint+0x1b0>)
20006326:	4013      	ands	r3, r2
20006328:	600b      	str	r3, [r1, #0]
2000632a:	e060      	b.n	200063ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
2000632c:	68bb      	ldr	r3, [r7, #8]
2000632e:	015a      	lsls	r2, r3, #5
20006330:	68fb      	ldr	r3, [r7, #12]
20006332:	4413      	add	r3, r2
20006334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006338:	681b      	ldr	r3, [r3, #0]
2000633a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000633e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20006342:	d11f      	bne.n	20006384 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
20006344:	68bb      	ldr	r3, [r7, #8]
20006346:	015a      	lsls	r2, r3, #5
20006348:	68fb      	ldr	r3, [r7, #12]
2000634a:	4413      	add	r3, r2
2000634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006350:	681b      	ldr	r3, [r3, #0]
20006352:	68ba      	ldr	r2, [r7, #8]
20006354:	0151      	lsls	r1, r2, #5
20006356:	68fa      	ldr	r2, [r7, #12]
20006358:	440a      	add	r2, r1
2000635a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000635e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20006362:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
20006364:	68bb      	ldr	r3, [r7, #8]
20006366:	015a      	lsls	r2, r3, #5
20006368:	68fb      	ldr	r3, [r7, #12]
2000636a:	4413      	add	r3, r2
2000636c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006370:	681b      	ldr	r3, [r3, #0]
20006372:	68ba      	ldr	r2, [r7, #8]
20006374:	0151      	lsls	r1, r2, #5
20006376:	68fa      	ldr	r2, [r7, #12]
20006378:	440a      	add	r2, r1
2000637a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000637e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20006382:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
20006384:	68fb      	ldr	r3, [r7, #12]
20006386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000638a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
2000638c:	683b      	ldr	r3, [r7, #0]
2000638e:	781b      	ldrb	r3, [r3, #0]
20006390:	f003 030f 	and.w	r3, r3, #15
20006394:	2101      	movs	r1, #1
20006396:	fa01 f303 	lsl.w	r3, r1, r3
2000639a:	041b      	lsls	r3, r3, #16
2000639c:	43db      	mvns	r3, r3
2000639e:	68f9      	ldr	r1, [r7, #12]
200063a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200063a4:	4013      	ands	r3, r2
200063a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
200063a8:	68fb      	ldr	r3, [r7, #12]
200063aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200063ae:	69da      	ldr	r2, [r3, #28]
200063b0:	683b      	ldr	r3, [r7, #0]
200063b2:	781b      	ldrb	r3, [r3, #0]
200063b4:	f003 030f 	and.w	r3, r3, #15
200063b8:	2101      	movs	r1, #1
200063ba:	fa01 f303 	lsl.w	r3, r1, r3
200063be:	041b      	lsls	r3, r3, #16
200063c0:	43db      	mvns	r3, r3
200063c2:	68f9      	ldr	r1, [r7, #12]
200063c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200063c8:	4013      	ands	r3, r2
200063ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
200063cc:	68bb      	ldr	r3, [r7, #8]
200063ce:	015a      	lsls	r2, r3, #5
200063d0:	68fb      	ldr	r3, [r7, #12]
200063d2:	4413      	add	r3, r2
200063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200063d8:	681a      	ldr	r2, [r3, #0]
200063da:	68bb      	ldr	r3, [r7, #8]
200063dc:	0159      	lsls	r1, r3, #5
200063de:	68fb      	ldr	r3, [r7, #12]
200063e0:	440b      	add	r3, r1
200063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200063e6:	4619      	mov	r1, r3
200063e8:	4b05      	ldr	r3, [pc, #20]	@ (20006400 <USB_DeactivateEndpoint+0x1b4>)
200063ea:	4013      	ands	r3, r2
200063ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
200063ee:	2300      	movs	r3, #0
}
200063f0:	4618      	mov	r0, r3
200063f2:	3714      	adds	r7, #20
200063f4:	46bd      	mov	sp, r7
200063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200063fa:	4770      	bx	lr
200063fc:	ec337800 	.word	0xec337800
20006400:	eff37800 	.word	0xeff37800

20006404 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
20006404:	b580      	push	{r7, lr}
20006406:	b08a      	sub	sp, #40	@ 0x28
20006408:	af02      	add	r7, sp, #8
2000640a:	60f8      	str	r0, [r7, #12]
2000640c:	60b9      	str	r1, [r7, #8]
2000640e:	4613      	mov	r3, r2
20006410:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006412:	68fb      	ldr	r3, [r7, #12]
20006414:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
20006416:	68bb      	ldr	r3, [r7, #8]
20006418:	781b      	ldrb	r3, [r3, #0]
2000641a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
2000641c:	68bb      	ldr	r3, [r7, #8]
2000641e:	785b      	ldrb	r3, [r3, #1]
20006420:	2b01      	cmp	r3, #1
20006422:	f040 8185 	bne.w	20006730 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
20006426:	68bb      	ldr	r3, [r7, #8]
20006428:	691b      	ldr	r3, [r3, #16]
2000642a:	2b00      	cmp	r3, #0
2000642c:	d132      	bne.n	20006494 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
2000642e:	69bb      	ldr	r3, [r7, #24]
20006430:	015a      	lsls	r2, r3, #5
20006432:	69fb      	ldr	r3, [r7, #28]
20006434:	4413      	add	r3, r2
20006436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000643a:	691a      	ldr	r2, [r3, #16]
2000643c:	69bb      	ldr	r3, [r7, #24]
2000643e:	0159      	lsls	r1, r3, #5
20006440:	69fb      	ldr	r3, [r7, #28]
20006442:	440b      	add	r3, r1
20006444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006448:	4619      	mov	r1, r3
2000644a:	4ba7      	ldr	r3, [pc, #668]	@ (200066e8 <USB_EPStartXfer+0x2e4>)
2000644c:	4013      	ands	r3, r2
2000644e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
20006450:	69bb      	ldr	r3, [r7, #24]
20006452:	015a      	lsls	r2, r3, #5
20006454:	69fb      	ldr	r3, [r7, #28]
20006456:	4413      	add	r3, r2
20006458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000645c:	691b      	ldr	r3, [r3, #16]
2000645e:	69ba      	ldr	r2, [r7, #24]
20006460:	0151      	lsls	r1, r2, #5
20006462:	69fa      	ldr	r2, [r7, #28]
20006464:	440a      	add	r2, r1
20006466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000646a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2000646e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20006470:	69bb      	ldr	r3, [r7, #24]
20006472:	015a      	lsls	r2, r3, #5
20006474:	69fb      	ldr	r3, [r7, #28]
20006476:	4413      	add	r3, r2
20006478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000647c:	691a      	ldr	r2, [r3, #16]
2000647e:	69bb      	ldr	r3, [r7, #24]
20006480:	0159      	lsls	r1, r3, #5
20006482:	69fb      	ldr	r3, [r7, #28]
20006484:	440b      	add	r3, r1
20006486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000648a:	4619      	mov	r1, r3
2000648c:	4b97      	ldr	r3, [pc, #604]	@ (200066ec <USB_EPStartXfer+0x2e8>)
2000648e:	4013      	ands	r3, r2
20006490:	610b      	str	r3, [r1, #16]
20006492:	e097      	b.n	200065c4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
20006494:	69bb      	ldr	r3, [r7, #24]
20006496:	015a      	lsls	r2, r3, #5
20006498:	69fb      	ldr	r3, [r7, #28]
2000649a:	4413      	add	r3, r2
2000649c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200064a0:	691a      	ldr	r2, [r3, #16]
200064a2:	69bb      	ldr	r3, [r7, #24]
200064a4:	0159      	lsls	r1, r3, #5
200064a6:	69fb      	ldr	r3, [r7, #28]
200064a8:	440b      	add	r3, r1
200064aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200064ae:	4619      	mov	r1, r3
200064b0:	4b8e      	ldr	r3, [pc, #568]	@ (200066ec <USB_EPStartXfer+0x2e8>)
200064b2:	4013      	ands	r3, r2
200064b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
200064b6:	69bb      	ldr	r3, [r7, #24]
200064b8:	015a      	lsls	r2, r3, #5
200064ba:	69fb      	ldr	r3, [r7, #28]
200064bc:	4413      	add	r3, r2
200064be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200064c2:	691a      	ldr	r2, [r3, #16]
200064c4:	69bb      	ldr	r3, [r7, #24]
200064c6:	0159      	lsls	r1, r3, #5
200064c8:	69fb      	ldr	r3, [r7, #28]
200064ca:	440b      	add	r3, r1
200064cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200064d0:	4619      	mov	r1, r3
200064d2:	4b85      	ldr	r3, [pc, #532]	@ (200066e8 <USB_EPStartXfer+0x2e4>)
200064d4:	4013      	ands	r3, r2
200064d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
200064d8:	69bb      	ldr	r3, [r7, #24]
200064da:	2b00      	cmp	r3, #0
200064dc:	d11a      	bne.n	20006514 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
200064de:	68bb      	ldr	r3, [r7, #8]
200064e0:	691a      	ldr	r2, [r3, #16]
200064e2:	68bb      	ldr	r3, [r7, #8]
200064e4:	689b      	ldr	r3, [r3, #8]
200064e6:	429a      	cmp	r2, r3
200064e8:	d903      	bls.n	200064f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
200064ea:	68bb      	ldr	r3, [r7, #8]
200064ec:	689a      	ldr	r2, [r3, #8]
200064ee:	68bb      	ldr	r3, [r7, #8]
200064f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
200064f2:	69bb      	ldr	r3, [r7, #24]
200064f4:	015a      	lsls	r2, r3, #5
200064f6:	69fb      	ldr	r3, [r7, #28]
200064f8:	4413      	add	r3, r2
200064fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200064fe:	691b      	ldr	r3, [r3, #16]
20006500:	69ba      	ldr	r2, [r7, #24]
20006502:	0151      	lsls	r1, r2, #5
20006504:	69fa      	ldr	r2, [r7, #28]
20006506:	440a      	add	r2, r1
20006508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000650c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20006510:	6113      	str	r3, [r2, #16]
20006512:	e044      	b.n	2000659e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
20006514:	68bb      	ldr	r3, [r7, #8]
20006516:	691a      	ldr	r2, [r3, #16]
20006518:	68bb      	ldr	r3, [r7, #8]
2000651a:	689b      	ldr	r3, [r3, #8]
2000651c:	4413      	add	r3, r2
2000651e:	1e5a      	subs	r2, r3, #1
20006520:	68bb      	ldr	r3, [r7, #8]
20006522:	689b      	ldr	r3, [r3, #8]
20006524:	fbb2 f3f3 	udiv	r3, r2, r3
20006528:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
2000652a:	69bb      	ldr	r3, [r7, #24]
2000652c:	015a      	lsls	r2, r3, #5
2000652e:	69fb      	ldr	r3, [r7, #28]
20006530:	4413      	add	r3, r2
20006532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006536:	691a      	ldr	r2, [r3, #16]
20006538:	8afb      	ldrh	r3, [r7, #22]
2000653a:	04d9      	lsls	r1, r3, #19
2000653c:	4b6c      	ldr	r3, [pc, #432]	@ (200066f0 <USB_EPStartXfer+0x2ec>)
2000653e:	400b      	ands	r3, r1
20006540:	69b9      	ldr	r1, [r7, #24]
20006542:	0148      	lsls	r0, r1, #5
20006544:	69f9      	ldr	r1, [r7, #28]
20006546:	4401      	add	r1, r0
20006548:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
2000654c:	4313      	orrs	r3, r2
2000654e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
20006550:	68bb      	ldr	r3, [r7, #8]
20006552:	791b      	ldrb	r3, [r3, #4]
20006554:	2b01      	cmp	r3, #1
20006556:	d122      	bne.n	2000659e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
20006558:	69bb      	ldr	r3, [r7, #24]
2000655a:	015a      	lsls	r2, r3, #5
2000655c:	69fb      	ldr	r3, [r7, #28]
2000655e:	4413      	add	r3, r2
20006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006564:	691b      	ldr	r3, [r3, #16]
20006566:	69ba      	ldr	r2, [r7, #24]
20006568:	0151      	lsls	r1, r2, #5
2000656a:	69fa      	ldr	r2, [r7, #28]
2000656c:	440a      	add	r2, r1
2000656e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20006572:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
20006576:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
20006578:	69bb      	ldr	r3, [r7, #24]
2000657a:	015a      	lsls	r2, r3, #5
2000657c:	69fb      	ldr	r3, [r7, #28]
2000657e:	4413      	add	r3, r2
20006580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006584:	691a      	ldr	r2, [r3, #16]
20006586:	8afb      	ldrh	r3, [r7, #22]
20006588:	075b      	lsls	r3, r3, #29
2000658a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
2000658e:	69b9      	ldr	r1, [r7, #24]
20006590:	0148      	lsls	r0, r1, #5
20006592:	69f9      	ldr	r1, [r7, #28]
20006594:	4401      	add	r1, r0
20006596:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
2000659a:	4313      	orrs	r3, r2
2000659c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
2000659e:	69bb      	ldr	r3, [r7, #24]
200065a0:	015a      	lsls	r2, r3, #5
200065a2:	69fb      	ldr	r3, [r7, #28]
200065a4:	4413      	add	r3, r2
200065a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200065aa:	691a      	ldr	r2, [r3, #16]
200065ac:	68bb      	ldr	r3, [r7, #8]
200065ae:	691b      	ldr	r3, [r3, #16]
200065b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
200065b4:	69b9      	ldr	r1, [r7, #24]
200065b6:	0148      	lsls	r0, r1, #5
200065b8:	69f9      	ldr	r1, [r7, #28]
200065ba:	4401      	add	r1, r0
200065bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
200065c0:	4313      	orrs	r3, r2
200065c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
200065c4:	79fb      	ldrb	r3, [r7, #7]
200065c6:	2b01      	cmp	r3, #1
200065c8:	d14b      	bne.n	20006662 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
200065ca:	68bb      	ldr	r3, [r7, #8]
200065cc:	69db      	ldr	r3, [r3, #28]
200065ce:	2b00      	cmp	r3, #0
200065d0:	d009      	beq.n	200065e6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
200065d2:	69bb      	ldr	r3, [r7, #24]
200065d4:	015a      	lsls	r2, r3, #5
200065d6:	69fb      	ldr	r3, [r7, #28]
200065d8:	4413      	add	r3, r2
200065da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200065de:	461a      	mov	r2, r3
200065e0:	68bb      	ldr	r3, [r7, #8]
200065e2:	69db      	ldr	r3, [r3, #28]
200065e4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
200065e6:	68bb      	ldr	r3, [r7, #8]
200065e8:	791b      	ldrb	r3, [r3, #4]
200065ea:	2b01      	cmp	r3, #1
200065ec:	d128      	bne.n	20006640 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
200065ee:	69fb      	ldr	r3, [r7, #28]
200065f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200065f4:	689b      	ldr	r3, [r3, #8]
200065f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200065fa:	2b00      	cmp	r3, #0
200065fc:	d110      	bne.n	20006620 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
200065fe:	69bb      	ldr	r3, [r7, #24]
20006600:	015a      	lsls	r2, r3, #5
20006602:	69fb      	ldr	r3, [r7, #28]
20006604:	4413      	add	r3, r2
20006606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000660a:	681b      	ldr	r3, [r3, #0]
2000660c:	69ba      	ldr	r2, [r7, #24]
2000660e:	0151      	lsls	r1, r2, #5
20006610:	69fa      	ldr	r2, [r7, #28]
20006612:	440a      	add	r2, r1
20006614:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20006618:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
2000661c:	6013      	str	r3, [r2, #0]
2000661e:	e00f      	b.n	20006640 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
20006620:	69bb      	ldr	r3, [r7, #24]
20006622:	015a      	lsls	r2, r3, #5
20006624:	69fb      	ldr	r3, [r7, #28]
20006626:	4413      	add	r3, r2
20006628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000662c:	681b      	ldr	r3, [r3, #0]
2000662e:	69ba      	ldr	r2, [r7, #24]
20006630:	0151      	lsls	r1, r2, #5
20006632:	69fa      	ldr	r2, [r7, #28]
20006634:	440a      	add	r2, r1
20006636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000663a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000663e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20006640:	69bb      	ldr	r3, [r7, #24]
20006642:	015a      	lsls	r2, r3, #5
20006644:	69fb      	ldr	r3, [r7, #28]
20006646:	4413      	add	r3, r2
20006648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000664c:	681b      	ldr	r3, [r3, #0]
2000664e:	69ba      	ldr	r2, [r7, #24]
20006650:	0151      	lsls	r1, r2, #5
20006652:	69fa      	ldr	r2, [r7, #28]
20006654:	440a      	add	r2, r1
20006656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000665a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
2000665e:	6013      	str	r3, [r2, #0]
20006660:	e169      	b.n	20006936 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
20006662:	69bb      	ldr	r3, [r7, #24]
20006664:	015a      	lsls	r2, r3, #5
20006666:	69fb      	ldr	r3, [r7, #28]
20006668:	4413      	add	r3, r2
2000666a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
2000666e:	681b      	ldr	r3, [r3, #0]
20006670:	69ba      	ldr	r2, [r7, #24]
20006672:	0151      	lsls	r1, r2, #5
20006674:	69fa      	ldr	r2, [r7, #28]
20006676:	440a      	add	r2, r1
20006678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000667c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20006680:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
20006682:	68bb      	ldr	r3, [r7, #8]
20006684:	791b      	ldrb	r3, [r3, #4]
20006686:	2b01      	cmp	r3, #1
20006688:	d015      	beq.n	200066b6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
2000668a:	68bb      	ldr	r3, [r7, #8]
2000668c:	691b      	ldr	r3, [r3, #16]
2000668e:	2b00      	cmp	r3, #0
20006690:	f000 8151 	beq.w	20006936 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
20006694:	69fb      	ldr	r3, [r7, #28]
20006696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
2000669a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2000669c:	68bb      	ldr	r3, [r7, #8]
2000669e:	781b      	ldrb	r3, [r3, #0]
200066a0:	f003 030f 	and.w	r3, r3, #15
200066a4:	2101      	movs	r1, #1
200066a6:	fa01 f303 	lsl.w	r3, r1, r3
200066aa:	69f9      	ldr	r1, [r7, #28]
200066ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
200066b0:	4313      	orrs	r3, r2
200066b2:	634b      	str	r3, [r1, #52]	@ 0x34
200066b4:	e13f      	b.n	20006936 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
200066b6:	69fb      	ldr	r3, [r7, #28]
200066b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200066bc:	689b      	ldr	r3, [r3, #8]
200066be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200066c2:	2b00      	cmp	r3, #0
200066c4:	d116      	bne.n	200066f4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
200066c6:	69bb      	ldr	r3, [r7, #24]
200066c8:	015a      	lsls	r2, r3, #5
200066ca:	69fb      	ldr	r3, [r7, #28]
200066cc:	4413      	add	r3, r2
200066ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200066d2:	681b      	ldr	r3, [r3, #0]
200066d4:	69ba      	ldr	r2, [r7, #24]
200066d6:	0151      	lsls	r1, r2, #5
200066d8:	69fa      	ldr	r2, [r7, #28]
200066da:	440a      	add	r2, r1
200066dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200066e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
200066e4:	6013      	str	r3, [r2, #0]
200066e6:	e015      	b.n	20006714 <USB_EPStartXfer+0x310>
200066e8:	e007ffff 	.word	0xe007ffff
200066ec:	fff80000 	.word	0xfff80000
200066f0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
200066f4:	69bb      	ldr	r3, [r7, #24]
200066f6:	015a      	lsls	r2, r3, #5
200066f8:	69fb      	ldr	r3, [r7, #28]
200066fa:	4413      	add	r3, r2
200066fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006700:	681b      	ldr	r3, [r3, #0]
20006702:	69ba      	ldr	r2, [r7, #24]
20006704:	0151      	lsls	r1, r2, #5
20006706:	69fa      	ldr	r2, [r7, #28]
20006708:	440a      	add	r2, r1
2000670a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
2000670e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006712:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
20006714:	68bb      	ldr	r3, [r7, #8]
20006716:	68d9      	ldr	r1, [r3, #12]
20006718:	68bb      	ldr	r3, [r7, #8]
2000671a:	781a      	ldrb	r2, [r3, #0]
2000671c:	68bb      	ldr	r3, [r7, #8]
2000671e:	691b      	ldr	r3, [r3, #16]
20006720:	b298      	uxth	r0, r3
20006722:	79fb      	ldrb	r3, [r7, #7]
20006724:	9300      	str	r3, [sp, #0]
20006726:	4603      	mov	r3, r0
20006728:	68f8      	ldr	r0, [r7, #12]
2000672a:	f000 f9b9 	bl	20006aa0 <USB_WritePacket>
2000672e:	e102      	b.n	20006936 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
20006730:	69bb      	ldr	r3, [r7, #24]
20006732:	015a      	lsls	r2, r3, #5
20006734:	69fb      	ldr	r3, [r7, #28]
20006736:	4413      	add	r3, r2
20006738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000673c:	691a      	ldr	r2, [r3, #16]
2000673e:	69bb      	ldr	r3, [r7, #24]
20006740:	0159      	lsls	r1, r3, #5
20006742:	69fb      	ldr	r3, [r7, #28]
20006744:	440b      	add	r3, r1
20006746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000674a:	4619      	mov	r1, r3
2000674c:	4b7c      	ldr	r3, [pc, #496]	@ (20006940 <USB_EPStartXfer+0x53c>)
2000674e:	4013      	ands	r3, r2
20006750:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
20006752:	69bb      	ldr	r3, [r7, #24]
20006754:	015a      	lsls	r2, r3, #5
20006756:	69fb      	ldr	r3, [r7, #28]
20006758:	4413      	add	r3, r2
2000675a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000675e:	691a      	ldr	r2, [r3, #16]
20006760:	69bb      	ldr	r3, [r7, #24]
20006762:	0159      	lsls	r1, r3, #5
20006764:	69fb      	ldr	r3, [r7, #28]
20006766:	440b      	add	r3, r1
20006768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000676c:	4619      	mov	r1, r3
2000676e:	4b75      	ldr	r3, [pc, #468]	@ (20006944 <USB_EPStartXfer+0x540>)
20006770:	4013      	ands	r3, r2
20006772:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
20006774:	69bb      	ldr	r3, [r7, #24]
20006776:	2b00      	cmp	r3, #0
20006778:	d12f      	bne.n	200067da <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
2000677a:	68bb      	ldr	r3, [r7, #8]
2000677c:	691b      	ldr	r3, [r3, #16]
2000677e:	2b00      	cmp	r3, #0
20006780:	d003      	beq.n	2000678a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
20006782:	68bb      	ldr	r3, [r7, #8]
20006784:	689a      	ldr	r2, [r3, #8]
20006786:	68bb      	ldr	r3, [r7, #8]
20006788:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
2000678a:	68bb      	ldr	r3, [r7, #8]
2000678c:	689a      	ldr	r2, [r3, #8]
2000678e:	68bb      	ldr	r3, [r7, #8]
20006790:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
20006792:	69bb      	ldr	r3, [r7, #24]
20006794:	015a      	lsls	r2, r3, #5
20006796:	69fb      	ldr	r3, [r7, #28]
20006798:	4413      	add	r3, r2
2000679a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000679e:	691a      	ldr	r2, [r3, #16]
200067a0:	68bb      	ldr	r3, [r7, #8]
200067a2:	6a1b      	ldr	r3, [r3, #32]
200067a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
200067a8:	69b9      	ldr	r1, [r7, #24]
200067aa:	0148      	lsls	r0, r1, #5
200067ac:	69f9      	ldr	r1, [r7, #28]
200067ae:	4401      	add	r1, r0
200067b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
200067b4:	4313      	orrs	r3, r2
200067b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
200067b8:	69bb      	ldr	r3, [r7, #24]
200067ba:	015a      	lsls	r2, r3, #5
200067bc:	69fb      	ldr	r3, [r7, #28]
200067be:	4413      	add	r3, r2
200067c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200067c4:	691b      	ldr	r3, [r3, #16]
200067c6:	69ba      	ldr	r2, [r7, #24]
200067c8:	0151      	lsls	r1, r2, #5
200067ca:	69fa      	ldr	r2, [r7, #28]
200067cc:	440a      	add	r2, r1
200067ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200067d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
200067d6:	6113      	str	r3, [r2, #16]
200067d8:	e05f      	b.n	2000689a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
200067da:	68bb      	ldr	r3, [r7, #8]
200067dc:	691b      	ldr	r3, [r3, #16]
200067de:	2b00      	cmp	r3, #0
200067e0:	d123      	bne.n	2000682a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
200067e2:	69bb      	ldr	r3, [r7, #24]
200067e4:	015a      	lsls	r2, r3, #5
200067e6:	69fb      	ldr	r3, [r7, #28]
200067e8:	4413      	add	r3, r2
200067ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200067ee:	691a      	ldr	r2, [r3, #16]
200067f0:	68bb      	ldr	r3, [r7, #8]
200067f2:	689b      	ldr	r3, [r3, #8]
200067f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
200067f8:	69b9      	ldr	r1, [r7, #24]
200067fa:	0148      	lsls	r0, r1, #5
200067fc:	69f9      	ldr	r1, [r7, #28]
200067fe:	4401      	add	r1, r0
20006800:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20006804:	4313      	orrs	r3, r2
20006806:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
20006808:	69bb      	ldr	r3, [r7, #24]
2000680a:	015a      	lsls	r2, r3, #5
2000680c:	69fb      	ldr	r3, [r7, #28]
2000680e:	4413      	add	r3, r2
20006810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006814:	691b      	ldr	r3, [r3, #16]
20006816:	69ba      	ldr	r2, [r7, #24]
20006818:	0151      	lsls	r1, r2, #5
2000681a:	69fa      	ldr	r2, [r7, #28]
2000681c:	440a      	add	r2, r1
2000681e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006822:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20006826:	6113      	str	r3, [r2, #16]
20006828:	e037      	b.n	2000689a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
2000682a:	68bb      	ldr	r3, [r7, #8]
2000682c:	691a      	ldr	r2, [r3, #16]
2000682e:	68bb      	ldr	r3, [r7, #8]
20006830:	689b      	ldr	r3, [r3, #8]
20006832:	4413      	add	r3, r2
20006834:	1e5a      	subs	r2, r3, #1
20006836:	68bb      	ldr	r3, [r7, #8]
20006838:	689b      	ldr	r3, [r3, #8]
2000683a:	fbb2 f3f3 	udiv	r3, r2, r3
2000683e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
20006840:	68bb      	ldr	r3, [r7, #8]
20006842:	689b      	ldr	r3, [r3, #8]
20006844:	8afa      	ldrh	r2, [r7, #22]
20006846:	fb03 f202 	mul.w	r2, r3, r2
2000684a:	68bb      	ldr	r3, [r7, #8]
2000684c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
2000684e:	69bb      	ldr	r3, [r7, #24]
20006850:	015a      	lsls	r2, r3, #5
20006852:	69fb      	ldr	r3, [r7, #28]
20006854:	4413      	add	r3, r2
20006856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000685a:	691a      	ldr	r2, [r3, #16]
2000685c:	8afb      	ldrh	r3, [r7, #22]
2000685e:	04d9      	lsls	r1, r3, #19
20006860:	4b39      	ldr	r3, [pc, #228]	@ (20006948 <USB_EPStartXfer+0x544>)
20006862:	400b      	ands	r3, r1
20006864:	69b9      	ldr	r1, [r7, #24]
20006866:	0148      	lsls	r0, r1, #5
20006868:	69f9      	ldr	r1, [r7, #28]
2000686a:	4401      	add	r1, r0
2000686c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20006870:	4313      	orrs	r3, r2
20006872:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
20006874:	69bb      	ldr	r3, [r7, #24]
20006876:	015a      	lsls	r2, r3, #5
20006878:	69fb      	ldr	r3, [r7, #28]
2000687a:	4413      	add	r3, r2
2000687c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006880:	691a      	ldr	r2, [r3, #16]
20006882:	68bb      	ldr	r3, [r7, #8]
20006884:	6a1b      	ldr	r3, [r3, #32]
20006886:	f3c3 0312 	ubfx	r3, r3, #0, #19
2000688a:	69b9      	ldr	r1, [r7, #24]
2000688c:	0148      	lsls	r0, r1, #5
2000688e:	69f9      	ldr	r1, [r7, #28]
20006890:	4401      	add	r1, r0
20006892:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
20006896:	4313      	orrs	r3, r2
20006898:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
2000689a:	79fb      	ldrb	r3, [r7, #7]
2000689c:	2b01      	cmp	r3, #1
2000689e:	d10d      	bne.n	200068bc <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
200068a0:	68bb      	ldr	r3, [r7, #8]
200068a2:	68db      	ldr	r3, [r3, #12]
200068a4:	2b00      	cmp	r3, #0
200068a6:	d009      	beq.n	200068bc <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
200068a8:	68bb      	ldr	r3, [r7, #8]
200068aa:	68d9      	ldr	r1, [r3, #12]
200068ac:	69bb      	ldr	r3, [r7, #24]
200068ae:	015a      	lsls	r2, r3, #5
200068b0:	69fb      	ldr	r3, [r7, #28]
200068b2:	4413      	add	r3, r2
200068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200068b8:	460a      	mov	r2, r1
200068ba:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
200068bc:	68bb      	ldr	r3, [r7, #8]
200068be:	791b      	ldrb	r3, [r3, #4]
200068c0:	2b01      	cmp	r3, #1
200068c2:	d128      	bne.n	20006916 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
200068c4:	69fb      	ldr	r3, [r7, #28]
200068c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
200068ca:	689b      	ldr	r3, [r3, #8]
200068cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200068d0:	2b00      	cmp	r3, #0
200068d2:	d110      	bne.n	200068f6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
200068d4:	69bb      	ldr	r3, [r7, #24]
200068d6:	015a      	lsls	r2, r3, #5
200068d8:	69fb      	ldr	r3, [r7, #28]
200068da:	4413      	add	r3, r2
200068dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
200068e0:	681b      	ldr	r3, [r3, #0]
200068e2:	69ba      	ldr	r2, [r7, #24]
200068e4:	0151      	lsls	r1, r2, #5
200068e6:	69fa      	ldr	r2, [r7, #28]
200068e8:	440a      	add	r2, r1
200068ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
200068ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
200068f2:	6013      	str	r3, [r2, #0]
200068f4:	e00f      	b.n	20006916 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
200068f6:	69bb      	ldr	r3, [r7, #24]
200068f8:	015a      	lsls	r2, r3, #5
200068fa:	69fb      	ldr	r3, [r7, #28]
200068fc:	4413      	add	r3, r2
200068fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006902:	681b      	ldr	r3, [r3, #0]
20006904:	69ba      	ldr	r2, [r7, #24]
20006906:	0151      	lsls	r1, r2, #5
20006908:	69fa      	ldr	r2, [r7, #28]
2000690a:	440a      	add	r2, r1
2000690c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006914:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
20006916:	69bb      	ldr	r3, [r7, #24]
20006918:	015a      	lsls	r2, r3, #5
2000691a:	69fb      	ldr	r3, [r7, #28]
2000691c:	4413      	add	r3, r2
2000691e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006922:	681b      	ldr	r3, [r3, #0]
20006924:	69ba      	ldr	r2, [r7, #24]
20006926:	0151      	lsls	r1, r2, #5
20006928:	69fa      	ldr	r2, [r7, #28]
2000692a:	440a      	add	r2, r1
2000692c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006930:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
20006934:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
20006936:	2300      	movs	r3, #0
}
20006938:	4618      	mov	r0, r3
2000693a:	3720      	adds	r7, #32
2000693c:	46bd      	mov	sp, r7
2000693e:	bd80      	pop	{r7, pc}
20006940:	fff80000 	.word	0xfff80000
20006944:	e007ffff 	.word	0xe007ffff
20006948:	1ff80000 	.word	0x1ff80000

2000694c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
2000694c:	b480      	push	{r7}
2000694e:	b087      	sub	sp, #28
20006950:	af00      	add	r7, sp, #0
20006952:	6078      	str	r0, [r7, #4]
20006954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
20006956:	2300      	movs	r3, #0
20006958:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
2000695a:	2300      	movs	r3, #0
2000695c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
2000695e:	687b      	ldr	r3, [r7, #4]
20006960:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
20006962:	683b      	ldr	r3, [r7, #0]
20006964:	785b      	ldrb	r3, [r3, #1]
20006966:	2b01      	cmp	r3, #1
20006968:	d14a      	bne.n	20006a00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
2000696a:	683b      	ldr	r3, [r7, #0]
2000696c:	781b      	ldrb	r3, [r3, #0]
2000696e:	015a      	lsls	r2, r3, #5
20006970:	693b      	ldr	r3, [r7, #16]
20006972:	4413      	add	r3, r2
20006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006978:	681b      	ldr	r3, [r3, #0]
2000697a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
2000697e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20006982:	f040 8086 	bne.w	20006a92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
20006986:	683b      	ldr	r3, [r7, #0]
20006988:	781b      	ldrb	r3, [r3, #0]
2000698a:	015a      	lsls	r2, r3, #5
2000698c:	693b      	ldr	r3, [r7, #16]
2000698e:	4413      	add	r3, r2
20006990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006994:	681b      	ldr	r3, [r3, #0]
20006996:	683a      	ldr	r2, [r7, #0]
20006998:	7812      	ldrb	r2, [r2, #0]
2000699a:	0151      	lsls	r1, r2, #5
2000699c:	693a      	ldr	r2, [r7, #16]
2000699e:	440a      	add	r2, r1
200069a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200069a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
200069a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
200069aa:	683b      	ldr	r3, [r7, #0]
200069ac:	781b      	ldrb	r3, [r3, #0]
200069ae:	015a      	lsls	r2, r3, #5
200069b0:	693b      	ldr	r3, [r7, #16]
200069b2:	4413      	add	r3, r2
200069b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200069b8:	681b      	ldr	r3, [r3, #0]
200069ba:	683a      	ldr	r2, [r7, #0]
200069bc:	7812      	ldrb	r2, [r2, #0]
200069be:	0151      	lsls	r1, r2, #5
200069c0:	693a      	ldr	r2, [r7, #16]
200069c2:	440a      	add	r2, r1
200069c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
200069c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
200069cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
200069ce:	68fb      	ldr	r3, [r7, #12]
200069d0:	3301      	adds	r3, #1
200069d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
200069d4:	68fb      	ldr	r3, [r7, #12]
200069d6:	f242 7210 	movw	r2, #10000	@ 0x2710
200069da:	4293      	cmp	r3, r2
200069dc:	d902      	bls.n	200069e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
200069de:	2301      	movs	r3, #1
200069e0:	75fb      	strb	r3, [r7, #23]
          break;
200069e2:	e056      	b.n	20006a92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
200069e4:	683b      	ldr	r3, [r7, #0]
200069e6:	781b      	ldrb	r3, [r3, #0]
200069e8:	015a      	lsls	r2, r3, #5
200069ea:	693b      	ldr	r3, [r7, #16]
200069ec:	4413      	add	r3, r2
200069ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
200069f2:	681b      	ldr	r3, [r3, #0]
200069f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
200069f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
200069fc:	d0e7      	beq.n	200069ce <USB_EPStopXfer+0x82>
200069fe:	e048      	b.n	20006a92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20006a00:	683b      	ldr	r3, [r7, #0]
20006a02:	781b      	ldrb	r3, [r3, #0]
20006a04:	015a      	lsls	r2, r3, #5
20006a06:	693b      	ldr	r3, [r7, #16]
20006a08:	4413      	add	r3, r2
20006a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006a0e:	681b      	ldr	r3, [r3, #0]
20006a10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20006a14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20006a18:	d13b      	bne.n	20006a92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
20006a1a:	683b      	ldr	r3, [r7, #0]
20006a1c:	781b      	ldrb	r3, [r3, #0]
20006a1e:	015a      	lsls	r2, r3, #5
20006a20:	693b      	ldr	r3, [r7, #16]
20006a22:	4413      	add	r3, r2
20006a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006a28:	681b      	ldr	r3, [r3, #0]
20006a2a:	683a      	ldr	r2, [r7, #0]
20006a2c:	7812      	ldrb	r2, [r2, #0]
20006a2e:	0151      	lsls	r1, r2, #5
20006a30:	693a      	ldr	r2, [r7, #16]
20006a32:	440a      	add	r2, r1
20006a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006a38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
20006a3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
20006a3e:	683b      	ldr	r3, [r7, #0]
20006a40:	781b      	ldrb	r3, [r3, #0]
20006a42:	015a      	lsls	r2, r3, #5
20006a44:	693b      	ldr	r3, [r7, #16]
20006a46:	4413      	add	r3, r2
20006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006a4c:	681b      	ldr	r3, [r3, #0]
20006a4e:	683a      	ldr	r2, [r7, #0]
20006a50:	7812      	ldrb	r2, [r2, #0]
20006a52:	0151      	lsls	r1, r2, #5
20006a54:	693a      	ldr	r2, [r7, #16]
20006a56:	440a      	add	r2, r1
20006a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006a5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20006a60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
20006a62:	68fb      	ldr	r3, [r7, #12]
20006a64:	3301      	adds	r3, #1
20006a66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
20006a68:	68fb      	ldr	r3, [r7, #12]
20006a6a:	f242 7210 	movw	r2, #10000	@ 0x2710
20006a6e:	4293      	cmp	r3, r2
20006a70:	d902      	bls.n	20006a78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
20006a72:	2301      	movs	r3, #1
20006a74:	75fb      	strb	r3, [r7, #23]
          break;
20006a76:	e00c      	b.n	20006a92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
20006a78:	683b      	ldr	r3, [r7, #0]
20006a7a:	781b      	ldrb	r3, [r3, #0]
20006a7c:	015a      	lsls	r2, r3, #5
20006a7e:	693b      	ldr	r3, [r7, #16]
20006a80:	4413      	add	r3, r2
20006a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006a86:	681b      	ldr	r3, [r3, #0]
20006a88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20006a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20006a90:	d0e7      	beq.n	20006a62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
20006a92:	7dfb      	ldrb	r3, [r7, #23]
}
20006a94:	4618      	mov	r0, r3
20006a96:	371c      	adds	r7, #28
20006a98:	46bd      	mov	sp, r7
20006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20006a9e:	4770      	bx	lr

20006aa0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
20006aa0:	b480      	push	{r7}
20006aa2:	b089      	sub	sp, #36	@ 0x24
20006aa4:	af00      	add	r7, sp, #0
20006aa6:	60f8      	str	r0, [r7, #12]
20006aa8:	60b9      	str	r1, [r7, #8]
20006aaa:	4611      	mov	r1, r2
20006aac:	461a      	mov	r2, r3
20006aae:	460b      	mov	r3, r1
20006ab0:	71fb      	strb	r3, [r7, #7]
20006ab2:	4613      	mov	r3, r2
20006ab4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006ab6:	68fb      	ldr	r3, [r7, #12]
20006ab8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
20006aba:	68bb      	ldr	r3, [r7, #8]
20006abc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
20006abe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
20006ac2:	2b00      	cmp	r3, #0
20006ac4:	d123      	bne.n	20006b0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
20006ac6:	88bb      	ldrh	r3, [r7, #4]
20006ac8:	3303      	adds	r3, #3
20006aca:	089b      	lsrs	r3, r3, #2
20006acc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
20006ace:	2300      	movs	r3, #0
20006ad0:	61bb      	str	r3, [r7, #24]
20006ad2:	e018      	b.n	20006b06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
20006ad4:	79fb      	ldrb	r3, [r7, #7]
20006ad6:	031a      	lsls	r2, r3, #12
20006ad8:	697b      	ldr	r3, [r7, #20]
20006ada:	4413      	add	r3, r2
20006adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20006ae0:	461a      	mov	r2, r3
20006ae2:	69fb      	ldr	r3, [r7, #28]
20006ae4:	681b      	ldr	r3, [r3, #0]
20006ae6:	6013      	str	r3, [r2, #0]
      pSrc++;
20006ae8:	69fb      	ldr	r3, [r7, #28]
20006aea:	3301      	adds	r3, #1
20006aec:	61fb      	str	r3, [r7, #28]
      pSrc++;
20006aee:	69fb      	ldr	r3, [r7, #28]
20006af0:	3301      	adds	r3, #1
20006af2:	61fb      	str	r3, [r7, #28]
      pSrc++;
20006af4:	69fb      	ldr	r3, [r7, #28]
20006af6:	3301      	adds	r3, #1
20006af8:	61fb      	str	r3, [r7, #28]
      pSrc++;
20006afa:	69fb      	ldr	r3, [r7, #28]
20006afc:	3301      	adds	r3, #1
20006afe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
20006b00:	69bb      	ldr	r3, [r7, #24]
20006b02:	3301      	adds	r3, #1
20006b04:	61bb      	str	r3, [r7, #24]
20006b06:	69ba      	ldr	r2, [r7, #24]
20006b08:	693b      	ldr	r3, [r7, #16]
20006b0a:	429a      	cmp	r2, r3
20006b0c:	d3e2      	bcc.n	20006ad4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
20006b0e:	2300      	movs	r3, #0
}
20006b10:	4618      	mov	r0, r3
20006b12:	3724      	adds	r7, #36	@ 0x24
20006b14:	46bd      	mov	sp, r7
20006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
20006b1a:	4770      	bx	lr

20006b1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
20006b1c:	b480      	push	{r7}
20006b1e:	b08b      	sub	sp, #44	@ 0x2c
20006b20:	af00      	add	r7, sp, #0
20006b22:	60f8      	str	r0, [r7, #12]
20006b24:	60b9      	str	r1, [r7, #8]
20006b26:	4613      	mov	r3, r2
20006b28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006b2a:	68fb      	ldr	r3, [r7, #12]
20006b2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
20006b2e:	68bb      	ldr	r3, [r7, #8]
20006b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
20006b32:	88fb      	ldrh	r3, [r7, #6]
20006b34:	089b      	lsrs	r3, r3, #2
20006b36:	b29b      	uxth	r3, r3
20006b38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
20006b3a:	88fb      	ldrh	r3, [r7, #6]
20006b3c:	f003 0303 	and.w	r3, r3, #3
20006b40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
20006b42:	2300      	movs	r3, #0
20006b44:	623b      	str	r3, [r7, #32]
20006b46:	e014      	b.n	20006b72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
20006b48:	69bb      	ldr	r3, [r7, #24]
20006b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20006b4e:	681a      	ldr	r2, [r3, #0]
20006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006b52:	601a      	str	r2, [r3, #0]
    pDest++;
20006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006b56:	3301      	adds	r3, #1
20006b58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006b5c:	3301      	adds	r3, #1
20006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006b62:	3301      	adds	r3, #1
20006b64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
20006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006b68:	3301      	adds	r3, #1
20006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
20006b6c:	6a3b      	ldr	r3, [r7, #32]
20006b6e:	3301      	adds	r3, #1
20006b70:	623b      	str	r3, [r7, #32]
20006b72:	6a3a      	ldr	r2, [r7, #32]
20006b74:	697b      	ldr	r3, [r7, #20]
20006b76:	429a      	cmp	r2, r3
20006b78:	d3e6      	bcc.n	20006b48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
20006b7a:	8bfb      	ldrh	r3, [r7, #30]
20006b7c:	2b00      	cmp	r3, #0
20006b7e:	d01e      	beq.n	20006bbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
20006b80:	2300      	movs	r3, #0
20006b82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
20006b84:	69bb      	ldr	r3, [r7, #24]
20006b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20006b8a:	461a      	mov	r2, r3
20006b8c:	f107 0310 	add.w	r3, r7, #16
20006b90:	6812      	ldr	r2, [r2, #0]
20006b92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
20006b94:	693a      	ldr	r2, [r7, #16]
20006b96:	6a3b      	ldr	r3, [r7, #32]
20006b98:	b2db      	uxtb	r3, r3
20006b9a:	00db      	lsls	r3, r3, #3
20006b9c:	fa22 f303 	lsr.w	r3, r2, r3
20006ba0:	b2da      	uxtb	r2, r3
20006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006ba4:	701a      	strb	r2, [r3, #0]
      i++;
20006ba6:	6a3b      	ldr	r3, [r7, #32]
20006ba8:	3301      	adds	r3, #1
20006baa:	623b      	str	r3, [r7, #32]
      pDest++;
20006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20006bae:	3301      	adds	r3, #1
20006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
20006bb2:	8bfb      	ldrh	r3, [r7, #30]
20006bb4:	3b01      	subs	r3, #1
20006bb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
20006bb8:	8bfb      	ldrh	r3, [r7, #30]
20006bba:	2b00      	cmp	r3, #0
20006bbc:	d1ea      	bne.n	20006b94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
20006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
20006bc0:	4618      	mov	r0, r3
20006bc2:	372c      	adds	r7, #44	@ 0x2c
20006bc4:	46bd      	mov	sp, r7
20006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20006bca:	4770      	bx	lr

20006bcc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20006bcc:	b480      	push	{r7}
20006bce:	b085      	sub	sp, #20
20006bd0:	af00      	add	r7, sp, #0
20006bd2:	6078      	str	r0, [r7, #4]
20006bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006bd6:	687b      	ldr	r3, [r7, #4]
20006bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20006bda:	683b      	ldr	r3, [r7, #0]
20006bdc:	781b      	ldrb	r3, [r3, #0]
20006bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20006be0:	683b      	ldr	r3, [r7, #0]
20006be2:	785b      	ldrb	r3, [r3, #1]
20006be4:	2b01      	cmp	r3, #1
20006be6:	d12c      	bne.n	20006c42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
20006be8:	68bb      	ldr	r3, [r7, #8]
20006bea:	015a      	lsls	r2, r3, #5
20006bec:	68fb      	ldr	r3, [r7, #12]
20006bee:	4413      	add	r3, r2
20006bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006bf4:	681b      	ldr	r3, [r3, #0]
20006bf6:	2b00      	cmp	r3, #0
20006bf8:	db12      	blt.n	20006c20 <USB_EPSetStall+0x54>
20006bfa:	68bb      	ldr	r3, [r7, #8]
20006bfc:	2b00      	cmp	r3, #0
20006bfe:	d00f      	beq.n	20006c20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
20006c00:	68bb      	ldr	r3, [r7, #8]
20006c02:	015a      	lsls	r2, r3, #5
20006c04:	68fb      	ldr	r3, [r7, #12]
20006c06:	4413      	add	r3, r2
20006c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006c0c:	681b      	ldr	r3, [r3, #0]
20006c0e:	68ba      	ldr	r2, [r7, #8]
20006c10:	0151      	lsls	r1, r2, #5
20006c12:	68fa      	ldr	r2, [r7, #12]
20006c14:	440a      	add	r2, r1
20006c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20006c1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
20006c1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
20006c20:	68bb      	ldr	r3, [r7, #8]
20006c22:	015a      	lsls	r2, r3, #5
20006c24:	68fb      	ldr	r3, [r7, #12]
20006c26:	4413      	add	r3, r2
20006c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006c2c:	681b      	ldr	r3, [r3, #0]
20006c2e:	68ba      	ldr	r2, [r7, #8]
20006c30:	0151      	lsls	r1, r2, #5
20006c32:	68fa      	ldr	r2, [r7, #12]
20006c34:	440a      	add	r2, r1
20006c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20006c3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
20006c3e:	6013      	str	r3, [r2, #0]
20006c40:	e02b      	b.n	20006c9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
20006c42:	68bb      	ldr	r3, [r7, #8]
20006c44:	015a      	lsls	r2, r3, #5
20006c46:	68fb      	ldr	r3, [r7, #12]
20006c48:	4413      	add	r3, r2
20006c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006c4e:	681b      	ldr	r3, [r3, #0]
20006c50:	2b00      	cmp	r3, #0
20006c52:	db12      	blt.n	20006c7a <USB_EPSetStall+0xae>
20006c54:	68bb      	ldr	r3, [r7, #8]
20006c56:	2b00      	cmp	r3, #0
20006c58:	d00f      	beq.n	20006c7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
20006c5a:	68bb      	ldr	r3, [r7, #8]
20006c5c:	015a      	lsls	r2, r3, #5
20006c5e:	68fb      	ldr	r3, [r7, #12]
20006c60:	4413      	add	r3, r2
20006c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006c66:	681b      	ldr	r3, [r3, #0]
20006c68:	68ba      	ldr	r2, [r7, #8]
20006c6a:	0151      	lsls	r1, r2, #5
20006c6c:	68fa      	ldr	r2, [r7, #12]
20006c6e:	440a      	add	r2, r1
20006c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006c74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
20006c78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
20006c7a:	68bb      	ldr	r3, [r7, #8]
20006c7c:	015a      	lsls	r2, r3, #5
20006c7e:	68fb      	ldr	r3, [r7, #12]
20006c80:	4413      	add	r3, r2
20006c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006c86:	681b      	ldr	r3, [r3, #0]
20006c88:	68ba      	ldr	r2, [r7, #8]
20006c8a:	0151      	lsls	r1, r2, #5
20006c8c:	68fa      	ldr	r2, [r7, #12]
20006c8e:	440a      	add	r2, r1
20006c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006c94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
20006c98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
20006c9a:	2300      	movs	r3, #0
}
20006c9c:	4618      	mov	r0, r3
20006c9e:	3714      	adds	r7, #20
20006ca0:	46bd      	mov	sp, r7
20006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
20006ca6:	4770      	bx	lr

20006ca8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
20006ca8:	b480      	push	{r7}
20006caa:	b085      	sub	sp, #20
20006cac:	af00      	add	r7, sp, #0
20006cae:	6078      	str	r0, [r7, #4]
20006cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006cb2:	687b      	ldr	r3, [r7, #4]
20006cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
20006cb6:	683b      	ldr	r3, [r7, #0]
20006cb8:	781b      	ldrb	r3, [r3, #0]
20006cba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
20006cbc:	683b      	ldr	r3, [r7, #0]
20006cbe:	785b      	ldrb	r3, [r3, #1]
20006cc0:	2b01      	cmp	r3, #1
20006cc2:	d128      	bne.n	20006d16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
20006cc4:	68bb      	ldr	r3, [r7, #8]
20006cc6:	015a      	lsls	r2, r3, #5
20006cc8:	68fb      	ldr	r3, [r7, #12]
20006cca:	4413      	add	r3, r2
20006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006cd0:	681b      	ldr	r3, [r3, #0]
20006cd2:	68ba      	ldr	r2, [r7, #8]
20006cd4:	0151      	lsls	r1, r2, #5
20006cd6:	68fa      	ldr	r2, [r7, #12]
20006cd8:	440a      	add	r2, r1
20006cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20006cde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
20006ce2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
20006ce4:	683b      	ldr	r3, [r7, #0]
20006ce6:	791b      	ldrb	r3, [r3, #4]
20006ce8:	2b03      	cmp	r3, #3
20006cea:	d003      	beq.n	20006cf4 <USB_EPClearStall+0x4c>
20006cec:	683b      	ldr	r3, [r7, #0]
20006cee:	791b      	ldrb	r3, [r3, #4]
20006cf0:	2b02      	cmp	r3, #2
20006cf2:	d138      	bne.n	20006d66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
20006cf4:	68bb      	ldr	r3, [r7, #8]
20006cf6:	015a      	lsls	r2, r3, #5
20006cf8:	68fb      	ldr	r3, [r7, #12]
20006cfa:	4413      	add	r3, r2
20006cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006d00:	681b      	ldr	r3, [r3, #0]
20006d02:	68ba      	ldr	r2, [r7, #8]
20006d04:	0151      	lsls	r1, r2, #5
20006d06:	68fa      	ldr	r2, [r7, #12]
20006d08:	440a      	add	r2, r1
20006d0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
20006d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006d12:	6013      	str	r3, [r2, #0]
20006d14:	e027      	b.n	20006d66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
20006d16:	68bb      	ldr	r3, [r7, #8]
20006d18:	015a      	lsls	r2, r3, #5
20006d1a:	68fb      	ldr	r3, [r7, #12]
20006d1c:	4413      	add	r3, r2
20006d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006d22:	681b      	ldr	r3, [r3, #0]
20006d24:	68ba      	ldr	r2, [r7, #8]
20006d26:	0151      	lsls	r1, r2, #5
20006d28:	68fa      	ldr	r2, [r7, #12]
20006d2a:	440a      	add	r2, r1
20006d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006d30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
20006d34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
20006d36:	683b      	ldr	r3, [r7, #0]
20006d38:	791b      	ldrb	r3, [r3, #4]
20006d3a:	2b03      	cmp	r3, #3
20006d3c:	d003      	beq.n	20006d46 <USB_EPClearStall+0x9e>
20006d3e:	683b      	ldr	r3, [r7, #0]
20006d40:	791b      	ldrb	r3, [r3, #4]
20006d42:	2b02      	cmp	r3, #2
20006d44:	d10f      	bne.n	20006d66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
20006d46:	68bb      	ldr	r3, [r7, #8]
20006d48:	015a      	lsls	r2, r3, #5
20006d4a:	68fb      	ldr	r3, [r7, #12]
20006d4c:	4413      	add	r3, r2
20006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006d52:	681b      	ldr	r3, [r3, #0]
20006d54:	68ba      	ldr	r2, [r7, #8]
20006d56:	0151      	lsls	r1, r2, #5
20006d58:	68fa      	ldr	r2, [r7, #12]
20006d5a:	440a      	add	r2, r1
20006d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20006d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006d64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
20006d66:	2300      	movs	r3, #0
}
20006d68:	4618      	mov	r0, r3
20006d6a:	3714      	adds	r7, #20
20006d6c:	46bd      	mov	sp, r7
20006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006d72:	4770      	bx	lr

20006d74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
20006d74:	b480      	push	{r7}
20006d76:	b085      	sub	sp, #20
20006d78:	af00      	add	r7, sp, #0
20006d7a:	6078      	str	r0, [r7, #4]
20006d7c:	460b      	mov	r3, r1
20006d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006d80:	687b      	ldr	r3, [r7, #4]
20006d82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
20006d84:	68fb      	ldr	r3, [r7, #12]
20006d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006d8a:	681b      	ldr	r3, [r3, #0]
20006d8c:	68fa      	ldr	r2, [r7, #12]
20006d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006d92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
20006d96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
20006d98:	68fb      	ldr	r3, [r7, #12]
20006d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006d9e:	681a      	ldr	r2, [r3, #0]
20006da0:	78fb      	ldrb	r3, [r7, #3]
20006da2:	011b      	lsls	r3, r3, #4
20006da4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
20006da8:	68f9      	ldr	r1, [r7, #12]
20006daa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
20006dae:	4313      	orrs	r3, r2
20006db0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
20006db2:	2300      	movs	r3, #0
}
20006db4:	4618      	mov	r0, r3
20006db6:	3714      	adds	r7, #20
20006db8:	46bd      	mov	sp, r7
20006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
20006dbe:	4770      	bx	lr

20006dc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
20006dc0:	b480      	push	{r7}
20006dc2:	b085      	sub	sp, #20
20006dc4:	af00      	add	r7, sp, #0
20006dc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006dc8:	687b      	ldr	r3, [r7, #4]
20006dca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
20006dcc:	68fb      	ldr	r3, [r7, #12]
20006dce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
20006dd2:	681b      	ldr	r3, [r3, #0]
20006dd4:	68fa      	ldr	r2, [r7, #12]
20006dd6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
20006dda:	f023 0303 	bic.w	r3, r3, #3
20006dde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
20006de0:	68fb      	ldr	r3, [r7, #12]
20006de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006de6:	685b      	ldr	r3, [r3, #4]
20006de8:	68fa      	ldr	r2, [r7, #12]
20006dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006dee:	f023 0302 	bic.w	r3, r3, #2
20006df2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
20006df4:	2300      	movs	r3, #0
}
20006df6:	4618      	mov	r0, r3
20006df8:	3714      	adds	r7, #20
20006dfa:	46bd      	mov	sp, r7
20006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20006e00:	4770      	bx	lr

20006e02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
20006e02:	b480      	push	{r7}
20006e04:	b085      	sub	sp, #20
20006e06:	af00      	add	r7, sp, #0
20006e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006e0a:	687b      	ldr	r3, [r7, #4]
20006e0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
20006e0e:	68fb      	ldr	r3, [r7, #12]
20006e10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
20006e14:	681b      	ldr	r3, [r3, #0]
20006e16:	68fa      	ldr	r2, [r7, #12]
20006e18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
20006e1c:	f023 0303 	bic.w	r3, r3, #3
20006e20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
20006e22:	68fb      	ldr	r3, [r7, #12]
20006e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006e28:	685b      	ldr	r3, [r3, #4]
20006e2a:	68fa      	ldr	r2, [r7, #12]
20006e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006e30:	f043 0302 	orr.w	r3, r3, #2
20006e34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
20006e36:	2300      	movs	r3, #0
}
20006e38:	4618      	mov	r0, r3
20006e3a:	3714      	adds	r7, #20
20006e3c:	46bd      	mov	sp, r7
20006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006e42:	4770      	bx	lr

20006e44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
20006e44:	b480      	push	{r7}
20006e46:	b085      	sub	sp, #20
20006e48:	af00      	add	r7, sp, #0
20006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
20006e4c:	687b      	ldr	r3, [r7, #4]
20006e4e:	695b      	ldr	r3, [r3, #20]
20006e50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
20006e52:	687b      	ldr	r3, [r7, #4]
20006e54:	699b      	ldr	r3, [r3, #24]
20006e56:	68fa      	ldr	r2, [r7, #12]
20006e58:	4013      	ands	r3, r2
20006e5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
20006e5c:	68fb      	ldr	r3, [r7, #12]
}
20006e5e:	4618      	mov	r0, r3
20006e60:	3714      	adds	r7, #20
20006e62:	46bd      	mov	sp, r7
20006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
20006e68:	4770      	bx	lr

20006e6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
20006e6a:	b480      	push	{r7}
20006e6c:	b085      	sub	sp, #20
20006e6e:	af00      	add	r7, sp, #0
20006e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006e72:	687b      	ldr	r3, [r7, #4]
20006e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
20006e76:	68fb      	ldr	r3, [r7, #12]
20006e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006e7c:	699b      	ldr	r3, [r3, #24]
20006e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
20006e80:	68fb      	ldr	r3, [r7, #12]
20006e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006e86:	69db      	ldr	r3, [r3, #28]
20006e88:	68ba      	ldr	r2, [r7, #8]
20006e8a:	4013      	ands	r3, r2
20006e8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
20006e8e:	68bb      	ldr	r3, [r7, #8]
20006e90:	0c1b      	lsrs	r3, r3, #16
}
20006e92:	4618      	mov	r0, r3
20006e94:	3714      	adds	r7, #20
20006e96:	46bd      	mov	sp, r7
20006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
20006e9c:	4770      	bx	lr

20006e9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
20006e9e:	b480      	push	{r7}
20006ea0:	b085      	sub	sp, #20
20006ea2:	af00      	add	r7, sp, #0
20006ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006ea6:	687b      	ldr	r3, [r7, #4]
20006ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
20006eaa:	68fb      	ldr	r3, [r7, #12]
20006eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006eb0:	699b      	ldr	r3, [r3, #24]
20006eb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
20006eb4:	68fb      	ldr	r3, [r7, #12]
20006eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006eba:	69db      	ldr	r3, [r3, #28]
20006ebc:	68ba      	ldr	r2, [r7, #8]
20006ebe:	4013      	ands	r3, r2
20006ec0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
20006ec2:	68bb      	ldr	r3, [r7, #8]
20006ec4:	b29b      	uxth	r3, r3
}
20006ec6:	4618      	mov	r0, r3
20006ec8:	3714      	adds	r7, #20
20006eca:	46bd      	mov	sp, r7
20006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
20006ed0:	4770      	bx	lr

20006ed2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
20006ed2:	b480      	push	{r7}
20006ed4:	b085      	sub	sp, #20
20006ed6:	af00      	add	r7, sp, #0
20006ed8:	6078      	str	r0, [r7, #4]
20006eda:	460b      	mov	r3, r1
20006edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006ede:	687b      	ldr	r3, [r7, #4]
20006ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
20006ee2:	78fb      	ldrb	r3, [r7, #3]
20006ee4:	015a      	lsls	r2, r3, #5
20006ee6:	68fb      	ldr	r3, [r7, #12]
20006ee8:	4413      	add	r3, r2
20006eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006eee:	689b      	ldr	r3, [r3, #8]
20006ef0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
20006ef2:	68fb      	ldr	r3, [r7, #12]
20006ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006ef8:	695b      	ldr	r3, [r3, #20]
20006efa:	68ba      	ldr	r2, [r7, #8]
20006efc:	4013      	ands	r3, r2
20006efe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
20006f00:	68bb      	ldr	r3, [r7, #8]
}
20006f02:	4618      	mov	r0, r3
20006f04:	3714      	adds	r7, #20
20006f06:	46bd      	mov	sp, r7
20006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
20006f0c:	4770      	bx	lr

20006f0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
20006f0e:	b480      	push	{r7}
20006f10:	b087      	sub	sp, #28
20006f12:	af00      	add	r7, sp, #0
20006f14:	6078      	str	r0, [r7, #4]
20006f16:	460b      	mov	r3, r1
20006f18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006f1a:	687b      	ldr	r3, [r7, #4]
20006f1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
20006f1e:	697b      	ldr	r3, [r7, #20]
20006f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006f24:	691b      	ldr	r3, [r3, #16]
20006f26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
20006f28:	697b      	ldr	r3, [r7, #20]
20006f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20006f30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
20006f32:	78fb      	ldrb	r3, [r7, #3]
20006f34:	f003 030f 	and.w	r3, r3, #15
20006f38:	68fa      	ldr	r2, [r7, #12]
20006f3a:	fa22 f303 	lsr.w	r3, r2, r3
20006f3e:	01db      	lsls	r3, r3, #7
20006f40:	b2db      	uxtb	r3, r3
20006f42:	693a      	ldr	r2, [r7, #16]
20006f44:	4313      	orrs	r3, r2
20006f46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
20006f48:	78fb      	ldrb	r3, [r7, #3]
20006f4a:	015a      	lsls	r2, r3, #5
20006f4c:	697b      	ldr	r3, [r7, #20]
20006f4e:	4413      	add	r3, r2
20006f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006f54:	689b      	ldr	r3, [r3, #8]
20006f56:	693a      	ldr	r2, [r7, #16]
20006f58:	4013      	ands	r3, r2
20006f5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
20006f5c:	68bb      	ldr	r3, [r7, #8]
}
20006f5e:	4618      	mov	r0, r3
20006f60:	371c      	adds	r7, #28
20006f62:	46bd      	mov	sp, r7
20006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
20006f68:	4770      	bx	lr

20006f6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
20006f6a:	b480      	push	{r7}
20006f6c:	b083      	sub	sp, #12
20006f6e:	af00      	add	r7, sp, #0
20006f70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
20006f72:	687b      	ldr	r3, [r7, #4]
20006f74:	695b      	ldr	r3, [r3, #20]
20006f76:	f003 0301 	and.w	r3, r3, #1
}
20006f7a:	4618      	mov	r0, r3
20006f7c:	370c      	adds	r7, #12
20006f7e:	46bd      	mov	sp, r7
20006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
20006f84:	4770      	bx	lr
	...

20006f88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
20006f88:	b480      	push	{r7}
20006f8a:	b085      	sub	sp, #20
20006f8c:	af00      	add	r7, sp, #0
20006f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006f90:	687b      	ldr	r3, [r7, #4]
20006f92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
20006f94:	68fb      	ldr	r3, [r7, #12]
20006f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006f9a:	681a      	ldr	r2, [r3, #0]
20006f9c:	68fb      	ldr	r3, [r7, #12]
20006f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
20006fa2:	4619      	mov	r1, r3
20006fa4:	4b09      	ldr	r3, [pc, #36]	@ (20006fcc <USB_ActivateSetup+0x44>)
20006fa6:	4013      	ands	r3, r2
20006fa8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
20006faa:	68fb      	ldr	r3, [r7, #12]
20006fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
20006fb0:	685b      	ldr	r3, [r3, #4]
20006fb2:	68fa      	ldr	r2, [r7, #12]
20006fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
20006fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20006fbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
20006fbe:	2300      	movs	r3, #0
}
20006fc0:	4618      	mov	r0, r3
20006fc2:	3714      	adds	r7, #20
20006fc4:	46bd      	mov	sp, r7
20006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20006fca:	4770      	bx	lr
20006fcc:	fffff800 	.word	0xfffff800

20006fd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
20006fd0:	b480      	push	{r7}
20006fd2:	b087      	sub	sp, #28
20006fd4:	af00      	add	r7, sp, #0
20006fd6:	60f8      	str	r0, [r7, #12]
20006fd8:	460b      	mov	r3, r1
20006fda:	607a      	str	r2, [r7, #4]
20006fdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
20006fde:	68fb      	ldr	r3, [r7, #12]
20006fe0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
20006fe2:	68fb      	ldr	r3, [r7, #12]
20006fe4:	333c      	adds	r3, #60	@ 0x3c
20006fe6:	3304      	adds	r3, #4
20006fe8:	681b      	ldr	r3, [r3, #0]
20006fea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
20006fec:	693b      	ldr	r3, [r7, #16]
20006fee:	4a26      	ldr	r2, [pc, #152]	@ (20007088 <USB_EP0_OutStart+0xb8>)
20006ff0:	4293      	cmp	r3, r2
20006ff2:	d90a      	bls.n	2000700a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
20006ff4:	697b      	ldr	r3, [r7, #20]
20006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20006ffa:	681b      	ldr	r3, [r3, #0]
20006ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
20007000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
20007004:	d101      	bne.n	2000700a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
20007006:	2300      	movs	r3, #0
20007008:	e037      	b.n	2000707a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
2000700a:	697b      	ldr	r3, [r7, #20]
2000700c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007010:	461a      	mov	r2, r3
20007012:	2300      	movs	r3, #0
20007014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
20007016:	697b      	ldr	r3, [r7, #20]
20007018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000701c:	691b      	ldr	r3, [r3, #16]
2000701e:	697a      	ldr	r2, [r7, #20]
20007020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20007024:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20007028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
2000702a:	697b      	ldr	r3, [r7, #20]
2000702c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007030:	691b      	ldr	r3, [r3, #16]
20007032:	697a      	ldr	r2, [r7, #20]
20007034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20007038:	f043 0318 	orr.w	r3, r3, #24
2000703c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
2000703e:	697b      	ldr	r3, [r7, #20]
20007040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
20007044:	691b      	ldr	r3, [r3, #16]
20007046:	697a      	ldr	r2, [r7, #20]
20007048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
2000704c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
20007050:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
20007052:	7afb      	ldrb	r3, [r7, #11]
20007054:	2b01      	cmp	r3, #1
20007056:	d10f      	bne.n	20007078 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
20007058:	697b      	ldr	r3, [r7, #20]
2000705a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000705e:	461a      	mov	r2, r3
20007060:	687b      	ldr	r3, [r7, #4]
20007062:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
20007064:	697b      	ldr	r3, [r7, #20]
20007066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
2000706a:	681b      	ldr	r3, [r3, #0]
2000706c:	697a      	ldr	r2, [r7, #20]
2000706e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
20007072:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
20007076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
20007078:	2300      	movs	r3, #0
}
2000707a:	4618      	mov	r0, r3
2000707c:	371c      	adds	r7, #28
2000707e:	46bd      	mov	sp, r7
20007080:	f85d 7b04 	ldr.w	r7, [sp], #4
20007084:	4770      	bx	lr
20007086:	bf00      	nop
20007088:	4f54300a 	.word	0x4f54300a

2000708c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
2000708c:	b480      	push	{r7}
2000708e:	b085      	sub	sp, #20
20007090:	af00      	add	r7, sp, #0
20007092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
20007094:	2300      	movs	r3, #0
20007096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
20007098:	68fb      	ldr	r3, [r7, #12]
2000709a:	3301      	adds	r3, #1
2000709c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
2000709e:	68fb      	ldr	r3, [r7, #12]
200070a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200070a4:	d901      	bls.n	200070aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
200070a6:	2303      	movs	r3, #3
200070a8:	e022      	b.n	200070f0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
200070aa:	687b      	ldr	r3, [r7, #4]
200070ac:	691b      	ldr	r3, [r3, #16]
200070ae:	2b00      	cmp	r3, #0
200070b0:	daf2      	bge.n	20007098 <USB_CoreReset+0xc>

  count = 10U;
200070b2:	230a      	movs	r3, #10
200070b4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
200070b6:	e002      	b.n	200070be <USB_CoreReset+0x32>
  {
    count--;
200070b8:	68fb      	ldr	r3, [r7, #12]
200070ba:	3b01      	subs	r3, #1
200070bc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
200070be:	68fb      	ldr	r3, [r7, #12]
200070c0:	2b00      	cmp	r3, #0
200070c2:	d1f9      	bne.n	200070b8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
200070c4:	687b      	ldr	r3, [r7, #4]
200070c6:	691b      	ldr	r3, [r3, #16]
200070c8:	f043 0201 	orr.w	r2, r3, #1
200070cc:	687b      	ldr	r3, [r7, #4]
200070ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
200070d0:	68fb      	ldr	r3, [r7, #12]
200070d2:	3301      	adds	r3, #1
200070d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
200070d6:	68fb      	ldr	r3, [r7, #12]
200070d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
200070dc:	d901      	bls.n	200070e2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
200070de:	2303      	movs	r3, #3
200070e0:	e006      	b.n	200070f0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
200070e2:	687b      	ldr	r3, [r7, #4]
200070e4:	691b      	ldr	r3, [r3, #16]
200070e6:	f003 0301 	and.w	r3, r3, #1
200070ea:	2b01      	cmp	r3, #1
200070ec:	d0f0      	beq.n	200070d0 <USB_CoreReset+0x44>

  return HAL_OK;
200070ee:	2300      	movs	r3, #0
}
200070f0:	4618      	mov	r0, r3
200070f2:	3714      	adds	r7, #20
200070f4:	46bd      	mov	sp, r7
200070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200070fa:	4770      	bx	lr

200070fc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
200070fc:	b580      	push	{r7, lr}
200070fe:	b084      	sub	sp, #16
20007100:	af00      	add	r7, sp, #0
20007102:	6078      	str	r0, [r7, #4]
20007104:	460b      	mov	r3, r1
20007106:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
20007108:	2018      	movs	r0, #24
2000710a:	f002 fbc3 	bl	20009894 <malloc>
2000710e:	4603      	mov	r3, r0
20007110:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
20007112:	68fb      	ldr	r3, [r7, #12]
20007114:	2b00      	cmp	r3, #0
20007116:	d109      	bne.n	2000712c <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
20007118:	687b      	ldr	r3, [r7, #4]
2000711a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000711e:	687b      	ldr	r3, [r7, #4]
20007120:	32b0      	adds	r2, #176	@ 0xb0
20007122:	2100      	movs	r1, #0
20007124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
20007128:	2302      	movs	r3, #2
2000712a:	e061      	b.n	200071f0 <USBD_CUSTOM_HID_Init+0xf4>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
2000712c:	687b      	ldr	r3, [r7, #4]
2000712e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007132:	687b      	ldr	r3, [r7, #4]
20007134:	32b0      	adds	r2, #176	@ 0xb0
20007136:	68f9      	ldr	r1, [r7, #12]
20007138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
2000713c:	687b      	ldr	r3, [r7, #4]
2000713e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007142:	687b      	ldr	r3, [r7, #4]
20007144:	32b0      	adds	r2, #176	@ 0xb0
20007146:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
2000714a:	687b      	ldr	r3, [r7, #4]
2000714c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
20007150:	687b      	ldr	r3, [r7, #4]
20007152:	7c1b      	ldrb	r3, [r3, #16]
20007154:	2b00      	cmp	r3, #0
20007156:	d11b      	bne.n	20007190 <USBD_CUSTOM_HID_Init+0x94>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
20007158:	4b27      	ldr	r3, [pc, #156]	@ (200071f8 <USBD_CUSTOM_HID_Init+0xfc>)
2000715a:	781b      	ldrb	r3, [r3, #0]
2000715c:	f003 020f 	and.w	r2, r3, #15
20007160:	6879      	ldr	r1, [r7, #4]
20007162:	4613      	mov	r3, r2
20007164:	009b      	lsls	r3, r3, #2
20007166:	4413      	add	r3, r2
20007168:	009b      	lsls	r3, r3, #2
2000716a:	440b      	add	r3, r1
2000716c:	331c      	adds	r3, #28
2000716e:	2205      	movs	r2, #5
20007170:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
20007172:	4b22      	ldr	r3, [pc, #136]	@ (200071fc <USBD_CUSTOM_HID_Init+0x100>)
20007174:	781b      	ldrb	r3, [r3, #0]
20007176:	f003 020f 	and.w	r2, r3, #15
2000717a:	6879      	ldr	r1, [r7, #4]
2000717c:	4613      	mov	r3, r2
2000717e:	009b      	lsls	r3, r3, #2
20007180:	4413      	add	r3, r2
20007182:	009b      	lsls	r3, r3, #2
20007184:	440b      	add	r3, r1
20007186:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000718a:	2205      	movs	r2, #5
2000718c:	601a      	str	r2, [r3, #0]
2000718e:	e01a      	b.n	200071c6 <USBD_CUSTOM_HID_Init+0xca>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
20007190:	4b19      	ldr	r3, [pc, #100]	@ (200071f8 <USBD_CUSTOM_HID_Init+0xfc>)
20007192:	781b      	ldrb	r3, [r3, #0]
20007194:	f003 020f 	and.w	r2, r3, #15
20007198:	6879      	ldr	r1, [r7, #4]
2000719a:	4613      	mov	r3, r2
2000719c:	009b      	lsls	r3, r3, #2
2000719e:	4413      	add	r3, r2
200071a0:	009b      	lsls	r3, r3, #2
200071a2:	440b      	add	r3, r1
200071a4:	331c      	adds	r3, #28
200071a6:	2200      	movs	r2, #0
200071a8:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
200071aa:	4b14      	ldr	r3, [pc, #80]	@ (200071fc <USBD_CUSTOM_HID_Init+0x100>)
200071ac:	781b      	ldrb	r3, [r3, #0]
200071ae:	f003 020f 	and.w	r2, r3, #15
200071b2:	6879      	ldr	r1, [r7, #4]
200071b4:	4613      	mov	r3, r2
200071b6:	009b      	lsls	r3, r3, #2
200071b8:	4413      	add	r3, r2
200071ba:	009b      	lsls	r3, r3, #2
200071bc:	440b      	add	r3, r1
200071be:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
200071c2:	2200      	movs	r2, #0
200071c4:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
200071c6:	4b0c      	ldr	r3, [pc, #48]	@ (200071f8 <USBD_CUSTOM_HID_Init+0xfc>)
200071c8:	7819      	ldrb	r1, [r3, #0]
200071ca:	2340      	movs	r3, #64	@ 0x40
200071cc:	2203      	movs	r2, #3
200071ce:	6878      	ldr	r0, [r7, #4]
200071d0:	f002 f9cf 	bl	20009572 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
200071d4:	4b08      	ldr	r3, [pc, #32]	@ (200071f8 <USBD_CUSTOM_HID_Init+0xfc>)
200071d6:	781b      	ldrb	r3, [r3, #0]
200071d8:	f003 020f 	and.w	r2, r3, #15
200071dc:	6879      	ldr	r1, [r7, #4]
200071de:	4613      	mov	r3, r2
200071e0:	009b      	lsls	r3, r3, #2
200071e2:	4413      	add	r3, r2
200071e4:	009b      	lsls	r3, r3, #2
200071e6:	440b      	add	r3, r1
200071e8:	3323      	adds	r3, #35	@ 0x23
200071ea:	2201      	movs	r2, #1
200071ec:	701a      	strb	r2, [r3, #0]

  if (USBD_CUSTOMHID_OUTREPORT_BUF_SIZE < CUSTOM_HID_EPOUT_SIZE)
  {
    return (uint8_t)USBD_FAIL;
200071ee:	2303      	movs	r3, #3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
}
200071f0:	4618      	mov	r0, r3
200071f2:	3710      	adds	r7, #16
200071f4:	46bd      	mov	sp, r7
200071f6:	bd80      	pop	{r7, pc}
200071f8:	20009c32 	.word	0x20009c32
200071fc:	20009c33 	.word	0x20009c33

20007200 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
20007200:	b580      	push	{r7, lr}
20007202:	b082      	sub	sp, #8
20007204:	af00      	add	r7, sp, #0
20007206:	6078      	str	r0, [r7, #4]
20007208:	460b      	mov	r3, r1
2000720a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
2000720c:	4b37      	ldr	r3, [pc, #220]	@ (200072ec <USBD_CUSTOM_HID_DeInit+0xec>)
2000720e:	781b      	ldrb	r3, [r3, #0]
20007210:	4619      	mov	r1, r3
20007212:	6878      	ldr	r0, [r7, #4]
20007214:	f002 f9d3 	bl	200095be <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
20007218:	4b34      	ldr	r3, [pc, #208]	@ (200072ec <USBD_CUSTOM_HID_DeInit+0xec>)
2000721a:	781b      	ldrb	r3, [r3, #0]
2000721c:	f003 020f 	and.w	r2, r3, #15
20007220:	6879      	ldr	r1, [r7, #4]
20007222:	4613      	mov	r3, r2
20007224:	009b      	lsls	r3, r3, #2
20007226:	4413      	add	r3, r2
20007228:	009b      	lsls	r3, r3, #2
2000722a:	440b      	add	r3, r1
2000722c:	3323      	adds	r3, #35	@ 0x23
2000722e:	2200      	movs	r2, #0
20007230:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
20007232:	4b2e      	ldr	r3, [pc, #184]	@ (200072ec <USBD_CUSTOM_HID_DeInit+0xec>)
20007234:	781b      	ldrb	r3, [r3, #0]
20007236:	f003 020f 	and.w	r2, r3, #15
2000723a:	6879      	ldr	r1, [r7, #4]
2000723c:	4613      	mov	r3, r2
2000723e:	009b      	lsls	r3, r3, #2
20007240:	4413      	add	r3, r2
20007242:	009b      	lsls	r3, r3, #2
20007244:	440b      	add	r3, r1
20007246:	331c      	adds	r3, #28
20007248:	2200      	movs	r2, #0
2000724a:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
2000724c:	4b28      	ldr	r3, [pc, #160]	@ (200072f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000724e:	781b      	ldrb	r3, [r3, #0]
20007250:	4619      	mov	r1, r3
20007252:	6878      	ldr	r0, [r7, #4]
20007254:	f002 f9b3 	bl	200095be <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
20007258:	4b25      	ldr	r3, [pc, #148]	@ (200072f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
2000725a:	781b      	ldrb	r3, [r3, #0]
2000725c:	f003 020f 	and.w	r2, r3, #15
20007260:	6879      	ldr	r1, [r7, #4]
20007262:	4613      	mov	r3, r2
20007264:	009b      	lsls	r3, r3, #2
20007266:	4413      	add	r3, r2
20007268:	009b      	lsls	r3, r3, #2
2000726a:	440b      	add	r3, r1
2000726c:	f203 1363 	addw	r3, r3, #355	@ 0x163
20007270:	2200      	movs	r2, #0
20007272:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
20007274:	4b1e      	ldr	r3, [pc, #120]	@ (200072f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
20007276:	781b      	ldrb	r3, [r3, #0]
20007278:	f003 020f 	and.w	r2, r3, #15
2000727c:	6879      	ldr	r1, [r7, #4]
2000727e:	4613      	mov	r3, r2
20007280:	009b      	lsls	r3, r3, #2
20007282:	4413      	add	r3, r2
20007284:	009b      	lsls	r3, r3, #2
20007286:	440b      	add	r3, r1
20007288:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
2000728c:	2200      	movs	r2, #0
2000728e:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
20007290:	687b      	ldr	r3, [r7, #4]
20007292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007296:	687b      	ldr	r3, [r7, #4]
20007298:	32b0      	adds	r2, #176	@ 0xb0
2000729a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000729e:	2b00      	cmp	r3, #0
200072a0:	d01f      	beq.n	200072e2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
200072a2:	687b      	ldr	r3, [r7, #4]
200072a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
200072a8:	687a      	ldr	r2, [r7, #4]
200072aa:	33b0      	adds	r3, #176	@ 0xb0
200072ac:	009b      	lsls	r3, r3, #2
200072ae:	4413      	add	r3, r2
200072b0:	685b      	ldr	r3, [r3, #4]
200072b2:	689b      	ldr	r3, [r3, #8]
200072b4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
200072b6:	687b      	ldr	r3, [r7, #4]
200072b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
200072bc:	687b      	ldr	r3, [r7, #4]
200072be:	32b0      	adds	r2, #176	@ 0xb0
200072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200072c4:	4618      	mov	r0, r3
200072c6:	f002 faed 	bl	200098a4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
200072ca:	687b      	ldr	r3, [r7, #4]
200072cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
200072d0:	687b      	ldr	r3, [r7, #4]
200072d2:	32b0      	adds	r2, #176	@ 0xb0
200072d4:	2100      	movs	r1, #0
200072d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
200072da:	687b      	ldr	r3, [r7, #4]
200072dc:	2200      	movs	r2, #0
200072de:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
200072e2:	2300      	movs	r3, #0
}
200072e4:	4618      	mov	r0, r3
200072e6:	3708      	adds	r7, #8
200072e8:	46bd      	mov	sp, r7
200072ea:	bd80      	pop	{r7, pc}
200072ec:	20009c32 	.word	0x20009c32
200072f0:	20009c33 	.word	0x20009c33

200072f4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
200072f4:	b580      	push	{r7, lr}
200072f6:	b088      	sub	sp, #32
200072f8:	af00      	add	r7, sp, #0
200072fa:	6078      	str	r0, [r7, #4]
200072fc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
200072fe:	687b      	ldr	r3, [r7, #4]
20007300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007304:	687b      	ldr	r3, [r7, #4]
20007306:	32b0      	adds	r2, #176	@ 0xb0
20007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000730c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
2000730e:	2300      	movs	r3, #0
20007310:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
20007312:	2300      	movs	r3, #0
20007314:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
20007316:	2300      	movs	r3, #0
20007318:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
2000731a:	2300      	movs	r3, #0
2000731c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
2000731e:	693b      	ldr	r3, [r7, #16]
20007320:	2b00      	cmp	r3, #0
20007322:	d101      	bne.n	20007328 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
20007324:	2303      	movs	r3, #3
20007326:	e108      	b.n	2000753a <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
20007328:	683b      	ldr	r3, [r7, #0]
2000732a:	781b      	ldrb	r3, [r3, #0]
2000732c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
20007330:	2b00      	cmp	r3, #0
20007332:	d05c      	beq.n	200073ee <USBD_CUSTOM_HID_Setup+0xfa>
20007334:	2b20      	cmp	r3, #32
20007336:	f040 80f8 	bne.w	2000752a <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
2000733a:	683b      	ldr	r3, [r7, #0]
2000733c:	785b      	ldrb	r3, [r3, #1]
2000733e:	3b02      	subs	r3, #2
20007340:	2b09      	cmp	r3, #9
20007342:	d84c      	bhi.n	200073de <USBD_CUSTOM_HID_Setup+0xea>
20007344:	a201      	add	r2, pc, #4	@ (adr r2, 2000734c <USBD_CUSTOM_HID_Setup+0x58>)
20007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000734a:	bf00      	nop
2000734c:	200073a5 	.word	0x200073a5
20007350:	20007383 	.word	0x20007383
20007354:	200073df 	.word	0x200073df
20007358:	200073df 	.word	0x200073df
2000735c:	200073df 	.word	0x200073df
20007360:	200073df 	.word	0x200073df
20007364:	200073df 	.word	0x200073df
20007368:	200073b5 	.word	0x200073b5
2000736c:	20007393 	.word	0x20007393
20007370:	20007375 	.word	0x20007375
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
20007374:	683b      	ldr	r3, [r7, #0]
20007376:	885b      	ldrh	r3, [r3, #2]
20007378:	b2db      	uxtb	r3, r3
2000737a:	461a      	mov	r2, r3
2000737c:	693b      	ldr	r3, [r7, #16]
2000737e:	605a      	str	r2, [r3, #4]
          break;
20007380:	e034      	b.n	200073ec <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
20007382:	693b      	ldr	r3, [r7, #16]
20007384:	3304      	adds	r3, #4
20007386:	2201      	movs	r2, #1
20007388:	4619      	mov	r1, r3
2000738a:	6878      	ldr	r0, [r7, #4]
2000738c:	f001 fd14 	bl	20008db8 <USBD_CtlSendData>
          break;
20007390:	e02c      	b.n	200073ec <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
20007392:	683b      	ldr	r3, [r7, #0]
20007394:	885b      	ldrh	r3, [r3, #2]
20007396:	0a1b      	lsrs	r3, r3, #8
20007398:	b29b      	uxth	r3, r3
2000739a:	b2db      	uxtb	r3, r3
2000739c:	461a      	mov	r2, r3
2000739e:	693b      	ldr	r3, [r7, #16]
200073a0:	609a      	str	r2, [r3, #8]
          break;
200073a2:	e023      	b.n	200073ec <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
200073a4:	693b      	ldr	r3, [r7, #16]
200073a6:	3308      	adds	r3, #8
200073a8:	2201      	movs	r2, #1
200073aa:	4619      	mov	r1, r3
200073ac:	6878      	ldr	r0, [r7, #4]
200073ae:	f001 fd03 	bl	20008db8 <USBD_CtlSendData>
          break;
200073b2:	e01b      	b.n	200073ec <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
200073b4:	683b      	ldr	r3, [r7, #0]
200073b6:	88db      	ldrh	r3, [r3, #6]
200073b8:	2b02      	cmp	r3, #2
200073ba:	d905      	bls.n	200073c8 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
200073bc:	6839      	ldr	r1, [r7, #0]
200073be:	6878      	ldr	r0, [r7, #4]
200073c0:	f001 fc7d 	bl	20008cbe <USBD_CtlError>
            return USBD_FAIL;
200073c4:	2303      	movs	r3, #3
200073c6:	e0b8      	b.n	2000753a <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
200073c8:	693b      	ldr	r3, [r7, #16]
200073ca:	2201      	movs	r2, #1
200073cc:	611a      	str	r2, [r3, #16]

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
200073ce:	6939      	ldr	r1, [r7, #16]
200073d0:	683b      	ldr	r3, [r7, #0]
200073d2:	88db      	ldrh	r3, [r3, #6]
200073d4:	461a      	mov	r2, r3
200073d6:	6878      	ldr	r0, [r7, #4]
200073d8:	f001 fd1d 	bl	20008e16 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
200073dc:	e006      	b.n	200073ec <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
200073de:	6839      	ldr	r1, [r7, #0]
200073e0:	6878      	ldr	r0, [r7, #4]
200073e2:	f001 fc6c 	bl	20008cbe <USBD_CtlError>
          ret = USBD_FAIL;
200073e6:	2303      	movs	r3, #3
200073e8:	75fb      	strb	r3, [r7, #23]
          break;
200073ea:	bf00      	nop
      }
      break;
200073ec:	e0a4      	b.n	20007538 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
200073ee:	683b      	ldr	r3, [r7, #0]
200073f0:	785b      	ldrb	r3, [r3, #1]
200073f2:	2b0b      	cmp	r3, #11
200073f4:	f200 8090 	bhi.w	20007518 <USBD_CUSTOM_HID_Setup+0x224>
200073f8:	a201      	add	r2, pc, #4	@ (adr r2, 20007400 <USBD_CUSTOM_HID_Setup+0x10c>)
200073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200073fe:	bf00      	nop
20007400:	20007431 	.word	0x20007431
20007404:	20007527 	.word	0x20007527
20007408:	20007519 	.word	0x20007519
2000740c:	20007519 	.word	0x20007519
20007410:	20007519 	.word	0x20007519
20007414:	20007519 	.word	0x20007519
20007418:	2000745b 	.word	0x2000745b
2000741c:	20007519 	.word	0x20007519
20007420:	20007519 	.word	0x20007519
20007424:	20007519 	.word	0x20007519
20007428:	200074c7 	.word	0x200074c7
2000742c:	200074f1 	.word	0x200074f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007430:	687b      	ldr	r3, [r7, #4]
20007432:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007436:	b2db      	uxtb	r3, r3
20007438:	2b03      	cmp	r3, #3
2000743a:	d107      	bne.n	2000744c <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
2000743c:	f107 030e 	add.w	r3, r7, #14
20007440:	2202      	movs	r2, #2
20007442:	4619      	mov	r1, r3
20007444:	6878      	ldr	r0, [r7, #4]
20007446:	f001 fcb7 	bl	20008db8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
2000744a:	e06d      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000744c:	6839      	ldr	r1, [r7, #0]
2000744e:	6878      	ldr	r0, [r7, #4]
20007450:	f001 fc35 	bl	20008cbe <USBD_CtlError>
            ret = USBD_FAIL;
20007454:	2303      	movs	r3, #3
20007456:	75fb      	strb	r3, [r7, #23]
          break;
20007458:	e066      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
2000745a:	683b      	ldr	r3, [r7, #0]
2000745c:	885b      	ldrh	r3, [r3, #2]
2000745e:	0a1b      	lsrs	r3, r3, #8
20007460:	b29b      	uxth	r3, r3
20007462:	2b22      	cmp	r3, #34	@ 0x22
20007464:	d110      	bne.n	20007488 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
20007466:	683b      	ldr	r3, [r7, #0]
20007468:	88db      	ldrh	r3, [r3, #6]
2000746a:	2b02      	cmp	r3, #2
2000746c:	bf28      	it	cs
2000746e:	2302      	movcs	r3, #2
20007470:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
20007472:	687b      	ldr	r3, [r7, #4]
20007474:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20007478:	687a      	ldr	r2, [r7, #4]
2000747a:	33b0      	adds	r3, #176	@ 0xb0
2000747c:	009b      	lsls	r3, r3, #2
2000747e:	4413      	add	r3, r2
20007480:	685b      	ldr	r3, [r3, #4]
20007482:	681b      	ldr	r3, [r3, #0]
20007484:	61bb      	str	r3, [r7, #24]
20007486:	e00d      	b.n	200074a4 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
20007488:	683b      	ldr	r3, [r7, #0]
2000748a:	885b      	ldrh	r3, [r3, #2]
2000748c:	0a1b      	lsrs	r3, r3, #8
2000748e:	b29b      	uxth	r3, r3
20007490:	2b21      	cmp	r3, #33	@ 0x21
20007492:	d107      	bne.n	200074a4 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
20007494:	4b2b      	ldr	r3, [pc, #172]	@ (20007544 <USBD_CUSTOM_HID_Setup+0x250>)
20007496:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
20007498:	683b      	ldr	r3, [r7, #0]
2000749a:	88db      	ldrh	r3, [r3, #6]
2000749c:	2b09      	cmp	r3, #9
2000749e:	bf28      	it	cs
200074a0:	2309      	movcs	r3, #9
200074a2:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
200074a4:	69bb      	ldr	r3, [r7, #24]
200074a6:	2b00      	cmp	r3, #0
200074a8:	d006      	beq.n	200074b8 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
200074aa:	8bfb      	ldrh	r3, [r7, #30]
200074ac:	461a      	mov	r2, r3
200074ae:	69b9      	ldr	r1, [r7, #24]
200074b0:	6878      	ldr	r0, [r7, #4]
200074b2:	f001 fc81 	bl	20008db8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
200074b6:	e037      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
200074b8:	6839      	ldr	r1, [r7, #0]
200074ba:	6878      	ldr	r0, [r7, #4]
200074bc:	f001 fbff 	bl	20008cbe <USBD_CtlError>
            ret = USBD_FAIL;
200074c0:	2303      	movs	r3, #3
200074c2:	75fb      	strb	r3, [r7, #23]
          break;
200074c4:	e030      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
200074c6:	687b      	ldr	r3, [r7, #4]
200074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
200074cc:	b2db      	uxtb	r3, r3
200074ce:	2b03      	cmp	r3, #3
200074d0:	d107      	bne.n	200074e2 <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
200074d2:	693b      	ldr	r3, [r7, #16]
200074d4:	330c      	adds	r3, #12
200074d6:	2201      	movs	r2, #1
200074d8:	4619      	mov	r1, r3
200074da:	6878      	ldr	r0, [r7, #4]
200074dc:	f001 fc6c 	bl	20008db8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
200074e0:	e022      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
200074e2:	6839      	ldr	r1, [r7, #0]
200074e4:	6878      	ldr	r0, [r7, #4]
200074e6:	f001 fbea 	bl	20008cbe <USBD_CtlError>
            ret = USBD_FAIL;
200074ea:	2303      	movs	r3, #3
200074ec:	75fb      	strb	r3, [r7, #23]
          break;
200074ee:	e01b      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
200074f0:	687b      	ldr	r3, [r7, #4]
200074f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
200074f6:	b2db      	uxtb	r3, r3
200074f8:	2b03      	cmp	r3, #3
200074fa:	d106      	bne.n	2000750a <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
200074fc:	683b      	ldr	r3, [r7, #0]
200074fe:	885b      	ldrh	r3, [r3, #2]
20007500:	b2db      	uxtb	r3, r3
20007502:	461a      	mov	r2, r3
20007504:	693b      	ldr	r3, [r7, #16]
20007506:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
20007508:	e00e      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
2000750a:	6839      	ldr	r1, [r7, #0]
2000750c:	6878      	ldr	r0, [r7, #4]
2000750e:	f001 fbd6 	bl	20008cbe <USBD_CtlError>
            ret = USBD_FAIL;
20007512:	2303      	movs	r3, #3
20007514:	75fb      	strb	r3, [r7, #23]
          break;
20007516:	e007      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
20007518:	6839      	ldr	r1, [r7, #0]
2000751a:	6878      	ldr	r0, [r7, #4]
2000751c:	f001 fbcf 	bl	20008cbe <USBD_CtlError>
          ret = USBD_FAIL;
20007520:	2303      	movs	r3, #3
20007522:	75fb      	strb	r3, [r7, #23]
          break;
20007524:	e000      	b.n	20007528 <USBD_CUSTOM_HID_Setup+0x234>
          break;
20007526:	bf00      	nop
      }
      break;
20007528:	e006      	b.n	20007538 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
2000752a:	6839      	ldr	r1, [r7, #0]
2000752c:	6878      	ldr	r0, [r7, #4]
2000752e:	f001 fbc6 	bl	20008cbe <USBD_CtlError>
      ret = USBD_FAIL;
20007532:	2303      	movs	r3, #3
20007534:	75fb      	strb	r3, [r7, #23]
      break;
20007536:	bf00      	nop
  }
  return (uint8_t)ret;
20007538:	7dfb      	ldrb	r3, [r7, #23]
}
2000753a:	4618      	mov	r0, r3
2000753c:	3720      	adds	r7, #32
2000753e:	46bd      	mov	sp, r7
20007540:	bd80      	pop	{r7, pc}
20007542:	bf00      	nop
20007544:	20009c1c 	.word	0x20009c1c

20007548 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
20007548:	b580      	push	{r7, lr}
2000754a:	b084      	sub	sp, #16
2000754c:	af00      	add	r7, sp, #0
2000754e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20007550:	2185      	movs	r1, #133	@ 0x85
20007552:	4815      	ldr	r0, [pc, #84]	@ (200075a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
20007554:	f000 fd30 	bl	20007fb8 <USBD_GetEpDesc>
20007558:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
2000755a:	2104      	movs	r1, #4
2000755c:	4812      	ldr	r0, [pc, #72]	@ (200075a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
2000755e:	f000 fd2b 	bl	20007fb8 <USBD_GetEpDesc>
20007562:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
20007564:	68fb      	ldr	r3, [r7, #12]
20007566:	2b00      	cmp	r3, #0
20007568:	d009      	beq.n	2000757e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
2000756a:	68fb      	ldr	r3, [r7, #12]
2000756c:	2200      	movs	r2, #0
2000756e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20007572:	711a      	strb	r2, [r3, #4]
20007574:	2200      	movs	r2, #0
20007576:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20007578:	68fb      	ldr	r3, [r7, #12]
2000757a:	2200      	movs	r2, #0
2000757c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
2000757e:	68bb      	ldr	r3, [r7, #8]
20007580:	2b00      	cmp	r3, #0
20007582:	d009      	beq.n	20007598 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
20007584:	68bb      	ldr	r3, [r7, #8]
20007586:	2200      	movs	r2, #0
20007588:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000758c:	711a      	strb	r2, [r3, #4]
2000758e:	2200      	movs	r2, #0
20007590:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20007592:	68bb      	ldr	r3, [r7, #8]
20007594:	2200      	movs	r2, #0
20007596:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20007598:	687b      	ldr	r3, [r7, #4]
2000759a:	2220      	movs	r2, #32
2000759c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
2000759e:	4b02      	ldr	r3, [pc, #8]	@ (200075a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
200075a0:	4618      	mov	r0, r3
200075a2:	3710      	adds	r7, #16
200075a4:	46bd      	mov	sp, r7
200075a6:	bd80      	pop	{r7, pc}
200075a8:	20009bfc 	.word	0x20009bfc

200075ac <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
200075ac:	b580      	push	{r7, lr}
200075ae:	b084      	sub	sp, #16
200075b0:	af00      	add	r7, sp, #0
200075b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
200075b4:	2185      	movs	r1, #133	@ 0x85
200075b6:	4815      	ldr	r0, [pc, #84]	@ (2000760c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
200075b8:	f000 fcfe 	bl	20007fb8 <USBD_GetEpDesc>
200075bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
200075be:	2104      	movs	r1, #4
200075c0:	4812      	ldr	r0, [pc, #72]	@ (2000760c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
200075c2:	f000 fcf9 	bl	20007fb8 <USBD_GetEpDesc>
200075c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
200075c8:	68fb      	ldr	r3, [r7, #12]
200075ca:	2b00      	cmp	r3, #0
200075cc:	d009      	beq.n	200075e2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
200075ce:	68fb      	ldr	r3, [r7, #12]
200075d0:	2200      	movs	r2, #0
200075d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
200075d6:	711a      	strb	r2, [r3, #4]
200075d8:	2200      	movs	r2, #0
200075da:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
200075dc:	68fb      	ldr	r3, [r7, #12]
200075de:	2205      	movs	r2, #5
200075e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
200075e2:	68bb      	ldr	r3, [r7, #8]
200075e4:	2b00      	cmp	r3, #0
200075e6:	d009      	beq.n	200075fc <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
200075e8:	68bb      	ldr	r3, [r7, #8]
200075ea:	2200      	movs	r2, #0
200075ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
200075f0:	711a      	strb	r2, [r3, #4]
200075f2:	2200      	movs	r2, #0
200075f4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
200075f6:	68bb      	ldr	r3, [r7, #8]
200075f8:	2205      	movs	r2, #5
200075fa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
200075fc:	687b      	ldr	r3, [r7, #4]
200075fe:	2220      	movs	r2, #32
20007600:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20007602:	4b02      	ldr	r3, [pc, #8]	@ (2000760c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
20007604:	4618      	mov	r0, r3
20007606:	3710      	adds	r7, #16
20007608:	46bd      	mov	sp, r7
2000760a:	bd80      	pop	{r7, pc}
2000760c:	20009bfc 	.word	0x20009bfc

20007610 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
20007610:	b580      	push	{r7, lr}
20007612:	b084      	sub	sp, #16
20007614:	af00      	add	r7, sp, #0
20007616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
20007618:	2185      	movs	r1, #133	@ 0x85
2000761a:	4815      	ldr	r0, [pc, #84]	@ (20007670 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
2000761c:	f000 fccc 	bl	20007fb8 <USBD_GetEpDesc>
20007620:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
20007622:	2104      	movs	r1, #4
20007624:	4812      	ldr	r0, [pc, #72]	@ (20007670 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
20007626:	f000 fcc7 	bl	20007fb8 <USBD_GetEpDesc>
2000762a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
2000762c:	68fb      	ldr	r3, [r7, #12]
2000762e:	2b00      	cmp	r3, #0
20007630:	d009      	beq.n	20007646 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
20007632:	68fb      	ldr	r3, [r7, #12]
20007634:	2200      	movs	r2, #0
20007636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000763a:	711a      	strb	r2, [r3, #4]
2000763c:	2200      	movs	r2, #0
2000763e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
20007640:	68fb      	ldr	r3, [r7, #12]
20007642:	2200      	movs	r2, #0
20007644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
20007646:	68bb      	ldr	r3, [r7, #8]
20007648:	2b00      	cmp	r3, #0
2000764a:	d009      	beq.n	20007660 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
2000764c:	68bb      	ldr	r3, [r7, #8]
2000764e:	2200      	movs	r2, #0
20007650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20007654:	711a      	strb	r2, [r3, #4]
20007656:	2200      	movs	r2, #0
20007658:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
2000765a:	68bb      	ldr	r3, [r7, #8]
2000765c:	2200      	movs	r2, #0
2000765e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
20007660:	687b      	ldr	r3, [r7, #4]
20007662:	2220      	movs	r2, #32
20007664:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
20007666:	4b02      	ldr	r3, [pc, #8]	@ (20007670 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
20007668:	4618      	mov	r0, r3
2000766a:	3710      	adds	r7, #16
2000766c:	46bd      	mov	sp, r7
2000766e:	bd80      	pop	{r7, pc}
20007670:	20009bfc 	.word	0x20009bfc

20007674 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
20007674:	b480      	push	{r7}
20007676:	b083      	sub	sp, #12
20007678:	af00      	add	r7, sp, #0
2000767a:	6078      	str	r0, [r7, #4]
2000767c:	460b      	mov	r3, r1
2000767e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
20007680:	687b      	ldr	r3, [r7, #4]
20007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007686:	687b      	ldr	r3, [r7, #4]
20007688:	32b0      	adds	r2, #176	@ 0xb0
2000768a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000768e:	2200      	movs	r2, #0
20007690:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
20007692:	2300      	movs	r3, #0
}
20007694:	4618      	mov	r0, r3
20007696:	370c      	adds	r7, #12
20007698:	46bd      	mov	sp, r7
2000769a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000769e:	4770      	bx	lr

200076a0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
200076a0:	b580      	push	{r7, lr}
200076a2:	b084      	sub	sp, #16
200076a4:	af00      	add	r7, sp, #0
200076a6:	6078      	str	r0, [r7, #4]
200076a8:	460b      	mov	r3, r1
200076aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
200076ac:	687b      	ldr	r3, [r7, #4]
200076ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
200076b2:	687b      	ldr	r3, [r7, #4]
200076b4:	32b0      	adds	r2, #176	@ 0xb0
200076b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200076ba:	2b00      	cmp	r3, #0
200076bc:	d101      	bne.n	200076c2 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
200076be:	2303      	movs	r3, #3
200076c0:	e017      	b.n	200076f2 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
200076c2:	687b      	ldr	r3, [r7, #4]
200076c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
200076c8:	687b      	ldr	r3, [r7, #4]
200076ca:	32b0      	adds	r2, #176	@ 0xb0
200076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200076d0:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
200076d2:	687b      	ldr	r3, [r7, #4]
200076d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
200076d8:	687a      	ldr	r2, [r7, #4]
200076da:	33b0      	adds	r3, #176	@ 0xb0
200076dc:	009b      	lsls	r3, r3, #2
200076de:	4413      	add	r3, r2
200076e0:	685b      	ldr	r3, [r3, #4]
200076e2:	68db      	ldr	r3, [r3, #12]
200076e4:	68fa      	ldr	r2, [r7, #12]
200076e6:	7810      	ldrb	r0, [r2, #0]
200076e8:	68fa      	ldr	r2, [r7, #12]
200076ea:	7852      	ldrb	r2, [r2, #1]
200076ec:	4611      	mov	r1, r2
200076ee:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
200076f0:	2300      	movs	r3, #0
}
200076f2:	4618      	mov	r0, r3
200076f4:	3710      	adds	r7, #16
200076f6:	46bd      	mov	sp, r7
200076f8:	bd80      	pop	{r7, pc}
	...

200076fc <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
200076fc:	b580      	push	{r7, lr}
200076fe:	b084      	sub	sp, #16
20007700:	af00      	add	r7, sp, #0
20007702:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
20007704:	687b      	ldr	r3, [r7, #4]
20007706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000770a:	687b      	ldr	r3, [r7, #4]
2000770c:	32b0      	adds	r2, #176	@ 0xb0
2000770e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007712:	2b00      	cmp	r3, #0
20007714:	d101      	bne.n	2000771a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
20007716:	2303      	movs	r3, #3
20007718:	e00f      	b.n	2000773a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
2000771a:	687b      	ldr	r3, [r7, #4]
2000771c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007720:	687b      	ldr	r3, [r7, #4]
20007722:	32b0      	adds	r2, #176	@ 0xb0
20007724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007728:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
2000772a:	4b06      	ldr	r3, [pc, #24]	@ (20007744 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
2000772c:	7819      	ldrb	r1, [r3, #0]
2000772e:	68fa      	ldr	r2, [r7, #12]
20007730:	2302      	movs	r3, #2
20007732:	6878      	ldr	r0, [r7, #4]
20007734:	f002 f80c 	bl	20009750 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
20007738:	2300      	movs	r3, #0
}
2000773a:	4618      	mov	r0, r3
2000773c:	3710      	adds	r7, #16
2000773e:	46bd      	mov	sp, r7
20007740:	bd80      	pop	{r7, pc}
20007742:	bf00      	nop
20007744:	20009c33 	.word	0x20009c33

20007748 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
20007748:	b580      	push	{r7, lr}
2000774a:	b084      	sub	sp, #16
2000774c:	af00      	add	r7, sp, #0
2000774e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
20007750:	687b      	ldr	r3, [r7, #4]
20007752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007756:	687b      	ldr	r3, [r7, #4]
20007758:	32b0      	adds	r2, #176	@ 0xb0
2000775a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000775e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
20007760:	68fb      	ldr	r3, [r7, #12]
20007762:	2b00      	cmp	r3, #0
20007764:	d101      	bne.n	2000776a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
20007766:	2303      	movs	r3, #3
20007768:	e016      	b.n	20007798 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
2000776a:	68fb      	ldr	r3, [r7, #12]
2000776c:	691b      	ldr	r3, [r3, #16]
2000776e:	2b01      	cmp	r3, #1
20007770:	d111      	bne.n	20007796 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
20007772:	687b      	ldr	r3, [r7, #4]
20007774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
20007778:	687a      	ldr	r2, [r7, #4]
2000777a:	33b0      	adds	r3, #176	@ 0xb0
2000777c:	009b      	lsls	r3, r3, #2
2000777e:	4413      	add	r3, r2
20007780:	685b      	ldr	r3, [r3, #4]
20007782:	68db      	ldr	r3, [r3, #12]
20007784:	68fa      	ldr	r2, [r7, #12]
20007786:	7810      	ldrb	r0, [r2, #0]
20007788:	68fa      	ldr	r2, [r7, #12]
2000778a:	7852      	ldrb	r2, [r2, #1]
2000778c:	4611      	mov	r1, r2
2000778e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
20007790:	68fb      	ldr	r3, [r7, #12]
20007792:	2200      	movs	r2, #0
20007794:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
20007796:	2300      	movs	r3, #0
}
20007798:	4618      	mov	r0, r3
2000779a:	3710      	adds	r7, #16
2000779c:	46bd      	mov	sp, r7
2000779e:	bd80      	pop	{r7, pc}

200077a0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
200077a0:	b480      	push	{r7}
200077a2:	b083      	sub	sp, #12
200077a4:	af00      	add	r7, sp, #0
200077a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
200077a8:	687b      	ldr	r3, [r7, #4]
200077aa:	220a      	movs	r2, #10
200077ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
200077ae:	4b03      	ldr	r3, [pc, #12]	@ (200077bc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
200077b0:	4618      	mov	r0, r3
200077b2:	370c      	adds	r7, #12
200077b4:	46bd      	mov	sp, r7
200077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200077ba:	4770      	bx	lr
200077bc:	20009c28 	.word	0x20009c28

200077c0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
200077c0:	b480      	push	{r7}
200077c2:	b083      	sub	sp, #12
200077c4:	af00      	add	r7, sp, #0
200077c6:	6078      	str	r0, [r7, #4]
200077c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
200077ca:	683b      	ldr	r3, [r7, #0]
200077cc:	2b00      	cmp	r3, #0
200077ce:	d101      	bne.n	200077d4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
200077d0:	2303      	movs	r3, #3
200077d2:	e009      	b.n	200077e8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
200077d4:	687b      	ldr	r3, [r7, #4]
200077d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
200077da:	687a      	ldr	r2, [r7, #4]
200077dc:	33b0      	adds	r3, #176	@ 0xb0
200077de:	009b      	lsls	r3, r3, #2
200077e0:	4413      	add	r3, r2
200077e2:	683a      	ldr	r2, [r7, #0]
200077e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
200077e6:	2300      	movs	r3, #0
}
200077e8:	4618      	mov	r0, r3
200077ea:	370c      	adds	r7, #12
200077ec:	46bd      	mov	sp, r7
200077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200077f2:	4770      	bx	lr

200077f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
200077f4:	b580      	push	{r7, lr}
200077f6:	b086      	sub	sp, #24
200077f8:	af00      	add	r7, sp, #0
200077fa:	60f8      	str	r0, [r7, #12]
200077fc:	60b9      	str	r1, [r7, #8]
200077fe:	4613      	mov	r3, r2
20007800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
20007802:	68fb      	ldr	r3, [r7, #12]
20007804:	2b00      	cmp	r3, #0
20007806:	d101      	bne.n	2000780c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
20007808:	2303      	movs	r3, #3
2000780a:	e01f      	b.n	2000784c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
2000780c:	68fb      	ldr	r3, [r7, #12]
2000780e:	2200      	movs	r2, #0
20007810:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
20007814:	68fb      	ldr	r3, [r7, #12]
20007816:	2200      	movs	r2, #0
20007818:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
2000781c:	68fb      	ldr	r3, [r7, #12]
2000781e:	2200      	movs	r2, #0
20007820:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
20007824:	68bb      	ldr	r3, [r7, #8]
20007826:	2b00      	cmp	r3, #0
20007828:	d003      	beq.n	20007832 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
2000782a:	68fb      	ldr	r3, [r7, #12]
2000782c:	68ba      	ldr	r2, [r7, #8]
2000782e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
20007832:	68fb      	ldr	r3, [r7, #12]
20007834:	2201      	movs	r2, #1
20007836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
2000783a:	68fb      	ldr	r3, [r7, #12]
2000783c:	79fa      	ldrb	r2, [r7, #7]
2000783e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
20007840:	68f8      	ldr	r0, [r7, #12]
20007842:	f001 fe2f 	bl	200094a4 <USBD_LL_Init>
20007846:	4603      	mov	r3, r0
20007848:	75fb      	strb	r3, [r7, #23]

  return ret;
2000784a:	7dfb      	ldrb	r3, [r7, #23]
}
2000784c:	4618      	mov	r0, r3
2000784e:	3718      	adds	r7, #24
20007850:	46bd      	mov	sp, r7
20007852:	bd80      	pop	{r7, pc}

20007854 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
20007854:	b580      	push	{r7, lr}
20007856:	b084      	sub	sp, #16
20007858:	af00      	add	r7, sp, #0
2000785a:	6078      	str	r0, [r7, #4]
2000785c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
2000785e:	2300      	movs	r3, #0
20007860:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
20007862:	683b      	ldr	r3, [r7, #0]
20007864:	2b00      	cmp	r3, #0
20007866:	d101      	bne.n	2000786c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
20007868:	2303      	movs	r3, #3
2000786a:	e025      	b.n	200078b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
2000786c:	687b      	ldr	r3, [r7, #4]
2000786e:	683a      	ldr	r2, [r7, #0]
20007870:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
20007874:	687b      	ldr	r3, [r7, #4]
20007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000787a:	687b      	ldr	r3, [r7, #4]
2000787c:	32ae      	adds	r2, #174	@ 0xae
2000787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20007884:	2b00      	cmp	r3, #0
20007886:	d00f      	beq.n	200078a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
20007888:	687b      	ldr	r3, [r7, #4]
2000788a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
2000788e:	687b      	ldr	r3, [r7, #4]
20007890:	32ae      	adds	r2, #174	@ 0xae
20007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20007898:	f107 020e 	add.w	r2, r7, #14
2000789c:	4610      	mov	r0, r2
2000789e:	4798      	blx	r3
200078a0:	4602      	mov	r2, r0
200078a2:	687b      	ldr	r3, [r7, #4]
200078a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
200078a8:	687b      	ldr	r3, [r7, #4]
200078aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
200078ae:	1c5a      	adds	r2, r3, #1
200078b0:	687b      	ldr	r3, [r7, #4]
200078b2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
200078b6:	2300      	movs	r3, #0
}
200078b8:	4618      	mov	r0, r3
200078ba:	3710      	adds	r7, #16
200078bc:	46bd      	mov	sp, r7
200078be:	bd80      	pop	{r7, pc}

200078c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
200078c0:	b580      	push	{r7, lr}
200078c2:	b082      	sub	sp, #8
200078c4:	af00      	add	r7, sp, #0
200078c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
200078c8:	6878      	ldr	r0, [r7, #4]
200078ca:	f001 fe37 	bl	2000953c <USBD_LL_Start>
200078ce:	4603      	mov	r3, r0
}
200078d0:	4618      	mov	r0, r3
200078d2:	3708      	adds	r7, #8
200078d4:	46bd      	mov	sp, r7
200078d6:	bd80      	pop	{r7, pc}

200078d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
200078d8:	b480      	push	{r7}
200078da:	b083      	sub	sp, #12
200078dc:	af00      	add	r7, sp, #0
200078de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
200078e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
200078e2:	4618      	mov	r0, r3
200078e4:	370c      	adds	r7, #12
200078e6:	46bd      	mov	sp, r7
200078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200078ec:	4770      	bx	lr

200078ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
200078ee:	b580      	push	{r7, lr}
200078f0:	b084      	sub	sp, #16
200078f2:	af00      	add	r7, sp, #0
200078f4:	6078      	str	r0, [r7, #4]
200078f6:	460b      	mov	r3, r1
200078f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
200078fa:	2300      	movs	r3, #0
200078fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
200078fe:	687b      	ldr	r3, [r7, #4]
20007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007904:	2b00      	cmp	r3, #0
20007906:	d009      	beq.n	2000791c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
20007908:	687b      	ldr	r3, [r7, #4]
2000790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000790e:	681b      	ldr	r3, [r3, #0]
20007910:	78fa      	ldrb	r2, [r7, #3]
20007912:	4611      	mov	r1, r2
20007914:	6878      	ldr	r0, [r7, #4]
20007916:	4798      	blx	r3
20007918:	4603      	mov	r3, r0
2000791a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
2000791c:	7bfb      	ldrb	r3, [r7, #15]
}
2000791e:	4618      	mov	r0, r3
20007920:	3710      	adds	r7, #16
20007922:	46bd      	mov	sp, r7
20007924:	bd80      	pop	{r7, pc}

20007926 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
20007926:	b580      	push	{r7, lr}
20007928:	b084      	sub	sp, #16
2000792a:	af00      	add	r7, sp, #0
2000792c:	6078      	str	r0, [r7, #4]
2000792e:	460b      	mov	r3, r1
20007930:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
20007932:	2300      	movs	r3, #0
20007934:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
20007936:	687b      	ldr	r3, [r7, #4]
20007938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000793c:	685b      	ldr	r3, [r3, #4]
2000793e:	78fa      	ldrb	r2, [r7, #3]
20007940:	4611      	mov	r1, r2
20007942:	6878      	ldr	r0, [r7, #4]
20007944:	4798      	blx	r3
20007946:	4603      	mov	r3, r0
20007948:	2b00      	cmp	r3, #0
2000794a:	d001      	beq.n	20007950 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
2000794c:	2303      	movs	r3, #3
2000794e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
20007950:	7bfb      	ldrb	r3, [r7, #15]
}
20007952:	4618      	mov	r0, r3
20007954:	3710      	adds	r7, #16
20007956:	46bd      	mov	sp, r7
20007958:	bd80      	pop	{r7, pc}

2000795a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
2000795a:	b580      	push	{r7, lr}
2000795c:	b084      	sub	sp, #16
2000795e:	af00      	add	r7, sp, #0
20007960:	6078      	str	r0, [r7, #4]
20007962:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
20007964:	687b      	ldr	r3, [r7, #4]
20007966:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
2000796a:	6839      	ldr	r1, [r7, #0]
2000796c:	4618      	mov	r0, r3
2000796e:	f001 f96c 	bl	20008c4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
20007972:	687b      	ldr	r3, [r7, #4]
20007974:	2201      	movs	r2, #1
20007976:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
2000797a:	687b      	ldr	r3, [r7, #4]
2000797c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
20007980:	461a      	mov	r2, r3
20007982:	687b      	ldr	r3, [r7, #4]
20007984:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
20007988:	687b      	ldr	r3, [r7, #4]
2000798a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
2000798e:	f003 031f 	and.w	r3, r3, #31
20007992:	2b02      	cmp	r3, #2
20007994:	d01a      	beq.n	200079cc <USBD_LL_SetupStage+0x72>
20007996:	2b02      	cmp	r3, #2
20007998:	d822      	bhi.n	200079e0 <USBD_LL_SetupStage+0x86>
2000799a:	2b00      	cmp	r3, #0
2000799c:	d002      	beq.n	200079a4 <USBD_LL_SetupStage+0x4a>
2000799e:	2b01      	cmp	r3, #1
200079a0:	d00a      	beq.n	200079b8 <USBD_LL_SetupStage+0x5e>
200079a2:	e01d      	b.n	200079e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
200079a4:	687b      	ldr	r3, [r7, #4]
200079a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
200079aa:	4619      	mov	r1, r3
200079ac:	6878      	ldr	r0, [r7, #4]
200079ae:	f000 fb75 	bl	2000809c <USBD_StdDevReq>
200079b2:	4603      	mov	r3, r0
200079b4:	73fb      	strb	r3, [r7, #15]
      break;
200079b6:	e020      	b.n	200079fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
200079b8:	687b      	ldr	r3, [r7, #4]
200079ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
200079be:	4619      	mov	r1, r3
200079c0:	6878      	ldr	r0, [r7, #4]
200079c2:	f000 fbdd 	bl	20008180 <USBD_StdItfReq>
200079c6:	4603      	mov	r3, r0
200079c8:	73fb      	strb	r3, [r7, #15]
      break;
200079ca:	e016      	b.n	200079fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
200079cc:	687b      	ldr	r3, [r7, #4]
200079ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
200079d2:	4619      	mov	r1, r3
200079d4:	6878      	ldr	r0, [r7, #4]
200079d6:	f000 fc3f 	bl	20008258 <USBD_StdEPReq>
200079da:	4603      	mov	r3, r0
200079dc:	73fb      	strb	r3, [r7, #15]
      break;
200079de:	e00c      	b.n	200079fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
200079e0:	687b      	ldr	r3, [r7, #4]
200079e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
200079e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
200079ea:	b2db      	uxtb	r3, r3
200079ec:	4619      	mov	r1, r3
200079ee:	6878      	ldr	r0, [r7, #4]
200079f0:	f001 fe04 	bl	200095fc <USBD_LL_StallEP>
200079f4:	4603      	mov	r3, r0
200079f6:	73fb      	strb	r3, [r7, #15]
      break;
200079f8:	bf00      	nop
  }

  return ret;
200079fa:	7bfb      	ldrb	r3, [r7, #15]
}
200079fc:	4618      	mov	r0, r3
200079fe:	3710      	adds	r7, #16
20007a00:	46bd      	mov	sp, r7
20007a02:	bd80      	pop	{r7, pc}

20007a04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
20007a04:	b580      	push	{r7, lr}
20007a06:	b086      	sub	sp, #24
20007a08:	af00      	add	r7, sp, #0
20007a0a:	60f8      	str	r0, [r7, #12]
20007a0c:	460b      	mov	r3, r1
20007a0e:	607a      	str	r2, [r7, #4]
20007a10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
20007a12:	2300      	movs	r3, #0
20007a14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
20007a16:	7afb      	ldrb	r3, [r7, #11]
20007a18:	2b00      	cmp	r3, #0
20007a1a:	d177      	bne.n	20007b0c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
20007a1c:	68fb      	ldr	r3, [r7, #12]
20007a1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
20007a22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
20007a24:	68fb      	ldr	r3, [r7, #12]
20007a26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
20007a2a:	2b03      	cmp	r3, #3
20007a2c:	f040 80a1 	bne.w	20007b72 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
20007a30:	693b      	ldr	r3, [r7, #16]
20007a32:	685b      	ldr	r3, [r3, #4]
20007a34:	693a      	ldr	r2, [r7, #16]
20007a36:	8992      	ldrh	r2, [r2, #12]
20007a38:	4293      	cmp	r3, r2
20007a3a:	d91c      	bls.n	20007a76 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
20007a3c:	693b      	ldr	r3, [r7, #16]
20007a3e:	685b      	ldr	r3, [r3, #4]
20007a40:	693a      	ldr	r2, [r7, #16]
20007a42:	8992      	ldrh	r2, [r2, #12]
20007a44:	1a9a      	subs	r2, r3, r2
20007a46:	693b      	ldr	r3, [r7, #16]
20007a48:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
20007a4a:	693b      	ldr	r3, [r7, #16]
20007a4c:	691b      	ldr	r3, [r3, #16]
20007a4e:	693a      	ldr	r2, [r7, #16]
20007a50:	8992      	ldrh	r2, [r2, #12]
20007a52:	441a      	add	r2, r3
20007a54:	693b      	ldr	r3, [r7, #16]
20007a56:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
20007a58:	693b      	ldr	r3, [r7, #16]
20007a5a:	6919      	ldr	r1, [r3, #16]
20007a5c:	693b      	ldr	r3, [r7, #16]
20007a5e:	899b      	ldrh	r3, [r3, #12]
20007a60:	461a      	mov	r2, r3
20007a62:	693b      	ldr	r3, [r7, #16]
20007a64:	685b      	ldr	r3, [r3, #4]
20007a66:	4293      	cmp	r3, r2
20007a68:	bf38      	it	cc
20007a6a:	4613      	movcc	r3, r2
20007a6c:	461a      	mov	r2, r3
20007a6e:	68f8      	ldr	r0, [r7, #12]
20007a70:	f001 f9f2 	bl	20008e58 <USBD_CtlContinueRx>
20007a74:	e07d      	b.n	20007b72 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
20007a76:	68fb      	ldr	r3, [r7, #12]
20007a78:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
20007a7c:	f003 031f 	and.w	r3, r3, #31
20007a80:	2b02      	cmp	r3, #2
20007a82:	d014      	beq.n	20007aae <USBD_LL_DataOutStage+0xaa>
20007a84:	2b02      	cmp	r3, #2
20007a86:	d81d      	bhi.n	20007ac4 <USBD_LL_DataOutStage+0xc0>
20007a88:	2b00      	cmp	r3, #0
20007a8a:	d002      	beq.n	20007a92 <USBD_LL_DataOutStage+0x8e>
20007a8c:	2b01      	cmp	r3, #1
20007a8e:	d003      	beq.n	20007a98 <USBD_LL_DataOutStage+0x94>
20007a90:	e018      	b.n	20007ac4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
20007a92:	2300      	movs	r3, #0
20007a94:	75bb      	strb	r3, [r7, #22]
            break;
20007a96:	e018      	b.n	20007aca <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
20007a98:	68fb      	ldr	r3, [r7, #12]
20007a9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
20007a9e:	b2db      	uxtb	r3, r3
20007aa0:	4619      	mov	r1, r3
20007aa2:	68f8      	ldr	r0, [r7, #12]
20007aa4:	f000 fa6e 	bl	20007f84 <USBD_CoreFindIF>
20007aa8:	4603      	mov	r3, r0
20007aaa:	75bb      	strb	r3, [r7, #22]
            break;
20007aac:	e00d      	b.n	20007aca <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
20007aae:	68fb      	ldr	r3, [r7, #12]
20007ab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
20007ab4:	b2db      	uxtb	r3, r3
20007ab6:	4619      	mov	r1, r3
20007ab8:	68f8      	ldr	r0, [r7, #12]
20007aba:	f000 fa70 	bl	20007f9e <USBD_CoreFindEP>
20007abe:	4603      	mov	r3, r0
20007ac0:	75bb      	strb	r3, [r7, #22]
            break;
20007ac2:	e002      	b.n	20007aca <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
20007ac4:	2300      	movs	r3, #0
20007ac6:	75bb      	strb	r3, [r7, #22]
            break;
20007ac8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
20007aca:	7dbb      	ldrb	r3, [r7, #22]
20007acc:	2b00      	cmp	r3, #0
20007ace:	d119      	bne.n	20007b04 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007ad0:	68fb      	ldr	r3, [r7, #12]
20007ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007ad6:	b2db      	uxtb	r3, r3
20007ad8:	2b03      	cmp	r3, #3
20007ada:	d113      	bne.n	20007b04 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
20007adc:	7dba      	ldrb	r2, [r7, #22]
20007ade:	68fb      	ldr	r3, [r7, #12]
20007ae0:	32ae      	adds	r2, #174	@ 0xae
20007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007ae6:	691b      	ldr	r3, [r3, #16]
20007ae8:	2b00      	cmp	r3, #0
20007aea:	d00b      	beq.n	20007b04 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
20007aec:	7dba      	ldrb	r2, [r7, #22]
20007aee:	68fb      	ldr	r3, [r7, #12]
20007af0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
20007af4:	7dba      	ldrb	r2, [r7, #22]
20007af6:	68fb      	ldr	r3, [r7, #12]
20007af8:	32ae      	adds	r2, #174	@ 0xae
20007afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007afe:	691b      	ldr	r3, [r3, #16]
20007b00:	68f8      	ldr	r0, [r7, #12]
20007b02:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
20007b04:	68f8      	ldr	r0, [r7, #12]
20007b06:	f001 f9b8 	bl	20008e7a <USBD_CtlSendStatus>
20007b0a:	e032      	b.n	20007b72 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
20007b0c:	7afb      	ldrb	r3, [r7, #11]
20007b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20007b12:	b2db      	uxtb	r3, r3
20007b14:	4619      	mov	r1, r3
20007b16:	68f8      	ldr	r0, [r7, #12]
20007b18:	f000 fa41 	bl	20007f9e <USBD_CoreFindEP>
20007b1c:	4603      	mov	r3, r0
20007b1e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
20007b20:	7dbb      	ldrb	r3, [r7, #22]
20007b22:	2bff      	cmp	r3, #255	@ 0xff
20007b24:	d025      	beq.n	20007b72 <USBD_LL_DataOutStage+0x16e>
20007b26:	7dbb      	ldrb	r3, [r7, #22]
20007b28:	2b00      	cmp	r3, #0
20007b2a:	d122      	bne.n	20007b72 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007b2c:	68fb      	ldr	r3, [r7, #12]
20007b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007b32:	b2db      	uxtb	r3, r3
20007b34:	2b03      	cmp	r3, #3
20007b36:	d117      	bne.n	20007b68 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
20007b38:	7dba      	ldrb	r2, [r7, #22]
20007b3a:	68fb      	ldr	r3, [r7, #12]
20007b3c:	32ae      	adds	r2, #174	@ 0xae
20007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007b42:	699b      	ldr	r3, [r3, #24]
20007b44:	2b00      	cmp	r3, #0
20007b46:	d00f      	beq.n	20007b68 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
20007b48:	7dba      	ldrb	r2, [r7, #22]
20007b4a:	68fb      	ldr	r3, [r7, #12]
20007b4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
20007b50:	7dba      	ldrb	r2, [r7, #22]
20007b52:	68fb      	ldr	r3, [r7, #12]
20007b54:	32ae      	adds	r2, #174	@ 0xae
20007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007b5a:	699b      	ldr	r3, [r3, #24]
20007b5c:	7afa      	ldrb	r2, [r7, #11]
20007b5e:	4611      	mov	r1, r2
20007b60:	68f8      	ldr	r0, [r7, #12]
20007b62:	4798      	blx	r3
20007b64:	4603      	mov	r3, r0
20007b66:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
20007b68:	7dfb      	ldrb	r3, [r7, #23]
20007b6a:	2b00      	cmp	r3, #0
20007b6c:	d001      	beq.n	20007b72 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
20007b6e:	7dfb      	ldrb	r3, [r7, #23]
20007b70:	e000      	b.n	20007b74 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
20007b72:	2300      	movs	r3, #0
}
20007b74:	4618      	mov	r0, r3
20007b76:	3718      	adds	r7, #24
20007b78:	46bd      	mov	sp, r7
20007b7a:	bd80      	pop	{r7, pc}

20007b7c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
20007b7c:	b580      	push	{r7, lr}
20007b7e:	b086      	sub	sp, #24
20007b80:	af00      	add	r7, sp, #0
20007b82:	60f8      	str	r0, [r7, #12]
20007b84:	460b      	mov	r3, r1
20007b86:	607a      	str	r2, [r7, #4]
20007b88:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
20007b8a:	7afb      	ldrb	r3, [r7, #11]
20007b8c:	2b00      	cmp	r3, #0
20007b8e:	d178      	bne.n	20007c82 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
20007b90:	68fb      	ldr	r3, [r7, #12]
20007b92:	3314      	adds	r3, #20
20007b94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
20007b96:	68fb      	ldr	r3, [r7, #12]
20007b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
20007b9c:	2b02      	cmp	r3, #2
20007b9e:	d163      	bne.n	20007c68 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
20007ba0:	693b      	ldr	r3, [r7, #16]
20007ba2:	685b      	ldr	r3, [r3, #4]
20007ba4:	693a      	ldr	r2, [r7, #16]
20007ba6:	8992      	ldrh	r2, [r2, #12]
20007ba8:	4293      	cmp	r3, r2
20007baa:	d91c      	bls.n	20007be6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
20007bac:	693b      	ldr	r3, [r7, #16]
20007bae:	685b      	ldr	r3, [r3, #4]
20007bb0:	693a      	ldr	r2, [r7, #16]
20007bb2:	8992      	ldrh	r2, [r2, #12]
20007bb4:	1a9a      	subs	r2, r3, r2
20007bb6:	693b      	ldr	r3, [r7, #16]
20007bb8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
20007bba:	693b      	ldr	r3, [r7, #16]
20007bbc:	691b      	ldr	r3, [r3, #16]
20007bbe:	693a      	ldr	r2, [r7, #16]
20007bc0:	8992      	ldrh	r2, [r2, #12]
20007bc2:	441a      	add	r2, r3
20007bc4:	693b      	ldr	r3, [r7, #16]
20007bc6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
20007bc8:	693b      	ldr	r3, [r7, #16]
20007bca:	6919      	ldr	r1, [r3, #16]
20007bcc:	693b      	ldr	r3, [r7, #16]
20007bce:	685b      	ldr	r3, [r3, #4]
20007bd0:	461a      	mov	r2, r3
20007bd2:	68f8      	ldr	r0, [r7, #12]
20007bd4:	f001 f90e 	bl	20008df4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
20007bd8:	2300      	movs	r3, #0
20007bda:	2200      	movs	r2, #0
20007bdc:	2100      	movs	r1, #0
20007bde:	68f8      	ldr	r0, [r7, #12]
20007be0:	f001 fdb6 	bl	20009750 <USBD_LL_PrepareReceive>
20007be4:	e040      	b.n	20007c68 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
20007be6:	693b      	ldr	r3, [r7, #16]
20007be8:	899b      	ldrh	r3, [r3, #12]
20007bea:	461a      	mov	r2, r3
20007bec:	693b      	ldr	r3, [r7, #16]
20007bee:	685b      	ldr	r3, [r3, #4]
20007bf0:	429a      	cmp	r2, r3
20007bf2:	d11c      	bne.n	20007c2e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
20007bf4:	693b      	ldr	r3, [r7, #16]
20007bf6:	681b      	ldr	r3, [r3, #0]
20007bf8:	693a      	ldr	r2, [r7, #16]
20007bfa:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
20007bfc:	4293      	cmp	r3, r2
20007bfe:	d316      	bcc.n	20007c2e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
20007c00:	693b      	ldr	r3, [r7, #16]
20007c02:	681a      	ldr	r2, [r3, #0]
20007c04:	68fb      	ldr	r3, [r7, #12]
20007c06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
20007c0a:	429a      	cmp	r2, r3
20007c0c:	d20f      	bcs.n	20007c2e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
20007c0e:	2200      	movs	r2, #0
20007c10:	2100      	movs	r1, #0
20007c12:	68f8      	ldr	r0, [r7, #12]
20007c14:	f001 f8ee 	bl	20008df4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
20007c18:	68fb      	ldr	r3, [r7, #12]
20007c1a:	2200      	movs	r2, #0
20007c1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
20007c20:	2300      	movs	r3, #0
20007c22:	2200      	movs	r2, #0
20007c24:	2100      	movs	r1, #0
20007c26:	68f8      	ldr	r0, [r7, #12]
20007c28:	f001 fd92 	bl	20009750 <USBD_LL_PrepareReceive>
20007c2c:	e01c      	b.n	20007c68 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007c2e:	68fb      	ldr	r3, [r7, #12]
20007c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007c34:	b2db      	uxtb	r3, r3
20007c36:	2b03      	cmp	r3, #3
20007c38:	d10f      	bne.n	20007c5a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
20007c3a:	68fb      	ldr	r3, [r7, #12]
20007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007c40:	68db      	ldr	r3, [r3, #12]
20007c42:	2b00      	cmp	r3, #0
20007c44:	d009      	beq.n	20007c5a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
20007c46:	68fb      	ldr	r3, [r7, #12]
20007c48:	2200      	movs	r2, #0
20007c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
20007c4e:	68fb      	ldr	r3, [r7, #12]
20007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007c54:	68db      	ldr	r3, [r3, #12]
20007c56:	68f8      	ldr	r0, [r7, #12]
20007c58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
20007c5a:	2180      	movs	r1, #128	@ 0x80
20007c5c:	68f8      	ldr	r0, [r7, #12]
20007c5e:	f001 fccd 	bl	200095fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
20007c62:	68f8      	ldr	r0, [r7, #12]
20007c64:	f001 f91c 	bl	20008ea0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
20007c68:	68fb      	ldr	r3, [r7, #12]
20007c6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
20007c6e:	2b00      	cmp	r3, #0
20007c70:	d03a      	beq.n	20007ce8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
20007c72:	68f8      	ldr	r0, [r7, #12]
20007c74:	f7ff fe30 	bl	200078d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
20007c78:	68fb      	ldr	r3, [r7, #12]
20007c7a:	2200      	movs	r2, #0
20007c7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
20007c80:	e032      	b.n	20007ce8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
20007c82:	7afb      	ldrb	r3, [r7, #11]
20007c84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
20007c88:	b2db      	uxtb	r3, r3
20007c8a:	4619      	mov	r1, r3
20007c8c:	68f8      	ldr	r0, [r7, #12]
20007c8e:	f000 f986 	bl	20007f9e <USBD_CoreFindEP>
20007c92:	4603      	mov	r3, r0
20007c94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
20007c96:	7dfb      	ldrb	r3, [r7, #23]
20007c98:	2bff      	cmp	r3, #255	@ 0xff
20007c9a:	d025      	beq.n	20007ce8 <USBD_LL_DataInStage+0x16c>
20007c9c:	7dfb      	ldrb	r3, [r7, #23]
20007c9e:	2b00      	cmp	r3, #0
20007ca0:	d122      	bne.n	20007ce8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007ca2:	68fb      	ldr	r3, [r7, #12]
20007ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007ca8:	b2db      	uxtb	r3, r3
20007caa:	2b03      	cmp	r3, #3
20007cac:	d11c      	bne.n	20007ce8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
20007cae:	7dfa      	ldrb	r2, [r7, #23]
20007cb0:	68fb      	ldr	r3, [r7, #12]
20007cb2:	32ae      	adds	r2, #174	@ 0xae
20007cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007cb8:	695b      	ldr	r3, [r3, #20]
20007cba:	2b00      	cmp	r3, #0
20007cbc:	d014      	beq.n	20007ce8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
20007cbe:	7dfa      	ldrb	r2, [r7, #23]
20007cc0:	68fb      	ldr	r3, [r7, #12]
20007cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
20007cc6:	7dfa      	ldrb	r2, [r7, #23]
20007cc8:	68fb      	ldr	r3, [r7, #12]
20007cca:	32ae      	adds	r2, #174	@ 0xae
20007ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007cd0:	695b      	ldr	r3, [r3, #20]
20007cd2:	7afa      	ldrb	r2, [r7, #11]
20007cd4:	4611      	mov	r1, r2
20007cd6:	68f8      	ldr	r0, [r7, #12]
20007cd8:	4798      	blx	r3
20007cda:	4603      	mov	r3, r0
20007cdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
20007cde:	7dbb      	ldrb	r3, [r7, #22]
20007ce0:	2b00      	cmp	r3, #0
20007ce2:	d001      	beq.n	20007ce8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
20007ce4:	7dbb      	ldrb	r3, [r7, #22]
20007ce6:	e000      	b.n	20007cea <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
20007ce8:	2300      	movs	r3, #0
}
20007cea:	4618      	mov	r0, r3
20007cec:	3718      	adds	r7, #24
20007cee:	46bd      	mov	sp, r7
20007cf0:	bd80      	pop	{r7, pc}

20007cf2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
20007cf2:	b580      	push	{r7, lr}
20007cf4:	b084      	sub	sp, #16
20007cf6:	af00      	add	r7, sp, #0
20007cf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
20007cfa:	2300      	movs	r3, #0
20007cfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
20007cfe:	687b      	ldr	r3, [r7, #4]
20007d00:	2201      	movs	r2, #1
20007d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
20007d06:	687b      	ldr	r3, [r7, #4]
20007d08:	2200      	movs	r2, #0
20007d0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
20007d0e:	687b      	ldr	r3, [r7, #4]
20007d10:	2200      	movs	r2, #0
20007d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
20007d14:	687b      	ldr	r3, [r7, #4]
20007d16:	2200      	movs	r2, #0
20007d18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
20007d1c:	687b      	ldr	r3, [r7, #4]
20007d1e:	2200      	movs	r2, #0
20007d20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
20007d24:	687b      	ldr	r3, [r7, #4]
20007d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007d2a:	2b00      	cmp	r3, #0
20007d2c:	d014      	beq.n	20007d58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
20007d2e:	687b      	ldr	r3, [r7, #4]
20007d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007d34:	685b      	ldr	r3, [r3, #4]
20007d36:	2b00      	cmp	r3, #0
20007d38:	d00e      	beq.n	20007d58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
20007d3a:	687b      	ldr	r3, [r7, #4]
20007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007d40:	685b      	ldr	r3, [r3, #4]
20007d42:	687a      	ldr	r2, [r7, #4]
20007d44:	6852      	ldr	r2, [r2, #4]
20007d46:	b2d2      	uxtb	r2, r2
20007d48:	4611      	mov	r1, r2
20007d4a:	6878      	ldr	r0, [r7, #4]
20007d4c:	4798      	blx	r3
20007d4e:	4603      	mov	r3, r0
20007d50:	2b00      	cmp	r3, #0
20007d52:	d001      	beq.n	20007d58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
20007d54:	2303      	movs	r3, #3
20007d56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
20007d58:	2340      	movs	r3, #64	@ 0x40
20007d5a:	2200      	movs	r2, #0
20007d5c:	2100      	movs	r1, #0
20007d5e:	6878      	ldr	r0, [r7, #4]
20007d60:	f001 fc07 	bl	20009572 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
20007d64:	687b      	ldr	r3, [r7, #4]
20007d66:	2201      	movs	r2, #1
20007d68:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
20007d6c:	687b      	ldr	r3, [r7, #4]
20007d6e:	2240      	movs	r2, #64	@ 0x40
20007d70:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
20007d74:	2340      	movs	r3, #64	@ 0x40
20007d76:	2200      	movs	r2, #0
20007d78:	2180      	movs	r1, #128	@ 0x80
20007d7a:	6878      	ldr	r0, [r7, #4]
20007d7c:	f001 fbf9 	bl	20009572 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
20007d80:	687b      	ldr	r3, [r7, #4]
20007d82:	2201      	movs	r2, #1
20007d84:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
20007d88:	687b      	ldr	r3, [r7, #4]
20007d8a:	2240      	movs	r2, #64	@ 0x40
20007d8c:	841a      	strh	r2, [r3, #32]

  return ret;
20007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
20007d90:	4618      	mov	r0, r3
20007d92:	3710      	adds	r7, #16
20007d94:	46bd      	mov	sp, r7
20007d96:	bd80      	pop	{r7, pc}

20007d98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
20007d98:	b480      	push	{r7}
20007d9a:	b083      	sub	sp, #12
20007d9c:	af00      	add	r7, sp, #0
20007d9e:	6078      	str	r0, [r7, #4]
20007da0:	460b      	mov	r3, r1
20007da2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
20007da4:	687b      	ldr	r3, [r7, #4]
20007da6:	78fa      	ldrb	r2, [r7, #3]
20007da8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
20007daa:	2300      	movs	r3, #0
}
20007dac:	4618      	mov	r0, r3
20007dae:	370c      	adds	r7, #12
20007db0:	46bd      	mov	sp, r7
20007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
20007db6:	4770      	bx	lr

20007db8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
20007db8:	b480      	push	{r7}
20007dba:	b083      	sub	sp, #12
20007dbc:	af00      	add	r7, sp, #0
20007dbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
20007dc0:	687b      	ldr	r3, [r7, #4]
20007dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007dc6:	b2db      	uxtb	r3, r3
20007dc8:	2b04      	cmp	r3, #4
20007dca:	d006      	beq.n	20007dda <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
20007dcc:	687b      	ldr	r3, [r7, #4]
20007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007dd2:	b2da      	uxtb	r2, r3
20007dd4:	687b      	ldr	r3, [r7, #4]
20007dd6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
20007dda:	687b      	ldr	r3, [r7, #4]
20007ddc:	2204      	movs	r2, #4
20007dde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
20007de2:	2300      	movs	r3, #0
}
20007de4:	4618      	mov	r0, r3
20007de6:	370c      	adds	r7, #12
20007de8:	46bd      	mov	sp, r7
20007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
20007dee:	4770      	bx	lr

20007df0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
20007df0:	b480      	push	{r7}
20007df2:	b083      	sub	sp, #12
20007df4:	af00      	add	r7, sp, #0
20007df6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
20007df8:	687b      	ldr	r3, [r7, #4]
20007dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007dfe:	b2db      	uxtb	r3, r3
20007e00:	2b04      	cmp	r3, #4
20007e02:	d106      	bne.n	20007e12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
20007e04:	687b      	ldr	r3, [r7, #4]
20007e06:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
20007e0a:	b2da      	uxtb	r2, r3
20007e0c:	687b      	ldr	r3, [r7, #4]
20007e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
20007e12:	2300      	movs	r3, #0
}
20007e14:	4618      	mov	r0, r3
20007e16:	370c      	adds	r7, #12
20007e18:	46bd      	mov	sp, r7
20007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20007e1e:	4770      	bx	lr

20007e20 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
20007e20:	b580      	push	{r7, lr}
20007e22:	b082      	sub	sp, #8
20007e24:	af00      	add	r7, sp, #0
20007e26:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007e28:	687b      	ldr	r3, [r7, #4]
20007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007e2e:	b2db      	uxtb	r3, r3
20007e30:	2b03      	cmp	r3, #3
20007e32:	d110      	bne.n	20007e56 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
20007e34:	687b      	ldr	r3, [r7, #4]
20007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007e3a:	2b00      	cmp	r3, #0
20007e3c:	d00b      	beq.n	20007e56 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
20007e3e:	687b      	ldr	r3, [r7, #4]
20007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007e44:	69db      	ldr	r3, [r3, #28]
20007e46:	2b00      	cmp	r3, #0
20007e48:	d005      	beq.n	20007e56 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
20007e4a:	687b      	ldr	r3, [r7, #4]
20007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007e50:	69db      	ldr	r3, [r3, #28]
20007e52:	6878      	ldr	r0, [r7, #4]
20007e54:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
20007e56:	2300      	movs	r3, #0
}
20007e58:	4618      	mov	r0, r3
20007e5a:	3708      	adds	r7, #8
20007e5c:	46bd      	mov	sp, r7
20007e5e:	bd80      	pop	{r7, pc}

20007e60 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
20007e60:	b580      	push	{r7, lr}
20007e62:	b082      	sub	sp, #8
20007e64:	af00      	add	r7, sp, #0
20007e66:	6078      	str	r0, [r7, #4]
20007e68:	460b      	mov	r3, r1
20007e6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
20007e6c:	687b      	ldr	r3, [r7, #4]
20007e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007e72:	687b      	ldr	r3, [r7, #4]
20007e74:	32ae      	adds	r2, #174	@ 0xae
20007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007e7a:	2b00      	cmp	r3, #0
20007e7c:	d101      	bne.n	20007e82 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
20007e7e:	2303      	movs	r3, #3
20007e80:	e01c      	b.n	20007ebc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007e82:	687b      	ldr	r3, [r7, #4]
20007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007e88:	b2db      	uxtb	r3, r3
20007e8a:	2b03      	cmp	r3, #3
20007e8c:	d115      	bne.n	20007eba <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
20007e8e:	687b      	ldr	r3, [r7, #4]
20007e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007e94:	687b      	ldr	r3, [r7, #4]
20007e96:	32ae      	adds	r2, #174	@ 0xae
20007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007e9c:	6a1b      	ldr	r3, [r3, #32]
20007e9e:	2b00      	cmp	r3, #0
20007ea0:	d00b      	beq.n	20007eba <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
20007ea2:	687b      	ldr	r3, [r7, #4]
20007ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007ea8:	687b      	ldr	r3, [r7, #4]
20007eaa:	32ae      	adds	r2, #174	@ 0xae
20007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007eb0:	6a1b      	ldr	r3, [r3, #32]
20007eb2:	78fa      	ldrb	r2, [r7, #3]
20007eb4:	4611      	mov	r1, r2
20007eb6:	6878      	ldr	r0, [r7, #4]
20007eb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
20007eba:	2300      	movs	r3, #0
}
20007ebc:	4618      	mov	r0, r3
20007ebe:	3708      	adds	r7, #8
20007ec0:	46bd      	mov	sp, r7
20007ec2:	bd80      	pop	{r7, pc}

20007ec4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
20007ec4:	b580      	push	{r7, lr}
20007ec6:	b082      	sub	sp, #8
20007ec8:	af00      	add	r7, sp, #0
20007eca:	6078      	str	r0, [r7, #4]
20007ecc:	460b      	mov	r3, r1
20007ece:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
20007ed0:	687b      	ldr	r3, [r7, #4]
20007ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007ed6:	687b      	ldr	r3, [r7, #4]
20007ed8:	32ae      	adds	r2, #174	@ 0xae
20007eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007ede:	2b00      	cmp	r3, #0
20007ee0:	d101      	bne.n	20007ee6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
20007ee2:	2303      	movs	r3, #3
20007ee4:	e01c      	b.n	20007f20 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
20007ee6:	687b      	ldr	r3, [r7, #4]
20007ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20007eec:	b2db      	uxtb	r3, r3
20007eee:	2b03      	cmp	r3, #3
20007ef0:	d115      	bne.n	20007f1e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
20007ef2:	687b      	ldr	r3, [r7, #4]
20007ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007ef8:	687b      	ldr	r3, [r7, #4]
20007efa:	32ae      	adds	r2, #174	@ 0xae
20007efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007f02:	2b00      	cmp	r3, #0
20007f04:	d00b      	beq.n	20007f1e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
20007f06:	687b      	ldr	r3, [r7, #4]
20007f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
20007f0c:	687b      	ldr	r3, [r7, #4]
20007f0e:	32ae      	adds	r2, #174	@ 0xae
20007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20007f16:	78fa      	ldrb	r2, [r7, #3]
20007f18:	4611      	mov	r1, r2
20007f1a:	6878      	ldr	r0, [r7, #4]
20007f1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
20007f1e:	2300      	movs	r3, #0
}
20007f20:	4618      	mov	r0, r3
20007f22:	3708      	adds	r7, #8
20007f24:	46bd      	mov	sp, r7
20007f26:	bd80      	pop	{r7, pc}

20007f28 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
20007f28:	b480      	push	{r7}
20007f2a:	b083      	sub	sp, #12
20007f2c:	af00      	add	r7, sp, #0
20007f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
20007f30:	2300      	movs	r3, #0
}
20007f32:	4618      	mov	r0, r3
20007f34:	370c      	adds	r7, #12
20007f36:	46bd      	mov	sp, r7
20007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
20007f3c:	4770      	bx	lr

20007f3e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
20007f3e:	b580      	push	{r7, lr}
20007f40:	b084      	sub	sp, #16
20007f42:	af00      	add	r7, sp, #0
20007f44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
20007f46:	2300      	movs	r3, #0
20007f48:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
20007f4a:	687b      	ldr	r3, [r7, #4]
20007f4c:	2201      	movs	r2, #1
20007f4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
20007f52:	687b      	ldr	r3, [r7, #4]
20007f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007f58:	2b00      	cmp	r3, #0
20007f5a:	d00e      	beq.n	20007f7a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
20007f5c:	687b      	ldr	r3, [r7, #4]
20007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20007f62:	685b      	ldr	r3, [r3, #4]
20007f64:	687a      	ldr	r2, [r7, #4]
20007f66:	6852      	ldr	r2, [r2, #4]
20007f68:	b2d2      	uxtb	r2, r2
20007f6a:	4611      	mov	r1, r2
20007f6c:	6878      	ldr	r0, [r7, #4]
20007f6e:	4798      	blx	r3
20007f70:	4603      	mov	r3, r0
20007f72:	2b00      	cmp	r3, #0
20007f74:	d001      	beq.n	20007f7a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
20007f76:	2303      	movs	r3, #3
20007f78:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
20007f7a:	7bfb      	ldrb	r3, [r7, #15]
}
20007f7c:	4618      	mov	r0, r3
20007f7e:	3710      	adds	r7, #16
20007f80:	46bd      	mov	sp, r7
20007f82:	bd80      	pop	{r7, pc}

20007f84 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
20007f84:	b480      	push	{r7}
20007f86:	b083      	sub	sp, #12
20007f88:	af00      	add	r7, sp, #0
20007f8a:	6078      	str	r0, [r7, #4]
20007f8c:	460b      	mov	r3, r1
20007f8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
20007f90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
20007f92:	4618      	mov	r0, r3
20007f94:	370c      	adds	r7, #12
20007f96:	46bd      	mov	sp, r7
20007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
20007f9c:	4770      	bx	lr

20007f9e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
20007f9e:	b480      	push	{r7}
20007fa0:	b083      	sub	sp, #12
20007fa2:	af00      	add	r7, sp, #0
20007fa4:	6078      	str	r0, [r7, #4]
20007fa6:	460b      	mov	r3, r1
20007fa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
20007faa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
20007fac:	4618      	mov	r0, r3
20007fae:	370c      	adds	r7, #12
20007fb0:	46bd      	mov	sp, r7
20007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
20007fb6:	4770      	bx	lr

20007fb8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
20007fb8:	b580      	push	{r7, lr}
20007fba:	b086      	sub	sp, #24
20007fbc:	af00      	add	r7, sp, #0
20007fbe:	6078      	str	r0, [r7, #4]
20007fc0:	460b      	mov	r3, r1
20007fc2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
20007fc4:	687b      	ldr	r3, [r7, #4]
20007fc6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
20007fc8:	687b      	ldr	r3, [r7, #4]
20007fca:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
20007fcc:	2300      	movs	r3, #0
20007fce:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
20007fd0:	68fb      	ldr	r3, [r7, #12]
20007fd2:	885b      	ldrh	r3, [r3, #2]
20007fd4:	b29b      	uxth	r3, r3
20007fd6:	68fa      	ldr	r2, [r7, #12]
20007fd8:	7812      	ldrb	r2, [r2, #0]
20007fda:	4293      	cmp	r3, r2
20007fdc:	d91f      	bls.n	2000801e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
20007fde:	68fb      	ldr	r3, [r7, #12]
20007fe0:	781b      	ldrb	r3, [r3, #0]
20007fe2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
20007fe4:	e013      	b.n	2000800e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
20007fe6:	f107 030a 	add.w	r3, r7, #10
20007fea:	4619      	mov	r1, r3
20007fec:	6978      	ldr	r0, [r7, #20]
20007fee:	f000 f81b 	bl	20008028 <USBD_GetNextDesc>
20007ff2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
20007ff4:	697b      	ldr	r3, [r7, #20]
20007ff6:	785b      	ldrb	r3, [r3, #1]
20007ff8:	2b05      	cmp	r3, #5
20007ffa:	d108      	bne.n	2000800e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
20007ffc:	697b      	ldr	r3, [r7, #20]
20007ffe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
20008000:	693b      	ldr	r3, [r7, #16]
20008002:	789b      	ldrb	r3, [r3, #2]
20008004:	78fa      	ldrb	r2, [r7, #3]
20008006:	429a      	cmp	r2, r3
20008008:	d008      	beq.n	2000801c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
2000800a:	2300      	movs	r3, #0
2000800c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
2000800e:	68fb      	ldr	r3, [r7, #12]
20008010:	885b      	ldrh	r3, [r3, #2]
20008012:	b29a      	uxth	r2, r3
20008014:	897b      	ldrh	r3, [r7, #10]
20008016:	429a      	cmp	r2, r3
20008018:	d8e5      	bhi.n	20007fe6 <USBD_GetEpDesc+0x2e>
2000801a:	e000      	b.n	2000801e <USBD_GetEpDesc+0x66>
          break;
2000801c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
2000801e:	693b      	ldr	r3, [r7, #16]
}
20008020:	4618      	mov	r0, r3
20008022:	3718      	adds	r7, #24
20008024:	46bd      	mov	sp, r7
20008026:	bd80      	pop	{r7, pc}

20008028 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
20008028:	b480      	push	{r7}
2000802a:	b085      	sub	sp, #20
2000802c:	af00      	add	r7, sp, #0
2000802e:	6078      	str	r0, [r7, #4]
20008030:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
20008032:	687b      	ldr	r3, [r7, #4]
20008034:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
20008036:	683b      	ldr	r3, [r7, #0]
20008038:	881b      	ldrh	r3, [r3, #0]
2000803a:	68fa      	ldr	r2, [r7, #12]
2000803c:	7812      	ldrb	r2, [r2, #0]
2000803e:	4413      	add	r3, r2
20008040:	b29a      	uxth	r2, r3
20008042:	683b      	ldr	r3, [r7, #0]
20008044:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
20008046:	68fb      	ldr	r3, [r7, #12]
20008048:	781b      	ldrb	r3, [r3, #0]
2000804a:	461a      	mov	r2, r3
2000804c:	687b      	ldr	r3, [r7, #4]
2000804e:	4413      	add	r3, r2
20008050:	60fb      	str	r3, [r7, #12]

  return (pnext);
20008052:	68fb      	ldr	r3, [r7, #12]
}
20008054:	4618      	mov	r0, r3
20008056:	3714      	adds	r7, #20
20008058:	46bd      	mov	sp, r7
2000805a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000805e:	4770      	bx	lr

20008060 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
20008060:	b480      	push	{r7}
20008062:	b087      	sub	sp, #28
20008064:	af00      	add	r7, sp, #0
20008066:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
20008068:	687b      	ldr	r3, [r7, #4]
2000806a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
2000806c:	697b      	ldr	r3, [r7, #20]
2000806e:	781b      	ldrb	r3, [r3, #0]
20008070:	827b      	strh	r3, [r7, #18]
  _pbuff++;
20008072:	697b      	ldr	r3, [r7, #20]
20008074:	3301      	adds	r3, #1
20008076:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
20008078:	697b      	ldr	r3, [r7, #20]
2000807a:	781b      	ldrb	r3, [r3, #0]
2000807c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
2000807e:	8a3b      	ldrh	r3, [r7, #16]
20008080:	021b      	lsls	r3, r3, #8
20008082:	b21a      	sxth	r2, r3
20008084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
20008088:	4313      	orrs	r3, r2
2000808a:	b21b      	sxth	r3, r3
2000808c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
2000808e:	89fb      	ldrh	r3, [r7, #14]
}
20008090:	4618      	mov	r0, r3
20008092:	371c      	adds	r7, #28
20008094:	46bd      	mov	sp, r7
20008096:	f85d 7b04 	ldr.w	r7, [sp], #4
2000809a:	4770      	bx	lr

2000809c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
2000809c:	b580      	push	{r7, lr}
2000809e:	b084      	sub	sp, #16
200080a0:	af00      	add	r7, sp, #0
200080a2:	6078      	str	r0, [r7, #4]
200080a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
200080a6:	2300      	movs	r3, #0
200080a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
200080aa:	683b      	ldr	r3, [r7, #0]
200080ac:	781b      	ldrb	r3, [r3, #0]
200080ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
200080b2:	2b40      	cmp	r3, #64	@ 0x40
200080b4:	d005      	beq.n	200080c2 <USBD_StdDevReq+0x26>
200080b6:	2b40      	cmp	r3, #64	@ 0x40
200080b8:	d857      	bhi.n	2000816a <USBD_StdDevReq+0xce>
200080ba:	2b00      	cmp	r3, #0
200080bc:	d00f      	beq.n	200080de <USBD_StdDevReq+0x42>
200080be:	2b20      	cmp	r3, #32
200080c0:	d153      	bne.n	2000816a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
200080c2:	687b      	ldr	r3, [r7, #4]
200080c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
200080c8:	687b      	ldr	r3, [r7, #4]
200080ca:	32ae      	adds	r2, #174	@ 0xae
200080cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200080d0:	689b      	ldr	r3, [r3, #8]
200080d2:	6839      	ldr	r1, [r7, #0]
200080d4:	6878      	ldr	r0, [r7, #4]
200080d6:	4798      	blx	r3
200080d8:	4603      	mov	r3, r0
200080da:	73fb      	strb	r3, [r7, #15]
      break;
200080dc:	e04a      	b.n	20008174 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
200080de:	683b      	ldr	r3, [r7, #0]
200080e0:	785b      	ldrb	r3, [r3, #1]
200080e2:	2b09      	cmp	r3, #9
200080e4:	d83b      	bhi.n	2000815e <USBD_StdDevReq+0xc2>
200080e6:	a201      	add	r2, pc, #4	@ (adr r2, 200080ec <USBD_StdDevReq+0x50>)
200080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200080ec:	20008141 	.word	0x20008141
200080f0:	20008155 	.word	0x20008155
200080f4:	2000815f 	.word	0x2000815f
200080f8:	2000814b 	.word	0x2000814b
200080fc:	2000815f 	.word	0x2000815f
20008100:	2000811f 	.word	0x2000811f
20008104:	20008115 	.word	0x20008115
20008108:	2000815f 	.word	0x2000815f
2000810c:	20008137 	.word	0x20008137
20008110:	20008129 	.word	0x20008129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
20008114:	6839      	ldr	r1, [r7, #0]
20008116:	6878      	ldr	r0, [r7, #4]
20008118:	f000 fa3e 	bl	20008598 <USBD_GetDescriptor>
          break;
2000811c:	e024      	b.n	20008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
2000811e:	6839      	ldr	r1, [r7, #0]
20008120:	6878      	ldr	r0, [r7, #4]
20008122:	f000 fbcd 	bl	200088c0 <USBD_SetAddress>
          break;
20008126:	e01f      	b.n	20008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
20008128:	6839      	ldr	r1, [r7, #0]
2000812a:	6878      	ldr	r0, [r7, #4]
2000812c:	f000 fc0c 	bl	20008948 <USBD_SetConfig>
20008130:	4603      	mov	r3, r0
20008132:	73fb      	strb	r3, [r7, #15]
          break;
20008134:	e018      	b.n	20008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
20008136:	6839      	ldr	r1, [r7, #0]
20008138:	6878      	ldr	r0, [r7, #4]
2000813a:	f000 fcd1 	bl	20008ae0 <USBD_GetConfig>
          break;
2000813e:	e013      	b.n	20008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
20008140:	6839      	ldr	r1, [r7, #0]
20008142:	6878      	ldr	r0, [r7, #4]
20008144:	f000 fd02 	bl	20008b4c <USBD_GetStatus>
          break;
20008148:	e00e      	b.n	20008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
2000814a:	6839      	ldr	r1, [r7, #0]
2000814c:	6878      	ldr	r0, [r7, #4]
2000814e:	f000 fd31 	bl	20008bb4 <USBD_SetFeature>
          break;
20008152:	e009      	b.n	20008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
20008154:	6839      	ldr	r1, [r7, #0]
20008156:	6878      	ldr	r0, [r7, #4]
20008158:	f000 fd55 	bl	20008c06 <USBD_ClrFeature>
          break;
2000815c:	e004      	b.n	20008168 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
2000815e:	6839      	ldr	r1, [r7, #0]
20008160:	6878      	ldr	r0, [r7, #4]
20008162:	f000 fdac 	bl	20008cbe <USBD_CtlError>
          break;
20008166:	bf00      	nop
      }
      break;
20008168:	e004      	b.n	20008174 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
2000816a:	6839      	ldr	r1, [r7, #0]
2000816c:	6878      	ldr	r0, [r7, #4]
2000816e:	f000 fda6 	bl	20008cbe <USBD_CtlError>
      break;
20008172:	bf00      	nop
  }

  return ret;
20008174:	7bfb      	ldrb	r3, [r7, #15]
}
20008176:	4618      	mov	r0, r3
20008178:	3710      	adds	r7, #16
2000817a:	46bd      	mov	sp, r7
2000817c:	bd80      	pop	{r7, pc}
2000817e:	bf00      	nop

20008180 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008180:	b580      	push	{r7, lr}
20008182:	b084      	sub	sp, #16
20008184:	af00      	add	r7, sp, #0
20008186:	6078      	str	r0, [r7, #4]
20008188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
2000818a:	2300      	movs	r3, #0
2000818c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000818e:	683b      	ldr	r3, [r7, #0]
20008190:	781b      	ldrb	r3, [r3, #0]
20008192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
20008196:	2b40      	cmp	r3, #64	@ 0x40
20008198:	d005      	beq.n	200081a6 <USBD_StdItfReq+0x26>
2000819a:	2b40      	cmp	r3, #64	@ 0x40
2000819c:	d852      	bhi.n	20008244 <USBD_StdItfReq+0xc4>
2000819e:	2b00      	cmp	r3, #0
200081a0:	d001      	beq.n	200081a6 <USBD_StdItfReq+0x26>
200081a2:	2b20      	cmp	r3, #32
200081a4:	d14e      	bne.n	20008244 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
200081a6:	687b      	ldr	r3, [r7, #4]
200081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
200081ac:	b2db      	uxtb	r3, r3
200081ae:	3b01      	subs	r3, #1
200081b0:	2b02      	cmp	r3, #2
200081b2:	d840      	bhi.n	20008236 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
200081b4:	683b      	ldr	r3, [r7, #0]
200081b6:	889b      	ldrh	r3, [r3, #4]
200081b8:	b2db      	uxtb	r3, r3
200081ba:	2b01      	cmp	r3, #1
200081bc:	d836      	bhi.n	2000822c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
200081be:	683b      	ldr	r3, [r7, #0]
200081c0:	889b      	ldrh	r3, [r3, #4]
200081c2:	b2db      	uxtb	r3, r3
200081c4:	4619      	mov	r1, r3
200081c6:	6878      	ldr	r0, [r7, #4]
200081c8:	f7ff fedc 	bl	20007f84 <USBD_CoreFindIF>
200081cc:	4603      	mov	r3, r0
200081ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
200081d0:	7bbb      	ldrb	r3, [r7, #14]
200081d2:	2bff      	cmp	r3, #255	@ 0xff
200081d4:	d01d      	beq.n	20008212 <USBD_StdItfReq+0x92>
200081d6:	7bbb      	ldrb	r3, [r7, #14]
200081d8:	2b00      	cmp	r3, #0
200081da:	d11a      	bne.n	20008212 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
200081dc:	7bba      	ldrb	r2, [r7, #14]
200081de:	687b      	ldr	r3, [r7, #4]
200081e0:	32ae      	adds	r2, #174	@ 0xae
200081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200081e6:	689b      	ldr	r3, [r3, #8]
200081e8:	2b00      	cmp	r3, #0
200081ea:	d00f      	beq.n	2000820c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
200081ec:	7bba      	ldrb	r2, [r7, #14]
200081ee:	687b      	ldr	r3, [r7, #4]
200081f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
200081f4:	7bba      	ldrb	r2, [r7, #14]
200081f6:	687b      	ldr	r3, [r7, #4]
200081f8:	32ae      	adds	r2, #174	@ 0xae
200081fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200081fe:	689b      	ldr	r3, [r3, #8]
20008200:	6839      	ldr	r1, [r7, #0]
20008202:	6878      	ldr	r0, [r7, #4]
20008204:	4798      	blx	r3
20008206:	4603      	mov	r3, r0
20008208:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
2000820a:	e004      	b.n	20008216 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
2000820c:	2303      	movs	r3, #3
2000820e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
20008210:	e001      	b.n	20008216 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
20008212:	2303      	movs	r3, #3
20008214:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
20008216:	683b      	ldr	r3, [r7, #0]
20008218:	88db      	ldrh	r3, [r3, #6]
2000821a:	2b00      	cmp	r3, #0
2000821c:	d110      	bne.n	20008240 <USBD_StdItfReq+0xc0>
2000821e:	7bfb      	ldrb	r3, [r7, #15]
20008220:	2b00      	cmp	r3, #0
20008222:	d10d      	bne.n	20008240 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
20008224:	6878      	ldr	r0, [r7, #4]
20008226:	f000 fe28 	bl	20008e7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
2000822a:	e009      	b.n	20008240 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
2000822c:	6839      	ldr	r1, [r7, #0]
2000822e:	6878      	ldr	r0, [r7, #4]
20008230:	f000 fd45 	bl	20008cbe <USBD_CtlError>
          break;
20008234:	e004      	b.n	20008240 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
20008236:	6839      	ldr	r1, [r7, #0]
20008238:	6878      	ldr	r0, [r7, #4]
2000823a:	f000 fd40 	bl	20008cbe <USBD_CtlError>
          break;
2000823e:	e000      	b.n	20008242 <USBD_StdItfReq+0xc2>
          break;
20008240:	bf00      	nop
      }
      break;
20008242:	e004      	b.n	2000824e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
20008244:	6839      	ldr	r1, [r7, #0]
20008246:	6878      	ldr	r0, [r7, #4]
20008248:	f000 fd39 	bl	20008cbe <USBD_CtlError>
      break;
2000824c:	bf00      	nop
  }

  return ret;
2000824e:	7bfb      	ldrb	r3, [r7, #15]
}
20008250:	4618      	mov	r0, r3
20008252:	3710      	adds	r7, #16
20008254:	46bd      	mov	sp, r7
20008256:	bd80      	pop	{r7, pc}

20008258 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008258:	b580      	push	{r7, lr}
2000825a:	b084      	sub	sp, #16
2000825c:	af00      	add	r7, sp, #0
2000825e:	6078      	str	r0, [r7, #4]
20008260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
20008262:	2300      	movs	r3, #0
20008264:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
20008266:	683b      	ldr	r3, [r7, #0]
20008268:	889b      	ldrh	r3, [r3, #4]
2000826a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
2000826c:	683b      	ldr	r3, [r7, #0]
2000826e:	781b      	ldrb	r3, [r3, #0]
20008270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
20008274:	2b40      	cmp	r3, #64	@ 0x40
20008276:	d007      	beq.n	20008288 <USBD_StdEPReq+0x30>
20008278:	2b40      	cmp	r3, #64	@ 0x40
2000827a:	f200 8181 	bhi.w	20008580 <USBD_StdEPReq+0x328>
2000827e:	2b00      	cmp	r3, #0
20008280:	d02a      	beq.n	200082d8 <USBD_StdEPReq+0x80>
20008282:	2b20      	cmp	r3, #32
20008284:	f040 817c 	bne.w	20008580 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
20008288:	7bbb      	ldrb	r3, [r7, #14]
2000828a:	4619      	mov	r1, r3
2000828c:	6878      	ldr	r0, [r7, #4]
2000828e:	f7ff fe86 	bl	20007f9e <USBD_CoreFindEP>
20008292:	4603      	mov	r3, r0
20008294:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
20008296:	7b7b      	ldrb	r3, [r7, #13]
20008298:	2bff      	cmp	r3, #255	@ 0xff
2000829a:	f000 8176 	beq.w	2000858a <USBD_StdEPReq+0x332>
2000829e:	7b7b      	ldrb	r3, [r7, #13]
200082a0:	2b00      	cmp	r3, #0
200082a2:	f040 8172 	bne.w	2000858a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
200082a6:	7b7a      	ldrb	r2, [r7, #13]
200082a8:	687b      	ldr	r3, [r7, #4]
200082aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
200082ae:	7b7a      	ldrb	r2, [r7, #13]
200082b0:	687b      	ldr	r3, [r7, #4]
200082b2:	32ae      	adds	r2, #174	@ 0xae
200082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200082b8:	689b      	ldr	r3, [r3, #8]
200082ba:	2b00      	cmp	r3, #0
200082bc:	f000 8165 	beq.w	2000858a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
200082c0:	7b7a      	ldrb	r2, [r7, #13]
200082c2:	687b      	ldr	r3, [r7, #4]
200082c4:	32ae      	adds	r2, #174	@ 0xae
200082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200082ca:	689b      	ldr	r3, [r3, #8]
200082cc:	6839      	ldr	r1, [r7, #0]
200082ce:	6878      	ldr	r0, [r7, #4]
200082d0:	4798      	blx	r3
200082d2:	4603      	mov	r3, r0
200082d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
200082d6:	e158      	b.n	2000858a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
200082d8:	683b      	ldr	r3, [r7, #0]
200082da:	785b      	ldrb	r3, [r3, #1]
200082dc:	2b03      	cmp	r3, #3
200082de:	d008      	beq.n	200082f2 <USBD_StdEPReq+0x9a>
200082e0:	2b03      	cmp	r3, #3
200082e2:	f300 8147 	bgt.w	20008574 <USBD_StdEPReq+0x31c>
200082e6:	2b00      	cmp	r3, #0
200082e8:	f000 809b 	beq.w	20008422 <USBD_StdEPReq+0x1ca>
200082ec:	2b01      	cmp	r3, #1
200082ee:	d03c      	beq.n	2000836a <USBD_StdEPReq+0x112>
200082f0:	e140      	b.n	20008574 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
200082f2:	687b      	ldr	r3, [r7, #4]
200082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
200082f8:	b2db      	uxtb	r3, r3
200082fa:	2b02      	cmp	r3, #2
200082fc:	d002      	beq.n	20008304 <USBD_StdEPReq+0xac>
200082fe:	2b03      	cmp	r3, #3
20008300:	d016      	beq.n	20008330 <USBD_StdEPReq+0xd8>
20008302:	e02c      	b.n	2000835e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
20008304:	7bbb      	ldrb	r3, [r7, #14]
20008306:	2b00      	cmp	r3, #0
20008308:	d00d      	beq.n	20008326 <USBD_StdEPReq+0xce>
2000830a:	7bbb      	ldrb	r3, [r7, #14]
2000830c:	2b80      	cmp	r3, #128	@ 0x80
2000830e:	d00a      	beq.n	20008326 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
20008310:	7bbb      	ldrb	r3, [r7, #14]
20008312:	4619      	mov	r1, r3
20008314:	6878      	ldr	r0, [r7, #4]
20008316:	f001 f971 	bl	200095fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
2000831a:	2180      	movs	r1, #128	@ 0x80
2000831c:	6878      	ldr	r0, [r7, #4]
2000831e:	f001 f96d 	bl	200095fc <USBD_LL_StallEP>
20008322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
20008324:	e020      	b.n	20008368 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
20008326:	6839      	ldr	r1, [r7, #0]
20008328:	6878      	ldr	r0, [r7, #4]
2000832a:	f000 fcc8 	bl	20008cbe <USBD_CtlError>
              break;
2000832e:	e01b      	b.n	20008368 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
20008330:	683b      	ldr	r3, [r7, #0]
20008332:	885b      	ldrh	r3, [r3, #2]
20008334:	2b00      	cmp	r3, #0
20008336:	d10e      	bne.n	20008356 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
20008338:	7bbb      	ldrb	r3, [r7, #14]
2000833a:	2b00      	cmp	r3, #0
2000833c:	d00b      	beq.n	20008356 <USBD_StdEPReq+0xfe>
2000833e:	7bbb      	ldrb	r3, [r7, #14]
20008340:	2b80      	cmp	r3, #128	@ 0x80
20008342:	d008      	beq.n	20008356 <USBD_StdEPReq+0xfe>
20008344:	683b      	ldr	r3, [r7, #0]
20008346:	88db      	ldrh	r3, [r3, #6]
20008348:	2b00      	cmp	r3, #0
2000834a:	d104      	bne.n	20008356 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
2000834c:	7bbb      	ldrb	r3, [r7, #14]
2000834e:	4619      	mov	r1, r3
20008350:	6878      	ldr	r0, [r7, #4]
20008352:	f001 f953 	bl	200095fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
20008356:	6878      	ldr	r0, [r7, #4]
20008358:	f000 fd8f 	bl	20008e7a <USBD_CtlSendStatus>

              break;
2000835c:	e004      	b.n	20008368 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
2000835e:	6839      	ldr	r1, [r7, #0]
20008360:	6878      	ldr	r0, [r7, #4]
20008362:	f000 fcac 	bl	20008cbe <USBD_CtlError>
              break;
20008366:	bf00      	nop
          }
          break;
20008368:	e109      	b.n	2000857e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
2000836a:	687b      	ldr	r3, [r7, #4]
2000836c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20008370:	b2db      	uxtb	r3, r3
20008372:	2b02      	cmp	r3, #2
20008374:	d002      	beq.n	2000837c <USBD_StdEPReq+0x124>
20008376:	2b03      	cmp	r3, #3
20008378:	d016      	beq.n	200083a8 <USBD_StdEPReq+0x150>
2000837a:	e04b      	b.n	20008414 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
2000837c:	7bbb      	ldrb	r3, [r7, #14]
2000837e:	2b00      	cmp	r3, #0
20008380:	d00d      	beq.n	2000839e <USBD_StdEPReq+0x146>
20008382:	7bbb      	ldrb	r3, [r7, #14]
20008384:	2b80      	cmp	r3, #128	@ 0x80
20008386:	d00a      	beq.n	2000839e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
20008388:	7bbb      	ldrb	r3, [r7, #14]
2000838a:	4619      	mov	r1, r3
2000838c:	6878      	ldr	r0, [r7, #4]
2000838e:	f001 f935 	bl	200095fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
20008392:	2180      	movs	r1, #128	@ 0x80
20008394:	6878      	ldr	r0, [r7, #4]
20008396:	f001 f931 	bl	200095fc <USBD_LL_StallEP>
2000839a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
2000839c:	e040      	b.n	20008420 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
2000839e:	6839      	ldr	r1, [r7, #0]
200083a0:	6878      	ldr	r0, [r7, #4]
200083a2:	f000 fc8c 	bl	20008cbe <USBD_CtlError>
              break;
200083a6:	e03b      	b.n	20008420 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
200083a8:	683b      	ldr	r3, [r7, #0]
200083aa:	885b      	ldrh	r3, [r3, #2]
200083ac:	2b00      	cmp	r3, #0
200083ae:	d136      	bne.n	2000841e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
200083b0:	7bbb      	ldrb	r3, [r7, #14]
200083b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200083b6:	2b00      	cmp	r3, #0
200083b8:	d004      	beq.n	200083c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
200083ba:	7bbb      	ldrb	r3, [r7, #14]
200083bc:	4619      	mov	r1, r3
200083be:	6878      	ldr	r0, [r7, #4]
200083c0:	f001 f93b 	bl	2000963a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
200083c4:	6878      	ldr	r0, [r7, #4]
200083c6:	f000 fd58 	bl	20008e7a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
200083ca:	7bbb      	ldrb	r3, [r7, #14]
200083cc:	4619      	mov	r1, r3
200083ce:	6878      	ldr	r0, [r7, #4]
200083d0:	f7ff fde5 	bl	20007f9e <USBD_CoreFindEP>
200083d4:	4603      	mov	r3, r0
200083d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
200083d8:	7b7b      	ldrb	r3, [r7, #13]
200083da:	2bff      	cmp	r3, #255	@ 0xff
200083dc:	d01f      	beq.n	2000841e <USBD_StdEPReq+0x1c6>
200083de:	7b7b      	ldrb	r3, [r7, #13]
200083e0:	2b00      	cmp	r3, #0
200083e2:	d11c      	bne.n	2000841e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
200083e4:	7b7a      	ldrb	r2, [r7, #13]
200083e6:	687b      	ldr	r3, [r7, #4]
200083e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
200083ec:	7b7a      	ldrb	r2, [r7, #13]
200083ee:	687b      	ldr	r3, [r7, #4]
200083f0:	32ae      	adds	r2, #174	@ 0xae
200083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200083f6:	689b      	ldr	r3, [r3, #8]
200083f8:	2b00      	cmp	r3, #0
200083fa:	d010      	beq.n	2000841e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
200083fc:	7b7a      	ldrb	r2, [r7, #13]
200083fe:	687b      	ldr	r3, [r7, #4]
20008400:	32ae      	adds	r2, #174	@ 0xae
20008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20008406:	689b      	ldr	r3, [r3, #8]
20008408:	6839      	ldr	r1, [r7, #0]
2000840a:	6878      	ldr	r0, [r7, #4]
2000840c:	4798      	blx	r3
2000840e:	4603      	mov	r3, r0
20008410:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
20008412:	e004      	b.n	2000841e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
20008414:	6839      	ldr	r1, [r7, #0]
20008416:	6878      	ldr	r0, [r7, #4]
20008418:	f000 fc51 	bl	20008cbe <USBD_CtlError>
              break;
2000841c:	e000      	b.n	20008420 <USBD_StdEPReq+0x1c8>
              break;
2000841e:	bf00      	nop
          }
          break;
20008420:	e0ad      	b.n	2000857e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
20008422:	687b      	ldr	r3, [r7, #4]
20008424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20008428:	b2db      	uxtb	r3, r3
2000842a:	2b02      	cmp	r3, #2
2000842c:	d002      	beq.n	20008434 <USBD_StdEPReq+0x1dc>
2000842e:	2b03      	cmp	r3, #3
20008430:	d033      	beq.n	2000849a <USBD_StdEPReq+0x242>
20008432:	e099      	b.n	20008568 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
20008434:	7bbb      	ldrb	r3, [r7, #14]
20008436:	2b00      	cmp	r3, #0
20008438:	d007      	beq.n	2000844a <USBD_StdEPReq+0x1f2>
2000843a:	7bbb      	ldrb	r3, [r7, #14]
2000843c:	2b80      	cmp	r3, #128	@ 0x80
2000843e:	d004      	beq.n	2000844a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
20008440:	6839      	ldr	r1, [r7, #0]
20008442:	6878      	ldr	r0, [r7, #4]
20008444:	f000 fc3b 	bl	20008cbe <USBD_CtlError>
                break;
20008448:	e093      	b.n	20008572 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
2000844a:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000844e:	2b00      	cmp	r3, #0
20008450:	da0b      	bge.n	2000846a <USBD_StdEPReq+0x212>
20008452:	7bbb      	ldrb	r3, [r7, #14]
20008454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
20008458:	4613      	mov	r3, r2
2000845a:	009b      	lsls	r3, r3, #2
2000845c:	4413      	add	r3, r2
2000845e:	009b      	lsls	r3, r3, #2
20008460:	3310      	adds	r3, #16
20008462:	687a      	ldr	r2, [r7, #4]
20008464:	4413      	add	r3, r2
20008466:	3304      	adds	r3, #4
20008468:	e00b      	b.n	20008482 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000846a:	7bbb      	ldrb	r3, [r7, #14]
2000846c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
20008470:	4613      	mov	r3, r2
20008472:	009b      	lsls	r3, r3, #2
20008474:	4413      	add	r3, r2
20008476:	009b      	lsls	r3, r3, #2
20008478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000847c:	687a      	ldr	r2, [r7, #4]
2000847e:	4413      	add	r3, r2
20008480:	3304      	adds	r3, #4
20008482:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
20008484:	68bb      	ldr	r3, [r7, #8]
20008486:	2200      	movs	r2, #0
20008488:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
2000848a:	68bb      	ldr	r3, [r7, #8]
2000848c:	330e      	adds	r3, #14
2000848e:	2202      	movs	r2, #2
20008490:	4619      	mov	r1, r3
20008492:	6878      	ldr	r0, [r7, #4]
20008494:	f000 fc90 	bl	20008db8 <USBD_CtlSendData>
              break;
20008498:	e06b      	b.n	20008572 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
2000849a:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000849e:	2b00      	cmp	r3, #0
200084a0:	da11      	bge.n	200084c6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
200084a2:	7bbb      	ldrb	r3, [r7, #14]
200084a4:	f003 020f 	and.w	r2, r3, #15
200084a8:	6879      	ldr	r1, [r7, #4]
200084aa:	4613      	mov	r3, r2
200084ac:	009b      	lsls	r3, r3, #2
200084ae:	4413      	add	r3, r2
200084b0:	009b      	lsls	r3, r3, #2
200084b2:	440b      	add	r3, r1
200084b4:	3323      	adds	r3, #35	@ 0x23
200084b6:	781b      	ldrb	r3, [r3, #0]
200084b8:	2b00      	cmp	r3, #0
200084ba:	d117      	bne.n	200084ec <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
200084bc:	6839      	ldr	r1, [r7, #0]
200084be:	6878      	ldr	r0, [r7, #4]
200084c0:	f000 fbfd 	bl	20008cbe <USBD_CtlError>
                  break;
200084c4:	e055      	b.n	20008572 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
200084c6:	7bbb      	ldrb	r3, [r7, #14]
200084c8:	f003 020f 	and.w	r2, r3, #15
200084cc:	6879      	ldr	r1, [r7, #4]
200084ce:	4613      	mov	r3, r2
200084d0:	009b      	lsls	r3, r3, #2
200084d2:	4413      	add	r3, r2
200084d4:	009b      	lsls	r3, r3, #2
200084d6:	440b      	add	r3, r1
200084d8:	f203 1363 	addw	r3, r3, #355	@ 0x163
200084dc:	781b      	ldrb	r3, [r3, #0]
200084de:	2b00      	cmp	r3, #0
200084e0:	d104      	bne.n	200084ec <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
200084e2:	6839      	ldr	r1, [r7, #0]
200084e4:	6878      	ldr	r0, [r7, #4]
200084e6:	f000 fbea 	bl	20008cbe <USBD_CtlError>
                  break;
200084ea:	e042      	b.n	20008572 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
200084ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
200084f0:	2b00      	cmp	r3, #0
200084f2:	da0b      	bge.n	2000850c <USBD_StdEPReq+0x2b4>
200084f4:	7bbb      	ldrb	r3, [r7, #14]
200084f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
200084fa:	4613      	mov	r3, r2
200084fc:	009b      	lsls	r3, r3, #2
200084fe:	4413      	add	r3, r2
20008500:	009b      	lsls	r3, r3, #2
20008502:	3310      	adds	r3, #16
20008504:	687a      	ldr	r2, [r7, #4]
20008506:	4413      	add	r3, r2
20008508:	3304      	adds	r3, #4
2000850a:	e00b      	b.n	20008524 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
2000850c:	7bbb      	ldrb	r3, [r7, #14]
2000850e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
20008512:	4613      	mov	r3, r2
20008514:	009b      	lsls	r3, r3, #2
20008516:	4413      	add	r3, r2
20008518:	009b      	lsls	r3, r3, #2
2000851a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2000851e:	687a      	ldr	r2, [r7, #4]
20008520:	4413      	add	r3, r2
20008522:	3304      	adds	r3, #4
20008524:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
20008526:	7bbb      	ldrb	r3, [r7, #14]
20008528:	2b00      	cmp	r3, #0
2000852a:	d002      	beq.n	20008532 <USBD_StdEPReq+0x2da>
2000852c:	7bbb      	ldrb	r3, [r7, #14]
2000852e:	2b80      	cmp	r3, #128	@ 0x80
20008530:	d103      	bne.n	2000853a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
20008532:	68bb      	ldr	r3, [r7, #8]
20008534:	2200      	movs	r2, #0
20008536:	739a      	strb	r2, [r3, #14]
20008538:	e00e      	b.n	20008558 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
2000853a:	7bbb      	ldrb	r3, [r7, #14]
2000853c:	4619      	mov	r1, r3
2000853e:	6878      	ldr	r0, [r7, #4]
20008540:	f001 f89a 	bl	20009678 <USBD_LL_IsStallEP>
20008544:	4603      	mov	r3, r0
20008546:	2b00      	cmp	r3, #0
20008548:	d003      	beq.n	20008552 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
2000854a:	68bb      	ldr	r3, [r7, #8]
2000854c:	2201      	movs	r2, #1
2000854e:	739a      	strb	r2, [r3, #14]
20008550:	e002      	b.n	20008558 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
20008552:	68bb      	ldr	r3, [r7, #8]
20008554:	2200      	movs	r2, #0
20008556:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
20008558:	68bb      	ldr	r3, [r7, #8]
2000855a:	330e      	adds	r3, #14
2000855c:	2202      	movs	r2, #2
2000855e:	4619      	mov	r1, r3
20008560:	6878      	ldr	r0, [r7, #4]
20008562:	f000 fc29 	bl	20008db8 <USBD_CtlSendData>
              break;
20008566:	e004      	b.n	20008572 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
20008568:	6839      	ldr	r1, [r7, #0]
2000856a:	6878      	ldr	r0, [r7, #4]
2000856c:	f000 fba7 	bl	20008cbe <USBD_CtlError>
              break;
20008570:	bf00      	nop
          }
          break;
20008572:	e004      	b.n	2000857e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
20008574:	6839      	ldr	r1, [r7, #0]
20008576:	6878      	ldr	r0, [r7, #4]
20008578:	f000 fba1 	bl	20008cbe <USBD_CtlError>
          break;
2000857c:	bf00      	nop
      }
      break;
2000857e:	e005      	b.n	2000858c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
20008580:	6839      	ldr	r1, [r7, #0]
20008582:	6878      	ldr	r0, [r7, #4]
20008584:	f000 fb9b 	bl	20008cbe <USBD_CtlError>
      break;
20008588:	e000      	b.n	2000858c <USBD_StdEPReq+0x334>
      break;
2000858a:	bf00      	nop
  }

  return ret;
2000858c:	7bfb      	ldrb	r3, [r7, #15]
}
2000858e:	4618      	mov	r0, r3
20008590:	3710      	adds	r7, #16
20008592:	46bd      	mov	sp, r7
20008594:	bd80      	pop	{r7, pc}
	...

20008598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008598:	b580      	push	{r7, lr}
2000859a:	b084      	sub	sp, #16
2000859c:	af00      	add	r7, sp, #0
2000859e:	6078      	str	r0, [r7, #4]
200085a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
200085a2:	2300      	movs	r3, #0
200085a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
200085a6:	2300      	movs	r3, #0
200085a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
200085aa:	2300      	movs	r3, #0
200085ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
200085ae:	683b      	ldr	r3, [r7, #0]
200085b0:	885b      	ldrh	r3, [r3, #2]
200085b2:	0a1b      	lsrs	r3, r3, #8
200085b4:	b29b      	uxth	r3, r3
200085b6:	3b01      	subs	r3, #1
200085b8:	2b0e      	cmp	r3, #14
200085ba:	f200 8152 	bhi.w	20008862 <USBD_GetDescriptor+0x2ca>
200085be:	a201      	add	r2, pc, #4	@ (adr r2, 200085c4 <USBD_GetDescriptor+0x2c>)
200085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200085c4:	20008635 	.word	0x20008635
200085c8:	2000864d 	.word	0x2000864d
200085cc:	2000868d 	.word	0x2000868d
200085d0:	20008863 	.word	0x20008863
200085d4:	20008863 	.word	0x20008863
200085d8:	20008803 	.word	0x20008803
200085dc:	2000882f 	.word	0x2000882f
200085e0:	20008863 	.word	0x20008863
200085e4:	20008863 	.word	0x20008863
200085e8:	20008863 	.word	0x20008863
200085ec:	20008863 	.word	0x20008863
200085f0:	20008863 	.word	0x20008863
200085f4:	20008863 	.word	0x20008863
200085f8:	20008863 	.word	0x20008863
200085fc:	20008601 	.word	0x20008601
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
20008600:	687b      	ldr	r3, [r7, #4]
20008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
20008606:	69db      	ldr	r3, [r3, #28]
20008608:	2b00      	cmp	r3, #0
2000860a:	d00b      	beq.n	20008624 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
2000860c:	687b      	ldr	r3, [r7, #4]
2000860e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
20008612:	69db      	ldr	r3, [r3, #28]
20008614:	687a      	ldr	r2, [r7, #4]
20008616:	7c12      	ldrb	r2, [r2, #16]
20008618:	f107 0108 	add.w	r1, r7, #8
2000861c:	4610      	mov	r0, r2
2000861e:	4798      	blx	r3
20008620:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
20008622:	e126      	b.n	20008872 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
20008624:	6839      	ldr	r1, [r7, #0]
20008626:	6878      	ldr	r0, [r7, #4]
20008628:	f000 fb49 	bl	20008cbe <USBD_CtlError>
        err++;
2000862c:	7afb      	ldrb	r3, [r7, #11]
2000862e:	3301      	adds	r3, #1
20008630:	72fb      	strb	r3, [r7, #11]
      break;
20008632:	e11e      	b.n	20008872 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
20008634:	687b      	ldr	r3, [r7, #4]
20008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000863a:	681b      	ldr	r3, [r3, #0]
2000863c:	687a      	ldr	r2, [r7, #4]
2000863e:	7c12      	ldrb	r2, [r2, #16]
20008640:	f107 0108 	add.w	r1, r7, #8
20008644:	4610      	mov	r0, r2
20008646:	4798      	blx	r3
20008648:	60f8      	str	r0, [r7, #12]
      break;
2000864a:	e112      	b.n	20008872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000864c:	687b      	ldr	r3, [r7, #4]
2000864e:	7c1b      	ldrb	r3, [r3, #16]
20008650:	2b00      	cmp	r3, #0
20008652:	d10d      	bne.n	20008670 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
20008654:	687b      	ldr	r3, [r7, #4]
20008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000865a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000865c:	f107 0208 	add.w	r2, r7, #8
20008660:	4610      	mov	r0, r2
20008662:	4798      	blx	r3
20008664:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
20008666:	68fb      	ldr	r3, [r7, #12]
20008668:	3301      	adds	r3, #1
2000866a:	2202      	movs	r2, #2
2000866c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
2000866e:	e100      	b.n	20008872 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
20008670:	687b      	ldr	r3, [r7, #4]
20008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20008678:	f107 0208 	add.w	r2, r7, #8
2000867c:	4610      	mov	r0, r2
2000867e:	4798      	blx	r3
20008680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
20008682:	68fb      	ldr	r3, [r7, #12]
20008684:	3301      	adds	r3, #1
20008686:	2202      	movs	r2, #2
20008688:	701a      	strb	r2, [r3, #0]
      break;
2000868a:	e0f2      	b.n	20008872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
2000868c:	683b      	ldr	r3, [r7, #0]
2000868e:	885b      	ldrh	r3, [r3, #2]
20008690:	b2db      	uxtb	r3, r3
20008692:	2b05      	cmp	r3, #5
20008694:	f200 80ac 	bhi.w	200087f0 <USBD_GetDescriptor+0x258>
20008698:	a201      	add	r2, pc, #4	@ (adr r2, 200086a0 <USBD_GetDescriptor+0x108>)
2000869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000869e:	bf00      	nop
200086a0:	200086b9 	.word	0x200086b9
200086a4:	200086ed 	.word	0x200086ed
200086a8:	20008721 	.word	0x20008721
200086ac:	20008755 	.word	0x20008755
200086b0:	20008789 	.word	0x20008789
200086b4:	200087bd 	.word	0x200087bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
200086b8:	687b      	ldr	r3, [r7, #4]
200086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
200086be:	685b      	ldr	r3, [r3, #4]
200086c0:	2b00      	cmp	r3, #0
200086c2:	d00b      	beq.n	200086dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
200086c4:	687b      	ldr	r3, [r7, #4]
200086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
200086ca:	685b      	ldr	r3, [r3, #4]
200086cc:	687a      	ldr	r2, [r7, #4]
200086ce:	7c12      	ldrb	r2, [r2, #16]
200086d0:	f107 0108 	add.w	r1, r7, #8
200086d4:	4610      	mov	r0, r2
200086d6:	4798      	blx	r3
200086d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
200086da:	e091      	b.n	20008800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
200086dc:	6839      	ldr	r1, [r7, #0]
200086de:	6878      	ldr	r0, [r7, #4]
200086e0:	f000 faed 	bl	20008cbe <USBD_CtlError>
            err++;
200086e4:	7afb      	ldrb	r3, [r7, #11]
200086e6:	3301      	adds	r3, #1
200086e8:	72fb      	strb	r3, [r7, #11]
          break;
200086ea:	e089      	b.n	20008800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
200086ec:	687b      	ldr	r3, [r7, #4]
200086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
200086f2:	689b      	ldr	r3, [r3, #8]
200086f4:	2b00      	cmp	r3, #0
200086f6:	d00b      	beq.n	20008710 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
200086f8:	687b      	ldr	r3, [r7, #4]
200086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
200086fe:	689b      	ldr	r3, [r3, #8]
20008700:	687a      	ldr	r2, [r7, #4]
20008702:	7c12      	ldrb	r2, [r2, #16]
20008704:	f107 0108 	add.w	r1, r7, #8
20008708:	4610      	mov	r0, r2
2000870a:	4798      	blx	r3
2000870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
2000870e:	e077      	b.n	20008800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
20008710:	6839      	ldr	r1, [r7, #0]
20008712:	6878      	ldr	r0, [r7, #4]
20008714:	f000 fad3 	bl	20008cbe <USBD_CtlError>
            err++;
20008718:	7afb      	ldrb	r3, [r7, #11]
2000871a:	3301      	adds	r3, #1
2000871c:	72fb      	strb	r3, [r7, #11]
          break;
2000871e:	e06f      	b.n	20008800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
20008720:	687b      	ldr	r3, [r7, #4]
20008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
20008726:	68db      	ldr	r3, [r3, #12]
20008728:	2b00      	cmp	r3, #0
2000872a:	d00b      	beq.n	20008744 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
2000872c:	687b      	ldr	r3, [r7, #4]
2000872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
20008732:	68db      	ldr	r3, [r3, #12]
20008734:	687a      	ldr	r2, [r7, #4]
20008736:	7c12      	ldrb	r2, [r2, #16]
20008738:	f107 0108 	add.w	r1, r7, #8
2000873c:	4610      	mov	r0, r2
2000873e:	4798      	blx	r3
20008740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
20008742:	e05d      	b.n	20008800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
20008744:	6839      	ldr	r1, [r7, #0]
20008746:	6878      	ldr	r0, [r7, #4]
20008748:	f000 fab9 	bl	20008cbe <USBD_CtlError>
            err++;
2000874c:	7afb      	ldrb	r3, [r7, #11]
2000874e:	3301      	adds	r3, #1
20008750:	72fb      	strb	r3, [r7, #11]
          break;
20008752:	e055      	b.n	20008800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
20008754:	687b      	ldr	r3, [r7, #4]
20008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000875a:	691b      	ldr	r3, [r3, #16]
2000875c:	2b00      	cmp	r3, #0
2000875e:	d00b      	beq.n	20008778 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
20008760:	687b      	ldr	r3, [r7, #4]
20008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
20008766:	691b      	ldr	r3, [r3, #16]
20008768:	687a      	ldr	r2, [r7, #4]
2000876a:	7c12      	ldrb	r2, [r2, #16]
2000876c:	f107 0108 	add.w	r1, r7, #8
20008770:	4610      	mov	r0, r2
20008772:	4798      	blx	r3
20008774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
20008776:	e043      	b.n	20008800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
20008778:	6839      	ldr	r1, [r7, #0]
2000877a:	6878      	ldr	r0, [r7, #4]
2000877c:	f000 fa9f 	bl	20008cbe <USBD_CtlError>
            err++;
20008780:	7afb      	ldrb	r3, [r7, #11]
20008782:	3301      	adds	r3, #1
20008784:	72fb      	strb	r3, [r7, #11]
          break;
20008786:	e03b      	b.n	20008800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
20008788:	687b      	ldr	r3, [r7, #4]
2000878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000878e:	695b      	ldr	r3, [r3, #20]
20008790:	2b00      	cmp	r3, #0
20008792:	d00b      	beq.n	200087ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
20008794:	687b      	ldr	r3, [r7, #4]
20008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
2000879a:	695b      	ldr	r3, [r3, #20]
2000879c:	687a      	ldr	r2, [r7, #4]
2000879e:	7c12      	ldrb	r2, [r2, #16]
200087a0:	f107 0108 	add.w	r1, r7, #8
200087a4:	4610      	mov	r0, r2
200087a6:	4798      	blx	r3
200087a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
200087aa:	e029      	b.n	20008800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
200087ac:	6839      	ldr	r1, [r7, #0]
200087ae:	6878      	ldr	r0, [r7, #4]
200087b0:	f000 fa85 	bl	20008cbe <USBD_CtlError>
            err++;
200087b4:	7afb      	ldrb	r3, [r7, #11]
200087b6:	3301      	adds	r3, #1
200087b8:	72fb      	strb	r3, [r7, #11]
          break;
200087ba:	e021      	b.n	20008800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
200087bc:	687b      	ldr	r3, [r7, #4]
200087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
200087c2:	699b      	ldr	r3, [r3, #24]
200087c4:	2b00      	cmp	r3, #0
200087c6:	d00b      	beq.n	200087e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
200087c8:	687b      	ldr	r3, [r7, #4]
200087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
200087ce:	699b      	ldr	r3, [r3, #24]
200087d0:	687a      	ldr	r2, [r7, #4]
200087d2:	7c12      	ldrb	r2, [r2, #16]
200087d4:	f107 0108 	add.w	r1, r7, #8
200087d8:	4610      	mov	r0, r2
200087da:	4798      	blx	r3
200087dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
200087de:	e00f      	b.n	20008800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
200087e0:	6839      	ldr	r1, [r7, #0]
200087e2:	6878      	ldr	r0, [r7, #4]
200087e4:	f000 fa6b 	bl	20008cbe <USBD_CtlError>
            err++;
200087e8:	7afb      	ldrb	r3, [r7, #11]
200087ea:	3301      	adds	r3, #1
200087ec:	72fb      	strb	r3, [r7, #11]
          break;
200087ee:	e007      	b.n	20008800 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
200087f0:	6839      	ldr	r1, [r7, #0]
200087f2:	6878      	ldr	r0, [r7, #4]
200087f4:	f000 fa63 	bl	20008cbe <USBD_CtlError>
          err++;
200087f8:	7afb      	ldrb	r3, [r7, #11]
200087fa:	3301      	adds	r3, #1
200087fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
200087fe:	bf00      	nop
      }
      break;
20008800:	e037      	b.n	20008872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
20008802:	687b      	ldr	r3, [r7, #4]
20008804:	7c1b      	ldrb	r3, [r3, #16]
20008806:	2b00      	cmp	r3, #0
20008808:	d109      	bne.n	2000881e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
2000880a:	687b      	ldr	r3, [r7, #4]
2000880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
20008810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20008812:	f107 0208 	add.w	r2, r7, #8
20008816:	4610      	mov	r0, r2
20008818:	4798      	blx	r3
2000881a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
2000881c:	e029      	b.n	20008872 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
2000881e:	6839      	ldr	r1, [r7, #0]
20008820:	6878      	ldr	r0, [r7, #4]
20008822:	f000 fa4c 	bl	20008cbe <USBD_CtlError>
        err++;
20008826:	7afb      	ldrb	r3, [r7, #11]
20008828:	3301      	adds	r3, #1
2000882a:	72fb      	strb	r3, [r7, #11]
      break;
2000882c:	e021      	b.n	20008872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
2000882e:	687b      	ldr	r3, [r7, #4]
20008830:	7c1b      	ldrb	r3, [r3, #16]
20008832:	2b00      	cmp	r3, #0
20008834:	d10d      	bne.n	20008852 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
20008836:	687b      	ldr	r3, [r7, #4]
20008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
2000883c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000883e:	f107 0208 	add.w	r2, r7, #8
20008842:	4610      	mov	r0, r2
20008844:	4798      	blx	r3
20008846:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
20008848:	68fb      	ldr	r3, [r7, #12]
2000884a:	3301      	adds	r3, #1
2000884c:	2207      	movs	r2, #7
2000884e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
20008850:	e00f      	b.n	20008872 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
20008852:	6839      	ldr	r1, [r7, #0]
20008854:	6878      	ldr	r0, [r7, #4]
20008856:	f000 fa32 	bl	20008cbe <USBD_CtlError>
        err++;
2000885a:	7afb      	ldrb	r3, [r7, #11]
2000885c:	3301      	adds	r3, #1
2000885e:	72fb      	strb	r3, [r7, #11]
      break;
20008860:	e007      	b.n	20008872 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
20008862:	6839      	ldr	r1, [r7, #0]
20008864:	6878      	ldr	r0, [r7, #4]
20008866:	f000 fa2a 	bl	20008cbe <USBD_CtlError>
      err++;
2000886a:	7afb      	ldrb	r3, [r7, #11]
2000886c:	3301      	adds	r3, #1
2000886e:	72fb      	strb	r3, [r7, #11]
      break;
20008870:	bf00      	nop
  }

  if (err != 0U)
20008872:	7afb      	ldrb	r3, [r7, #11]
20008874:	2b00      	cmp	r3, #0
20008876:	d11e      	bne.n	200088b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
20008878:	683b      	ldr	r3, [r7, #0]
2000887a:	88db      	ldrh	r3, [r3, #6]
2000887c:	2b00      	cmp	r3, #0
2000887e:	d016      	beq.n	200088ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
20008880:	893b      	ldrh	r3, [r7, #8]
20008882:	2b00      	cmp	r3, #0
20008884:	d00e      	beq.n	200088a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
20008886:	683b      	ldr	r3, [r7, #0]
20008888:	88da      	ldrh	r2, [r3, #6]
2000888a:	893b      	ldrh	r3, [r7, #8]
2000888c:	4293      	cmp	r3, r2
2000888e:	bf28      	it	cs
20008890:	4613      	movcs	r3, r2
20008892:	b29b      	uxth	r3, r3
20008894:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
20008896:	893b      	ldrh	r3, [r7, #8]
20008898:	461a      	mov	r2, r3
2000889a:	68f9      	ldr	r1, [r7, #12]
2000889c:	6878      	ldr	r0, [r7, #4]
2000889e:	f000 fa8b 	bl	20008db8 <USBD_CtlSendData>
200088a2:	e009      	b.n	200088b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
200088a4:	6839      	ldr	r1, [r7, #0]
200088a6:	6878      	ldr	r0, [r7, #4]
200088a8:	f000 fa09 	bl	20008cbe <USBD_CtlError>
200088ac:	e004      	b.n	200088b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
200088ae:	6878      	ldr	r0, [r7, #4]
200088b0:	f000 fae3 	bl	20008e7a <USBD_CtlSendStatus>
200088b4:	e000      	b.n	200088b8 <USBD_GetDescriptor+0x320>
    return;
200088b6:	bf00      	nop
  }
}
200088b8:	3710      	adds	r7, #16
200088ba:	46bd      	mov	sp, r7
200088bc:	bd80      	pop	{r7, pc}
200088be:	bf00      	nop

200088c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
200088c0:	b580      	push	{r7, lr}
200088c2:	b084      	sub	sp, #16
200088c4:	af00      	add	r7, sp, #0
200088c6:	6078      	str	r0, [r7, #4]
200088c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
200088ca:	683b      	ldr	r3, [r7, #0]
200088cc:	889b      	ldrh	r3, [r3, #4]
200088ce:	2b00      	cmp	r3, #0
200088d0:	d131      	bne.n	20008936 <USBD_SetAddress+0x76>
200088d2:	683b      	ldr	r3, [r7, #0]
200088d4:	88db      	ldrh	r3, [r3, #6]
200088d6:	2b00      	cmp	r3, #0
200088d8:	d12d      	bne.n	20008936 <USBD_SetAddress+0x76>
200088da:	683b      	ldr	r3, [r7, #0]
200088dc:	885b      	ldrh	r3, [r3, #2]
200088de:	2b7f      	cmp	r3, #127	@ 0x7f
200088e0:	d829      	bhi.n	20008936 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
200088e2:	683b      	ldr	r3, [r7, #0]
200088e4:	885b      	ldrh	r3, [r3, #2]
200088e6:	b2db      	uxtb	r3, r3
200088e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200088ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
200088ee:	687b      	ldr	r3, [r7, #4]
200088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
200088f4:	b2db      	uxtb	r3, r3
200088f6:	2b03      	cmp	r3, #3
200088f8:	d104      	bne.n	20008904 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
200088fa:	6839      	ldr	r1, [r7, #0]
200088fc:	6878      	ldr	r0, [r7, #4]
200088fe:	f000 f9de 	bl	20008cbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
20008902:	e01d      	b.n	20008940 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
20008904:	687b      	ldr	r3, [r7, #4]
20008906:	7bfa      	ldrb	r2, [r7, #15]
20008908:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
2000890c:	7bfb      	ldrb	r3, [r7, #15]
2000890e:	4619      	mov	r1, r3
20008910:	6878      	ldr	r0, [r7, #4]
20008912:	f000 fedd 	bl	200096d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
20008916:	6878      	ldr	r0, [r7, #4]
20008918:	f000 faaf 	bl	20008e7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
2000891c:	7bfb      	ldrb	r3, [r7, #15]
2000891e:	2b00      	cmp	r3, #0
20008920:	d004      	beq.n	2000892c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
20008922:	687b      	ldr	r3, [r7, #4]
20008924:	2202      	movs	r2, #2
20008926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
2000892a:	e009      	b.n	20008940 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
2000892c:	687b      	ldr	r3, [r7, #4]
2000892e:	2201      	movs	r2, #1
20008930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
20008934:	e004      	b.n	20008940 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
20008936:	6839      	ldr	r1, [r7, #0]
20008938:	6878      	ldr	r0, [r7, #4]
2000893a:	f000 f9c0 	bl	20008cbe <USBD_CtlError>
  }
}
2000893e:	bf00      	nop
20008940:	bf00      	nop
20008942:	3710      	adds	r7, #16
20008944:	46bd      	mov	sp, r7
20008946:	bd80      	pop	{r7, pc}

20008948 <USBD_SetConfig>:
  * @param  req: usb request
  * @retval status
  */
static int denemeVal = 0;
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008948:	b580      	push	{r7, lr}
2000894a:	b084      	sub	sp, #16
2000894c:	af00      	add	r7, sp, #0
2000894e:	6078      	str	r0, [r7, #4]
20008950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
20008952:	2300      	movs	r3, #0
20008954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
20008956:	683b      	ldr	r3, [r7, #0]
20008958:	885b      	ldrh	r3, [r3, #2]
2000895a:	b2da      	uxtb	r2, r3
2000895c:	4b5e      	ldr	r3, [pc, #376]	@ (20008ad8 <USBD_SetConfig+0x190>)
2000895e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
20008960:	4b5d      	ldr	r3, [pc, #372]	@ (20008ad8 <USBD_SetConfig+0x190>)
20008962:	781b      	ldrb	r3, [r3, #0]
20008964:	2b01      	cmp	r3, #1
20008966:	d908      	bls.n	2000897a <USBD_SetConfig+0x32>
  {
	  denemeVal = 1;
20008968:	4b5c      	ldr	r3, [pc, #368]	@ (20008adc <USBD_SetConfig+0x194>)
2000896a:	2201      	movs	r2, #1
2000896c:	601a      	str	r2, [r3, #0]
    USBD_CtlError(pdev, req);
2000896e:	6839      	ldr	r1, [r7, #0]
20008970:	6878      	ldr	r0, [r7, #4]
20008972:	f000 f9a4 	bl	20008cbe <USBD_CtlError>
    return USBD_FAIL;
20008976:	2303      	movs	r3, #3
20008978:	e0aa      	b.n	20008ad0 <USBD_SetConfig+0x188>
  }

  switch (pdev->dev_state)
2000897a:	687b      	ldr	r3, [r7, #4]
2000897c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20008980:	b2db      	uxtb	r3, r3
20008982:	2b02      	cmp	r3, #2
20008984:	d002      	beq.n	2000898c <USBD_SetConfig+0x44>
20008986:	2b03      	cmp	r3, #3
20008988:	d035      	beq.n	200089f6 <USBD_SetConfig+0xae>
2000898a:	e090      	b.n	20008aae <USBD_SetConfig+0x166>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
2000898c:	4b52      	ldr	r3, [pc, #328]	@ (20008ad8 <USBD_SetConfig+0x190>)
2000898e:	781b      	ldrb	r3, [r3, #0]
20008990:	2b00      	cmp	r3, #0
20008992:	d029      	beq.n	200089e8 <USBD_SetConfig+0xa0>
      {
    	  denemeVal = 2;
20008994:	4b51      	ldr	r3, [pc, #324]	@ (20008adc <USBD_SetConfig+0x194>)
20008996:	2202      	movs	r2, #2
20008998:	601a      	str	r2, [r3, #0]
        pdev->dev_config = cfgidx;
2000899a:	4b4f      	ldr	r3, [pc, #316]	@ (20008ad8 <USBD_SetConfig+0x190>)
2000899c:	781b      	ldrb	r3, [r3, #0]
2000899e:	461a      	mov	r2, r3
200089a0:	687b      	ldr	r3, [r7, #4]
200089a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
200089a4:	4b4c      	ldr	r3, [pc, #304]	@ (20008ad8 <USBD_SetConfig+0x190>)
200089a6:	781b      	ldrb	r3, [r3, #0]
200089a8:	4619      	mov	r1, r3
200089aa:	6878      	ldr	r0, [r7, #4]
200089ac:	f7fe ff9f 	bl	200078ee <USBD_SetClassConfig>
200089b0:	4603      	mov	r3, r0
200089b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
200089b4:	7bfb      	ldrb	r3, [r7, #15]
200089b6:	2b00      	cmp	r3, #0
200089b8:	d00b      	beq.n	200089d2 <USBD_SetConfig+0x8a>
        {
        	denemeVal = 3;
200089ba:	4b48      	ldr	r3, [pc, #288]	@ (20008adc <USBD_SetConfig+0x194>)
200089bc:	2203      	movs	r2, #3
200089be:	601a      	str	r2, [r3, #0]
          USBD_CtlError(pdev, req);
200089c0:	6839      	ldr	r1, [r7, #0]
200089c2:	6878      	ldr	r0, [r7, #4]
200089c4:	f000 f97b 	bl	20008cbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
200089c8:	687b      	ldr	r3, [r7, #4]
200089ca:	2202      	movs	r2, #2
200089cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      else
      {
    	  denemeVal = 5;
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
200089d0:	e07d      	b.n	20008ace <USBD_SetConfig+0x186>
        	denemeVal = 4;
200089d2:	4b42      	ldr	r3, [pc, #264]	@ (20008adc <USBD_SetConfig+0x194>)
200089d4:	2204      	movs	r2, #4
200089d6:	601a      	str	r2, [r3, #0]
          (void)USBD_CtlSendStatus(pdev);
200089d8:	6878      	ldr	r0, [r7, #4]
200089da:	f000 fa4e 	bl	20008e7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
200089de:	687b      	ldr	r3, [r7, #4]
200089e0:	2203      	movs	r2, #3
200089e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
200089e6:	e072      	b.n	20008ace <USBD_SetConfig+0x186>
    	  denemeVal = 5;
200089e8:	4b3c      	ldr	r3, [pc, #240]	@ (20008adc <USBD_SetConfig+0x194>)
200089ea:	2205      	movs	r2, #5
200089ec:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendStatus(pdev);
200089ee:	6878      	ldr	r0, [r7, #4]
200089f0:	f000 fa43 	bl	20008e7a <USBD_CtlSendStatus>
      break;
200089f4:	e06b      	b.n	20008ace <USBD_SetConfig+0x186>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
200089f6:	4b38      	ldr	r3, [pc, #224]	@ (20008ad8 <USBD_SetConfig+0x190>)
200089f8:	781b      	ldrb	r3, [r3, #0]
200089fa:	2b00      	cmp	r3, #0
200089fc:	d115      	bne.n	20008a2a <USBD_SetConfig+0xe2>
      {
    	  denemeVal = 6;
200089fe:	4b37      	ldr	r3, [pc, #220]	@ (20008adc <USBD_SetConfig+0x194>)
20008a00:	2206      	movs	r2, #6
20008a02:	601a      	str	r2, [r3, #0]
        pdev->dev_state = USBD_STATE_ADDRESSED;
20008a04:	687b      	ldr	r3, [r7, #4]
20008a06:	2202      	movs	r2, #2
20008a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
20008a0c:	4b32      	ldr	r3, [pc, #200]	@ (20008ad8 <USBD_SetConfig+0x190>)
20008a0e:	781b      	ldrb	r3, [r3, #0]
20008a10:	461a      	mov	r2, r3
20008a12:	687b      	ldr	r3, [r7, #4]
20008a14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
20008a16:	4b30      	ldr	r3, [pc, #192]	@ (20008ad8 <USBD_SetConfig+0x190>)
20008a18:	781b      	ldrb	r3, [r3, #0]
20008a1a:	4619      	mov	r1, r3
20008a1c:	6878      	ldr	r0, [r7, #4]
20008a1e:	f7fe ff82 	bl	20007926 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
20008a22:	6878      	ldr	r0, [r7, #4]
20008a24:	f000 fa29 	bl	20008e7a <USBD_CtlSendStatus>
      else
      {
    	  denemeVal = 10;
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
20008a28:	e051      	b.n	20008ace <USBD_SetConfig+0x186>
      else if (cfgidx != pdev->dev_config)
20008a2a:	4b2b      	ldr	r3, [pc, #172]	@ (20008ad8 <USBD_SetConfig+0x190>)
20008a2c:	781b      	ldrb	r3, [r3, #0]
20008a2e:	461a      	mov	r2, r3
20008a30:	687b      	ldr	r3, [r7, #4]
20008a32:	685b      	ldr	r3, [r3, #4]
20008a34:	429a      	cmp	r2, r3
20008a36:	d033      	beq.n	20008aa0 <USBD_SetConfig+0x158>
    	  denemeVal = 7;
20008a38:	4b28      	ldr	r3, [pc, #160]	@ (20008adc <USBD_SetConfig+0x194>)
20008a3a:	2207      	movs	r2, #7
20008a3c:	601a      	str	r2, [r3, #0]
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
20008a3e:	687b      	ldr	r3, [r7, #4]
20008a40:	685b      	ldr	r3, [r3, #4]
20008a42:	b2db      	uxtb	r3, r3
20008a44:	4619      	mov	r1, r3
20008a46:	6878      	ldr	r0, [r7, #4]
20008a48:	f7fe ff6d 	bl	20007926 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
20008a4c:	4b22      	ldr	r3, [pc, #136]	@ (20008ad8 <USBD_SetConfig+0x190>)
20008a4e:	781b      	ldrb	r3, [r3, #0]
20008a50:	461a      	mov	r2, r3
20008a52:	687b      	ldr	r3, [r7, #4]
20008a54:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
20008a56:	4b20      	ldr	r3, [pc, #128]	@ (20008ad8 <USBD_SetConfig+0x190>)
20008a58:	781b      	ldrb	r3, [r3, #0]
20008a5a:	4619      	mov	r1, r3
20008a5c:	6878      	ldr	r0, [r7, #4]
20008a5e:	f7fe ff46 	bl	200078ee <USBD_SetClassConfig>
20008a62:	4603      	mov	r3, r0
20008a64:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
20008a66:	7bfb      	ldrb	r3, [r7, #15]
20008a68:	2b00      	cmp	r3, #0
20008a6a:	d012      	beq.n	20008a92 <USBD_SetConfig+0x14a>
        	denemeVal = 8;
20008a6c:	4b1b      	ldr	r3, [pc, #108]	@ (20008adc <USBD_SetConfig+0x194>)
20008a6e:	2208      	movs	r2, #8
20008a70:	601a      	str	r2, [r3, #0]
          USBD_CtlError(pdev, req);
20008a72:	6839      	ldr	r1, [r7, #0]
20008a74:	6878      	ldr	r0, [r7, #4]
20008a76:	f000 f922 	bl	20008cbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
20008a7a:	687b      	ldr	r3, [r7, #4]
20008a7c:	685b      	ldr	r3, [r3, #4]
20008a7e:	b2db      	uxtb	r3, r3
20008a80:	4619      	mov	r1, r3
20008a82:	6878      	ldr	r0, [r7, #4]
20008a84:	f7fe ff4f 	bl	20007926 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
20008a88:	687b      	ldr	r3, [r7, #4]
20008a8a:	2202      	movs	r2, #2
20008a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
20008a90:	e01d      	b.n	20008ace <USBD_SetConfig+0x186>
        	denemeVal = 9;
20008a92:	4b12      	ldr	r3, [pc, #72]	@ (20008adc <USBD_SetConfig+0x194>)
20008a94:	2209      	movs	r2, #9
20008a96:	601a      	str	r2, [r3, #0]
          (void)USBD_CtlSendStatus(pdev);
20008a98:	6878      	ldr	r0, [r7, #4]
20008a9a:	f000 f9ee 	bl	20008e7a <USBD_CtlSendStatus>
      break;
20008a9e:	e016      	b.n	20008ace <USBD_SetConfig+0x186>
    	  denemeVal = 10;
20008aa0:	4b0e      	ldr	r3, [pc, #56]	@ (20008adc <USBD_SetConfig+0x194>)
20008aa2:	220a      	movs	r2, #10
20008aa4:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendStatus(pdev);
20008aa6:	6878      	ldr	r0, [r7, #4]
20008aa8:	f000 f9e7 	bl	20008e7a <USBD_CtlSendStatus>
      break;
20008aac:	e00f      	b.n	20008ace <USBD_SetConfig+0x186>

    default:
    	denemeVal = 11;
20008aae:	4b0b      	ldr	r3, [pc, #44]	@ (20008adc <USBD_SetConfig+0x194>)
20008ab0:	220b      	movs	r2, #11
20008ab2:	601a      	str	r2, [r3, #0]
      USBD_CtlError(pdev, req);
20008ab4:	6839      	ldr	r1, [r7, #0]
20008ab6:	6878      	ldr	r0, [r7, #4]
20008ab8:	f000 f901 	bl	20008cbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
20008abc:	4b06      	ldr	r3, [pc, #24]	@ (20008ad8 <USBD_SetConfig+0x190>)
20008abe:	781b      	ldrb	r3, [r3, #0]
20008ac0:	4619      	mov	r1, r3
20008ac2:	6878      	ldr	r0, [r7, #4]
20008ac4:	f7fe ff2f 	bl	20007926 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
20008ac8:	2303      	movs	r3, #3
20008aca:	73fb      	strb	r3, [r7, #15]
      break;
20008acc:	bf00      	nop
  }

  return ret;
20008ace:	7bfb      	ldrb	r3, [r7, #15]
}
20008ad0:	4618      	mov	r0, r3
20008ad2:	3710      	adds	r7, #16
20008ad4:	46bd      	mov	sp, r7
20008ad6:	bd80      	pop	{r7, pc}
20008ad8:	2000a0b0 	.word	0x2000a0b0
20008adc:	2000a0ac 	.word	0x2000a0ac

20008ae0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008ae0:	b580      	push	{r7, lr}
20008ae2:	b082      	sub	sp, #8
20008ae4:	af00      	add	r7, sp, #0
20008ae6:	6078      	str	r0, [r7, #4]
20008ae8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
20008aea:	683b      	ldr	r3, [r7, #0]
20008aec:	88db      	ldrh	r3, [r3, #6]
20008aee:	2b01      	cmp	r3, #1
20008af0:	d004      	beq.n	20008afc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
20008af2:	6839      	ldr	r1, [r7, #0]
20008af4:	6878      	ldr	r0, [r7, #4]
20008af6:	f000 f8e2 	bl	20008cbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
20008afa:	e023      	b.n	20008b44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
20008afc:	687b      	ldr	r3, [r7, #4]
20008afe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20008b02:	b2db      	uxtb	r3, r3
20008b04:	2b02      	cmp	r3, #2
20008b06:	dc02      	bgt.n	20008b0e <USBD_GetConfig+0x2e>
20008b08:	2b00      	cmp	r3, #0
20008b0a:	dc03      	bgt.n	20008b14 <USBD_GetConfig+0x34>
20008b0c:	e015      	b.n	20008b3a <USBD_GetConfig+0x5a>
20008b0e:	2b03      	cmp	r3, #3
20008b10:	d00b      	beq.n	20008b2a <USBD_GetConfig+0x4a>
20008b12:	e012      	b.n	20008b3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
20008b14:	687b      	ldr	r3, [r7, #4]
20008b16:	2200      	movs	r2, #0
20008b18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
20008b1a:	687b      	ldr	r3, [r7, #4]
20008b1c:	3308      	adds	r3, #8
20008b1e:	2201      	movs	r2, #1
20008b20:	4619      	mov	r1, r3
20008b22:	6878      	ldr	r0, [r7, #4]
20008b24:	f000 f948 	bl	20008db8 <USBD_CtlSendData>
        break;
20008b28:	e00c      	b.n	20008b44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
20008b2a:	687b      	ldr	r3, [r7, #4]
20008b2c:	3304      	adds	r3, #4
20008b2e:	2201      	movs	r2, #1
20008b30:	4619      	mov	r1, r3
20008b32:	6878      	ldr	r0, [r7, #4]
20008b34:	f000 f940 	bl	20008db8 <USBD_CtlSendData>
        break;
20008b38:	e004      	b.n	20008b44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
20008b3a:	6839      	ldr	r1, [r7, #0]
20008b3c:	6878      	ldr	r0, [r7, #4]
20008b3e:	f000 f8be 	bl	20008cbe <USBD_CtlError>
        break;
20008b42:	bf00      	nop
}
20008b44:	bf00      	nop
20008b46:	3708      	adds	r7, #8
20008b48:	46bd      	mov	sp, r7
20008b4a:	bd80      	pop	{r7, pc}

20008b4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008b4c:	b580      	push	{r7, lr}
20008b4e:	b082      	sub	sp, #8
20008b50:	af00      	add	r7, sp, #0
20008b52:	6078      	str	r0, [r7, #4]
20008b54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
20008b56:	687b      	ldr	r3, [r7, #4]
20008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20008b5c:	b2db      	uxtb	r3, r3
20008b5e:	3b01      	subs	r3, #1
20008b60:	2b02      	cmp	r3, #2
20008b62:	d81e      	bhi.n	20008ba2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
20008b64:	683b      	ldr	r3, [r7, #0]
20008b66:	88db      	ldrh	r3, [r3, #6]
20008b68:	2b02      	cmp	r3, #2
20008b6a:	d004      	beq.n	20008b76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
20008b6c:	6839      	ldr	r1, [r7, #0]
20008b6e:	6878      	ldr	r0, [r7, #4]
20008b70:	f000 f8a5 	bl	20008cbe <USBD_CtlError>
        break;
20008b74:	e01a      	b.n	20008bac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
20008b76:	687b      	ldr	r3, [r7, #4]
20008b78:	2201      	movs	r2, #1
20008b7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
20008b7c:	687b      	ldr	r3, [r7, #4]
20008b7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
20008b82:	2b00      	cmp	r3, #0
20008b84:	d005      	beq.n	20008b92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
20008b86:	687b      	ldr	r3, [r7, #4]
20008b88:	68db      	ldr	r3, [r3, #12]
20008b8a:	f043 0202 	orr.w	r2, r3, #2
20008b8e:	687b      	ldr	r3, [r7, #4]
20008b90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
20008b92:	687b      	ldr	r3, [r7, #4]
20008b94:	330c      	adds	r3, #12
20008b96:	2202      	movs	r2, #2
20008b98:	4619      	mov	r1, r3
20008b9a:	6878      	ldr	r0, [r7, #4]
20008b9c:	f000 f90c 	bl	20008db8 <USBD_CtlSendData>
      break;
20008ba0:	e004      	b.n	20008bac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
20008ba2:	6839      	ldr	r1, [r7, #0]
20008ba4:	6878      	ldr	r0, [r7, #4]
20008ba6:	f000 f88a 	bl	20008cbe <USBD_CtlError>
      break;
20008baa:	bf00      	nop
  }
}
20008bac:	bf00      	nop
20008bae:	3708      	adds	r7, #8
20008bb0:	46bd      	mov	sp, r7
20008bb2:	bd80      	pop	{r7, pc}

20008bb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008bb4:	b580      	push	{r7, lr}
20008bb6:	b082      	sub	sp, #8
20008bb8:	af00      	add	r7, sp, #0
20008bba:	6078      	str	r0, [r7, #4]
20008bbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
20008bbe:	683b      	ldr	r3, [r7, #0]
20008bc0:	885b      	ldrh	r3, [r3, #2]
20008bc2:	2b01      	cmp	r3, #1
20008bc4:	d107      	bne.n	20008bd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
20008bc6:	687b      	ldr	r3, [r7, #4]
20008bc8:	2201      	movs	r2, #1
20008bca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
20008bce:	6878      	ldr	r0, [r7, #4]
20008bd0:	f000 f953 	bl	20008e7a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
20008bd4:	e013      	b.n	20008bfe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
20008bd6:	683b      	ldr	r3, [r7, #0]
20008bd8:	885b      	ldrh	r3, [r3, #2]
20008bda:	2b02      	cmp	r3, #2
20008bdc:	d10b      	bne.n	20008bf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
20008bde:	683b      	ldr	r3, [r7, #0]
20008be0:	889b      	ldrh	r3, [r3, #4]
20008be2:	0a1b      	lsrs	r3, r3, #8
20008be4:	b29b      	uxth	r3, r3
20008be6:	b2da      	uxtb	r2, r3
20008be8:	687b      	ldr	r3, [r7, #4]
20008bea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
20008bee:	6878      	ldr	r0, [r7, #4]
20008bf0:	f000 f943 	bl	20008e7a <USBD_CtlSendStatus>
}
20008bf4:	e003      	b.n	20008bfe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
20008bf6:	6839      	ldr	r1, [r7, #0]
20008bf8:	6878      	ldr	r0, [r7, #4]
20008bfa:	f000 f860 	bl	20008cbe <USBD_CtlError>
}
20008bfe:	bf00      	nop
20008c00:	3708      	adds	r7, #8
20008c02:	46bd      	mov	sp, r7
20008c04:	bd80      	pop	{r7, pc}

20008c06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008c06:	b580      	push	{r7, lr}
20008c08:	b082      	sub	sp, #8
20008c0a:	af00      	add	r7, sp, #0
20008c0c:	6078      	str	r0, [r7, #4]
20008c0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
20008c10:	687b      	ldr	r3, [r7, #4]
20008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
20008c16:	b2db      	uxtb	r3, r3
20008c18:	3b01      	subs	r3, #1
20008c1a:	2b02      	cmp	r3, #2
20008c1c:	d80b      	bhi.n	20008c36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
20008c1e:	683b      	ldr	r3, [r7, #0]
20008c20:	885b      	ldrh	r3, [r3, #2]
20008c22:	2b01      	cmp	r3, #1
20008c24:	d10c      	bne.n	20008c40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
20008c26:	687b      	ldr	r3, [r7, #4]
20008c28:	2200      	movs	r2, #0
20008c2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
20008c2e:	6878      	ldr	r0, [r7, #4]
20008c30:	f000 f923 	bl	20008e7a <USBD_CtlSendStatus>
      }
      break;
20008c34:	e004      	b.n	20008c40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
20008c36:	6839      	ldr	r1, [r7, #0]
20008c38:	6878      	ldr	r0, [r7, #4]
20008c3a:	f000 f840 	bl	20008cbe <USBD_CtlError>
      break;
20008c3e:	e000      	b.n	20008c42 <USBD_ClrFeature+0x3c>
      break;
20008c40:	bf00      	nop
  }
}
20008c42:	bf00      	nop
20008c44:	3708      	adds	r7, #8
20008c46:	46bd      	mov	sp, r7
20008c48:	bd80      	pop	{r7, pc}

20008c4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
20008c4a:	b580      	push	{r7, lr}
20008c4c:	b084      	sub	sp, #16
20008c4e:	af00      	add	r7, sp, #0
20008c50:	6078      	str	r0, [r7, #4]
20008c52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
20008c54:	683b      	ldr	r3, [r7, #0]
20008c56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
20008c58:	68fb      	ldr	r3, [r7, #12]
20008c5a:	781a      	ldrb	r2, [r3, #0]
20008c5c:	687b      	ldr	r3, [r7, #4]
20008c5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
20008c60:	68fb      	ldr	r3, [r7, #12]
20008c62:	3301      	adds	r3, #1
20008c64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
20008c66:	68fb      	ldr	r3, [r7, #12]
20008c68:	781a      	ldrb	r2, [r3, #0]
20008c6a:	687b      	ldr	r3, [r7, #4]
20008c6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
20008c6e:	68fb      	ldr	r3, [r7, #12]
20008c70:	3301      	adds	r3, #1
20008c72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
20008c74:	68f8      	ldr	r0, [r7, #12]
20008c76:	f7ff f9f3 	bl	20008060 <SWAPBYTE>
20008c7a:	4603      	mov	r3, r0
20008c7c:	461a      	mov	r2, r3
20008c7e:	687b      	ldr	r3, [r7, #4]
20008c80:	805a      	strh	r2, [r3, #2]

  pbuff++;
20008c82:	68fb      	ldr	r3, [r7, #12]
20008c84:	3301      	adds	r3, #1
20008c86:	60fb      	str	r3, [r7, #12]
  pbuff++;
20008c88:	68fb      	ldr	r3, [r7, #12]
20008c8a:	3301      	adds	r3, #1
20008c8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
20008c8e:	68f8      	ldr	r0, [r7, #12]
20008c90:	f7ff f9e6 	bl	20008060 <SWAPBYTE>
20008c94:	4603      	mov	r3, r0
20008c96:	461a      	mov	r2, r3
20008c98:	687b      	ldr	r3, [r7, #4]
20008c9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
20008c9c:	68fb      	ldr	r3, [r7, #12]
20008c9e:	3301      	adds	r3, #1
20008ca0:	60fb      	str	r3, [r7, #12]
  pbuff++;
20008ca2:	68fb      	ldr	r3, [r7, #12]
20008ca4:	3301      	adds	r3, #1
20008ca6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
20008ca8:	68f8      	ldr	r0, [r7, #12]
20008caa:	f7ff f9d9 	bl	20008060 <SWAPBYTE>
20008cae:	4603      	mov	r3, r0
20008cb0:	461a      	mov	r2, r3
20008cb2:	687b      	ldr	r3, [r7, #4]
20008cb4:	80da      	strh	r2, [r3, #6]
}
20008cb6:	bf00      	nop
20008cb8:	3710      	adds	r7, #16
20008cba:	46bd      	mov	sp, r7
20008cbc:	bd80      	pop	{r7, pc}

20008cbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
20008cbe:	b580      	push	{r7, lr}
20008cc0:	b082      	sub	sp, #8
20008cc2:	af00      	add	r7, sp, #0
20008cc4:	6078      	str	r0, [r7, #4]
20008cc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
20008cc8:	2180      	movs	r1, #128	@ 0x80
20008cca:	6878      	ldr	r0, [r7, #4]
20008ccc:	f000 fc96 	bl	200095fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
20008cd0:	2100      	movs	r1, #0
20008cd2:	6878      	ldr	r0, [r7, #4]
20008cd4:	f000 fc92 	bl	200095fc <USBD_LL_StallEP>
}
20008cd8:	bf00      	nop
20008cda:	3708      	adds	r7, #8
20008cdc:	46bd      	mov	sp, r7
20008cde:	bd80      	pop	{r7, pc}

20008ce0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
20008ce0:	b580      	push	{r7, lr}
20008ce2:	b086      	sub	sp, #24
20008ce4:	af00      	add	r7, sp, #0
20008ce6:	60f8      	str	r0, [r7, #12]
20008ce8:	60b9      	str	r1, [r7, #8]
20008cea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
20008cec:	2300      	movs	r3, #0
20008cee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
20008cf0:	68fb      	ldr	r3, [r7, #12]
20008cf2:	2b00      	cmp	r3, #0
20008cf4:	d042      	beq.n	20008d7c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
20008cf6:	68fb      	ldr	r3, [r7, #12]
20008cf8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
20008cfa:	6938      	ldr	r0, [r7, #16]
20008cfc:	f000 f842 	bl	20008d84 <USBD_GetLen>
20008d00:	4603      	mov	r3, r0
20008d02:	3301      	adds	r3, #1
20008d04:	005b      	lsls	r3, r3, #1
20008d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20008d0a:	d808      	bhi.n	20008d1e <USBD_GetString+0x3e>
20008d0c:	6938      	ldr	r0, [r7, #16]
20008d0e:	f000 f839 	bl	20008d84 <USBD_GetLen>
20008d12:	4603      	mov	r3, r0
20008d14:	3301      	adds	r3, #1
20008d16:	b29b      	uxth	r3, r3
20008d18:	005b      	lsls	r3, r3, #1
20008d1a:	b29a      	uxth	r2, r3
20008d1c:	e001      	b.n	20008d22 <USBD_GetString+0x42>
20008d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
20008d22:	687b      	ldr	r3, [r7, #4]
20008d24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
20008d26:	7dfb      	ldrb	r3, [r7, #23]
20008d28:	68ba      	ldr	r2, [r7, #8]
20008d2a:	4413      	add	r3, r2
20008d2c:	687a      	ldr	r2, [r7, #4]
20008d2e:	7812      	ldrb	r2, [r2, #0]
20008d30:	701a      	strb	r2, [r3, #0]
  idx++;
20008d32:	7dfb      	ldrb	r3, [r7, #23]
20008d34:	3301      	adds	r3, #1
20008d36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
20008d38:	7dfb      	ldrb	r3, [r7, #23]
20008d3a:	68ba      	ldr	r2, [r7, #8]
20008d3c:	4413      	add	r3, r2
20008d3e:	2203      	movs	r2, #3
20008d40:	701a      	strb	r2, [r3, #0]
  idx++;
20008d42:	7dfb      	ldrb	r3, [r7, #23]
20008d44:	3301      	adds	r3, #1
20008d46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
20008d48:	e013      	b.n	20008d72 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
20008d4a:	7dfb      	ldrb	r3, [r7, #23]
20008d4c:	68ba      	ldr	r2, [r7, #8]
20008d4e:	4413      	add	r3, r2
20008d50:	693a      	ldr	r2, [r7, #16]
20008d52:	7812      	ldrb	r2, [r2, #0]
20008d54:	701a      	strb	r2, [r3, #0]
    pdesc++;
20008d56:	693b      	ldr	r3, [r7, #16]
20008d58:	3301      	adds	r3, #1
20008d5a:	613b      	str	r3, [r7, #16]
    idx++;
20008d5c:	7dfb      	ldrb	r3, [r7, #23]
20008d5e:	3301      	adds	r3, #1
20008d60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
20008d62:	7dfb      	ldrb	r3, [r7, #23]
20008d64:	68ba      	ldr	r2, [r7, #8]
20008d66:	4413      	add	r3, r2
20008d68:	2200      	movs	r2, #0
20008d6a:	701a      	strb	r2, [r3, #0]
    idx++;
20008d6c:	7dfb      	ldrb	r3, [r7, #23]
20008d6e:	3301      	adds	r3, #1
20008d70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
20008d72:	693b      	ldr	r3, [r7, #16]
20008d74:	781b      	ldrb	r3, [r3, #0]
20008d76:	2b00      	cmp	r3, #0
20008d78:	d1e7      	bne.n	20008d4a <USBD_GetString+0x6a>
20008d7a:	e000      	b.n	20008d7e <USBD_GetString+0x9e>
    return;
20008d7c:	bf00      	nop
  }
}
20008d7e:	3718      	adds	r7, #24
20008d80:	46bd      	mov	sp, r7
20008d82:	bd80      	pop	{r7, pc}

20008d84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
20008d84:	b480      	push	{r7}
20008d86:	b085      	sub	sp, #20
20008d88:	af00      	add	r7, sp, #0
20008d8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
20008d8c:	2300      	movs	r3, #0
20008d8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
20008d90:	687b      	ldr	r3, [r7, #4]
20008d92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
20008d94:	e005      	b.n	20008da2 <USBD_GetLen+0x1e>
  {
    len++;
20008d96:	7bfb      	ldrb	r3, [r7, #15]
20008d98:	3301      	adds	r3, #1
20008d9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
20008d9c:	68bb      	ldr	r3, [r7, #8]
20008d9e:	3301      	adds	r3, #1
20008da0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
20008da2:	68bb      	ldr	r3, [r7, #8]
20008da4:	781b      	ldrb	r3, [r3, #0]
20008da6:	2b00      	cmp	r3, #0
20008da8:	d1f5      	bne.n	20008d96 <USBD_GetLen+0x12>
  }

  return len;
20008daa:	7bfb      	ldrb	r3, [r7, #15]
}
20008dac:	4618      	mov	r0, r3
20008dae:	3714      	adds	r7, #20
20008db0:	46bd      	mov	sp, r7
20008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
20008db6:	4770      	bx	lr

20008db8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
20008db8:	b580      	push	{r7, lr}
20008dba:	b084      	sub	sp, #16
20008dbc:	af00      	add	r7, sp, #0
20008dbe:	60f8      	str	r0, [r7, #12]
20008dc0:	60b9      	str	r1, [r7, #8]
20008dc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
20008dc4:	68fb      	ldr	r3, [r7, #12]
20008dc6:	2202      	movs	r2, #2
20008dc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
20008dcc:	68fb      	ldr	r3, [r7, #12]
20008dce:	687a      	ldr	r2, [r7, #4]
20008dd0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
20008dd2:	68fb      	ldr	r3, [r7, #12]
20008dd4:	68ba      	ldr	r2, [r7, #8]
20008dd6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
20008dd8:	68fb      	ldr	r3, [r7, #12]
20008dda:	687a      	ldr	r2, [r7, #4]
20008ddc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
20008dde:	687b      	ldr	r3, [r7, #4]
20008de0:	68ba      	ldr	r2, [r7, #8]
20008de2:	2100      	movs	r1, #0
20008de4:	68f8      	ldr	r0, [r7, #12]
20008de6:	f000 fc92 	bl	2000970e <USBD_LL_Transmit>

  return USBD_OK;
20008dea:	2300      	movs	r3, #0
}
20008dec:	4618      	mov	r0, r3
20008dee:	3710      	adds	r7, #16
20008df0:	46bd      	mov	sp, r7
20008df2:	bd80      	pop	{r7, pc}

20008df4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
20008df4:	b580      	push	{r7, lr}
20008df6:	b084      	sub	sp, #16
20008df8:	af00      	add	r7, sp, #0
20008dfa:	60f8      	str	r0, [r7, #12]
20008dfc:	60b9      	str	r1, [r7, #8]
20008dfe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
20008e00:	687b      	ldr	r3, [r7, #4]
20008e02:	68ba      	ldr	r2, [r7, #8]
20008e04:	2100      	movs	r1, #0
20008e06:	68f8      	ldr	r0, [r7, #12]
20008e08:	f000 fc81 	bl	2000970e <USBD_LL_Transmit>

  return USBD_OK;
20008e0c:	2300      	movs	r3, #0
}
20008e0e:	4618      	mov	r0, r3
20008e10:	3710      	adds	r7, #16
20008e12:	46bd      	mov	sp, r7
20008e14:	bd80      	pop	{r7, pc}

20008e16 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
20008e16:	b580      	push	{r7, lr}
20008e18:	b084      	sub	sp, #16
20008e1a:	af00      	add	r7, sp, #0
20008e1c:	60f8      	str	r0, [r7, #12]
20008e1e:	60b9      	str	r1, [r7, #8]
20008e20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
20008e22:	68fb      	ldr	r3, [r7, #12]
20008e24:	2203      	movs	r2, #3
20008e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
20008e2a:	68fb      	ldr	r3, [r7, #12]
20008e2c:	687a      	ldr	r2, [r7, #4]
20008e2e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
20008e32:	68fb      	ldr	r3, [r7, #12]
20008e34:	68ba      	ldr	r2, [r7, #8]
20008e36:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
20008e3a:	68fb      	ldr	r3, [r7, #12]
20008e3c:	687a      	ldr	r2, [r7, #4]
20008e3e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
20008e42:	687b      	ldr	r3, [r7, #4]
20008e44:	68ba      	ldr	r2, [r7, #8]
20008e46:	2100      	movs	r1, #0
20008e48:	68f8      	ldr	r0, [r7, #12]
20008e4a:	f000 fc81 	bl	20009750 <USBD_LL_PrepareReceive>

  return USBD_OK;
20008e4e:	2300      	movs	r3, #0
}
20008e50:	4618      	mov	r0, r3
20008e52:	3710      	adds	r7, #16
20008e54:	46bd      	mov	sp, r7
20008e56:	bd80      	pop	{r7, pc}

20008e58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
20008e58:	b580      	push	{r7, lr}
20008e5a:	b084      	sub	sp, #16
20008e5c:	af00      	add	r7, sp, #0
20008e5e:	60f8      	str	r0, [r7, #12]
20008e60:	60b9      	str	r1, [r7, #8]
20008e62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
20008e64:	687b      	ldr	r3, [r7, #4]
20008e66:	68ba      	ldr	r2, [r7, #8]
20008e68:	2100      	movs	r1, #0
20008e6a:	68f8      	ldr	r0, [r7, #12]
20008e6c:	f000 fc70 	bl	20009750 <USBD_LL_PrepareReceive>

  return USBD_OK;
20008e70:	2300      	movs	r3, #0
}
20008e72:	4618      	mov	r0, r3
20008e74:	3710      	adds	r7, #16
20008e76:	46bd      	mov	sp, r7
20008e78:	bd80      	pop	{r7, pc}

20008e7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
20008e7a:	b580      	push	{r7, lr}
20008e7c:	b082      	sub	sp, #8
20008e7e:	af00      	add	r7, sp, #0
20008e80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
20008e82:	687b      	ldr	r3, [r7, #4]
20008e84:	2204      	movs	r2, #4
20008e86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
20008e8a:	2300      	movs	r3, #0
20008e8c:	2200      	movs	r2, #0
20008e8e:	2100      	movs	r1, #0
20008e90:	6878      	ldr	r0, [r7, #4]
20008e92:	f000 fc3c 	bl	2000970e <USBD_LL_Transmit>

  return USBD_OK;
20008e96:	2300      	movs	r3, #0
}
20008e98:	4618      	mov	r0, r3
20008e9a:	3708      	adds	r7, #8
20008e9c:	46bd      	mov	sp, r7
20008e9e:	bd80      	pop	{r7, pc}

20008ea0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
20008ea0:	b580      	push	{r7, lr}
20008ea2:	b082      	sub	sp, #8
20008ea4:	af00      	add	r7, sp, #0
20008ea6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
20008ea8:	687b      	ldr	r3, [r7, #4]
20008eaa:	2205      	movs	r2, #5
20008eac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
20008eb0:	2300      	movs	r3, #0
20008eb2:	2200      	movs	r2, #0
20008eb4:	2100      	movs	r1, #0
20008eb6:	6878      	ldr	r0, [r7, #4]
20008eb8:	f000 fc4a 	bl	20009750 <USBD_LL_PrepareReceive>

  return USBD_OK;
20008ebc:	2300      	movs	r3, #0
}
20008ebe:	4618      	mov	r0, r3
20008ec0:	3708      	adds	r7, #8
20008ec2:	46bd      	mov	sp, r7
20008ec4:	bd80      	pop	{r7, pc}
	...

20008ec8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
20008ec8:	b580      	push	{r7, lr}
20008eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
20008ecc:	2200      	movs	r2, #0
20008ece:	4912      	ldr	r1, [pc, #72]	@ (20008f18 <MX_USB_DEVICE_Init+0x50>)
20008ed0:	4812      	ldr	r0, [pc, #72]	@ (20008f1c <MX_USB_DEVICE_Init+0x54>)
20008ed2:	f7fe fc8f 	bl	200077f4 <USBD_Init>
20008ed6:	4603      	mov	r3, r0
20008ed8:	2b00      	cmp	r3, #0
20008eda:	d001      	beq.n	20008ee0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
20008edc:	f7f8 fbe5 	bl	200016aa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
20008ee0:	490f      	ldr	r1, [pc, #60]	@ (20008f20 <MX_USB_DEVICE_Init+0x58>)
20008ee2:	480e      	ldr	r0, [pc, #56]	@ (20008f1c <MX_USB_DEVICE_Init+0x54>)
20008ee4:	f7fe fcb6 	bl	20007854 <USBD_RegisterClass>
20008ee8:	4603      	mov	r3, r0
20008eea:	2b00      	cmp	r3, #0
20008eec:	d001      	beq.n	20008ef2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
20008eee:	f7f8 fbdc 	bl	200016aa <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
20008ef2:	490c      	ldr	r1, [pc, #48]	@ (20008f24 <MX_USB_DEVICE_Init+0x5c>)
20008ef4:	4809      	ldr	r0, [pc, #36]	@ (20008f1c <MX_USB_DEVICE_Init+0x54>)
20008ef6:	f7fe fc63 	bl	200077c0 <USBD_CUSTOM_HID_RegisterInterface>
20008efa:	4603      	mov	r3, r0
20008efc:	2b00      	cmp	r3, #0
20008efe:	d001      	beq.n	20008f04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
20008f00:	f7f8 fbd3 	bl	200016aa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
20008f04:	4805      	ldr	r0, [pc, #20]	@ (20008f1c <MX_USB_DEVICE_Init+0x54>)
20008f06:	f7fe fcdb 	bl	200078c0 <USBD_Start>
20008f0a:	4603      	mov	r3, r0
20008f0c:	2b00      	cmp	r3, #0
20008f0e:	d001      	beq.n	20008f14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
20008f10:	f7f8 fbcb 	bl	200016aa <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
20008f14:	bf00      	nop
20008f16:	bd80      	pop	{r7, pc}
20008f18:	20009c48 	.word	0x20009c48
20008f1c:	2000a0b4 	.word	0x2000a0b4
20008f20:	20009bc4 	.word	0x20009bc4
20008f24:	20009c38 	.word	0x20009c38

20008f28 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
20008f28:	b480      	push	{r7}
20008f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
20008f2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
20008f2e:	4618      	mov	r0, r3
20008f30:	46bd      	mov	sp, r7
20008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f36:	4770      	bx	lr

20008f38 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
20008f38:	b480      	push	{r7}
20008f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
20008f3c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
20008f3e:	4618      	mov	r0, r3
20008f40:	46bd      	mov	sp, r7
20008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f46:	4770      	bx	lr

20008f48 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
20008f48:	b580      	push	{r7, lr}
20008f4a:	b082      	sub	sp, #8
20008f4c:	af00      	add	r7, sp, #0
20008f4e:	4603      	mov	r3, r0
20008f50:	460a      	mov	r2, r1
20008f52:	71fb      	strb	r3, [r7, #7]
20008f54:	4613      	mov	r3, r2
20008f56:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
20008f58:	4806      	ldr	r0, [pc, #24]	@ (20008f74 <CUSTOM_HID_OutEvent_FS+0x2c>)
20008f5a:	f7fe fbcf 	bl	200076fc <USBD_CUSTOM_HID_ReceivePacket>
20008f5e:	4603      	mov	r3, r0
20008f60:	2b00      	cmp	r3, #0
20008f62:	d002      	beq.n	20008f6a <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
20008f64:	f04f 33ff 	mov.w	r3, #4294967295
20008f68:	e000      	b.n	20008f6c <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
20008f6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
20008f6c:	4618      	mov	r0, r3
20008f6e:	3708      	adds	r7, #8
20008f70:	46bd      	mov	sp, r7
20008f72:	bd80      	pop	{r7, pc}
20008f74:	2000a0b4 	.word	0x2000a0b4

20008f78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
20008f78:	b480      	push	{r7}
20008f7a:	b083      	sub	sp, #12
20008f7c:	af00      	add	r7, sp, #0
20008f7e:	4603      	mov	r3, r0
20008f80:	6039      	str	r1, [r7, #0]
20008f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
20008f84:	683b      	ldr	r3, [r7, #0]
20008f86:	2212      	movs	r2, #18
20008f88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
20008f8a:	4b03      	ldr	r3, [pc, #12]	@ (20008f98 <USBD_FS_DeviceDescriptor+0x20>)
}
20008f8c:	4618      	mov	r0, r3
20008f8e:	370c      	adds	r7, #12
20008f90:	46bd      	mov	sp, r7
20008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f96:	4770      	bx	lr
20008f98:	20009c68 	.word	0x20009c68

20008f9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
20008f9c:	b480      	push	{r7}
20008f9e:	b083      	sub	sp, #12
20008fa0:	af00      	add	r7, sp, #0
20008fa2:	4603      	mov	r3, r0
20008fa4:	6039      	str	r1, [r7, #0]
20008fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
20008fa8:	683b      	ldr	r3, [r7, #0]
20008faa:	2204      	movs	r2, #4
20008fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
20008fae:	4b03      	ldr	r3, [pc, #12]	@ (20008fbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
20008fb0:	4618      	mov	r0, r3
20008fb2:	370c      	adds	r7, #12
20008fb4:	46bd      	mov	sp, r7
20008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20008fba:	4770      	bx	lr
20008fbc:	20009c88 	.word	0x20009c88

20008fc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
20008fc0:	b580      	push	{r7, lr}
20008fc2:	b082      	sub	sp, #8
20008fc4:	af00      	add	r7, sp, #0
20008fc6:	4603      	mov	r3, r0
20008fc8:	6039      	str	r1, [r7, #0]
20008fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
20008fcc:	79fb      	ldrb	r3, [r7, #7]
20008fce:	2b00      	cmp	r3, #0
20008fd0:	d105      	bne.n	20008fde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
20008fd2:	683a      	ldr	r2, [r7, #0]
20008fd4:	4907      	ldr	r1, [pc, #28]	@ (20008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
20008fd6:	4808      	ldr	r0, [pc, #32]	@ (20008ff8 <USBD_FS_ProductStrDescriptor+0x38>)
20008fd8:	f7ff fe82 	bl	20008ce0 <USBD_GetString>
20008fdc:	e004      	b.n	20008fe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
20008fde:	683a      	ldr	r2, [r7, #0]
20008fe0:	4904      	ldr	r1, [pc, #16]	@ (20008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
20008fe2:	4805      	ldr	r0, [pc, #20]	@ (20008ff8 <USBD_FS_ProductStrDescriptor+0x38>)
20008fe4:	f7ff fe7c 	bl	20008ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
20008fe8:	4b02      	ldr	r3, [pc, #8]	@ (20008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
20008fea:	4618      	mov	r0, r3
20008fec:	3708      	adds	r7, #8
20008fee:	46bd      	mov	sp, r7
20008ff0:	bd80      	pop	{r7, pc}
20008ff2:	bf00      	nop
20008ff4:	2000a390 	.word	0x2000a390
20008ff8:	20009b44 	.word	0x20009b44

20008ffc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
20008ffc:	b580      	push	{r7, lr}
20008ffe:	b082      	sub	sp, #8
20009000:	af00      	add	r7, sp, #0
20009002:	4603      	mov	r3, r0
20009004:	6039      	str	r1, [r7, #0]
20009006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
20009008:	683a      	ldr	r2, [r7, #0]
2000900a:	4904      	ldr	r1, [pc, #16]	@ (2000901c <USBD_FS_ManufacturerStrDescriptor+0x20>)
2000900c:	4804      	ldr	r0, [pc, #16]	@ (20009020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
2000900e:	f7ff fe67 	bl	20008ce0 <USBD_GetString>
  return USBD_StrDesc;
20009012:	4b02      	ldr	r3, [pc, #8]	@ (2000901c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
20009014:	4618      	mov	r0, r3
20009016:	3708      	adds	r7, #8
20009018:	46bd      	mov	sp, r7
2000901a:	bd80      	pop	{r7, pc}
2000901c:	2000a390 	.word	0x2000a390
20009020:	20009b54 	.word	0x20009b54

20009024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
20009024:	b580      	push	{r7, lr}
20009026:	b082      	sub	sp, #8
20009028:	af00      	add	r7, sp, #0
2000902a:	4603      	mov	r3, r0
2000902c:	6039      	str	r1, [r7, #0]
2000902e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
20009030:	683b      	ldr	r3, [r7, #0]
20009032:	221a      	movs	r2, #26
20009034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
20009036:	f000 f855 	bl	200090e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
2000903a:	4b02      	ldr	r3, [pc, #8]	@ (20009044 <USBD_FS_SerialStrDescriptor+0x20>)
}
2000903c:	4618      	mov	r0, r3
2000903e:	3708      	adds	r7, #8
20009040:	46bd      	mov	sp, r7
20009042:	bd80      	pop	{r7, pc}
20009044:	20009c8c 	.word	0x20009c8c

20009048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
20009048:	b580      	push	{r7, lr}
2000904a:	b082      	sub	sp, #8
2000904c:	af00      	add	r7, sp, #0
2000904e:	4603      	mov	r3, r0
20009050:	6039      	str	r1, [r7, #0]
20009052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
20009054:	79fb      	ldrb	r3, [r7, #7]
20009056:	2b00      	cmp	r3, #0
20009058:	d105      	bne.n	20009066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
2000905a:	683a      	ldr	r2, [r7, #0]
2000905c:	4907      	ldr	r1, [pc, #28]	@ (2000907c <USBD_FS_ConfigStrDescriptor+0x34>)
2000905e:	4808      	ldr	r0, [pc, #32]	@ (20009080 <USBD_FS_ConfigStrDescriptor+0x38>)
20009060:	f7ff fe3e 	bl	20008ce0 <USBD_GetString>
20009064:	e004      	b.n	20009070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
20009066:	683a      	ldr	r2, [r7, #0]
20009068:	4904      	ldr	r1, [pc, #16]	@ (2000907c <USBD_FS_ConfigStrDescriptor+0x34>)
2000906a:	4805      	ldr	r0, [pc, #20]	@ (20009080 <USBD_FS_ConfigStrDescriptor+0x38>)
2000906c:	f7ff fe38 	bl	20008ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
20009070:	4b02      	ldr	r3, [pc, #8]	@ (2000907c <USBD_FS_ConfigStrDescriptor+0x34>)
}
20009072:	4618      	mov	r0, r3
20009074:	3708      	adds	r7, #8
20009076:	46bd      	mov	sp, r7
20009078:	bd80      	pop	{r7, pc}
2000907a:	bf00      	nop
2000907c:	2000a390 	.word	0x2000a390
20009080:	20009b68 	.word	0x20009b68

20009084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
20009084:	b580      	push	{r7, lr}
20009086:	b082      	sub	sp, #8
20009088:	af00      	add	r7, sp, #0
2000908a:	4603      	mov	r3, r0
2000908c:	6039      	str	r1, [r7, #0]
2000908e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
20009090:	79fb      	ldrb	r3, [r7, #7]
20009092:	2b00      	cmp	r3, #0
20009094:	d105      	bne.n	200090a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
20009096:	683a      	ldr	r2, [r7, #0]
20009098:	4907      	ldr	r1, [pc, #28]	@ (200090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
2000909a:	4808      	ldr	r0, [pc, #32]	@ (200090bc <USBD_FS_InterfaceStrDescriptor+0x38>)
2000909c:	f7ff fe20 	bl	20008ce0 <USBD_GetString>
200090a0:	e004      	b.n	200090ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
200090a2:	683a      	ldr	r2, [r7, #0]
200090a4:	4904      	ldr	r1, [pc, #16]	@ (200090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
200090a6:	4805      	ldr	r0, [pc, #20]	@ (200090bc <USBD_FS_InterfaceStrDescriptor+0x38>)
200090a8:	f7ff fe1a 	bl	20008ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
200090ac:	4b02      	ldr	r3, [pc, #8]	@ (200090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
200090ae:	4618      	mov	r0, r3
200090b0:	3708      	adds	r7, #8
200090b2:	46bd      	mov	sp, r7
200090b4:	bd80      	pop	{r7, pc}
200090b6:	bf00      	nop
200090b8:	2000a390 	.word	0x2000a390
200090bc:	20009b7c 	.word	0x20009b7c

200090c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
200090c0:	b480      	push	{r7}
200090c2:	b083      	sub	sp, #12
200090c4:	af00      	add	r7, sp, #0
200090c6:	4603      	mov	r3, r0
200090c8:	6039      	str	r1, [r7, #0]
200090ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
200090cc:	683b      	ldr	r3, [r7, #0]
200090ce:	220c      	movs	r2, #12
200090d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
200090d2:	4b03      	ldr	r3, [pc, #12]	@ (200090e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
200090d4:	4618      	mov	r0, r3
200090d6:	370c      	adds	r7, #12
200090d8:	46bd      	mov	sp, r7
200090da:	f85d 7b04 	ldr.w	r7, [sp], #4
200090de:	4770      	bx	lr
200090e0:	20009c7c 	.word	0x20009c7c

200090e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
200090e4:	b580      	push	{r7, lr}
200090e6:	b084      	sub	sp, #16
200090e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
200090ea:	4b0f      	ldr	r3, [pc, #60]	@ (20009128 <Get_SerialNum+0x44>)
200090ec:	681b      	ldr	r3, [r3, #0]
200090ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
200090f0:	4b0e      	ldr	r3, [pc, #56]	@ (2000912c <Get_SerialNum+0x48>)
200090f2:	681b      	ldr	r3, [r3, #0]
200090f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
200090f6:	4b0e      	ldr	r3, [pc, #56]	@ (20009130 <Get_SerialNum+0x4c>)
200090f8:	681b      	ldr	r3, [r3, #0]
200090fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
200090fc:	68fa      	ldr	r2, [r7, #12]
200090fe:	687b      	ldr	r3, [r7, #4]
20009100:	4413      	add	r3, r2
20009102:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
20009104:	68fb      	ldr	r3, [r7, #12]
20009106:	2b00      	cmp	r3, #0
20009108:	d009      	beq.n	2000911e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
2000910a:	2208      	movs	r2, #8
2000910c:	4909      	ldr	r1, [pc, #36]	@ (20009134 <Get_SerialNum+0x50>)
2000910e:	68f8      	ldr	r0, [r7, #12]
20009110:	f000 f814 	bl	2000913c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
20009114:	2204      	movs	r2, #4
20009116:	4908      	ldr	r1, [pc, #32]	@ (20009138 <Get_SerialNum+0x54>)
20009118:	68b8      	ldr	r0, [r7, #8]
2000911a:	f000 f80f 	bl	2000913c <IntToUnicode>
  }
}
2000911e:	bf00      	nop
20009120:	3710      	adds	r7, #16
20009122:	46bd      	mov	sp, r7
20009124:	bd80      	pop	{r7, pc}
20009126:	bf00      	nop
20009128:	1ff0f420 	.word	0x1ff0f420
2000912c:	1ff0f424 	.word	0x1ff0f424
20009130:	1ff0f428 	.word	0x1ff0f428
20009134:	20009c8e 	.word	0x20009c8e
20009138:	20009c9e 	.word	0x20009c9e

2000913c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
2000913c:	b480      	push	{r7}
2000913e:	b087      	sub	sp, #28
20009140:	af00      	add	r7, sp, #0
20009142:	60f8      	str	r0, [r7, #12]
20009144:	60b9      	str	r1, [r7, #8]
20009146:	4613      	mov	r3, r2
20009148:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
2000914a:	2300      	movs	r3, #0
2000914c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
2000914e:	2300      	movs	r3, #0
20009150:	75fb      	strb	r3, [r7, #23]
20009152:	e027      	b.n	200091a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
20009154:	68fb      	ldr	r3, [r7, #12]
20009156:	0f1b      	lsrs	r3, r3, #28
20009158:	2b09      	cmp	r3, #9
2000915a:	d80b      	bhi.n	20009174 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
2000915c:	68fb      	ldr	r3, [r7, #12]
2000915e:	0f1b      	lsrs	r3, r3, #28
20009160:	b2da      	uxtb	r2, r3
20009162:	7dfb      	ldrb	r3, [r7, #23]
20009164:	005b      	lsls	r3, r3, #1
20009166:	4619      	mov	r1, r3
20009168:	68bb      	ldr	r3, [r7, #8]
2000916a:	440b      	add	r3, r1
2000916c:	3230      	adds	r2, #48	@ 0x30
2000916e:	b2d2      	uxtb	r2, r2
20009170:	701a      	strb	r2, [r3, #0]
20009172:	e00a      	b.n	2000918a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
20009174:	68fb      	ldr	r3, [r7, #12]
20009176:	0f1b      	lsrs	r3, r3, #28
20009178:	b2da      	uxtb	r2, r3
2000917a:	7dfb      	ldrb	r3, [r7, #23]
2000917c:	005b      	lsls	r3, r3, #1
2000917e:	4619      	mov	r1, r3
20009180:	68bb      	ldr	r3, [r7, #8]
20009182:	440b      	add	r3, r1
20009184:	3237      	adds	r2, #55	@ 0x37
20009186:	b2d2      	uxtb	r2, r2
20009188:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
2000918a:	68fb      	ldr	r3, [r7, #12]
2000918c:	011b      	lsls	r3, r3, #4
2000918e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
20009190:	7dfb      	ldrb	r3, [r7, #23]
20009192:	005b      	lsls	r3, r3, #1
20009194:	3301      	adds	r3, #1
20009196:	68ba      	ldr	r2, [r7, #8]
20009198:	4413      	add	r3, r2
2000919a:	2200      	movs	r2, #0
2000919c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
2000919e:	7dfb      	ldrb	r3, [r7, #23]
200091a0:	3301      	adds	r3, #1
200091a2:	75fb      	strb	r3, [r7, #23]
200091a4:	7dfa      	ldrb	r2, [r7, #23]
200091a6:	79fb      	ldrb	r3, [r7, #7]
200091a8:	429a      	cmp	r2, r3
200091aa:	d3d3      	bcc.n	20009154 <IntToUnicode+0x18>
  }
}
200091ac:	bf00      	nop
200091ae:	bf00      	nop
200091b0:	371c      	adds	r7, #28
200091b2:	46bd      	mov	sp, r7
200091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200091b8:	4770      	bx	lr
	...

200091bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
200091bc:	b580      	push	{r7, lr}
200091be:	b0ac      	sub	sp, #176	@ 0xb0
200091c0:	af00      	add	r7, sp, #0
200091c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200091c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
200091c8:	2200      	movs	r2, #0
200091ca:	601a      	str	r2, [r3, #0]
200091cc:	605a      	str	r2, [r3, #4]
200091ce:	609a      	str	r2, [r3, #8]
200091d0:	60da      	str	r2, [r3, #12]
200091d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
200091d4:	f107 0318 	add.w	r3, r7, #24
200091d8:	2284      	movs	r2, #132	@ 0x84
200091da:	2100      	movs	r1, #0
200091dc:	4618      	mov	r0, r3
200091de:	f000 fc17 	bl	20009a10 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
200091e2:	687b      	ldr	r3, [r7, #4]
200091e4:	681b      	ldr	r3, [r3, #0]
200091e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
200091ea:	d161      	bne.n	200092b0 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
200091ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
200091f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
200091f2:	2300      	movs	r3, #0
200091f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
200091f8:	f107 0318 	add.w	r3, r7, #24
200091fc:	4618      	mov	r0, r3
200091fe:	f7fb fb1f 	bl	20004840 <HAL_RCCEx_PeriphCLKConfig>
20009202:	4603      	mov	r3, r0
20009204:	2b00      	cmp	r3, #0
20009206:	d001      	beq.n	2000920c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
20009208:	f7f8 fa4f 	bl	200016aa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000920c:	4b2a      	ldr	r3, [pc, #168]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
2000920e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20009210:	4a29      	ldr	r2, [pc, #164]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
20009212:	f043 0301 	orr.w	r3, r3, #1
20009216:	6313      	str	r3, [r2, #48]	@ 0x30
20009218:	4b27      	ldr	r3, [pc, #156]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
2000921a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000921c:	f003 0301 	and.w	r3, r3, #1
20009220:	617b      	str	r3, [r7, #20]
20009222:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
20009224:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
20009228:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000922c:	2302      	movs	r3, #2
2000922e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20009232:	2300      	movs	r3, #0
20009234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20009238:	2303      	movs	r3, #3
2000923a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
2000923e:	230a      	movs	r3, #10
20009240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20009244:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
20009248:	4619      	mov	r1, r3
2000924a:	481c      	ldr	r0, [pc, #112]	@ (200092bc <HAL_PCD_MspInit+0x100>)
2000924c:	f7f9 f996 	bl	2000257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
20009250:	f44f 7300 	mov.w	r3, #512	@ 0x200
20009254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20009258:	2300      	movs	r3, #0
2000925a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000925e:	2300      	movs	r3, #0
20009260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
20009264:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
20009268:	4619      	mov	r1, r3
2000926a:	4814      	ldr	r0, [pc, #80]	@ (200092bc <HAL_PCD_MspInit+0x100>)
2000926c:	f7f9 f986 	bl	2000257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
20009270:	4b11      	ldr	r3, [pc, #68]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
20009272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20009274:	4a10      	ldr	r2, [pc, #64]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
20009276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2000927a:	6353      	str	r3, [r2, #52]	@ 0x34
2000927c:	4b0e      	ldr	r3, [pc, #56]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
2000927e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20009280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20009284:	613b      	str	r3, [r7, #16]
20009286:	693b      	ldr	r3, [r7, #16]
20009288:	4b0b      	ldr	r3, [pc, #44]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
2000928a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000928c:	4a0a      	ldr	r2, [pc, #40]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
2000928e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20009292:	6453      	str	r3, [r2, #68]	@ 0x44
20009294:	4b08      	ldr	r3, [pc, #32]	@ (200092b8 <HAL_PCD_MspInit+0xfc>)
20009296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20009298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000929c:	60fb      	str	r3, [r7, #12]
2000929e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
200092a0:	2200      	movs	r2, #0
200092a2:	2100      	movs	r1, #0
200092a4:	2043      	movs	r0, #67	@ 0x43
200092a6:	f7f8 fde4 	bl	20001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
200092aa:	2043      	movs	r0, #67	@ 0x43
200092ac:	f7f8 fdfd 	bl	20001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
200092b0:	bf00      	nop
200092b2:	37b0      	adds	r7, #176	@ 0xb0
200092b4:	46bd      	mov	sp, r7
200092b6:	bd80      	pop	{r7, pc}
200092b8:	40023800 	.word	0x40023800
200092bc:	40020000 	.word	0x40020000

200092c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
200092c0:	b580      	push	{r7, lr}
200092c2:	b082      	sub	sp, #8
200092c4:	af00      	add	r7, sp, #0
200092c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
200092c8:	687b      	ldr	r3, [r7, #4]
200092ca:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
200092ce:	687b      	ldr	r3, [r7, #4]
200092d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
200092d4:	4619      	mov	r1, r3
200092d6:	4610      	mov	r0, r2
200092d8:	f7fe fb3f 	bl	2000795a <USBD_LL_SetupStage>
}
200092dc:	bf00      	nop
200092de:	3708      	adds	r7, #8
200092e0:	46bd      	mov	sp, r7
200092e2:	bd80      	pop	{r7, pc}

200092e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
200092e4:	b580      	push	{r7, lr}
200092e6:	b082      	sub	sp, #8
200092e8:	af00      	add	r7, sp, #0
200092ea:	6078      	str	r0, [r7, #4]
200092ec:	460b      	mov	r3, r1
200092ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
200092f0:	687b      	ldr	r3, [r7, #4]
200092f2:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
200092f6:	78fa      	ldrb	r2, [r7, #3]
200092f8:	6879      	ldr	r1, [r7, #4]
200092fa:	4613      	mov	r3, r2
200092fc:	00db      	lsls	r3, r3, #3
200092fe:	4413      	add	r3, r2
20009300:	009b      	lsls	r3, r3, #2
20009302:	440b      	add	r3, r1
20009304:	f503 7318 	add.w	r3, r3, #608	@ 0x260
20009308:	681a      	ldr	r2, [r3, #0]
2000930a:	78fb      	ldrb	r3, [r7, #3]
2000930c:	4619      	mov	r1, r3
2000930e:	f7fe fb79 	bl	20007a04 <USBD_LL_DataOutStage>
}
20009312:	bf00      	nop
20009314:	3708      	adds	r7, #8
20009316:	46bd      	mov	sp, r7
20009318:	bd80      	pop	{r7, pc}

2000931a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000931a:	b580      	push	{r7, lr}
2000931c:	b082      	sub	sp, #8
2000931e:	af00      	add	r7, sp, #0
20009320:	6078      	str	r0, [r7, #4]
20009322:	460b      	mov	r3, r1
20009324:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
20009326:	687b      	ldr	r3, [r7, #4]
20009328:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
2000932c:	78fa      	ldrb	r2, [r7, #3]
2000932e:	6879      	ldr	r1, [r7, #4]
20009330:	4613      	mov	r3, r2
20009332:	00db      	lsls	r3, r3, #3
20009334:	4413      	add	r3, r2
20009336:	009b      	lsls	r3, r3, #2
20009338:	440b      	add	r3, r1
2000933a:	3320      	adds	r3, #32
2000933c:	681a      	ldr	r2, [r3, #0]
2000933e:	78fb      	ldrb	r3, [r7, #3]
20009340:	4619      	mov	r1, r3
20009342:	f7fe fc1b 	bl	20007b7c <USBD_LL_DataInStage>
}
20009346:	bf00      	nop
20009348:	3708      	adds	r7, #8
2000934a:	46bd      	mov	sp, r7
2000934c:	bd80      	pop	{r7, pc}

2000934e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000934e:	b580      	push	{r7, lr}
20009350:	b082      	sub	sp, #8
20009352:	af00      	add	r7, sp, #0
20009354:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
20009356:	687b      	ldr	r3, [r7, #4]
20009358:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000935c:	4618      	mov	r0, r3
2000935e:	f7fe fd5f 	bl	20007e20 <USBD_LL_SOF>
}
20009362:	bf00      	nop
20009364:	3708      	adds	r7, #8
20009366:	46bd      	mov	sp, r7
20009368:	bd80      	pop	{r7, pc}

2000936a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000936a:	b580      	push	{r7, lr}
2000936c:	b084      	sub	sp, #16
2000936e:	af00      	add	r7, sp, #0
20009370:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
20009372:	2301      	movs	r3, #1
20009374:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
20009376:	687b      	ldr	r3, [r7, #4]
20009378:	79db      	ldrb	r3, [r3, #7]
2000937a:	2b00      	cmp	r3, #0
2000937c:	d102      	bne.n	20009384 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
2000937e:	2300      	movs	r3, #0
20009380:	73fb      	strb	r3, [r7, #15]
20009382:	e008      	b.n	20009396 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
20009384:	687b      	ldr	r3, [r7, #4]
20009386:	79db      	ldrb	r3, [r3, #7]
20009388:	2b02      	cmp	r3, #2
2000938a:	d102      	bne.n	20009392 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
2000938c:	2301      	movs	r3, #1
2000938e:	73fb      	strb	r3, [r7, #15]
20009390:	e001      	b.n	20009396 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
20009392:	f7f8 f98a 	bl	200016aa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
20009396:	687b      	ldr	r3, [r7, #4]
20009398:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000939c:	7bfa      	ldrb	r2, [r7, #15]
2000939e:	4611      	mov	r1, r2
200093a0:	4618      	mov	r0, r3
200093a2:	f7fe fcf9 	bl	20007d98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
200093a6:	687b      	ldr	r3, [r7, #4]
200093a8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
200093ac:	4618      	mov	r0, r3
200093ae:	f7fe fca0 	bl	20007cf2 <USBD_LL_Reset>
}
200093b2:	bf00      	nop
200093b4:	3710      	adds	r7, #16
200093b6:	46bd      	mov	sp, r7
200093b8:	bd80      	pop	{r7, pc}
	...

200093bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
200093bc:	b580      	push	{r7, lr}
200093be:	b082      	sub	sp, #8
200093c0:	af00      	add	r7, sp, #0
200093c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
200093c4:	687b      	ldr	r3, [r7, #4]
200093c6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
200093ca:	4618      	mov	r0, r3
200093cc:	f7fe fcf4 	bl	20007db8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
200093d0:	687b      	ldr	r3, [r7, #4]
200093d2:	681b      	ldr	r3, [r3, #0]
200093d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
200093d8:	681b      	ldr	r3, [r3, #0]
200093da:	687a      	ldr	r2, [r7, #4]
200093dc:	6812      	ldr	r2, [r2, #0]
200093de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
200093e2:	f043 0301 	orr.w	r3, r3, #1
200093e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
200093e8:	687b      	ldr	r3, [r7, #4]
200093ea:	7adb      	ldrb	r3, [r3, #11]
200093ec:	2b00      	cmp	r3, #0
200093ee:	d005      	beq.n	200093fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
200093f0:	4b04      	ldr	r3, [pc, #16]	@ (20009404 <HAL_PCD_SuspendCallback+0x48>)
200093f2:	691b      	ldr	r3, [r3, #16]
200093f4:	4a03      	ldr	r2, [pc, #12]	@ (20009404 <HAL_PCD_SuspendCallback+0x48>)
200093f6:	f043 0306 	orr.w	r3, r3, #6
200093fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
200093fc:	bf00      	nop
200093fe:	3708      	adds	r7, #8
20009400:	46bd      	mov	sp, r7
20009402:	bd80      	pop	{r7, pc}
20009404:	e000ed00 	.word	0xe000ed00

20009408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
20009408:	b580      	push	{r7, lr}
2000940a:	b082      	sub	sp, #8
2000940c:	af00      	add	r7, sp, #0
2000940e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
20009410:	687b      	ldr	r3, [r7, #4]
20009412:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
20009416:	4618      	mov	r0, r3
20009418:	f7fe fcea 	bl	20007df0 <USBD_LL_Resume>
}
2000941c:	bf00      	nop
2000941e:	3708      	adds	r7, #8
20009420:	46bd      	mov	sp, r7
20009422:	bd80      	pop	{r7, pc}

20009424 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
20009424:	b580      	push	{r7, lr}
20009426:	b082      	sub	sp, #8
20009428:	af00      	add	r7, sp, #0
2000942a:	6078      	str	r0, [r7, #4]
2000942c:	460b      	mov	r3, r1
2000942e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
20009430:	687b      	ldr	r3, [r7, #4]
20009432:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
20009436:	78fa      	ldrb	r2, [r7, #3]
20009438:	4611      	mov	r1, r2
2000943a:	4618      	mov	r0, r3
2000943c:	f7fe fd42 	bl	20007ec4 <USBD_LL_IsoOUTIncomplete>
}
20009440:	bf00      	nop
20009442:	3708      	adds	r7, #8
20009444:	46bd      	mov	sp, r7
20009446:	bd80      	pop	{r7, pc}

20009448 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
20009448:	b580      	push	{r7, lr}
2000944a:	b082      	sub	sp, #8
2000944c:	af00      	add	r7, sp, #0
2000944e:	6078      	str	r0, [r7, #4]
20009450:	460b      	mov	r3, r1
20009452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
20009454:	687b      	ldr	r3, [r7, #4]
20009456:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000945a:	78fa      	ldrb	r2, [r7, #3]
2000945c:	4611      	mov	r1, r2
2000945e:	4618      	mov	r0, r3
20009460:	f7fe fcfe 	bl	20007e60 <USBD_LL_IsoINIncomplete>
}
20009464:	bf00      	nop
20009466:	3708      	adds	r7, #8
20009468:	46bd      	mov	sp, r7
2000946a:	bd80      	pop	{r7, pc}

2000946c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
2000946c:	b580      	push	{r7, lr}
2000946e:	b082      	sub	sp, #8
20009470:	af00      	add	r7, sp, #0
20009472:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
20009474:	687b      	ldr	r3, [r7, #4]
20009476:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
2000947a:	4618      	mov	r0, r3
2000947c:	f7fe fd54 	bl	20007f28 <USBD_LL_DevConnected>
}
20009480:	bf00      	nop
20009482:	3708      	adds	r7, #8
20009484:	46bd      	mov	sp, r7
20009486:	bd80      	pop	{r7, pc}

20009488 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
20009488:	b580      	push	{r7, lr}
2000948a:	b082      	sub	sp, #8
2000948c:	af00      	add	r7, sp, #0
2000948e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
20009490:	687b      	ldr	r3, [r7, #4]
20009492:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
20009496:	4618      	mov	r0, r3
20009498:	f7fe fd51 	bl	20007f3e <USBD_LL_DevDisconnected>
}
2000949c:	bf00      	nop
2000949e:	3708      	adds	r7, #8
200094a0:	46bd      	mov	sp, r7
200094a2:	bd80      	pop	{r7, pc}

200094a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
200094a4:	b580      	push	{r7, lr}
200094a6:	b082      	sub	sp, #8
200094a8:	af00      	add	r7, sp, #0
200094aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
200094ac:	687b      	ldr	r3, [r7, #4]
200094ae:	781b      	ldrb	r3, [r3, #0]
200094b0:	2b00      	cmp	r3, #0
200094b2:	d13c      	bne.n	2000952e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
200094b4:	4a20      	ldr	r2, [pc, #128]	@ (20009538 <USBD_LL_Init+0x94>)
200094b6:	687b      	ldr	r3, [r7, #4]
200094b8:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
200094bc:	687b      	ldr	r3, [r7, #4]
200094be:	4a1e      	ldr	r2, [pc, #120]	@ (20009538 <USBD_LL_Init+0x94>)
200094c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
200094c4:	4b1c      	ldr	r3, [pc, #112]	@ (20009538 <USBD_LL_Init+0x94>)
200094c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
200094ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
200094cc:	4b1a      	ldr	r3, [pc, #104]	@ (20009538 <USBD_LL_Init+0x94>)
200094ce:	2206      	movs	r2, #6
200094d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
200094d2:	4b19      	ldr	r3, [pc, #100]	@ (20009538 <USBD_LL_Init+0x94>)
200094d4:	2202      	movs	r2, #2
200094d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
200094d8:	4b17      	ldr	r3, [pc, #92]	@ (20009538 <USBD_LL_Init+0x94>)
200094da:	2200      	movs	r2, #0
200094dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
200094de:	4b16      	ldr	r3, [pc, #88]	@ (20009538 <USBD_LL_Init+0x94>)
200094e0:	2202      	movs	r2, #2
200094e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
200094e4:	4b14      	ldr	r3, [pc, #80]	@ (20009538 <USBD_LL_Init+0x94>)
200094e6:	2201      	movs	r2, #1
200094e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
200094ea:	4b13      	ldr	r3, [pc, #76]	@ (20009538 <USBD_LL_Init+0x94>)
200094ec:	2200      	movs	r2, #0
200094ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
200094f0:	4b11      	ldr	r3, [pc, #68]	@ (20009538 <USBD_LL_Init+0x94>)
200094f2:	2200      	movs	r2, #0
200094f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
200094f6:	4b10      	ldr	r3, [pc, #64]	@ (20009538 <USBD_LL_Init+0x94>)
200094f8:	2201      	movs	r2, #1
200094fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
200094fc:	4b0e      	ldr	r3, [pc, #56]	@ (20009538 <USBD_LL_Init+0x94>)
200094fe:	2200      	movs	r2, #0
20009500:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
20009502:	480d      	ldr	r0, [pc, #52]	@ (20009538 <USBD_LL_Init+0x94>)
20009504:	f7f9 f9ff 	bl	20002906 <HAL_PCD_Init>
20009508:	4603      	mov	r3, r0
2000950a:	2b00      	cmp	r3, #0
2000950c:	d001      	beq.n	20009512 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
2000950e:	f7f8 f8cc 	bl	200016aa <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
20009512:	2180      	movs	r1, #128	@ 0x80
20009514:	4808      	ldr	r0, [pc, #32]	@ (20009538 <USBD_LL_Init+0x94>)
20009516:	f7fa fc34 	bl	20003d82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
2000951a:	2240      	movs	r2, #64	@ 0x40
2000951c:	2100      	movs	r1, #0
2000951e:	4806      	ldr	r0, [pc, #24]	@ (20009538 <USBD_LL_Init+0x94>)
20009520:	f7fa fbe8 	bl	20003cf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
20009524:	2280      	movs	r2, #128	@ 0x80
20009526:	2101      	movs	r1, #1
20009528:	4803      	ldr	r0, [pc, #12]	@ (20009538 <USBD_LL_Init+0x94>)
2000952a:	f7fa fbe3 	bl	20003cf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
2000952e:	2300      	movs	r3, #0
}
20009530:	4618      	mov	r0, r3
20009532:	3708      	adds	r7, #8
20009534:	46bd      	mov	sp, r7
20009536:	bd80      	pop	{r7, pc}
20009538:	2000a590 	.word	0x2000a590

2000953c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
2000953c:	b580      	push	{r7, lr}
2000953e:	b084      	sub	sp, #16
20009540:	af00      	add	r7, sp, #0
20009542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
20009544:	2300      	movs	r3, #0
20009546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
20009548:	2300      	movs	r3, #0
2000954a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
2000954c:	687b      	ldr	r3, [r7, #4]
2000954e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
20009552:	4618      	mov	r0, r3
20009554:	f7f9 faed 	bl	20002b32 <HAL_PCD_Start>
20009558:	4603      	mov	r3, r0
2000955a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000955c:	7bfb      	ldrb	r3, [r7, #15]
2000955e:	4618      	mov	r0, r3
20009560:	f000 f96c 	bl	2000983c <USBD_Get_USB_Status>
20009564:	4603      	mov	r3, r0
20009566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
20009568:	7bbb      	ldrb	r3, [r7, #14]
}
2000956a:	4618      	mov	r0, r3
2000956c:	3710      	adds	r7, #16
2000956e:	46bd      	mov	sp, r7
20009570:	bd80      	pop	{r7, pc}

20009572 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
20009572:	b580      	push	{r7, lr}
20009574:	b084      	sub	sp, #16
20009576:	af00      	add	r7, sp, #0
20009578:	6078      	str	r0, [r7, #4]
2000957a:	4608      	mov	r0, r1
2000957c:	4611      	mov	r1, r2
2000957e:	461a      	mov	r2, r3
20009580:	4603      	mov	r3, r0
20009582:	70fb      	strb	r3, [r7, #3]
20009584:	460b      	mov	r3, r1
20009586:	70bb      	strb	r3, [r7, #2]
20009588:	4613      	mov	r3, r2
2000958a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000958c:	2300      	movs	r3, #0
2000958e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
20009590:	2300      	movs	r3, #0
20009592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
20009594:	687b      	ldr	r3, [r7, #4]
20009596:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000959a:	78bb      	ldrb	r3, [r7, #2]
2000959c:	883a      	ldrh	r2, [r7, #0]
2000959e:	78f9      	ldrb	r1, [r7, #3]
200095a0:	f7f9 ffdb 	bl	2000355a <HAL_PCD_EP_Open>
200095a4:	4603      	mov	r3, r0
200095a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
200095a8:	7bfb      	ldrb	r3, [r7, #15]
200095aa:	4618      	mov	r0, r3
200095ac:	f000 f946 	bl	2000983c <USBD_Get_USB_Status>
200095b0:	4603      	mov	r3, r0
200095b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
200095b4:	7bbb      	ldrb	r3, [r7, #14]
}
200095b6:	4618      	mov	r0, r3
200095b8:	3710      	adds	r7, #16
200095ba:	46bd      	mov	sp, r7
200095bc:	bd80      	pop	{r7, pc}

200095be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
200095be:	b580      	push	{r7, lr}
200095c0:	b084      	sub	sp, #16
200095c2:	af00      	add	r7, sp, #0
200095c4:	6078      	str	r0, [r7, #4]
200095c6:	460b      	mov	r3, r1
200095c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
200095ca:	2300      	movs	r3, #0
200095cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
200095ce:	2300      	movs	r3, #0
200095d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
200095d2:	687b      	ldr	r3, [r7, #4]
200095d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
200095d8:	78fa      	ldrb	r2, [r7, #3]
200095da:	4611      	mov	r1, r2
200095dc:	4618      	mov	r0, r3
200095de:	f7fa f826 	bl	2000362e <HAL_PCD_EP_Close>
200095e2:	4603      	mov	r3, r0
200095e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
200095e6:	7bfb      	ldrb	r3, [r7, #15]
200095e8:	4618      	mov	r0, r3
200095ea:	f000 f927 	bl	2000983c <USBD_Get_USB_Status>
200095ee:	4603      	mov	r3, r0
200095f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
200095f2:	7bbb      	ldrb	r3, [r7, #14]
}
200095f4:	4618      	mov	r0, r3
200095f6:	3710      	adds	r7, #16
200095f8:	46bd      	mov	sp, r7
200095fa:	bd80      	pop	{r7, pc}

200095fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
200095fc:	b580      	push	{r7, lr}
200095fe:	b084      	sub	sp, #16
20009600:	af00      	add	r7, sp, #0
20009602:	6078      	str	r0, [r7, #4]
20009604:	460b      	mov	r3, r1
20009606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
20009608:	2300      	movs	r3, #0
2000960a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000960c:	2300      	movs	r3, #0
2000960e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
20009610:	687b      	ldr	r3, [r7, #4]
20009612:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
20009616:	78fa      	ldrb	r2, [r7, #3]
20009618:	4611      	mov	r1, r2
2000961a:	4618      	mov	r0, r3
2000961c:	f7fa f8c6 	bl	200037ac <HAL_PCD_EP_SetStall>
20009620:	4603      	mov	r3, r0
20009622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
20009624:	7bfb      	ldrb	r3, [r7, #15]
20009626:	4618      	mov	r0, r3
20009628:	f000 f908 	bl	2000983c <USBD_Get_USB_Status>
2000962c:	4603      	mov	r3, r0
2000962e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
20009630:	7bbb      	ldrb	r3, [r7, #14]
}
20009632:	4618      	mov	r0, r3
20009634:	3710      	adds	r7, #16
20009636:	46bd      	mov	sp, r7
20009638:	bd80      	pop	{r7, pc}

2000963a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
2000963a:	b580      	push	{r7, lr}
2000963c:	b084      	sub	sp, #16
2000963e:	af00      	add	r7, sp, #0
20009640:	6078      	str	r0, [r7, #4]
20009642:	460b      	mov	r3, r1
20009644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
20009646:	2300      	movs	r3, #0
20009648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
2000964a:	2300      	movs	r3, #0
2000964c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
2000964e:	687b      	ldr	r3, [r7, #4]
20009650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
20009654:	78fa      	ldrb	r2, [r7, #3]
20009656:	4611      	mov	r1, r2
20009658:	4618      	mov	r0, r3
2000965a:	f7fa f90a 	bl	20003872 <HAL_PCD_EP_ClrStall>
2000965e:	4603      	mov	r3, r0
20009660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
20009662:	7bfb      	ldrb	r3, [r7, #15]
20009664:	4618      	mov	r0, r3
20009666:	f000 f8e9 	bl	2000983c <USBD_Get_USB_Status>
2000966a:	4603      	mov	r3, r0
2000966c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
2000966e:	7bbb      	ldrb	r3, [r7, #14]
}
20009670:	4618      	mov	r0, r3
20009672:	3710      	adds	r7, #16
20009674:	46bd      	mov	sp, r7
20009676:	bd80      	pop	{r7, pc}

20009678 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
20009678:	b480      	push	{r7}
2000967a:	b085      	sub	sp, #20
2000967c:	af00      	add	r7, sp, #0
2000967e:	6078      	str	r0, [r7, #4]
20009680:	460b      	mov	r3, r1
20009682:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
20009684:	687b      	ldr	r3, [r7, #4]
20009686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
2000968a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
2000968c:	f997 3003 	ldrsb.w	r3, [r7, #3]
20009690:	2b00      	cmp	r3, #0
20009692:	da0b      	bge.n	200096ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
20009694:	78fb      	ldrb	r3, [r7, #3]
20009696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2000969a:	68f9      	ldr	r1, [r7, #12]
2000969c:	4613      	mov	r3, r2
2000969e:	00db      	lsls	r3, r3, #3
200096a0:	4413      	add	r3, r2
200096a2:	009b      	lsls	r3, r3, #2
200096a4:	440b      	add	r3, r1
200096a6:	3316      	adds	r3, #22
200096a8:	781b      	ldrb	r3, [r3, #0]
200096aa:	e00b      	b.n	200096c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
200096ac:	78fb      	ldrb	r3, [r7, #3]
200096ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
200096b2:	68f9      	ldr	r1, [r7, #12]
200096b4:	4613      	mov	r3, r2
200096b6:	00db      	lsls	r3, r3, #3
200096b8:	4413      	add	r3, r2
200096ba:	009b      	lsls	r3, r3, #2
200096bc:	440b      	add	r3, r1
200096be:	f203 2356 	addw	r3, r3, #598	@ 0x256
200096c2:	781b      	ldrb	r3, [r3, #0]
  }
}
200096c4:	4618      	mov	r0, r3
200096c6:	3714      	adds	r7, #20
200096c8:	46bd      	mov	sp, r7
200096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
200096ce:	4770      	bx	lr

200096d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
200096d0:	b580      	push	{r7, lr}
200096d2:	b084      	sub	sp, #16
200096d4:	af00      	add	r7, sp, #0
200096d6:	6078      	str	r0, [r7, #4]
200096d8:	460b      	mov	r3, r1
200096da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
200096dc:	2300      	movs	r3, #0
200096de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
200096e0:	2300      	movs	r3, #0
200096e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
200096e4:	687b      	ldr	r3, [r7, #4]
200096e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
200096ea:	78fa      	ldrb	r2, [r7, #3]
200096ec:	4611      	mov	r1, r2
200096ee:	4618      	mov	r0, r3
200096f0:	f7f9 ff0f 	bl	20003512 <HAL_PCD_SetAddress>
200096f4:	4603      	mov	r3, r0
200096f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
200096f8:	7bfb      	ldrb	r3, [r7, #15]
200096fa:	4618      	mov	r0, r3
200096fc:	f000 f89e 	bl	2000983c <USBD_Get_USB_Status>
20009700:	4603      	mov	r3, r0
20009702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
20009704:	7bbb      	ldrb	r3, [r7, #14]
}
20009706:	4618      	mov	r0, r3
20009708:	3710      	adds	r7, #16
2000970a:	46bd      	mov	sp, r7
2000970c:	bd80      	pop	{r7, pc}

2000970e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
2000970e:	b580      	push	{r7, lr}
20009710:	b086      	sub	sp, #24
20009712:	af00      	add	r7, sp, #0
20009714:	60f8      	str	r0, [r7, #12]
20009716:	607a      	str	r2, [r7, #4]
20009718:	603b      	str	r3, [r7, #0]
2000971a:	460b      	mov	r3, r1
2000971c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
2000971e:	2300      	movs	r3, #0
20009720:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
20009722:	2300      	movs	r3, #0
20009724:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
20009726:	68fb      	ldr	r3, [r7, #12]
20009728:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000972c:	7af9      	ldrb	r1, [r7, #11]
2000972e:	683b      	ldr	r3, [r7, #0]
20009730:	687a      	ldr	r2, [r7, #4]
20009732:	f7fa f801 	bl	20003738 <HAL_PCD_EP_Transmit>
20009736:	4603      	mov	r3, r0
20009738:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000973a:	7dfb      	ldrb	r3, [r7, #23]
2000973c:	4618      	mov	r0, r3
2000973e:	f000 f87d 	bl	2000983c <USBD_Get_USB_Status>
20009742:	4603      	mov	r3, r0
20009744:	75bb      	strb	r3, [r7, #22]

  return usb_status;
20009746:	7dbb      	ldrb	r3, [r7, #22]
}
20009748:	4618      	mov	r0, r3
2000974a:	3718      	adds	r7, #24
2000974c:	46bd      	mov	sp, r7
2000974e:	bd80      	pop	{r7, pc}

20009750 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
20009750:	b580      	push	{r7, lr}
20009752:	b086      	sub	sp, #24
20009754:	af00      	add	r7, sp, #0
20009756:	60f8      	str	r0, [r7, #12]
20009758:	607a      	str	r2, [r7, #4]
2000975a:	603b      	str	r3, [r7, #0]
2000975c:	460b      	mov	r3, r1
2000975e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
20009760:	2300      	movs	r3, #0
20009762:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
20009764:	2300      	movs	r3, #0
20009766:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
20009768:	68fb      	ldr	r3, [r7, #12]
2000976a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
2000976e:	7af9      	ldrb	r1, [r7, #11]
20009770:	683b      	ldr	r3, [r7, #0]
20009772:	687a      	ldr	r2, [r7, #4]
20009774:	f7f9 ffa5 	bl	200036c2 <HAL_PCD_EP_Receive>
20009778:	4603      	mov	r3, r0
2000977a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
2000977c:	7dfb      	ldrb	r3, [r7, #23]
2000977e:	4618      	mov	r0, r3
20009780:	f000 f85c 	bl	2000983c <USBD_Get_USB_Status>
20009784:	4603      	mov	r3, r0
20009786:	75bb      	strb	r3, [r7, #22]

  return usb_status;
20009788:	7dbb      	ldrb	r3, [r7, #22]
}
2000978a:	4618      	mov	r0, r3
2000978c:	3718      	adds	r7, #24
2000978e:	46bd      	mov	sp, r7
20009790:	bd80      	pop	{r7, pc}
	...

20009794 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
20009794:	b580      	push	{r7, lr}
20009796:	b082      	sub	sp, #8
20009798:	af00      	add	r7, sp, #0
2000979a:	6078      	str	r0, [r7, #4]
2000979c:	460b      	mov	r3, r1
2000979e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
200097a0:	78fb      	ldrb	r3, [r7, #3]
200097a2:	2b00      	cmp	r3, #0
200097a4:	d002      	beq.n	200097ac <HAL_PCDEx_LPM_Callback+0x18>
200097a6:	2b01      	cmp	r3, #1
200097a8:	d01f      	beq.n	200097ea <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
200097aa:	e03b      	b.n	20009824 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
200097ac:	687b      	ldr	r3, [r7, #4]
200097ae:	7adb      	ldrb	r3, [r3, #11]
200097b0:	2b00      	cmp	r3, #0
200097b2:	d007      	beq.n	200097c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
200097b4:	f000 f83c 	bl	20009830 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
200097b8:	4b1c      	ldr	r3, [pc, #112]	@ (2000982c <HAL_PCDEx_LPM_Callback+0x98>)
200097ba:	691b      	ldr	r3, [r3, #16]
200097bc:	4a1b      	ldr	r2, [pc, #108]	@ (2000982c <HAL_PCDEx_LPM_Callback+0x98>)
200097be:	f023 0306 	bic.w	r3, r3, #6
200097c2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
200097c4:	687b      	ldr	r3, [r7, #4]
200097c6:	681b      	ldr	r3, [r3, #0]
200097c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
200097cc:	681b      	ldr	r3, [r3, #0]
200097ce:	687a      	ldr	r2, [r7, #4]
200097d0:	6812      	ldr	r2, [r2, #0]
200097d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
200097d6:	f023 0301 	bic.w	r3, r3, #1
200097da:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
200097dc:	687b      	ldr	r3, [r7, #4]
200097de:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
200097e2:	4618      	mov	r0, r3
200097e4:	f7fe fb04 	bl	20007df0 <USBD_LL_Resume>
    break;
200097e8:	e01c      	b.n	20009824 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
200097ea:	687b      	ldr	r3, [r7, #4]
200097ec:	681b      	ldr	r3, [r3, #0]
200097ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
200097f2:	681b      	ldr	r3, [r3, #0]
200097f4:	687a      	ldr	r2, [r7, #4]
200097f6:	6812      	ldr	r2, [r2, #0]
200097f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
200097fc:	f043 0301 	orr.w	r3, r3, #1
20009800:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
20009802:	687b      	ldr	r3, [r7, #4]
20009804:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
20009808:	4618      	mov	r0, r3
2000980a:	f7fe fad5 	bl	20007db8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
2000980e:	687b      	ldr	r3, [r7, #4]
20009810:	7adb      	ldrb	r3, [r3, #11]
20009812:	2b00      	cmp	r3, #0
20009814:	d005      	beq.n	20009822 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
20009816:	4b05      	ldr	r3, [pc, #20]	@ (2000982c <HAL_PCDEx_LPM_Callback+0x98>)
20009818:	691b      	ldr	r3, [r3, #16]
2000981a:	4a04      	ldr	r2, [pc, #16]	@ (2000982c <HAL_PCDEx_LPM_Callback+0x98>)
2000981c:	f043 0306 	orr.w	r3, r3, #6
20009820:	6113      	str	r3, [r2, #16]
    break;
20009822:	bf00      	nop
}
20009824:	bf00      	nop
20009826:	3708      	adds	r7, #8
20009828:	46bd      	mov	sp, r7
2000982a:	bd80      	pop	{r7, pc}
2000982c:	e000ed00 	.word	0xe000ed00

20009830 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
20009830:	b580      	push	{r7, lr}
20009832:	af00      	add	r7, sp, #0
  SystemClock_Config();
20009834:	f7f7 fbfc 	bl	20001030 <SystemClock_Config>
}
20009838:	bf00      	nop
2000983a:	bd80      	pop	{r7, pc}

2000983c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
2000983c:	b480      	push	{r7}
2000983e:	b085      	sub	sp, #20
20009840:	af00      	add	r7, sp, #0
20009842:	4603      	mov	r3, r0
20009844:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
20009846:	2300      	movs	r3, #0
20009848:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
2000984a:	79fb      	ldrb	r3, [r7, #7]
2000984c:	2b03      	cmp	r3, #3
2000984e:	d817      	bhi.n	20009880 <USBD_Get_USB_Status+0x44>
20009850:	a201      	add	r2, pc, #4	@ (adr r2, 20009858 <USBD_Get_USB_Status+0x1c>)
20009852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20009856:	bf00      	nop
20009858:	20009869 	.word	0x20009869
2000985c:	2000986f 	.word	0x2000986f
20009860:	20009875 	.word	0x20009875
20009864:	2000987b 	.word	0x2000987b
  {
    case HAL_OK :
      usb_status = USBD_OK;
20009868:	2300      	movs	r3, #0
2000986a:	73fb      	strb	r3, [r7, #15]
    break;
2000986c:	e00b      	b.n	20009886 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
2000986e:	2303      	movs	r3, #3
20009870:	73fb      	strb	r3, [r7, #15]
    break;
20009872:	e008      	b.n	20009886 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
20009874:	2301      	movs	r3, #1
20009876:	73fb      	strb	r3, [r7, #15]
    break;
20009878:	e005      	b.n	20009886 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
2000987a:	2303      	movs	r3, #3
2000987c:	73fb      	strb	r3, [r7, #15]
    break;
2000987e:	e002      	b.n	20009886 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
20009880:	2303      	movs	r3, #3
20009882:	73fb      	strb	r3, [r7, #15]
    break;
20009884:	bf00      	nop
  }
  return usb_status;
20009886:	7bfb      	ldrb	r3, [r7, #15]
}
20009888:	4618      	mov	r0, r3
2000988a:	3714      	adds	r7, #20
2000988c:	46bd      	mov	sp, r7
2000988e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009892:	4770      	bx	lr

20009894 <malloc>:
20009894:	4b02      	ldr	r3, [pc, #8]	@ (200098a0 <malloc+0xc>)
20009896:	4601      	mov	r1, r0
20009898:	6818      	ldr	r0, [r3, #0]
2000989a:	f000 b82d 	b.w	200098f8 <_malloc_r>
2000989e:	bf00      	nop
200098a0:	20009ca8 	.word	0x20009ca8

200098a4 <free>:
200098a4:	4b02      	ldr	r3, [pc, #8]	@ (200098b0 <free+0xc>)
200098a6:	4601      	mov	r1, r0
200098a8:	6818      	ldr	r0, [r3, #0]
200098aa:	f000 b8f5 	b.w	20009a98 <_free_r>
200098ae:	bf00      	nop
200098b0:	20009ca8 	.word	0x20009ca8

200098b4 <sbrk_aligned>:
200098b4:	b570      	push	{r4, r5, r6, lr}
200098b6:	4e0f      	ldr	r6, [pc, #60]	@ (200098f4 <sbrk_aligned+0x40>)
200098b8:	460c      	mov	r4, r1
200098ba:	6831      	ldr	r1, [r6, #0]
200098bc:	4605      	mov	r5, r0
200098be:	b911      	cbnz	r1, 200098c6 <sbrk_aligned+0x12>
200098c0:	f000 f8ae 	bl	20009a20 <_sbrk_r>
200098c4:	6030      	str	r0, [r6, #0]
200098c6:	4621      	mov	r1, r4
200098c8:	4628      	mov	r0, r5
200098ca:	f000 f8a9 	bl	20009a20 <_sbrk_r>
200098ce:	1c43      	adds	r3, r0, #1
200098d0:	d103      	bne.n	200098da <sbrk_aligned+0x26>
200098d2:	f04f 34ff 	mov.w	r4, #4294967295
200098d6:	4620      	mov	r0, r4
200098d8:	bd70      	pop	{r4, r5, r6, pc}
200098da:	1cc4      	adds	r4, r0, #3
200098dc:	f024 0403 	bic.w	r4, r4, #3
200098e0:	42a0      	cmp	r0, r4
200098e2:	d0f8      	beq.n	200098d6 <sbrk_aligned+0x22>
200098e4:	1a21      	subs	r1, r4, r0
200098e6:	4628      	mov	r0, r5
200098e8:	f000 f89a 	bl	20009a20 <_sbrk_r>
200098ec:	3001      	adds	r0, #1
200098ee:	d1f2      	bne.n	200098d6 <sbrk_aligned+0x22>
200098f0:	e7ef      	b.n	200098d2 <sbrk_aligned+0x1e>
200098f2:	bf00      	nop
200098f4:	2000aa70 	.word	0x2000aa70

200098f8 <_malloc_r>:
200098f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
200098fc:	1ccd      	adds	r5, r1, #3
200098fe:	f025 0503 	bic.w	r5, r5, #3
20009902:	3508      	adds	r5, #8
20009904:	2d0c      	cmp	r5, #12
20009906:	bf38      	it	cc
20009908:	250c      	movcc	r5, #12
2000990a:	2d00      	cmp	r5, #0
2000990c:	4606      	mov	r6, r0
2000990e:	db01      	blt.n	20009914 <_malloc_r+0x1c>
20009910:	42a9      	cmp	r1, r5
20009912:	d904      	bls.n	2000991e <_malloc_r+0x26>
20009914:	230c      	movs	r3, #12
20009916:	6033      	str	r3, [r6, #0]
20009918:	2000      	movs	r0, #0
2000991a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000991e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 200099f4 <_malloc_r+0xfc>
20009922:	f000 f869 	bl	200099f8 <__malloc_lock>
20009926:	f8d8 3000 	ldr.w	r3, [r8]
2000992a:	461c      	mov	r4, r3
2000992c:	bb44      	cbnz	r4, 20009980 <_malloc_r+0x88>
2000992e:	4629      	mov	r1, r5
20009930:	4630      	mov	r0, r6
20009932:	f7ff ffbf 	bl	200098b4 <sbrk_aligned>
20009936:	1c43      	adds	r3, r0, #1
20009938:	4604      	mov	r4, r0
2000993a:	d158      	bne.n	200099ee <_malloc_r+0xf6>
2000993c:	f8d8 4000 	ldr.w	r4, [r8]
20009940:	4627      	mov	r7, r4
20009942:	2f00      	cmp	r7, #0
20009944:	d143      	bne.n	200099ce <_malloc_r+0xd6>
20009946:	2c00      	cmp	r4, #0
20009948:	d04b      	beq.n	200099e2 <_malloc_r+0xea>
2000994a:	6823      	ldr	r3, [r4, #0]
2000994c:	4639      	mov	r1, r7
2000994e:	4630      	mov	r0, r6
20009950:	eb04 0903 	add.w	r9, r4, r3
20009954:	f000 f864 	bl	20009a20 <_sbrk_r>
20009958:	4581      	cmp	r9, r0
2000995a:	d142      	bne.n	200099e2 <_malloc_r+0xea>
2000995c:	6821      	ldr	r1, [r4, #0]
2000995e:	1a6d      	subs	r5, r5, r1
20009960:	4629      	mov	r1, r5
20009962:	4630      	mov	r0, r6
20009964:	f7ff ffa6 	bl	200098b4 <sbrk_aligned>
20009968:	3001      	adds	r0, #1
2000996a:	d03a      	beq.n	200099e2 <_malloc_r+0xea>
2000996c:	6823      	ldr	r3, [r4, #0]
2000996e:	442b      	add	r3, r5
20009970:	6023      	str	r3, [r4, #0]
20009972:	f8d8 3000 	ldr.w	r3, [r8]
20009976:	685a      	ldr	r2, [r3, #4]
20009978:	bb62      	cbnz	r2, 200099d4 <_malloc_r+0xdc>
2000997a:	f8c8 7000 	str.w	r7, [r8]
2000997e:	e00f      	b.n	200099a0 <_malloc_r+0xa8>
20009980:	6822      	ldr	r2, [r4, #0]
20009982:	1b52      	subs	r2, r2, r5
20009984:	d420      	bmi.n	200099c8 <_malloc_r+0xd0>
20009986:	2a0b      	cmp	r2, #11
20009988:	d917      	bls.n	200099ba <_malloc_r+0xc2>
2000998a:	1961      	adds	r1, r4, r5
2000998c:	42a3      	cmp	r3, r4
2000998e:	6025      	str	r5, [r4, #0]
20009990:	bf18      	it	ne
20009992:	6059      	strne	r1, [r3, #4]
20009994:	6863      	ldr	r3, [r4, #4]
20009996:	bf08      	it	eq
20009998:	f8c8 1000 	streq.w	r1, [r8]
2000999c:	5162      	str	r2, [r4, r5]
2000999e:	604b      	str	r3, [r1, #4]
200099a0:	4630      	mov	r0, r6
200099a2:	f000 f82f 	bl	20009a04 <__malloc_unlock>
200099a6:	f104 000b 	add.w	r0, r4, #11
200099aa:	1d23      	adds	r3, r4, #4
200099ac:	f020 0007 	bic.w	r0, r0, #7
200099b0:	1ac2      	subs	r2, r0, r3
200099b2:	bf1c      	itt	ne
200099b4:	1a1b      	subne	r3, r3, r0
200099b6:	50a3      	strne	r3, [r4, r2]
200099b8:	e7af      	b.n	2000991a <_malloc_r+0x22>
200099ba:	6862      	ldr	r2, [r4, #4]
200099bc:	42a3      	cmp	r3, r4
200099be:	bf0c      	ite	eq
200099c0:	f8c8 2000 	streq.w	r2, [r8]
200099c4:	605a      	strne	r2, [r3, #4]
200099c6:	e7eb      	b.n	200099a0 <_malloc_r+0xa8>
200099c8:	4623      	mov	r3, r4
200099ca:	6864      	ldr	r4, [r4, #4]
200099cc:	e7ae      	b.n	2000992c <_malloc_r+0x34>
200099ce:	463c      	mov	r4, r7
200099d0:	687f      	ldr	r7, [r7, #4]
200099d2:	e7b6      	b.n	20009942 <_malloc_r+0x4a>
200099d4:	461a      	mov	r2, r3
200099d6:	685b      	ldr	r3, [r3, #4]
200099d8:	42a3      	cmp	r3, r4
200099da:	d1fb      	bne.n	200099d4 <_malloc_r+0xdc>
200099dc:	2300      	movs	r3, #0
200099de:	6053      	str	r3, [r2, #4]
200099e0:	e7de      	b.n	200099a0 <_malloc_r+0xa8>
200099e2:	230c      	movs	r3, #12
200099e4:	6033      	str	r3, [r6, #0]
200099e6:	4630      	mov	r0, r6
200099e8:	f000 f80c 	bl	20009a04 <__malloc_unlock>
200099ec:	e794      	b.n	20009918 <_malloc_r+0x20>
200099ee:	6005      	str	r5, [r0, #0]
200099f0:	e7d6      	b.n	200099a0 <_malloc_r+0xa8>
200099f2:	bf00      	nop
200099f4:	2000aa74 	.word	0x2000aa74

200099f8 <__malloc_lock>:
200099f8:	4801      	ldr	r0, [pc, #4]	@ (20009a00 <__malloc_lock+0x8>)
200099fa:	f000 b84b 	b.w	20009a94 <__retarget_lock_acquire_recursive>
200099fe:	bf00      	nop
20009a00:	2000abb4 	.word	0x2000abb4

20009a04 <__malloc_unlock>:
20009a04:	4801      	ldr	r0, [pc, #4]	@ (20009a0c <__malloc_unlock+0x8>)
20009a06:	f000 b846 	b.w	20009a96 <__retarget_lock_release_recursive>
20009a0a:	bf00      	nop
20009a0c:	2000abb4 	.word	0x2000abb4

20009a10 <memset>:
20009a10:	4402      	add	r2, r0
20009a12:	4603      	mov	r3, r0
20009a14:	4293      	cmp	r3, r2
20009a16:	d100      	bne.n	20009a1a <memset+0xa>
20009a18:	4770      	bx	lr
20009a1a:	f803 1b01 	strb.w	r1, [r3], #1
20009a1e:	e7f9      	b.n	20009a14 <memset+0x4>

20009a20 <_sbrk_r>:
20009a20:	b538      	push	{r3, r4, r5, lr}
20009a22:	4d06      	ldr	r5, [pc, #24]	@ (20009a3c <_sbrk_r+0x1c>)
20009a24:	2300      	movs	r3, #0
20009a26:	4604      	mov	r4, r0
20009a28:	4608      	mov	r0, r1
20009a2a:	602b      	str	r3, [r5, #0]
20009a2c:	f7f8 f854 	bl	20001ad8 <_sbrk>
20009a30:	1c43      	adds	r3, r0, #1
20009a32:	d102      	bne.n	20009a3a <_sbrk_r+0x1a>
20009a34:	682b      	ldr	r3, [r5, #0]
20009a36:	b103      	cbz	r3, 20009a3a <_sbrk_r+0x1a>
20009a38:	6023      	str	r3, [r4, #0]
20009a3a:	bd38      	pop	{r3, r4, r5, pc}
20009a3c:	2000abb0 	.word	0x2000abb0

20009a40 <__errno>:
20009a40:	4b01      	ldr	r3, [pc, #4]	@ (20009a48 <__errno+0x8>)
20009a42:	6818      	ldr	r0, [r3, #0]
20009a44:	4770      	bx	lr
20009a46:	bf00      	nop
20009a48:	20009ca8 	.word	0x20009ca8

20009a4c <__libc_init_array>:
20009a4c:	b570      	push	{r4, r5, r6, lr}
20009a4e:	4d0d      	ldr	r5, [pc, #52]	@ (20009a84 <__libc_init_array+0x38>)
20009a50:	4c0d      	ldr	r4, [pc, #52]	@ (20009a88 <__libc_init_array+0x3c>)
20009a52:	1b64      	subs	r4, r4, r5
20009a54:	10a4      	asrs	r4, r4, #2
20009a56:	2600      	movs	r6, #0
20009a58:	42a6      	cmp	r6, r4
20009a5a:	d109      	bne.n	20009a70 <__libc_init_array+0x24>
20009a5c:	4d0b      	ldr	r5, [pc, #44]	@ (20009a8c <__libc_init_array+0x40>)
20009a5e:	4c0c      	ldr	r4, [pc, #48]	@ (20009a90 <__libc_init_array+0x44>)
20009a60:	f000 f864 	bl	20009b2c <_init>
20009a64:	1b64      	subs	r4, r4, r5
20009a66:	10a4      	asrs	r4, r4, #2
20009a68:	2600      	movs	r6, #0
20009a6a:	42a6      	cmp	r6, r4
20009a6c:	d105      	bne.n	20009a7a <__libc_init_array+0x2e>
20009a6e:	bd70      	pop	{r4, r5, r6, pc}
20009a70:	f855 3b04 	ldr.w	r3, [r5], #4
20009a74:	4798      	blx	r3
20009a76:	3601      	adds	r6, #1
20009a78:	e7ee      	b.n	20009a58 <__libc_init_array+0xc>
20009a7a:	f855 3b04 	ldr.w	r3, [r5], #4
20009a7e:	4798      	blx	r3
20009a80:	3601      	adds	r6, #1
20009a82:	e7f2      	b.n	20009a6a <__libc_init_array+0x1e>
20009a84:	20009bb0 	.word	0x20009bb0
20009a88:	20009bb0 	.word	0x20009bb0
20009a8c:	20009bb0 	.word	0x20009bb0
20009a90:	20009bb4 	.word	0x20009bb4

20009a94 <__retarget_lock_acquire_recursive>:
20009a94:	4770      	bx	lr

20009a96 <__retarget_lock_release_recursive>:
20009a96:	4770      	bx	lr

20009a98 <_free_r>:
20009a98:	b538      	push	{r3, r4, r5, lr}
20009a9a:	4605      	mov	r5, r0
20009a9c:	2900      	cmp	r1, #0
20009a9e:	d041      	beq.n	20009b24 <_free_r+0x8c>
20009aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
20009aa4:	1f0c      	subs	r4, r1, #4
20009aa6:	2b00      	cmp	r3, #0
20009aa8:	bfb8      	it	lt
20009aaa:	18e4      	addlt	r4, r4, r3
20009aac:	f7ff ffa4 	bl	200099f8 <__malloc_lock>
20009ab0:	4a1d      	ldr	r2, [pc, #116]	@ (20009b28 <_free_r+0x90>)
20009ab2:	6813      	ldr	r3, [r2, #0]
20009ab4:	b933      	cbnz	r3, 20009ac4 <_free_r+0x2c>
20009ab6:	6063      	str	r3, [r4, #4]
20009ab8:	6014      	str	r4, [r2, #0]
20009aba:	4628      	mov	r0, r5
20009abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
20009ac0:	f7ff bfa0 	b.w	20009a04 <__malloc_unlock>
20009ac4:	42a3      	cmp	r3, r4
20009ac6:	d908      	bls.n	20009ada <_free_r+0x42>
20009ac8:	6820      	ldr	r0, [r4, #0]
20009aca:	1821      	adds	r1, r4, r0
20009acc:	428b      	cmp	r3, r1
20009ace:	bf01      	itttt	eq
20009ad0:	6819      	ldreq	r1, [r3, #0]
20009ad2:	685b      	ldreq	r3, [r3, #4]
20009ad4:	1809      	addeq	r1, r1, r0
20009ad6:	6021      	streq	r1, [r4, #0]
20009ad8:	e7ed      	b.n	20009ab6 <_free_r+0x1e>
20009ada:	461a      	mov	r2, r3
20009adc:	685b      	ldr	r3, [r3, #4]
20009ade:	b10b      	cbz	r3, 20009ae4 <_free_r+0x4c>
20009ae0:	42a3      	cmp	r3, r4
20009ae2:	d9fa      	bls.n	20009ada <_free_r+0x42>
20009ae4:	6811      	ldr	r1, [r2, #0]
20009ae6:	1850      	adds	r0, r2, r1
20009ae8:	42a0      	cmp	r0, r4
20009aea:	d10b      	bne.n	20009b04 <_free_r+0x6c>
20009aec:	6820      	ldr	r0, [r4, #0]
20009aee:	4401      	add	r1, r0
20009af0:	1850      	adds	r0, r2, r1
20009af2:	4283      	cmp	r3, r0
20009af4:	6011      	str	r1, [r2, #0]
20009af6:	d1e0      	bne.n	20009aba <_free_r+0x22>
20009af8:	6818      	ldr	r0, [r3, #0]
20009afa:	685b      	ldr	r3, [r3, #4]
20009afc:	6053      	str	r3, [r2, #4]
20009afe:	4408      	add	r0, r1
20009b00:	6010      	str	r0, [r2, #0]
20009b02:	e7da      	b.n	20009aba <_free_r+0x22>
20009b04:	d902      	bls.n	20009b0c <_free_r+0x74>
20009b06:	230c      	movs	r3, #12
20009b08:	602b      	str	r3, [r5, #0]
20009b0a:	e7d6      	b.n	20009aba <_free_r+0x22>
20009b0c:	6820      	ldr	r0, [r4, #0]
20009b0e:	1821      	adds	r1, r4, r0
20009b10:	428b      	cmp	r3, r1
20009b12:	bf04      	itt	eq
20009b14:	6819      	ldreq	r1, [r3, #0]
20009b16:	685b      	ldreq	r3, [r3, #4]
20009b18:	6063      	str	r3, [r4, #4]
20009b1a:	bf04      	itt	eq
20009b1c:	1809      	addeq	r1, r1, r0
20009b1e:	6021      	streq	r1, [r4, #0]
20009b20:	6054      	str	r4, [r2, #4]
20009b22:	e7ca      	b.n	20009aba <_free_r+0x22>
20009b24:	bd38      	pop	{r3, r4, r5, pc}
20009b26:	bf00      	nop
20009b28:	2000aa74 	.word	0x2000aa74

20009b2c <_init>:
20009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20009b2e:	bf00      	nop
20009b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
20009b32:	bc08      	pop	{r3}
20009b34:	469e      	mov	lr, r3
20009b36:	4770      	bx	lr

20009b38 <_fini>:
20009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20009b3a:	bf00      	nop
20009b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20009b3e:	bc08      	pop	{r3}
20009b40:	469e      	mov	lr, r3
20009b42:	4770      	bx	lr
